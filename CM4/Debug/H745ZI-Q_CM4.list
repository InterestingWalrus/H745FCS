
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008214  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  081084b4  081084b4  000184b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810851c  0810851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08108524  08108524  00018524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08108528  08108528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  0810852c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004a78  10000010  0810853c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10004a88  0810853c  00024a88  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026be6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003e6e  00000000  00000000  00046c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017d8  00000000  00000000  0004aa98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001660  00000000  00000000  0004c270  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a5b4  00000000  00000000  0004d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00014601  00000000  00000000  00087e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0018895d  00000000  00000000  0009c485  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00224de2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000064ac  00000000  00000000  00224e60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000010 	.word	0x10000010
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810849c 	.word	0x0810849c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000014 	.word	0x10000014
 81002dc:	0810849c 	.word	0x0810849c

081002e0 <__aeabi_uldivmod>:
 81002e0:	b953      	cbnz	r3, 81002f8 <__aeabi_uldivmod+0x18>
 81002e2:	b94a      	cbnz	r2, 81002f8 <__aeabi_uldivmod+0x18>
 81002e4:	2900      	cmp	r1, #0
 81002e6:	bf08      	it	eq
 81002e8:	2800      	cmpeq	r0, #0
 81002ea:	bf1c      	itt	ne
 81002ec:	f04f 31ff 	movne.w	r1, #4294967295
 81002f0:	f04f 30ff 	movne.w	r0, #4294967295
 81002f4:	f000 b972 	b.w	81005dc <__aeabi_idiv0>
 81002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 81002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100300:	f000 f806 	bl	8100310 <__udivmoddi4>
 8100304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810030c:	b004      	add	sp, #16
 810030e:	4770      	bx	lr

08100310 <__udivmoddi4>:
 8100310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100314:	9e08      	ldr	r6, [sp, #32]
 8100316:	4604      	mov	r4, r0
 8100318:	4688      	mov	r8, r1
 810031a:	2b00      	cmp	r3, #0
 810031c:	d14b      	bne.n	81003b6 <__udivmoddi4+0xa6>
 810031e:	428a      	cmp	r2, r1
 8100320:	4615      	mov	r5, r2
 8100322:	d967      	bls.n	81003f4 <__udivmoddi4+0xe4>
 8100324:	fab2 f282 	clz	r2, r2
 8100328:	b14a      	cbz	r2, 810033e <__udivmoddi4+0x2e>
 810032a:	f1c2 0720 	rsb	r7, r2, #32
 810032e:	fa01 f302 	lsl.w	r3, r1, r2
 8100332:	fa20 f707 	lsr.w	r7, r0, r7
 8100336:	4095      	lsls	r5, r2
 8100338:	ea47 0803 	orr.w	r8, r7, r3
 810033c:	4094      	lsls	r4, r2
 810033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100342:	0c23      	lsrs	r3, r4, #16
 8100344:	fbb8 f7fe 	udiv	r7, r8, lr
 8100348:	fa1f fc85 	uxth.w	ip, r5
 810034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8100350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100354:	fb07 f10c 	mul.w	r1, r7, ip
 8100358:	4299      	cmp	r1, r3
 810035a:	d909      	bls.n	8100370 <__udivmoddi4+0x60>
 810035c:	18eb      	adds	r3, r5, r3
 810035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8100362:	f080 811b 	bcs.w	810059c <__udivmoddi4+0x28c>
 8100366:	4299      	cmp	r1, r3
 8100368:	f240 8118 	bls.w	810059c <__udivmoddi4+0x28c>
 810036c:	3f02      	subs	r7, #2
 810036e:	442b      	add	r3, r5
 8100370:	1a5b      	subs	r3, r3, r1
 8100372:	b2a4      	uxth	r4, r4
 8100374:	fbb3 f0fe 	udiv	r0, r3, lr
 8100378:	fb0e 3310 	mls	r3, lr, r0, r3
 810037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100380:	fb00 fc0c 	mul.w	ip, r0, ip
 8100384:	45a4      	cmp	ip, r4
 8100386:	d909      	bls.n	810039c <__udivmoddi4+0x8c>
 8100388:	192c      	adds	r4, r5, r4
 810038a:	f100 33ff 	add.w	r3, r0, #4294967295
 810038e:	f080 8107 	bcs.w	81005a0 <__udivmoddi4+0x290>
 8100392:	45a4      	cmp	ip, r4
 8100394:	f240 8104 	bls.w	81005a0 <__udivmoddi4+0x290>
 8100398:	3802      	subs	r0, #2
 810039a:	442c      	add	r4, r5
 810039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 81003a0:	eba4 040c 	sub.w	r4, r4, ip
 81003a4:	2700      	movs	r7, #0
 81003a6:	b11e      	cbz	r6, 81003b0 <__udivmoddi4+0xa0>
 81003a8:	40d4      	lsrs	r4, r2
 81003aa:	2300      	movs	r3, #0
 81003ac:	e9c6 4300 	strd	r4, r3, [r6]
 81003b0:	4639      	mov	r1, r7
 81003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b6:	428b      	cmp	r3, r1
 81003b8:	d909      	bls.n	81003ce <__udivmoddi4+0xbe>
 81003ba:	2e00      	cmp	r6, #0
 81003bc:	f000 80eb 	beq.w	8100596 <__udivmoddi4+0x286>
 81003c0:	2700      	movs	r7, #0
 81003c2:	e9c6 0100 	strd	r0, r1, [r6]
 81003c6:	4638      	mov	r0, r7
 81003c8:	4639      	mov	r1, r7
 81003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ce:	fab3 f783 	clz	r7, r3
 81003d2:	2f00      	cmp	r7, #0
 81003d4:	d147      	bne.n	8100466 <__udivmoddi4+0x156>
 81003d6:	428b      	cmp	r3, r1
 81003d8:	d302      	bcc.n	81003e0 <__udivmoddi4+0xd0>
 81003da:	4282      	cmp	r2, r0
 81003dc:	f200 80fa 	bhi.w	81005d4 <__udivmoddi4+0x2c4>
 81003e0:	1a84      	subs	r4, r0, r2
 81003e2:	eb61 0303 	sbc.w	r3, r1, r3
 81003e6:	2001      	movs	r0, #1
 81003e8:	4698      	mov	r8, r3
 81003ea:	2e00      	cmp	r6, #0
 81003ec:	d0e0      	beq.n	81003b0 <__udivmoddi4+0xa0>
 81003ee:	e9c6 4800 	strd	r4, r8, [r6]
 81003f2:	e7dd      	b.n	81003b0 <__udivmoddi4+0xa0>
 81003f4:	b902      	cbnz	r2, 81003f8 <__udivmoddi4+0xe8>
 81003f6:	deff      	udf	#255	; 0xff
 81003f8:	fab2 f282 	clz	r2, r2
 81003fc:	2a00      	cmp	r2, #0
 81003fe:	f040 808f 	bne.w	8100520 <__udivmoddi4+0x210>
 8100402:	1b49      	subs	r1, r1, r5
 8100404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100408:	fa1f f885 	uxth.w	r8, r5
 810040c:	2701      	movs	r7, #1
 810040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8100412:	0c23      	lsrs	r3, r4, #16
 8100414:	fb0e 111c 	mls	r1, lr, ip, r1
 8100418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810041c:	fb08 f10c 	mul.w	r1, r8, ip
 8100420:	4299      	cmp	r1, r3
 8100422:	d907      	bls.n	8100434 <__udivmoddi4+0x124>
 8100424:	18eb      	adds	r3, r5, r3
 8100426:	f10c 30ff 	add.w	r0, ip, #4294967295
 810042a:	d202      	bcs.n	8100432 <__udivmoddi4+0x122>
 810042c:	4299      	cmp	r1, r3
 810042e:	f200 80cd 	bhi.w	81005cc <__udivmoddi4+0x2bc>
 8100432:	4684      	mov	ip, r0
 8100434:	1a59      	subs	r1, r3, r1
 8100436:	b2a3      	uxth	r3, r4
 8100438:	fbb1 f0fe 	udiv	r0, r1, lr
 810043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8100440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100444:	fb08 f800 	mul.w	r8, r8, r0
 8100448:	45a0      	cmp	r8, r4
 810044a:	d907      	bls.n	810045c <__udivmoddi4+0x14c>
 810044c:	192c      	adds	r4, r5, r4
 810044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8100452:	d202      	bcs.n	810045a <__udivmoddi4+0x14a>
 8100454:	45a0      	cmp	r8, r4
 8100456:	f200 80b6 	bhi.w	81005c6 <__udivmoddi4+0x2b6>
 810045a:	4618      	mov	r0, r3
 810045c:	eba4 0408 	sub.w	r4, r4, r8
 8100460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100464:	e79f      	b.n	81003a6 <__udivmoddi4+0x96>
 8100466:	f1c7 0c20 	rsb	ip, r7, #32
 810046a:	40bb      	lsls	r3, r7
 810046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100470:	ea4e 0e03 	orr.w	lr, lr, r3
 8100474:	fa01 f407 	lsl.w	r4, r1, r7
 8100478:	fa20 f50c 	lsr.w	r5, r0, ip
 810047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8100480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100484:	4325      	orrs	r5, r4
 8100486:	fbb3 f9f8 	udiv	r9, r3, r8
 810048a:	0c2c      	lsrs	r4, r5, #16
 810048c:	fb08 3319 	mls	r3, r8, r9, r3
 8100490:	fa1f fa8e 	uxth.w	sl, lr
 8100494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100498:	fb09 f40a 	mul.w	r4, r9, sl
 810049c:	429c      	cmp	r4, r3
 810049e:	fa02 f207 	lsl.w	r2, r2, r7
 81004a2:	fa00 f107 	lsl.w	r1, r0, r7
 81004a6:	d90b      	bls.n	81004c0 <__udivmoddi4+0x1b0>
 81004a8:	eb1e 0303 	adds.w	r3, lr, r3
 81004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 81004b0:	f080 8087 	bcs.w	81005c2 <__udivmoddi4+0x2b2>
 81004b4:	429c      	cmp	r4, r3
 81004b6:	f240 8084 	bls.w	81005c2 <__udivmoddi4+0x2b2>
 81004ba:	f1a9 0902 	sub.w	r9, r9, #2
 81004be:	4473      	add	r3, lr
 81004c0:	1b1b      	subs	r3, r3, r4
 81004c2:	b2ad      	uxth	r5, r5
 81004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 81004c8:	fb08 3310 	mls	r3, r8, r0, r3
 81004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 81004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 81004d4:	45a2      	cmp	sl, r4
 81004d6:	d908      	bls.n	81004ea <__udivmoddi4+0x1da>
 81004d8:	eb1e 0404 	adds.w	r4, lr, r4
 81004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 81004e0:	d26b      	bcs.n	81005ba <__udivmoddi4+0x2aa>
 81004e2:	45a2      	cmp	sl, r4
 81004e4:	d969      	bls.n	81005ba <__udivmoddi4+0x2aa>
 81004e6:	3802      	subs	r0, #2
 81004e8:	4474      	add	r4, lr
 81004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81004ee:	fba0 8902 	umull	r8, r9, r0, r2
 81004f2:	eba4 040a 	sub.w	r4, r4, sl
 81004f6:	454c      	cmp	r4, r9
 81004f8:	46c2      	mov	sl, r8
 81004fa:	464b      	mov	r3, r9
 81004fc:	d354      	bcc.n	81005a8 <__udivmoddi4+0x298>
 81004fe:	d051      	beq.n	81005a4 <__udivmoddi4+0x294>
 8100500:	2e00      	cmp	r6, #0
 8100502:	d069      	beq.n	81005d8 <__udivmoddi4+0x2c8>
 8100504:	ebb1 050a 	subs.w	r5, r1, sl
 8100508:	eb64 0403 	sbc.w	r4, r4, r3
 810050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100510:	40fd      	lsrs	r5, r7
 8100512:	40fc      	lsrs	r4, r7
 8100514:	ea4c 0505 	orr.w	r5, ip, r5
 8100518:	e9c6 5400 	strd	r5, r4, [r6]
 810051c:	2700      	movs	r7, #0
 810051e:	e747      	b.n	81003b0 <__udivmoddi4+0xa0>
 8100520:	f1c2 0320 	rsb	r3, r2, #32
 8100524:	fa20 f703 	lsr.w	r7, r0, r3
 8100528:	4095      	lsls	r5, r2
 810052a:	fa01 f002 	lsl.w	r0, r1, r2
 810052e:	fa21 f303 	lsr.w	r3, r1, r3
 8100532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100536:	4338      	orrs	r0, r7
 8100538:	0c01      	lsrs	r1, r0, #16
 810053a:	fbb3 f7fe 	udiv	r7, r3, lr
 810053e:	fa1f f885 	uxth.w	r8, r5
 8100542:	fb0e 3317 	mls	r3, lr, r7, r3
 8100546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810054a:	fb07 f308 	mul.w	r3, r7, r8
 810054e:	428b      	cmp	r3, r1
 8100550:	fa04 f402 	lsl.w	r4, r4, r2
 8100554:	d907      	bls.n	8100566 <__udivmoddi4+0x256>
 8100556:	1869      	adds	r1, r5, r1
 8100558:	f107 3cff 	add.w	ip, r7, #4294967295
 810055c:	d22f      	bcs.n	81005be <__udivmoddi4+0x2ae>
 810055e:	428b      	cmp	r3, r1
 8100560:	d92d      	bls.n	81005be <__udivmoddi4+0x2ae>
 8100562:	3f02      	subs	r7, #2
 8100564:	4429      	add	r1, r5
 8100566:	1acb      	subs	r3, r1, r3
 8100568:	b281      	uxth	r1, r0
 810056a:	fbb3 f0fe 	udiv	r0, r3, lr
 810056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8100572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100576:	fb00 f308 	mul.w	r3, r0, r8
 810057a:	428b      	cmp	r3, r1
 810057c:	d907      	bls.n	810058e <__udivmoddi4+0x27e>
 810057e:	1869      	adds	r1, r5, r1
 8100580:	f100 3cff 	add.w	ip, r0, #4294967295
 8100584:	d217      	bcs.n	81005b6 <__udivmoddi4+0x2a6>
 8100586:	428b      	cmp	r3, r1
 8100588:	d915      	bls.n	81005b6 <__udivmoddi4+0x2a6>
 810058a:	3802      	subs	r0, #2
 810058c:	4429      	add	r1, r5
 810058e:	1ac9      	subs	r1, r1, r3
 8100590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8100594:	e73b      	b.n	810040e <__udivmoddi4+0xfe>
 8100596:	4637      	mov	r7, r6
 8100598:	4630      	mov	r0, r6
 810059a:	e709      	b.n	81003b0 <__udivmoddi4+0xa0>
 810059c:	4607      	mov	r7, r0
 810059e:	e6e7      	b.n	8100370 <__udivmoddi4+0x60>
 81005a0:	4618      	mov	r0, r3
 81005a2:	e6fb      	b.n	810039c <__udivmoddi4+0x8c>
 81005a4:	4541      	cmp	r1, r8
 81005a6:	d2ab      	bcs.n	8100500 <__udivmoddi4+0x1f0>
 81005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 81005ac:	eb69 020e 	sbc.w	r2, r9, lr
 81005b0:	3801      	subs	r0, #1
 81005b2:	4613      	mov	r3, r2
 81005b4:	e7a4      	b.n	8100500 <__udivmoddi4+0x1f0>
 81005b6:	4660      	mov	r0, ip
 81005b8:	e7e9      	b.n	810058e <__udivmoddi4+0x27e>
 81005ba:	4618      	mov	r0, r3
 81005bc:	e795      	b.n	81004ea <__udivmoddi4+0x1da>
 81005be:	4667      	mov	r7, ip
 81005c0:	e7d1      	b.n	8100566 <__udivmoddi4+0x256>
 81005c2:	4681      	mov	r9, r0
 81005c4:	e77c      	b.n	81004c0 <__udivmoddi4+0x1b0>
 81005c6:	3802      	subs	r0, #2
 81005c8:	442c      	add	r4, r5
 81005ca:	e747      	b.n	810045c <__udivmoddi4+0x14c>
 81005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 81005d0:	442b      	add	r3, r5
 81005d2:	e72f      	b.n	8100434 <__udivmoddi4+0x124>
 81005d4:	4638      	mov	r0, r7
 81005d6:	e708      	b.n	81003ea <__udivmoddi4+0xda>
 81005d8:	4637      	mov	r7, r6
 81005da:	e6e9      	b.n	81003b0 <__udivmoddi4+0xa0>

081005dc <__aeabi_idiv0>:
 81005dc:	4770      	bx	lr
 81005de:	bf00      	nop

081005e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005e0:	b480      	push	{r7}
 81005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005e4:	4b0b      	ldr	r3, [pc, #44]	; (8100614 <SystemInit+0x34>)
 81005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005ea:	4a0a      	ldr	r2, [pc, #40]	; (8100614 <SystemInit+0x34>)
 81005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 81005f4:	4b07      	ldr	r3, [pc, #28]	; (8100614 <SystemInit+0x34>)
 81005f6:	691b      	ldr	r3, [r3, #16]
 81005f8:	4a06      	ldr	r2, [pc, #24]	; (8100614 <SystemInit+0x34>)
 81005fa:	f043 0304 	orr.w	r3, r3, #4
 81005fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100600:	4b04      	ldr	r3, [pc, #16]	; (8100614 <SystemInit+0x34>)
 8100602:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100606:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100608:	bf00      	nop
 810060a:	46bd      	mov	sp, r7
 810060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100610:	4770      	bx	lr
 8100612:	bf00      	nop
 8100614:	e000ed00 	.word	0xe000ed00

08100618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100618:	b580      	push	{r7, lr}
 810061a:	b082      	sub	sp, #8
 810061c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810061e:	4b25      	ldr	r3, [pc, #148]	; (81006b4 <main+0x9c>)
 8100620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100624:	4a23      	ldr	r2, [pc, #140]	; (81006b4 <main+0x9c>)
 8100626:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810062a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810062e:	4b21      	ldr	r3, [pc, #132]	; (81006b4 <main+0x9c>)
 8100630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100638:	607b      	str	r3, [r7, #4]
 810063a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810063c:	2001      	movs	r0, #1
 810063e:	f000 fe87 	bl	8101350 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100642:	f000 ff25 	bl	8101490 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100646:	2201      	movs	r2, #1
 8100648:	2102      	movs	r1, #2
 810064a:	2000      	movs	r0, #0
 810064c:	f000 feb6 	bl	81013bc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100650:	4b19      	ldr	r3, [pc, #100]	; (81006b8 <main+0xa0>)
 8100652:	681b      	ldr	r3, [r3, #0]
 8100654:	091b      	lsrs	r3, r3, #4
 8100656:	f003 030f 	and.w	r3, r3, #15
 810065a:	2b07      	cmp	r3, #7
 810065c:	d108      	bne.n	8100670 <main+0x58>
 810065e:	4b17      	ldr	r3, [pc, #92]	; (81006bc <main+0xa4>)
 8100660:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100664:	4a15      	ldr	r2, [pc, #84]	; (81006bc <main+0xa4>)
 8100666:	f043 0301 	orr.w	r3, r3, #1
 810066a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810066e:	e007      	b.n	8100680 <main+0x68>
 8100670:	4b12      	ldr	r3, [pc, #72]	; (81006bc <main+0xa4>)
 8100672:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100676:	4a11      	ldr	r2, [pc, #68]	; (81006bc <main+0xa4>)
 8100678:	f043 0301 	orr.w	r3, r3, #1
 810067c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100680:	f000 fb2a 	bl	8100cd8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100684:	f000 f91c 	bl	81008c0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8100688:	f000 f8ce 	bl	8100828 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 810068c:	f000 f820 	bl	81006d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8100690:	2100      	movs	r1, #0
 8100692:	480b      	ldr	r0, [pc, #44]	; (81006c0 <main+0xa8>)
 8100694:	f001 fc56 	bl	8101f44 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8100698:	f005 f988 	bl	81059ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810069c:	4a09      	ldr	r2, [pc, #36]	; (81006c4 <main+0xac>)
 810069e:	2100      	movs	r1, #0
 81006a0:	4809      	ldr	r0, [pc, #36]	; (81006c8 <main+0xb0>)
 81006a2:	f005 f9ed 	bl	8105a80 <osThreadNew>
 81006a6:	4602      	mov	r2, r0
 81006a8:	4b08      	ldr	r3, [pc, #32]	; (81006cc <main+0xb4>)
 81006aa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 81006ac:	f005 f9b2 	bl	8105a14 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81006b0:	e7fe      	b.n	81006b0 <main+0x98>
 81006b2:	bf00      	nop
 81006b4:	58024400 	.word	0x58024400
 81006b8:	e000ed00 	.word	0xe000ed00
 81006bc:	58026400 	.word	0x58026400
 81006c0:	100049c4 	.word	0x100049c4
 81006c4:	081084f8 	.word	0x081084f8
 81006c8:	08100969 	.word	0x08100969
 81006cc:	10004934 	.word	0x10004934

081006d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81006d0:	b580      	push	{r7, lr}
 81006d2:	b09a      	sub	sp, #104	; 0x68
 81006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81006d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81006da:	2200      	movs	r2, #0
 81006dc:	601a      	str	r2, [r3, #0]
 81006de:	605a      	str	r2, [r3, #4]
 81006e0:	609a      	str	r2, [r3, #8]
 81006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81006e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81006e8:	2200      	movs	r2, #0
 81006ea:	601a      	str	r2, [r3, #0]
 81006ec:	605a      	str	r2, [r3, #4]
 81006ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81006f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81006f4:	2200      	movs	r2, #0
 81006f6:	601a      	str	r2, [r3, #0]
 81006f8:	605a      	str	r2, [r3, #4]
 81006fa:	609a      	str	r2, [r3, #8]
 81006fc:	60da      	str	r2, [r3, #12]
 81006fe:	611a      	str	r2, [r3, #16]
 8100700:	615a      	str	r2, [r3, #20]
 8100702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100704:	1d3b      	adds	r3, r7, #4
 8100706:	222c      	movs	r2, #44	; 0x2c
 8100708:	2100      	movs	r1, #0
 810070a:	4618      	mov	r0, r3
 810070c:	f007 febd 	bl	810848a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8100710:	4b43      	ldr	r3, [pc, #268]	; (8100820 <MX_TIM1_Init+0x150>)
 8100712:	4a44      	ldr	r2, [pc, #272]	; (8100824 <MX_TIM1_Init+0x154>)
 8100714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 239;
 8100716:	4b42      	ldr	r3, [pc, #264]	; (8100820 <MX_TIM1_Init+0x150>)
 8100718:	22ef      	movs	r2, #239	; 0xef
 810071a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810071c:	4b40      	ldr	r3, [pc, #256]	; (8100820 <MX_TIM1_Init+0x150>)
 810071e:	2200      	movs	r2, #0
 8100720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8100722:	4b3f      	ldr	r3, [pc, #252]	; (8100820 <MX_TIM1_Init+0x150>)
 8100724:	2264      	movs	r2, #100	; 0x64
 8100726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100728:	4b3d      	ldr	r3, [pc, #244]	; (8100820 <MX_TIM1_Init+0x150>)
 810072a:	2200      	movs	r2, #0
 810072c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 810072e:	4b3c      	ldr	r3, [pc, #240]	; (8100820 <MX_TIM1_Init+0x150>)
 8100730:	2200      	movs	r2, #0
 8100732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100734:	4b3a      	ldr	r3, [pc, #232]	; (8100820 <MX_TIM1_Init+0x150>)
 8100736:	2200      	movs	r2, #0
 8100738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810073a:	4839      	ldr	r0, [pc, #228]	; (8100820 <MX_TIM1_Init+0x150>)
 810073c:	f001 fb76 	bl	8101e2c <HAL_TIM_Base_Init>
 8100740:	4603      	mov	r3, r0
 8100742:	2b00      	cmp	r3, #0
 8100744:	d001      	beq.n	810074a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8100746:	f000 f931 	bl	81009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810074e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8100750:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100754:	4619      	mov	r1, r3
 8100756:	4832      	ldr	r0, [pc, #200]	; (8100820 <MX_TIM1_Init+0x150>)
 8100758:	f001 fe84 	bl	8102464 <HAL_TIM_ConfigClockSource>
 810075c:	4603      	mov	r3, r0
 810075e:	2b00      	cmp	r3, #0
 8100760:	d001      	beq.n	8100766 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8100762:	f000 f923 	bl	81009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8100766:	482e      	ldr	r0, [pc, #184]	; (8100820 <MX_TIM1_Init+0x150>)
 8100768:	f001 fbb6 	bl	8101ed8 <HAL_TIM_PWM_Init>
 810076c:	4603      	mov	r3, r0
 810076e:	2b00      	cmp	r3, #0
 8100770:	d001      	beq.n	8100776 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8100772:	f000 f91b 	bl	81009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100776:	2300      	movs	r3, #0
 8100778:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810077a:	2300      	movs	r3, #0
 810077c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810077e:	2300      	movs	r3, #0
 8100780:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8100782:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100786:	4619      	mov	r1, r3
 8100788:	4825      	ldr	r0, [pc, #148]	; (8100820 <MX_TIM1_Init+0x150>)
 810078a:	f002 fb8d 	bl	8102ea8 <HAL_TIMEx_MasterConfigSynchronization>
 810078e:	4603      	mov	r3, r0
 8100790:	2b00      	cmp	r3, #0
 8100792:	d001      	beq.n	8100798 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8100794:	f000 f90a 	bl	81009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100798:	2360      	movs	r3, #96	; 0x60
 810079a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 810079c:	2332      	movs	r3, #50	; 0x32
 810079e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81007a0:	2300      	movs	r3, #0
 81007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81007a4:	2300      	movs	r3, #0
 81007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81007a8:	2300      	movs	r3, #0
 81007aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81007ac:	2300      	movs	r3, #0
 81007ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81007b0:	2300      	movs	r3, #0
 81007b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81007b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81007b8:	2200      	movs	r2, #0
 81007ba:	4619      	mov	r1, r3
 81007bc:	4818      	ldr	r0, [pc, #96]	; (8100820 <MX_TIM1_Init+0x150>)
 81007be:	f001 fd39 	bl	8102234 <HAL_TIM_PWM_ConfigChannel>
 81007c2:	4603      	mov	r3, r0
 81007c4:	2b00      	cmp	r3, #0
 81007c6:	d001      	beq.n	81007cc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 81007c8:	f000 f8f0 	bl	81009ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81007cc:	2300      	movs	r3, #0
 81007ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81007d0:	2300      	movs	r3, #0
 81007d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81007d4:	2300      	movs	r3, #0
 81007d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81007d8:	2300      	movs	r3, #0
 81007da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81007dc:	2300      	movs	r3, #0
 81007de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81007e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81007e6:	2300      	movs	r3, #0
 81007e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81007ea:	2300      	movs	r3, #0
 81007ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81007ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81007f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81007f4:	2300      	movs	r3, #0
 81007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81007f8:	2300      	movs	r3, #0
 81007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81007fc:	1d3b      	adds	r3, r7, #4
 81007fe:	4619      	mov	r1, r3
 8100800:	4807      	ldr	r0, [pc, #28]	; (8100820 <MX_TIM1_Init+0x150>)
 8100802:	f002 fbd9 	bl	8102fb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8100806:	4603      	mov	r3, r0
 8100808:	2b00      	cmp	r3, #0
 810080a:	d001      	beq.n	8100810 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 810080c:	f000 f8ce 	bl	81009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8100810:	4803      	ldr	r0, [pc, #12]	; (8100820 <MX_TIM1_Init+0x150>)
 8100812:	f000 f923 	bl	8100a5c <HAL_TIM_MspPostInit>

}
 8100816:	bf00      	nop
 8100818:	3768      	adds	r7, #104	; 0x68
 810081a:	46bd      	mov	sp, r7
 810081c:	bd80      	pop	{r7, pc}
 810081e:	bf00      	nop
 8100820:	100049c4 	.word	0x100049c4
 8100824:	40010000 	.word	0x40010000

08100828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100828:	b580      	push	{r7, lr}
 810082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810082c:	4b22      	ldr	r3, [pc, #136]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 810082e:	4a23      	ldr	r2, [pc, #140]	; (81008bc <MX_USART3_UART_Init+0x94>)
 8100830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100832:	4b21      	ldr	r3, [pc, #132]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810083a:	4b1f      	ldr	r3, [pc, #124]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 810083c:	2200      	movs	r2, #0
 810083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100840:	4b1d      	ldr	r3, [pc, #116]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100842:	2200      	movs	r2, #0
 8100844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100846:	4b1c      	ldr	r3, [pc, #112]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100848:	2200      	movs	r2, #0
 810084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810084c:	4b1a      	ldr	r3, [pc, #104]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 810084e:	220c      	movs	r2, #12
 8100850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100852:	4b19      	ldr	r3, [pc, #100]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100854:	2200      	movs	r2, #0
 8100856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100858:	4b17      	ldr	r3, [pc, #92]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 810085a:	2200      	movs	r2, #0
 810085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810085e:	4b16      	ldr	r3, [pc, #88]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100860:	2200      	movs	r2, #0
 8100862:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100864:	4b14      	ldr	r3, [pc, #80]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100866:	2200      	movs	r2, #0
 8100868:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810086a:	4b13      	ldr	r3, [pc, #76]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 810086c:	2200      	movs	r2, #0
 810086e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100870:	4811      	ldr	r0, [pc, #68]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100872:	f002 fc3d 	bl	81030f0 <HAL_UART_Init>
 8100876:	4603      	mov	r3, r0
 8100878:	2b00      	cmp	r3, #0
 810087a:	d001      	beq.n	8100880 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810087c:	f000 f896 	bl	81009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100880:	2100      	movs	r1, #0
 8100882:	480d      	ldr	r0, [pc, #52]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100884:	f004 ffa5 	bl	81057d2 <HAL_UARTEx_SetTxFifoThreshold>
 8100888:	4603      	mov	r3, r0
 810088a:	2b00      	cmp	r3, #0
 810088c:	d001      	beq.n	8100892 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810088e:	f000 f88d 	bl	81009ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100892:	2100      	movs	r1, #0
 8100894:	4808      	ldr	r0, [pc, #32]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 8100896:	f004 ffda 	bl	810584e <HAL_UARTEx_SetRxFifoThreshold>
 810089a:	4603      	mov	r3, r0
 810089c:	2b00      	cmp	r3, #0
 810089e:	d001      	beq.n	81008a4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81008a0:	f000 f884 	bl	81009ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81008a4:	4804      	ldr	r0, [pc, #16]	; (81008b8 <MX_USART3_UART_Init+0x90>)
 81008a6:	f004 ff5b 	bl	8105760 <HAL_UARTEx_DisableFifoMode>
 81008aa:	4603      	mov	r3, r0
 81008ac:	2b00      	cmp	r3, #0
 81008ae:	d001      	beq.n	81008b4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81008b0:	f000 f87c 	bl	81009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81008b4:	bf00      	nop
 81008b6:	bd80      	pop	{r7, pc}
 81008b8:	10004938 	.word	0x10004938
 81008bc:	40004800 	.word	0x40004800

081008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81008c0:	b580      	push	{r7, lr}
 81008c2:	b088      	sub	sp, #32
 81008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81008c6:	f107 030c 	add.w	r3, r7, #12
 81008ca:	2200      	movs	r2, #0
 81008cc:	601a      	str	r2, [r3, #0]
 81008ce:	605a      	str	r2, [r3, #4]
 81008d0:	609a      	str	r2, [r3, #8]
 81008d2:	60da      	str	r2, [r3, #12]
 81008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81008d6:	4b22      	ldr	r3, [pc, #136]	; (8100960 <MX_GPIO_Init+0xa0>)
 81008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008dc:	4a20      	ldr	r2, [pc, #128]	; (8100960 <MX_GPIO_Init+0xa0>)
 81008de:	f043 0302 	orr.w	r3, r3, #2
 81008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008e6:	4b1e      	ldr	r3, [pc, #120]	; (8100960 <MX_GPIO_Init+0xa0>)
 81008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008ec:	f003 0302 	and.w	r3, r3, #2
 81008f0:	60bb      	str	r3, [r7, #8]
 81008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81008f4:	4b1a      	ldr	r3, [pc, #104]	; (8100960 <MX_GPIO_Init+0xa0>)
 81008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008fa:	4a19      	ldr	r2, [pc, #100]	; (8100960 <MX_GPIO_Init+0xa0>)
 81008fc:	f043 0301 	orr.w	r3, r3, #1
 8100900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100904:	4b16      	ldr	r3, [pc, #88]	; (8100960 <MX_GPIO_Init+0xa0>)
 8100906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810090a:	f003 0301 	and.w	r3, r3, #1
 810090e:	607b      	str	r3, [r7, #4]
 8100910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100912:	4b13      	ldr	r3, [pc, #76]	; (8100960 <MX_GPIO_Init+0xa0>)
 8100914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100918:	4a11      	ldr	r2, [pc, #68]	; (8100960 <MX_GPIO_Init+0xa0>)
 810091a:	f043 0310 	orr.w	r3, r3, #16
 810091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100922:	4b0f      	ldr	r3, [pc, #60]	; (8100960 <MX_GPIO_Init+0xa0>)
 8100924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100928:	f003 0310 	and.w	r3, r3, #16
 810092c:	603b      	str	r3, [r7, #0]
 810092e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100930:	2200      	movs	r2, #0
 8100932:	2102      	movs	r1, #2
 8100934:	480b      	ldr	r0, [pc, #44]	; (8100964 <MX_GPIO_Init+0xa4>)
 8100936:	f000 fcf1 	bl	810131c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 810093a:	2302      	movs	r3, #2
 810093c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810093e:	2301      	movs	r3, #1
 8100940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100942:	2300      	movs	r3, #0
 8100944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100946:	2300      	movs	r3, #0
 8100948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 810094a:	f107 030c 	add.w	r3, r7, #12
 810094e:	4619      	mov	r1, r3
 8100950:	4804      	ldr	r0, [pc, #16]	; (8100964 <MX_GPIO_Init+0xa4>)
 8100952:	f000 fb33 	bl	8100fbc <HAL_GPIO_Init>

}
 8100956:	bf00      	nop
 8100958:	3720      	adds	r7, #32
 810095a:	46bd      	mov	sp, r7
 810095c:	bd80      	pop	{r7, pc}
 810095e:	bf00      	nop
 8100960:	58024400 	.word	0x58024400
 8100964:	58021000 	.word	0x58021000

08100968 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8100968:	b580      	push	{r7, lr}
 810096a:	b082      	sub	sp, #8
 810096c:	af00      	add	r7, sp, #0
 810096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  LED2_ON();
 8100970:	2201      	movs	r2, #1
 8100972:	2102      	movs	r1, #2
 8100974:	4803      	ldr	r0, [pc, #12]	; (8100984 <StartDefaultTask+0x1c>)
 8100976:	f000 fcd1 	bl	810131c <HAL_GPIO_WritePin>
    osDelay(1);
 810097a:	2001      	movs	r0, #1
 810097c:	f005 f926 	bl	8105bcc <osDelay>
	  LED2_ON();
 8100980:	e7f6      	b.n	8100970 <StartDefaultTask+0x8>
 8100982:	bf00      	nop
 8100984:	58021000 	.word	0x58021000

08100988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100988:	b580      	push	{r7, lr}
 810098a:	b082      	sub	sp, #8
 810098c:	af00      	add	r7, sp, #0
 810098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8100990:	687b      	ldr	r3, [r7, #4]
 8100992:	681b      	ldr	r3, [r3, #0]
 8100994:	4a04      	ldr	r2, [pc, #16]	; (81009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100996:	4293      	cmp	r3, r2
 8100998:	d101      	bne.n	810099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810099a:	f000 f9fb 	bl	8100d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810099e:	bf00      	nop
 81009a0:	3708      	adds	r7, #8
 81009a2:	46bd      	mov	sp, r7
 81009a4:	bd80      	pop	{r7, pc}
 81009a6:	bf00      	nop
 81009a8:	40001400 	.word	0x40001400

081009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81009ac:	b480      	push	{r7}
 81009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 81009b0:	bf00      	nop
 81009b2:	46bd      	mov	sp, r7
 81009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009b8:	4770      	bx	lr
	...

081009bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81009bc:	b580      	push	{r7, lr}
 81009be:	b082      	sub	sp, #8
 81009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81009c2:	4b14      	ldr	r3, [pc, #80]	; (8100a14 <HAL_MspInit+0x58>)
 81009c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81009c8:	4a12      	ldr	r2, [pc, #72]	; (8100a14 <HAL_MspInit+0x58>)
 81009ca:	f043 0302 	orr.w	r3, r3, #2
 81009ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81009d2:	4b10      	ldr	r3, [pc, #64]	; (8100a14 <HAL_MspInit+0x58>)
 81009d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81009d8:	f003 0302 	and.w	r3, r3, #2
 81009dc:	607b      	str	r3, [r7, #4]
 81009de:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 81009e0:	2200      	movs	r2, #0
 81009e2:	210f      	movs	r1, #15
 81009e4:	f06f 0001 	mvn.w	r0, #1
 81009e8:	f000 faac 	bl	8100f44 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 5, 0);
 81009ec:	2200      	movs	r2, #0
 81009ee:	2105      	movs	r1, #5
 81009f0:	2040      	movs	r0, #64	; 0x40
 81009f2:	f000 faa7 	bl	8100f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 81009f6:	2040      	movs	r0, #64	; 0x40
 81009f8:	f000 fabe 	bl	8100f78 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 81009fc:	2200      	movs	r2, #0
 81009fe:	2105      	movs	r1, #5
 8100a00:	207e      	movs	r0, #126	; 0x7e
 8100a02:	f000 fa9f 	bl	8100f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100a06:	207e      	movs	r0, #126	; 0x7e
 8100a08:	f000 fab6 	bl	8100f78 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100a0c:	bf00      	nop
 8100a0e:	3708      	adds	r7, #8
 8100a10:	46bd      	mov	sp, r7
 8100a12:	bd80      	pop	{r7, pc}
 8100a14:	58024400 	.word	0x58024400

08100a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100a18:	b480      	push	{r7}
 8100a1a:	b085      	sub	sp, #20
 8100a1c:	af00      	add	r7, sp, #0
 8100a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8100a20:	687b      	ldr	r3, [r7, #4]
 8100a22:	681b      	ldr	r3, [r3, #0]
 8100a24:	4a0b      	ldr	r2, [pc, #44]	; (8100a54 <HAL_TIM_Base_MspInit+0x3c>)
 8100a26:	4293      	cmp	r3, r2
 8100a28:	d10e      	bne.n	8100a48 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8100a2a:	4b0b      	ldr	r3, [pc, #44]	; (8100a58 <HAL_TIM_Base_MspInit+0x40>)
 8100a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100a30:	4a09      	ldr	r2, [pc, #36]	; (8100a58 <HAL_TIM_Base_MspInit+0x40>)
 8100a32:	f043 0301 	orr.w	r3, r3, #1
 8100a36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100a3a:	4b07      	ldr	r3, [pc, #28]	; (8100a58 <HAL_TIM_Base_MspInit+0x40>)
 8100a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100a40:	f003 0301 	and.w	r3, r3, #1
 8100a44:	60fb      	str	r3, [r7, #12]
 8100a46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8100a48:	bf00      	nop
 8100a4a:	3714      	adds	r7, #20
 8100a4c:	46bd      	mov	sp, r7
 8100a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a52:	4770      	bx	lr
 8100a54:	40010000 	.word	0x40010000
 8100a58:	58024400 	.word	0x58024400

08100a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100a5c:	b580      	push	{r7, lr}
 8100a5e:	b088      	sub	sp, #32
 8100a60:	af00      	add	r7, sp, #0
 8100a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a64:	f107 030c 	add.w	r3, r7, #12
 8100a68:	2200      	movs	r2, #0
 8100a6a:	601a      	str	r2, [r3, #0]
 8100a6c:	605a      	str	r2, [r3, #4]
 8100a6e:	609a      	str	r2, [r3, #8]
 8100a70:	60da      	str	r2, [r3, #12]
 8100a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8100a74:	687b      	ldr	r3, [r7, #4]
 8100a76:	681b      	ldr	r3, [r3, #0]
 8100a78:	4a13      	ldr	r2, [pc, #76]	; (8100ac8 <HAL_TIM_MspPostInit+0x6c>)
 8100a7a:	4293      	cmp	r3, r2
 8100a7c:	d11f      	bne.n	8100abe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100a7e:	4b13      	ldr	r3, [pc, #76]	; (8100acc <HAL_TIM_MspPostInit+0x70>)
 8100a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a84:	4a11      	ldr	r2, [pc, #68]	; (8100acc <HAL_TIM_MspPostInit+0x70>)
 8100a86:	f043 0301 	orr.w	r3, r3, #1
 8100a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a8e:	4b0f      	ldr	r3, [pc, #60]	; (8100acc <HAL_TIM_MspPostInit+0x70>)
 8100a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a94:	f003 0301 	and.w	r3, r3, #1
 8100a98:	60bb      	str	r3, [r7, #8]
 8100a9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8100a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8100aa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100aa2:	2302      	movs	r3, #2
 8100aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100aa6:	2300      	movs	r3, #0
 8100aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100aaa:	2300      	movs	r3, #0
 8100aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8100aae:	2301      	movs	r3, #1
 8100ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100ab2:	f107 030c 	add.w	r3, r7, #12
 8100ab6:	4619      	mov	r1, r3
 8100ab8:	4805      	ldr	r0, [pc, #20]	; (8100ad0 <HAL_TIM_MspPostInit+0x74>)
 8100aba:	f000 fa7f 	bl	8100fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8100abe:	bf00      	nop
 8100ac0:	3720      	adds	r7, #32
 8100ac2:	46bd      	mov	sp, r7
 8100ac4:	bd80      	pop	{r7, pc}
 8100ac6:	bf00      	nop
 8100ac8:	40010000 	.word	0x40010000
 8100acc:	58024400 	.word	0x58024400
 8100ad0:	58020000 	.word	0x58020000

08100ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100ad4:	b580      	push	{r7, lr}
 8100ad6:	b08a      	sub	sp, #40	; 0x28
 8100ad8:	af00      	add	r7, sp, #0
 8100ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100adc:	f107 0314 	add.w	r3, r7, #20
 8100ae0:	2200      	movs	r2, #0
 8100ae2:	601a      	str	r2, [r3, #0]
 8100ae4:	605a      	str	r2, [r3, #4]
 8100ae6:	609a      	str	r2, [r3, #8]
 8100ae8:	60da      	str	r2, [r3, #12]
 8100aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8100aec:	687b      	ldr	r3, [r7, #4]
 8100aee:	681b      	ldr	r3, [r3, #0]
 8100af0:	4a1a      	ldr	r2, [pc, #104]	; (8100b5c <HAL_UART_MspInit+0x88>)
 8100af2:	4293      	cmp	r3, r2
 8100af4:	d12e      	bne.n	8100b54 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100af6:	4b1a      	ldr	r3, [pc, #104]	; (8100b60 <HAL_UART_MspInit+0x8c>)
 8100af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100afc:	4a18      	ldr	r2, [pc, #96]	; (8100b60 <HAL_UART_MspInit+0x8c>)
 8100afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100b06:	4b16      	ldr	r3, [pc, #88]	; (8100b60 <HAL_UART_MspInit+0x8c>)
 8100b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100b10:	613b      	str	r3, [r7, #16]
 8100b12:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100b14:	4b12      	ldr	r3, [pc, #72]	; (8100b60 <HAL_UART_MspInit+0x8c>)
 8100b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b1a:	4a11      	ldr	r2, [pc, #68]	; (8100b60 <HAL_UART_MspInit+0x8c>)
 8100b1c:	f043 0302 	orr.w	r3, r3, #2
 8100b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b24:	4b0e      	ldr	r3, [pc, #56]	; (8100b60 <HAL_UART_MspInit+0x8c>)
 8100b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b2a:	f003 0302 	and.w	r3, r3, #2
 8100b2e:	60fb      	str	r3, [r7, #12]
 8100b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8100b32:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100b38:	2302      	movs	r3, #2
 8100b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100b3c:	2300      	movs	r3, #0
 8100b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100b40:	2300      	movs	r3, #0
 8100b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100b44:	2307      	movs	r3, #7
 8100b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100b48:	f107 0314 	add.w	r3, r7, #20
 8100b4c:	4619      	mov	r1, r3
 8100b4e:	4805      	ldr	r0, [pc, #20]	; (8100b64 <HAL_UART_MspInit+0x90>)
 8100b50:	f000 fa34 	bl	8100fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100b54:	bf00      	nop
 8100b56:	3728      	adds	r7, #40	; 0x28
 8100b58:	46bd      	mov	sp, r7
 8100b5a:	bd80      	pop	{r7, pc}
 8100b5c:	40004800 	.word	0x40004800
 8100b60:	58024400 	.word	0x58024400
 8100b64:	58020400 	.word	0x58020400

08100b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100b68:	b580      	push	{r7, lr}
 8100b6a:	b08e      	sub	sp, #56	; 0x38
 8100b6c:	af00      	add	r7, sp, #0
 8100b6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8100b70:	2300      	movs	r3, #0
 8100b72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8100b74:	2300      	movs	r3, #0
 8100b76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0); 
 8100b78:	2200      	movs	r2, #0
 8100b7a:	6879      	ldr	r1, [r7, #4]
 8100b7c:	2037      	movs	r0, #55	; 0x37
 8100b7e:	f000 f9e1 	bl	8100f44 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn); 
 8100b82:	2037      	movs	r0, #55	; 0x37
 8100b84:	f000 f9f8 	bl	8100f78 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8100b88:	4b21      	ldr	r3, [pc, #132]	; (8100c10 <HAL_InitTick+0xa8>)
 8100b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b8e:	4a20      	ldr	r2, [pc, #128]	; (8100c10 <HAL_InitTick+0xa8>)
 8100b90:	f043 0320 	orr.w	r3, r3, #32
 8100b94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100b98:	4b1d      	ldr	r3, [pc, #116]	; (8100c10 <HAL_InitTick+0xa8>)
 8100b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100b9e:	f003 0320 	and.w	r3, r3, #32
 8100ba2:	60bb      	str	r3, [r7, #8]
 8100ba4:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100ba6:	f107 020c 	add.w	r2, r7, #12
 8100baa:	f107 0310 	add.w	r3, r7, #16
 8100bae:	4611      	mov	r1, r2
 8100bb0:	4618      	mov	r0, r3
 8100bb2:	f000 fe4b 	bl	810184c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8100bb6:	f000 fe1d 	bl	81017f4 <HAL_RCC_GetPCLK1Freq>
 8100bba:	4603      	mov	r3, r0
 8100bbc:	005b      	lsls	r3, r3, #1
 8100bbe:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8100bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100bc2:	4a14      	ldr	r2, [pc, #80]	; (8100c14 <HAL_InitTick+0xac>)
 8100bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8100bc8:	0c9b      	lsrs	r3, r3, #18
 8100bca:	3b01      	subs	r3, #1
 8100bcc:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8100bce:	4b12      	ldr	r3, [pc, #72]	; (8100c18 <HAL_InitTick+0xb0>)
 8100bd0:	4a12      	ldr	r2, [pc, #72]	; (8100c1c <HAL_InitTick+0xb4>)
 8100bd2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8100bd4:	4b10      	ldr	r3, [pc, #64]	; (8100c18 <HAL_InitTick+0xb0>)
 8100bd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8100bda:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8100bdc:	4a0e      	ldr	r2, [pc, #56]	; (8100c18 <HAL_InitTick+0xb0>)
 8100bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100be0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8100be2:	4b0d      	ldr	r3, [pc, #52]	; (8100c18 <HAL_InitTick+0xb0>)
 8100be4:	2200      	movs	r2, #0
 8100be6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100be8:	4b0b      	ldr	r3, [pc, #44]	; (8100c18 <HAL_InitTick+0xb0>)
 8100bea:	2200      	movs	r2, #0
 8100bec:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8100bee:	480a      	ldr	r0, [pc, #40]	; (8100c18 <HAL_InitTick+0xb0>)
 8100bf0:	f001 f91c 	bl	8101e2c <HAL_TIM_Base_Init>
 8100bf4:	4603      	mov	r3, r0
 8100bf6:	2b00      	cmp	r3, #0
 8100bf8:	d104      	bne.n	8100c04 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8100bfa:	4807      	ldr	r0, [pc, #28]	; (8100c18 <HAL_InitTick+0xb0>)
 8100bfc:	f001 f942 	bl	8101e84 <HAL_TIM_Base_Start_IT>
 8100c00:	4603      	mov	r3, r0
 8100c02:	e000      	b.n	8100c06 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8100c04:	2301      	movs	r3, #1
}
 8100c06:	4618      	mov	r0, r3
 8100c08:	3738      	adds	r7, #56	; 0x38
 8100c0a:	46bd      	mov	sp, r7
 8100c0c:	bd80      	pop	{r7, pc}
 8100c0e:	bf00      	nop
 8100c10:	58024400 	.word	0x58024400
 8100c14:	431bde83 	.word	0x431bde83
 8100c18:	10004a04 	.word	0x10004a04
 8100c1c:	40001400 	.word	0x40001400

08100c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100c20:	b480      	push	{r7}
 8100c22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8100c24:	bf00      	nop
 8100c26:	46bd      	mov	sp, r7
 8100c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c2c:	4770      	bx	lr

08100c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100c2e:	b480      	push	{r7}
 8100c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100c32:	e7fe      	b.n	8100c32 <HardFault_Handler+0x4>

08100c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100c34:	b480      	push	{r7}
 8100c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100c38:	e7fe      	b.n	8100c38 <MemManage_Handler+0x4>

08100c3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100c3a:	b480      	push	{r7}
 8100c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100c3e:	e7fe      	b.n	8100c3e <BusFault_Handler+0x4>

08100c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100c40:	b480      	push	{r7}
 8100c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100c44:	e7fe      	b.n	8100c44 <UsageFault_Handler+0x4>

08100c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100c46:	b480      	push	{r7}
 8100c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100c4a:	bf00      	nop
 8100c4c:	46bd      	mov	sp, r7
 8100c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c52:	4770      	bx	lr

08100c54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8100c54:	b580      	push	{r7, lr}
 8100c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8100c58:	4802      	ldr	r0, [pc, #8]	; (8100c64 <TIM7_IRQHandler+0x10>)
 8100c5a:	f001 f9cb 	bl	8101ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8100c5e:	bf00      	nop
 8100c60:	bd80      	pop	{r7, pc}
 8100c62:	bf00      	nop
 8100c64:	10004a04 	.word	0x10004a04

08100c68 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8100c68:	b480      	push	{r7}
 8100c6a:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8100c6c:	bf00      	nop
 8100c6e:	46bd      	mov	sp, r7
 8100c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c74:	4770      	bx	lr

08100c76 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100c76:	b580      	push	{r7, lr}
 8100c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100c7a:	f000 fb7b 	bl	8101374 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100c7e:	bf00      	nop
 8100c80:	bd80      	pop	{r7, pc}
	...

08100c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8100c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8100c88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8100c8a:	e003      	b.n	8100c94 <LoopCopyDataInit>

08100c8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8100c8c:	4b0c      	ldr	r3, [pc, #48]	; (8100cc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8100c8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8100c90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8100c92:	3104      	adds	r1, #4

08100c94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8100c94:	480b      	ldr	r0, [pc, #44]	; (8100cc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8100c96:	4b0c      	ldr	r3, [pc, #48]	; (8100cc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8100c98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8100c9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8100c9c:	d3f6      	bcc.n	8100c8c <CopyDataInit>
  ldr  r2, =_sbss
 8100c9e:	4a0b      	ldr	r2, [pc, #44]	; (8100ccc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8100ca0:	e002      	b.n	8100ca8 <LoopFillZerobss>

08100ca2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8100ca2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8100ca4:	f842 3b04 	str.w	r3, [r2], #4

08100ca8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8100ca8:	4b09      	ldr	r3, [pc, #36]	; (8100cd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8100caa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8100cac:	d3f9      	bcc.n	8100ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8100cae:	f7ff fc97 	bl	81005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8100cb2:	f007 fbbb 	bl	810842c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100cb6:	f7ff fcaf 	bl	8100618 <main>
  bx  lr    
 8100cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100cbc:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8100cc0:	0810852c 	.word	0x0810852c
  ldr  r0, =_sdata
 8100cc4:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8100cc8:	10000010 	.word	0x10000010
  ldr  r2, =_sbss
 8100ccc:	10000010 	.word	0x10000010
  ldr  r3, = _ebss
 8100cd0:	10004a88 	.word	0x10004a88

08100cd4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100cd4:	e7fe      	b.n	8100cd4 <ADC3_IRQHandler>
	...

08100cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100cd8:	b580      	push	{r7, lr}
 8100cda:	b082      	sub	sp, #8
 8100cdc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100cde:	4b28      	ldr	r3, [pc, #160]	; (8100d80 <HAL_Init+0xa8>)
 8100ce0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100ce4:	4a26      	ldr	r2, [pc, #152]	; (8100d80 <HAL_Init+0xa8>)
 8100ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100cea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100cee:	4b24      	ldr	r3, [pc, #144]	; (8100d80 <HAL_Init+0xa8>)
 8100cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100cf8:	603b      	str	r3, [r7, #0]
 8100cfa:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100cfc:	4b21      	ldr	r3, [pc, #132]	; (8100d84 <HAL_Init+0xac>)
 8100cfe:	681b      	ldr	r3, [r3, #0]
 8100d00:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100d04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100d08:	4a1e      	ldr	r2, [pc, #120]	; (8100d84 <HAL_Init+0xac>)
 8100d0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100d0e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100d10:	4b1c      	ldr	r3, [pc, #112]	; (8100d84 <HAL_Init+0xac>)
 8100d12:	681b      	ldr	r3, [r3, #0]
 8100d14:	4a1b      	ldr	r2, [pc, #108]	; (8100d84 <HAL_Init+0xac>)
 8100d16:	f043 0301 	orr.w	r3, r3, #1
 8100d1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100d1c:	2003      	movs	r0, #3
 8100d1e:	f000 f906 	bl	8100f2e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100d22:	f000 fbc3 	bl	81014ac <HAL_RCC_GetSysClockFreq>
 8100d26:	4601      	mov	r1, r0
 8100d28:	4b15      	ldr	r3, [pc, #84]	; (8100d80 <HAL_Init+0xa8>)
 8100d2a:	699b      	ldr	r3, [r3, #24]
 8100d2c:	0a1b      	lsrs	r3, r3, #8
 8100d2e:	f003 030f 	and.w	r3, r3, #15
 8100d32:	4a15      	ldr	r2, [pc, #84]	; (8100d88 <HAL_Init+0xb0>)
 8100d34:	5cd3      	ldrb	r3, [r2, r3]
 8100d36:	f003 031f 	and.w	r3, r3, #31
 8100d3a:	fa21 f303 	lsr.w	r3, r1, r3
 8100d3e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100d40:	4b0f      	ldr	r3, [pc, #60]	; (8100d80 <HAL_Init+0xa8>)
 8100d42:	699b      	ldr	r3, [r3, #24]
 8100d44:	f003 030f 	and.w	r3, r3, #15
 8100d48:	4a0f      	ldr	r2, [pc, #60]	; (8100d88 <HAL_Init+0xb0>)
 8100d4a:	5cd3      	ldrb	r3, [r2, r3]
 8100d4c:	f003 031f 	and.w	r3, r3, #31
 8100d50:	687a      	ldr	r2, [r7, #4]
 8100d52:	fa22 f303 	lsr.w	r3, r2, r3
 8100d56:	4a0d      	ldr	r2, [pc, #52]	; (8100d8c <HAL_Init+0xb4>)
 8100d58:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100d5a:	4b0c      	ldr	r3, [pc, #48]	; (8100d8c <HAL_Init+0xb4>)
 8100d5c:	681b      	ldr	r3, [r3, #0]
 8100d5e:	4a0c      	ldr	r2, [pc, #48]	; (8100d90 <HAL_Init+0xb8>)
 8100d60:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100d62:	2000      	movs	r0, #0
 8100d64:	f7ff ff00 	bl	8100b68 <HAL_InitTick>
 8100d68:	4603      	mov	r3, r0
 8100d6a:	2b00      	cmp	r3, #0
 8100d6c:	d001      	beq.n	8100d72 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100d6e:	2301      	movs	r3, #1
 8100d70:	e002      	b.n	8100d78 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100d72:	f7ff fe23 	bl	81009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100d76:	2300      	movs	r3, #0
}
 8100d78:	4618      	mov	r0, r3
 8100d7a:	3708      	adds	r7, #8
 8100d7c:	46bd      	mov	sp, r7
 8100d7e:	bd80      	pop	{r7, pc}
 8100d80:	58024400 	.word	0x58024400
 8100d84:	40024400 	.word	0x40024400
 8100d88:	081084e8 	.word	0x081084e8
 8100d8c:	10000004 	.word	0x10000004
 8100d90:	10000000 	.word	0x10000000

08100d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100d94:	b480      	push	{r7}
 8100d96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100d98:	4b06      	ldr	r3, [pc, #24]	; (8100db4 <HAL_IncTick+0x20>)
 8100d9a:	781b      	ldrb	r3, [r3, #0]
 8100d9c:	461a      	mov	r2, r3
 8100d9e:	4b06      	ldr	r3, [pc, #24]	; (8100db8 <HAL_IncTick+0x24>)
 8100da0:	681b      	ldr	r3, [r3, #0]
 8100da2:	4413      	add	r3, r2
 8100da4:	4a04      	ldr	r2, [pc, #16]	; (8100db8 <HAL_IncTick+0x24>)
 8100da6:	6013      	str	r3, [r2, #0]
}
 8100da8:	bf00      	nop
 8100daa:	46bd      	mov	sp, r7
 8100dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100db0:	4770      	bx	lr
 8100db2:	bf00      	nop
 8100db4:	10000008 	.word	0x10000008
 8100db8:	10004a44 	.word	0x10004a44

08100dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100dbc:	b480      	push	{r7}
 8100dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8100dc0:	4b03      	ldr	r3, [pc, #12]	; (8100dd0 <HAL_GetTick+0x14>)
 8100dc2:	681b      	ldr	r3, [r3, #0]
}
 8100dc4:	4618      	mov	r0, r3
 8100dc6:	46bd      	mov	sp, r7
 8100dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dcc:	4770      	bx	lr
 8100dce:	bf00      	nop
 8100dd0:	10004a44 	.word	0x10004a44

08100dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100dd4:	b480      	push	{r7}
 8100dd6:	b085      	sub	sp, #20
 8100dd8:	af00      	add	r7, sp, #0
 8100dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100ddc:	687b      	ldr	r3, [r7, #4]
 8100dde:	f003 0307 	and.w	r3, r3, #7
 8100de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100de4:	4b0c      	ldr	r3, [pc, #48]	; (8100e18 <__NVIC_SetPriorityGrouping+0x44>)
 8100de6:	68db      	ldr	r3, [r3, #12]
 8100de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100dea:	68ba      	ldr	r2, [r7, #8]
 8100dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100df0:	4013      	ands	r3, r2
 8100df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100df4:	68fb      	ldr	r3, [r7, #12]
 8100df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100df8:	68bb      	ldr	r3, [r7, #8]
 8100dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100e06:	4a04      	ldr	r2, [pc, #16]	; (8100e18 <__NVIC_SetPriorityGrouping+0x44>)
 8100e08:	68bb      	ldr	r3, [r7, #8]
 8100e0a:	60d3      	str	r3, [r2, #12]
}
 8100e0c:	bf00      	nop
 8100e0e:	3714      	adds	r7, #20
 8100e10:	46bd      	mov	sp, r7
 8100e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e16:	4770      	bx	lr
 8100e18:	e000ed00 	.word	0xe000ed00

08100e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100e1c:	b480      	push	{r7}
 8100e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100e20:	4b04      	ldr	r3, [pc, #16]	; (8100e34 <__NVIC_GetPriorityGrouping+0x18>)
 8100e22:	68db      	ldr	r3, [r3, #12]
 8100e24:	0a1b      	lsrs	r3, r3, #8
 8100e26:	f003 0307 	and.w	r3, r3, #7
}
 8100e2a:	4618      	mov	r0, r3
 8100e2c:	46bd      	mov	sp, r7
 8100e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e32:	4770      	bx	lr
 8100e34:	e000ed00 	.word	0xe000ed00

08100e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100e38:	b480      	push	{r7}
 8100e3a:	b083      	sub	sp, #12
 8100e3c:	af00      	add	r7, sp, #0
 8100e3e:	4603      	mov	r3, r0
 8100e40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e46:	2b00      	cmp	r3, #0
 8100e48:	db0b      	blt.n	8100e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100e4a:	88fb      	ldrh	r3, [r7, #6]
 8100e4c:	f003 021f 	and.w	r2, r3, #31
 8100e50:	4907      	ldr	r1, [pc, #28]	; (8100e70 <__NVIC_EnableIRQ+0x38>)
 8100e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e56:	095b      	lsrs	r3, r3, #5
 8100e58:	2001      	movs	r0, #1
 8100e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8100e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8100e62:	bf00      	nop
 8100e64:	370c      	adds	r7, #12
 8100e66:	46bd      	mov	sp, r7
 8100e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e6c:	4770      	bx	lr
 8100e6e:	bf00      	nop
 8100e70:	e000e100 	.word	0xe000e100

08100e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100e74:	b480      	push	{r7}
 8100e76:	b083      	sub	sp, #12
 8100e78:	af00      	add	r7, sp, #0
 8100e7a:	4603      	mov	r3, r0
 8100e7c:	6039      	str	r1, [r7, #0]
 8100e7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e84:	2b00      	cmp	r3, #0
 8100e86:	db0a      	blt.n	8100e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100e88:	683b      	ldr	r3, [r7, #0]
 8100e8a:	b2da      	uxtb	r2, r3
 8100e8c:	490c      	ldr	r1, [pc, #48]	; (8100ec0 <__NVIC_SetPriority+0x4c>)
 8100e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100e92:	0112      	lsls	r2, r2, #4
 8100e94:	b2d2      	uxtb	r2, r2
 8100e96:	440b      	add	r3, r1
 8100e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100e9c:	e00a      	b.n	8100eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100e9e:	683b      	ldr	r3, [r7, #0]
 8100ea0:	b2da      	uxtb	r2, r3
 8100ea2:	4908      	ldr	r1, [pc, #32]	; (8100ec4 <__NVIC_SetPriority+0x50>)
 8100ea4:	88fb      	ldrh	r3, [r7, #6]
 8100ea6:	f003 030f 	and.w	r3, r3, #15
 8100eaa:	3b04      	subs	r3, #4
 8100eac:	0112      	lsls	r2, r2, #4
 8100eae:	b2d2      	uxtb	r2, r2
 8100eb0:	440b      	add	r3, r1
 8100eb2:	761a      	strb	r2, [r3, #24]
}
 8100eb4:	bf00      	nop
 8100eb6:	370c      	adds	r7, #12
 8100eb8:	46bd      	mov	sp, r7
 8100eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ebe:	4770      	bx	lr
 8100ec0:	e000e100 	.word	0xe000e100
 8100ec4:	e000ed00 	.word	0xe000ed00

08100ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100ec8:	b480      	push	{r7}
 8100eca:	b089      	sub	sp, #36	; 0x24
 8100ecc:	af00      	add	r7, sp, #0
 8100ece:	60f8      	str	r0, [r7, #12]
 8100ed0:	60b9      	str	r1, [r7, #8]
 8100ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100ed4:	68fb      	ldr	r3, [r7, #12]
 8100ed6:	f003 0307 	and.w	r3, r3, #7
 8100eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100edc:	69fb      	ldr	r3, [r7, #28]
 8100ede:	f1c3 0307 	rsb	r3, r3, #7
 8100ee2:	2b04      	cmp	r3, #4
 8100ee4:	bf28      	it	cs
 8100ee6:	2304      	movcs	r3, #4
 8100ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100eea:	69fb      	ldr	r3, [r7, #28]
 8100eec:	3304      	adds	r3, #4
 8100eee:	2b06      	cmp	r3, #6
 8100ef0:	d902      	bls.n	8100ef8 <NVIC_EncodePriority+0x30>
 8100ef2:	69fb      	ldr	r3, [r7, #28]
 8100ef4:	3b03      	subs	r3, #3
 8100ef6:	e000      	b.n	8100efa <NVIC_EncodePriority+0x32>
 8100ef8:	2300      	movs	r3, #0
 8100efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100efc:	f04f 32ff 	mov.w	r2, #4294967295
 8100f00:	69bb      	ldr	r3, [r7, #24]
 8100f02:	fa02 f303 	lsl.w	r3, r2, r3
 8100f06:	43da      	mvns	r2, r3
 8100f08:	68bb      	ldr	r3, [r7, #8]
 8100f0a:	401a      	ands	r2, r3
 8100f0c:	697b      	ldr	r3, [r7, #20]
 8100f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100f10:	f04f 31ff 	mov.w	r1, #4294967295
 8100f14:	697b      	ldr	r3, [r7, #20]
 8100f16:	fa01 f303 	lsl.w	r3, r1, r3
 8100f1a:	43d9      	mvns	r1, r3
 8100f1c:	687b      	ldr	r3, [r7, #4]
 8100f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100f20:	4313      	orrs	r3, r2
         );
}
 8100f22:	4618      	mov	r0, r3
 8100f24:	3724      	adds	r7, #36	; 0x24
 8100f26:	46bd      	mov	sp, r7
 8100f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f2c:	4770      	bx	lr

08100f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100f2e:	b580      	push	{r7, lr}
 8100f30:	b082      	sub	sp, #8
 8100f32:	af00      	add	r7, sp, #0
 8100f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100f36:	6878      	ldr	r0, [r7, #4]
 8100f38:	f7ff ff4c 	bl	8100dd4 <__NVIC_SetPriorityGrouping>
}
 8100f3c:	bf00      	nop
 8100f3e:	3708      	adds	r7, #8
 8100f40:	46bd      	mov	sp, r7
 8100f42:	bd80      	pop	{r7, pc}

08100f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100f44:	b580      	push	{r7, lr}
 8100f46:	b086      	sub	sp, #24
 8100f48:	af00      	add	r7, sp, #0
 8100f4a:	4603      	mov	r3, r0
 8100f4c:	60b9      	str	r1, [r7, #8]
 8100f4e:	607a      	str	r2, [r7, #4]
 8100f50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100f52:	f7ff ff63 	bl	8100e1c <__NVIC_GetPriorityGrouping>
 8100f56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100f58:	687a      	ldr	r2, [r7, #4]
 8100f5a:	68b9      	ldr	r1, [r7, #8]
 8100f5c:	6978      	ldr	r0, [r7, #20]
 8100f5e:	f7ff ffb3 	bl	8100ec8 <NVIC_EncodePriority>
 8100f62:	4602      	mov	r2, r0
 8100f64:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100f68:	4611      	mov	r1, r2
 8100f6a:	4618      	mov	r0, r3
 8100f6c:	f7ff ff82 	bl	8100e74 <__NVIC_SetPriority>
}
 8100f70:	bf00      	nop
 8100f72:	3718      	adds	r7, #24
 8100f74:	46bd      	mov	sp, r7
 8100f76:	bd80      	pop	{r7, pc}

08100f78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100f78:	b580      	push	{r7, lr}
 8100f7a:	b082      	sub	sp, #8
 8100f7c:	af00      	add	r7, sp, #0
 8100f7e:	4603      	mov	r3, r0
 8100f80:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100f86:	4618      	mov	r0, r3
 8100f88:	f7ff ff56 	bl	8100e38 <__NVIC_EnableIRQ>
}
 8100f8c:	bf00      	nop
 8100f8e:	3708      	adds	r7, #8
 8100f90:	46bd      	mov	sp, r7
 8100f92:	bd80      	pop	{r7, pc}

08100f94 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100f94:	b480      	push	{r7}
 8100f96:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100f98:	4b07      	ldr	r3, [pc, #28]	; (8100fb8 <HAL_GetCurrentCPUID+0x24>)
 8100f9a:	681b      	ldr	r3, [r3, #0]
 8100f9c:	091b      	lsrs	r3, r3, #4
 8100f9e:	f003 030f 	and.w	r3, r3, #15
 8100fa2:	2b07      	cmp	r3, #7
 8100fa4:	d101      	bne.n	8100faa <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100fa6:	2303      	movs	r3, #3
 8100fa8:	e000      	b.n	8100fac <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100faa:	2301      	movs	r3, #1
  }
}
 8100fac:	4618      	mov	r0, r3
 8100fae:	46bd      	mov	sp, r7
 8100fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fb4:	4770      	bx	lr
 8100fb6:	bf00      	nop
 8100fb8:	e000ed00 	.word	0xe000ed00

08100fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8100fbc:	b480      	push	{r7}
 8100fbe:	b089      	sub	sp, #36	; 0x24
 8100fc0:	af00      	add	r7, sp, #0
 8100fc2:	6078      	str	r0, [r7, #4]
 8100fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100fc6:	2300      	movs	r3, #0
 8100fc8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100fca:	4b89      	ldr	r3, [pc, #548]	; (81011f0 <HAL_GPIO_Init+0x234>)
 8100fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100fce:	e194      	b.n	81012fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100fd0:	683b      	ldr	r3, [r7, #0]
 8100fd2:	681a      	ldr	r2, [r3, #0]
 8100fd4:	2101      	movs	r1, #1
 8100fd6:	69fb      	ldr	r3, [r7, #28]
 8100fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8100fdc:	4013      	ands	r3, r2
 8100fde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100fe0:	693b      	ldr	r3, [r7, #16]
 8100fe2:	2b00      	cmp	r3, #0
 8100fe4:	f000 8186 	beq.w	81012f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100fe8:	683b      	ldr	r3, [r7, #0]
 8100fea:	685b      	ldr	r3, [r3, #4]
 8100fec:	2b01      	cmp	r3, #1
 8100fee:	d00b      	beq.n	8101008 <HAL_GPIO_Init+0x4c>
 8100ff0:	683b      	ldr	r3, [r7, #0]
 8100ff2:	685b      	ldr	r3, [r3, #4]
 8100ff4:	2b02      	cmp	r3, #2
 8100ff6:	d007      	beq.n	8101008 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8100ff8:	683b      	ldr	r3, [r7, #0]
 8100ffa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8100ffc:	2b11      	cmp	r3, #17
 8100ffe:	d003      	beq.n	8101008 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101000:	683b      	ldr	r3, [r7, #0]
 8101002:	685b      	ldr	r3, [r3, #4]
 8101004:	2b12      	cmp	r3, #18
 8101006:	d130      	bne.n	810106a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101008:	687b      	ldr	r3, [r7, #4]
 810100a:	689b      	ldr	r3, [r3, #8]
 810100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810100e:	69fb      	ldr	r3, [r7, #28]
 8101010:	005b      	lsls	r3, r3, #1
 8101012:	2203      	movs	r2, #3
 8101014:	fa02 f303 	lsl.w	r3, r2, r3
 8101018:	43db      	mvns	r3, r3
 810101a:	69ba      	ldr	r2, [r7, #24]
 810101c:	4013      	ands	r3, r2
 810101e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101020:	683b      	ldr	r3, [r7, #0]
 8101022:	68da      	ldr	r2, [r3, #12]
 8101024:	69fb      	ldr	r3, [r7, #28]
 8101026:	005b      	lsls	r3, r3, #1
 8101028:	fa02 f303 	lsl.w	r3, r2, r3
 810102c:	69ba      	ldr	r2, [r7, #24]
 810102e:	4313      	orrs	r3, r2
 8101030:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101032:	687b      	ldr	r3, [r7, #4]
 8101034:	69ba      	ldr	r2, [r7, #24]
 8101036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101038:	687b      	ldr	r3, [r7, #4]
 810103a:	685b      	ldr	r3, [r3, #4]
 810103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810103e:	2201      	movs	r2, #1
 8101040:	69fb      	ldr	r3, [r7, #28]
 8101042:	fa02 f303 	lsl.w	r3, r2, r3
 8101046:	43db      	mvns	r3, r3
 8101048:	69ba      	ldr	r2, [r7, #24]
 810104a:	4013      	ands	r3, r2
 810104c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810104e:	683b      	ldr	r3, [r7, #0]
 8101050:	685b      	ldr	r3, [r3, #4]
 8101052:	091b      	lsrs	r3, r3, #4
 8101054:	f003 0201 	and.w	r2, r3, #1
 8101058:	69fb      	ldr	r3, [r7, #28]
 810105a:	fa02 f303 	lsl.w	r3, r2, r3
 810105e:	69ba      	ldr	r2, [r7, #24]
 8101060:	4313      	orrs	r3, r2
 8101062:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101064:	687b      	ldr	r3, [r7, #4]
 8101066:	69ba      	ldr	r2, [r7, #24]
 8101068:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810106a:	687b      	ldr	r3, [r7, #4]
 810106c:	68db      	ldr	r3, [r3, #12]
 810106e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101070:	69fb      	ldr	r3, [r7, #28]
 8101072:	005b      	lsls	r3, r3, #1
 8101074:	2203      	movs	r2, #3
 8101076:	fa02 f303 	lsl.w	r3, r2, r3
 810107a:	43db      	mvns	r3, r3
 810107c:	69ba      	ldr	r2, [r7, #24]
 810107e:	4013      	ands	r3, r2
 8101080:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101082:	683b      	ldr	r3, [r7, #0]
 8101084:	689a      	ldr	r2, [r3, #8]
 8101086:	69fb      	ldr	r3, [r7, #28]
 8101088:	005b      	lsls	r3, r3, #1
 810108a:	fa02 f303 	lsl.w	r3, r2, r3
 810108e:	69ba      	ldr	r2, [r7, #24]
 8101090:	4313      	orrs	r3, r2
 8101092:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101094:	687b      	ldr	r3, [r7, #4]
 8101096:	69ba      	ldr	r2, [r7, #24]
 8101098:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810109a:	683b      	ldr	r3, [r7, #0]
 810109c:	685b      	ldr	r3, [r3, #4]
 810109e:	2b02      	cmp	r3, #2
 81010a0:	d003      	beq.n	81010aa <HAL_GPIO_Init+0xee>
 81010a2:	683b      	ldr	r3, [r7, #0]
 81010a4:	685b      	ldr	r3, [r3, #4]
 81010a6:	2b12      	cmp	r3, #18
 81010a8:	d123      	bne.n	81010f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81010aa:	69fb      	ldr	r3, [r7, #28]
 81010ac:	08da      	lsrs	r2, r3, #3
 81010ae:	687b      	ldr	r3, [r7, #4]
 81010b0:	3208      	adds	r2, #8
 81010b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81010b8:	69fb      	ldr	r3, [r7, #28]
 81010ba:	f003 0307 	and.w	r3, r3, #7
 81010be:	009b      	lsls	r3, r3, #2
 81010c0:	220f      	movs	r2, #15
 81010c2:	fa02 f303 	lsl.w	r3, r2, r3
 81010c6:	43db      	mvns	r3, r3
 81010c8:	69ba      	ldr	r2, [r7, #24]
 81010ca:	4013      	ands	r3, r2
 81010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81010ce:	683b      	ldr	r3, [r7, #0]
 81010d0:	691a      	ldr	r2, [r3, #16]
 81010d2:	69fb      	ldr	r3, [r7, #28]
 81010d4:	f003 0307 	and.w	r3, r3, #7
 81010d8:	009b      	lsls	r3, r3, #2
 81010da:	fa02 f303 	lsl.w	r3, r2, r3
 81010de:	69ba      	ldr	r2, [r7, #24]
 81010e0:	4313      	orrs	r3, r2
 81010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81010e4:	69fb      	ldr	r3, [r7, #28]
 81010e6:	08da      	lsrs	r2, r3, #3
 81010e8:	687b      	ldr	r3, [r7, #4]
 81010ea:	3208      	adds	r2, #8
 81010ec:	69b9      	ldr	r1, [r7, #24]
 81010ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81010f2:	687b      	ldr	r3, [r7, #4]
 81010f4:	681b      	ldr	r3, [r3, #0]
 81010f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81010f8:	69fb      	ldr	r3, [r7, #28]
 81010fa:	005b      	lsls	r3, r3, #1
 81010fc:	2203      	movs	r2, #3
 81010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8101102:	43db      	mvns	r3, r3
 8101104:	69ba      	ldr	r2, [r7, #24]
 8101106:	4013      	ands	r3, r2
 8101108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810110a:	683b      	ldr	r3, [r7, #0]
 810110c:	685b      	ldr	r3, [r3, #4]
 810110e:	f003 0203 	and.w	r2, r3, #3
 8101112:	69fb      	ldr	r3, [r7, #28]
 8101114:	005b      	lsls	r3, r3, #1
 8101116:	fa02 f303 	lsl.w	r3, r2, r3
 810111a:	69ba      	ldr	r2, [r7, #24]
 810111c:	4313      	orrs	r3, r2
 810111e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101120:	687b      	ldr	r3, [r7, #4]
 8101122:	69ba      	ldr	r2, [r7, #24]
 8101124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101126:	683b      	ldr	r3, [r7, #0]
 8101128:	685b      	ldr	r3, [r3, #4]
 810112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810112e:	2b00      	cmp	r3, #0
 8101130:	f000 80e0 	beq.w	81012f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101134:	4b2f      	ldr	r3, [pc, #188]	; (81011f4 <HAL_GPIO_Init+0x238>)
 8101136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810113a:	4a2e      	ldr	r2, [pc, #184]	; (81011f4 <HAL_GPIO_Init+0x238>)
 810113c:	f043 0302 	orr.w	r3, r3, #2
 8101140:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101144:	4b2b      	ldr	r3, [pc, #172]	; (81011f4 <HAL_GPIO_Init+0x238>)
 8101146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810114a:	f003 0302 	and.w	r3, r3, #2
 810114e:	60fb      	str	r3, [r7, #12]
 8101150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101152:	4a29      	ldr	r2, [pc, #164]	; (81011f8 <HAL_GPIO_Init+0x23c>)
 8101154:	69fb      	ldr	r3, [r7, #28]
 8101156:	089b      	lsrs	r3, r3, #2
 8101158:	3302      	adds	r3, #2
 810115a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101160:	69fb      	ldr	r3, [r7, #28]
 8101162:	f003 0303 	and.w	r3, r3, #3
 8101166:	009b      	lsls	r3, r3, #2
 8101168:	220f      	movs	r2, #15
 810116a:	fa02 f303 	lsl.w	r3, r2, r3
 810116e:	43db      	mvns	r3, r3
 8101170:	69ba      	ldr	r2, [r7, #24]
 8101172:	4013      	ands	r3, r2
 8101174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	4a20      	ldr	r2, [pc, #128]	; (81011fc <HAL_GPIO_Init+0x240>)
 810117a:	4293      	cmp	r3, r2
 810117c:	d052      	beq.n	8101224 <HAL_GPIO_Init+0x268>
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	4a1f      	ldr	r2, [pc, #124]	; (8101200 <HAL_GPIO_Init+0x244>)
 8101182:	4293      	cmp	r3, r2
 8101184:	d031      	beq.n	81011ea <HAL_GPIO_Init+0x22e>
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	4a1e      	ldr	r2, [pc, #120]	; (8101204 <HAL_GPIO_Init+0x248>)
 810118a:	4293      	cmp	r3, r2
 810118c:	d02b      	beq.n	81011e6 <HAL_GPIO_Init+0x22a>
 810118e:	687b      	ldr	r3, [r7, #4]
 8101190:	4a1d      	ldr	r2, [pc, #116]	; (8101208 <HAL_GPIO_Init+0x24c>)
 8101192:	4293      	cmp	r3, r2
 8101194:	d025      	beq.n	81011e2 <HAL_GPIO_Init+0x226>
 8101196:	687b      	ldr	r3, [r7, #4]
 8101198:	4a1c      	ldr	r2, [pc, #112]	; (810120c <HAL_GPIO_Init+0x250>)
 810119a:	4293      	cmp	r3, r2
 810119c:	d01f      	beq.n	81011de <HAL_GPIO_Init+0x222>
 810119e:	687b      	ldr	r3, [r7, #4]
 81011a0:	4a1b      	ldr	r2, [pc, #108]	; (8101210 <HAL_GPIO_Init+0x254>)
 81011a2:	4293      	cmp	r3, r2
 81011a4:	d019      	beq.n	81011da <HAL_GPIO_Init+0x21e>
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	4a1a      	ldr	r2, [pc, #104]	; (8101214 <HAL_GPIO_Init+0x258>)
 81011aa:	4293      	cmp	r3, r2
 81011ac:	d013      	beq.n	81011d6 <HAL_GPIO_Init+0x21a>
 81011ae:	687b      	ldr	r3, [r7, #4]
 81011b0:	4a19      	ldr	r2, [pc, #100]	; (8101218 <HAL_GPIO_Init+0x25c>)
 81011b2:	4293      	cmp	r3, r2
 81011b4:	d00d      	beq.n	81011d2 <HAL_GPIO_Init+0x216>
 81011b6:	687b      	ldr	r3, [r7, #4]
 81011b8:	4a18      	ldr	r2, [pc, #96]	; (810121c <HAL_GPIO_Init+0x260>)
 81011ba:	4293      	cmp	r3, r2
 81011bc:	d007      	beq.n	81011ce <HAL_GPIO_Init+0x212>
 81011be:	687b      	ldr	r3, [r7, #4]
 81011c0:	4a17      	ldr	r2, [pc, #92]	; (8101220 <HAL_GPIO_Init+0x264>)
 81011c2:	4293      	cmp	r3, r2
 81011c4:	d101      	bne.n	81011ca <HAL_GPIO_Init+0x20e>
 81011c6:	2309      	movs	r3, #9
 81011c8:	e02d      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011ca:	230a      	movs	r3, #10
 81011cc:	e02b      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011ce:	2308      	movs	r3, #8
 81011d0:	e029      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011d2:	2307      	movs	r3, #7
 81011d4:	e027      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011d6:	2306      	movs	r3, #6
 81011d8:	e025      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011da:	2305      	movs	r3, #5
 81011dc:	e023      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011de:	2304      	movs	r3, #4
 81011e0:	e021      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011e2:	2303      	movs	r3, #3
 81011e4:	e01f      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011e6:	2302      	movs	r3, #2
 81011e8:	e01d      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011ea:	2301      	movs	r3, #1
 81011ec:	e01b      	b.n	8101226 <HAL_GPIO_Init+0x26a>
 81011ee:	bf00      	nop
 81011f0:	580000c0 	.word	0x580000c0
 81011f4:	58024400 	.word	0x58024400
 81011f8:	58000400 	.word	0x58000400
 81011fc:	58020000 	.word	0x58020000
 8101200:	58020400 	.word	0x58020400
 8101204:	58020800 	.word	0x58020800
 8101208:	58020c00 	.word	0x58020c00
 810120c:	58021000 	.word	0x58021000
 8101210:	58021400 	.word	0x58021400
 8101214:	58021800 	.word	0x58021800
 8101218:	58021c00 	.word	0x58021c00
 810121c:	58022000 	.word	0x58022000
 8101220:	58022400 	.word	0x58022400
 8101224:	2300      	movs	r3, #0
 8101226:	69fa      	ldr	r2, [r7, #28]
 8101228:	f002 0203 	and.w	r2, r2, #3
 810122c:	0092      	lsls	r2, r2, #2
 810122e:	4093      	lsls	r3, r2
 8101230:	69ba      	ldr	r2, [r7, #24]
 8101232:	4313      	orrs	r3, r2
 8101234:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101236:	4938      	ldr	r1, [pc, #224]	; (8101318 <HAL_GPIO_Init+0x35c>)
 8101238:	69fb      	ldr	r3, [r7, #28]
 810123a:	089b      	lsrs	r3, r3, #2
 810123c:	3302      	adds	r3, #2
 810123e:	69ba      	ldr	r2, [r7, #24]
 8101240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101244:	697b      	ldr	r3, [r7, #20]
 8101246:	681b      	ldr	r3, [r3, #0]
 8101248:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810124a:	693b      	ldr	r3, [r7, #16]
 810124c:	43db      	mvns	r3, r3
 810124e:	69ba      	ldr	r2, [r7, #24]
 8101250:	4013      	ands	r3, r2
 8101252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8101254:	683b      	ldr	r3, [r7, #0]
 8101256:	685b      	ldr	r3, [r3, #4]
 8101258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810125c:	2b00      	cmp	r3, #0
 810125e:	d003      	beq.n	8101268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101260:	69ba      	ldr	r2, [r7, #24]
 8101262:	693b      	ldr	r3, [r7, #16]
 8101264:	4313      	orrs	r3, r2
 8101266:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101268:	697b      	ldr	r3, [r7, #20]
 810126a:	69ba      	ldr	r2, [r7, #24]
 810126c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810126e:	697b      	ldr	r3, [r7, #20]
 8101270:	685b      	ldr	r3, [r3, #4]
 8101272:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101274:	693b      	ldr	r3, [r7, #16]
 8101276:	43db      	mvns	r3, r3
 8101278:	69ba      	ldr	r2, [r7, #24]
 810127a:	4013      	ands	r3, r2
 810127c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810127e:	683b      	ldr	r3, [r7, #0]
 8101280:	685b      	ldr	r3, [r3, #4]
 8101282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101286:	2b00      	cmp	r3, #0
 8101288:	d003      	beq.n	8101292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810128a:	69ba      	ldr	r2, [r7, #24]
 810128c:	693b      	ldr	r3, [r7, #16]
 810128e:	4313      	orrs	r3, r2
 8101290:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101292:	697b      	ldr	r3, [r7, #20]
 8101294:	69ba      	ldr	r2, [r7, #24]
 8101296:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810129c:	681b      	ldr	r3, [r3, #0]
 810129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81012a0:	693b      	ldr	r3, [r7, #16]
 81012a2:	43db      	mvns	r3, r3
 81012a4:	69ba      	ldr	r2, [r7, #24]
 81012a6:	4013      	ands	r3, r2
 81012a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81012aa:	683b      	ldr	r3, [r7, #0]
 81012ac:	685b      	ldr	r3, [r3, #4]
 81012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81012b2:	2b00      	cmp	r3, #0
 81012b4:	d003      	beq.n	81012be <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81012b6:	69ba      	ldr	r2, [r7, #24]
 81012b8:	693b      	ldr	r3, [r7, #16]
 81012ba:	4313      	orrs	r3, r2
 81012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81012be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81012c2:	69bb      	ldr	r3, [r7, #24]
 81012c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81012c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81012ca:	685b      	ldr	r3, [r3, #4]
 81012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81012ce:	693b      	ldr	r3, [r7, #16]
 81012d0:	43db      	mvns	r3, r3
 81012d2:	69ba      	ldr	r2, [r7, #24]
 81012d4:	4013      	ands	r3, r2
 81012d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81012d8:	683b      	ldr	r3, [r7, #0]
 81012da:	685b      	ldr	r3, [r3, #4]
 81012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81012e0:	2b00      	cmp	r3, #0
 81012e2:	d003      	beq.n	81012ec <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81012e4:	69ba      	ldr	r2, [r7, #24]
 81012e6:	693b      	ldr	r3, [r7, #16]
 81012e8:	4313      	orrs	r3, r2
 81012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81012ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81012f0:	69bb      	ldr	r3, [r7, #24]
 81012f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81012f4:	69fb      	ldr	r3, [r7, #28]
 81012f6:	3301      	adds	r3, #1
 81012f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81012fa:	683b      	ldr	r3, [r7, #0]
 81012fc:	681a      	ldr	r2, [r3, #0]
 81012fe:	69fb      	ldr	r3, [r7, #28]
 8101300:	fa22 f303 	lsr.w	r3, r2, r3
 8101304:	2b00      	cmp	r3, #0
 8101306:	f47f ae63 	bne.w	8100fd0 <HAL_GPIO_Init+0x14>
  }
}
 810130a:	bf00      	nop
 810130c:	3724      	adds	r7, #36	; 0x24
 810130e:	46bd      	mov	sp, r7
 8101310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101314:	4770      	bx	lr
 8101316:	bf00      	nop
 8101318:	58000400 	.word	0x58000400

0810131c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810131c:	b480      	push	{r7}
 810131e:	b083      	sub	sp, #12
 8101320:	af00      	add	r7, sp, #0
 8101322:	6078      	str	r0, [r7, #4]
 8101324:	460b      	mov	r3, r1
 8101326:	807b      	strh	r3, [r7, #2]
 8101328:	4613      	mov	r3, r2
 810132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810132c:	787b      	ldrb	r3, [r7, #1]
 810132e:	2b00      	cmp	r3, #0
 8101330:	d003      	beq.n	810133a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101332:	887a      	ldrh	r2, [r7, #2]
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101338:	e003      	b.n	8101342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810133a:	887b      	ldrh	r3, [r7, #2]
 810133c:	041a      	lsls	r2, r3, #16
 810133e:	687b      	ldr	r3, [r7, #4]
 8101340:	619a      	str	r2, [r3, #24]
}
 8101342:	bf00      	nop
 8101344:	370c      	adds	r7, #12
 8101346:	46bd      	mov	sp, r7
 8101348:	f85d 7b04 	ldr.w	r7, [sp], #4
 810134c:	4770      	bx	lr
	...

08101350 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101350:	b480      	push	{r7}
 8101352:	b083      	sub	sp, #12
 8101354:	af00      	add	r7, sp, #0
 8101356:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101358:	4b05      	ldr	r3, [pc, #20]	; (8101370 <HAL_HSEM_ActivateNotification+0x20>)
 810135a:	681a      	ldr	r2, [r3, #0]
 810135c:	4904      	ldr	r1, [pc, #16]	; (8101370 <HAL_HSEM_ActivateNotification+0x20>)
 810135e:	687b      	ldr	r3, [r7, #4]
 8101360:	4313      	orrs	r3, r2
 8101362:	600b      	str	r3, [r1, #0]
#endif
}
 8101364:	bf00      	nop
 8101366:	370c      	adds	r7, #12
 8101368:	46bd      	mov	sp, r7
 810136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136e:	4770      	bx	lr
 8101370:	58026510 	.word	0x58026510

08101374 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101374:	b580      	push	{r7, lr}
 8101376:	b082      	sub	sp, #8
 8101378:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810137a:	4b0a      	ldr	r3, [pc, #40]	; (81013a4 <HAL_HSEM_IRQHandler+0x30>)
 810137c:	68db      	ldr	r3, [r3, #12]
 810137e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8101380:	4b08      	ldr	r3, [pc, #32]	; (81013a4 <HAL_HSEM_IRQHandler+0x30>)
 8101382:	681a      	ldr	r2, [r3, #0]
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	43db      	mvns	r3, r3
 8101388:	4906      	ldr	r1, [pc, #24]	; (81013a4 <HAL_HSEM_IRQHandler+0x30>)
 810138a:	4013      	ands	r3, r2
 810138c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810138e:	4a05      	ldr	r2, [pc, #20]	; (81013a4 <HAL_HSEM_IRQHandler+0x30>)
 8101390:	687b      	ldr	r3, [r7, #4]
 8101392:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8101394:	6878      	ldr	r0, [r7, #4]
 8101396:	f000 f807 	bl	81013a8 <HAL_HSEM_FreeCallback>
}
 810139a:	bf00      	nop
 810139c:	3708      	adds	r7, #8
 810139e:	46bd      	mov	sp, r7
 81013a0:	bd80      	pop	{r7, pc}
 81013a2:	bf00      	nop
 81013a4:	58026510 	.word	0x58026510

081013a8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81013a8:	b480      	push	{r7}
 81013aa:	b083      	sub	sp, #12
 81013ac:	af00      	add	r7, sp, #0
 81013ae:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 81013b0:	bf00      	nop
 81013b2:	370c      	adds	r7, #12
 81013b4:	46bd      	mov	sp, r7
 81013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ba:	4770      	bx	lr

081013bc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81013bc:	b580      	push	{r7, lr}
 81013be:	b084      	sub	sp, #16
 81013c0:	af00      	add	r7, sp, #0
 81013c2:	60f8      	str	r0, [r7, #12]
 81013c4:	460b      	mov	r3, r1
 81013c6:	607a      	str	r2, [r7, #4]
 81013c8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81013ca:	4b2f      	ldr	r3, [pc, #188]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81013cc:	681b      	ldr	r3, [r3, #0]
 81013ce:	f023 0201 	bic.w	r2, r3, #1
 81013d2:	492d      	ldr	r1, [pc, #180]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81013d4:	68fb      	ldr	r3, [r7, #12]
 81013d6:	4313      	orrs	r3, r2
 81013d8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81013da:	687b      	ldr	r3, [r7, #4]
 81013dc:	2b00      	cmp	r3, #0
 81013de:	d121      	bne.n	8101424 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81013e0:	f7ff fdd8 	bl	8100f94 <HAL_GetCurrentCPUID>
 81013e4:	4603      	mov	r3, r0
 81013e6:	2b03      	cmp	r3, #3
 81013e8:	d148      	bne.n	810147c <HAL_PWREx_EnterSTOPMode+0xc0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81013ea:	4b27      	ldr	r3, [pc, #156]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81013ec:	691b      	ldr	r3, [r3, #16]
 81013ee:	4a26      	ldr	r2, [pc, #152]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 81013f0:	f023 0301 	bic.w	r3, r3, #1
 81013f4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81013f6:	4b25      	ldr	r3, [pc, #148]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 81013f8:	691b      	ldr	r3, [r3, #16]
 81013fa:	4a24      	ldr	r2, [pc, #144]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 81013fc:	f043 0304 	orr.w	r3, r3, #4
 8101400:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101402:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8101406:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810140a:	7afb      	ldrb	r3, [r7, #11]
 810140c:	2b01      	cmp	r3, #1
 810140e:	d101      	bne.n	8101414 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101410:	bf30      	wfi
 8101412:	e000      	b.n	8101416 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101414:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101416:	4b1d      	ldr	r3, [pc, #116]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8101418:	691b      	ldr	r3, [r3, #16]
 810141a:	4a1c      	ldr	r2, [pc, #112]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 810141c:	f023 0304 	bic.w	r3, r3, #4
 8101420:	6113      	str	r3, [r2, #16]
 8101422:	e02e      	b.n	8101482 <HAL_PWREx_EnterSTOPMode+0xc6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101424:	687b      	ldr	r3, [r7, #4]
 8101426:	2b01      	cmp	r3, #1
 8101428:	d121      	bne.n	810146e <HAL_PWREx_EnterSTOPMode+0xb2>
  {
    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 810142a:	4b17      	ldr	r3, [pc, #92]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 810142c:	691b      	ldr	r3, [r3, #16]
 810142e:	4a16      	ldr	r2, [pc, #88]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8101430:	f023 0302 	bic.w	r3, r3, #2
 8101434:	6113      	str	r3, [r2, #16]

#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101436:	f7ff fdad 	bl	8100f94 <HAL_GetCurrentCPUID>
 810143a:	4603      	mov	r3, r0
 810143c:	2b01      	cmp	r3, #1
 810143e:	d11f      	bne.n	8101480 <HAL_PWREx_EnterSTOPMode+0xc4>
      */
      return;
    }

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101440:	4b12      	ldr	r3, [pc, #72]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8101442:	691b      	ldr	r3, [r3, #16]
 8101444:	4a11      	ldr	r2, [pc, #68]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8101446:	f043 0304 	orr.w	r3, r3, #4
 810144a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810144c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8101450:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101454:	7afb      	ldrb	r3, [r7, #11]
 8101456:	2b01      	cmp	r3, #1
 8101458:	d101      	bne.n	810145e <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810145a:	bf30      	wfi
 810145c:	e000      	b.n	8101460 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810145e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101460:	4b0a      	ldr	r3, [pc, #40]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8101462:	691b      	ldr	r3, [r3, #16]
 8101464:	4a09      	ldr	r2, [pc, #36]	; (810148c <HAL_PWREx_EnterSTOPMode+0xd0>)
 8101466:	f023 0304 	bic.w	r3, r3, #4
 810146a:	6113      	str	r3, [r2, #16]
 810146c:	e009      	b.n	8101482 <HAL_PWREx_EnterSTOPMode+0xc6>
  }
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810146e:	4b06      	ldr	r3, [pc, #24]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8101470:	691b      	ldr	r3, [r3, #16]
 8101472:	4a05      	ldr	r2, [pc, #20]	; (8101488 <HAL_PWREx_EnterSTOPMode+0xcc>)
 8101474:	f023 0304 	bic.w	r3, r3, #4
 8101478:	6113      	str	r3, [r2, #16]
 810147a:	e002      	b.n	8101482 <HAL_PWREx_EnterSTOPMode+0xc6>
      return;
 810147c:	bf00      	nop
 810147e:	e000      	b.n	8101482 <HAL_PWREx_EnterSTOPMode+0xc6>
      return;
 8101480:	bf00      	nop
  }
}
 8101482:	3710      	adds	r7, #16
 8101484:	46bd      	mov	sp, r7
 8101486:	bd80      	pop	{r7, pc}
 8101488:	58024800 	.word	0x58024800
 810148c:	e000ed00 	.word	0xe000ed00

08101490 <HAL_PWREx_ClearPendingEvent>:
  *         to CSLEEP or CSTOP. It should be called just before APIs performing
  *         enter low power mode using Wait For Event request.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101494:	f7ff fd7e 	bl	8100f94 <HAL_GetCurrentCPUID>
 8101498:	4603      	mov	r3, r0
 810149a:	2b03      	cmp	r3, #3
 810149c:	d101      	bne.n	81014a2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810149e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81014a0:	e001      	b.n	81014a6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81014a2:	bf40      	sev
    __WFE ();
 81014a4:	bf20      	wfe
}
 81014a6:	bf00      	nop
 81014a8:	bd80      	pop	{r7, pc}
	...

081014ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81014ac:	b480      	push	{r7}
 81014ae:	b089      	sub	sp, #36	; 0x24
 81014b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81014b2:	4baf      	ldr	r3, [pc, #700]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81014b4:	691b      	ldr	r3, [r3, #16]
 81014b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81014ba:	2b18      	cmp	r3, #24
 81014bc:	f200 814e 	bhi.w	810175c <HAL_RCC_GetSysClockFreq+0x2b0>
 81014c0:	a201      	add	r2, pc, #4	; (adr r2, 81014c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81014c6:	bf00      	nop
 81014c8:	0810152d 	.word	0x0810152d
 81014cc:	0810175d 	.word	0x0810175d
 81014d0:	0810175d 	.word	0x0810175d
 81014d4:	0810175d 	.word	0x0810175d
 81014d8:	0810175d 	.word	0x0810175d
 81014dc:	0810175d 	.word	0x0810175d
 81014e0:	0810175d 	.word	0x0810175d
 81014e4:	0810175d 	.word	0x0810175d
 81014e8:	08101553 	.word	0x08101553
 81014ec:	0810175d 	.word	0x0810175d
 81014f0:	0810175d 	.word	0x0810175d
 81014f4:	0810175d 	.word	0x0810175d
 81014f8:	0810175d 	.word	0x0810175d
 81014fc:	0810175d 	.word	0x0810175d
 8101500:	0810175d 	.word	0x0810175d
 8101504:	0810175d 	.word	0x0810175d
 8101508:	08101559 	.word	0x08101559
 810150c:	0810175d 	.word	0x0810175d
 8101510:	0810175d 	.word	0x0810175d
 8101514:	0810175d 	.word	0x0810175d
 8101518:	0810175d 	.word	0x0810175d
 810151c:	0810175d 	.word	0x0810175d
 8101520:	0810175d 	.word	0x0810175d
 8101524:	0810175d 	.word	0x0810175d
 8101528:	0810155f 	.word	0x0810155f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810152c:	4b90      	ldr	r3, [pc, #576]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	f003 0320 	and.w	r3, r3, #32
 8101534:	2b00      	cmp	r3, #0
 8101536:	d009      	beq.n	810154c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101538:	4b8d      	ldr	r3, [pc, #564]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	08db      	lsrs	r3, r3, #3
 810153e:	f003 0303 	and.w	r3, r3, #3
 8101542:	4a8c      	ldr	r2, [pc, #560]	; (8101774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8101544:	fa22 f303 	lsr.w	r3, r2, r3
 8101548:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810154a:	e10a      	b.n	8101762 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810154c:	4b89      	ldr	r3, [pc, #548]	; (8101774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 810154e:	61bb      	str	r3, [r7, #24]
    break;
 8101550:	e107      	b.n	8101762 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101552:	4b89      	ldr	r3, [pc, #548]	; (8101778 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8101554:	61bb      	str	r3, [r7, #24]
    break;
 8101556:	e104      	b.n	8101762 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101558:	4b88      	ldr	r3, [pc, #544]	; (810177c <HAL_RCC_GetSysClockFreq+0x2d0>)
 810155a:	61bb      	str	r3, [r7, #24]
    break;
 810155c:	e101      	b.n	8101762 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810155e:	4b84      	ldr	r3, [pc, #528]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101562:	f003 0303 	and.w	r3, r3, #3
 8101566:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101568:	4b81      	ldr	r3, [pc, #516]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810156c:	091b      	lsrs	r3, r3, #4
 810156e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101572:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101574:	4b7e      	ldr	r3, [pc, #504]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101578:	f003 0301 	and.w	r3, r3, #1
 810157c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810157e:	4b7c      	ldr	r3, [pc, #496]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101582:	08db      	lsrs	r3, r3, #3
 8101584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101588:	68fa      	ldr	r2, [r7, #12]
 810158a:	fb02 f303 	mul.w	r3, r2, r3
 810158e:	ee07 3a90 	vmov	s15, r3
 8101592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101596:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810159a:	693b      	ldr	r3, [r7, #16]
 810159c:	2b00      	cmp	r3, #0
 810159e:	f000 80da 	beq.w	8101756 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81015a2:	697b      	ldr	r3, [r7, #20]
 81015a4:	2b01      	cmp	r3, #1
 81015a6:	d05a      	beq.n	810165e <HAL_RCC_GetSysClockFreq+0x1b2>
 81015a8:	2b01      	cmp	r3, #1
 81015aa:	d302      	bcc.n	81015b2 <HAL_RCC_GetSysClockFreq+0x106>
 81015ac:	2b02      	cmp	r3, #2
 81015ae:	d078      	beq.n	81016a2 <HAL_RCC_GetSysClockFreq+0x1f6>
 81015b0:	e099      	b.n	81016e6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81015b2:	4b6f      	ldr	r3, [pc, #444]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	f003 0320 	and.w	r3, r3, #32
 81015ba:	2b00      	cmp	r3, #0
 81015bc:	d02d      	beq.n	810161a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81015be:	4b6c      	ldr	r3, [pc, #432]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81015c0:	681b      	ldr	r3, [r3, #0]
 81015c2:	08db      	lsrs	r3, r3, #3
 81015c4:	f003 0303 	and.w	r3, r3, #3
 81015c8:	4a6a      	ldr	r2, [pc, #424]	; (8101774 <HAL_RCC_GetSysClockFreq+0x2c8>)
 81015ca:	fa22 f303 	lsr.w	r3, r2, r3
 81015ce:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81015d0:	687b      	ldr	r3, [r7, #4]
 81015d2:	ee07 3a90 	vmov	s15, r3
 81015d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81015da:	693b      	ldr	r3, [r7, #16]
 81015dc:	ee07 3a90 	vmov	s15, r3
 81015e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81015e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81015e8:	4b61      	ldr	r3, [pc, #388]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81015ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81015f0:	ee07 3a90 	vmov	s15, r3
 81015f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81015f8:	ed97 6a02 	vldr	s12, [r7, #8]
 81015fc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8101780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810160c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101614:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101618:	e087      	b.n	810172a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810161a:	693b      	ldr	r3, [r7, #16]
 810161c:	ee07 3a90 	vmov	s15, r3
 8101620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101624:	eddf 6a57 	vldr	s13, [pc, #348]	; 8101784 <HAL_RCC_GetSysClockFreq+0x2d8>
 8101628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810162c:	4b50      	ldr	r3, [pc, #320]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101634:	ee07 3a90 	vmov	s15, r3
 8101638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810163c:	ed97 6a02 	vldr	s12, [r7, #8]
 8101640:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8101780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810164c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810165c:	e065      	b.n	810172a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810165e:	693b      	ldr	r3, [r7, #16]
 8101660:	ee07 3a90 	vmov	s15, r3
 8101664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101668:	eddf 6a47 	vldr	s13, [pc, #284]	; 8101788 <HAL_RCC_GetSysClockFreq+0x2dc>
 810166c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101670:	4b3f      	ldr	r3, [pc, #252]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101678:	ee07 3a90 	vmov	s15, r3
 810167c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101680:	ed97 6a02 	vldr	s12, [r7, #8]
 8101684:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8101780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810168c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101698:	ee67 7a27 	vmul.f32	s15, s14, s15
 810169c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81016a0:	e043      	b.n	810172a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81016a2:	693b      	ldr	r3, [r7, #16]
 81016a4:	ee07 3a90 	vmov	s15, r3
 81016a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016ac:	eddf 6a37 	vldr	s13, [pc, #220]	; 810178c <HAL_RCC_GetSysClockFreq+0x2e0>
 81016b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016b4:	4b2e      	ldr	r3, [pc, #184]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81016b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81016bc:	ee07 3a90 	vmov	s15, r3
 81016c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016c4:	ed97 6a02 	vldr	s12, [r7, #8]
 81016c8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8101780 <HAL_RCC_GetSysClockFreq+0x2d4>
 81016cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81016d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81016d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81016d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81016dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81016e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81016e4:	e021      	b.n	810172a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81016e6:	693b      	ldr	r3, [r7, #16]
 81016e8:	ee07 3a90 	vmov	s15, r3
 81016ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016f0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8101788 <HAL_RCC_GetSysClockFreq+0x2dc>
 81016f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016f8:	4b1d      	ldr	r3, [pc, #116]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81016fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101700:	ee07 3a90 	vmov	s15, r3
 8101704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101708:	ed97 6a02 	vldr	s12, [r7, #8]
 810170c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8101780 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810171c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101724:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101728:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810172a:	4b11      	ldr	r3, [pc, #68]	; (8101770 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810172e:	0a5b      	lsrs	r3, r3, #9
 8101730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101734:	3301      	adds	r3, #1
 8101736:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101738:	683b      	ldr	r3, [r7, #0]
 810173a:	ee07 3a90 	vmov	s15, r3
 810173e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101742:	edd7 6a07 	vldr	s13, [r7, #28]
 8101746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810174a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810174e:	ee17 3a90 	vmov	r3, s15
 8101752:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101754:	e005      	b.n	8101762 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8101756:	2300      	movs	r3, #0
 8101758:	61bb      	str	r3, [r7, #24]
    break;
 810175a:	e002      	b.n	8101762 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 810175c:	4b06      	ldr	r3, [pc, #24]	; (8101778 <HAL_RCC_GetSysClockFreq+0x2cc>)
 810175e:	61bb      	str	r3, [r7, #24]
    break;
 8101760:	bf00      	nop
  }

  return sysclockfreq;
 8101762:	69bb      	ldr	r3, [r7, #24]
}
 8101764:	4618      	mov	r0, r3
 8101766:	3724      	adds	r7, #36	; 0x24
 8101768:	46bd      	mov	sp, r7
 810176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810176e:	4770      	bx	lr
 8101770:	58024400 	.word	0x58024400
 8101774:	03d09000 	.word	0x03d09000
 8101778:	003d0900 	.word	0x003d0900
 810177c:	007a1200 	.word	0x007a1200
 8101780:	46000000 	.word	0x46000000
 8101784:	4c742400 	.word	0x4c742400
 8101788:	4a742400 	.word	0x4a742400
 810178c:	4af42400 	.word	0x4af42400

08101790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101790:	b580      	push	{r7, lr}
 8101792:	b082      	sub	sp, #8
 8101794:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101796:	f7ff fe89 	bl	81014ac <HAL_RCC_GetSysClockFreq>
 810179a:	4601      	mov	r1, r0
 810179c:	4b11      	ldr	r3, [pc, #68]	; (81017e4 <HAL_RCC_GetHCLKFreq+0x54>)
 810179e:	699b      	ldr	r3, [r3, #24]
 81017a0:	0a1b      	lsrs	r3, r3, #8
 81017a2:	f003 030f 	and.w	r3, r3, #15
 81017a6:	4a10      	ldr	r2, [pc, #64]	; (81017e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81017a8:	5cd3      	ldrb	r3, [r2, r3]
 81017aa:	f003 031f 	and.w	r3, r3, #31
 81017ae:	fa21 f303 	lsr.w	r3, r1, r3
 81017b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81017b4:	4b0b      	ldr	r3, [pc, #44]	; (81017e4 <HAL_RCC_GetHCLKFreq+0x54>)
 81017b6:	699b      	ldr	r3, [r3, #24]
 81017b8:	f003 030f 	and.w	r3, r3, #15
 81017bc:	4a0a      	ldr	r2, [pc, #40]	; (81017e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81017be:	5cd3      	ldrb	r3, [r2, r3]
 81017c0:	f003 031f 	and.w	r3, r3, #31
 81017c4:	687a      	ldr	r2, [r7, #4]
 81017c6:	fa22 f303 	lsr.w	r3, r2, r3
 81017ca:	4a08      	ldr	r2, [pc, #32]	; (81017ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81017cc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81017ce:	4b07      	ldr	r3, [pc, #28]	; (81017ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	4a07      	ldr	r2, [pc, #28]	; (81017f0 <HAL_RCC_GetHCLKFreq+0x60>)
 81017d4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81017d6:	4b05      	ldr	r3, [pc, #20]	; (81017ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81017d8:	681b      	ldr	r3, [r3, #0]
}
 81017da:	4618      	mov	r0, r3
 81017dc:	3708      	adds	r7, #8
 81017de:	46bd      	mov	sp, r7
 81017e0:	bd80      	pop	{r7, pc}
 81017e2:	bf00      	nop
 81017e4:	58024400 	.word	0x58024400
 81017e8:	081084e8 	.word	0x081084e8
 81017ec:	10000004 	.word	0x10000004
 81017f0:	10000000 	.word	0x10000000

081017f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81017f4:	b580      	push	{r7, lr}
 81017f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81017f8:	f7ff ffca 	bl	8101790 <HAL_RCC_GetHCLKFreq>
 81017fc:	4601      	mov	r1, r0
 81017fe:	4b06      	ldr	r3, [pc, #24]	; (8101818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101800:	69db      	ldr	r3, [r3, #28]
 8101802:	091b      	lsrs	r3, r3, #4
 8101804:	f003 0307 	and.w	r3, r3, #7
 8101808:	4a04      	ldr	r2, [pc, #16]	; (810181c <HAL_RCC_GetPCLK1Freq+0x28>)
 810180a:	5cd3      	ldrb	r3, [r2, r3]
 810180c:	f003 031f 	and.w	r3, r3, #31
 8101810:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101814:	4618      	mov	r0, r3
 8101816:	bd80      	pop	{r7, pc}
 8101818:	58024400 	.word	0x58024400
 810181c:	081084e8 	.word	0x081084e8

08101820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101820:	b580      	push	{r7, lr}
 8101822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101824:	f7ff ffb4 	bl	8101790 <HAL_RCC_GetHCLKFreq>
 8101828:	4601      	mov	r1, r0
 810182a:	4b06      	ldr	r3, [pc, #24]	; (8101844 <HAL_RCC_GetPCLK2Freq+0x24>)
 810182c:	69db      	ldr	r3, [r3, #28]
 810182e:	0a1b      	lsrs	r3, r3, #8
 8101830:	f003 0307 	and.w	r3, r3, #7
 8101834:	4a04      	ldr	r2, [pc, #16]	; (8101848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101836:	5cd3      	ldrb	r3, [r2, r3]
 8101838:	f003 031f 	and.w	r3, r3, #31
 810183c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101840:	4618      	mov	r0, r3
 8101842:	bd80      	pop	{r7, pc}
 8101844:	58024400 	.word	0x58024400
 8101848:	081084e8 	.word	0x081084e8

0810184c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810184c:	b480      	push	{r7}
 810184e:	b083      	sub	sp, #12
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]
 8101854:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	223f      	movs	r2, #63	; 0x3f
 810185a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810185c:	4b1a      	ldr	r3, [pc, #104]	; (81018c8 <HAL_RCC_GetClockConfig+0x7c>)
 810185e:	691b      	ldr	r3, [r3, #16]
 8101860:	f003 0207 	and.w	r2, r3, #7
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101868:	4b17      	ldr	r3, [pc, #92]	; (81018c8 <HAL_RCC_GetClockConfig+0x7c>)
 810186a:	699b      	ldr	r3, [r3, #24]
 810186c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101870:	687b      	ldr	r3, [r7, #4]
 8101872:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101874:	4b14      	ldr	r3, [pc, #80]	; (81018c8 <HAL_RCC_GetClockConfig+0x7c>)
 8101876:	699b      	ldr	r3, [r3, #24]
 8101878:	f003 020f 	and.w	r2, r3, #15
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101880:	4b11      	ldr	r3, [pc, #68]	; (81018c8 <HAL_RCC_GetClockConfig+0x7c>)
 8101882:	699b      	ldr	r3, [r3, #24]
 8101884:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101888:	687b      	ldr	r3, [r7, #4]
 810188a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810188c:	4b0e      	ldr	r3, [pc, #56]	; (81018c8 <HAL_RCC_GetClockConfig+0x7c>)
 810188e:	69db      	ldr	r3, [r3, #28]
 8101890:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101894:	687b      	ldr	r3, [r7, #4]
 8101896:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101898:	4b0b      	ldr	r3, [pc, #44]	; (81018c8 <HAL_RCC_GetClockConfig+0x7c>)
 810189a:	69db      	ldr	r3, [r3, #28]
 810189c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81018a0:	687b      	ldr	r3, [r7, #4]
 81018a2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81018a4:	4b08      	ldr	r3, [pc, #32]	; (81018c8 <HAL_RCC_GetClockConfig+0x7c>)
 81018a6:	6a1b      	ldr	r3, [r3, #32]
 81018a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81018ac:	687b      	ldr	r3, [r7, #4]
 81018ae:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81018b0:	4b06      	ldr	r3, [pc, #24]	; (81018cc <HAL_RCC_GetClockConfig+0x80>)
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	f003 020f 	and.w	r2, r3, #15
 81018b8:	683b      	ldr	r3, [r7, #0]
 81018ba:	601a      	str	r2, [r3, #0]
}
 81018bc:	bf00      	nop
 81018be:	370c      	adds	r7, #12
 81018c0:	46bd      	mov	sp, r7
 81018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c6:	4770      	bx	lr
 81018c8:	58024400 	.word	0x58024400
 81018cc:	52002000 	.word	0x52002000

081018d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81018d0:	b580      	push	{r7, lr}
 81018d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81018d4:	f7ff ff5c 	bl	8101790 <HAL_RCC_GetHCLKFreq>
 81018d8:	4601      	mov	r1, r0
 81018da:	4b06      	ldr	r3, [pc, #24]	; (81018f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81018dc:	6a1b      	ldr	r3, [r3, #32]
 81018de:	091b      	lsrs	r3, r3, #4
 81018e0:	f003 0307 	and.w	r3, r3, #7
 81018e4:	4a04      	ldr	r2, [pc, #16]	; (81018f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81018e6:	5cd3      	ldrb	r3, [r2, r3]
 81018e8:	f003 031f 	and.w	r3, r3, #31
 81018ec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81018f0:	4618      	mov	r0, r3
 81018f2:	bd80      	pop	{r7, pc}
 81018f4:	58024400 	.word	0x58024400
 81018f8:	081084e8 	.word	0x081084e8

081018fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81018fc:	b480      	push	{r7}
 81018fe:	b089      	sub	sp, #36	; 0x24
 8101900:	af00      	add	r7, sp, #0
 8101902:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101904:	4b9d      	ldr	r3, [pc, #628]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101908:	f003 0303 	and.w	r3, r3, #3
 810190c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810190e:	4b9b      	ldr	r3, [pc, #620]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101912:	0b1b      	lsrs	r3, r3, #12
 8101914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101918:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810191a:	4b98      	ldr	r3, [pc, #608]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810191e:	091b      	lsrs	r3, r3, #4
 8101920:	f003 0301 	and.w	r3, r3, #1
 8101924:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8101926:	4b95      	ldr	r3, [pc, #596]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810192a:	08db      	lsrs	r3, r3, #3
 810192c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101930:	693a      	ldr	r2, [r7, #16]
 8101932:	fb02 f303 	mul.w	r3, r2, r3
 8101936:	ee07 3a90 	vmov	s15, r3
 810193a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810193e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8101942:	697b      	ldr	r3, [r7, #20]
 8101944:	2b00      	cmp	r3, #0
 8101946:	f000 810a 	beq.w	8101b5e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 810194a:	69bb      	ldr	r3, [r7, #24]
 810194c:	2b01      	cmp	r3, #1
 810194e:	d05a      	beq.n	8101a06 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8101950:	2b01      	cmp	r3, #1
 8101952:	d302      	bcc.n	810195a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8101954:	2b02      	cmp	r3, #2
 8101956:	d078      	beq.n	8101a4a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8101958:	e099      	b.n	8101a8e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810195a:	4b88      	ldr	r3, [pc, #544]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810195c:	681b      	ldr	r3, [r3, #0]
 810195e:	f003 0320 	and.w	r3, r3, #32
 8101962:	2b00      	cmp	r3, #0
 8101964:	d02d      	beq.n	81019c2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101966:	4b85      	ldr	r3, [pc, #532]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101968:	681b      	ldr	r3, [r3, #0]
 810196a:	08db      	lsrs	r3, r3, #3
 810196c:	f003 0303 	and.w	r3, r3, #3
 8101970:	4a83      	ldr	r2, [pc, #524]	; (8101b80 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8101972:	fa22 f303 	lsr.w	r3, r2, r3
 8101976:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101978:	68bb      	ldr	r3, [r7, #8]
 810197a:	ee07 3a90 	vmov	s15, r3
 810197e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101982:	697b      	ldr	r3, [r7, #20]
 8101984:	ee07 3a90 	vmov	s15, r3
 8101988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810198c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101990:	4b7a      	ldr	r3, [pc, #488]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101998:	ee07 3a90 	vmov	s15, r3
 810199c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81019a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8101b84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81019a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81019c0:	e087      	b.n	8101ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81019c2:	697b      	ldr	r3, [r7, #20]
 81019c4:	ee07 3a90 	vmov	s15, r3
 81019c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8101b88 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 81019d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81019d4:	4b69      	ldr	r3, [pc, #420]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81019d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81019d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81019dc:	ee07 3a90 	vmov	s15, r3
 81019e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81019e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8101b84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81019ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101a04:	e065      	b.n	8101ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101a06:	697b      	ldr	r3, [r7, #20]
 8101a08:	ee07 3a90 	vmov	s15, r3
 8101a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8101b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8101a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a18:	4b58      	ldr	r3, [pc, #352]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a20:	ee07 3a90 	vmov	s15, r3
 8101a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8101a2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8101b84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101a48:	e043      	b.n	8101ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101a4a:	697b      	ldr	r3, [r7, #20]
 8101a4c:	ee07 3a90 	vmov	s15, r3
 8101a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8101b90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8101a58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a5c:	4b47      	ldr	r3, [pc, #284]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a64:	ee07 3a90 	vmov	s15, r3
 8101a68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8101a70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8101b84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101a74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101a8c:	e021      	b.n	8101ad2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101a8e:	697b      	ldr	r3, [r7, #20]
 8101a90:	ee07 3a90 	vmov	s15, r3
 8101a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a98:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8101b8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8101a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101aa0:	4b36      	ldr	r3, [pc, #216]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101aa8:	ee07 3a90 	vmov	s15, r3
 8101aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ab0:	ed97 6a03 	vldr	s12, [r7, #12]
 8101ab4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8101b84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101acc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101ad0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8101ad2:	4b2a      	ldr	r3, [pc, #168]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101ad6:	0a5b      	lsrs	r3, r3, #9
 8101ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101adc:	ee07 3a90 	vmov	s15, r3
 8101ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101ae8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101aec:	edd7 6a07 	vldr	s13, [r7, #28]
 8101af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101af8:	ee17 2a90 	vmov	r2, s15
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8101b00:	4b1e      	ldr	r3, [pc, #120]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101b04:	0c1b      	lsrs	r3, r3, #16
 8101b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101b0a:	ee07 3a90 	vmov	s15, r3
 8101b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8101b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b26:	ee17 2a90 	vmov	r2, s15
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8101b2e:	4b13      	ldr	r3, [pc, #76]	; (8101b7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101b32:	0e1b      	lsrs	r3, r3, #24
 8101b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101b38:	ee07 3a90 	vmov	s15, r3
 8101b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8101b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b54:	ee17 2a90 	vmov	r2, s15
 8101b58:	687b      	ldr	r3, [r7, #4]
 8101b5a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8101b5c:	e008      	b.n	8101b70 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	2200      	movs	r2, #0
 8101b62:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	2200      	movs	r2, #0
 8101b68:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	2200      	movs	r2, #0
 8101b6e:	609a      	str	r2, [r3, #8]
}
 8101b70:	bf00      	nop
 8101b72:	3724      	adds	r7, #36	; 0x24
 8101b74:	46bd      	mov	sp, r7
 8101b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7a:	4770      	bx	lr
 8101b7c:	58024400 	.word	0x58024400
 8101b80:	03d09000 	.word	0x03d09000
 8101b84:	46000000 	.word	0x46000000
 8101b88:	4c742400 	.word	0x4c742400
 8101b8c:	4a742400 	.word	0x4a742400
 8101b90:	4af42400 	.word	0x4af42400

08101b94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8101b94:	b480      	push	{r7}
 8101b96:	b089      	sub	sp, #36	; 0x24
 8101b98:	af00      	add	r7, sp, #0
 8101b9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101b9c:	4b9d      	ldr	r3, [pc, #628]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101ba0:	f003 0303 	and.w	r3, r3, #3
 8101ba4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8101ba6:	4b9b      	ldr	r3, [pc, #620]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101baa:	0d1b      	lsrs	r3, r3, #20
 8101bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101bb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8101bb2:	4b98      	ldr	r3, [pc, #608]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101bb6:	0a1b      	lsrs	r3, r3, #8
 8101bb8:	f003 0301 	and.w	r3, r3, #1
 8101bbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8101bbe:	4b95      	ldr	r3, [pc, #596]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101bc2:	08db      	lsrs	r3, r3, #3
 8101bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101bc8:	693a      	ldr	r2, [r7, #16]
 8101bca:	fb02 f303 	mul.w	r3, r2, r3
 8101bce:	ee07 3a90 	vmov	s15, r3
 8101bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101bd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8101bda:	697b      	ldr	r3, [r7, #20]
 8101bdc:	2b00      	cmp	r3, #0
 8101bde:	f000 810a 	beq.w	8101df6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8101be2:	69bb      	ldr	r3, [r7, #24]
 8101be4:	2b01      	cmp	r3, #1
 8101be6:	d05a      	beq.n	8101c9e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8101be8:	2b01      	cmp	r3, #1
 8101bea:	d302      	bcc.n	8101bf2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8101bec:	2b02      	cmp	r3, #2
 8101bee:	d078      	beq.n	8101ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8101bf0:	e099      	b.n	8101d26 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101bf2:	4b88      	ldr	r3, [pc, #544]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	f003 0320 	and.w	r3, r3, #32
 8101bfa:	2b00      	cmp	r3, #0
 8101bfc:	d02d      	beq.n	8101c5a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101bfe:	4b85      	ldr	r3, [pc, #532]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	08db      	lsrs	r3, r3, #3
 8101c04:	f003 0303 	and.w	r3, r3, #3
 8101c08:	4a83      	ldr	r2, [pc, #524]	; (8101e18 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8101c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8101c0e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101c10:	68bb      	ldr	r3, [r7, #8]
 8101c12:	ee07 3a90 	vmov	s15, r3
 8101c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c1a:	697b      	ldr	r3, [r7, #20]
 8101c1c:	ee07 3a90 	vmov	s15, r3
 8101c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c28:	4b7a      	ldr	r3, [pc, #488]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c30:	ee07 3a90 	vmov	s15, r3
 8101c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c38:	ed97 6a03 	vldr	s12, [r7, #12]
 8101c3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8101e1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8101c58:	e087      	b.n	8101d6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101c5a:	697b      	ldr	r3, [r7, #20]
 8101c5c:	ee07 3a90 	vmov	s15, r3
 8101c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8101e20 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8101c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101c6c:	4b69      	ldr	r3, [pc, #420]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101c74:	ee07 3a90 	vmov	s15, r3
 8101c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8101c80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8101e1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101c9c:	e065      	b.n	8101d6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101c9e:	697b      	ldr	r3, [r7, #20]
 8101ca0:	ee07 3a90 	vmov	s15, r3
 8101ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ca8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8101e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8101cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101cb0:	4b58      	ldr	r3, [pc, #352]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101cb8:	ee07 3a90 	vmov	s15, r3
 8101cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101cc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8101cc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8101e1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101cc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101ccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101cd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101cdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101ce0:	e043      	b.n	8101d6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101ce2:	697b      	ldr	r3, [r7, #20]
 8101ce4:	ee07 3a90 	vmov	s15, r3
 8101ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101cec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8101e28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8101cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101cf4:	4b47      	ldr	r3, [pc, #284]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101cfc:	ee07 3a90 	vmov	s15, r3
 8101d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d04:	ed97 6a03 	vldr	s12, [r7, #12]
 8101d08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8101e1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101d24:	e021      	b.n	8101d6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101d26:	697b      	ldr	r3, [r7, #20]
 8101d28:	ee07 3a90 	vmov	s15, r3
 8101d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d30:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8101e24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8101d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d38:	4b36      	ldr	r3, [pc, #216]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101d40:	ee07 3a90 	vmov	s15, r3
 8101d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d48:	ed97 6a03 	vldr	s12, [r7, #12]
 8101d4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8101e1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101d68:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8101d6a:	4b2a      	ldr	r3, [pc, #168]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101d6e:	0a5b      	lsrs	r3, r3, #9
 8101d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101d74:	ee07 3a90 	vmov	s15, r3
 8101d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101d80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101d84:	edd7 6a07 	vldr	s13, [r7, #28]
 8101d88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101d90:	ee17 2a90 	vmov	r2, s15
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8101d98:	4b1e      	ldr	r3, [pc, #120]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101d9c:	0c1b      	lsrs	r3, r3, #16
 8101d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101da2:	ee07 3a90 	vmov	s15, r3
 8101da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101daa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101dae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101db2:	edd7 6a07 	vldr	s13, [r7, #28]
 8101db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101dbe:	ee17 2a90 	vmov	r2, s15
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8101dc6:	4b13      	ldr	r3, [pc, #76]	; (8101e14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101dca:	0e1b      	lsrs	r3, r3, #24
 8101dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101dd0:	ee07 3a90 	vmov	s15, r3
 8101dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101dd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101ddc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101de0:	edd7 6a07 	vldr	s13, [r7, #28]
 8101de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101dec:	ee17 2a90 	vmov	r2, s15
 8101df0:	687b      	ldr	r3, [r7, #4]
 8101df2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8101df4:	e008      	b.n	8101e08 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8101df6:	687b      	ldr	r3, [r7, #4]
 8101df8:	2200      	movs	r2, #0
 8101dfa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8101dfc:	687b      	ldr	r3, [r7, #4]
 8101dfe:	2200      	movs	r2, #0
 8101e00:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	2200      	movs	r2, #0
 8101e06:	609a      	str	r2, [r3, #8]
}
 8101e08:	bf00      	nop
 8101e0a:	3724      	adds	r7, #36	; 0x24
 8101e0c:	46bd      	mov	sp, r7
 8101e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e12:	4770      	bx	lr
 8101e14:	58024400 	.word	0x58024400
 8101e18:	03d09000 	.word	0x03d09000
 8101e1c:	46000000 	.word	0x46000000
 8101e20:	4c742400 	.word	0x4c742400
 8101e24:	4a742400 	.word	0x4a742400
 8101e28:	4af42400 	.word	0x4af42400

08101e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8101e2c:	b580      	push	{r7, lr}
 8101e2e:	b082      	sub	sp, #8
 8101e30:	af00      	add	r7, sp, #0
 8101e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	2b00      	cmp	r3, #0
 8101e38:	d101      	bne.n	8101e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8101e3a:	2301      	movs	r3, #1
 8101e3c:	e01d      	b.n	8101e7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101e44:	b2db      	uxtb	r3, r3
 8101e46:	2b00      	cmp	r3, #0
 8101e48:	d106      	bne.n	8101e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	2200      	movs	r2, #0
 8101e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8101e52:	6878      	ldr	r0, [r7, #4]
 8101e54:	f7fe fde0 	bl	8100a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	2202      	movs	r2, #2
 8101e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	681a      	ldr	r2, [r3, #0]
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	3304      	adds	r3, #4
 8101e68:	4619      	mov	r1, r3
 8101e6a:	4610      	mov	r0, r2
 8101e6c:	f000 fbf2 	bl	8102654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	2201      	movs	r2, #1
 8101e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101e78:	2300      	movs	r3, #0
}
 8101e7a:	4618      	mov	r0, r3
 8101e7c:	3708      	adds	r7, #8
 8101e7e:	46bd      	mov	sp, r7
 8101e80:	bd80      	pop	{r7, pc}
	...

08101e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8101e84:	b480      	push	{r7}
 8101e86:	b085      	sub	sp, #20
 8101e88:	af00      	add	r7, sp, #0
 8101e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	681b      	ldr	r3, [r3, #0]
 8101e90:	68da      	ldr	r2, [r3, #12]
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	f042 0201 	orr.w	r2, r2, #1
 8101e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	689a      	ldr	r2, [r3, #8]
 8101ea2:	4b0c      	ldr	r3, [pc, #48]	; (8101ed4 <HAL_TIM_Base_Start_IT+0x50>)
 8101ea4:	4013      	ands	r3, r2
 8101ea6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101ea8:	68fb      	ldr	r3, [r7, #12]
 8101eaa:	2b06      	cmp	r3, #6
 8101eac:	d00b      	beq.n	8101ec6 <HAL_TIM_Base_Start_IT+0x42>
 8101eae:	68fb      	ldr	r3, [r7, #12]
 8101eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101eb4:	d007      	beq.n	8101ec6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	681a      	ldr	r2, [r3, #0]
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	681b      	ldr	r3, [r3, #0]
 8101ec0:	f042 0201 	orr.w	r2, r2, #1
 8101ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8101ec6:	2300      	movs	r3, #0
}
 8101ec8:	4618      	mov	r0, r3
 8101eca:	3714      	adds	r7, #20
 8101ecc:	46bd      	mov	sp, r7
 8101ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ed2:	4770      	bx	lr
 8101ed4:	00010007 	.word	0x00010007

08101ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8101ed8:	b580      	push	{r7, lr}
 8101eda:	b082      	sub	sp, #8
 8101edc:	af00      	add	r7, sp, #0
 8101ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	2b00      	cmp	r3, #0
 8101ee4:	d101      	bne.n	8101eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8101ee6:	2301      	movs	r3, #1
 8101ee8:	e01d      	b.n	8101f26 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8101ef0:	b2db      	uxtb	r3, r3
 8101ef2:	2b00      	cmp	r3, #0
 8101ef4:	d106      	bne.n	8101f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	2200      	movs	r2, #0
 8101efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8101efe:	6878      	ldr	r0, [r7, #4]
 8101f00:	f000 f815 	bl	8101f2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	2202      	movs	r2, #2
 8101f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8101f0c:	687b      	ldr	r3, [r7, #4]
 8101f0e:	681a      	ldr	r2, [r3, #0]
 8101f10:	687b      	ldr	r3, [r7, #4]
 8101f12:	3304      	adds	r3, #4
 8101f14:	4619      	mov	r1, r3
 8101f16:	4610      	mov	r0, r2
 8101f18:	f000 fb9c 	bl	8102654 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	2201      	movs	r2, #1
 8101f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8101f24:	2300      	movs	r3, #0
}
 8101f26:	4618      	mov	r0, r3
 8101f28:	3708      	adds	r7, #8
 8101f2a:	46bd      	mov	sp, r7
 8101f2c:	bd80      	pop	{r7, pc}

08101f2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8101f2e:	b480      	push	{r7}
 8101f30:	b083      	sub	sp, #12
 8101f32:	af00      	add	r7, sp, #0
 8101f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8101f36:	bf00      	nop
 8101f38:	370c      	adds	r7, #12
 8101f3a:	46bd      	mov	sp, r7
 8101f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f40:	4770      	bx	lr
	...

08101f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8101f44:	b580      	push	{r7, lr}
 8101f46:	b084      	sub	sp, #16
 8101f48:	af00      	add	r7, sp, #0
 8101f4a:	6078      	str	r0, [r7, #4]
 8101f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8101f4e:	687b      	ldr	r3, [r7, #4]
 8101f50:	681b      	ldr	r3, [r3, #0]
 8101f52:	2201      	movs	r2, #1
 8101f54:	6839      	ldr	r1, [r7, #0]
 8101f56:	4618      	mov	r0, r3
 8101f58:	f000 ff80 	bl	8102e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	681b      	ldr	r3, [r3, #0]
 8101f60:	4a1e      	ldr	r2, [pc, #120]	; (8101fdc <HAL_TIM_PWM_Start+0x98>)
 8101f62:	4293      	cmp	r3, r2
 8101f64:	d013      	beq.n	8101f8e <HAL_TIM_PWM_Start+0x4a>
 8101f66:	687b      	ldr	r3, [r7, #4]
 8101f68:	681b      	ldr	r3, [r3, #0]
 8101f6a:	4a1d      	ldr	r2, [pc, #116]	; (8101fe0 <HAL_TIM_PWM_Start+0x9c>)
 8101f6c:	4293      	cmp	r3, r2
 8101f6e:	d00e      	beq.n	8101f8e <HAL_TIM_PWM_Start+0x4a>
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	681b      	ldr	r3, [r3, #0]
 8101f74:	4a1b      	ldr	r2, [pc, #108]	; (8101fe4 <HAL_TIM_PWM_Start+0xa0>)
 8101f76:	4293      	cmp	r3, r2
 8101f78:	d009      	beq.n	8101f8e <HAL_TIM_PWM_Start+0x4a>
 8101f7a:	687b      	ldr	r3, [r7, #4]
 8101f7c:	681b      	ldr	r3, [r3, #0]
 8101f7e:	4a1a      	ldr	r2, [pc, #104]	; (8101fe8 <HAL_TIM_PWM_Start+0xa4>)
 8101f80:	4293      	cmp	r3, r2
 8101f82:	d004      	beq.n	8101f8e <HAL_TIM_PWM_Start+0x4a>
 8101f84:	687b      	ldr	r3, [r7, #4]
 8101f86:	681b      	ldr	r3, [r3, #0]
 8101f88:	4a18      	ldr	r2, [pc, #96]	; (8101fec <HAL_TIM_PWM_Start+0xa8>)
 8101f8a:	4293      	cmp	r3, r2
 8101f8c:	d101      	bne.n	8101f92 <HAL_TIM_PWM_Start+0x4e>
 8101f8e:	2301      	movs	r3, #1
 8101f90:	e000      	b.n	8101f94 <HAL_TIM_PWM_Start+0x50>
 8101f92:	2300      	movs	r3, #0
 8101f94:	2b00      	cmp	r3, #0
 8101f96:	d007      	beq.n	8101fa8 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	681b      	ldr	r3, [r3, #0]
 8101fa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101fa6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	689a      	ldr	r2, [r3, #8]
 8101fae:	4b10      	ldr	r3, [pc, #64]	; (8101ff0 <HAL_TIM_PWM_Start+0xac>)
 8101fb0:	4013      	ands	r3, r2
 8101fb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8101fb4:	68fb      	ldr	r3, [r7, #12]
 8101fb6:	2b06      	cmp	r3, #6
 8101fb8:	d00b      	beq.n	8101fd2 <HAL_TIM_PWM_Start+0x8e>
 8101fba:	68fb      	ldr	r3, [r7, #12]
 8101fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8101fc0:	d007      	beq.n	8101fd2 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	681a      	ldr	r2, [r3, #0]
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	681b      	ldr	r3, [r3, #0]
 8101fcc:	f042 0201 	orr.w	r2, r2, #1
 8101fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8101fd2:	2300      	movs	r3, #0
}
 8101fd4:	4618      	mov	r0, r3
 8101fd6:	3710      	adds	r7, #16
 8101fd8:	46bd      	mov	sp, r7
 8101fda:	bd80      	pop	{r7, pc}
 8101fdc:	40010000 	.word	0x40010000
 8101fe0:	40010400 	.word	0x40010400
 8101fe4:	40014000 	.word	0x40014000
 8101fe8:	40014400 	.word	0x40014400
 8101fec:	40014800 	.word	0x40014800
 8101ff0:	00010007 	.word	0x00010007

08101ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8101ff4:	b580      	push	{r7, lr}
 8101ff6:	b082      	sub	sp, #8
 8101ff8:	af00      	add	r7, sp, #0
 8101ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	691b      	ldr	r3, [r3, #16]
 8102002:	f003 0302 	and.w	r3, r3, #2
 8102006:	2b02      	cmp	r3, #2
 8102008:	d122      	bne.n	8102050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	681b      	ldr	r3, [r3, #0]
 810200e:	68db      	ldr	r3, [r3, #12]
 8102010:	f003 0302 	and.w	r3, r3, #2
 8102014:	2b02      	cmp	r3, #2
 8102016:	d11b      	bne.n	8102050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	f06f 0202 	mvn.w	r2, #2
 8102020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	2201      	movs	r2, #1
 8102026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	681b      	ldr	r3, [r3, #0]
 810202c:	699b      	ldr	r3, [r3, #24]
 810202e:	f003 0303 	and.w	r3, r3, #3
 8102032:	2b00      	cmp	r3, #0
 8102034:	d003      	beq.n	810203e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8102036:	6878      	ldr	r0, [r7, #4]
 8102038:	f000 faee 	bl	8102618 <HAL_TIM_IC_CaptureCallback>
 810203c:	e005      	b.n	810204a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810203e:	6878      	ldr	r0, [r7, #4]
 8102040:	f000 fae0 	bl	8102604 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102044:	6878      	ldr	r0, [r7, #4]
 8102046:	f000 faf1 	bl	810262c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810204a:	687b      	ldr	r3, [r7, #4]
 810204c:	2200      	movs	r2, #0
 810204e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	681b      	ldr	r3, [r3, #0]
 8102054:	691b      	ldr	r3, [r3, #16]
 8102056:	f003 0304 	and.w	r3, r3, #4
 810205a:	2b04      	cmp	r3, #4
 810205c:	d122      	bne.n	81020a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810205e:	687b      	ldr	r3, [r7, #4]
 8102060:	681b      	ldr	r3, [r3, #0]
 8102062:	68db      	ldr	r3, [r3, #12]
 8102064:	f003 0304 	and.w	r3, r3, #4
 8102068:	2b04      	cmp	r3, #4
 810206a:	d11b      	bne.n	81020a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810206c:	687b      	ldr	r3, [r7, #4]
 810206e:	681b      	ldr	r3, [r3, #0]
 8102070:	f06f 0204 	mvn.w	r2, #4
 8102074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	2202      	movs	r2, #2
 810207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810207c:	687b      	ldr	r3, [r7, #4]
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	699b      	ldr	r3, [r3, #24]
 8102082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102086:	2b00      	cmp	r3, #0
 8102088:	d003      	beq.n	8102092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810208a:	6878      	ldr	r0, [r7, #4]
 810208c:	f000 fac4 	bl	8102618 <HAL_TIM_IC_CaptureCallback>
 8102090:	e005      	b.n	810209e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102092:	6878      	ldr	r0, [r7, #4]
 8102094:	f000 fab6 	bl	8102604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102098:	6878      	ldr	r0, [r7, #4]
 810209a:	f000 fac7 	bl	810262c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	2200      	movs	r2, #0
 81020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	681b      	ldr	r3, [r3, #0]
 81020a8:	691b      	ldr	r3, [r3, #16]
 81020aa:	f003 0308 	and.w	r3, r3, #8
 81020ae:	2b08      	cmp	r3, #8
 81020b0:	d122      	bne.n	81020f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81020b2:	687b      	ldr	r3, [r7, #4]
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	68db      	ldr	r3, [r3, #12]
 81020b8:	f003 0308 	and.w	r3, r3, #8
 81020bc:	2b08      	cmp	r3, #8
 81020be:	d11b      	bne.n	81020f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	f06f 0208 	mvn.w	r2, #8
 81020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	2204      	movs	r2, #4
 81020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	681b      	ldr	r3, [r3, #0]
 81020d4:	69db      	ldr	r3, [r3, #28]
 81020d6:	f003 0303 	and.w	r3, r3, #3
 81020da:	2b00      	cmp	r3, #0
 81020dc:	d003      	beq.n	81020e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81020de:	6878      	ldr	r0, [r7, #4]
 81020e0:	f000 fa9a 	bl	8102618 <HAL_TIM_IC_CaptureCallback>
 81020e4:	e005      	b.n	81020f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81020e6:	6878      	ldr	r0, [r7, #4]
 81020e8:	f000 fa8c 	bl	8102604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81020ec:	6878      	ldr	r0, [r7, #4]
 81020ee:	f000 fa9d 	bl	810262c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	2200      	movs	r2, #0
 81020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	691b      	ldr	r3, [r3, #16]
 81020fe:	f003 0310 	and.w	r3, r3, #16
 8102102:	2b10      	cmp	r3, #16
 8102104:	d122      	bne.n	810214c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	681b      	ldr	r3, [r3, #0]
 810210a:	68db      	ldr	r3, [r3, #12]
 810210c:	f003 0310 	and.w	r3, r3, #16
 8102110:	2b10      	cmp	r3, #16
 8102112:	d11b      	bne.n	810214c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8102114:	687b      	ldr	r3, [r7, #4]
 8102116:	681b      	ldr	r3, [r3, #0]
 8102118:	f06f 0210 	mvn.w	r2, #16
 810211c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	2208      	movs	r2, #8
 8102122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8102124:	687b      	ldr	r3, [r7, #4]
 8102126:	681b      	ldr	r3, [r3, #0]
 8102128:	69db      	ldr	r3, [r3, #28]
 810212a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810212e:	2b00      	cmp	r3, #0
 8102130:	d003      	beq.n	810213a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102132:	6878      	ldr	r0, [r7, #4]
 8102134:	f000 fa70 	bl	8102618 <HAL_TIM_IC_CaptureCallback>
 8102138:	e005      	b.n	8102146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810213a:	6878      	ldr	r0, [r7, #4]
 810213c:	f000 fa62 	bl	8102604 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102140:	6878      	ldr	r0, [r7, #4]
 8102142:	f000 fa73 	bl	810262c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	2200      	movs	r2, #0
 810214a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810214c:	687b      	ldr	r3, [r7, #4]
 810214e:	681b      	ldr	r3, [r3, #0]
 8102150:	691b      	ldr	r3, [r3, #16]
 8102152:	f003 0301 	and.w	r3, r3, #1
 8102156:	2b01      	cmp	r3, #1
 8102158:	d10e      	bne.n	8102178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	681b      	ldr	r3, [r3, #0]
 810215e:	68db      	ldr	r3, [r3, #12]
 8102160:	f003 0301 	and.w	r3, r3, #1
 8102164:	2b01      	cmp	r3, #1
 8102166:	d107      	bne.n	8102178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	f06f 0201 	mvn.w	r2, #1
 8102170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8102172:	6878      	ldr	r0, [r7, #4]
 8102174:	f7fe fc08 	bl	8100988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8102178:	687b      	ldr	r3, [r7, #4]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	691b      	ldr	r3, [r3, #16]
 810217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102182:	2b80      	cmp	r3, #128	; 0x80
 8102184:	d10e      	bne.n	81021a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102186:	687b      	ldr	r3, [r7, #4]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	68db      	ldr	r3, [r3, #12]
 810218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102190:	2b80      	cmp	r3, #128	; 0x80
 8102192:	d107      	bne.n	81021a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	681b      	ldr	r3, [r3, #0]
 8102198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810219e:	6878      	ldr	r0, [r7, #4]
 81021a0:	f000 ff92 	bl	81030c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	691b      	ldr	r3, [r3, #16]
 81021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81021ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81021b2:	d10e      	bne.n	81021d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	68db      	ldr	r3, [r3, #12]
 81021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81021be:	2b80      	cmp	r3, #128	; 0x80
 81021c0:	d107      	bne.n	81021d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81021ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81021cc:	6878      	ldr	r0, [r7, #4]
 81021ce:	f000 ff85 	bl	81030dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81021d2:	687b      	ldr	r3, [r7, #4]
 81021d4:	681b      	ldr	r3, [r3, #0]
 81021d6:	691b      	ldr	r3, [r3, #16]
 81021d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81021dc:	2b40      	cmp	r3, #64	; 0x40
 81021de:	d10e      	bne.n	81021fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	68db      	ldr	r3, [r3, #12]
 81021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81021ea:	2b40      	cmp	r3, #64	; 0x40
 81021ec:	d107      	bne.n	81021fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81021ee:	687b      	ldr	r3, [r7, #4]
 81021f0:	681b      	ldr	r3, [r3, #0]
 81021f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81021f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81021f8:	6878      	ldr	r0, [r7, #4]
 81021fa:	f000 fa21 	bl	8102640 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	691b      	ldr	r3, [r3, #16]
 8102204:	f003 0320 	and.w	r3, r3, #32
 8102208:	2b20      	cmp	r3, #32
 810220a:	d10e      	bne.n	810222a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	681b      	ldr	r3, [r3, #0]
 8102210:	68db      	ldr	r3, [r3, #12]
 8102212:	f003 0320 	and.w	r3, r3, #32
 8102216:	2b20      	cmp	r3, #32
 8102218:	d107      	bne.n	810222a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	f06f 0220 	mvn.w	r2, #32
 8102222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8102224:	6878      	ldr	r0, [r7, #4]
 8102226:	f000 ff45 	bl	81030b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810222a:	bf00      	nop
 810222c:	3708      	adds	r7, #8
 810222e:	46bd      	mov	sp, r7
 8102230:	bd80      	pop	{r7, pc}
	...

08102234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8102234:	b580      	push	{r7, lr}
 8102236:	b084      	sub	sp, #16
 8102238:	af00      	add	r7, sp, #0
 810223a:	60f8      	str	r0, [r7, #12]
 810223c:	60b9      	str	r1, [r7, #8]
 810223e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8102240:	68fb      	ldr	r3, [r7, #12]
 8102242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102246:	2b01      	cmp	r3, #1
 8102248:	d101      	bne.n	810224e <HAL_TIM_PWM_ConfigChannel+0x1a>
 810224a:	2302      	movs	r3, #2
 810224c:	e105      	b.n	810245a <HAL_TIM_PWM_ConfigChannel+0x226>
 810224e:	68fb      	ldr	r3, [r7, #12]
 8102250:	2201      	movs	r2, #1
 8102252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8102256:	68fb      	ldr	r3, [r7, #12]
 8102258:	2202      	movs	r2, #2
 810225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	2b14      	cmp	r3, #20
 8102262:	f200 80f0 	bhi.w	8102446 <HAL_TIM_PWM_ConfigChannel+0x212>
 8102266:	a201      	add	r2, pc, #4	; (adr r2, 810226c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8102268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810226c:	081022c1 	.word	0x081022c1
 8102270:	08102447 	.word	0x08102447
 8102274:	08102447 	.word	0x08102447
 8102278:	08102447 	.word	0x08102447
 810227c:	08102301 	.word	0x08102301
 8102280:	08102447 	.word	0x08102447
 8102284:	08102447 	.word	0x08102447
 8102288:	08102447 	.word	0x08102447
 810228c:	08102343 	.word	0x08102343
 8102290:	08102447 	.word	0x08102447
 8102294:	08102447 	.word	0x08102447
 8102298:	08102447 	.word	0x08102447
 810229c:	08102383 	.word	0x08102383
 81022a0:	08102447 	.word	0x08102447
 81022a4:	08102447 	.word	0x08102447
 81022a8:	08102447 	.word	0x08102447
 81022ac:	081023c5 	.word	0x081023c5
 81022b0:	08102447 	.word	0x08102447
 81022b4:	08102447 	.word	0x08102447
 81022b8:	08102447 	.word	0x08102447
 81022bc:	08102405 	.word	0x08102405
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81022c0:	68fb      	ldr	r3, [r7, #12]
 81022c2:	681b      	ldr	r3, [r3, #0]
 81022c4:	68b9      	ldr	r1, [r7, #8]
 81022c6:	4618      	mov	r0, r3
 81022c8:	f000 fa5e 	bl	8102788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81022cc:	68fb      	ldr	r3, [r7, #12]
 81022ce:	681b      	ldr	r3, [r3, #0]
 81022d0:	699a      	ldr	r2, [r3, #24]
 81022d2:	68fb      	ldr	r3, [r7, #12]
 81022d4:	681b      	ldr	r3, [r3, #0]
 81022d6:	f042 0208 	orr.w	r2, r2, #8
 81022da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81022dc:	68fb      	ldr	r3, [r7, #12]
 81022de:	681b      	ldr	r3, [r3, #0]
 81022e0:	699a      	ldr	r2, [r3, #24]
 81022e2:	68fb      	ldr	r3, [r7, #12]
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	f022 0204 	bic.w	r2, r2, #4
 81022ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81022ec:	68fb      	ldr	r3, [r7, #12]
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	6999      	ldr	r1, [r3, #24]
 81022f2:	68bb      	ldr	r3, [r7, #8]
 81022f4:	691a      	ldr	r2, [r3, #16]
 81022f6:	68fb      	ldr	r3, [r7, #12]
 81022f8:	681b      	ldr	r3, [r3, #0]
 81022fa:	430a      	orrs	r2, r1
 81022fc:	619a      	str	r2, [r3, #24]
      break;
 81022fe:	e0a3      	b.n	8102448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	681b      	ldr	r3, [r3, #0]
 8102304:	68b9      	ldr	r1, [r7, #8]
 8102306:	4618      	mov	r0, r3
 8102308:	f000 face 	bl	81028a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 810230c:	68fb      	ldr	r3, [r7, #12]
 810230e:	681b      	ldr	r3, [r3, #0]
 8102310:	699a      	ldr	r2, [r3, #24]
 8102312:	68fb      	ldr	r3, [r7, #12]
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810231a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 810231c:	68fb      	ldr	r3, [r7, #12]
 810231e:	681b      	ldr	r3, [r3, #0]
 8102320:	699a      	ldr	r2, [r3, #24]
 8102322:	68fb      	ldr	r3, [r7, #12]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810232a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 810232c:	68fb      	ldr	r3, [r7, #12]
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	6999      	ldr	r1, [r3, #24]
 8102332:	68bb      	ldr	r3, [r7, #8]
 8102334:	691b      	ldr	r3, [r3, #16]
 8102336:	021a      	lsls	r2, r3, #8
 8102338:	68fb      	ldr	r3, [r7, #12]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	430a      	orrs	r2, r1
 810233e:	619a      	str	r2, [r3, #24]
      break;
 8102340:	e082      	b.n	8102448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8102342:	68fb      	ldr	r3, [r7, #12]
 8102344:	681b      	ldr	r3, [r3, #0]
 8102346:	68b9      	ldr	r1, [r7, #8]
 8102348:	4618      	mov	r0, r3
 810234a:	f000 fb37 	bl	81029bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810234e:	68fb      	ldr	r3, [r7, #12]
 8102350:	681b      	ldr	r3, [r3, #0]
 8102352:	69da      	ldr	r2, [r3, #28]
 8102354:	68fb      	ldr	r3, [r7, #12]
 8102356:	681b      	ldr	r3, [r3, #0]
 8102358:	f042 0208 	orr.w	r2, r2, #8
 810235c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810235e:	68fb      	ldr	r3, [r7, #12]
 8102360:	681b      	ldr	r3, [r3, #0]
 8102362:	69da      	ldr	r2, [r3, #28]
 8102364:	68fb      	ldr	r3, [r7, #12]
 8102366:	681b      	ldr	r3, [r3, #0]
 8102368:	f022 0204 	bic.w	r2, r2, #4
 810236c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810236e:	68fb      	ldr	r3, [r7, #12]
 8102370:	681b      	ldr	r3, [r3, #0]
 8102372:	69d9      	ldr	r1, [r3, #28]
 8102374:	68bb      	ldr	r3, [r7, #8]
 8102376:	691a      	ldr	r2, [r3, #16]
 8102378:	68fb      	ldr	r3, [r7, #12]
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	430a      	orrs	r2, r1
 810237e:	61da      	str	r2, [r3, #28]
      break;
 8102380:	e062      	b.n	8102448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8102382:	68fb      	ldr	r3, [r7, #12]
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	68b9      	ldr	r1, [r7, #8]
 8102388:	4618      	mov	r0, r3
 810238a:	f000 fb9d 	bl	8102ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810238e:	68fb      	ldr	r3, [r7, #12]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	69da      	ldr	r2, [r3, #28]
 8102394:	68fb      	ldr	r3, [r7, #12]
 8102396:	681b      	ldr	r3, [r3, #0]
 8102398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810239c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810239e:	68fb      	ldr	r3, [r7, #12]
 81023a0:	681b      	ldr	r3, [r3, #0]
 81023a2:	69da      	ldr	r2, [r3, #28]
 81023a4:	68fb      	ldr	r3, [r7, #12]
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81023ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81023ae:	68fb      	ldr	r3, [r7, #12]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	69d9      	ldr	r1, [r3, #28]
 81023b4:	68bb      	ldr	r3, [r7, #8]
 81023b6:	691b      	ldr	r3, [r3, #16]
 81023b8:	021a      	lsls	r2, r3, #8
 81023ba:	68fb      	ldr	r3, [r7, #12]
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	430a      	orrs	r2, r1
 81023c0:	61da      	str	r2, [r3, #28]
      break;
 81023c2:	e041      	b.n	8102448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81023c4:	68fb      	ldr	r3, [r7, #12]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	68b9      	ldr	r1, [r7, #8]
 81023ca:	4618      	mov	r0, r3
 81023cc:	f000 fbe4 	bl	8102b98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81023d0:	68fb      	ldr	r3, [r7, #12]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81023d6:	68fb      	ldr	r3, [r7, #12]
 81023d8:	681b      	ldr	r3, [r3, #0]
 81023da:	f042 0208 	orr.w	r2, r2, #8
 81023de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81023e0:	68fb      	ldr	r3, [r7, #12]
 81023e2:	681b      	ldr	r3, [r3, #0]
 81023e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81023e6:	68fb      	ldr	r3, [r7, #12]
 81023e8:	681b      	ldr	r3, [r3, #0]
 81023ea:	f022 0204 	bic.w	r2, r2, #4
 81023ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81023f0:	68fb      	ldr	r3, [r7, #12]
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81023f6:	68bb      	ldr	r3, [r7, #8]
 81023f8:	691a      	ldr	r2, [r3, #16]
 81023fa:	68fb      	ldr	r3, [r7, #12]
 81023fc:	681b      	ldr	r3, [r3, #0]
 81023fe:	430a      	orrs	r2, r1
 8102400:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8102402:	e021      	b.n	8102448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8102404:	68fb      	ldr	r3, [r7, #12]
 8102406:	681b      	ldr	r3, [r3, #0]
 8102408:	68b9      	ldr	r1, [r7, #8]
 810240a:	4618      	mov	r0, r3
 810240c:	f000 fc26 	bl	8102c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8102410:	68fb      	ldr	r3, [r7, #12]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102416:	68fb      	ldr	r3, [r7, #12]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810241e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8102420:	68fb      	ldr	r3, [r7, #12]
 8102422:	681b      	ldr	r3, [r3, #0]
 8102424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8102426:	68fb      	ldr	r3, [r7, #12]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810242e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8102430:	68fb      	ldr	r3, [r7, #12]
 8102432:	681b      	ldr	r3, [r3, #0]
 8102434:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8102436:	68bb      	ldr	r3, [r7, #8]
 8102438:	691b      	ldr	r3, [r3, #16]
 810243a:	021a      	lsls	r2, r3, #8
 810243c:	68fb      	ldr	r3, [r7, #12]
 810243e:	681b      	ldr	r3, [r3, #0]
 8102440:	430a      	orrs	r2, r1
 8102442:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8102444:	e000      	b.n	8102448 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8102446:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8102448:	68fb      	ldr	r3, [r7, #12]
 810244a:	2201      	movs	r2, #1
 810244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8102450:	68fb      	ldr	r3, [r7, #12]
 8102452:	2200      	movs	r2, #0
 8102454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102458:	2300      	movs	r3, #0
}
 810245a:	4618      	mov	r0, r3
 810245c:	3710      	adds	r7, #16
 810245e:	46bd      	mov	sp, r7
 8102460:	bd80      	pop	{r7, pc}
 8102462:	bf00      	nop

08102464 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8102464:	b580      	push	{r7, lr}
 8102466:	b084      	sub	sp, #16
 8102468:	af00      	add	r7, sp, #0
 810246a:	6078      	str	r0, [r7, #4]
 810246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102474:	2b01      	cmp	r3, #1
 8102476:	d101      	bne.n	810247c <HAL_TIM_ConfigClockSource+0x18>
 8102478:	2302      	movs	r3, #2
 810247a:	e0b9      	b.n	81025f0 <HAL_TIM_ConfigClockSource+0x18c>
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	2201      	movs	r2, #1
 8102480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8102484:	687b      	ldr	r3, [r7, #4]
 8102486:	2202      	movs	r2, #2
 8102488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	689b      	ldr	r3, [r3, #8]
 8102492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8102494:	68fb      	ldr	r3, [r7, #12]
 8102496:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810249a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810249e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81024a0:	68fb      	ldr	r3, [r7, #12]
 81024a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81024a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	68fa      	ldr	r2, [r7, #12]
 81024ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81024b0:	683b      	ldr	r3, [r7, #0]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	2b70      	cmp	r3, #112	; 0x70
 81024b6:	d02e      	beq.n	8102516 <HAL_TIM_ConfigClockSource+0xb2>
 81024b8:	2b70      	cmp	r3, #112	; 0x70
 81024ba:	d812      	bhi.n	81024e2 <HAL_TIM_ConfigClockSource+0x7e>
 81024bc:	2b30      	cmp	r3, #48	; 0x30
 81024be:	f000 8084 	beq.w	81025ca <HAL_TIM_ConfigClockSource+0x166>
 81024c2:	2b30      	cmp	r3, #48	; 0x30
 81024c4:	d806      	bhi.n	81024d4 <HAL_TIM_ConfigClockSource+0x70>
 81024c6:	2b10      	cmp	r3, #16
 81024c8:	d07f      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
 81024ca:	2b20      	cmp	r3, #32
 81024cc:	d07d      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
 81024ce:	2b00      	cmp	r3, #0
 81024d0:	d07b      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 81024d2:	e084      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81024d4:	2b50      	cmp	r3, #80	; 0x50
 81024d6:	d048      	beq.n	810256a <HAL_TIM_ConfigClockSource+0x106>
 81024d8:	2b60      	cmp	r3, #96	; 0x60
 81024da:	d056      	beq.n	810258a <HAL_TIM_ConfigClockSource+0x126>
 81024dc:	2b40      	cmp	r3, #64	; 0x40
 81024de:	d064      	beq.n	81025aa <HAL_TIM_ConfigClockSource+0x146>
      break;
 81024e0:	e07d      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81024e2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81024e6:	d070      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
 81024e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81024ec:	d809      	bhi.n	8102502 <HAL_TIM_ConfigClockSource+0x9e>
 81024ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81024f2:	d027      	beq.n	8102544 <HAL_TIM_ConfigClockSource+0xe0>
 81024f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81024f8:	d067      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
 81024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81024fe:	d06d      	beq.n	81025dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8102500:	e06d      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8102502:	4a3d      	ldr	r2, [pc, #244]	; (81025f8 <HAL_TIM_ConfigClockSource+0x194>)
 8102504:	4293      	cmp	r3, r2
 8102506:	d060      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
 8102508:	4a3c      	ldr	r2, [pc, #240]	; (81025fc <HAL_TIM_ConfigClockSource+0x198>)
 810250a:	4293      	cmp	r3, r2
 810250c:	d05d      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
 810250e:	4a3c      	ldr	r2, [pc, #240]	; (8102600 <HAL_TIM_ConfigClockSource+0x19c>)
 8102510:	4293      	cmp	r3, r2
 8102512:	d05a      	beq.n	81025ca <HAL_TIM_ConfigClockSource+0x166>
      break;
 8102514:	e063      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	6818      	ldr	r0, [r3, #0]
 810251a:	683b      	ldr	r3, [r7, #0]
 810251c:	6899      	ldr	r1, [r3, #8]
 810251e:	683b      	ldr	r3, [r7, #0]
 8102520:	685a      	ldr	r2, [r3, #4]
 8102522:	683b      	ldr	r3, [r7, #0]
 8102524:	68db      	ldr	r3, [r3, #12]
 8102526:	f000 fc79 	bl	8102e1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	689b      	ldr	r3, [r3, #8]
 8102530:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8102532:	68fb      	ldr	r3, [r7, #12]
 8102534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8102538:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	681b      	ldr	r3, [r3, #0]
 810253e:	68fa      	ldr	r2, [r7, #12]
 8102540:	609a      	str	r2, [r3, #8]
      break;
 8102542:	e04c      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	6818      	ldr	r0, [r3, #0]
 8102548:	683b      	ldr	r3, [r7, #0]
 810254a:	6899      	ldr	r1, [r3, #8]
 810254c:	683b      	ldr	r3, [r7, #0]
 810254e:	685a      	ldr	r2, [r3, #4]
 8102550:	683b      	ldr	r3, [r7, #0]
 8102552:	68db      	ldr	r3, [r3, #12]
 8102554:	f000 fc62 	bl	8102e1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	689a      	ldr	r2, [r3, #8]
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102566:	609a      	str	r2, [r3, #8]
      break;
 8102568:	e039      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	6818      	ldr	r0, [r3, #0]
 810256e:	683b      	ldr	r3, [r7, #0]
 8102570:	6859      	ldr	r1, [r3, #4]
 8102572:	683b      	ldr	r3, [r7, #0]
 8102574:	68db      	ldr	r3, [r3, #12]
 8102576:	461a      	mov	r2, r3
 8102578:	f000 fbd4 	bl	8102d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	681b      	ldr	r3, [r3, #0]
 8102580:	2150      	movs	r1, #80	; 0x50
 8102582:	4618      	mov	r0, r3
 8102584:	f000 fc2d 	bl	8102de2 <TIM_ITRx_SetConfig>
      break;
 8102588:	e029      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	6818      	ldr	r0, [r3, #0]
 810258e:	683b      	ldr	r3, [r7, #0]
 8102590:	6859      	ldr	r1, [r3, #4]
 8102592:	683b      	ldr	r3, [r7, #0]
 8102594:	68db      	ldr	r3, [r3, #12]
 8102596:	461a      	mov	r2, r3
 8102598:	f000 fbf3 	bl	8102d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	2160      	movs	r1, #96	; 0x60
 81025a2:	4618      	mov	r0, r3
 81025a4:	f000 fc1d 	bl	8102de2 <TIM_ITRx_SetConfig>
      break;
 81025a8:	e019      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	6818      	ldr	r0, [r3, #0]
 81025ae:	683b      	ldr	r3, [r7, #0]
 81025b0:	6859      	ldr	r1, [r3, #4]
 81025b2:	683b      	ldr	r3, [r7, #0]
 81025b4:	68db      	ldr	r3, [r3, #12]
 81025b6:	461a      	mov	r2, r3
 81025b8:	f000 fbb4 	bl	8102d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81025bc:	687b      	ldr	r3, [r7, #4]
 81025be:	681b      	ldr	r3, [r3, #0]
 81025c0:	2140      	movs	r1, #64	; 0x40
 81025c2:	4618      	mov	r0, r3
 81025c4:	f000 fc0d 	bl	8102de2 <TIM_ITRx_SetConfig>
      break;
 81025c8:	e009      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	681a      	ldr	r2, [r3, #0]
 81025ce:	683b      	ldr	r3, [r7, #0]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	4619      	mov	r1, r3
 81025d4:	4610      	mov	r0, r2
 81025d6:	f000 fc04 	bl	8102de2 <TIM_ITRx_SetConfig>
      break;
 81025da:	e000      	b.n	81025de <HAL_TIM_ConfigClockSource+0x17a>
      break;
 81025dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	2201      	movs	r2, #1
 81025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	2200      	movs	r2, #0
 81025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81025ee:	2300      	movs	r3, #0
}
 81025f0:	4618      	mov	r0, r3
 81025f2:	3710      	adds	r7, #16
 81025f4:	46bd      	mov	sp, r7
 81025f6:	bd80      	pop	{r7, pc}
 81025f8:	00100030 	.word	0x00100030
 81025fc:	00100040 	.word	0x00100040
 8102600:	00100020 	.word	0x00100020

08102604 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102604:	b480      	push	{r7}
 8102606:	b083      	sub	sp, #12
 8102608:	af00      	add	r7, sp, #0
 810260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810260c:	bf00      	nop
 810260e:	370c      	adds	r7, #12
 8102610:	46bd      	mov	sp, r7
 8102612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102616:	4770      	bx	lr

08102618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102618:	b480      	push	{r7}
 810261a:	b083      	sub	sp, #12
 810261c:	af00      	add	r7, sp, #0
 810261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8102620:	bf00      	nop
 8102622:	370c      	adds	r7, #12
 8102624:	46bd      	mov	sp, r7
 8102626:	f85d 7b04 	ldr.w	r7, [sp], #4
 810262a:	4770      	bx	lr

0810262c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810262c:	b480      	push	{r7}
 810262e:	b083      	sub	sp, #12
 8102630:	af00      	add	r7, sp, #0
 8102632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8102634:	bf00      	nop
 8102636:	370c      	adds	r7, #12
 8102638:	46bd      	mov	sp, r7
 810263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810263e:	4770      	bx	lr

08102640 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8102640:	b480      	push	{r7}
 8102642:	b083      	sub	sp, #12
 8102644:	af00      	add	r7, sp, #0
 8102646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8102648:	bf00      	nop
 810264a:	370c      	adds	r7, #12
 810264c:	46bd      	mov	sp, r7
 810264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102652:	4770      	bx	lr

08102654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8102654:	b480      	push	{r7}
 8102656:	b085      	sub	sp, #20
 8102658:	af00      	add	r7, sp, #0
 810265a:	6078      	str	r0, [r7, #4]
 810265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	4a40      	ldr	r2, [pc, #256]	; (8102768 <TIM_Base_SetConfig+0x114>)
 8102668:	4293      	cmp	r3, r2
 810266a:	d013      	beq.n	8102694 <TIM_Base_SetConfig+0x40>
 810266c:	687b      	ldr	r3, [r7, #4]
 810266e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102672:	d00f      	beq.n	8102694 <TIM_Base_SetConfig+0x40>
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	4a3d      	ldr	r2, [pc, #244]	; (810276c <TIM_Base_SetConfig+0x118>)
 8102678:	4293      	cmp	r3, r2
 810267a:	d00b      	beq.n	8102694 <TIM_Base_SetConfig+0x40>
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	4a3c      	ldr	r2, [pc, #240]	; (8102770 <TIM_Base_SetConfig+0x11c>)
 8102680:	4293      	cmp	r3, r2
 8102682:	d007      	beq.n	8102694 <TIM_Base_SetConfig+0x40>
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	4a3b      	ldr	r2, [pc, #236]	; (8102774 <TIM_Base_SetConfig+0x120>)
 8102688:	4293      	cmp	r3, r2
 810268a:	d003      	beq.n	8102694 <TIM_Base_SetConfig+0x40>
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	4a3a      	ldr	r2, [pc, #232]	; (8102778 <TIM_Base_SetConfig+0x124>)
 8102690:	4293      	cmp	r3, r2
 8102692:	d108      	bne.n	81026a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8102694:	68fb      	ldr	r3, [r7, #12]
 8102696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810269a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810269c:	683b      	ldr	r3, [r7, #0]
 810269e:	685b      	ldr	r3, [r3, #4]
 81026a0:	68fa      	ldr	r2, [r7, #12]
 81026a2:	4313      	orrs	r3, r2
 81026a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81026a6:	687b      	ldr	r3, [r7, #4]
 81026a8:	4a2f      	ldr	r2, [pc, #188]	; (8102768 <TIM_Base_SetConfig+0x114>)
 81026aa:	4293      	cmp	r3, r2
 81026ac:	d01f      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81026b4:	d01b      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026b6:	687b      	ldr	r3, [r7, #4]
 81026b8:	4a2c      	ldr	r2, [pc, #176]	; (810276c <TIM_Base_SetConfig+0x118>)
 81026ba:	4293      	cmp	r3, r2
 81026bc:	d017      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	4a2b      	ldr	r2, [pc, #172]	; (8102770 <TIM_Base_SetConfig+0x11c>)
 81026c2:	4293      	cmp	r3, r2
 81026c4:	d013      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	4a2a      	ldr	r2, [pc, #168]	; (8102774 <TIM_Base_SetConfig+0x120>)
 81026ca:	4293      	cmp	r3, r2
 81026cc:	d00f      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026ce:	687b      	ldr	r3, [r7, #4]
 81026d0:	4a29      	ldr	r2, [pc, #164]	; (8102778 <TIM_Base_SetConfig+0x124>)
 81026d2:	4293      	cmp	r3, r2
 81026d4:	d00b      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	4a28      	ldr	r2, [pc, #160]	; (810277c <TIM_Base_SetConfig+0x128>)
 81026da:	4293      	cmp	r3, r2
 81026dc:	d007      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026de:	687b      	ldr	r3, [r7, #4]
 81026e0:	4a27      	ldr	r2, [pc, #156]	; (8102780 <TIM_Base_SetConfig+0x12c>)
 81026e2:	4293      	cmp	r3, r2
 81026e4:	d003      	beq.n	81026ee <TIM_Base_SetConfig+0x9a>
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	4a26      	ldr	r2, [pc, #152]	; (8102784 <TIM_Base_SetConfig+0x130>)
 81026ea:	4293      	cmp	r3, r2
 81026ec:	d108      	bne.n	8102700 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81026ee:	68fb      	ldr	r3, [r7, #12]
 81026f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81026f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81026f6:	683b      	ldr	r3, [r7, #0]
 81026f8:	68db      	ldr	r3, [r3, #12]
 81026fa:	68fa      	ldr	r2, [r7, #12]
 81026fc:	4313      	orrs	r3, r2
 81026fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8102706:	683b      	ldr	r3, [r7, #0]
 8102708:	695b      	ldr	r3, [r3, #20]
 810270a:	4313      	orrs	r3, r2
 810270c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	68fa      	ldr	r2, [r7, #12]
 8102712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8102714:	683b      	ldr	r3, [r7, #0]
 8102716:	689a      	ldr	r2, [r3, #8]
 8102718:	687b      	ldr	r3, [r7, #4]
 810271a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810271c:	683b      	ldr	r3, [r7, #0]
 810271e:	681a      	ldr	r2, [r3, #0]
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	4a10      	ldr	r2, [pc, #64]	; (8102768 <TIM_Base_SetConfig+0x114>)
 8102728:	4293      	cmp	r3, r2
 810272a:	d00f      	beq.n	810274c <TIM_Base_SetConfig+0xf8>
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	4a12      	ldr	r2, [pc, #72]	; (8102778 <TIM_Base_SetConfig+0x124>)
 8102730:	4293      	cmp	r3, r2
 8102732:	d00b      	beq.n	810274c <TIM_Base_SetConfig+0xf8>
 8102734:	687b      	ldr	r3, [r7, #4]
 8102736:	4a11      	ldr	r2, [pc, #68]	; (810277c <TIM_Base_SetConfig+0x128>)
 8102738:	4293      	cmp	r3, r2
 810273a:	d007      	beq.n	810274c <TIM_Base_SetConfig+0xf8>
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	4a10      	ldr	r2, [pc, #64]	; (8102780 <TIM_Base_SetConfig+0x12c>)
 8102740:	4293      	cmp	r3, r2
 8102742:	d003      	beq.n	810274c <TIM_Base_SetConfig+0xf8>
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	4a0f      	ldr	r2, [pc, #60]	; (8102784 <TIM_Base_SetConfig+0x130>)
 8102748:	4293      	cmp	r3, r2
 810274a:	d103      	bne.n	8102754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810274c:	683b      	ldr	r3, [r7, #0]
 810274e:	691a      	ldr	r2, [r3, #16]
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	2201      	movs	r2, #1
 8102758:	615a      	str	r2, [r3, #20]
}
 810275a:	bf00      	nop
 810275c:	3714      	adds	r7, #20
 810275e:	46bd      	mov	sp, r7
 8102760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102764:	4770      	bx	lr
 8102766:	bf00      	nop
 8102768:	40010000 	.word	0x40010000
 810276c:	40000400 	.word	0x40000400
 8102770:	40000800 	.word	0x40000800
 8102774:	40000c00 	.word	0x40000c00
 8102778:	40010400 	.word	0x40010400
 810277c:	40014000 	.word	0x40014000
 8102780:	40014400 	.word	0x40014400
 8102784:	40014800 	.word	0x40014800

08102788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102788:	b480      	push	{r7}
 810278a:	b087      	sub	sp, #28
 810278c:	af00      	add	r7, sp, #0
 810278e:	6078      	str	r0, [r7, #4]
 8102790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8102792:	687b      	ldr	r3, [r7, #4]
 8102794:	6a1b      	ldr	r3, [r3, #32]
 8102796:	f023 0201 	bic.w	r2, r3, #1
 810279a:	687b      	ldr	r3, [r7, #4]
 810279c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810279e:	687b      	ldr	r3, [r7, #4]
 81027a0:	6a1b      	ldr	r3, [r3, #32]
 81027a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81027a4:	687b      	ldr	r3, [r7, #4]
 81027a6:	685b      	ldr	r3, [r3, #4]
 81027a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81027aa:	687b      	ldr	r3, [r7, #4]
 81027ac:	699b      	ldr	r3, [r3, #24]
 81027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81027ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81027bc:	68fb      	ldr	r3, [r7, #12]
 81027be:	f023 0303 	bic.w	r3, r3, #3
 81027c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81027c4:	683b      	ldr	r3, [r7, #0]
 81027c6:	681b      	ldr	r3, [r3, #0]
 81027c8:	68fa      	ldr	r2, [r7, #12]
 81027ca:	4313      	orrs	r3, r2
 81027cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81027ce:	697b      	ldr	r3, [r7, #20]
 81027d0:	f023 0302 	bic.w	r3, r3, #2
 81027d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81027d6:	683b      	ldr	r3, [r7, #0]
 81027d8:	689b      	ldr	r3, [r3, #8]
 81027da:	697a      	ldr	r2, [r7, #20]
 81027dc:	4313      	orrs	r3, r2
 81027de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	4a2c      	ldr	r2, [pc, #176]	; (8102894 <TIM_OC1_SetConfig+0x10c>)
 81027e4:	4293      	cmp	r3, r2
 81027e6:	d00f      	beq.n	8102808 <TIM_OC1_SetConfig+0x80>
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	4a2b      	ldr	r2, [pc, #172]	; (8102898 <TIM_OC1_SetConfig+0x110>)
 81027ec:	4293      	cmp	r3, r2
 81027ee:	d00b      	beq.n	8102808 <TIM_OC1_SetConfig+0x80>
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	4a2a      	ldr	r2, [pc, #168]	; (810289c <TIM_OC1_SetConfig+0x114>)
 81027f4:	4293      	cmp	r3, r2
 81027f6:	d007      	beq.n	8102808 <TIM_OC1_SetConfig+0x80>
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	4a29      	ldr	r2, [pc, #164]	; (81028a0 <TIM_OC1_SetConfig+0x118>)
 81027fc:	4293      	cmp	r3, r2
 81027fe:	d003      	beq.n	8102808 <TIM_OC1_SetConfig+0x80>
 8102800:	687b      	ldr	r3, [r7, #4]
 8102802:	4a28      	ldr	r2, [pc, #160]	; (81028a4 <TIM_OC1_SetConfig+0x11c>)
 8102804:	4293      	cmp	r3, r2
 8102806:	d10c      	bne.n	8102822 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8102808:	697b      	ldr	r3, [r7, #20]
 810280a:	f023 0308 	bic.w	r3, r3, #8
 810280e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8102810:	683b      	ldr	r3, [r7, #0]
 8102812:	68db      	ldr	r3, [r3, #12]
 8102814:	697a      	ldr	r2, [r7, #20]
 8102816:	4313      	orrs	r3, r2
 8102818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810281a:	697b      	ldr	r3, [r7, #20]
 810281c:	f023 0304 	bic.w	r3, r3, #4
 8102820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	4a1b      	ldr	r2, [pc, #108]	; (8102894 <TIM_OC1_SetConfig+0x10c>)
 8102826:	4293      	cmp	r3, r2
 8102828:	d00f      	beq.n	810284a <TIM_OC1_SetConfig+0xc2>
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	4a1a      	ldr	r2, [pc, #104]	; (8102898 <TIM_OC1_SetConfig+0x110>)
 810282e:	4293      	cmp	r3, r2
 8102830:	d00b      	beq.n	810284a <TIM_OC1_SetConfig+0xc2>
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	4a19      	ldr	r2, [pc, #100]	; (810289c <TIM_OC1_SetConfig+0x114>)
 8102836:	4293      	cmp	r3, r2
 8102838:	d007      	beq.n	810284a <TIM_OC1_SetConfig+0xc2>
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	4a18      	ldr	r2, [pc, #96]	; (81028a0 <TIM_OC1_SetConfig+0x118>)
 810283e:	4293      	cmp	r3, r2
 8102840:	d003      	beq.n	810284a <TIM_OC1_SetConfig+0xc2>
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	4a17      	ldr	r2, [pc, #92]	; (81028a4 <TIM_OC1_SetConfig+0x11c>)
 8102846:	4293      	cmp	r3, r2
 8102848:	d111      	bne.n	810286e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810284a:	693b      	ldr	r3, [r7, #16]
 810284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8102852:	693b      	ldr	r3, [r7, #16]
 8102854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810285a:	683b      	ldr	r3, [r7, #0]
 810285c:	695b      	ldr	r3, [r3, #20]
 810285e:	693a      	ldr	r2, [r7, #16]
 8102860:	4313      	orrs	r3, r2
 8102862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8102864:	683b      	ldr	r3, [r7, #0]
 8102866:	699b      	ldr	r3, [r3, #24]
 8102868:	693a      	ldr	r2, [r7, #16]
 810286a:	4313      	orrs	r3, r2
 810286c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	693a      	ldr	r2, [r7, #16]
 8102872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102874:	687b      	ldr	r3, [r7, #4]
 8102876:	68fa      	ldr	r2, [r7, #12]
 8102878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810287a:	683b      	ldr	r3, [r7, #0]
 810287c:	685a      	ldr	r2, [r3, #4]
 810287e:	687b      	ldr	r3, [r7, #4]
 8102880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	697a      	ldr	r2, [r7, #20]
 8102886:	621a      	str	r2, [r3, #32]
}
 8102888:	bf00      	nop
 810288a:	371c      	adds	r7, #28
 810288c:	46bd      	mov	sp, r7
 810288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102892:	4770      	bx	lr
 8102894:	40010000 	.word	0x40010000
 8102898:	40010400 	.word	0x40010400
 810289c:	40014000 	.word	0x40014000
 81028a0:	40014400 	.word	0x40014400
 81028a4:	40014800 	.word	0x40014800

081028a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81028a8:	b480      	push	{r7}
 81028aa:	b087      	sub	sp, #28
 81028ac:	af00      	add	r7, sp, #0
 81028ae:	6078      	str	r0, [r7, #4]
 81028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	6a1b      	ldr	r3, [r3, #32]
 81028b6:	f023 0210 	bic.w	r2, r3, #16
 81028ba:	687b      	ldr	r3, [r7, #4]
 81028bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81028be:	687b      	ldr	r3, [r7, #4]
 81028c0:	6a1b      	ldr	r3, [r3, #32]
 81028c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	685b      	ldr	r3, [r3, #4]
 81028c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	699b      	ldr	r3, [r3, #24]
 81028ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81028d0:	68fb      	ldr	r3, [r7, #12]
 81028d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81028d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81028da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81028dc:	68fb      	ldr	r3, [r7, #12]
 81028de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81028e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81028e4:	683b      	ldr	r3, [r7, #0]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	021b      	lsls	r3, r3, #8
 81028ea:	68fa      	ldr	r2, [r7, #12]
 81028ec:	4313      	orrs	r3, r2
 81028ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81028f0:	697b      	ldr	r3, [r7, #20]
 81028f2:	f023 0320 	bic.w	r3, r3, #32
 81028f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81028f8:	683b      	ldr	r3, [r7, #0]
 81028fa:	689b      	ldr	r3, [r3, #8]
 81028fc:	011b      	lsls	r3, r3, #4
 81028fe:	697a      	ldr	r2, [r7, #20]
 8102900:	4313      	orrs	r3, r2
 8102902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8102904:	687b      	ldr	r3, [r7, #4]
 8102906:	4a28      	ldr	r2, [pc, #160]	; (81029a8 <TIM_OC2_SetConfig+0x100>)
 8102908:	4293      	cmp	r3, r2
 810290a:	d003      	beq.n	8102914 <TIM_OC2_SetConfig+0x6c>
 810290c:	687b      	ldr	r3, [r7, #4]
 810290e:	4a27      	ldr	r2, [pc, #156]	; (81029ac <TIM_OC2_SetConfig+0x104>)
 8102910:	4293      	cmp	r3, r2
 8102912:	d10d      	bne.n	8102930 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8102914:	697b      	ldr	r3, [r7, #20]
 8102916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810291a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810291c:	683b      	ldr	r3, [r7, #0]
 810291e:	68db      	ldr	r3, [r3, #12]
 8102920:	011b      	lsls	r3, r3, #4
 8102922:	697a      	ldr	r2, [r7, #20]
 8102924:	4313      	orrs	r3, r2
 8102926:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8102928:	697b      	ldr	r3, [r7, #20]
 810292a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810292e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	4a1d      	ldr	r2, [pc, #116]	; (81029a8 <TIM_OC2_SetConfig+0x100>)
 8102934:	4293      	cmp	r3, r2
 8102936:	d00f      	beq.n	8102958 <TIM_OC2_SetConfig+0xb0>
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	4a1c      	ldr	r2, [pc, #112]	; (81029ac <TIM_OC2_SetConfig+0x104>)
 810293c:	4293      	cmp	r3, r2
 810293e:	d00b      	beq.n	8102958 <TIM_OC2_SetConfig+0xb0>
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	4a1b      	ldr	r2, [pc, #108]	; (81029b0 <TIM_OC2_SetConfig+0x108>)
 8102944:	4293      	cmp	r3, r2
 8102946:	d007      	beq.n	8102958 <TIM_OC2_SetConfig+0xb0>
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	4a1a      	ldr	r2, [pc, #104]	; (81029b4 <TIM_OC2_SetConfig+0x10c>)
 810294c:	4293      	cmp	r3, r2
 810294e:	d003      	beq.n	8102958 <TIM_OC2_SetConfig+0xb0>
 8102950:	687b      	ldr	r3, [r7, #4]
 8102952:	4a19      	ldr	r2, [pc, #100]	; (81029b8 <TIM_OC2_SetConfig+0x110>)
 8102954:	4293      	cmp	r3, r2
 8102956:	d113      	bne.n	8102980 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8102958:	693b      	ldr	r3, [r7, #16]
 810295a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810295e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8102960:	693b      	ldr	r3, [r7, #16]
 8102962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8102966:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8102968:	683b      	ldr	r3, [r7, #0]
 810296a:	695b      	ldr	r3, [r3, #20]
 810296c:	009b      	lsls	r3, r3, #2
 810296e:	693a      	ldr	r2, [r7, #16]
 8102970:	4313      	orrs	r3, r2
 8102972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8102974:	683b      	ldr	r3, [r7, #0]
 8102976:	699b      	ldr	r3, [r3, #24]
 8102978:	009b      	lsls	r3, r3, #2
 810297a:	693a      	ldr	r2, [r7, #16]
 810297c:	4313      	orrs	r3, r2
 810297e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	693a      	ldr	r2, [r7, #16]
 8102984:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	68fa      	ldr	r2, [r7, #12]
 810298a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810298c:	683b      	ldr	r3, [r7, #0]
 810298e:	685a      	ldr	r2, [r3, #4]
 8102990:	687b      	ldr	r3, [r7, #4]
 8102992:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102994:	687b      	ldr	r3, [r7, #4]
 8102996:	697a      	ldr	r2, [r7, #20]
 8102998:	621a      	str	r2, [r3, #32]
}
 810299a:	bf00      	nop
 810299c:	371c      	adds	r7, #28
 810299e:	46bd      	mov	sp, r7
 81029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a4:	4770      	bx	lr
 81029a6:	bf00      	nop
 81029a8:	40010000 	.word	0x40010000
 81029ac:	40010400 	.word	0x40010400
 81029b0:	40014000 	.word	0x40014000
 81029b4:	40014400 	.word	0x40014400
 81029b8:	40014800 	.word	0x40014800

081029bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81029bc:	b480      	push	{r7}
 81029be:	b087      	sub	sp, #28
 81029c0:	af00      	add	r7, sp, #0
 81029c2:	6078      	str	r0, [r7, #4]
 81029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81029c6:	687b      	ldr	r3, [r7, #4]
 81029c8:	6a1b      	ldr	r3, [r3, #32]
 81029ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	6a1b      	ldr	r3, [r3, #32]
 81029d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81029d8:	687b      	ldr	r3, [r7, #4]
 81029da:	685b      	ldr	r3, [r3, #4]
 81029dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	69db      	ldr	r3, [r3, #28]
 81029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81029e4:	68fb      	ldr	r3, [r7, #12]
 81029e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81029ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81029ec:	68fb      	ldr	r3, [r7, #12]
 81029ee:	f023 0303 	bic.w	r3, r3, #3
 81029f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81029f4:	683b      	ldr	r3, [r7, #0]
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	68fa      	ldr	r2, [r7, #12]
 81029fa:	4313      	orrs	r3, r2
 81029fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81029fe:	697b      	ldr	r3, [r7, #20]
 8102a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8102a06:	683b      	ldr	r3, [r7, #0]
 8102a08:	689b      	ldr	r3, [r3, #8]
 8102a0a:	021b      	lsls	r3, r3, #8
 8102a0c:	697a      	ldr	r2, [r7, #20]
 8102a0e:	4313      	orrs	r3, r2
 8102a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	4a27      	ldr	r2, [pc, #156]	; (8102ab4 <TIM_OC3_SetConfig+0xf8>)
 8102a16:	4293      	cmp	r3, r2
 8102a18:	d003      	beq.n	8102a22 <TIM_OC3_SetConfig+0x66>
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	4a26      	ldr	r2, [pc, #152]	; (8102ab8 <TIM_OC3_SetConfig+0xfc>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d10d      	bne.n	8102a3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8102a22:	697b      	ldr	r3, [r7, #20]
 8102a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8102a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8102a2a:	683b      	ldr	r3, [r7, #0]
 8102a2c:	68db      	ldr	r3, [r3, #12]
 8102a2e:	021b      	lsls	r3, r3, #8
 8102a30:	697a      	ldr	r2, [r7, #20]
 8102a32:	4313      	orrs	r3, r2
 8102a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8102a36:	697b      	ldr	r3, [r7, #20]
 8102a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8102a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	4a1c      	ldr	r2, [pc, #112]	; (8102ab4 <TIM_OC3_SetConfig+0xf8>)
 8102a42:	4293      	cmp	r3, r2
 8102a44:	d00f      	beq.n	8102a66 <TIM_OC3_SetConfig+0xaa>
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	4a1b      	ldr	r2, [pc, #108]	; (8102ab8 <TIM_OC3_SetConfig+0xfc>)
 8102a4a:	4293      	cmp	r3, r2
 8102a4c:	d00b      	beq.n	8102a66 <TIM_OC3_SetConfig+0xaa>
 8102a4e:	687b      	ldr	r3, [r7, #4]
 8102a50:	4a1a      	ldr	r2, [pc, #104]	; (8102abc <TIM_OC3_SetConfig+0x100>)
 8102a52:	4293      	cmp	r3, r2
 8102a54:	d007      	beq.n	8102a66 <TIM_OC3_SetConfig+0xaa>
 8102a56:	687b      	ldr	r3, [r7, #4]
 8102a58:	4a19      	ldr	r2, [pc, #100]	; (8102ac0 <TIM_OC3_SetConfig+0x104>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d003      	beq.n	8102a66 <TIM_OC3_SetConfig+0xaa>
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	4a18      	ldr	r2, [pc, #96]	; (8102ac4 <TIM_OC3_SetConfig+0x108>)
 8102a62:	4293      	cmp	r3, r2
 8102a64:	d113      	bne.n	8102a8e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8102a66:	693b      	ldr	r3, [r7, #16]
 8102a68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8102a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8102a6e:	693b      	ldr	r3, [r7, #16]
 8102a70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8102a76:	683b      	ldr	r3, [r7, #0]
 8102a78:	695b      	ldr	r3, [r3, #20]
 8102a7a:	011b      	lsls	r3, r3, #4
 8102a7c:	693a      	ldr	r2, [r7, #16]
 8102a7e:	4313      	orrs	r3, r2
 8102a80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8102a82:	683b      	ldr	r3, [r7, #0]
 8102a84:	699b      	ldr	r3, [r3, #24]
 8102a86:	011b      	lsls	r3, r3, #4
 8102a88:	693a      	ldr	r2, [r7, #16]
 8102a8a:	4313      	orrs	r3, r2
 8102a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	693a      	ldr	r2, [r7, #16]
 8102a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	68fa      	ldr	r2, [r7, #12]
 8102a98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8102a9a:	683b      	ldr	r3, [r7, #0]
 8102a9c:	685a      	ldr	r2, [r3, #4]
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	697a      	ldr	r2, [r7, #20]
 8102aa6:	621a      	str	r2, [r3, #32]
}
 8102aa8:	bf00      	nop
 8102aaa:	371c      	adds	r7, #28
 8102aac:	46bd      	mov	sp, r7
 8102aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ab2:	4770      	bx	lr
 8102ab4:	40010000 	.word	0x40010000
 8102ab8:	40010400 	.word	0x40010400
 8102abc:	40014000 	.word	0x40014000
 8102ac0:	40014400 	.word	0x40014400
 8102ac4:	40014800 	.word	0x40014800

08102ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102ac8:	b480      	push	{r7}
 8102aca:	b087      	sub	sp, #28
 8102acc:	af00      	add	r7, sp, #0
 8102ace:	6078      	str	r0, [r7, #4]
 8102ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	6a1b      	ldr	r3, [r3, #32]
 8102ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8102ada:	687b      	ldr	r3, [r7, #4]
 8102adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	6a1b      	ldr	r3, [r3, #32]
 8102ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102ae4:	687b      	ldr	r3, [r7, #4]
 8102ae6:	685b      	ldr	r3, [r3, #4]
 8102ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	69db      	ldr	r3, [r3, #28]
 8102aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8102af0:	68fb      	ldr	r3, [r7, #12]
 8102af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8102af8:	68fb      	ldr	r3, [r7, #12]
 8102afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102b00:	683b      	ldr	r3, [r7, #0]
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	021b      	lsls	r3, r3, #8
 8102b06:	68fa      	ldr	r2, [r7, #12]
 8102b08:	4313      	orrs	r3, r2
 8102b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8102b0c:	693b      	ldr	r3, [r7, #16]
 8102b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8102b14:	683b      	ldr	r3, [r7, #0]
 8102b16:	689b      	ldr	r3, [r3, #8]
 8102b18:	031b      	lsls	r3, r3, #12
 8102b1a:	693a      	ldr	r2, [r7, #16]
 8102b1c:	4313      	orrs	r3, r2
 8102b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	4a18      	ldr	r2, [pc, #96]	; (8102b84 <TIM_OC4_SetConfig+0xbc>)
 8102b24:	4293      	cmp	r3, r2
 8102b26:	d00f      	beq.n	8102b48 <TIM_OC4_SetConfig+0x80>
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	4a17      	ldr	r2, [pc, #92]	; (8102b88 <TIM_OC4_SetConfig+0xc0>)
 8102b2c:	4293      	cmp	r3, r2
 8102b2e:	d00b      	beq.n	8102b48 <TIM_OC4_SetConfig+0x80>
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	4a16      	ldr	r2, [pc, #88]	; (8102b8c <TIM_OC4_SetConfig+0xc4>)
 8102b34:	4293      	cmp	r3, r2
 8102b36:	d007      	beq.n	8102b48 <TIM_OC4_SetConfig+0x80>
 8102b38:	687b      	ldr	r3, [r7, #4]
 8102b3a:	4a15      	ldr	r2, [pc, #84]	; (8102b90 <TIM_OC4_SetConfig+0xc8>)
 8102b3c:	4293      	cmp	r3, r2
 8102b3e:	d003      	beq.n	8102b48 <TIM_OC4_SetConfig+0x80>
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	4a14      	ldr	r2, [pc, #80]	; (8102b94 <TIM_OC4_SetConfig+0xcc>)
 8102b44:	4293      	cmp	r3, r2
 8102b46:	d109      	bne.n	8102b5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8102b48:	697b      	ldr	r3, [r7, #20]
 8102b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8102b4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8102b50:	683b      	ldr	r3, [r7, #0]
 8102b52:	695b      	ldr	r3, [r3, #20]
 8102b54:	019b      	lsls	r3, r3, #6
 8102b56:	697a      	ldr	r2, [r7, #20]
 8102b58:	4313      	orrs	r3, r2
 8102b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	697a      	ldr	r2, [r7, #20]
 8102b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	68fa      	ldr	r2, [r7, #12]
 8102b66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8102b68:	683b      	ldr	r3, [r7, #0]
 8102b6a:	685a      	ldr	r2, [r3, #4]
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	693a      	ldr	r2, [r7, #16]
 8102b74:	621a      	str	r2, [r3, #32]
}
 8102b76:	bf00      	nop
 8102b78:	371c      	adds	r7, #28
 8102b7a:	46bd      	mov	sp, r7
 8102b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b80:	4770      	bx	lr
 8102b82:	bf00      	nop
 8102b84:	40010000 	.word	0x40010000
 8102b88:	40010400 	.word	0x40010400
 8102b8c:	40014000 	.word	0x40014000
 8102b90:	40014400 	.word	0x40014400
 8102b94:	40014800 	.word	0x40014800

08102b98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8102b98:	b480      	push	{r7}
 8102b9a:	b087      	sub	sp, #28
 8102b9c:	af00      	add	r7, sp, #0
 8102b9e:	6078      	str	r0, [r7, #4]
 8102ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8102ba2:	687b      	ldr	r3, [r7, #4]
 8102ba4:	6a1b      	ldr	r3, [r3, #32]
 8102ba6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	6a1b      	ldr	r3, [r3, #32]
 8102bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102bb4:	687b      	ldr	r3, [r7, #4]
 8102bb6:	685b      	ldr	r3, [r3, #4]
 8102bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8102bba:	687b      	ldr	r3, [r7, #4]
 8102bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102bc8:	683b      	ldr	r3, [r7, #0]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	68fa      	ldr	r2, [r7, #12]
 8102bce:	4313      	orrs	r3, r2
 8102bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8102bd2:	693b      	ldr	r3, [r7, #16]
 8102bd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8102bd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8102bda:	683b      	ldr	r3, [r7, #0]
 8102bdc:	689b      	ldr	r3, [r3, #8]
 8102bde:	041b      	lsls	r3, r3, #16
 8102be0:	693a      	ldr	r2, [r7, #16]
 8102be2:	4313      	orrs	r3, r2
 8102be4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	4a17      	ldr	r2, [pc, #92]	; (8102c48 <TIM_OC5_SetConfig+0xb0>)
 8102bea:	4293      	cmp	r3, r2
 8102bec:	d00f      	beq.n	8102c0e <TIM_OC5_SetConfig+0x76>
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	4a16      	ldr	r2, [pc, #88]	; (8102c4c <TIM_OC5_SetConfig+0xb4>)
 8102bf2:	4293      	cmp	r3, r2
 8102bf4:	d00b      	beq.n	8102c0e <TIM_OC5_SetConfig+0x76>
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	4a15      	ldr	r2, [pc, #84]	; (8102c50 <TIM_OC5_SetConfig+0xb8>)
 8102bfa:	4293      	cmp	r3, r2
 8102bfc:	d007      	beq.n	8102c0e <TIM_OC5_SetConfig+0x76>
 8102bfe:	687b      	ldr	r3, [r7, #4]
 8102c00:	4a14      	ldr	r2, [pc, #80]	; (8102c54 <TIM_OC5_SetConfig+0xbc>)
 8102c02:	4293      	cmp	r3, r2
 8102c04:	d003      	beq.n	8102c0e <TIM_OC5_SetConfig+0x76>
 8102c06:	687b      	ldr	r3, [r7, #4]
 8102c08:	4a13      	ldr	r2, [pc, #76]	; (8102c58 <TIM_OC5_SetConfig+0xc0>)
 8102c0a:	4293      	cmp	r3, r2
 8102c0c:	d109      	bne.n	8102c22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8102c0e:	697b      	ldr	r3, [r7, #20]
 8102c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102c14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8102c16:	683b      	ldr	r3, [r7, #0]
 8102c18:	695b      	ldr	r3, [r3, #20]
 8102c1a:	021b      	lsls	r3, r3, #8
 8102c1c:	697a      	ldr	r2, [r7, #20]
 8102c1e:	4313      	orrs	r3, r2
 8102c20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	697a      	ldr	r2, [r7, #20]
 8102c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	68fa      	ldr	r2, [r7, #12]
 8102c2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8102c2e:	683b      	ldr	r3, [r7, #0]
 8102c30:	685a      	ldr	r2, [r3, #4]
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102c36:	687b      	ldr	r3, [r7, #4]
 8102c38:	693a      	ldr	r2, [r7, #16]
 8102c3a:	621a      	str	r2, [r3, #32]
}
 8102c3c:	bf00      	nop
 8102c3e:	371c      	adds	r7, #28
 8102c40:	46bd      	mov	sp, r7
 8102c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c46:	4770      	bx	lr
 8102c48:	40010000 	.word	0x40010000
 8102c4c:	40010400 	.word	0x40010400
 8102c50:	40014000 	.word	0x40014000
 8102c54:	40014400 	.word	0x40014400
 8102c58:	40014800 	.word	0x40014800

08102c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8102c5c:	b480      	push	{r7}
 8102c5e:	b087      	sub	sp, #28
 8102c60:	af00      	add	r7, sp, #0
 8102c62:	6078      	str	r0, [r7, #4]
 8102c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	6a1b      	ldr	r3, [r3, #32]
 8102c6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102c72:	687b      	ldr	r3, [r7, #4]
 8102c74:	6a1b      	ldr	r3, [r3, #32]
 8102c76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	685b      	ldr	r3, [r3, #4]
 8102c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102c8c:	683b      	ldr	r3, [r7, #0]
 8102c8e:	681b      	ldr	r3, [r3, #0]
 8102c90:	021b      	lsls	r3, r3, #8
 8102c92:	68fa      	ldr	r2, [r7, #12]
 8102c94:	4313      	orrs	r3, r2
 8102c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8102c98:	693b      	ldr	r3, [r7, #16]
 8102c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8102c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8102ca0:	683b      	ldr	r3, [r7, #0]
 8102ca2:	689b      	ldr	r3, [r3, #8]
 8102ca4:	051b      	lsls	r3, r3, #20
 8102ca6:	693a      	ldr	r2, [r7, #16]
 8102ca8:	4313      	orrs	r3, r2
 8102caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	4a18      	ldr	r2, [pc, #96]	; (8102d10 <TIM_OC6_SetConfig+0xb4>)
 8102cb0:	4293      	cmp	r3, r2
 8102cb2:	d00f      	beq.n	8102cd4 <TIM_OC6_SetConfig+0x78>
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	4a17      	ldr	r2, [pc, #92]	; (8102d14 <TIM_OC6_SetConfig+0xb8>)
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d00b      	beq.n	8102cd4 <TIM_OC6_SetConfig+0x78>
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	4a16      	ldr	r2, [pc, #88]	; (8102d18 <TIM_OC6_SetConfig+0xbc>)
 8102cc0:	4293      	cmp	r3, r2
 8102cc2:	d007      	beq.n	8102cd4 <TIM_OC6_SetConfig+0x78>
 8102cc4:	687b      	ldr	r3, [r7, #4]
 8102cc6:	4a15      	ldr	r2, [pc, #84]	; (8102d1c <TIM_OC6_SetConfig+0xc0>)
 8102cc8:	4293      	cmp	r3, r2
 8102cca:	d003      	beq.n	8102cd4 <TIM_OC6_SetConfig+0x78>
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	4a14      	ldr	r2, [pc, #80]	; (8102d20 <TIM_OC6_SetConfig+0xc4>)
 8102cd0:	4293      	cmp	r3, r2
 8102cd2:	d109      	bne.n	8102ce8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8102cd4:	697b      	ldr	r3, [r7, #20]
 8102cd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8102cda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8102cdc:	683b      	ldr	r3, [r7, #0]
 8102cde:	695b      	ldr	r3, [r3, #20]
 8102ce0:	029b      	lsls	r3, r3, #10
 8102ce2:	697a      	ldr	r2, [r7, #20]
 8102ce4:	4313      	orrs	r3, r2
 8102ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	697a      	ldr	r2, [r7, #20]
 8102cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	68fa      	ldr	r2, [r7, #12]
 8102cf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8102cf4:	683b      	ldr	r3, [r7, #0]
 8102cf6:	685a      	ldr	r2, [r3, #4]
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102cfc:	687b      	ldr	r3, [r7, #4]
 8102cfe:	693a      	ldr	r2, [r7, #16]
 8102d00:	621a      	str	r2, [r3, #32]
}
 8102d02:	bf00      	nop
 8102d04:	371c      	adds	r7, #28
 8102d06:	46bd      	mov	sp, r7
 8102d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d0c:	4770      	bx	lr
 8102d0e:	bf00      	nop
 8102d10:	40010000 	.word	0x40010000
 8102d14:	40010400 	.word	0x40010400
 8102d18:	40014000 	.word	0x40014000
 8102d1c:	40014400 	.word	0x40014400
 8102d20:	40014800 	.word	0x40014800

08102d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8102d24:	b480      	push	{r7}
 8102d26:	b087      	sub	sp, #28
 8102d28:	af00      	add	r7, sp, #0
 8102d2a:	60f8      	str	r0, [r7, #12]
 8102d2c:	60b9      	str	r1, [r7, #8]
 8102d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8102d30:	68fb      	ldr	r3, [r7, #12]
 8102d32:	6a1b      	ldr	r3, [r3, #32]
 8102d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8102d36:	68fb      	ldr	r3, [r7, #12]
 8102d38:	6a1b      	ldr	r3, [r3, #32]
 8102d3a:	f023 0201 	bic.w	r2, r3, #1
 8102d3e:	68fb      	ldr	r3, [r7, #12]
 8102d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8102d42:	68fb      	ldr	r3, [r7, #12]
 8102d44:	699b      	ldr	r3, [r3, #24]
 8102d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8102d48:	693b      	ldr	r3, [r7, #16]
 8102d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8102d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	011b      	lsls	r3, r3, #4
 8102d54:	693a      	ldr	r2, [r7, #16]
 8102d56:	4313      	orrs	r3, r2
 8102d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8102d5a:	697b      	ldr	r3, [r7, #20]
 8102d5c:	f023 030a 	bic.w	r3, r3, #10
 8102d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8102d62:	697a      	ldr	r2, [r7, #20]
 8102d64:	68bb      	ldr	r3, [r7, #8]
 8102d66:	4313      	orrs	r3, r2
 8102d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8102d6a:	68fb      	ldr	r3, [r7, #12]
 8102d6c:	693a      	ldr	r2, [r7, #16]
 8102d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8102d70:	68fb      	ldr	r3, [r7, #12]
 8102d72:	697a      	ldr	r2, [r7, #20]
 8102d74:	621a      	str	r2, [r3, #32]
}
 8102d76:	bf00      	nop
 8102d78:	371c      	adds	r7, #28
 8102d7a:	46bd      	mov	sp, r7
 8102d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d80:	4770      	bx	lr

08102d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8102d82:	b480      	push	{r7}
 8102d84:	b087      	sub	sp, #28
 8102d86:	af00      	add	r7, sp, #0
 8102d88:	60f8      	str	r0, [r7, #12]
 8102d8a:	60b9      	str	r1, [r7, #8]
 8102d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8102d8e:	68fb      	ldr	r3, [r7, #12]
 8102d90:	6a1b      	ldr	r3, [r3, #32]
 8102d92:	f023 0210 	bic.w	r2, r3, #16
 8102d96:	68fb      	ldr	r3, [r7, #12]
 8102d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8102d9a:	68fb      	ldr	r3, [r7, #12]
 8102d9c:	699b      	ldr	r3, [r3, #24]
 8102d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8102da0:	68fb      	ldr	r3, [r7, #12]
 8102da2:	6a1b      	ldr	r3, [r3, #32]
 8102da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8102da6:	697b      	ldr	r3, [r7, #20]
 8102da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8102dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	031b      	lsls	r3, r3, #12
 8102db2:	697a      	ldr	r2, [r7, #20]
 8102db4:	4313      	orrs	r3, r2
 8102db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8102db8:	693b      	ldr	r3, [r7, #16]
 8102dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8102dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8102dc0:	68bb      	ldr	r3, [r7, #8]
 8102dc2:	011b      	lsls	r3, r3, #4
 8102dc4:	693a      	ldr	r2, [r7, #16]
 8102dc6:	4313      	orrs	r3, r2
 8102dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8102dca:	68fb      	ldr	r3, [r7, #12]
 8102dcc:	697a      	ldr	r2, [r7, #20]
 8102dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8102dd0:	68fb      	ldr	r3, [r7, #12]
 8102dd2:	693a      	ldr	r2, [r7, #16]
 8102dd4:	621a      	str	r2, [r3, #32]
}
 8102dd6:	bf00      	nop
 8102dd8:	371c      	adds	r7, #28
 8102dda:	46bd      	mov	sp, r7
 8102ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102de0:	4770      	bx	lr

08102de2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8102de2:	b480      	push	{r7}
 8102de4:	b085      	sub	sp, #20
 8102de6:	af00      	add	r7, sp, #0
 8102de8:	6078      	str	r0, [r7, #4]
 8102dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	689b      	ldr	r3, [r3, #8]
 8102df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8102df2:	68fb      	ldr	r3, [r7, #12]
 8102df4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8102df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8102dfe:	683a      	ldr	r2, [r7, #0]
 8102e00:	68fb      	ldr	r3, [r7, #12]
 8102e02:	4313      	orrs	r3, r2
 8102e04:	f043 0307 	orr.w	r3, r3, #7
 8102e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	68fa      	ldr	r2, [r7, #12]
 8102e0e:	609a      	str	r2, [r3, #8]
}
 8102e10:	bf00      	nop
 8102e12:	3714      	adds	r7, #20
 8102e14:	46bd      	mov	sp, r7
 8102e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e1a:	4770      	bx	lr

08102e1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8102e1c:	b480      	push	{r7}
 8102e1e:	b087      	sub	sp, #28
 8102e20:	af00      	add	r7, sp, #0
 8102e22:	60f8      	str	r0, [r7, #12]
 8102e24:	60b9      	str	r1, [r7, #8]
 8102e26:	607a      	str	r2, [r7, #4]
 8102e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8102e2a:	68fb      	ldr	r3, [r7, #12]
 8102e2c:	689b      	ldr	r3, [r3, #8]
 8102e2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8102e30:	697b      	ldr	r3, [r7, #20]
 8102e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102e36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8102e38:	683b      	ldr	r3, [r7, #0]
 8102e3a:	021a      	lsls	r2, r3, #8
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	431a      	orrs	r2, r3
 8102e40:	68bb      	ldr	r3, [r7, #8]
 8102e42:	4313      	orrs	r3, r2
 8102e44:	697a      	ldr	r2, [r7, #20]
 8102e46:	4313      	orrs	r3, r2
 8102e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8102e4a:	68fb      	ldr	r3, [r7, #12]
 8102e4c:	697a      	ldr	r2, [r7, #20]
 8102e4e:	609a      	str	r2, [r3, #8]
}
 8102e50:	bf00      	nop
 8102e52:	371c      	adds	r7, #28
 8102e54:	46bd      	mov	sp, r7
 8102e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e5a:	4770      	bx	lr

08102e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8102e5c:	b480      	push	{r7}
 8102e5e:	b087      	sub	sp, #28
 8102e60:	af00      	add	r7, sp, #0
 8102e62:	60f8      	str	r0, [r7, #12]
 8102e64:	60b9      	str	r1, [r7, #8]
 8102e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8102e68:	68bb      	ldr	r3, [r7, #8]
 8102e6a:	f003 031f 	and.w	r3, r3, #31
 8102e6e:	2201      	movs	r2, #1
 8102e70:	fa02 f303 	lsl.w	r3, r2, r3
 8102e74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8102e76:	68fb      	ldr	r3, [r7, #12]
 8102e78:	6a1a      	ldr	r2, [r3, #32]
 8102e7a:	697b      	ldr	r3, [r7, #20]
 8102e7c:	43db      	mvns	r3, r3
 8102e7e:	401a      	ands	r2, r3
 8102e80:	68fb      	ldr	r3, [r7, #12]
 8102e82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8102e84:	68fb      	ldr	r3, [r7, #12]
 8102e86:	6a1a      	ldr	r2, [r3, #32]
 8102e88:	68bb      	ldr	r3, [r7, #8]
 8102e8a:	f003 031f 	and.w	r3, r3, #31
 8102e8e:	6879      	ldr	r1, [r7, #4]
 8102e90:	fa01 f303 	lsl.w	r3, r1, r3
 8102e94:	431a      	orrs	r2, r3
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	621a      	str	r2, [r3, #32]
}
 8102e9a:	bf00      	nop
 8102e9c:	371c      	adds	r7, #28
 8102e9e:	46bd      	mov	sp, r7
 8102ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ea4:	4770      	bx	lr
	...

08102ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8102ea8:	b480      	push	{r7}
 8102eaa:	b085      	sub	sp, #20
 8102eac:	af00      	add	r7, sp, #0
 8102eae:	6078      	str	r0, [r7, #4]
 8102eb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102eb8:	2b01      	cmp	r3, #1
 8102eba:	d101      	bne.n	8102ec0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8102ebc:	2302      	movs	r3, #2
 8102ebe:	e068      	b.n	8102f92 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	2201      	movs	r2, #1
 8102ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	2202      	movs	r2, #2
 8102ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8102ed0:	687b      	ldr	r3, [r7, #4]
 8102ed2:	681b      	ldr	r3, [r3, #0]
 8102ed4:	685b      	ldr	r3, [r3, #4]
 8102ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8102ed8:	687b      	ldr	r3, [r7, #4]
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	689b      	ldr	r3, [r3, #8]
 8102ede:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	4a2e      	ldr	r2, [pc, #184]	; (8102fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8102ee6:	4293      	cmp	r3, r2
 8102ee8:	d004      	beq.n	8102ef4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	681b      	ldr	r3, [r3, #0]
 8102eee:	4a2d      	ldr	r2, [pc, #180]	; (8102fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8102ef0:	4293      	cmp	r3, r2
 8102ef2:	d108      	bne.n	8102f06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8102ef4:	68fb      	ldr	r3, [r7, #12]
 8102ef6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8102efa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8102efc:	683b      	ldr	r3, [r7, #0]
 8102efe:	685b      	ldr	r3, [r3, #4]
 8102f00:	68fa      	ldr	r2, [r7, #12]
 8102f02:	4313      	orrs	r3, r2
 8102f04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8102f06:	68fb      	ldr	r3, [r7, #12]
 8102f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102f0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8102f0e:	683b      	ldr	r3, [r7, #0]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	68fa      	ldr	r2, [r7, #12]
 8102f14:	4313      	orrs	r3, r2
 8102f16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	681b      	ldr	r3, [r3, #0]
 8102f1c:	68fa      	ldr	r2, [r7, #12]
 8102f1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	4a1e      	ldr	r2, [pc, #120]	; (8102fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8102f26:	4293      	cmp	r3, r2
 8102f28:	d01d      	beq.n	8102f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	681b      	ldr	r3, [r3, #0]
 8102f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102f32:	d018      	beq.n	8102f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	4a1b      	ldr	r2, [pc, #108]	; (8102fa8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8102f3a:	4293      	cmp	r3, r2
 8102f3c:	d013      	beq.n	8102f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8102f3e:	687b      	ldr	r3, [r7, #4]
 8102f40:	681b      	ldr	r3, [r3, #0]
 8102f42:	4a1a      	ldr	r2, [pc, #104]	; (8102fac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8102f44:	4293      	cmp	r3, r2
 8102f46:	d00e      	beq.n	8102f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	4a18      	ldr	r2, [pc, #96]	; (8102fb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8102f4e:	4293      	cmp	r3, r2
 8102f50:	d009      	beq.n	8102f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	681b      	ldr	r3, [r3, #0]
 8102f56:	4a13      	ldr	r2, [pc, #76]	; (8102fa4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8102f58:	4293      	cmp	r3, r2
 8102f5a:	d004      	beq.n	8102f66 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8102f5c:	687b      	ldr	r3, [r7, #4]
 8102f5e:	681b      	ldr	r3, [r3, #0]
 8102f60:	4a14      	ldr	r2, [pc, #80]	; (8102fb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8102f62:	4293      	cmp	r3, r2
 8102f64:	d10c      	bne.n	8102f80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8102f66:	68bb      	ldr	r3, [r7, #8]
 8102f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8102f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8102f6e:	683b      	ldr	r3, [r7, #0]
 8102f70:	689b      	ldr	r3, [r3, #8]
 8102f72:	68ba      	ldr	r2, [r7, #8]
 8102f74:	4313      	orrs	r3, r2
 8102f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	681b      	ldr	r3, [r3, #0]
 8102f7c:	68ba      	ldr	r2, [r7, #8]
 8102f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	2201      	movs	r2, #1
 8102f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	2200      	movs	r2, #0
 8102f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102f90:	2300      	movs	r3, #0
}
 8102f92:	4618      	mov	r0, r3
 8102f94:	3714      	adds	r7, #20
 8102f96:	46bd      	mov	sp, r7
 8102f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f9c:	4770      	bx	lr
 8102f9e:	bf00      	nop
 8102fa0:	40010000 	.word	0x40010000
 8102fa4:	40010400 	.word	0x40010400
 8102fa8:	40000400 	.word	0x40000400
 8102fac:	40000800 	.word	0x40000800
 8102fb0:	40000c00 	.word	0x40000c00
 8102fb4:	40001800 	.word	0x40001800

08102fb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8102fb8:	b480      	push	{r7}
 8102fba:	b085      	sub	sp, #20
 8102fbc:	af00      	add	r7, sp, #0
 8102fbe:	6078      	str	r0, [r7, #4]
 8102fc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8102fc2:	2300      	movs	r3, #0
 8102fc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8102fc6:	687b      	ldr	r3, [r7, #4]
 8102fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102fcc:	2b01      	cmp	r3, #1
 8102fce:	d101      	bne.n	8102fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8102fd0:	2302      	movs	r3, #2
 8102fd2:	e065      	b.n	81030a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	2201      	movs	r2, #1
 8102fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8102fdc:	68fb      	ldr	r3, [r7, #12]
 8102fde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8102fe2:	683b      	ldr	r3, [r7, #0]
 8102fe4:	68db      	ldr	r3, [r3, #12]
 8102fe6:	4313      	orrs	r3, r2
 8102fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8102fea:	68fb      	ldr	r3, [r7, #12]
 8102fec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102ff0:	683b      	ldr	r3, [r7, #0]
 8102ff2:	689b      	ldr	r3, [r3, #8]
 8102ff4:	4313      	orrs	r3, r2
 8102ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8102ff8:	68fb      	ldr	r3, [r7, #12]
 8102ffa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8102ffe:	683b      	ldr	r3, [r7, #0]
 8103000:	685b      	ldr	r3, [r3, #4]
 8103002:	4313      	orrs	r3, r2
 8103004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8103006:	68fb      	ldr	r3, [r7, #12]
 8103008:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810300c:	683b      	ldr	r3, [r7, #0]
 810300e:	681b      	ldr	r3, [r3, #0]
 8103010:	4313      	orrs	r3, r2
 8103012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810301a:	683b      	ldr	r3, [r7, #0]
 810301c:	691b      	ldr	r3, [r3, #16]
 810301e:	4313      	orrs	r3, r2
 8103020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8103022:	68fb      	ldr	r3, [r7, #12]
 8103024:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8103028:	683b      	ldr	r3, [r7, #0]
 810302a:	695b      	ldr	r3, [r3, #20]
 810302c:	4313      	orrs	r3, r2
 810302e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8103030:	68fb      	ldr	r3, [r7, #12]
 8103032:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103036:	683b      	ldr	r3, [r7, #0]
 8103038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810303a:	4313      	orrs	r3, r2
 810303c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810303e:	68fb      	ldr	r3, [r7, #12]
 8103040:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8103044:	683b      	ldr	r3, [r7, #0]
 8103046:	699b      	ldr	r3, [r3, #24]
 8103048:	041b      	lsls	r3, r3, #16
 810304a:	4313      	orrs	r3, r2
 810304c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	4a16      	ldr	r2, [pc, #88]	; (81030ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8103054:	4293      	cmp	r3, r2
 8103056:	d004      	beq.n	8103062 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	4a14      	ldr	r2, [pc, #80]	; (81030b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810305e:	4293      	cmp	r3, r2
 8103060:	d115      	bne.n	810308e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8103062:	68fb      	ldr	r3, [r7, #12]
 8103064:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8103068:	683b      	ldr	r3, [r7, #0]
 810306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810306c:	051b      	lsls	r3, r3, #20
 810306e:	4313      	orrs	r3, r2
 8103070:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8103072:	68fb      	ldr	r3, [r7, #12]
 8103074:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103078:	683b      	ldr	r3, [r7, #0]
 810307a:	69db      	ldr	r3, [r3, #28]
 810307c:	4313      	orrs	r3, r2
 810307e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8103080:	68fb      	ldr	r3, [r7, #12]
 8103082:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8103086:	683b      	ldr	r3, [r7, #0]
 8103088:	6a1b      	ldr	r3, [r3, #32]
 810308a:	4313      	orrs	r3, r2
 810308c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	68fa      	ldr	r2, [r7, #12]
 8103094:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	2200      	movs	r2, #0
 810309a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810309e:	2300      	movs	r3, #0
}
 81030a0:	4618      	mov	r0, r3
 81030a2:	3714      	adds	r7, #20
 81030a4:	46bd      	mov	sp, r7
 81030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030aa:	4770      	bx	lr
 81030ac:	40010000 	.word	0x40010000
 81030b0:	40010400 	.word	0x40010400

081030b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81030b4:	b480      	push	{r7}
 81030b6:	b083      	sub	sp, #12
 81030b8:	af00      	add	r7, sp, #0
 81030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81030bc:	bf00      	nop
 81030be:	370c      	adds	r7, #12
 81030c0:	46bd      	mov	sp, r7
 81030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030c6:	4770      	bx	lr

081030c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81030c8:	b480      	push	{r7}
 81030ca:	b083      	sub	sp, #12
 81030cc:	af00      	add	r7, sp, #0
 81030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81030d0:	bf00      	nop
 81030d2:	370c      	adds	r7, #12
 81030d4:	46bd      	mov	sp, r7
 81030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030da:	4770      	bx	lr

081030dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81030dc:	b480      	push	{r7}
 81030de:	b083      	sub	sp, #12
 81030e0:	af00      	add	r7, sp, #0
 81030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81030e4:	bf00      	nop
 81030e6:	370c      	adds	r7, #12
 81030e8:	46bd      	mov	sp, r7
 81030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030ee:	4770      	bx	lr

081030f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81030f0:	b580      	push	{r7, lr}
 81030f2:	b082      	sub	sp, #8
 81030f4:	af00      	add	r7, sp, #0
 81030f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	2b00      	cmp	r3, #0
 81030fc:	d101      	bne.n	8103102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81030fe:	2301      	movs	r3, #1
 8103100:	e042      	b.n	8103188 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103108:	2b00      	cmp	r3, #0
 810310a:	d106      	bne.n	810311a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	2200      	movs	r2, #0
 8103110:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8103114:	6878      	ldr	r0, [r7, #4]
 8103116:	f7fd fcdd 	bl	8100ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	2224      	movs	r2, #36	; 0x24
 810311e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	681b      	ldr	r3, [r3, #0]
 8103126:	681a      	ldr	r2, [r3, #0]
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	f022 0201 	bic.w	r2, r2, #1
 8103130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103132:	6878      	ldr	r0, [r7, #4]
 8103134:	f000 f82c 	bl	8103190 <UART_SetConfig>
 8103138:	4603      	mov	r3, r0
 810313a:	2b01      	cmp	r3, #1
 810313c:	d101      	bne.n	8103142 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810313e:	2301      	movs	r3, #1
 8103140:	e022      	b.n	8103188 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103146:	2b00      	cmp	r3, #0
 8103148:	d002      	beq.n	8103150 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810314a:	6878      	ldr	r0, [r7, #4]
 810314c:	f002 f99e 	bl	810548c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103150:	687b      	ldr	r3, [r7, #4]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	685a      	ldr	r2, [r3, #4]
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	681b      	ldr	r3, [r3, #0]
 810315a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810315e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	689a      	ldr	r2, [r3, #8]
 8103166:	687b      	ldr	r3, [r7, #4]
 8103168:	681b      	ldr	r3, [r3, #0]
 810316a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810316e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	681b      	ldr	r3, [r3, #0]
 8103174:	681a      	ldr	r2, [r3, #0]
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	f042 0201 	orr.w	r2, r2, #1
 810317e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8103180:	6878      	ldr	r0, [r7, #4]
 8103182:	f002 fa25 	bl	81055d0 <UART_CheckIdleState>
 8103186:	4603      	mov	r3, r0
}
 8103188:	4618      	mov	r0, r3
 810318a:	3708      	adds	r7, #8
 810318c:	46bd      	mov	sp, r7
 810318e:	bd80      	pop	{r7, pc}

08103190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8103190:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8103194:	b090      	sub	sp, #64	; 0x40
 8103196:	af00      	add	r7, sp, #0
 8103198:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 810319a:	2300      	movs	r3, #0
 810319c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 810319e:	2300      	movs	r3, #0
 81031a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 81031a4:	2300      	movs	r3, #0
 81031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	689a      	ldr	r2, [r3, #8]
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	691b      	ldr	r3, [r3, #16]
 81031b0:	431a      	orrs	r2, r3
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	695b      	ldr	r3, [r3, #20]
 81031b6:	431a      	orrs	r2, r3
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	69db      	ldr	r3, [r3, #28]
 81031bc:	4313      	orrs	r3, r2
 81031be:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81031c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81031c6:	4313      	orrs	r3, r2
 81031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	681a      	ldr	r2, [r3, #0]
 81031d0:	4bc0      	ldr	r3, [pc, #768]	; (81034d4 <UART_SetConfig+0x344>)
 81031d2:	4013      	ands	r3, r2
 81031d4:	687a      	ldr	r2, [r7, #4]
 81031d6:	6812      	ldr	r2, [r2, #0]
 81031d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81031da:	430b      	orrs	r3, r1
 81031dc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	681b      	ldr	r3, [r3, #0]
 81031e2:	685b      	ldr	r3, [r3, #4]
 81031e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81031e8:	687b      	ldr	r3, [r7, #4]
 81031ea:	68da      	ldr	r2, [r3, #12]
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	430a      	orrs	r2, r1
 81031f2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	699b      	ldr	r3, [r3, #24]
 81031f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	4ab6      	ldr	r2, [pc, #728]	; (81034d8 <UART_SetConfig+0x348>)
 8103200:	4293      	cmp	r3, r2
 8103202:	d004      	beq.n	810320e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	6a1b      	ldr	r3, [r3, #32]
 8103208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 810320a:	4313      	orrs	r3, r2
 810320c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	689b      	ldr	r3, [r3, #8]
 8103214:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8103218:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810321c:	687a      	ldr	r2, [r7, #4]
 810321e:	6812      	ldr	r2, [r2, #0]
 8103220:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8103222:	430b      	orrs	r3, r1
 8103224:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	681b      	ldr	r3, [r3, #0]
 810322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810322c:	f023 010f 	bic.w	r1, r3, #15
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	430a      	orrs	r2, r1
 810323a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4aa6      	ldr	r2, [pc, #664]	; (81034dc <UART_SetConfig+0x34c>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d177      	bne.n	8103336 <UART_SetConfig+0x1a6>
 8103246:	4ba6      	ldr	r3, [pc, #664]	; (81034e0 <UART_SetConfig+0x350>)
 8103248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810324a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810324e:	2b28      	cmp	r3, #40	; 0x28
 8103250:	d86c      	bhi.n	810332c <UART_SetConfig+0x19c>
 8103252:	a201      	add	r2, pc, #4	; (adr r2, 8103258 <UART_SetConfig+0xc8>)
 8103254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103258:	081032fd 	.word	0x081032fd
 810325c:	0810332d 	.word	0x0810332d
 8103260:	0810332d 	.word	0x0810332d
 8103264:	0810332d 	.word	0x0810332d
 8103268:	0810332d 	.word	0x0810332d
 810326c:	0810332d 	.word	0x0810332d
 8103270:	0810332d 	.word	0x0810332d
 8103274:	0810332d 	.word	0x0810332d
 8103278:	08103305 	.word	0x08103305
 810327c:	0810332d 	.word	0x0810332d
 8103280:	0810332d 	.word	0x0810332d
 8103284:	0810332d 	.word	0x0810332d
 8103288:	0810332d 	.word	0x0810332d
 810328c:	0810332d 	.word	0x0810332d
 8103290:	0810332d 	.word	0x0810332d
 8103294:	0810332d 	.word	0x0810332d
 8103298:	0810330d 	.word	0x0810330d
 810329c:	0810332d 	.word	0x0810332d
 81032a0:	0810332d 	.word	0x0810332d
 81032a4:	0810332d 	.word	0x0810332d
 81032a8:	0810332d 	.word	0x0810332d
 81032ac:	0810332d 	.word	0x0810332d
 81032b0:	0810332d 	.word	0x0810332d
 81032b4:	0810332d 	.word	0x0810332d
 81032b8:	08103315 	.word	0x08103315
 81032bc:	0810332d 	.word	0x0810332d
 81032c0:	0810332d 	.word	0x0810332d
 81032c4:	0810332d 	.word	0x0810332d
 81032c8:	0810332d 	.word	0x0810332d
 81032cc:	0810332d 	.word	0x0810332d
 81032d0:	0810332d 	.word	0x0810332d
 81032d4:	0810332d 	.word	0x0810332d
 81032d8:	0810331d 	.word	0x0810331d
 81032dc:	0810332d 	.word	0x0810332d
 81032e0:	0810332d 	.word	0x0810332d
 81032e4:	0810332d 	.word	0x0810332d
 81032e8:	0810332d 	.word	0x0810332d
 81032ec:	0810332d 	.word	0x0810332d
 81032f0:	0810332d 	.word	0x0810332d
 81032f4:	0810332d 	.word	0x0810332d
 81032f8:	08103325 	.word	0x08103325
 81032fc:	2301      	movs	r3, #1
 81032fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103302:	e231      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103304:	2304      	movs	r3, #4
 8103306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810330a:	e22d      	b.n	8103768 <UART_SetConfig+0x5d8>
 810330c:	2308      	movs	r3, #8
 810330e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103312:	e229      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103314:	2310      	movs	r3, #16
 8103316:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810331a:	e225      	b.n	8103768 <UART_SetConfig+0x5d8>
 810331c:	2320      	movs	r3, #32
 810331e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103322:	e221      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103324:	2340      	movs	r3, #64	; 0x40
 8103326:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810332a:	e21d      	b.n	8103768 <UART_SetConfig+0x5d8>
 810332c:	2380      	movs	r3, #128	; 0x80
 810332e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103332:	bf00      	nop
 8103334:	e218      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	4a6a      	ldr	r2, [pc, #424]	; (81034e4 <UART_SetConfig+0x354>)
 810333c:	4293      	cmp	r3, r2
 810333e:	d132      	bne.n	81033a6 <UART_SetConfig+0x216>
 8103340:	4b67      	ldr	r3, [pc, #412]	; (81034e0 <UART_SetConfig+0x350>)
 8103342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103344:	f003 0307 	and.w	r3, r3, #7
 8103348:	2b05      	cmp	r3, #5
 810334a:	d827      	bhi.n	810339c <UART_SetConfig+0x20c>
 810334c:	a201      	add	r2, pc, #4	; (adr r2, 8103354 <UART_SetConfig+0x1c4>)
 810334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103352:	bf00      	nop
 8103354:	0810336d 	.word	0x0810336d
 8103358:	08103375 	.word	0x08103375
 810335c:	0810337d 	.word	0x0810337d
 8103360:	08103385 	.word	0x08103385
 8103364:	0810338d 	.word	0x0810338d
 8103368:	08103395 	.word	0x08103395
 810336c:	2300      	movs	r3, #0
 810336e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103372:	e1f9      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103374:	2304      	movs	r3, #4
 8103376:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810337a:	e1f5      	b.n	8103768 <UART_SetConfig+0x5d8>
 810337c:	2308      	movs	r3, #8
 810337e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103382:	e1f1      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103384:	2310      	movs	r3, #16
 8103386:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810338a:	e1ed      	b.n	8103768 <UART_SetConfig+0x5d8>
 810338c:	2320      	movs	r3, #32
 810338e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103392:	e1e9      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103394:	2340      	movs	r3, #64	; 0x40
 8103396:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810339a:	e1e5      	b.n	8103768 <UART_SetConfig+0x5d8>
 810339c:	2380      	movs	r3, #128	; 0x80
 810339e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81033a2:	bf00      	nop
 81033a4:	e1e0      	b.n	8103768 <UART_SetConfig+0x5d8>
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	4a4f      	ldr	r2, [pc, #316]	; (81034e8 <UART_SetConfig+0x358>)
 81033ac:	4293      	cmp	r3, r2
 81033ae:	d132      	bne.n	8103416 <UART_SetConfig+0x286>
 81033b0:	4b4b      	ldr	r3, [pc, #300]	; (81034e0 <UART_SetConfig+0x350>)
 81033b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033b4:	f003 0307 	and.w	r3, r3, #7
 81033b8:	2b05      	cmp	r3, #5
 81033ba:	d827      	bhi.n	810340c <UART_SetConfig+0x27c>
 81033bc:	a201      	add	r2, pc, #4	; (adr r2, 81033c4 <UART_SetConfig+0x234>)
 81033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033c2:	bf00      	nop
 81033c4:	081033dd 	.word	0x081033dd
 81033c8:	081033e5 	.word	0x081033e5
 81033cc:	081033ed 	.word	0x081033ed
 81033d0:	081033f5 	.word	0x081033f5
 81033d4:	081033fd 	.word	0x081033fd
 81033d8:	08103405 	.word	0x08103405
 81033dc:	2300      	movs	r3, #0
 81033de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81033e2:	e1c1      	b.n	8103768 <UART_SetConfig+0x5d8>
 81033e4:	2304      	movs	r3, #4
 81033e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81033ea:	e1bd      	b.n	8103768 <UART_SetConfig+0x5d8>
 81033ec:	2308      	movs	r3, #8
 81033ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81033f2:	e1b9      	b.n	8103768 <UART_SetConfig+0x5d8>
 81033f4:	2310      	movs	r3, #16
 81033f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81033fa:	e1b5      	b.n	8103768 <UART_SetConfig+0x5d8>
 81033fc:	2320      	movs	r3, #32
 81033fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103402:	e1b1      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103404:	2340      	movs	r3, #64	; 0x40
 8103406:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810340a:	e1ad      	b.n	8103768 <UART_SetConfig+0x5d8>
 810340c:	2380      	movs	r3, #128	; 0x80
 810340e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103412:	bf00      	nop
 8103414:	e1a8      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	4a34      	ldr	r2, [pc, #208]	; (81034ec <UART_SetConfig+0x35c>)
 810341c:	4293      	cmp	r3, r2
 810341e:	d132      	bne.n	8103486 <UART_SetConfig+0x2f6>
 8103420:	4b2f      	ldr	r3, [pc, #188]	; (81034e0 <UART_SetConfig+0x350>)
 8103422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103424:	f003 0307 	and.w	r3, r3, #7
 8103428:	2b05      	cmp	r3, #5
 810342a:	d827      	bhi.n	810347c <UART_SetConfig+0x2ec>
 810342c:	a201      	add	r2, pc, #4	; (adr r2, 8103434 <UART_SetConfig+0x2a4>)
 810342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103432:	bf00      	nop
 8103434:	0810344d 	.word	0x0810344d
 8103438:	08103455 	.word	0x08103455
 810343c:	0810345d 	.word	0x0810345d
 8103440:	08103465 	.word	0x08103465
 8103444:	0810346d 	.word	0x0810346d
 8103448:	08103475 	.word	0x08103475
 810344c:	2300      	movs	r3, #0
 810344e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103452:	e189      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103454:	2304      	movs	r3, #4
 8103456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810345a:	e185      	b.n	8103768 <UART_SetConfig+0x5d8>
 810345c:	2308      	movs	r3, #8
 810345e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103462:	e181      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103464:	2310      	movs	r3, #16
 8103466:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810346a:	e17d      	b.n	8103768 <UART_SetConfig+0x5d8>
 810346c:	2320      	movs	r3, #32
 810346e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103472:	e179      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103474:	2340      	movs	r3, #64	; 0x40
 8103476:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810347a:	e175      	b.n	8103768 <UART_SetConfig+0x5d8>
 810347c:	2380      	movs	r3, #128	; 0x80
 810347e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103482:	bf00      	nop
 8103484:	e170      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103486:	687b      	ldr	r3, [r7, #4]
 8103488:	681b      	ldr	r3, [r3, #0]
 810348a:	4a19      	ldr	r2, [pc, #100]	; (81034f0 <UART_SetConfig+0x360>)
 810348c:	4293      	cmp	r3, r2
 810348e:	d142      	bne.n	8103516 <UART_SetConfig+0x386>
 8103490:	4b13      	ldr	r3, [pc, #76]	; (81034e0 <UART_SetConfig+0x350>)
 8103492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103494:	f003 0307 	and.w	r3, r3, #7
 8103498:	2b05      	cmp	r3, #5
 810349a:	d837      	bhi.n	810350c <UART_SetConfig+0x37c>
 810349c:	a201      	add	r2, pc, #4	; (adr r2, 81034a4 <UART_SetConfig+0x314>)
 810349e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034a2:	bf00      	nop
 81034a4:	081034bd 	.word	0x081034bd
 81034a8:	081034c5 	.word	0x081034c5
 81034ac:	081034cd 	.word	0x081034cd
 81034b0:	081034f5 	.word	0x081034f5
 81034b4:	081034fd 	.word	0x081034fd
 81034b8:	08103505 	.word	0x08103505
 81034bc:	2300      	movs	r3, #0
 81034be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81034c2:	e151      	b.n	8103768 <UART_SetConfig+0x5d8>
 81034c4:	2304      	movs	r3, #4
 81034c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81034ca:	e14d      	b.n	8103768 <UART_SetConfig+0x5d8>
 81034cc:	2308      	movs	r3, #8
 81034ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81034d2:	e149      	b.n	8103768 <UART_SetConfig+0x5d8>
 81034d4:	cfff69f3 	.word	0xcfff69f3
 81034d8:	58000c00 	.word	0x58000c00
 81034dc:	40011000 	.word	0x40011000
 81034e0:	58024400 	.word	0x58024400
 81034e4:	40004400 	.word	0x40004400
 81034e8:	40004800 	.word	0x40004800
 81034ec:	40004c00 	.word	0x40004c00
 81034f0:	40005000 	.word	0x40005000
 81034f4:	2310      	movs	r3, #16
 81034f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81034fa:	e135      	b.n	8103768 <UART_SetConfig+0x5d8>
 81034fc:	2320      	movs	r3, #32
 81034fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103502:	e131      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103504:	2340      	movs	r3, #64	; 0x40
 8103506:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810350a:	e12d      	b.n	8103768 <UART_SetConfig+0x5d8>
 810350c:	2380      	movs	r3, #128	; 0x80
 810350e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103512:	bf00      	nop
 8103514:	e128      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103516:	687b      	ldr	r3, [r7, #4]
 8103518:	681b      	ldr	r3, [r3, #0]
 810351a:	4ac3      	ldr	r2, [pc, #780]	; (8103828 <UART_SetConfig+0x698>)
 810351c:	4293      	cmp	r3, r2
 810351e:	d178      	bne.n	8103612 <UART_SetConfig+0x482>
 8103520:	4bc2      	ldr	r3, [pc, #776]	; (810382c <UART_SetConfig+0x69c>)
 8103522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103528:	2b28      	cmp	r3, #40	; 0x28
 810352a:	d86d      	bhi.n	8103608 <UART_SetConfig+0x478>
 810352c:	a201      	add	r2, pc, #4	; (adr r2, 8103534 <UART_SetConfig+0x3a4>)
 810352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103532:	bf00      	nop
 8103534:	081035d9 	.word	0x081035d9
 8103538:	08103609 	.word	0x08103609
 810353c:	08103609 	.word	0x08103609
 8103540:	08103609 	.word	0x08103609
 8103544:	08103609 	.word	0x08103609
 8103548:	08103609 	.word	0x08103609
 810354c:	08103609 	.word	0x08103609
 8103550:	08103609 	.word	0x08103609
 8103554:	081035e1 	.word	0x081035e1
 8103558:	08103609 	.word	0x08103609
 810355c:	08103609 	.word	0x08103609
 8103560:	08103609 	.word	0x08103609
 8103564:	08103609 	.word	0x08103609
 8103568:	08103609 	.word	0x08103609
 810356c:	08103609 	.word	0x08103609
 8103570:	08103609 	.word	0x08103609
 8103574:	081035e9 	.word	0x081035e9
 8103578:	08103609 	.word	0x08103609
 810357c:	08103609 	.word	0x08103609
 8103580:	08103609 	.word	0x08103609
 8103584:	08103609 	.word	0x08103609
 8103588:	08103609 	.word	0x08103609
 810358c:	08103609 	.word	0x08103609
 8103590:	08103609 	.word	0x08103609
 8103594:	081035f1 	.word	0x081035f1
 8103598:	08103609 	.word	0x08103609
 810359c:	08103609 	.word	0x08103609
 81035a0:	08103609 	.word	0x08103609
 81035a4:	08103609 	.word	0x08103609
 81035a8:	08103609 	.word	0x08103609
 81035ac:	08103609 	.word	0x08103609
 81035b0:	08103609 	.word	0x08103609
 81035b4:	081035f9 	.word	0x081035f9
 81035b8:	08103609 	.word	0x08103609
 81035bc:	08103609 	.word	0x08103609
 81035c0:	08103609 	.word	0x08103609
 81035c4:	08103609 	.word	0x08103609
 81035c8:	08103609 	.word	0x08103609
 81035cc:	08103609 	.word	0x08103609
 81035d0:	08103609 	.word	0x08103609
 81035d4:	08103601 	.word	0x08103601
 81035d8:	2301      	movs	r3, #1
 81035da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81035de:	e0c3      	b.n	8103768 <UART_SetConfig+0x5d8>
 81035e0:	2304      	movs	r3, #4
 81035e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81035e6:	e0bf      	b.n	8103768 <UART_SetConfig+0x5d8>
 81035e8:	2308      	movs	r3, #8
 81035ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81035ee:	e0bb      	b.n	8103768 <UART_SetConfig+0x5d8>
 81035f0:	2310      	movs	r3, #16
 81035f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81035f6:	e0b7      	b.n	8103768 <UART_SetConfig+0x5d8>
 81035f8:	2320      	movs	r3, #32
 81035fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81035fe:	e0b3      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103600:	2340      	movs	r3, #64	; 0x40
 8103602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103606:	e0af      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103608:	2380      	movs	r3, #128	; 0x80
 810360a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810360e:	bf00      	nop
 8103610:	e0aa      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	4a86      	ldr	r2, [pc, #536]	; (8103830 <UART_SetConfig+0x6a0>)
 8103618:	4293      	cmp	r3, r2
 810361a:	d132      	bne.n	8103682 <UART_SetConfig+0x4f2>
 810361c:	4b83      	ldr	r3, [pc, #524]	; (810382c <UART_SetConfig+0x69c>)
 810361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103620:	f003 0307 	and.w	r3, r3, #7
 8103624:	2b05      	cmp	r3, #5
 8103626:	d827      	bhi.n	8103678 <UART_SetConfig+0x4e8>
 8103628:	a201      	add	r2, pc, #4	; (adr r2, 8103630 <UART_SetConfig+0x4a0>)
 810362a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810362e:	bf00      	nop
 8103630:	08103649 	.word	0x08103649
 8103634:	08103651 	.word	0x08103651
 8103638:	08103659 	.word	0x08103659
 810363c:	08103661 	.word	0x08103661
 8103640:	08103669 	.word	0x08103669
 8103644:	08103671 	.word	0x08103671
 8103648:	2300      	movs	r3, #0
 810364a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810364e:	e08b      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103650:	2304      	movs	r3, #4
 8103652:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103656:	e087      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103658:	2308      	movs	r3, #8
 810365a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810365e:	e083      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103660:	2310      	movs	r3, #16
 8103662:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103666:	e07f      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103668:	2320      	movs	r3, #32
 810366a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810366e:	e07b      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103670:	2340      	movs	r3, #64	; 0x40
 8103672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103676:	e077      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103678:	2380      	movs	r3, #128	; 0x80
 810367a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810367e:	bf00      	nop
 8103680:	e072      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	4a6b      	ldr	r2, [pc, #428]	; (8103834 <UART_SetConfig+0x6a4>)
 8103688:	4293      	cmp	r3, r2
 810368a:	d132      	bne.n	81036f2 <UART_SetConfig+0x562>
 810368c:	4b67      	ldr	r3, [pc, #412]	; (810382c <UART_SetConfig+0x69c>)
 810368e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103690:	f003 0307 	and.w	r3, r3, #7
 8103694:	2b05      	cmp	r3, #5
 8103696:	d827      	bhi.n	81036e8 <UART_SetConfig+0x558>
 8103698:	a201      	add	r2, pc, #4	; (adr r2, 81036a0 <UART_SetConfig+0x510>)
 810369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810369e:	bf00      	nop
 81036a0:	081036b9 	.word	0x081036b9
 81036a4:	081036c1 	.word	0x081036c1
 81036a8:	081036c9 	.word	0x081036c9
 81036ac:	081036d1 	.word	0x081036d1
 81036b0:	081036d9 	.word	0x081036d9
 81036b4:	081036e1 	.word	0x081036e1
 81036b8:	2300      	movs	r3, #0
 81036ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81036be:	e053      	b.n	8103768 <UART_SetConfig+0x5d8>
 81036c0:	2304      	movs	r3, #4
 81036c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81036c6:	e04f      	b.n	8103768 <UART_SetConfig+0x5d8>
 81036c8:	2308      	movs	r3, #8
 81036ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81036ce:	e04b      	b.n	8103768 <UART_SetConfig+0x5d8>
 81036d0:	2310      	movs	r3, #16
 81036d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81036d6:	e047      	b.n	8103768 <UART_SetConfig+0x5d8>
 81036d8:	2320      	movs	r3, #32
 81036da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81036de:	e043      	b.n	8103768 <UART_SetConfig+0x5d8>
 81036e0:	2340      	movs	r3, #64	; 0x40
 81036e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81036e6:	e03f      	b.n	8103768 <UART_SetConfig+0x5d8>
 81036e8:	2380      	movs	r3, #128	; 0x80
 81036ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 81036ee:	bf00      	nop
 81036f0:	e03a      	b.n	8103768 <UART_SetConfig+0x5d8>
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	4a50      	ldr	r2, [pc, #320]	; (8103838 <UART_SetConfig+0x6a8>)
 81036f8:	4293      	cmp	r3, r2
 81036fa:	d132      	bne.n	8103762 <UART_SetConfig+0x5d2>
 81036fc:	4b4b      	ldr	r3, [pc, #300]	; (810382c <UART_SetConfig+0x69c>)
 81036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103700:	f003 0307 	and.w	r3, r3, #7
 8103704:	2b05      	cmp	r3, #5
 8103706:	d827      	bhi.n	8103758 <UART_SetConfig+0x5c8>
 8103708:	a201      	add	r2, pc, #4	; (adr r2, 8103710 <UART_SetConfig+0x580>)
 810370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810370e:	bf00      	nop
 8103710:	08103729 	.word	0x08103729
 8103714:	08103731 	.word	0x08103731
 8103718:	08103739 	.word	0x08103739
 810371c:	08103741 	.word	0x08103741
 8103720:	08103749 	.word	0x08103749
 8103724:	08103751 	.word	0x08103751
 8103728:	2302      	movs	r3, #2
 810372a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810372e:	e01b      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103730:	2304      	movs	r3, #4
 8103732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103736:	e017      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103738:	2308      	movs	r3, #8
 810373a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810373e:	e013      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103740:	2310      	movs	r3, #16
 8103742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103746:	e00f      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103748:	2320      	movs	r3, #32
 810374a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810374e:	e00b      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103750:	2340      	movs	r3, #64	; 0x40
 8103752:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8103756:	e007      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103758:	2380      	movs	r3, #128	; 0x80
 810375a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 810375e:	bf00      	nop
 8103760:	e002      	b.n	8103768 <UART_SetConfig+0x5d8>
 8103762:	2380      	movs	r3, #128	; 0x80
 8103764:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	681b      	ldr	r3, [r3, #0]
 810376c:	4a32      	ldr	r2, [pc, #200]	; (8103838 <UART_SetConfig+0x6a8>)
 810376e:	4293      	cmp	r3, r2
 8103770:	f040 86f7 	bne.w	8104562 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8103774:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8103778:	2b08      	cmp	r3, #8
 810377a:	f000 80c0 	beq.w	81038fe <UART_SetConfig+0x76e>
 810377e:	2b08      	cmp	r3, #8
 8103780:	dc04      	bgt.n	810378c <UART_SetConfig+0x5fc>
 8103782:	2b02      	cmp	r3, #2
 8103784:	d00c      	beq.n	81037a0 <UART_SetConfig+0x610>
 8103786:	2b04      	cmp	r3, #4
 8103788:	d065      	beq.n	8103856 <UART_SetConfig+0x6c6>
 810378a:	e27a      	b.n	8103c82 <UART_SetConfig+0xaf2>
 810378c:	2b20      	cmp	r3, #32
 810378e:	f000 81b0 	beq.w	8103af2 <UART_SetConfig+0x962>
 8103792:	2b40      	cmp	r3, #64	; 0x40
 8103794:	f000 821e 	beq.w	8103bd4 <UART_SetConfig+0xa44>
 8103798:	2b10      	cmp	r3, #16
 810379a:	f000 8104 	beq.w	81039a6 <UART_SetConfig+0x816>
 810379e:	e270      	b.n	8103c82 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 81037a0:	f7fe f896 	bl	81018d0 <HAL_RCCEx_GetD3PCLK1Freq>
 81037a4:	4602      	mov	r2, r0
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037aa:	2b00      	cmp	r3, #0
 81037ac:	d04e      	beq.n	810384c <UART_SetConfig+0x6bc>
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037b2:	2b01      	cmp	r3, #1
 81037b4:	d048      	beq.n	8103848 <UART_SetConfig+0x6b8>
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037ba:	2b02      	cmp	r3, #2
 81037bc:	d042      	beq.n	8103844 <UART_SetConfig+0x6b4>
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037c2:	2b03      	cmp	r3, #3
 81037c4:	d03c      	beq.n	8103840 <UART_SetConfig+0x6b0>
 81037c6:	687b      	ldr	r3, [r7, #4]
 81037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037ca:	2b04      	cmp	r3, #4
 81037cc:	d036      	beq.n	810383c <UART_SetConfig+0x6ac>
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037d2:	2b05      	cmp	r3, #5
 81037d4:	d026      	beq.n	8103824 <UART_SetConfig+0x694>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037da:	2b06      	cmp	r3, #6
 81037dc:	d020      	beq.n	8103820 <UART_SetConfig+0x690>
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037e2:	2b07      	cmp	r3, #7
 81037e4:	d01a      	beq.n	810381c <UART_SetConfig+0x68c>
 81037e6:	687b      	ldr	r3, [r7, #4]
 81037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037ea:	2b08      	cmp	r3, #8
 81037ec:	d014      	beq.n	8103818 <UART_SetConfig+0x688>
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037f2:	2b09      	cmp	r3, #9
 81037f4:	d00e      	beq.n	8103814 <UART_SetConfig+0x684>
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81037fa:	2b0a      	cmp	r3, #10
 81037fc:	d008      	beq.n	8103810 <UART_SetConfig+0x680>
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103802:	2b0b      	cmp	r3, #11
 8103804:	d102      	bne.n	810380c <UART_SetConfig+0x67c>
 8103806:	f44f 7380 	mov.w	r3, #256	; 0x100
 810380a:	e020      	b.n	810384e <UART_SetConfig+0x6be>
 810380c:	2301      	movs	r3, #1
 810380e:	e01e      	b.n	810384e <UART_SetConfig+0x6be>
 8103810:	2380      	movs	r3, #128	; 0x80
 8103812:	e01c      	b.n	810384e <UART_SetConfig+0x6be>
 8103814:	2340      	movs	r3, #64	; 0x40
 8103816:	e01a      	b.n	810384e <UART_SetConfig+0x6be>
 8103818:	2320      	movs	r3, #32
 810381a:	e018      	b.n	810384e <UART_SetConfig+0x6be>
 810381c:	2310      	movs	r3, #16
 810381e:	e016      	b.n	810384e <UART_SetConfig+0x6be>
 8103820:	230c      	movs	r3, #12
 8103822:	e014      	b.n	810384e <UART_SetConfig+0x6be>
 8103824:	230a      	movs	r3, #10
 8103826:	e012      	b.n	810384e <UART_SetConfig+0x6be>
 8103828:	40011400 	.word	0x40011400
 810382c:	58024400 	.word	0x58024400
 8103830:	40007800 	.word	0x40007800
 8103834:	40007c00 	.word	0x40007c00
 8103838:	58000c00 	.word	0x58000c00
 810383c:	2308      	movs	r3, #8
 810383e:	e006      	b.n	810384e <UART_SetConfig+0x6be>
 8103840:	2306      	movs	r3, #6
 8103842:	e004      	b.n	810384e <UART_SetConfig+0x6be>
 8103844:	2304      	movs	r3, #4
 8103846:	e002      	b.n	810384e <UART_SetConfig+0x6be>
 8103848:	2302      	movs	r3, #2
 810384a:	e000      	b.n	810384e <UART_SetConfig+0x6be>
 810384c:	2301      	movs	r3, #1
 810384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103852:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103854:	e219      	b.n	8103c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103856:	f107 0318 	add.w	r3, r7, #24
 810385a:	4618      	mov	r0, r3
 810385c:	f7fe f84e 	bl	81018fc <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8103860:	69fa      	ldr	r2, [r7, #28]
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103866:	2b00      	cmp	r3, #0
 8103868:	d044      	beq.n	81038f4 <UART_SetConfig+0x764>
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810386e:	2b01      	cmp	r3, #1
 8103870:	d03e      	beq.n	81038f0 <UART_SetConfig+0x760>
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103876:	2b02      	cmp	r3, #2
 8103878:	d038      	beq.n	81038ec <UART_SetConfig+0x75c>
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810387e:	2b03      	cmp	r3, #3
 8103880:	d032      	beq.n	81038e8 <UART_SetConfig+0x758>
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103886:	2b04      	cmp	r3, #4
 8103888:	d02c      	beq.n	81038e4 <UART_SetConfig+0x754>
 810388a:	687b      	ldr	r3, [r7, #4]
 810388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810388e:	2b05      	cmp	r3, #5
 8103890:	d026      	beq.n	81038e0 <UART_SetConfig+0x750>
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103896:	2b06      	cmp	r3, #6
 8103898:	d020      	beq.n	81038dc <UART_SetConfig+0x74c>
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810389e:	2b07      	cmp	r3, #7
 81038a0:	d01a      	beq.n	81038d8 <UART_SetConfig+0x748>
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81038a6:	2b08      	cmp	r3, #8
 81038a8:	d014      	beq.n	81038d4 <UART_SetConfig+0x744>
 81038aa:	687b      	ldr	r3, [r7, #4]
 81038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81038ae:	2b09      	cmp	r3, #9
 81038b0:	d00e      	beq.n	81038d0 <UART_SetConfig+0x740>
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81038b6:	2b0a      	cmp	r3, #10
 81038b8:	d008      	beq.n	81038cc <UART_SetConfig+0x73c>
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81038be:	2b0b      	cmp	r3, #11
 81038c0:	d102      	bne.n	81038c8 <UART_SetConfig+0x738>
 81038c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81038c6:	e016      	b.n	81038f6 <UART_SetConfig+0x766>
 81038c8:	2301      	movs	r3, #1
 81038ca:	e014      	b.n	81038f6 <UART_SetConfig+0x766>
 81038cc:	2380      	movs	r3, #128	; 0x80
 81038ce:	e012      	b.n	81038f6 <UART_SetConfig+0x766>
 81038d0:	2340      	movs	r3, #64	; 0x40
 81038d2:	e010      	b.n	81038f6 <UART_SetConfig+0x766>
 81038d4:	2320      	movs	r3, #32
 81038d6:	e00e      	b.n	81038f6 <UART_SetConfig+0x766>
 81038d8:	2310      	movs	r3, #16
 81038da:	e00c      	b.n	81038f6 <UART_SetConfig+0x766>
 81038dc:	230c      	movs	r3, #12
 81038de:	e00a      	b.n	81038f6 <UART_SetConfig+0x766>
 81038e0:	230a      	movs	r3, #10
 81038e2:	e008      	b.n	81038f6 <UART_SetConfig+0x766>
 81038e4:	2308      	movs	r3, #8
 81038e6:	e006      	b.n	81038f6 <UART_SetConfig+0x766>
 81038e8:	2306      	movs	r3, #6
 81038ea:	e004      	b.n	81038f6 <UART_SetConfig+0x766>
 81038ec:	2304      	movs	r3, #4
 81038ee:	e002      	b.n	81038f6 <UART_SetConfig+0x766>
 81038f0:	2302      	movs	r3, #2
 81038f2:	e000      	b.n	81038f6 <UART_SetConfig+0x766>
 81038f4:	2301      	movs	r3, #1
 81038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 81038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81038fc:	e1c5      	b.n	8103c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81038fe:	f107 030c 	add.w	r3, r7, #12
 8103902:	4618      	mov	r0, r3
 8103904:	f7fe f946 	bl	8101b94 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8103908:	693a      	ldr	r2, [r7, #16]
 810390a:	687b      	ldr	r3, [r7, #4]
 810390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810390e:	2b00      	cmp	r3, #0
 8103910:	d044      	beq.n	810399c <UART_SetConfig+0x80c>
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103916:	2b01      	cmp	r3, #1
 8103918:	d03e      	beq.n	8103998 <UART_SetConfig+0x808>
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810391e:	2b02      	cmp	r3, #2
 8103920:	d038      	beq.n	8103994 <UART_SetConfig+0x804>
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103926:	2b03      	cmp	r3, #3
 8103928:	d032      	beq.n	8103990 <UART_SetConfig+0x800>
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810392e:	2b04      	cmp	r3, #4
 8103930:	d02c      	beq.n	810398c <UART_SetConfig+0x7fc>
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103936:	2b05      	cmp	r3, #5
 8103938:	d026      	beq.n	8103988 <UART_SetConfig+0x7f8>
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810393e:	2b06      	cmp	r3, #6
 8103940:	d020      	beq.n	8103984 <UART_SetConfig+0x7f4>
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103946:	2b07      	cmp	r3, #7
 8103948:	d01a      	beq.n	8103980 <UART_SetConfig+0x7f0>
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810394e:	2b08      	cmp	r3, #8
 8103950:	d014      	beq.n	810397c <UART_SetConfig+0x7ec>
 8103952:	687b      	ldr	r3, [r7, #4]
 8103954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103956:	2b09      	cmp	r3, #9
 8103958:	d00e      	beq.n	8103978 <UART_SetConfig+0x7e8>
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810395e:	2b0a      	cmp	r3, #10
 8103960:	d008      	beq.n	8103974 <UART_SetConfig+0x7e4>
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103966:	2b0b      	cmp	r3, #11
 8103968:	d102      	bne.n	8103970 <UART_SetConfig+0x7e0>
 810396a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810396e:	e016      	b.n	810399e <UART_SetConfig+0x80e>
 8103970:	2301      	movs	r3, #1
 8103972:	e014      	b.n	810399e <UART_SetConfig+0x80e>
 8103974:	2380      	movs	r3, #128	; 0x80
 8103976:	e012      	b.n	810399e <UART_SetConfig+0x80e>
 8103978:	2340      	movs	r3, #64	; 0x40
 810397a:	e010      	b.n	810399e <UART_SetConfig+0x80e>
 810397c:	2320      	movs	r3, #32
 810397e:	e00e      	b.n	810399e <UART_SetConfig+0x80e>
 8103980:	2310      	movs	r3, #16
 8103982:	e00c      	b.n	810399e <UART_SetConfig+0x80e>
 8103984:	230c      	movs	r3, #12
 8103986:	e00a      	b.n	810399e <UART_SetConfig+0x80e>
 8103988:	230a      	movs	r3, #10
 810398a:	e008      	b.n	810399e <UART_SetConfig+0x80e>
 810398c:	2308      	movs	r3, #8
 810398e:	e006      	b.n	810399e <UART_SetConfig+0x80e>
 8103990:	2306      	movs	r3, #6
 8103992:	e004      	b.n	810399e <UART_SetConfig+0x80e>
 8103994:	2304      	movs	r3, #4
 8103996:	e002      	b.n	810399e <UART_SetConfig+0x80e>
 8103998:	2302      	movs	r3, #2
 810399a:	e000      	b.n	810399e <UART_SetConfig+0x80e>
 810399c:	2301      	movs	r3, #1
 810399e:	fbb2 f3f3 	udiv	r3, r2, r3
 81039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81039a4:	e171      	b.n	8103c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81039a6:	4b7a      	ldr	r3, [pc, #488]	; (8103b90 <UART_SetConfig+0xa00>)
 81039a8:	681b      	ldr	r3, [r3, #0]
 81039aa:	f003 0320 	and.w	r3, r3, #32
 81039ae:	2b00      	cmp	r3, #0
 81039b0:	d054      	beq.n	8103a5c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 81039b2:	4b77      	ldr	r3, [pc, #476]	; (8103b90 <UART_SetConfig+0xa00>)
 81039b4:	681b      	ldr	r3, [r3, #0]
 81039b6:	08db      	lsrs	r3, r3, #3
 81039b8:	f003 0303 	and.w	r3, r3, #3
 81039bc:	4a75      	ldr	r2, [pc, #468]	; (8103b94 <UART_SetConfig+0xa04>)
 81039be:	40da      	lsrs	r2, r3
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039c4:	2b00      	cmp	r3, #0
 81039c6:	d044      	beq.n	8103a52 <UART_SetConfig+0x8c2>
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039cc:	2b01      	cmp	r3, #1
 81039ce:	d03e      	beq.n	8103a4e <UART_SetConfig+0x8be>
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039d4:	2b02      	cmp	r3, #2
 81039d6:	d038      	beq.n	8103a4a <UART_SetConfig+0x8ba>
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039dc:	2b03      	cmp	r3, #3
 81039de:	d032      	beq.n	8103a46 <UART_SetConfig+0x8b6>
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039e4:	2b04      	cmp	r3, #4
 81039e6:	d02c      	beq.n	8103a42 <UART_SetConfig+0x8b2>
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039ec:	2b05      	cmp	r3, #5
 81039ee:	d026      	beq.n	8103a3e <UART_SetConfig+0x8ae>
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039f4:	2b06      	cmp	r3, #6
 81039f6:	d020      	beq.n	8103a3a <UART_SetConfig+0x8aa>
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039fc:	2b07      	cmp	r3, #7
 81039fe:	d01a      	beq.n	8103a36 <UART_SetConfig+0x8a6>
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a04:	2b08      	cmp	r3, #8
 8103a06:	d014      	beq.n	8103a32 <UART_SetConfig+0x8a2>
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a0c:	2b09      	cmp	r3, #9
 8103a0e:	d00e      	beq.n	8103a2e <UART_SetConfig+0x89e>
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a14:	2b0a      	cmp	r3, #10
 8103a16:	d008      	beq.n	8103a2a <UART_SetConfig+0x89a>
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a1c:	2b0b      	cmp	r3, #11
 8103a1e:	d102      	bne.n	8103a26 <UART_SetConfig+0x896>
 8103a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8103a24:	e016      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a26:	2301      	movs	r3, #1
 8103a28:	e014      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a2a:	2380      	movs	r3, #128	; 0x80
 8103a2c:	e012      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a2e:	2340      	movs	r3, #64	; 0x40
 8103a30:	e010      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a32:	2320      	movs	r3, #32
 8103a34:	e00e      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a36:	2310      	movs	r3, #16
 8103a38:	e00c      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a3a:	230c      	movs	r3, #12
 8103a3c:	e00a      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a3e:	230a      	movs	r3, #10
 8103a40:	e008      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a42:	2308      	movs	r3, #8
 8103a44:	e006      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a46:	2306      	movs	r3, #6
 8103a48:	e004      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a4a:	2304      	movs	r3, #4
 8103a4c:	e002      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a4e:	2302      	movs	r3, #2
 8103a50:	e000      	b.n	8103a54 <UART_SetConfig+0x8c4>
 8103a52:	2301      	movs	r3, #1
 8103a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8103a5a:	e116      	b.n	8103c8a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a60:	2b00      	cmp	r3, #0
 8103a62:	d043      	beq.n	8103aec <UART_SetConfig+0x95c>
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a68:	2b01      	cmp	r3, #1
 8103a6a:	d03d      	beq.n	8103ae8 <UART_SetConfig+0x958>
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a70:	2b02      	cmp	r3, #2
 8103a72:	d037      	beq.n	8103ae4 <UART_SetConfig+0x954>
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a78:	2b03      	cmp	r3, #3
 8103a7a:	d031      	beq.n	8103ae0 <UART_SetConfig+0x950>
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a80:	2b04      	cmp	r3, #4
 8103a82:	d02b      	beq.n	8103adc <UART_SetConfig+0x94c>
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a88:	2b05      	cmp	r3, #5
 8103a8a:	d025      	beq.n	8103ad8 <UART_SetConfig+0x948>
 8103a8c:	687b      	ldr	r3, [r7, #4]
 8103a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a90:	2b06      	cmp	r3, #6
 8103a92:	d01f      	beq.n	8103ad4 <UART_SetConfig+0x944>
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a98:	2b07      	cmp	r3, #7
 8103a9a:	d019      	beq.n	8103ad0 <UART_SetConfig+0x940>
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103aa0:	2b08      	cmp	r3, #8
 8103aa2:	d013      	beq.n	8103acc <UART_SetConfig+0x93c>
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103aa8:	2b09      	cmp	r3, #9
 8103aaa:	d00d      	beq.n	8103ac8 <UART_SetConfig+0x938>
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ab0:	2b0a      	cmp	r3, #10
 8103ab2:	d007      	beq.n	8103ac4 <UART_SetConfig+0x934>
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103ab8:	2b0b      	cmp	r3, #11
 8103aba:	d101      	bne.n	8103ac0 <UART_SetConfig+0x930>
 8103abc:	4b36      	ldr	r3, [pc, #216]	; (8103b98 <UART_SetConfig+0xa08>)
 8103abe:	e016      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ac0:	4b34      	ldr	r3, [pc, #208]	; (8103b94 <UART_SetConfig+0xa04>)
 8103ac2:	e014      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ac4:	4b35      	ldr	r3, [pc, #212]	; (8103b9c <UART_SetConfig+0xa0c>)
 8103ac6:	e012      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ac8:	4b35      	ldr	r3, [pc, #212]	; (8103ba0 <UART_SetConfig+0xa10>)
 8103aca:	e010      	b.n	8103aee <UART_SetConfig+0x95e>
 8103acc:	4b35      	ldr	r3, [pc, #212]	; (8103ba4 <UART_SetConfig+0xa14>)
 8103ace:	e00e      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ad0:	4b35      	ldr	r3, [pc, #212]	; (8103ba8 <UART_SetConfig+0xa18>)
 8103ad2:	e00c      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ad4:	4b35      	ldr	r3, [pc, #212]	; (8103bac <UART_SetConfig+0xa1c>)
 8103ad6:	e00a      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ad8:	4b35      	ldr	r3, [pc, #212]	; (8103bb0 <UART_SetConfig+0xa20>)
 8103ada:	e008      	b.n	8103aee <UART_SetConfig+0x95e>
 8103adc:	4b35      	ldr	r3, [pc, #212]	; (8103bb4 <UART_SetConfig+0xa24>)
 8103ade:	e006      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ae0:	4b35      	ldr	r3, [pc, #212]	; (8103bb8 <UART_SetConfig+0xa28>)
 8103ae2:	e004      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ae4:	4b35      	ldr	r3, [pc, #212]	; (8103bbc <UART_SetConfig+0xa2c>)
 8103ae6:	e002      	b.n	8103aee <UART_SetConfig+0x95e>
 8103ae8:	4b35      	ldr	r3, [pc, #212]	; (8103bc0 <UART_SetConfig+0xa30>)
 8103aea:	e000      	b.n	8103aee <UART_SetConfig+0x95e>
 8103aec:	4b29      	ldr	r3, [pc, #164]	; (8103b94 <UART_SetConfig+0xa04>)
 8103aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103af0:	e0cb      	b.n	8103c8a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103af6:	2b00      	cmp	r3, #0
 8103af8:	d046      	beq.n	8103b88 <UART_SetConfig+0x9f8>
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103afe:	2b01      	cmp	r3, #1
 8103b00:	d040      	beq.n	8103b84 <UART_SetConfig+0x9f4>
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b06:	2b02      	cmp	r3, #2
 8103b08:	d03a      	beq.n	8103b80 <UART_SetConfig+0x9f0>
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b0e:	2b03      	cmp	r3, #3
 8103b10:	d034      	beq.n	8103b7c <UART_SetConfig+0x9ec>
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b16:	2b04      	cmp	r3, #4
 8103b18:	d02e      	beq.n	8103b78 <UART_SetConfig+0x9e8>
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b1e:	2b05      	cmp	r3, #5
 8103b20:	d028      	beq.n	8103b74 <UART_SetConfig+0x9e4>
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b26:	2b06      	cmp	r3, #6
 8103b28:	d022      	beq.n	8103b70 <UART_SetConfig+0x9e0>
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b2e:	2b07      	cmp	r3, #7
 8103b30:	d01c      	beq.n	8103b6c <UART_SetConfig+0x9dc>
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b36:	2b08      	cmp	r3, #8
 8103b38:	d016      	beq.n	8103b68 <UART_SetConfig+0x9d8>
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b3e:	2b09      	cmp	r3, #9
 8103b40:	d00f      	beq.n	8103b62 <UART_SetConfig+0x9d2>
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b46:	2b0a      	cmp	r3, #10
 8103b48:	d008      	beq.n	8103b5c <UART_SetConfig+0x9cc>
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b4e:	2b0b      	cmp	r3, #11
 8103b50:	d102      	bne.n	8103b58 <UART_SetConfig+0x9c8>
 8103b52:	f643 5309 	movw	r3, #15625	; 0x3d09
 8103b56:	e018      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b58:	4b13      	ldr	r3, [pc, #76]	; (8103ba8 <UART_SetConfig+0xa18>)
 8103b5a:	e016      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b5c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8103b60:	e013      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b62:	f24f 4324 	movw	r3, #62500	; 0xf424
 8103b66:	e010      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b68:	4b16      	ldr	r3, [pc, #88]	; (8103bc4 <UART_SetConfig+0xa34>)
 8103b6a:	e00e      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b6c:	4b0a      	ldr	r3, [pc, #40]	; (8103b98 <UART_SetConfig+0xa08>)
 8103b6e:	e00c      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b70:	4b15      	ldr	r3, [pc, #84]	; (8103bc8 <UART_SetConfig+0xa38>)
 8103b72:	e00a      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b74:	4b15      	ldr	r3, [pc, #84]	; (8103bcc <UART_SetConfig+0xa3c>)
 8103b76:	e008      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b78:	4b08      	ldr	r3, [pc, #32]	; (8103b9c <UART_SetConfig+0xa0c>)
 8103b7a:	e006      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b7c:	4b14      	ldr	r3, [pc, #80]	; (8103bd0 <UART_SetConfig+0xa40>)
 8103b7e:	e004      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b80:	4b07      	ldr	r3, [pc, #28]	; (8103ba0 <UART_SetConfig+0xa10>)
 8103b82:	e002      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b84:	4b07      	ldr	r3, [pc, #28]	; (8103ba4 <UART_SetConfig+0xa14>)
 8103b86:	e000      	b.n	8103b8a <UART_SetConfig+0x9fa>
 8103b88:	4b07      	ldr	r3, [pc, #28]	; (8103ba8 <UART_SetConfig+0xa18>)
 8103b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103b8c:	e07d      	b.n	8103c8a <UART_SetConfig+0xafa>
 8103b8e:	bf00      	nop
 8103b90:	58024400 	.word	0x58024400
 8103b94:	03d09000 	.word	0x03d09000
 8103b98:	0003d090 	.word	0x0003d090
 8103b9c:	0007a120 	.word	0x0007a120
 8103ba0:	000f4240 	.word	0x000f4240
 8103ba4:	001e8480 	.word	0x001e8480
 8103ba8:	003d0900 	.word	0x003d0900
 8103bac:	00516155 	.word	0x00516155
 8103bb0:	0061a800 	.word	0x0061a800
 8103bb4:	007a1200 	.word	0x007a1200
 8103bb8:	00a2c2aa 	.word	0x00a2c2aa
 8103bbc:	00f42400 	.word	0x00f42400
 8103bc0:	01e84800 	.word	0x01e84800
 8103bc4:	0001e848 	.word	0x0001e848
 8103bc8:	00051615 	.word	0x00051615
 8103bcc:	00061a80 	.word	0x00061a80
 8103bd0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103bd8:	2b00      	cmp	r3, #0
 8103bda:	d04e      	beq.n	8103c7a <UART_SetConfig+0xaea>
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103be0:	2b01      	cmp	r3, #1
 8103be2:	d047      	beq.n	8103c74 <UART_SetConfig+0xae4>
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103be8:	2b02      	cmp	r3, #2
 8103bea:	d040      	beq.n	8103c6e <UART_SetConfig+0xade>
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103bf0:	2b03      	cmp	r3, #3
 8103bf2:	d039      	beq.n	8103c68 <UART_SetConfig+0xad8>
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103bf8:	2b04      	cmp	r3, #4
 8103bfa:	d032      	beq.n	8103c62 <UART_SetConfig+0xad2>
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c00:	2b05      	cmp	r3, #5
 8103c02:	d02b      	beq.n	8103c5c <UART_SetConfig+0xacc>
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c08:	2b06      	cmp	r3, #6
 8103c0a:	d024      	beq.n	8103c56 <UART_SetConfig+0xac6>
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c10:	2b07      	cmp	r3, #7
 8103c12:	d01d      	beq.n	8103c50 <UART_SetConfig+0xac0>
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c18:	2b08      	cmp	r3, #8
 8103c1a:	d016      	beq.n	8103c4a <UART_SetConfig+0xaba>
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c20:	2b09      	cmp	r3, #9
 8103c22:	d00f      	beq.n	8103c44 <UART_SetConfig+0xab4>
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c28:	2b0a      	cmp	r3, #10
 8103c2a:	d008      	beq.n	8103c3e <UART_SetConfig+0xaae>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103c30:	2b0b      	cmp	r3, #11
 8103c32:	d101      	bne.n	8103c38 <UART_SetConfig+0xaa8>
 8103c34:	2380      	movs	r3, #128	; 0x80
 8103c36:	e022      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103c3c:	e01f      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8103c42:	e01c      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8103c48:	e019      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8103c4e:	e016      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8103c54:	e013      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c56:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8103c5a:	e010      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c5c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8103c60:	e00d      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8103c66:	e00a      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c68:	f241 5355 	movw	r3, #5461	; 0x1555
 8103c6c:	e007      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8103c72:	e004      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8103c78:	e001      	b.n	8103c7e <UART_SetConfig+0xaee>
 8103c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103c80:	e003      	b.n	8103c8a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8103c82:	2301      	movs	r3, #1
 8103c84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8103c88:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8103c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103c8c:	2b00      	cmp	r3, #0
 8103c8e:	f001 83e8 	beq.w	8105462 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	685a      	ldr	r2, [r3, #4]
 8103c96:	4613      	mov	r3, r2
 8103c98:	005b      	lsls	r3, r3, #1
 8103c9a:	4413      	add	r3, r2
 8103c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103c9e:	429a      	cmp	r2, r3
 8103ca0:	d305      	bcc.n	8103cae <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	685b      	ldr	r3, [r3, #4]
 8103ca6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103caa:	429a      	cmp	r2, r3
 8103cac:	d904      	bls.n	8103cb8 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8103cae:	2301      	movs	r3, #1
 8103cb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103cb4:	f001 bbd5 	b.w	8105462 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8103cb8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8103cbc:	2b08      	cmp	r3, #8
 8103cbe:	f000 8154 	beq.w	8103f6a <UART_SetConfig+0xdda>
 8103cc2:	2b08      	cmp	r3, #8
 8103cc4:	dc06      	bgt.n	8103cd4 <UART_SetConfig+0xb44>
 8103cc6:	2b02      	cmp	r3, #2
 8103cc8:	d00f      	beq.n	8103cea <UART_SetConfig+0xb5a>
 8103cca:	2b04      	cmp	r3, #4
 8103ccc:	f000 80ac 	beq.w	8103e28 <UART_SetConfig+0xc98>
 8103cd0:	f000 bc30 	b.w	8104534 <UART_SetConfig+0x13a4>
 8103cd4:	2b20      	cmp	r3, #32
 8103cd6:	f000 832d 	beq.w	8104334 <UART_SetConfig+0x11a4>
 8103cda:	2b40      	cmp	r3, #64	; 0x40
 8103cdc:	f000 83a5 	beq.w	810442a <UART_SetConfig+0x129a>
 8103ce0:	2b10      	cmp	r3, #16
 8103ce2:	f000 81e3 	beq.w	81040ac <UART_SetConfig+0xf1c>
 8103ce6:	f000 bc25 	b.w	8104534 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103cea:	f7fd fdf1 	bl	81018d0 <HAL_RCCEx_GetD3PCLK1Freq>
 8103cee:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103cf2:	4618      	mov	r0, r3
 8103cf4:	f04f 0100 	mov.w	r1, #0
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103cfc:	2b00      	cmp	r3, #0
 8103cfe:	d067      	beq.n	8103dd0 <UART_SetConfig+0xc40>
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d04:	2b01      	cmp	r3, #1
 8103d06:	d05e      	beq.n	8103dc6 <UART_SetConfig+0xc36>
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d0c:	2b02      	cmp	r3, #2
 8103d0e:	d055      	beq.n	8103dbc <UART_SetConfig+0xc2c>
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d14:	2b03      	cmp	r3, #3
 8103d16:	d04c      	beq.n	8103db2 <UART_SetConfig+0xc22>
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d1c:	2b04      	cmp	r3, #4
 8103d1e:	d043      	beq.n	8103da8 <UART_SetConfig+0xc18>
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d24:	2b05      	cmp	r3, #5
 8103d26:	d03a      	beq.n	8103d9e <UART_SetConfig+0xc0e>
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d2c:	2b06      	cmp	r3, #6
 8103d2e:	d031      	beq.n	8103d94 <UART_SetConfig+0xc04>
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d34:	2b07      	cmp	r3, #7
 8103d36:	d028      	beq.n	8103d8a <UART_SetConfig+0xbfa>
 8103d38:	687b      	ldr	r3, [r7, #4]
 8103d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d3c:	2b08      	cmp	r3, #8
 8103d3e:	d01f      	beq.n	8103d80 <UART_SetConfig+0xbf0>
 8103d40:	687b      	ldr	r3, [r7, #4]
 8103d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d44:	2b09      	cmp	r3, #9
 8103d46:	d016      	beq.n	8103d76 <UART_SetConfig+0xbe6>
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d4c:	2b0a      	cmp	r3, #10
 8103d4e:	d00d      	beq.n	8103d6c <UART_SetConfig+0xbdc>
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d54:	2b0b      	cmp	r3, #11
 8103d56:	d104      	bne.n	8103d62 <UART_SetConfig+0xbd2>
 8103d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8103d5c:	f04f 0400 	mov.w	r4, #0
 8103d60:	e03a      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103d62:	f04f 0301 	mov.w	r3, #1
 8103d66:	f04f 0400 	mov.w	r4, #0
 8103d6a:	e035      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103d6c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8103d70:	f04f 0400 	mov.w	r4, #0
 8103d74:	e030      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103d76:	f04f 0340 	mov.w	r3, #64	; 0x40
 8103d7a:	f04f 0400 	mov.w	r4, #0
 8103d7e:	e02b      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103d80:	f04f 0320 	mov.w	r3, #32
 8103d84:	f04f 0400 	mov.w	r4, #0
 8103d88:	e026      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103d8a:	f04f 0310 	mov.w	r3, #16
 8103d8e:	f04f 0400 	mov.w	r4, #0
 8103d92:	e021      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103d94:	f04f 030c 	mov.w	r3, #12
 8103d98:	f04f 0400 	mov.w	r4, #0
 8103d9c:	e01c      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103d9e:	f04f 030a 	mov.w	r3, #10
 8103da2:	f04f 0400 	mov.w	r4, #0
 8103da6:	e017      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103da8:	f04f 0308 	mov.w	r3, #8
 8103dac:	f04f 0400 	mov.w	r4, #0
 8103db0:	e012      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103db2:	f04f 0306 	mov.w	r3, #6
 8103db6:	f04f 0400 	mov.w	r4, #0
 8103dba:	e00d      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103dbc:	f04f 0304 	mov.w	r3, #4
 8103dc0:	f04f 0400 	mov.w	r4, #0
 8103dc4:	e008      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103dc6:	f04f 0302 	mov.w	r3, #2
 8103dca:	f04f 0400 	mov.w	r4, #0
 8103dce:	e003      	b.n	8103dd8 <UART_SetConfig+0xc48>
 8103dd0:	f04f 0301 	mov.w	r3, #1
 8103dd4:	f04f 0400 	mov.w	r4, #0
 8103dd8:	461a      	mov	r2, r3
 8103dda:	4623      	mov	r3, r4
 8103ddc:	f7fc fa80 	bl	81002e0 <__aeabi_uldivmod>
 8103de0:	4603      	mov	r3, r0
 8103de2:	460c      	mov	r4, r1
 8103de4:	4619      	mov	r1, r3
 8103de6:	4622      	mov	r2, r4
 8103de8:	f04f 0300 	mov.w	r3, #0
 8103dec:	f04f 0400 	mov.w	r4, #0
 8103df0:	0214      	lsls	r4, r2, #8
 8103df2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8103df6:	020b      	lsls	r3, r1, #8
 8103df8:	687a      	ldr	r2, [r7, #4]
 8103dfa:	6852      	ldr	r2, [r2, #4]
 8103dfc:	0852      	lsrs	r2, r2, #1
 8103dfe:	4611      	mov	r1, r2
 8103e00:	f04f 0200 	mov.w	r2, #0
 8103e04:	eb13 0b01 	adds.w	fp, r3, r1
 8103e08:	eb44 0c02 	adc.w	ip, r4, r2
 8103e0c:	4658      	mov	r0, fp
 8103e0e:	4661      	mov	r1, ip
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	685b      	ldr	r3, [r3, #4]
 8103e14:	f04f 0400 	mov.w	r4, #0
 8103e18:	461a      	mov	r2, r3
 8103e1a:	4623      	mov	r3, r4
 8103e1c:	f7fc fa60 	bl	81002e0 <__aeabi_uldivmod>
 8103e20:	4603      	mov	r3, r0
 8103e22:	460c      	mov	r4, r1
 8103e24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8103e26:	e389      	b.n	810453c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103e28:	f107 0318 	add.w	r3, r7, #24
 8103e2c:	4618      	mov	r0, r3
 8103e2e:	f7fd fd65 	bl	81018fc <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103e32:	69fb      	ldr	r3, [r7, #28]
 8103e34:	4618      	mov	r0, r3
 8103e36:	f04f 0100 	mov.w	r1, #0
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e3e:	2b00      	cmp	r3, #0
 8103e40:	d067      	beq.n	8103f12 <UART_SetConfig+0xd82>
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e46:	2b01      	cmp	r3, #1
 8103e48:	d05e      	beq.n	8103f08 <UART_SetConfig+0xd78>
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e4e:	2b02      	cmp	r3, #2
 8103e50:	d055      	beq.n	8103efe <UART_SetConfig+0xd6e>
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e56:	2b03      	cmp	r3, #3
 8103e58:	d04c      	beq.n	8103ef4 <UART_SetConfig+0xd64>
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e5e:	2b04      	cmp	r3, #4
 8103e60:	d043      	beq.n	8103eea <UART_SetConfig+0xd5a>
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e66:	2b05      	cmp	r3, #5
 8103e68:	d03a      	beq.n	8103ee0 <UART_SetConfig+0xd50>
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e6e:	2b06      	cmp	r3, #6
 8103e70:	d031      	beq.n	8103ed6 <UART_SetConfig+0xd46>
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e76:	2b07      	cmp	r3, #7
 8103e78:	d028      	beq.n	8103ecc <UART_SetConfig+0xd3c>
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e7e:	2b08      	cmp	r3, #8
 8103e80:	d01f      	beq.n	8103ec2 <UART_SetConfig+0xd32>
 8103e82:	687b      	ldr	r3, [r7, #4]
 8103e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e86:	2b09      	cmp	r3, #9
 8103e88:	d016      	beq.n	8103eb8 <UART_SetConfig+0xd28>
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e8e:	2b0a      	cmp	r3, #10
 8103e90:	d00d      	beq.n	8103eae <UART_SetConfig+0xd1e>
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e96:	2b0b      	cmp	r3, #11
 8103e98:	d104      	bne.n	8103ea4 <UART_SetConfig+0xd14>
 8103e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8103e9e:	f04f 0400 	mov.w	r4, #0
 8103ea2:	e03a      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103ea4:	f04f 0301 	mov.w	r3, #1
 8103ea8:	f04f 0400 	mov.w	r4, #0
 8103eac:	e035      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103eae:	f04f 0380 	mov.w	r3, #128	; 0x80
 8103eb2:	f04f 0400 	mov.w	r4, #0
 8103eb6:	e030      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103eb8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8103ebc:	f04f 0400 	mov.w	r4, #0
 8103ec0:	e02b      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103ec2:	f04f 0320 	mov.w	r3, #32
 8103ec6:	f04f 0400 	mov.w	r4, #0
 8103eca:	e026      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103ecc:	f04f 0310 	mov.w	r3, #16
 8103ed0:	f04f 0400 	mov.w	r4, #0
 8103ed4:	e021      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103ed6:	f04f 030c 	mov.w	r3, #12
 8103eda:	f04f 0400 	mov.w	r4, #0
 8103ede:	e01c      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103ee0:	f04f 030a 	mov.w	r3, #10
 8103ee4:	f04f 0400 	mov.w	r4, #0
 8103ee8:	e017      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103eea:	f04f 0308 	mov.w	r3, #8
 8103eee:	f04f 0400 	mov.w	r4, #0
 8103ef2:	e012      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103ef4:	f04f 0306 	mov.w	r3, #6
 8103ef8:	f04f 0400 	mov.w	r4, #0
 8103efc:	e00d      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103efe:	f04f 0304 	mov.w	r3, #4
 8103f02:	f04f 0400 	mov.w	r4, #0
 8103f06:	e008      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103f08:	f04f 0302 	mov.w	r3, #2
 8103f0c:	f04f 0400 	mov.w	r4, #0
 8103f10:	e003      	b.n	8103f1a <UART_SetConfig+0xd8a>
 8103f12:	f04f 0301 	mov.w	r3, #1
 8103f16:	f04f 0400 	mov.w	r4, #0
 8103f1a:	461a      	mov	r2, r3
 8103f1c:	4623      	mov	r3, r4
 8103f1e:	f7fc f9df 	bl	81002e0 <__aeabi_uldivmod>
 8103f22:	4603      	mov	r3, r0
 8103f24:	460c      	mov	r4, r1
 8103f26:	4619      	mov	r1, r3
 8103f28:	4622      	mov	r2, r4
 8103f2a:	f04f 0300 	mov.w	r3, #0
 8103f2e:	f04f 0400 	mov.w	r4, #0
 8103f32:	0214      	lsls	r4, r2, #8
 8103f34:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8103f38:	020b      	lsls	r3, r1, #8
 8103f3a:	687a      	ldr	r2, [r7, #4]
 8103f3c:	6852      	ldr	r2, [r2, #4]
 8103f3e:	0852      	lsrs	r2, r2, #1
 8103f40:	4611      	mov	r1, r2
 8103f42:	f04f 0200 	mov.w	r2, #0
 8103f46:	eb13 0b01 	adds.w	fp, r3, r1
 8103f4a:	eb44 0c02 	adc.w	ip, r4, r2
 8103f4e:	4658      	mov	r0, fp
 8103f50:	4661      	mov	r1, ip
 8103f52:	687b      	ldr	r3, [r7, #4]
 8103f54:	685b      	ldr	r3, [r3, #4]
 8103f56:	f04f 0400 	mov.w	r4, #0
 8103f5a:	461a      	mov	r2, r3
 8103f5c:	4623      	mov	r3, r4
 8103f5e:	f7fc f9bf 	bl	81002e0 <__aeabi_uldivmod>
 8103f62:	4603      	mov	r3, r0
 8103f64:	460c      	mov	r4, r1
 8103f66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8103f68:	e2e8      	b.n	810453c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103f6a:	f107 030c 	add.w	r3, r7, #12
 8103f6e:	4618      	mov	r0, r3
 8103f70:	f7fd fe10 	bl	8101b94 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103f74:	693b      	ldr	r3, [r7, #16]
 8103f76:	4618      	mov	r0, r3
 8103f78:	f04f 0100 	mov.w	r1, #0
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f80:	2b00      	cmp	r3, #0
 8103f82:	d067      	beq.n	8104054 <UART_SetConfig+0xec4>
 8103f84:	687b      	ldr	r3, [r7, #4]
 8103f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f88:	2b01      	cmp	r3, #1
 8103f8a:	d05e      	beq.n	810404a <UART_SetConfig+0xeba>
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f90:	2b02      	cmp	r3, #2
 8103f92:	d055      	beq.n	8104040 <UART_SetConfig+0xeb0>
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f98:	2b03      	cmp	r3, #3
 8103f9a:	d04c      	beq.n	8104036 <UART_SetConfig+0xea6>
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fa0:	2b04      	cmp	r3, #4
 8103fa2:	d043      	beq.n	810402c <UART_SetConfig+0xe9c>
 8103fa4:	687b      	ldr	r3, [r7, #4]
 8103fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fa8:	2b05      	cmp	r3, #5
 8103faa:	d03a      	beq.n	8104022 <UART_SetConfig+0xe92>
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fb0:	2b06      	cmp	r3, #6
 8103fb2:	d031      	beq.n	8104018 <UART_SetConfig+0xe88>
 8103fb4:	687b      	ldr	r3, [r7, #4]
 8103fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fb8:	2b07      	cmp	r3, #7
 8103fba:	d028      	beq.n	810400e <UART_SetConfig+0xe7e>
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fc0:	2b08      	cmp	r3, #8
 8103fc2:	d01f      	beq.n	8104004 <UART_SetConfig+0xe74>
 8103fc4:	687b      	ldr	r3, [r7, #4]
 8103fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fc8:	2b09      	cmp	r3, #9
 8103fca:	d016      	beq.n	8103ffa <UART_SetConfig+0xe6a>
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fd0:	2b0a      	cmp	r3, #10
 8103fd2:	d00d      	beq.n	8103ff0 <UART_SetConfig+0xe60>
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103fd8:	2b0b      	cmp	r3, #11
 8103fda:	d104      	bne.n	8103fe6 <UART_SetConfig+0xe56>
 8103fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8103fe0:	f04f 0400 	mov.w	r4, #0
 8103fe4:	e03a      	b.n	810405c <UART_SetConfig+0xecc>
 8103fe6:	f04f 0301 	mov.w	r3, #1
 8103fea:	f04f 0400 	mov.w	r4, #0
 8103fee:	e035      	b.n	810405c <UART_SetConfig+0xecc>
 8103ff0:	f04f 0380 	mov.w	r3, #128	; 0x80
 8103ff4:	f04f 0400 	mov.w	r4, #0
 8103ff8:	e030      	b.n	810405c <UART_SetConfig+0xecc>
 8103ffa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8103ffe:	f04f 0400 	mov.w	r4, #0
 8104002:	e02b      	b.n	810405c <UART_SetConfig+0xecc>
 8104004:	f04f 0320 	mov.w	r3, #32
 8104008:	f04f 0400 	mov.w	r4, #0
 810400c:	e026      	b.n	810405c <UART_SetConfig+0xecc>
 810400e:	f04f 0310 	mov.w	r3, #16
 8104012:	f04f 0400 	mov.w	r4, #0
 8104016:	e021      	b.n	810405c <UART_SetConfig+0xecc>
 8104018:	f04f 030c 	mov.w	r3, #12
 810401c:	f04f 0400 	mov.w	r4, #0
 8104020:	e01c      	b.n	810405c <UART_SetConfig+0xecc>
 8104022:	f04f 030a 	mov.w	r3, #10
 8104026:	f04f 0400 	mov.w	r4, #0
 810402a:	e017      	b.n	810405c <UART_SetConfig+0xecc>
 810402c:	f04f 0308 	mov.w	r3, #8
 8104030:	f04f 0400 	mov.w	r4, #0
 8104034:	e012      	b.n	810405c <UART_SetConfig+0xecc>
 8104036:	f04f 0306 	mov.w	r3, #6
 810403a:	f04f 0400 	mov.w	r4, #0
 810403e:	e00d      	b.n	810405c <UART_SetConfig+0xecc>
 8104040:	f04f 0304 	mov.w	r3, #4
 8104044:	f04f 0400 	mov.w	r4, #0
 8104048:	e008      	b.n	810405c <UART_SetConfig+0xecc>
 810404a:	f04f 0302 	mov.w	r3, #2
 810404e:	f04f 0400 	mov.w	r4, #0
 8104052:	e003      	b.n	810405c <UART_SetConfig+0xecc>
 8104054:	f04f 0301 	mov.w	r3, #1
 8104058:	f04f 0400 	mov.w	r4, #0
 810405c:	461a      	mov	r2, r3
 810405e:	4623      	mov	r3, r4
 8104060:	f7fc f93e 	bl	81002e0 <__aeabi_uldivmod>
 8104064:	4603      	mov	r3, r0
 8104066:	460c      	mov	r4, r1
 8104068:	4619      	mov	r1, r3
 810406a:	4622      	mov	r2, r4
 810406c:	f04f 0300 	mov.w	r3, #0
 8104070:	f04f 0400 	mov.w	r4, #0
 8104074:	0214      	lsls	r4, r2, #8
 8104076:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 810407a:	020b      	lsls	r3, r1, #8
 810407c:	687a      	ldr	r2, [r7, #4]
 810407e:	6852      	ldr	r2, [r2, #4]
 8104080:	0852      	lsrs	r2, r2, #1
 8104082:	4611      	mov	r1, r2
 8104084:	f04f 0200 	mov.w	r2, #0
 8104088:	eb13 0b01 	adds.w	fp, r3, r1
 810408c:	eb44 0c02 	adc.w	ip, r4, r2
 8104090:	4658      	mov	r0, fp
 8104092:	4661      	mov	r1, ip
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	685b      	ldr	r3, [r3, #4]
 8104098:	f04f 0400 	mov.w	r4, #0
 810409c:	461a      	mov	r2, r3
 810409e:	4623      	mov	r3, r4
 81040a0:	f7fc f91e 	bl	81002e0 <__aeabi_uldivmod>
 81040a4:	4603      	mov	r3, r0
 81040a6:	460c      	mov	r4, r1
 81040a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81040aa:	e247      	b.n	810453c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81040ac:	4b96      	ldr	r3, [pc, #600]	; (8104308 <UART_SetConfig+0x1178>)
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	f003 0320 	and.w	r3, r3, #32
 81040b4:	2b00      	cmp	r3, #0
 81040b6:	f000 80a3 	beq.w	8104200 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81040ba:	4b93      	ldr	r3, [pc, #588]	; (8104308 <UART_SetConfig+0x1178>)
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	08db      	lsrs	r3, r3, #3
 81040c0:	f003 0303 	and.w	r3, r3, #3
 81040c4:	4a91      	ldr	r2, [pc, #580]	; (810430c <UART_SetConfig+0x117c>)
 81040c6:	fa22 f303 	lsr.w	r3, r2, r3
 81040ca:	4618      	mov	r0, r3
 81040cc:	f04f 0100 	mov.w	r1, #0
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d067      	beq.n	81041a8 <UART_SetConfig+0x1018>
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040dc:	2b01      	cmp	r3, #1
 81040de:	d05e      	beq.n	810419e <UART_SetConfig+0x100e>
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040e4:	2b02      	cmp	r3, #2
 81040e6:	d055      	beq.n	8104194 <UART_SetConfig+0x1004>
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040ec:	2b03      	cmp	r3, #3
 81040ee:	d04c      	beq.n	810418a <UART_SetConfig+0xffa>
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040f4:	2b04      	cmp	r3, #4
 81040f6:	d043      	beq.n	8104180 <UART_SetConfig+0xff0>
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81040fc:	2b05      	cmp	r3, #5
 81040fe:	d03a      	beq.n	8104176 <UART_SetConfig+0xfe6>
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104104:	2b06      	cmp	r3, #6
 8104106:	d031      	beq.n	810416c <UART_SetConfig+0xfdc>
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810410c:	2b07      	cmp	r3, #7
 810410e:	d028      	beq.n	8104162 <UART_SetConfig+0xfd2>
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104114:	2b08      	cmp	r3, #8
 8104116:	d01f      	beq.n	8104158 <UART_SetConfig+0xfc8>
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810411c:	2b09      	cmp	r3, #9
 810411e:	d016      	beq.n	810414e <UART_SetConfig+0xfbe>
 8104120:	687b      	ldr	r3, [r7, #4]
 8104122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104124:	2b0a      	cmp	r3, #10
 8104126:	d00d      	beq.n	8104144 <UART_SetConfig+0xfb4>
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810412c:	2b0b      	cmp	r3, #11
 810412e:	d104      	bne.n	810413a <UART_SetConfig+0xfaa>
 8104130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104134:	f04f 0400 	mov.w	r4, #0
 8104138:	e03a      	b.n	81041b0 <UART_SetConfig+0x1020>
 810413a:	f04f 0301 	mov.w	r3, #1
 810413e:	f04f 0400 	mov.w	r4, #0
 8104142:	e035      	b.n	81041b0 <UART_SetConfig+0x1020>
 8104144:	f04f 0380 	mov.w	r3, #128	; 0x80
 8104148:	f04f 0400 	mov.w	r4, #0
 810414c:	e030      	b.n	81041b0 <UART_SetConfig+0x1020>
 810414e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8104152:	f04f 0400 	mov.w	r4, #0
 8104156:	e02b      	b.n	81041b0 <UART_SetConfig+0x1020>
 8104158:	f04f 0320 	mov.w	r3, #32
 810415c:	f04f 0400 	mov.w	r4, #0
 8104160:	e026      	b.n	81041b0 <UART_SetConfig+0x1020>
 8104162:	f04f 0310 	mov.w	r3, #16
 8104166:	f04f 0400 	mov.w	r4, #0
 810416a:	e021      	b.n	81041b0 <UART_SetConfig+0x1020>
 810416c:	f04f 030c 	mov.w	r3, #12
 8104170:	f04f 0400 	mov.w	r4, #0
 8104174:	e01c      	b.n	81041b0 <UART_SetConfig+0x1020>
 8104176:	f04f 030a 	mov.w	r3, #10
 810417a:	f04f 0400 	mov.w	r4, #0
 810417e:	e017      	b.n	81041b0 <UART_SetConfig+0x1020>
 8104180:	f04f 0308 	mov.w	r3, #8
 8104184:	f04f 0400 	mov.w	r4, #0
 8104188:	e012      	b.n	81041b0 <UART_SetConfig+0x1020>
 810418a:	f04f 0306 	mov.w	r3, #6
 810418e:	f04f 0400 	mov.w	r4, #0
 8104192:	e00d      	b.n	81041b0 <UART_SetConfig+0x1020>
 8104194:	f04f 0304 	mov.w	r3, #4
 8104198:	f04f 0400 	mov.w	r4, #0
 810419c:	e008      	b.n	81041b0 <UART_SetConfig+0x1020>
 810419e:	f04f 0302 	mov.w	r3, #2
 81041a2:	f04f 0400 	mov.w	r4, #0
 81041a6:	e003      	b.n	81041b0 <UART_SetConfig+0x1020>
 81041a8:	f04f 0301 	mov.w	r3, #1
 81041ac:	f04f 0400 	mov.w	r4, #0
 81041b0:	461a      	mov	r2, r3
 81041b2:	4623      	mov	r3, r4
 81041b4:	f7fc f894 	bl	81002e0 <__aeabi_uldivmod>
 81041b8:	4603      	mov	r3, r0
 81041ba:	460c      	mov	r4, r1
 81041bc:	4619      	mov	r1, r3
 81041be:	4622      	mov	r2, r4
 81041c0:	f04f 0300 	mov.w	r3, #0
 81041c4:	f04f 0400 	mov.w	r4, #0
 81041c8:	0214      	lsls	r4, r2, #8
 81041ca:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81041ce:	020b      	lsls	r3, r1, #8
 81041d0:	687a      	ldr	r2, [r7, #4]
 81041d2:	6852      	ldr	r2, [r2, #4]
 81041d4:	0852      	lsrs	r2, r2, #1
 81041d6:	4611      	mov	r1, r2
 81041d8:	f04f 0200 	mov.w	r2, #0
 81041dc:	eb13 0b01 	adds.w	fp, r3, r1
 81041e0:	eb44 0c02 	adc.w	ip, r4, r2
 81041e4:	4658      	mov	r0, fp
 81041e6:	4661      	mov	r1, ip
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	685b      	ldr	r3, [r3, #4]
 81041ec:	f04f 0400 	mov.w	r4, #0
 81041f0:	461a      	mov	r2, r3
 81041f2:	4623      	mov	r3, r4
 81041f4:	f7fc f874 	bl	81002e0 <__aeabi_uldivmod>
 81041f8:	4603      	mov	r3, r0
 81041fa:	460c      	mov	r4, r1
 81041fc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 81041fe:	e19d      	b.n	810453c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104204:	2b00      	cmp	r3, #0
 8104206:	d05b      	beq.n	81042c0 <UART_SetConfig+0x1130>
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810420c:	2b01      	cmp	r3, #1
 810420e:	d053      	beq.n	81042b8 <UART_SetConfig+0x1128>
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104214:	2b02      	cmp	r3, #2
 8104216:	d04b      	beq.n	81042b0 <UART_SetConfig+0x1120>
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810421c:	2b03      	cmp	r3, #3
 810421e:	d043      	beq.n	81042a8 <UART_SetConfig+0x1118>
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104224:	2b04      	cmp	r3, #4
 8104226:	d03b      	beq.n	81042a0 <UART_SetConfig+0x1110>
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810422c:	2b05      	cmp	r3, #5
 810422e:	d033      	beq.n	8104298 <UART_SetConfig+0x1108>
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104234:	2b06      	cmp	r3, #6
 8104236:	d02b      	beq.n	8104290 <UART_SetConfig+0x1100>
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810423c:	2b07      	cmp	r3, #7
 810423e:	d023      	beq.n	8104288 <UART_SetConfig+0x10f8>
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104244:	2b08      	cmp	r3, #8
 8104246:	d01b      	beq.n	8104280 <UART_SetConfig+0x10f0>
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810424c:	2b09      	cmp	r3, #9
 810424e:	d013      	beq.n	8104278 <UART_SetConfig+0x10e8>
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104254:	2b0a      	cmp	r3, #10
 8104256:	d00b      	beq.n	8104270 <UART_SetConfig+0x10e0>
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810425c:	2b0b      	cmp	r3, #11
 810425e:	d103      	bne.n	8104268 <UART_SetConfig+0x10d8>
 8104260:	4b2a      	ldr	r3, [pc, #168]	; (810430c <UART_SetConfig+0x117c>)
 8104262:	f04f 0400 	mov.w	r4, #0
 8104266:	e02e      	b.n	81042c6 <UART_SetConfig+0x1136>
 8104268:	4b29      	ldr	r3, [pc, #164]	; (8104310 <UART_SetConfig+0x1180>)
 810426a:	f04f 0403 	mov.w	r4, #3
 810426e:	e02a      	b.n	81042c6 <UART_SetConfig+0x1136>
 8104270:	4b28      	ldr	r3, [pc, #160]	; (8104314 <UART_SetConfig+0x1184>)
 8104272:	f04f 0400 	mov.w	r4, #0
 8104276:	e026      	b.n	81042c6 <UART_SetConfig+0x1136>
 8104278:	4b27      	ldr	r3, [pc, #156]	; (8104318 <UART_SetConfig+0x1188>)
 810427a:	f04f 0400 	mov.w	r4, #0
 810427e:	e022      	b.n	81042c6 <UART_SetConfig+0x1136>
 8104280:	4b26      	ldr	r3, [pc, #152]	; (810431c <UART_SetConfig+0x118c>)
 8104282:	f04f 0400 	mov.w	r4, #0
 8104286:	e01e      	b.n	81042c6 <UART_SetConfig+0x1136>
 8104288:	4b25      	ldr	r3, [pc, #148]	; (8104320 <UART_SetConfig+0x1190>)
 810428a:	f04f 0400 	mov.w	r4, #0
 810428e:	e01a      	b.n	81042c6 <UART_SetConfig+0x1136>
 8104290:	a419      	add	r4, pc, #100	; (adr r4, 81042f8 <UART_SetConfig+0x1168>)
 8104292:	e9d4 3400 	ldrd	r3, r4, [r4]
 8104296:	e016      	b.n	81042c6 <UART_SetConfig+0x1136>
 8104298:	4b22      	ldr	r3, [pc, #136]	; (8104324 <UART_SetConfig+0x1194>)
 810429a:	f04f 0400 	mov.w	r4, #0
 810429e:	e012      	b.n	81042c6 <UART_SetConfig+0x1136>
 81042a0:	4b21      	ldr	r3, [pc, #132]	; (8104328 <UART_SetConfig+0x1198>)
 81042a2:	f04f 0400 	mov.w	r4, #0
 81042a6:	e00e      	b.n	81042c6 <UART_SetConfig+0x1136>
 81042a8:	a415      	add	r4, pc, #84	; (adr r4, 8104300 <UART_SetConfig+0x1170>)
 81042aa:	e9d4 3400 	ldrd	r3, r4, [r4]
 81042ae:	e00a      	b.n	81042c6 <UART_SetConfig+0x1136>
 81042b0:	4b1e      	ldr	r3, [pc, #120]	; (810432c <UART_SetConfig+0x119c>)
 81042b2:	f04f 0400 	mov.w	r4, #0
 81042b6:	e006      	b.n	81042c6 <UART_SetConfig+0x1136>
 81042b8:	4b1d      	ldr	r3, [pc, #116]	; (8104330 <UART_SetConfig+0x11a0>)
 81042ba:	f04f 0401 	mov.w	r4, #1
 81042be:	e002      	b.n	81042c6 <UART_SetConfig+0x1136>
 81042c0:	4b13      	ldr	r3, [pc, #76]	; (8104310 <UART_SetConfig+0x1180>)
 81042c2:	f04f 0403 	mov.w	r4, #3
 81042c6:	687a      	ldr	r2, [r7, #4]
 81042c8:	6852      	ldr	r2, [r2, #4]
 81042ca:	0852      	lsrs	r2, r2, #1
 81042cc:	4611      	mov	r1, r2
 81042ce:	f04f 0200 	mov.w	r2, #0
 81042d2:	eb13 0b01 	adds.w	fp, r3, r1
 81042d6:	eb44 0c02 	adc.w	ip, r4, r2
 81042da:	4658      	mov	r0, fp
 81042dc:	4661      	mov	r1, ip
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	685b      	ldr	r3, [r3, #4]
 81042e2:	f04f 0400 	mov.w	r4, #0
 81042e6:	461a      	mov	r2, r3
 81042e8:	4623      	mov	r3, r4
 81042ea:	f7fb fff9 	bl	81002e0 <__aeabi_uldivmod>
 81042ee:	4603      	mov	r3, r0
 81042f0:	460c      	mov	r4, r1
 81042f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81042f4:	e122      	b.n	810453c <UART_SetConfig+0x13ac>
 81042f6:	bf00      	nop
 81042f8:	51615500 	.word	0x51615500
 81042fc:	00000000 	.word	0x00000000
 8104300:	a2c2aa00 	.word	0xa2c2aa00
 8104304:	00000000 	.word	0x00000000
 8104308:	58024400 	.word	0x58024400
 810430c:	03d09000 	.word	0x03d09000
 8104310:	d0900000 	.word	0xd0900000
 8104314:	07a12000 	.word	0x07a12000
 8104318:	0f424000 	.word	0x0f424000
 810431c:	1e848000 	.word	0x1e848000
 8104320:	3d090000 	.word	0x3d090000
 8104324:	61a80000 	.word	0x61a80000
 8104328:	7a120000 	.word	0x7a120000
 810432c:	f4240000 	.word	0xf4240000
 8104330:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104338:	2b00      	cmp	r3, #0
 810433a:	d05b      	beq.n	81043f4 <UART_SetConfig+0x1264>
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104340:	2b01      	cmp	r3, #1
 8104342:	d053      	beq.n	81043ec <UART_SetConfig+0x125c>
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104348:	2b02      	cmp	r3, #2
 810434a:	d04b      	beq.n	81043e4 <UART_SetConfig+0x1254>
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104350:	2b03      	cmp	r3, #3
 8104352:	d043      	beq.n	81043dc <UART_SetConfig+0x124c>
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104358:	2b04      	cmp	r3, #4
 810435a:	d03b      	beq.n	81043d4 <UART_SetConfig+0x1244>
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104360:	2b05      	cmp	r3, #5
 8104362:	d033      	beq.n	81043cc <UART_SetConfig+0x123c>
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104368:	2b06      	cmp	r3, #6
 810436a:	d02b      	beq.n	81043c4 <UART_SetConfig+0x1234>
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104370:	2b07      	cmp	r3, #7
 8104372:	d023      	beq.n	81043bc <UART_SetConfig+0x122c>
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104378:	2b08      	cmp	r3, #8
 810437a:	d01b      	beq.n	81043b4 <UART_SetConfig+0x1224>
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104380:	2b09      	cmp	r3, #9
 8104382:	d013      	beq.n	81043ac <UART_SetConfig+0x121c>
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104388:	2b0a      	cmp	r3, #10
 810438a:	d00b      	beq.n	81043a4 <UART_SetConfig+0x1214>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104390:	2b0b      	cmp	r3, #11
 8104392:	d103      	bne.n	810439c <UART_SetConfig+0x120c>
 8104394:	4bc0      	ldr	r3, [pc, #768]	; (8104698 <UART_SetConfig+0x1508>)
 8104396:	f04f 0400 	mov.w	r4, #0
 810439a:	e02e      	b.n	81043fa <UART_SetConfig+0x126a>
 810439c:	4bbf      	ldr	r3, [pc, #764]	; (810469c <UART_SetConfig+0x150c>)
 810439e:	f04f 0400 	mov.w	r4, #0
 81043a2:	e02a      	b.n	81043fa <UART_SetConfig+0x126a>
 81043a4:	4bbe      	ldr	r3, [pc, #760]	; (81046a0 <UART_SetConfig+0x1510>)
 81043a6:	f04f 0400 	mov.w	r4, #0
 81043aa:	e026      	b.n	81043fa <UART_SetConfig+0x126a>
 81043ac:	4bbd      	ldr	r3, [pc, #756]	; (81046a4 <UART_SetConfig+0x1514>)
 81043ae:	f04f 0400 	mov.w	r4, #0
 81043b2:	e022      	b.n	81043fa <UART_SetConfig+0x126a>
 81043b4:	4bbc      	ldr	r3, [pc, #752]	; (81046a8 <UART_SetConfig+0x1518>)
 81043b6:	f04f 0400 	mov.w	r4, #0
 81043ba:	e01e      	b.n	81043fa <UART_SetConfig+0x126a>
 81043bc:	4bbb      	ldr	r3, [pc, #748]	; (81046ac <UART_SetConfig+0x151c>)
 81043be:	f04f 0400 	mov.w	r4, #0
 81043c2:	e01a      	b.n	81043fa <UART_SetConfig+0x126a>
 81043c4:	a4b0      	add	r4, pc, #704	; (adr r4, 8104688 <UART_SetConfig+0x14f8>)
 81043c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 81043ca:	e016      	b.n	81043fa <UART_SetConfig+0x126a>
 81043cc:	4bb8      	ldr	r3, [pc, #736]	; (81046b0 <UART_SetConfig+0x1520>)
 81043ce:	f04f 0400 	mov.w	r4, #0
 81043d2:	e012      	b.n	81043fa <UART_SetConfig+0x126a>
 81043d4:	4bb7      	ldr	r3, [pc, #732]	; (81046b4 <UART_SetConfig+0x1524>)
 81043d6:	f04f 0400 	mov.w	r4, #0
 81043da:	e00e      	b.n	81043fa <UART_SetConfig+0x126a>
 81043dc:	a4ac      	add	r4, pc, #688	; (adr r4, 8104690 <UART_SetConfig+0x1500>)
 81043de:	e9d4 3400 	ldrd	r3, r4, [r4]
 81043e2:	e00a      	b.n	81043fa <UART_SetConfig+0x126a>
 81043e4:	4bb4      	ldr	r3, [pc, #720]	; (81046b8 <UART_SetConfig+0x1528>)
 81043e6:	f04f 0400 	mov.w	r4, #0
 81043ea:	e006      	b.n	81043fa <UART_SetConfig+0x126a>
 81043ec:	4bb3      	ldr	r3, [pc, #716]	; (81046bc <UART_SetConfig+0x152c>)
 81043ee:	f04f 0400 	mov.w	r4, #0
 81043f2:	e002      	b.n	81043fa <UART_SetConfig+0x126a>
 81043f4:	4ba9      	ldr	r3, [pc, #676]	; (810469c <UART_SetConfig+0x150c>)
 81043f6:	f04f 0400 	mov.w	r4, #0
 81043fa:	687a      	ldr	r2, [r7, #4]
 81043fc:	6852      	ldr	r2, [r2, #4]
 81043fe:	0852      	lsrs	r2, r2, #1
 8104400:	4611      	mov	r1, r2
 8104402:	f04f 0200 	mov.w	r2, #0
 8104406:	eb13 0b01 	adds.w	fp, r3, r1
 810440a:	eb44 0c02 	adc.w	ip, r4, r2
 810440e:	4658      	mov	r0, fp
 8104410:	4661      	mov	r1, ip
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	685b      	ldr	r3, [r3, #4]
 8104416:	f04f 0400 	mov.w	r4, #0
 810441a:	461a      	mov	r2, r3
 810441c:	4623      	mov	r3, r4
 810441e:	f7fb ff5f 	bl	81002e0 <__aeabi_uldivmod>
 8104422:	4603      	mov	r3, r0
 8104424:	460c      	mov	r4, r1
 8104426:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8104428:	e088      	b.n	810453c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810442e:	2b00      	cmp	r3, #0
 8104430:	d064      	beq.n	81044fc <UART_SetConfig+0x136c>
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104436:	2b01      	cmp	r3, #1
 8104438:	d05b      	beq.n	81044f2 <UART_SetConfig+0x1362>
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810443e:	2b02      	cmp	r3, #2
 8104440:	d052      	beq.n	81044e8 <UART_SetConfig+0x1358>
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104446:	2b03      	cmp	r3, #3
 8104448:	d04a      	beq.n	81044e0 <UART_SetConfig+0x1350>
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810444e:	2b04      	cmp	r3, #4
 8104450:	d041      	beq.n	81044d6 <UART_SetConfig+0x1346>
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104456:	2b05      	cmp	r3, #5
 8104458:	d039      	beq.n	81044ce <UART_SetConfig+0x133e>
 810445a:	687b      	ldr	r3, [r7, #4]
 810445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810445e:	2b06      	cmp	r3, #6
 8104460:	d031      	beq.n	81044c6 <UART_SetConfig+0x1336>
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104466:	2b07      	cmp	r3, #7
 8104468:	d028      	beq.n	81044bc <UART_SetConfig+0x132c>
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810446e:	2b08      	cmp	r3, #8
 8104470:	d01f      	beq.n	81044b2 <UART_SetConfig+0x1322>
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104476:	2b09      	cmp	r3, #9
 8104478:	d016      	beq.n	81044a8 <UART_SetConfig+0x1318>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810447e:	2b0a      	cmp	r3, #10
 8104480:	d00d      	beq.n	810449e <UART_SetConfig+0x130e>
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104486:	2b0b      	cmp	r3, #11
 8104488:	d104      	bne.n	8104494 <UART_SetConfig+0x1304>
 810448a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810448e:	f04f 0400 	mov.w	r4, #0
 8104492:	e037      	b.n	8104504 <UART_SetConfig+0x1374>
 8104494:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8104498:	f04f 0400 	mov.w	r4, #0
 810449c:	e032      	b.n	8104504 <UART_SetConfig+0x1374>
 810449e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 81044a2:	f04f 0400 	mov.w	r4, #0
 81044a6:	e02d      	b.n	8104504 <UART_SetConfig+0x1374>
 81044a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81044ac:	f04f 0400 	mov.w	r4, #0
 81044b0:	e028      	b.n	8104504 <UART_SetConfig+0x1374>
 81044b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 81044b6:	f04f 0400 	mov.w	r4, #0
 81044ba:	e023      	b.n	8104504 <UART_SetConfig+0x1374>
 81044bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 81044c0:	f04f 0400 	mov.w	r4, #0
 81044c4:	e01e      	b.n	8104504 <UART_SetConfig+0x1374>
 81044c6:	4b7e      	ldr	r3, [pc, #504]	; (81046c0 <UART_SetConfig+0x1530>)
 81044c8:	f04f 0400 	mov.w	r4, #0
 81044cc:	e01a      	b.n	8104504 <UART_SetConfig+0x1374>
 81044ce:	4b7d      	ldr	r3, [pc, #500]	; (81046c4 <UART_SetConfig+0x1534>)
 81044d0:	f04f 0400 	mov.w	r4, #0
 81044d4:	e016      	b.n	8104504 <UART_SetConfig+0x1374>
 81044d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 81044da:	f04f 0400 	mov.w	r4, #0
 81044de:	e011      	b.n	8104504 <UART_SetConfig+0x1374>
 81044e0:	4b79      	ldr	r3, [pc, #484]	; (81046c8 <UART_SetConfig+0x1538>)
 81044e2:	f04f 0400 	mov.w	r4, #0
 81044e6:	e00d      	b.n	8104504 <UART_SetConfig+0x1374>
 81044e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 81044ec:	f04f 0400 	mov.w	r4, #0
 81044f0:	e008      	b.n	8104504 <UART_SetConfig+0x1374>
 81044f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 81044f6:	f04f 0400 	mov.w	r4, #0
 81044fa:	e003      	b.n	8104504 <UART_SetConfig+0x1374>
 81044fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8104500:	f04f 0400 	mov.w	r4, #0
 8104504:	687a      	ldr	r2, [r7, #4]
 8104506:	6852      	ldr	r2, [r2, #4]
 8104508:	0852      	lsrs	r2, r2, #1
 810450a:	4611      	mov	r1, r2
 810450c:	f04f 0200 	mov.w	r2, #0
 8104510:	eb13 0b01 	adds.w	fp, r3, r1
 8104514:	eb44 0c02 	adc.w	ip, r4, r2
 8104518:	4658      	mov	r0, fp
 810451a:	4661      	mov	r1, ip
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	685b      	ldr	r3, [r3, #4]
 8104520:	f04f 0400 	mov.w	r4, #0
 8104524:	461a      	mov	r2, r3
 8104526:	4623      	mov	r3, r4
 8104528:	f7fb feda 	bl	81002e0 <__aeabi_uldivmod>
 810452c:	4603      	mov	r3, r0
 810452e:	460c      	mov	r4, r1
 8104530:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8104532:	e003      	b.n	810453c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8104534:	2301      	movs	r3, #1
 8104536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 810453a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810453e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104542:	d309      	bcc.n	8104558 <UART_SetConfig+0x13c8>
 8104544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810454a:	d205      	bcs.n	8104558 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104552:	60da      	str	r2, [r3, #12]
 8104554:	f000 bf85 	b.w	8105462 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8104558:	2301      	movs	r3, #1
 810455a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810455e:	f000 bf80 	b.w	8105462 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	69db      	ldr	r3, [r3, #28]
 8104566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810456a:	f040 83da 	bne.w	8104d22 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 810456e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8104572:	2b40      	cmp	r3, #64	; 0x40
 8104574:	f200 83b3 	bhi.w	8104cde <UART_SetConfig+0x1b4e>
 8104578:	a201      	add	r2, pc, #4	; (adr r2, 8104580 <UART_SetConfig+0x13f0>)
 810457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810457e:	bf00      	nop
 8104580:	081046cd 	.word	0x081046cd
 8104584:	08104785 	.word	0x08104785
 8104588:	08104cdf 	.word	0x08104cdf
 810458c:	08104cdf 	.word	0x08104cdf
 8104590:	0810483d 	.word	0x0810483d
 8104594:	08104cdf 	.word	0x08104cdf
 8104598:	08104cdf 	.word	0x08104cdf
 810459c:	08104cdf 	.word	0x08104cdf
 81045a0:	081048f9 	.word	0x081048f9
 81045a4:	08104cdf 	.word	0x08104cdf
 81045a8:	08104cdf 	.word	0x08104cdf
 81045ac:	08104cdf 	.word	0x08104cdf
 81045b0:	08104cdf 	.word	0x08104cdf
 81045b4:	08104cdf 	.word	0x08104cdf
 81045b8:	08104cdf 	.word	0x08104cdf
 81045bc:	08104cdf 	.word	0x08104cdf
 81045c0:	081049b5 	.word	0x081049b5
 81045c4:	08104cdf 	.word	0x08104cdf
 81045c8:	08104cdf 	.word	0x08104cdf
 81045cc:	08104cdf 	.word	0x08104cdf
 81045d0:	08104cdf 	.word	0x08104cdf
 81045d4:	08104cdf 	.word	0x08104cdf
 81045d8:	08104cdf 	.word	0x08104cdf
 81045dc:	08104cdf 	.word	0x08104cdf
 81045e0:	08104cdf 	.word	0x08104cdf
 81045e4:	08104cdf 	.word	0x08104cdf
 81045e8:	08104cdf 	.word	0x08104cdf
 81045ec:	08104cdf 	.word	0x08104cdf
 81045f0:	08104cdf 	.word	0x08104cdf
 81045f4:	08104cdf 	.word	0x08104cdf
 81045f8:	08104cdf 	.word	0x08104cdf
 81045fc:	08104cdf 	.word	0x08104cdf
 8104600:	08104b27 	.word	0x08104b27
 8104604:	08104cdf 	.word	0x08104cdf
 8104608:	08104cdf 	.word	0x08104cdf
 810460c:	08104cdf 	.word	0x08104cdf
 8104610:	08104cdf 	.word	0x08104cdf
 8104614:	08104cdf 	.word	0x08104cdf
 8104618:	08104cdf 	.word	0x08104cdf
 810461c:	08104cdf 	.word	0x08104cdf
 8104620:	08104cdf 	.word	0x08104cdf
 8104624:	08104cdf 	.word	0x08104cdf
 8104628:	08104cdf 	.word	0x08104cdf
 810462c:	08104cdf 	.word	0x08104cdf
 8104630:	08104cdf 	.word	0x08104cdf
 8104634:	08104cdf 	.word	0x08104cdf
 8104638:	08104cdf 	.word	0x08104cdf
 810463c:	08104cdf 	.word	0x08104cdf
 8104640:	08104cdf 	.word	0x08104cdf
 8104644:	08104cdf 	.word	0x08104cdf
 8104648:	08104cdf 	.word	0x08104cdf
 810464c:	08104cdf 	.word	0x08104cdf
 8104650:	08104cdf 	.word	0x08104cdf
 8104654:	08104cdf 	.word	0x08104cdf
 8104658:	08104cdf 	.word	0x08104cdf
 810465c:	08104cdf 	.word	0x08104cdf
 8104660:	08104cdf 	.word	0x08104cdf
 8104664:	08104cdf 	.word	0x08104cdf
 8104668:	08104cdf 	.word	0x08104cdf
 810466c:	08104cdf 	.word	0x08104cdf
 8104670:	08104cdf 	.word	0x08104cdf
 8104674:	08104cdf 	.word	0x08104cdf
 8104678:	08104cdf 	.word	0x08104cdf
 810467c:	08104cdf 	.word	0x08104cdf
 8104680:	08104c1d 	.word	0x08104c1d
 8104684:	f3af 8000 	nop.w
 8104688:	05161500 	.word	0x05161500
 810468c:	00000000 	.word	0x00000000
 8104690:	0a2c2a00 	.word	0x0a2c2a00
 8104694:	00000000 	.word	0x00000000
 8104698:	003d0900 	.word	0x003d0900
 810469c:	3d090000 	.word	0x3d090000
 81046a0:	007a1200 	.word	0x007a1200
 81046a4:	00f42400 	.word	0x00f42400
 81046a8:	01e84800 	.word	0x01e84800
 81046ac:	03d09000 	.word	0x03d09000
 81046b0:	061a8000 	.word	0x061a8000
 81046b4:	07a12000 	.word	0x07a12000
 81046b8:	0f424000 	.word	0x0f424000
 81046bc:	1e848000 	.word	0x1e848000
 81046c0:	000aaa00 	.word	0x000aaa00
 81046c4:	000ccc00 	.word	0x000ccc00
 81046c8:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81046cc:	f7fd f892 	bl	81017f4 <HAL_RCC_GetPCLK1Freq>
 81046d0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81046d6:	2b00      	cmp	r3, #0
 81046d8:	d044      	beq.n	8104764 <UART_SetConfig+0x15d4>
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81046de:	2b01      	cmp	r3, #1
 81046e0:	d03e      	beq.n	8104760 <UART_SetConfig+0x15d0>
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81046e6:	2b02      	cmp	r3, #2
 81046e8:	d038      	beq.n	810475c <UART_SetConfig+0x15cc>
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81046ee:	2b03      	cmp	r3, #3
 81046f0:	d032      	beq.n	8104758 <UART_SetConfig+0x15c8>
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81046f6:	2b04      	cmp	r3, #4
 81046f8:	d02c      	beq.n	8104754 <UART_SetConfig+0x15c4>
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81046fe:	2b05      	cmp	r3, #5
 8104700:	d026      	beq.n	8104750 <UART_SetConfig+0x15c0>
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104706:	2b06      	cmp	r3, #6
 8104708:	d020      	beq.n	810474c <UART_SetConfig+0x15bc>
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810470e:	2b07      	cmp	r3, #7
 8104710:	d01a      	beq.n	8104748 <UART_SetConfig+0x15b8>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104716:	2b08      	cmp	r3, #8
 8104718:	d014      	beq.n	8104744 <UART_SetConfig+0x15b4>
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810471e:	2b09      	cmp	r3, #9
 8104720:	d00e      	beq.n	8104740 <UART_SetConfig+0x15b0>
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104726:	2b0a      	cmp	r3, #10
 8104728:	d008      	beq.n	810473c <UART_SetConfig+0x15ac>
 810472a:	687b      	ldr	r3, [r7, #4]
 810472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810472e:	2b0b      	cmp	r3, #11
 8104730:	d102      	bne.n	8104738 <UART_SetConfig+0x15a8>
 8104732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104736:	e016      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104738:	2301      	movs	r3, #1
 810473a:	e014      	b.n	8104766 <UART_SetConfig+0x15d6>
 810473c:	2380      	movs	r3, #128	; 0x80
 810473e:	e012      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104740:	2340      	movs	r3, #64	; 0x40
 8104742:	e010      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104744:	2320      	movs	r3, #32
 8104746:	e00e      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104748:	2310      	movs	r3, #16
 810474a:	e00c      	b.n	8104766 <UART_SetConfig+0x15d6>
 810474c:	230c      	movs	r3, #12
 810474e:	e00a      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104750:	230a      	movs	r3, #10
 8104752:	e008      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104754:	2308      	movs	r3, #8
 8104756:	e006      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104758:	2306      	movs	r3, #6
 810475a:	e004      	b.n	8104766 <UART_SetConfig+0x15d6>
 810475c:	2304      	movs	r3, #4
 810475e:	e002      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104760:	2302      	movs	r3, #2
 8104762:	e000      	b.n	8104766 <UART_SetConfig+0x15d6>
 8104764:	2301      	movs	r3, #1
 8104766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104768:	fbb2 f3f3 	udiv	r3, r2, r3
 810476c:	005a      	lsls	r2, r3, #1
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	685b      	ldr	r3, [r3, #4]
 8104772:	085b      	lsrs	r3, r3, #1
 8104774:	441a      	add	r2, r3
 8104776:	687b      	ldr	r3, [r7, #4]
 8104778:	685b      	ldr	r3, [r3, #4]
 810477a:	fbb2 f3f3 	udiv	r3, r2, r3
 810477e:	b29b      	uxth	r3, r3
 8104780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8104782:	e2b0      	b.n	8104ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104784:	f7fd f84c 	bl	8101820 <HAL_RCC_GetPCLK2Freq>
 8104788:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810478a:	687b      	ldr	r3, [r7, #4]
 810478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810478e:	2b00      	cmp	r3, #0
 8104790:	d044      	beq.n	810481c <UART_SetConfig+0x168c>
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104796:	2b01      	cmp	r3, #1
 8104798:	d03e      	beq.n	8104818 <UART_SetConfig+0x1688>
 810479a:	687b      	ldr	r3, [r7, #4]
 810479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810479e:	2b02      	cmp	r3, #2
 81047a0:	d038      	beq.n	8104814 <UART_SetConfig+0x1684>
 81047a2:	687b      	ldr	r3, [r7, #4]
 81047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047a6:	2b03      	cmp	r3, #3
 81047a8:	d032      	beq.n	8104810 <UART_SetConfig+0x1680>
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047ae:	2b04      	cmp	r3, #4
 81047b0:	d02c      	beq.n	810480c <UART_SetConfig+0x167c>
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047b6:	2b05      	cmp	r3, #5
 81047b8:	d026      	beq.n	8104808 <UART_SetConfig+0x1678>
 81047ba:	687b      	ldr	r3, [r7, #4]
 81047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047be:	2b06      	cmp	r3, #6
 81047c0:	d020      	beq.n	8104804 <UART_SetConfig+0x1674>
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047c6:	2b07      	cmp	r3, #7
 81047c8:	d01a      	beq.n	8104800 <UART_SetConfig+0x1670>
 81047ca:	687b      	ldr	r3, [r7, #4]
 81047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047ce:	2b08      	cmp	r3, #8
 81047d0:	d014      	beq.n	81047fc <UART_SetConfig+0x166c>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047d6:	2b09      	cmp	r3, #9
 81047d8:	d00e      	beq.n	81047f8 <UART_SetConfig+0x1668>
 81047da:	687b      	ldr	r3, [r7, #4]
 81047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047de:	2b0a      	cmp	r3, #10
 81047e0:	d008      	beq.n	81047f4 <UART_SetConfig+0x1664>
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81047e6:	2b0b      	cmp	r3, #11
 81047e8:	d102      	bne.n	81047f0 <UART_SetConfig+0x1660>
 81047ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 81047ee:	e016      	b.n	810481e <UART_SetConfig+0x168e>
 81047f0:	2301      	movs	r3, #1
 81047f2:	e014      	b.n	810481e <UART_SetConfig+0x168e>
 81047f4:	2380      	movs	r3, #128	; 0x80
 81047f6:	e012      	b.n	810481e <UART_SetConfig+0x168e>
 81047f8:	2340      	movs	r3, #64	; 0x40
 81047fa:	e010      	b.n	810481e <UART_SetConfig+0x168e>
 81047fc:	2320      	movs	r3, #32
 81047fe:	e00e      	b.n	810481e <UART_SetConfig+0x168e>
 8104800:	2310      	movs	r3, #16
 8104802:	e00c      	b.n	810481e <UART_SetConfig+0x168e>
 8104804:	230c      	movs	r3, #12
 8104806:	e00a      	b.n	810481e <UART_SetConfig+0x168e>
 8104808:	230a      	movs	r3, #10
 810480a:	e008      	b.n	810481e <UART_SetConfig+0x168e>
 810480c:	2308      	movs	r3, #8
 810480e:	e006      	b.n	810481e <UART_SetConfig+0x168e>
 8104810:	2306      	movs	r3, #6
 8104812:	e004      	b.n	810481e <UART_SetConfig+0x168e>
 8104814:	2304      	movs	r3, #4
 8104816:	e002      	b.n	810481e <UART_SetConfig+0x168e>
 8104818:	2302      	movs	r3, #2
 810481a:	e000      	b.n	810481e <UART_SetConfig+0x168e>
 810481c:	2301      	movs	r3, #1
 810481e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104820:	fbb2 f3f3 	udiv	r3, r2, r3
 8104824:	005a      	lsls	r2, r3, #1
 8104826:	687b      	ldr	r3, [r7, #4]
 8104828:	685b      	ldr	r3, [r3, #4]
 810482a:	085b      	lsrs	r3, r3, #1
 810482c:	441a      	add	r2, r3
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	685b      	ldr	r3, [r3, #4]
 8104832:	fbb2 f3f3 	udiv	r3, r2, r3
 8104836:	b29b      	uxth	r3, r3
 8104838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810483a:	e254      	b.n	8104ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810483c:	f107 0318 	add.w	r3, r7, #24
 8104840:	4618      	mov	r0, r3
 8104842:	f7fd f85b 	bl	81018fc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104846:	69fa      	ldr	r2, [r7, #28]
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810484c:	2b00      	cmp	r3, #0
 810484e:	d044      	beq.n	81048da <UART_SetConfig+0x174a>
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104854:	2b01      	cmp	r3, #1
 8104856:	d03e      	beq.n	81048d6 <UART_SetConfig+0x1746>
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810485c:	2b02      	cmp	r3, #2
 810485e:	d038      	beq.n	81048d2 <UART_SetConfig+0x1742>
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104864:	2b03      	cmp	r3, #3
 8104866:	d032      	beq.n	81048ce <UART_SetConfig+0x173e>
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810486c:	2b04      	cmp	r3, #4
 810486e:	d02c      	beq.n	81048ca <UART_SetConfig+0x173a>
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104874:	2b05      	cmp	r3, #5
 8104876:	d026      	beq.n	81048c6 <UART_SetConfig+0x1736>
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810487c:	2b06      	cmp	r3, #6
 810487e:	d020      	beq.n	81048c2 <UART_SetConfig+0x1732>
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104884:	2b07      	cmp	r3, #7
 8104886:	d01a      	beq.n	81048be <UART_SetConfig+0x172e>
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810488c:	2b08      	cmp	r3, #8
 810488e:	d014      	beq.n	81048ba <UART_SetConfig+0x172a>
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104894:	2b09      	cmp	r3, #9
 8104896:	d00e      	beq.n	81048b6 <UART_SetConfig+0x1726>
 8104898:	687b      	ldr	r3, [r7, #4]
 810489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810489c:	2b0a      	cmp	r3, #10
 810489e:	d008      	beq.n	81048b2 <UART_SetConfig+0x1722>
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81048a4:	2b0b      	cmp	r3, #11
 81048a6:	d102      	bne.n	81048ae <UART_SetConfig+0x171e>
 81048a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81048ac:	e016      	b.n	81048dc <UART_SetConfig+0x174c>
 81048ae:	2301      	movs	r3, #1
 81048b0:	e014      	b.n	81048dc <UART_SetConfig+0x174c>
 81048b2:	2380      	movs	r3, #128	; 0x80
 81048b4:	e012      	b.n	81048dc <UART_SetConfig+0x174c>
 81048b6:	2340      	movs	r3, #64	; 0x40
 81048b8:	e010      	b.n	81048dc <UART_SetConfig+0x174c>
 81048ba:	2320      	movs	r3, #32
 81048bc:	e00e      	b.n	81048dc <UART_SetConfig+0x174c>
 81048be:	2310      	movs	r3, #16
 81048c0:	e00c      	b.n	81048dc <UART_SetConfig+0x174c>
 81048c2:	230c      	movs	r3, #12
 81048c4:	e00a      	b.n	81048dc <UART_SetConfig+0x174c>
 81048c6:	230a      	movs	r3, #10
 81048c8:	e008      	b.n	81048dc <UART_SetConfig+0x174c>
 81048ca:	2308      	movs	r3, #8
 81048cc:	e006      	b.n	81048dc <UART_SetConfig+0x174c>
 81048ce:	2306      	movs	r3, #6
 81048d0:	e004      	b.n	81048dc <UART_SetConfig+0x174c>
 81048d2:	2304      	movs	r3, #4
 81048d4:	e002      	b.n	81048dc <UART_SetConfig+0x174c>
 81048d6:	2302      	movs	r3, #2
 81048d8:	e000      	b.n	81048dc <UART_SetConfig+0x174c>
 81048da:	2301      	movs	r3, #1
 81048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 81048e0:	005a      	lsls	r2, r3, #1
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	685b      	ldr	r3, [r3, #4]
 81048e6:	085b      	lsrs	r3, r3, #1
 81048e8:	441a      	add	r2, r3
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	685b      	ldr	r3, [r3, #4]
 81048ee:	fbb2 f3f3 	udiv	r3, r2, r3
 81048f2:	b29b      	uxth	r3, r3
 81048f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 81048f6:	e1f6      	b.n	8104ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81048f8:	f107 030c 	add.w	r3, r7, #12
 81048fc:	4618      	mov	r0, r3
 81048fe:	f7fd f949 	bl	8101b94 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104902:	693a      	ldr	r2, [r7, #16]
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104908:	2b00      	cmp	r3, #0
 810490a:	d044      	beq.n	8104996 <UART_SetConfig+0x1806>
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104910:	2b01      	cmp	r3, #1
 8104912:	d03e      	beq.n	8104992 <UART_SetConfig+0x1802>
 8104914:	687b      	ldr	r3, [r7, #4]
 8104916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104918:	2b02      	cmp	r3, #2
 810491a:	d038      	beq.n	810498e <UART_SetConfig+0x17fe>
 810491c:	687b      	ldr	r3, [r7, #4]
 810491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104920:	2b03      	cmp	r3, #3
 8104922:	d032      	beq.n	810498a <UART_SetConfig+0x17fa>
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104928:	2b04      	cmp	r3, #4
 810492a:	d02c      	beq.n	8104986 <UART_SetConfig+0x17f6>
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104930:	2b05      	cmp	r3, #5
 8104932:	d026      	beq.n	8104982 <UART_SetConfig+0x17f2>
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104938:	2b06      	cmp	r3, #6
 810493a:	d020      	beq.n	810497e <UART_SetConfig+0x17ee>
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104940:	2b07      	cmp	r3, #7
 8104942:	d01a      	beq.n	810497a <UART_SetConfig+0x17ea>
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104948:	2b08      	cmp	r3, #8
 810494a:	d014      	beq.n	8104976 <UART_SetConfig+0x17e6>
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104950:	2b09      	cmp	r3, #9
 8104952:	d00e      	beq.n	8104972 <UART_SetConfig+0x17e2>
 8104954:	687b      	ldr	r3, [r7, #4]
 8104956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104958:	2b0a      	cmp	r3, #10
 810495a:	d008      	beq.n	810496e <UART_SetConfig+0x17de>
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104960:	2b0b      	cmp	r3, #11
 8104962:	d102      	bne.n	810496a <UART_SetConfig+0x17da>
 8104964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104968:	e016      	b.n	8104998 <UART_SetConfig+0x1808>
 810496a:	2301      	movs	r3, #1
 810496c:	e014      	b.n	8104998 <UART_SetConfig+0x1808>
 810496e:	2380      	movs	r3, #128	; 0x80
 8104970:	e012      	b.n	8104998 <UART_SetConfig+0x1808>
 8104972:	2340      	movs	r3, #64	; 0x40
 8104974:	e010      	b.n	8104998 <UART_SetConfig+0x1808>
 8104976:	2320      	movs	r3, #32
 8104978:	e00e      	b.n	8104998 <UART_SetConfig+0x1808>
 810497a:	2310      	movs	r3, #16
 810497c:	e00c      	b.n	8104998 <UART_SetConfig+0x1808>
 810497e:	230c      	movs	r3, #12
 8104980:	e00a      	b.n	8104998 <UART_SetConfig+0x1808>
 8104982:	230a      	movs	r3, #10
 8104984:	e008      	b.n	8104998 <UART_SetConfig+0x1808>
 8104986:	2308      	movs	r3, #8
 8104988:	e006      	b.n	8104998 <UART_SetConfig+0x1808>
 810498a:	2306      	movs	r3, #6
 810498c:	e004      	b.n	8104998 <UART_SetConfig+0x1808>
 810498e:	2304      	movs	r3, #4
 8104990:	e002      	b.n	8104998 <UART_SetConfig+0x1808>
 8104992:	2302      	movs	r3, #2
 8104994:	e000      	b.n	8104998 <UART_SetConfig+0x1808>
 8104996:	2301      	movs	r3, #1
 8104998:	fbb2 f3f3 	udiv	r3, r2, r3
 810499c:	005a      	lsls	r2, r3, #1
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	685b      	ldr	r3, [r3, #4]
 81049a2:	085b      	lsrs	r3, r3, #1
 81049a4:	441a      	add	r2, r3
 81049a6:	687b      	ldr	r3, [r7, #4]
 81049a8:	685b      	ldr	r3, [r3, #4]
 81049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 81049ae:	b29b      	uxth	r3, r3
 81049b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 81049b2:	e198      	b.n	8104ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81049b4:	4b87      	ldr	r3, [pc, #540]	; (8104bd4 <UART_SetConfig+0x1a44>)
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	f003 0320 	and.w	r3, r3, #32
 81049bc:	2b00      	cmp	r3, #0
 81049be:	d05e      	beq.n	8104a7e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81049c0:	4b84      	ldr	r3, [pc, #528]	; (8104bd4 <UART_SetConfig+0x1a44>)
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	08db      	lsrs	r3, r3, #3
 81049c6:	f003 0303 	and.w	r3, r3, #3
 81049ca:	4a83      	ldr	r2, [pc, #524]	; (8104bd8 <UART_SetConfig+0x1a48>)
 81049cc:	40da      	lsrs	r2, r3
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81049d2:	2b00      	cmp	r3, #0
 81049d4:	d044      	beq.n	8104a60 <UART_SetConfig+0x18d0>
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81049da:	2b01      	cmp	r3, #1
 81049dc:	d03e      	beq.n	8104a5c <UART_SetConfig+0x18cc>
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81049e2:	2b02      	cmp	r3, #2
 81049e4:	d038      	beq.n	8104a58 <UART_SetConfig+0x18c8>
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81049ea:	2b03      	cmp	r3, #3
 81049ec:	d032      	beq.n	8104a54 <UART_SetConfig+0x18c4>
 81049ee:	687b      	ldr	r3, [r7, #4]
 81049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81049f2:	2b04      	cmp	r3, #4
 81049f4:	d02c      	beq.n	8104a50 <UART_SetConfig+0x18c0>
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81049fa:	2b05      	cmp	r3, #5
 81049fc:	d026      	beq.n	8104a4c <UART_SetConfig+0x18bc>
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a02:	2b06      	cmp	r3, #6
 8104a04:	d020      	beq.n	8104a48 <UART_SetConfig+0x18b8>
 8104a06:	687b      	ldr	r3, [r7, #4]
 8104a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a0a:	2b07      	cmp	r3, #7
 8104a0c:	d01a      	beq.n	8104a44 <UART_SetConfig+0x18b4>
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a12:	2b08      	cmp	r3, #8
 8104a14:	d014      	beq.n	8104a40 <UART_SetConfig+0x18b0>
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a1a:	2b09      	cmp	r3, #9
 8104a1c:	d00e      	beq.n	8104a3c <UART_SetConfig+0x18ac>
 8104a1e:	687b      	ldr	r3, [r7, #4]
 8104a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a22:	2b0a      	cmp	r3, #10
 8104a24:	d008      	beq.n	8104a38 <UART_SetConfig+0x18a8>
 8104a26:	687b      	ldr	r3, [r7, #4]
 8104a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a2a:	2b0b      	cmp	r3, #11
 8104a2c:	d102      	bne.n	8104a34 <UART_SetConfig+0x18a4>
 8104a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104a32:	e016      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a34:	2301      	movs	r3, #1
 8104a36:	e014      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a38:	2380      	movs	r3, #128	; 0x80
 8104a3a:	e012      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a3c:	2340      	movs	r3, #64	; 0x40
 8104a3e:	e010      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a40:	2320      	movs	r3, #32
 8104a42:	e00e      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a44:	2310      	movs	r3, #16
 8104a46:	e00c      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a48:	230c      	movs	r3, #12
 8104a4a:	e00a      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a4c:	230a      	movs	r3, #10
 8104a4e:	e008      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a50:	2308      	movs	r3, #8
 8104a52:	e006      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a54:	2306      	movs	r3, #6
 8104a56:	e004      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a58:	2304      	movs	r3, #4
 8104a5a:	e002      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a5c:	2302      	movs	r3, #2
 8104a5e:	e000      	b.n	8104a62 <UART_SetConfig+0x18d2>
 8104a60:	2301      	movs	r3, #1
 8104a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8104a66:	005a      	lsls	r2, r3, #1
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	685b      	ldr	r3, [r3, #4]
 8104a6c:	085b      	lsrs	r3, r3, #1
 8104a6e:	441a      	add	r2, r3
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	685b      	ldr	r3, [r3, #4]
 8104a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8104a78:	b29b      	uxth	r3, r3
 8104a7a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8104a7c:	e133      	b.n	8104ce6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a82:	2b00      	cmp	r3, #0
 8104a84:	d043      	beq.n	8104b0e <UART_SetConfig+0x197e>
 8104a86:	687b      	ldr	r3, [r7, #4]
 8104a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a8a:	2b01      	cmp	r3, #1
 8104a8c:	d03d      	beq.n	8104b0a <UART_SetConfig+0x197a>
 8104a8e:	687b      	ldr	r3, [r7, #4]
 8104a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a92:	2b02      	cmp	r3, #2
 8104a94:	d037      	beq.n	8104b06 <UART_SetConfig+0x1976>
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104a9a:	2b03      	cmp	r3, #3
 8104a9c:	d031      	beq.n	8104b02 <UART_SetConfig+0x1972>
 8104a9e:	687b      	ldr	r3, [r7, #4]
 8104aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104aa2:	2b04      	cmp	r3, #4
 8104aa4:	d02b      	beq.n	8104afe <UART_SetConfig+0x196e>
 8104aa6:	687b      	ldr	r3, [r7, #4]
 8104aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104aaa:	2b05      	cmp	r3, #5
 8104aac:	d025      	beq.n	8104afa <UART_SetConfig+0x196a>
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ab2:	2b06      	cmp	r3, #6
 8104ab4:	d01f      	beq.n	8104af6 <UART_SetConfig+0x1966>
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104aba:	2b07      	cmp	r3, #7
 8104abc:	d019      	beq.n	8104af2 <UART_SetConfig+0x1962>
 8104abe:	687b      	ldr	r3, [r7, #4]
 8104ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ac2:	2b08      	cmp	r3, #8
 8104ac4:	d013      	beq.n	8104aee <UART_SetConfig+0x195e>
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104aca:	2b09      	cmp	r3, #9
 8104acc:	d00d      	beq.n	8104aea <UART_SetConfig+0x195a>
 8104ace:	687b      	ldr	r3, [r7, #4]
 8104ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ad2:	2b0a      	cmp	r3, #10
 8104ad4:	d007      	beq.n	8104ae6 <UART_SetConfig+0x1956>
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ada:	2b0b      	cmp	r3, #11
 8104adc:	d101      	bne.n	8104ae2 <UART_SetConfig+0x1952>
 8104ade:	4b3f      	ldr	r3, [pc, #252]	; (8104bdc <UART_SetConfig+0x1a4c>)
 8104ae0:	e016      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104ae2:	4b3f      	ldr	r3, [pc, #252]	; (8104be0 <UART_SetConfig+0x1a50>)
 8104ae4:	e014      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104ae6:	4b3f      	ldr	r3, [pc, #252]	; (8104be4 <UART_SetConfig+0x1a54>)
 8104ae8:	e012      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104aea:	4b3f      	ldr	r3, [pc, #252]	; (8104be8 <UART_SetConfig+0x1a58>)
 8104aec:	e010      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104aee:	4b3f      	ldr	r3, [pc, #252]	; (8104bec <UART_SetConfig+0x1a5c>)
 8104af0:	e00e      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104af2:	4b3f      	ldr	r3, [pc, #252]	; (8104bf0 <UART_SetConfig+0x1a60>)
 8104af4:	e00c      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104af6:	4b3f      	ldr	r3, [pc, #252]	; (8104bf4 <UART_SetConfig+0x1a64>)
 8104af8:	e00a      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104afa:	4b3f      	ldr	r3, [pc, #252]	; (8104bf8 <UART_SetConfig+0x1a68>)
 8104afc:	e008      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104afe:	4b3f      	ldr	r3, [pc, #252]	; (8104bfc <UART_SetConfig+0x1a6c>)
 8104b00:	e006      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104b02:	4b3f      	ldr	r3, [pc, #252]	; (8104c00 <UART_SetConfig+0x1a70>)
 8104b04:	e004      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104b06:	4b3f      	ldr	r3, [pc, #252]	; (8104c04 <UART_SetConfig+0x1a74>)
 8104b08:	e002      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104b0a:	4b33      	ldr	r3, [pc, #204]	; (8104bd8 <UART_SetConfig+0x1a48>)
 8104b0c:	e000      	b.n	8104b10 <UART_SetConfig+0x1980>
 8104b0e:	4b34      	ldr	r3, [pc, #208]	; (8104be0 <UART_SetConfig+0x1a50>)
 8104b10:	687a      	ldr	r2, [r7, #4]
 8104b12:	6852      	ldr	r2, [r2, #4]
 8104b14:	0852      	lsrs	r2, r2, #1
 8104b16:	441a      	add	r2, r3
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	685b      	ldr	r3, [r3, #4]
 8104b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8104b20:	b29b      	uxth	r3, r3
 8104b22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8104b24:	e0df      	b.n	8104ce6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b2a:	2b00      	cmp	r3, #0
 8104b2c:	d045      	beq.n	8104bba <UART_SetConfig+0x1a2a>
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b32:	2b01      	cmp	r3, #1
 8104b34:	d03f      	beq.n	8104bb6 <UART_SetConfig+0x1a26>
 8104b36:	687b      	ldr	r3, [r7, #4]
 8104b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b3a:	2b02      	cmp	r3, #2
 8104b3c:	d039      	beq.n	8104bb2 <UART_SetConfig+0x1a22>
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b42:	2b03      	cmp	r3, #3
 8104b44:	d033      	beq.n	8104bae <UART_SetConfig+0x1a1e>
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b4a:	2b04      	cmp	r3, #4
 8104b4c:	d02d      	beq.n	8104baa <UART_SetConfig+0x1a1a>
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b52:	2b05      	cmp	r3, #5
 8104b54:	d027      	beq.n	8104ba6 <UART_SetConfig+0x1a16>
 8104b56:	687b      	ldr	r3, [r7, #4]
 8104b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b5a:	2b06      	cmp	r3, #6
 8104b5c:	d021      	beq.n	8104ba2 <UART_SetConfig+0x1a12>
 8104b5e:	687b      	ldr	r3, [r7, #4]
 8104b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b62:	2b07      	cmp	r3, #7
 8104b64:	d01b      	beq.n	8104b9e <UART_SetConfig+0x1a0e>
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b6a:	2b08      	cmp	r3, #8
 8104b6c:	d015      	beq.n	8104b9a <UART_SetConfig+0x1a0a>
 8104b6e:	687b      	ldr	r3, [r7, #4]
 8104b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b72:	2b09      	cmp	r3, #9
 8104b74:	d00f      	beq.n	8104b96 <UART_SetConfig+0x1a06>
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b7a:	2b0a      	cmp	r3, #10
 8104b7c:	d008      	beq.n	8104b90 <UART_SetConfig+0x1a00>
 8104b7e:	687b      	ldr	r3, [r7, #4]
 8104b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104b82:	2b0b      	cmp	r3, #11
 8104b84:	d102      	bne.n	8104b8c <UART_SetConfig+0x19fc>
 8104b86:	f647 2312 	movw	r3, #31250	; 0x7a12
 8104b8a:	e017      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104b8c:	4b18      	ldr	r3, [pc, #96]	; (8104bf0 <UART_SetConfig+0x1a60>)
 8104b8e:	e015      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104b90:	f24f 4324 	movw	r3, #62500	; 0xf424
 8104b94:	e012      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104b96:	4b1c      	ldr	r3, [pc, #112]	; (8104c08 <UART_SetConfig+0x1a78>)
 8104b98:	e010      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104b9a:	4b1c      	ldr	r3, [pc, #112]	; (8104c0c <UART_SetConfig+0x1a7c>)
 8104b9c:	e00e      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104b9e:	4b0f      	ldr	r3, [pc, #60]	; (8104bdc <UART_SetConfig+0x1a4c>)
 8104ba0:	e00c      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104ba2:	4b1b      	ldr	r3, [pc, #108]	; (8104c10 <UART_SetConfig+0x1a80>)
 8104ba4:	e00a      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104ba6:	4b1b      	ldr	r3, [pc, #108]	; (8104c14 <UART_SetConfig+0x1a84>)
 8104ba8:	e008      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104baa:	4b0e      	ldr	r3, [pc, #56]	; (8104be4 <UART_SetConfig+0x1a54>)
 8104bac:	e006      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104bae:	4b1a      	ldr	r3, [pc, #104]	; (8104c18 <UART_SetConfig+0x1a88>)
 8104bb0:	e004      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104bb2:	4b0d      	ldr	r3, [pc, #52]	; (8104be8 <UART_SetConfig+0x1a58>)
 8104bb4:	e002      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104bb6:	4b0d      	ldr	r3, [pc, #52]	; (8104bec <UART_SetConfig+0x1a5c>)
 8104bb8:	e000      	b.n	8104bbc <UART_SetConfig+0x1a2c>
 8104bba:	4b0d      	ldr	r3, [pc, #52]	; (8104bf0 <UART_SetConfig+0x1a60>)
 8104bbc:	687a      	ldr	r2, [r7, #4]
 8104bbe:	6852      	ldr	r2, [r2, #4]
 8104bc0:	0852      	lsrs	r2, r2, #1
 8104bc2:	441a      	add	r2, r3
 8104bc4:	687b      	ldr	r3, [r7, #4]
 8104bc6:	685b      	ldr	r3, [r3, #4]
 8104bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8104bcc:	b29b      	uxth	r3, r3
 8104bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8104bd0:	e089      	b.n	8104ce6 <UART_SetConfig+0x1b56>
 8104bd2:	bf00      	nop
 8104bd4:	58024400 	.word	0x58024400
 8104bd8:	03d09000 	.word	0x03d09000
 8104bdc:	0007a120 	.word	0x0007a120
 8104be0:	07a12000 	.word	0x07a12000
 8104be4:	000f4240 	.word	0x000f4240
 8104be8:	001e8480 	.word	0x001e8480
 8104bec:	003d0900 	.word	0x003d0900
 8104bf0:	007a1200 	.word	0x007a1200
 8104bf4:	00a2c2aa 	.word	0x00a2c2aa
 8104bf8:	00c35000 	.word	0x00c35000
 8104bfc:	00f42400 	.word	0x00f42400
 8104c00:	01458554 	.word	0x01458554
 8104c04:	01e84800 	.word	0x01e84800
 8104c08:	0001e848 	.word	0x0001e848
 8104c0c:	0003d090 	.word	0x0003d090
 8104c10:	000a2c2a 	.word	0x000a2c2a
 8104c14:	000c3500 	.word	0x000c3500
 8104c18:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c20:	2b00      	cmp	r3, #0
 8104c22:	d04f      	beq.n	8104cc4 <UART_SetConfig+0x1b34>
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c28:	2b01      	cmp	r3, #1
 8104c2a:	d048      	beq.n	8104cbe <UART_SetConfig+0x1b2e>
 8104c2c:	687b      	ldr	r3, [r7, #4]
 8104c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c30:	2b02      	cmp	r3, #2
 8104c32:	d041      	beq.n	8104cb8 <UART_SetConfig+0x1b28>
 8104c34:	687b      	ldr	r3, [r7, #4]
 8104c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c38:	2b03      	cmp	r3, #3
 8104c3a:	d03a      	beq.n	8104cb2 <UART_SetConfig+0x1b22>
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c40:	2b04      	cmp	r3, #4
 8104c42:	d033      	beq.n	8104cac <UART_SetConfig+0x1b1c>
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c48:	2b05      	cmp	r3, #5
 8104c4a:	d02c      	beq.n	8104ca6 <UART_SetConfig+0x1b16>
 8104c4c:	687b      	ldr	r3, [r7, #4]
 8104c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c50:	2b06      	cmp	r3, #6
 8104c52:	d025      	beq.n	8104ca0 <UART_SetConfig+0x1b10>
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c58:	2b07      	cmp	r3, #7
 8104c5a:	d01e      	beq.n	8104c9a <UART_SetConfig+0x1b0a>
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c60:	2b08      	cmp	r3, #8
 8104c62:	d017      	beq.n	8104c94 <UART_SetConfig+0x1b04>
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c68:	2b09      	cmp	r3, #9
 8104c6a:	d010      	beq.n	8104c8e <UART_SetConfig+0x1afe>
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c70:	2b0a      	cmp	r3, #10
 8104c72:	d009      	beq.n	8104c88 <UART_SetConfig+0x1af8>
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104c78:	2b0b      	cmp	r3, #11
 8104c7a:	d102      	bne.n	8104c82 <UART_SetConfig+0x1af2>
 8104c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104c80:	e022      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8104c86:	e01f      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104c88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8104c8c:	e01c      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8104c92:	e019      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104c94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8104c98:	e016      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8104c9e:	e013      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104ca0:	f241 5354 	movw	r3, #5460	; 0x1554
 8104ca4:	e010      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104ca6:	f641 1398 	movw	r3, #6552	; 0x1998
 8104caa:	e00d      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8104cb0:	e00a      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104cb2:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8104cb6:	e007      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104cb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8104cbc:	e004      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104cc2:	e001      	b.n	8104cc8 <UART_SetConfig+0x1b38>
 8104cc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8104cc8:	687a      	ldr	r2, [r7, #4]
 8104cca:	6852      	ldr	r2, [r2, #4]
 8104ccc:	0852      	lsrs	r2, r2, #1
 8104cce:	441a      	add	r2, r3
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	685b      	ldr	r3, [r3, #4]
 8104cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8104cd8:	b29b      	uxth	r3, r3
 8104cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8104cdc:	e003      	b.n	8104ce6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8104cde:	2301      	movs	r3, #1
 8104ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8104ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ce8:	2b0f      	cmp	r3, #15
 8104cea:	d916      	bls.n	8104d1a <UART_SetConfig+0x1b8a>
 8104cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104cee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104cf2:	d212      	bcs.n	8104d1a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8104cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104cf6:	b29b      	uxth	r3, r3
 8104cf8:	f023 030f 	bic.w	r3, r3, #15
 8104cfc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8104cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d00:	085b      	lsrs	r3, r3, #1
 8104d02:	b29b      	uxth	r3, r3
 8104d04:	f003 0307 	and.w	r3, r3, #7
 8104d08:	b29a      	uxth	r2, r3
 8104d0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8104d0c:	4313      	orrs	r3, r2
 8104d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8104d10:	687b      	ldr	r3, [r7, #4]
 8104d12:	681b      	ldr	r3, [r3, #0]
 8104d14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8104d16:	60da      	str	r2, [r3, #12]
 8104d18:	e3a3      	b.n	8105462 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8104d1a:	2301      	movs	r3, #1
 8104d1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d20:	e39f      	b.n	8105462 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8104d22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8104d26:	2b40      	cmp	r3, #64	; 0x40
 8104d28:	f200 8388 	bhi.w	810543c <UART_SetConfig+0x22ac>
 8104d2c:	a201      	add	r2, pc, #4	; (adr r2, 8104d34 <UART_SetConfig+0x1ba4>)
 8104d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d32:	bf00      	nop
 8104d34:	08104e39 	.word	0x08104e39
 8104d38:	08104eef 	.word	0x08104eef
 8104d3c:	0810543d 	.word	0x0810543d
 8104d40:	0810543d 	.word	0x0810543d
 8104d44:	08104fa5 	.word	0x08104fa5
 8104d48:	0810543d 	.word	0x0810543d
 8104d4c:	0810543d 	.word	0x0810543d
 8104d50:	0810543d 	.word	0x0810543d
 8104d54:	0810505f 	.word	0x0810505f
 8104d58:	0810543d 	.word	0x0810543d
 8104d5c:	0810543d 	.word	0x0810543d
 8104d60:	0810543d 	.word	0x0810543d
 8104d64:	0810543d 	.word	0x0810543d
 8104d68:	0810543d 	.word	0x0810543d
 8104d6c:	0810543d 	.word	0x0810543d
 8104d70:	0810543d 	.word	0x0810543d
 8104d74:	08105119 	.word	0x08105119
 8104d78:	0810543d 	.word	0x0810543d
 8104d7c:	0810543d 	.word	0x0810543d
 8104d80:	0810543d 	.word	0x0810543d
 8104d84:	0810543d 	.word	0x0810543d
 8104d88:	0810543d 	.word	0x0810543d
 8104d8c:	0810543d 	.word	0x0810543d
 8104d90:	0810543d 	.word	0x0810543d
 8104d94:	0810543d 	.word	0x0810543d
 8104d98:	0810543d 	.word	0x0810543d
 8104d9c:	0810543d 	.word	0x0810543d
 8104da0:	0810543d 	.word	0x0810543d
 8104da4:	0810543d 	.word	0x0810543d
 8104da8:	0810543d 	.word	0x0810543d
 8104dac:	0810543d 	.word	0x0810543d
 8104db0:	0810543d 	.word	0x0810543d
 8104db4:	08105289 	.word	0x08105289
 8104db8:	0810543d 	.word	0x0810543d
 8104dbc:	0810543d 	.word	0x0810543d
 8104dc0:	0810543d 	.word	0x0810543d
 8104dc4:	0810543d 	.word	0x0810543d
 8104dc8:	0810543d 	.word	0x0810543d
 8104dcc:	0810543d 	.word	0x0810543d
 8104dd0:	0810543d 	.word	0x0810543d
 8104dd4:	0810543d 	.word	0x0810543d
 8104dd8:	0810543d 	.word	0x0810543d
 8104ddc:	0810543d 	.word	0x0810543d
 8104de0:	0810543d 	.word	0x0810543d
 8104de4:	0810543d 	.word	0x0810543d
 8104de8:	0810543d 	.word	0x0810543d
 8104dec:	0810543d 	.word	0x0810543d
 8104df0:	0810543d 	.word	0x0810543d
 8104df4:	0810543d 	.word	0x0810543d
 8104df8:	0810543d 	.word	0x0810543d
 8104dfc:	0810543d 	.word	0x0810543d
 8104e00:	0810543d 	.word	0x0810543d
 8104e04:	0810543d 	.word	0x0810543d
 8104e08:	0810543d 	.word	0x0810543d
 8104e0c:	0810543d 	.word	0x0810543d
 8104e10:	0810543d 	.word	0x0810543d
 8104e14:	0810543d 	.word	0x0810543d
 8104e18:	0810543d 	.word	0x0810543d
 8104e1c:	0810543d 	.word	0x0810543d
 8104e20:	0810543d 	.word	0x0810543d
 8104e24:	0810543d 	.word	0x0810543d
 8104e28:	0810543d 	.word	0x0810543d
 8104e2c:	0810543d 	.word	0x0810543d
 8104e30:	0810543d 	.word	0x0810543d
 8104e34:	0810537d 	.word	0x0810537d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8104e38:	f7fc fcdc 	bl	81017f4 <HAL_RCC_GetPCLK1Freq>
 8104e3c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e42:	2b00      	cmp	r3, #0
 8104e44:	d044      	beq.n	8104ed0 <UART_SetConfig+0x1d40>
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e4a:	2b01      	cmp	r3, #1
 8104e4c:	d03e      	beq.n	8104ecc <UART_SetConfig+0x1d3c>
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e52:	2b02      	cmp	r3, #2
 8104e54:	d038      	beq.n	8104ec8 <UART_SetConfig+0x1d38>
 8104e56:	687b      	ldr	r3, [r7, #4]
 8104e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e5a:	2b03      	cmp	r3, #3
 8104e5c:	d032      	beq.n	8104ec4 <UART_SetConfig+0x1d34>
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e62:	2b04      	cmp	r3, #4
 8104e64:	d02c      	beq.n	8104ec0 <UART_SetConfig+0x1d30>
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e6a:	2b05      	cmp	r3, #5
 8104e6c:	d026      	beq.n	8104ebc <UART_SetConfig+0x1d2c>
 8104e6e:	687b      	ldr	r3, [r7, #4]
 8104e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e72:	2b06      	cmp	r3, #6
 8104e74:	d020      	beq.n	8104eb8 <UART_SetConfig+0x1d28>
 8104e76:	687b      	ldr	r3, [r7, #4]
 8104e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e7a:	2b07      	cmp	r3, #7
 8104e7c:	d01a      	beq.n	8104eb4 <UART_SetConfig+0x1d24>
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e82:	2b08      	cmp	r3, #8
 8104e84:	d014      	beq.n	8104eb0 <UART_SetConfig+0x1d20>
 8104e86:	687b      	ldr	r3, [r7, #4]
 8104e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e8a:	2b09      	cmp	r3, #9
 8104e8c:	d00e      	beq.n	8104eac <UART_SetConfig+0x1d1c>
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e92:	2b0a      	cmp	r3, #10
 8104e94:	d008      	beq.n	8104ea8 <UART_SetConfig+0x1d18>
 8104e96:	687b      	ldr	r3, [r7, #4]
 8104e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e9a:	2b0b      	cmp	r3, #11
 8104e9c:	d102      	bne.n	8104ea4 <UART_SetConfig+0x1d14>
 8104e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104ea2:	e016      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ea4:	2301      	movs	r3, #1
 8104ea6:	e014      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ea8:	2380      	movs	r3, #128	; 0x80
 8104eaa:	e012      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104eac:	2340      	movs	r3, #64	; 0x40
 8104eae:	e010      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104eb0:	2320      	movs	r3, #32
 8104eb2:	e00e      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104eb4:	2310      	movs	r3, #16
 8104eb6:	e00c      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104eb8:	230c      	movs	r3, #12
 8104eba:	e00a      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ebc:	230a      	movs	r3, #10
 8104ebe:	e008      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ec0:	2308      	movs	r3, #8
 8104ec2:	e006      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ec4:	2306      	movs	r3, #6
 8104ec6:	e004      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ec8:	2304      	movs	r3, #4
 8104eca:	e002      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ecc:	2302      	movs	r3, #2
 8104ece:	e000      	b.n	8104ed2 <UART_SetConfig+0x1d42>
 8104ed0:	2301      	movs	r3, #1
 8104ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	685b      	ldr	r3, [r3, #4]
 8104edc:	085b      	lsrs	r3, r3, #1
 8104ede:	441a      	add	r2, r3
 8104ee0:	687b      	ldr	r3, [r7, #4]
 8104ee2:	685b      	ldr	r3, [r3, #4]
 8104ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8104ee8:	b29b      	uxth	r3, r3
 8104eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8104eec:	e2aa      	b.n	8105444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104eee:	f7fc fc97 	bl	8101820 <HAL_RCC_GetPCLK2Freq>
 8104ef2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104ef4:	687b      	ldr	r3, [r7, #4]
 8104ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ef8:	2b00      	cmp	r3, #0
 8104efa:	d044      	beq.n	8104f86 <UART_SetConfig+0x1df6>
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f00:	2b01      	cmp	r3, #1
 8104f02:	d03e      	beq.n	8104f82 <UART_SetConfig+0x1df2>
 8104f04:	687b      	ldr	r3, [r7, #4]
 8104f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f08:	2b02      	cmp	r3, #2
 8104f0a:	d038      	beq.n	8104f7e <UART_SetConfig+0x1dee>
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f10:	2b03      	cmp	r3, #3
 8104f12:	d032      	beq.n	8104f7a <UART_SetConfig+0x1dea>
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f18:	2b04      	cmp	r3, #4
 8104f1a:	d02c      	beq.n	8104f76 <UART_SetConfig+0x1de6>
 8104f1c:	687b      	ldr	r3, [r7, #4]
 8104f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f20:	2b05      	cmp	r3, #5
 8104f22:	d026      	beq.n	8104f72 <UART_SetConfig+0x1de2>
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f28:	2b06      	cmp	r3, #6
 8104f2a:	d020      	beq.n	8104f6e <UART_SetConfig+0x1dde>
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f30:	2b07      	cmp	r3, #7
 8104f32:	d01a      	beq.n	8104f6a <UART_SetConfig+0x1dda>
 8104f34:	687b      	ldr	r3, [r7, #4]
 8104f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f38:	2b08      	cmp	r3, #8
 8104f3a:	d014      	beq.n	8104f66 <UART_SetConfig+0x1dd6>
 8104f3c:	687b      	ldr	r3, [r7, #4]
 8104f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f40:	2b09      	cmp	r3, #9
 8104f42:	d00e      	beq.n	8104f62 <UART_SetConfig+0x1dd2>
 8104f44:	687b      	ldr	r3, [r7, #4]
 8104f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f48:	2b0a      	cmp	r3, #10
 8104f4a:	d008      	beq.n	8104f5e <UART_SetConfig+0x1dce>
 8104f4c:	687b      	ldr	r3, [r7, #4]
 8104f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f50:	2b0b      	cmp	r3, #11
 8104f52:	d102      	bne.n	8104f5a <UART_SetConfig+0x1dca>
 8104f54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8104f58:	e016      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f5a:	2301      	movs	r3, #1
 8104f5c:	e014      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f5e:	2380      	movs	r3, #128	; 0x80
 8104f60:	e012      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f62:	2340      	movs	r3, #64	; 0x40
 8104f64:	e010      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f66:	2320      	movs	r3, #32
 8104f68:	e00e      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f6a:	2310      	movs	r3, #16
 8104f6c:	e00c      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f6e:	230c      	movs	r3, #12
 8104f70:	e00a      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f72:	230a      	movs	r3, #10
 8104f74:	e008      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f76:	2308      	movs	r3, #8
 8104f78:	e006      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f7a:	2306      	movs	r3, #6
 8104f7c:	e004      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f7e:	2304      	movs	r3, #4
 8104f80:	e002      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f82:	2302      	movs	r3, #2
 8104f84:	e000      	b.n	8104f88 <UART_SetConfig+0x1df8>
 8104f86:	2301      	movs	r3, #1
 8104f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104f8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	685b      	ldr	r3, [r3, #4]
 8104f92:	085b      	lsrs	r3, r3, #1
 8104f94:	441a      	add	r2, r3
 8104f96:	687b      	ldr	r3, [r7, #4]
 8104f98:	685b      	ldr	r3, [r3, #4]
 8104f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8104f9e:	b29b      	uxth	r3, r3
 8104fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8104fa2:	e24f      	b.n	8105444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104fa4:	f107 0318 	add.w	r3, r7, #24
 8104fa8:	4618      	mov	r0, r3
 8104faa:	f7fc fca7 	bl	81018fc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104fae:	69fa      	ldr	r2, [r7, #28]
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fb4:	2b00      	cmp	r3, #0
 8104fb6:	d044      	beq.n	8105042 <UART_SetConfig+0x1eb2>
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fbc:	2b01      	cmp	r3, #1
 8104fbe:	d03e      	beq.n	810503e <UART_SetConfig+0x1eae>
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fc4:	2b02      	cmp	r3, #2
 8104fc6:	d038      	beq.n	810503a <UART_SetConfig+0x1eaa>
 8104fc8:	687b      	ldr	r3, [r7, #4]
 8104fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fcc:	2b03      	cmp	r3, #3
 8104fce:	d032      	beq.n	8105036 <UART_SetConfig+0x1ea6>
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fd4:	2b04      	cmp	r3, #4
 8104fd6:	d02c      	beq.n	8105032 <UART_SetConfig+0x1ea2>
 8104fd8:	687b      	ldr	r3, [r7, #4]
 8104fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fdc:	2b05      	cmp	r3, #5
 8104fde:	d026      	beq.n	810502e <UART_SetConfig+0x1e9e>
 8104fe0:	687b      	ldr	r3, [r7, #4]
 8104fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fe4:	2b06      	cmp	r3, #6
 8104fe6:	d020      	beq.n	810502a <UART_SetConfig+0x1e9a>
 8104fe8:	687b      	ldr	r3, [r7, #4]
 8104fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fec:	2b07      	cmp	r3, #7
 8104fee:	d01a      	beq.n	8105026 <UART_SetConfig+0x1e96>
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ff4:	2b08      	cmp	r3, #8
 8104ff6:	d014      	beq.n	8105022 <UART_SetConfig+0x1e92>
 8104ff8:	687b      	ldr	r3, [r7, #4]
 8104ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ffc:	2b09      	cmp	r3, #9
 8104ffe:	d00e      	beq.n	810501e <UART_SetConfig+0x1e8e>
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105004:	2b0a      	cmp	r3, #10
 8105006:	d008      	beq.n	810501a <UART_SetConfig+0x1e8a>
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810500c:	2b0b      	cmp	r3, #11
 810500e:	d102      	bne.n	8105016 <UART_SetConfig+0x1e86>
 8105010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8105014:	e016      	b.n	8105044 <UART_SetConfig+0x1eb4>
 8105016:	2301      	movs	r3, #1
 8105018:	e014      	b.n	8105044 <UART_SetConfig+0x1eb4>
 810501a:	2380      	movs	r3, #128	; 0x80
 810501c:	e012      	b.n	8105044 <UART_SetConfig+0x1eb4>
 810501e:	2340      	movs	r3, #64	; 0x40
 8105020:	e010      	b.n	8105044 <UART_SetConfig+0x1eb4>
 8105022:	2320      	movs	r3, #32
 8105024:	e00e      	b.n	8105044 <UART_SetConfig+0x1eb4>
 8105026:	2310      	movs	r3, #16
 8105028:	e00c      	b.n	8105044 <UART_SetConfig+0x1eb4>
 810502a:	230c      	movs	r3, #12
 810502c:	e00a      	b.n	8105044 <UART_SetConfig+0x1eb4>
 810502e:	230a      	movs	r3, #10
 8105030:	e008      	b.n	8105044 <UART_SetConfig+0x1eb4>
 8105032:	2308      	movs	r3, #8
 8105034:	e006      	b.n	8105044 <UART_SetConfig+0x1eb4>
 8105036:	2306      	movs	r3, #6
 8105038:	e004      	b.n	8105044 <UART_SetConfig+0x1eb4>
 810503a:	2304      	movs	r3, #4
 810503c:	e002      	b.n	8105044 <UART_SetConfig+0x1eb4>
 810503e:	2302      	movs	r3, #2
 8105040:	e000      	b.n	8105044 <UART_SetConfig+0x1eb4>
 8105042:	2301      	movs	r3, #1
 8105044:	fbb2 f2f3 	udiv	r2, r2, r3
 8105048:	687b      	ldr	r3, [r7, #4]
 810504a:	685b      	ldr	r3, [r3, #4]
 810504c:	085b      	lsrs	r3, r3, #1
 810504e:	441a      	add	r2, r3
 8105050:	687b      	ldr	r3, [r7, #4]
 8105052:	685b      	ldr	r3, [r3, #4]
 8105054:	fbb2 f3f3 	udiv	r3, r2, r3
 8105058:	b29b      	uxth	r3, r3
 810505a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810505c:	e1f2      	b.n	8105444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810505e:	f107 030c 	add.w	r3, r7, #12
 8105062:	4618      	mov	r0, r3
 8105064:	f7fc fd96 	bl	8101b94 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105068:	693a      	ldr	r2, [r7, #16]
 810506a:	687b      	ldr	r3, [r7, #4]
 810506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810506e:	2b00      	cmp	r3, #0
 8105070:	d044      	beq.n	81050fc <UART_SetConfig+0x1f6c>
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105076:	2b01      	cmp	r3, #1
 8105078:	d03e      	beq.n	81050f8 <UART_SetConfig+0x1f68>
 810507a:	687b      	ldr	r3, [r7, #4]
 810507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810507e:	2b02      	cmp	r3, #2
 8105080:	d038      	beq.n	81050f4 <UART_SetConfig+0x1f64>
 8105082:	687b      	ldr	r3, [r7, #4]
 8105084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105086:	2b03      	cmp	r3, #3
 8105088:	d032      	beq.n	81050f0 <UART_SetConfig+0x1f60>
 810508a:	687b      	ldr	r3, [r7, #4]
 810508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810508e:	2b04      	cmp	r3, #4
 8105090:	d02c      	beq.n	81050ec <UART_SetConfig+0x1f5c>
 8105092:	687b      	ldr	r3, [r7, #4]
 8105094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105096:	2b05      	cmp	r3, #5
 8105098:	d026      	beq.n	81050e8 <UART_SetConfig+0x1f58>
 810509a:	687b      	ldr	r3, [r7, #4]
 810509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810509e:	2b06      	cmp	r3, #6
 81050a0:	d020      	beq.n	81050e4 <UART_SetConfig+0x1f54>
 81050a2:	687b      	ldr	r3, [r7, #4]
 81050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050a6:	2b07      	cmp	r3, #7
 81050a8:	d01a      	beq.n	81050e0 <UART_SetConfig+0x1f50>
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050ae:	2b08      	cmp	r3, #8
 81050b0:	d014      	beq.n	81050dc <UART_SetConfig+0x1f4c>
 81050b2:	687b      	ldr	r3, [r7, #4]
 81050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050b6:	2b09      	cmp	r3, #9
 81050b8:	d00e      	beq.n	81050d8 <UART_SetConfig+0x1f48>
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050be:	2b0a      	cmp	r3, #10
 81050c0:	d008      	beq.n	81050d4 <UART_SetConfig+0x1f44>
 81050c2:	687b      	ldr	r3, [r7, #4]
 81050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050c6:	2b0b      	cmp	r3, #11
 81050c8:	d102      	bne.n	81050d0 <UART_SetConfig+0x1f40>
 81050ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 81050ce:	e016      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050d0:	2301      	movs	r3, #1
 81050d2:	e014      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050d4:	2380      	movs	r3, #128	; 0x80
 81050d6:	e012      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050d8:	2340      	movs	r3, #64	; 0x40
 81050da:	e010      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050dc:	2320      	movs	r3, #32
 81050de:	e00e      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050e0:	2310      	movs	r3, #16
 81050e2:	e00c      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050e4:	230c      	movs	r3, #12
 81050e6:	e00a      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050e8:	230a      	movs	r3, #10
 81050ea:	e008      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050ec:	2308      	movs	r3, #8
 81050ee:	e006      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050f0:	2306      	movs	r3, #6
 81050f2:	e004      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050f4:	2304      	movs	r3, #4
 81050f6:	e002      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050f8:	2302      	movs	r3, #2
 81050fa:	e000      	b.n	81050fe <UART_SetConfig+0x1f6e>
 81050fc:	2301      	movs	r3, #1
 81050fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	685b      	ldr	r3, [r3, #4]
 8105106:	085b      	lsrs	r3, r3, #1
 8105108:	441a      	add	r2, r3
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	685b      	ldr	r3, [r3, #4]
 810510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105112:	b29b      	uxth	r3, r3
 8105114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8105116:	e195      	b.n	8105444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105118:	4b87      	ldr	r3, [pc, #540]	; (8105338 <UART_SetConfig+0x21a8>)
 810511a:	681b      	ldr	r3, [r3, #0]
 810511c:	f003 0320 	and.w	r3, r3, #32
 8105120:	2b00      	cmp	r3, #0
 8105122:	d05d      	beq.n	81051e0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105124:	4b84      	ldr	r3, [pc, #528]	; (8105338 <UART_SetConfig+0x21a8>)
 8105126:	681b      	ldr	r3, [r3, #0]
 8105128:	08db      	lsrs	r3, r3, #3
 810512a:	f003 0303 	and.w	r3, r3, #3
 810512e:	4a83      	ldr	r2, [pc, #524]	; (810533c <UART_SetConfig+0x21ac>)
 8105130:	40da      	lsrs	r2, r3
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105136:	2b00      	cmp	r3, #0
 8105138:	d044      	beq.n	81051c4 <UART_SetConfig+0x2034>
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810513e:	2b01      	cmp	r3, #1
 8105140:	d03e      	beq.n	81051c0 <UART_SetConfig+0x2030>
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105146:	2b02      	cmp	r3, #2
 8105148:	d038      	beq.n	81051bc <UART_SetConfig+0x202c>
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810514e:	2b03      	cmp	r3, #3
 8105150:	d032      	beq.n	81051b8 <UART_SetConfig+0x2028>
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105156:	2b04      	cmp	r3, #4
 8105158:	d02c      	beq.n	81051b4 <UART_SetConfig+0x2024>
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810515e:	2b05      	cmp	r3, #5
 8105160:	d026      	beq.n	81051b0 <UART_SetConfig+0x2020>
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105166:	2b06      	cmp	r3, #6
 8105168:	d020      	beq.n	81051ac <UART_SetConfig+0x201c>
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810516e:	2b07      	cmp	r3, #7
 8105170:	d01a      	beq.n	81051a8 <UART_SetConfig+0x2018>
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105176:	2b08      	cmp	r3, #8
 8105178:	d014      	beq.n	81051a4 <UART_SetConfig+0x2014>
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810517e:	2b09      	cmp	r3, #9
 8105180:	d00e      	beq.n	81051a0 <UART_SetConfig+0x2010>
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105186:	2b0a      	cmp	r3, #10
 8105188:	d008      	beq.n	810519c <UART_SetConfig+0x200c>
 810518a:	687b      	ldr	r3, [r7, #4]
 810518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810518e:	2b0b      	cmp	r3, #11
 8105190:	d102      	bne.n	8105198 <UART_SetConfig+0x2008>
 8105192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8105196:	e016      	b.n	81051c6 <UART_SetConfig+0x2036>
 8105198:	2301      	movs	r3, #1
 810519a:	e014      	b.n	81051c6 <UART_SetConfig+0x2036>
 810519c:	2380      	movs	r3, #128	; 0x80
 810519e:	e012      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051a0:	2340      	movs	r3, #64	; 0x40
 81051a2:	e010      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051a4:	2320      	movs	r3, #32
 81051a6:	e00e      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051a8:	2310      	movs	r3, #16
 81051aa:	e00c      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051ac:	230c      	movs	r3, #12
 81051ae:	e00a      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051b0:	230a      	movs	r3, #10
 81051b2:	e008      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051b4:	2308      	movs	r3, #8
 81051b6:	e006      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051b8:	2306      	movs	r3, #6
 81051ba:	e004      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051bc:	2304      	movs	r3, #4
 81051be:	e002      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051c0:	2302      	movs	r3, #2
 81051c2:	e000      	b.n	81051c6 <UART_SetConfig+0x2036>
 81051c4:	2301      	movs	r3, #1
 81051c6:	fbb2 f2f3 	udiv	r2, r2, r3
 81051ca:	687b      	ldr	r3, [r7, #4]
 81051cc:	685b      	ldr	r3, [r3, #4]
 81051ce:	085b      	lsrs	r3, r3, #1
 81051d0:	441a      	add	r2, r3
 81051d2:	687b      	ldr	r3, [r7, #4]
 81051d4:	685b      	ldr	r3, [r3, #4]
 81051d6:	fbb2 f3f3 	udiv	r3, r2, r3
 81051da:	b29b      	uxth	r3, r3
 81051dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 81051de:	e131      	b.n	8105444 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051e4:	2b00      	cmp	r3, #0
 81051e6:	d043      	beq.n	8105270 <UART_SetConfig+0x20e0>
 81051e8:	687b      	ldr	r3, [r7, #4]
 81051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051ec:	2b01      	cmp	r3, #1
 81051ee:	d03d      	beq.n	810526c <UART_SetConfig+0x20dc>
 81051f0:	687b      	ldr	r3, [r7, #4]
 81051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051f4:	2b02      	cmp	r3, #2
 81051f6:	d037      	beq.n	8105268 <UART_SetConfig+0x20d8>
 81051f8:	687b      	ldr	r3, [r7, #4]
 81051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051fc:	2b03      	cmp	r3, #3
 81051fe:	d031      	beq.n	8105264 <UART_SetConfig+0x20d4>
 8105200:	687b      	ldr	r3, [r7, #4]
 8105202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105204:	2b04      	cmp	r3, #4
 8105206:	d02b      	beq.n	8105260 <UART_SetConfig+0x20d0>
 8105208:	687b      	ldr	r3, [r7, #4]
 810520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810520c:	2b05      	cmp	r3, #5
 810520e:	d025      	beq.n	810525c <UART_SetConfig+0x20cc>
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105214:	2b06      	cmp	r3, #6
 8105216:	d01f      	beq.n	8105258 <UART_SetConfig+0x20c8>
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810521c:	2b07      	cmp	r3, #7
 810521e:	d019      	beq.n	8105254 <UART_SetConfig+0x20c4>
 8105220:	687b      	ldr	r3, [r7, #4]
 8105222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105224:	2b08      	cmp	r3, #8
 8105226:	d013      	beq.n	8105250 <UART_SetConfig+0x20c0>
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810522c:	2b09      	cmp	r3, #9
 810522e:	d00d      	beq.n	810524c <UART_SetConfig+0x20bc>
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105234:	2b0a      	cmp	r3, #10
 8105236:	d007      	beq.n	8105248 <UART_SetConfig+0x20b8>
 8105238:	687b      	ldr	r3, [r7, #4]
 810523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810523c:	2b0b      	cmp	r3, #11
 810523e:	d101      	bne.n	8105244 <UART_SetConfig+0x20b4>
 8105240:	4b3f      	ldr	r3, [pc, #252]	; (8105340 <UART_SetConfig+0x21b0>)
 8105242:	e016      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105244:	4b3d      	ldr	r3, [pc, #244]	; (810533c <UART_SetConfig+0x21ac>)
 8105246:	e014      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105248:	4b3e      	ldr	r3, [pc, #248]	; (8105344 <UART_SetConfig+0x21b4>)
 810524a:	e012      	b.n	8105272 <UART_SetConfig+0x20e2>
 810524c:	4b3e      	ldr	r3, [pc, #248]	; (8105348 <UART_SetConfig+0x21b8>)
 810524e:	e010      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105250:	4b3e      	ldr	r3, [pc, #248]	; (810534c <UART_SetConfig+0x21bc>)
 8105252:	e00e      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105254:	4b3e      	ldr	r3, [pc, #248]	; (8105350 <UART_SetConfig+0x21c0>)
 8105256:	e00c      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105258:	4b3e      	ldr	r3, [pc, #248]	; (8105354 <UART_SetConfig+0x21c4>)
 810525a:	e00a      	b.n	8105272 <UART_SetConfig+0x20e2>
 810525c:	4b3e      	ldr	r3, [pc, #248]	; (8105358 <UART_SetConfig+0x21c8>)
 810525e:	e008      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105260:	4b3e      	ldr	r3, [pc, #248]	; (810535c <UART_SetConfig+0x21cc>)
 8105262:	e006      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105264:	4b3e      	ldr	r3, [pc, #248]	; (8105360 <UART_SetConfig+0x21d0>)
 8105266:	e004      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105268:	4b3e      	ldr	r3, [pc, #248]	; (8105364 <UART_SetConfig+0x21d4>)
 810526a:	e002      	b.n	8105272 <UART_SetConfig+0x20e2>
 810526c:	4b3e      	ldr	r3, [pc, #248]	; (8105368 <UART_SetConfig+0x21d8>)
 810526e:	e000      	b.n	8105272 <UART_SetConfig+0x20e2>
 8105270:	4b32      	ldr	r3, [pc, #200]	; (810533c <UART_SetConfig+0x21ac>)
 8105272:	687a      	ldr	r2, [r7, #4]
 8105274:	6852      	ldr	r2, [r2, #4]
 8105276:	0852      	lsrs	r2, r2, #1
 8105278:	441a      	add	r2, r3
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	685b      	ldr	r3, [r3, #4]
 810527e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105282:	b29b      	uxth	r3, r3
 8105284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8105286:	e0dd      	b.n	8105444 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810528c:	2b00      	cmp	r3, #0
 810528e:	d046      	beq.n	810531e <UART_SetConfig+0x218e>
 8105290:	687b      	ldr	r3, [r7, #4]
 8105292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105294:	2b01      	cmp	r3, #1
 8105296:	d040      	beq.n	810531a <UART_SetConfig+0x218a>
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810529c:	2b02      	cmp	r3, #2
 810529e:	d03a      	beq.n	8105316 <UART_SetConfig+0x2186>
 81052a0:	687b      	ldr	r3, [r7, #4]
 81052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052a4:	2b03      	cmp	r3, #3
 81052a6:	d034      	beq.n	8105312 <UART_SetConfig+0x2182>
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052ac:	2b04      	cmp	r3, #4
 81052ae:	d02e      	beq.n	810530e <UART_SetConfig+0x217e>
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052b4:	2b05      	cmp	r3, #5
 81052b6:	d028      	beq.n	810530a <UART_SetConfig+0x217a>
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052bc:	2b06      	cmp	r3, #6
 81052be:	d022      	beq.n	8105306 <UART_SetConfig+0x2176>
 81052c0:	687b      	ldr	r3, [r7, #4]
 81052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052c4:	2b07      	cmp	r3, #7
 81052c6:	d01c      	beq.n	8105302 <UART_SetConfig+0x2172>
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052cc:	2b08      	cmp	r3, #8
 81052ce:	d016      	beq.n	81052fe <UART_SetConfig+0x216e>
 81052d0:	687b      	ldr	r3, [r7, #4]
 81052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052d4:	2b09      	cmp	r3, #9
 81052d6:	d00f      	beq.n	81052f8 <UART_SetConfig+0x2168>
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052dc:	2b0a      	cmp	r3, #10
 81052de:	d008      	beq.n	81052f2 <UART_SetConfig+0x2162>
 81052e0:	687b      	ldr	r3, [r7, #4]
 81052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052e4:	2b0b      	cmp	r3, #11
 81052e6:	d102      	bne.n	81052ee <UART_SetConfig+0x215e>
 81052e8:	f643 5309 	movw	r3, #15625	; 0x3d09
 81052ec:	e018      	b.n	8105320 <UART_SetConfig+0x2190>
 81052ee:	4b18      	ldr	r3, [pc, #96]	; (8105350 <UART_SetConfig+0x21c0>)
 81052f0:	e016      	b.n	8105320 <UART_SetConfig+0x2190>
 81052f2:	f647 2312 	movw	r3, #31250	; 0x7a12
 81052f6:	e013      	b.n	8105320 <UART_SetConfig+0x2190>
 81052f8:	f24f 4324 	movw	r3, #62500	; 0xf424
 81052fc:	e010      	b.n	8105320 <UART_SetConfig+0x2190>
 81052fe:	4b1b      	ldr	r3, [pc, #108]	; (810536c <UART_SetConfig+0x21dc>)
 8105300:	e00e      	b.n	8105320 <UART_SetConfig+0x2190>
 8105302:	4b0f      	ldr	r3, [pc, #60]	; (8105340 <UART_SetConfig+0x21b0>)
 8105304:	e00c      	b.n	8105320 <UART_SetConfig+0x2190>
 8105306:	4b1a      	ldr	r3, [pc, #104]	; (8105370 <UART_SetConfig+0x21e0>)
 8105308:	e00a      	b.n	8105320 <UART_SetConfig+0x2190>
 810530a:	4b1a      	ldr	r3, [pc, #104]	; (8105374 <UART_SetConfig+0x21e4>)
 810530c:	e008      	b.n	8105320 <UART_SetConfig+0x2190>
 810530e:	4b0d      	ldr	r3, [pc, #52]	; (8105344 <UART_SetConfig+0x21b4>)
 8105310:	e006      	b.n	8105320 <UART_SetConfig+0x2190>
 8105312:	4b19      	ldr	r3, [pc, #100]	; (8105378 <UART_SetConfig+0x21e8>)
 8105314:	e004      	b.n	8105320 <UART_SetConfig+0x2190>
 8105316:	4b0c      	ldr	r3, [pc, #48]	; (8105348 <UART_SetConfig+0x21b8>)
 8105318:	e002      	b.n	8105320 <UART_SetConfig+0x2190>
 810531a:	4b0c      	ldr	r3, [pc, #48]	; (810534c <UART_SetConfig+0x21bc>)
 810531c:	e000      	b.n	8105320 <UART_SetConfig+0x2190>
 810531e:	4b0c      	ldr	r3, [pc, #48]	; (8105350 <UART_SetConfig+0x21c0>)
 8105320:	687a      	ldr	r2, [r7, #4]
 8105322:	6852      	ldr	r2, [r2, #4]
 8105324:	0852      	lsrs	r2, r2, #1
 8105326:	441a      	add	r2, r3
 8105328:	687b      	ldr	r3, [r7, #4]
 810532a:	685b      	ldr	r3, [r3, #4]
 810532c:	fbb2 f3f3 	udiv	r3, r2, r3
 8105330:	b29b      	uxth	r3, r3
 8105332:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8105334:	e086      	b.n	8105444 <UART_SetConfig+0x22b4>
 8105336:	bf00      	nop
 8105338:	58024400 	.word	0x58024400
 810533c:	03d09000 	.word	0x03d09000
 8105340:	0003d090 	.word	0x0003d090
 8105344:	0007a120 	.word	0x0007a120
 8105348:	000f4240 	.word	0x000f4240
 810534c:	001e8480 	.word	0x001e8480
 8105350:	003d0900 	.word	0x003d0900
 8105354:	00516155 	.word	0x00516155
 8105358:	0061a800 	.word	0x0061a800
 810535c:	007a1200 	.word	0x007a1200
 8105360:	00a2c2aa 	.word	0x00a2c2aa
 8105364:	00f42400 	.word	0x00f42400
 8105368:	01e84800 	.word	0x01e84800
 810536c:	0001e848 	.word	0x0001e848
 8105370:	00051615 	.word	0x00051615
 8105374:	00061a80 	.word	0x00061a80
 8105378:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105380:	2b00      	cmp	r3, #0
 8105382:	d04e      	beq.n	8105422 <UART_SetConfig+0x2292>
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105388:	2b01      	cmp	r3, #1
 810538a:	d047      	beq.n	810541c <UART_SetConfig+0x228c>
 810538c:	687b      	ldr	r3, [r7, #4]
 810538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105390:	2b02      	cmp	r3, #2
 8105392:	d040      	beq.n	8105416 <UART_SetConfig+0x2286>
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105398:	2b03      	cmp	r3, #3
 810539a:	d039      	beq.n	8105410 <UART_SetConfig+0x2280>
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053a0:	2b04      	cmp	r3, #4
 81053a2:	d032      	beq.n	810540a <UART_SetConfig+0x227a>
 81053a4:	687b      	ldr	r3, [r7, #4]
 81053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053a8:	2b05      	cmp	r3, #5
 81053aa:	d02b      	beq.n	8105404 <UART_SetConfig+0x2274>
 81053ac:	687b      	ldr	r3, [r7, #4]
 81053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053b0:	2b06      	cmp	r3, #6
 81053b2:	d024      	beq.n	81053fe <UART_SetConfig+0x226e>
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053b8:	2b07      	cmp	r3, #7
 81053ba:	d01d      	beq.n	81053f8 <UART_SetConfig+0x2268>
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053c0:	2b08      	cmp	r3, #8
 81053c2:	d016      	beq.n	81053f2 <UART_SetConfig+0x2262>
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053c8:	2b09      	cmp	r3, #9
 81053ca:	d00f      	beq.n	81053ec <UART_SetConfig+0x225c>
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053d0:	2b0a      	cmp	r3, #10
 81053d2:	d008      	beq.n	81053e6 <UART_SetConfig+0x2256>
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053d8:	2b0b      	cmp	r3, #11
 81053da:	d101      	bne.n	81053e0 <UART_SetConfig+0x2250>
 81053dc:	2380      	movs	r3, #128	; 0x80
 81053de:	e022      	b.n	8105426 <UART_SetConfig+0x2296>
 81053e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81053e4:	e01f      	b.n	8105426 <UART_SetConfig+0x2296>
 81053e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 81053ea:	e01c      	b.n	8105426 <UART_SetConfig+0x2296>
 81053ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 81053f0:	e019      	b.n	8105426 <UART_SetConfig+0x2296>
 81053f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81053f6:	e016      	b.n	8105426 <UART_SetConfig+0x2296>
 81053f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81053fc:	e013      	b.n	8105426 <UART_SetConfig+0x2296>
 81053fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8105402:	e010      	b.n	8105426 <UART_SetConfig+0x2296>
 8105404:	f640 43cc 	movw	r3, #3276	; 0xccc
 8105408:	e00d      	b.n	8105426 <UART_SetConfig+0x2296>
 810540a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810540e:	e00a      	b.n	8105426 <UART_SetConfig+0x2296>
 8105410:	f241 5355 	movw	r3, #5461	; 0x1555
 8105414:	e007      	b.n	8105426 <UART_SetConfig+0x2296>
 8105416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810541a:	e004      	b.n	8105426 <UART_SetConfig+0x2296>
 810541c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8105420:	e001      	b.n	8105426 <UART_SetConfig+0x2296>
 8105422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105426:	687a      	ldr	r2, [r7, #4]
 8105428:	6852      	ldr	r2, [r2, #4]
 810542a:	0852      	lsrs	r2, r2, #1
 810542c:	441a      	add	r2, r3
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	685b      	ldr	r3, [r3, #4]
 8105432:	fbb2 f3f3 	udiv	r3, r2, r3
 8105436:	b29b      	uxth	r3, r3
 8105438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 810543a:	e003      	b.n	8105444 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 810543c:	2301      	movs	r3, #1
 810543e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8105442:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105446:	2b0f      	cmp	r3, #15
 8105448:	d908      	bls.n	810545c <UART_SetConfig+0x22cc>
 810544a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810544c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105450:	d204      	bcs.n	810545c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	681b      	ldr	r3, [r3, #0]
 8105456:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105458:	60da      	str	r2, [r3, #12]
 810545a:	e002      	b.n	8105462 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 810545c:	2301      	movs	r3, #1
 810545e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105462:	687b      	ldr	r3, [r7, #4]
 8105464:	2201      	movs	r2, #1
 8105466:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810546a:	687b      	ldr	r3, [r7, #4]
 810546c:	2201      	movs	r2, #1
 810546e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105472:	687b      	ldr	r3, [r7, #4]
 8105474:	2200      	movs	r2, #0
 8105476:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	2200      	movs	r2, #0
 810547c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 810547e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8105482:	4618      	mov	r0, r3
 8105484:	3740      	adds	r7, #64	; 0x40
 8105486:	46bd      	mov	sp, r7
 8105488:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0810548c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810548c:	b480      	push	{r7}
 810548e:	b083      	sub	sp, #12
 8105490:	af00      	add	r7, sp, #0
 8105492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105498:	f003 0301 	and.w	r3, r3, #1
 810549c:	2b00      	cmp	r3, #0
 810549e:	d00a      	beq.n	81054b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81054a0:	687b      	ldr	r3, [r7, #4]
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	685b      	ldr	r3, [r3, #4]
 81054a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81054ae:	687b      	ldr	r3, [r7, #4]
 81054b0:	681b      	ldr	r3, [r3, #0]
 81054b2:	430a      	orrs	r2, r1
 81054b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81054b6:	687b      	ldr	r3, [r7, #4]
 81054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054ba:	f003 0302 	and.w	r3, r3, #2
 81054be:	2b00      	cmp	r3, #0
 81054c0:	d00a      	beq.n	81054d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81054c2:	687b      	ldr	r3, [r7, #4]
 81054c4:	681b      	ldr	r3, [r3, #0]
 81054c6:	685b      	ldr	r3, [r3, #4]
 81054c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81054cc:	687b      	ldr	r3, [r7, #4]
 81054ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	430a      	orrs	r2, r1
 81054d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054dc:	f003 0304 	and.w	r3, r3, #4
 81054e0:	2b00      	cmp	r3, #0
 81054e2:	d00a      	beq.n	81054fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81054e4:	687b      	ldr	r3, [r7, #4]
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	685b      	ldr	r3, [r3, #4]
 81054ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81054f2:	687b      	ldr	r3, [r7, #4]
 81054f4:	681b      	ldr	r3, [r3, #0]
 81054f6:	430a      	orrs	r2, r1
 81054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81054fa:	687b      	ldr	r3, [r7, #4]
 81054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81054fe:	f003 0308 	and.w	r3, r3, #8
 8105502:	2b00      	cmp	r3, #0
 8105504:	d00a      	beq.n	810551c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	685b      	ldr	r3, [r3, #4]
 810550c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105510:	687b      	ldr	r3, [r7, #4]
 8105512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	430a      	orrs	r2, r1
 810551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810551c:	687b      	ldr	r3, [r7, #4]
 810551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105520:	f003 0310 	and.w	r3, r3, #16
 8105524:	2b00      	cmp	r3, #0
 8105526:	d00a      	beq.n	810553e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	681b      	ldr	r3, [r3, #0]
 810552c:	689b      	ldr	r3, [r3, #8]
 810552e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8105532:	687b      	ldr	r3, [r7, #4]
 8105534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8105536:	687b      	ldr	r3, [r7, #4]
 8105538:	681b      	ldr	r3, [r3, #0]
 810553a:	430a      	orrs	r2, r1
 810553c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105542:	f003 0320 	and.w	r3, r3, #32
 8105546:	2b00      	cmp	r3, #0
 8105548:	d00a      	beq.n	8105560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	681b      	ldr	r3, [r3, #0]
 810554e:	689b      	ldr	r3, [r3, #8]
 8105550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	430a      	orrs	r2, r1
 810555e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105568:	2b00      	cmp	r3, #0
 810556a:	d01a      	beq.n	81055a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	681b      	ldr	r3, [r3, #0]
 8105570:	685b      	ldr	r3, [r3, #4]
 8105572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8105576:	687b      	ldr	r3, [r7, #4]
 8105578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810557a:	687b      	ldr	r3, [r7, #4]
 810557c:	681b      	ldr	r3, [r3, #0]
 810557e:	430a      	orrs	r2, r1
 8105580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810558a:	d10a      	bne.n	81055a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	681b      	ldr	r3, [r3, #0]
 8105590:	685b      	ldr	r3, [r3, #4]
 8105592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	430a      	orrs	r2, r1
 81055a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81055a2:	687b      	ldr	r3, [r7, #4]
 81055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81055aa:	2b00      	cmp	r3, #0
 81055ac:	d00a      	beq.n	81055c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81055ae:	687b      	ldr	r3, [r7, #4]
 81055b0:	681b      	ldr	r3, [r3, #0]
 81055b2:	685b      	ldr	r3, [r3, #4]
 81055b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	681b      	ldr	r3, [r3, #0]
 81055c0:	430a      	orrs	r2, r1
 81055c2:	605a      	str	r2, [r3, #4]
  }
}
 81055c4:	bf00      	nop
 81055c6:	370c      	adds	r7, #12
 81055c8:	46bd      	mov	sp, r7
 81055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055ce:	4770      	bx	lr

081055d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81055d0:	b580      	push	{r7, lr}
 81055d2:	b086      	sub	sp, #24
 81055d4:	af02      	add	r7, sp, #8
 81055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	2200      	movs	r2, #0
 81055dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 81055e0:	f7fb fbec 	bl	8100dbc <HAL_GetTick>
 81055e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81055e6:	687b      	ldr	r3, [r7, #4]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	f003 0308 	and.w	r3, r3, #8
 81055f0:	2b08      	cmp	r3, #8
 81055f2:	d10e      	bne.n	8105612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81055f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81055f8:	9300      	str	r3, [sp, #0]
 81055fa:	68fb      	ldr	r3, [r7, #12]
 81055fc:	2200      	movs	r2, #0
 81055fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105602:	6878      	ldr	r0, [r7, #4]
 8105604:	f000 f82c 	bl	8105660 <UART_WaitOnFlagUntilTimeout>
 8105608:	4603      	mov	r3, r0
 810560a:	2b00      	cmp	r3, #0
 810560c:	d001      	beq.n	8105612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810560e:	2303      	movs	r3, #3
 8105610:	e022      	b.n	8105658 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105612:	687b      	ldr	r3, [r7, #4]
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	f003 0304 	and.w	r3, r3, #4
 810561c:	2b04      	cmp	r3, #4
 810561e:	d10e      	bne.n	810563e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105620:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105624:	9300      	str	r3, [sp, #0]
 8105626:	68fb      	ldr	r3, [r7, #12]
 8105628:	2200      	movs	r2, #0
 810562a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810562e:	6878      	ldr	r0, [r7, #4]
 8105630:	f000 f816 	bl	8105660 <UART_WaitOnFlagUntilTimeout>
 8105634:	4603      	mov	r3, r0
 8105636:	2b00      	cmp	r3, #0
 8105638:	d001      	beq.n	810563e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810563a:	2303      	movs	r3, #3
 810563c:	e00c      	b.n	8105658 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810563e:	687b      	ldr	r3, [r7, #4]
 8105640:	2220      	movs	r2, #32
 8105642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	2220      	movs	r2, #32
 810564a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 810564e:	687b      	ldr	r3, [r7, #4]
 8105650:	2200      	movs	r2, #0
 8105652:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105656:	2300      	movs	r3, #0
}
 8105658:	4618      	mov	r0, r3
 810565a:	3710      	adds	r7, #16
 810565c:	46bd      	mov	sp, r7
 810565e:	bd80      	pop	{r7, pc}

08105660 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105660:	b580      	push	{r7, lr}
 8105662:	b084      	sub	sp, #16
 8105664:	af00      	add	r7, sp, #0
 8105666:	60f8      	str	r0, [r7, #12]
 8105668:	60b9      	str	r1, [r7, #8]
 810566a:	603b      	str	r3, [r7, #0]
 810566c:	4613      	mov	r3, r2
 810566e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105670:	e062      	b.n	8105738 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105672:	69bb      	ldr	r3, [r7, #24]
 8105674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105678:	d05e      	beq.n	8105738 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810567a:	f7fb fb9f 	bl	8100dbc <HAL_GetTick>
 810567e:	4602      	mov	r2, r0
 8105680:	683b      	ldr	r3, [r7, #0]
 8105682:	1ad3      	subs	r3, r2, r3
 8105684:	69ba      	ldr	r2, [r7, #24]
 8105686:	429a      	cmp	r2, r3
 8105688:	d302      	bcc.n	8105690 <UART_WaitOnFlagUntilTimeout+0x30>
 810568a:	69bb      	ldr	r3, [r7, #24]
 810568c:	2b00      	cmp	r3, #0
 810568e:	d11d      	bne.n	81056cc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8105690:	68fb      	ldr	r3, [r7, #12]
 8105692:	681b      	ldr	r3, [r3, #0]
 8105694:	681a      	ldr	r2, [r3, #0]
 8105696:	68fb      	ldr	r3, [r7, #12]
 8105698:	681b      	ldr	r3, [r3, #0]
 810569a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810569e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81056a0:	68fb      	ldr	r3, [r7, #12]
 81056a2:	681b      	ldr	r3, [r3, #0]
 81056a4:	689a      	ldr	r2, [r3, #8]
 81056a6:	68fb      	ldr	r3, [r7, #12]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	f022 0201 	bic.w	r2, r2, #1
 81056ae:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 81056b0:	68fb      	ldr	r3, [r7, #12]
 81056b2:	2220      	movs	r2, #32
 81056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 81056b8:	68fb      	ldr	r3, [r7, #12]
 81056ba:	2220      	movs	r2, #32
 81056bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 81056c0:	68fb      	ldr	r3, [r7, #12]
 81056c2:	2200      	movs	r2, #0
 81056c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 81056c8:	2303      	movs	r3, #3
 81056ca:	e045      	b.n	8105758 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81056cc:	68fb      	ldr	r3, [r7, #12]
 81056ce:	681b      	ldr	r3, [r3, #0]
 81056d0:	681b      	ldr	r3, [r3, #0]
 81056d2:	f003 0304 	and.w	r3, r3, #4
 81056d6:	2b00      	cmp	r3, #0
 81056d8:	d02e      	beq.n	8105738 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81056da:	68fb      	ldr	r3, [r7, #12]
 81056dc:	681b      	ldr	r3, [r3, #0]
 81056de:	69db      	ldr	r3, [r3, #28]
 81056e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81056e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81056e8:	d126      	bne.n	8105738 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81056ea:	68fb      	ldr	r3, [r7, #12]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81056f2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81056f4:	68fb      	ldr	r3, [r7, #12]
 81056f6:	681b      	ldr	r3, [r3, #0]
 81056f8:	681a      	ldr	r2, [r3, #0]
 81056fa:	68fb      	ldr	r3, [r7, #12]
 81056fc:	681b      	ldr	r3, [r3, #0]
 81056fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8105702:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	681b      	ldr	r3, [r3, #0]
 8105708:	689a      	ldr	r2, [r3, #8]
 810570a:	68fb      	ldr	r3, [r7, #12]
 810570c:	681b      	ldr	r3, [r3, #0]
 810570e:	f022 0201 	bic.w	r2, r2, #1
 8105712:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8105714:	68fb      	ldr	r3, [r7, #12]
 8105716:	2220      	movs	r2, #32
 8105718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	2220      	movs	r2, #32
 8105720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105724:	68fb      	ldr	r3, [r7, #12]
 8105726:	2220      	movs	r2, #32
 8105728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	2200      	movs	r2, #0
 8105730:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8105734:	2303      	movs	r3, #3
 8105736:	e00f      	b.n	8105758 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105738:	68fb      	ldr	r3, [r7, #12]
 810573a:	681b      	ldr	r3, [r3, #0]
 810573c:	69da      	ldr	r2, [r3, #28]
 810573e:	68bb      	ldr	r3, [r7, #8]
 8105740:	4013      	ands	r3, r2
 8105742:	68ba      	ldr	r2, [r7, #8]
 8105744:	429a      	cmp	r2, r3
 8105746:	bf0c      	ite	eq
 8105748:	2301      	moveq	r3, #1
 810574a:	2300      	movne	r3, #0
 810574c:	b2db      	uxtb	r3, r3
 810574e:	461a      	mov	r2, r3
 8105750:	79fb      	ldrb	r3, [r7, #7]
 8105752:	429a      	cmp	r2, r3
 8105754:	d08d      	beq.n	8105672 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105756:	2300      	movs	r3, #0
}
 8105758:	4618      	mov	r0, r3
 810575a:	3710      	adds	r7, #16
 810575c:	46bd      	mov	sp, r7
 810575e:	bd80      	pop	{r7, pc}

08105760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105760:	b480      	push	{r7}
 8105762:	b085      	sub	sp, #20
 8105764:	af00      	add	r7, sp, #0
 8105766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810576e:	2b01      	cmp	r3, #1
 8105770:	d101      	bne.n	8105776 <HAL_UARTEx_DisableFifoMode+0x16>
 8105772:	2302      	movs	r3, #2
 8105774:	e027      	b.n	81057c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	2201      	movs	r2, #1
 810577a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	2224      	movs	r2, #36	; 0x24
 8105782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105786:	687b      	ldr	r3, [r7, #4]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	681b      	ldr	r3, [r3, #0]
 810578c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	681b      	ldr	r3, [r3, #0]
 8105792:	681a      	ldr	r2, [r3, #0]
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	681b      	ldr	r3, [r3, #0]
 8105798:	f022 0201 	bic.w	r2, r2, #1
 810579c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810579e:	68fb      	ldr	r3, [r7, #12]
 81057a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81057a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	2200      	movs	r2, #0
 81057aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	68fa      	ldr	r2, [r7, #12]
 81057b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	2220      	movs	r2, #32
 81057b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81057bc:	687b      	ldr	r3, [r7, #4]
 81057be:	2200      	movs	r2, #0
 81057c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81057c4:	2300      	movs	r3, #0
}
 81057c6:	4618      	mov	r0, r3
 81057c8:	3714      	adds	r7, #20
 81057ca:	46bd      	mov	sp, r7
 81057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057d0:	4770      	bx	lr

081057d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81057d2:	b580      	push	{r7, lr}
 81057d4:	b084      	sub	sp, #16
 81057d6:	af00      	add	r7, sp, #0
 81057d8:	6078      	str	r0, [r7, #4]
 81057da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81057e2:	2b01      	cmp	r3, #1
 81057e4:	d101      	bne.n	81057ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81057e6:	2302      	movs	r3, #2
 81057e8:	e02d      	b.n	8105846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81057ea:	687b      	ldr	r3, [r7, #4]
 81057ec:	2201      	movs	r2, #1
 81057ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81057f2:	687b      	ldr	r3, [r7, #4]
 81057f4:	2224      	movs	r2, #36	; 0x24
 81057f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	681b      	ldr	r3, [r3, #0]
 81057fe:	681b      	ldr	r3, [r3, #0]
 8105800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105802:	687b      	ldr	r3, [r7, #4]
 8105804:	681b      	ldr	r3, [r3, #0]
 8105806:	681a      	ldr	r2, [r3, #0]
 8105808:	687b      	ldr	r3, [r7, #4]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	f022 0201 	bic.w	r2, r2, #1
 8105810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105812:	687b      	ldr	r3, [r7, #4]
 8105814:	681b      	ldr	r3, [r3, #0]
 8105816:	689b      	ldr	r3, [r3, #8]
 8105818:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	681b      	ldr	r3, [r3, #0]
 8105820:	683a      	ldr	r2, [r7, #0]
 8105822:	430a      	orrs	r2, r1
 8105824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105826:	6878      	ldr	r0, [r7, #4]
 8105828:	f000 f850 	bl	81058cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810582c:	687b      	ldr	r3, [r7, #4]
 810582e:	681b      	ldr	r3, [r3, #0]
 8105830:	68fa      	ldr	r2, [r7, #12]
 8105832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105834:	687b      	ldr	r3, [r7, #4]
 8105836:	2220      	movs	r2, #32
 8105838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	2200      	movs	r2, #0
 8105840:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105844:	2300      	movs	r3, #0
}
 8105846:	4618      	mov	r0, r3
 8105848:	3710      	adds	r7, #16
 810584a:	46bd      	mov	sp, r7
 810584c:	bd80      	pop	{r7, pc}

0810584e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810584e:	b580      	push	{r7, lr}
 8105850:	b084      	sub	sp, #16
 8105852:	af00      	add	r7, sp, #0
 8105854:	6078      	str	r0, [r7, #4]
 8105856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810585e:	2b01      	cmp	r3, #1
 8105860:	d101      	bne.n	8105866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105862:	2302      	movs	r3, #2
 8105864:	e02d      	b.n	81058c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105866:	687b      	ldr	r3, [r7, #4]
 8105868:	2201      	movs	r2, #1
 810586a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810586e:	687b      	ldr	r3, [r7, #4]
 8105870:	2224      	movs	r2, #36	; 0x24
 8105872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105876:	687b      	ldr	r3, [r7, #4]
 8105878:	681b      	ldr	r3, [r3, #0]
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	681b      	ldr	r3, [r3, #0]
 8105882:	681a      	ldr	r2, [r3, #0]
 8105884:	687b      	ldr	r3, [r7, #4]
 8105886:	681b      	ldr	r3, [r3, #0]
 8105888:	f022 0201 	bic.w	r2, r2, #1
 810588c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810588e:	687b      	ldr	r3, [r7, #4]
 8105890:	681b      	ldr	r3, [r3, #0]
 8105892:	689b      	ldr	r3, [r3, #8]
 8105894:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105898:	687b      	ldr	r3, [r7, #4]
 810589a:	681b      	ldr	r3, [r3, #0]
 810589c:	683a      	ldr	r2, [r7, #0]
 810589e:	430a      	orrs	r2, r1
 81058a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81058a2:	6878      	ldr	r0, [r7, #4]
 81058a4:	f000 f812 	bl	81058cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	68fa      	ldr	r2, [r7, #12]
 81058ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	2220      	movs	r2, #32
 81058b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	2200      	movs	r2, #0
 81058bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81058c0:	2300      	movs	r3, #0
}
 81058c2:	4618      	mov	r0, r3
 81058c4:	3710      	adds	r7, #16
 81058c6:	46bd      	mov	sp, r7
 81058c8:	bd80      	pop	{r7, pc}
	...

081058cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81058cc:	b480      	push	{r7}
 81058ce:	b089      	sub	sp, #36	; 0x24
 81058d0:	af00      	add	r7, sp, #0
 81058d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 81058d4:	4a2f      	ldr	r2, [pc, #188]	; (8105994 <UARTEx_SetNbDataToProcess+0xc8>)
 81058d6:	f107 0314 	add.w	r3, r7, #20
 81058da:	e892 0003 	ldmia.w	r2, {r0, r1}
 81058de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 81058e2:	4a2d      	ldr	r2, [pc, #180]	; (8105998 <UARTEx_SetNbDataToProcess+0xcc>)
 81058e4:	f107 030c 	add.w	r3, r7, #12
 81058e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 81058ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81058f0:	687b      	ldr	r3, [r7, #4]
 81058f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058f4:	2b00      	cmp	r3, #0
 81058f6:	d108      	bne.n	810590a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	2201      	movs	r2, #1
 81058fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	2201      	movs	r2, #1
 8105904:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105908:	e03d      	b.n	8105986 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810590a:	2308      	movs	r3, #8
 810590c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810590e:	2308      	movs	r3, #8
 8105910:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105912:	687b      	ldr	r3, [r7, #4]
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	689b      	ldr	r3, [r3, #8]
 8105918:	0e5b      	lsrs	r3, r3, #25
 810591a:	b2db      	uxtb	r3, r3
 810591c:	f003 0307 	and.w	r3, r3, #7
 8105920:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105922:	687b      	ldr	r3, [r7, #4]
 8105924:	681b      	ldr	r3, [r3, #0]
 8105926:	689b      	ldr	r3, [r3, #8]
 8105928:	0f5b      	lsrs	r3, r3, #29
 810592a:	b2db      	uxtb	r3, r3
 810592c:	f003 0307 	and.w	r3, r3, #7
 8105930:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8105932:	7fbb      	ldrb	r3, [r7, #30]
 8105934:	7f3a      	ldrb	r2, [r7, #28]
 8105936:	f107 0120 	add.w	r1, r7, #32
 810593a:	440a      	add	r2, r1
 810593c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8105940:	fb02 f303 	mul.w	r3, r2, r3
 8105944:	7f3a      	ldrb	r2, [r7, #28]
 8105946:	f107 0120 	add.w	r1, r7, #32
 810594a:	440a      	add	r2, r1
 810594c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8105950:	fb93 f3f2 	sdiv	r3, r3, r2
 8105954:	b29a      	uxth	r2, r3
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 810595c:	7ffb      	ldrb	r3, [r7, #31]
 810595e:	7f7a      	ldrb	r2, [r7, #29]
 8105960:	f107 0120 	add.w	r1, r7, #32
 8105964:	440a      	add	r2, r1
 8105966:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810596a:	fb02 f303 	mul.w	r3, r2, r3
 810596e:	7f7a      	ldrb	r2, [r7, #29]
 8105970:	f107 0120 	add.w	r1, r7, #32
 8105974:	440a      	add	r2, r1
 8105976:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810597a:	fb93 f3f2 	sdiv	r3, r3, r2
 810597e:	b29a      	uxth	r2, r3
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8105986:	bf00      	nop
 8105988:	3724      	adds	r7, #36	; 0x24
 810598a:	46bd      	mov	sp, r7
 810598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105990:	4770      	bx	lr
 8105992:	bf00      	nop
 8105994:	081084c0 	.word	0x081084c0
 8105998:	081084c8 	.word	0x081084c8

0810599c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810599c:	b480      	push	{r7}
 810599e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81059a0:	bf00      	nop
 81059a2:	46bd      	mov	sp, r7
 81059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059a8:	4770      	bx	lr
	...

081059ac <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81059ac:	b480      	push	{r7}
 81059ae:	b085      	sub	sp, #20
 81059b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81059b2:	f3ef 8305 	mrs	r3, IPSR
 81059b6:	60bb      	str	r3, [r7, #8]
  return(result);
 81059b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81059ba:	2b00      	cmp	r3, #0
 81059bc:	d10f      	bne.n	81059de <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81059be:	f3ef 8310 	mrs	r3, PRIMASK
 81059c2:	607b      	str	r3, [r7, #4]
  return(result);
 81059c4:	687b      	ldr	r3, [r7, #4]
 81059c6:	2b00      	cmp	r3, #0
 81059c8:	d105      	bne.n	81059d6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81059ca:	f3ef 8311 	mrs	r3, BASEPRI
 81059ce:	603b      	str	r3, [r7, #0]
  return(result);
 81059d0:	683b      	ldr	r3, [r7, #0]
 81059d2:	2b00      	cmp	r3, #0
 81059d4:	d007      	beq.n	81059e6 <osKernelInitialize+0x3a>
 81059d6:	4b0e      	ldr	r3, [pc, #56]	; (8105a10 <osKernelInitialize+0x64>)
 81059d8:	681b      	ldr	r3, [r3, #0]
 81059da:	2b02      	cmp	r3, #2
 81059dc:	d103      	bne.n	81059e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 81059de:	f06f 0305 	mvn.w	r3, #5
 81059e2:	60fb      	str	r3, [r7, #12]
 81059e4:	e00c      	b.n	8105a00 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 81059e6:	4b0a      	ldr	r3, [pc, #40]	; (8105a10 <osKernelInitialize+0x64>)
 81059e8:	681b      	ldr	r3, [r3, #0]
 81059ea:	2b00      	cmp	r3, #0
 81059ec:	d105      	bne.n	81059fa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81059ee:	4b08      	ldr	r3, [pc, #32]	; (8105a10 <osKernelInitialize+0x64>)
 81059f0:	2201      	movs	r2, #1
 81059f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81059f4:	2300      	movs	r3, #0
 81059f6:	60fb      	str	r3, [r7, #12]
 81059f8:	e002      	b.n	8105a00 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 81059fa:	f04f 33ff 	mov.w	r3, #4294967295
 81059fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8105a00:	68fb      	ldr	r3, [r7, #12]
}
 8105a02:	4618      	mov	r0, r3
 8105a04:	3714      	adds	r7, #20
 8105a06:	46bd      	mov	sp, r7
 8105a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a0c:	4770      	bx	lr
 8105a0e:	bf00      	nop
 8105a10:	1000002c 	.word	0x1000002c

08105a14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8105a14:	b580      	push	{r7, lr}
 8105a16:	b084      	sub	sp, #16
 8105a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105a1a:	f3ef 8305 	mrs	r3, IPSR
 8105a1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8105a20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105a22:	2b00      	cmp	r3, #0
 8105a24:	d10f      	bne.n	8105a46 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105a26:	f3ef 8310 	mrs	r3, PRIMASK
 8105a2a:	607b      	str	r3, [r7, #4]
  return(result);
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2b00      	cmp	r3, #0
 8105a30:	d105      	bne.n	8105a3e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8105a32:	f3ef 8311 	mrs	r3, BASEPRI
 8105a36:	603b      	str	r3, [r7, #0]
  return(result);
 8105a38:	683b      	ldr	r3, [r7, #0]
 8105a3a:	2b00      	cmp	r3, #0
 8105a3c:	d007      	beq.n	8105a4e <osKernelStart+0x3a>
 8105a3e:	4b0f      	ldr	r3, [pc, #60]	; (8105a7c <osKernelStart+0x68>)
 8105a40:	681b      	ldr	r3, [r3, #0]
 8105a42:	2b02      	cmp	r3, #2
 8105a44:	d103      	bne.n	8105a4e <osKernelStart+0x3a>
    stat = osErrorISR;
 8105a46:	f06f 0305 	mvn.w	r3, #5
 8105a4a:	60fb      	str	r3, [r7, #12]
 8105a4c:	e010      	b.n	8105a70 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8105a4e:	4b0b      	ldr	r3, [pc, #44]	; (8105a7c <osKernelStart+0x68>)
 8105a50:	681b      	ldr	r3, [r3, #0]
 8105a52:	2b01      	cmp	r3, #1
 8105a54:	d109      	bne.n	8105a6a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8105a56:	f7ff ffa1 	bl	810599c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8105a5a:	4b08      	ldr	r3, [pc, #32]	; (8105a7c <osKernelStart+0x68>)
 8105a5c:	2202      	movs	r2, #2
 8105a5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8105a60:	f001 f870 	bl	8106b44 <vTaskStartScheduler>
      stat = osOK;
 8105a64:	2300      	movs	r3, #0
 8105a66:	60fb      	str	r3, [r7, #12]
 8105a68:	e002      	b.n	8105a70 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8105a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8105a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8105a70:	68fb      	ldr	r3, [r7, #12]
}
 8105a72:	4618      	mov	r0, r3
 8105a74:	3710      	adds	r7, #16
 8105a76:	46bd      	mov	sp, r7
 8105a78:	bd80      	pop	{r7, pc}
 8105a7a:	bf00      	nop
 8105a7c:	1000002c 	.word	0x1000002c

08105a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8105a80:	b580      	push	{r7, lr}
 8105a82:	b090      	sub	sp, #64	; 0x40
 8105a84:	af04      	add	r7, sp, #16
 8105a86:	60f8      	str	r0, [r7, #12]
 8105a88:	60b9      	str	r1, [r7, #8]
 8105a8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8105a8c:	2300      	movs	r3, #0
 8105a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105a90:	f3ef 8305 	mrs	r3, IPSR
 8105a94:	61fb      	str	r3, [r7, #28]
  return(result);
 8105a96:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8105a98:	2b00      	cmp	r3, #0
 8105a9a:	f040 808f 	bne.w	8105bbc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8105aa2:	61bb      	str	r3, [r7, #24]
  return(result);
 8105aa4:	69bb      	ldr	r3, [r7, #24]
 8105aa6:	2b00      	cmp	r3, #0
 8105aa8:	d105      	bne.n	8105ab6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8105aaa:	f3ef 8311 	mrs	r3, BASEPRI
 8105aae:	617b      	str	r3, [r7, #20]
  return(result);
 8105ab0:	697b      	ldr	r3, [r7, #20]
 8105ab2:	2b00      	cmp	r3, #0
 8105ab4:	d003      	beq.n	8105abe <osThreadNew+0x3e>
 8105ab6:	4b44      	ldr	r3, [pc, #272]	; (8105bc8 <osThreadNew+0x148>)
 8105ab8:	681b      	ldr	r3, [r3, #0]
 8105aba:	2b02      	cmp	r3, #2
 8105abc:	d07e      	beq.n	8105bbc <osThreadNew+0x13c>
 8105abe:	68fb      	ldr	r3, [r7, #12]
 8105ac0:	2b00      	cmp	r3, #0
 8105ac2:	d07b      	beq.n	8105bbc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8105ac4:	2380      	movs	r3, #128	; 0x80
 8105ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8105ac8:	2318      	movs	r3, #24
 8105aca:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8105acc:	2300      	movs	r3, #0
 8105ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8105ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8105ad4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	2b00      	cmp	r3, #0
 8105ada:	d045      	beq.n	8105b68 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	681b      	ldr	r3, [r3, #0]
 8105ae0:	2b00      	cmp	r3, #0
 8105ae2:	d002      	beq.n	8105aea <osThreadNew+0x6a>
        name = attr->name;
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	699b      	ldr	r3, [r3, #24]
 8105aee:	2b00      	cmp	r3, #0
 8105af0:	d002      	beq.n	8105af8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	699b      	ldr	r3, [r3, #24]
 8105af6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8105af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105afa:	2b00      	cmp	r3, #0
 8105afc:	d008      	beq.n	8105b10 <osThreadNew+0x90>
 8105afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b00:	2b38      	cmp	r3, #56	; 0x38
 8105b02:	d805      	bhi.n	8105b10 <osThreadNew+0x90>
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	685b      	ldr	r3, [r3, #4]
 8105b08:	f003 0301 	and.w	r3, r3, #1
 8105b0c:	2b00      	cmp	r3, #0
 8105b0e:	d001      	beq.n	8105b14 <osThreadNew+0x94>
        return (NULL);
 8105b10:	2300      	movs	r3, #0
 8105b12:	e054      	b.n	8105bbe <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	695b      	ldr	r3, [r3, #20]
 8105b18:	2b00      	cmp	r3, #0
 8105b1a:	d003      	beq.n	8105b24 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	695b      	ldr	r3, [r3, #20]
 8105b20:	089b      	lsrs	r3, r3, #2
 8105b22:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105b24:	687b      	ldr	r3, [r7, #4]
 8105b26:	689b      	ldr	r3, [r3, #8]
 8105b28:	2b00      	cmp	r3, #0
 8105b2a:	d00e      	beq.n	8105b4a <osThreadNew+0xca>
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	68db      	ldr	r3, [r3, #12]
 8105b30:	2b5b      	cmp	r3, #91	; 0x5b
 8105b32:	d90a      	bls.n	8105b4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105b34:	687b      	ldr	r3, [r7, #4]
 8105b36:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105b38:	2b00      	cmp	r3, #0
 8105b3a:	d006      	beq.n	8105b4a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	695b      	ldr	r3, [r3, #20]
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	d002      	beq.n	8105b4a <osThreadNew+0xca>
        mem = 1;
 8105b44:	2301      	movs	r3, #1
 8105b46:	623b      	str	r3, [r7, #32]
 8105b48:	e010      	b.n	8105b6c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8105b4a:	687b      	ldr	r3, [r7, #4]
 8105b4c:	689b      	ldr	r3, [r3, #8]
 8105b4e:	2b00      	cmp	r3, #0
 8105b50:	d10c      	bne.n	8105b6c <osThreadNew+0xec>
 8105b52:	687b      	ldr	r3, [r7, #4]
 8105b54:	68db      	ldr	r3, [r3, #12]
 8105b56:	2b00      	cmp	r3, #0
 8105b58:	d108      	bne.n	8105b6c <osThreadNew+0xec>
 8105b5a:	687b      	ldr	r3, [r7, #4]
 8105b5c:	691b      	ldr	r3, [r3, #16]
 8105b5e:	2b00      	cmp	r3, #0
 8105b60:	d104      	bne.n	8105b6c <osThreadNew+0xec>
          mem = 0;
 8105b62:	2300      	movs	r3, #0
 8105b64:	623b      	str	r3, [r7, #32]
 8105b66:	e001      	b.n	8105b6c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8105b68:	2300      	movs	r3, #0
 8105b6a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8105b6c:	6a3b      	ldr	r3, [r7, #32]
 8105b6e:	2b01      	cmp	r3, #1
 8105b70:	d110      	bne.n	8105b94 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8105b76:	687a      	ldr	r2, [r7, #4]
 8105b78:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105b7a:	9202      	str	r2, [sp, #8]
 8105b7c:	9301      	str	r3, [sp, #4]
 8105b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b80:	9300      	str	r3, [sp, #0]
 8105b82:	68bb      	ldr	r3, [r7, #8]
 8105b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8105b88:	68f8      	ldr	r0, [r7, #12]
 8105b8a:	f000 fe09 	bl	81067a0 <xTaskCreateStatic>
 8105b8e:	4603      	mov	r3, r0
 8105b90:	613b      	str	r3, [r7, #16]
 8105b92:	e013      	b.n	8105bbc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8105b94:	6a3b      	ldr	r3, [r7, #32]
 8105b96:	2b00      	cmp	r3, #0
 8105b98:	d110      	bne.n	8105bbc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8105b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b9c:	b29a      	uxth	r2, r3
 8105b9e:	f107 0310 	add.w	r3, r7, #16
 8105ba2:	9301      	str	r3, [sp, #4]
 8105ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ba6:	9300      	str	r3, [sp, #0]
 8105ba8:	68bb      	ldr	r3, [r7, #8]
 8105baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8105bac:	68f8      	ldr	r0, [r7, #12]
 8105bae:	f000 fe51 	bl	8106854 <xTaskCreate>
 8105bb2:	4603      	mov	r3, r0
 8105bb4:	2b01      	cmp	r3, #1
 8105bb6:	d001      	beq.n	8105bbc <osThreadNew+0x13c>
          hTask = NULL;
 8105bb8:	2300      	movs	r3, #0
 8105bba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8105bbc:	693b      	ldr	r3, [r7, #16]
}
 8105bbe:	4618      	mov	r0, r3
 8105bc0:	3730      	adds	r7, #48	; 0x30
 8105bc2:	46bd      	mov	sp, r7
 8105bc4:	bd80      	pop	{r7, pc}
 8105bc6:	bf00      	nop
 8105bc8:	1000002c 	.word	0x1000002c

08105bcc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8105bcc:	b580      	push	{r7, lr}
 8105bce:	b086      	sub	sp, #24
 8105bd0:	af00      	add	r7, sp, #0
 8105bd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105bd4:	f3ef 8305 	mrs	r3, IPSR
 8105bd8:	613b      	str	r3, [r7, #16]
  return(result);
 8105bda:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105bdc:	2b00      	cmp	r3, #0
 8105bde:	d10f      	bne.n	8105c00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105be0:	f3ef 8310 	mrs	r3, PRIMASK
 8105be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8105be6:	68fb      	ldr	r3, [r7, #12]
 8105be8:	2b00      	cmp	r3, #0
 8105bea:	d105      	bne.n	8105bf8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8105bec:	f3ef 8311 	mrs	r3, BASEPRI
 8105bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8105bf2:	68bb      	ldr	r3, [r7, #8]
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d007      	beq.n	8105c08 <osDelay+0x3c>
 8105bf8:	4b0a      	ldr	r3, [pc, #40]	; (8105c24 <osDelay+0x58>)
 8105bfa:	681b      	ldr	r3, [r3, #0]
 8105bfc:	2b02      	cmp	r3, #2
 8105bfe:	d103      	bne.n	8105c08 <osDelay+0x3c>
    stat = osErrorISR;
 8105c00:	f06f 0305 	mvn.w	r3, #5
 8105c04:	617b      	str	r3, [r7, #20]
 8105c06:	e007      	b.n	8105c18 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8105c08:	2300      	movs	r3, #0
 8105c0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	2b00      	cmp	r3, #0
 8105c10:	d002      	beq.n	8105c18 <osDelay+0x4c>
      vTaskDelay(ticks);
 8105c12:	6878      	ldr	r0, [r7, #4]
 8105c14:	f000 ff62 	bl	8106adc <vTaskDelay>
    }
  }

  return (stat);
 8105c18:	697b      	ldr	r3, [r7, #20]
}
 8105c1a:	4618      	mov	r0, r3
 8105c1c:	3718      	adds	r7, #24
 8105c1e:	46bd      	mov	sp, r7
 8105c20:	bd80      	pop	{r7, pc}
 8105c22:	bf00      	nop
 8105c24:	1000002c 	.word	0x1000002c

08105c28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8105c28:	b480      	push	{r7}
 8105c2a:	b085      	sub	sp, #20
 8105c2c:	af00      	add	r7, sp, #0
 8105c2e:	60f8      	str	r0, [r7, #12]
 8105c30:	60b9      	str	r1, [r7, #8]
 8105c32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8105c34:	68fb      	ldr	r3, [r7, #12]
 8105c36:	4a07      	ldr	r2, [pc, #28]	; (8105c54 <vApplicationGetIdleTaskMemory+0x2c>)
 8105c38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8105c3a:	68bb      	ldr	r3, [r7, #8]
 8105c3c:	4a06      	ldr	r2, [pc, #24]	; (8105c58 <vApplicationGetIdleTaskMemory+0x30>)
 8105c3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	2280      	movs	r2, #128	; 0x80
 8105c44:	601a      	str	r2, [r3, #0]
}
 8105c46:	bf00      	nop
 8105c48:	3714      	adds	r7, #20
 8105c4a:	46bd      	mov	sp, r7
 8105c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c50:	4770      	bx	lr
 8105c52:	bf00      	nop
 8105c54:	10000030 	.word	0x10000030
 8105c58:	1000008c 	.word	0x1000008c

08105c5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8105c5c:	b480      	push	{r7}
 8105c5e:	b085      	sub	sp, #20
 8105c60:	af00      	add	r7, sp, #0
 8105c62:	60f8      	str	r0, [r7, #12]
 8105c64:	60b9      	str	r1, [r7, #8]
 8105c66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8105c68:	68fb      	ldr	r3, [r7, #12]
 8105c6a:	4a07      	ldr	r2, [pc, #28]	; (8105c88 <vApplicationGetTimerTaskMemory+0x2c>)
 8105c6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8105c6e:	68bb      	ldr	r3, [r7, #8]
 8105c70:	4a06      	ldr	r2, [pc, #24]	; (8105c8c <vApplicationGetTimerTaskMemory+0x30>)
 8105c72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105c7a:	601a      	str	r2, [r3, #0]
}
 8105c7c:	bf00      	nop
 8105c7e:	3714      	adds	r7, #20
 8105c80:	46bd      	mov	sp, r7
 8105c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c86:	4770      	bx	lr
 8105c88:	1000028c 	.word	0x1000028c
 8105c8c:	100002e8 	.word	0x100002e8

08105c90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8105c90:	b480      	push	{r7}
 8105c92:	b083      	sub	sp, #12
 8105c94:	af00      	add	r7, sp, #0
 8105c96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105c98:	687b      	ldr	r3, [r7, #4]
 8105c9a:	f103 0208 	add.w	r2, r3, #8
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8105ca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	f103 0208 	add.w	r2, r3, #8
 8105cb0:	687b      	ldr	r3, [r7, #4]
 8105cb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	f103 0208 	add.w	r2, r3, #8
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	2200      	movs	r2, #0
 8105cc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8105cc4:	bf00      	nop
 8105cc6:	370c      	adds	r7, #12
 8105cc8:	46bd      	mov	sp, r7
 8105cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cce:	4770      	bx	lr

08105cd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8105cd0:	b480      	push	{r7}
 8105cd2:	b083      	sub	sp, #12
 8105cd4:	af00      	add	r7, sp, #0
 8105cd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	2200      	movs	r2, #0
 8105cdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8105cde:	bf00      	nop
 8105ce0:	370c      	adds	r7, #12
 8105ce2:	46bd      	mov	sp, r7
 8105ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ce8:	4770      	bx	lr

08105cea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8105cea:	b480      	push	{r7}
 8105cec:	b085      	sub	sp, #20
 8105cee:	af00      	add	r7, sp, #0
 8105cf0:	6078      	str	r0, [r7, #4]
 8105cf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	685b      	ldr	r3, [r3, #4]
 8105cf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8105cfa:	683b      	ldr	r3, [r7, #0]
 8105cfc:	68fa      	ldr	r2, [r7, #12]
 8105cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8105d00:	68fb      	ldr	r3, [r7, #12]
 8105d02:	689a      	ldr	r2, [r3, #8]
 8105d04:	683b      	ldr	r3, [r7, #0]
 8105d06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8105d08:	68fb      	ldr	r3, [r7, #12]
 8105d0a:	689b      	ldr	r3, [r3, #8]
 8105d0c:	683a      	ldr	r2, [r7, #0]
 8105d0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8105d10:	68fb      	ldr	r3, [r7, #12]
 8105d12:	683a      	ldr	r2, [r7, #0]
 8105d14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8105d16:	683b      	ldr	r3, [r7, #0]
 8105d18:	687a      	ldr	r2, [r7, #4]
 8105d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	1c5a      	adds	r2, r3, #1
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	601a      	str	r2, [r3, #0]
}
 8105d26:	bf00      	nop
 8105d28:	3714      	adds	r7, #20
 8105d2a:	46bd      	mov	sp, r7
 8105d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d30:	4770      	bx	lr

08105d32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8105d32:	b480      	push	{r7}
 8105d34:	b085      	sub	sp, #20
 8105d36:	af00      	add	r7, sp, #0
 8105d38:	6078      	str	r0, [r7, #4]
 8105d3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8105d3c:	683b      	ldr	r3, [r7, #0]
 8105d3e:	681b      	ldr	r3, [r3, #0]
 8105d40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8105d42:	68bb      	ldr	r3, [r7, #8]
 8105d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d48:	d103      	bne.n	8105d52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	691b      	ldr	r3, [r3, #16]
 8105d4e:	60fb      	str	r3, [r7, #12]
 8105d50:	e00c      	b.n	8105d6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8105d52:	687b      	ldr	r3, [r7, #4]
 8105d54:	3308      	adds	r3, #8
 8105d56:	60fb      	str	r3, [r7, #12]
 8105d58:	e002      	b.n	8105d60 <vListInsert+0x2e>
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	685b      	ldr	r3, [r3, #4]
 8105d5e:	60fb      	str	r3, [r7, #12]
 8105d60:	68fb      	ldr	r3, [r7, #12]
 8105d62:	685b      	ldr	r3, [r3, #4]
 8105d64:	681b      	ldr	r3, [r3, #0]
 8105d66:	68ba      	ldr	r2, [r7, #8]
 8105d68:	429a      	cmp	r2, r3
 8105d6a:	d2f6      	bcs.n	8105d5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8105d6c:	68fb      	ldr	r3, [r7, #12]
 8105d6e:	685a      	ldr	r2, [r3, #4]
 8105d70:	683b      	ldr	r3, [r7, #0]
 8105d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8105d74:	683b      	ldr	r3, [r7, #0]
 8105d76:	685b      	ldr	r3, [r3, #4]
 8105d78:	683a      	ldr	r2, [r7, #0]
 8105d7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8105d7c:	683b      	ldr	r3, [r7, #0]
 8105d7e:	68fa      	ldr	r2, [r7, #12]
 8105d80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8105d82:	68fb      	ldr	r3, [r7, #12]
 8105d84:	683a      	ldr	r2, [r7, #0]
 8105d86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8105d88:	683b      	ldr	r3, [r7, #0]
 8105d8a:	687a      	ldr	r2, [r7, #4]
 8105d8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8105d8e:	687b      	ldr	r3, [r7, #4]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	1c5a      	adds	r2, r3, #1
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	601a      	str	r2, [r3, #0]
}
 8105d98:	bf00      	nop
 8105d9a:	3714      	adds	r7, #20
 8105d9c:	46bd      	mov	sp, r7
 8105d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105da2:	4770      	bx	lr

08105da4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8105da4:	b480      	push	{r7}
 8105da6:	b085      	sub	sp, #20
 8105da8:	af00      	add	r7, sp, #0
 8105daa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	691b      	ldr	r3, [r3, #16]
 8105db0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	685b      	ldr	r3, [r3, #4]
 8105db6:	687a      	ldr	r2, [r7, #4]
 8105db8:	6892      	ldr	r2, [r2, #8]
 8105dba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	689b      	ldr	r3, [r3, #8]
 8105dc0:	687a      	ldr	r2, [r7, #4]
 8105dc2:	6852      	ldr	r2, [r2, #4]
 8105dc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8105dc6:	68fb      	ldr	r3, [r7, #12]
 8105dc8:	685b      	ldr	r3, [r3, #4]
 8105dca:	687a      	ldr	r2, [r7, #4]
 8105dcc:	429a      	cmp	r2, r3
 8105dce:	d103      	bne.n	8105dd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8105dd0:	687b      	ldr	r3, [r7, #4]
 8105dd2:	689a      	ldr	r2, [r3, #8]
 8105dd4:	68fb      	ldr	r3, [r7, #12]
 8105dd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	2200      	movs	r2, #0
 8105ddc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8105dde:	68fb      	ldr	r3, [r7, #12]
 8105de0:	681b      	ldr	r3, [r3, #0]
 8105de2:	1e5a      	subs	r2, r3, #1
 8105de4:	68fb      	ldr	r3, [r7, #12]
 8105de6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8105de8:	68fb      	ldr	r3, [r7, #12]
 8105dea:	681b      	ldr	r3, [r3, #0]
}
 8105dec:	4618      	mov	r0, r3
 8105dee:	3714      	adds	r7, #20
 8105df0:	46bd      	mov	sp, r7
 8105df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105df6:	4770      	bx	lr

08105df8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8105df8:	b580      	push	{r7, lr}
 8105dfa:	b084      	sub	sp, #16
 8105dfc:	af00      	add	r7, sp, #0
 8105dfe:	6078      	str	r0, [r7, #4]
 8105e00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8105e06:	68fb      	ldr	r3, [r7, #12]
 8105e08:	2b00      	cmp	r3, #0
 8105e0a:	d109      	bne.n	8105e20 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8105e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105e10:	f383 8811 	msr	BASEPRI, r3
 8105e14:	f3bf 8f6f 	isb	sy
 8105e18:	f3bf 8f4f 	dsb	sy
 8105e1c:	60bb      	str	r3, [r7, #8]
 8105e1e:	e7fe      	b.n	8105e1e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8105e20:	f002 f814 	bl	8107e4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105e24:	68fb      	ldr	r3, [r7, #12]
 8105e26:	681a      	ldr	r2, [r3, #0]
 8105e28:	68fb      	ldr	r3, [r7, #12]
 8105e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e2c:	68f9      	ldr	r1, [r7, #12]
 8105e2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8105e30:	fb01 f303 	mul.w	r3, r1, r3
 8105e34:	441a      	add	r2, r3
 8105e36:	68fb      	ldr	r3, [r7, #12]
 8105e38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8105e3a:	68fb      	ldr	r3, [r7, #12]
 8105e3c:	2200      	movs	r2, #0
 8105e3e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8105e40:	68fb      	ldr	r3, [r7, #12]
 8105e42:	681a      	ldr	r2, [r3, #0]
 8105e44:	68fb      	ldr	r3, [r7, #12]
 8105e46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105e48:	68fb      	ldr	r3, [r7, #12]
 8105e4a:	681a      	ldr	r2, [r3, #0]
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e50:	3b01      	subs	r3, #1
 8105e52:	68f9      	ldr	r1, [r7, #12]
 8105e54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8105e56:	fb01 f303 	mul.w	r3, r1, r3
 8105e5a:	441a      	add	r2, r3
 8105e5c:	68fb      	ldr	r3, [r7, #12]
 8105e5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8105e60:	68fb      	ldr	r3, [r7, #12]
 8105e62:	22ff      	movs	r2, #255	; 0xff
 8105e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8105e68:	68fb      	ldr	r3, [r7, #12]
 8105e6a:	22ff      	movs	r2, #255	; 0xff
 8105e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8105e70:	683b      	ldr	r3, [r7, #0]
 8105e72:	2b00      	cmp	r3, #0
 8105e74:	d114      	bne.n	8105ea0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8105e76:	68fb      	ldr	r3, [r7, #12]
 8105e78:	691b      	ldr	r3, [r3, #16]
 8105e7a:	2b00      	cmp	r3, #0
 8105e7c:	d01a      	beq.n	8105eb4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105e7e:	68fb      	ldr	r3, [r7, #12]
 8105e80:	3310      	adds	r3, #16
 8105e82:	4618      	mov	r0, r3
 8105e84:	f001 f8de 	bl	8107044 <xTaskRemoveFromEventList>
 8105e88:	4603      	mov	r3, r0
 8105e8a:	2b00      	cmp	r3, #0
 8105e8c:	d012      	beq.n	8105eb4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8105e8e:	4b0d      	ldr	r3, [pc, #52]	; (8105ec4 <xQueueGenericReset+0xcc>)
 8105e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105e94:	601a      	str	r2, [r3, #0]
 8105e96:	f3bf 8f4f 	dsb	sy
 8105e9a:	f3bf 8f6f 	isb	sy
 8105e9e:	e009      	b.n	8105eb4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	3310      	adds	r3, #16
 8105ea4:	4618      	mov	r0, r3
 8105ea6:	f7ff fef3 	bl	8105c90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8105eaa:	68fb      	ldr	r3, [r7, #12]
 8105eac:	3324      	adds	r3, #36	; 0x24
 8105eae:	4618      	mov	r0, r3
 8105eb0:	f7ff feee 	bl	8105c90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8105eb4:	f001 fff8 	bl	8107ea8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8105eb8:	2301      	movs	r3, #1
}
 8105eba:	4618      	mov	r0, r3
 8105ebc:	3710      	adds	r7, #16
 8105ebe:	46bd      	mov	sp, r7
 8105ec0:	bd80      	pop	{r7, pc}
 8105ec2:	bf00      	nop
 8105ec4:	e000ed04 	.word	0xe000ed04

08105ec8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8105ec8:	b580      	push	{r7, lr}
 8105eca:	b08e      	sub	sp, #56	; 0x38
 8105ecc:	af02      	add	r7, sp, #8
 8105ece:	60f8      	str	r0, [r7, #12]
 8105ed0:	60b9      	str	r1, [r7, #8]
 8105ed2:	607a      	str	r2, [r7, #4]
 8105ed4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8105ed6:	68fb      	ldr	r3, [r7, #12]
 8105ed8:	2b00      	cmp	r3, #0
 8105eda:	d109      	bne.n	8105ef0 <xQueueGenericCreateStatic+0x28>
 8105edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105ee0:	f383 8811 	msr	BASEPRI, r3
 8105ee4:	f3bf 8f6f 	isb	sy
 8105ee8:	f3bf 8f4f 	dsb	sy
 8105eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8105eee:	e7fe      	b.n	8105eee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8105ef0:	683b      	ldr	r3, [r7, #0]
 8105ef2:	2b00      	cmp	r3, #0
 8105ef4:	d109      	bne.n	8105f0a <xQueueGenericCreateStatic+0x42>
 8105ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105efa:	f383 8811 	msr	BASEPRI, r3
 8105efe:	f3bf 8f6f 	isb	sy
 8105f02:	f3bf 8f4f 	dsb	sy
 8105f06:	627b      	str	r3, [r7, #36]	; 0x24
 8105f08:	e7fe      	b.n	8105f08 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8105f0a:	687b      	ldr	r3, [r7, #4]
 8105f0c:	2b00      	cmp	r3, #0
 8105f0e:	d002      	beq.n	8105f16 <xQueueGenericCreateStatic+0x4e>
 8105f10:	68bb      	ldr	r3, [r7, #8]
 8105f12:	2b00      	cmp	r3, #0
 8105f14:	d001      	beq.n	8105f1a <xQueueGenericCreateStatic+0x52>
 8105f16:	2301      	movs	r3, #1
 8105f18:	e000      	b.n	8105f1c <xQueueGenericCreateStatic+0x54>
 8105f1a:	2300      	movs	r3, #0
 8105f1c:	2b00      	cmp	r3, #0
 8105f1e:	d109      	bne.n	8105f34 <xQueueGenericCreateStatic+0x6c>
 8105f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105f24:	f383 8811 	msr	BASEPRI, r3
 8105f28:	f3bf 8f6f 	isb	sy
 8105f2c:	f3bf 8f4f 	dsb	sy
 8105f30:	623b      	str	r3, [r7, #32]
 8105f32:	e7fe      	b.n	8105f32 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8105f34:	687b      	ldr	r3, [r7, #4]
 8105f36:	2b00      	cmp	r3, #0
 8105f38:	d102      	bne.n	8105f40 <xQueueGenericCreateStatic+0x78>
 8105f3a:	68bb      	ldr	r3, [r7, #8]
 8105f3c:	2b00      	cmp	r3, #0
 8105f3e:	d101      	bne.n	8105f44 <xQueueGenericCreateStatic+0x7c>
 8105f40:	2301      	movs	r3, #1
 8105f42:	e000      	b.n	8105f46 <xQueueGenericCreateStatic+0x7e>
 8105f44:	2300      	movs	r3, #0
 8105f46:	2b00      	cmp	r3, #0
 8105f48:	d109      	bne.n	8105f5e <xQueueGenericCreateStatic+0x96>
 8105f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105f4e:	f383 8811 	msr	BASEPRI, r3
 8105f52:	f3bf 8f6f 	isb	sy
 8105f56:	f3bf 8f4f 	dsb	sy
 8105f5a:	61fb      	str	r3, [r7, #28]
 8105f5c:	e7fe      	b.n	8105f5c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8105f5e:	2350      	movs	r3, #80	; 0x50
 8105f60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8105f62:	697b      	ldr	r3, [r7, #20]
 8105f64:	2b50      	cmp	r3, #80	; 0x50
 8105f66:	d009      	beq.n	8105f7c <xQueueGenericCreateStatic+0xb4>
 8105f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105f6c:	f383 8811 	msr	BASEPRI, r3
 8105f70:	f3bf 8f6f 	isb	sy
 8105f74:	f3bf 8f4f 	dsb	sy
 8105f78:	61bb      	str	r3, [r7, #24]
 8105f7a:	e7fe      	b.n	8105f7a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8105f7c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8105f7e:	683b      	ldr	r3, [r7, #0]
 8105f80:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8105f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f84:	2b00      	cmp	r3, #0
 8105f86:	d00d      	beq.n	8105fa4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8105f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f8a:	2201      	movs	r2, #1
 8105f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8105f90:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8105f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f96:	9300      	str	r3, [sp, #0]
 8105f98:	4613      	mov	r3, r2
 8105f9a:	687a      	ldr	r2, [r7, #4]
 8105f9c:	68b9      	ldr	r1, [r7, #8]
 8105f9e:	68f8      	ldr	r0, [r7, #12]
 8105fa0:	f000 f805 	bl	8105fae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8105fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8105fa6:	4618      	mov	r0, r3
 8105fa8:	3730      	adds	r7, #48	; 0x30
 8105faa:	46bd      	mov	sp, r7
 8105fac:	bd80      	pop	{r7, pc}

08105fae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8105fae:	b580      	push	{r7, lr}
 8105fb0:	b084      	sub	sp, #16
 8105fb2:	af00      	add	r7, sp, #0
 8105fb4:	60f8      	str	r0, [r7, #12]
 8105fb6:	60b9      	str	r1, [r7, #8]
 8105fb8:	607a      	str	r2, [r7, #4]
 8105fba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8105fbc:	68bb      	ldr	r3, [r7, #8]
 8105fbe:	2b00      	cmp	r3, #0
 8105fc0:	d103      	bne.n	8105fca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8105fc2:	69bb      	ldr	r3, [r7, #24]
 8105fc4:	69ba      	ldr	r2, [r7, #24]
 8105fc6:	601a      	str	r2, [r3, #0]
 8105fc8:	e002      	b.n	8105fd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8105fca:	69bb      	ldr	r3, [r7, #24]
 8105fcc:	687a      	ldr	r2, [r7, #4]
 8105fce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8105fd0:	69bb      	ldr	r3, [r7, #24]
 8105fd2:	68fa      	ldr	r2, [r7, #12]
 8105fd4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8105fd6:	69bb      	ldr	r3, [r7, #24]
 8105fd8:	68ba      	ldr	r2, [r7, #8]
 8105fda:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8105fdc:	2101      	movs	r1, #1
 8105fde:	69b8      	ldr	r0, [r7, #24]
 8105fe0:	f7ff ff0a 	bl	8105df8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8105fe4:	69bb      	ldr	r3, [r7, #24]
 8105fe6:	78fa      	ldrb	r2, [r7, #3]
 8105fe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8105fec:	bf00      	nop
 8105fee:	3710      	adds	r7, #16
 8105ff0:	46bd      	mov	sp, r7
 8105ff2:	bd80      	pop	{r7, pc}

08105ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8105ff4:	b580      	push	{r7, lr}
 8105ff6:	b08e      	sub	sp, #56	; 0x38
 8105ff8:	af00      	add	r7, sp, #0
 8105ffa:	60f8      	str	r0, [r7, #12]
 8105ffc:	60b9      	str	r1, [r7, #8]
 8105ffe:	607a      	str	r2, [r7, #4]
 8106000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8106002:	2300      	movs	r3, #0
 8106004:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106006:	68fb      	ldr	r3, [r7, #12]
 8106008:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810600c:	2b00      	cmp	r3, #0
 810600e:	d109      	bne.n	8106024 <xQueueGenericSend+0x30>
 8106010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106014:	f383 8811 	msr	BASEPRI, r3
 8106018:	f3bf 8f6f 	isb	sy
 810601c:	f3bf 8f4f 	dsb	sy
 8106020:	62bb      	str	r3, [r7, #40]	; 0x28
 8106022:	e7fe      	b.n	8106022 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106024:	68bb      	ldr	r3, [r7, #8]
 8106026:	2b00      	cmp	r3, #0
 8106028:	d103      	bne.n	8106032 <xQueueGenericSend+0x3e>
 810602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810602e:	2b00      	cmp	r3, #0
 8106030:	d101      	bne.n	8106036 <xQueueGenericSend+0x42>
 8106032:	2301      	movs	r3, #1
 8106034:	e000      	b.n	8106038 <xQueueGenericSend+0x44>
 8106036:	2300      	movs	r3, #0
 8106038:	2b00      	cmp	r3, #0
 810603a:	d109      	bne.n	8106050 <xQueueGenericSend+0x5c>
 810603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106040:	f383 8811 	msr	BASEPRI, r3
 8106044:	f3bf 8f6f 	isb	sy
 8106048:	f3bf 8f4f 	dsb	sy
 810604c:	627b      	str	r3, [r7, #36]	; 0x24
 810604e:	e7fe      	b.n	810604e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106050:	683b      	ldr	r3, [r7, #0]
 8106052:	2b02      	cmp	r3, #2
 8106054:	d103      	bne.n	810605e <xQueueGenericSend+0x6a>
 8106056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810605a:	2b01      	cmp	r3, #1
 810605c:	d101      	bne.n	8106062 <xQueueGenericSend+0x6e>
 810605e:	2301      	movs	r3, #1
 8106060:	e000      	b.n	8106064 <xQueueGenericSend+0x70>
 8106062:	2300      	movs	r3, #0
 8106064:	2b00      	cmp	r3, #0
 8106066:	d109      	bne.n	810607c <xQueueGenericSend+0x88>
 8106068:	f04f 0350 	mov.w	r3, #80	; 0x50
 810606c:	f383 8811 	msr	BASEPRI, r3
 8106070:	f3bf 8f6f 	isb	sy
 8106074:	f3bf 8f4f 	dsb	sy
 8106078:	623b      	str	r3, [r7, #32]
 810607a:	e7fe      	b.n	810607a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810607c:	f001 f998 	bl	81073b0 <xTaskGetSchedulerState>
 8106080:	4603      	mov	r3, r0
 8106082:	2b00      	cmp	r3, #0
 8106084:	d102      	bne.n	810608c <xQueueGenericSend+0x98>
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	2b00      	cmp	r3, #0
 810608a:	d101      	bne.n	8106090 <xQueueGenericSend+0x9c>
 810608c:	2301      	movs	r3, #1
 810608e:	e000      	b.n	8106092 <xQueueGenericSend+0x9e>
 8106090:	2300      	movs	r3, #0
 8106092:	2b00      	cmp	r3, #0
 8106094:	d109      	bne.n	81060aa <xQueueGenericSend+0xb6>
 8106096:	f04f 0350 	mov.w	r3, #80	; 0x50
 810609a:	f383 8811 	msr	BASEPRI, r3
 810609e:	f3bf 8f6f 	isb	sy
 81060a2:	f3bf 8f4f 	dsb	sy
 81060a6:	61fb      	str	r3, [r7, #28]
 81060a8:	e7fe      	b.n	81060a8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81060aa:	f001 fecf 	bl	8107e4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81060b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81060b6:	429a      	cmp	r2, r3
 81060b8:	d302      	bcc.n	81060c0 <xQueueGenericSend+0xcc>
 81060ba:	683b      	ldr	r3, [r7, #0]
 81060bc:	2b02      	cmp	r3, #2
 81060be:	d129      	bne.n	8106114 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81060c0:	683a      	ldr	r2, [r7, #0]
 81060c2:	68b9      	ldr	r1, [r7, #8]
 81060c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81060c6:	f000 f9ff 	bl	81064c8 <prvCopyDataToQueue>
 81060ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81060ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060d0:	2b00      	cmp	r3, #0
 81060d2:	d010      	beq.n	81060f6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81060d6:	3324      	adds	r3, #36	; 0x24
 81060d8:	4618      	mov	r0, r3
 81060da:	f000 ffb3 	bl	8107044 <xTaskRemoveFromEventList>
 81060de:	4603      	mov	r3, r0
 81060e0:	2b00      	cmp	r3, #0
 81060e2:	d013      	beq.n	810610c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81060e4:	4b3f      	ldr	r3, [pc, #252]	; (81061e4 <xQueueGenericSend+0x1f0>)
 81060e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81060ea:	601a      	str	r2, [r3, #0]
 81060ec:	f3bf 8f4f 	dsb	sy
 81060f0:	f3bf 8f6f 	isb	sy
 81060f4:	e00a      	b.n	810610c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81060f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81060f8:	2b00      	cmp	r3, #0
 81060fa:	d007      	beq.n	810610c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 81060fc:	4b39      	ldr	r3, [pc, #228]	; (81061e4 <xQueueGenericSend+0x1f0>)
 81060fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106102:	601a      	str	r2, [r3, #0]
 8106104:	f3bf 8f4f 	dsb	sy
 8106108:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810610c:	f001 fecc 	bl	8107ea8 <vPortExitCritical>
				return pdPASS;
 8106110:	2301      	movs	r3, #1
 8106112:	e063      	b.n	81061dc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106114:	687b      	ldr	r3, [r7, #4]
 8106116:	2b00      	cmp	r3, #0
 8106118:	d103      	bne.n	8106122 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810611a:	f001 fec5 	bl	8107ea8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810611e:	2300      	movs	r3, #0
 8106120:	e05c      	b.n	81061dc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8106122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106124:	2b00      	cmp	r3, #0
 8106126:	d106      	bne.n	8106136 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8106128:	f107 0314 	add.w	r3, r7, #20
 810612c:	4618      	mov	r0, r3
 810612e:	f000 ffeb 	bl	8107108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106132:	2301      	movs	r3, #1
 8106134:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8106136:	f001 feb7 	bl	8107ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810613a:	f000 fd67 	bl	8106c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810613e:	f001 fe85 	bl	8107e4c <vPortEnterCritical>
 8106142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106148:	b25b      	sxtb	r3, r3
 810614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810614e:	d103      	bne.n	8106158 <xQueueGenericSend+0x164>
 8106150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106152:	2200      	movs	r2, #0
 8106154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810615a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810615e:	b25b      	sxtb	r3, r3
 8106160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106164:	d103      	bne.n	810616e <xQueueGenericSend+0x17a>
 8106166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106168:	2200      	movs	r2, #0
 810616a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810616e:	f001 fe9b 	bl	8107ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106172:	1d3a      	adds	r2, r7, #4
 8106174:	f107 0314 	add.w	r3, r7, #20
 8106178:	4611      	mov	r1, r2
 810617a:	4618      	mov	r0, r3
 810617c:	f000 ffda 	bl	8107134 <xTaskCheckForTimeOut>
 8106180:	4603      	mov	r3, r0
 8106182:	2b00      	cmp	r3, #0
 8106184:	d124      	bne.n	81061d0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8106186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106188:	f000 fa96 	bl	81066b8 <prvIsQueueFull>
 810618c:	4603      	mov	r3, r0
 810618e:	2b00      	cmp	r3, #0
 8106190:	d018      	beq.n	81061c4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8106192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106194:	3310      	adds	r3, #16
 8106196:	687a      	ldr	r2, [r7, #4]
 8106198:	4611      	mov	r1, r2
 810619a:	4618      	mov	r0, r3
 810619c:	f000 ff04 	bl	8106fa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81061a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81061a2:	f000 fa21 	bl	81065e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81061a6:	f000 fd3f 	bl	8106c28 <xTaskResumeAll>
 81061aa:	4603      	mov	r3, r0
 81061ac:	2b00      	cmp	r3, #0
 81061ae:	f47f af7c 	bne.w	81060aa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 81061b2:	4b0c      	ldr	r3, [pc, #48]	; (81061e4 <xQueueGenericSend+0x1f0>)
 81061b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81061b8:	601a      	str	r2, [r3, #0]
 81061ba:	f3bf 8f4f 	dsb	sy
 81061be:	f3bf 8f6f 	isb	sy
 81061c2:	e772      	b.n	81060aa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81061c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81061c6:	f000 fa0f 	bl	81065e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81061ca:	f000 fd2d 	bl	8106c28 <xTaskResumeAll>
 81061ce:	e76c      	b.n	81060aa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81061d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81061d2:	f000 fa09 	bl	81065e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81061d6:	f000 fd27 	bl	8106c28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81061da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81061dc:	4618      	mov	r0, r3
 81061de:	3738      	adds	r7, #56	; 0x38
 81061e0:	46bd      	mov	sp, r7
 81061e2:	bd80      	pop	{r7, pc}
 81061e4:	e000ed04 	.word	0xe000ed04

081061e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81061e8:	b580      	push	{r7, lr}
 81061ea:	b08e      	sub	sp, #56	; 0x38
 81061ec:	af00      	add	r7, sp, #0
 81061ee:	60f8      	str	r0, [r7, #12]
 81061f0:	60b9      	str	r1, [r7, #8]
 81061f2:	607a      	str	r2, [r7, #4]
 81061f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81061f6:	68fb      	ldr	r3, [r7, #12]
 81061f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81061fc:	2b00      	cmp	r3, #0
 81061fe:	d109      	bne.n	8106214 <xQueueGenericSendFromISR+0x2c>
 8106200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106204:	f383 8811 	msr	BASEPRI, r3
 8106208:	f3bf 8f6f 	isb	sy
 810620c:	f3bf 8f4f 	dsb	sy
 8106210:	627b      	str	r3, [r7, #36]	; 0x24
 8106212:	e7fe      	b.n	8106212 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106214:	68bb      	ldr	r3, [r7, #8]
 8106216:	2b00      	cmp	r3, #0
 8106218:	d103      	bne.n	8106222 <xQueueGenericSendFromISR+0x3a>
 810621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810621e:	2b00      	cmp	r3, #0
 8106220:	d101      	bne.n	8106226 <xQueueGenericSendFromISR+0x3e>
 8106222:	2301      	movs	r3, #1
 8106224:	e000      	b.n	8106228 <xQueueGenericSendFromISR+0x40>
 8106226:	2300      	movs	r3, #0
 8106228:	2b00      	cmp	r3, #0
 810622a:	d109      	bne.n	8106240 <xQueueGenericSendFromISR+0x58>
 810622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106230:	f383 8811 	msr	BASEPRI, r3
 8106234:	f3bf 8f6f 	isb	sy
 8106238:	f3bf 8f4f 	dsb	sy
 810623c:	623b      	str	r3, [r7, #32]
 810623e:	e7fe      	b.n	810623e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106240:	683b      	ldr	r3, [r7, #0]
 8106242:	2b02      	cmp	r3, #2
 8106244:	d103      	bne.n	810624e <xQueueGenericSendFromISR+0x66>
 8106246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810624a:	2b01      	cmp	r3, #1
 810624c:	d101      	bne.n	8106252 <xQueueGenericSendFromISR+0x6a>
 810624e:	2301      	movs	r3, #1
 8106250:	e000      	b.n	8106254 <xQueueGenericSendFromISR+0x6c>
 8106252:	2300      	movs	r3, #0
 8106254:	2b00      	cmp	r3, #0
 8106256:	d109      	bne.n	810626c <xQueueGenericSendFromISR+0x84>
 8106258:	f04f 0350 	mov.w	r3, #80	; 0x50
 810625c:	f383 8811 	msr	BASEPRI, r3
 8106260:	f3bf 8f6f 	isb	sy
 8106264:	f3bf 8f4f 	dsb	sy
 8106268:	61fb      	str	r3, [r7, #28]
 810626a:	e7fe      	b.n	810626a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810626c:	f001 feca 	bl	8108004 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8106270:	f3ef 8211 	mrs	r2, BASEPRI
 8106274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106278:	f383 8811 	msr	BASEPRI, r3
 810627c:	f3bf 8f6f 	isb	sy
 8106280:	f3bf 8f4f 	dsb	sy
 8106284:	61ba      	str	r2, [r7, #24]
 8106286:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8106288:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810628a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810628e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106294:	429a      	cmp	r2, r3
 8106296:	d302      	bcc.n	810629e <xQueueGenericSendFromISR+0xb6>
 8106298:	683b      	ldr	r3, [r7, #0]
 810629a:	2b02      	cmp	r3, #2
 810629c:	d12c      	bne.n	81062f8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810629e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81062a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81062a8:	683a      	ldr	r2, [r7, #0]
 81062aa:	68b9      	ldr	r1, [r7, #8]
 81062ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81062ae:	f000 f90b 	bl	81064c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81062b2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 81062b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81062ba:	d112      	bne.n	81062e2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81062c0:	2b00      	cmp	r3, #0
 81062c2:	d016      	beq.n	81062f2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062c6:	3324      	adds	r3, #36	; 0x24
 81062c8:	4618      	mov	r0, r3
 81062ca:	f000 febb 	bl	8107044 <xTaskRemoveFromEventList>
 81062ce:	4603      	mov	r3, r0
 81062d0:	2b00      	cmp	r3, #0
 81062d2:	d00e      	beq.n	81062f2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	2b00      	cmp	r3, #0
 81062d8:	d00b      	beq.n	81062f2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	2201      	movs	r2, #1
 81062de:	601a      	str	r2, [r3, #0]
 81062e0:	e007      	b.n	81062f2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81062e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81062e6:	3301      	adds	r3, #1
 81062e8:	b2db      	uxtb	r3, r3
 81062ea:	b25a      	sxtb	r2, r3
 81062ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81062ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 81062f2:	2301      	movs	r3, #1
 81062f4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 81062f6:	e001      	b.n	81062fc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81062f8:	2300      	movs	r3, #0
 81062fa:	637b      	str	r3, [r7, #52]	; 0x34
 81062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81062fe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8106300:	693b      	ldr	r3, [r7, #16]
 8106302:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8106306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8106308:	4618      	mov	r0, r3
 810630a:	3738      	adds	r7, #56	; 0x38
 810630c:	46bd      	mov	sp, r7
 810630e:	bd80      	pop	{r7, pc}

08106310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8106310:	b580      	push	{r7, lr}
 8106312:	b08c      	sub	sp, #48	; 0x30
 8106314:	af00      	add	r7, sp, #0
 8106316:	60f8      	str	r0, [r7, #12]
 8106318:	60b9      	str	r1, [r7, #8]
 810631a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810631c:	2300      	movs	r3, #0
 810631e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106320:	68fb      	ldr	r3, [r7, #12]
 8106322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8106324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106326:	2b00      	cmp	r3, #0
 8106328:	d109      	bne.n	810633e <xQueueReceive+0x2e>
	__asm volatile
 810632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810632e:	f383 8811 	msr	BASEPRI, r3
 8106332:	f3bf 8f6f 	isb	sy
 8106336:	f3bf 8f4f 	dsb	sy
 810633a:	623b      	str	r3, [r7, #32]
 810633c:	e7fe      	b.n	810633c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810633e:	68bb      	ldr	r3, [r7, #8]
 8106340:	2b00      	cmp	r3, #0
 8106342:	d103      	bne.n	810634c <xQueueReceive+0x3c>
 8106344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106348:	2b00      	cmp	r3, #0
 810634a:	d101      	bne.n	8106350 <xQueueReceive+0x40>
 810634c:	2301      	movs	r3, #1
 810634e:	e000      	b.n	8106352 <xQueueReceive+0x42>
 8106350:	2300      	movs	r3, #0
 8106352:	2b00      	cmp	r3, #0
 8106354:	d109      	bne.n	810636a <xQueueReceive+0x5a>
 8106356:	f04f 0350 	mov.w	r3, #80	; 0x50
 810635a:	f383 8811 	msr	BASEPRI, r3
 810635e:	f3bf 8f6f 	isb	sy
 8106362:	f3bf 8f4f 	dsb	sy
 8106366:	61fb      	str	r3, [r7, #28]
 8106368:	e7fe      	b.n	8106368 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810636a:	f001 f821 	bl	81073b0 <xTaskGetSchedulerState>
 810636e:	4603      	mov	r3, r0
 8106370:	2b00      	cmp	r3, #0
 8106372:	d102      	bne.n	810637a <xQueueReceive+0x6a>
 8106374:	687b      	ldr	r3, [r7, #4]
 8106376:	2b00      	cmp	r3, #0
 8106378:	d101      	bne.n	810637e <xQueueReceive+0x6e>
 810637a:	2301      	movs	r3, #1
 810637c:	e000      	b.n	8106380 <xQueueReceive+0x70>
 810637e:	2300      	movs	r3, #0
 8106380:	2b00      	cmp	r3, #0
 8106382:	d109      	bne.n	8106398 <xQueueReceive+0x88>
 8106384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106388:	f383 8811 	msr	BASEPRI, r3
 810638c:	f3bf 8f6f 	isb	sy
 8106390:	f3bf 8f4f 	dsb	sy
 8106394:	61bb      	str	r3, [r7, #24]
 8106396:	e7fe      	b.n	8106396 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106398:	f001 fd58 	bl	8107e4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81063a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063a4:	2b00      	cmp	r3, #0
 81063a6:	d01f      	beq.n	81063e8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81063a8:	68b9      	ldr	r1, [r7, #8]
 81063aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81063ac:	f000 f8f6 	bl	810659c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063b2:	1e5a      	subs	r2, r3, #1
 81063b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81063b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063ba:	691b      	ldr	r3, [r3, #16]
 81063bc:	2b00      	cmp	r3, #0
 81063be:	d00f      	beq.n	81063e0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81063c2:	3310      	adds	r3, #16
 81063c4:	4618      	mov	r0, r3
 81063c6:	f000 fe3d 	bl	8107044 <xTaskRemoveFromEventList>
 81063ca:	4603      	mov	r3, r0
 81063cc:	2b00      	cmp	r3, #0
 81063ce:	d007      	beq.n	81063e0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81063d0:	4b3c      	ldr	r3, [pc, #240]	; (81064c4 <xQueueReceive+0x1b4>)
 81063d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81063d6:	601a      	str	r2, [r3, #0]
 81063d8:	f3bf 8f4f 	dsb	sy
 81063dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81063e0:	f001 fd62 	bl	8107ea8 <vPortExitCritical>
				return pdPASS;
 81063e4:	2301      	movs	r3, #1
 81063e6:	e069      	b.n	81064bc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	2b00      	cmp	r3, #0
 81063ec:	d103      	bne.n	81063f6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81063ee:	f001 fd5b 	bl	8107ea8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81063f2:	2300      	movs	r3, #0
 81063f4:	e062      	b.n	81064bc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 81063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81063f8:	2b00      	cmp	r3, #0
 81063fa:	d106      	bne.n	810640a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81063fc:	f107 0310 	add.w	r3, r7, #16
 8106400:	4618      	mov	r0, r3
 8106402:	f000 fe81 	bl	8107108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106406:	2301      	movs	r3, #1
 8106408:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810640a:	f001 fd4d 	bl	8107ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810640e:	f000 fbfd 	bl	8106c0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8106412:	f001 fd1b 	bl	8107e4c <vPortEnterCritical>
 8106416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810641c:	b25b      	sxtb	r3, r3
 810641e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106422:	d103      	bne.n	810642c <xQueueReceive+0x11c>
 8106424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106426:	2200      	movs	r2, #0
 8106428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810642e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106432:	b25b      	sxtb	r3, r3
 8106434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106438:	d103      	bne.n	8106442 <xQueueReceive+0x132>
 810643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810643c:	2200      	movs	r2, #0
 810643e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106442:	f001 fd31 	bl	8107ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106446:	1d3a      	adds	r2, r7, #4
 8106448:	f107 0310 	add.w	r3, r7, #16
 810644c:	4611      	mov	r1, r2
 810644e:	4618      	mov	r0, r3
 8106450:	f000 fe70 	bl	8107134 <xTaskCheckForTimeOut>
 8106454:	4603      	mov	r3, r0
 8106456:	2b00      	cmp	r3, #0
 8106458:	d123      	bne.n	81064a2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810645a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810645c:	f000 f916 	bl	810668c <prvIsQueueEmpty>
 8106460:	4603      	mov	r3, r0
 8106462:	2b00      	cmp	r3, #0
 8106464:	d017      	beq.n	8106496 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8106466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106468:	3324      	adds	r3, #36	; 0x24
 810646a:	687a      	ldr	r2, [r7, #4]
 810646c:	4611      	mov	r1, r2
 810646e:	4618      	mov	r0, r3
 8106470:	f000 fd9a 	bl	8106fa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8106474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106476:	f000 f8b7 	bl	81065e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810647a:	f000 fbd5 	bl	8106c28 <xTaskResumeAll>
 810647e:	4603      	mov	r3, r0
 8106480:	2b00      	cmp	r3, #0
 8106482:	d189      	bne.n	8106398 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8106484:	4b0f      	ldr	r3, [pc, #60]	; (81064c4 <xQueueReceive+0x1b4>)
 8106486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810648a:	601a      	str	r2, [r3, #0]
 810648c:	f3bf 8f4f 	dsb	sy
 8106490:	f3bf 8f6f 	isb	sy
 8106494:	e780      	b.n	8106398 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8106496:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106498:	f000 f8a6 	bl	81065e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810649c:	f000 fbc4 	bl	8106c28 <xTaskResumeAll>
 81064a0:	e77a      	b.n	8106398 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81064a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81064a4:	f000 f8a0 	bl	81065e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81064a8:	f000 fbbe 	bl	8106c28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81064ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81064ae:	f000 f8ed 	bl	810668c <prvIsQueueEmpty>
 81064b2:	4603      	mov	r3, r0
 81064b4:	2b00      	cmp	r3, #0
 81064b6:	f43f af6f 	beq.w	8106398 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 81064ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 81064bc:	4618      	mov	r0, r3
 81064be:	3730      	adds	r7, #48	; 0x30
 81064c0:	46bd      	mov	sp, r7
 81064c2:	bd80      	pop	{r7, pc}
 81064c4:	e000ed04 	.word	0xe000ed04

081064c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81064c8:	b580      	push	{r7, lr}
 81064ca:	b086      	sub	sp, #24
 81064cc:	af00      	add	r7, sp, #0
 81064ce:	60f8      	str	r0, [r7, #12]
 81064d0:	60b9      	str	r1, [r7, #8]
 81064d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81064d4:	2300      	movs	r3, #0
 81064d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81064d8:	68fb      	ldr	r3, [r7, #12]
 81064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81064dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81064de:	68fb      	ldr	r3, [r7, #12]
 81064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064e2:	2b00      	cmp	r3, #0
 81064e4:	d10d      	bne.n	8106502 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81064e6:	68fb      	ldr	r3, [r7, #12]
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	d14d      	bne.n	810658a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81064ee:	68fb      	ldr	r3, [r7, #12]
 81064f0:	689b      	ldr	r3, [r3, #8]
 81064f2:	4618      	mov	r0, r3
 81064f4:	f000 ff7a 	bl	81073ec <xTaskPriorityDisinherit>
 81064f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	2200      	movs	r2, #0
 81064fe:	609a      	str	r2, [r3, #8]
 8106500:	e043      	b.n	810658a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	2b00      	cmp	r3, #0
 8106506:	d119      	bne.n	810653c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8106508:	68fb      	ldr	r3, [r7, #12]
 810650a:	6858      	ldr	r0, [r3, #4]
 810650c:	68fb      	ldr	r3, [r7, #12]
 810650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106510:	461a      	mov	r2, r3
 8106512:	68b9      	ldr	r1, [r7, #8]
 8106514:	f001 ffae 	bl	8108474 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8106518:	68fb      	ldr	r3, [r7, #12]
 810651a:	685a      	ldr	r2, [r3, #4]
 810651c:	68fb      	ldr	r3, [r7, #12]
 810651e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106520:	441a      	add	r2, r3
 8106522:	68fb      	ldr	r3, [r7, #12]
 8106524:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8106526:	68fb      	ldr	r3, [r7, #12]
 8106528:	685a      	ldr	r2, [r3, #4]
 810652a:	68fb      	ldr	r3, [r7, #12]
 810652c:	689b      	ldr	r3, [r3, #8]
 810652e:	429a      	cmp	r2, r3
 8106530:	d32b      	bcc.n	810658a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8106532:	68fb      	ldr	r3, [r7, #12]
 8106534:	681a      	ldr	r2, [r3, #0]
 8106536:	68fb      	ldr	r3, [r7, #12]
 8106538:	605a      	str	r2, [r3, #4]
 810653a:	e026      	b.n	810658a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810653c:	68fb      	ldr	r3, [r7, #12]
 810653e:	68d8      	ldr	r0, [r3, #12]
 8106540:	68fb      	ldr	r3, [r7, #12]
 8106542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106544:	461a      	mov	r2, r3
 8106546:	68b9      	ldr	r1, [r7, #8]
 8106548:	f001 ff94 	bl	8108474 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810654c:	68fb      	ldr	r3, [r7, #12]
 810654e:	68da      	ldr	r2, [r3, #12]
 8106550:	68fb      	ldr	r3, [r7, #12]
 8106552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106554:	425b      	negs	r3, r3
 8106556:	441a      	add	r2, r3
 8106558:	68fb      	ldr	r3, [r7, #12]
 810655a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810655c:	68fb      	ldr	r3, [r7, #12]
 810655e:	68da      	ldr	r2, [r3, #12]
 8106560:	68fb      	ldr	r3, [r7, #12]
 8106562:	681b      	ldr	r3, [r3, #0]
 8106564:	429a      	cmp	r2, r3
 8106566:	d207      	bcs.n	8106578 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8106568:	68fb      	ldr	r3, [r7, #12]
 810656a:	689a      	ldr	r2, [r3, #8]
 810656c:	68fb      	ldr	r3, [r7, #12]
 810656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106570:	425b      	negs	r3, r3
 8106572:	441a      	add	r2, r3
 8106574:	68fb      	ldr	r3, [r7, #12]
 8106576:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	2b02      	cmp	r3, #2
 810657c:	d105      	bne.n	810658a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810657e:	693b      	ldr	r3, [r7, #16]
 8106580:	2b00      	cmp	r3, #0
 8106582:	d002      	beq.n	810658a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8106584:	693b      	ldr	r3, [r7, #16]
 8106586:	3b01      	subs	r3, #1
 8106588:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810658a:	693b      	ldr	r3, [r7, #16]
 810658c:	1c5a      	adds	r2, r3, #1
 810658e:	68fb      	ldr	r3, [r7, #12]
 8106590:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8106592:	697b      	ldr	r3, [r7, #20]
}
 8106594:	4618      	mov	r0, r3
 8106596:	3718      	adds	r7, #24
 8106598:	46bd      	mov	sp, r7
 810659a:	bd80      	pop	{r7, pc}

0810659c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810659c:	b580      	push	{r7, lr}
 810659e:	b082      	sub	sp, #8
 81065a0:	af00      	add	r7, sp, #0
 81065a2:	6078      	str	r0, [r7, #4]
 81065a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065aa:	2b00      	cmp	r3, #0
 81065ac:	d018      	beq.n	81065e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81065ae:	687b      	ldr	r3, [r7, #4]
 81065b0:	68da      	ldr	r2, [r3, #12]
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065b6:	441a      	add	r2, r3
 81065b8:	687b      	ldr	r3, [r7, #4]
 81065ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	68da      	ldr	r2, [r3, #12]
 81065c0:	687b      	ldr	r3, [r7, #4]
 81065c2:	689b      	ldr	r3, [r3, #8]
 81065c4:	429a      	cmp	r2, r3
 81065c6:	d303      	bcc.n	81065d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81065c8:	687b      	ldr	r3, [r7, #4]
 81065ca:	681a      	ldr	r2, [r3, #0]
 81065cc:	687b      	ldr	r3, [r7, #4]
 81065ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	68d9      	ldr	r1, [r3, #12]
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065d8:	461a      	mov	r2, r3
 81065da:	6838      	ldr	r0, [r7, #0]
 81065dc:	f001 ff4a 	bl	8108474 <memcpy>
	}
}
 81065e0:	bf00      	nop
 81065e2:	3708      	adds	r7, #8
 81065e4:	46bd      	mov	sp, r7
 81065e6:	bd80      	pop	{r7, pc}

081065e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81065e8:	b580      	push	{r7, lr}
 81065ea:	b084      	sub	sp, #16
 81065ec:	af00      	add	r7, sp, #0
 81065ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81065f0:	f001 fc2c 	bl	8107e4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81065fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81065fc:	e011      	b.n	8106622 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81065fe:	687b      	ldr	r3, [r7, #4]
 8106600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106602:	2b00      	cmp	r3, #0
 8106604:	d012      	beq.n	810662c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	3324      	adds	r3, #36	; 0x24
 810660a:	4618      	mov	r0, r3
 810660c:	f000 fd1a 	bl	8107044 <xTaskRemoveFromEventList>
 8106610:	4603      	mov	r3, r0
 8106612:	2b00      	cmp	r3, #0
 8106614:	d001      	beq.n	810661a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8106616:	f000 fded 	bl	81071f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810661a:	7bfb      	ldrb	r3, [r7, #15]
 810661c:	3b01      	subs	r3, #1
 810661e:	b2db      	uxtb	r3, r3
 8106620:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8106622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8106626:	2b00      	cmp	r3, #0
 8106628:	dce9      	bgt.n	81065fe <prvUnlockQueue+0x16>
 810662a:	e000      	b.n	810662e <prvUnlockQueue+0x46>
					break;
 810662c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	22ff      	movs	r2, #255	; 0xff
 8106632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8106636:	f001 fc37 	bl	8107ea8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810663a:	f001 fc07 	bl	8107e4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106644:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8106646:	e011      	b.n	810666c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	691b      	ldr	r3, [r3, #16]
 810664c:	2b00      	cmp	r3, #0
 810664e:	d012      	beq.n	8106676 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106650:	687b      	ldr	r3, [r7, #4]
 8106652:	3310      	adds	r3, #16
 8106654:	4618      	mov	r0, r3
 8106656:	f000 fcf5 	bl	8107044 <xTaskRemoveFromEventList>
 810665a:	4603      	mov	r3, r0
 810665c:	2b00      	cmp	r3, #0
 810665e:	d001      	beq.n	8106664 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8106660:	f000 fdc8 	bl	81071f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8106664:	7bbb      	ldrb	r3, [r7, #14]
 8106666:	3b01      	subs	r3, #1
 8106668:	b2db      	uxtb	r3, r3
 810666a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810666c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106670:	2b00      	cmp	r3, #0
 8106672:	dce9      	bgt.n	8106648 <prvUnlockQueue+0x60>
 8106674:	e000      	b.n	8106678 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8106676:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	22ff      	movs	r2, #255	; 0xff
 810667c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8106680:	f001 fc12 	bl	8107ea8 <vPortExitCritical>
}
 8106684:	bf00      	nop
 8106686:	3710      	adds	r7, #16
 8106688:	46bd      	mov	sp, r7
 810668a:	bd80      	pop	{r7, pc}

0810668c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810668c:	b580      	push	{r7, lr}
 810668e:	b084      	sub	sp, #16
 8106690:	af00      	add	r7, sp, #0
 8106692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8106694:	f001 fbda 	bl	8107e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810669c:	2b00      	cmp	r3, #0
 810669e:	d102      	bne.n	81066a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 81066a0:	2301      	movs	r3, #1
 81066a2:	60fb      	str	r3, [r7, #12]
 81066a4:	e001      	b.n	81066aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 81066a6:	2300      	movs	r3, #0
 81066a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81066aa:	f001 fbfd 	bl	8107ea8 <vPortExitCritical>

	return xReturn;
 81066ae:	68fb      	ldr	r3, [r7, #12]
}
 81066b0:	4618      	mov	r0, r3
 81066b2:	3710      	adds	r7, #16
 81066b4:	46bd      	mov	sp, r7
 81066b6:	bd80      	pop	{r7, pc}

081066b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81066b8:	b580      	push	{r7, lr}
 81066ba:	b084      	sub	sp, #16
 81066bc:	af00      	add	r7, sp, #0
 81066be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81066c0:	f001 fbc4 	bl	8107e4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81066cc:	429a      	cmp	r2, r3
 81066ce:	d102      	bne.n	81066d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81066d0:	2301      	movs	r3, #1
 81066d2:	60fb      	str	r3, [r7, #12]
 81066d4:	e001      	b.n	81066da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81066d6:	2300      	movs	r3, #0
 81066d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81066da:	f001 fbe5 	bl	8107ea8 <vPortExitCritical>

	return xReturn;
 81066de:	68fb      	ldr	r3, [r7, #12]
}
 81066e0:	4618      	mov	r0, r3
 81066e2:	3710      	adds	r7, #16
 81066e4:	46bd      	mov	sp, r7
 81066e6:	bd80      	pop	{r7, pc}

081066e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 81066e8:	b480      	push	{r7}
 81066ea:	b085      	sub	sp, #20
 81066ec:	af00      	add	r7, sp, #0
 81066ee:	6078      	str	r0, [r7, #4]
 81066f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81066f2:	2300      	movs	r3, #0
 81066f4:	60fb      	str	r3, [r7, #12]
 81066f6:	e014      	b.n	8106722 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81066f8:	4a0e      	ldr	r2, [pc, #56]	; (8106734 <vQueueAddToRegistry+0x4c>)
 81066fa:	68fb      	ldr	r3, [r7, #12]
 81066fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8106700:	2b00      	cmp	r3, #0
 8106702:	d10b      	bne.n	810671c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8106704:	490b      	ldr	r1, [pc, #44]	; (8106734 <vQueueAddToRegistry+0x4c>)
 8106706:	68fb      	ldr	r3, [r7, #12]
 8106708:	683a      	ldr	r2, [r7, #0]
 810670a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810670e:	4a09      	ldr	r2, [pc, #36]	; (8106734 <vQueueAddToRegistry+0x4c>)
 8106710:	68fb      	ldr	r3, [r7, #12]
 8106712:	00db      	lsls	r3, r3, #3
 8106714:	4413      	add	r3, r2
 8106716:	687a      	ldr	r2, [r7, #4]
 8106718:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810671a:	e005      	b.n	8106728 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810671c:	68fb      	ldr	r3, [r7, #12]
 810671e:	3301      	adds	r3, #1
 8106720:	60fb      	str	r3, [r7, #12]
 8106722:	68fb      	ldr	r3, [r7, #12]
 8106724:	2b07      	cmp	r3, #7
 8106726:	d9e7      	bls.n	81066f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8106728:	bf00      	nop
 810672a:	3714      	adds	r7, #20
 810672c:	46bd      	mov	sp, r7
 810672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106732:	4770      	bx	lr
 8106734:	10004a48 	.word	0x10004a48

08106738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106738:	b580      	push	{r7, lr}
 810673a:	b086      	sub	sp, #24
 810673c:	af00      	add	r7, sp, #0
 810673e:	60f8      	str	r0, [r7, #12]
 8106740:	60b9      	str	r1, [r7, #8]
 8106742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8106744:	68fb      	ldr	r3, [r7, #12]
 8106746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8106748:	f001 fb80 	bl	8107e4c <vPortEnterCritical>
 810674c:	697b      	ldr	r3, [r7, #20]
 810674e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106752:	b25b      	sxtb	r3, r3
 8106754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106758:	d103      	bne.n	8106762 <vQueueWaitForMessageRestricted+0x2a>
 810675a:	697b      	ldr	r3, [r7, #20]
 810675c:	2200      	movs	r2, #0
 810675e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106762:	697b      	ldr	r3, [r7, #20]
 8106764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106768:	b25b      	sxtb	r3, r3
 810676a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810676e:	d103      	bne.n	8106778 <vQueueWaitForMessageRestricted+0x40>
 8106770:	697b      	ldr	r3, [r7, #20]
 8106772:	2200      	movs	r2, #0
 8106774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106778:	f001 fb96 	bl	8107ea8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810677c:	697b      	ldr	r3, [r7, #20]
 810677e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106780:	2b00      	cmp	r3, #0
 8106782:	d106      	bne.n	8106792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8106784:	697b      	ldr	r3, [r7, #20]
 8106786:	3324      	adds	r3, #36	; 0x24
 8106788:	687a      	ldr	r2, [r7, #4]
 810678a:	68b9      	ldr	r1, [r7, #8]
 810678c:	4618      	mov	r0, r3
 810678e:	f000 fc2f 	bl	8106ff0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8106792:	6978      	ldr	r0, [r7, #20]
 8106794:	f7ff ff28 	bl	81065e8 <prvUnlockQueue>
	}
 8106798:	bf00      	nop
 810679a:	3718      	adds	r7, #24
 810679c:	46bd      	mov	sp, r7
 810679e:	bd80      	pop	{r7, pc}

081067a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 81067a0:	b580      	push	{r7, lr}
 81067a2:	b08e      	sub	sp, #56	; 0x38
 81067a4:	af04      	add	r7, sp, #16
 81067a6:	60f8      	str	r0, [r7, #12]
 81067a8:	60b9      	str	r1, [r7, #8]
 81067aa:	607a      	str	r2, [r7, #4]
 81067ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 81067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81067b0:	2b00      	cmp	r3, #0
 81067b2:	d109      	bne.n	81067c8 <xTaskCreateStatic+0x28>
 81067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81067b8:	f383 8811 	msr	BASEPRI, r3
 81067bc:	f3bf 8f6f 	isb	sy
 81067c0:	f3bf 8f4f 	dsb	sy
 81067c4:	623b      	str	r3, [r7, #32]
 81067c6:	e7fe      	b.n	81067c6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 81067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81067ca:	2b00      	cmp	r3, #0
 81067cc:	d109      	bne.n	81067e2 <xTaskCreateStatic+0x42>
 81067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81067d2:	f383 8811 	msr	BASEPRI, r3
 81067d6:	f3bf 8f6f 	isb	sy
 81067da:	f3bf 8f4f 	dsb	sy
 81067de:	61fb      	str	r3, [r7, #28]
 81067e0:	e7fe      	b.n	81067e0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81067e2:	235c      	movs	r3, #92	; 0x5c
 81067e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81067e6:	693b      	ldr	r3, [r7, #16]
 81067e8:	2b5c      	cmp	r3, #92	; 0x5c
 81067ea:	d009      	beq.n	8106800 <xTaskCreateStatic+0x60>
 81067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81067f0:	f383 8811 	msr	BASEPRI, r3
 81067f4:	f3bf 8f6f 	isb	sy
 81067f8:	f3bf 8f4f 	dsb	sy
 81067fc:	61bb      	str	r3, [r7, #24]
 81067fe:	e7fe      	b.n	81067fe <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8106800:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8106802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106804:	2b00      	cmp	r3, #0
 8106806:	d01e      	beq.n	8106846 <xTaskCreateStatic+0xa6>
 8106808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810680a:	2b00      	cmp	r3, #0
 810680c:	d01b      	beq.n	8106846 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106810:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8106812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106816:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8106818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810681a:	2202      	movs	r2, #2
 810681c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8106820:	2300      	movs	r3, #0
 8106822:	9303      	str	r3, [sp, #12]
 8106824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106826:	9302      	str	r3, [sp, #8]
 8106828:	f107 0314 	add.w	r3, r7, #20
 810682c:	9301      	str	r3, [sp, #4]
 810682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106830:	9300      	str	r3, [sp, #0]
 8106832:	683b      	ldr	r3, [r7, #0]
 8106834:	687a      	ldr	r2, [r7, #4]
 8106836:	68b9      	ldr	r1, [r7, #8]
 8106838:	68f8      	ldr	r0, [r7, #12]
 810683a:	f000 f850 	bl	81068de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810683e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8106840:	f000 f8dc 	bl	81069fc <prvAddNewTaskToReadyList>
 8106844:	e001      	b.n	810684a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8106846:	2300      	movs	r3, #0
 8106848:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810684a:	697b      	ldr	r3, [r7, #20]
	}
 810684c:	4618      	mov	r0, r3
 810684e:	3728      	adds	r7, #40	; 0x28
 8106850:	46bd      	mov	sp, r7
 8106852:	bd80      	pop	{r7, pc}

08106854 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8106854:	b580      	push	{r7, lr}
 8106856:	b08c      	sub	sp, #48	; 0x30
 8106858:	af04      	add	r7, sp, #16
 810685a:	60f8      	str	r0, [r7, #12]
 810685c:	60b9      	str	r1, [r7, #8]
 810685e:	603b      	str	r3, [r7, #0]
 8106860:	4613      	mov	r3, r2
 8106862:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8106864:	88fb      	ldrh	r3, [r7, #6]
 8106866:	009b      	lsls	r3, r3, #2
 8106868:	4618      	mov	r0, r3
 810686a:	f001 fc09 	bl	8108080 <pvPortMalloc>
 810686e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8106870:	697b      	ldr	r3, [r7, #20]
 8106872:	2b00      	cmp	r3, #0
 8106874:	d00e      	beq.n	8106894 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8106876:	205c      	movs	r0, #92	; 0x5c
 8106878:	f001 fc02 	bl	8108080 <pvPortMalloc>
 810687c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810687e:	69fb      	ldr	r3, [r7, #28]
 8106880:	2b00      	cmp	r3, #0
 8106882:	d003      	beq.n	810688c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8106884:	69fb      	ldr	r3, [r7, #28]
 8106886:	697a      	ldr	r2, [r7, #20]
 8106888:	631a      	str	r2, [r3, #48]	; 0x30
 810688a:	e005      	b.n	8106898 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810688c:	6978      	ldr	r0, [r7, #20]
 810688e:	f001 fcb9 	bl	8108204 <vPortFree>
 8106892:	e001      	b.n	8106898 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8106894:	2300      	movs	r3, #0
 8106896:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8106898:	69fb      	ldr	r3, [r7, #28]
 810689a:	2b00      	cmp	r3, #0
 810689c:	d017      	beq.n	81068ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810689e:	69fb      	ldr	r3, [r7, #28]
 81068a0:	2200      	movs	r2, #0
 81068a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 81068a6:	88fa      	ldrh	r2, [r7, #6]
 81068a8:	2300      	movs	r3, #0
 81068aa:	9303      	str	r3, [sp, #12]
 81068ac:	69fb      	ldr	r3, [r7, #28]
 81068ae:	9302      	str	r3, [sp, #8]
 81068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068b2:	9301      	str	r3, [sp, #4]
 81068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81068b6:	9300      	str	r3, [sp, #0]
 81068b8:	683b      	ldr	r3, [r7, #0]
 81068ba:	68b9      	ldr	r1, [r7, #8]
 81068bc:	68f8      	ldr	r0, [r7, #12]
 81068be:	f000 f80e 	bl	81068de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81068c2:	69f8      	ldr	r0, [r7, #28]
 81068c4:	f000 f89a 	bl	81069fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81068c8:	2301      	movs	r3, #1
 81068ca:	61bb      	str	r3, [r7, #24]
 81068cc:	e002      	b.n	81068d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81068ce:	f04f 33ff 	mov.w	r3, #4294967295
 81068d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81068d4:	69bb      	ldr	r3, [r7, #24]
	}
 81068d6:	4618      	mov	r0, r3
 81068d8:	3720      	adds	r7, #32
 81068da:	46bd      	mov	sp, r7
 81068dc:	bd80      	pop	{r7, pc}

081068de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81068de:	b580      	push	{r7, lr}
 81068e0:	b088      	sub	sp, #32
 81068e2:	af00      	add	r7, sp, #0
 81068e4:	60f8      	str	r0, [r7, #12]
 81068e6:	60b9      	str	r1, [r7, #8]
 81068e8:	607a      	str	r2, [r7, #4]
 81068ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	009b      	lsls	r3, r3, #2
 81068f4:	461a      	mov	r2, r3
 81068f6:	21a5      	movs	r1, #165	; 0xa5
 81068f8:	f001 fdc7 	bl	810848a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8106906:	3b01      	subs	r3, #1
 8106908:	009b      	lsls	r3, r3, #2
 810690a:	4413      	add	r3, r2
 810690c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810690e:	69bb      	ldr	r3, [r7, #24]
 8106910:	f023 0307 	bic.w	r3, r3, #7
 8106914:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8106916:	69bb      	ldr	r3, [r7, #24]
 8106918:	f003 0307 	and.w	r3, r3, #7
 810691c:	2b00      	cmp	r3, #0
 810691e:	d009      	beq.n	8106934 <prvInitialiseNewTask+0x56>
 8106920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106924:	f383 8811 	msr	BASEPRI, r3
 8106928:	f3bf 8f6f 	isb	sy
 810692c:	f3bf 8f4f 	dsb	sy
 8106930:	617b      	str	r3, [r7, #20]
 8106932:	e7fe      	b.n	8106932 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8106934:	68bb      	ldr	r3, [r7, #8]
 8106936:	2b00      	cmp	r3, #0
 8106938:	d01f      	beq.n	810697a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810693a:	2300      	movs	r3, #0
 810693c:	61fb      	str	r3, [r7, #28]
 810693e:	e012      	b.n	8106966 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8106940:	68ba      	ldr	r2, [r7, #8]
 8106942:	69fb      	ldr	r3, [r7, #28]
 8106944:	4413      	add	r3, r2
 8106946:	7819      	ldrb	r1, [r3, #0]
 8106948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810694a:	69fb      	ldr	r3, [r7, #28]
 810694c:	4413      	add	r3, r2
 810694e:	3334      	adds	r3, #52	; 0x34
 8106950:	460a      	mov	r2, r1
 8106952:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8106954:	68ba      	ldr	r2, [r7, #8]
 8106956:	69fb      	ldr	r3, [r7, #28]
 8106958:	4413      	add	r3, r2
 810695a:	781b      	ldrb	r3, [r3, #0]
 810695c:	2b00      	cmp	r3, #0
 810695e:	d006      	beq.n	810696e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8106960:	69fb      	ldr	r3, [r7, #28]
 8106962:	3301      	adds	r3, #1
 8106964:	61fb      	str	r3, [r7, #28]
 8106966:	69fb      	ldr	r3, [r7, #28]
 8106968:	2b0f      	cmp	r3, #15
 810696a:	d9e9      	bls.n	8106940 <prvInitialiseNewTask+0x62>
 810696c:	e000      	b.n	8106970 <prvInitialiseNewTask+0x92>
			{
				break;
 810696e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8106970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106972:	2200      	movs	r2, #0
 8106974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8106978:	e003      	b.n	8106982 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810697c:	2200      	movs	r2, #0
 810697e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8106982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106984:	2b37      	cmp	r3, #55	; 0x37
 8106986:	d901      	bls.n	810698c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8106988:	2337      	movs	r3, #55	; 0x37
 810698a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810698e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106990:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8106992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106996:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8106998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810699a:	2200      	movs	r2, #0
 810699c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069a0:	3304      	adds	r3, #4
 81069a2:	4618      	mov	r0, r3
 81069a4:	f7ff f994 	bl	8105cd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 81069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069aa:	3318      	adds	r3, #24
 81069ac:	4618      	mov	r0, r3
 81069ae:	f7ff f98f 	bl	8105cd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 81069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81069b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81069c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069ca:	2200      	movs	r2, #0
 81069cc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069d0:	2200      	movs	r2, #0
 81069d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81069d6:	683a      	ldr	r2, [r7, #0]
 81069d8:	68f9      	ldr	r1, [r7, #12]
 81069da:	69b8      	ldr	r0, [r7, #24]
 81069dc:	f001 f90c 	bl	8107bf8 <pxPortInitialiseStack>
 81069e0:	4602      	mov	r2, r0
 81069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81069e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81069e8:	2b00      	cmp	r3, #0
 81069ea:	d002      	beq.n	81069f2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81069ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81069f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81069f2:	bf00      	nop
 81069f4:	3720      	adds	r7, #32
 81069f6:	46bd      	mov	sp, r7
 81069f8:	bd80      	pop	{r7, pc}
	...

081069fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81069fc:	b580      	push	{r7, lr}
 81069fe:	b082      	sub	sp, #8
 8106a00:	af00      	add	r7, sp, #0
 8106a02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8106a04:	f001 fa22 	bl	8107e4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8106a08:	4b2d      	ldr	r3, [pc, #180]	; (8106ac0 <prvAddNewTaskToReadyList+0xc4>)
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	3301      	adds	r3, #1
 8106a0e:	4a2c      	ldr	r2, [pc, #176]	; (8106ac0 <prvAddNewTaskToReadyList+0xc4>)
 8106a10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8106a12:	4b2c      	ldr	r3, [pc, #176]	; (8106ac4 <prvAddNewTaskToReadyList+0xc8>)
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	d109      	bne.n	8106a2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8106a1a:	4a2a      	ldr	r2, [pc, #168]	; (8106ac4 <prvAddNewTaskToReadyList+0xc8>)
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8106a20:	4b27      	ldr	r3, [pc, #156]	; (8106ac0 <prvAddNewTaskToReadyList+0xc4>)
 8106a22:	681b      	ldr	r3, [r3, #0]
 8106a24:	2b01      	cmp	r3, #1
 8106a26:	d110      	bne.n	8106a4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8106a28:	f000 fc08 	bl	810723c <prvInitialiseTaskLists>
 8106a2c:	e00d      	b.n	8106a4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8106a2e:	4b26      	ldr	r3, [pc, #152]	; (8106ac8 <prvAddNewTaskToReadyList+0xcc>)
 8106a30:	681b      	ldr	r3, [r3, #0]
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	d109      	bne.n	8106a4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8106a36:	4b23      	ldr	r3, [pc, #140]	; (8106ac4 <prvAddNewTaskToReadyList+0xc8>)
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106a3c:	687b      	ldr	r3, [r7, #4]
 8106a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a40:	429a      	cmp	r2, r3
 8106a42:	d802      	bhi.n	8106a4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8106a44:	4a1f      	ldr	r2, [pc, #124]	; (8106ac4 <prvAddNewTaskToReadyList+0xc8>)
 8106a46:	687b      	ldr	r3, [r7, #4]
 8106a48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8106a4a:	4b20      	ldr	r3, [pc, #128]	; (8106acc <prvAddNewTaskToReadyList+0xd0>)
 8106a4c:	681b      	ldr	r3, [r3, #0]
 8106a4e:	3301      	adds	r3, #1
 8106a50:	4a1e      	ldr	r2, [pc, #120]	; (8106acc <prvAddNewTaskToReadyList+0xd0>)
 8106a52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8106a54:	4b1d      	ldr	r3, [pc, #116]	; (8106acc <prvAddNewTaskToReadyList+0xd0>)
 8106a56:	681a      	ldr	r2, [r3, #0]
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8106a5c:	687b      	ldr	r3, [r7, #4]
 8106a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106a60:	4b1b      	ldr	r3, [pc, #108]	; (8106ad0 <prvAddNewTaskToReadyList+0xd4>)
 8106a62:	681b      	ldr	r3, [r3, #0]
 8106a64:	429a      	cmp	r2, r3
 8106a66:	d903      	bls.n	8106a70 <prvAddNewTaskToReadyList+0x74>
 8106a68:	687b      	ldr	r3, [r7, #4]
 8106a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106a6c:	4a18      	ldr	r2, [pc, #96]	; (8106ad0 <prvAddNewTaskToReadyList+0xd4>)
 8106a6e:	6013      	str	r3, [r2, #0]
 8106a70:	687b      	ldr	r3, [r7, #4]
 8106a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106a74:	4613      	mov	r3, r2
 8106a76:	009b      	lsls	r3, r3, #2
 8106a78:	4413      	add	r3, r2
 8106a7a:	009b      	lsls	r3, r3, #2
 8106a7c:	4a15      	ldr	r2, [pc, #84]	; (8106ad4 <prvAddNewTaskToReadyList+0xd8>)
 8106a7e:	441a      	add	r2, r3
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	3304      	adds	r3, #4
 8106a84:	4619      	mov	r1, r3
 8106a86:	4610      	mov	r0, r2
 8106a88:	f7ff f92f 	bl	8105cea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8106a8c:	f001 fa0c 	bl	8107ea8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8106a90:	4b0d      	ldr	r3, [pc, #52]	; (8106ac8 <prvAddNewTaskToReadyList+0xcc>)
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	d00e      	beq.n	8106ab6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8106a98:	4b0a      	ldr	r3, [pc, #40]	; (8106ac4 <prvAddNewTaskToReadyList+0xc8>)
 8106a9a:	681b      	ldr	r3, [r3, #0]
 8106a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106aa2:	429a      	cmp	r2, r3
 8106aa4:	d207      	bcs.n	8106ab6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8106aa6:	4b0c      	ldr	r3, [pc, #48]	; (8106ad8 <prvAddNewTaskToReadyList+0xdc>)
 8106aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106aac:	601a      	str	r2, [r3, #0]
 8106aae:	f3bf 8f4f 	dsb	sy
 8106ab2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8106ab6:	bf00      	nop
 8106ab8:	3708      	adds	r7, #8
 8106aba:	46bd      	mov	sp, r7
 8106abc:	bd80      	pop	{r7, pc}
 8106abe:	bf00      	nop
 8106ac0:	10000bbc 	.word	0x10000bbc
 8106ac4:	100006e8 	.word	0x100006e8
 8106ac8:	10000bc8 	.word	0x10000bc8
 8106acc:	10000bd8 	.word	0x10000bd8
 8106ad0:	10000bc4 	.word	0x10000bc4
 8106ad4:	100006ec 	.word	0x100006ec
 8106ad8:	e000ed04 	.word	0xe000ed04

08106adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8106adc:	b580      	push	{r7, lr}
 8106ade:	b084      	sub	sp, #16
 8106ae0:	af00      	add	r7, sp, #0
 8106ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8106ae4:	2300      	movs	r3, #0
 8106ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8106ae8:	687b      	ldr	r3, [r7, #4]
 8106aea:	2b00      	cmp	r3, #0
 8106aec:	d016      	beq.n	8106b1c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8106aee:	4b13      	ldr	r3, [pc, #76]	; (8106b3c <vTaskDelay+0x60>)
 8106af0:	681b      	ldr	r3, [r3, #0]
 8106af2:	2b00      	cmp	r3, #0
 8106af4:	d009      	beq.n	8106b0a <vTaskDelay+0x2e>
 8106af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106afa:	f383 8811 	msr	BASEPRI, r3
 8106afe:	f3bf 8f6f 	isb	sy
 8106b02:	f3bf 8f4f 	dsb	sy
 8106b06:	60bb      	str	r3, [r7, #8]
 8106b08:	e7fe      	b.n	8106b08 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8106b0a:	f000 f87f 	bl	8106c0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8106b0e:	2100      	movs	r1, #0
 8106b10:	6878      	ldr	r0, [r7, #4]
 8106b12:	f000 fcd7 	bl	81074c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8106b16:	f000 f887 	bl	8106c28 <xTaskResumeAll>
 8106b1a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8106b1c:	68fb      	ldr	r3, [r7, #12]
 8106b1e:	2b00      	cmp	r3, #0
 8106b20:	d107      	bne.n	8106b32 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8106b22:	4b07      	ldr	r3, [pc, #28]	; (8106b40 <vTaskDelay+0x64>)
 8106b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106b28:	601a      	str	r2, [r3, #0]
 8106b2a:	f3bf 8f4f 	dsb	sy
 8106b2e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8106b32:	bf00      	nop
 8106b34:	3710      	adds	r7, #16
 8106b36:	46bd      	mov	sp, r7
 8106b38:	bd80      	pop	{r7, pc}
 8106b3a:	bf00      	nop
 8106b3c:	10000be4 	.word	0x10000be4
 8106b40:	e000ed04 	.word	0xe000ed04

08106b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8106b44:	b580      	push	{r7, lr}
 8106b46:	b08a      	sub	sp, #40	; 0x28
 8106b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8106b4a:	2300      	movs	r3, #0
 8106b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8106b4e:	2300      	movs	r3, #0
 8106b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8106b52:	463a      	mov	r2, r7
 8106b54:	1d39      	adds	r1, r7, #4
 8106b56:	f107 0308 	add.w	r3, r7, #8
 8106b5a:	4618      	mov	r0, r3
 8106b5c:	f7ff f864 	bl	8105c28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8106b60:	6839      	ldr	r1, [r7, #0]
 8106b62:	687b      	ldr	r3, [r7, #4]
 8106b64:	68ba      	ldr	r2, [r7, #8]
 8106b66:	9202      	str	r2, [sp, #8]
 8106b68:	9301      	str	r3, [sp, #4]
 8106b6a:	2300      	movs	r3, #0
 8106b6c:	9300      	str	r3, [sp, #0]
 8106b6e:	2300      	movs	r3, #0
 8106b70:	460a      	mov	r2, r1
 8106b72:	4920      	ldr	r1, [pc, #128]	; (8106bf4 <vTaskStartScheduler+0xb0>)
 8106b74:	4820      	ldr	r0, [pc, #128]	; (8106bf8 <vTaskStartScheduler+0xb4>)
 8106b76:	f7ff fe13 	bl	81067a0 <xTaskCreateStatic>
 8106b7a:	4602      	mov	r2, r0
 8106b7c:	4b1f      	ldr	r3, [pc, #124]	; (8106bfc <vTaskStartScheduler+0xb8>)
 8106b7e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8106b80:	4b1e      	ldr	r3, [pc, #120]	; (8106bfc <vTaskStartScheduler+0xb8>)
 8106b82:	681b      	ldr	r3, [r3, #0]
 8106b84:	2b00      	cmp	r3, #0
 8106b86:	d002      	beq.n	8106b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8106b88:	2301      	movs	r3, #1
 8106b8a:	617b      	str	r3, [r7, #20]
 8106b8c:	e001      	b.n	8106b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8106b8e:	2300      	movs	r3, #0
 8106b90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8106b92:	697b      	ldr	r3, [r7, #20]
 8106b94:	2b01      	cmp	r3, #1
 8106b96:	d102      	bne.n	8106b9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8106b98:	f000 fce8 	bl	810756c <xTimerCreateTimerTask>
 8106b9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8106b9e:	697b      	ldr	r3, [r7, #20]
 8106ba0:	2b01      	cmp	r3, #1
 8106ba2:	d115      	bne.n	8106bd0 <vTaskStartScheduler+0x8c>
 8106ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106ba8:	f383 8811 	msr	BASEPRI, r3
 8106bac:	f3bf 8f6f 	isb	sy
 8106bb0:	f3bf 8f4f 	dsb	sy
 8106bb4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8106bb6:	4b12      	ldr	r3, [pc, #72]	; (8106c00 <vTaskStartScheduler+0xbc>)
 8106bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8106bbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8106bbe:	4b11      	ldr	r3, [pc, #68]	; (8106c04 <vTaskStartScheduler+0xc0>)
 8106bc0:	2201      	movs	r2, #1
 8106bc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8106bc4:	4b10      	ldr	r3, [pc, #64]	; (8106c08 <vTaskStartScheduler+0xc4>)
 8106bc6:	2200      	movs	r2, #0
 8106bc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8106bca:	f001 f8a1 	bl	8107d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8106bce:	e00d      	b.n	8106bec <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8106bd0:	697b      	ldr	r3, [r7, #20]
 8106bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106bd6:	d109      	bne.n	8106bec <vTaskStartScheduler+0xa8>
 8106bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106bdc:	f383 8811 	msr	BASEPRI, r3
 8106be0:	f3bf 8f6f 	isb	sy
 8106be4:	f3bf 8f4f 	dsb	sy
 8106be8:	60fb      	str	r3, [r7, #12]
 8106bea:	e7fe      	b.n	8106bea <vTaskStartScheduler+0xa6>
}
 8106bec:	bf00      	nop
 8106bee:	3718      	adds	r7, #24
 8106bf0:	46bd      	mov	sp, r7
 8106bf2:	bd80      	pop	{r7, pc}
 8106bf4:	081084d0 	.word	0x081084d0
 8106bf8:	0810720d 	.word	0x0810720d
 8106bfc:	10000be0 	.word	0x10000be0
 8106c00:	10000bdc 	.word	0x10000bdc
 8106c04:	10000bc8 	.word	0x10000bc8
 8106c08:	10000bc0 	.word	0x10000bc0

08106c0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8106c0c:	b480      	push	{r7}
 8106c0e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8106c10:	4b04      	ldr	r3, [pc, #16]	; (8106c24 <vTaskSuspendAll+0x18>)
 8106c12:	681b      	ldr	r3, [r3, #0]
 8106c14:	3301      	adds	r3, #1
 8106c16:	4a03      	ldr	r2, [pc, #12]	; (8106c24 <vTaskSuspendAll+0x18>)
 8106c18:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8106c1a:	bf00      	nop
 8106c1c:	46bd      	mov	sp, r7
 8106c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c22:	4770      	bx	lr
 8106c24:	10000be4 	.word	0x10000be4

08106c28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8106c28:	b580      	push	{r7, lr}
 8106c2a:	b084      	sub	sp, #16
 8106c2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8106c2e:	2300      	movs	r3, #0
 8106c30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8106c32:	2300      	movs	r3, #0
 8106c34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8106c36:	4b41      	ldr	r3, [pc, #260]	; (8106d3c <xTaskResumeAll+0x114>)
 8106c38:	681b      	ldr	r3, [r3, #0]
 8106c3a:	2b00      	cmp	r3, #0
 8106c3c:	d109      	bne.n	8106c52 <xTaskResumeAll+0x2a>
 8106c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c42:	f383 8811 	msr	BASEPRI, r3
 8106c46:	f3bf 8f6f 	isb	sy
 8106c4a:	f3bf 8f4f 	dsb	sy
 8106c4e:	603b      	str	r3, [r7, #0]
 8106c50:	e7fe      	b.n	8106c50 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8106c52:	f001 f8fb 	bl	8107e4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8106c56:	4b39      	ldr	r3, [pc, #228]	; (8106d3c <xTaskResumeAll+0x114>)
 8106c58:	681b      	ldr	r3, [r3, #0]
 8106c5a:	3b01      	subs	r3, #1
 8106c5c:	4a37      	ldr	r2, [pc, #220]	; (8106d3c <xTaskResumeAll+0x114>)
 8106c5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106c60:	4b36      	ldr	r3, [pc, #216]	; (8106d3c <xTaskResumeAll+0x114>)
 8106c62:	681b      	ldr	r3, [r3, #0]
 8106c64:	2b00      	cmp	r3, #0
 8106c66:	d162      	bne.n	8106d2e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8106c68:	4b35      	ldr	r3, [pc, #212]	; (8106d40 <xTaskResumeAll+0x118>)
 8106c6a:	681b      	ldr	r3, [r3, #0]
 8106c6c:	2b00      	cmp	r3, #0
 8106c6e:	d05e      	beq.n	8106d2e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8106c70:	e02f      	b.n	8106cd2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106c72:	4b34      	ldr	r3, [pc, #208]	; (8106d44 <xTaskResumeAll+0x11c>)
 8106c74:	68db      	ldr	r3, [r3, #12]
 8106c76:	68db      	ldr	r3, [r3, #12]
 8106c78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8106c7a:	68fb      	ldr	r3, [r7, #12]
 8106c7c:	3318      	adds	r3, #24
 8106c7e:	4618      	mov	r0, r3
 8106c80:	f7ff f890 	bl	8105da4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106c84:	68fb      	ldr	r3, [r7, #12]
 8106c86:	3304      	adds	r3, #4
 8106c88:	4618      	mov	r0, r3
 8106c8a:	f7ff f88b 	bl	8105da4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8106c8e:	68fb      	ldr	r3, [r7, #12]
 8106c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106c92:	4b2d      	ldr	r3, [pc, #180]	; (8106d48 <xTaskResumeAll+0x120>)
 8106c94:	681b      	ldr	r3, [r3, #0]
 8106c96:	429a      	cmp	r2, r3
 8106c98:	d903      	bls.n	8106ca2 <xTaskResumeAll+0x7a>
 8106c9a:	68fb      	ldr	r3, [r7, #12]
 8106c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106c9e:	4a2a      	ldr	r2, [pc, #168]	; (8106d48 <xTaskResumeAll+0x120>)
 8106ca0:	6013      	str	r3, [r2, #0]
 8106ca2:	68fb      	ldr	r3, [r7, #12]
 8106ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106ca6:	4613      	mov	r3, r2
 8106ca8:	009b      	lsls	r3, r3, #2
 8106caa:	4413      	add	r3, r2
 8106cac:	009b      	lsls	r3, r3, #2
 8106cae:	4a27      	ldr	r2, [pc, #156]	; (8106d4c <xTaskResumeAll+0x124>)
 8106cb0:	441a      	add	r2, r3
 8106cb2:	68fb      	ldr	r3, [r7, #12]
 8106cb4:	3304      	adds	r3, #4
 8106cb6:	4619      	mov	r1, r3
 8106cb8:	4610      	mov	r0, r2
 8106cba:	f7ff f816 	bl	8105cea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8106cbe:	68fb      	ldr	r3, [r7, #12]
 8106cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106cc2:	4b23      	ldr	r3, [pc, #140]	; (8106d50 <xTaskResumeAll+0x128>)
 8106cc4:	681b      	ldr	r3, [r3, #0]
 8106cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106cc8:	429a      	cmp	r2, r3
 8106cca:	d302      	bcc.n	8106cd2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8106ccc:	4b21      	ldr	r3, [pc, #132]	; (8106d54 <xTaskResumeAll+0x12c>)
 8106cce:	2201      	movs	r2, #1
 8106cd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8106cd2:	4b1c      	ldr	r3, [pc, #112]	; (8106d44 <xTaskResumeAll+0x11c>)
 8106cd4:	681b      	ldr	r3, [r3, #0]
 8106cd6:	2b00      	cmp	r3, #0
 8106cd8:	d1cb      	bne.n	8106c72 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8106cda:	68fb      	ldr	r3, [r7, #12]
 8106cdc:	2b00      	cmp	r3, #0
 8106cde:	d001      	beq.n	8106ce4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8106ce0:	f000 fb46 	bl	8107370 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8106ce4:	4b1c      	ldr	r3, [pc, #112]	; (8106d58 <xTaskResumeAll+0x130>)
 8106ce6:	681b      	ldr	r3, [r3, #0]
 8106ce8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8106cea:	687b      	ldr	r3, [r7, #4]
 8106cec:	2b00      	cmp	r3, #0
 8106cee:	d010      	beq.n	8106d12 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8106cf0:	f000 f846 	bl	8106d80 <xTaskIncrementTick>
 8106cf4:	4603      	mov	r3, r0
 8106cf6:	2b00      	cmp	r3, #0
 8106cf8:	d002      	beq.n	8106d00 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8106cfa:	4b16      	ldr	r3, [pc, #88]	; (8106d54 <xTaskResumeAll+0x12c>)
 8106cfc:	2201      	movs	r2, #1
 8106cfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	3b01      	subs	r3, #1
 8106d04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8106d06:	687b      	ldr	r3, [r7, #4]
 8106d08:	2b00      	cmp	r3, #0
 8106d0a:	d1f1      	bne.n	8106cf0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8106d0c:	4b12      	ldr	r3, [pc, #72]	; (8106d58 <xTaskResumeAll+0x130>)
 8106d0e:	2200      	movs	r2, #0
 8106d10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8106d12:	4b10      	ldr	r3, [pc, #64]	; (8106d54 <xTaskResumeAll+0x12c>)
 8106d14:	681b      	ldr	r3, [r3, #0]
 8106d16:	2b00      	cmp	r3, #0
 8106d18:	d009      	beq.n	8106d2e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8106d1a:	2301      	movs	r3, #1
 8106d1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8106d1e:	4b0f      	ldr	r3, [pc, #60]	; (8106d5c <xTaskResumeAll+0x134>)
 8106d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106d24:	601a      	str	r2, [r3, #0]
 8106d26:	f3bf 8f4f 	dsb	sy
 8106d2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8106d2e:	f001 f8bb 	bl	8107ea8 <vPortExitCritical>

	return xAlreadyYielded;
 8106d32:	68bb      	ldr	r3, [r7, #8]
}
 8106d34:	4618      	mov	r0, r3
 8106d36:	3710      	adds	r7, #16
 8106d38:	46bd      	mov	sp, r7
 8106d3a:	bd80      	pop	{r7, pc}
 8106d3c:	10000be4 	.word	0x10000be4
 8106d40:	10000bbc 	.word	0x10000bbc
 8106d44:	10000b7c 	.word	0x10000b7c
 8106d48:	10000bc4 	.word	0x10000bc4
 8106d4c:	100006ec 	.word	0x100006ec
 8106d50:	100006e8 	.word	0x100006e8
 8106d54:	10000bd0 	.word	0x10000bd0
 8106d58:	10000bcc 	.word	0x10000bcc
 8106d5c:	e000ed04 	.word	0xe000ed04

08106d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8106d60:	b480      	push	{r7}
 8106d62:	b083      	sub	sp, #12
 8106d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8106d66:	4b05      	ldr	r3, [pc, #20]	; (8106d7c <xTaskGetTickCount+0x1c>)
 8106d68:	681b      	ldr	r3, [r3, #0]
 8106d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8106d6c:	687b      	ldr	r3, [r7, #4]
}
 8106d6e:	4618      	mov	r0, r3
 8106d70:	370c      	adds	r7, #12
 8106d72:	46bd      	mov	sp, r7
 8106d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d78:	4770      	bx	lr
 8106d7a:	bf00      	nop
 8106d7c:	10000bc0 	.word	0x10000bc0

08106d80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8106d80:	b580      	push	{r7, lr}
 8106d82:	b086      	sub	sp, #24
 8106d84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8106d86:	2300      	movs	r3, #0
 8106d88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8106d8a:	4b4e      	ldr	r3, [pc, #312]	; (8106ec4 <xTaskIncrementTick+0x144>)
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	2b00      	cmp	r3, #0
 8106d90:	f040 8088 	bne.w	8106ea4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8106d94:	4b4c      	ldr	r3, [pc, #304]	; (8106ec8 <xTaskIncrementTick+0x148>)
 8106d96:	681b      	ldr	r3, [r3, #0]
 8106d98:	3301      	adds	r3, #1
 8106d9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8106d9c:	4a4a      	ldr	r2, [pc, #296]	; (8106ec8 <xTaskIncrementTick+0x148>)
 8106d9e:	693b      	ldr	r3, [r7, #16]
 8106da0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8106da2:	693b      	ldr	r3, [r7, #16]
 8106da4:	2b00      	cmp	r3, #0
 8106da6:	d11f      	bne.n	8106de8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8106da8:	4b48      	ldr	r3, [pc, #288]	; (8106ecc <xTaskIncrementTick+0x14c>)
 8106daa:	681b      	ldr	r3, [r3, #0]
 8106dac:	681b      	ldr	r3, [r3, #0]
 8106dae:	2b00      	cmp	r3, #0
 8106db0:	d009      	beq.n	8106dc6 <xTaskIncrementTick+0x46>
 8106db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106db6:	f383 8811 	msr	BASEPRI, r3
 8106dba:	f3bf 8f6f 	isb	sy
 8106dbe:	f3bf 8f4f 	dsb	sy
 8106dc2:	603b      	str	r3, [r7, #0]
 8106dc4:	e7fe      	b.n	8106dc4 <xTaskIncrementTick+0x44>
 8106dc6:	4b41      	ldr	r3, [pc, #260]	; (8106ecc <xTaskIncrementTick+0x14c>)
 8106dc8:	681b      	ldr	r3, [r3, #0]
 8106dca:	60fb      	str	r3, [r7, #12]
 8106dcc:	4b40      	ldr	r3, [pc, #256]	; (8106ed0 <xTaskIncrementTick+0x150>)
 8106dce:	681b      	ldr	r3, [r3, #0]
 8106dd0:	4a3e      	ldr	r2, [pc, #248]	; (8106ecc <xTaskIncrementTick+0x14c>)
 8106dd2:	6013      	str	r3, [r2, #0]
 8106dd4:	4a3e      	ldr	r2, [pc, #248]	; (8106ed0 <xTaskIncrementTick+0x150>)
 8106dd6:	68fb      	ldr	r3, [r7, #12]
 8106dd8:	6013      	str	r3, [r2, #0]
 8106dda:	4b3e      	ldr	r3, [pc, #248]	; (8106ed4 <xTaskIncrementTick+0x154>)
 8106ddc:	681b      	ldr	r3, [r3, #0]
 8106dde:	3301      	adds	r3, #1
 8106de0:	4a3c      	ldr	r2, [pc, #240]	; (8106ed4 <xTaskIncrementTick+0x154>)
 8106de2:	6013      	str	r3, [r2, #0]
 8106de4:	f000 fac4 	bl	8107370 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8106de8:	4b3b      	ldr	r3, [pc, #236]	; (8106ed8 <xTaskIncrementTick+0x158>)
 8106dea:	681b      	ldr	r3, [r3, #0]
 8106dec:	693a      	ldr	r2, [r7, #16]
 8106dee:	429a      	cmp	r2, r3
 8106df0:	d349      	bcc.n	8106e86 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106df2:	4b36      	ldr	r3, [pc, #216]	; (8106ecc <xTaskIncrementTick+0x14c>)
 8106df4:	681b      	ldr	r3, [r3, #0]
 8106df6:	681b      	ldr	r3, [r3, #0]
 8106df8:	2b00      	cmp	r3, #0
 8106dfa:	d104      	bne.n	8106e06 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106dfc:	4b36      	ldr	r3, [pc, #216]	; (8106ed8 <xTaskIncrementTick+0x158>)
 8106dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8106e02:	601a      	str	r2, [r3, #0]
					break;
 8106e04:	e03f      	b.n	8106e86 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106e06:	4b31      	ldr	r3, [pc, #196]	; (8106ecc <xTaskIncrementTick+0x14c>)
 8106e08:	681b      	ldr	r3, [r3, #0]
 8106e0a:	68db      	ldr	r3, [r3, #12]
 8106e0c:	68db      	ldr	r3, [r3, #12]
 8106e0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8106e10:	68bb      	ldr	r3, [r7, #8]
 8106e12:	685b      	ldr	r3, [r3, #4]
 8106e14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8106e16:	693a      	ldr	r2, [r7, #16]
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	429a      	cmp	r2, r3
 8106e1c:	d203      	bcs.n	8106e26 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8106e1e:	4a2e      	ldr	r2, [pc, #184]	; (8106ed8 <xTaskIncrementTick+0x158>)
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8106e24:	e02f      	b.n	8106e86 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106e26:	68bb      	ldr	r3, [r7, #8]
 8106e28:	3304      	adds	r3, #4
 8106e2a:	4618      	mov	r0, r3
 8106e2c:	f7fe ffba 	bl	8105da4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8106e30:	68bb      	ldr	r3, [r7, #8]
 8106e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106e34:	2b00      	cmp	r3, #0
 8106e36:	d004      	beq.n	8106e42 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8106e38:	68bb      	ldr	r3, [r7, #8]
 8106e3a:	3318      	adds	r3, #24
 8106e3c:	4618      	mov	r0, r3
 8106e3e:	f7fe ffb1 	bl	8105da4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8106e42:	68bb      	ldr	r3, [r7, #8]
 8106e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106e46:	4b25      	ldr	r3, [pc, #148]	; (8106edc <xTaskIncrementTick+0x15c>)
 8106e48:	681b      	ldr	r3, [r3, #0]
 8106e4a:	429a      	cmp	r2, r3
 8106e4c:	d903      	bls.n	8106e56 <xTaskIncrementTick+0xd6>
 8106e4e:	68bb      	ldr	r3, [r7, #8]
 8106e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e52:	4a22      	ldr	r2, [pc, #136]	; (8106edc <xTaskIncrementTick+0x15c>)
 8106e54:	6013      	str	r3, [r2, #0]
 8106e56:	68bb      	ldr	r3, [r7, #8]
 8106e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106e5a:	4613      	mov	r3, r2
 8106e5c:	009b      	lsls	r3, r3, #2
 8106e5e:	4413      	add	r3, r2
 8106e60:	009b      	lsls	r3, r3, #2
 8106e62:	4a1f      	ldr	r2, [pc, #124]	; (8106ee0 <xTaskIncrementTick+0x160>)
 8106e64:	441a      	add	r2, r3
 8106e66:	68bb      	ldr	r3, [r7, #8]
 8106e68:	3304      	adds	r3, #4
 8106e6a:	4619      	mov	r1, r3
 8106e6c:	4610      	mov	r0, r2
 8106e6e:	f7fe ff3c 	bl	8105cea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8106e72:	68bb      	ldr	r3, [r7, #8]
 8106e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106e76:	4b1b      	ldr	r3, [pc, #108]	; (8106ee4 <xTaskIncrementTick+0x164>)
 8106e78:	681b      	ldr	r3, [r3, #0]
 8106e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106e7c:	429a      	cmp	r2, r3
 8106e7e:	d3b8      	bcc.n	8106df2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8106e80:	2301      	movs	r3, #1
 8106e82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8106e84:	e7b5      	b.n	8106df2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8106e86:	4b17      	ldr	r3, [pc, #92]	; (8106ee4 <xTaskIncrementTick+0x164>)
 8106e88:	681b      	ldr	r3, [r3, #0]
 8106e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106e8c:	4914      	ldr	r1, [pc, #80]	; (8106ee0 <xTaskIncrementTick+0x160>)
 8106e8e:	4613      	mov	r3, r2
 8106e90:	009b      	lsls	r3, r3, #2
 8106e92:	4413      	add	r3, r2
 8106e94:	009b      	lsls	r3, r3, #2
 8106e96:	440b      	add	r3, r1
 8106e98:	681b      	ldr	r3, [r3, #0]
 8106e9a:	2b01      	cmp	r3, #1
 8106e9c:	d907      	bls.n	8106eae <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8106e9e:	2301      	movs	r3, #1
 8106ea0:	617b      	str	r3, [r7, #20]
 8106ea2:	e004      	b.n	8106eae <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8106ea4:	4b10      	ldr	r3, [pc, #64]	; (8106ee8 <xTaskIncrementTick+0x168>)
 8106ea6:	681b      	ldr	r3, [r3, #0]
 8106ea8:	3301      	adds	r3, #1
 8106eaa:	4a0f      	ldr	r2, [pc, #60]	; (8106ee8 <xTaskIncrementTick+0x168>)
 8106eac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8106eae:	4b0f      	ldr	r3, [pc, #60]	; (8106eec <xTaskIncrementTick+0x16c>)
 8106eb0:	681b      	ldr	r3, [r3, #0]
 8106eb2:	2b00      	cmp	r3, #0
 8106eb4:	d001      	beq.n	8106eba <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8106eb6:	2301      	movs	r3, #1
 8106eb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8106eba:	697b      	ldr	r3, [r7, #20]
}
 8106ebc:	4618      	mov	r0, r3
 8106ebe:	3718      	adds	r7, #24
 8106ec0:	46bd      	mov	sp, r7
 8106ec2:	bd80      	pop	{r7, pc}
 8106ec4:	10000be4 	.word	0x10000be4
 8106ec8:	10000bc0 	.word	0x10000bc0
 8106ecc:	10000b74 	.word	0x10000b74
 8106ed0:	10000b78 	.word	0x10000b78
 8106ed4:	10000bd4 	.word	0x10000bd4
 8106ed8:	10000bdc 	.word	0x10000bdc
 8106edc:	10000bc4 	.word	0x10000bc4
 8106ee0:	100006ec 	.word	0x100006ec
 8106ee4:	100006e8 	.word	0x100006e8
 8106ee8:	10000bcc 	.word	0x10000bcc
 8106eec:	10000bd0 	.word	0x10000bd0

08106ef0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8106ef0:	b480      	push	{r7}
 8106ef2:	b085      	sub	sp, #20
 8106ef4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8106ef6:	4b27      	ldr	r3, [pc, #156]	; (8106f94 <vTaskSwitchContext+0xa4>)
 8106ef8:	681b      	ldr	r3, [r3, #0]
 8106efa:	2b00      	cmp	r3, #0
 8106efc:	d003      	beq.n	8106f06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8106efe:	4b26      	ldr	r3, [pc, #152]	; (8106f98 <vTaskSwitchContext+0xa8>)
 8106f00:	2201      	movs	r2, #1
 8106f02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8106f04:	e040      	b.n	8106f88 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8106f06:	4b24      	ldr	r3, [pc, #144]	; (8106f98 <vTaskSwitchContext+0xa8>)
 8106f08:	2200      	movs	r2, #0
 8106f0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106f0c:	4b23      	ldr	r3, [pc, #140]	; (8106f9c <vTaskSwitchContext+0xac>)
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	60fb      	str	r3, [r7, #12]
 8106f12:	e00f      	b.n	8106f34 <vTaskSwitchContext+0x44>
 8106f14:	68fb      	ldr	r3, [r7, #12]
 8106f16:	2b00      	cmp	r3, #0
 8106f18:	d109      	bne.n	8106f2e <vTaskSwitchContext+0x3e>
 8106f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f1e:	f383 8811 	msr	BASEPRI, r3
 8106f22:	f3bf 8f6f 	isb	sy
 8106f26:	f3bf 8f4f 	dsb	sy
 8106f2a:	607b      	str	r3, [r7, #4]
 8106f2c:	e7fe      	b.n	8106f2c <vTaskSwitchContext+0x3c>
 8106f2e:	68fb      	ldr	r3, [r7, #12]
 8106f30:	3b01      	subs	r3, #1
 8106f32:	60fb      	str	r3, [r7, #12]
 8106f34:	491a      	ldr	r1, [pc, #104]	; (8106fa0 <vTaskSwitchContext+0xb0>)
 8106f36:	68fa      	ldr	r2, [r7, #12]
 8106f38:	4613      	mov	r3, r2
 8106f3a:	009b      	lsls	r3, r3, #2
 8106f3c:	4413      	add	r3, r2
 8106f3e:	009b      	lsls	r3, r3, #2
 8106f40:	440b      	add	r3, r1
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	2b00      	cmp	r3, #0
 8106f46:	d0e5      	beq.n	8106f14 <vTaskSwitchContext+0x24>
 8106f48:	68fa      	ldr	r2, [r7, #12]
 8106f4a:	4613      	mov	r3, r2
 8106f4c:	009b      	lsls	r3, r3, #2
 8106f4e:	4413      	add	r3, r2
 8106f50:	009b      	lsls	r3, r3, #2
 8106f52:	4a13      	ldr	r2, [pc, #76]	; (8106fa0 <vTaskSwitchContext+0xb0>)
 8106f54:	4413      	add	r3, r2
 8106f56:	60bb      	str	r3, [r7, #8]
 8106f58:	68bb      	ldr	r3, [r7, #8]
 8106f5a:	685b      	ldr	r3, [r3, #4]
 8106f5c:	685a      	ldr	r2, [r3, #4]
 8106f5e:	68bb      	ldr	r3, [r7, #8]
 8106f60:	605a      	str	r2, [r3, #4]
 8106f62:	68bb      	ldr	r3, [r7, #8]
 8106f64:	685a      	ldr	r2, [r3, #4]
 8106f66:	68bb      	ldr	r3, [r7, #8]
 8106f68:	3308      	adds	r3, #8
 8106f6a:	429a      	cmp	r2, r3
 8106f6c:	d104      	bne.n	8106f78 <vTaskSwitchContext+0x88>
 8106f6e:	68bb      	ldr	r3, [r7, #8]
 8106f70:	685b      	ldr	r3, [r3, #4]
 8106f72:	685a      	ldr	r2, [r3, #4]
 8106f74:	68bb      	ldr	r3, [r7, #8]
 8106f76:	605a      	str	r2, [r3, #4]
 8106f78:	68bb      	ldr	r3, [r7, #8]
 8106f7a:	685b      	ldr	r3, [r3, #4]
 8106f7c:	68db      	ldr	r3, [r3, #12]
 8106f7e:	4a09      	ldr	r2, [pc, #36]	; (8106fa4 <vTaskSwitchContext+0xb4>)
 8106f80:	6013      	str	r3, [r2, #0]
 8106f82:	4a06      	ldr	r2, [pc, #24]	; (8106f9c <vTaskSwitchContext+0xac>)
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	6013      	str	r3, [r2, #0]
}
 8106f88:	bf00      	nop
 8106f8a:	3714      	adds	r7, #20
 8106f8c:	46bd      	mov	sp, r7
 8106f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f92:	4770      	bx	lr
 8106f94:	10000be4 	.word	0x10000be4
 8106f98:	10000bd0 	.word	0x10000bd0
 8106f9c:	10000bc4 	.word	0x10000bc4
 8106fa0:	100006ec 	.word	0x100006ec
 8106fa4:	100006e8 	.word	0x100006e8

08106fa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8106fa8:	b580      	push	{r7, lr}
 8106faa:	b084      	sub	sp, #16
 8106fac:	af00      	add	r7, sp, #0
 8106fae:	6078      	str	r0, [r7, #4]
 8106fb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	2b00      	cmp	r3, #0
 8106fb6:	d109      	bne.n	8106fcc <vTaskPlaceOnEventList+0x24>
 8106fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106fbc:	f383 8811 	msr	BASEPRI, r3
 8106fc0:	f3bf 8f6f 	isb	sy
 8106fc4:	f3bf 8f4f 	dsb	sy
 8106fc8:	60fb      	str	r3, [r7, #12]
 8106fca:	e7fe      	b.n	8106fca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106fcc:	4b07      	ldr	r3, [pc, #28]	; (8106fec <vTaskPlaceOnEventList+0x44>)
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	3318      	adds	r3, #24
 8106fd2:	4619      	mov	r1, r3
 8106fd4:	6878      	ldr	r0, [r7, #4]
 8106fd6:	f7fe feac 	bl	8105d32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8106fda:	2101      	movs	r1, #1
 8106fdc:	6838      	ldr	r0, [r7, #0]
 8106fde:	f000 fa71 	bl	81074c4 <prvAddCurrentTaskToDelayedList>
}
 8106fe2:	bf00      	nop
 8106fe4:	3710      	adds	r7, #16
 8106fe6:	46bd      	mov	sp, r7
 8106fe8:	bd80      	pop	{r7, pc}
 8106fea:	bf00      	nop
 8106fec:	100006e8 	.word	0x100006e8

08106ff0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106ff0:	b580      	push	{r7, lr}
 8106ff2:	b086      	sub	sp, #24
 8106ff4:	af00      	add	r7, sp, #0
 8106ff6:	60f8      	str	r0, [r7, #12]
 8106ff8:	60b9      	str	r1, [r7, #8]
 8106ffa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8106ffc:	68fb      	ldr	r3, [r7, #12]
 8106ffe:	2b00      	cmp	r3, #0
 8107000:	d109      	bne.n	8107016 <vTaskPlaceOnEventListRestricted+0x26>
 8107002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107006:	f383 8811 	msr	BASEPRI, r3
 810700a:	f3bf 8f6f 	isb	sy
 810700e:	f3bf 8f4f 	dsb	sy
 8107012:	617b      	str	r3, [r7, #20]
 8107014:	e7fe      	b.n	8107014 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107016:	4b0a      	ldr	r3, [pc, #40]	; (8107040 <vTaskPlaceOnEventListRestricted+0x50>)
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	3318      	adds	r3, #24
 810701c:	4619      	mov	r1, r3
 810701e:	68f8      	ldr	r0, [r7, #12]
 8107020:	f7fe fe63 	bl	8105cea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8107024:	687b      	ldr	r3, [r7, #4]
 8107026:	2b00      	cmp	r3, #0
 8107028:	d002      	beq.n	8107030 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 810702a:	f04f 33ff 	mov.w	r3, #4294967295
 810702e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8107030:	6879      	ldr	r1, [r7, #4]
 8107032:	68b8      	ldr	r0, [r7, #8]
 8107034:	f000 fa46 	bl	81074c4 <prvAddCurrentTaskToDelayedList>
	}
 8107038:	bf00      	nop
 810703a:	3718      	adds	r7, #24
 810703c:	46bd      	mov	sp, r7
 810703e:	bd80      	pop	{r7, pc}
 8107040:	100006e8 	.word	0x100006e8

08107044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8107044:	b580      	push	{r7, lr}
 8107046:	b086      	sub	sp, #24
 8107048:	af00      	add	r7, sp, #0
 810704a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	68db      	ldr	r3, [r3, #12]
 8107050:	68db      	ldr	r3, [r3, #12]
 8107052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8107054:	693b      	ldr	r3, [r7, #16]
 8107056:	2b00      	cmp	r3, #0
 8107058:	d109      	bne.n	810706e <xTaskRemoveFromEventList+0x2a>
 810705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810705e:	f383 8811 	msr	BASEPRI, r3
 8107062:	f3bf 8f6f 	isb	sy
 8107066:	f3bf 8f4f 	dsb	sy
 810706a:	60fb      	str	r3, [r7, #12]
 810706c:	e7fe      	b.n	810706c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810706e:	693b      	ldr	r3, [r7, #16]
 8107070:	3318      	adds	r3, #24
 8107072:	4618      	mov	r0, r3
 8107074:	f7fe fe96 	bl	8105da4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107078:	4b1d      	ldr	r3, [pc, #116]	; (81070f0 <xTaskRemoveFromEventList+0xac>)
 810707a:	681b      	ldr	r3, [r3, #0]
 810707c:	2b00      	cmp	r3, #0
 810707e:	d11d      	bne.n	81070bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107080:	693b      	ldr	r3, [r7, #16]
 8107082:	3304      	adds	r3, #4
 8107084:	4618      	mov	r0, r3
 8107086:	f7fe fe8d 	bl	8105da4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810708a:	693b      	ldr	r3, [r7, #16]
 810708c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810708e:	4b19      	ldr	r3, [pc, #100]	; (81070f4 <xTaskRemoveFromEventList+0xb0>)
 8107090:	681b      	ldr	r3, [r3, #0]
 8107092:	429a      	cmp	r2, r3
 8107094:	d903      	bls.n	810709e <xTaskRemoveFromEventList+0x5a>
 8107096:	693b      	ldr	r3, [r7, #16]
 8107098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810709a:	4a16      	ldr	r2, [pc, #88]	; (81070f4 <xTaskRemoveFromEventList+0xb0>)
 810709c:	6013      	str	r3, [r2, #0]
 810709e:	693b      	ldr	r3, [r7, #16]
 81070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81070a2:	4613      	mov	r3, r2
 81070a4:	009b      	lsls	r3, r3, #2
 81070a6:	4413      	add	r3, r2
 81070a8:	009b      	lsls	r3, r3, #2
 81070aa:	4a13      	ldr	r2, [pc, #76]	; (81070f8 <xTaskRemoveFromEventList+0xb4>)
 81070ac:	441a      	add	r2, r3
 81070ae:	693b      	ldr	r3, [r7, #16]
 81070b0:	3304      	adds	r3, #4
 81070b2:	4619      	mov	r1, r3
 81070b4:	4610      	mov	r0, r2
 81070b6:	f7fe fe18 	bl	8105cea <vListInsertEnd>
 81070ba:	e005      	b.n	81070c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 81070bc:	693b      	ldr	r3, [r7, #16]
 81070be:	3318      	adds	r3, #24
 81070c0:	4619      	mov	r1, r3
 81070c2:	480e      	ldr	r0, [pc, #56]	; (81070fc <xTaskRemoveFromEventList+0xb8>)
 81070c4:	f7fe fe11 	bl	8105cea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 81070c8:	693b      	ldr	r3, [r7, #16]
 81070ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81070cc:	4b0c      	ldr	r3, [pc, #48]	; (8107100 <xTaskRemoveFromEventList+0xbc>)
 81070ce:	681b      	ldr	r3, [r3, #0]
 81070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81070d2:	429a      	cmp	r2, r3
 81070d4:	d905      	bls.n	81070e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 81070d6:	2301      	movs	r3, #1
 81070d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81070da:	4b0a      	ldr	r3, [pc, #40]	; (8107104 <xTaskRemoveFromEventList+0xc0>)
 81070dc:	2201      	movs	r2, #1
 81070de:	601a      	str	r2, [r3, #0]
 81070e0:	e001      	b.n	81070e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 81070e2:	2300      	movs	r3, #0
 81070e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81070e6:	697b      	ldr	r3, [r7, #20]
}
 81070e8:	4618      	mov	r0, r3
 81070ea:	3718      	adds	r7, #24
 81070ec:	46bd      	mov	sp, r7
 81070ee:	bd80      	pop	{r7, pc}
 81070f0:	10000be4 	.word	0x10000be4
 81070f4:	10000bc4 	.word	0x10000bc4
 81070f8:	100006ec 	.word	0x100006ec
 81070fc:	10000b7c 	.word	0x10000b7c
 8107100:	100006e8 	.word	0x100006e8
 8107104:	10000bd0 	.word	0x10000bd0

08107108 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8107108:	b480      	push	{r7}
 810710a:	b083      	sub	sp, #12
 810710c:	af00      	add	r7, sp, #0
 810710e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8107110:	4b06      	ldr	r3, [pc, #24]	; (810712c <vTaskInternalSetTimeOutState+0x24>)
 8107112:	681a      	ldr	r2, [r3, #0]
 8107114:	687b      	ldr	r3, [r7, #4]
 8107116:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8107118:	4b05      	ldr	r3, [pc, #20]	; (8107130 <vTaskInternalSetTimeOutState+0x28>)
 810711a:	681a      	ldr	r2, [r3, #0]
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	605a      	str	r2, [r3, #4]
}
 8107120:	bf00      	nop
 8107122:	370c      	adds	r7, #12
 8107124:	46bd      	mov	sp, r7
 8107126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810712a:	4770      	bx	lr
 810712c:	10000bd4 	.word	0x10000bd4
 8107130:	10000bc0 	.word	0x10000bc0

08107134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8107134:	b580      	push	{r7, lr}
 8107136:	b088      	sub	sp, #32
 8107138:	af00      	add	r7, sp, #0
 810713a:	6078      	str	r0, [r7, #4]
 810713c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	2b00      	cmp	r3, #0
 8107142:	d109      	bne.n	8107158 <xTaskCheckForTimeOut+0x24>
 8107144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107148:	f383 8811 	msr	BASEPRI, r3
 810714c:	f3bf 8f6f 	isb	sy
 8107150:	f3bf 8f4f 	dsb	sy
 8107154:	613b      	str	r3, [r7, #16]
 8107156:	e7fe      	b.n	8107156 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8107158:	683b      	ldr	r3, [r7, #0]
 810715a:	2b00      	cmp	r3, #0
 810715c:	d109      	bne.n	8107172 <xTaskCheckForTimeOut+0x3e>
 810715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107162:	f383 8811 	msr	BASEPRI, r3
 8107166:	f3bf 8f6f 	isb	sy
 810716a:	f3bf 8f4f 	dsb	sy
 810716e:	60fb      	str	r3, [r7, #12]
 8107170:	e7fe      	b.n	8107170 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8107172:	f000 fe6b 	bl	8107e4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8107176:	4b1d      	ldr	r3, [pc, #116]	; (81071ec <xTaskCheckForTimeOut+0xb8>)
 8107178:	681b      	ldr	r3, [r3, #0]
 810717a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	685b      	ldr	r3, [r3, #4]
 8107180:	69ba      	ldr	r2, [r7, #24]
 8107182:	1ad3      	subs	r3, r2, r3
 8107184:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8107186:	683b      	ldr	r3, [r7, #0]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810718e:	d102      	bne.n	8107196 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8107190:	2300      	movs	r3, #0
 8107192:	61fb      	str	r3, [r7, #28]
 8107194:	e023      	b.n	81071de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8107196:	687b      	ldr	r3, [r7, #4]
 8107198:	681a      	ldr	r2, [r3, #0]
 810719a:	4b15      	ldr	r3, [pc, #84]	; (81071f0 <xTaskCheckForTimeOut+0xbc>)
 810719c:	681b      	ldr	r3, [r3, #0]
 810719e:	429a      	cmp	r2, r3
 81071a0:	d007      	beq.n	81071b2 <xTaskCheckForTimeOut+0x7e>
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	685b      	ldr	r3, [r3, #4]
 81071a6:	69ba      	ldr	r2, [r7, #24]
 81071a8:	429a      	cmp	r2, r3
 81071aa:	d302      	bcc.n	81071b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81071ac:	2301      	movs	r3, #1
 81071ae:	61fb      	str	r3, [r7, #28]
 81071b0:	e015      	b.n	81071de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81071b2:	683b      	ldr	r3, [r7, #0]
 81071b4:	681b      	ldr	r3, [r3, #0]
 81071b6:	697a      	ldr	r2, [r7, #20]
 81071b8:	429a      	cmp	r2, r3
 81071ba:	d20b      	bcs.n	81071d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81071bc:	683b      	ldr	r3, [r7, #0]
 81071be:	681a      	ldr	r2, [r3, #0]
 81071c0:	697b      	ldr	r3, [r7, #20]
 81071c2:	1ad2      	subs	r2, r2, r3
 81071c4:	683b      	ldr	r3, [r7, #0]
 81071c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81071c8:	6878      	ldr	r0, [r7, #4]
 81071ca:	f7ff ff9d 	bl	8107108 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81071ce:	2300      	movs	r3, #0
 81071d0:	61fb      	str	r3, [r7, #28]
 81071d2:	e004      	b.n	81071de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 81071d4:	683b      	ldr	r3, [r7, #0]
 81071d6:	2200      	movs	r2, #0
 81071d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81071da:	2301      	movs	r3, #1
 81071dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81071de:	f000 fe63 	bl	8107ea8 <vPortExitCritical>

	return xReturn;
 81071e2:	69fb      	ldr	r3, [r7, #28]
}
 81071e4:	4618      	mov	r0, r3
 81071e6:	3720      	adds	r7, #32
 81071e8:	46bd      	mov	sp, r7
 81071ea:	bd80      	pop	{r7, pc}
 81071ec:	10000bc0 	.word	0x10000bc0
 81071f0:	10000bd4 	.word	0x10000bd4

081071f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81071f4:	b480      	push	{r7}
 81071f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81071f8:	4b03      	ldr	r3, [pc, #12]	; (8107208 <vTaskMissedYield+0x14>)
 81071fa:	2201      	movs	r2, #1
 81071fc:	601a      	str	r2, [r3, #0]
}
 81071fe:	bf00      	nop
 8107200:	46bd      	mov	sp, r7
 8107202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107206:	4770      	bx	lr
 8107208:	10000bd0 	.word	0x10000bd0

0810720c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810720c:	b580      	push	{r7, lr}
 810720e:	b082      	sub	sp, #8
 8107210:	af00      	add	r7, sp, #0
 8107212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8107214:	f000 f852 	bl	81072bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8107218:	4b06      	ldr	r3, [pc, #24]	; (8107234 <prvIdleTask+0x28>)
 810721a:	681b      	ldr	r3, [r3, #0]
 810721c:	2b01      	cmp	r3, #1
 810721e:	d9f9      	bls.n	8107214 <prvIdleTask+0x8>
			{
				taskYIELD();
 8107220:	4b05      	ldr	r3, [pc, #20]	; (8107238 <prvIdleTask+0x2c>)
 8107222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107226:	601a      	str	r2, [r3, #0]
 8107228:	f3bf 8f4f 	dsb	sy
 810722c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8107230:	e7f0      	b.n	8107214 <prvIdleTask+0x8>
 8107232:	bf00      	nop
 8107234:	100006ec 	.word	0x100006ec
 8107238:	e000ed04 	.word	0xe000ed04

0810723c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810723c:	b580      	push	{r7, lr}
 810723e:	b082      	sub	sp, #8
 8107240:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107242:	2300      	movs	r3, #0
 8107244:	607b      	str	r3, [r7, #4]
 8107246:	e00c      	b.n	8107262 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8107248:	687a      	ldr	r2, [r7, #4]
 810724a:	4613      	mov	r3, r2
 810724c:	009b      	lsls	r3, r3, #2
 810724e:	4413      	add	r3, r2
 8107250:	009b      	lsls	r3, r3, #2
 8107252:	4a12      	ldr	r2, [pc, #72]	; (810729c <prvInitialiseTaskLists+0x60>)
 8107254:	4413      	add	r3, r2
 8107256:	4618      	mov	r0, r3
 8107258:	f7fe fd1a 	bl	8105c90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	3301      	adds	r3, #1
 8107260:	607b      	str	r3, [r7, #4]
 8107262:	687b      	ldr	r3, [r7, #4]
 8107264:	2b37      	cmp	r3, #55	; 0x37
 8107266:	d9ef      	bls.n	8107248 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8107268:	480d      	ldr	r0, [pc, #52]	; (81072a0 <prvInitialiseTaskLists+0x64>)
 810726a:	f7fe fd11 	bl	8105c90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810726e:	480d      	ldr	r0, [pc, #52]	; (81072a4 <prvInitialiseTaskLists+0x68>)
 8107270:	f7fe fd0e 	bl	8105c90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8107274:	480c      	ldr	r0, [pc, #48]	; (81072a8 <prvInitialiseTaskLists+0x6c>)
 8107276:	f7fe fd0b 	bl	8105c90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810727a:	480c      	ldr	r0, [pc, #48]	; (81072ac <prvInitialiseTaskLists+0x70>)
 810727c:	f7fe fd08 	bl	8105c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8107280:	480b      	ldr	r0, [pc, #44]	; (81072b0 <prvInitialiseTaskLists+0x74>)
 8107282:	f7fe fd05 	bl	8105c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8107286:	4b0b      	ldr	r3, [pc, #44]	; (81072b4 <prvInitialiseTaskLists+0x78>)
 8107288:	4a05      	ldr	r2, [pc, #20]	; (81072a0 <prvInitialiseTaskLists+0x64>)
 810728a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810728c:	4b0a      	ldr	r3, [pc, #40]	; (81072b8 <prvInitialiseTaskLists+0x7c>)
 810728e:	4a05      	ldr	r2, [pc, #20]	; (81072a4 <prvInitialiseTaskLists+0x68>)
 8107290:	601a      	str	r2, [r3, #0]
}
 8107292:	bf00      	nop
 8107294:	3708      	adds	r7, #8
 8107296:	46bd      	mov	sp, r7
 8107298:	bd80      	pop	{r7, pc}
 810729a:	bf00      	nop
 810729c:	100006ec 	.word	0x100006ec
 81072a0:	10000b4c 	.word	0x10000b4c
 81072a4:	10000b60 	.word	0x10000b60
 81072a8:	10000b7c 	.word	0x10000b7c
 81072ac:	10000b90 	.word	0x10000b90
 81072b0:	10000ba8 	.word	0x10000ba8
 81072b4:	10000b74 	.word	0x10000b74
 81072b8:	10000b78 	.word	0x10000b78

081072bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81072bc:	b580      	push	{r7, lr}
 81072be:	b082      	sub	sp, #8
 81072c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81072c2:	e019      	b.n	81072f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81072c4:	f000 fdc2 	bl	8107e4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81072c8:	4b0f      	ldr	r3, [pc, #60]	; (8107308 <prvCheckTasksWaitingTermination+0x4c>)
 81072ca:	68db      	ldr	r3, [r3, #12]
 81072cc:	68db      	ldr	r3, [r3, #12]
 81072ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81072d0:	687b      	ldr	r3, [r7, #4]
 81072d2:	3304      	adds	r3, #4
 81072d4:	4618      	mov	r0, r3
 81072d6:	f7fe fd65 	bl	8105da4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81072da:	4b0c      	ldr	r3, [pc, #48]	; (810730c <prvCheckTasksWaitingTermination+0x50>)
 81072dc:	681b      	ldr	r3, [r3, #0]
 81072de:	3b01      	subs	r3, #1
 81072e0:	4a0a      	ldr	r2, [pc, #40]	; (810730c <prvCheckTasksWaitingTermination+0x50>)
 81072e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81072e4:	4b0a      	ldr	r3, [pc, #40]	; (8107310 <prvCheckTasksWaitingTermination+0x54>)
 81072e6:	681b      	ldr	r3, [r3, #0]
 81072e8:	3b01      	subs	r3, #1
 81072ea:	4a09      	ldr	r2, [pc, #36]	; (8107310 <prvCheckTasksWaitingTermination+0x54>)
 81072ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81072ee:	f000 fddb 	bl	8107ea8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81072f2:	6878      	ldr	r0, [r7, #4]
 81072f4:	f000 f80e 	bl	8107314 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81072f8:	4b05      	ldr	r3, [pc, #20]	; (8107310 <prvCheckTasksWaitingTermination+0x54>)
 81072fa:	681b      	ldr	r3, [r3, #0]
 81072fc:	2b00      	cmp	r3, #0
 81072fe:	d1e1      	bne.n	81072c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8107300:	bf00      	nop
 8107302:	3708      	adds	r7, #8
 8107304:	46bd      	mov	sp, r7
 8107306:	bd80      	pop	{r7, pc}
 8107308:	10000b90 	.word	0x10000b90
 810730c:	10000bbc 	.word	0x10000bbc
 8107310:	10000ba4 	.word	0x10000ba4

08107314 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8107314:	b580      	push	{r7, lr}
 8107316:	b084      	sub	sp, #16
 8107318:	af00      	add	r7, sp, #0
 810731a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810731c:	687b      	ldr	r3, [r7, #4]
 810731e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8107322:	2b00      	cmp	r3, #0
 8107324:	d108      	bne.n	8107338 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8107326:	687b      	ldr	r3, [r7, #4]
 8107328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810732a:	4618      	mov	r0, r3
 810732c:	f000 ff6a 	bl	8108204 <vPortFree>
				vPortFree( pxTCB );
 8107330:	6878      	ldr	r0, [r7, #4]
 8107332:	f000 ff67 	bl	8108204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8107336:	e017      	b.n	8107368 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810733e:	2b01      	cmp	r3, #1
 8107340:	d103      	bne.n	810734a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8107342:	6878      	ldr	r0, [r7, #4]
 8107344:	f000 ff5e 	bl	8108204 <vPortFree>
	}
 8107348:	e00e      	b.n	8107368 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810734a:	687b      	ldr	r3, [r7, #4]
 810734c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8107350:	2b02      	cmp	r3, #2
 8107352:	d009      	beq.n	8107368 <prvDeleteTCB+0x54>
 8107354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107358:	f383 8811 	msr	BASEPRI, r3
 810735c:	f3bf 8f6f 	isb	sy
 8107360:	f3bf 8f4f 	dsb	sy
 8107364:	60fb      	str	r3, [r7, #12]
 8107366:	e7fe      	b.n	8107366 <prvDeleteTCB+0x52>
	}
 8107368:	bf00      	nop
 810736a:	3710      	adds	r7, #16
 810736c:	46bd      	mov	sp, r7
 810736e:	bd80      	pop	{r7, pc}

08107370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8107370:	b480      	push	{r7}
 8107372:	b083      	sub	sp, #12
 8107374:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107376:	4b0c      	ldr	r3, [pc, #48]	; (81073a8 <prvResetNextTaskUnblockTime+0x38>)
 8107378:	681b      	ldr	r3, [r3, #0]
 810737a:	681b      	ldr	r3, [r3, #0]
 810737c:	2b00      	cmp	r3, #0
 810737e:	d104      	bne.n	810738a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8107380:	4b0a      	ldr	r3, [pc, #40]	; (81073ac <prvResetNextTaskUnblockTime+0x3c>)
 8107382:	f04f 32ff 	mov.w	r2, #4294967295
 8107386:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8107388:	e008      	b.n	810739c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810738a:	4b07      	ldr	r3, [pc, #28]	; (81073a8 <prvResetNextTaskUnblockTime+0x38>)
 810738c:	681b      	ldr	r3, [r3, #0]
 810738e:	68db      	ldr	r3, [r3, #12]
 8107390:	68db      	ldr	r3, [r3, #12]
 8107392:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8107394:	687b      	ldr	r3, [r7, #4]
 8107396:	685b      	ldr	r3, [r3, #4]
 8107398:	4a04      	ldr	r2, [pc, #16]	; (81073ac <prvResetNextTaskUnblockTime+0x3c>)
 810739a:	6013      	str	r3, [r2, #0]
}
 810739c:	bf00      	nop
 810739e:	370c      	adds	r7, #12
 81073a0:	46bd      	mov	sp, r7
 81073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073a6:	4770      	bx	lr
 81073a8:	10000b74 	.word	0x10000b74
 81073ac:	10000bdc 	.word	0x10000bdc

081073b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81073b0:	b480      	push	{r7}
 81073b2:	b083      	sub	sp, #12
 81073b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81073b6:	4b0b      	ldr	r3, [pc, #44]	; (81073e4 <xTaskGetSchedulerState+0x34>)
 81073b8:	681b      	ldr	r3, [r3, #0]
 81073ba:	2b00      	cmp	r3, #0
 81073bc:	d102      	bne.n	81073c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81073be:	2301      	movs	r3, #1
 81073c0:	607b      	str	r3, [r7, #4]
 81073c2:	e008      	b.n	81073d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81073c4:	4b08      	ldr	r3, [pc, #32]	; (81073e8 <xTaskGetSchedulerState+0x38>)
 81073c6:	681b      	ldr	r3, [r3, #0]
 81073c8:	2b00      	cmp	r3, #0
 81073ca:	d102      	bne.n	81073d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81073cc:	2302      	movs	r3, #2
 81073ce:	607b      	str	r3, [r7, #4]
 81073d0:	e001      	b.n	81073d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81073d2:	2300      	movs	r3, #0
 81073d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81073d6:	687b      	ldr	r3, [r7, #4]
	}
 81073d8:	4618      	mov	r0, r3
 81073da:	370c      	adds	r7, #12
 81073dc:	46bd      	mov	sp, r7
 81073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073e2:	4770      	bx	lr
 81073e4:	10000bc8 	.word	0x10000bc8
 81073e8:	10000be4 	.word	0x10000be4

081073ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81073ec:	b580      	push	{r7, lr}
 81073ee:	b086      	sub	sp, #24
 81073f0:	af00      	add	r7, sp, #0
 81073f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81073f4:	687b      	ldr	r3, [r7, #4]
 81073f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81073f8:	2300      	movs	r3, #0
 81073fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	2b00      	cmp	r3, #0
 8107400:	d054      	beq.n	81074ac <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8107402:	4b2d      	ldr	r3, [pc, #180]	; (81074b8 <xTaskPriorityDisinherit+0xcc>)
 8107404:	681b      	ldr	r3, [r3, #0]
 8107406:	693a      	ldr	r2, [r7, #16]
 8107408:	429a      	cmp	r2, r3
 810740a:	d009      	beq.n	8107420 <xTaskPriorityDisinherit+0x34>
 810740c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107410:	f383 8811 	msr	BASEPRI, r3
 8107414:	f3bf 8f6f 	isb	sy
 8107418:	f3bf 8f4f 	dsb	sy
 810741c:	60fb      	str	r3, [r7, #12]
 810741e:	e7fe      	b.n	810741e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8107420:	693b      	ldr	r3, [r7, #16]
 8107422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107424:	2b00      	cmp	r3, #0
 8107426:	d109      	bne.n	810743c <xTaskPriorityDisinherit+0x50>
 8107428:	f04f 0350 	mov.w	r3, #80	; 0x50
 810742c:	f383 8811 	msr	BASEPRI, r3
 8107430:	f3bf 8f6f 	isb	sy
 8107434:	f3bf 8f4f 	dsb	sy
 8107438:	60bb      	str	r3, [r7, #8]
 810743a:	e7fe      	b.n	810743a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810743c:	693b      	ldr	r3, [r7, #16]
 810743e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107440:	1e5a      	subs	r2, r3, #1
 8107442:	693b      	ldr	r3, [r7, #16]
 8107444:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8107446:	693b      	ldr	r3, [r7, #16]
 8107448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810744a:	693b      	ldr	r3, [r7, #16]
 810744c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810744e:	429a      	cmp	r2, r3
 8107450:	d02c      	beq.n	81074ac <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8107452:	693b      	ldr	r3, [r7, #16]
 8107454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107456:	2b00      	cmp	r3, #0
 8107458:	d128      	bne.n	81074ac <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810745a:	693b      	ldr	r3, [r7, #16]
 810745c:	3304      	adds	r3, #4
 810745e:	4618      	mov	r0, r3
 8107460:	f7fe fca0 	bl	8105da4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8107464:	693b      	ldr	r3, [r7, #16]
 8107466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107468:	693b      	ldr	r3, [r7, #16]
 810746a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810746c:	693b      	ldr	r3, [r7, #16]
 810746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107470:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8107474:	693b      	ldr	r3, [r7, #16]
 8107476:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8107478:	693b      	ldr	r3, [r7, #16]
 810747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810747c:	4b0f      	ldr	r3, [pc, #60]	; (81074bc <xTaskPriorityDisinherit+0xd0>)
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	429a      	cmp	r2, r3
 8107482:	d903      	bls.n	810748c <xTaskPriorityDisinherit+0xa0>
 8107484:	693b      	ldr	r3, [r7, #16]
 8107486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107488:	4a0c      	ldr	r2, [pc, #48]	; (81074bc <xTaskPriorityDisinherit+0xd0>)
 810748a:	6013      	str	r3, [r2, #0]
 810748c:	693b      	ldr	r3, [r7, #16]
 810748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107490:	4613      	mov	r3, r2
 8107492:	009b      	lsls	r3, r3, #2
 8107494:	4413      	add	r3, r2
 8107496:	009b      	lsls	r3, r3, #2
 8107498:	4a09      	ldr	r2, [pc, #36]	; (81074c0 <xTaskPriorityDisinherit+0xd4>)
 810749a:	441a      	add	r2, r3
 810749c:	693b      	ldr	r3, [r7, #16]
 810749e:	3304      	adds	r3, #4
 81074a0:	4619      	mov	r1, r3
 81074a2:	4610      	mov	r0, r2
 81074a4:	f7fe fc21 	bl	8105cea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81074a8:	2301      	movs	r3, #1
 81074aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81074ac:	697b      	ldr	r3, [r7, #20]
	}
 81074ae:	4618      	mov	r0, r3
 81074b0:	3718      	adds	r7, #24
 81074b2:	46bd      	mov	sp, r7
 81074b4:	bd80      	pop	{r7, pc}
 81074b6:	bf00      	nop
 81074b8:	100006e8 	.word	0x100006e8
 81074bc:	10000bc4 	.word	0x10000bc4
 81074c0:	100006ec 	.word	0x100006ec

081074c4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81074c4:	b580      	push	{r7, lr}
 81074c6:	b084      	sub	sp, #16
 81074c8:	af00      	add	r7, sp, #0
 81074ca:	6078      	str	r0, [r7, #4]
 81074cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81074ce:	4b21      	ldr	r3, [pc, #132]	; (8107554 <prvAddCurrentTaskToDelayedList+0x90>)
 81074d0:	681b      	ldr	r3, [r3, #0]
 81074d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81074d4:	4b20      	ldr	r3, [pc, #128]	; (8107558 <prvAddCurrentTaskToDelayedList+0x94>)
 81074d6:	681b      	ldr	r3, [r3, #0]
 81074d8:	3304      	adds	r3, #4
 81074da:	4618      	mov	r0, r3
 81074dc:	f7fe fc62 	bl	8105da4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81074e0:	687b      	ldr	r3, [r7, #4]
 81074e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81074e6:	d10a      	bne.n	81074fe <prvAddCurrentTaskToDelayedList+0x3a>
 81074e8:	683b      	ldr	r3, [r7, #0]
 81074ea:	2b00      	cmp	r3, #0
 81074ec:	d007      	beq.n	81074fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81074ee:	4b1a      	ldr	r3, [pc, #104]	; (8107558 <prvAddCurrentTaskToDelayedList+0x94>)
 81074f0:	681b      	ldr	r3, [r3, #0]
 81074f2:	3304      	adds	r3, #4
 81074f4:	4619      	mov	r1, r3
 81074f6:	4819      	ldr	r0, [pc, #100]	; (810755c <prvAddCurrentTaskToDelayedList+0x98>)
 81074f8:	f7fe fbf7 	bl	8105cea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81074fc:	e026      	b.n	810754c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81074fe:	68fa      	ldr	r2, [r7, #12]
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	4413      	add	r3, r2
 8107504:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8107506:	4b14      	ldr	r3, [pc, #80]	; (8107558 <prvAddCurrentTaskToDelayedList+0x94>)
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	68ba      	ldr	r2, [r7, #8]
 810750c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810750e:	68ba      	ldr	r2, [r7, #8]
 8107510:	68fb      	ldr	r3, [r7, #12]
 8107512:	429a      	cmp	r2, r3
 8107514:	d209      	bcs.n	810752a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8107516:	4b12      	ldr	r3, [pc, #72]	; (8107560 <prvAddCurrentTaskToDelayedList+0x9c>)
 8107518:	681a      	ldr	r2, [r3, #0]
 810751a:	4b0f      	ldr	r3, [pc, #60]	; (8107558 <prvAddCurrentTaskToDelayedList+0x94>)
 810751c:	681b      	ldr	r3, [r3, #0]
 810751e:	3304      	adds	r3, #4
 8107520:	4619      	mov	r1, r3
 8107522:	4610      	mov	r0, r2
 8107524:	f7fe fc05 	bl	8105d32 <vListInsert>
}
 8107528:	e010      	b.n	810754c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810752a:	4b0e      	ldr	r3, [pc, #56]	; (8107564 <prvAddCurrentTaskToDelayedList+0xa0>)
 810752c:	681a      	ldr	r2, [r3, #0]
 810752e:	4b0a      	ldr	r3, [pc, #40]	; (8107558 <prvAddCurrentTaskToDelayedList+0x94>)
 8107530:	681b      	ldr	r3, [r3, #0]
 8107532:	3304      	adds	r3, #4
 8107534:	4619      	mov	r1, r3
 8107536:	4610      	mov	r0, r2
 8107538:	f7fe fbfb 	bl	8105d32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810753c:	4b0a      	ldr	r3, [pc, #40]	; (8107568 <prvAddCurrentTaskToDelayedList+0xa4>)
 810753e:	681b      	ldr	r3, [r3, #0]
 8107540:	68ba      	ldr	r2, [r7, #8]
 8107542:	429a      	cmp	r2, r3
 8107544:	d202      	bcs.n	810754c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8107546:	4a08      	ldr	r2, [pc, #32]	; (8107568 <prvAddCurrentTaskToDelayedList+0xa4>)
 8107548:	68bb      	ldr	r3, [r7, #8]
 810754a:	6013      	str	r3, [r2, #0]
}
 810754c:	bf00      	nop
 810754e:	3710      	adds	r7, #16
 8107550:	46bd      	mov	sp, r7
 8107552:	bd80      	pop	{r7, pc}
 8107554:	10000bc0 	.word	0x10000bc0
 8107558:	100006e8 	.word	0x100006e8
 810755c:	10000ba8 	.word	0x10000ba8
 8107560:	10000b78 	.word	0x10000b78
 8107564:	10000b74 	.word	0x10000b74
 8107568:	10000bdc 	.word	0x10000bdc

0810756c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810756c:	b580      	push	{r7, lr}
 810756e:	b08a      	sub	sp, #40	; 0x28
 8107570:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8107572:	2300      	movs	r3, #0
 8107574:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8107576:	f000 faff 	bl	8107b78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810757a:	4b1c      	ldr	r3, [pc, #112]	; (81075ec <xTimerCreateTimerTask+0x80>)
 810757c:	681b      	ldr	r3, [r3, #0]
 810757e:	2b00      	cmp	r3, #0
 8107580:	d021      	beq.n	81075c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8107582:	2300      	movs	r3, #0
 8107584:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8107586:	2300      	movs	r3, #0
 8107588:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810758a:	1d3a      	adds	r2, r7, #4
 810758c:	f107 0108 	add.w	r1, r7, #8
 8107590:	f107 030c 	add.w	r3, r7, #12
 8107594:	4618      	mov	r0, r3
 8107596:	f7fe fb61 	bl	8105c5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810759a:	6879      	ldr	r1, [r7, #4]
 810759c:	68bb      	ldr	r3, [r7, #8]
 810759e:	68fa      	ldr	r2, [r7, #12]
 81075a0:	9202      	str	r2, [sp, #8]
 81075a2:	9301      	str	r3, [sp, #4]
 81075a4:	2302      	movs	r3, #2
 81075a6:	9300      	str	r3, [sp, #0]
 81075a8:	2300      	movs	r3, #0
 81075aa:	460a      	mov	r2, r1
 81075ac:	4910      	ldr	r1, [pc, #64]	; (81075f0 <xTimerCreateTimerTask+0x84>)
 81075ae:	4811      	ldr	r0, [pc, #68]	; (81075f4 <xTimerCreateTimerTask+0x88>)
 81075b0:	f7ff f8f6 	bl	81067a0 <xTaskCreateStatic>
 81075b4:	4602      	mov	r2, r0
 81075b6:	4b10      	ldr	r3, [pc, #64]	; (81075f8 <xTimerCreateTimerTask+0x8c>)
 81075b8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81075ba:	4b0f      	ldr	r3, [pc, #60]	; (81075f8 <xTimerCreateTimerTask+0x8c>)
 81075bc:	681b      	ldr	r3, [r3, #0]
 81075be:	2b00      	cmp	r3, #0
 81075c0:	d001      	beq.n	81075c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81075c2:	2301      	movs	r3, #1
 81075c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81075c6:	697b      	ldr	r3, [r7, #20]
 81075c8:	2b00      	cmp	r3, #0
 81075ca:	d109      	bne.n	81075e0 <xTimerCreateTimerTask+0x74>
 81075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81075d0:	f383 8811 	msr	BASEPRI, r3
 81075d4:	f3bf 8f6f 	isb	sy
 81075d8:	f3bf 8f4f 	dsb	sy
 81075dc:	613b      	str	r3, [r7, #16]
 81075de:	e7fe      	b.n	81075de <xTimerCreateTimerTask+0x72>
	return xReturn;
 81075e0:	697b      	ldr	r3, [r7, #20]
}
 81075e2:	4618      	mov	r0, r3
 81075e4:	3718      	adds	r7, #24
 81075e6:	46bd      	mov	sp, r7
 81075e8:	bd80      	pop	{r7, pc}
 81075ea:	bf00      	nop
 81075ec:	10000c18 	.word	0x10000c18
 81075f0:	081084d8 	.word	0x081084d8
 81075f4:	0810772d 	.word	0x0810772d
 81075f8:	10000c1c 	.word	0x10000c1c

081075fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81075fc:	b580      	push	{r7, lr}
 81075fe:	b08a      	sub	sp, #40	; 0x28
 8107600:	af00      	add	r7, sp, #0
 8107602:	60f8      	str	r0, [r7, #12]
 8107604:	60b9      	str	r1, [r7, #8]
 8107606:	607a      	str	r2, [r7, #4]
 8107608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810760a:	2300      	movs	r3, #0
 810760c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810760e:	68fb      	ldr	r3, [r7, #12]
 8107610:	2b00      	cmp	r3, #0
 8107612:	d109      	bne.n	8107628 <xTimerGenericCommand+0x2c>
 8107614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107618:	f383 8811 	msr	BASEPRI, r3
 810761c:	f3bf 8f6f 	isb	sy
 8107620:	f3bf 8f4f 	dsb	sy
 8107624:	623b      	str	r3, [r7, #32]
 8107626:	e7fe      	b.n	8107626 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8107628:	4b19      	ldr	r3, [pc, #100]	; (8107690 <xTimerGenericCommand+0x94>)
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	2b00      	cmp	r3, #0
 810762e:	d02a      	beq.n	8107686 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8107630:	68bb      	ldr	r3, [r7, #8]
 8107632:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8107634:	687b      	ldr	r3, [r7, #4]
 8107636:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8107638:	68fb      	ldr	r3, [r7, #12]
 810763a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810763c:	68bb      	ldr	r3, [r7, #8]
 810763e:	2b05      	cmp	r3, #5
 8107640:	dc18      	bgt.n	8107674 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8107642:	f7ff feb5 	bl	81073b0 <xTaskGetSchedulerState>
 8107646:	4603      	mov	r3, r0
 8107648:	2b02      	cmp	r3, #2
 810764a:	d109      	bne.n	8107660 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810764c:	4b10      	ldr	r3, [pc, #64]	; (8107690 <xTimerGenericCommand+0x94>)
 810764e:	6818      	ldr	r0, [r3, #0]
 8107650:	f107 0110 	add.w	r1, r7, #16
 8107654:	2300      	movs	r3, #0
 8107656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107658:	f7fe fccc 	bl	8105ff4 <xQueueGenericSend>
 810765c:	6278      	str	r0, [r7, #36]	; 0x24
 810765e:	e012      	b.n	8107686 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8107660:	4b0b      	ldr	r3, [pc, #44]	; (8107690 <xTimerGenericCommand+0x94>)
 8107662:	6818      	ldr	r0, [r3, #0]
 8107664:	f107 0110 	add.w	r1, r7, #16
 8107668:	2300      	movs	r3, #0
 810766a:	2200      	movs	r2, #0
 810766c:	f7fe fcc2 	bl	8105ff4 <xQueueGenericSend>
 8107670:	6278      	str	r0, [r7, #36]	; 0x24
 8107672:	e008      	b.n	8107686 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8107674:	4b06      	ldr	r3, [pc, #24]	; (8107690 <xTimerGenericCommand+0x94>)
 8107676:	6818      	ldr	r0, [r3, #0]
 8107678:	f107 0110 	add.w	r1, r7, #16
 810767c:	2300      	movs	r3, #0
 810767e:	683a      	ldr	r2, [r7, #0]
 8107680:	f7fe fdb2 	bl	81061e8 <xQueueGenericSendFromISR>
 8107684:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8107686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8107688:	4618      	mov	r0, r3
 810768a:	3728      	adds	r7, #40	; 0x28
 810768c:	46bd      	mov	sp, r7
 810768e:	bd80      	pop	{r7, pc}
 8107690:	10000c18 	.word	0x10000c18

08107694 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8107694:	b580      	push	{r7, lr}
 8107696:	b088      	sub	sp, #32
 8107698:	af02      	add	r7, sp, #8
 810769a:	6078      	str	r0, [r7, #4]
 810769c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810769e:	4b22      	ldr	r3, [pc, #136]	; (8107728 <prvProcessExpiredTimer+0x94>)
 81076a0:	681b      	ldr	r3, [r3, #0]
 81076a2:	68db      	ldr	r3, [r3, #12]
 81076a4:	68db      	ldr	r3, [r3, #12]
 81076a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81076a8:	697b      	ldr	r3, [r7, #20]
 81076aa:	3304      	adds	r3, #4
 81076ac:	4618      	mov	r0, r3
 81076ae:	f7fe fb79 	bl	8105da4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81076b2:	697b      	ldr	r3, [r7, #20]
 81076b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81076b8:	f003 0304 	and.w	r3, r3, #4
 81076bc:	2b00      	cmp	r3, #0
 81076be:	d021      	beq.n	8107704 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81076c0:	697b      	ldr	r3, [r7, #20]
 81076c2:	699a      	ldr	r2, [r3, #24]
 81076c4:	687b      	ldr	r3, [r7, #4]
 81076c6:	18d1      	adds	r1, r2, r3
 81076c8:	687b      	ldr	r3, [r7, #4]
 81076ca:	683a      	ldr	r2, [r7, #0]
 81076cc:	6978      	ldr	r0, [r7, #20]
 81076ce:	f000 f8d1 	bl	8107874 <prvInsertTimerInActiveList>
 81076d2:	4603      	mov	r3, r0
 81076d4:	2b00      	cmp	r3, #0
 81076d6:	d01e      	beq.n	8107716 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81076d8:	2300      	movs	r3, #0
 81076da:	9300      	str	r3, [sp, #0]
 81076dc:	2300      	movs	r3, #0
 81076de:	687a      	ldr	r2, [r7, #4]
 81076e0:	2100      	movs	r1, #0
 81076e2:	6978      	ldr	r0, [r7, #20]
 81076e4:	f7ff ff8a 	bl	81075fc <xTimerGenericCommand>
 81076e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81076ea:	693b      	ldr	r3, [r7, #16]
 81076ec:	2b00      	cmp	r3, #0
 81076ee:	d112      	bne.n	8107716 <prvProcessExpiredTimer+0x82>
 81076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81076f4:	f383 8811 	msr	BASEPRI, r3
 81076f8:	f3bf 8f6f 	isb	sy
 81076fc:	f3bf 8f4f 	dsb	sy
 8107700:	60fb      	str	r3, [r7, #12]
 8107702:	e7fe      	b.n	8107702 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107704:	697b      	ldr	r3, [r7, #20]
 8107706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810770a:	f023 0301 	bic.w	r3, r3, #1
 810770e:	b2da      	uxtb	r2, r3
 8107710:	697b      	ldr	r3, [r7, #20]
 8107712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8107716:	697b      	ldr	r3, [r7, #20]
 8107718:	6a1b      	ldr	r3, [r3, #32]
 810771a:	6978      	ldr	r0, [r7, #20]
 810771c:	4798      	blx	r3
}
 810771e:	bf00      	nop
 8107720:	3718      	adds	r7, #24
 8107722:	46bd      	mov	sp, r7
 8107724:	bd80      	pop	{r7, pc}
 8107726:	bf00      	nop
 8107728:	10000c10 	.word	0x10000c10

0810772c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810772c:	b580      	push	{r7, lr}
 810772e:	b084      	sub	sp, #16
 8107730:	af00      	add	r7, sp, #0
 8107732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8107734:	f107 0308 	add.w	r3, r7, #8
 8107738:	4618      	mov	r0, r3
 810773a:	f000 f857 	bl	81077ec <prvGetNextExpireTime>
 810773e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8107740:	68bb      	ldr	r3, [r7, #8]
 8107742:	4619      	mov	r1, r3
 8107744:	68f8      	ldr	r0, [r7, #12]
 8107746:	f000 f803 	bl	8107750 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810774a:	f000 f8d5 	bl	81078f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810774e:	e7f1      	b.n	8107734 <prvTimerTask+0x8>

08107750 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8107750:	b580      	push	{r7, lr}
 8107752:	b084      	sub	sp, #16
 8107754:	af00      	add	r7, sp, #0
 8107756:	6078      	str	r0, [r7, #4]
 8107758:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810775a:	f7ff fa57 	bl	8106c0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810775e:	f107 0308 	add.w	r3, r7, #8
 8107762:	4618      	mov	r0, r3
 8107764:	f000 f866 	bl	8107834 <prvSampleTimeNow>
 8107768:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810776a:	68bb      	ldr	r3, [r7, #8]
 810776c:	2b00      	cmp	r3, #0
 810776e:	d130      	bne.n	81077d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8107770:	683b      	ldr	r3, [r7, #0]
 8107772:	2b00      	cmp	r3, #0
 8107774:	d10a      	bne.n	810778c <prvProcessTimerOrBlockTask+0x3c>
 8107776:	687a      	ldr	r2, [r7, #4]
 8107778:	68fb      	ldr	r3, [r7, #12]
 810777a:	429a      	cmp	r2, r3
 810777c:	d806      	bhi.n	810778c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810777e:	f7ff fa53 	bl	8106c28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8107782:	68f9      	ldr	r1, [r7, #12]
 8107784:	6878      	ldr	r0, [r7, #4]
 8107786:	f7ff ff85 	bl	8107694 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810778a:	e024      	b.n	81077d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810778c:	683b      	ldr	r3, [r7, #0]
 810778e:	2b00      	cmp	r3, #0
 8107790:	d008      	beq.n	81077a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8107792:	4b13      	ldr	r3, [pc, #76]	; (81077e0 <prvProcessTimerOrBlockTask+0x90>)
 8107794:	681b      	ldr	r3, [r3, #0]
 8107796:	681b      	ldr	r3, [r3, #0]
 8107798:	2b00      	cmp	r3, #0
 810779a:	d101      	bne.n	81077a0 <prvProcessTimerOrBlockTask+0x50>
 810779c:	2301      	movs	r3, #1
 810779e:	e000      	b.n	81077a2 <prvProcessTimerOrBlockTask+0x52>
 81077a0:	2300      	movs	r3, #0
 81077a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 81077a4:	4b0f      	ldr	r3, [pc, #60]	; (81077e4 <prvProcessTimerOrBlockTask+0x94>)
 81077a6:	6818      	ldr	r0, [r3, #0]
 81077a8:	687a      	ldr	r2, [r7, #4]
 81077aa:	68fb      	ldr	r3, [r7, #12]
 81077ac:	1ad3      	subs	r3, r2, r3
 81077ae:	683a      	ldr	r2, [r7, #0]
 81077b0:	4619      	mov	r1, r3
 81077b2:	f7fe ffc1 	bl	8106738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 81077b6:	f7ff fa37 	bl	8106c28 <xTaskResumeAll>
 81077ba:	4603      	mov	r3, r0
 81077bc:	2b00      	cmp	r3, #0
 81077be:	d10a      	bne.n	81077d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81077c0:	4b09      	ldr	r3, [pc, #36]	; (81077e8 <prvProcessTimerOrBlockTask+0x98>)
 81077c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81077c6:	601a      	str	r2, [r3, #0]
 81077c8:	f3bf 8f4f 	dsb	sy
 81077cc:	f3bf 8f6f 	isb	sy
}
 81077d0:	e001      	b.n	81077d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81077d2:	f7ff fa29 	bl	8106c28 <xTaskResumeAll>
}
 81077d6:	bf00      	nop
 81077d8:	3710      	adds	r7, #16
 81077da:	46bd      	mov	sp, r7
 81077dc:	bd80      	pop	{r7, pc}
 81077de:	bf00      	nop
 81077e0:	10000c14 	.word	0x10000c14
 81077e4:	10000c18 	.word	0x10000c18
 81077e8:	e000ed04 	.word	0xe000ed04

081077ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81077ec:	b480      	push	{r7}
 81077ee:	b085      	sub	sp, #20
 81077f0:	af00      	add	r7, sp, #0
 81077f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81077f4:	4b0e      	ldr	r3, [pc, #56]	; (8107830 <prvGetNextExpireTime+0x44>)
 81077f6:	681b      	ldr	r3, [r3, #0]
 81077f8:	681b      	ldr	r3, [r3, #0]
 81077fa:	2b00      	cmp	r3, #0
 81077fc:	d101      	bne.n	8107802 <prvGetNextExpireTime+0x16>
 81077fe:	2201      	movs	r2, #1
 8107800:	e000      	b.n	8107804 <prvGetNextExpireTime+0x18>
 8107802:	2200      	movs	r2, #0
 8107804:	687b      	ldr	r3, [r7, #4]
 8107806:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	681b      	ldr	r3, [r3, #0]
 810780c:	2b00      	cmp	r3, #0
 810780e:	d105      	bne.n	810781c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8107810:	4b07      	ldr	r3, [pc, #28]	; (8107830 <prvGetNextExpireTime+0x44>)
 8107812:	681b      	ldr	r3, [r3, #0]
 8107814:	68db      	ldr	r3, [r3, #12]
 8107816:	681b      	ldr	r3, [r3, #0]
 8107818:	60fb      	str	r3, [r7, #12]
 810781a:	e001      	b.n	8107820 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810781c:	2300      	movs	r3, #0
 810781e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8107820:	68fb      	ldr	r3, [r7, #12]
}
 8107822:	4618      	mov	r0, r3
 8107824:	3714      	adds	r7, #20
 8107826:	46bd      	mov	sp, r7
 8107828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810782c:	4770      	bx	lr
 810782e:	bf00      	nop
 8107830:	10000c10 	.word	0x10000c10

08107834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8107834:	b580      	push	{r7, lr}
 8107836:	b084      	sub	sp, #16
 8107838:	af00      	add	r7, sp, #0
 810783a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810783c:	f7ff fa90 	bl	8106d60 <xTaskGetTickCount>
 8107840:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8107842:	4b0b      	ldr	r3, [pc, #44]	; (8107870 <prvSampleTimeNow+0x3c>)
 8107844:	681b      	ldr	r3, [r3, #0]
 8107846:	68fa      	ldr	r2, [r7, #12]
 8107848:	429a      	cmp	r2, r3
 810784a:	d205      	bcs.n	8107858 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810784c:	f000 f930 	bl	8107ab0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	2201      	movs	r2, #1
 8107854:	601a      	str	r2, [r3, #0]
 8107856:	e002      	b.n	810785e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8107858:	687b      	ldr	r3, [r7, #4]
 810785a:	2200      	movs	r2, #0
 810785c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810785e:	4a04      	ldr	r2, [pc, #16]	; (8107870 <prvSampleTimeNow+0x3c>)
 8107860:	68fb      	ldr	r3, [r7, #12]
 8107862:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8107864:	68fb      	ldr	r3, [r7, #12]
}
 8107866:	4618      	mov	r0, r3
 8107868:	3710      	adds	r7, #16
 810786a:	46bd      	mov	sp, r7
 810786c:	bd80      	pop	{r7, pc}
 810786e:	bf00      	nop
 8107870:	10000c20 	.word	0x10000c20

08107874 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8107874:	b580      	push	{r7, lr}
 8107876:	b086      	sub	sp, #24
 8107878:	af00      	add	r7, sp, #0
 810787a:	60f8      	str	r0, [r7, #12]
 810787c:	60b9      	str	r1, [r7, #8]
 810787e:	607a      	str	r2, [r7, #4]
 8107880:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8107882:	2300      	movs	r3, #0
 8107884:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8107886:	68fb      	ldr	r3, [r7, #12]
 8107888:	68ba      	ldr	r2, [r7, #8]
 810788a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810788c:	68fb      	ldr	r3, [r7, #12]
 810788e:	68fa      	ldr	r2, [r7, #12]
 8107890:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8107892:	68ba      	ldr	r2, [r7, #8]
 8107894:	687b      	ldr	r3, [r7, #4]
 8107896:	429a      	cmp	r2, r3
 8107898:	d812      	bhi.n	81078c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810789a:	687a      	ldr	r2, [r7, #4]
 810789c:	683b      	ldr	r3, [r7, #0]
 810789e:	1ad2      	subs	r2, r2, r3
 81078a0:	68fb      	ldr	r3, [r7, #12]
 81078a2:	699b      	ldr	r3, [r3, #24]
 81078a4:	429a      	cmp	r2, r3
 81078a6:	d302      	bcc.n	81078ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 81078a8:	2301      	movs	r3, #1
 81078aa:	617b      	str	r3, [r7, #20]
 81078ac:	e01b      	b.n	81078e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 81078ae:	4b10      	ldr	r3, [pc, #64]	; (81078f0 <prvInsertTimerInActiveList+0x7c>)
 81078b0:	681a      	ldr	r2, [r3, #0]
 81078b2:	68fb      	ldr	r3, [r7, #12]
 81078b4:	3304      	adds	r3, #4
 81078b6:	4619      	mov	r1, r3
 81078b8:	4610      	mov	r0, r2
 81078ba:	f7fe fa3a 	bl	8105d32 <vListInsert>
 81078be:	e012      	b.n	81078e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81078c0:	687a      	ldr	r2, [r7, #4]
 81078c2:	683b      	ldr	r3, [r7, #0]
 81078c4:	429a      	cmp	r2, r3
 81078c6:	d206      	bcs.n	81078d6 <prvInsertTimerInActiveList+0x62>
 81078c8:	68ba      	ldr	r2, [r7, #8]
 81078ca:	683b      	ldr	r3, [r7, #0]
 81078cc:	429a      	cmp	r2, r3
 81078ce:	d302      	bcc.n	81078d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81078d0:	2301      	movs	r3, #1
 81078d2:	617b      	str	r3, [r7, #20]
 81078d4:	e007      	b.n	81078e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81078d6:	4b07      	ldr	r3, [pc, #28]	; (81078f4 <prvInsertTimerInActiveList+0x80>)
 81078d8:	681a      	ldr	r2, [r3, #0]
 81078da:	68fb      	ldr	r3, [r7, #12]
 81078dc:	3304      	adds	r3, #4
 81078de:	4619      	mov	r1, r3
 81078e0:	4610      	mov	r0, r2
 81078e2:	f7fe fa26 	bl	8105d32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 81078e6:	697b      	ldr	r3, [r7, #20]
}
 81078e8:	4618      	mov	r0, r3
 81078ea:	3718      	adds	r7, #24
 81078ec:	46bd      	mov	sp, r7
 81078ee:	bd80      	pop	{r7, pc}
 81078f0:	10000c14 	.word	0x10000c14
 81078f4:	10000c10 	.word	0x10000c10

081078f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81078f8:	b580      	push	{r7, lr}
 81078fa:	b08e      	sub	sp, #56	; 0x38
 81078fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81078fe:	e0c6      	b.n	8107a8e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	2b00      	cmp	r3, #0
 8107904:	da17      	bge.n	8107936 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8107906:	1d3b      	adds	r3, r7, #4
 8107908:	3304      	adds	r3, #4
 810790a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810790e:	2b00      	cmp	r3, #0
 8107910:	d109      	bne.n	8107926 <prvProcessReceivedCommands+0x2e>
 8107912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107916:	f383 8811 	msr	BASEPRI, r3
 810791a:	f3bf 8f6f 	isb	sy
 810791e:	f3bf 8f4f 	dsb	sy
 8107922:	61fb      	str	r3, [r7, #28]
 8107924:	e7fe      	b.n	8107924 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8107926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107928:	681b      	ldr	r3, [r3, #0]
 810792a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810792c:	6850      	ldr	r0, [r2, #4]
 810792e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8107930:	6892      	ldr	r2, [r2, #8]
 8107932:	4611      	mov	r1, r2
 8107934:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8107936:	687b      	ldr	r3, [r7, #4]
 8107938:	2b00      	cmp	r3, #0
 810793a:	f2c0 80a7 	blt.w	8107a8c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810793e:	68fb      	ldr	r3, [r7, #12]
 8107940:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8107942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107944:	695b      	ldr	r3, [r3, #20]
 8107946:	2b00      	cmp	r3, #0
 8107948:	d004      	beq.n	8107954 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810794c:	3304      	adds	r3, #4
 810794e:	4618      	mov	r0, r3
 8107950:	f7fe fa28 	bl	8105da4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8107954:	463b      	mov	r3, r7
 8107956:	4618      	mov	r0, r3
 8107958:	f7ff ff6c 	bl	8107834 <prvSampleTimeNow>
 810795c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810795e:	687b      	ldr	r3, [r7, #4]
 8107960:	2b09      	cmp	r3, #9
 8107962:	f200 8094 	bhi.w	8107a8e <prvProcessReceivedCommands+0x196>
 8107966:	a201      	add	r2, pc, #4	; (adr r2, 810796c <prvProcessReceivedCommands+0x74>)
 8107968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810796c:	08107995 	.word	0x08107995
 8107970:	08107995 	.word	0x08107995
 8107974:	08107995 	.word	0x08107995
 8107978:	08107a07 	.word	0x08107a07
 810797c:	08107a1b 	.word	0x08107a1b
 8107980:	08107a63 	.word	0x08107a63
 8107984:	08107995 	.word	0x08107995
 8107988:	08107995 	.word	0x08107995
 810798c:	08107a07 	.word	0x08107a07
 8107990:	08107a1b 	.word	0x08107a1b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8107994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107996:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810799a:	f043 0301 	orr.w	r3, r3, #1
 810799e:	b2da      	uxtb	r2, r3
 81079a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 81079a6:	68ba      	ldr	r2, [r7, #8]
 81079a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079aa:	699b      	ldr	r3, [r3, #24]
 81079ac:	18d1      	adds	r1, r2, r3
 81079ae:	68bb      	ldr	r3, [r7, #8]
 81079b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81079b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81079b4:	f7ff ff5e 	bl	8107874 <prvInsertTimerInActiveList>
 81079b8:	4603      	mov	r3, r0
 81079ba:	2b00      	cmp	r3, #0
 81079bc:	d067      	beq.n	8107a8e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81079be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079c0:	6a1b      	ldr	r3, [r3, #32]
 81079c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81079c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81079cc:	f003 0304 	and.w	r3, r3, #4
 81079d0:	2b00      	cmp	r3, #0
 81079d2:	d05c      	beq.n	8107a8e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81079d4:	68ba      	ldr	r2, [r7, #8]
 81079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81079d8:	699b      	ldr	r3, [r3, #24]
 81079da:	441a      	add	r2, r3
 81079dc:	2300      	movs	r3, #0
 81079de:	9300      	str	r3, [sp, #0]
 81079e0:	2300      	movs	r3, #0
 81079e2:	2100      	movs	r1, #0
 81079e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81079e6:	f7ff fe09 	bl	81075fc <xTimerGenericCommand>
 81079ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81079ec:	6a3b      	ldr	r3, [r7, #32]
 81079ee:	2b00      	cmp	r3, #0
 81079f0:	d14d      	bne.n	8107a8e <prvProcessReceivedCommands+0x196>
 81079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81079f6:	f383 8811 	msr	BASEPRI, r3
 81079fa:	f3bf 8f6f 	isb	sy
 81079fe:	f3bf 8f4f 	dsb	sy
 8107a02:	61bb      	str	r3, [r7, #24]
 8107a04:	e7fe      	b.n	8107a04 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107a0c:	f023 0301 	bic.w	r3, r3, #1
 8107a10:	b2da      	uxtb	r2, r3
 8107a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8107a18:	e039      	b.n	8107a8e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8107a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107a20:	f043 0301 	orr.w	r3, r3, #1
 8107a24:	b2da      	uxtb	r2, r3
 8107a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8107a2c:	68ba      	ldr	r2, [r7, #8]
 8107a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a30:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8107a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a34:	699b      	ldr	r3, [r3, #24]
 8107a36:	2b00      	cmp	r3, #0
 8107a38:	d109      	bne.n	8107a4e <prvProcessReceivedCommands+0x156>
 8107a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107a3e:	f383 8811 	msr	BASEPRI, r3
 8107a42:	f3bf 8f6f 	isb	sy
 8107a46:	f3bf 8f4f 	dsb	sy
 8107a4a:	617b      	str	r3, [r7, #20]
 8107a4c:	e7fe      	b.n	8107a4c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8107a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a50:	699a      	ldr	r2, [r3, #24]
 8107a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107a54:	18d1      	adds	r1, r2, r3
 8107a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107a5c:	f7ff ff0a 	bl	8107874 <prvInsertTimerInActiveList>
					break;
 8107a60:	e015      	b.n	8107a8e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8107a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107a68:	f003 0302 	and.w	r3, r3, #2
 8107a6c:	2b00      	cmp	r3, #0
 8107a6e:	d103      	bne.n	8107a78 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8107a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107a72:	f000 fbc7 	bl	8108204 <vPortFree>
 8107a76:	e00a      	b.n	8107a8e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107a7e:	f023 0301 	bic.w	r3, r3, #1
 8107a82:	b2da      	uxtb	r2, r3
 8107a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8107a8a:	e000      	b.n	8107a8e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8107a8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8107a8e:	4b07      	ldr	r3, [pc, #28]	; (8107aac <prvProcessReceivedCommands+0x1b4>)
 8107a90:	681b      	ldr	r3, [r3, #0]
 8107a92:	1d39      	adds	r1, r7, #4
 8107a94:	2200      	movs	r2, #0
 8107a96:	4618      	mov	r0, r3
 8107a98:	f7fe fc3a 	bl	8106310 <xQueueReceive>
 8107a9c:	4603      	mov	r3, r0
 8107a9e:	2b00      	cmp	r3, #0
 8107aa0:	f47f af2e 	bne.w	8107900 <prvProcessReceivedCommands+0x8>
	}
}
 8107aa4:	bf00      	nop
 8107aa6:	3730      	adds	r7, #48	; 0x30
 8107aa8:	46bd      	mov	sp, r7
 8107aaa:	bd80      	pop	{r7, pc}
 8107aac:	10000c18 	.word	0x10000c18

08107ab0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8107ab0:	b580      	push	{r7, lr}
 8107ab2:	b088      	sub	sp, #32
 8107ab4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8107ab6:	e047      	b.n	8107b48 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8107ab8:	4b2d      	ldr	r3, [pc, #180]	; (8107b70 <prvSwitchTimerLists+0xc0>)
 8107aba:	681b      	ldr	r3, [r3, #0]
 8107abc:	68db      	ldr	r3, [r3, #12]
 8107abe:	681b      	ldr	r3, [r3, #0]
 8107ac0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107ac2:	4b2b      	ldr	r3, [pc, #172]	; (8107b70 <prvSwitchTimerLists+0xc0>)
 8107ac4:	681b      	ldr	r3, [r3, #0]
 8107ac6:	68db      	ldr	r3, [r3, #12]
 8107ac8:	68db      	ldr	r3, [r3, #12]
 8107aca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8107acc:	68fb      	ldr	r3, [r7, #12]
 8107ace:	3304      	adds	r3, #4
 8107ad0:	4618      	mov	r0, r3
 8107ad2:	f7fe f967 	bl	8105da4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8107ad6:	68fb      	ldr	r3, [r7, #12]
 8107ad8:	6a1b      	ldr	r3, [r3, #32]
 8107ada:	68f8      	ldr	r0, [r7, #12]
 8107adc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107ade:	68fb      	ldr	r3, [r7, #12]
 8107ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107ae4:	f003 0304 	and.w	r3, r3, #4
 8107ae8:	2b00      	cmp	r3, #0
 8107aea:	d02d      	beq.n	8107b48 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8107aec:	68fb      	ldr	r3, [r7, #12]
 8107aee:	699b      	ldr	r3, [r3, #24]
 8107af0:	693a      	ldr	r2, [r7, #16]
 8107af2:	4413      	add	r3, r2
 8107af4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8107af6:	68ba      	ldr	r2, [r7, #8]
 8107af8:	693b      	ldr	r3, [r7, #16]
 8107afa:	429a      	cmp	r2, r3
 8107afc:	d90e      	bls.n	8107b1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8107afe:	68fb      	ldr	r3, [r7, #12]
 8107b00:	68ba      	ldr	r2, [r7, #8]
 8107b02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8107b04:	68fb      	ldr	r3, [r7, #12]
 8107b06:	68fa      	ldr	r2, [r7, #12]
 8107b08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8107b0a:	4b19      	ldr	r3, [pc, #100]	; (8107b70 <prvSwitchTimerLists+0xc0>)
 8107b0c:	681a      	ldr	r2, [r3, #0]
 8107b0e:	68fb      	ldr	r3, [r7, #12]
 8107b10:	3304      	adds	r3, #4
 8107b12:	4619      	mov	r1, r3
 8107b14:	4610      	mov	r0, r2
 8107b16:	f7fe f90c 	bl	8105d32 <vListInsert>
 8107b1a:	e015      	b.n	8107b48 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8107b1c:	2300      	movs	r3, #0
 8107b1e:	9300      	str	r3, [sp, #0]
 8107b20:	2300      	movs	r3, #0
 8107b22:	693a      	ldr	r2, [r7, #16]
 8107b24:	2100      	movs	r1, #0
 8107b26:	68f8      	ldr	r0, [r7, #12]
 8107b28:	f7ff fd68 	bl	81075fc <xTimerGenericCommand>
 8107b2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8107b2e:	687b      	ldr	r3, [r7, #4]
 8107b30:	2b00      	cmp	r3, #0
 8107b32:	d109      	bne.n	8107b48 <prvSwitchTimerLists+0x98>
 8107b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b38:	f383 8811 	msr	BASEPRI, r3
 8107b3c:	f3bf 8f6f 	isb	sy
 8107b40:	f3bf 8f4f 	dsb	sy
 8107b44:	603b      	str	r3, [r7, #0]
 8107b46:	e7fe      	b.n	8107b46 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8107b48:	4b09      	ldr	r3, [pc, #36]	; (8107b70 <prvSwitchTimerLists+0xc0>)
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	681b      	ldr	r3, [r3, #0]
 8107b4e:	2b00      	cmp	r3, #0
 8107b50:	d1b2      	bne.n	8107ab8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8107b52:	4b07      	ldr	r3, [pc, #28]	; (8107b70 <prvSwitchTimerLists+0xc0>)
 8107b54:	681b      	ldr	r3, [r3, #0]
 8107b56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8107b58:	4b06      	ldr	r3, [pc, #24]	; (8107b74 <prvSwitchTimerLists+0xc4>)
 8107b5a:	681b      	ldr	r3, [r3, #0]
 8107b5c:	4a04      	ldr	r2, [pc, #16]	; (8107b70 <prvSwitchTimerLists+0xc0>)
 8107b5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8107b60:	4a04      	ldr	r2, [pc, #16]	; (8107b74 <prvSwitchTimerLists+0xc4>)
 8107b62:	697b      	ldr	r3, [r7, #20]
 8107b64:	6013      	str	r3, [r2, #0]
}
 8107b66:	bf00      	nop
 8107b68:	3718      	adds	r7, #24
 8107b6a:	46bd      	mov	sp, r7
 8107b6c:	bd80      	pop	{r7, pc}
 8107b6e:	bf00      	nop
 8107b70:	10000c10 	.word	0x10000c10
 8107b74:	10000c14 	.word	0x10000c14

08107b78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8107b78:	b580      	push	{r7, lr}
 8107b7a:	b082      	sub	sp, #8
 8107b7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8107b7e:	f000 f965 	bl	8107e4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8107b82:	4b15      	ldr	r3, [pc, #84]	; (8107bd8 <prvCheckForValidListAndQueue+0x60>)
 8107b84:	681b      	ldr	r3, [r3, #0]
 8107b86:	2b00      	cmp	r3, #0
 8107b88:	d120      	bne.n	8107bcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8107b8a:	4814      	ldr	r0, [pc, #80]	; (8107bdc <prvCheckForValidListAndQueue+0x64>)
 8107b8c:	f7fe f880 	bl	8105c90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8107b90:	4813      	ldr	r0, [pc, #76]	; (8107be0 <prvCheckForValidListAndQueue+0x68>)
 8107b92:	f7fe f87d 	bl	8105c90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8107b96:	4b13      	ldr	r3, [pc, #76]	; (8107be4 <prvCheckForValidListAndQueue+0x6c>)
 8107b98:	4a10      	ldr	r2, [pc, #64]	; (8107bdc <prvCheckForValidListAndQueue+0x64>)
 8107b9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8107b9c:	4b12      	ldr	r3, [pc, #72]	; (8107be8 <prvCheckForValidListAndQueue+0x70>)
 8107b9e:	4a10      	ldr	r2, [pc, #64]	; (8107be0 <prvCheckForValidListAndQueue+0x68>)
 8107ba0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8107ba2:	2300      	movs	r3, #0
 8107ba4:	9300      	str	r3, [sp, #0]
 8107ba6:	4b11      	ldr	r3, [pc, #68]	; (8107bec <prvCheckForValidListAndQueue+0x74>)
 8107ba8:	4a11      	ldr	r2, [pc, #68]	; (8107bf0 <prvCheckForValidListAndQueue+0x78>)
 8107baa:	2110      	movs	r1, #16
 8107bac:	200a      	movs	r0, #10
 8107bae:	f7fe f98b 	bl	8105ec8 <xQueueGenericCreateStatic>
 8107bb2:	4602      	mov	r2, r0
 8107bb4:	4b08      	ldr	r3, [pc, #32]	; (8107bd8 <prvCheckForValidListAndQueue+0x60>)
 8107bb6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8107bb8:	4b07      	ldr	r3, [pc, #28]	; (8107bd8 <prvCheckForValidListAndQueue+0x60>)
 8107bba:	681b      	ldr	r3, [r3, #0]
 8107bbc:	2b00      	cmp	r3, #0
 8107bbe:	d005      	beq.n	8107bcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8107bc0:	4b05      	ldr	r3, [pc, #20]	; (8107bd8 <prvCheckForValidListAndQueue+0x60>)
 8107bc2:	681b      	ldr	r3, [r3, #0]
 8107bc4:	490b      	ldr	r1, [pc, #44]	; (8107bf4 <prvCheckForValidListAndQueue+0x7c>)
 8107bc6:	4618      	mov	r0, r3
 8107bc8:	f7fe fd8e 	bl	81066e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8107bcc:	f000 f96c 	bl	8107ea8 <vPortExitCritical>
}
 8107bd0:	bf00      	nop
 8107bd2:	46bd      	mov	sp, r7
 8107bd4:	bd80      	pop	{r7, pc}
 8107bd6:	bf00      	nop
 8107bd8:	10000c18 	.word	0x10000c18
 8107bdc:	10000be8 	.word	0x10000be8
 8107be0:	10000bfc 	.word	0x10000bfc
 8107be4:	10000c10 	.word	0x10000c10
 8107be8:	10000c14 	.word	0x10000c14
 8107bec:	10000cc4 	.word	0x10000cc4
 8107bf0:	10000c24 	.word	0x10000c24
 8107bf4:	081084e0 	.word	0x081084e0

08107bf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8107bf8:	b480      	push	{r7}
 8107bfa:	b085      	sub	sp, #20
 8107bfc:	af00      	add	r7, sp, #0
 8107bfe:	60f8      	str	r0, [r7, #12]
 8107c00:	60b9      	str	r1, [r7, #8]
 8107c02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8107c04:	68fb      	ldr	r3, [r7, #12]
 8107c06:	3b04      	subs	r3, #4
 8107c08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8107c0a:	68fb      	ldr	r3, [r7, #12]
 8107c0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8107c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8107c12:	68fb      	ldr	r3, [r7, #12]
 8107c14:	3b04      	subs	r3, #4
 8107c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8107c18:	68bb      	ldr	r3, [r7, #8]
 8107c1a:	f023 0201 	bic.w	r2, r3, #1
 8107c1e:	68fb      	ldr	r3, [r7, #12]
 8107c20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8107c22:	68fb      	ldr	r3, [r7, #12]
 8107c24:	3b04      	subs	r3, #4
 8107c26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8107c28:	4a0c      	ldr	r2, [pc, #48]	; (8107c5c <pxPortInitialiseStack+0x64>)
 8107c2a:	68fb      	ldr	r3, [r7, #12]
 8107c2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8107c2e:	68fb      	ldr	r3, [r7, #12]
 8107c30:	3b14      	subs	r3, #20
 8107c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8107c34:	687a      	ldr	r2, [r7, #4]
 8107c36:	68fb      	ldr	r3, [r7, #12]
 8107c38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8107c3a:	68fb      	ldr	r3, [r7, #12]
 8107c3c:	3b04      	subs	r3, #4
 8107c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8107c40:	68fb      	ldr	r3, [r7, #12]
 8107c42:	f06f 0202 	mvn.w	r2, #2
 8107c46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8107c48:	68fb      	ldr	r3, [r7, #12]
 8107c4a:	3b20      	subs	r3, #32
 8107c4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8107c4e:	68fb      	ldr	r3, [r7, #12]
}
 8107c50:	4618      	mov	r0, r3
 8107c52:	3714      	adds	r7, #20
 8107c54:	46bd      	mov	sp, r7
 8107c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c5a:	4770      	bx	lr
 8107c5c:	08107c61 	.word	0x08107c61

08107c60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8107c60:	b480      	push	{r7}
 8107c62:	b085      	sub	sp, #20
 8107c64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8107c66:	2300      	movs	r3, #0
 8107c68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8107c6a:	4b11      	ldr	r3, [pc, #68]	; (8107cb0 <prvTaskExitError+0x50>)
 8107c6c:	681b      	ldr	r3, [r3, #0]
 8107c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107c72:	d009      	beq.n	8107c88 <prvTaskExitError+0x28>
 8107c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107c78:	f383 8811 	msr	BASEPRI, r3
 8107c7c:	f3bf 8f6f 	isb	sy
 8107c80:	f3bf 8f4f 	dsb	sy
 8107c84:	60fb      	str	r3, [r7, #12]
 8107c86:	e7fe      	b.n	8107c86 <prvTaskExitError+0x26>
 8107c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107c8c:	f383 8811 	msr	BASEPRI, r3
 8107c90:	f3bf 8f6f 	isb	sy
 8107c94:	f3bf 8f4f 	dsb	sy
 8107c98:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8107c9a:	bf00      	nop
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	2b00      	cmp	r3, #0
 8107ca0:	d0fc      	beq.n	8107c9c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8107ca2:	bf00      	nop
 8107ca4:	3714      	adds	r7, #20
 8107ca6:	46bd      	mov	sp, r7
 8107ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cac:	4770      	bx	lr
 8107cae:	bf00      	nop
 8107cb0:	1000000c 	.word	0x1000000c
	...

08107cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8107cc0:	4b07      	ldr	r3, [pc, #28]	; (8107ce0 <pxCurrentTCBConst2>)
 8107cc2:	6819      	ldr	r1, [r3, #0]
 8107cc4:	6808      	ldr	r0, [r1, #0]
 8107cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107cca:	f380 8809 	msr	PSP, r0
 8107cce:	f3bf 8f6f 	isb	sy
 8107cd2:	f04f 0000 	mov.w	r0, #0
 8107cd6:	f380 8811 	msr	BASEPRI, r0
 8107cda:	4770      	bx	lr
 8107cdc:	f3af 8000 	nop.w

08107ce0 <pxCurrentTCBConst2>:
 8107ce0:	100006e8 	.word	0x100006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8107ce4:	bf00      	nop
 8107ce6:	bf00      	nop

08107ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8107ce8:	4808      	ldr	r0, [pc, #32]	; (8107d0c <prvPortStartFirstTask+0x24>)
 8107cea:	6800      	ldr	r0, [r0, #0]
 8107cec:	6800      	ldr	r0, [r0, #0]
 8107cee:	f380 8808 	msr	MSP, r0
 8107cf2:	f04f 0000 	mov.w	r0, #0
 8107cf6:	f380 8814 	msr	CONTROL, r0
 8107cfa:	b662      	cpsie	i
 8107cfc:	b661      	cpsie	f
 8107cfe:	f3bf 8f4f 	dsb	sy
 8107d02:	f3bf 8f6f 	isb	sy
 8107d06:	df00      	svc	0
 8107d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8107d0a:	bf00      	nop
 8107d0c:	e000ed08 	.word	0xe000ed08

08107d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8107d10:	b580      	push	{r7, lr}
 8107d12:	b086      	sub	sp, #24
 8107d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8107d16:	4b44      	ldr	r3, [pc, #272]	; (8107e28 <xPortStartScheduler+0x118>)
 8107d18:	681b      	ldr	r3, [r3, #0]
 8107d1a:	4a44      	ldr	r2, [pc, #272]	; (8107e2c <xPortStartScheduler+0x11c>)
 8107d1c:	4293      	cmp	r3, r2
 8107d1e:	d109      	bne.n	8107d34 <xPortStartScheduler+0x24>
 8107d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107d24:	f383 8811 	msr	BASEPRI, r3
 8107d28:	f3bf 8f6f 	isb	sy
 8107d2c:	f3bf 8f4f 	dsb	sy
 8107d30:	613b      	str	r3, [r7, #16]
 8107d32:	e7fe      	b.n	8107d32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8107d34:	4b3c      	ldr	r3, [pc, #240]	; (8107e28 <xPortStartScheduler+0x118>)
 8107d36:	681b      	ldr	r3, [r3, #0]
 8107d38:	4a3d      	ldr	r2, [pc, #244]	; (8107e30 <xPortStartScheduler+0x120>)
 8107d3a:	4293      	cmp	r3, r2
 8107d3c:	d109      	bne.n	8107d52 <xPortStartScheduler+0x42>
 8107d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107d42:	f383 8811 	msr	BASEPRI, r3
 8107d46:	f3bf 8f6f 	isb	sy
 8107d4a:	f3bf 8f4f 	dsb	sy
 8107d4e:	60fb      	str	r3, [r7, #12]
 8107d50:	e7fe      	b.n	8107d50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8107d52:	4b38      	ldr	r3, [pc, #224]	; (8107e34 <xPortStartScheduler+0x124>)
 8107d54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8107d56:	697b      	ldr	r3, [r7, #20]
 8107d58:	781b      	ldrb	r3, [r3, #0]
 8107d5a:	b2db      	uxtb	r3, r3
 8107d5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8107d5e:	697b      	ldr	r3, [r7, #20]
 8107d60:	22ff      	movs	r2, #255	; 0xff
 8107d62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8107d64:	697b      	ldr	r3, [r7, #20]
 8107d66:	781b      	ldrb	r3, [r3, #0]
 8107d68:	b2db      	uxtb	r3, r3
 8107d6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8107d6c:	78fb      	ldrb	r3, [r7, #3]
 8107d6e:	b2db      	uxtb	r3, r3
 8107d70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8107d74:	b2da      	uxtb	r2, r3
 8107d76:	4b30      	ldr	r3, [pc, #192]	; (8107e38 <xPortStartScheduler+0x128>)
 8107d78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8107d7a:	4b30      	ldr	r3, [pc, #192]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107d7c:	2207      	movs	r2, #7
 8107d7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8107d80:	e009      	b.n	8107d96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8107d82:	4b2e      	ldr	r3, [pc, #184]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107d84:	681b      	ldr	r3, [r3, #0]
 8107d86:	3b01      	subs	r3, #1
 8107d88:	4a2c      	ldr	r2, [pc, #176]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107d8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8107d8c:	78fb      	ldrb	r3, [r7, #3]
 8107d8e:	b2db      	uxtb	r3, r3
 8107d90:	005b      	lsls	r3, r3, #1
 8107d92:	b2db      	uxtb	r3, r3
 8107d94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8107d96:	78fb      	ldrb	r3, [r7, #3]
 8107d98:	b2db      	uxtb	r3, r3
 8107d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107d9e:	2b80      	cmp	r3, #128	; 0x80
 8107da0:	d0ef      	beq.n	8107d82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8107da2:	4b26      	ldr	r3, [pc, #152]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107da4:	681b      	ldr	r3, [r3, #0]
 8107da6:	f1c3 0307 	rsb	r3, r3, #7
 8107daa:	2b04      	cmp	r3, #4
 8107dac:	d009      	beq.n	8107dc2 <xPortStartScheduler+0xb2>
 8107dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107db2:	f383 8811 	msr	BASEPRI, r3
 8107db6:	f3bf 8f6f 	isb	sy
 8107dba:	f3bf 8f4f 	dsb	sy
 8107dbe:	60bb      	str	r3, [r7, #8]
 8107dc0:	e7fe      	b.n	8107dc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8107dc2:	4b1e      	ldr	r3, [pc, #120]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107dc4:	681b      	ldr	r3, [r3, #0]
 8107dc6:	021b      	lsls	r3, r3, #8
 8107dc8:	4a1c      	ldr	r2, [pc, #112]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107dca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8107dcc:	4b1b      	ldr	r3, [pc, #108]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107dce:	681b      	ldr	r3, [r3, #0]
 8107dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8107dd4:	4a19      	ldr	r2, [pc, #100]	; (8107e3c <xPortStartScheduler+0x12c>)
 8107dd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	b2da      	uxtb	r2, r3
 8107ddc:	697b      	ldr	r3, [r7, #20]
 8107dde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8107de0:	4b17      	ldr	r3, [pc, #92]	; (8107e40 <xPortStartScheduler+0x130>)
 8107de2:	681b      	ldr	r3, [r3, #0]
 8107de4:	4a16      	ldr	r2, [pc, #88]	; (8107e40 <xPortStartScheduler+0x130>)
 8107de6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8107dea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8107dec:	4b14      	ldr	r3, [pc, #80]	; (8107e40 <xPortStartScheduler+0x130>)
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	4a13      	ldr	r2, [pc, #76]	; (8107e40 <xPortStartScheduler+0x130>)
 8107df2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8107df6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8107df8:	f000 f8d6 	bl	8107fa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8107dfc:	4b11      	ldr	r3, [pc, #68]	; (8107e44 <xPortStartScheduler+0x134>)
 8107dfe:	2200      	movs	r2, #0
 8107e00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8107e02:	f000 f8f5 	bl	8107ff0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8107e06:	4b10      	ldr	r3, [pc, #64]	; (8107e48 <xPortStartScheduler+0x138>)
 8107e08:	681b      	ldr	r3, [r3, #0]
 8107e0a:	4a0f      	ldr	r2, [pc, #60]	; (8107e48 <xPortStartScheduler+0x138>)
 8107e0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8107e10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8107e12:	f7ff ff69 	bl	8107ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8107e16:	f7ff f86b 	bl	8106ef0 <vTaskSwitchContext>
	prvTaskExitError();
 8107e1a:	f7ff ff21 	bl	8107c60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8107e1e:	2300      	movs	r3, #0
}
 8107e20:	4618      	mov	r0, r3
 8107e22:	3718      	adds	r7, #24
 8107e24:	46bd      	mov	sp, r7
 8107e26:	bd80      	pop	{r7, pc}
 8107e28:	e000ed00 	.word	0xe000ed00
 8107e2c:	410fc271 	.word	0x410fc271
 8107e30:	410fc270 	.word	0x410fc270
 8107e34:	e000e400 	.word	0xe000e400
 8107e38:	10000d14 	.word	0x10000d14
 8107e3c:	10000d18 	.word	0x10000d18
 8107e40:	e000ed20 	.word	0xe000ed20
 8107e44:	1000000c 	.word	0x1000000c
 8107e48:	e000ef34 	.word	0xe000ef34

08107e4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8107e4c:	b480      	push	{r7}
 8107e4e:	b083      	sub	sp, #12
 8107e50:	af00      	add	r7, sp, #0
 8107e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e56:	f383 8811 	msr	BASEPRI, r3
 8107e5a:	f3bf 8f6f 	isb	sy
 8107e5e:	f3bf 8f4f 	dsb	sy
 8107e62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8107e64:	4b0e      	ldr	r3, [pc, #56]	; (8107ea0 <vPortEnterCritical+0x54>)
 8107e66:	681b      	ldr	r3, [r3, #0]
 8107e68:	3301      	adds	r3, #1
 8107e6a:	4a0d      	ldr	r2, [pc, #52]	; (8107ea0 <vPortEnterCritical+0x54>)
 8107e6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8107e6e:	4b0c      	ldr	r3, [pc, #48]	; (8107ea0 <vPortEnterCritical+0x54>)
 8107e70:	681b      	ldr	r3, [r3, #0]
 8107e72:	2b01      	cmp	r3, #1
 8107e74:	d10e      	bne.n	8107e94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8107e76:	4b0b      	ldr	r3, [pc, #44]	; (8107ea4 <vPortEnterCritical+0x58>)
 8107e78:	681b      	ldr	r3, [r3, #0]
 8107e7a:	b2db      	uxtb	r3, r3
 8107e7c:	2b00      	cmp	r3, #0
 8107e7e:	d009      	beq.n	8107e94 <vPortEnterCritical+0x48>
 8107e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e84:	f383 8811 	msr	BASEPRI, r3
 8107e88:	f3bf 8f6f 	isb	sy
 8107e8c:	f3bf 8f4f 	dsb	sy
 8107e90:	603b      	str	r3, [r7, #0]
 8107e92:	e7fe      	b.n	8107e92 <vPortEnterCritical+0x46>
	}
}
 8107e94:	bf00      	nop
 8107e96:	370c      	adds	r7, #12
 8107e98:	46bd      	mov	sp, r7
 8107e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e9e:	4770      	bx	lr
 8107ea0:	1000000c 	.word	0x1000000c
 8107ea4:	e000ed04 	.word	0xe000ed04

08107ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8107ea8:	b480      	push	{r7}
 8107eaa:	b083      	sub	sp, #12
 8107eac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8107eae:	4b11      	ldr	r3, [pc, #68]	; (8107ef4 <vPortExitCritical+0x4c>)
 8107eb0:	681b      	ldr	r3, [r3, #0]
 8107eb2:	2b00      	cmp	r3, #0
 8107eb4:	d109      	bne.n	8107eca <vPortExitCritical+0x22>
 8107eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107eba:	f383 8811 	msr	BASEPRI, r3
 8107ebe:	f3bf 8f6f 	isb	sy
 8107ec2:	f3bf 8f4f 	dsb	sy
 8107ec6:	607b      	str	r3, [r7, #4]
 8107ec8:	e7fe      	b.n	8107ec8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8107eca:	4b0a      	ldr	r3, [pc, #40]	; (8107ef4 <vPortExitCritical+0x4c>)
 8107ecc:	681b      	ldr	r3, [r3, #0]
 8107ece:	3b01      	subs	r3, #1
 8107ed0:	4a08      	ldr	r2, [pc, #32]	; (8107ef4 <vPortExitCritical+0x4c>)
 8107ed2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8107ed4:	4b07      	ldr	r3, [pc, #28]	; (8107ef4 <vPortExitCritical+0x4c>)
 8107ed6:	681b      	ldr	r3, [r3, #0]
 8107ed8:	2b00      	cmp	r3, #0
 8107eda:	d104      	bne.n	8107ee6 <vPortExitCritical+0x3e>
 8107edc:	2300      	movs	r3, #0
 8107ede:	603b      	str	r3, [r7, #0]
	__asm volatile
 8107ee0:	683b      	ldr	r3, [r7, #0]
 8107ee2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8107ee6:	bf00      	nop
 8107ee8:	370c      	adds	r7, #12
 8107eea:	46bd      	mov	sp, r7
 8107eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ef0:	4770      	bx	lr
 8107ef2:	bf00      	nop
 8107ef4:	1000000c 	.word	0x1000000c
	...

08107f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8107f00:	f3ef 8009 	mrs	r0, PSP
 8107f04:	f3bf 8f6f 	isb	sy
 8107f08:	4b15      	ldr	r3, [pc, #84]	; (8107f60 <pxCurrentTCBConst>)
 8107f0a:	681a      	ldr	r2, [r3, #0]
 8107f0c:	f01e 0f10 	tst.w	lr, #16
 8107f10:	bf08      	it	eq
 8107f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8107f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107f1a:	6010      	str	r0, [r2, #0]
 8107f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8107f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8107f24:	f380 8811 	msr	BASEPRI, r0
 8107f28:	f3bf 8f4f 	dsb	sy
 8107f2c:	f3bf 8f6f 	isb	sy
 8107f30:	f7fe ffde 	bl	8106ef0 <vTaskSwitchContext>
 8107f34:	f04f 0000 	mov.w	r0, #0
 8107f38:	f380 8811 	msr	BASEPRI, r0
 8107f3c:	bc09      	pop	{r0, r3}
 8107f3e:	6819      	ldr	r1, [r3, #0]
 8107f40:	6808      	ldr	r0, [r1, #0]
 8107f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107f46:	f01e 0f10 	tst.w	lr, #16
 8107f4a:	bf08      	it	eq
 8107f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8107f50:	f380 8809 	msr	PSP, r0
 8107f54:	f3bf 8f6f 	isb	sy
 8107f58:	4770      	bx	lr
 8107f5a:	bf00      	nop
 8107f5c:	f3af 8000 	nop.w

08107f60 <pxCurrentTCBConst>:
 8107f60:	100006e8 	.word	0x100006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8107f64:	bf00      	nop
 8107f66:	bf00      	nop

08107f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8107f68:	b580      	push	{r7, lr}
 8107f6a:	b082      	sub	sp, #8
 8107f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8107f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107f72:	f383 8811 	msr	BASEPRI, r3
 8107f76:	f3bf 8f6f 	isb	sy
 8107f7a:	f3bf 8f4f 	dsb	sy
 8107f7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8107f80:	f7fe fefe 	bl	8106d80 <xTaskIncrementTick>
 8107f84:	4603      	mov	r3, r0
 8107f86:	2b00      	cmp	r3, #0
 8107f88:	d003      	beq.n	8107f92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8107f8a:	4b06      	ldr	r3, [pc, #24]	; (8107fa4 <SysTick_Handler+0x3c>)
 8107f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107f90:	601a      	str	r2, [r3, #0]
 8107f92:	2300      	movs	r3, #0
 8107f94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8107f96:	683b      	ldr	r3, [r7, #0]
 8107f98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8107f9c:	bf00      	nop
 8107f9e:	3708      	adds	r7, #8
 8107fa0:	46bd      	mov	sp, r7
 8107fa2:	bd80      	pop	{r7, pc}
 8107fa4:	e000ed04 	.word	0xe000ed04

08107fa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8107fa8:	b480      	push	{r7}
 8107faa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8107fac:	4b0b      	ldr	r3, [pc, #44]	; (8107fdc <vPortSetupTimerInterrupt+0x34>)
 8107fae:	2200      	movs	r2, #0
 8107fb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8107fb2:	4b0b      	ldr	r3, [pc, #44]	; (8107fe0 <vPortSetupTimerInterrupt+0x38>)
 8107fb4:	2200      	movs	r2, #0
 8107fb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8107fb8:	4b0a      	ldr	r3, [pc, #40]	; (8107fe4 <vPortSetupTimerInterrupt+0x3c>)
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	4a0a      	ldr	r2, [pc, #40]	; (8107fe8 <vPortSetupTimerInterrupt+0x40>)
 8107fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8107fc2:	099b      	lsrs	r3, r3, #6
 8107fc4:	4a09      	ldr	r2, [pc, #36]	; (8107fec <vPortSetupTimerInterrupt+0x44>)
 8107fc6:	3b01      	subs	r3, #1
 8107fc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8107fca:	4b04      	ldr	r3, [pc, #16]	; (8107fdc <vPortSetupTimerInterrupt+0x34>)
 8107fcc:	2207      	movs	r2, #7
 8107fce:	601a      	str	r2, [r3, #0]
}
 8107fd0:	bf00      	nop
 8107fd2:	46bd      	mov	sp, r7
 8107fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107fd8:	4770      	bx	lr
 8107fda:	bf00      	nop
 8107fdc:	e000e010 	.word	0xe000e010
 8107fe0:	e000e018 	.word	0xe000e018
 8107fe4:	10000004 	.word	0x10000004
 8107fe8:	10624dd3 	.word	0x10624dd3
 8107fec:	e000e014 	.word	0xe000e014

08107ff0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8107ff0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8108000 <vPortEnableVFP+0x10>
 8107ff4:	6801      	ldr	r1, [r0, #0]
 8107ff6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8107ffa:	6001      	str	r1, [r0, #0]
 8107ffc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8107ffe:	bf00      	nop
 8108000:	e000ed88 	.word	0xe000ed88

08108004 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8108004:	b480      	push	{r7}
 8108006:	b085      	sub	sp, #20
 8108008:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810800a:	f3ef 8305 	mrs	r3, IPSR
 810800e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8108010:	68fb      	ldr	r3, [r7, #12]
 8108012:	2b0f      	cmp	r3, #15
 8108014:	d913      	bls.n	810803e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8108016:	4a16      	ldr	r2, [pc, #88]	; (8108070 <vPortValidateInterruptPriority+0x6c>)
 8108018:	68fb      	ldr	r3, [r7, #12]
 810801a:	4413      	add	r3, r2
 810801c:	781b      	ldrb	r3, [r3, #0]
 810801e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8108020:	4b14      	ldr	r3, [pc, #80]	; (8108074 <vPortValidateInterruptPriority+0x70>)
 8108022:	781b      	ldrb	r3, [r3, #0]
 8108024:	7afa      	ldrb	r2, [r7, #11]
 8108026:	429a      	cmp	r2, r3
 8108028:	d209      	bcs.n	810803e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 810802a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810802e:	f383 8811 	msr	BASEPRI, r3
 8108032:	f3bf 8f6f 	isb	sy
 8108036:	f3bf 8f4f 	dsb	sy
 810803a:	607b      	str	r3, [r7, #4]
 810803c:	e7fe      	b.n	810803c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810803e:	4b0e      	ldr	r3, [pc, #56]	; (8108078 <vPortValidateInterruptPriority+0x74>)
 8108040:	681b      	ldr	r3, [r3, #0]
 8108042:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8108046:	4b0d      	ldr	r3, [pc, #52]	; (810807c <vPortValidateInterruptPriority+0x78>)
 8108048:	681b      	ldr	r3, [r3, #0]
 810804a:	429a      	cmp	r2, r3
 810804c:	d909      	bls.n	8108062 <vPortValidateInterruptPriority+0x5e>
 810804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108052:	f383 8811 	msr	BASEPRI, r3
 8108056:	f3bf 8f6f 	isb	sy
 810805a:	f3bf 8f4f 	dsb	sy
 810805e:	603b      	str	r3, [r7, #0]
 8108060:	e7fe      	b.n	8108060 <vPortValidateInterruptPriority+0x5c>
	}
 8108062:	bf00      	nop
 8108064:	3714      	adds	r7, #20
 8108066:	46bd      	mov	sp, r7
 8108068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810806c:	4770      	bx	lr
 810806e:	bf00      	nop
 8108070:	e000e3f0 	.word	0xe000e3f0
 8108074:	10000d14 	.word	0x10000d14
 8108078:	e000ed0c 	.word	0xe000ed0c
 810807c:	10000d18 	.word	0x10000d18

08108080 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8108080:	b580      	push	{r7, lr}
 8108082:	b08a      	sub	sp, #40	; 0x28
 8108084:	af00      	add	r7, sp, #0
 8108086:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8108088:	2300      	movs	r3, #0
 810808a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810808c:	f7fe fdbe 	bl	8106c0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8108090:	4b57      	ldr	r3, [pc, #348]	; (81081f0 <pvPortMalloc+0x170>)
 8108092:	681b      	ldr	r3, [r3, #0]
 8108094:	2b00      	cmp	r3, #0
 8108096:	d101      	bne.n	810809c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8108098:	f000 f90c 	bl	81082b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810809c:	4b55      	ldr	r3, [pc, #340]	; (81081f4 <pvPortMalloc+0x174>)
 810809e:	681a      	ldr	r2, [r3, #0]
 81080a0:	687b      	ldr	r3, [r7, #4]
 81080a2:	4013      	ands	r3, r2
 81080a4:	2b00      	cmp	r3, #0
 81080a6:	f040 808c 	bne.w	81081c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81080aa:	687b      	ldr	r3, [r7, #4]
 81080ac:	2b00      	cmp	r3, #0
 81080ae:	d01c      	beq.n	81080ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 81080b0:	2208      	movs	r2, #8
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	4413      	add	r3, r2
 81080b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81080b8:	687b      	ldr	r3, [r7, #4]
 81080ba:	f003 0307 	and.w	r3, r3, #7
 81080be:	2b00      	cmp	r3, #0
 81080c0:	d013      	beq.n	81080ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	f023 0307 	bic.w	r3, r3, #7
 81080c8:	3308      	adds	r3, #8
 81080ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	f003 0307 	and.w	r3, r3, #7
 81080d2:	2b00      	cmp	r3, #0
 81080d4:	d009      	beq.n	81080ea <pvPortMalloc+0x6a>
 81080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81080da:	f383 8811 	msr	BASEPRI, r3
 81080de:	f3bf 8f6f 	isb	sy
 81080e2:	f3bf 8f4f 	dsb	sy
 81080e6:	617b      	str	r3, [r7, #20]
 81080e8:	e7fe      	b.n	81080e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	2b00      	cmp	r3, #0
 81080ee:	d068      	beq.n	81081c2 <pvPortMalloc+0x142>
 81080f0:	4b41      	ldr	r3, [pc, #260]	; (81081f8 <pvPortMalloc+0x178>)
 81080f2:	681b      	ldr	r3, [r3, #0]
 81080f4:	687a      	ldr	r2, [r7, #4]
 81080f6:	429a      	cmp	r2, r3
 81080f8:	d863      	bhi.n	81081c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81080fa:	4b40      	ldr	r3, [pc, #256]	; (81081fc <pvPortMalloc+0x17c>)
 81080fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81080fe:	4b3f      	ldr	r3, [pc, #252]	; (81081fc <pvPortMalloc+0x17c>)
 8108100:	681b      	ldr	r3, [r3, #0]
 8108102:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108104:	e004      	b.n	8108110 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8108106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108108:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810810c:	681b      	ldr	r3, [r3, #0]
 810810e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108112:	685b      	ldr	r3, [r3, #4]
 8108114:	687a      	ldr	r2, [r7, #4]
 8108116:	429a      	cmp	r2, r3
 8108118:	d903      	bls.n	8108122 <pvPortMalloc+0xa2>
 810811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810811c:	681b      	ldr	r3, [r3, #0]
 810811e:	2b00      	cmp	r3, #0
 8108120:	d1f1      	bne.n	8108106 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8108122:	4b33      	ldr	r3, [pc, #204]	; (81081f0 <pvPortMalloc+0x170>)
 8108124:	681b      	ldr	r3, [r3, #0]
 8108126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108128:	429a      	cmp	r2, r3
 810812a:	d04a      	beq.n	81081c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810812c:	6a3b      	ldr	r3, [r7, #32]
 810812e:	681b      	ldr	r3, [r3, #0]
 8108130:	2208      	movs	r2, #8
 8108132:	4413      	add	r3, r2
 8108134:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8108136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108138:	681a      	ldr	r2, [r3, #0]
 810813a:	6a3b      	ldr	r3, [r7, #32]
 810813c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108140:	685a      	ldr	r2, [r3, #4]
 8108142:	687b      	ldr	r3, [r7, #4]
 8108144:	1ad2      	subs	r2, r2, r3
 8108146:	2308      	movs	r3, #8
 8108148:	005b      	lsls	r3, r3, #1
 810814a:	429a      	cmp	r2, r3
 810814c:	d91e      	bls.n	810818c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810814e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	4413      	add	r3, r2
 8108154:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108156:	69bb      	ldr	r3, [r7, #24]
 8108158:	f003 0307 	and.w	r3, r3, #7
 810815c:	2b00      	cmp	r3, #0
 810815e:	d009      	beq.n	8108174 <pvPortMalloc+0xf4>
 8108160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108164:	f383 8811 	msr	BASEPRI, r3
 8108168:	f3bf 8f6f 	isb	sy
 810816c:	f3bf 8f4f 	dsb	sy
 8108170:	613b      	str	r3, [r7, #16]
 8108172:	e7fe      	b.n	8108172 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8108174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108176:	685a      	ldr	r2, [r3, #4]
 8108178:	687b      	ldr	r3, [r7, #4]
 810817a:	1ad2      	subs	r2, r2, r3
 810817c:	69bb      	ldr	r3, [r7, #24]
 810817e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8108180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108182:	687a      	ldr	r2, [r7, #4]
 8108184:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8108186:	69b8      	ldr	r0, [r7, #24]
 8108188:	f000 f8f6 	bl	8108378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810818c:	4b1a      	ldr	r3, [pc, #104]	; (81081f8 <pvPortMalloc+0x178>)
 810818e:	681a      	ldr	r2, [r3, #0]
 8108190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108192:	685b      	ldr	r3, [r3, #4]
 8108194:	1ad3      	subs	r3, r2, r3
 8108196:	4a18      	ldr	r2, [pc, #96]	; (81081f8 <pvPortMalloc+0x178>)
 8108198:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810819a:	4b17      	ldr	r3, [pc, #92]	; (81081f8 <pvPortMalloc+0x178>)
 810819c:	681a      	ldr	r2, [r3, #0]
 810819e:	4b18      	ldr	r3, [pc, #96]	; (8108200 <pvPortMalloc+0x180>)
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	429a      	cmp	r2, r3
 81081a4:	d203      	bcs.n	81081ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81081a6:	4b14      	ldr	r3, [pc, #80]	; (81081f8 <pvPortMalloc+0x178>)
 81081a8:	681b      	ldr	r3, [r3, #0]
 81081aa:	4a15      	ldr	r2, [pc, #84]	; (8108200 <pvPortMalloc+0x180>)
 81081ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081b0:	685a      	ldr	r2, [r3, #4]
 81081b2:	4b10      	ldr	r3, [pc, #64]	; (81081f4 <pvPortMalloc+0x174>)
 81081b4:	681b      	ldr	r3, [r3, #0]
 81081b6:	431a      	orrs	r2, r3
 81081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 81081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81081be:	2200      	movs	r2, #0
 81081c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 81081c2:	f7fe fd31 	bl	8106c28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 81081c6:	69fb      	ldr	r3, [r7, #28]
 81081c8:	f003 0307 	and.w	r3, r3, #7
 81081cc:	2b00      	cmp	r3, #0
 81081ce:	d009      	beq.n	81081e4 <pvPortMalloc+0x164>
 81081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81081d4:	f383 8811 	msr	BASEPRI, r3
 81081d8:	f3bf 8f6f 	isb	sy
 81081dc:	f3bf 8f4f 	dsb	sy
 81081e0:	60fb      	str	r3, [r7, #12]
 81081e2:	e7fe      	b.n	81081e2 <pvPortMalloc+0x162>
	return pvReturn;
 81081e4:	69fb      	ldr	r3, [r7, #28]
}
 81081e6:	4618      	mov	r0, r3
 81081e8:	3728      	adds	r7, #40	; 0x28
 81081ea:	46bd      	mov	sp, r7
 81081ec:	bd80      	pop	{r7, pc}
 81081ee:	bf00      	nop
 81081f0:	10004924 	.word	0x10004924
 81081f4:	10004930 	.word	0x10004930
 81081f8:	10004928 	.word	0x10004928
 81081fc:	1000491c 	.word	0x1000491c
 8108200:	1000492c 	.word	0x1000492c

08108204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8108204:	b580      	push	{r7, lr}
 8108206:	b086      	sub	sp, #24
 8108208:	af00      	add	r7, sp, #0
 810820a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	2b00      	cmp	r3, #0
 8108214:	d046      	beq.n	81082a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8108216:	2308      	movs	r3, #8
 8108218:	425b      	negs	r3, r3
 810821a:	697a      	ldr	r2, [r7, #20]
 810821c:	4413      	add	r3, r2
 810821e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8108220:	697b      	ldr	r3, [r7, #20]
 8108222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8108224:	693b      	ldr	r3, [r7, #16]
 8108226:	685a      	ldr	r2, [r3, #4]
 8108228:	4b20      	ldr	r3, [pc, #128]	; (81082ac <vPortFree+0xa8>)
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	4013      	ands	r3, r2
 810822e:	2b00      	cmp	r3, #0
 8108230:	d109      	bne.n	8108246 <vPortFree+0x42>
 8108232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108236:	f383 8811 	msr	BASEPRI, r3
 810823a:	f3bf 8f6f 	isb	sy
 810823e:	f3bf 8f4f 	dsb	sy
 8108242:	60fb      	str	r3, [r7, #12]
 8108244:	e7fe      	b.n	8108244 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8108246:	693b      	ldr	r3, [r7, #16]
 8108248:	681b      	ldr	r3, [r3, #0]
 810824a:	2b00      	cmp	r3, #0
 810824c:	d009      	beq.n	8108262 <vPortFree+0x5e>
 810824e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108252:	f383 8811 	msr	BASEPRI, r3
 8108256:	f3bf 8f6f 	isb	sy
 810825a:	f3bf 8f4f 	dsb	sy
 810825e:	60bb      	str	r3, [r7, #8]
 8108260:	e7fe      	b.n	8108260 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8108262:	693b      	ldr	r3, [r7, #16]
 8108264:	685a      	ldr	r2, [r3, #4]
 8108266:	4b11      	ldr	r3, [pc, #68]	; (81082ac <vPortFree+0xa8>)
 8108268:	681b      	ldr	r3, [r3, #0]
 810826a:	4013      	ands	r3, r2
 810826c:	2b00      	cmp	r3, #0
 810826e:	d019      	beq.n	81082a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8108270:	693b      	ldr	r3, [r7, #16]
 8108272:	681b      	ldr	r3, [r3, #0]
 8108274:	2b00      	cmp	r3, #0
 8108276:	d115      	bne.n	81082a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8108278:	693b      	ldr	r3, [r7, #16]
 810827a:	685a      	ldr	r2, [r3, #4]
 810827c:	4b0b      	ldr	r3, [pc, #44]	; (81082ac <vPortFree+0xa8>)
 810827e:	681b      	ldr	r3, [r3, #0]
 8108280:	43db      	mvns	r3, r3
 8108282:	401a      	ands	r2, r3
 8108284:	693b      	ldr	r3, [r7, #16]
 8108286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8108288:	f7fe fcc0 	bl	8106c0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810828c:	693b      	ldr	r3, [r7, #16]
 810828e:	685a      	ldr	r2, [r3, #4]
 8108290:	4b07      	ldr	r3, [pc, #28]	; (81082b0 <vPortFree+0xac>)
 8108292:	681b      	ldr	r3, [r3, #0]
 8108294:	4413      	add	r3, r2
 8108296:	4a06      	ldr	r2, [pc, #24]	; (81082b0 <vPortFree+0xac>)
 8108298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810829a:	6938      	ldr	r0, [r7, #16]
 810829c:	f000 f86c 	bl	8108378 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 81082a0:	f7fe fcc2 	bl	8106c28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 81082a4:	bf00      	nop
 81082a6:	3718      	adds	r7, #24
 81082a8:	46bd      	mov	sp, r7
 81082aa:	bd80      	pop	{r7, pc}
 81082ac:	10004930 	.word	0x10004930
 81082b0:	10004928 	.word	0x10004928

081082b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 81082b4:	b480      	push	{r7}
 81082b6:	b085      	sub	sp, #20
 81082b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 81082ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 81082be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 81082c0:	4b27      	ldr	r3, [pc, #156]	; (8108360 <prvHeapInit+0xac>)
 81082c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 81082c4:	68fb      	ldr	r3, [r7, #12]
 81082c6:	f003 0307 	and.w	r3, r3, #7
 81082ca:	2b00      	cmp	r3, #0
 81082cc:	d00c      	beq.n	81082e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 81082ce:	68fb      	ldr	r3, [r7, #12]
 81082d0:	3307      	adds	r3, #7
 81082d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81082d4:	68fb      	ldr	r3, [r7, #12]
 81082d6:	f023 0307 	bic.w	r3, r3, #7
 81082da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81082dc:	68ba      	ldr	r2, [r7, #8]
 81082de:	68fb      	ldr	r3, [r7, #12]
 81082e0:	1ad3      	subs	r3, r2, r3
 81082e2:	4a1f      	ldr	r2, [pc, #124]	; (8108360 <prvHeapInit+0xac>)
 81082e4:	4413      	add	r3, r2
 81082e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81082e8:	68fb      	ldr	r3, [r7, #12]
 81082ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81082ec:	4a1d      	ldr	r2, [pc, #116]	; (8108364 <prvHeapInit+0xb0>)
 81082ee:	687b      	ldr	r3, [r7, #4]
 81082f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81082f2:	4b1c      	ldr	r3, [pc, #112]	; (8108364 <prvHeapInit+0xb0>)
 81082f4:	2200      	movs	r2, #0
 81082f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81082f8:	687b      	ldr	r3, [r7, #4]
 81082fa:	68ba      	ldr	r2, [r7, #8]
 81082fc:	4413      	add	r3, r2
 81082fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8108300:	2208      	movs	r2, #8
 8108302:	68fb      	ldr	r3, [r7, #12]
 8108304:	1a9b      	subs	r3, r3, r2
 8108306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108308:	68fb      	ldr	r3, [r7, #12]
 810830a:	f023 0307 	bic.w	r3, r3, #7
 810830e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8108310:	68fb      	ldr	r3, [r7, #12]
 8108312:	4a15      	ldr	r2, [pc, #84]	; (8108368 <prvHeapInit+0xb4>)
 8108314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8108316:	4b14      	ldr	r3, [pc, #80]	; (8108368 <prvHeapInit+0xb4>)
 8108318:	681b      	ldr	r3, [r3, #0]
 810831a:	2200      	movs	r2, #0
 810831c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810831e:	4b12      	ldr	r3, [pc, #72]	; (8108368 <prvHeapInit+0xb4>)
 8108320:	681b      	ldr	r3, [r3, #0]
 8108322:	2200      	movs	r2, #0
 8108324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810832a:	683b      	ldr	r3, [r7, #0]
 810832c:	68fa      	ldr	r2, [r7, #12]
 810832e:	1ad2      	subs	r2, r2, r3
 8108330:	683b      	ldr	r3, [r7, #0]
 8108332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8108334:	4b0c      	ldr	r3, [pc, #48]	; (8108368 <prvHeapInit+0xb4>)
 8108336:	681a      	ldr	r2, [r3, #0]
 8108338:	683b      	ldr	r3, [r7, #0]
 810833a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810833c:	683b      	ldr	r3, [r7, #0]
 810833e:	685b      	ldr	r3, [r3, #4]
 8108340:	4a0a      	ldr	r2, [pc, #40]	; (810836c <prvHeapInit+0xb8>)
 8108342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108344:	683b      	ldr	r3, [r7, #0]
 8108346:	685b      	ldr	r3, [r3, #4]
 8108348:	4a09      	ldr	r2, [pc, #36]	; (8108370 <prvHeapInit+0xbc>)
 810834a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810834c:	4b09      	ldr	r3, [pc, #36]	; (8108374 <prvHeapInit+0xc0>)
 810834e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8108352:	601a      	str	r2, [r3, #0]
}
 8108354:	bf00      	nop
 8108356:	3714      	adds	r7, #20
 8108358:	46bd      	mov	sp, r7
 810835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810835e:	4770      	bx	lr
 8108360:	10000d1c 	.word	0x10000d1c
 8108364:	1000491c 	.word	0x1000491c
 8108368:	10004924 	.word	0x10004924
 810836c:	1000492c 	.word	0x1000492c
 8108370:	10004928 	.word	0x10004928
 8108374:	10004930 	.word	0x10004930

08108378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8108378:	b480      	push	{r7}
 810837a:	b085      	sub	sp, #20
 810837c:	af00      	add	r7, sp, #0
 810837e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8108380:	4b28      	ldr	r3, [pc, #160]	; (8108424 <prvInsertBlockIntoFreeList+0xac>)
 8108382:	60fb      	str	r3, [r7, #12]
 8108384:	e002      	b.n	810838c <prvInsertBlockIntoFreeList+0x14>
 8108386:	68fb      	ldr	r3, [r7, #12]
 8108388:	681b      	ldr	r3, [r3, #0]
 810838a:	60fb      	str	r3, [r7, #12]
 810838c:	68fb      	ldr	r3, [r7, #12]
 810838e:	681b      	ldr	r3, [r3, #0]
 8108390:	687a      	ldr	r2, [r7, #4]
 8108392:	429a      	cmp	r2, r3
 8108394:	d8f7      	bhi.n	8108386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8108396:	68fb      	ldr	r3, [r7, #12]
 8108398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810839a:	68fb      	ldr	r3, [r7, #12]
 810839c:	685b      	ldr	r3, [r3, #4]
 810839e:	68ba      	ldr	r2, [r7, #8]
 81083a0:	4413      	add	r3, r2
 81083a2:	687a      	ldr	r2, [r7, #4]
 81083a4:	429a      	cmp	r2, r3
 81083a6:	d108      	bne.n	81083ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 81083a8:	68fb      	ldr	r3, [r7, #12]
 81083aa:	685a      	ldr	r2, [r3, #4]
 81083ac:	687b      	ldr	r3, [r7, #4]
 81083ae:	685b      	ldr	r3, [r3, #4]
 81083b0:	441a      	add	r2, r3
 81083b2:	68fb      	ldr	r3, [r7, #12]
 81083b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 81083b6:	68fb      	ldr	r3, [r7, #12]
 81083b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 81083ba:	687b      	ldr	r3, [r7, #4]
 81083bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 81083be:	687b      	ldr	r3, [r7, #4]
 81083c0:	685b      	ldr	r3, [r3, #4]
 81083c2:	68ba      	ldr	r2, [r7, #8]
 81083c4:	441a      	add	r2, r3
 81083c6:	68fb      	ldr	r3, [r7, #12]
 81083c8:	681b      	ldr	r3, [r3, #0]
 81083ca:	429a      	cmp	r2, r3
 81083cc:	d118      	bne.n	8108400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 81083ce:	68fb      	ldr	r3, [r7, #12]
 81083d0:	681a      	ldr	r2, [r3, #0]
 81083d2:	4b15      	ldr	r3, [pc, #84]	; (8108428 <prvInsertBlockIntoFreeList+0xb0>)
 81083d4:	681b      	ldr	r3, [r3, #0]
 81083d6:	429a      	cmp	r2, r3
 81083d8:	d00d      	beq.n	81083f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	685a      	ldr	r2, [r3, #4]
 81083de:	68fb      	ldr	r3, [r7, #12]
 81083e0:	681b      	ldr	r3, [r3, #0]
 81083e2:	685b      	ldr	r3, [r3, #4]
 81083e4:	441a      	add	r2, r3
 81083e6:	687b      	ldr	r3, [r7, #4]
 81083e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81083ea:	68fb      	ldr	r3, [r7, #12]
 81083ec:	681b      	ldr	r3, [r3, #0]
 81083ee:	681a      	ldr	r2, [r3, #0]
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	601a      	str	r2, [r3, #0]
 81083f4:	e008      	b.n	8108408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81083f6:	4b0c      	ldr	r3, [pc, #48]	; (8108428 <prvInsertBlockIntoFreeList+0xb0>)
 81083f8:	681a      	ldr	r2, [r3, #0]
 81083fa:	687b      	ldr	r3, [r7, #4]
 81083fc:	601a      	str	r2, [r3, #0]
 81083fe:	e003      	b.n	8108408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8108400:	68fb      	ldr	r3, [r7, #12]
 8108402:	681a      	ldr	r2, [r3, #0]
 8108404:	687b      	ldr	r3, [r7, #4]
 8108406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8108408:	68fa      	ldr	r2, [r7, #12]
 810840a:	687b      	ldr	r3, [r7, #4]
 810840c:	429a      	cmp	r2, r3
 810840e:	d002      	beq.n	8108416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8108410:	68fb      	ldr	r3, [r7, #12]
 8108412:	687a      	ldr	r2, [r7, #4]
 8108414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8108416:	bf00      	nop
 8108418:	3714      	adds	r7, #20
 810841a:	46bd      	mov	sp, r7
 810841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108420:	4770      	bx	lr
 8108422:	bf00      	nop
 8108424:	1000491c 	.word	0x1000491c
 8108428:	10004924 	.word	0x10004924

0810842c <__libc_init_array>:
 810842c:	b570      	push	{r4, r5, r6, lr}
 810842e:	4e0d      	ldr	r6, [pc, #52]	; (8108464 <__libc_init_array+0x38>)
 8108430:	4c0d      	ldr	r4, [pc, #52]	; (8108468 <__libc_init_array+0x3c>)
 8108432:	1ba4      	subs	r4, r4, r6
 8108434:	10a4      	asrs	r4, r4, #2
 8108436:	2500      	movs	r5, #0
 8108438:	42a5      	cmp	r5, r4
 810843a:	d109      	bne.n	8108450 <__libc_init_array+0x24>
 810843c:	4e0b      	ldr	r6, [pc, #44]	; (810846c <__libc_init_array+0x40>)
 810843e:	4c0c      	ldr	r4, [pc, #48]	; (8108470 <__libc_init_array+0x44>)
 8108440:	f000 f82c 	bl	810849c <_init>
 8108444:	1ba4      	subs	r4, r4, r6
 8108446:	10a4      	asrs	r4, r4, #2
 8108448:	2500      	movs	r5, #0
 810844a:	42a5      	cmp	r5, r4
 810844c:	d105      	bne.n	810845a <__libc_init_array+0x2e>
 810844e:	bd70      	pop	{r4, r5, r6, pc}
 8108450:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8108454:	4798      	blx	r3
 8108456:	3501      	adds	r5, #1
 8108458:	e7ee      	b.n	8108438 <__libc_init_array+0xc>
 810845a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810845e:	4798      	blx	r3
 8108460:	3501      	adds	r5, #1
 8108462:	e7f2      	b.n	810844a <__libc_init_array+0x1e>
 8108464:	08108524 	.word	0x08108524
 8108468:	08108524 	.word	0x08108524
 810846c:	08108524 	.word	0x08108524
 8108470:	08108528 	.word	0x08108528

08108474 <memcpy>:
 8108474:	b510      	push	{r4, lr}
 8108476:	1e43      	subs	r3, r0, #1
 8108478:	440a      	add	r2, r1
 810847a:	4291      	cmp	r1, r2
 810847c:	d100      	bne.n	8108480 <memcpy+0xc>
 810847e:	bd10      	pop	{r4, pc}
 8108480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108488:	e7f7      	b.n	810847a <memcpy+0x6>

0810848a <memset>:
 810848a:	4402      	add	r2, r0
 810848c:	4603      	mov	r3, r0
 810848e:	4293      	cmp	r3, r2
 8108490:	d100      	bne.n	8108494 <memset+0xa>
 8108492:	4770      	bx	lr
 8108494:	f803 1b01 	strb.w	r1, [r3], #1
 8108498:	e7f9      	b.n	810848e <memset+0x4>
	...

0810849c <_init>:
 810849c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810849e:	bf00      	nop
 81084a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81084a2:	bc08      	pop	{r3}
 81084a4:	469e      	mov	lr, r3
 81084a6:	4770      	bx	lr

081084a8 <_fini>:
 81084a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81084aa:	bf00      	nop
 81084ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81084ae:	bc08      	pop	{r3}
 81084b0:	469e      	mov	lr, r3
 81084b2:	4770      	bx	lr
