
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0f8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0810a398  0810a398  0001a398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810a640  0810a640  0001a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810a648  0810a648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810a64c  0810a64c  0001a64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  10000000  0810a650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b4c  100001e0  0810a830  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10004d2c  0810a830  00024d2c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034bd2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000525c  00000000  00000000  00054de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001c10  00000000  00000000  0005a040  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a08  00000000  00000000  0005bc50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d2f0  00000000  00000000  0005d658  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001ac1e  00000000  00000000  0009a948  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0018c98a  00000000  00000000  000b5566  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00241ef0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007d9c  00000000  00000000  00241f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e0 	.word	0x100001e0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810a380 	.word	0x0810a380

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e4 	.word	0x100001e4
 81002dc:	0810a380 	.word	0x0810a380

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <__aeabi_drsub>:
 81002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002f4:	e002      	b.n	81002fc <__adddf3>
 81002f6:	bf00      	nop

081002f8 <__aeabi_dsub>:
 81002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002fc <__adddf3>:
 81002fc:	b530      	push	{r4, r5, lr}
 81002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100306:	ea94 0f05 	teq	r4, r5
 810030a:	bf08      	it	eq
 810030c:	ea90 0f02 	teqeq	r0, r2
 8100310:	bf1f      	itttt	ne
 8100312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100316:	ea55 0c02 	orrsne.w	ip, r5, r2
 810031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100322:	f000 80e2 	beq.w	81004ea <__adddf3+0x1ee>
 8100326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 810032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810032e:	bfb8      	it	lt
 8100330:	426d      	neglt	r5, r5
 8100332:	dd0c      	ble.n	810034e <__adddf3+0x52>
 8100334:	442c      	add	r4, r5
 8100336:	ea80 0202 	eor.w	r2, r0, r2
 810033a:	ea81 0303 	eor.w	r3, r1, r3
 810033e:	ea82 0000 	eor.w	r0, r2, r0
 8100342:	ea83 0101 	eor.w	r1, r3, r1
 8100346:	ea80 0202 	eor.w	r2, r0, r2
 810034a:	ea81 0303 	eor.w	r3, r1, r3
 810034e:	2d36      	cmp	r5, #54	; 0x36
 8100350:	bf88      	it	hi
 8100352:	bd30      	pophi	{r4, r5, pc}
 8100354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100364:	d002      	beq.n	810036c <__adddf3+0x70>
 8100366:	4240      	negs	r0, r0
 8100368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100378:	d002      	beq.n	8100380 <__adddf3+0x84>
 810037a:	4252      	negs	r2, r2
 810037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100380:	ea94 0f05 	teq	r4, r5
 8100384:	f000 80a7 	beq.w	81004d6 <__adddf3+0x1da>
 8100388:	f1a4 0401 	sub.w	r4, r4, #1
 810038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100390:	db0d      	blt.n	81003ae <__adddf3+0xb2>
 8100392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100396:	fa22 f205 	lsr.w	r2, r2, r5
 810039a:	1880      	adds	r0, r0, r2
 810039c:	f141 0100 	adc.w	r1, r1, #0
 81003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 81003a4:	1880      	adds	r0, r0, r2
 81003a6:	fa43 f305 	asr.w	r3, r3, r5
 81003aa:	4159      	adcs	r1, r3
 81003ac:	e00e      	b.n	81003cc <__adddf3+0xd0>
 81003ae:	f1a5 0520 	sub.w	r5, r5, #32
 81003b2:	f10e 0e20 	add.w	lr, lr, #32
 81003b6:	2a01      	cmp	r2, #1
 81003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003bc:	bf28      	it	cs
 81003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003c2:	fa43 f305 	asr.w	r3, r3, r5
 81003c6:	18c0      	adds	r0, r0, r3
 81003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003d0:	d507      	bpl.n	81003e2 <__adddf3+0xe6>
 81003d2:	f04f 0e00 	mov.w	lr, #0
 81003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 81003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003de:	eb6e 0101 	sbc.w	r1, lr, r1
 81003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003e6:	d31b      	bcc.n	8100420 <__adddf3+0x124>
 81003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003ec:	d30c      	bcc.n	8100408 <__adddf3+0x10c>
 81003ee:	0849      	lsrs	r1, r1, #1
 81003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 81003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003f8:	f104 0401 	add.w	r4, r4, #1
 81003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100404:	f080 809a 	bcs.w	810053c <__adddf3+0x240>
 8100408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810040c:	bf08      	it	eq
 810040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100412:	f150 0000 	adcs.w	r0, r0, #0
 8100416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810041a:	ea41 0105 	orr.w	r1, r1, r5
 810041e:	bd30      	pop	{r4, r5, pc}
 8100420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100424:	4140      	adcs	r0, r0
 8100426:	eb41 0101 	adc.w	r1, r1, r1
 810042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 810042e:	f1a4 0401 	sub.w	r4, r4, #1
 8100432:	d1e9      	bne.n	8100408 <__adddf3+0x10c>
 8100434:	f091 0f00 	teq	r1, #0
 8100438:	bf04      	itt	eq
 810043a:	4601      	moveq	r1, r0
 810043c:	2000      	moveq	r0, #0
 810043e:	fab1 f381 	clz	r3, r1
 8100442:	bf08      	it	eq
 8100444:	3320      	addeq	r3, #32
 8100446:	f1a3 030b 	sub.w	r3, r3, #11
 810044a:	f1b3 0220 	subs.w	r2, r3, #32
 810044e:	da0c      	bge.n	810046a <__adddf3+0x16e>
 8100450:	320c      	adds	r2, #12
 8100452:	dd08      	ble.n	8100466 <__adddf3+0x16a>
 8100454:	f102 0c14 	add.w	ip, r2, #20
 8100458:	f1c2 020c 	rsb	r2, r2, #12
 810045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100460:	fa21 f102 	lsr.w	r1, r1, r2
 8100464:	e00c      	b.n	8100480 <__adddf3+0x184>
 8100466:	f102 0214 	add.w	r2, r2, #20
 810046a:	bfd8      	it	le
 810046c:	f1c2 0c20 	rsble	ip, r2, #32
 8100470:	fa01 f102 	lsl.w	r1, r1, r2
 8100474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100478:	bfdc      	itt	le
 810047a:	ea41 010c 	orrle.w	r1, r1, ip
 810047e:	4090      	lslle	r0, r2
 8100480:	1ae4      	subs	r4, r4, r3
 8100482:	bfa2      	ittt	ge
 8100484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100488:	4329      	orrge	r1, r5
 810048a:	bd30      	popge	{r4, r5, pc}
 810048c:	ea6f 0404 	mvn.w	r4, r4
 8100490:	3c1f      	subs	r4, #31
 8100492:	da1c      	bge.n	81004ce <__adddf3+0x1d2>
 8100494:	340c      	adds	r4, #12
 8100496:	dc0e      	bgt.n	81004b6 <__adddf3+0x1ba>
 8100498:	f104 0414 	add.w	r4, r4, #20
 810049c:	f1c4 0220 	rsb	r2, r4, #32
 81004a0:	fa20 f004 	lsr.w	r0, r0, r4
 81004a4:	fa01 f302 	lsl.w	r3, r1, r2
 81004a8:	ea40 0003 	orr.w	r0, r0, r3
 81004ac:	fa21 f304 	lsr.w	r3, r1, r4
 81004b0:	ea45 0103 	orr.w	r1, r5, r3
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	f1c4 040c 	rsb	r4, r4, #12
 81004ba:	f1c4 0220 	rsb	r2, r4, #32
 81004be:	fa20 f002 	lsr.w	r0, r0, r2
 81004c2:	fa01 f304 	lsl.w	r3, r1, r4
 81004c6:	ea40 0003 	orr.w	r0, r0, r3
 81004ca:	4629      	mov	r1, r5
 81004cc:	bd30      	pop	{r4, r5, pc}
 81004ce:	fa21 f004 	lsr.w	r0, r1, r4
 81004d2:	4629      	mov	r1, r5
 81004d4:	bd30      	pop	{r4, r5, pc}
 81004d6:	f094 0f00 	teq	r4, #0
 81004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004de:	bf06      	itte	eq
 81004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004e4:	3401      	addeq	r4, #1
 81004e6:	3d01      	subne	r5, #1
 81004e8:	e74e      	b.n	8100388 <__adddf3+0x8c>
 81004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004ee:	bf18      	it	ne
 81004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004f4:	d029      	beq.n	810054a <__adddf3+0x24e>
 81004f6:	ea94 0f05 	teq	r4, r5
 81004fa:	bf08      	it	eq
 81004fc:	ea90 0f02 	teqeq	r0, r2
 8100500:	d005      	beq.n	810050e <__adddf3+0x212>
 8100502:	ea54 0c00 	orrs.w	ip, r4, r0
 8100506:	bf04      	itt	eq
 8100508:	4619      	moveq	r1, r3
 810050a:	4610      	moveq	r0, r2
 810050c:	bd30      	pop	{r4, r5, pc}
 810050e:	ea91 0f03 	teq	r1, r3
 8100512:	bf1e      	ittt	ne
 8100514:	2100      	movne	r1, #0
 8100516:	2000      	movne	r0, #0
 8100518:	bd30      	popne	{r4, r5, pc}
 810051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810051e:	d105      	bne.n	810052c <__adddf3+0x230>
 8100520:	0040      	lsls	r0, r0, #1
 8100522:	4149      	adcs	r1, r1
 8100524:	bf28      	it	cs
 8100526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 810052a:	bd30      	pop	{r4, r5, pc}
 810052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100530:	bf3c      	itt	cc
 8100532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8100536:	bd30      	popcc	{r4, r5, pc}
 8100538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 810053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100544:	f04f 0000 	mov.w	r0, #0
 8100548:	bd30      	pop	{r4, r5, pc}
 810054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810054e:	bf1a      	itte	ne
 8100550:	4619      	movne	r1, r3
 8100552:	4610      	movne	r0, r2
 8100554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100558:	bf1c      	itt	ne
 810055a:	460b      	movne	r3, r1
 810055c:	4602      	movne	r2, r0
 810055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100562:	bf06      	itte	eq
 8100564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100568:	ea91 0f03 	teqeq	r1, r3
 810056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100570:	bd30      	pop	{r4, r5, pc}
 8100572:	bf00      	nop

08100574 <__aeabi_ui2d>:
 8100574:	f090 0f00 	teq	r0, #0
 8100578:	bf04      	itt	eq
 810057a:	2100      	moveq	r1, #0
 810057c:	4770      	bxeq	lr
 810057e:	b530      	push	{r4, r5, lr}
 8100580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100588:	f04f 0500 	mov.w	r5, #0
 810058c:	f04f 0100 	mov.w	r1, #0
 8100590:	e750      	b.n	8100434 <__adddf3+0x138>
 8100592:	bf00      	nop

08100594 <__aeabi_i2d>:
 8100594:	f090 0f00 	teq	r0, #0
 8100598:	bf04      	itt	eq
 810059a:	2100      	moveq	r1, #0
 810059c:	4770      	bxeq	lr
 810059e:	b530      	push	{r4, r5, lr}
 81005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 81005ac:	bf48      	it	mi
 81005ae:	4240      	negmi	r0, r0
 81005b0:	f04f 0100 	mov.w	r1, #0
 81005b4:	e73e      	b.n	8100434 <__adddf3+0x138>
 81005b6:	bf00      	nop

081005b8 <__aeabi_f2d>:
 81005b8:	0042      	lsls	r2, r0, #1
 81005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005be:	ea4f 0131 	mov.w	r1, r1, rrx
 81005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005c6:	bf1f      	itttt	ne
 81005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005d4:	4770      	bxne	lr
 81005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005da:	bf08      	it	eq
 81005dc:	4770      	bxeq	lr
 81005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005e2:	bf04      	itt	eq
 81005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005e8:	4770      	bxeq	lr
 81005ea:	b530      	push	{r4, r5, lr}
 81005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005f8:	e71c      	b.n	8100434 <__adddf3+0x138>
 81005fa:	bf00      	nop

081005fc <__aeabi_ul2d>:
 81005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8100600:	bf08      	it	eq
 8100602:	4770      	bxeq	lr
 8100604:	b530      	push	{r4, r5, lr}
 8100606:	f04f 0500 	mov.w	r5, #0
 810060a:	e00a      	b.n	8100622 <__aeabi_l2d+0x16>

0810060c <__aeabi_l2d>:
 810060c:	ea50 0201 	orrs.w	r2, r0, r1
 8100610:	bf08      	it	eq
 8100612:	4770      	bxeq	lr
 8100614:	b530      	push	{r4, r5, lr}
 8100616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 810061a:	d502      	bpl.n	8100622 <__aeabi_l2d+0x16>
 810061c:	4240      	negs	r0, r0
 810061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 810062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810062e:	f43f aed8 	beq.w	81003e2 <__adddf3+0xe6>
 8100632:	f04f 0203 	mov.w	r2, #3
 8100636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810063a:	bf18      	it	ne
 810063c:	3203      	addne	r2, #3
 810063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100642:	bf18      	it	ne
 8100644:	3203      	addne	r2, #3
 8100646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810064a:	f1c2 0320 	rsb	r3, r2, #32
 810064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100652:	fa20 f002 	lsr.w	r0, r0, r2
 8100656:	fa01 fe03 	lsl.w	lr, r1, r3
 810065a:	ea40 000e 	orr.w	r0, r0, lr
 810065e:	fa21 f102 	lsr.w	r1, r1, r2
 8100662:	4414      	add	r4, r2
 8100664:	e6bd      	b.n	81003e2 <__adddf3+0xe6>
 8100666:	bf00      	nop

08100668 <__aeabi_dmul>:
 8100668:	b570      	push	{r4, r5, r6, lr}
 810066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100676:	bf1d      	ittte	ne
 8100678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810067c:	ea94 0f0c 	teqne	r4, ip
 8100680:	ea95 0f0c 	teqne	r5, ip
 8100684:	f000 f8de 	bleq	8100844 <__aeabi_dmul+0x1dc>
 8100688:	442c      	add	r4, r5
 810068a:	ea81 0603 	eor.w	r6, r1, r3
 810068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810069a:	bf18      	it	ne
 810069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 81006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81006a8:	d038      	beq.n	810071c <__aeabi_dmul+0xb4>
 81006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 81006ae:	f04f 0500 	mov.w	r5, #0
 81006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 81006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006be:	f04f 0600 	mov.w	r6, #0
 81006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006c6:	f09c 0f00 	teq	ip, #0
 81006ca:	bf18      	it	ne
 81006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 81006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006dc:	d204      	bcs.n	81006e8 <__aeabi_dmul+0x80>
 81006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006e2:	416d      	adcs	r5, r5
 81006e4:	eb46 0606 	adc.w	r6, r6, r6
 81006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100700:	bf88      	it	hi
 8100702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100706:	d81e      	bhi.n	8100746 <__aeabi_dmul+0xde>
 8100708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 810070c:	bf08      	it	eq
 810070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100712:	f150 0000 	adcs.w	r0, r0, #0
 8100716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810071a:	bd70      	pop	{r4, r5, r6, pc}
 810071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100720:	ea46 0101 	orr.w	r1, r6, r1
 8100724:	ea40 0002 	orr.w	r0, r0, r2
 8100728:	ea81 0103 	eor.w	r1, r1, r3
 810072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100730:	bfc2      	ittt	gt
 8100732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 810073a:	bd70      	popgt	{r4, r5, r6, pc}
 810073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100740:	f04f 0e00 	mov.w	lr, #0
 8100744:	3c01      	subs	r4, #1
 8100746:	f300 80ab 	bgt.w	81008a0 <__aeabi_dmul+0x238>
 810074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810074e:	bfde      	ittt	le
 8100750:	2000      	movle	r0, #0
 8100752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100756:	bd70      	pople	{r4, r5, r6, pc}
 8100758:	f1c4 0400 	rsb	r4, r4, #0
 810075c:	3c20      	subs	r4, #32
 810075e:	da35      	bge.n	81007cc <__aeabi_dmul+0x164>
 8100760:	340c      	adds	r4, #12
 8100762:	dc1b      	bgt.n	810079c <__aeabi_dmul+0x134>
 8100764:	f104 0414 	add.w	r4, r4, #20
 8100768:	f1c4 0520 	rsb	r5, r4, #32
 810076c:	fa00 f305 	lsl.w	r3, r0, r5
 8100770:	fa20 f004 	lsr.w	r0, r0, r4
 8100774:	fa01 f205 	lsl.w	r2, r1, r5
 8100778:	ea40 0002 	orr.w	r0, r0, r2
 810077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100788:	fa21 f604 	lsr.w	r6, r1, r4
 810078c:	eb42 0106 	adc.w	r1, r2, r6
 8100790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100794:	bf08      	it	eq
 8100796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810079a:	bd70      	pop	{r4, r5, r6, pc}
 810079c:	f1c4 040c 	rsb	r4, r4, #12
 81007a0:	f1c4 0520 	rsb	r5, r4, #32
 81007a4:	fa00 f304 	lsl.w	r3, r0, r4
 81007a8:	fa20 f005 	lsr.w	r0, r0, r5
 81007ac:	fa01 f204 	lsl.w	r2, r1, r4
 81007b0:	ea40 0002 	orr.w	r0, r0, r2
 81007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007bc:	f141 0100 	adc.w	r1, r1, #0
 81007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007c4:	bf08      	it	eq
 81007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ca:	bd70      	pop	{r4, r5, r6, pc}
 81007cc:	f1c4 0520 	rsb	r5, r4, #32
 81007d0:	fa00 f205 	lsl.w	r2, r0, r5
 81007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 81007d8:	fa20 f304 	lsr.w	r3, r0, r4
 81007dc:	fa01 f205 	lsl.w	r2, r1, r5
 81007e0:	ea43 0302 	orr.w	r3, r3, r2
 81007e4:	fa21 f004 	lsr.w	r0, r1, r4
 81007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007ec:	fa21 f204 	lsr.w	r2, r1, r4
 81007f0:	ea20 0002 	bic.w	r0, r0, r2
 81007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007fc:	bf08      	it	eq
 81007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100802:	bd70      	pop	{r4, r5, r6, pc}
 8100804:	f094 0f00 	teq	r4, #0
 8100808:	d10f      	bne.n	810082a <__aeabi_dmul+0x1c2>
 810080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 810080e:	0040      	lsls	r0, r0, #1
 8100810:	eb41 0101 	adc.w	r1, r1, r1
 8100814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100818:	bf08      	it	eq
 810081a:	3c01      	subeq	r4, #1
 810081c:	d0f7      	beq.n	810080e <__aeabi_dmul+0x1a6>
 810081e:	ea41 0106 	orr.w	r1, r1, r6
 8100822:	f095 0f00 	teq	r5, #0
 8100826:	bf18      	it	ne
 8100828:	4770      	bxne	lr
 810082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 810082e:	0052      	lsls	r2, r2, #1
 8100830:	eb43 0303 	adc.w	r3, r3, r3
 8100834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100838:	bf08      	it	eq
 810083a:	3d01      	subeq	r5, #1
 810083c:	d0f7      	beq.n	810082e <__aeabi_dmul+0x1c6>
 810083e:	ea43 0306 	orr.w	r3, r3, r6
 8100842:	4770      	bx	lr
 8100844:	ea94 0f0c 	teq	r4, ip
 8100848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810084c:	bf18      	it	ne
 810084e:	ea95 0f0c 	teqne	r5, ip
 8100852:	d00c      	beq.n	810086e <__aeabi_dmul+0x206>
 8100854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100858:	bf18      	it	ne
 810085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810085e:	d1d1      	bne.n	8100804 <__aeabi_dmul+0x19c>
 8100860:	ea81 0103 	eor.w	r1, r1, r3
 8100864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100868:	f04f 0000 	mov.w	r0, #0
 810086c:	bd70      	pop	{r4, r5, r6, pc}
 810086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100872:	bf06      	itte	eq
 8100874:	4610      	moveq	r0, r2
 8100876:	4619      	moveq	r1, r3
 8100878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810087c:	d019      	beq.n	81008b2 <__aeabi_dmul+0x24a>
 810087e:	ea94 0f0c 	teq	r4, ip
 8100882:	d102      	bne.n	810088a <__aeabi_dmul+0x222>
 8100884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100888:	d113      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810088a:	ea95 0f0c 	teq	r5, ip
 810088e:	d105      	bne.n	810089c <__aeabi_dmul+0x234>
 8100890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100894:	bf1c      	itt	ne
 8100896:	4610      	movne	r0, r2
 8100898:	4619      	movne	r1, r3
 810089a:	d10a      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810089c:	ea81 0103 	eor.w	r1, r1, r3
 81008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81008ac:	f04f 0000 	mov.w	r0, #0
 81008b0:	bd70      	pop	{r4, r5, r6, pc}
 81008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008ba:	bd70      	pop	{r4, r5, r6, pc}

081008bc <__aeabi_ddiv>:
 81008bc:	b570      	push	{r4, r5, r6, lr}
 81008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008ca:	bf1d      	ittte	ne
 81008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008d0:	ea94 0f0c 	teqne	r4, ip
 81008d4:	ea95 0f0c 	teqne	r5, ip
 81008d8:	f000 f8a7 	bleq	8100a2a <__aeabi_ddiv+0x16e>
 81008dc:	eba4 0405 	sub.w	r4, r4, r5
 81008e0:	ea81 0e03 	eor.w	lr, r1, r3
 81008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008ec:	f000 8088 	beq.w	8100a00 <__aeabi_ddiv+0x144>
 81008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8100900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8100904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 810090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8100910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8100914:	429d      	cmp	r5, r3
 8100916:	bf08      	it	eq
 8100918:	4296      	cmpeq	r6, r2
 810091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 810091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8100922:	d202      	bcs.n	810092a <__aeabi_ddiv+0x6e>
 8100924:	085b      	lsrs	r3, r3, #1
 8100926:	ea4f 0232 	mov.w	r2, r2, rrx
 810092a:	1ab6      	subs	r6, r6, r2
 810092c:	eb65 0503 	sbc.w	r5, r5, r3
 8100930:	085b      	lsrs	r3, r3, #1
 8100932:	ea4f 0232 	mov.w	r2, r2, rrx
 8100936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 810093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100980:	085b      	lsrs	r3, r3, #1
 8100982:	ea4f 0232 	mov.w	r2, r2, rrx
 8100986:	ebb6 0e02 	subs.w	lr, r6, r2
 810098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810098e:	bf22      	ittt	cs
 8100990:	1ab6      	subcs	r6, r6, r2
 8100992:	4675      	movcs	r5, lr
 8100994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100998:	ea55 0e06 	orrs.w	lr, r5, r6
 810099c:	d018      	beq.n	81009d0 <__aeabi_ddiv+0x114>
 810099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 81009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 81009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 81009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 81009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 81009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 81009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009ba:	d1c0      	bne.n	810093e <__aeabi_ddiv+0x82>
 81009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009c0:	d10b      	bne.n	81009da <__aeabi_ddiv+0x11e>
 81009c2:	ea41 0100 	orr.w	r1, r1, r0
 81009c6:	f04f 0000 	mov.w	r0, #0
 81009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009ce:	e7b6      	b.n	810093e <__aeabi_ddiv+0x82>
 81009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009d4:	bf04      	itt	eq
 81009d6:	4301      	orreq	r1, r0
 81009d8:	2000      	moveq	r0, #0
 81009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009de:	bf88      	it	hi
 81009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009e4:	f63f aeaf 	bhi.w	8100746 <__aeabi_dmul+0xde>
 81009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 81009ec:	bf04      	itt	eq
 81009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009f6:	f150 0000 	adcs.w	r0, r0, #0
 81009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	pop	{r4, r5, r6, pc}
 8100a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a0c:	bfc2      	ittt	gt
 8100a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100a16:	bd70      	popgt	{r4, r5, r6, pc}
 8100a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a1c:	f04f 0e00 	mov.w	lr, #0
 8100a20:	3c01      	subs	r4, #1
 8100a22:	e690      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a24:	ea45 0e06 	orr.w	lr, r5, r6
 8100a28:	e68d      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a2e:	ea94 0f0c 	teq	r4, ip
 8100a32:	bf08      	it	eq
 8100a34:	ea95 0f0c 	teqeq	r5, ip
 8100a38:	f43f af3b 	beq.w	81008b2 <__aeabi_dmul+0x24a>
 8100a3c:	ea94 0f0c 	teq	r4, ip
 8100a40:	d10a      	bne.n	8100a58 <__aeabi_ddiv+0x19c>
 8100a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a46:	f47f af34 	bne.w	81008b2 <__aeabi_dmul+0x24a>
 8100a4a:	ea95 0f0c 	teq	r5, ip
 8100a4e:	f47f af25 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a52:	4610      	mov	r0, r2
 8100a54:	4619      	mov	r1, r3
 8100a56:	e72c      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a58:	ea95 0f0c 	teq	r5, ip
 8100a5c:	d106      	bne.n	8100a6c <__aeabi_ddiv+0x1b0>
 8100a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a62:	f43f aefd 	beq.w	8100860 <__aeabi_dmul+0x1f8>
 8100a66:	4610      	mov	r0, r2
 8100a68:	4619      	mov	r1, r3
 8100a6a:	e722      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a70:	bf18      	it	ne
 8100a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a76:	f47f aec5 	bne.w	8100804 <__aeabi_dmul+0x19c>
 8100a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a7e:	f47f af0d 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a86:	f47f aeeb 	bne.w	8100860 <__aeabi_dmul+0x1f8>
 8100a8a:	e712      	b.n	81008b2 <__aeabi_dmul+0x24a>

08100a8c <__gedf2>:
 8100a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8100a90:	e006      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a92:	bf00      	nop

08100a94 <__ledf2>:
 8100a94:	f04f 0c01 	mov.w	ip, #1
 8100a98:	e002      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a9a:	bf00      	nop

08100a9c <__cmpdf2>:
 8100a9c:	f04f 0c01 	mov.w	ip, #1
 8100aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ab0:	bf18      	it	ne
 8100ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100ab6:	d01b      	beq.n	8100af0 <__cmpdf2+0x54>
 8100ab8:	b001      	add	sp, #4
 8100aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100abe:	bf0c      	ite	eq
 8100ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100ac4:	ea91 0f03 	teqne	r1, r3
 8100ac8:	bf02      	ittt	eq
 8100aca:	ea90 0f02 	teqeq	r0, r2
 8100ace:	2000      	moveq	r0, #0
 8100ad0:	4770      	bxeq	lr
 8100ad2:	f110 0f00 	cmn.w	r0, #0
 8100ad6:	ea91 0f03 	teq	r1, r3
 8100ada:	bf58      	it	pl
 8100adc:	4299      	cmppl	r1, r3
 8100ade:	bf08      	it	eq
 8100ae0:	4290      	cmpeq	r0, r2
 8100ae2:	bf2c      	ite	cs
 8100ae4:	17d8      	asrcs	r0, r3, #31
 8100ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100aea:	f040 0001 	orr.w	r0, r0, #1
 8100aee:	4770      	bx	lr
 8100af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af8:	d102      	bne.n	8100b00 <__cmpdf2+0x64>
 8100afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100afe:	d107      	bne.n	8100b10 <__cmpdf2+0x74>
 8100b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b08:	d1d6      	bne.n	8100ab8 <__cmpdf2+0x1c>
 8100b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b0e:	d0d3      	beq.n	8100ab8 <__cmpdf2+0x1c>
 8100b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100b14:	4770      	bx	lr
 8100b16:	bf00      	nop

08100b18 <__aeabi_cdrcmple>:
 8100b18:	4684      	mov	ip, r0
 8100b1a:	4610      	mov	r0, r2
 8100b1c:	4662      	mov	r2, ip
 8100b1e:	468c      	mov	ip, r1
 8100b20:	4619      	mov	r1, r3
 8100b22:	4663      	mov	r3, ip
 8100b24:	e000      	b.n	8100b28 <__aeabi_cdcmpeq>
 8100b26:	bf00      	nop

08100b28 <__aeabi_cdcmpeq>:
 8100b28:	b501      	push	{r0, lr}
 8100b2a:	f7ff ffb7 	bl	8100a9c <__cmpdf2>
 8100b2e:	2800      	cmp	r0, #0
 8100b30:	bf48      	it	mi
 8100b32:	f110 0f00 	cmnmi.w	r0, #0
 8100b36:	bd01      	pop	{r0, pc}

08100b38 <__aeabi_dcmpeq>:
 8100b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b3c:	f7ff fff4 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b40:	bf0c      	ite	eq
 8100b42:	2001      	moveq	r0, #1
 8100b44:	2000      	movne	r0, #0
 8100b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b4a:	bf00      	nop

08100b4c <__aeabi_dcmplt>:
 8100b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b50:	f7ff ffea 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b54:	bf34      	ite	cc
 8100b56:	2001      	movcc	r0, #1
 8100b58:	2000      	movcs	r0, #0
 8100b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5e:	bf00      	nop

08100b60 <__aeabi_dcmple>:
 8100b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b64:	f7ff ffe0 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b68:	bf94      	ite	ls
 8100b6a:	2001      	movls	r0, #1
 8100b6c:	2000      	movhi	r0, #0
 8100b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b72:	bf00      	nop

08100b74 <__aeabi_dcmpge>:
 8100b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b78:	f7ff ffce 	bl	8100b18 <__aeabi_cdrcmple>
 8100b7c:	bf94      	ite	ls
 8100b7e:	2001      	movls	r0, #1
 8100b80:	2000      	movhi	r0, #0
 8100b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b86:	bf00      	nop

08100b88 <__aeabi_dcmpgt>:
 8100b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b8c:	f7ff ffc4 	bl	8100b18 <__aeabi_cdrcmple>
 8100b90:	bf34      	ite	cc
 8100b92:	2001      	movcc	r0, #1
 8100b94:	2000      	movcs	r0, #0
 8100b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b9a:	bf00      	nop

08100b9c <__aeabi_dcmpun>:
 8100b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba4:	d102      	bne.n	8100bac <__aeabi_dcmpun+0x10>
 8100ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100baa:	d10a      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb4:	d102      	bne.n	8100bbc <__aeabi_dcmpun+0x20>
 8100bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bba:	d102      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bbc:	f04f 0000 	mov.w	r0, #0
 8100bc0:	4770      	bx	lr
 8100bc2:	f04f 0001 	mov.w	r0, #1
 8100bc6:	4770      	bx	lr

08100bc8 <__aeabi_d2iz>:
 8100bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100bd0:	d215      	bcs.n	8100bfe <__aeabi_d2iz+0x36>
 8100bd2:	d511      	bpl.n	8100bf8 <__aeabi_d2iz+0x30>
 8100bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100bdc:	d912      	bls.n	8100c04 <__aeabi_d2iz+0x3c>
 8100bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100bee:	fa23 f002 	lsr.w	r0, r3, r2
 8100bf2:	bf18      	it	ne
 8100bf4:	4240      	negne	r0, r0
 8100bf6:	4770      	bx	lr
 8100bf8:	f04f 0000 	mov.w	r0, #0
 8100bfc:	4770      	bx	lr
 8100bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c02:	d105      	bne.n	8100c10 <__aeabi_d2iz+0x48>
 8100c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100c08:	bf08      	it	eq
 8100c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100c0e:	4770      	bx	lr
 8100c10:	f04f 0000 	mov.w	r0, #0
 8100c14:	4770      	bx	lr
 8100c16:	bf00      	nop

08100c18 <__aeabi_uldivmod>:
 8100c18:	b953      	cbnz	r3, 8100c30 <__aeabi_uldivmod+0x18>
 8100c1a:	b94a      	cbnz	r2, 8100c30 <__aeabi_uldivmod+0x18>
 8100c1c:	2900      	cmp	r1, #0
 8100c1e:	bf08      	it	eq
 8100c20:	2800      	cmpeq	r0, #0
 8100c22:	bf1c      	itt	ne
 8100c24:	f04f 31ff 	movne.w	r1, #4294967295
 8100c28:	f04f 30ff 	movne.w	r0, #4294967295
 8100c2c:	f000 b972 	b.w	8100f14 <__aeabi_idiv0>
 8100c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100c38:	f000 f806 	bl	8100c48 <__udivmoddi4>
 8100c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100c44:	b004      	add	sp, #16
 8100c46:	4770      	bx	lr

08100c48 <__udivmoddi4>:
 8100c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100c4c:	9e08      	ldr	r6, [sp, #32]
 8100c4e:	4604      	mov	r4, r0
 8100c50:	4688      	mov	r8, r1
 8100c52:	2b00      	cmp	r3, #0
 8100c54:	d14b      	bne.n	8100cee <__udivmoddi4+0xa6>
 8100c56:	428a      	cmp	r2, r1
 8100c58:	4615      	mov	r5, r2
 8100c5a:	d967      	bls.n	8100d2c <__udivmoddi4+0xe4>
 8100c5c:	fab2 f282 	clz	r2, r2
 8100c60:	b14a      	cbz	r2, 8100c76 <__udivmoddi4+0x2e>
 8100c62:	f1c2 0720 	rsb	r7, r2, #32
 8100c66:	fa01 f302 	lsl.w	r3, r1, r2
 8100c6a:	fa20 f707 	lsr.w	r7, r0, r7
 8100c6e:	4095      	lsls	r5, r2
 8100c70:	ea47 0803 	orr.w	r8, r7, r3
 8100c74:	4094      	lsls	r4, r2
 8100c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100c7a:	0c23      	lsrs	r3, r4, #16
 8100c7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100c80:	fa1f fc85 	uxth.w	ip, r5
 8100c84:	fb0e 8817 	mls	r8, lr, r7, r8
 8100c88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100c8c:	fb07 f10c 	mul.w	r1, r7, ip
 8100c90:	4299      	cmp	r1, r3
 8100c92:	d909      	bls.n	8100ca8 <__udivmoddi4+0x60>
 8100c94:	18eb      	adds	r3, r5, r3
 8100c96:	f107 30ff 	add.w	r0, r7, #4294967295
 8100c9a:	f080 811b 	bcs.w	8100ed4 <__udivmoddi4+0x28c>
 8100c9e:	4299      	cmp	r1, r3
 8100ca0:	f240 8118 	bls.w	8100ed4 <__udivmoddi4+0x28c>
 8100ca4:	3f02      	subs	r7, #2
 8100ca6:	442b      	add	r3, r5
 8100ca8:	1a5b      	subs	r3, r3, r1
 8100caa:	b2a4      	uxth	r4, r4
 8100cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8100cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100cb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100cbc:	45a4      	cmp	ip, r4
 8100cbe:	d909      	bls.n	8100cd4 <__udivmoddi4+0x8c>
 8100cc0:	192c      	adds	r4, r5, r4
 8100cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8100cc6:	f080 8107 	bcs.w	8100ed8 <__udivmoddi4+0x290>
 8100cca:	45a4      	cmp	ip, r4
 8100ccc:	f240 8104 	bls.w	8100ed8 <__udivmoddi4+0x290>
 8100cd0:	3802      	subs	r0, #2
 8100cd2:	442c      	add	r4, r5
 8100cd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100cd8:	eba4 040c 	sub.w	r4, r4, ip
 8100cdc:	2700      	movs	r7, #0
 8100cde:	b11e      	cbz	r6, 8100ce8 <__udivmoddi4+0xa0>
 8100ce0:	40d4      	lsrs	r4, r2
 8100ce2:	2300      	movs	r3, #0
 8100ce4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ce8:	4639      	mov	r1, r7
 8100cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100cee:	428b      	cmp	r3, r1
 8100cf0:	d909      	bls.n	8100d06 <__udivmoddi4+0xbe>
 8100cf2:	2e00      	cmp	r6, #0
 8100cf4:	f000 80eb 	beq.w	8100ece <__udivmoddi4+0x286>
 8100cf8:	2700      	movs	r7, #0
 8100cfa:	e9c6 0100 	strd	r0, r1, [r6]
 8100cfe:	4638      	mov	r0, r7
 8100d00:	4639      	mov	r1, r7
 8100d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d06:	fab3 f783 	clz	r7, r3
 8100d0a:	2f00      	cmp	r7, #0
 8100d0c:	d147      	bne.n	8100d9e <__udivmoddi4+0x156>
 8100d0e:	428b      	cmp	r3, r1
 8100d10:	d302      	bcc.n	8100d18 <__udivmoddi4+0xd0>
 8100d12:	4282      	cmp	r2, r0
 8100d14:	f200 80fa 	bhi.w	8100f0c <__udivmoddi4+0x2c4>
 8100d18:	1a84      	subs	r4, r0, r2
 8100d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8100d1e:	2001      	movs	r0, #1
 8100d20:	4698      	mov	r8, r3
 8100d22:	2e00      	cmp	r6, #0
 8100d24:	d0e0      	beq.n	8100ce8 <__udivmoddi4+0xa0>
 8100d26:	e9c6 4800 	strd	r4, r8, [r6]
 8100d2a:	e7dd      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100d2c:	b902      	cbnz	r2, 8100d30 <__udivmoddi4+0xe8>
 8100d2e:	deff      	udf	#255	; 0xff
 8100d30:	fab2 f282 	clz	r2, r2
 8100d34:	2a00      	cmp	r2, #0
 8100d36:	f040 808f 	bne.w	8100e58 <__udivmoddi4+0x210>
 8100d3a:	1b49      	subs	r1, r1, r5
 8100d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100d40:	fa1f f885 	uxth.w	r8, r5
 8100d44:	2701      	movs	r7, #1
 8100d46:	fbb1 fcfe 	udiv	ip, r1, lr
 8100d4a:	0c23      	lsrs	r3, r4, #16
 8100d4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d54:	fb08 f10c 	mul.w	r1, r8, ip
 8100d58:	4299      	cmp	r1, r3
 8100d5a:	d907      	bls.n	8100d6c <__udivmoddi4+0x124>
 8100d5c:	18eb      	adds	r3, r5, r3
 8100d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100d62:	d202      	bcs.n	8100d6a <__udivmoddi4+0x122>
 8100d64:	4299      	cmp	r1, r3
 8100d66:	f200 80cd 	bhi.w	8100f04 <__udivmoddi4+0x2bc>
 8100d6a:	4684      	mov	ip, r0
 8100d6c:	1a59      	subs	r1, r3, r1
 8100d6e:	b2a3      	uxth	r3, r4
 8100d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100d74:	fb0e 1410 	mls	r4, lr, r0, r1
 8100d78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100d7c:	fb08 f800 	mul.w	r8, r8, r0
 8100d80:	45a0      	cmp	r8, r4
 8100d82:	d907      	bls.n	8100d94 <__udivmoddi4+0x14c>
 8100d84:	192c      	adds	r4, r5, r4
 8100d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8100d8a:	d202      	bcs.n	8100d92 <__udivmoddi4+0x14a>
 8100d8c:	45a0      	cmp	r8, r4
 8100d8e:	f200 80b6 	bhi.w	8100efe <__udivmoddi4+0x2b6>
 8100d92:	4618      	mov	r0, r3
 8100d94:	eba4 0408 	sub.w	r4, r4, r8
 8100d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100d9c:	e79f      	b.n	8100cde <__udivmoddi4+0x96>
 8100d9e:	f1c7 0c20 	rsb	ip, r7, #32
 8100da2:	40bb      	lsls	r3, r7
 8100da4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100da8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100dac:	fa01 f407 	lsl.w	r4, r1, r7
 8100db0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100db4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100db8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100dbc:	4325      	orrs	r5, r4
 8100dbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100dc2:	0c2c      	lsrs	r4, r5, #16
 8100dc4:	fb08 3319 	mls	r3, r8, r9, r3
 8100dc8:	fa1f fa8e 	uxth.w	sl, lr
 8100dcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100dd0:	fb09 f40a 	mul.w	r4, r9, sl
 8100dd4:	429c      	cmp	r4, r3
 8100dd6:	fa02 f207 	lsl.w	r2, r2, r7
 8100dda:	fa00 f107 	lsl.w	r1, r0, r7
 8100dde:	d90b      	bls.n	8100df8 <__udivmoddi4+0x1b0>
 8100de0:	eb1e 0303 	adds.w	r3, lr, r3
 8100de4:	f109 30ff 	add.w	r0, r9, #4294967295
 8100de8:	f080 8087 	bcs.w	8100efa <__udivmoddi4+0x2b2>
 8100dec:	429c      	cmp	r4, r3
 8100dee:	f240 8084 	bls.w	8100efa <__udivmoddi4+0x2b2>
 8100df2:	f1a9 0902 	sub.w	r9, r9, #2
 8100df6:	4473      	add	r3, lr
 8100df8:	1b1b      	subs	r3, r3, r4
 8100dfa:	b2ad      	uxth	r5, r5
 8100dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8100e00:	fb08 3310 	mls	r3, r8, r0, r3
 8100e04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100e08:	fb00 fa0a 	mul.w	sl, r0, sl
 8100e0c:	45a2      	cmp	sl, r4
 8100e0e:	d908      	bls.n	8100e22 <__udivmoddi4+0x1da>
 8100e10:	eb1e 0404 	adds.w	r4, lr, r4
 8100e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e18:	d26b      	bcs.n	8100ef2 <__udivmoddi4+0x2aa>
 8100e1a:	45a2      	cmp	sl, r4
 8100e1c:	d969      	bls.n	8100ef2 <__udivmoddi4+0x2aa>
 8100e1e:	3802      	subs	r0, #2
 8100e20:	4474      	add	r4, lr
 8100e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100e26:	fba0 8902 	umull	r8, r9, r0, r2
 8100e2a:	eba4 040a 	sub.w	r4, r4, sl
 8100e2e:	454c      	cmp	r4, r9
 8100e30:	46c2      	mov	sl, r8
 8100e32:	464b      	mov	r3, r9
 8100e34:	d354      	bcc.n	8100ee0 <__udivmoddi4+0x298>
 8100e36:	d051      	beq.n	8100edc <__udivmoddi4+0x294>
 8100e38:	2e00      	cmp	r6, #0
 8100e3a:	d069      	beq.n	8100f10 <__udivmoddi4+0x2c8>
 8100e3c:	ebb1 050a 	subs.w	r5, r1, sl
 8100e40:	eb64 0403 	sbc.w	r4, r4, r3
 8100e44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100e48:	40fd      	lsrs	r5, r7
 8100e4a:	40fc      	lsrs	r4, r7
 8100e4c:	ea4c 0505 	orr.w	r5, ip, r5
 8100e50:	e9c6 5400 	strd	r5, r4, [r6]
 8100e54:	2700      	movs	r7, #0
 8100e56:	e747      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100e58:	f1c2 0320 	rsb	r3, r2, #32
 8100e5c:	fa20 f703 	lsr.w	r7, r0, r3
 8100e60:	4095      	lsls	r5, r2
 8100e62:	fa01 f002 	lsl.w	r0, r1, r2
 8100e66:	fa21 f303 	lsr.w	r3, r1, r3
 8100e6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e6e:	4338      	orrs	r0, r7
 8100e70:	0c01      	lsrs	r1, r0, #16
 8100e72:	fbb3 f7fe 	udiv	r7, r3, lr
 8100e76:	fa1f f885 	uxth.w	r8, r5
 8100e7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8100e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e82:	fb07 f308 	mul.w	r3, r7, r8
 8100e86:	428b      	cmp	r3, r1
 8100e88:	fa04 f402 	lsl.w	r4, r4, r2
 8100e8c:	d907      	bls.n	8100e9e <__udivmoddi4+0x256>
 8100e8e:	1869      	adds	r1, r5, r1
 8100e90:	f107 3cff 	add.w	ip, r7, #4294967295
 8100e94:	d22f      	bcs.n	8100ef6 <__udivmoddi4+0x2ae>
 8100e96:	428b      	cmp	r3, r1
 8100e98:	d92d      	bls.n	8100ef6 <__udivmoddi4+0x2ae>
 8100e9a:	3f02      	subs	r7, #2
 8100e9c:	4429      	add	r1, r5
 8100e9e:	1acb      	subs	r3, r1, r3
 8100ea0:	b281      	uxth	r1, r0
 8100ea2:	fbb3 f0fe 	udiv	r0, r3, lr
 8100ea6:	fb0e 3310 	mls	r3, lr, r0, r3
 8100eaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100eae:	fb00 f308 	mul.w	r3, r0, r8
 8100eb2:	428b      	cmp	r3, r1
 8100eb4:	d907      	bls.n	8100ec6 <__udivmoddi4+0x27e>
 8100eb6:	1869      	adds	r1, r5, r1
 8100eb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8100ebc:	d217      	bcs.n	8100eee <__udivmoddi4+0x2a6>
 8100ebe:	428b      	cmp	r3, r1
 8100ec0:	d915      	bls.n	8100eee <__udivmoddi4+0x2a6>
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	4429      	add	r1, r5
 8100ec6:	1ac9      	subs	r1, r1, r3
 8100ec8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8100ecc:	e73b      	b.n	8100d46 <__udivmoddi4+0xfe>
 8100ece:	4637      	mov	r7, r6
 8100ed0:	4630      	mov	r0, r6
 8100ed2:	e709      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100ed4:	4607      	mov	r7, r0
 8100ed6:	e6e7      	b.n	8100ca8 <__udivmoddi4+0x60>
 8100ed8:	4618      	mov	r0, r3
 8100eda:	e6fb      	b.n	8100cd4 <__udivmoddi4+0x8c>
 8100edc:	4541      	cmp	r1, r8
 8100ede:	d2ab      	bcs.n	8100e38 <__udivmoddi4+0x1f0>
 8100ee0:	ebb8 0a02 	subs.w	sl, r8, r2
 8100ee4:	eb69 020e 	sbc.w	r2, r9, lr
 8100ee8:	3801      	subs	r0, #1
 8100eea:	4613      	mov	r3, r2
 8100eec:	e7a4      	b.n	8100e38 <__udivmoddi4+0x1f0>
 8100eee:	4660      	mov	r0, ip
 8100ef0:	e7e9      	b.n	8100ec6 <__udivmoddi4+0x27e>
 8100ef2:	4618      	mov	r0, r3
 8100ef4:	e795      	b.n	8100e22 <__udivmoddi4+0x1da>
 8100ef6:	4667      	mov	r7, ip
 8100ef8:	e7d1      	b.n	8100e9e <__udivmoddi4+0x256>
 8100efa:	4681      	mov	r9, r0
 8100efc:	e77c      	b.n	8100df8 <__udivmoddi4+0x1b0>
 8100efe:	3802      	subs	r0, #2
 8100f00:	442c      	add	r4, r5
 8100f02:	e747      	b.n	8100d94 <__udivmoddi4+0x14c>
 8100f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8100f08:	442b      	add	r3, r5
 8100f0a:	e72f      	b.n	8100d6c <__udivmoddi4+0x124>
 8100f0c:	4638      	mov	r0, r7
 8100f0e:	e708      	b.n	8100d22 <__udivmoddi4+0xda>
 8100f10:	4637      	mov	r7, r6
 8100f12:	e6e9      	b.n	8100ce8 <__udivmoddi4+0xa0>

08100f14 <__aeabi_idiv0>:
 8100f14:	4770      	bx	lr
 8100f16:	bf00      	nop

08100f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100f18:	b480      	push	{r7}
 8100f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100f1c:	4b0b      	ldr	r3, [pc, #44]	; (8100f4c <SystemInit+0x34>)
 8100f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100f22:	4a0a      	ldr	r2, [pc, #40]	; (8100f4c <SystemInit+0x34>)
 8100f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8100f2c:	4b07      	ldr	r3, [pc, #28]	; (8100f4c <SystemInit+0x34>)
 8100f2e:	691b      	ldr	r3, [r3, #16]
 8100f30:	4a06      	ldr	r2, [pc, #24]	; (8100f4c <SystemInit+0x34>)
 8100f32:	f043 0304 	orr.w	r3, r3, #4
 8100f36:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100f38:	4b04      	ldr	r3, [pc, #16]	; (8100f4c <SystemInit+0x34>)
 8100f3a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100f3e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100f40:	bf00      	nop
 8100f42:	46bd      	mov	sp, r7
 8100f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f48:	4770      	bx	lr
 8100f4a:	bf00      	nop
 8100f4c:	e000ed00 	.word	0xe000ed00

08100f50 <BMP180InitDevice>:
#include "bmp180.h"
#include "common.h"


HAL_StatusTypeDef BMP180InitDevice(bmp180Sensor* sensor)
{
 8100f50:	b580      	push	{r7, lr}
 8100f52:	b084      	sub	sp, #16
 8100f54:	af00      	add	r7, sp, #0
 8100f56:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;

	uint8_t chip_id = 0x00;
 8100f58:	2300      	movs	r3, #0
 8100f5a:	73bb      	strb	r3, [r7, #14]

	chip_id = BaroReadSensorID(BMP180_READ_ADDRESS, CHIP_ID);
 8100f5c:	21d0      	movs	r1, #208	; 0xd0
 8100f5e:	20ef      	movs	r0, #239	; 0xef
 8100f60:	f000 f958 	bl	8101214 <BaroReadSensorID>
 8100f64:	4603      	mov	r3, r0
 8100f66:	73bb      	strb	r3, [r7, #14]

	if(chip_id == I_AM_BMP180)
 8100f68:	7bbb      	ldrb	r3, [r7, #14]
 8100f6a:	2b55      	cmp	r3, #85	; 0x55
 8100f6c:	d10d      	bne.n	8100f8a <BMP180InitDevice+0x3a>
	{
		BMPReadCalibCoefficients(sensor);
 8100f6e:	6878      	ldr	r0, [r7, #4]
 8100f70:	f000 f816 	bl	8100fa0 <BMPReadCalibCoefficients>
		sensor->oss_mode = OSS_HIGHRESOLUTION;
 8100f74:	687b      	ldr	r3, [r7, #4]
 8100f76:	2202      	movs	r2, #2
 8100f78:	741a      	strb	r2, [r3, #16]
		LED1_ON();
 8100f7a:	2201      	movs	r2, #1
 8100f7c:	2101      	movs	r1, #1
 8100f7e:	4807      	ldr	r0, [pc, #28]	; (8100f9c <BMP180InitDevice+0x4c>)
 8100f80:	f001 f99c 	bl	81022bc <HAL_GPIO_WritePin>
		status = HAL_OK;
 8100f84:	2300      	movs	r3, #0
 8100f86:	73fb      	strb	r3, [r7, #15]
 8100f88:	e003      	b.n	8100f92 <BMP180InitDevice+0x42>
	}

	else
	{
		ErrorHandler();
 8100f8a:	f000 fad7 	bl	810153c <ErrorHandler>
		status = HAL_ERROR;
 8100f8e:	2301      	movs	r3, #1
 8100f90:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8100f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8100f94:	4618      	mov	r0, r3
 8100f96:	3710      	adds	r7, #16
 8100f98:	46bd      	mov	sp, r7
 8100f9a:	bd80      	pop	{r7, pc}
 8100f9c:	58020400 	.word	0x58020400

08100fa0 <BMPReadCalibCoefficients>:

HAL_StatusTypeDef BMPReadCalibCoefficients(bmp180Sensor* sensor)
{
 8100fa0:	b580      	push	{r7, lr}
 8100fa2:	b08e      	sub	sp, #56	; 0x38
 8100fa4:	af04      	add	r7, sp, #16
 8100fa6:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t coeff_buf[BMP180_COEFF_DATASIZE] = {0};
 8100fa8:	f107 030c 	add.w	r3, r7, #12
 8100fac:	2200      	movs	r2, #0
 8100fae:	601a      	str	r2, [r3, #0]
 8100fb0:	605a      	str	r2, [r3, #4]
 8100fb2:	609a      	str	r2, [r3, #8]
 8100fb4:	60da      	str	r2, [r3, #12]
 8100fb6:	611a      	str	r2, [r3, #16]
 8100fb8:	829a      	strh	r2, [r3, #20]
	uint8_t i = 0;
 8100fba:	2300      	movs	r3, #0
 8100fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	// Read contents of register
	status = HAL_I2C_Mem_Read(&hi2c1, BMP180_READ_ADDRESS, AC1, 1, coeff_buf, BMP180_COEFF_DATASIZE, 1000);
 8100fc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100fc4:	9302      	str	r3, [sp, #8]
 8100fc6:	2316      	movs	r3, #22
 8100fc8:	9301      	str	r3, [sp, #4]
 8100fca:	f107 030c 	add.w	r3, r7, #12
 8100fce:	9300      	str	r3, [sp, #0]
 8100fd0:	2301      	movs	r3, #1
 8100fd2:	22aa      	movs	r2, #170	; 0xaa
 8100fd4:	21ef      	movs	r1, #239	; 0xef
 8100fd6:	4855      	ldr	r0, [pc, #340]	; (810112c <BMPReadCalibCoefficients+0x18c>)
 8100fd8:	f001 fb64 	bl	81026a4 <HAL_I2C_Mem_Read>
 8100fdc:	4603      	mov	r3, r0
 8100fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(status != HAL_OK)
 8100fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8100fe6:	2b00      	cmp	r3, #0
 8100fe8:	d001      	beq.n	8100fee <BMPReadCalibCoefficients+0x4e>
	{
		ErrorHandler();
 8100fea:	f000 faa7 	bl	810153c <ErrorHandler>
	}

	//check that device coefficients are correct
	for(i = 0; i < BMP180_COEFF_DATASIZE/2; i++)
 8100fee:	2300      	movs	r3, #0
 8100ff0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8100ff4:	e028      	b.n	8101048 <BMPReadCalibCoefficients+0xa8>
	{
		uint16_t coeff = (coeff_buf[2*i] << 8) | coeff_buf[2 * i + 1];
 8100ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8100ffa:	005b      	lsls	r3, r3, #1
 8100ffc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8101000:	4413      	add	r3, r2
 8101002:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8101006:	021b      	lsls	r3, r3, #8
 8101008:	b21a      	sxth	r2, r3
 810100a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 810100e:	005b      	lsls	r3, r3, #1
 8101010:	3301      	adds	r3, #1
 8101012:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8101016:	440b      	add	r3, r1
 8101018:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 810101c:	b21b      	sxth	r3, r3
 810101e:	4313      	orrs	r3, r2
 8101020:	b21b      	sxth	r3, r3
 8101022:	84bb      	strh	r3, [r7, #36]	; 0x24
		//check coefficient values
		if(coeff == 0 || coeff == 0xFFFF)
 8101024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101026:	2b00      	cmp	r3, #0
 8101028:	d004      	beq.n	8101034 <BMPReadCalibCoefficients+0x94>
 810102a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810102c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8101030:	4293      	cmp	r3, r2
 8101032:	d104      	bne.n	810103e <BMPReadCalibCoefficients+0x9e>
		{
			status = HAL_ERROR;
 8101034:	2301      	movs	r3, #1
 8101036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			ErrorHandler();
 810103a:	f000 fa7f 	bl	810153c <ErrorHandler>
	for(i = 0; i < BMP180_COEFF_DATASIZE/2; i++)
 810103e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8101042:	3301      	adds	r3, #1
 8101044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8101048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 810104c:	2b0a      	cmp	r3, #10
 810104e:	d9d2      	bls.n	8100ff6 <BMPReadCalibCoefficients+0x56>
		}
	}

	sensor->coefficients.ac1 = coeff_buf[0] << 8 | coeff_buf[1];
 8101050:	7b3b      	ldrb	r3, [r7, #12]
 8101052:	021b      	lsls	r3, r3, #8
 8101054:	b21a      	sxth	r2, r3
 8101056:	7b7b      	ldrb	r3, [r7, #13]
 8101058:	b21b      	sxth	r3, r3
 810105a:	4313      	orrs	r3, r2
 810105c:	b21a      	sxth	r2, r3
 810105e:	687b      	ldr	r3, [r7, #4]
 8101060:	825a      	strh	r2, [r3, #18]
	sensor->coefficients.ac2 = coeff_buf[2] << 8 | coeff_buf[3];
 8101062:	7bbb      	ldrb	r3, [r7, #14]
 8101064:	021b      	lsls	r3, r3, #8
 8101066:	b21a      	sxth	r2, r3
 8101068:	7bfb      	ldrb	r3, [r7, #15]
 810106a:	b21b      	sxth	r3, r3
 810106c:	4313      	orrs	r3, r2
 810106e:	b21a      	sxth	r2, r3
 8101070:	687b      	ldr	r3, [r7, #4]
 8101072:	829a      	strh	r2, [r3, #20]
	sensor->coefficients.ac3 = coeff_buf[4] << 8 | coeff_buf[5];
 8101074:	7c3b      	ldrb	r3, [r7, #16]
 8101076:	021b      	lsls	r3, r3, #8
 8101078:	b21a      	sxth	r2, r3
 810107a:	7c7b      	ldrb	r3, [r7, #17]
 810107c:	b21b      	sxth	r3, r3
 810107e:	4313      	orrs	r3, r2
 8101080:	b21a      	sxth	r2, r3
 8101082:	687b      	ldr	r3, [r7, #4]
 8101084:	82da      	strh	r2, [r3, #22]
	sensor->coefficients.ac4 = coeff_buf[6] << 8 | coeff_buf[7];
 8101086:	7cbb      	ldrb	r3, [r7, #18]
 8101088:	021b      	lsls	r3, r3, #8
 810108a:	b21a      	sxth	r2, r3
 810108c:	7cfb      	ldrb	r3, [r7, #19]
 810108e:	b21b      	sxth	r3, r3
 8101090:	4313      	orrs	r3, r2
 8101092:	b21b      	sxth	r3, r3
 8101094:	b29a      	uxth	r2, r3
 8101096:	687b      	ldr	r3, [r7, #4]
 8101098:	831a      	strh	r2, [r3, #24]
	sensor->coefficients.ac5 = coeff_buf[8] << 8 | coeff_buf[9];
 810109a:	7d3b      	ldrb	r3, [r7, #20]
 810109c:	021b      	lsls	r3, r3, #8
 810109e:	b21a      	sxth	r2, r3
 81010a0:	7d7b      	ldrb	r3, [r7, #21]
 81010a2:	b21b      	sxth	r3, r3
 81010a4:	4313      	orrs	r3, r2
 81010a6:	b21b      	sxth	r3, r3
 81010a8:	b29a      	uxth	r2, r3
 81010aa:	687b      	ldr	r3, [r7, #4]
 81010ac:	835a      	strh	r2, [r3, #26]
	sensor->coefficients.ac6 = coeff_buf[10] << 8 | coeff_buf[11];
 81010ae:	7dbb      	ldrb	r3, [r7, #22]
 81010b0:	021b      	lsls	r3, r3, #8
 81010b2:	b21a      	sxth	r2, r3
 81010b4:	7dfb      	ldrb	r3, [r7, #23]
 81010b6:	b21b      	sxth	r3, r3
 81010b8:	4313      	orrs	r3, r2
 81010ba:	b21b      	sxth	r3, r3
 81010bc:	b29a      	uxth	r2, r3
 81010be:	687b      	ldr	r3, [r7, #4]
 81010c0:	839a      	strh	r2, [r3, #28]
	sensor->coefficients.b1 = coeff_buf[12] << 8 | coeff_buf[13];
 81010c2:	7e3b      	ldrb	r3, [r7, #24]
 81010c4:	021b      	lsls	r3, r3, #8
 81010c6:	b21a      	sxth	r2, r3
 81010c8:	7e7b      	ldrb	r3, [r7, #25]
 81010ca:	b21b      	sxth	r3, r3
 81010cc:	4313      	orrs	r3, r2
 81010ce:	b21a      	sxth	r2, r3
 81010d0:	687b      	ldr	r3, [r7, #4]
 81010d2:	83da      	strh	r2, [r3, #30]
	sensor->coefficients.b2 = coeff_buf[14] << 8 | coeff_buf[15];
 81010d4:	7ebb      	ldrb	r3, [r7, #26]
 81010d6:	021b      	lsls	r3, r3, #8
 81010d8:	b21a      	sxth	r2, r3
 81010da:	7efb      	ldrb	r3, [r7, #27]
 81010dc:	b21b      	sxth	r3, r3
 81010de:	4313      	orrs	r3, r2
 81010e0:	b21a      	sxth	r2, r3
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	841a      	strh	r2, [r3, #32]
	sensor->coefficients.mb = coeff_buf[16] << 8 | coeff_buf[17];
 81010e6:	7f3b      	ldrb	r3, [r7, #28]
 81010e8:	021b      	lsls	r3, r3, #8
 81010ea:	b21a      	sxth	r2, r3
 81010ec:	7f7b      	ldrb	r3, [r7, #29]
 81010ee:	b21b      	sxth	r3, r3
 81010f0:	4313      	orrs	r3, r2
 81010f2:	b21a      	sxth	r2, r3
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor->coefficients.mc = coeff_buf[18] << 8 | coeff_buf[19];
 81010f8:	7fbb      	ldrb	r3, [r7, #30]
 81010fa:	021b      	lsls	r3, r3, #8
 81010fc:	b21a      	sxth	r2, r3
 81010fe:	7ffb      	ldrb	r3, [r7, #31]
 8101100:	b21b      	sxth	r3, r3
 8101102:	4313      	orrs	r3, r2
 8101104:	b21a      	sxth	r2, r3
 8101106:	687b      	ldr	r3, [r7, #4]
 8101108:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor->coefficients.md = coeff_buf[20] << 8 | coeff_buf[21];
 810110a:	f897 3020 	ldrb.w	r3, [r7, #32]
 810110e:	021b      	lsls	r3, r3, #8
 8101110:	b21a      	sxth	r2, r3
 8101112:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8101116:	b21b      	sxth	r3, r3
 8101118:	4313      	orrs	r3, r2
 810111a:	b21a      	sxth	r2, r3
 810111c:	687b      	ldr	r3, [r7, #4]
 810111e:	84da      	strh	r2, [r3, #38]	; 0x26


	return status;
 8101120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 8101124:	4618      	mov	r0, r3
 8101126:	3728      	adds	r7, #40	; 0x28
 8101128:	46bd      	mov	sp, r7
 810112a:	bd80      	pop	{r7, pc}
 810112c:	10004b74 	.word	0x10004b74

08101130 <BMP180ReadUT>:
	return raw_pressure;

}

int32_t BMP180ReadUT()
{
 8101130:	b580      	push	{r7, lr}
 8101132:	b088      	sub	sp, #32
 8101134:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	uint8_t cmd = TEMPERATURE_CMD;
 8101136:	232e      	movs	r3, #46	; 0x2e
 8101138:	73fb      	strb	r3, [r7, #15]
	uint8_t output[2];
	//Write command to temperature
	I2CWrite(BMP180_WRITE_ADDRESS, REG_CTRL, cmd);
 810113a:	7bfb      	ldrb	r3, [r7, #15]
 810113c:	461a      	mov	r2, r3
 810113e:	21f4      	movs	r1, #244	; 0xf4
 8101140:	20ee      	movs	r0, #238	; 0xee
 8101142:	f000 f9cf 	bl	81014e4 <I2CWrite>
	// Wait 4.5ms
	HAL_Delay(TEMP_CONV_TIME);
 8101146:	2005      	movs	r0, #5
 8101148:	f000 fdf2 	bl	8101d30 <HAL_Delay>
	status = HAL_I2C_Mem_Read(&hi2c1, BMP180_READ_ADDRESS, REG_TEMP, 1, output, sizeof(output), 1000);
 810114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101150:	9302      	str	r3, [sp, #8]
 8101152:	2302      	movs	r3, #2
 8101154:	9301      	str	r3, [sp, #4]
 8101156:	1d3b      	adds	r3, r7, #4
 8101158:	9300      	str	r3, [sp, #0]
 810115a:	2301      	movs	r3, #1
 810115c:	22f6      	movs	r2, #246	; 0xf6
 810115e:	21ef      	movs	r1, #239	; 0xef
 8101160:	4809      	ldr	r0, [pc, #36]	; (8101188 <BMP180ReadUT+0x58>)
 8101162:	f001 fa9f 	bl	81026a4 <HAL_I2C_Mem_Read>
 8101166:	4603      	mov	r3, r0
 8101168:	73bb      	strb	r3, [r7, #14]
	if(status != HAL_OK)
 810116a:	7bbb      	ldrb	r3, [r7, #14]
 810116c:	2b00      	cmp	r3, #0
 810116e:	d001      	beq.n	8101174 <BMP180ReadUT+0x44>
	{
		ErrorHandler();
 8101170:	f000 f9e4 	bl	810153c <ErrorHandler>
	}

	int32_t raw_temp = (uint32_t) output[0] << 8 | output[1];
 8101174:	793b      	ldrb	r3, [r7, #4]
 8101176:	021b      	lsls	r3, r3, #8
 8101178:	797a      	ldrb	r2, [r7, #5]
 810117a:	4313      	orrs	r3, r2
 810117c:	60bb      	str	r3, [r7, #8]

	return raw_temp;
 810117e:	68bb      	ldr	r3, [r7, #8]

}
 8101180:	4618      	mov	r0, r3
 8101182:	3710      	adds	r7, #16
 8101184:	46bd      	mov	sp, r7
 8101186:	bd80      	pop	{r7, pc}
 8101188:	10004b74 	.word	0x10004b74

0810118c <BMP180ReadTemperature>:


void BMP180ReadTemperature(bmp180Sensor* sensor)
{
 810118c:	b580      	push	{r7, lr}
 810118e:	b088      	sub	sp, #32
 8101190:	af00      	add	r7, sp, #0
 8101192:	6078      	str	r0, [r7, #4]
	int32_t x1 = 0;
 8101194:	2300      	movs	r3, #0
 8101196:	61fb      	str	r3, [r7, #28]
	int32_t x2 = 0;
 8101198:	2300      	movs	r3, #0
 810119a:	61bb      	str	r3, [r7, #24]

	int32_t ut = BMP180ReadUT();
 810119c:	f7ff ffc8 	bl	8101130 <BMP180ReadUT>
 81011a0:	6178      	str	r0, [r7, #20]

	uint16_t ac6 = sensor->coefficients.ac6;
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	8b9b      	ldrh	r3, [r3, #28]
 81011a6:	827b      	strh	r3, [r7, #18]
	uint16_t ac5 = sensor->coefficients.ac5;
 81011a8:	687b      	ldr	r3, [r7, #4]
 81011aa:	8b5b      	ldrh	r3, [r3, #26]
 81011ac:	823b      	strh	r3, [r7, #16]
	int16_t mc = sensor->coefficients.mc;
 81011ae:	687b      	ldr	r3, [r7, #4]
 81011b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 81011b2:	81fb      	strh	r3, [r7, #14]
	int16_t md = sensor->coefficients.md;
 81011b4:	687b      	ldr	r3, [r7, #4]
 81011b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 81011b8:	81bb      	strh	r3, [r7, #12]

	x1 = ((ut - ac6) * ac5) >> 15;
 81011ba:	8a7b      	ldrh	r3, [r7, #18]
 81011bc:	697a      	ldr	r2, [r7, #20]
 81011be:	1ad3      	subs	r3, r2, r3
 81011c0:	8a3a      	ldrh	r2, [r7, #16]
 81011c2:	fb02 f303 	mul.w	r3, r2, r3
 81011c6:	13db      	asrs	r3, r3, #15
 81011c8:	61fb      	str	r3, [r7, #28]
	x2 = ((int32_t) mc << 11) / (x1 + md);
 81011ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81011ce:	02da      	lsls	r2, r3, #11
 81011d0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 81011d4:	69fb      	ldr	r3, [r7, #28]
 81011d6:	440b      	add	r3, r1
 81011d8:	fb92 f3f3 	sdiv	r3, r2, r3
 81011dc:	61bb      	str	r3, [r7, #24]
	sensor->b5 = x1 + x2;
 81011de:	69fa      	ldr	r2, [r7, #28]
 81011e0:	69bb      	ldr	r3, [r7, #24]
 81011e2:	441a      	add	r2, r3
 81011e4:	687b      	ldr	r3, [r7, #4]
 81011e6:	60da      	str	r2, [r3, #12]
	sensor->temperature = ((sensor->b5 + 8) >> 4) * 0.1f; // multiply by 0.1 as temp is in degrees
 81011e8:	687b      	ldr	r3, [r7, #4]
 81011ea:	68db      	ldr	r3, [r3, #12]
 81011ec:	3308      	adds	r3, #8
 81011ee:	111b      	asrs	r3, r3, #4
 81011f0:	ee07 3a90 	vmov	s15, r3
 81011f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81011f8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8101210 <BMP180ReadTemperature+0x84>
 81011fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101200:	687b      	ldr	r3, [r7, #4]
 8101202:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8101206:	bf00      	nop
 8101208:	3720      	adds	r7, #32
 810120a:	46bd      	mov	sp, r7
 810120c:	bd80      	pop	{r7, pc}
 810120e:	bf00      	nop
 8101210:	3dcccccd 	.word	0x3dcccccd

08101214 <BaroReadSensorID>:
}



uint8_t BaroReadSensorID (uint16_t DeviceAddr, uint8_t reg)
{
 8101214:	b580      	push	{r7, lr}
 8101216:	b082      	sub	sp, #8
 8101218:	af00      	add	r7, sp, #0
 810121a:	4603      	mov	r3, r0
 810121c:	460a      	mov	r2, r1
 810121e:	80fb      	strh	r3, [r7, #6]
 8101220:	4613      	mov	r3, r2
 8101222:	717b      	strb	r3, [r7, #5]
	return I2CRead(DeviceAddr, reg);
 8101224:	797a      	ldrb	r2, [r7, #5]
 8101226:	88fb      	ldrh	r3, [r7, #6]
 8101228:	4611      	mov	r1, r2
 810122a:	4618      	mov	r0, r3
 810122c:	f000 f934 	bl	8101498 <I2CRead>
 8101230:	4603      	mov	r3, r0
}
 8101232:	4618      	mov	r0, r3
 8101234:	3708      	adds	r7, #8
 8101236:	46bd      	mov	sp, r7
 8101238:	bd80      	pop	{r7, pc}
	...

0810123c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 810123c:	b580      	push	{r7, lr}
 810123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	BMP180InitDevice(&bmpSensor);
 8101240:	4806      	ldr	r0, [pc, #24]	; (810125c <MX_FREERTOS_Init+0x20>)
 8101242:	f7ff fe85 	bl	8100f50 <BMP180InitDevice>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8101246:	4a06      	ldr	r2, [pc, #24]	; (8101260 <MX_FREERTOS_Init+0x24>)
 8101248:	2100      	movs	r1, #0
 810124a:	4806      	ldr	r0, [pc, #24]	; (8101264 <MX_FREERTOS_Init+0x28>)
 810124c:	f004 fe6e 	bl	8105f2c <osThreadNew>
 8101250:	4602      	mov	r2, r0
 8101252:	4b05      	ldr	r3, [pc, #20]	; (8101268 <MX_FREERTOS_Init+0x2c>)
 8101254:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8101256:	bf00      	nop
 8101258:	bd80      	pop	{r7, pc}
 810125a:	bf00      	nop
 810125c:	10004b14 	.word	0x10004b14
 8101260:	0810a3dc 	.word	0x0810a3dc
 8101264:	0810126d 	.word	0x0810126d
 8101268:	10004b10 	.word	0x10004b10

0810126c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810126c:	b580      	push	{r7, lr}
 810126e:	b082      	sub	sp, #8
 8101270:	af00      	add	r7, sp, #0
 8101272:	6078      	str	r0, [r7, #4]
	//  L3GD20ReadXYZAngRate(data);
	  //LSM303ReadMag(mag_data);
 	 //temp =  LSM303GetTemp();
	  //temp = L3GD20GetTemp();
      //temp*=100;
	  BMP180ReadTemperature(&bmpSensor);
 8101274:	4805      	ldr	r0, [pc, #20]	; (810128c <StartDefaultTask+0x20>)
 8101276:	f7ff ff89 	bl	810118c <BMP180ReadTemperature>
	  temp = bmpSensor.temperature;
 810127a:	4b04      	ldr	r3, [pc, #16]	; (810128c <StartDefaultTask+0x20>)
 810127c:	689b      	ldr	r3, [r3, #8]
 810127e:	4a04      	ldr	r2, [pc, #16]	; (8101290 <StartDefaultTask+0x24>)
 8101280:	6013      	str	r3, [r2, #0]
      //sprintf ((char*)buf, ":%u.%02u \r\n", (unsigned int) temp/100, (unsigned int)temp % 100);
//
      //HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  	//LED2_ON();

    osDelay(1000);
 8101282:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8101286:	f004 fef7 	bl	8106078 <osDelay>
	  BMP180ReadTemperature(&bmpSensor);
 810128a:	e7f3      	b.n	8101274 <StartDefaultTask+0x8>
 810128c:	10004b14 	.word	0x10004b14
 8101290:	10004b3c 	.word	0x10004b3c

08101294 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101294:	b580      	push	{r7, lr}
 8101296:	b08a      	sub	sp, #40	; 0x28
 8101298:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810129a:	f107 0314 	add.w	r3, r7, #20
 810129e:	2200      	movs	r2, #0
 81012a0:	601a      	str	r2, [r3, #0]
 81012a2:	605a      	str	r2, [r3, #4]
 81012a4:	609a      	str	r2, [r3, #8]
 81012a6:	60da      	str	r2, [r3, #12]
 81012a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81012aa:	4b33      	ldr	r3, [pc, #204]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b0:	4a31      	ldr	r2, [pc, #196]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012b2:	f043 0310 	orr.w	r3, r3, #16
 81012b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ba:	4b2f      	ldr	r3, [pc, #188]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c0:	f003 0310 	and.w	r3, r3, #16
 81012c4:	613b      	str	r3, [r7, #16]
 81012c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81012c8:	4b2b      	ldr	r3, [pc, #172]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ce:	4a2a      	ldr	r2, [pc, #168]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012d0:	f043 0308 	orr.w	r3, r3, #8
 81012d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012d8:	4b27      	ldr	r3, [pc, #156]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012de:	f003 0308 	and.w	r3, r3, #8
 81012e2:	60fb      	str	r3, [r7, #12]
 81012e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81012e6:	4b24      	ldr	r3, [pc, #144]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ec:	4a22      	ldr	r2, [pc, #136]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012ee:	f043 0301 	orr.w	r3, r3, #1
 81012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012f6:	4b20      	ldr	r3, [pc, #128]	; (8101378 <MX_GPIO_Init+0xe4>)
 81012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012fc:	f003 0301 	and.w	r3, r3, #1
 8101300:	60bb      	str	r3, [r7, #8]
 8101302:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101304:	4b1c      	ldr	r3, [pc, #112]	; (8101378 <MX_GPIO_Init+0xe4>)
 8101306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810130a:	4a1b      	ldr	r2, [pc, #108]	; (8101378 <MX_GPIO_Init+0xe4>)
 810130c:	f043 0302 	orr.w	r3, r3, #2
 8101310:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101314:	4b18      	ldr	r3, [pc, #96]	; (8101378 <MX_GPIO_Init+0xe4>)
 8101316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810131a:	f003 0302 	and.w	r3, r3, #2
 810131e:	607b      	str	r3, [r7, #4]
 8101320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8101322:	2200      	movs	r2, #0
 8101324:	2102      	movs	r1, #2
 8101326:	4815      	ldr	r0, [pc, #84]	; (810137c <MX_GPIO_Init+0xe8>)
 8101328:	f000 ffc8 	bl	81022bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 810132c:	2200      	movs	r2, #0
 810132e:	2101      	movs	r1, #1
 8101330:	4813      	ldr	r0, [pc, #76]	; (8101380 <MX_GPIO_Init+0xec>)
 8101332:	f000 ffc3 	bl	81022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8101336:	2302      	movs	r3, #2
 8101338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810133a:	2301      	movs	r3, #1
 810133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810133e:	2300      	movs	r3, #0
 8101340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101342:	2300      	movs	r3, #0
 8101344:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101346:	f107 0314 	add.w	r3, r7, #20
 810134a:	4619      	mov	r1, r3
 810134c:	480b      	ldr	r0, [pc, #44]	; (810137c <MX_GPIO_Init+0xe8>)
 810134e:	f000 fe05 	bl	8101f5c <HAL_GPIO_Init>

  // Configure GPIO Pin
  GPIO_InitStruct.Pin = LD1_Pin;
 8101352:	2301      	movs	r3, #1
 8101354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101356:	2301      	movs	r3, #1
 8101358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810135a:	2300      	movs	r3, #0
 810135c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810135e:	2300      	movs	r3, #0
 8101360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101362:	f107 0314 	add.w	r3, r7, #20
 8101366:	4619      	mov	r1, r3
 8101368:	4805      	ldr	r0, [pc, #20]	; (8101380 <MX_GPIO_Init+0xec>)
 810136a:	f000 fdf7 	bl	8101f5c <HAL_GPIO_Init>


}
 810136e:	bf00      	nop
 8101370:	3728      	adds	r7, #40	; 0x28
 8101372:	46bd      	mov	sp, r7
 8101374:	bd80      	pop	{r7, pc}
 8101376:	bf00      	nop
 8101378:	58024400 	.word	0x58024400
 810137c:	58021000 	.word	0x58021000
 8101380:	58020400 	.word	0x58020400

08101384 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101384:	b580      	push	{r7, lr}
 8101386:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101388:	4b1b      	ldr	r3, [pc, #108]	; (81013f8 <MX_I2C1_Init+0x74>)
 810138a:	4a1c      	ldr	r2, [pc, #112]	; (81013fc <MX_I2C1_Init+0x78>)
 810138c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 810138e:	4b1a      	ldr	r3, [pc, #104]	; (81013f8 <MX_I2C1_Init+0x74>)
 8101390:	4a1b      	ldr	r2, [pc, #108]	; (8101400 <MX_I2C1_Init+0x7c>)
 8101392:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101394:	4b18      	ldr	r3, [pc, #96]	; (81013f8 <MX_I2C1_Init+0x74>)
 8101396:	2200      	movs	r2, #0
 8101398:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810139a:	4b17      	ldr	r3, [pc, #92]	; (81013f8 <MX_I2C1_Init+0x74>)
 810139c:	2201      	movs	r2, #1
 810139e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81013a0:	4b15      	ldr	r3, [pc, #84]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013a2:	2200      	movs	r2, #0
 81013a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81013a6:	4b14      	ldr	r3, [pc, #80]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013a8:	2200      	movs	r2, #0
 81013aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81013ac:	4b12      	ldr	r3, [pc, #72]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013ae:	2200      	movs	r2, #0
 81013b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81013b2:	4b11      	ldr	r3, [pc, #68]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013b4:	2200      	movs	r2, #0
 81013b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81013b8:	4b0f      	ldr	r3, [pc, #60]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013ba:	2200      	movs	r2, #0
 81013bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81013be:	480e      	ldr	r0, [pc, #56]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013c0:	f000 ffcc 	bl	810235c <HAL_I2C_Init>
 81013c4:	4603      	mov	r3, r0
 81013c6:	2b00      	cmp	r3, #0
 81013c8:	d001      	beq.n	81013ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81013ca:	f000 f933 	bl	8101634 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81013ce:	2100      	movs	r1, #0
 81013d0:	4809      	ldr	r0, [pc, #36]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013d2:	f001 fc9d 	bl	8102d10 <HAL_I2CEx_ConfigAnalogFilter>
 81013d6:	4603      	mov	r3, r0
 81013d8:	2b00      	cmp	r3, #0
 81013da:	d001      	beq.n	81013e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81013dc:	f000 f92a 	bl	8101634 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81013e0:	2100      	movs	r1, #0
 81013e2:	4805      	ldr	r0, [pc, #20]	; (81013f8 <MX_I2C1_Init+0x74>)
 81013e4:	f001 fcdf 	bl	8102da6 <HAL_I2CEx_ConfigDigitalFilter>
 81013e8:	4603      	mov	r3, r0
 81013ea:	2b00      	cmp	r3, #0
 81013ec:	d001      	beq.n	81013f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81013ee:	f000 f921 	bl	8101634 <Error_Handler>
  }

}
 81013f2:	bf00      	nop
 81013f4:	bd80      	pop	{r7, pc}
 81013f6:	bf00      	nop
 81013f8:	10004b74 	.word	0x10004b74
 81013fc:	40005400 	.word	0x40005400
 8101400:	307075b1 	.word	0x307075b1

08101404 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101404:	b580      	push	{r7, lr}
 8101406:	b08a      	sub	sp, #40	; 0x28
 8101408:	af00      	add	r7, sp, #0
 810140a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810140c:	f107 0314 	add.w	r3, r7, #20
 8101410:	2200      	movs	r2, #0
 8101412:	601a      	str	r2, [r3, #0]
 8101414:	605a      	str	r2, [r3, #4]
 8101416:	609a      	str	r2, [r3, #8]
 8101418:	60da      	str	r2, [r3, #12]
 810141a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 810141c:	687b      	ldr	r3, [r7, #4]
 810141e:	681b      	ldr	r3, [r3, #0]
 8101420:	4a1a      	ldr	r2, [pc, #104]	; (810148c <HAL_I2C_MspInit+0x88>)
 8101422:	4293      	cmp	r3, r2
 8101424:	d12e      	bne.n	8101484 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101426:	4b1a      	ldr	r3, [pc, #104]	; (8101490 <HAL_I2C_MspInit+0x8c>)
 8101428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810142c:	4a18      	ldr	r2, [pc, #96]	; (8101490 <HAL_I2C_MspInit+0x8c>)
 810142e:	f043 0302 	orr.w	r3, r3, #2
 8101432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101436:	4b16      	ldr	r3, [pc, #88]	; (8101490 <HAL_I2C_MspInit+0x8c>)
 8101438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810143c:	f003 0302 	and.w	r3, r3, #2
 8101440:	613b      	str	r3, [r7, #16]
 8101442:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810144a:	2312      	movs	r3, #18
 810144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810144e:	2300      	movs	r3, #0
 8101450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101452:	2300      	movs	r3, #0
 8101454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101456:	2304      	movs	r3, #4
 8101458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810145a:	f107 0314 	add.w	r3, r7, #20
 810145e:	4619      	mov	r1, r3
 8101460:	480c      	ldr	r0, [pc, #48]	; (8101494 <HAL_I2C_MspInit+0x90>)
 8101462:	f000 fd7b 	bl	8101f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101466:	4b0a      	ldr	r3, [pc, #40]	; (8101490 <HAL_I2C_MspInit+0x8c>)
 8101468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810146c:	4a08      	ldr	r2, [pc, #32]	; (8101490 <HAL_I2C_MspInit+0x8c>)
 810146e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101472:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101476:	4b06      	ldr	r3, [pc, #24]	; (8101490 <HAL_I2C_MspInit+0x8c>)
 8101478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101480:	60fb      	str	r3, [r7, #12]
 8101482:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101484:	bf00      	nop
 8101486:	3728      	adds	r7, #40	; 0x28
 8101488:	46bd      	mov	sp, r7
 810148a:	bd80      	pop	{r7, pc}
 810148c:	40005400 	.word	0x40005400
 8101490:	58024400 	.word	0x58024400
 8101494:	58020400 	.word	0x58020400

08101498 <I2CRead>:
  }
}

/* USER CODE BEGIN 1 */
uint8_t I2CRead(uint16_t Address, uint8_t reg)
{
 8101498:	b580      	push	{r7, lr}
 810149a:	b088      	sub	sp, #32
 810149c:	af04      	add	r7, sp, #16
 810149e:	4603      	mov	r3, r0
 81014a0:	460a      	mov	r2, r1
 81014a2:	80fb      	strh	r3, [r7, #6]
 81014a4:	4613      	mov	r3, r2
 81014a6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;
	uint8_t value = 0x00;
 81014a8:	2300      	movs	r3, #0
 81014aa:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1, Address, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 81014ac:	797b      	ldrb	r3, [r7, #5]
 81014ae:	b29a      	uxth	r2, r3
 81014b0:	88f9      	ldrh	r1, [r7, #6]
 81014b2:	2332      	movs	r3, #50	; 0x32
 81014b4:	9302      	str	r3, [sp, #8]
 81014b6:	2301      	movs	r3, #1
 81014b8:	9301      	str	r3, [sp, #4]
 81014ba:	f107 030e 	add.w	r3, r7, #14
 81014be:	9300      	str	r3, [sp, #0]
 81014c0:	2301      	movs	r3, #1
 81014c2:	4807      	ldr	r0, [pc, #28]	; (81014e0 <I2CRead+0x48>)
 81014c4:	f001 f8ee 	bl	81026a4 <HAL_I2C_Mem_Read>
 81014c8:	4603      	mov	r3, r0
 81014ca:	73fb      	strb	r3, [r7, #15]

	if(status !=HAL_OK)
 81014cc:	7bfb      	ldrb	r3, [r7, #15]
 81014ce:	2b00      	cmp	r3, #0
 81014d0:	d001      	beq.n	81014d6 <I2CRead+0x3e>
	{
		ErrorHandler();
 81014d2:	f000 f833 	bl	810153c <ErrorHandler>
//	else
//	{
//		LED1_ON();
//	}

	return value;
 81014d6:	7bbb      	ldrb	r3, [r7, #14]
}
 81014d8:	4618      	mov	r0, r3
 81014da:	3710      	adds	r7, #16
 81014dc:	46bd      	mov	sp, r7
 81014de:	bd80      	pop	{r7, pc}
 81014e0:	10004b74 	.word	0x10004b74

081014e4 <I2CWrite>:

void I2CWrite(uint16_t Address, uint8_t reg, uint8_t value)
{
 81014e4:	b580      	push	{r7, lr}
 81014e6:	b088      	sub	sp, #32
 81014e8:	af04      	add	r7, sp, #16
 81014ea:	4603      	mov	r3, r0
 81014ec:	80fb      	strh	r3, [r7, #6]
 81014ee:	460b      	mov	r3, r1
 81014f0:	717b      	strb	r3, [r7, #5]
 81014f2:	4613      	mov	r3, r2
 81014f4:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, Address, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 81014f6:	797b      	ldrb	r3, [r7, #5]
 81014f8:	b29a      	uxth	r2, r3
 81014fa:	88f9      	ldrh	r1, [r7, #6]
 81014fc:	2332      	movs	r3, #50	; 0x32
 81014fe:	9302      	str	r3, [sp, #8]
 8101500:	2301      	movs	r3, #1
 8101502:	9301      	str	r3, [sp, #4]
 8101504:	1d3b      	adds	r3, r7, #4
 8101506:	9300      	str	r3, [sp, #0]
 8101508:	2301      	movs	r3, #1
 810150a:	480a      	ldr	r0, [pc, #40]	; (8101534 <I2CWrite+0x50>)
 810150c:	f000 ffb6 	bl	810247c <HAL_I2C_Mem_Write>
 8101510:	4603      	mov	r3, r0
 8101512:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8101514:	7bfb      	ldrb	r3, [r7, #15]
 8101516:	2b00      	cmp	r3, #0
 8101518:	d002      	beq.n	8101520 <I2CWrite+0x3c>
	{
		ErrorHandler();
 810151a:	f000 f80f 	bl	810153c <ErrorHandler>
	else
	{
		LED1_ON();
	}

}
 810151e:	e004      	b.n	810152a <I2CWrite+0x46>
		LED1_ON();
 8101520:	2201      	movs	r2, #1
 8101522:	2101      	movs	r1, #1
 8101524:	4804      	ldr	r0, [pc, #16]	; (8101538 <I2CWrite+0x54>)
 8101526:	f000 fec9 	bl	81022bc <HAL_GPIO_WritePin>
}
 810152a:	bf00      	nop
 810152c:	3710      	adds	r7, #16
 810152e:	46bd      	mov	sp, r7
 8101530:	bd80      	pop	{r7, pc}
 8101532:	bf00      	nop
 8101534:	10004b74 	.word	0x10004b74
 8101538:	58020400 	.word	0x58020400

0810153c <ErrorHandler>:

void ErrorHandler(void)
{
 810153c:	b580      	push	{r7, lr}
 810153e:	af00      	add	r7, sp, #0
	LED3_ON();
 8101540:	2201      	movs	r2, #1
 8101542:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101546:	4802      	ldr	r0, [pc, #8]	; (8101550 <ErrorHandler+0x14>)
 8101548:	f000 feb8 	bl	81022bc <HAL_GPIO_WritePin>
}
 810154c:	bf00      	nop
 810154e:	bd80      	pop	{r7, pc}
 8101550:	58020400 	.word	0x58020400

08101554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101554:	b580      	push	{r7, lr}
 8101556:	b082      	sub	sp, #8
 8101558:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810155a:	4b29      	ldr	r3, [pc, #164]	; (8101600 <main+0xac>)
 810155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101560:	4a27      	ldr	r2, [pc, #156]	; (8101600 <main+0xac>)
 8101562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810156a:	4b25      	ldr	r3, [pc, #148]	; (8101600 <main+0xac>)
 810156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101574:	607b      	str	r3, [r7, #4]
 8101576:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101578:	2001      	movs	r0, #1
 810157a:	f000 feb9 	bl	81022f0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810157e:	f001 fcd5 	bl	8102f2c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101582:	2201      	movs	r2, #1
 8101584:	2102      	movs	r1, #2
 8101586:	2000      	movs	r0, #0
 8101588:	f001 fc5a 	bl	8102e40 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810158c:	4b1d      	ldr	r3, [pc, #116]	; (8101604 <main+0xb0>)
 810158e:	681b      	ldr	r3, [r3, #0]
 8101590:	091b      	lsrs	r3, r3, #4
 8101592:	f003 030f 	and.w	r3, r3, #15
 8101596:	2b07      	cmp	r3, #7
 8101598:	d108      	bne.n	81015ac <main+0x58>
 810159a:	4b1b      	ldr	r3, [pc, #108]	; (8101608 <main+0xb4>)
 810159c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81015a0:	4a19      	ldr	r2, [pc, #100]	; (8101608 <main+0xb4>)
 81015a2:	f043 0301 	orr.w	r3, r3, #1
 81015a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81015aa:	e007      	b.n	81015bc <main+0x68>
 81015ac:	4b16      	ldr	r3, [pc, #88]	; (8101608 <main+0xb4>)
 81015ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81015b2:	4a15      	ldr	r2, [pc, #84]	; (8101608 <main+0xb4>)
 81015b4:	f043 0301 	orr.w	r3, r3, #1
 81015b8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81015bc:	f000 fb3a 	bl	8101c34 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81015c0:	f7ff fe68 	bl	8101294 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81015c4:	f000 fa76 	bl	8101ab4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 81015c8:	f000 f924 	bl	8101814 <MX_TIM1_Init>
  MX_I2C1_Init();
 81015cc:	f7ff feda 	bl	8101384 <MX_I2C1_Init>

  //L3GD20Init();
  //LSM303AccInit();
  //LSM303MagInit();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81015d0:	2100      	movs	r1, #0
 81015d2:	480e      	ldr	r0, [pc, #56]	; (810160c <main+0xb8>)
 81015d4:	f002 fa68 	bl	8103aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 81015d8:	2104      	movs	r1, #4
 81015da:	480c      	ldr	r0, [pc, #48]	; (810160c <main+0xb8>)
 81015dc:	f002 fa64 	bl	8103aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 81015e0:	2108      	movs	r1, #8
 81015e2:	480a      	ldr	r0, [pc, #40]	; (810160c <main+0xb8>)
 81015e4:	f002 fa60 	bl	8103aa8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 81015e8:	210c      	movs	r1, #12
 81015ea:	4808      	ldr	r0, [pc, #32]	; (810160c <main+0xb8>)
 81015ec:	f002 fa5c 	bl	8103aa8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81015f0:	f004 fc32 	bl	8105e58 <osKernelInitialize>
  MX_FREERTOS_Init();
 81015f4:	f7ff fe22 	bl	810123c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81015f8:	f004 fc62 	bl	8105ec0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81015fc:	e7fe      	b.n	81015fc <main+0xa8>
 81015fe:	bf00      	nop
 8101600:	58024400 	.word	0x58024400
 8101604:	e000ed00 	.word	0xe000ed00
 8101608:	58026400 	.word	0x58026400
 810160c:	10004c0c 	.word	0x10004c0c

08101610 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101610:	b580      	push	{r7, lr}
 8101612:	b082      	sub	sp, #8
 8101614:	af00      	add	r7, sp, #0
 8101616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	4a04      	ldr	r2, [pc, #16]	; (8101630 <HAL_TIM_PeriodElapsedCallback+0x20>)
 810161e:	4293      	cmp	r3, r2
 8101620:	d101      	bne.n	8101626 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101622:	f000 fb65 	bl	8101cf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101626:	bf00      	nop
 8101628:	3708      	adds	r7, #8
 810162a:	46bd      	mov	sp, r7
 810162c:	bd80      	pop	{r7, pc}
 810162e:	bf00      	nop
 8101630:	40001400 	.word	0x40001400

08101634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101634:	b480      	push	{r7}
 8101636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101638:	bf00      	nop
 810163a:	46bd      	mov	sp, r7
 810163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101640:	4770      	bx	lr
	...

08101644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101644:	b580      	push	{r7, lr}
 8101646:	b082      	sub	sp, #8
 8101648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810164a:	4b14      	ldr	r3, [pc, #80]	; (810169c <HAL_MspInit+0x58>)
 810164c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101650:	4a12      	ldr	r2, [pc, #72]	; (810169c <HAL_MspInit+0x58>)
 8101652:	f043 0302 	orr.w	r3, r3, #2
 8101656:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810165a:	4b10      	ldr	r3, [pc, #64]	; (810169c <HAL_MspInit+0x58>)
 810165c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101660:	f003 0302 	and.w	r3, r3, #2
 8101664:	607b      	str	r3, [r7, #4]
 8101666:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101668:	2200      	movs	r2, #0
 810166a:	210f      	movs	r1, #15
 810166c:	f06f 0001 	mvn.w	r0, #1
 8101670:	f000 fc38 	bl	8101ee4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 8101674:	2200      	movs	r2, #0
 8101676:	2100      	movs	r1, #0
 8101678:	2040      	movs	r0, #64	; 0x40
 810167a:	f000 fc33 	bl	8101ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810167e:	2040      	movs	r0, #64	; 0x40
 8101680:	f000 fc4a 	bl	8101f18 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101684:	2200      	movs	r2, #0
 8101686:	2105      	movs	r1, #5
 8101688:	207e      	movs	r0, #126	; 0x7e
 810168a:	f000 fc2b 	bl	8101ee4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810168e:	207e      	movs	r0, #126	; 0x7e
 8101690:	f000 fc42 	bl	8101f18 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101694:	bf00      	nop
 8101696:	3708      	adds	r7, #8
 8101698:	46bd      	mov	sp, r7
 810169a:	bd80      	pop	{r7, pc}
 810169c:	58024400 	.word	0x58024400

081016a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	b08e      	sub	sp, #56	; 0x38
 81016a4:	af00      	add	r7, sp, #0
 81016a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 81016a8:	2300      	movs	r3, #0
 81016aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 81016ac:	2300      	movs	r3, #0
 81016ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 81016b0:	2200      	movs	r2, #0
 81016b2:	6879      	ldr	r1, [r7, #4]
 81016b4:	2037      	movs	r0, #55	; 0x37
 81016b6:	f000 fc15 	bl	8101ee4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 81016ba:	2037      	movs	r0, #55	; 0x37
 81016bc:	f000 fc2c 	bl	8101f18 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 81016c0:	4b21      	ldr	r3, [pc, #132]	; (8101748 <HAL_InitTick+0xa8>)
 81016c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016c6:	4a20      	ldr	r2, [pc, #128]	; (8101748 <HAL_InitTick+0xa8>)
 81016c8:	f043 0320 	orr.w	r3, r3, #32
 81016cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81016d0:	4b1d      	ldr	r3, [pc, #116]	; (8101748 <HAL_InitTick+0xa8>)
 81016d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016d6:	f003 0320 	and.w	r3, r3, #32
 81016da:	60bb      	str	r3, [r7, #8]
 81016dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81016de:	f107 020c 	add.w	r2, r7, #12
 81016e2:	f107 0310 	add.w	r3, r7, #16
 81016e6:	4611      	mov	r1, r2
 81016e8:	4618      	mov	r0, r3
 81016ea:	f001 fdfd 	bl	81032e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 81016ee:	f001 fdcf 	bl	8103290 <HAL_RCC_GetPCLK1Freq>
 81016f2:	4603      	mov	r3, r0
 81016f4:	005b      	lsls	r3, r3, #1
 81016f6:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 81016f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81016fa:	4a14      	ldr	r2, [pc, #80]	; (810174c <HAL_InitTick+0xac>)
 81016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8101700:	0c9b      	lsrs	r3, r3, #18
 8101702:	3b01      	subs	r3, #1
 8101704:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8101706:	4b12      	ldr	r3, [pc, #72]	; (8101750 <HAL_InitTick+0xb0>)
 8101708:	4a12      	ldr	r2, [pc, #72]	; (8101754 <HAL_InitTick+0xb4>)
 810170a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 810170c:	4b10      	ldr	r3, [pc, #64]	; (8101750 <HAL_InitTick+0xb0>)
 810170e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101712:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8101714:	4a0e      	ldr	r2, [pc, #56]	; (8101750 <HAL_InitTick+0xb0>)
 8101716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101718:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 810171a:	4b0d      	ldr	r3, [pc, #52]	; (8101750 <HAL_InitTick+0xb0>)
 810171c:	2200      	movs	r2, #0
 810171e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101720:	4b0b      	ldr	r3, [pc, #44]	; (8101750 <HAL_InitTick+0xb0>)
 8101722:	2200      	movs	r2, #0
 8101724:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8101726:	480a      	ldr	r0, [pc, #40]	; (8101750 <HAL_InitTick+0xb0>)
 8101728:	f002 f8ce 	bl	81038c8 <HAL_TIM_Base_Init>
 810172c:	4603      	mov	r3, r0
 810172e:	2b00      	cmp	r3, #0
 8101730:	d104      	bne.n	810173c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8101732:	4807      	ldr	r0, [pc, #28]	; (8101750 <HAL_InitTick+0xb0>)
 8101734:	f002 f920 	bl	8103978 <HAL_TIM_Base_Start_IT>
 8101738:	4603      	mov	r3, r0
 810173a:	e000      	b.n	810173e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 810173c:	2301      	movs	r3, #1
}
 810173e:	4618      	mov	r0, r3
 8101740:	3738      	adds	r7, #56	; 0x38
 8101742:	46bd      	mov	sp, r7
 8101744:	bd80      	pop	{r7, pc}
 8101746:	bf00      	nop
 8101748:	58024400 	.word	0x58024400
 810174c:	431bde83 	.word	0x431bde83
 8101750:	10004bc0 	.word	0x10004bc0
 8101754:	40001400 	.word	0x40001400

08101758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101758:	b480      	push	{r7}
 810175a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 810175c:	bf00      	nop
 810175e:	46bd      	mov	sp, r7
 8101760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101764:	4770      	bx	lr

08101766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101766:	b480      	push	{r7}
 8101768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810176a:	e7fe      	b.n	810176a <HardFault_Handler+0x4>

0810176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810176c:	b480      	push	{r7}
 810176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101770:	e7fe      	b.n	8101770 <MemManage_Handler+0x4>

08101772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101772:	b480      	push	{r7}
 8101774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101776:	e7fe      	b.n	8101776 <BusFault_Handler+0x4>

08101778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101778:	b480      	push	{r7}
 810177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810177c:	e7fe      	b.n	810177c <UsageFault_Handler+0x4>

0810177e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810177e:	b480      	push	{r7}
 8101780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101782:	bf00      	nop
 8101784:	46bd      	mov	sp, r7
 8101786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178a:	4770      	bx	lr

0810178c <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 810178c:	b480      	push	{r7}
 810178e:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8101790:	bf00      	nop
 8101792:	46bd      	mov	sp, r7
 8101794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101798:	4770      	bx	lr

0810179a <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 810179a:	b580      	push	{r7, lr}
 810179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810179e:	f000 fdb9 	bl	8102314 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81017a2:	bf00      	nop
 81017a4:	bd80      	pop	{r7, pc}
	...

081017a8 <TIM7_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 81017a8:	b580      	push	{r7, lr}
 81017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81017ac:	4802      	ldr	r0, [pc, #8]	; (81017b8 <TIM7_IRQHandler+0x10>)
 81017ae:	f002 fa4d 	bl	8103c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81017b2:	bf00      	nop
 81017b4:	bd80      	pop	{r7, pc}
 81017b6:	bf00      	nop
 81017b8:	10004bc0 	.word	0x10004bc0

081017bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 81017bc:	b580      	push	{r7, lr}
 81017be:	b084      	sub	sp, #16
 81017c0:	af00      	add	r7, sp, #0
 81017c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 81017c4:	4b11      	ldr	r3, [pc, #68]	; (810180c <_sbrk+0x50>)
 81017c6:	681b      	ldr	r3, [r3, #0]
 81017c8:	2b00      	cmp	r3, #0
 81017ca:	d102      	bne.n	81017d2 <_sbrk+0x16>
		heap_end = &end;
 81017cc:	4b0f      	ldr	r3, [pc, #60]	; (810180c <_sbrk+0x50>)
 81017ce:	4a10      	ldr	r2, [pc, #64]	; (8101810 <_sbrk+0x54>)
 81017d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 81017d2:	4b0e      	ldr	r3, [pc, #56]	; (810180c <_sbrk+0x50>)
 81017d4:	681b      	ldr	r3, [r3, #0]
 81017d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 81017d8:	4b0c      	ldr	r3, [pc, #48]	; (810180c <_sbrk+0x50>)
 81017da:	681a      	ldr	r2, [r3, #0]
 81017dc:	687b      	ldr	r3, [r7, #4]
 81017de:	4413      	add	r3, r2
 81017e0:	466a      	mov	r2, sp
 81017e2:	4293      	cmp	r3, r2
 81017e4:	d907      	bls.n	81017f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 81017e6:	f007 f873 	bl	81088d0 <__errno>
 81017ea:	4602      	mov	r2, r0
 81017ec:	230c      	movs	r3, #12
 81017ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 81017f0:	f04f 33ff 	mov.w	r3, #4294967295
 81017f4:	e006      	b.n	8101804 <_sbrk+0x48>
	}

	heap_end += incr;
 81017f6:	4b05      	ldr	r3, [pc, #20]	; (810180c <_sbrk+0x50>)
 81017f8:	681a      	ldr	r2, [r3, #0]
 81017fa:	687b      	ldr	r3, [r7, #4]
 81017fc:	4413      	add	r3, r2
 81017fe:	4a03      	ldr	r2, [pc, #12]	; (810180c <_sbrk+0x50>)
 8101800:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8101802:	68fb      	ldr	r3, [r7, #12]
}
 8101804:	4618      	mov	r0, r3
 8101806:	3710      	adds	r7, #16
 8101808:	46bd      	mov	sp, r7
 810180a:	bd80      	pop	{r7, pc}
 810180c:	100001fc 	.word	0x100001fc
 8101810:	10004d30 	.word	0x10004d30

08101814 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8101814:	b580      	push	{r7, lr}
 8101816:	b09a      	sub	sp, #104	; 0x68
 8101818:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810181a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810181e:	2200      	movs	r2, #0
 8101820:	601a      	str	r2, [r3, #0]
 8101822:	605a      	str	r2, [r3, #4]
 8101824:	609a      	str	r2, [r3, #8]
 8101826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101828:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810182c:	2200      	movs	r2, #0
 810182e:	601a      	str	r2, [r3, #0]
 8101830:	605a      	str	r2, [r3, #4]
 8101832:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101838:	2200      	movs	r2, #0
 810183a:	601a      	str	r2, [r3, #0]
 810183c:	605a      	str	r2, [r3, #4]
 810183e:	609a      	str	r2, [r3, #8]
 8101840:	60da      	str	r2, [r3, #12]
 8101842:	611a      	str	r2, [r3, #16]
 8101844:	615a      	str	r2, [r3, #20]
 8101846:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101848:	1d3b      	adds	r3, r7, #4
 810184a:	222c      	movs	r2, #44	; 0x2c
 810184c:	2100      	movs	r1, #0
 810184e:	4618      	mov	r0, r3
 8101850:	f007 f873 	bl	810893a <memset>

  htim1.Instance = TIM1;
 8101854:	4b55      	ldr	r3, [pc, #340]	; (81019ac <MX_TIM1_Init+0x198>)
 8101856:	4a56      	ldr	r2, [pc, #344]	; (81019b0 <MX_TIM1_Init+0x19c>)
 8101858:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 810185a:	4b54      	ldr	r3, [pc, #336]	; (81019ac <MX_TIM1_Init+0x198>)
 810185c:	2236      	movs	r2, #54	; 0x36
 810185e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101860:	4b52      	ldr	r3, [pc, #328]	; (81019ac <MX_TIM1_Init+0x198>)
 8101862:	2200      	movs	r2, #0
 8101864:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 8101866:	4b51      	ldr	r3, [pc, #324]	; (81019ac <MX_TIM1_Init+0x198>)
 8101868:	f642 22f8 	movw	r2, #11000	; 0x2af8
 810186c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810186e:	4b4f      	ldr	r3, [pc, #316]	; (81019ac <MX_TIM1_Init+0x198>)
 8101870:	2200      	movs	r2, #0
 8101872:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101874:	4b4d      	ldr	r3, [pc, #308]	; (81019ac <MX_TIM1_Init+0x198>)
 8101876:	2200      	movs	r2, #0
 8101878:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810187a:	4b4c      	ldr	r3, [pc, #304]	; (81019ac <MX_TIM1_Init+0x198>)
 810187c:	2200      	movs	r2, #0
 810187e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101880:	484a      	ldr	r0, [pc, #296]	; (81019ac <MX_TIM1_Init+0x198>)
 8101882:	f002 f821 	bl	81038c8 <HAL_TIM_Base_Init>
 8101886:	4603      	mov	r3, r0
 8101888:	2b00      	cmp	r3, #0
 810188a:	d001      	beq.n	8101890 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 810188c:	f7ff fed2 	bl	8101634 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101894:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101896:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810189a:	4619      	mov	r1, r3
 810189c:	4843      	ldr	r0, [pc, #268]	; (81019ac <MX_TIM1_Init+0x198>)
 810189e:	f002 fc05 	bl	81040ac <HAL_TIM_ConfigClockSource>
 81018a2:	4603      	mov	r3, r0
 81018a4:	2b00      	cmp	r3, #0
 81018a6:	d001      	beq.n	81018ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 81018a8:	f7ff fec4 	bl	8101634 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81018ac:	483f      	ldr	r0, [pc, #252]	; (81019ac <MX_TIM1_Init+0x198>)
 81018ae:	f002 f899 	bl	81039e4 <HAL_TIM_PWM_Init>
 81018b2:	4603      	mov	r3, r0
 81018b4:	2b00      	cmp	r3, #0
 81018b6:	d001      	beq.n	81018bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 81018b8:	f7ff febc 	bl	8101634 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81018bc:	2300      	movs	r3, #0
 81018be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81018c0:	2300      	movs	r3, #0
 81018c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81018c4:	2300      	movs	r3, #0
 81018c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81018c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81018cc:	4619      	mov	r1, r3
 81018ce:	4837      	ldr	r0, [pc, #220]	; (81019ac <MX_TIM1_Init+0x198>)
 81018d0:	f003 f90e 	bl	8104af0 <HAL_TIMEx_MasterConfigSynchronization>
 81018d4:	4603      	mov	r3, r0
 81018d6:	2b00      	cmp	r3, #0
 81018d8:	d001      	beq.n	81018de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 81018da:	f7ff feab 	bl	8101634 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81018de:	2360      	movs	r3, #96	; 0x60
 81018e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 81018e2:	2332      	movs	r3, #50	; 0x32
 81018e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81018e6:	2300      	movs	r3, #0
 81018e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81018ea:	2300      	movs	r3, #0
 81018ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81018ee:	2300      	movs	r3, #0
 81018f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81018f2:	2300      	movs	r3, #0
 81018f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81018f6:	2300      	movs	r3, #0
 81018f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81018fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81018fe:	2200      	movs	r2, #0
 8101900:	4619      	mov	r1, r3
 8101902:	482a      	ldr	r0, [pc, #168]	; (81019ac <MX_TIM1_Init+0x198>)
 8101904:	f002 fac2 	bl	8103e8c <HAL_TIM_PWM_ConfigChannel>
 8101908:	4603      	mov	r3, r0
 810190a:	2b00      	cmp	r3, #0
 810190c:	d001      	beq.n	8101912 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 810190e:	f7ff fe91 	bl	8101634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101912:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101916:	2204      	movs	r2, #4
 8101918:	4619      	mov	r1, r3
 810191a:	4824      	ldr	r0, [pc, #144]	; (81019ac <MX_TIM1_Init+0x198>)
 810191c:	f002 fab6 	bl	8103e8c <HAL_TIM_PWM_ConfigChannel>
 8101920:	4603      	mov	r3, r0
 8101922:	2b00      	cmp	r3, #0
 8101924:	d001      	beq.n	810192a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101926:	f7ff fe85 	bl	8101634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810192a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810192e:	2208      	movs	r2, #8
 8101930:	4619      	mov	r1, r3
 8101932:	481e      	ldr	r0, [pc, #120]	; (81019ac <MX_TIM1_Init+0x198>)
 8101934:	f002 faaa 	bl	8103e8c <HAL_TIM_PWM_ConfigChannel>
 8101938:	4603      	mov	r3, r0
 810193a:	2b00      	cmp	r3, #0
 810193c:	d001      	beq.n	8101942 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 810193e:	f7ff fe79 	bl	8101634 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101942:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101946:	220c      	movs	r2, #12
 8101948:	4619      	mov	r1, r3
 810194a:	4818      	ldr	r0, [pc, #96]	; (81019ac <MX_TIM1_Init+0x198>)
 810194c:	f002 fa9e 	bl	8103e8c <HAL_TIM_PWM_ConfigChannel>
 8101950:	4603      	mov	r3, r0
 8101952:	2b00      	cmp	r3, #0
 8101954:	d001      	beq.n	810195a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8101956:	f7ff fe6d 	bl	8101634 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810195a:	2300      	movs	r3, #0
 810195c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 810195e:	2300      	movs	r3, #0
 8101960:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101962:	2300      	movs	r3, #0
 8101964:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101966:	2300      	movs	r3, #0
 8101968:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810196a:	2300      	movs	r3, #0
 810196c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 810196e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101972:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101974:	2300      	movs	r3, #0
 8101976:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101978:	2300      	movs	r3, #0
 810197a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 810197c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101980:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101982:	2300      	movs	r3, #0
 8101984:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101986:	2300      	movs	r3, #0
 8101988:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 810198a:	1d3b      	adds	r3, r7, #4
 810198c:	4619      	mov	r1, r3
 810198e:	4807      	ldr	r0, [pc, #28]	; (81019ac <MX_TIM1_Init+0x198>)
 8101990:	f003 f936 	bl	8104c00 <HAL_TIMEx_ConfigBreakDeadTime>
 8101994:	4603      	mov	r3, r0
 8101996:	2b00      	cmp	r3, #0
 8101998:	d001      	beq.n	810199e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 810199a:	f7ff fe4b 	bl	8101634 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 810199e:	4803      	ldr	r0, [pc, #12]	; (81019ac <MX_TIM1_Init+0x198>)
 81019a0:	f000 f82a 	bl	81019f8 <HAL_TIM_MspPostInit>

}
 81019a4:	bf00      	nop
 81019a6:	3768      	adds	r7, #104	; 0x68
 81019a8:	46bd      	mov	sp, r7
 81019aa:	bd80      	pop	{r7, pc}
 81019ac:	10004c0c 	.word	0x10004c0c
 81019b0:	40010000 	.word	0x40010000

081019b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 81019b4:	b480      	push	{r7}
 81019b6:	b085      	sub	sp, #20
 81019b8:	af00      	add	r7, sp, #0
 81019ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	681b      	ldr	r3, [r3, #0]
 81019c0:	4a0b      	ldr	r2, [pc, #44]	; (81019f0 <HAL_TIM_Base_MspInit+0x3c>)
 81019c2:	4293      	cmp	r3, r2
 81019c4:	d10e      	bne.n	81019e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81019c6:	4b0b      	ldr	r3, [pc, #44]	; (81019f4 <HAL_TIM_Base_MspInit+0x40>)
 81019c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019cc:	4a09      	ldr	r2, [pc, #36]	; (81019f4 <HAL_TIM_Base_MspInit+0x40>)
 81019ce:	f043 0301 	orr.w	r3, r3, #1
 81019d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81019d6:	4b07      	ldr	r3, [pc, #28]	; (81019f4 <HAL_TIM_Base_MspInit+0x40>)
 81019d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019dc:	f003 0301 	and.w	r3, r3, #1
 81019e0:	60fb      	str	r3, [r7, #12]
 81019e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 81019e4:	bf00      	nop
 81019e6:	3714      	adds	r7, #20
 81019e8:	46bd      	mov	sp, r7
 81019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019ee:	4770      	bx	lr
 81019f0:	40010000 	.word	0x40010000
 81019f4:	58024400 	.word	0x58024400

081019f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 81019f8:	b580      	push	{r7, lr}
 81019fa:	b08a      	sub	sp, #40	; 0x28
 81019fc:	af00      	add	r7, sp, #0
 81019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a00:	f107 0314 	add.w	r3, r7, #20
 8101a04:	2200      	movs	r2, #0
 8101a06:	601a      	str	r2, [r3, #0]
 8101a08:	605a      	str	r2, [r3, #4]
 8101a0a:	609a      	str	r2, [r3, #8]
 8101a0c:	60da      	str	r2, [r3, #12]
 8101a0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8101a10:	687b      	ldr	r3, [r7, #4]
 8101a12:	681b      	ldr	r3, [r3, #0]
 8101a14:	4a23      	ldr	r2, [pc, #140]	; (8101aa4 <HAL_TIM_MspPostInit+0xac>)
 8101a16:	4293      	cmp	r3, r2
 8101a18:	d13f      	bne.n	8101a9a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101a1a:	4b23      	ldr	r3, [pc, #140]	; (8101aa8 <HAL_TIM_MspPostInit+0xb0>)
 8101a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a20:	4a21      	ldr	r2, [pc, #132]	; (8101aa8 <HAL_TIM_MspPostInit+0xb0>)
 8101a22:	f043 0310 	orr.w	r3, r3, #16
 8101a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a2a:	4b1f      	ldr	r3, [pc, #124]	; (8101aa8 <HAL_TIM_MspPostInit+0xb0>)
 8101a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a30:	f003 0310 	and.w	r3, r3, #16
 8101a34:	613b      	str	r3, [r7, #16]
 8101a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a38:	4b1b      	ldr	r3, [pc, #108]	; (8101aa8 <HAL_TIM_MspPostInit+0xb0>)
 8101a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a3e:	4a1a      	ldr	r2, [pc, #104]	; (8101aa8 <HAL_TIM_MspPostInit+0xb0>)
 8101a40:	f043 0301 	orr.w	r3, r3, #1
 8101a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a48:	4b17      	ldr	r3, [pc, #92]	; (8101aa8 <HAL_TIM_MspPostInit+0xb0>)
 8101a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a4e:	f003 0301 	and.w	r3, r3, #1
 8101a52:	60fb      	str	r3, [r7, #12]
 8101a54:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8101a56:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8101a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a5c:	2302      	movs	r3, #2
 8101a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a60:	2300      	movs	r3, #0
 8101a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a64:	2300      	movs	r3, #0
 8101a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101a68:	2301      	movs	r3, #1
 8101a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101a6c:	f107 0314 	add.w	r3, r7, #20
 8101a70:	4619      	mov	r1, r3
 8101a72:	480e      	ldr	r0, [pc, #56]	; (8101aac <HAL_TIM_MspPostInit+0xb4>)
 8101a74:	f000 fa72 	bl	8101f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8101a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a7e:	2302      	movs	r3, #2
 8101a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a82:	2300      	movs	r3, #0
 8101a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a86:	2300      	movs	r3, #0
 8101a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101a8a:	2301      	movs	r3, #1
 8101a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101a8e:	f107 0314 	add.w	r3, r7, #20
 8101a92:	4619      	mov	r1, r3
 8101a94:	4806      	ldr	r0, [pc, #24]	; (8101ab0 <HAL_TIM_MspPostInit+0xb8>)
 8101a96:	f000 fa61 	bl	8101f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101a9a:	bf00      	nop
 8101a9c:	3728      	adds	r7, #40	; 0x28
 8101a9e:	46bd      	mov	sp, r7
 8101aa0:	bd80      	pop	{r7, pc}
 8101aa2:	bf00      	nop
 8101aa4:	40010000 	.word	0x40010000
 8101aa8:	58024400 	.word	0x58024400
 8101aac:	58021000 	.word	0x58021000
 8101ab0:	58020000 	.word	0x58020000

08101ab4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101ab8:	4b22      	ldr	r3, [pc, #136]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101aba:	4a23      	ldr	r2, [pc, #140]	; (8101b48 <MX_USART3_UART_Init+0x94>)
 8101abc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101abe:	4b21      	ldr	r3, [pc, #132]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101ac0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101ac4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101ac6:	4b1f      	ldr	r3, [pc, #124]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101ac8:	2200      	movs	r2, #0
 8101aca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101acc:	4b1d      	ldr	r3, [pc, #116]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101ace:	2200      	movs	r2, #0
 8101ad0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101ad2:	4b1c      	ldr	r3, [pc, #112]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101ad4:	2200      	movs	r2, #0
 8101ad6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101ad8:	4b1a      	ldr	r3, [pc, #104]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101ada:	220c      	movs	r2, #12
 8101adc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101ade:	4b19      	ldr	r3, [pc, #100]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101ae4:	4b17      	ldr	r3, [pc, #92]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101ae6:	2200      	movs	r2, #0
 8101ae8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101aea:	4b16      	ldr	r3, [pc, #88]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101aec:	2200      	movs	r2, #0
 8101aee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101af0:	4b14      	ldr	r3, [pc, #80]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101af2:	2200      	movs	r2, #0
 8101af4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101af6:	4b13      	ldr	r3, [pc, #76]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101af8:	2200      	movs	r2, #0
 8101afa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101afc:	4811      	ldr	r0, [pc, #68]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101afe:	f003 f91b 	bl	8104d38 <HAL_UART_Init>
 8101b02:	4603      	mov	r3, r0
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d001      	beq.n	8101b0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101b08:	f7ff fd94 	bl	8101634 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b0c:	2100      	movs	r1, #0
 8101b0e:	480d      	ldr	r0, [pc, #52]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101b10:	f004 f8b5 	bl	8105c7e <HAL_UARTEx_SetTxFifoThreshold>
 8101b14:	4603      	mov	r3, r0
 8101b16:	2b00      	cmp	r3, #0
 8101b18:	d001      	beq.n	8101b1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101b1a:	f7ff fd8b 	bl	8101634 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b1e:	2100      	movs	r1, #0
 8101b20:	4808      	ldr	r0, [pc, #32]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101b22:	f004 f8ea 	bl	8105cfa <HAL_UARTEx_SetRxFifoThreshold>
 8101b26:	4603      	mov	r3, r0
 8101b28:	2b00      	cmp	r3, #0
 8101b2a:	d001      	beq.n	8101b30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101b2c:	f7ff fd82 	bl	8101634 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101b30:	4804      	ldr	r0, [pc, #16]	; (8101b44 <MX_USART3_UART_Init+0x90>)
 8101b32:	f004 f86b 	bl	8105c0c <HAL_UARTEx_DisableFifoMode>
 8101b36:	4603      	mov	r3, r0
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	d001      	beq.n	8101b40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101b3c:	f7ff fd7a 	bl	8101634 <Error_Handler>
  }

}
 8101b40:	bf00      	nop
 8101b42:	bd80      	pop	{r7, pc}
 8101b44:	10004c58 	.word	0x10004c58
 8101b48:	40004800 	.word	0x40004800

08101b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101b4c:	b580      	push	{r7, lr}
 8101b4e:	b08a      	sub	sp, #40	; 0x28
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b54:	f107 0314 	add.w	r3, r7, #20
 8101b58:	2200      	movs	r2, #0
 8101b5a:	601a      	str	r2, [r3, #0]
 8101b5c:	605a      	str	r2, [r3, #4]
 8101b5e:	609a      	str	r2, [r3, #8]
 8101b60:	60da      	str	r2, [r3, #12]
 8101b62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8101b64:	687b      	ldr	r3, [r7, #4]
 8101b66:	681b      	ldr	r3, [r3, #0]
 8101b68:	4a1a      	ldr	r2, [pc, #104]	; (8101bd4 <HAL_UART_MspInit+0x88>)
 8101b6a:	4293      	cmp	r3, r2
 8101b6c:	d12e      	bne.n	8101bcc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101b6e:	4b1a      	ldr	r3, [pc, #104]	; (8101bd8 <HAL_UART_MspInit+0x8c>)
 8101b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b74:	4a18      	ldr	r2, [pc, #96]	; (8101bd8 <HAL_UART_MspInit+0x8c>)
 8101b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101b7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b7e:	4b16      	ldr	r3, [pc, #88]	; (8101bd8 <HAL_UART_MspInit+0x8c>)
 8101b80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101b88:	613b      	str	r3, [r7, #16]
 8101b8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b8c:	4b12      	ldr	r3, [pc, #72]	; (8101bd8 <HAL_UART_MspInit+0x8c>)
 8101b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b92:	4a11      	ldr	r2, [pc, #68]	; (8101bd8 <HAL_UART_MspInit+0x8c>)
 8101b94:	f043 0308 	orr.w	r3, r3, #8
 8101b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b9c:	4b0e      	ldr	r3, [pc, #56]	; (8101bd8 <HAL_UART_MspInit+0x8c>)
 8101b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ba2:	f003 0308 	and.w	r3, r3, #8
 8101ba6:	60fb      	str	r3, [r7, #12]
 8101ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101baa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bb0:	2302      	movs	r3, #2
 8101bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bb4:	2300      	movs	r3, #0
 8101bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bb8:	2300      	movs	r3, #0
 8101bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101bbc:	2307      	movs	r3, #7
 8101bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101bc0:	f107 0314 	add.w	r3, r7, #20
 8101bc4:	4619      	mov	r1, r3
 8101bc6:	4805      	ldr	r0, [pc, #20]	; (8101bdc <HAL_UART_MspInit+0x90>)
 8101bc8:	f000 f9c8 	bl	8101f5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101bcc:	bf00      	nop
 8101bce:	3728      	adds	r7, #40	; 0x28
 8101bd0:	46bd      	mov	sp, r7
 8101bd2:	bd80      	pop	{r7, pc}
 8101bd4:	40004800 	.word	0x40004800
 8101bd8:	58024400 	.word	0x58024400
 8101bdc:	58020c00 	.word	0x58020c00

08101be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101c18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101be4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101be6:	e003      	b.n	8101bf0 <LoopCopyDataInit>

08101be8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101be8:	4b0c      	ldr	r3, [pc, #48]	; (8101c1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8101bea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101bec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101bee:	3104      	adds	r1, #4

08101bf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101bf0:	480b      	ldr	r0, [pc, #44]	; (8101c20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8101bf2:	4b0c      	ldr	r3, [pc, #48]	; (8101c24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8101bf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101bf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101bf8:	d3f6      	bcc.n	8101be8 <CopyDataInit>
  ldr  r2, =_sbss
 8101bfa:	4a0b      	ldr	r2, [pc, #44]	; (8101c28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8101bfc:	e002      	b.n	8101c04 <LoopFillZerobss>

08101bfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101bfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101c00:	f842 3b04 	str.w	r3, [r2], #4

08101c04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101c04:	4b09      	ldr	r3, [pc, #36]	; (8101c2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8101c06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101c08:	d3f9      	bcc.n	8101bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8101c0a:	f7ff f985 	bl	8100f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8101c0e:	f006 fe65 	bl	81088dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101c12:	f7ff fc9f 	bl	8101554 <main>
  bx  lr    
 8101c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101c18:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101c1c:	0810a650 	.word	0x0810a650
  ldr  r0, =_sdata
 8101c20:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101c24:	100001e0 	.word	0x100001e0
  ldr  r2, =_sbss
 8101c28:	100001e0 	.word	0x100001e0
  ldr  r3, = _ebss
 8101c2c:	10004d2c 	.word	0x10004d2c

08101c30 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101c30:	e7fe      	b.n	8101c30 <ADC3_IRQHandler>
	...

08101c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101c34:	b580      	push	{r7, lr}
 8101c36:	b082      	sub	sp, #8
 8101c38:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101c3a:	4b28      	ldr	r3, [pc, #160]	; (8101cdc <HAL_Init+0xa8>)
 8101c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c40:	4a26      	ldr	r2, [pc, #152]	; (8101cdc <HAL_Init+0xa8>)
 8101c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101c46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101c4a:	4b24      	ldr	r3, [pc, #144]	; (8101cdc <HAL_Init+0xa8>)
 8101c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101c54:	603b      	str	r3, [r7, #0]
 8101c56:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101c58:	4b21      	ldr	r3, [pc, #132]	; (8101ce0 <HAL_Init+0xac>)
 8101c5a:	681b      	ldr	r3, [r3, #0]
 8101c5c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101c60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101c64:	4a1e      	ldr	r2, [pc, #120]	; (8101ce0 <HAL_Init+0xac>)
 8101c66:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101c6a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101c6c:	4b1c      	ldr	r3, [pc, #112]	; (8101ce0 <HAL_Init+0xac>)
 8101c6e:	681b      	ldr	r3, [r3, #0]
 8101c70:	4a1b      	ldr	r2, [pc, #108]	; (8101ce0 <HAL_Init+0xac>)
 8101c72:	f043 0301 	orr.w	r3, r3, #1
 8101c76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101c78:	2003      	movs	r0, #3
 8101c7a:	f000 f928 	bl	8101ece <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101c7e:	f001 f963 	bl	8102f48 <HAL_RCC_GetSysClockFreq>
 8101c82:	4601      	mov	r1, r0
 8101c84:	4b15      	ldr	r3, [pc, #84]	; (8101cdc <HAL_Init+0xa8>)
 8101c86:	699b      	ldr	r3, [r3, #24]
 8101c88:	0a1b      	lsrs	r3, r3, #8
 8101c8a:	f003 030f 	and.w	r3, r3, #15
 8101c8e:	4a15      	ldr	r2, [pc, #84]	; (8101ce4 <HAL_Init+0xb0>)
 8101c90:	5cd3      	ldrb	r3, [r2, r3]
 8101c92:	f003 031f 	and.w	r3, r3, #31
 8101c96:	fa21 f303 	lsr.w	r3, r1, r3
 8101c9a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101c9c:	4b0f      	ldr	r3, [pc, #60]	; (8101cdc <HAL_Init+0xa8>)
 8101c9e:	699b      	ldr	r3, [r3, #24]
 8101ca0:	f003 030f 	and.w	r3, r3, #15
 8101ca4:	4a0f      	ldr	r2, [pc, #60]	; (8101ce4 <HAL_Init+0xb0>)
 8101ca6:	5cd3      	ldrb	r3, [r2, r3]
 8101ca8:	f003 031f 	and.w	r3, r3, #31
 8101cac:	687a      	ldr	r2, [r7, #4]
 8101cae:	fa22 f303 	lsr.w	r3, r2, r3
 8101cb2:	4a0d      	ldr	r2, [pc, #52]	; (8101ce8 <HAL_Init+0xb4>)
 8101cb4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101cb6:	4b0c      	ldr	r3, [pc, #48]	; (8101ce8 <HAL_Init+0xb4>)
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	4a0c      	ldr	r2, [pc, #48]	; (8101cec <HAL_Init+0xb8>)
 8101cbc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101cbe:	2000      	movs	r0, #0
 8101cc0:	f7ff fcee 	bl	81016a0 <HAL_InitTick>
 8101cc4:	4603      	mov	r3, r0
 8101cc6:	2b00      	cmp	r3, #0
 8101cc8:	d001      	beq.n	8101cce <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101cca:	2301      	movs	r3, #1
 8101ccc:	e002      	b.n	8101cd4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101cce:	f7ff fcb9 	bl	8101644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101cd2:	2300      	movs	r3, #0
}
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	3708      	adds	r7, #8
 8101cd8:	46bd      	mov	sp, r7
 8101cda:	bd80      	pop	{r7, pc}
 8101cdc:	58024400 	.word	0x58024400
 8101ce0:	40024400 	.word	0x40024400
 8101ce4:	0810a3cc 	.word	0x0810a3cc
 8101ce8:	10000004 	.word	0x10000004
 8101cec:	10000000 	.word	0x10000000

08101cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101cf0:	b480      	push	{r7}
 8101cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101cf4:	4b06      	ldr	r3, [pc, #24]	; (8101d10 <HAL_IncTick+0x20>)
 8101cf6:	781b      	ldrb	r3, [r3, #0]
 8101cf8:	461a      	mov	r2, r3
 8101cfa:	4b06      	ldr	r3, [pc, #24]	; (8101d14 <HAL_IncTick+0x24>)
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	4413      	add	r3, r2
 8101d00:	4a04      	ldr	r2, [pc, #16]	; (8101d14 <HAL_IncTick+0x24>)
 8101d02:	6013      	str	r3, [r2, #0]
}
 8101d04:	bf00      	nop
 8101d06:	46bd      	mov	sp, r7
 8101d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d0c:	4770      	bx	lr
 8101d0e:	bf00      	nop
 8101d10:	10000008 	.word	0x10000008
 8101d14:	10004ce4 	.word	0x10004ce4

08101d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101d18:	b480      	push	{r7}
 8101d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8101d1c:	4b03      	ldr	r3, [pc, #12]	; (8101d2c <HAL_GetTick+0x14>)
 8101d1e:	681b      	ldr	r3, [r3, #0]
}
 8101d20:	4618      	mov	r0, r3
 8101d22:	46bd      	mov	sp, r7
 8101d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d28:	4770      	bx	lr
 8101d2a:	bf00      	nop
 8101d2c:	10004ce4 	.word	0x10004ce4

08101d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101d30:	b580      	push	{r7, lr}
 8101d32:	b084      	sub	sp, #16
 8101d34:	af00      	add	r7, sp, #0
 8101d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101d38:	f7ff ffee 	bl	8101d18 <HAL_GetTick>
 8101d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101d42:	68fb      	ldr	r3, [r7, #12]
 8101d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101d48:	d005      	beq.n	8101d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101d4a:	4b09      	ldr	r3, [pc, #36]	; (8101d70 <HAL_Delay+0x40>)
 8101d4c:	781b      	ldrb	r3, [r3, #0]
 8101d4e:	461a      	mov	r2, r3
 8101d50:	68fb      	ldr	r3, [r7, #12]
 8101d52:	4413      	add	r3, r2
 8101d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101d56:	bf00      	nop
 8101d58:	f7ff ffde 	bl	8101d18 <HAL_GetTick>
 8101d5c:	4602      	mov	r2, r0
 8101d5e:	68bb      	ldr	r3, [r7, #8]
 8101d60:	1ad3      	subs	r3, r2, r3
 8101d62:	68fa      	ldr	r2, [r7, #12]
 8101d64:	429a      	cmp	r2, r3
 8101d66:	d8f7      	bhi.n	8101d58 <HAL_Delay+0x28>
  {
  }
}
 8101d68:	bf00      	nop
 8101d6a:	3710      	adds	r7, #16
 8101d6c:	46bd      	mov	sp, r7
 8101d6e:	bd80      	pop	{r7, pc}
 8101d70:	10000008 	.word	0x10000008

08101d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101d74:	b480      	push	{r7}
 8101d76:	b085      	sub	sp, #20
 8101d78:	af00      	add	r7, sp, #0
 8101d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	f003 0307 	and.w	r3, r3, #7
 8101d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101d84:	4b0c      	ldr	r3, [pc, #48]	; (8101db8 <__NVIC_SetPriorityGrouping+0x44>)
 8101d86:	68db      	ldr	r3, [r3, #12]
 8101d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101d8a:	68ba      	ldr	r2, [r7, #8]
 8101d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101d90:	4013      	ands	r3, r2
 8101d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101d94:	68fb      	ldr	r3, [r7, #12]
 8101d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101d98:	68bb      	ldr	r3, [r7, #8]
 8101d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101da6:	4a04      	ldr	r2, [pc, #16]	; (8101db8 <__NVIC_SetPriorityGrouping+0x44>)
 8101da8:	68bb      	ldr	r3, [r7, #8]
 8101daa:	60d3      	str	r3, [r2, #12]
}
 8101dac:	bf00      	nop
 8101dae:	3714      	adds	r7, #20
 8101db0:	46bd      	mov	sp, r7
 8101db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101db6:	4770      	bx	lr
 8101db8:	e000ed00 	.word	0xe000ed00

08101dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101dbc:	b480      	push	{r7}
 8101dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101dc0:	4b04      	ldr	r3, [pc, #16]	; (8101dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8101dc2:	68db      	ldr	r3, [r3, #12]
 8101dc4:	0a1b      	lsrs	r3, r3, #8
 8101dc6:	f003 0307 	and.w	r3, r3, #7
}
 8101dca:	4618      	mov	r0, r3
 8101dcc:	46bd      	mov	sp, r7
 8101dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dd2:	4770      	bx	lr
 8101dd4:	e000ed00 	.word	0xe000ed00

08101dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101dd8:	b480      	push	{r7}
 8101dda:	b083      	sub	sp, #12
 8101ddc:	af00      	add	r7, sp, #0
 8101dde:	4603      	mov	r3, r0
 8101de0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101de2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101de6:	2b00      	cmp	r3, #0
 8101de8:	db0b      	blt.n	8101e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101dea:	88fb      	ldrh	r3, [r7, #6]
 8101dec:	f003 021f 	and.w	r2, r3, #31
 8101df0:	4907      	ldr	r1, [pc, #28]	; (8101e10 <__NVIC_EnableIRQ+0x38>)
 8101df2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101df6:	095b      	lsrs	r3, r3, #5
 8101df8:	2001      	movs	r0, #1
 8101dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8101dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101e02:	bf00      	nop
 8101e04:	370c      	adds	r7, #12
 8101e06:	46bd      	mov	sp, r7
 8101e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e0c:	4770      	bx	lr
 8101e0e:	bf00      	nop
 8101e10:	e000e100 	.word	0xe000e100

08101e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101e14:	b480      	push	{r7}
 8101e16:	b083      	sub	sp, #12
 8101e18:	af00      	add	r7, sp, #0
 8101e1a:	4603      	mov	r3, r0
 8101e1c:	6039      	str	r1, [r7, #0]
 8101e1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e24:	2b00      	cmp	r3, #0
 8101e26:	db0a      	blt.n	8101e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101e28:	683b      	ldr	r3, [r7, #0]
 8101e2a:	b2da      	uxtb	r2, r3
 8101e2c:	490c      	ldr	r1, [pc, #48]	; (8101e60 <__NVIC_SetPriority+0x4c>)
 8101e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101e32:	0112      	lsls	r2, r2, #4
 8101e34:	b2d2      	uxtb	r2, r2
 8101e36:	440b      	add	r3, r1
 8101e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101e3c:	e00a      	b.n	8101e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101e3e:	683b      	ldr	r3, [r7, #0]
 8101e40:	b2da      	uxtb	r2, r3
 8101e42:	4908      	ldr	r1, [pc, #32]	; (8101e64 <__NVIC_SetPriority+0x50>)
 8101e44:	88fb      	ldrh	r3, [r7, #6]
 8101e46:	f003 030f 	and.w	r3, r3, #15
 8101e4a:	3b04      	subs	r3, #4
 8101e4c:	0112      	lsls	r2, r2, #4
 8101e4e:	b2d2      	uxtb	r2, r2
 8101e50:	440b      	add	r3, r1
 8101e52:	761a      	strb	r2, [r3, #24]
}
 8101e54:	bf00      	nop
 8101e56:	370c      	adds	r7, #12
 8101e58:	46bd      	mov	sp, r7
 8101e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e5e:	4770      	bx	lr
 8101e60:	e000e100 	.word	0xe000e100
 8101e64:	e000ed00 	.word	0xe000ed00

08101e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101e68:	b480      	push	{r7}
 8101e6a:	b089      	sub	sp, #36	; 0x24
 8101e6c:	af00      	add	r7, sp, #0
 8101e6e:	60f8      	str	r0, [r7, #12]
 8101e70:	60b9      	str	r1, [r7, #8]
 8101e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101e74:	68fb      	ldr	r3, [r7, #12]
 8101e76:	f003 0307 	and.w	r3, r3, #7
 8101e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101e7c:	69fb      	ldr	r3, [r7, #28]
 8101e7e:	f1c3 0307 	rsb	r3, r3, #7
 8101e82:	2b04      	cmp	r3, #4
 8101e84:	bf28      	it	cs
 8101e86:	2304      	movcs	r3, #4
 8101e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101e8a:	69fb      	ldr	r3, [r7, #28]
 8101e8c:	3304      	adds	r3, #4
 8101e8e:	2b06      	cmp	r3, #6
 8101e90:	d902      	bls.n	8101e98 <NVIC_EncodePriority+0x30>
 8101e92:	69fb      	ldr	r3, [r7, #28]
 8101e94:	3b03      	subs	r3, #3
 8101e96:	e000      	b.n	8101e9a <NVIC_EncodePriority+0x32>
 8101e98:	2300      	movs	r3, #0
 8101e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8101ea0:	69bb      	ldr	r3, [r7, #24]
 8101ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8101ea6:	43da      	mvns	r2, r3
 8101ea8:	68bb      	ldr	r3, [r7, #8]
 8101eaa:	401a      	ands	r2, r3
 8101eac:	697b      	ldr	r3, [r7, #20]
 8101eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8101eb4:	697b      	ldr	r3, [r7, #20]
 8101eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8101eba:	43d9      	mvns	r1, r3
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101ec0:	4313      	orrs	r3, r2
         );
}
 8101ec2:	4618      	mov	r0, r3
 8101ec4:	3724      	adds	r7, #36	; 0x24
 8101ec6:	46bd      	mov	sp, r7
 8101ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ecc:	4770      	bx	lr

08101ece <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ece:	b580      	push	{r7, lr}
 8101ed0:	b082      	sub	sp, #8
 8101ed2:	af00      	add	r7, sp, #0
 8101ed4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101ed6:	6878      	ldr	r0, [r7, #4]
 8101ed8:	f7ff ff4c 	bl	8101d74 <__NVIC_SetPriorityGrouping>
}
 8101edc:	bf00      	nop
 8101ede:	3708      	adds	r7, #8
 8101ee0:	46bd      	mov	sp, r7
 8101ee2:	bd80      	pop	{r7, pc}

08101ee4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ee4:	b580      	push	{r7, lr}
 8101ee6:	b086      	sub	sp, #24
 8101ee8:	af00      	add	r7, sp, #0
 8101eea:	4603      	mov	r3, r0
 8101eec:	60b9      	str	r1, [r7, #8]
 8101eee:	607a      	str	r2, [r7, #4]
 8101ef0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ef2:	f7ff ff63 	bl	8101dbc <__NVIC_GetPriorityGrouping>
 8101ef6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ef8:	687a      	ldr	r2, [r7, #4]
 8101efa:	68b9      	ldr	r1, [r7, #8]
 8101efc:	6978      	ldr	r0, [r7, #20]
 8101efe:	f7ff ffb3 	bl	8101e68 <NVIC_EncodePriority>
 8101f02:	4602      	mov	r2, r0
 8101f04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101f08:	4611      	mov	r1, r2
 8101f0a:	4618      	mov	r0, r3
 8101f0c:	f7ff ff82 	bl	8101e14 <__NVIC_SetPriority>
}
 8101f10:	bf00      	nop
 8101f12:	3718      	adds	r7, #24
 8101f14:	46bd      	mov	sp, r7
 8101f16:	bd80      	pop	{r7, pc}

08101f18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	b082      	sub	sp, #8
 8101f1c:	af00      	add	r7, sp, #0
 8101f1e:	4603      	mov	r3, r0
 8101f20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f26:	4618      	mov	r0, r3
 8101f28:	f7ff ff56 	bl	8101dd8 <__NVIC_EnableIRQ>
}
 8101f2c:	bf00      	nop
 8101f2e:	3708      	adds	r7, #8
 8101f30:	46bd      	mov	sp, r7
 8101f32:	bd80      	pop	{r7, pc}

08101f34 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101f34:	b480      	push	{r7}
 8101f36:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101f38:	4b07      	ldr	r3, [pc, #28]	; (8101f58 <HAL_GetCurrentCPUID+0x24>)
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	091b      	lsrs	r3, r3, #4
 8101f3e:	f003 030f 	and.w	r3, r3, #15
 8101f42:	2b07      	cmp	r3, #7
 8101f44:	d101      	bne.n	8101f4a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101f46:	2303      	movs	r3, #3
 8101f48:	e000      	b.n	8101f4c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101f4a:	2301      	movs	r3, #1
  }
}
 8101f4c:	4618      	mov	r0, r3
 8101f4e:	46bd      	mov	sp, r7
 8101f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f54:	4770      	bx	lr
 8101f56:	bf00      	nop
 8101f58:	e000ed00 	.word	0xe000ed00

08101f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101f5c:	b480      	push	{r7}
 8101f5e:	b089      	sub	sp, #36	; 0x24
 8101f60:	af00      	add	r7, sp, #0
 8101f62:	6078      	str	r0, [r7, #4]
 8101f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101f66:	2300      	movs	r3, #0
 8101f68:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101f6a:	4b89      	ldr	r3, [pc, #548]	; (8102190 <HAL_GPIO_Init+0x234>)
 8101f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101f6e:	e194      	b.n	810229a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101f70:	683b      	ldr	r3, [r7, #0]
 8101f72:	681a      	ldr	r2, [r3, #0]
 8101f74:	2101      	movs	r1, #1
 8101f76:	69fb      	ldr	r3, [r7, #28]
 8101f78:	fa01 f303 	lsl.w	r3, r1, r3
 8101f7c:	4013      	ands	r3, r2
 8101f7e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101f80:	693b      	ldr	r3, [r7, #16]
 8101f82:	2b00      	cmp	r3, #0
 8101f84:	f000 8186 	beq.w	8102294 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101f88:	683b      	ldr	r3, [r7, #0]
 8101f8a:	685b      	ldr	r3, [r3, #4]
 8101f8c:	2b01      	cmp	r3, #1
 8101f8e:	d00b      	beq.n	8101fa8 <HAL_GPIO_Init+0x4c>
 8101f90:	683b      	ldr	r3, [r7, #0]
 8101f92:	685b      	ldr	r3, [r3, #4]
 8101f94:	2b02      	cmp	r3, #2
 8101f96:	d007      	beq.n	8101fa8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101f98:	683b      	ldr	r3, [r7, #0]
 8101f9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101f9c:	2b11      	cmp	r3, #17
 8101f9e:	d003      	beq.n	8101fa8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101fa0:	683b      	ldr	r3, [r7, #0]
 8101fa2:	685b      	ldr	r3, [r3, #4]
 8101fa4:	2b12      	cmp	r3, #18
 8101fa6:	d130      	bne.n	810200a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	689b      	ldr	r3, [r3, #8]
 8101fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101fae:	69fb      	ldr	r3, [r7, #28]
 8101fb0:	005b      	lsls	r3, r3, #1
 8101fb2:	2203      	movs	r2, #3
 8101fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8101fb8:	43db      	mvns	r3, r3
 8101fba:	69ba      	ldr	r2, [r7, #24]
 8101fbc:	4013      	ands	r3, r2
 8101fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101fc0:	683b      	ldr	r3, [r7, #0]
 8101fc2:	68da      	ldr	r2, [r3, #12]
 8101fc4:	69fb      	ldr	r3, [r7, #28]
 8101fc6:	005b      	lsls	r3, r3, #1
 8101fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8101fcc:	69ba      	ldr	r2, [r7, #24]
 8101fce:	4313      	orrs	r3, r2
 8101fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	69ba      	ldr	r2, [r7, #24]
 8101fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101fd8:	687b      	ldr	r3, [r7, #4]
 8101fda:	685b      	ldr	r3, [r3, #4]
 8101fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101fde:	2201      	movs	r2, #1
 8101fe0:	69fb      	ldr	r3, [r7, #28]
 8101fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8101fe6:	43db      	mvns	r3, r3
 8101fe8:	69ba      	ldr	r2, [r7, #24]
 8101fea:	4013      	ands	r3, r2
 8101fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101fee:	683b      	ldr	r3, [r7, #0]
 8101ff0:	685b      	ldr	r3, [r3, #4]
 8101ff2:	091b      	lsrs	r3, r3, #4
 8101ff4:	f003 0201 	and.w	r2, r3, #1
 8101ff8:	69fb      	ldr	r3, [r7, #28]
 8101ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8101ffe:	69ba      	ldr	r2, [r7, #24]
 8102000:	4313      	orrs	r3, r2
 8102002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102004:	687b      	ldr	r3, [r7, #4]
 8102006:	69ba      	ldr	r2, [r7, #24]
 8102008:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	68db      	ldr	r3, [r3, #12]
 810200e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102010:	69fb      	ldr	r3, [r7, #28]
 8102012:	005b      	lsls	r3, r3, #1
 8102014:	2203      	movs	r2, #3
 8102016:	fa02 f303 	lsl.w	r3, r2, r3
 810201a:	43db      	mvns	r3, r3
 810201c:	69ba      	ldr	r2, [r7, #24]
 810201e:	4013      	ands	r3, r2
 8102020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102022:	683b      	ldr	r3, [r7, #0]
 8102024:	689a      	ldr	r2, [r3, #8]
 8102026:	69fb      	ldr	r3, [r7, #28]
 8102028:	005b      	lsls	r3, r3, #1
 810202a:	fa02 f303 	lsl.w	r3, r2, r3
 810202e:	69ba      	ldr	r2, [r7, #24]
 8102030:	4313      	orrs	r3, r2
 8102032:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	69ba      	ldr	r2, [r7, #24]
 8102038:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810203a:	683b      	ldr	r3, [r7, #0]
 810203c:	685b      	ldr	r3, [r3, #4]
 810203e:	2b02      	cmp	r3, #2
 8102040:	d003      	beq.n	810204a <HAL_GPIO_Init+0xee>
 8102042:	683b      	ldr	r3, [r7, #0]
 8102044:	685b      	ldr	r3, [r3, #4]
 8102046:	2b12      	cmp	r3, #18
 8102048:	d123      	bne.n	8102092 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810204a:	69fb      	ldr	r3, [r7, #28]
 810204c:	08da      	lsrs	r2, r3, #3
 810204e:	687b      	ldr	r3, [r7, #4]
 8102050:	3208      	adds	r2, #8
 8102052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102058:	69fb      	ldr	r3, [r7, #28]
 810205a:	f003 0307 	and.w	r3, r3, #7
 810205e:	009b      	lsls	r3, r3, #2
 8102060:	220f      	movs	r2, #15
 8102062:	fa02 f303 	lsl.w	r3, r2, r3
 8102066:	43db      	mvns	r3, r3
 8102068:	69ba      	ldr	r2, [r7, #24]
 810206a:	4013      	ands	r3, r2
 810206c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810206e:	683b      	ldr	r3, [r7, #0]
 8102070:	691a      	ldr	r2, [r3, #16]
 8102072:	69fb      	ldr	r3, [r7, #28]
 8102074:	f003 0307 	and.w	r3, r3, #7
 8102078:	009b      	lsls	r3, r3, #2
 810207a:	fa02 f303 	lsl.w	r3, r2, r3
 810207e:	69ba      	ldr	r2, [r7, #24]
 8102080:	4313      	orrs	r3, r2
 8102082:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102084:	69fb      	ldr	r3, [r7, #28]
 8102086:	08da      	lsrs	r2, r3, #3
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	3208      	adds	r2, #8
 810208c:	69b9      	ldr	r1, [r7, #24]
 810208e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102092:	687b      	ldr	r3, [r7, #4]
 8102094:	681b      	ldr	r3, [r3, #0]
 8102096:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102098:	69fb      	ldr	r3, [r7, #28]
 810209a:	005b      	lsls	r3, r3, #1
 810209c:	2203      	movs	r2, #3
 810209e:	fa02 f303 	lsl.w	r3, r2, r3
 81020a2:	43db      	mvns	r3, r3
 81020a4:	69ba      	ldr	r2, [r7, #24]
 81020a6:	4013      	ands	r3, r2
 81020a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81020aa:	683b      	ldr	r3, [r7, #0]
 81020ac:	685b      	ldr	r3, [r3, #4]
 81020ae:	f003 0203 	and.w	r2, r3, #3
 81020b2:	69fb      	ldr	r3, [r7, #28]
 81020b4:	005b      	lsls	r3, r3, #1
 81020b6:	fa02 f303 	lsl.w	r3, r2, r3
 81020ba:	69ba      	ldr	r2, [r7, #24]
 81020bc:	4313      	orrs	r3, r2
 81020be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	69ba      	ldr	r2, [r7, #24]
 81020c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81020c6:	683b      	ldr	r3, [r7, #0]
 81020c8:	685b      	ldr	r3, [r3, #4]
 81020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81020ce:	2b00      	cmp	r3, #0
 81020d0:	f000 80e0 	beq.w	8102294 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81020d4:	4b2f      	ldr	r3, [pc, #188]	; (8102194 <HAL_GPIO_Init+0x238>)
 81020d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81020da:	4a2e      	ldr	r2, [pc, #184]	; (8102194 <HAL_GPIO_Init+0x238>)
 81020dc:	f043 0302 	orr.w	r3, r3, #2
 81020e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81020e4:	4b2b      	ldr	r3, [pc, #172]	; (8102194 <HAL_GPIO_Init+0x238>)
 81020e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81020ea:	f003 0302 	and.w	r3, r3, #2
 81020ee:	60fb      	str	r3, [r7, #12]
 81020f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81020f2:	4a29      	ldr	r2, [pc, #164]	; (8102198 <HAL_GPIO_Init+0x23c>)
 81020f4:	69fb      	ldr	r3, [r7, #28]
 81020f6:	089b      	lsrs	r3, r3, #2
 81020f8:	3302      	adds	r3, #2
 81020fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102100:	69fb      	ldr	r3, [r7, #28]
 8102102:	f003 0303 	and.w	r3, r3, #3
 8102106:	009b      	lsls	r3, r3, #2
 8102108:	220f      	movs	r2, #15
 810210a:	fa02 f303 	lsl.w	r3, r2, r3
 810210e:	43db      	mvns	r3, r3
 8102110:	69ba      	ldr	r2, [r7, #24]
 8102112:	4013      	ands	r3, r2
 8102114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102116:	687b      	ldr	r3, [r7, #4]
 8102118:	4a20      	ldr	r2, [pc, #128]	; (810219c <HAL_GPIO_Init+0x240>)
 810211a:	4293      	cmp	r3, r2
 810211c:	d052      	beq.n	81021c4 <HAL_GPIO_Init+0x268>
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	4a1f      	ldr	r2, [pc, #124]	; (81021a0 <HAL_GPIO_Init+0x244>)
 8102122:	4293      	cmp	r3, r2
 8102124:	d031      	beq.n	810218a <HAL_GPIO_Init+0x22e>
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	4a1e      	ldr	r2, [pc, #120]	; (81021a4 <HAL_GPIO_Init+0x248>)
 810212a:	4293      	cmp	r3, r2
 810212c:	d02b      	beq.n	8102186 <HAL_GPIO_Init+0x22a>
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	4a1d      	ldr	r2, [pc, #116]	; (81021a8 <HAL_GPIO_Init+0x24c>)
 8102132:	4293      	cmp	r3, r2
 8102134:	d025      	beq.n	8102182 <HAL_GPIO_Init+0x226>
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	4a1c      	ldr	r2, [pc, #112]	; (81021ac <HAL_GPIO_Init+0x250>)
 810213a:	4293      	cmp	r3, r2
 810213c:	d01f      	beq.n	810217e <HAL_GPIO_Init+0x222>
 810213e:	687b      	ldr	r3, [r7, #4]
 8102140:	4a1b      	ldr	r2, [pc, #108]	; (81021b0 <HAL_GPIO_Init+0x254>)
 8102142:	4293      	cmp	r3, r2
 8102144:	d019      	beq.n	810217a <HAL_GPIO_Init+0x21e>
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	4a1a      	ldr	r2, [pc, #104]	; (81021b4 <HAL_GPIO_Init+0x258>)
 810214a:	4293      	cmp	r3, r2
 810214c:	d013      	beq.n	8102176 <HAL_GPIO_Init+0x21a>
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	4a19      	ldr	r2, [pc, #100]	; (81021b8 <HAL_GPIO_Init+0x25c>)
 8102152:	4293      	cmp	r3, r2
 8102154:	d00d      	beq.n	8102172 <HAL_GPIO_Init+0x216>
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	4a18      	ldr	r2, [pc, #96]	; (81021bc <HAL_GPIO_Init+0x260>)
 810215a:	4293      	cmp	r3, r2
 810215c:	d007      	beq.n	810216e <HAL_GPIO_Init+0x212>
 810215e:	687b      	ldr	r3, [r7, #4]
 8102160:	4a17      	ldr	r2, [pc, #92]	; (81021c0 <HAL_GPIO_Init+0x264>)
 8102162:	4293      	cmp	r3, r2
 8102164:	d101      	bne.n	810216a <HAL_GPIO_Init+0x20e>
 8102166:	2309      	movs	r3, #9
 8102168:	e02d      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 810216a:	230a      	movs	r3, #10
 810216c:	e02b      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 810216e:	2308      	movs	r3, #8
 8102170:	e029      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 8102172:	2307      	movs	r3, #7
 8102174:	e027      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 8102176:	2306      	movs	r3, #6
 8102178:	e025      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 810217a:	2305      	movs	r3, #5
 810217c:	e023      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 810217e:	2304      	movs	r3, #4
 8102180:	e021      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 8102182:	2303      	movs	r3, #3
 8102184:	e01f      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 8102186:	2302      	movs	r3, #2
 8102188:	e01d      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 810218a:	2301      	movs	r3, #1
 810218c:	e01b      	b.n	81021c6 <HAL_GPIO_Init+0x26a>
 810218e:	bf00      	nop
 8102190:	580000c0 	.word	0x580000c0
 8102194:	58024400 	.word	0x58024400
 8102198:	58000400 	.word	0x58000400
 810219c:	58020000 	.word	0x58020000
 81021a0:	58020400 	.word	0x58020400
 81021a4:	58020800 	.word	0x58020800
 81021a8:	58020c00 	.word	0x58020c00
 81021ac:	58021000 	.word	0x58021000
 81021b0:	58021400 	.word	0x58021400
 81021b4:	58021800 	.word	0x58021800
 81021b8:	58021c00 	.word	0x58021c00
 81021bc:	58022000 	.word	0x58022000
 81021c0:	58022400 	.word	0x58022400
 81021c4:	2300      	movs	r3, #0
 81021c6:	69fa      	ldr	r2, [r7, #28]
 81021c8:	f002 0203 	and.w	r2, r2, #3
 81021cc:	0092      	lsls	r2, r2, #2
 81021ce:	4093      	lsls	r3, r2
 81021d0:	69ba      	ldr	r2, [r7, #24]
 81021d2:	4313      	orrs	r3, r2
 81021d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81021d6:	4938      	ldr	r1, [pc, #224]	; (81022b8 <HAL_GPIO_Init+0x35c>)
 81021d8:	69fb      	ldr	r3, [r7, #28]
 81021da:	089b      	lsrs	r3, r3, #2
 81021dc:	3302      	adds	r3, #2
 81021de:	69ba      	ldr	r2, [r7, #24]
 81021e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81021e4:	697b      	ldr	r3, [r7, #20]
 81021e6:	681b      	ldr	r3, [r3, #0]
 81021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81021ea:	693b      	ldr	r3, [r7, #16]
 81021ec:	43db      	mvns	r3, r3
 81021ee:	69ba      	ldr	r2, [r7, #24]
 81021f0:	4013      	ands	r3, r2
 81021f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81021f4:	683b      	ldr	r3, [r7, #0]
 81021f6:	685b      	ldr	r3, [r3, #4]
 81021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81021fc:	2b00      	cmp	r3, #0
 81021fe:	d003      	beq.n	8102208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8102200:	69ba      	ldr	r2, [r7, #24]
 8102202:	693b      	ldr	r3, [r7, #16]
 8102204:	4313      	orrs	r3, r2
 8102206:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102208:	697b      	ldr	r3, [r7, #20]
 810220a:	69ba      	ldr	r2, [r7, #24]
 810220c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810220e:	697b      	ldr	r3, [r7, #20]
 8102210:	685b      	ldr	r3, [r3, #4]
 8102212:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102214:	693b      	ldr	r3, [r7, #16]
 8102216:	43db      	mvns	r3, r3
 8102218:	69ba      	ldr	r2, [r7, #24]
 810221a:	4013      	ands	r3, r2
 810221c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810221e:	683b      	ldr	r3, [r7, #0]
 8102220:	685b      	ldr	r3, [r3, #4]
 8102222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102226:	2b00      	cmp	r3, #0
 8102228:	d003      	beq.n	8102232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810222a:	69ba      	ldr	r2, [r7, #24]
 810222c:	693b      	ldr	r3, [r7, #16]
 810222e:	4313      	orrs	r3, r2
 8102230:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102232:	697b      	ldr	r3, [r7, #20]
 8102234:	69ba      	ldr	r2, [r7, #24]
 8102236:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102240:	693b      	ldr	r3, [r7, #16]
 8102242:	43db      	mvns	r3, r3
 8102244:	69ba      	ldr	r2, [r7, #24]
 8102246:	4013      	ands	r3, r2
 8102248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810224a:	683b      	ldr	r3, [r7, #0]
 810224c:	685b      	ldr	r3, [r3, #4]
 810224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102252:	2b00      	cmp	r3, #0
 8102254:	d003      	beq.n	810225e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8102256:	69ba      	ldr	r2, [r7, #24]
 8102258:	693b      	ldr	r3, [r7, #16]
 810225a:	4313      	orrs	r3, r2
 810225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810225e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102262:	69bb      	ldr	r3, [r7, #24]
 8102264:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810226a:	685b      	ldr	r3, [r3, #4]
 810226c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810226e:	693b      	ldr	r3, [r7, #16]
 8102270:	43db      	mvns	r3, r3
 8102272:	69ba      	ldr	r2, [r7, #24]
 8102274:	4013      	ands	r3, r2
 8102276:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8102278:	683b      	ldr	r3, [r7, #0]
 810227a:	685b      	ldr	r3, [r3, #4]
 810227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102280:	2b00      	cmp	r3, #0
 8102282:	d003      	beq.n	810228c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8102284:	69ba      	ldr	r2, [r7, #24]
 8102286:	693b      	ldr	r3, [r7, #16]
 8102288:	4313      	orrs	r3, r2
 810228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810228c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102290:	69bb      	ldr	r3, [r7, #24]
 8102292:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8102294:	69fb      	ldr	r3, [r7, #28]
 8102296:	3301      	adds	r3, #1
 8102298:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810229a:	683b      	ldr	r3, [r7, #0]
 810229c:	681a      	ldr	r2, [r3, #0]
 810229e:	69fb      	ldr	r3, [r7, #28]
 81022a0:	fa22 f303 	lsr.w	r3, r2, r3
 81022a4:	2b00      	cmp	r3, #0
 81022a6:	f47f ae63 	bne.w	8101f70 <HAL_GPIO_Init+0x14>
  }
}
 81022aa:	bf00      	nop
 81022ac:	3724      	adds	r7, #36	; 0x24
 81022ae:	46bd      	mov	sp, r7
 81022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022b4:	4770      	bx	lr
 81022b6:	bf00      	nop
 81022b8:	58000400 	.word	0x58000400

081022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81022bc:	b480      	push	{r7}
 81022be:	b083      	sub	sp, #12
 81022c0:	af00      	add	r7, sp, #0
 81022c2:	6078      	str	r0, [r7, #4]
 81022c4:	460b      	mov	r3, r1
 81022c6:	807b      	strh	r3, [r7, #2]
 81022c8:	4613      	mov	r3, r2
 81022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81022cc:	787b      	ldrb	r3, [r7, #1]
 81022ce:	2b00      	cmp	r3, #0
 81022d0:	d003      	beq.n	81022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81022d2:	887a      	ldrh	r2, [r7, #2]
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81022d8:	e003      	b.n	81022e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81022da:	887b      	ldrh	r3, [r7, #2]
 81022dc:	041a      	lsls	r2, r3, #16
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	619a      	str	r2, [r3, #24]
}
 81022e2:	bf00      	nop
 81022e4:	370c      	adds	r7, #12
 81022e6:	46bd      	mov	sp, r7
 81022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022ec:	4770      	bx	lr
	...

081022f0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81022f0:	b480      	push	{r7}
 81022f2:	b083      	sub	sp, #12
 81022f4:	af00      	add	r7, sp, #0
 81022f6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81022f8:	4b05      	ldr	r3, [pc, #20]	; (8102310 <HAL_HSEM_ActivateNotification+0x20>)
 81022fa:	681a      	ldr	r2, [r3, #0]
 81022fc:	4904      	ldr	r1, [pc, #16]	; (8102310 <HAL_HSEM_ActivateNotification+0x20>)
 81022fe:	687b      	ldr	r3, [r7, #4]
 8102300:	4313      	orrs	r3, r2
 8102302:	600b      	str	r3, [r1, #0]
#endif
}
 8102304:	bf00      	nop
 8102306:	370c      	adds	r7, #12
 8102308:	46bd      	mov	sp, r7
 810230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810230e:	4770      	bx	lr
 8102310:	58026510 	.word	0x58026510

08102314 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8102314:	b580      	push	{r7, lr}
 8102316:	b082      	sub	sp, #8
 8102318:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 810231a:	4b0a      	ldr	r3, [pc, #40]	; (8102344 <HAL_HSEM_IRQHandler+0x30>)
 810231c:	68db      	ldr	r3, [r3, #12]
 810231e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8102320:	4b08      	ldr	r3, [pc, #32]	; (8102344 <HAL_HSEM_IRQHandler+0x30>)
 8102322:	681a      	ldr	r2, [r3, #0]
 8102324:	687b      	ldr	r3, [r7, #4]
 8102326:	43db      	mvns	r3, r3
 8102328:	4906      	ldr	r1, [pc, #24]	; (8102344 <HAL_HSEM_IRQHandler+0x30>)
 810232a:	4013      	ands	r3, r2
 810232c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810232e:	4a05      	ldr	r2, [pc, #20]	; (8102344 <HAL_HSEM_IRQHandler+0x30>)
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8102334:	6878      	ldr	r0, [r7, #4]
 8102336:	f000 f807 	bl	8102348 <HAL_HSEM_FreeCallback>
}
 810233a:	bf00      	nop
 810233c:	3708      	adds	r7, #8
 810233e:	46bd      	mov	sp, r7
 8102340:	bd80      	pop	{r7, pc}
 8102342:	bf00      	nop
 8102344:	58026510 	.word	0x58026510

08102348 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8102348:	b480      	push	{r7}
 810234a:	b083      	sub	sp, #12
 810234c:	af00      	add	r7, sp, #0
 810234e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8102350:	bf00      	nop
 8102352:	370c      	adds	r7, #12
 8102354:	46bd      	mov	sp, r7
 8102356:	f85d 7b04 	ldr.w	r7, [sp], #4
 810235a:	4770      	bx	lr

0810235c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810235c:	b580      	push	{r7, lr}
 810235e:	b082      	sub	sp, #8
 8102360:	af00      	add	r7, sp, #0
 8102362:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102364:	687b      	ldr	r3, [r7, #4]
 8102366:	2b00      	cmp	r3, #0
 8102368:	d101      	bne.n	810236e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810236a:	2301      	movs	r3, #1
 810236c:	e081      	b.n	8102472 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102374:	b2db      	uxtb	r3, r3
 8102376:	2b00      	cmp	r3, #0
 8102378:	d106      	bne.n	8102388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	2200      	movs	r2, #0
 810237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8102382:	6878      	ldr	r0, [r7, #4]
 8102384:	f7ff f83e 	bl	8101404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	2224      	movs	r2, #36	; 0x24
 810238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102390:	687b      	ldr	r3, [r7, #4]
 8102392:	681b      	ldr	r3, [r3, #0]
 8102394:	681a      	ldr	r2, [r3, #0]
 8102396:	687b      	ldr	r3, [r7, #4]
 8102398:	681b      	ldr	r3, [r3, #0]
 810239a:	f022 0201 	bic.w	r2, r2, #1
 810239e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81023a0:	687b      	ldr	r3, [r7, #4]
 81023a2:	685a      	ldr	r2, [r3, #4]
 81023a4:	687b      	ldr	r3, [r7, #4]
 81023a6:	681b      	ldr	r3, [r3, #0]
 81023a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 81023ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 81023ae:	687b      	ldr	r3, [r7, #4]
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	689a      	ldr	r2, [r3, #8]
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81023bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	68db      	ldr	r3, [r3, #12]
 81023c2:	2b01      	cmp	r3, #1
 81023c4:	d107      	bne.n	81023d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	689a      	ldr	r2, [r3, #8]
 81023ca:	687b      	ldr	r3, [r7, #4]
 81023cc:	681b      	ldr	r3, [r3, #0]
 81023ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81023d2:	609a      	str	r2, [r3, #8]
 81023d4:	e006      	b.n	81023e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	689a      	ldr	r2, [r3, #8]
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81023e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	68db      	ldr	r3, [r3, #12]
 81023e8:	2b02      	cmp	r3, #2
 81023ea:	d104      	bne.n	81023f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81023f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	681b      	ldr	r3, [r3, #0]
 81023fa:	685b      	ldr	r3, [r3, #4]
 81023fc:	687a      	ldr	r2, [r7, #4]
 81023fe:	6812      	ldr	r2, [r2, #0]
 8102400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8102408:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	681b      	ldr	r3, [r3, #0]
 810240e:	68da      	ldr	r2, [r3, #12]
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	681b      	ldr	r3, [r3, #0]
 8102414:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102418:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	691a      	ldr	r2, [r3, #16]
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	695b      	ldr	r3, [r3, #20]
 8102422:	ea42 0103 	orr.w	r1, r2, r3
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	699b      	ldr	r3, [r3, #24]
 810242a:	021a      	lsls	r2, r3, #8
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	430a      	orrs	r2, r1
 8102432:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102434:	687b      	ldr	r3, [r7, #4]
 8102436:	69d9      	ldr	r1, [r3, #28]
 8102438:	687b      	ldr	r3, [r7, #4]
 810243a:	6a1a      	ldr	r2, [r3, #32]
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	681b      	ldr	r3, [r3, #0]
 8102440:	430a      	orrs	r2, r1
 8102442:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	681a      	ldr	r2, [r3, #0]
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	681b      	ldr	r3, [r3, #0]
 810244e:	f042 0201 	orr.w	r2, r2, #1
 8102452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102454:	687b      	ldr	r3, [r7, #4]
 8102456:	2200      	movs	r2, #0
 8102458:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	2220      	movs	r2, #32
 810245e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	2200      	movs	r2, #0
 8102466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	2200      	movs	r2, #0
 810246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102470:	2300      	movs	r3, #0
}
 8102472:	4618      	mov	r0, r3
 8102474:	3708      	adds	r7, #8
 8102476:	46bd      	mov	sp, r7
 8102478:	bd80      	pop	{r7, pc}
	...

0810247c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810247c:	b580      	push	{r7, lr}
 810247e:	b088      	sub	sp, #32
 8102480:	af02      	add	r7, sp, #8
 8102482:	60f8      	str	r0, [r7, #12]
 8102484:	4608      	mov	r0, r1
 8102486:	4611      	mov	r1, r2
 8102488:	461a      	mov	r2, r3
 810248a:	4603      	mov	r3, r0
 810248c:	817b      	strh	r3, [r7, #10]
 810248e:	460b      	mov	r3, r1
 8102490:	813b      	strh	r3, [r7, #8]
 8102492:	4613      	mov	r3, r2
 8102494:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102496:	68fb      	ldr	r3, [r7, #12]
 8102498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810249c:	b2db      	uxtb	r3, r3
 810249e:	2b20      	cmp	r3, #32
 81024a0:	f040 80f9 	bne.w	8102696 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 81024a4:	6a3b      	ldr	r3, [r7, #32]
 81024a6:	2b00      	cmp	r3, #0
 81024a8:	d002      	beq.n	81024b0 <HAL_I2C_Mem_Write+0x34>
 81024aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81024ac:	2b00      	cmp	r3, #0
 81024ae:	d105      	bne.n	81024bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81024b0:	68fb      	ldr	r3, [r7, #12]
 81024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81024b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81024b8:	2301      	movs	r3, #1
 81024ba:	e0ed      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81024bc:	68fb      	ldr	r3, [r7, #12]
 81024be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81024c2:	2b01      	cmp	r3, #1
 81024c4:	d101      	bne.n	81024ca <HAL_I2C_Mem_Write+0x4e>
 81024c6:	2302      	movs	r3, #2
 81024c8:	e0e6      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
 81024ca:	68fb      	ldr	r3, [r7, #12]
 81024cc:	2201      	movs	r2, #1
 81024ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81024d2:	f7ff fc21 	bl	8101d18 <HAL_GetTick>
 81024d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81024d8:	697b      	ldr	r3, [r7, #20]
 81024da:	9300      	str	r3, [sp, #0]
 81024dc:	2319      	movs	r3, #25
 81024de:	2201      	movs	r2, #1
 81024e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81024e4:	68f8      	ldr	r0, [r7, #12]
 81024e6:	f000 fac3 	bl	8102a70 <I2C_WaitOnFlagUntilTimeout>
 81024ea:	4603      	mov	r3, r0
 81024ec:	2b00      	cmp	r3, #0
 81024ee:	d001      	beq.n	81024f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81024f0:	2301      	movs	r3, #1
 81024f2:	e0d1      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81024f4:	68fb      	ldr	r3, [r7, #12]
 81024f6:	2221      	movs	r2, #33	; 0x21
 81024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81024fc:	68fb      	ldr	r3, [r7, #12]
 81024fe:	2240      	movs	r2, #64	; 0x40
 8102500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102504:	68fb      	ldr	r3, [r7, #12]
 8102506:	2200      	movs	r2, #0
 8102508:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810250a:	68fb      	ldr	r3, [r7, #12]
 810250c:	6a3a      	ldr	r2, [r7, #32]
 810250e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102510:	68fb      	ldr	r3, [r7, #12]
 8102512:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102516:	68fb      	ldr	r3, [r7, #12]
 8102518:	2200      	movs	r2, #0
 810251a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810251c:	88f8      	ldrh	r0, [r7, #6]
 810251e:	893a      	ldrh	r2, [r7, #8]
 8102520:	8979      	ldrh	r1, [r7, #10]
 8102522:	697b      	ldr	r3, [r7, #20]
 8102524:	9301      	str	r3, [sp, #4]
 8102526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102528:	9300      	str	r3, [sp, #0]
 810252a:	4603      	mov	r3, r0
 810252c:	68f8      	ldr	r0, [r7, #12]
 810252e:	f000 f9d3 	bl	81028d8 <I2C_RequestMemoryWrite>
 8102532:	4603      	mov	r3, r0
 8102534:	2b00      	cmp	r3, #0
 8102536:	d005      	beq.n	8102544 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102538:	68fb      	ldr	r3, [r7, #12]
 810253a:	2200      	movs	r2, #0
 810253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102540:	2301      	movs	r3, #1
 8102542:	e0a9      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102544:	68fb      	ldr	r3, [r7, #12]
 8102546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102548:	b29b      	uxth	r3, r3
 810254a:	2bff      	cmp	r3, #255	; 0xff
 810254c:	d90e      	bls.n	810256c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810254e:	68fb      	ldr	r3, [r7, #12]
 8102550:	22ff      	movs	r2, #255	; 0xff
 8102552:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102554:	68fb      	ldr	r3, [r7, #12]
 8102556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102558:	b2da      	uxtb	r2, r3
 810255a:	8979      	ldrh	r1, [r7, #10]
 810255c:	2300      	movs	r3, #0
 810255e:	9300      	str	r3, [sp, #0]
 8102560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102564:	68f8      	ldr	r0, [r7, #12]
 8102566:	f000 fba5 	bl	8102cb4 <I2C_TransferConfig>
 810256a:	e00f      	b.n	810258c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810256c:	68fb      	ldr	r3, [r7, #12]
 810256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102570:	b29a      	uxth	r2, r3
 8102572:	68fb      	ldr	r3, [r7, #12]
 8102574:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102576:	68fb      	ldr	r3, [r7, #12]
 8102578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810257a:	b2da      	uxtb	r2, r3
 810257c:	8979      	ldrh	r1, [r7, #10]
 810257e:	2300      	movs	r3, #0
 8102580:	9300      	str	r3, [sp, #0]
 8102582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102586:	68f8      	ldr	r0, [r7, #12]
 8102588:	f000 fb94 	bl	8102cb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810258c:	697a      	ldr	r2, [r7, #20]
 810258e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102590:	68f8      	ldr	r0, [r7, #12]
 8102592:	f000 faad 	bl	8102af0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102596:	4603      	mov	r3, r0
 8102598:	2b00      	cmp	r3, #0
 810259a:	d001      	beq.n	81025a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 810259c:	2301      	movs	r3, #1
 810259e:	e07b      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 81025a0:	68fb      	ldr	r3, [r7, #12]
 81025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81025a4:	781a      	ldrb	r2, [r3, #0]
 81025a6:	68fb      	ldr	r3, [r7, #12]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81025ac:	68fb      	ldr	r3, [r7, #12]
 81025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81025b0:	1c5a      	adds	r2, r3, #1
 81025b2:	68fb      	ldr	r3, [r7, #12]
 81025b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 81025b6:	68fb      	ldr	r3, [r7, #12]
 81025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025ba:	b29b      	uxth	r3, r3
 81025bc:	3b01      	subs	r3, #1
 81025be:	b29a      	uxth	r2, r3
 81025c0:	68fb      	ldr	r3, [r7, #12]
 81025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81025c4:	68fb      	ldr	r3, [r7, #12]
 81025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025c8:	3b01      	subs	r3, #1
 81025ca:	b29a      	uxth	r2, r3
 81025cc:	68fb      	ldr	r3, [r7, #12]
 81025ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81025d0:	68fb      	ldr	r3, [r7, #12]
 81025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81025d4:	b29b      	uxth	r3, r3
 81025d6:	2b00      	cmp	r3, #0
 81025d8:	d034      	beq.n	8102644 <HAL_I2C_Mem_Write+0x1c8>
 81025da:	68fb      	ldr	r3, [r7, #12]
 81025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d130      	bne.n	8102644 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81025e2:	697b      	ldr	r3, [r7, #20]
 81025e4:	9300      	str	r3, [sp, #0]
 81025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81025e8:	2200      	movs	r2, #0
 81025ea:	2180      	movs	r1, #128	; 0x80
 81025ec:	68f8      	ldr	r0, [r7, #12]
 81025ee:	f000 fa3f 	bl	8102a70 <I2C_WaitOnFlagUntilTimeout>
 81025f2:	4603      	mov	r3, r0
 81025f4:	2b00      	cmp	r3, #0
 81025f6:	d001      	beq.n	81025fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81025f8:	2301      	movs	r3, #1
 81025fa:	e04d      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81025fc:	68fb      	ldr	r3, [r7, #12]
 81025fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102600:	b29b      	uxth	r3, r3
 8102602:	2bff      	cmp	r3, #255	; 0xff
 8102604:	d90e      	bls.n	8102624 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102606:	68fb      	ldr	r3, [r7, #12]
 8102608:	22ff      	movs	r2, #255	; 0xff
 810260a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810260c:	68fb      	ldr	r3, [r7, #12]
 810260e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102610:	b2da      	uxtb	r2, r3
 8102612:	8979      	ldrh	r1, [r7, #10]
 8102614:	2300      	movs	r3, #0
 8102616:	9300      	str	r3, [sp, #0]
 8102618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810261c:	68f8      	ldr	r0, [r7, #12]
 810261e:	f000 fb49 	bl	8102cb4 <I2C_TransferConfig>
 8102622:	e00f      	b.n	8102644 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102624:	68fb      	ldr	r3, [r7, #12]
 8102626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102628:	b29a      	uxth	r2, r3
 810262a:	68fb      	ldr	r3, [r7, #12]
 810262c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810262e:	68fb      	ldr	r3, [r7, #12]
 8102630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102632:	b2da      	uxtb	r2, r3
 8102634:	8979      	ldrh	r1, [r7, #10]
 8102636:	2300      	movs	r3, #0
 8102638:	9300      	str	r3, [sp, #0]
 810263a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810263e:	68f8      	ldr	r0, [r7, #12]
 8102640:	f000 fb38 	bl	8102cb4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8102644:	68fb      	ldr	r3, [r7, #12]
 8102646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102648:	b29b      	uxth	r3, r3
 810264a:	2b00      	cmp	r3, #0
 810264c:	d19e      	bne.n	810258c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810264e:	697a      	ldr	r2, [r7, #20]
 8102650:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102652:	68f8      	ldr	r0, [r7, #12]
 8102654:	f000 fa8c 	bl	8102b70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102658:	4603      	mov	r3, r0
 810265a:	2b00      	cmp	r3, #0
 810265c:	d001      	beq.n	8102662 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810265e:	2301      	movs	r3, #1
 8102660:	e01a      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102662:	68fb      	ldr	r3, [r7, #12]
 8102664:	681b      	ldr	r3, [r3, #0]
 8102666:	2220      	movs	r2, #32
 8102668:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810266a:	68fb      	ldr	r3, [r7, #12]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	6859      	ldr	r1, [r3, #4]
 8102670:	68fb      	ldr	r3, [r7, #12]
 8102672:	681a      	ldr	r2, [r3, #0]
 8102674:	4b0a      	ldr	r3, [pc, #40]	; (81026a0 <HAL_I2C_Mem_Write+0x224>)
 8102676:	400b      	ands	r3, r1
 8102678:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810267a:	68fb      	ldr	r3, [r7, #12]
 810267c:	2220      	movs	r2, #32
 810267e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102682:	68fb      	ldr	r3, [r7, #12]
 8102684:	2200      	movs	r2, #0
 8102686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810268a:	68fb      	ldr	r3, [r7, #12]
 810268c:	2200      	movs	r2, #0
 810268e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102692:	2300      	movs	r3, #0
 8102694:	e000      	b.n	8102698 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8102696:	2302      	movs	r3, #2
  }
}
 8102698:	4618      	mov	r0, r3
 810269a:	3718      	adds	r7, #24
 810269c:	46bd      	mov	sp, r7
 810269e:	bd80      	pop	{r7, pc}
 81026a0:	fe00e800 	.word	0xfe00e800

081026a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81026a4:	b580      	push	{r7, lr}
 81026a6:	b088      	sub	sp, #32
 81026a8:	af02      	add	r7, sp, #8
 81026aa:	60f8      	str	r0, [r7, #12]
 81026ac:	4608      	mov	r0, r1
 81026ae:	4611      	mov	r1, r2
 81026b0:	461a      	mov	r2, r3
 81026b2:	4603      	mov	r3, r0
 81026b4:	817b      	strh	r3, [r7, #10]
 81026b6:	460b      	mov	r3, r1
 81026b8:	813b      	strh	r3, [r7, #8]
 81026ba:	4613      	mov	r3, r2
 81026bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81026be:	68fb      	ldr	r3, [r7, #12]
 81026c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81026c4:	b2db      	uxtb	r3, r3
 81026c6:	2b20      	cmp	r3, #32
 81026c8:	f040 80fd 	bne.w	81028c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81026cc:	6a3b      	ldr	r3, [r7, #32]
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d002      	beq.n	81026d8 <HAL_I2C_Mem_Read+0x34>
 81026d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81026d4:	2b00      	cmp	r3, #0
 81026d6:	d105      	bne.n	81026e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81026d8:	68fb      	ldr	r3, [r7, #12]
 81026da:	f44f 7200 	mov.w	r2, #512	; 0x200
 81026de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81026e0:	2301      	movs	r3, #1
 81026e2:	e0f1      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81026e4:	68fb      	ldr	r3, [r7, #12]
 81026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81026ea:	2b01      	cmp	r3, #1
 81026ec:	d101      	bne.n	81026f2 <HAL_I2C_Mem_Read+0x4e>
 81026ee:	2302      	movs	r3, #2
 81026f0:	e0ea      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
 81026f2:	68fb      	ldr	r3, [r7, #12]
 81026f4:	2201      	movs	r2, #1
 81026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81026fa:	f7ff fb0d 	bl	8101d18 <HAL_GetTick>
 81026fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102700:	697b      	ldr	r3, [r7, #20]
 8102702:	9300      	str	r3, [sp, #0]
 8102704:	2319      	movs	r3, #25
 8102706:	2201      	movs	r2, #1
 8102708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 810270c:	68f8      	ldr	r0, [r7, #12]
 810270e:	f000 f9af 	bl	8102a70 <I2C_WaitOnFlagUntilTimeout>
 8102712:	4603      	mov	r3, r0
 8102714:	2b00      	cmp	r3, #0
 8102716:	d001      	beq.n	810271c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8102718:	2301      	movs	r3, #1
 810271a:	e0d5      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	2222      	movs	r2, #34	; 0x22
 8102720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102724:	68fb      	ldr	r3, [r7, #12]
 8102726:	2240      	movs	r2, #64	; 0x40
 8102728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810272c:	68fb      	ldr	r3, [r7, #12]
 810272e:	2200      	movs	r2, #0
 8102730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8102732:	68fb      	ldr	r3, [r7, #12]
 8102734:	6a3a      	ldr	r2, [r7, #32]
 8102736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102738:	68fb      	ldr	r3, [r7, #12]
 810273a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810273c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810273e:	68fb      	ldr	r3, [r7, #12]
 8102740:	2200      	movs	r2, #0
 8102742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102744:	88f8      	ldrh	r0, [r7, #6]
 8102746:	893a      	ldrh	r2, [r7, #8]
 8102748:	8979      	ldrh	r1, [r7, #10]
 810274a:	697b      	ldr	r3, [r7, #20]
 810274c:	9301      	str	r3, [sp, #4]
 810274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102750:	9300      	str	r3, [sp, #0]
 8102752:	4603      	mov	r3, r0
 8102754:	68f8      	ldr	r0, [r7, #12]
 8102756:	f000 f913 	bl	8102980 <I2C_RequestMemoryRead>
 810275a:	4603      	mov	r3, r0
 810275c:	2b00      	cmp	r3, #0
 810275e:	d005      	beq.n	810276c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102760:	68fb      	ldr	r3, [r7, #12]
 8102762:	2200      	movs	r2, #0
 8102764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102768:	2301      	movs	r3, #1
 810276a:	e0ad      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810276c:	68fb      	ldr	r3, [r7, #12]
 810276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102770:	b29b      	uxth	r3, r3
 8102772:	2bff      	cmp	r3, #255	; 0xff
 8102774:	d90e      	bls.n	8102794 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102776:	68fb      	ldr	r3, [r7, #12]
 8102778:	22ff      	movs	r2, #255	; 0xff
 810277a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 810277c:	68fb      	ldr	r3, [r7, #12]
 810277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102780:	b2da      	uxtb	r2, r3
 8102782:	8979      	ldrh	r1, [r7, #10]
 8102784:	4b52      	ldr	r3, [pc, #328]	; (81028d0 <HAL_I2C_Mem_Read+0x22c>)
 8102786:	9300      	str	r3, [sp, #0]
 8102788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810278c:	68f8      	ldr	r0, [r7, #12]
 810278e:	f000 fa91 	bl	8102cb4 <I2C_TransferConfig>
 8102792:	e00f      	b.n	81027b4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102794:	68fb      	ldr	r3, [r7, #12]
 8102796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102798:	b29a      	uxth	r2, r3
 810279a:	68fb      	ldr	r3, [r7, #12]
 810279c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810279e:	68fb      	ldr	r3, [r7, #12]
 81027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027a2:	b2da      	uxtb	r2, r3
 81027a4:	8979      	ldrh	r1, [r7, #10]
 81027a6:	4b4a      	ldr	r3, [pc, #296]	; (81028d0 <HAL_I2C_Mem_Read+0x22c>)
 81027a8:	9300      	str	r3, [sp, #0]
 81027aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81027ae:	68f8      	ldr	r0, [r7, #12]
 81027b0:	f000 fa80 	bl	8102cb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 81027b4:	697b      	ldr	r3, [r7, #20]
 81027b6:	9300      	str	r3, [sp, #0]
 81027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81027ba:	2200      	movs	r2, #0
 81027bc:	2104      	movs	r1, #4
 81027be:	68f8      	ldr	r0, [r7, #12]
 81027c0:	f000 f956 	bl	8102a70 <I2C_WaitOnFlagUntilTimeout>
 81027c4:	4603      	mov	r3, r0
 81027c6:	2b00      	cmp	r3, #0
 81027c8:	d001      	beq.n	81027ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81027ca:	2301      	movs	r3, #1
 81027cc:	e07c      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81027ce:	68fb      	ldr	r3, [r7, #12]
 81027d0:	681b      	ldr	r3, [r3, #0]
 81027d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81027d4:	68fb      	ldr	r3, [r7, #12]
 81027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027d8:	b2d2      	uxtb	r2, r2
 81027da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81027dc:	68fb      	ldr	r3, [r7, #12]
 81027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81027e0:	1c5a      	adds	r2, r3, #1
 81027e2:	68fb      	ldr	r3, [r7, #12]
 81027e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81027e6:	68fb      	ldr	r3, [r7, #12]
 81027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81027ea:	3b01      	subs	r3, #1
 81027ec:	b29a      	uxth	r2, r3
 81027ee:	68fb      	ldr	r3, [r7, #12]
 81027f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81027f2:	68fb      	ldr	r3, [r7, #12]
 81027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81027f6:	b29b      	uxth	r3, r3
 81027f8:	3b01      	subs	r3, #1
 81027fa:	b29a      	uxth	r2, r3
 81027fc:	68fb      	ldr	r3, [r7, #12]
 81027fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102800:	68fb      	ldr	r3, [r7, #12]
 8102802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102804:	b29b      	uxth	r3, r3
 8102806:	2b00      	cmp	r3, #0
 8102808:	d034      	beq.n	8102874 <HAL_I2C_Mem_Read+0x1d0>
 810280a:	68fb      	ldr	r3, [r7, #12]
 810280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810280e:	2b00      	cmp	r3, #0
 8102810:	d130      	bne.n	8102874 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102812:	697b      	ldr	r3, [r7, #20]
 8102814:	9300      	str	r3, [sp, #0]
 8102816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102818:	2200      	movs	r2, #0
 810281a:	2180      	movs	r1, #128	; 0x80
 810281c:	68f8      	ldr	r0, [r7, #12]
 810281e:	f000 f927 	bl	8102a70 <I2C_WaitOnFlagUntilTimeout>
 8102822:	4603      	mov	r3, r0
 8102824:	2b00      	cmp	r3, #0
 8102826:	d001      	beq.n	810282c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102828:	2301      	movs	r3, #1
 810282a:	e04d      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810282c:	68fb      	ldr	r3, [r7, #12]
 810282e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102830:	b29b      	uxth	r3, r3
 8102832:	2bff      	cmp	r3, #255	; 0xff
 8102834:	d90e      	bls.n	8102854 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102836:	68fb      	ldr	r3, [r7, #12]
 8102838:	22ff      	movs	r2, #255	; 0xff
 810283a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810283c:	68fb      	ldr	r3, [r7, #12]
 810283e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102840:	b2da      	uxtb	r2, r3
 8102842:	8979      	ldrh	r1, [r7, #10]
 8102844:	2300      	movs	r3, #0
 8102846:	9300      	str	r3, [sp, #0]
 8102848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810284c:	68f8      	ldr	r0, [r7, #12]
 810284e:	f000 fa31 	bl	8102cb4 <I2C_TransferConfig>
 8102852:	e00f      	b.n	8102874 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102858:	b29a      	uxth	r2, r3
 810285a:	68fb      	ldr	r3, [r7, #12]
 810285c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810285e:	68fb      	ldr	r3, [r7, #12]
 8102860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102862:	b2da      	uxtb	r2, r3
 8102864:	8979      	ldrh	r1, [r7, #10]
 8102866:	2300      	movs	r3, #0
 8102868:	9300      	str	r3, [sp, #0]
 810286a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810286e:	68f8      	ldr	r0, [r7, #12]
 8102870:	f000 fa20 	bl	8102cb4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8102874:	68fb      	ldr	r3, [r7, #12]
 8102876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102878:	b29b      	uxth	r3, r3
 810287a:	2b00      	cmp	r3, #0
 810287c:	d19a      	bne.n	81027b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810287e:	697a      	ldr	r2, [r7, #20]
 8102880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102882:	68f8      	ldr	r0, [r7, #12]
 8102884:	f000 f974 	bl	8102b70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102888:	4603      	mov	r3, r0
 810288a:	2b00      	cmp	r3, #0
 810288c:	d001      	beq.n	8102892 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810288e:	2301      	movs	r3, #1
 8102890:	e01a      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102892:	68fb      	ldr	r3, [r7, #12]
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	2220      	movs	r2, #32
 8102898:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810289a:	68fb      	ldr	r3, [r7, #12]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	6859      	ldr	r1, [r3, #4]
 81028a0:	68fb      	ldr	r3, [r7, #12]
 81028a2:	681a      	ldr	r2, [r3, #0]
 81028a4:	4b0b      	ldr	r3, [pc, #44]	; (81028d4 <HAL_I2C_Mem_Read+0x230>)
 81028a6:	400b      	ands	r3, r1
 81028a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	2220      	movs	r2, #32
 81028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81028b2:	68fb      	ldr	r3, [r7, #12]
 81028b4:	2200      	movs	r2, #0
 81028b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81028ba:	68fb      	ldr	r3, [r7, #12]
 81028bc:	2200      	movs	r2, #0
 81028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81028c2:	2300      	movs	r3, #0
 81028c4:	e000      	b.n	81028c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81028c6:	2302      	movs	r3, #2
  }
}
 81028c8:	4618      	mov	r0, r3
 81028ca:	3718      	adds	r7, #24
 81028cc:	46bd      	mov	sp, r7
 81028ce:	bd80      	pop	{r7, pc}
 81028d0:	80002400 	.word	0x80002400
 81028d4:	fe00e800 	.word	0xfe00e800

081028d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b086      	sub	sp, #24
 81028dc:	af02      	add	r7, sp, #8
 81028de:	60f8      	str	r0, [r7, #12]
 81028e0:	4608      	mov	r0, r1
 81028e2:	4611      	mov	r1, r2
 81028e4:	461a      	mov	r2, r3
 81028e6:	4603      	mov	r3, r0
 81028e8:	817b      	strh	r3, [r7, #10]
 81028ea:	460b      	mov	r3, r1
 81028ec:	813b      	strh	r3, [r7, #8]
 81028ee:	4613      	mov	r3, r2
 81028f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81028f2:	88fb      	ldrh	r3, [r7, #6]
 81028f4:	b2da      	uxtb	r2, r3
 81028f6:	8979      	ldrh	r1, [r7, #10]
 81028f8:	4b20      	ldr	r3, [pc, #128]	; (810297c <I2C_RequestMemoryWrite+0xa4>)
 81028fa:	9300      	str	r3, [sp, #0]
 81028fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102900:	68f8      	ldr	r0, [r7, #12]
 8102902:	f000 f9d7 	bl	8102cb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102906:	69fa      	ldr	r2, [r7, #28]
 8102908:	69b9      	ldr	r1, [r7, #24]
 810290a:	68f8      	ldr	r0, [r7, #12]
 810290c:	f000 f8f0 	bl	8102af0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102910:	4603      	mov	r3, r0
 8102912:	2b00      	cmp	r3, #0
 8102914:	d001      	beq.n	810291a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8102916:	2301      	movs	r3, #1
 8102918:	e02c      	b.n	8102974 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810291a:	88fb      	ldrh	r3, [r7, #6]
 810291c:	2b01      	cmp	r3, #1
 810291e:	d105      	bne.n	810292c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102920:	893b      	ldrh	r3, [r7, #8]
 8102922:	b2da      	uxtb	r2, r3
 8102924:	68fb      	ldr	r3, [r7, #12]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	629a      	str	r2, [r3, #40]	; 0x28
 810292a:	e015      	b.n	8102958 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810292c:	893b      	ldrh	r3, [r7, #8]
 810292e:	0a1b      	lsrs	r3, r3, #8
 8102930:	b29b      	uxth	r3, r3
 8102932:	b2da      	uxtb	r2, r3
 8102934:	68fb      	ldr	r3, [r7, #12]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810293a:	69fa      	ldr	r2, [r7, #28]
 810293c:	69b9      	ldr	r1, [r7, #24]
 810293e:	68f8      	ldr	r0, [r7, #12]
 8102940:	f000 f8d6 	bl	8102af0 <I2C_WaitOnTXISFlagUntilTimeout>
 8102944:	4603      	mov	r3, r0
 8102946:	2b00      	cmp	r3, #0
 8102948:	d001      	beq.n	810294e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810294a:	2301      	movs	r3, #1
 810294c:	e012      	b.n	8102974 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810294e:	893b      	ldrh	r3, [r7, #8]
 8102950:	b2da      	uxtb	r2, r3
 8102952:	68fb      	ldr	r3, [r7, #12]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102958:	69fb      	ldr	r3, [r7, #28]
 810295a:	9300      	str	r3, [sp, #0]
 810295c:	69bb      	ldr	r3, [r7, #24]
 810295e:	2200      	movs	r2, #0
 8102960:	2180      	movs	r1, #128	; 0x80
 8102962:	68f8      	ldr	r0, [r7, #12]
 8102964:	f000 f884 	bl	8102a70 <I2C_WaitOnFlagUntilTimeout>
 8102968:	4603      	mov	r3, r0
 810296a:	2b00      	cmp	r3, #0
 810296c:	d001      	beq.n	8102972 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810296e:	2301      	movs	r3, #1
 8102970:	e000      	b.n	8102974 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102972:	2300      	movs	r3, #0
}
 8102974:	4618      	mov	r0, r3
 8102976:	3710      	adds	r7, #16
 8102978:	46bd      	mov	sp, r7
 810297a:	bd80      	pop	{r7, pc}
 810297c:	80002000 	.word	0x80002000

08102980 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102980:	b580      	push	{r7, lr}
 8102982:	b086      	sub	sp, #24
 8102984:	af02      	add	r7, sp, #8
 8102986:	60f8      	str	r0, [r7, #12]
 8102988:	4608      	mov	r0, r1
 810298a:	4611      	mov	r1, r2
 810298c:	461a      	mov	r2, r3
 810298e:	4603      	mov	r3, r0
 8102990:	817b      	strh	r3, [r7, #10]
 8102992:	460b      	mov	r3, r1
 8102994:	813b      	strh	r3, [r7, #8]
 8102996:	4613      	mov	r3, r2
 8102998:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810299a:	88fb      	ldrh	r3, [r7, #6]
 810299c:	b2da      	uxtb	r2, r3
 810299e:	8979      	ldrh	r1, [r7, #10]
 81029a0:	4b20      	ldr	r3, [pc, #128]	; (8102a24 <I2C_RequestMemoryRead+0xa4>)
 81029a2:	9300      	str	r3, [sp, #0]
 81029a4:	2300      	movs	r3, #0
 81029a6:	68f8      	ldr	r0, [r7, #12]
 81029a8:	f000 f984 	bl	8102cb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81029ac:	69fa      	ldr	r2, [r7, #28]
 81029ae:	69b9      	ldr	r1, [r7, #24]
 81029b0:	68f8      	ldr	r0, [r7, #12]
 81029b2:	f000 f89d 	bl	8102af0 <I2C_WaitOnTXISFlagUntilTimeout>
 81029b6:	4603      	mov	r3, r0
 81029b8:	2b00      	cmp	r3, #0
 81029ba:	d001      	beq.n	81029c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 81029bc:	2301      	movs	r3, #1
 81029be:	e02c      	b.n	8102a1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81029c0:	88fb      	ldrh	r3, [r7, #6]
 81029c2:	2b01      	cmp	r3, #1
 81029c4:	d105      	bne.n	81029d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029c6:	893b      	ldrh	r3, [r7, #8]
 81029c8:	b2da      	uxtb	r2, r3
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	629a      	str	r2, [r3, #40]	; 0x28
 81029d0:	e015      	b.n	81029fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81029d2:	893b      	ldrh	r3, [r7, #8]
 81029d4:	0a1b      	lsrs	r3, r3, #8
 81029d6:	b29b      	uxth	r3, r3
 81029d8:	b2da      	uxtb	r2, r3
 81029da:	68fb      	ldr	r3, [r7, #12]
 81029dc:	681b      	ldr	r3, [r3, #0]
 81029de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81029e0:	69fa      	ldr	r2, [r7, #28]
 81029e2:	69b9      	ldr	r1, [r7, #24]
 81029e4:	68f8      	ldr	r0, [r7, #12]
 81029e6:	f000 f883 	bl	8102af0 <I2C_WaitOnTXISFlagUntilTimeout>
 81029ea:	4603      	mov	r3, r0
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d001      	beq.n	81029f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81029f0:	2301      	movs	r3, #1
 81029f2:	e012      	b.n	8102a1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029f4:	893b      	ldrh	r3, [r7, #8]
 81029f6:	b2da      	uxtb	r2, r3
 81029f8:	68fb      	ldr	r3, [r7, #12]
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81029fe:	69fb      	ldr	r3, [r7, #28]
 8102a00:	9300      	str	r3, [sp, #0]
 8102a02:	69bb      	ldr	r3, [r7, #24]
 8102a04:	2200      	movs	r2, #0
 8102a06:	2140      	movs	r1, #64	; 0x40
 8102a08:	68f8      	ldr	r0, [r7, #12]
 8102a0a:	f000 f831 	bl	8102a70 <I2C_WaitOnFlagUntilTimeout>
 8102a0e:	4603      	mov	r3, r0
 8102a10:	2b00      	cmp	r3, #0
 8102a12:	d001      	beq.n	8102a18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102a14:	2301      	movs	r3, #1
 8102a16:	e000      	b.n	8102a1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102a18:	2300      	movs	r3, #0
}
 8102a1a:	4618      	mov	r0, r3
 8102a1c:	3710      	adds	r7, #16
 8102a1e:	46bd      	mov	sp, r7
 8102a20:	bd80      	pop	{r7, pc}
 8102a22:	bf00      	nop
 8102a24:	80002000 	.word	0x80002000

08102a28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102a28:	b480      	push	{r7}
 8102a2a:	b083      	sub	sp, #12
 8102a2c:	af00      	add	r7, sp, #0
 8102a2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	699b      	ldr	r3, [r3, #24]
 8102a36:	f003 0302 	and.w	r3, r3, #2
 8102a3a:	2b02      	cmp	r3, #2
 8102a3c:	d103      	bne.n	8102a46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	2200      	movs	r2, #0
 8102a44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	699b      	ldr	r3, [r3, #24]
 8102a4c:	f003 0301 	and.w	r3, r3, #1
 8102a50:	2b01      	cmp	r3, #1
 8102a52:	d007      	beq.n	8102a64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	699a      	ldr	r2, [r3, #24]
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	f042 0201 	orr.w	r2, r2, #1
 8102a62:	619a      	str	r2, [r3, #24]
  }
}
 8102a64:	bf00      	nop
 8102a66:	370c      	adds	r7, #12
 8102a68:	46bd      	mov	sp, r7
 8102a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a6e:	4770      	bx	lr

08102a70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8102a70:	b580      	push	{r7, lr}
 8102a72:	b084      	sub	sp, #16
 8102a74:	af00      	add	r7, sp, #0
 8102a76:	60f8      	str	r0, [r7, #12]
 8102a78:	60b9      	str	r1, [r7, #8]
 8102a7a:	603b      	str	r3, [r7, #0]
 8102a7c:	4613      	mov	r3, r2
 8102a7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102a80:	e022      	b.n	8102ac8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102a82:	683b      	ldr	r3, [r7, #0]
 8102a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a88:	d01e      	beq.n	8102ac8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102a8a:	f7ff f945 	bl	8101d18 <HAL_GetTick>
 8102a8e:	4602      	mov	r2, r0
 8102a90:	69bb      	ldr	r3, [r7, #24]
 8102a92:	1ad3      	subs	r3, r2, r3
 8102a94:	683a      	ldr	r2, [r7, #0]
 8102a96:	429a      	cmp	r2, r3
 8102a98:	d302      	bcc.n	8102aa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8102a9a:	683b      	ldr	r3, [r7, #0]
 8102a9c:	2b00      	cmp	r3, #0
 8102a9e:	d113      	bne.n	8102ac8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102aa0:	68fb      	ldr	r3, [r7, #12]
 8102aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102aa4:	f043 0220 	orr.w	r2, r3, #32
 8102aa8:	68fb      	ldr	r3, [r7, #12]
 8102aaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102aac:	68fb      	ldr	r3, [r7, #12]
 8102aae:	2220      	movs	r2, #32
 8102ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102ab4:	68fb      	ldr	r3, [r7, #12]
 8102ab6:	2200      	movs	r2, #0
 8102ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102abc:	68fb      	ldr	r3, [r7, #12]
 8102abe:	2200      	movs	r2, #0
 8102ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102ac4:	2301      	movs	r3, #1
 8102ac6:	e00f      	b.n	8102ae8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102ac8:	68fb      	ldr	r3, [r7, #12]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	699a      	ldr	r2, [r3, #24]
 8102ace:	68bb      	ldr	r3, [r7, #8]
 8102ad0:	4013      	ands	r3, r2
 8102ad2:	68ba      	ldr	r2, [r7, #8]
 8102ad4:	429a      	cmp	r2, r3
 8102ad6:	bf0c      	ite	eq
 8102ad8:	2301      	moveq	r3, #1
 8102ada:	2300      	movne	r3, #0
 8102adc:	b2db      	uxtb	r3, r3
 8102ade:	461a      	mov	r2, r3
 8102ae0:	79fb      	ldrb	r3, [r7, #7]
 8102ae2:	429a      	cmp	r2, r3
 8102ae4:	d0cd      	beq.n	8102a82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102ae6:	2300      	movs	r3, #0
}
 8102ae8:	4618      	mov	r0, r3
 8102aea:	3710      	adds	r7, #16
 8102aec:	46bd      	mov	sp, r7
 8102aee:	bd80      	pop	{r7, pc}

08102af0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102af0:	b580      	push	{r7, lr}
 8102af2:	b084      	sub	sp, #16
 8102af4:	af00      	add	r7, sp, #0
 8102af6:	60f8      	str	r0, [r7, #12]
 8102af8:	60b9      	str	r1, [r7, #8]
 8102afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102afc:	e02c      	b.n	8102b58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102afe:	687a      	ldr	r2, [r7, #4]
 8102b00:	68b9      	ldr	r1, [r7, #8]
 8102b02:	68f8      	ldr	r0, [r7, #12]
 8102b04:	f000 f870 	bl	8102be8 <I2C_IsAcknowledgeFailed>
 8102b08:	4603      	mov	r3, r0
 8102b0a:	2b00      	cmp	r3, #0
 8102b0c:	d001      	beq.n	8102b12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102b0e:	2301      	movs	r3, #1
 8102b10:	e02a      	b.n	8102b68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102b12:	68bb      	ldr	r3, [r7, #8]
 8102b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b18:	d01e      	beq.n	8102b58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b1a:	f7ff f8fd 	bl	8101d18 <HAL_GetTick>
 8102b1e:	4602      	mov	r2, r0
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	1ad3      	subs	r3, r2, r3
 8102b24:	68ba      	ldr	r2, [r7, #8]
 8102b26:	429a      	cmp	r2, r3
 8102b28:	d302      	bcc.n	8102b30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102b2a:	68bb      	ldr	r3, [r7, #8]
 8102b2c:	2b00      	cmp	r3, #0
 8102b2e:	d113      	bne.n	8102b58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b30:	68fb      	ldr	r3, [r7, #12]
 8102b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b34:	f043 0220 	orr.w	r2, r3, #32
 8102b38:	68fb      	ldr	r3, [r7, #12]
 8102b3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102b3c:	68fb      	ldr	r3, [r7, #12]
 8102b3e:	2220      	movs	r2, #32
 8102b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b44:	68fb      	ldr	r3, [r7, #12]
 8102b46:	2200      	movs	r2, #0
 8102b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b4c:	68fb      	ldr	r3, [r7, #12]
 8102b4e:	2200      	movs	r2, #0
 8102b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102b54:	2301      	movs	r3, #1
 8102b56:	e007      	b.n	8102b68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102b58:	68fb      	ldr	r3, [r7, #12]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	699b      	ldr	r3, [r3, #24]
 8102b5e:	f003 0302 	and.w	r3, r3, #2
 8102b62:	2b02      	cmp	r3, #2
 8102b64:	d1cb      	bne.n	8102afe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102b66:	2300      	movs	r3, #0
}
 8102b68:	4618      	mov	r0, r3
 8102b6a:	3710      	adds	r7, #16
 8102b6c:	46bd      	mov	sp, r7
 8102b6e:	bd80      	pop	{r7, pc}

08102b70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102b70:	b580      	push	{r7, lr}
 8102b72:	b084      	sub	sp, #16
 8102b74:	af00      	add	r7, sp, #0
 8102b76:	60f8      	str	r0, [r7, #12]
 8102b78:	60b9      	str	r1, [r7, #8]
 8102b7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102b7c:	e028      	b.n	8102bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102b7e:	687a      	ldr	r2, [r7, #4]
 8102b80:	68b9      	ldr	r1, [r7, #8]
 8102b82:	68f8      	ldr	r0, [r7, #12]
 8102b84:	f000 f830 	bl	8102be8 <I2C_IsAcknowledgeFailed>
 8102b88:	4603      	mov	r3, r0
 8102b8a:	2b00      	cmp	r3, #0
 8102b8c:	d001      	beq.n	8102b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102b8e:	2301      	movs	r3, #1
 8102b90:	e026      	b.n	8102be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b92:	f7ff f8c1 	bl	8101d18 <HAL_GetTick>
 8102b96:	4602      	mov	r2, r0
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	1ad3      	subs	r3, r2, r3
 8102b9c:	68ba      	ldr	r2, [r7, #8]
 8102b9e:	429a      	cmp	r2, r3
 8102ba0:	d302      	bcc.n	8102ba8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102ba2:	68bb      	ldr	r3, [r7, #8]
 8102ba4:	2b00      	cmp	r3, #0
 8102ba6:	d113      	bne.n	8102bd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102bac:	f043 0220 	orr.w	r2, r3, #32
 8102bb0:	68fb      	ldr	r3, [r7, #12]
 8102bb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102bb4:	68fb      	ldr	r3, [r7, #12]
 8102bb6:	2220      	movs	r2, #32
 8102bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	2200      	movs	r2, #0
 8102bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102bc4:	68fb      	ldr	r3, [r7, #12]
 8102bc6:	2200      	movs	r2, #0
 8102bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102bcc:	2301      	movs	r3, #1
 8102bce:	e007      	b.n	8102be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102bd0:	68fb      	ldr	r3, [r7, #12]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	699b      	ldr	r3, [r3, #24]
 8102bd6:	f003 0320 	and.w	r3, r3, #32
 8102bda:	2b20      	cmp	r3, #32
 8102bdc:	d1cf      	bne.n	8102b7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102bde:	2300      	movs	r3, #0
}
 8102be0:	4618      	mov	r0, r3
 8102be2:	3710      	adds	r7, #16
 8102be4:	46bd      	mov	sp, r7
 8102be6:	bd80      	pop	{r7, pc}

08102be8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102be8:	b580      	push	{r7, lr}
 8102bea:	b084      	sub	sp, #16
 8102bec:	af00      	add	r7, sp, #0
 8102bee:	60f8      	str	r0, [r7, #12]
 8102bf0:	60b9      	str	r1, [r7, #8]
 8102bf2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102bf4:	68fb      	ldr	r3, [r7, #12]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	699b      	ldr	r3, [r3, #24]
 8102bfa:	f003 0310 	and.w	r3, r3, #16
 8102bfe:	2b10      	cmp	r3, #16
 8102c00:	d151      	bne.n	8102ca6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c02:	e022      	b.n	8102c4a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102c04:	68bb      	ldr	r3, [r7, #8]
 8102c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102c0a:	d01e      	beq.n	8102c4a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102c0c:	f7ff f884 	bl	8101d18 <HAL_GetTick>
 8102c10:	4602      	mov	r2, r0
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	1ad3      	subs	r3, r2, r3
 8102c16:	68ba      	ldr	r2, [r7, #8]
 8102c18:	429a      	cmp	r2, r3
 8102c1a:	d302      	bcc.n	8102c22 <I2C_IsAcknowledgeFailed+0x3a>
 8102c1c:	68bb      	ldr	r3, [r7, #8]
 8102c1e:	2b00      	cmp	r3, #0
 8102c20:	d113      	bne.n	8102c4a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c22:	68fb      	ldr	r3, [r7, #12]
 8102c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c26:	f043 0220 	orr.w	r2, r3, #32
 8102c2a:	68fb      	ldr	r3, [r7, #12]
 8102c2c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102c2e:	68fb      	ldr	r3, [r7, #12]
 8102c30:	2220      	movs	r2, #32
 8102c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c36:	68fb      	ldr	r3, [r7, #12]
 8102c38:	2200      	movs	r2, #0
 8102c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	2200      	movs	r2, #0
 8102c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102c46:	2301      	movs	r3, #1
 8102c48:	e02e      	b.n	8102ca8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c4a:	68fb      	ldr	r3, [r7, #12]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	699b      	ldr	r3, [r3, #24]
 8102c50:	f003 0320 	and.w	r3, r3, #32
 8102c54:	2b20      	cmp	r3, #32
 8102c56:	d1d5      	bne.n	8102c04 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	681b      	ldr	r3, [r3, #0]
 8102c5c:	2210      	movs	r2, #16
 8102c5e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102c60:	68fb      	ldr	r3, [r7, #12]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	2220      	movs	r2, #32
 8102c66:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102c68:	68f8      	ldr	r0, [r7, #12]
 8102c6a:	f7ff fedd 	bl	8102a28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102c6e:	68fb      	ldr	r3, [r7, #12]
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	6859      	ldr	r1, [r3, #4]
 8102c74:	68fb      	ldr	r3, [r7, #12]
 8102c76:	681a      	ldr	r2, [r3, #0]
 8102c78:	4b0d      	ldr	r3, [pc, #52]	; (8102cb0 <I2C_IsAcknowledgeFailed+0xc8>)
 8102c7a:	400b      	ands	r3, r1
 8102c7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8102c7e:	68fb      	ldr	r3, [r7, #12]
 8102c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c82:	f043 0204 	orr.w	r2, r3, #4
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102c8a:	68fb      	ldr	r3, [r7, #12]
 8102c8c:	2220      	movs	r2, #32
 8102c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c92:	68fb      	ldr	r3, [r7, #12]
 8102c94:	2200      	movs	r2, #0
 8102c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102c9a:	68fb      	ldr	r3, [r7, #12]
 8102c9c:	2200      	movs	r2, #0
 8102c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102ca2:	2301      	movs	r3, #1
 8102ca4:	e000      	b.n	8102ca8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102ca6:	2300      	movs	r3, #0
}
 8102ca8:	4618      	mov	r0, r3
 8102caa:	3710      	adds	r7, #16
 8102cac:	46bd      	mov	sp, r7
 8102cae:	bd80      	pop	{r7, pc}
 8102cb0:	fe00e800 	.word	0xfe00e800

08102cb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8102cb4:	b480      	push	{r7}
 8102cb6:	b085      	sub	sp, #20
 8102cb8:	af00      	add	r7, sp, #0
 8102cba:	60f8      	str	r0, [r7, #12]
 8102cbc:	607b      	str	r3, [r7, #4]
 8102cbe:	460b      	mov	r3, r1
 8102cc0:	817b      	strh	r3, [r7, #10]
 8102cc2:	4613      	mov	r3, r2
 8102cc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8102cc6:	68fb      	ldr	r3, [r7, #12]
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	685a      	ldr	r2, [r3, #4]
 8102ccc:	69bb      	ldr	r3, [r7, #24]
 8102cce:	0d5b      	lsrs	r3, r3, #21
 8102cd0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102cd4:	4b0d      	ldr	r3, [pc, #52]	; (8102d0c <I2C_TransferConfig+0x58>)
 8102cd6:	430b      	orrs	r3, r1
 8102cd8:	43db      	mvns	r3, r3
 8102cda:	ea02 0103 	and.w	r1, r2, r3
 8102cde:	897b      	ldrh	r3, [r7, #10]
 8102ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8102ce4:	7a7b      	ldrb	r3, [r7, #9]
 8102ce6:	041b      	lsls	r3, r3, #16
 8102ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8102cec:	431a      	orrs	r2, r3
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	431a      	orrs	r2, r3
 8102cf2:	69bb      	ldr	r3, [r7, #24]
 8102cf4:	431a      	orrs	r2, r3
 8102cf6:	68fb      	ldr	r3, [r7, #12]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	430a      	orrs	r2, r1
 8102cfc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8102cfe:	bf00      	nop
 8102d00:	3714      	adds	r7, #20
 8102d02:	46bd      	mov	sp, r7
 8102d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d08:	4770      	bx	lr
 8102d0a:	bf00      	nop
 8102d0c:	03ff63ff 	.word	0x03ff63ff

08102d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102d10:	b480      	push	{r7}
 8102d12:	b083      	sub	sp, #12
 8102d14:	af00      	add	r7, sp, #0
 8102d16:	6078      	str	r0, [r7, #4]
 8102d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102d20:	b2db      	uxtb	r3, r3
 8102d22:	2b20      	cmp	r3, #32
 8102d24:	d138      	bne.n	8102d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102d2c:	2b01      	cmp	r3, #1
 8102d2e:	d101      	bne.n	8102d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102d30:	2302      	movs	r3, #2
 8102d32:	e032      	b.n	8102d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	2201      	movs	r2, #1
 8102d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	2224      	movs	r2, #36	; 0x24
 8102d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	681b      	ldr	r3, [r3, #0]
 8102d48:	681a      	ldr	r2, [r3, #0]
 8102d4a:	687b      	ldr	r3, [r7, #4]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	f022 0201 	bic.w	r2, r2, #1
 8102d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	681a      	ldr	r2, [r3, #0]
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	681b      	ldr	r3, [r3, #0]
 8102d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	6819      	ldr	r1, [r3, #0]
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	681b      	ldr	r3, [r3, #0]
 8102d6e:	683a      	ldr	r2, [r7, #0]
 8102d70:	430a      	orrs	r2, r1
 8102d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	681b      	ldr	r3, [r3, #0]
 8102d78:	681a      	ldr	r2, [r3, #0]
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	681b      	ldr	r3, [r3, #0]
 8102d7e:	f042 0201 	orr.w	r2, r2, #1
 8102d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	2220      	movs	r2, #32
 8102d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	2200      	movs	r2, #0
 8102d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102d94:	2300      	movs	r3, #0
 8102d96:	e000      	b.n	8102d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102d98:	2302      	movs	r3, #2
  }
}
 8102d9a:	4618      	mov	r0, r3
 8102d9c:	370c      	adds	r7, #12
 8102d9e:	46bd      	mov	sp, r7
 8102da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102da4:	4770      	bx	lr

08102da6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102da6:	b480      	push	{r7}
 8102da8:	b085      	sub	sp, #20
 8102daa:	af00      	add	r7, sp, #0
 8102dac:	6078      	str	r0, [r7, #4]
 8102dae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102db6:	b2db      	uxtb	r3, r3
 8102db8:	2b20      	cmp	r3, #32
 8102dba:	d139      	bne.n	8102e30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102dc2:	2b01      	cmp	r3, #1
 8102dc4:	d101      	bne.n	8102dca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102dc6:	2302      	movs	r3, #2
 8102dc8:	e033      	b.n	8102e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	2201      	movs	r2, #1
 8102dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	2224      	movs	r2, #36	; 0x24
 8102dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	681a      	ldr	r2, [r3, #0]
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	f022 0201 	bic.w	r2, r2, #1
 8102de8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	681b      	ldr	r3, [r3, #0]
 8102dee:	681b      	ldr	r3, [r3, #0]
 8102df0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102df2:	68fb      	ldr	r3, [r7, #12]
 8102df4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102df8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102dfa:	683b      	ldr	r3, [r7, #0]
 8102dfc:	021b      	lsls	r3, r3, #8
 8102dfe:	68fa      	ldr	r2, [r7, #12]
 8102e00:	4313      	orrs	r3, r2
 8102e02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	681b      	ldr	r3, [r3, #0]
 8102e08:	68fa      	ldr	r2, [r7, #12]
 8102e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	681a      	ldr	r2, [r3, #0]
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	681b      	ldr	r3, [r3, #0]
 8102e16:	f042 0201 	orr.w	r2, r2, #1
 8102e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	2220      	movs	r2, #32
 8102e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	2200      	movs	r2, #0
 8102e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102e2c:	2300      	movs	r3, #0
 8102e2e:	e000      	b.n	8102e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102e30:	2302      	movs	r3, #2
  }
}
 8102e32:	4618      	mov	r0, r3
 8102e34:	3714      	adds	r7, #20
 8102e36:	46bd      	mov	sp, r7
 8102e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e3c:	4770      	bx	lr
	...

08102e40 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102e40:	b580      	push	{r7, lr}
 8102e42:	b084      	sub	sp, #16
 8102e44:	af00      	add	r7, sp, #0
 8102e46:	60f8      	str	r0, [r7, #12]
 8102e48:	460b      	mov	r3, r1
 8102e4a:	607a      	str	r2, [r7, #4]
 8102e4c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102e4e:	4b35      	ldr	r3, [pc, #212]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	f023 0201 	bic.w	r2, r3, #1
 8102e56:	4933      	ldr	r1, [pc, #204]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102e58:	68fb      	ldr	r3, [r7, #12]
 8102e5a:	4313      	orrs	r3, r2
 8102e5c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	d121      	bne.n	8102ea8 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102e64:	f7ff f866 	bl	8101f34 <HAL_GetCurrentCPUID>
 8102e68:	4603      	mov	r3, r0
 8102e6a:	2b03      	cmp	r3, #3
 8102e6c:	d154      	bne.n	8102f18 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102e6e:	4b2d      	ldr	r3, [pc, #180]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102e70:	691b      	ldr	r3, [r3, #16]
 8102e72:	4a2c      	ldr	r2, [pc, #176]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102e74:	f023 0301 	bic.w	r3, r3, #1
 8102e78:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102e7a:	4b2b      	ldr	r3, [pc, #172]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102e7c:	691b      	ldr	r3, [r3, #16]
 8102e7e:	4a2a      	ldr	r2, [pc, #168]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102e80:	f043 0304 	orr.w	r3, r3, #4
 8102e84:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102e86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8102e8a:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102e8e:	7afb      	ldrb	r3, [r7, #11]
 8102e90:	2b01      	cmp	r3, #1
 8102e92:	d101      	bne.n	8102e98 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102e94:	bf30      	wfi
 8102e96:	e000      	b.n	8102e9a <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102e98:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102e9a:	4b23      	ldr	r3, [pc, #140]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102e9c:	691b      	ldr	r3, [r3, #16]
 8102e9e:	4a22      	ldr	r2, [pc, #136]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102ea0:	f023 0304 	bic.w	r3, r3, #4
 8102ea4:	6113      	str	r3, [r2, #16]
 8102ea6:	e03a      	b.n	8102f1e <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	2b01      	cmp	r3, #1
 8102eac:	d121      	bne.n	8102ef2 <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102eae:	f7ff f841 	bl	8101f34 <HAL_GetCurrentCPUID>
 8102eb2:	4603      	mov	r3, r0
 8102eb4:	2b01      	cmp	r3, #1
 8102eb6:	d131      	bne.n	8102f1c <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102eb8:	4b1a      	ldr	r3, [pc, #104]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102eba:	695b      	ldr	r3, [r3, #20]
 8102ebc:	4a19      	ldr	r2, [pc, #100]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102ebe:	f023 0302 	bic.w	r3, r3, #2
 8102ec2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ec4:	4b18      	ldr	r3, [pc, #96]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102ec6:	691b      	ldr	r3, [r3, #16]
 8102ec8:	4a17      	ldr	r2, [pc, #92]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102eca:	f043 0304 	orr.w	r3, r3, #4
 8102ece:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102ed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8102ed4:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102ed8:	7afb      	ldrb	r3, [r7, #11]
 8102eda:	2b01      	cmp	r3, #1
 8102edc:	d101      	bne.n	8102ee2 <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102ede:	bf30      	wfi
 8102ee0:	e000      	b.n	8102ee4 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102ee2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102ee4:	4b10      	ldr	r3, [pc, #64]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102ee6:	691b      	ldr	r3, [r3, #16]
 8102ee8:	4a0f      	ldr	r2, [pc, #60]	; (8102f28 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102eea:	f023 0304 	bic.w	r3, r3, #4
 8102eee:	6113      	str	r3, [r2, #16]
 8102ef0:	e015      	b.n	8102f1e <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102ef2:	f7ff f81f 	bl	8101f34 <HAL_GetCurrentCPUID>
 8102ef6:	4603      	mov	r3, r0
 8102ef8:	2b03      	cmp	r3, #3
 8102efa:	d106      	bne.n	8102f0a <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102efc:	4b09      	ldr	r3, [pc, #36]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102efe:	691b      	ldr	r3, [r3, #16]
 8102f00:	4a08      	ldr	r2, [pc, #32]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f02:	f023 0304 	bic.w	r3, r3, #4
 8102f06:	6113      	str	r3, [r2, #16]
 8102f08:	e009      	b.n	8102f1e <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102f0a:	4b06      	ldr	r3, [pc, #24]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f0c:	695b      	ldr	r3, [r3, #20]
 8102f0e:	4a05      	ldr	r2, [pc, #20]	; (8102f24 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f10:	f023 0304 	bic.w	r3, r3, #4
 8102f14:	6153      	str	r3, [r2, #20]
 8102f16:	e002      	b.n	8102f1e <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8102f18:	bf00      	nop
 8102f1a:	e000      	b.n	8102f1e <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8102f1c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102f1e:	3710      	adds	r7, #16
 8102f20:	46bd      	mov	sp, r7
 8102f22:	bd80      	pop	{r7, pc}
 8102f24:	58024800 	.word	0x58024800
 8102f28:	e000ed00 	.word	0xe000ed00

08102f2c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102f2c:	b580      	push	{r7, lr}
 8102f2e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102f30:	f7ff f800 	bl	8101f34 <HAL_GetCurrentCPUID>
 8102f34:	4603      	mov	r3, r0
 8102f36:	2b03      	cmp	r3, #3
 8102f38:	d101      	bne.n	8102f3e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102f3a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102f3c:	e001      	b.n	8102f42 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102f3e:	bf40      	sev
    __WFE ();
 8102f40:	bf20      	wfe
}
 8102f42:	bf00      	nop
 8102f44:	bd80      	pop	{r7, pc}
	...

08102f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102f48:	b480      	push	{r7}
 8102f4a:	b089      	sub	sp, #36	; 0x24
 8102f4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102f4e:	4baf      	ldr	r3, [pc, #700]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102f50:	691b      	ldr	r3, [r3, #16]
 8102f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102f56:	2b18      	cmp	r3, #24
 8102f58:	f200 814e 	bhi.w	81031f8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8102f5c:	a201      	add	r2, pc, #4	; (adr r2, 8102f64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102f62:	bf00      	nop
 8102f64:	08102fc9 	.word	0x08102fc9
 8102f68:	081031f9 	.word	0x081031f9
 8102f6c:	081031f9 	.word	0x081031f9
 8102f70:	081031f9 	.word	0x081031f9
 8102f74:	081031f9 	.word	0x081031f9
 8102f78:	081031f9 	.word	0x081031f9
 8102f7c:	081031f9 	.word	0x081031f9
 8102f80:	081031f9 	.word	0x081031f9
 8102f84:	08102fef 	.word	0x08102fef
 8102f88:	081031f9 	.word	0x081031f9
 8102f8c:	081031f9 	.word	0x081031f9
 8102f90:	081031f9 	.word	0x081031f9
 8102f94:	081031f9 	.word	0x081031f9
 8102f98:	081031f9 	.word	0x081031f9
 8102f9c:	081031f9 	.word	0x081031f9
 8102fa0:	081031f9 	.word	0x081031f9
 8102fa4:	08102ff5 	.word	0x08102ff5
 8102fa8:	081031f9 	.word	0x081031f9
 8102fac:	081031f9 	.word	0x081031f9
 8102fb0:	081031f9 	.word	0x081031f9
 8102fb4:	081031f9 	.word	0x081031f9
 8102fb8:	081031f9 	.word	0x081031f9
 8102fbc:	081031f9 	.word	0x081031f9
 8102fc0:	081031f9 	.word	0x081031f9
 8102fc4:	08102ffb 	.word	0x08102ffb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102fc8:	4b90      	ldr	r3, [pc, #576]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	f003 0320 	and.w	r3, r3, #32
 8102fd0:	2b00      	cmp	r3, #0
 8102fd2:	d009      	beq.n	8102fe8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102fd4:	4b8d      	ldr	r3, [pc, #564]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102fd6:	681b      	ldr	r3, [r3, #0]
 8102fd8:	08db      	lsrs	r3, r3, #3
 8102fda:	f003 0303 	and.w	r3, r3, #3
 8102fde:	4a8c      	ldr	r2, [pc, #560]	; (8103210 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8102fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8102fe4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102fe6:	e10a      	b.n	81031fe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102fe8:	4b89      	ldr	r3, [pc, #548]	; (8103210 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8102fea:	61bb      	str	r3, [r7, #24]
    break;
 8102fec:	e107      	b.n	81031fe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8102fee:	4b89      	ldr	r3, [pc, #548]	; (8103214 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8102ff0:	61bb      	str	r3, [r7, #24]
    break;
 8102ff2:	e104      	b.n	81031fe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102ff4:	4b88      	ldr	r3, [pc, #544]	; (8103218 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8102ff6:	61bb      	str	r3, [r7, #24]
    break;
 8102ff8:	e101      	b.n	81031fe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102ffa:	4b84      	ldr	r3, [pc, #528]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ffe:	f003 0303 	and.w	r3, r3, #3
 8103002:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103004:	4b81      	ldr	r3, [pc, #516]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103008:	091b      	lsrs	r3, r3, #4
 810300a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810300e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103010:	4b7e      	ldr	r3, [pc, #504]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103014:	f003 0301 	and.w	r3, r3, #1
 8103018:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810301a:	4b7c      	ldr	r3, [pc, #496]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 810301c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810301e:	08db      	lsrs	r3, r3, #3
 8103020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103024:	68fa      	ldr	r2, [r7, #12]
 8103026:	fb02 f303 	mul.w	r3, r2, r3
 810302a:	ee07 3a90 	vmov	s15, r3
 810302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103032:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103036:	693b      	ldr	r3, [r7, #16]
 8103038:	2b00      	cmp	r3, #0
 810303a:	f000 80da 	beq.w	81031f2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 810303e:	697b      	ldr	r3, [r7, #20]
 8103040:	2b01      	cmp	r3, #1
 8103042:	d05a      	beq.n	81030fa <HAL_RCC_GetSysClockFreq+0x1b2>
 8103044:	2b01      	cmp	r3, #1
 8103046:	d302      	bcc.n	810304e <HAL_RCC_GetSysClockFreq+0x106>
 8103048:	2b02      	cmp	r3, #2
 810304a:	d078      	beq.n	810313e <HAL_RCC_GetSysClockFreq+0x1f6>
 810304c:	e099      	b.n	8103182 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810304e:	4b6f      	ldr	r3, [pc, #444]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	f003 0320 	and.w	r3, r3, #32
 8103056:	2b00      	cmp	r3, #0
 8103058:	d02d      	beq.n	81030b6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810305a:	4b6c      	ldr	r3, [pc, #432]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	08db      	lsrs	r3, r3, #3
 8103060:	f003 0303 	and.w	r3, r3, #3
 8103064:	4a6a      	ldr	r2, [pc, #424]	; (8103210 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8103066:	fa22 f303 	lsr.w	r3, r2, r3
 810306a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810306c:	687b      	ldr	r3, [r7, #4]
 810306e:	ee07 3a90 	vmov	s15, r3
 8103072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103076:	693b      	ldr	r3, [r7, #16]
 8103078:	ee07 3a90 	vmov	s15, r3
 810307c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103084:	4b61      	ldr	r3, [pc, #388]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810308c:	ee07 3a90 	vmov	s15, r3
 8103090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103094:	ed97 6a02 	vldr	s12, [r7, #8]
 8103098:	eddf 5a60 	vldr	s11, [pc, #384]	; 810321c <HAL_RCC_GetSysClockFreq+0x2d4>
 810309c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81030b4:	e087      	b.n	81031c6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81030b6:	693b      	ldr	r3, [r7, #16]
 81030b8:	ee07 3a90 	vmov	s15, r3
 81030bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030c0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8103220 <HAL_RCC_GetSysClockFreq+0x2d8>
 81030c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030c8:	4b50      	ldr	r3, [pc, #320]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 81030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030d0:	ee07 3a90 	vmov	s15, r3
 81030d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030d8:	ed97 6a02 	vldr	s12, [r7, #8]
 81030dc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 810321c <HAL_RCC_GetSysClockFreq+0x2d4>
 81030e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81030f8:	e065      	b.n	81031c6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81030fa:	693b      	ldr	r3, [r7, #16]
 81030fc:	ee07 3a90 	vmov	s15, r3
 8103100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103104:	eddf 6a47 	vldr	s13, [pc, #284]	; 8103224 <HAL_RCC_GetSysClockFreq+0x2dc>
 8103108:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810310c:	4b3f      	ldr	r3, [pc, #252]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 810310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103114:	ee07 3a90 	vmov	s15, r3
 8103118:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810311c:	ed97 6a02 	vldr	s12, [r7, #8]
 8103120:	eddf 5a3e 	vldr	s11, [pc, #248]	; 810321c <HAL_RCC_GetSysClockFreq+0x2d4>
 8103124:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103128:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810312c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103130:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103138:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810313c:	e043      	b.n	81031c6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810313e:	693b      	ldr	r3, [r7, #16]
 8103140:	ee07 3a90 	vmov	s15, r3
 8103144:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103148:	eddf 6a37 	vldr	s13, [pc, #220]	; 8103228 <HAL_RCC_GetSysClockFreq+0x2e0>
 810314c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103150:	4b2e      	ldr	r3, [pc, #184]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103158:	ee07 3a90 	vmov	s15, r3
 810315c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103160:	ed97 6a02 	vldr	s12, [r7, #8]
 8103164:	eddf 5a2d 	vldr	s11, [pc, #180]	; 810321c <HAL_RCC_GetSysClockFreq+0x2d4>
 8103168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810316c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103178:	ee67 7a27 	vmul.f32	s15, s14, s15
 810317c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103180:	e021      	b.n	81031c6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103182:	693b      	ldr	r3, [r7, #16]
 8103184:	ee07 3a90 	vmov	s15, r3
 8103188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810318c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8103224 <HAL_RCC_GetSysClockFreq+0x2dc>
 8103190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103194:	4b1d      	ldr	r3, [pc, #116]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810319c:	ee07 3a90 	vmov	s15, r3
 81031a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031a4:	ed97 6a02 	vldr	s12, [r7, #8]
 81031a8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 810321c <HAL_RCC_GetSysClockFreq+0x2d4>
 81031ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81031c4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81031c6:	4b11      	ldr	r3, [pc, #68]	; (810320c <HAL_RCC_GetSysClockFreq+0x2c4>)
 81031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031ca:	0a5b      	lsrs	r3, r3, #9
 81031cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81031d0:	3301      	adds	r3, #1
 81031d2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81031d4:	683b      	ldr	r3, [r7, #0]
 81031d6:	ee07 3a90 	vmov	s15, r3
 81031da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81031de:	edd7 6a07 	vldr	s13, [r7, #28]
 81031e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81031ea:	ee17 3a90 	vmov	r3, s15
 81031ee:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81031f0:	e005      	b.n	81031fe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 81031f2:	2300      	movs	r3, #0
 81031f4:	61bb      	str	r3, [r7, #24]
    break;
 81031f6:	e002      	b.n	81031fe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81031f8:	4b06      	ldr	r3, [pc, #24]	; (8103214 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81031fa:	61bb      	str	r3, [r7, #24]
    break;
 81031fc:	bf00      	nop
  }

  return sysclockfreq;
 81031fe:	69bb      	ldr	r3, [r7, #24]
}
 8103200:	4618      	mov	r0, r3
 8103202:	3724      	adds	r7, #36	; 0x24
 8103204:	46bd      	mov	sp, r7
 8103206:	f85d 7b04 	ldr.w	r7, [sp], #4
 810320a:	4770      	bx	lr
 810320c:	58024400 	.word	0x58024400
 8103210:	03d09000 	.word	0x03d09000
 8103214:	003d0900 	.word	0x003d0900
 8103218:	007a1200 	.word	0x007a1200
 810321c:	46000000 	.word	0x46000000
 8103220:	4c742400 	.word	0x4c742400
 8103224:	4a742400 	.word	0x4a742400
 8103228:	4af42400 	.word	0x4af42400

0810322c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810322c:	b580      	push	{r7, lr}
 810322e:	b082      	sub	sp, #8
 8103230:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103232:	f7ff fe89 	bl	8102f48 <HAL_RCC_GetSysClockFreq>
 8103236:	4601      	mov	r1, r0
 8103238:	4b11      	ldr	r3, [pc, #68]	; (8103280 <HAL_RCC_GetHCLKFreq+0x54>)
 810323a:	699b      	ldr	r3, [r3, #24]
 810323c:	0a1b      	lsrs	r3, r3, #8
 810323e:	f003 030f 	and.w	r3, r3, #15
 8103242:	4a10      	ldr	r2, [pc, #64]	; (8103284 <HAL_RCC_GetHCLKFreq+0x58>)
 8103244:	5cd3      	ldrb	r3, [r2, r3]
 8103246:	f003 031f 	and.w	r3, r3, #31
 810324a:	fa21 f303 	lsr.w	r3, r1, r3
 810324e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103250:	4b0b      	ldr	r3, [pc, #44]	; (8103280 <HAL_RCC_GetHCLKFreq+0x54>)
 8103252:	699b      	ldr	r3, [r3, #24]
 8103254:	f003 030f 	and.w	r3, r3, #15
 8103258:	4a0a      	ldr	r2, [pc, #40]	; (8103284 <HAL_RCC_GetHCLKFreq+0x58>)
 810325a:	5cd3      	ldrb	r3, [r2, r3]
 810325c:	f003 031f 	and.w	r3, r3, #31
 8103260:	687a      	ldr	r2, [r7, #4]
 8103262:	fa22 f303 	lsr.w	r3, r2, r3
 8103266:	4a08      	ldr	r2, [pc, #32]	; (8103288 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103268:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810326a:	4b07      	ldr	r3, [pc, #28]	; (8103288 <HAL_RCC_GetHCLKFreq+0x5c>)
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	4a07      	ldr	r2, [pc, #28]	; (810328c <HAL_RCC_GetHCLKFreq+0x60>)
 8103270:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103272:	4b05      	ldr	r3, [pc, #20]	; (8103288 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103274:	681b      	ldr	r3, [r3, #0]
}
 8103276:	4618      	mov	r0, r3
 8103278:	3708      	adds	r7, #8
 810327a:	46bd      	mov	sp, r7
 810327c:	bd80      	pop	{r7, pc}
 810327e:	bf00      	nop
 8103280:	58024400 	.word	0x58024400
 8103284:	0810a3cc 	.word	0x0810a3cc
 8103288:	10000004 	.word	0x10000004
 810328c:	10000000 	.word	0x10000000

08103290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103290:	b580      	push	{r7, lr}
 8103292:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103294:	f7ff ffca 	bl	810322c <HAL_RCC_GetHCLKFreq>
 8103298:	4601      	mov	r1, r0
 810329a:	4b06      	ldr	r3, [pc, #24]	; (81032b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 810329c:	69db      	ldr	r3, [r3, #28]
 810329e:	091b      	lsrs	r3, r3, #4
 81032a0:	f003 0307 	and.w	r3, r3, #7
 81032a4:	4a04      	ldr	r2, [pc, #16]	; (81032b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 81032a6:	5cd3      	ldrb	r3, [r2, r3]
 81032a8:	f003 031f 	and.w	r3, r3, #31
 81032ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81032b0:	4618      	mov	r0, r3
 81032b2:	bd80      	pop	{r7, pc}
 81032b4:	58024400 	.word	0x58024400
 81032b8:	0810a3cc 	.word	0x0810a3cc

081032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81032bc:	b580      	push	{r7, lr}
 81032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81032c0:	f7ff ffb4 	bl	810322c <HAL_RCC_GetHCLKFreq>
 81032c4:	4601      	mov	r1, r0
 81032c6:	4b06      	ldr	r3, [pc, #24]	; (81032e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 81032c8:	69db      	ldr	r3, [r3, #28]
 81032ca:	0a1b      	lsrs	r3, r3, #8
 81032cc:	f003 0307 	and.w	r3, r3, #7
 81032d0:	4a04      	ldr	r2, [pc, #16]	; (81032e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81032d2:	5cd3      	ldrb	r3, [r2, r3]
 81032d4:	f003 031f 	and.w	r3, r3, #31
 81032d8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81032dc:	4618      	mov	r0, r3
 81032de:	bd80      	pop	{r7, pc}
 81032e0:	58024400 	.word	0x58024400
 81032e4:	0810a3cc 	.word	0x0810a3cc

081032e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81032e8:	b480      	push	{r7}
 81032ea:	b083      	sub	sp, #12
 81032ec:	af00      	add	r7, sp, #0
 81032ee:	6078      	str	r0, [r7, #4]
 81032f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81032f2:	687b      	ldr	r3, [r7, #4]
 81032f4:	223f      	movs	r2, #63	; 0x3f
 81032f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81032f8:	4b1a      	ldr	r3, [pc, #104]	; (8103364 <HAL_RCC_GetClockConfig+0x7c>)
 81032fa:	691b      	ldr	r3, [r3, #16]
 81032fc:	f003 0207 	and.w	r2, r3, #7
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103304:	4b17      	ldr	r3, [pc, #92]	; (8103364 <HAL_RCC_GetClockConfig+0x7c>)
 8103306:	699b      	ldr	r3, [r3, #24]
 8103308:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103310:	4b14      	ldr	r3, [pc, #80]	; (8103364 <HAL_RCC_GetClockConfig+0x7c>)
 8103312:	699b      	ldr	r3, [r3, #24]
 8103314:	f003 020f 	and.w	r2, r3, #15
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810331c:	4b11      	ldr	r3, [pc, #68]	; (8103364 <HAL_RCC_GetClockConfig+0x7c>)
 810331e:	699b      	ldr	r3, [r3, #24]
 8103320:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103328:	4b0e      	ldr	r3, [pc, #56]	; (8103364 <HAL_RCC_GetClockConfig+0x7c>)
 810332a:	69db      	ldr	r3, [r3, #28]
 810332c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103334:	4b0b      	ldr	r3, [pc, #44]	; (8103364 <HAL_RCC_GetClockConfig+0x7c>)
 8103336:	69db      	ldr	r3, [r3, #28]
 8103338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8103340:	4b08      	ldr	r3, [pc, #32]	; (8103364 <HAL_RCC_GetClockConfig+0x7c>)
 8103342:	6a1b      	ldr	r3, [r3, #32]
 8103344:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810334c:	4b06      	ldr	r3, [pc, #24]	; (8103368 <HAL_RCC_GetClockConfig+0x80>)
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	f003 020f 	and.w	r2, r3, #15
 8103354:	683b      	ldr	r3, [r7, #0]
 8103356:	601a      	str	r2, [r3, #0]
}
 8103358:	bf00      	nop
 810335a:	370c      	adds	r7, #12
 810335c:	46bd      	mov	sp, r7
 810335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103362:	4770      	bx	lr
 8103364:	58024400 	.word	0x58024400
 8103368:	52002000 	.word	0x52002000

0810336c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810336c:	b580      	push	{r7, lr}
 810336e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103370:	f7ff ff5c 	bl	810322c <HAL_RCC_GetHCLKFreq>
 8103374:	4601      	mov	r1, r0
 8103376:	4b06      	ldr	r3, [pc, #24]	; (8103390 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103378:	6a1b      	ldr	r3, [r3, #32]
 810337a:	091b      	lsrs	r3, r3, #4
 810337c:	f003 0307 	and.w	r3, r3, #7
 8103380:	4a04      	ldr	r2, [pc, #16]	; (8103394 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103382:	5cd3      	ldrb	r3, [r2, r3]
 8103384:	f003 031f 	and.w	r3, r3, #31
 8103388:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810338c:	4618      	mov	r0, r3
 810338e:	bd80      	pop	{r7, pc}
 8103390:	58024400 	.word	0x58024400
 8103394:	0810a3cc 	.word	0x0810a3cc

08103398 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103398:	b480      	push	{r7}
 810339a:	b089      	sub	sp, #36	; 0x24
 810339c:	af00      	add	r7, sp, #0
 810339e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81033a0:	4b9d      	ldr	r3, [pc, #628]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81033a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81033a4:	f003 0303 	and.w	r3, r3, #3
 81033a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81033aa:	4b9b      	ldr	r3, [pc, #620]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81033ae:	0b1b      	lsrs	r3, r3, #12
 81033b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81033b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81033b6:	4b98      	ldr	r3, [pc, #608]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81033ba:	091b      	lsrs	r3, r3, #4
 81033bc:	f003 0301 	and.w	r3, r3, #1
 81033c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81033c2:	4b95      	ldr	r3, [pc, #596]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81033c6:	08db      	lsrs	r3, r3, #3
 81033c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81033cc:	693a      	ldr	r2, [r7, #16]
 81033ce:	fb02 f303 	mul.w	r3, r2, r3
 81033d2:	ee07 3a90 	vmov	s15, r3
 81033d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81033de:	697b      	ldr	r3, [r7, #20]
 81033e0:	2b00      	cmp	r3, #0
 81033e2:	f000 810a 	beq.w	81035fa <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81033e6:	69bb      	ldr	r3, [r7, #24]
 81033e8:	2b01      	cmp	r3, #1
 81033ea:	d05a      	beq.n	81034a2 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81033ec:	2b01      	cmp	r3, #1
 81033ee:	d302      	bcc.n	81033f6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81033f0:	2b02      	cmp	r3, #2
 81033f2:	d078      	beq.n	81034e6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81033f4:	e099      	b.n	810352a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81033f6:	4b88      	ldr	r3, [pc, #544]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81033f8:	681b      	ldr	r3, [r3, #0]
 81033fa:	f003 0320 	and.w	r3, r3, #32
 81033fe:	2b00      	cmp	r3, #0
 8103400:	d02d      	beq.n	810345e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103402:	4b85      	ldr	r3, [pc, #532]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8103404:	681b      	ldr	r3, [r3, #0]
 8103406:	08db      	lsrs	r3, r3, #3
 8103408:	f003 0303 	and.w	r3, r3, #3
 810340c:	4a83      	ldr	r2, [pc, #524]	; (810361c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 810340e:	fa22 f303 	lsr.w	r3, r2, r3
 8103412:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103414:	68bb      	ldr	r3, [r7, #8]
 8103416:	ee07 3a90 	vmov	s15, r3
 810341a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810341e:	697b      	ldr	r3, [r7, #20]
 8103420:	ee07 3a90 	vmov	s15, r3
 8103424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810342c:	4b7a      	ldr	r3, [pc, #488]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103434:	ee07 3a90 	vmov	s15, r3
 8103438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810343c:	ed97 6a03 	vldr	s12, [r7, #12]
 8103440:	eddf 5a77 	vldr	s11, [pc, #476]	; 8103620 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8103444:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103448:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810344c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103458:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810345c:	e087      	b.n	810356e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810345e:	697b      	ldr	r3, [r7, #20]
 8103460:	ee07 3a90 	vmov	s15, r3
 8103464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103468:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8103624 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 810346c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103470:	4b69      	ldr	r3, [pc, #420]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8103472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103478:	ee07 3a90 	vmov	s15, r3
 810347c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103480:	ed97 6a03 	vldr	s12, [r7, #12]
 8103484:	eddf 5a66 	vldr	s11, [pc, #408]	; 8103620 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8103488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810348c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103498:	ee67 7a27 	vmul.f32	s15, s14, s15
 810349c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81034a0:	e065      	b.n	810356e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81034a2:	697b      	ldr	r3, [r7, #20]
 81034a4:	ee07 3a90 	vmov	s15, r3
 81034a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8103628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 81034b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034b4:	4b58      	ldr	r3, [pc, #352]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81034b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034bc:	ee07 3a90 	vmov	s15, r3
 81034c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034c4:	ed97 6a03 	vldr	s12, [r7, #12]
 81034c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8103620 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81034cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81034e4:	e043      	b.n	810356e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81034e6:	697b      	ldr	r3, [r7, #20]
 81034e8:	ee07 3a90 	vmov	s15, r3
 81034ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810362c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81034f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034f8:	4b47      	ldr	r3, [pc, #284]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81034fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103500:	ee07 3a90 	vmov	s15, r3
 8103504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103508:	ed97 6a03 	vldr	s12, [r7, #12]
 810350c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8103620 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8103510:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103514:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103518:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810351c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103524:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103528:	e021      	b.n	810356e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810352a:	697b      	ldr	r3, [r7, #20]
 810352c:	ee07 3a90 	vmov	s15, r3
 8103530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103534:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8103628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8103538:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810353c:	4b36      	ldr	r3, [pc, #216]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103544:	ee07 3a90 	vmov	s15, r3
 8103548:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810354c:	ed97 6a03 	vldr	s12, [r7, #12]
 8103550:	eddf 5a33 	vldr	s11, [pc, #204]	; 8103620 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8103554:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103558:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810355c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103560:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103568:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810356c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810356e:	4b2a      	ldr	r3, [pc, #168]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8103570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103572:	0a5b      	lsrs	r3, r3, #9
 8103574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103578:	ee07 3a90 	vmov	s15, r3
 810357c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103580:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103588:	edd7 6a07 	vldr	s13, [r7, #28]
 810358c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103594:	ee17 2a90 	vmov	r2, s15
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810359c:	4b1e      	ldr	r3, [pc, #120]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81035a0:	0c1b      	lsrs	r3, r3, #16
 81035a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81035a6:	ee07 3a90 	vmov	s15, r3
 81035aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81035b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81035b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81035ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81035be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81035c2:	ee17 2a90 	vmov	r2, s15
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81035ca:	4b13      	ldr	r3, [pc, #76]	; (8103618 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81035ce:	0e1b      	lsrs	r3, r3, #24
 81035d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81035d4:	ee07 3a90 	vmov	s15, r3
 81035d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81035e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81035e4:	edd7 6a07 	vldr	s13, [r7, #28]
 81035e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81035ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81035f0:	ee17 2a90 	vmov	r2, s15
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81035f8:	e008      	b.n	810360c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81035fa:	687b      	ldr	r3, [r7, #4]
 81035fc:	2200      	movs	r2, #0
 81035fe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	2200      	movs	r2, #0
 8103604:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103606:	687b      	ldr	r3, [r7, #4]
 8103608:	2200      	movs	r2, #0
 810360a:	609a      	str	r2, [r3, #8]
}
 810360c:	bf00      	nop
 810360e:	3724      	adds	r7, #36	; 0x24
 8103610:	46bd      	mov	sp, r7
 8103612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103616:	4770      	bx	lr
 8103618:	58024400 	.word	0x58024400
 810361c:	03d09000 	.word	0x03d09000
 8103620:	46000000 	.word	0x46000000
 8103624:	4c742400 	.word	0x4c742400
 8103628:	4a742400 	.word	0x4a742400
 810362c:	4af42400 	.word	0x4af42400

08103630 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8103630:	b480      	push	{r7}
 8103632:	b089      	sub	sp, #36	; 0x24
 8103634:	af00      	add	r7, sp, #0
 8103636:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103638:	4b9d      	ldr	r3, [pc, #628]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810363c:	f003 0303 	and.w	r3, r3, #3
 8103640:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8103642:	4b9b      	ldr	r3, [pc, #620]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103646:	0d1b      	lsrs	r3, r3, #20
 8103648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810364c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810364e:	4b98      	ldr	r3, [pc, #608]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103652:	0a1b      	lsrs	r3, r3, #8
 8103654:	f003 0301 	and.w	r3, r3, #1
 8103658:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810365a:	4b95      	ldr	r3, [pc, #596]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810365e:	08db      	lsrs	r3, r3, #3
 8103660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103664:	693a      	ldr	r2, [r7, #16]
 8103666:	fb02 f303 	mul.w	r3, r2, r3
 810366a:	ee07 3a90 	vmov	s15, r3
 810366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103672:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103676:	697b      	ldr	r3, [r7, #20]
 8103678:	2b00      	cmp	r3, #0
 810367a:	f000 810a 	beq.w	8103892 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 810367e:	69bb      	ldr	r3, [r7, #24]
 8103680:	2b01      	cmp	r3, #1
 8103682:	d05a      	beq.n	810373a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8103684:	2b01      	cmp	r3, #1
 8103686:	d302      	bcc.n	810368e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8103688:	2b02      	cmp	r3, #2
 810368a:	d078      	beq.n	810377e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 810368c:	e099      	b.n	81037c2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810368e:	4b88      	ldr	r3, [pc, #544]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	f003 0320 	and.w	r3, r3, #32
 8103696:	2b00      	cmp	r3, #0
 8103698:	d02d      	beq.n	81036f6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810369a:	4b85      	ldr	r3, [pc, #532]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810369c:	681b      	ldr	r3, [r3, #0]
 810369e:	08db      	lsrs	r3, r3, #3
 81036a0:	f003 0303 	and.w	r3, r3, #3
 81036a4:	4a83      	ldr	r2, [pc, #524]	; (81038b4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 81036a6:	fa22 f303 	lsr.w	r3, r2, r3
 81036aa:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81036ac:	68bb      	ldr	r3, [r7, #8]
 81036ae:	ee07 3a90 	vmov	s15, r3
 81036b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036b6:	697b      	ldr	r3, [r7, #20]
 81036b8:	ee07 3a90 	vmov	s15, r3
 81036bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036c4:	4b7a      	ldr	r3, [pc, #488]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81036c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036cc:	ee07 3a90 	vmov	s15, r3
 81036d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036d4:	ed97 6a03 	vldr	s12, [r7, #12]
 81036d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 81038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81036dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81036e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81036f4:	e087      	b.n	8103806 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81036f6:	697b      	ldr	r3, [r7, #20]
 81036f8:	ee07 3a90 	vmov	s15, r3
 81036fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103700:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81038bc <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8103704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103708:	4b69      	ldr	r3, [pc, #420]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810370c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103710:	ee07 3a90 	vmov	s15, r3
 8103714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103718:	ed97 6a03 	vldr	s12, [r7, #12]
 810371c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8103720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103724:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810372c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103734:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103738:	e065      	b.n	8103806 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810373a:	697b      	ldr	r3, [r7, #20]
 810373c:	ee07 3a90 	vmov	s15, r3
 8103740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103744:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81038c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8103748:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810374c:	4b58      	ldr	r3, [pc, #352]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103754:	ee07 3a90 	vmov	s15, r3
 8103758:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810375c:	ed97 6a03 	vldr	s12, [r7, #12]
 8103760:	eddf 5a55 	vldr	s11, [pc, #340]	; 81038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8103764:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103768:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810376c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103770:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103778:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810377c:	e043      	b.n	8103806 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810377e:	697b      	ldr	r3, [r7, #20]
 8103780:	ee07 3a90 	vmov	s15, r3
 8103784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103788:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81038c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 810378c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103790:	4b47      	ldr	r3, [pc, #284]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103798:	ee07 3a90 	vmov	s15, r3
 810379c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81037a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 81038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81037a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81037c0:	e021      	b.n	8103806 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81037c2:	697b      	ldr	r3, [r7, #20]
 81037c4:	ee07 3a90 	vmov	s15, r3
 81037c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037cc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81038c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81037d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037d4:	4b36      	ldr	r3, [pc, #216]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81037d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037dc:	ee07 3a90 	vmov	s15, r3
 81037e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81037e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 81038b8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81037ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103800:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103804:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103806:	4b2a      	ldr	r3, [pc, #168]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810380a:	0a5b      	lsrs	r3, r3, #9
 810380c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103810:	ee07 3a90 	vmov	s15, r3
 8103814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810381c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103820:	edd7 6a07 	vldr	s13, [r7, #28]
 8103824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810382c:	ee17 2a90 	vmov	r2, s15
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8103834:	4b1e      	ldr	r3, [pc, #120]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103838:	0c1b      	lsrs	r3, r3, #16
 810383a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810383e:	ee07 3a90 	vmov	s15, r3
 8103842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810384a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810384e:	edd7 6a07 	vldr	s13, [r7, #28]
 8103852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810385a:	ee17 2a90 	vmov	r2, s15
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8103862:	4b13      	ldr	r3, [pc, #76]	; (81038b0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103866:	0e1b      	lsrs	r3, r3, #24
 8103868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810386c:	ee07 3a90 	vmov	s15, r3
 8103870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103878:	ee37 7a87 	vadd.f32	s14, s15, s14
 810387c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103888:	ee17 2a90 	vmov	r2, s15
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103890:	e008      	b.n	81038a4 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	2200      	movs	r2, #0
 8103896:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	2200      	movs	r2, #0
 810389c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	2200      	movs	r2, #0
 81038a2:	609a      	str	r2, [r3, #8]
}
 81038a4:	bf00      	nop
 81038a6:	3724      	adds	r7, #36	; 0x24
 81038a8:	46bd      	mov	sp, r7
 81038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038ae:	4770      	bx	lr
 81038b0:	58024400 	.word	0x58024400
 81038b4:	03d09000 	.word	0x03d09000
 81038b8:	46000000 	.word	0x46000000
 81038bc:	4c742400 	.word	0x4c742400
 81038c0:	4a742400 	.word	0x4a742400
 81038c4:	4af42400 	.word	0x4af42400

081038c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81038c8:	b580      	push	{r7, lr}
 81038ca:	b082      	sub	sp, #8
 81038cc:	af00      	add	r7, sp, #0
 81038ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d101      	bne.n	81038da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81038d6:	2301      	movs	r3, #1
 81038d8:	e049      	b.n	810396e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81038da:	687b      	ldr	r3, [r7, #4]
 81038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81038e0:	b2db      	uxtb	r3, r3
 81038e2:	2b00      	cmp	r3, #0
 81038e4:	d106      	bne.n	81038f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81038e6:	687b      	ldr	r3, [r7, #4]
 81038e8:	2200      	movs	r2, #0
 81038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81038ee:	6878      	ldr	r0, [r7, #4]
 81038f0:	f7fe f860 	bl	81019b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	2202      	movs	r2, #2
 81038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	681a      	ldr	r2, [r3, #0]
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	3304      	adds	r3, #4
 8103904:	4619      	mov	r1, r3
 8103906:	4610      	mov	r0, r2
 8103908:	f000 fcc8 	bl	810429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	2201      	movs	r2, #1
 8103910:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	2201      	movs	r2, #1
 8103918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810391c:	687b      	ldr	r3, [r7, #4]
 810391e:	2201      	movs	r2, #1
 8103920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	2201      	movs	r2, #1
 8103928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	2201      	movs	r2, #1
 8103930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103934:	687b      	ldr	r3, [r7, #4]
 8103936:	2201      	movs	r2, #1
 8103938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	2201      	movs	r2, #1
 8103940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	2201      	movs	r2, #1
 8103948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	2201      	movs	r2, #1
 8103950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	2201      	movs	r2, #1
 8103958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	2201      	movs	r2, #1
 8103960:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	2201      	movs	r2, #1
 8103968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810396c:	2300      	movs	r3, #0
}
 810396e:	4618      	mov	r0, r3
 8103970:	3708      	adds	r7, #8
 8103972:	46bd      	mov	sp, r7
 8103974:	bd80      	pop	{r7, pc}
	...

08103978 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103978:	b480      	push	{r7}
 810397a:	b085      	sub	sp, #20
 810397c:	af00      	add	r7, sp, #0
 810397e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103986:	b2db      	uxtb	r3, r3
 8103988:	2b01      	cmp	r3, #1
 810398a:	d001      	beq.n	8103990 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810398c:	2301      	movs	r3, #1
 810398e:	e021      	b.n	81039d4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	2202      	movs	r2, #2
 8103994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	68da      	ldr	r2, [r3, #12]
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	f042 0201 	orr.w	r2, r2, #1
 81039a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81039a8:	687b      	ldr	r3, [r7, #4]
 81039aa:	681b      	ldr	r3, [r3, #0]
 81039ac:	689a      	ldr	r2, [r3, #8]
 81039ae:	4b0c      	ldr	r3, [pc, #48]	; (81039e0 <HAL_TIM_Base_Start_IT+0x68>)
 81039b0:	4013      	ands	r3, r2
 81039b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81039b4:	68fb      	ldr	r3, [r7, #12]
 81039b6:	2b06      	cmp	r3, #6
 81039b8:	d00b      	beq.n	81039d2 <HAL_TIM_Base_Start_IT+0x5a>
 81039ba:	68fb      	ldr	r3, [r7, #12]
 81039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81039c0:	d007      	beq.n	81039d2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	681a      	ldr	r2, [r3, #0]
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	f042 0201 	orr.w	r2, r2, #1
 81039d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81039d2:	2300      	movs	r3, #0
}
 81039d4:	4618      	mov	r0, r3
 81039d6:	3714      	adds	r7, #20
 81039d8:	46bd      	mov	sp, r7
 81039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039de:	4770      	bx	lr
 81039e0:	00010007 	.word	0x00010007

081039e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81039e4:	b580      	push	{r7, lr}
 81039e6:	b082      	sub	sp, #8
 81039e8:	af00      	add	r7, sp, #0
 81039ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	2b00      	cmp	r3, #0
 81039f0:	d101      	bne.n	81039f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81039f2:	2301      	movs	r3, #1
 81039f4:	e049      	b.n	8103a8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81039fc:	b2db      	uxtb	r3, r3
 81039fe:	2b00      	cmp	r3, #0
 8103a00:	d106      	bne.n	8103a10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	2200      	movs	r2, #0
 8103a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8103a0a:	6878      	ldr	r0, [r7, #4]
 8103a0c:	f000 f841 	bl	8103a92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	2202      	movs	r2, #2
 8103a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681a      	ldr	r2, [r3, #0]
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	3304      	adds	r3, #4
 8103a20:	4619      	mov	r1, r3
 8103a22:	4610      	mov	r0, r2
 8103a24:	f000 fc3a 	bl	810429c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	2201      	movs	r2, #1
 8103a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	2201      	movs	r2, #1
 8103a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	2201      	movs	r2, #1
 8103a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	2201      	movs	r2, #1
 8103a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	2201      	movs	r2, #1
 8103a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	2201      	movs	r2, #1
 8103a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	2201      	movs	r2, #1
 8103a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103a60:	687b      	ldr	r3, [r7, #4]
 8103a62:	2201      	movs	r2, #1
 8103a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	2201      	movs	r2, #1
 8103a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	2201      	movs	r2, #1
 8103a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	2201      	movs	r2, #1
 8103a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	2201      	movs	r2, #1
 8103a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103a88:	2300      	movs	r3, #0
}
 8103a8a:	4618      	mov	r0, r3
 8103a8c:	3708      	adds	r7, #8
 8103a8e:	46bd      	mov	sp, r7
 8103a90:	bd80      	pop	{r7, pc}

08103a92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8103a92:	b480      	push	{r7}
 8103a94:	b083      	sub	sp, #12
 8103a96:	af00      	add	r7, sp, #0
 8103a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8103a9a:	bf00      	nop
 8103a9c:	370c      	adds	r7, #12
 8103a9e:	46bd      	mov	sp, r7
 8103aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aa4:	4770      	bx	lr
	...

08103aa8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8103aa8:	b580      	push	{r7, lr}
 8103aaa:	b084      	sub	sp, #16
 8103aac:	af00      	add	r7, sp, #0
 8103aae:	6078      	str	r0, [r7, #4]
 8103ab0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8103ab2:	683b      	ldr	r3, [r7, #0]
 8103ab4:	2b00      	cmp	r3, #0
 8103ab6:	d109      	bne.n	8103acc <HAL_TIM_PWM_Start+0x24>
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103abe:	b2db      	uxtb	r3, r3
 8103ac0:	2b01      	cmp	r3, #1
 8103ac2:	bf14      	ite	ne
 8103ac4:	2301      	movne	r3, #1
 8103ac6:	2300      	moveq	r3, #0
 8103ac8:	b2db      	uxtb	r3, r3
 8103aca:	e03c      	b.n	8103b46 <HAL_TIM_PWM_Start+0x9e>
 8103acc:	683b      	ldr	r3, [r7, #0]
 8103ace:	2b04      	cmp	r3, #4
 8103ad0:	d109      	bne.n	8103ae6 <HAL_TIM_PWM_Start+0x3e>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103ad8:	b2db      	uxtb	r3, r3
 8103ada:	2b01      	cmp	r3, #1
 8103adc:	bf14      	ite	ne
 8103ade:	2301      	movne	r3, #1
 8103ae0:	2300      	moveq	r3, #0
 8103ae2:	b2db      	uxtb	r3, r3
 8103ae4:	e02f      	b.n	8103b46 <HAL_TIM_PWM_Start+0x9e>
 8103ae6:	683b      	ldr	r3, [r7, #0]
 8103ae8:	2b08      	cmp	r3, #8
 8103aea:	d109      	bne.n	8103b00 <HAL_TIM_PWM_Start+0x58>
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103af2:	b2db      	uxtb	r3, r3
 8103af4:	2b01      	cmp	r3, #1
 8103af6:	bf14      	ite	ne
 8103af8:	2301      	movne	r3, #1
 8103afa:	2300      	moveq	r3, #0
 8103afc:	b2db      	uxtb	r3, r3
 8103afe:	e022      	b.n	8103b46 <HAL_TIM_PWM_Start+0x9e>
 8103b00:	683b      	ldr	r3, [r7, #0]
 8103b02:	2b0c      	cmp	r3, #12
 8103b04:	d109      	bne.n	8103b1a <HAL_TIM_PWM_Start+0x72>
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103b0c:	b2db      	uxtb	r3, r3
 8103b0e:	2b01      	cmp	r3, #1
 8103b10:	bf14      	ite	ne
 8103b12:	2301      	movne	r3, #1
 8103b14:	2300      	moveq	r3, #0
 8103b16:	b2db      	uxtb	r3, r3
 8103b18:	e015      	b.n	8103b46 <HAL_TIM_PWM_Start+0x9e>
 8103b1a:	683b      	ldr	r3, [r7, #0]
 8103b1c:	2b10      	cmp	r3, #16
 8103b1e:	d109      	bne.n	8103b34 <HAL_TIM_PWM_Start+0x8c>
 8103b20:	687b      	ldr	r3, [r7, #4]
 8103b22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103b26:	b2db      	uxtb	r3, r3
 8103b28:	2b01      	cmp	r3, #1
 8103b2a:	bf14      	ite	ne
 8103b2c:	2301      	movne	r3, #1
 8103b2e:	2300      	moveq	r3, #0
 8103b30:	b2db      	uxtb	r3, r3
 8103b32:	e008      	b.n	8103b46 <HAL_TIM_PWM_Start+0x9e>
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8103b3a:	b2db      	uxtb	r3, r3
 8103b3c:	2b01      	cmp	r3, #1
 8103b3e:	bf14      	ite	ne
 8103b40:	2301      	movne	r3, #1
 8103b42:	2300      	moveq	r3, #0
 8103b44:	b2db      	uxtb	r3, r3
 8103b46:	2b00      	cmp	r3, #0
 8103b48:	d001      	beq.n	8103b4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8103b4a:	2301      	movs	r3, #1
 8103b4c:	e06e      	b.n	8103c2c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8103b4e:	683b      	ldr	r3, [r7, #0]
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	d104      	bne.n	8103b5e <HAL_TIM_PWM_Start+0xb6>
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	2202      	movs	r2, #2
 8103b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103b5c:	e023      	b.n	8103ba6 <HAL_TIM_PWM_Start+0xfe>
 8103b5e:	683b      	ldr	r3, [r7, #0]
 8103b60:	2b04      	cmp	r3, #4
 8103b62:	d104      	bne.n	8103b6e <HAL_TIM_PWM_Start+0xc6>
 8103b64:	687b      	ldr	r3, [r7, #4]
 8103b66:	2202      	movs	r2, #2
 8103b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103b6c:	e01b      	b.n	8103ba6 <HAL_TIM_PWM_Start+0xfe>
 8103b6e:	683b      	ldr	r3, [r7, #0]
 8103b70:	2b08      	cmp	r3, #8
 8103b72:	d104      	bne.n	8103b7e <HAL_TIM_PWM_Start+0xd6>
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	2202      	movs	r2, #2
 8103b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103b7c:	e013      	b.n	8103ba6 <HAL_TIM_PWM_Start+0xfe>
 8103b7e:	683b      	ldr	r3, [r7, #0]
 8103b80:	2b0c      	cmp	r3, #12
 8103b82:	d104      	bne.n	8103b8e <HAL_TIM_PWM_Start+0xe6>
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	2202      	movs	r2, #2
 8103b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103b8c:	e00b      	b.n	8103ba6 <HAL_TIM_PWM_Start+0xfe>
 8103b8e:	683b      	ldr	r3, [r7, #0]
 8103b90:	2b10      	cmp	r3, #16
 8103b92:	d104      	bne.n	8103b9e <HAL_TIM_PWM_Start+0xf6>
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	2202      	movs	r2, #2
 8103b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103b9c:	e003      	b.n	8103ba6 <HAL_TIM_PWM_Start+0xfe>
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	2202      	movs	r2, #2
 8103ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	2201      	movs	r2, #1
 8103bac:	6839      	ldr	r1, [r7, #0]
 8103bae:	4618      	mov	r0, r3
 8103bb0:	f000 ff78 	bl	8104aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	681b      	ldr	r3, [r3, #0]
 8103bb8:	4a1e      	ldr	r2, [pc, #120]	; (8103c34 <HAL_TIM_PWM_Start+0x18c>)
 8103bba:	4293      	cmp	r3, r2
 8103bbc:	d013      	beq.n	8103be6 <HAL_TIM_PWM_Start+0x13e>
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	681b      	ldr	r3, [r3, #0]
 8103bc2:	4a1d      	ldr	r2, [pc, #116]	; (8103c38 <HAL_TIM_PWM_Start+0x190>)
 8103bc4:	4293      	cmp	r3, r2
 8103bc6:	d00e      	beq.n	8103be6 <HAL_TIM_PWM_Start+0x13e>
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	4a1b      	ldr	r2, [pc, #108]	; (8103c3c <HAL_TIM_PWM_Start+0x194>)
 8103bce:	4293      	cmp	r3, r2
 8103bd0:	d009      	beq.n	8103be6 <HAL_TIM_PWM_Start+0x13e>
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	4a1a      	ldr	r2, [pc, #104]	; (8103c40 <HAL_TIM_PWM_Start+0x198>)
 8103bd8:	4293      	cmp	r3, r2
 8103bda:	d004      	beq.n	8103be6 <HAL_TIM_PWM_Start+0x13e>
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	4a18      	ldr	r2, [pc, #96]	; (8103c44 <HAL_TIM_PWM_Start+0x19c>)
 8103be2:	4293      	cmp	r3, r2
 8103be4:	d101      	bne.n	8103bea <HAL_TIM_PWM_Start+0x142>
 8103be6:	2301      	movs	r3, #1
 8103be8:	e000      	b.n	8103bec <HAL_TIM_PWM_Start+0x144>
 8103bea:	2300      	movs	r3, #0
 8103bec:	2b00      	cmp	r3, #0
 8103bee:	d007      	beq.n	8103c00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	681b      	ldr	r3, [r3, #0]
 8103bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103bfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	689a      	ldr	r2, [r3, #8]
 8103c06:	4b10      	ldr	r3, [pc, #64]	; (8103c48 <HAL_TIM_PWM_Start+0x1a0>)
 8103c08:	4013      	ands	r3, r2
 8103c0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103c0c:	68fb      	ldr	r3, [r7, #12]
 8103c0e:	2b06      	cmp	r3, #6
 8103c10:	d00b      	beq.n	8103c2a <HAL_TIM_PWM_Start+0x182>
 8103c12:	68fb      	ldr	r3, [r7, #12]
 8103c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103c18:	d007      	beq.n	8103c2a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	681a      	ldr	r2, [r3, #0]
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	681b      	ldr	r3, [r3, #0]
 8103c24:	f042 0201 	orr.w	r2, r2, #1
 8103c28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8103c2a:	2300      	movs	r3, #0
}
 8103c2c:	4618      	mov	r0, r3
 8103c2e:	3710      	adds	r7, #16
 8103c30:	46bd      	mov	sp, r7
 8103c32:	bd80      	pop	{r7, pc}
 8103c34:	40010000 	.word	0x40010000
 8103c38:	40010400 	.word	0x40010400
 8103c3c:	40014000 	.word	0x40014000
 8103c40:	40014400 	.word	0x40014400
 8103c44:	40014800 	.word	0x40014800
 8103c48:	00010007 	.word	0x00010007

08103c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103c4c:	b580      	push	{r7, lr}
 8103c4e:	b082      	sub	sp, #8
 8103c50:	af00      	add	r7, sp, #0
 8103c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	691b      	ldr	r3, [r3, #16]
 8103c5a:	f003 0302 	and.w	r3, r3, #2
 8103c5e:	2b02      	cmp	r3, #2
 8103c60:	d122      	bne.n	8103ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	68db      	ldr	r3, [r3, #12]
 8103c68:	f003 0302 	and.w	r3, r3, #2
 8103c6c:	2b02      	cmp	r3, #2
 8103c6e:	d11b      	bne.n	8103ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	681b      	ldr	r3, [r3, #0]
 8103c74:	f06f 0202 	mvn.w	r2, #2
 8103c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	2201      	movs	r2, #1
 8103c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	699b      	ldr	r3, [r3, #24]
 8103c86:	f003 0303 	and.w	r3, r3, #3
 8103c8a:	2b00      	cmp	r3, #0
 8103c8c:	d003      	beq.n	8103c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103c8e:	6878      	ldr	r0, [r7, #4]
 8103c90:	f000 fae6 	bl	8104260 <HAL_TIM_IC_CaptureCallback>
 8103c94:	e005      	b.n	8103ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103c96:	6878      	ldr	r0, [r7, #4]
 8103c98:	f000 fad8 	bl	810424c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103c9c:	6878      	ldr	r0, [r7, #4]
 8103c9e:	f000 fae9 	bl	8104274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	2200      	movs	r2, #0
 8103ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	691b      	ldr	r3, [r3, #16]
 8103cae:	f003 0304 	and.w	r3, r3, #4
 8103cb2:	2b04      	cmp	r3, #4
 8103cb4:	d122      	bne.n	8103cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	681b      	ldr	r3, [r3, #0]
 8103cba:	68db      	ldr	r3, [r3, #12]
 8103cbc:	f003 0304 	and.w	r3, r3, #4
 8103cc0:	2b04      	cmp	r3, #4
 8103cc2:	d11b      	bne.n	8103cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	f06f 0204 	mvn.w	r2, #4
 8103ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	2202      	movs	r2, #2
 8103cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	699b      	ldr	r3, [r3, #24]
 8103cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103cde:	2b00      	cmp	r3, #0
 8103ce0:	d003      	beq.n	8103cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103ce2:	6878      	ldr	r0, [r7, #4]
 8103ce4:	f000 fabc 	bl	8104260 <HAL_TIM_IC_CaptureCallback>
 8103ce8:	e005      	b.n	8103cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103cea:	6878      	ldr	r0, [r7, #4]
 8103cec:	f000 faae 	bl	810424c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103cf0:	6878      	ldr	r0, [r7, #4]
 8103cf2:	f000 fabf 	bl	8104274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	2200      	movs	r2, #0
 8103cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	691b      	ldr	r3, [r3, #16]
 8103d02:	f003 0308 	and.w	r3, r3, #8
 8103d06:	2b08      	cmp	r3, #8
 8103d08:	d122      	bne.n	8103d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	68db      	ldr	r3, [r3, #12]
 8103d10:	f003 0308 	and.w	r3, r3, #8
 8103d14:	2b08      	cmp	r3, #8
 8103d16:	d11b      	bne.n	8103d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	f06f 0208 	mvn.w	r2, #8
 8103d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103d22:	687b      	ldr	r3, [r7, #4]
 8103d24:	2204      	movs	r2, #4
 8103d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	69db      	ldr	r3, [r3, #28]
 8103d2e:	f003 0303 	and.w	r3, r3, #3
 8103d32:	2b00      	cmp	r3, #0
 8103d34:	d003      	beq.n	8103d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103d36:	6878      	ldr	r0, [r7, #4]
 8103d38:	f000 fa92 	bl	8104260 <HAL_TIM_IC_CaptureCallback>
 8103d3c:	e005      	b.n	8103d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d3e:	6878      	ldr	r0, [r7, #4]
 8103d40:	f000 fa84 	bl	810424c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d44:	6878      	ldr	r0, [r7, #4]
 8103d46:	f000 fa95 	bl	8104274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	2200      	movs	r2, #0
 8103d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	691b      	ldr	r3, [r3, #16]
 8103d56:	f003 0310 	and.w	r3, r3, #16
 8103d5a:	2b10      	cmp	r3, #16
 8103d5c:	d122      	bne.n	8103da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8103d5e:	687b      	ldr	r3, [r7, #4]
 8103d60:	681b      	ldr	r3, [r3, #0]
 8103d62:	68db      	ldr	r3, [r3, #12]
 8103d64:	f003 0310 	and.w	r3, r3, #16
 8103d68:	2b10      	cmp	r3, #16
 8103d6a:	d11b      	bne.n	8103da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	f06f 0210 	mvn.w	r2, #16
 8103d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	2208      	movs	r2, #8
 8103d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	681b      	ldr	r3, [r3, #0]
 8103d80:	69db      	ldr	r3, [r3, #28]
 8103d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103d86:	2b00      	cmp	r3, #0
 8103d88:	d003      	beq.n	8103d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103d8a:	6878      	ldr	r0, [r7, #4]
 8103d8c:	f000 fa68 	bl	8104260 <HAL_TIM_IC_CaptureCallback>
 8103d90:	e005      	b.n	8103d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d92:	6878      	ldr	r0, [r7, #4]
 8103d94:	f000 fa5a 	bl	810424c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d98:	6878      	ldr	r0, [r7, #4]
 8103d9a:	f000 fa6b 	bl	8104274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	2200      	movs	r2, #0
 8103da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	681b      	ldr	r3, [r3, #0]
 8103da8:	691b      	ldr	r3, [r3, #16]
 8103daa:	f003 0301 	and.w	r3, r3, #1
 8103dae:	2b01      	cmp	r3, #1
 8103db0:	d10e      	bne.n	8103dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	681b      	ldr	r3, [r3, #0]
 8103db6:	68db      	ldr	r3, [r3, #12]
 8103db8:	f003 0301 	and.w	r3, r3, #1
 8103dbc:	2b01      	cmp	r3, #1
 8103dbe:	d107      	bne.n	8103dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	f06f 0201 	mvn.w	r2, #1
 8103dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103dca:	6878      	ldr	r0, [r7, #4]
 8103dcc:	f7fd fc20 	bl	8101610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	691b      	ldr	r3, [r3, #16]
 8103dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103dda:	2b80      	cmp	r3, #128	; 0x80
 8103ddc:	d10e      	bne.n	8103dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	68db      	ldr	r3, [r3, #12]
 8103de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103de8:	2b80      	cmp	r3, #128	; 0x80
 8103dea:	d107      	bne.n	8103dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8103dec:	687b      	ldr	r3, [r7, #4]
 8103dee:	681b      	ldr	r3, [r3, #0]
 8103df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8103df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103df6:	6878      	ldr	r0, [r7, #4]
 8103df8:	f000 ff8a 	bl	8104d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	691b      	ldr	r3, [r3, #16]
 8103e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103e0a:	d10e      	bne.n	8103e2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	68db      	ldr	r3, [r3, #12]
 8103e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103e16:	2b80      	cmp	r3, #128	; 0x80
 8103e18:	d107      	bne.n	8103e2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8103e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103e24:	6878      	ldr	r0, [r7, #4]
 8103e26:	f000 ff7d 	bl	8104d24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	681b      	ldr	r3, [r3, #0]
 8103e2e:	691b      	ldr	r3, [r3, #16]
 8103e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103e34:	2b40      	cmp	r3, #64	; 0x40
 8103e36:	d10e      	bne.n	8103e56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	68db      	ldr	r3, [r3, #12]
 8103e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103e42:	2b40      	cmp	r3, #64	; 0x40
 8103e44:	d107      	bne.n	8103e56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8103e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103e50:	6878      	ldr	r0, [r7, #4]
 8103e52:	f000 fa19 	bl	8104288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	681b      	ldr	r3, [r3, #0]
 8103e5a:	691b      	ldr	r3, [r3, #16]
 8103e5c:	f003 0320 	and.w	r3, r3, #32
 8103e60:	2b20      	cmp	r3, #32
 8103e62:	d10e      	bne.n	8103e82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	681b      	ldr	r3, [r3, #0]
 8103e68:	68db      	ldr	r3, [r3, #12]
 8103e6a:	f003 0320 	and.w	r3, r3, #32
 8103e6e:	2b20      	cmp	r3, #32
 8103e70:	d107      	bne.n	8103e82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8103e72:	687b      	ldr	r3, [r7, #4]
 8103e74:	681b      	ldr	r3, [r3, #0]
 8103e76:	f06f 0220 	mvn.w	r2, #32
 8103e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103e7c:	6878      	ldr	r0, [r7, #4]
 8103e7e:	f000 ff3d 	bl	8104cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103e82:	bf00      	nop
 8103e84:	3708      	adds	r7, #8
 8103e86:	46bd      	mov	sp, r7
 8103e88:	bd80      	pop	{r7, pc}
	...

08103e8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8103e8c:	b580      	push	{r7, lr}
 8103e8e:	b084      	sub	sp, #16
 8103e90:	af00      	add	r7, sp, #0
 8103e92:	60f8      	str	r0, [r7, #12]
 8103e94:	60b9      	str	r1, [r7, #8]
 8103e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103e9e:	2b01      	cmp	r3, #1
 8103ea0:	d101      	bne.n	8103ea6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8103ea2:	2302      	movs	r3, #2
 8103ea4:	e0fd      	b.n	81040a2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8103ea6:	68fb      	ldr	r3, [r7, #12]
 8103ea8:	2201      	movs	r2, #1
 8103eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	2b14      	cmp	r3, #20
 8103eb2:	f200 80f0 	bhi.w	8104096 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8103eb6:	a201      	add	r2, pc, #4	; (adr r2, 8103ebc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8103eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ebc:	08103f11 	.word	0x08103f11
 8103ec0:	08104097 	.word	0x08104097
 8103ec4:	08104097 	.word	0x08104097
 8103ec8:	08104097 	.word	0x08104097
 8103ecc:	08103f51 	.word	0x08103f51
 8103ed0:	08104097 	.word	0x08104097
 8103ed4:	08104097 	.word	0x08104097
 8103ed8:	08104097 	.word	0x08104097
 8103edc:	08103f93 	.word	0x08103f93
 8103ee0:	08104097 	.word	0x08104097
 8103ee4:	08104097 	.word	0x08104097
 8103ee8:	08104097 	.word	0x08104097
 8103eec:	08103fd3 	.word	0x08103fd3
 8103ef0:	08104097 	.word	0x08104097
 8103ef4:	08104097 	.word	0x08104097
 8103ef8:	08104097 	.word	0x08104097
 8103efc:	08104015 	.word	0x08104015
 8103f00:	08104097 	.word	0x08104097
 8103f04:	08104097 	.word	0x08104097
 8103f08:	08104097 	.word	0x08104097
 8103f0c:	08104055 	.word	0x08104055
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8103f10:	68fb      	ldr	r3, [r7, #12]
 8103f12:	681b      	ldr	r3, [r3, #0]
 8103f14:	68b9      	ldr	r1, [r7, #8]
 8103f16:	4618      	mov	r0, r3
 8103f18:	f000 fa5a 	bl	81043d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8103f1c:	68fb      	ldr	r3, [r7, #12]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	699a      	ldr	r2, [r3, #24]
 8103f22:	68fb      	ldr	r3, [r7, #12]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	f042 0208 	orr.w	r2, r2, #8
 8103f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8103f2c:	68fb      	ldr	r3, [r7, #12]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	699a      	ldr	r2, [r3, #24]
 8103f32:	68fb      	ldr	r3, [r7, #12]
 8103f34:	681b      	ldr	r3, [r3, #0]
 8103f36:	f022 0204 	bic.w	r2, r2, #4
 8103f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8103f3c:	68fb      	ldr	r3, [r7, #12]
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	6999      	ldr	r1, [r3, #24]
 8103f42:	68bb      	ldr	r3, [r7, #8]
 8103f44:	691a      	ldr	r2, [r3, #16]
 8103f46:	68fb      	ldr	r3, [r7, #12]
 8103f48:	681b      	ldr	r3, [r3, #0]
 8103f4a:	430a      	orrs	r2, r1
 8103f4c:	619a      	str	r2, [r3, #24]
      break;
 8103f4e:	e0a3      	b.n	8104098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	681b      	ldr	r3, [r3, #0]
 8103f54:	68b9      	ldr	r1, [r7, #8]
 8103f56:	4618      	mov	r0, r3
 8103f58:	f000 faca 	bl	81044f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8103f5c:	68fb      	ldr	r3, [r7, #12]
 8103f5e:	681b      	ldr	r3, [r3, #0]
 8103f60:	699a      	ldr	r2, [r3, #24]
 8103f62:	68fb      	ldr	r3, [r7, #12]
 8103f64:	681b      	ldr	r3, [r3, #0]
 8103f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103f6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8103f6c:	68fb      	ldr	r3, [r7, #12]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	699a      	ldr	r2, [r3, #24]
 8103f72:	68fb      	ldr	r3, [r7, #12]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8103f7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8103f7c:	68fb      	ldr	r3, [r7, #12]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	6999      	ldr	r1, [r3, #24]
 8103f82:	68bb      	ldr	r3, [r7, #8]
 8103f84:	691b      	ldr	r3, [r3, #16]
 8103f86:	021a      	lsls	r2, r3, #8
 8103f88:	68fb      	ldr	r3, [r7, #12]
 8103f8a:	681b      	ldr	r3, [r3, #0]
 8103f8c:	430a      	orrs	r2, r1
 8103f8e:	619a      	str	r2, [r3, #24]
      break;
 8103f90:	e082      	b.n	8104098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8103f92:	68fb      	ldr	r3, [r7, #12]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	68b9      	ldr	r1, [r7, #8]
 8103f98:	4618      	mov	r0, r3
 8103f9a:	f000 fb33 	bl	8104604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8103f9e:	68fb      	ldr	r3, [r7, #12]
 8103fa0:	681b      	ldr	r3, [r3, #0]
 8103fa2:	69da      	ldr	r2, [r3, #28]
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	f042 0208 	orr.w	r2, r2, #8
 8103fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8103fae:	68fb      	ldr	r3, [r7, #12]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	69da      	ldr	r2, [r3, #28]
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	681b      	ldr	r3, [r3, #0]
 8103fb8:	f022 0204 	bic.w	r2, r2, #4
 8103fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8103fbe:	68fb      	ldr	r3, [r7, #12]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	69d9      	ldr	r1, [r3, #28]
 8103fc4:	68bb      	ldr	r3, [r7, #8]
 8103fc6:	691a      	ldr	r2, [r3, #16]
 8103fc8:	68fb      	ldr	r3, [r7, #12]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	430a      	orrs	r2, r1
 8103fce:	61da      	str	r2, [r3, #28]
      break;
 8103fd0:	e062      	b.n	8104098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	68b9      	ldr	r1, [r7, #8]
 8103fd8:	4618      	mov	r0, r3
 8103fda:	f000 fb99 	bl	8104710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8103fde:	68fb      	ldr	r3, [r7, #12]
 8103fe0:	681b      	ldr	r3, [r3, #0]
 8103fe2:	69da      	ldr	r2, [r3, #28]
 8103fe4:	68fb      	ldr	r3, [r7, #12]
 8103fe6:	681b      	ldr	r3, [r3, #0]
 8103fe8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103fec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8103fee:	68fb      	ldr	r3, [r7, #12]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	69da      	ldr	r2, [r3, #28]
 8103ff4:	68fb      	ldr	r3, [r7, #12]
 8103ff6:	681b      	ldr	r3, [r3, #0]
 8103ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8103ffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	681b      	ldr	r3, [r3, #0]
 8104002:	69d9      	ldr	r1, [r3, #28]
 8104004:	68bb      	ldr	r3, [r7, #8]
 8104006:	691b      	ldr	r3, [r3, #16]
 8104008:	021a      	lsls	r2, r3, #8
 810400a:	68fb      	ldr	r3, [r7, #12]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	430a      	orrs	r2, r1
 8104010:	61da      	str	r2, [r3, #28]
      break;
 8104012:	e041      	b.n	8104098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8104014:	68fb      	ldr	r3, [r7, #12]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	68b9      	ldr	r1, [r7, #8]
 810401a:	4618      	mov	r0, r3
 810401c:	f000 fbe0 	bl	81047e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	681b      	ldr	r3, [r3, #0]
 8104024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104026:	68fb      	ldr	r3, [r7, #12]
 8104028:	681b      	ldr	r3, [r3, #0]
 810402a:	f042 0208 	orr.w	r2, r2, #8
 810402e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8104030:	68fb      	ldr	r3, [r7, #12]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104036:	68fb      	ldr	r3, [r7, #12]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	f022 0204 	bic.w	r2, r2, #4
 810403e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8104040:	68fb      	ldr	r3, [r7, #12]
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104046:	68bb      	ldr	r3, [r7, #8]
 8104048:	691a      	ldr	r2, [r3, #16]
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	430a      	orrs	r2, r1
 8104050:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104052:	e021      	b.n	8104098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8104054:	68fb      	ldr	r3, [r7, #12]
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	68b9      	ldr	r1, [r7, #8]
 810405a:	4618      	mov	r0, r3
 810405c:	f000 fc22 	bl	81048a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	681b      	ldr	r3, [r3, #0]
 8104064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810406e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8104070:	68fb      	ldr	r3, [r7, #12]
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104076:	68fb      	ldr	r3, [r7, #12]
 8104078:	681b      	ldr	r3, [r3, #0]
 810407a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810407e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8104080:	68fb      	ldr	r3, [r7, #12]
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104086:	68bb      	ldr	r3, [r7, #8]
 8104088:	691b      	ldr	r3, [r3, #16]
 810408a:	021a      	lsls	r2, r3, #8
 810408c:	68fb      	ldr	r3, [r7, #12]
 810408e:	681b      	ldr	r3, [r3, #0]
 8104090:	430a      	orrs	r2, r1
 8104092:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104094:	e000      	b.n	8104098 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8104096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8104098:	68fb      	ldr	r3, [r7, #12]
 810409a:	2200      	movs	r2, #0
 810409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81040a0:	2300      	movs	r3, #0
}
 81040a2:	4618      	mov	r0, r3
 81040a4:	3710      	adds	r7, #16
 81040a6:	46bd      	mov	sp, r7
 81040a8:	bd80      	pop	{r7, pc}
 81040aa:	bf00      	nop

081040ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 81040ac:	b580      	push	{r7, lr}
 81040ae:	b084      	sub	sp, #16
 81040b0:	af00      	add	r7, sp, #0
 81040b2:	6078      	str	r0, [r7, #4]
 81040b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81040bc:	2b01      	cmp	r3, #1
 81040be:	d101      	bne.n	81040c4 <HAL_TIM_ConfigClockSource+0x18>
 81040c0:	2302      	movs	r3, #2
 81040c2:	e0b9      	b.n	8104238 <HAL_TIM_ConfigClockSource+0x18c>
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	2201      	movs	r2, #1
 81040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	2202      	movs	r2, #2
 81040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81040d4:	687b      	ldr	r3, [r7, #4]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	689b      	ldr	r3, [r3, #8]
 81040da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81040dc:	68fb      	ldr	r3, [r7, #12]
 81040de:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81040e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81040e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81040e8:	68fb      	ldr	r3, [r7, #12]
 81040ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81040ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	68fa      	ldr	r2, [r7, #12]
 81040f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81040f8:	683b      	ldr	r3, [r7, #0]
 81040fa:	681b      	ldr	r3, [r3, #0]
 81040fc:	2b70      	cmp	r3, #112	; 0x70
 81040fe:	d02e      	beq.n	810415e <HAL_TIM_ConfigClockSource+0xb2>
 8104100:	2b70      	cmp	r3, #112	; 0x70
 8104102:	d812      	bhi.n	810412a <HAL_TIM_ConfigClockSource+0x7e>
 8104104:	2b30      	cmp	r3, #48	; 0x30
 8104106:	f000 8084 	beq.w	8104212 <HAL_TIM_ConfigClockSource+0x166>
 810410a:	2b30      	cmp	r3, #48	; 0x30
 810410c:	d806      	bhi.n	810411c <HAL_TIM_ConfigClockSource+0x70>
 810410e:	2b10      	cmp	r3, #16
 8104110:	d07f      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
 8104112:	2b20      	cmp	r3, #32
 8104114:	d07d      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
 8104116:	2b00      	cmp	r3, #0
 8104118:	d07b      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 810411a:	e084      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 810411c:	2b50      	cmp	r3, #80	; 0x50
 810411e:	d048      	beq.n	81041b2 <HAL_TIM_ConfigClockSource+0x106>
 8104120:	2b60      	cmp	r3, #96	; 0x60
 8104122:	d056      	beq.n	81041d2 <HAL_TIM_ConfigClockSource+0x126>
 8104124:	2b40      	cmp	r3, #64	; 0x40
 8104126:	d064      	beq.n	81041f2 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8104128:	e07d      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 810412a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810412e:	d070      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
 8104130:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8104134:	d809      	bhi.n	810414a <HAL_TIM_ConfigClockSource+0x9e>
 8104136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810413a:	d027      	beq.n	810418c <HAL_TIM_ConfigClockSource+0xe0>
 810413c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104140:	d067      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
 8104142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104146:	d06d      	beq.n	8104224 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8104148:	e06d      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 810414a:	4a3d      	ldr	r2, [pc, #244]	; (8104240 <HAL_TIM_ConfigClockSource+0x194>)
 810414c:	4293      	cmp	r3, r2
 810414e:	d060      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
 8104150:	4a3c      	ldr	r2, [pc, #240]	; (8104244 <HAL_TIM_ConfigClockSource+0x198>)
 8104152:	4293      	cmp	r3, r2
 8104154:	d05d      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
 8104156:	4a3c      	ldr	r2, [pc, #240]	; (8104248 <HAL_TIM_ConfigClockSource+0x19c>)
 8104158:	4293      	cmp	r3, r2
 810415a:	d05a      	beq.n	8104212 <HAL_TIM_ConfigClockSource+0x166>
      break;
 810415c:	e063      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	6818      	ldr	r0, [r3, #0]
 8104162:	683b      	ldr	r3, [r7, #0]
 8104164:	6899      	ldr	r1, [r3, #8]
 8104166:	683b      	ldr	r3, [r7, #0]
 8104168:	685a      	ldr	r2, [r3, #4]
 810416a:	683b      	ldr	r3, [r7, #0]
 810416c:	68db      	ldr	r3, [r3, #12]
 810416e:	f000 fc79 	bl	8104a64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	681b      	ldr	r3, [r3, #0]
 8104176:	689b      	ldr	r3, [r3, #8]
 8104178:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8104180:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	681b      	ldr	r3, [r3, #0]
 8104186:	68fa      	ldr	r2, [r7, #12]
 8104188:	609a      	str	r2, [r3, #8]
      break;
 810418a:	e04c      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	6818      	ldr	r0, [r3, #0]
 8104190:	683b      	ldr	r3, [r7, #0]
 8104192:	6899      	ldr	r1, [r3, #8]
 8104194:	683b      	ldr	r3, [r7, #0]
 8104196:	685a      	ldr	r2, [r3, #4]
 8104198:	683b      	ldr	r3, [r7, #0]
 810419a:	68db      	ldr	r3, [r3, #12]
 810419c:	f000 fc62 	bl	8104a64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	689a      	ldr	r2, [r3, #8]
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	681b      	ldr	r3, [r3, #0]
 81041aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81041ae:	609a      	str	r2, [r3, #8]
      break;
 81041b0:	e039      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	6818      	ldr	r0, [r3, #0]
 81041b6:	683b      	ldr	r3, [r7, #0]
 81041b8:	6859      	ldr	r1, [r3, #4]
 81041ba:	683b      	ldr	r3, [r7, #0]
 81041bc:	68db      	ldr	r3, [r3, #12]
 81041be:	461a      	mov	r2, r3
 81041c0:	f000 fbd4 	bl	810496c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81041c4:	687b      	ldr	r3, [r7, #4]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	2150      	movs	r1, #80	; 0x50
 81041ca:	4618      	mov	r0, r3
 81041cc:	f000 fc2d 	bl	8104a2a <TIM_ITRx_SetConfig>
      break;
 81041d0:	e029      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 81041d2:	687b      	ldr	r3, [r7, #4]
 81041d4:	6818      	ldr	r0, [r3, #0]
 81041d6:	683b      	ldr	r3, [r7, #0]
 81041d8:	6859      	ldr	r1, [r3, #4]
 81041da:	683b      	ldr	r3, [r7, #0]
 81041dc:	68db      	ldr	r3, [r3, #12]
 81041de:	461a      	mov	r2, r3
 81041e0:	f000 fbf3 	bl	81049ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	681b      	ldr	r3, [r3, #0]
 81041e8:	2160      	movs	r1, #96	; 0x60
 81041ea:	4618      	mov	r0, r3
 81041ec:	f000 fc1d 	bl	8104a2a <TIM_ITRx_SetConfig>
      break;
 81041f0:	e019      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 81041f2:	687b      	ldr	r3, [r7, #4]
 81041f4:	6818      	ldr	r0, [r3, #0]
 81041f6:	683b      	ldr	r3, [r7, #0]
 81041f8:	6859      	ldr	r1, [r3, #4]
 81041fa:	683b      	ldr	r3, [r7, #0]
 81041fc:	68db      	ldr	r3, [r3, #12]
 81041fe:	461a      	mov	r2, r3
 8104200:	f000 fbb4 	bl	810496c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	2140      	movs	r1, #64	; 0x40
 810420a:	4618      	mov	r0, r3
 810420c:	f000 fc0d 	bl	8104a2a <TIM_ITRx_SetConfig>
      break;
 8104210:	e009      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681a      	ldr	r2, [r3, #0]
 8104216:	683b      	ldr	r3, [r7, #0]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	4619      	mov	r1, r3
 810421c:	4610      	mov	r0, r2
 810421e:	f000 fc04 	bl	8104a2a <TIM_ITRx_SetConfig>
      break;
 8104222:	e000      	b.n	8104226 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8104224:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	2201      	movs	r2, #1
 810422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	2200      	movs	r2, #0
 8104232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104236:	2300      	movs	r3, #0
}
 8104238:	4618      	mov	r0, r3
 810423a:	3710      	adds	r7, #16
 810423c:	46bd      	mov	sp, r7
 810423e:	bd80      	pop	{r7, pc}
 8104240:	00100030 	.word	0x00100030
 8104244:	00100040 	.word	0x00100040
 8104248:	00100020 	.word	0x00100020

0810424c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810424c:	b480      	push	{r7}
 810424e:	b083      	sub	sp, #12
 8104250:	af00      	add	r7, sp, #0
 8104252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8104254:	bf00      	nop
 8104256:	370c      	adds	r7, #12
 8104258:	46bd      	mov	sp, r7
 810425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810425e:	4770      	bx	lr

08104260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8104260:	b480      	push	{r7}
 8104262:	b083      	sub	sp, #12
 8104264:	af00      	add	r7, sp, #0
 8104266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8104268:	bf00      	nop
 810426a:	370c      	adds	r7, #12
 810426c:	46bd      	mov	sp, r7
 810426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104272:	4770      	bx	lr

08104274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8104274:	b480      	push	{r7}
 8104276:	b083      	sub	sp, #12
 8104278:	af00      	add	r7, sp, #0
 810427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810427c:	bf00      	nop
 810427e:	370c      	adds	r7, #12
 8104280:	46bd      	mov	sp, r7
 8104282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104286:	4770      	bx	lr

08104288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8104288:	b480      	push	{r7}
 810428a:	b083      	sub	sp, #12
 810428c:	af00      	add	r7, sp, #0
 810428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8104290:	bf00      	nop
 8104292:	370c      	adds	r7, #12
 8104294:	46bd      	mov	sp, r7
 8104296:	f85d 7b04 	ldr.w	r7, [sp], #4
 810429a:	4770      	bx	lr

0810429c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810429c:	b480      	push	{r7}
 810429e:	b085      	sub	sp, #20
 81042a0:	af00      	add	r7, sp, #0
 81042a2:	6078      	str	r0, [r7, #4]
 81042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81042a6:	687b      	ldr	r3, [r7, #4]
 81042a8:	681b      	ldr	r3, [r3, #0]
 81042aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	4a40      	ldr	r2, [pc, #256]	; (81043b0 <TIM_Base_SetConfig+0x114>)
 81042b0:	4293      	cmp	r3, r2
 81042b2:	d013      	beq.n	81042dc <TIM_Base_SetConfig+0x40>
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81042ba:	d00f      	beq.n	81042dc <TIM_Base_SetConfig+0x40>
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	4a3d      	ldr	r2, [pc, #244]	; (81043b4 <TIM_Base_SetConfig+0x118>)
 81042c0:	4293      	cmp	r3, r2
 81042c2:	d00b      	beq.n	81042dc <TIM_Base_SetConfig+0x40>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	4a3c      	ldr	r2, [pc, #240]	; (81043b8 <TIM_Base_SetConfig+0x11c>)
 81042c8:	4293      	cmp	r3, r2
 81042ca:	d007      	beq.n	81042dc <TIM_Base_SetConfig+0x40>
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	4a3b      	ldr	r2, [pc, #236]	; (81043bc <TIM_Base_SetConfig+0x120>)
 81042d0:	4293      	cmp	r3, r2
 81042d2:	d003      	beq.n	81042dc <TIM_Base_SetConfig+0x40>
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	4a3a      	ldr	r2, [pc, #232]	; (81043c0 <TIM_Base_SetConfig+0x124>)
 81042d8:	4293      	cmp	r3, r2
 81042da:	d108      	bne.n	81042ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81042dc:	68fb      	ldr	r3, [r7, #12]
 81042de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81042e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81042e4:	683b      	ldr	r3, [r7, #0]
 81042e6:	685b      	ldr	r3, [r3, #4]
 81042e8:	68fa      	ldr	r2, [r7, #12]
 81042ea:	4313      	orrs	r3, r2
 81042ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	4a2f      	ldr	r2, [pc, #188]	; (81043b0 <TIM_Base_SetConfig+0x114>)
 81042f2:	4293      	cmp	r3, r2
 81042f4:	d01f      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81042fc:	d01b      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	4a2c      	ldr	r2, [pc, #176]	; (81043b4 <TIM_Base_SetConfig+0x118>)
 8104302:	4293      	cmp	r3, r2
 8104304:	d017      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	4a2b      	ldr	r2, [pc, #172]	; (81043b8 <TIM_Base_SetConfig+0x11c>)
 810430a:	4293      	cmp	r3, r2
 810430c:	d013      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	4a2a      	ldr	r2, [pc, #168]	; (81043bc <TIM_Base_SetConfig+0x120>)
 8104312:	4293      	cmp	r3, r2
 8104314:	d00f      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	4a29      	ldr	r2, [pc, #164]	; (81043c0 <TIM_Base_SetConfig+0x124>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d00b      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	4a28      	ldr	r2, [pc, #160]	; (81043c4 <TIM_Base_SetConfig+0x128>)
 8104322:	4293      	cmp	r3, r2
 8104324:	d007      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 8104326:	687b      	ldr	r3, [r7, #4]
 8104328:	4a27      	ldr	r2, [pc, #156]	; (81043c8 <TIM_Base_SetConfig+0x12c>)
 810432a:	4293      	cmp	r3, r2
 810432c:	d003      	beq.n	8104336 <TIM_Base_SetConfig+0x9a>
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	4a26      	ldr	r2, [pc, #152]	; (81043cc <TIM_Base_SetConfig+0x130>)
 8104332:	4293      	cmp	r3, r2
 8104334:	d108      	bne.n	8104348 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104336:	68fb      	ldr	r3, [r7, #12]
 8104338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810433c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810433e:	683b      	ldr	r3, [r7, #0]
 8104340:	68db      	ldr	r3, [r3, #12]
 8104342:	68fa      	ldr	r2, [r7, #12]
 8104344:	4313      	orrs	r3, r2
 8104346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810434e:	683b      	ldr	r3, [r7, #0]
 8104350:	695b      	ldr	r3, [r3, #20]
 8104352:	4313      	orrs	r3, r2
 8104354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	68fa      	ldr	r2, [r7, #12]
 810435a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810435c:	683b      	ldr	r3, [r7, #0]
 810435e:	689a      	ldr	r2, [r3, #8]
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104364:	683b      	ldr	r3, [r7, #0]
 8104366:	681a      	ldr	r2, [r3, #0]
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	4a10      	ldr	r2, [pc, #64]	; (81043b0 <TIM_Base_SetConfig+0x114>)
 8104370:	4293      	cmp	r3, r2
 8104372:	d00f      	beq.n	8104394 <TIM_Base_SetConfig+0xf8>
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	4a12      	ldr	r2, [pc, #72]	; (81043c0 <TIM_Base_SetConfig+0x124>)
 8104378:	4293      	cmp	r3, r2
 810437a:	d00b      	beq.n	8104394 <TIM_Base_SetConfig+0xf8>
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	4a11      	ldr	r2, [pc, #68]	; (81043c4 <TIM_Base_SetConfig+0x128>)
 8104380:	4293      	cmp	r3, r2
 8104382:	d007      	beq.n	8104394 <TIM_Base_SetConfig+0xf8>
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	4a10      	ldr	r2, [pc, #64]	; (81043c8 <TIM_Base_SetConfig+0x12c>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d003      	beq.n	8104394 <TIM_Base_SetConfig+0xf8>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	4a0f      	ldr	r2, [pc, #60]	; (81043cc <TIM_Base_SetConfig+0x130>)
 8104390:	4293      	cmp	r3, r2
 8104392:	d103      	bne.n	810439c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104394:	683b      	ldr	r3, [r7, #0]
 8104396:	691a      	ldr	r2, [r3, #16]
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	2201      	movs	r2, #1
 81043a0:	615a      	str	r2, [r3, #20]
}
 81043a2:	bf00      	nop
 81043a4:	3714      	adds	r7, #20
 81043a6:	46bd      	mov	sp, r7
 81043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043ac:	4770      	bx	lr
 81043ae:	bf00      	nop
 81043b0:	40010000 	.word	0x40010000
 81043b4:	40000400 	.word	0x40000400
 81043b8:	40000800 	.word	0x40000800
 81043bc:	40000c00 	.word	0x40000c00
 81043c0:	40010400 	.word	0x40010400
 81043c4:	40014000 	.word	0x40014000
 81043c8:	40014400 	.word	0x40014400
 81043cc:	40014800 	.word	0x40014800

081043d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81043d0:	b480      	push	{r7}
 81043d2:	b087      	sub	sp, #28
 81043d4:	af00      	add	r7, sp, #0
 81043d6:	6078      	str	r0, [r7, #4]
 81043d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	6a1b      	ldr	r3, [r3, #32]
 81043de:	f023 0201 	bic.w	r2, r3, #1
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	6a1b      	ldr	r3, [r3, #32]
 81043ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	685b      	ldr	r3, [r3, #4]
 81043f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	699b      	ldr	r3, [r3, #24]
 81043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81043f8:	68fb      	ldr	r3, [r7, #12]
 81043fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	f023 0303 	bic.w	r3, r3, #3
 810440a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810440c:	683b      	ldr	r3, [r7, #0]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	68fa      	ldr	r2, [r7, #12]
 8104412:	4313      	orrs	r3, r2
 8104414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8104416:	697b      	ldr	r3, [r7, #20]
 8104418:	f023 0302 	bic.w	r3, r3, #2
 810441c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810441e:	683b      	ldr	r3, [r7, #0]
 8104420:	689b      	ldr	r3, [r3, #8]
 8104422:	697a      	ldr	r2, [r7, #20]
 8104424:	4313      	orrs	r3, r2
 8104426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	4a2c      	ldr	r2, [pc, #176]	; (81044dc <TIM_OC1_SetConfig+0x10c>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d00f      	beq.n	8104450 <TIM_OC1_SetConfig+0x80>
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	4a2b      	ldr	r2, [pc, #172]	; (81044e0 <TIM_OC1_SetConfig+0x110>)
 8104434:	4293      	cmp	r3, r2
 8104436:	d00b      	beq.n	8104450 <TIM_OC1_SetConfig+0x80>
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	4a2a      	ldr	r2, [pc, #168]	; (81044e4 <TIM_OC1_SetConfig+0x114>)
 810443c:	4293      	cmp	r3, r2
 810443e:	d007      	beq.n	8104450 <TIM_OC1_SetConfig+0x80>
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	4a29      	ldr	r2, [pc, #164]	; (81044e8 <TIM_OC1_SetConfig+0x118>)
 8104444:	4293      	cmp	r3, r2
 8104446:	d003      	beq.n	8104450 <TIM_OC1_SetConfig+0x80>
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	4a28      	ldr	r2, [pc, #160]	; (81044ec <TIM_OC1_SetConfig+0x11c>)
 810444c:	4293      	cmp	r3, r2
 810444e:	d10c      	bne.n	810446a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8104450:	697b      	ldr	r3, [r7, #20]
 8104452:	f023 0308 	bic.w	r3, r3, #8
 8104456:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8104458:	683b      	ldr	r3, [r7, #0]
 810445a:	68db      	ldr	r3, [r3, #12]
 810445c:	697a      	ldr	r2, [r7, #20]
 810445e:	4313      	orrs	r3, r2
 8104460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8104462:	697b      	ldr	r3, [r7, #20]
 8104464:	f023 0304 	bic.w	r3, r3, #4
 8104468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810446a:	687b      	ldr	r3, [r7, #4]
 810446c:	4a1b      	ldr	r2, [pc, #108]	; (81044dc <TIM_OC1_SetConfig+0x10c>)
 810446e:	4293      	cmp	r3, r2
 8104470:	d00f      	beq.n	8104492 <TIM_OC1_SetConfig+0xc2>
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	4a1a      	ldr	r2, [pc, #104]	; (81044e0 <TIM_OC1_SetConfig+0x110>)
 8104476:	4293      	cmp	r3, r2
 8104478:	d00b      	beq.n	8104492 <TIM_OC1_SetConfig+0xc2>
 810447a:	687b      	ldr	r3, [r7, #4]
 810447c:	4a19      	ldr	r2, [pc, #100]	; (81044e4 <TIM_OC1_SetConfig+0x114>)
 810447e:	4293      	cmp	r3, r2
 8104480:	d007      	beq.n	8104492 <TIM_OC1_SetConfig+0xc2>
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	4a18      	ldr	r2, [pc, #96]	; (81044e8 <TIM_OC1_SetConfig+0x118>)
 8104486:	4293      	cmp	r3, r2
 8104488:	d003      	beq.n	8104492 <TIM_OC1_SetConfig+0xc2>
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	4a17      	ldr	r2, [pc, #92]	; (81044ec <TIM_OC1_SetConfig+0x11c>)
 810448e:	4293      	cmp	r3, r2
 8104490:	d111      	bne.n	81044b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8104492:	693b      	ldr	r3, [r7, #16]
 8104494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810449a:	693b      	ldr	r3, [r7, #16]
 810449c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 81044a2:	683b      	ldr	r3, [r7, #0]
 81044a4:	695b      	ldr	r3, [r3, #20]
 81044a6:	693a      	ldr	r2, [r7, #16]
 81044a8:	4313      	orrs	r3, r2
 81044aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 81044ac:	683b      	ldr	r3, [r7, #0]
 81044ae:	699b      	ldr	r3, [r3, #24]
 81044b0:	693a      	ldr	r2, [r7, #16]
 81044b2:	4313      	orrs	r3, r2
 81044b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	693a      	ldr	r2, [r7, #16]
 81044ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	68fa      	ldr	r2, [r7, #12]
 81044c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81044c2:	683b      	ldr	r3, [r7, #0]
 81044c4:	685a      	ldr	r2, [r3, #4]
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	697a      	ldr	r2, [r7, #20]
 81044ce:	621a      	str	r2, [r3, #32]
}
 81044d0:	bf00      	nop
 81044d2:	371c      	adds	r7, #28
 81044d4:	46bd      	mov	sp, r7
 81044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044da:	4770      	bx	lr
 81044dc:	40010000 	.word	0x40010000
 81044e0:	40010400 	.word	0x40010400
 81044e4:	40014000 	.word	0x40014000
 81044e8:	40014400 	.word	0x40014400
 81044ec:	40014800 	.word	0x40014800

081044f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81044f0:	b480      	push	{r7}
 81044f2:	b087      	sub	sp, #28
 81044f4:	af00      	add	r7, sp, #0
 81044f6:	6078      	str	r0, [r7, #4]
 81044f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	6a1b      	ldr	r3, [r3, #32]
 81044fe:	f023 0210 	bic.w	r2, r3, #16
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104506:	687b      	ldr	r3, [r7, #4]
 8104508:	6a1b      	ldr	r3, [r3, #32]
 810450a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	685b      	ldr	r3, [r3, #4]
 8104510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	699b      	ldr	r3, [r3, #24]
 8104516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8104518:	68fb      	ldr	r3, [r7, #12]
 810451a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810451e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8104522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810452a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810452c:	683b      	ldr	r3, [r7, #0]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	021b      	lsls	r3, r3, #8
 8104532:	68fa      	ldr	r2, [r7, #12]
 8104534:	4313      	orrs	r3, r2
 8104536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8104538:	697b      	ldr	r3, [r7, #20]
 810453a:	f023 0320 	bic.w	r3, r3, #32
 810453e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8104540:	683b      	ldr	r3, [r7, #0]
 8104542:	689b      	ldr	r3, [r3, #8]
 8104544:	011b      	lsls	r3, r3, #4
 8104546:	697a      	ldr	r2, [r7, #20]
 8104548:	4313      	orrs	r3, r2
 810454a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	4a28      	ldr	r2, [pc, #160]	; (81045f0 <TIM_OC2_SetConfig+0x100>)
 8104550:	4293      	cmp	r3, r2
 8104552:	d003      	beq.n	810455c <TIM_OC2_SetConfig+0x6c>
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	4a27      	ldr	r2, [pc, #156]	; (81045f4 <TIM_OC2_SetConfig+0x104>)
 8104558:	4293      	cmp	r3, r2
 810455a:	d10d      	bne.n	8104578 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810455c:	697b      	ldr	r3, [r7, #20]
 810455e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8104562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8104564:	683b      	ldr	r3, [r7, #0]
 8104566:	68db      	ldr	r3, [r3, #12]
 8104568:	011b      	lsls	r3, r3, #4
 810456a:	697a      	ldr	r2, [r7, #20]
 810456c:	4313      	orrs	r3, r2
 810456e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8104570:	697b      	ldr	r3, [r7, #20]
 8104572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104576:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	4a1d      	ldr	r2, [pc, #116]	; (81045f0 <TIM_OC2_SetConfig+0x100>)
 810457c:	4293      	cmp	r3, r2
 810457e:	d00f      	beq.n	81045a0 <TIM_OC2_SetConfig+0xb0>
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	4a1c      	ldr	r2, [pc, #112]	; (81045f4 <TIM_OC2_SetConfig+0x104>)
 8104584:	4293      	cmp	r3, r2
 8104586:	d00b      	beq.n	81045a0 <TIM_OC2_SetConfig+0xb0>
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	4a1b      	ldr	r2, [pc, #108]	; (81045f8 <TIM_OC2_SetConfig+0x108>)
 810458c:	4293      	cmp	r3, r2
 810458e:	d007      	beq.n	81045a0 <TIM_OC2_SetConfig+0xb0>
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	4a1a      	ldr	r2, [pc, #104]	; (81045fc <TIM_OC2_SetConfig+0x10c>)
 8104594:	4293      	cmp	r3, r2
 8104596:	d003      	beq.n	81045a0 <TIM_OC2_SetConfig+0xb0>
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	4a19      	ldr	r2, [pc, #100]	; (8104600 <TIM_OC2_SetConfig+0x110>)
 810459c:	4293      	cmp	r3, r2
 810459e:	d113      	bne.n	81045c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 81045a0:	693b      	ldr	r3, [r7, #16]
 81045a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 81045a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 81045a8:	693b      	ldr	r3, [r7, #16]
 81045aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 81045ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 81045b0:	683b      	ldr	r3, [r7, #0]
 81045b2:	695b      	ldr	r3, [r3, #20]
 81045b4:	009b      	lsls	r3, r3, #2
 81045b6:	693a      	ldr	r2, [r7, #16]
 81045b8:	4313      	orrs	r3, r2
 81045ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81045bc:	683b      	ldr	r3, [r7, #0]
 81045be:	699b      	ldr	r3, [r3, #24]
 81045c0:	009b      	lsls	r3, r3, #2
 81045c2:	693a      	ldr	r2, [r7, #16]
 81045c4:	4313      	orrs	r3, r2
 81045c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	693a      	ldr	r2, [r7, #16]
 81045cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	68fa      	ldr	r2, [r7, #12]
 81045d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81045d4:	683b      	ldr	r3, [r7, #0]
 81045d6:	685a      	ldr	r2, [r3, #4]
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	697a      	ldr	r2, [r7, #20]
 81045e0:	621a      	str	r2, [r3, #32]
}
 81045e2:	bf00      	nop
 81045e4:	371c      	adds	r7, #28
 81045e6:	46bd      	mov	sp, r7
 81045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045ec:	4770      	bx	lr
 81045ee:	bf00      	nop
 81045f0:	40010000 	.word	0x40010000
 81045f4:	40010400 	.word	0x40010400
 81045f8:	40014000 	.word	0x40014000
 81045fc:	40014400 	.word	0x40014400
 8104600:	40014800 	.word	0x40014800

08104604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104604:	b480      	push	{r7}
 8104606:	b087      	sub	sp, #28
 8104608:	af00      	add	r7, sp, #0
 810460a:	6078      	str	r0, [r7, #4]
 810460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	6a1b      	ldr	r3, [r3, #32]
 8104612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8104616:	687b      	ldr	r3, [r7, #4]
 8104618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	6a1b      	ldr	r3, [r3, #32]
 810461e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	685b      	ldr	r3, [r3, #4]
 8104624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	69db      	ldr	r3, [r3, #28]
 810462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810462c:	68fb      	ldr	r3, [r7, #12]
 810462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8104634:	68fb      	ldr	r3, [r7, #12]
 8104636:	f023 0303 	bic.w	r3, r3, #3
 810463a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810463c:	683b      	ldr	r3, [r7, #0]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	68fa      	ldr	r2, [r7, #12]
 8104642:	4313      	orrs	r3, r2
 8104644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8104646:	697b      	ldr	r3, [r7, #20]
 8104648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810464c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810464e:	683b      	ldr	r3, [r7, #0]
 8104650:	689b      	ldr	r3, [r3, #8]
 8104652:	021b      	lsls	r3, r3, #8
 8104654:	697a      	ldr	r2, [r7, #20]
 8104656:	4313      	orrs	r3, r2
 8104658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810465a:	687b      	ldr	r3, [r7, #4]
 810465c:	4a27      	ldr	r2, [pc, #156]	; (81046fc <TIM_OC3_SetConfig+0xf8>)
 810465e:	4293      	cmp	r3, r2
 8104660:	d003      	beq.n	810466a <TIM_OC3_SetConfig+0x66>
 8104662:	687b      	ldr	r3, [r7, #4]
 8104664:	4a26      	ldr	r2, [pc, #152]	; (8104700 <TIM_OC3_SetConfig+0xfc>)
 8104666:	4293      	cmp	r3, r2
 8104668:	d10d      	bne.n	8104686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810466a:	697b      	ldr	r3, [r7, #20]
 810466c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8104670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8104672:	683b      	ldr	r3, [r7, #0]
 8104674:	68db      	ldr	r3, [r3, #12]
 8104676:	021b      	lsls	r3, r3, #8
 8104678:	697a      	ldr	r2, [r7, #20]
 810467a:	4313      	orrs	r3, r2
 810467c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810467e:	697b      	ldr	r3, [r7, #20]
 8104680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8104684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	4a1c      	ldr	r2, [pc, #112]	; (81046fc <TIM_OC3_SetConfig+0xf8>)
 810468a:	4293      	cmp	r3, r2
 810468c:	d00f      	beq.n	81046ae <TIM_OC3_SetConfig+0xaa>
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	4a1b      	ldr	r2, [pc, #108]	; (8104700 <TIM_OC3_SetConfig+0xfc>)
 8104692:	4293      	cmp	r3, r2
 8104694:	d00b      	beq.n	81046ae <TIM_OC3_SetConfig+0xaa>
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	4a1a      	ldr	r2, [pc, #104]	; (8104704 <TIM_OC3_SetConfig+0x100>)
 810469a:	4293      	cmp	r3, r2
 810469c:	d007      	beq.n	81046ae <TIM_OC3_SetConfig+0xaa>
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	4a19      	ldr	r2, [pc, #100]	; (8104708 <TIM_OC3_SetConfig+0x104>)
 81046a2:	4293      	cmp	r3, r2
 81046a4:	d003      	beq.n	81046ae <TIM_OC3_SetConfig+0xaa>
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	4a18      	ldr	r2, [pc, #96]	; (810470c <TIM_OC3_SetConfig+0x108>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d113      	bne.n	81046d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 81046ae:	693b      	ldr	r3, [r7, #16]
 81046b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81046b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81046b6:	693b      	ldr	r3, [r7, #16]
 81046b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81046be:	683b      	ldr	r3, [r7, #0]
 81046c0:	695b      	ldr	r3, [r3, #20]
 81046c2:	011b      	lsls	r3, r3, #4
 81046c4:	693a      	ldr	r2, [r7, #16]
 81046c6:	4313      	orrs	r3, r2
 81046c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81046ca:	683b      	ldr	r3, [r7, #0]
 81046cc:	699b      	ldr	r3, [r3, #24]
 81046ce:	011b      	lsls	r3, r3, #4
 81046d0:	693a      	ldr	r2, [r7, #16]
 81046d2:	4313      	orrs	r3, r2
 81046d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81046d6:	687b      	ldr	r3, [r7, #4]
 81046d8:	693a      	ldr	r2, [r7, #16]
 81046da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	68fa      	ldr	r2, [r7, #12]
 81046e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81046e2:	683b      	ldr	r3, [r7, #0]
 81046e4:	685a      	ldr	r2, [r3, #4]
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	697a      	ldr	r2, [r7, #20]
 81046ee:	621a      	str	r2, [r3, #32]
}
 81046f0:	bf00      	nop
 81046f2:	371c      	adds	r7, #28
 81046f4:	46bd      	mov	sp, r7
 81046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046fa:	4770      	bx	lr
 81046fc:	40010000 	.word	0x40010000
 8104700:	40010400 	.word	0x40010400
 8104704:	40014000 	.word	0x40014000
 8104708:	40014400 	.word	0x40014400
 810470c:	40014800 	.word	0x40014800

08104710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8104710:	b480      	push	{r7}
 8104712:	b087      	sub	sp, #28
 8104714:	af00      	add	r7, sp, #0
 8104716:	6078      	str	r0, [r7, #4]
 8104718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	6a1b      	ldr	r3, [r3, #32]
 810471e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	6a1b      	ldr	r3, [r3, #32]
 810472a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	685b      	ldr	r3, [r3, #4]
 8104730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	69db      	ldr	r3, [r3, #28]
 8104736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8104738:	68fb      	ldr	r3, [r7, #12]
 810473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810473e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104748:	683b      	ldr	r3, [r7, #0]
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	021b      	lsls	r3, r3, #8
 810474e:	68fa      	ldr	r2, [r7, #12]
 8104750:	4313      	orrs	r3, r2
 8104752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8104754:	693b      	ldr	r3, [r7, #16]
 8104756:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810475a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810475c:	683b      	ldr	r3, [r7, #0]
 810475e:	689b      	ldr	r3, [r3, #8]
 8104760:	031b      	lsls	r3, r3, #12
 8104762:	693a      	ldr	r2, [r7, #16]
 8104764:	4313      	orrs	r3, r2
 8104766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	4a18      	ldr	r2, [pc, #96]	; (81047cc <TIM_OC4_SetConfig+0xbc>)
 810476c:	4293      	cmp	r3, r2
 810476e:	d00f      	beq.n	8104790 <TIM_OC4_SetConfig+0x80>
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	4a17      	ldr	r2, [pc, #92]	; (81047d0 <TIM_OC4_SetConfig+0xc0>)
 8104774:	4293      	cmp	r3, r2
 8104776:	d00b      	beq.n	8104790 <TIM_OC4_SetConfig+0x80>
 8104778:	687b      	ldr	r3, [r7, #4]
 810477a:	4a16      	ldr	r2, [pc, #88]	; (81047d4 <TIM_OC4_SetConfig+0xc4>)
 810477c:	4293      	cmp	r3, r2
 810477e:	d007      	beq.n	8104790 <TIM_OC4_SetConfig+0x80>
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	4a15      	ldr	r2, [pc, #84]	; (81047d8 <TIM_OC4_SetConfig+0xc8>)
 8104784:	4293      	cmp	r3, r2
 8104786:	d003      	beq.n	8104790 <TIM_OC4_SetConfig+0x80>
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	4a14      	ldr	r2, [pc, #80]	; (81047dc <TIM_OC4_SetConfig+0xcc>)
 810478c:	4293      	cmp	r3, r2
 810478e:	d109      	bne.n	81047a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8104790:	697b      	ldr	r3, [r7, #20]
 8104792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8104796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8104798:	683b      	ldr	r3, [r7, #0]
 810479a:	695b      	ldr	r3, [r3, #20]
 810479c:	019b      	lsls	r3, r3, #6
 810479e:	697a      	ldr	r2, [r7, #20]
 81047a0:	4313      	orrs	r3, r2
 81047a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81047a4:	687b      	ldr	r3, [r7, #4]
 81047a6:	697a      	ldr	r2, [r7, #20]
 81047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81047aa:	687b      	ldr	r3, [r7, #4]
 81047ac:	68fa      	ldr	r2, [r7, #12]
 81047ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81047b0:	683b      	ldr	r3, [r7, #0]
 81047b2:	685a      	ldr	r2, [r3, #4]
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	693a      	ldr	r2, [r7, #16]
 81047bc:	621a      	str	r2, [r3, #32]
}
 81047be:	bf00      	nop
 81047c0:	371c      	adds	r7, #28
 81047c2:	46bd      	mov	sp, r7
 81047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047c8:	4770      	bx	lr
 81047ca:	bf00      	nop
 81047cc:	40010000 	.word	0x40010000
 81047d0:	40010400 	.word	0x40010400
 81047d4:	40014000 	.word	0x40014000
 81047d8:	40014400 	.word	0x40014400
 81047dc:	40014800 	.word	0x40014800

081047e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81047e0:	b480      	push	{r7}
 81047e2:	b087      	sub	sp, #28
 81047e4:	af00      	add	r7, sp, #0
 81047e6:	6078      	str	r0, [r7, #4]
 81047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81047ea:	687b      	ldr	r3, [r7, #4]
 81047ec:	6a1b      	ldr	r3, [r3, #32]
 81047ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	6a1b      	ldr	r3, [r3, #32]
 81047fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	685b      	ldr	r3, [r3, #4]
 8104800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8104808:	68fb      	ldr	r3, [r7, #12]
 810480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104810:	683b      	ldr	r3, [r7, #0]
 8104812:	681b      	ldr	r3, [r3, #0]
 8104814:	68fa      	ldr	r2, [r7, #12]
 8104816:	4313      	orrs	r3, r2
 8104818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810481a:	693b      	ldr	r3, [r7, #16]
 810481c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8104820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8104822:	683b      	ldr	r3, [r7, #0]
 8104824:	689b      	ldr	r3, [r3, #8]
 8104826:	041b      	lsls	r3, r3, #16
 8104828:	693a      	ldr	r2, [r7, #16]
 810482a:	4313      	orrs	r3, r2
 810482c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	4a17      	ldr	r2, [pc, #92]	; (8104890 <TIM_OC5_SetConfig+0xb0>)
 8104832:	4293      	cmp	r3, r2
 8104834:	d00f      	beq.n	8104856 <TIM_OC5_SetConfig+0x76>
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	4a16      	ldr	r2, [pc, #88]	; (8104894 <TIM_OC5_SetConfig+0xb4>)
 810483a:	4293      	cmp	r3, r2
 810483c:	d00b      	beq.n	8104856 <TIM_OC5_SetConfig+0x76>
 810483e:	687b      	ldr	r3, [r7, #4]
 8104840:	4a15      	ldr	r2, [pc, #84]	; (8104898 <TIM_OC5_SetConfig+0xb8>)
 8104842:	4293      	cmp	r3, r2
 8104844:	d007      	beq.n	8104856 <TIM_OC5_SetConfig+0x76>
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	4a14      	ldr	r2, [pc, #80]	; (810489c <TIM_OC5_SetConfig+0xbc>)
 810484a:	4293      	cmp	r3, r2
 810484c:	d003      	beq.n	8104856 <TIM_OC5_SetConfig+0x76>
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	4a13      	ldr	r2, [pc, #76]	; (81048a0 <TIM_OC5_SetConfig+0xc0>)
 8104852:	4293      	cmp	r3, r2
 8104854:	d109      	bne.n	810486a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8104856:	697b      	ldr	r3, [r7, #20]
 8104858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810485c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810485e:	683b      	ldr	r3, [r7, #0]
 8104860:	695b      	ldr	r3, [r3, #20]
 8104862:	021b      	lsls	r3, r3, #8
 8104864:	697a      	ldr	r2, [r7, #20]
 8104866:	4313      	orrs	r3, r2
 8104868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	697a      	ldr	r2, [r7, #20]
 810486e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104870:	687b      	ldr	r3, [r7, #4]
 8104872:	68fa      	ldr	r2, [r7, #12]
 8104874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8104876:	683b      	ldr	r3, [r7, #0]
 8104878:	685a      	ldr	r2, [r3, #4]
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810487e:	687b      	ldr	r3, [r7, #4]
 8104880:	693a      	ldr	r2, [r7, #16]
 8104882:	621a      	str	r2, [r3, #32]
}
 8104884:	bf00      	nop
 8104886:	371c      	adds	r7, #28
 8104888:	46bd      	mov	sp, r7
 810488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810488e:	4770      	bx	lr
 8104890:	40010000 	.word	0x40010000
 8104894:	40010400 	.word	0x40010400
 8104898:	40014000 	.word	0x40014000
 810489c:	40014400 	.word	0x40014400
 81048a0:	40014800 	.word	0x40014800

081048a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81048a4:	b480      	push	{r7}
 81048a6:	b087      	sub	sp, #28
 81048a8:	af00      	add	r7, sp, #0
 81048aa:	6078      	str	r0, [r7, #4]
 81048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	6a1b      	ldr	r3, [r3, #32]
 81048b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	6a1b      	ldr	r3, [r3, #32]
 81048be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	685b      	ldr	r3, [r3, #4]
 81048c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81048cc:	68fb      	ldr	r3, [r7, #12]
 81048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81048d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81048d4:	683b      	ldr	r3, [r7, #0]
 81048d6:	681b      	ldr	r3, [r3, #0]
 81048d8:	021b      	lsls	r3, r3, #8
 81048da:	68fa      	ldr	r2, [r7, #12]
 81048dc:	4313      	orrs	r3, r2
 81048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81048e0:	693b      	ldr	r3, [r7, #16]
 81048e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81048e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81048e8:	683b      	ldr	r3, [r7, #0]
 81048ea:	689b      	ldr	r3, [r3, #8]
 81048ec:	051b      	lsls	r3, r3, #20
 81048ee:	693a      	ldr	r2, [r7, #16]
 81048f0:	4313      	orrs	r3, r2
 81048f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	4a18      	ldr	r2, [pc, #96]	; (8104958 <TIM_OC6_SetConfig+0xb4>)
 81048f8:	4293      	cmp	r3, r2
 81048fa:	d00f      	beq.n	810491c <TIM_OC6_SetConfig+0x78>
 81048fc:	687b      	ldr	r3, [r7, #4]
 81048fe:	4a17      	ldr	r2, [pc, #92]	; (810495c <TIM_OC6_SetConfig+0xb8>)
 8104900:	4293      	cmp	r3, r2
 8104902:	d00b      	beq.n	810491c <TIM_OC6_SetConfig+0x78>
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	4a16      	ldr	r2, [pc, #88]	; (8104960 <TIM_OC6_SetConfig+0xbc>)
 8104908:	4293      	cmp	r3, r2
 810490a:	d007      	beq.n	810491c <TIM_OC6_SetConfig+0x78>
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	4a15      	ldr	r2, [pc, #84]	; (8104964 <TIM_OC6_SetConfig+0xc0>)
 8104910:	4293      	cmp	r3, r2
 8104912:	d003      	beq.n	810491c <TIM_OC6_SetConfig+0x78>
 8104914:	687b      	ldr	r3, [r7, #4]
 8104916:	4a14      	ldr	r2, [pc, #80]	; (8104968 <TIM_OC6_SetConfig+0xc4>)
 8104918:	4293      	cmp	r3, r2
 810491a:	d109      	bne.n	8104930 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810491c:	697b      	ldr	r3, [r7, #20]
 810491e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8104922:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8104924:	683b      	ldr	r3, [r7, #0]
 8104926:	695b      	ldr	r3, [r3, #20]
 8104928:	029b      	lsls	r3, r3, #10
 810492a:	697a      	ldr	r2, [r7, #20]
 810492c:	4313      	orrs	r3, r2
 810492e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104930:	687b      	ldr	r3, [r7, #4]
 8104932:	697a      	ldr	r2, [r7, #20]
 8104934:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	68fa      	ldr	r2, [r7, #12]
 810493a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810493c:	683b      	ldr	r3, [r7, #0]
 810493e:	685a      	ldr	r2, [r3, #4]
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	693a      	ldr	r2, [r7, #16]
 8104948:	621a      	str	r2, [r3, #32]
}
 810494a:	bf00      	nop
 810494c:	371c      	adds	r7, #28
 810494e:	46bd      	mov	sp, r7
 8104950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104954:	4770      	bx	lr
 8104956:	bf00      	nop
 8104958:	40010000 	.word	0x40010000
 810495c:	40010400 	.word	0x40010400
 8104960:	40014000 	.word	0x40014000
 8104964:	40014400 	.word	0x40014400
 8104968:	40014800 	.word	0x40014800

0810496c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810496c:	b480      	push	{r7}
 810496e:	b087      	sub	sp, #28
 8104970:	af00      	add	r7, sp, #0
 8104972:	60f8      	str	r0, [r7, #12]
 8104974:	60b9      	str	r1, [r7, #8]
 8104976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8104978:	68fb      	ldr	r3, [r7, #12]
 810497a:	6a1b      	ldr	r3, [r3, #32]
 810497c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810497e:	68fb      	ldr	r3, [r7, #12]
 8104980:	6a1b      	ldr	r3, [r3, #32]
 8104982:	f023 0201 	bic.w	r2, r3, #1
 8104986:	68fb      	ldr	r3, [r7, #12]
 8104988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810498a:	68fb      	ldr	r3, [r7, #12]
 810498c:	699b      	ldr	r3, [r3, #24]
 810498e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8104990:	693b      	ldr	r3, [r7, #16]
 8104992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8104996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8104998:	687b      	ldr	r3, [r7, #4]
 810499a:	011b      	lsls	r3, r3, #4
 810499c:	693a      	ldr	r2, [r7, #16]
 810499e:	4313      	orrs	r3, r2
 81049a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81049a2:	697b      	ldr	r3, [r7, #20]
 81049a4:	f023 030a 	bic.w	r3, r3, #10
 81049a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81049aa:	697a      	ldr	r2, [r7, #20]
 81049ac:	68bb      	ldr	r3, [r7, #8]
 81049ae:	4313      	orrs	r3, r2
 81049b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81049b2:	68fb      	ldr	r3, [r7, #12]
 81049b4:	693a      	ldr	r2, [r7, #16]
 81049b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81049b8:	68fb      	ldr	r3, [r7, #12]
 81049ba:	697a      	ldr	r2, [r7, #20]
 81049bc:	621a      	str	r2, [r3, #32]
}
 81049be:	bf00      	nop
 81049c0:	371c      	adds	r7, #28
 81049c2:	46bd      	mov	sp, r7
 81049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049c8:	4770      	bx	lr

081049ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81049ca:	b480      	push	{r7}
 81049cc:	b087      	sub	sp, #28
 81049ce:	af00      	add	r7, sp, #0
 81049d0:	60f8      	str	r0, [r7, #12]
 81049d2:	60b9      	str	r1, [r7, #8]
 81049d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81049d6:	68fb      	ldr	r3, [r7, #12]
 81049d8:	6a1b      	ldr	r3, [r3, #32]
 81049da:	f023 0210 	bic.w	r2, r3, #16
 81049de:	68fb      	ldr	r3, [r7, #12]
 81049e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81049e2:	68fb      	ldr	r3, [r7, #12]
 81049e4:	699b      	ldr	r3, [r3, #24]
 81049e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81049e8:	68fb      	ldr	r3, [r7, #12]
 81049ea:	6a1b      	ldr	r3, [r3, #32]
 81049ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81049ee:	697b      	ldr	r3, [r7, #20]
 81049f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81049f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	031b      	lsls	r3, r3, #12
 81049fa:	697a      	ldr	r2, [r7, #20]
 81049fc:	4313      	orrs	r3, r2
 81049fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8104a00:	693b      	ldr	r3, [r7, #16]
 8104a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8104a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8104a08:	68bb      	ldr	r3, [r7, #8]
 8104a0a:	011b      	lsls	r3, r3, #4
 8104a0c:	693a      	ldr	r2, [r7, #16]
 8104a0e:	4313      	orrs	r3, r2
 8104a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8104a12:	68fb      	ldr	r3, [r7, #12]
 8104a14:	697a      	ldr	r2, [r7, #20]
 8104a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	693a      	ldr	r2, [r7, #16]
 8104a1c:	621a      	str	r2, [r3, #32]
}
 8104a1e:	bf00      	nop
 8104a20:	371c      	adds	r7, #28
 8104a22:	46bd      	mov	sp, r7
 8104a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a28:	4770      	bx	lr

08104a2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8104a2a:	b480      	push	{r7}
 8104a2c:	b085      	sub	sp, #20
 8104a2e:	af00      	add	r7, sp, #0
 8104a30:	6078      	str	r0, [r7, #4]
 8104a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	689b      	ldr	r3, [r3, #8]
 8104a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8104a3a:	68fb      	ldr	r3, [r7, #12]
 8104a3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8104a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8104a46:	683a      	ldr	r2, [r7, #0]
 8104a48:	68fb      	ldr	r3, [r7, #12]
 8104a4a:	4313      	orrs	r3, r2
 8104a4c:	f043 0307 	orr.w	r3, r3, #7
 8104a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8104a52:	687b      	ldr	r3, [r7, #4]
 8104a54:	68fa      	ldr	r2, [r7, #12]
 8104a56:	609a      	str	r2, [r3, #8]
}
 8104a58:	bf00      	nop
 8104a5a:	3714      	adds	r7, #20
 8104a5c:	46bd      	mov	sp, r7
 8104a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a62:	4770      	bx	lr

08104a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8104a64:	b480      	push	{r7}
 8104a66:	b087      	sub	sp, #28
 8104a68:	af00      	add	r7, sp, #0
 8104a6a:	60f8      	str	r0, [r7, #12]
 8104a6c:	60b9      	str	r1, [r7, #8]
 8104a6e:	607a      	str	r2, [r7, #4]
 8104a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8104a72:	68fb      	ldr	r3, [r7, #12]
 8104a74:	689b      	ldr	r3, [r3, #8]
 8104a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8104a78:	697b      	ldr	r3, [r7, #20]
 8104a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8104a80:	683b      	ldr	r3, [r7, #0]
 8104a82:	021a      	lsls	r2, r3, #8
 8104a84:	687b      	ldr	r3, [r7, #4]
 8104a86:	431a      	orrs	r2, r3
 8104a88:	68bb      	ldr	r3, [r7, #8]
 8104a8a:	4313      	orrs	r3, r2
 8104a8c:	697a      	ldr	r2, [r7, #20]
 8104a8e:	4313      	orrs	r3, r2
 8104a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8104a92:	68fb      	ldr	r3, [r7, #12]
 8104a94:	697a      	ldr	r2, [r7, #20]
 8104a96:	609a      	str	r2, [r3, #8]
}
 8104a98:	bf00      	nop
 8104a9a:	371c      	adds	r7, #28
 8104a9c:	46bd      	mov	sp, r7
 8104a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aa2:	4770      	bx	lr

08104aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8104aa4:	b480      	push	{r7}
 8104aa6:	b087      	sub	sp, #28
 8104aa8:	af00      	add	r7, sp, #0
 8104aaa:	60f8      	str	r0, [r7, #12]
 8104aac:	60b9      	str	r1, [r7, #8]
 8104aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8104ab0:	68bb      	ldr	r3, [r7, #8]
 8104ab2:	f003 031f 	and.w	r3, r3, #31
 8104ab6:	2201      	movs	r2, #1
 8104ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8104abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8104abe:	68fb      	ldr	r3, [r7, #12]
 8104ac0:	6a1a      	ldr	r2, [r3, #32]
 8104ac2:	697b      	ldr	r3, [r7, #20]
 8104ac4:	43db      	mvns	r3, r3
 8104ac6:	401a      	ands	r2, r3
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8104acc:	68fb      	ldr	r3, [r7, #12]
 8104ace:	6a1a      	ldr	r2, [r3, #32]
 8104ad0:	68bb      	ldr	r3, [r7, #8]
 8104ad2:	f003 031f 	and.w	r3, r3, #31
 8104ad6:	6879      	ldr	r1, [r7, #4]
 8104ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8104adc:	431a      	orrs	r2, r3
 8104ade:	68fb      	ldr	r3, [r7, #12]
 8104ae0:	621a      	str	r2, [r3, #32]
}
 8104ae2:	bf00      	nop
 8104ae4:	371c      	adds	r7, #28
 8104ae6:	46bd      	mov	sp, r7
 8104ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aec:	4770      	bx	lr
	...

08104af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8104af0:	b480      	push	{r7}
 8104af2:	b085      	sub	sp, #20
 8104af4:	af00      	add	r7, sp, #0
 8104af6:	6078      	str	r0, [r7, #4]
 8104af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8104afa:	687b      	ldr	r3, [r7, #4]
 8104afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104b00:	2b01      	cmp	r3, #1
 8104b02:	d101      	bne.n	8104b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8104b04:	2302      	movs	r3, #2
 8104b06:	e068      	b.n	8104bda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	2201      	movs	r2, #1
 8104b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	2202      	movs	r2, #2
 8104b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8104b18:	687b      	ldr	r3, [r7, #4]
 8104b1a:	681b      	ldr	r3, [r3, #0]
 8104b1c:	685b      	ldr	r3, [r3, #4]
 8104b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8104b20:	687b      	ldr	r3, [r7, #4]
 8104b22:	681b      	ldr	r3, [r3, #0]
 8104b24:	689b      	ldr	r3, [r3, #8]
 8104b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8104b28:	687b      	ldr	r3, [r7, #4]
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	4a2e      	ldr	r2, [pc, #184]	; (8104be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8104b2e:	4293      	cmp	r3, r2
 8104b30:	d004      	beq.n	8104b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8104b32:	687b      	ldr	r3, [r7, #4]
 8104b34:	681b      	ldr	r3, [r3, #0]
 8104b36:	4a2d      	ldr	r2, [pc, #180]	; (8104bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8104b38:	4293      	cmp	r3, r2
 8104b3a:	d108      	bne.n	8104b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8104b3c:	68fb      	ldr	r3, [r7, #12]
 8104b3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8104b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8104b44:	683b      	ldr	r3, [r7, #0]
 8104b46:	685b      	ldr	r3, [r3, #4]
 8104b48:	68fa      	ldr	r2, [r7, #12]
 8104b4a:	4313      	orrs	r3, r2
 8104b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8104b4e:	68fb      	ldr	r3, [r7, #12]
 8104b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8104b56:	683b      	ldr	r3, [r7, #0]
 8104b58:	681b      	ldr	r3, [r3, #0]
 8104b5a:	68fa      	ldr	r2, [r7, #12]
 8104b5c:	4313      	orrs	r3, r2
 8104b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	681b      	ldr	r3, [r3, #0]
 8104b64:	68fa      	ldr	r2, [r7, #12]
 8104b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	4a1e      	ldr	r2, [pc, #120]	; (8104be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8104b6e:	4293      	cmp	r3, r2
 8104b70:	d01d      	beq.n	8104bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104b7a:	d018      	beq.n	8104bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	4a1b      	ldr	r2, [pc, #108]	; (8104bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8104b82:	4293      	cmp	r3, r2
 8104b84:	d013      	beq.n	8104bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	4a1a      	ldr	r2, [pc, #104]	; (8104bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8104b8c:	4293      	cmp	r3, r2
 8104b8e:	d00e      	beq.n	8104bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	4a18      	ldr	r2, [pc, #96]	; (8104bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8104b96:	4293      	cmp	r3, r2
 8104b98:	d009      	beq.n	8104bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	681b      	ldr	r3, [r3, #0]
 8104b9e:	4a13      	ldr	r2, [pc, #76]	; (8104bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8104ba0:	4293      	cmp	r3, r2
 8104ba2:	d004      	beq.n	8104bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	4a14      	ldr	r2, [pc, #80]	; (8104bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8104baa:	4293      	cmp	r3, r2
 8104bac:	d10c      	bne.n	8104bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8104bae:	68bb      	ldr	r3, [r7, #8]
 8104bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8104bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8104bb6:	683b      	ldr	r3, [r7, #0]
 8104bb8:	689b      	ldr	r3, [r3, #8]
 8104bba:	68ba      	ldr	r2, [r7, #8]
 8104bbc:	4313      	orrs	r3, r2
 8104bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	68ba      	ldr	r2, [r7, #8]
 8104bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	2201      	movs	r2, #1
 8104bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	2200      	movs	r2, #0
 8104bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104bd8:	2300      	movs	r3, #0
}
 8104bda:	4618      	mov	r0, r3
 8104bdc:	3714      	adds	r7, #20
 8104bde:	46bd      	mov	sp, r7
 8104be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104be4:	4770      	bx	lr
 8104be6:	bf00      	nop
 8104be8:	40010000 	.word	0x40010000
 8104bec:	40010400 	.word	0x40010400
 8104bf0:	40000400 	.word	0x40000400
 8104bf4:	40000800 	.word	0x40000800
 8104bf8:	40000c00 	.word	0x40000c00
 8104bfc:	40001800 	.word	0x40001800

08104c00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8104c00:	b480      	push	{r7}
 8104c02:	b085      	sub	sp, #20
 8104c04:	af00      	add	r7, sp, #0
 8104c06:	6078      	str	r0, [r7, #4]
 8104c08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8104c0a:	2300      	movs	r3, #0
 8104c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104c14:	2b01      	cmp	r3, #1
 8104c16:	d101      	bne.n	8104c1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8104c18:	2302      	movs	r3, #2
 8104c1a:	e065      	b.n	8104ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	2201      	movs	r2, #1
 8104c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8104c24:	68fb      	ldr	r3, [r7, #12]
 8104c26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104c2a:	683b      	ldr	r3, [r7, #0]
 8104c2c:	68db      	ldr	r3, [r3, #12]
 8104c2e:	4313      	orrs	r3, r2
 8104c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104c38:	683b      	ldr	r3, [r7, #0]
 8104c3a:	689b      	ldr	r3, [r3, #8]
 8104c3c:	4313      	orrs	r3, r2
 8104c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8104c40:	68fb      	ldr	r3, [r7, #12]
 8104c42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8104c46:	683b      	ldr	r3, [r7, #0]
 8104c48:	685b      	ldr	r3, [r3, #4]
 8104c4a:	4313      	orrs	r3, r2
 8104c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8104c4e:	68fb      	ldr	r3, [r7, #12]
 8104c50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8104c54:	683b      	ldr	r3, [r7, #0]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	4313      	orrs	r3, r2
 8104c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8104c5c:	68fb      	ldr	r3, [r7, #12]
 8104c5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104c62:	683b      	ldr	r3, [r7, #0]
 8104c64:	691b      	ldr	r3, [r3, #16]
 8104c66:	4313      	orrs	r3, r2
 8104c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8104c6a:	68fb      	ldr	r3, [r7, #12]
 8104c6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8104c70:	683b      	ldr	r3, [r7, #0]
 8104c72:	695b      	ldr	r3, [r3, #20]
 8104c74:	4313      	orrs	r3, r2
 8104c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104c7e:	683b      	ldr	r3, [r7, #0]
 8104c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104c82:	4313      	orrs	r3, r2
 8104c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8104c86:	68fb      	ldr	r3, [r7, #12]
 8104c88:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8104c8c:	683b      	ldr	r3, [r7, #0]
 8104c8e:	699b      	ldr	r3, [r3, #24]
 8104c90:	041b      	lsls	r3, r3, #16
 8104c92:	4313      	orrs	r3, r2
 8104c94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	681b      	ldr	r3, [r3, #0]
 8104c9a:	4a16      	ldr	r2, [pc, #88]	; (8104cf4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8104c9c:	4293      	cmp	r3, r2
 8104c9e:	d004      	beq.n	8104caa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	4a14      	ldr	r2, [pc, #80]	; (8104cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8104ca6:	4293      	cmp	r3, r2
 8104ca8:	d115      	bne.n	8104cd6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8104caa:	68fb      	ldr	r3, [r7, #12]
 8104cac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8104cb0:	683b      	ldr	r3, [r7, #0]
 8104cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104cb4:	051b      	lsls	r3, r3, #20
 8104cb6:	4313      	orrs	r3, r2
 8104cb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104cc0:	683b      	ldr	r3, [r7, #0]
 8104cc2:	69db      	ldr	r3, [r3, #28]
 8104cc4:	4313      	orrs	r3, r2
 8104cc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8104cc8:	68fb      	ldr	r3, [r7, #12]
 8104cca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8104cce:	683b      	ldr	r3, [r7, #0]
 8104cd0:	6a1b      	ldr	r3, [r3, #32]
 8104cd2:	4313      	orrs	r3, r2
 8104cd4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8104cd6:	687b      	ldr	r3, [r7, #4]
 8104cd8:	681b      	ldr	r3, [r3, #0]
 8104cda:	68fa      	ldr	r2, [r7, #12]
 8104cdc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	2200      	movs	r2, #0
 8104ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104ce6:	2300      	movs	r3, #0
}
 8104ce8:	4618      	mov	r0, r3
 8104cea:	3714      	adds	r7, #20
 8104cec:	46bd      	mov	sp, r7
 8104cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cf2:	4770      	bx	lr
 8104cf4:	40010000 	.word	0x40010000
 8104cf8:	40010400 	.word	0x40010400

08104cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8104cfc:	b480      	push	{r7}
 8104cfe:	b083      	sub	sp, #12
 8104d00:	af00      	add	r7, sp, #0
 8104d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8104d04:	bf00      	nop
 8104d06:	370c      	adds	r7, #12
 8104d08:	46bd      	mov	sp, r7
 8104d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d0e:	4770      	bx	lr

08104d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8104d10:	b480      	push	{r7}
 8104d12:	b083      	sub	sp, #12
 8104d14:	af00      	add	r7, sp, #0
 8104d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8104d18:	bf00      	nop
 8104d1a:	370c      	adds	r7, #12
 8104d1c:	46bd      	mov	sp, r7
 8104d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d22:	4770      	bx	lr

08104d24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8104d24:	b480      	push	{r7}
 8104d26:	b083      	sub	sp, #12
 8104d28:	af00      	add	r7, sp, #0
 8104d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8104d2c:	bf00      	nop
 8104d2e:	370c      	adds	r7, #12
 8104d30:	46bd      	mov	sp, r7
 8104d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d36:	4770      	bx	lr

08104d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104d38:	b580      	push	{r7, lr}
 8104d3a:	b082      	sub	sp, #8
 8104d3c:	af00      	add	r7, sp, #0
 8104d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	2b00      	cmp	r3, #0
 8104d44:	d101      	bne.n	8104d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104d46:	2301      	movs	r3, #1
 8104d48:	e042      	b.n	8104dd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104d4a:	687b      	ldr	r3, [r7, #4]
 8104d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d106      	bne.n	8104d62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	2200      	movs	r2, #0
 8104d58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104d5c:	6878      	ldr	r0, [r7, #4]
 8104d5e:	f7fc fef5 	bl	8101b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104d62:	687b      	ldr	r3, [r7, #4]
 8104d64:	2224      	movs	r2, #36	; 0x24
 8104d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	681a      	ldr	r2, [r3, #0]
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	f022 0201 	bic.w	r2, r2, #1
 8104d78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104d7a:	6878      	ldr	r0, [r7, #4]
 8104d7c:	f000 f82c 	bl	8104dd8 <UART_SetConfig>
 8104d80:	4603      	mov	r3, r0
 8104d82:	2b01      	cmp	r3, #1
 8104d84:	d101      	bne.n	8104d8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104d86:	2301      	movs	r3, #1
 8104d88:	e022      	b.n	8104dd0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d8e:	2b00      	cmp	r3, #0
 8104d90:	d002      	beq.n	8104d98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8104d92:	6878      	ldr	r0, [r7, #4]
 8104d94:	f000 fdd0 	bl	8105938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	685a      	ldr	r2, [r3, #4]
 8104d9e:	687b      	ldr	r3, [r7, #4]
 8104da0:	681b      	ldr	r3, [r3, #0]
 8104da2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104da6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	689a      	ldr	r2, [r3, #8]
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104db6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	681a      	ldr	r2, [r3, #0]
 8104dbe:	687b      	ldr	r3, [r7, #4]
 8104dc0:	681b      	ldr	r3, [r3, #0]
 8104dc2:	f042 0201 	orr.w	r2, r2, #1
 8104dc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104dc8:	6878      	ldr	r0, [r7, #4]
 8104dca:	f000 fe57 	bl	8105a7c <UART_CheckIdleState>
 8104dce:	4603      	mov	r3, r0
}
 8104dd0:	4618      	mov	r0, r3
 8104dd2:	3708      	adds	r7, #8
 8104dd4:	46bd      	mov	sp, r7
 8104dd6:	bd80      	pop	{r7, pc}

08104dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104dd8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8104ddc:	b08e      	sub	sp, #56	; 0x38
 8104dde:	af00      	add	r7, sp, #0
 8104de0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104de2:	2300      	movs	r3, #0
 8104de4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	689a      	ldr	r2, [r3, #8]
 8104dec:	687b      	ldr	r3, [r7, #4]
 8104dee:	691b      	ldr	r3, [r3, #16]
 8104df0:	431a      	orrs	r2, r3
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	695b      	ldr	r3, [r3, #20]
 8104df6:	431a      	orrs	r2, r3
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	69db      	ldr	r3, [r3, #28]
 8104dfc:	4313      	orrs	r3, r2
 8104dfe:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8104e00:	687b      	ldr	r3, [r7, #4]
 8104e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104e06:	4313      	orrs	r3, r2
 8104e08:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104e0a:	687b      	ldr	r3, [r7, #4]
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	681a      	ldr	r2, [r3, #0]
 8104e10:	4bc2      	ldr	r3, [pc, #776]	; (810511c <UART_SetConfig+0x344>)
 8104e12:	4013      	ands	r3, r2
 8104e14:	687a      	ldr	r2, [r7, #4]
 8104e16:	6812      	ldr	r2, [r2, #0]
 8104e18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104e1a:	430b      	orrs	r3, r1
 8104e1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	681b      	ldr	r3, [r3, #0]
 8104e22:	685b      	ldr	r3, [r3, #4]
 8104e24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	68da      	ldr	r2, [r3, #12]
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	430a      	orrs	r2, r1
 8104e32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	699b      	ldr	r3, [r3, #24]
 8104e38:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	681b      	ldr	r3, [r3, #0]
 8104e3e:	4ab8      	ldr	r2, [pc, #736]	; (8105120 <UART_SetConfig+0x348>)
 8104e40:	4293      	cmp	r3, r2
 8104e42:	d004      	beq.n	8104e4e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	6a1b      	ldr	r3, [r3, #32]
 8104e48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104e4a:	4313      	orrs	r3, r2
 8104e4c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104e4e:	687b      	ldr	r3, [r7, #4]
 8104e50:	681b      	ldr	r3, [r3, #0]
 8104e52:	689b      	ldr	r3, [r3, #8]
 8104e54:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104e58:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104e5c:	687a      	ldr	r2, [r7, #4]
 8104e5e:	6812      	ldr	r2, [r2, #0]
 8104e60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104e62:	430b      	orrs	r3, r1
 8104e64:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	681b      	ldr	r3, [r3, #0]
 8104e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e6c:	f023 010f 	bic.w	r1, r3, #15
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	430a      	orrs	r2, r1
 8104e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	4aa8      	ldr	r2, [pc, #672]	; (8105124 <UART_SetConfig+0x34c>)
 8104e82:	4293      	cmp	r3, r2
 8104e84:	d177      	bne.n	8104f76 <UART_SetConfig+0x19e>
 8104e86:	4ba8      	ldr	r3, [pc, #672]	; (8105128 <UART_SetConfig+0x350>)
 8104e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104e8e:	2b28      	cmp	r3, #40	; 0x28
 8104e90:	d86c      	bhi.n	8104f6c <UART_SetConfig+0x194>
 8104e92:	a201      	add	r2, pc, #4	; (adr r2, 8104e98 <UART_SetConfig+0xc0>)
 8104e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e98:	08104f3d 	.word	0x08104f3d
 8104e9c:	08104f6d 	.word	0x08104f6d
 8104ea0:	08104f6d 	.word	0x08104f6d
 8104ea4:	08104f6d 	.word	0x08104f6d
 8104ea8:	08104f6d 	.word	0x08104f6d
 8104eac:	08104f6d 	.word	0x08104f6d
 8104eb0:	08104f6d 	.word	0x08104f6d
 8104eb4:	08104f6d 	.word	0x08104f6d
 8104eb8:	08104f45 	.word	0x08104f45
 8104ebc:	08104f6d 	.word	0x08104f6d
 8104ec0:	08104f6d 	.word	0x08104f6d
 8104ec4:	08104f6d 	.word	0x08104f6d
 8104ec8:	08104f6d 	.word	0x08104f6d
 8104ecc:	08104f6d 	.word	0x08104f6d
 8104ed0:	08104f6d 	.word	0x08104f6d
 8104ed4:	08104f6d 	.word	0x08104f6d
 8104ed8:	08104f4d 	.word	0x08104f4d
 8104edc:	08104f6d 	.word	0x08104f6d
 8104ee0:	08104f6d 	.word	0x08104f6d
 8104ee4:	08104f6d 	.word	0x08104f6d
 8104ee8:	08104f6d 	.word	0x08104f6d
 8104eec:	08104f6d 	.word	0x08104f6d
 8104ef0:	08104f6d 	.word	0x08104f6d
 8104ef4:	08104f6d 	.word	0x08104f6d
 8104ef8:	08104f55 	.word	0x08104f55
 8104efc:	08104f6d 	.word	0x08104f6d
 8104f00:	08104f6d 	.word	0x08104f6d
 8104f04:	08104f6d 	.word	0x08104f6d
 8104f08:	08104f6d 	.word	0x08104f6d
 8104f0c:	08104f6d 	.word	0x08104f6d
 8104f10:	08104f6d 	.word	0x08104f6d
 8104f14:	08104f6d 	.word	0x08104f6d
 8104f18:	08104f5d 	.word	0x08104f5d
 8104f1c:	08104f6d 	.word	0x08104f6d
 8104f20:	08104f6d 	.word	0x08104f6d
 8104f24:	08104f6d 	.word	0x08104f6d
 8104f28:	08104f6d 	.word	0x08104f6d
 8104f2c:	08104f6d 	.word	0x08104f6d
 8104f30:	08104f6d 	.word	0x08104f6d
 8104f34:	08104f6d 	.word	0x08104f6d
 8104f38:	08104f65 	.word	0x08104f65
 8104f3c:	2301      	movs	r3, #1
 8104f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f42:	e231      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104f44:	2304      	movs	r3, #4
 8104f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f4a:	e22d      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104f4c:	2308      	movs	r3, #8
 8104f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f52:	e229      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104f54:	2310      	movs	r3, #16
 8104f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f5a:	e225      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104f5c:	2320      	movs	r3, #32
 8104f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f62:	e221      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104f64:	2340      	movs	r3, #64	; 0x40
 8104f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f6a:	e21d      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104f6c:	2380      	movs	r3, #128	; 0x80
 8104f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f72:	bf00      	nop
 8104f74:	e218      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104f76:	687b      	ldr	r3, [r7, #4]
 8104f78:	681b      	ldr	r3, [r3, #0]
 8104f7a:	4a6c      	ldr	r2, [pc, #432]	; (810512c <UART_SetConfig+0x354>)
 8104f7c:	4293      	cmp	r3, r2
 8104f7e:	d132      	bne.n	8104fe6 <UART_SetConfig+0x20e>
 8104f80:	4b69      	ldr	r3, [pc, #420]	; (8105128 <UART_SetConfig+0x350>)
 8104f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f84:	f003 0307 	and.w	r3, r3, #7
 8104f88:	2b05      	cmp	r3, #5
 8104f8a:	d827      	bhi.n	8104fdc <UART_SetConfig+0x204>
 8104f8c:	a201      	add	r2, pc, #4	; (adr r2, 8104f94 <UART_SetConfig+0x1bc>)
 8104f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f92:	bf00      	nop
 8104f94:	08104fad 	.word	0x08104fad
 8104f98:	08104fb5 	.word	0x08104fb5
 8104f9c:	08104fbd 	.word	0x08104fbd
 8104fa0:	08104fc5 	.word	0x08104fc5
 8104fa4:	08104fcd 	.word	0x08104fcd
 8104fa8:	08104fd5 	.word	0x08104fd5
 8104fac:	2300      	movs	r3, #0
 8104fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fb2:	e1f9      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104fb4:	2304      	movs	r3, #4
 8104fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fba:	e1f5      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104fbc:	2308      	movs	r3, #8
 8104fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fc2:	e1f1      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104fc4:	2310      	movs	r3, #16
 8104fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fca:	e1ed      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104fcc:	2320      	movs	r3, #32
 8104fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fd2:	e1e9      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104fd4:	2340      	movs	r3, #64	; 0x40
 8104fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fda:	e1e5      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104fdc:	2380      	movs	r3, #128	; 0x80
 8104fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fe2:	bf00      	nop
 8104fe4:	e1e0      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8104fe6:	687b      	ldr	r3, [r7, #4]
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	4a51      	ldr	r2, [pc, #324]	; (8105130 <UART_SetConfig+0x358>)
 8104fec:	4293      	cmp	r3, r2
 8104fee:	d132      	bne.n	8105056 <UART_SetConfig+0x27e>
 8104ff0:	4b4d      	ldr	r3, [pc, #308]	; (8105128 <UART_SetConfig+0x350>)
 8104ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ff4:	f003 0307 	and.w	r3, r3, #7
 8104ff8:	2b05      	cmp	r3, #5
 8104ffa:	d827      	bhi.n	810504c <UART_SetConfig+0x274>
 8104ffc:	a201      	add	r2, pc, #4	; (adr r2, 8105004 <UART_SetConfig+0x22c>)
 8104ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105002:	bf00      	nop
 8105004:	0810501d 	.word	0x0810501d
 8105008:	08105025 	.word	0x08105025
 810500c:	0810502d 	.word	0x0810502d
 8105010:	08105035 	.word	0x08105035
 8105014:	0810503d 	.word	0x0810503d
 8105018:	08105045 	.word	0x08105045
 810501c:	2300      	movs	r3, #0
 810501e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105022:	e1c1      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105024:	2304      	movs	r3, #4
 8105026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810502a:	e1bd      	b.n	81053a8 <UART_SetConfig+0x5d0>
 810502c:	2308      	movs	r3, #8
 810502e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105032:	e1b9      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105034:	2310      	movs	r3, #16
 8105036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810503a:	e1b5      	b.n	81053a8 <UART_SetConfig+0x5d0>
 810503c:	2320      	movs	r3, #32
 810503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105042:	e1b1      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105044:	2340      	movs	r3, #64	; 0x40
 8105046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810504a:	e1ad      	b.n	81053a8 <UART_SetConfig+0x5d0>
 810504c:	2380      	movs	r3, #128	; 0x80
 810504e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105052:	bf00      	nop
 8105054:	e1a8      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	4a36      	ldr	r2, [pc, #216]	; (8105134 <UART_SetConfig+0x35c>)
 810505c:	4293      	cmp	r3, r2
 810505e:	d132      	bne.n	81050c6 <UART_SetConfig+0x2ee>
 8105060:	4b31      	ldr	r3, [pc, #196]	; (8105128 <UART_SetConfig+0x350>)
 8105062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105064:	f003 0307 	and.w	r3, r3, #7
 8105068:	2b05      	cmp	r3, #5
 810506a:	d827      	bhi.n	81050bc <UART_SetConfig+0x2e4>
 810506c:	a201      	add	r2, pc, #4	; (adr r2, 8105074 <UART_SetConfig+0x29c>)
 810506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105072:	bf00      	nop
 8105074:	0810508d 	.word	0x0810508d
 8105078:	08105095 	.word	0x08105095
 810507c:	0810509d 	.word	0x0810509d
 8105080:	081050a5 	.word	0x081050a5
 8105084:	081050ad 	.word	0x081050ad
 8105088:	081050b5 	.word	0x081050b5
 810508c:	2300      	movs	r3, #0
 810508e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105092:	e189      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105094:	2304      	movs	r3, #4
 8105096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810509a:	e185      	b.n	81053a8 <UART_SetConfig+0x5d0>
 810509c:	2308      	movs	r3, #8
 810509e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050a2:	e181      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81050a4:	2310      	movs	r3, #16
 81050a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050aa:	e17d      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81050ac:	2320      	movs	r3, #32
 81050ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050b2:	e179      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81050b4:	2340      	movs	r3, #64	; 0x40
 81050b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ba:	e175      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81050bc:	2380      	movs	r3, #128	; 0x80
 81050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050c2:	bf00      	nop
 81050c4:	e170      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81050c6:	687b      	ldr	r3, [r7, #4]
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	4a1b      	ldr	r2, [pc, #108]	; (8105138 <UART_SetConfig+0x360>)
 81050cc:	4293      	cmp	r3, r2
 81050ce:	d142      	bne.n	8105156 <UART_SetConfig+0x37e>
 81050d0:	4b15      	ldr	r3, [pc, #84]	; (8105128 <UART_SetConfig+0x350>)
 81050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81050d4:	f003 0307 	and.w	r3, r3, #7
 81050d8:	2b05      	cmp	r3, #5
 81050da:	d837      	bhi.n	810514c <UART_SetConfig+0x374>
 81050dc:	a201      	add	r2, pc, #4	; (adr r2, 81050e4 <UART_SetConfig+0x30c>)
 81050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050e2:	bf00      	nop
 81050e4:	081050fd 	.word	0x081050fd
 81050e8:	08105105 	.word	0x08105105
 81050ec:	0810510d 	.word	0x0810510d
 81050f0:	08105115 	.word	0x08105115
 81050f4:	0810513d 	.word	0x0810513d
 81050f8:	08105145 	.word	0x08105145
 81050fc:	2300      	movs	r3, #0
 81050fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105102:	e151      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105104:	2304      	movs	r3, #4
 8105106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810510a:	e14d      	b.n	81053a8 <UART_SetConfig+0x5d0>
 810510c:	2308      	movs	r3, #8
 810510e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105112:	e149      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105114:	2310      	movs	r3, #16
 8105116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810511a:	e145      	b.n	81053a8 <UART_SetConfig+0x5d0>
 810511c:	cfff69f3 	.word	0xcfff69f3
 8105120:	58000c00 	.word	0x58000c00
 8105124:	40011000 	.word	0x40011000
 8105128:	58024400 	.word	0x58024400
 810512c:	40004400 	.word	0x40004400
 8105130:	40004800 	.word	0x40004800
 8105134:	40004c00 	.word	0x40004c00
 8105138:	40005000 	.word	0x40005000
 810513c:	2320      	movs	r3, #32
 810513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105142:	e131      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105144:	2340      	movs	r3, #64	; 0x40
 8105146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810514a:	e12d      	b.n	81053a8 <UART_SetConfig+0x5d0>
 810514c:	2380      	movs	r3, #128	; 0x80
 810514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105152:	bf00      	nop
 8105154:	e128      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	4ab6      	ldr	r2, [pc, #728]	; (8105434 <UART_SetConfig+0x65c>)
 810515c:	4293      	cmp	r3, r2
 810515e:	d178      	bne.n	8105252 <UART_SetConfig+0x47a>
 8105160:	4bb5      	ldr	r3, [pc, #724]	; (8105438 <UART_SetConfig+0x660>)
 8105162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105168:	2b28      	cmp	r3, #40	; 0x28
 810516a:	d86d      	bhi.n	8105248 <UART_SetConfig+0x470>
 810516c:	a201      	add	r2, pc, #4	; (adr r2, 8105174 <UART_SetConfig+0x39c>)
 810516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105172:	bf00      	nop
 8105174:	08105219 	.word	0x08105219
 8105178:	08105249 	.word	0x08105249
 810517c:	08105249 	.word	0x08105249
 8105180:	08105249 	.word	0x08105249
 8105184:	08105249 	.word	0x08105249
 8105188:	08105249 	.word	0x08105249
 810518c:	08105249 	.word	0x08105249
 8105190:	08105249 	.word	0x08105249
 8105194:	08105221 	.word	0x08105221
 8105198:	08105249 	.word	0x08105249
 810519c:	08105249 	.word	0x08105249
 81051a0:	08105249 	.word	0x08105249
 81051a4:	08105249 	.word	0x08105249
 81051a8:	08105249 	.word	0x08105249
 81051ac:	08105249 	.word	0x08105249
 81051b0:	08105249 	.word	0x08105249
 81051b4:	08105229 	.word	0x08105229
 81051b8:	08105249 	.word	0x08105249
 81051bc:	08105249 	.word	0x08105249
 81051c0:	08105249 	.word	0x08105249
 81051c4:	08105249 	.word	0x08105249
 81051c8:	08105249 	.word	0x08105249
 81051cc:	08105249 	.word	0x08105249
 81051d0:	08105249 	.word	0x08105249
 81051d4:	08105231 	.word	0x08105231
 81051d8:	08105249 	.word	0x08105249
 81051dc:	08105249 	.word	0x08105249
 81051e0:	08105249 	.word	0x08105249
 81051e4:	08105249 	.word	0x08105249
 81051e8:	08105249 	.word	0x08105249
 81051ec:	08105249 	.word	0x08105249
 81051f0:	08105249 	.word	0x08105249
 81051f4:	08105239 	.word	0x08105239
 81051f8:	08105249 	.word	0x08105249
 81051fc:	08105249 	.word	0x08105249
 8105200:	08105249 	.word	0x08105249
 8105204:	08105249 	.word	0x08105249
 8105208:	08105249 	.word	0x08105249
 810520c:	08105249 	.word	0x08105249
 8105210:	08105249 	.word	0x08105249
 8105214:	08105241 	.word	0x08105241
 8105218:	2301      	movs	r3, #1
 810521a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810521e:	e0c3      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105220:	2304      	movs	r3, #4
 8105222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105226:	e0bf      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105228:	2308      	movs	r3, #8
 810522a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810522e:	e0bb      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105230:	2310      	movs	r3, #16
 8105232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105236:	e0b7      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105238:	2320      	movs	r3, #32
 810523a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810523e:	e0b3      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105240:	2340      	movs	r3, #64	; 0x40
 8105242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105246:	e0af      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105248:	2380      	movs	r3, #128	; 0x80
 810524a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810524e:	bf00      	nop
 8105250:	e0aa      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	4a79      	ldr	r2, [pc, #484]	; (810543c <UART_SetConfig+0x664>)
 8105258:	4293      	cmp	r3, r2
 810525a:	d132      	bne.n	81052c2 <UART_SetConfig+0x4ea>
 810525c:	4b76      	ldr	r3, [pc, #472]	; (8105438 <UART_SetConfig+0x660>)
 810525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105260:	f003 0307 	and.w	r3, r3, #7
 8105264:	2b05      	cmp	r3, #5
 8105266:	d827      	bhi.n	81052b8 <UART_SetConfig+0x4e0>
 8105268:	a201      	add	r2, pc, #4	; (adr r2, 8105270 <UART_SetConfig+0x498>)
 810526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810526e:	bf00      	nop
 8105270:	08105289 	.word	0x08105289
 8105274:	08105291 	.word	0x08105291
 8105278:	08105299 	.word	0x08105299
 810527c:	081052a1 	.word	0x081052a1
 8105280:	081052a9 	.word	0x081052a9
 8105284:	081052b1 	.word	0x081052b1
 8105288:	2300      	movs	r3, #0
 810528a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810528e:	e08b      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105290:	2304      	movs	r3, #4
 8105292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105296:	e087      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105298:	2308      	movs	r3, #8
 810529a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810529e:	e083      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81052a0:	2310      	movs	r3, #16
 81052a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052a6:	e07f      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81052a8:	2320      	movs	r3, #32
 81052aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052ae:	e07b      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81052b0:	2340      	movs	r3, #64	; 0x40
 81052b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052b6:	e077      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81052b8:	2380      	movs	r3, #128	; 0x80
 81052ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052be:	bf00      	nop
 81052c0:	e072      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81052c2:	687b      	ldr	r3, [r7, #4]
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	4a5e      	ldr	r2, [pc, #376]	; (8105440 <UART_SetConfig+0x668>)
 81052c8:	4293      	cmp	r3, r2
 81052ca:	d132      	bne.n	8105332 <UART_SetConfig+0x55a>
 81052cc:	4b5a      	ldr	r3, [pc, #360]	; (8105438 <UART_SetConfig+0x660>)
 81052ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052d0:	f003 0307 	and.w	r3, r3, #7
 81052d4:	2b05      	cmp	r3, #5
 81052d6:	d827      	bhi.n	8105328 <UART_SetConfig+0x550>
 81052d8:	a201      	add	r2, pc, #4	; (adr r2, 81052e0 <UART_SetConfig+0x508>)
 81052da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052de:	bf00      	nop
 81052e0:	081052f9 	.word	0x081052f9
 81052e4:	08105301 	.word	0x08105301
 81052e8:	08105309 	.word	0x08105309
 81052ec:	08105311 	.word	0x08105311
 81052f0:	08105319 	.word	0x08105319
 81052f4:	08105321 	.word	0x08105321
 81052f8:	2300      	movs	r3, #0
 81052fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052fe:	e053      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105300:	2304      	movs	r3, #4
 8105302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105306:	e04f      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105308:	2308      	movs	r3, #8
 810530a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810530e:	e04b      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105310:	2310      	movs	r3, #16
 8105312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105316:	e047      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105318:	2320      	movs	r3, #32
 810531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810531e:	e043      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105320:	2340      	movs	r3, #64	; 0x40
 8105322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105326:	e03f      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105328:	2380      	movs	r3, #128	; 0x80
 810532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810532e:	bf00      	nop
 8105330:	e03a      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	681b      	ldr	r3, [r3, #0]
 8105336:	4a43      	ldr	r2, [pc, #268]	; (8105444 <UART_SetConfig+0x66c>)
 8105338:	4293      	cmp	r3, r2
 810533a:	d132      	bne.n	81053a2 <UART_SetConfig+0x5ca>
 810533c:	4b3e      	ldr	r3, [pc, #248]	; (8105438 <UART_SetConfig+0x660>)
 810533e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105340:	f003 0307 	and.w	r3, r3, #7
 8105344:	2b05      	cmp	r3, #5
 8105346:	d827      	bhi.n	8105398 <UART_SetConfig+0x5c0>
 8105348:	a201      	add	r2, pc, #4	; (adr r2, 8105350 <UART_SetConfig+0x578>)
 810534a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810534e:	bf00      	nop
 8105350:	08105369 	.word	0x08105369
 8105354:	08105371 	.word	0x08105371
 8105358:	08105379 	.word	0x08105379
 810535c:	08105381 	.word	0x08105381
 8105360:	08105389 	.word	0x08105389
 8105364:	08105391 	.word	0x08105391
 8105368:	2302      	movs	r3, #2
 810536a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810536e:	e01b      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105370:	2304      	movs	r3, #4
 8105372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105376:	e017      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105378:	2308      	movs	r3, #8
 810537a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810537e:	e013      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105380:	2310      	movs	r3, #16
 8105382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105386:	e00f      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105388:	2320      	movs	r3, #32
 810538a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810538e:	e00b      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105390:	2340      	movs	r3, #64	; 0x40
 8105392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105396:	e007      	b.n	81053a8 <UART_SetConfig+0x5d0>
 8105398:	2380      	movs	r3, #128	; 0x80
 810539a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810539e:	bf00      	nop
 81053a0:	e002      	b.n	81053a8 <UART_SetConfig+0x5d0>
 81053a2:	2380      	movs	r3, #128	; 0x80
 81053a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	681b      	ldr	r3, [r3, #0]
 81053ac:	4a25      	ldr	r2, [pc, #148]	; (8105444 <UART_SetConfig+0x66c>)
 81053ae:	4293      	cmp	r3, r2
 81053b0:	f040 80b8 	bne.w	8105524 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81053b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81053b8:	2b08      	cmp	r3, #8
 81053ba:	d019      	beq.n	81053f0 <UART_SetConfig+0x618>
 81053bc:	2b08      	cmp	r3, #8
 81053be:	dc04      	bgt.n	81053ca <UART_SetConfig+0x5f2>
 81053c0:	2b02      	cmp	r3, #2
 81053c2:	d009      	beq.n	81053d8 <UART_SetConfig+0x600>
 81053c4:	2b04      	cmp	r3, #4
 81053c6:	d00b      	beq.n	81053e0 <UART_SetConfig+0x608>
 81053c8:	e042      	b.n	8105450 <UART_SetConfig+0x678>
 81053ca:	2b20      	cmp	r3, #32
 81053cc:	d02b      	beq.n	8105426 <UART_SetConfig+0x64e>
 81053ce:	2b40      	cmp	r3, #64	; 0x40
 81053d0:	d02c      	beq.n	810542c <UART_SetConfig+0x654>
 81053d2:	2b10      	cmp	r3, #16
 81053d4:	d014      	beq.n	8105400 <UART_SetConfig+0x628>
 81053d6:	e03b      	b.n	8105450 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81053d8:	f7fd ffc8 	bl	810336c <HAL_RCCEx_GetD3PCLK1Freq>
 81053dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81053de:	e03d      	b.n	810545c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81053e0:	f107 0314 	add.w	r3, r7, #20
 81053e4:	4618      	mov	r0, r3
 81053e6:	f7fd ffd7 	bl	8103398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81053ea:	69bb      	ldr	r3, [r7, #24]
 81053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81053ee:	e035      	b.n	810545c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81053f0:	f107 0308 	add.w	r3, r7, #8
 81053f4:	4618      	mov	r0, r3
 81053f6:	f7fe f91b 	bl	8103630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81053fa:	68fb      	ldr	r3, [r7, #12]
 81053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81053fe:	e02d      	b.n	810545c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105400:	4b0d      	ldr	r3, [pc, #52]	; (8105438 <UART_SetConfig+0x660>)
 8105402:	681b      	ldr	r3, [r3, #0]
 8105404:	f003 0320 	and.w	r3, r3, #32
 8105408:	2b00      	cmp	r3, #0
 810540a:	d009      	beq.n	8105420 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810540c:	4b0a      	ldr	r3, [pc, #40]	; (8105438 <UART_SetConfig+0x660>)
 810540e:	681b      	ldr	r3, [r3, #0]
 8105410:	08db      	lsrs	r3, r3, #3
 8105412:	f003 0303 	and.w	r3, r3, #3
 8105416:	4a0c      	ldr	r2, [pc, #48]	; (8105448 <UART_SetConfig+0x670>)
 8105418:	fa22 f303 	lsr.w	r3, r2, r3
 810541c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810541e:	e01d      	b.n	810545c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8105420:	4b09      	ldr	r3, [pc, #36]	; (8105448 <UART_SetConfig+0x670>)
 8105422:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105424:	e01a      	b.n	810545c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105426:	4b09      	ldr	r3, [pc, #36]	; (810544c <UART_SetConfig+0x674>)
 8105428:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810542a:	e017      	b.n	810545c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810542c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105432:	e013      	b.n	810545c <UART_SetConfig+0x684>
 8105434:	40011400 	.word	0x40011400
 8105438:	58024400 	.word	0x58024400
 810543c:	40007800 	.word	0x40007800
 8105440:	40007c00 	.word	0x40007c00
 8105444:	58000c00 	.word	0x58000c00
 8105448:	03d09000 	.word	0x03d09000
 810544c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8105450:	2300      	movs	r3, #0
 8105452:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105454:	2301      	movs	r3, #1
 8105456:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810545a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810545e:	2b00      	cmp	r3, #0
 8105460:	f000 824d 	beq.w	81058fe <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105464:	687b      	ldr	r3, [r7, #4]
 8105466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105468:	4aad      	ldr	r2, [pc, #692]	; (8105720 <UART_SetConfig+0x948>)
 810546a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810546e:	461a      	mov	r2, r3
 8105470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105472:	fbb3 f3f2 	udiv	r3, r3, r2
 8105476:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105478:	687b      	ldr	r3, [r7, #4]
 810547a:	685a      	ldr	r2, [r3, #4]
 810547c:	4613      	mov	r3, r2
 810547e:	005b      	lsls	r3, r3, #1
 8105480:	4413      	add	r3, r2
 8105482:	6a3a      	ldr	r2, [r7, #32]
 8105484:	429a      	cmp	r2, r3
 8105486:	d305      	bcc.n	8105494 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105488:	687b      	ldr	r3, [r7, #4]
 810548a:	685b      	ldr	r3, [r3, #4]
 810548c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810548e:	6a3a      	ldr	r2, [r7, #32]
 8105490:	429a      	cmp	r2, r3
 8105492:	d903      	bls.n	810549c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8105494:	2301      	movs	r3, #1
 8105496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810549a:	e230      	b.n	81058fe <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810549c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810549e:	4618      	mov	r0, r3
 81054a0:	f04f 0100 	mov.w	r1, #0
 81054a4:	687b      	ldr	r3, [r7, #4]
 81054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81054a8:	4a9d      	ldr	r2, [pc, #628]	; (8105720 <UART_SetConfig+0x948>)
 81054aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81054ae:	b29b      	uxth	r3, r3
 81054b0:	f04f 0400 	mov.w	r4, #0
 81054b4:	461a      	mov	r2, r3
 81054b6:	4623      	mov	r3, r4
 81054b8:	f7fb fbae 	bl	8100c18 <__aeabi_uldivmod>
 81054bc:	4603      	mov	r3, r0
 81054be:	460c      	mov	r4, r1
 81054c0:	4619      	mov	r1, r3
 81054c2:	4622      	mov	r2, r4
 81054c4:	f04f 0300 	mov.w	r3, #0
 81054c8:	f04f 0400 	mov.w	r4, #0
 81054cc:	0214      	lsls	r4, r2, #8
 81054ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81054d2:	020b      	lsls	r3, r1, #8
 81054d4:	687a      	ldr	r2, [r7, #4]
 81054d6:	6852      	ldr	r2, [r2, #4]
 81054d8:	0852      	lsrs	r2, r2, #1
 81054da:	4611      	mov	r1, r2
 81054dc:	f04f 0200 	mov.w	r2, #0
 81054e0:	eb13 0b01 	adds.w	fp, r3, r1
 81054e4:	eb44 0c02 	adc.w	ip, r4, r2
 81054e8:	4658      	mov	r0, fp
 81054ea:	4661      	mov	r1, ip
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	685b      	ldr	r3, [r3, #4]
 81054f0:	f04f 0400 	mov.w	r4, #0
 81054f4:	461a      	mov	r2, r3
 81054f6:	4623      	mov	r3, r4
 81054f8:	f7fb fb8e 	bl	8100c18 <__aeabi_uldivmod>
 81054fc:	4603      	mov	r3, r0
 81054fe:	460c      	mov	r4, r1
 8105500:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105508:	d308      	bcc.n	810551c <UART_SetConfig+0x744>
 810550a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810550c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105510:	d204      	bcs.n	810551c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	681b      	ldr	r3, [r3, #0]
 8105516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105518:	60da      	str	r2, [r3, #12]
 810551a:	e1f0      	b.n	81058fe <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 810551c:	2301      	movs	r3, #1
 810551e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105522:	e1ec      	b.n	81058fe <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	69db      	ldr	r3, [r3, #28]
 8105528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810552c:	f040 8100 	bne.w	8105730 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8105530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105534:	2b40      	cmp	r3, #64	; 0x40
 8105536:	f200 80b7 	bhi.w	81056a8 <UART_SetConfig+0x8d0>
 810553a:	a201      	add	r2, pc, #4	; (adr r2, 8105540 <UART_SetConfig+0x768>)
 810553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105540:	08105645 	.word	0x08105645
 8105544:	0810564d 	.word	0x0810564d
 8105548:	081056a9 	.word	0x081056a9
 810554c:	081056a9 	.word	0x081056a9
 8105550:	08105655 	.word	0x08105655
 8105554:	081056a9 	.word	0x081056a9
 8105558:	081056a9 	.word	0x081056a9
 810555c:	081056a9 	.word	0x081056a9
 8105560:	08105665 	.word	0x08105665
 8105564:	081056a9 	.word	0x081056a9
 8105568:	081056a9 	.word	0x081056a9
 810556c:	081056a9 	.word	0x081056a9
 8105570:	081056a9 	.word	0x081056a9
 8105574:	081056a9 	.word	0x081056a9
 8105578:	081056a9 	.word	0x081056a9
 810557c:	081056a9 	.word	0x081056a9
 8105580:	08105675 	.word	0x08105675
 8105584:	081056a9 	.word	0x081056a9
 8105588:	081056a9 	.word	0x081056a9
 810558c:	081056a9 	.word	0x081056a9
 8105590:	081056a9 	.word	0x081056a9
 8105594:	081056a9 	.word	0x081056a9
 8105598:	081056a9 	.word	0x081056a9
 810559c:	081056a9 	.word	0x081056a9
 81055a0:	081056a9 	.word	0x081056a9
 81055a4:	081056a9 	.word	0x081056a9
 81055a8:	081056a9 	.word	0x081056a9
 81055ac:	081056a9 	.word	0x081056a9
 81055b0:	081056a9 	.word	0x081056a9
 81055b4:	081056a9 	.word	0x081056a9
 81055b8:	081056a9 	.word	0x081056a9
 81055bc:	081056a9 	.word	0x081056a9
 81055c0:	0810569b 	.word	0x0810569b
 81055c4:	081056a9 	.word	0x081056a9
 81055c8:	081056a9 	.word	0x081056a9
 81055cc:	081056a9 	.word	0x081056a9
 81055d0:	081056a9 	.word	0x081056a9
 81055d4:	081056a9 	.word	0x081056a9
 81055d8:	081056a9 	.word	0x081056a9
 81055dc:	081056a9 	.word	0x081056a9
 81055e0:	081056a9 	.word	0x081056a9
 81055e4:	081056a9 	.word	0x081056a9
 81055e8:	081056a9 	.word	0x081056a9
 81055ec:	081056a9 	.word	0x081056a9
 81055f0:	081056a9 	.word	0x081056a9
 81055f4:	081056a9 	.word	0x081056a9
 81055f8:	081056a9 	.word	0x081056a9
 81055fc:	081056a9 	.word	0x081056a9
 8105600:	081056a9 	.word	0x081056a9
 8105604:	081056a9 	.word	0x081056a9
 8105608:	081056a9 	.word	0x081056a9
 810560c:	081056a9 	.word	0x081056a9
 8105610:	081056a9 	.word	0x081056a9
 8105614:	081056a9 	.word	0x081056a9
 8105618:	081056a9 	.word	0x081056a9
 810561c:	081056a9 	.word	0x081056a9
 8105620:	081056a9 	.word	0x081056a9
 8105624:	081056a9 	.word	0x081056a9
 8105628:	081056a9 	.word	0x081056a9
 810562c:	081056a9 	.word	0x081056a9
 8105630:	081056a9 	.word	0x081056a9
 8105634:	081056a9 	.word	0x081056a9
 8105638:	081056a9 	.word	0x081056a9
 810563c:	081056a9 	.word	0x081056a9
 8105640:	081056a1 	.word	0x081056a1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105644:	f7fd fe24 	bl	8103290 <HAL_RCC_GetPCLK1Freq>
 8105648:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810564a:	e033      	b.n	81056b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810564c:	f7fd fe36 	bl	81032bc <HAL_RCC_GetPCLK2Freq>
 8105650:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105652:	e02f      	b.n	81056b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105654:	f107 0314 	add.w	r3, r7, #20
 8105658:	4618      	mov	r0, r3
 810565a:	f7fd fe9d 	bl	8103398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810565e:	69bb      	ldr	r3, [r7, #24]
 8105660:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105662:	e027      	b.n	81056b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105664:	f107 0308 	add.w	r3, r7, #8
 8105668:	4618      	mov	r0, r3
 810566a:	f7fd ffe1 	bl	8103630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810566e:	68fb      	ldr	r3, [r7, #12]
 8105670:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105672:	e01f      	b.n	81056b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105674:	4b2b      	ldr	r3, [pc, #172]	; (8105724 <UART_SetConfig+0x94c>)
 8105676:	681b      	ldr	r3, [r3, #0]
 8105678:	f003 0320 	and.w	r3, r3, #32
 810567c:	2b00      	cmp	r3, #0
 810567e:	d009      	beq.n	8105694 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105680:	4b28      	ldr	r3, [pc, #160]	; (8105724 <UART_SetConfig+0x94c>)
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	08db      	lsrs	r3, r3, #3
 8105686:	f003 0303 	and.w	r3, r3, #3
 810568a:	4a27      	ldr	r2, [pc, #156]	; (8105728 <UART_SetConfig+0x950>)
 810568c:	fa22 f303 	lsr.w	r3, r2, r3
 8105690:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105692:	e00f      	b.n	81056b4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8105694:	4b24      	ldr	r3, [pc, #144]	; (8105728 <UART_SetConfig+0x950>)
 8105696:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105698:	e00c      	b.n	81056b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810569a:	4b24      	ldr	r3, [pc, #144]	; (810572c <UART_SetConfig+0x954>)
 810569c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810569e:	e009      	b.n	81056b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81056a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81056a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81056a6:	e005      	b.n	81056b4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 81056a8:	2300      	movs	r3, #0
 81056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81056ac:	2301      	movs	r3, #1
 81056ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81056b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81056b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	f000 8121 	beq.w	81058fe <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81056bc:	687b      	ldr	r3, [r7, #4]
 81056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81056c0:	4a17      	ldr	r2, [pc, #92]	; (8105720 <UART_SetConfig+0x948>)
 81056c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81056c6:	461a      	mov	r2, r3
 81056c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81056ca:	fbb3 f3f2 	udiv	r3, r3, r2
 81056ce:	005a      	lsls	r2, r3, #1
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	685b      	ldr	r3, [r3, #4]
 81056d4:	085b      	lsrs	r3, r3, #1
 81056d6:	441a      	add	r2, r3
 81056d8:	687b      	ldr	r3, [r7, #4]
 81056da:	685b      	ldr	r3, [r3, #4]
 81056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 81056e0:	b29b      	uxth	r3, r3
 81056e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056e6:	2b0f      	cmp	r3, #15
 81056e8:	d916      	bls.n	8105718 <UART_SetConfig+0x940>
 81056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81056f0:	d212      	bcs.n	8105718 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056f4:	b29b      	uxth	r3, r3
 81056f6:	f023 030f 	bic.w	r3, r3, #15
 81056fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056fe:	085b      	lsrs	r3, r3, #1
 8105700:	b29b      	uxth	r3, r3
 8105702:	f003 0307 	and.w	r3, r3, #7
 8105706:	b29a      	uxth	r2, r3
 8105708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810570a:	4313      	orrs	r3, r2
 810570c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8105714:	60da      	str	r2, [r3, #12]
 8105716:	e0f2      	b.n	81058fe <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8105718:	2301      	movs	r3, #1
 810571a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810571e:	e0ee      	b.n	81058fe <UART_SetConfig+0xb26>
 8105720:	0810a400 	.word	0x0810a400
 8105724:	58024400 	.word	0x58024400
 8105728:	03d09000 	.word	0x03d09000
 810572c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8105730:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105734:	2b40      	cmp	r3, #64	; 0x40
 8105736:	f200 80b7 	bhi.w	81058a8 <UART_SetConfig+0xad0>
 810573a:	a201      	add	r2, pc, #4	; (adr r2, 8105740 <UART_SetConfig+0x968>)
 810573c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105740:	08105845 	.word	0x08105845
 8105744:	0810584d 	.word	0x0810584d
 8105748:	081058a9 	.word	0x081058a9
 810574c:	081058a9 	.word	0x081058a9
 8105750:	08105855 	.word	0x08105855
 8105754:	081058a9 	.word	0x081058a9
 8105758:	081058a9 	.word	0x081058a9
 810575c:	081058a9 	.word	0x081058a9
 8105760:	08105865 	.word	0x08105865
 8105764:	081058a9 	.word	0x081058a9
 8105768:	081058a9 	.word	0x081058a9
 810576c:	081058a9 	.word	0x081058a9
 8105770:	081058a9 	.word	0x081058a9
 8105774:	081058a9 	.word	0x081058a9
 8105778:	081058a9 	.word	0x081058a9
 810577c:	081058a9 	.word	0x081058a9
 8105780:	08105875 	.word	0x08105875
 8105784:	081058a9 	.word	0x081058a9
 8105788:	081058a9 	.word	0x081058a9
 810578c:	081058a9 	.word	0x081058a9
 8105790:	081058a9 	.word	0x081058a9
 8105794:	081058a9 	.word	0x081058a9
 8105798:	081058a9 	.word	0x081058a9
 810579c:	081058a9 	.word	0x081058a9
 81057a0:	081058a9 	.word	0x081058a9
 81057a4:	081058a9 	.word	0x081058a9
 81057a8:	081058a9 	.word	0x081058a9
 81057ac:	081058a9 	.word	0x081058a9
 81057b0:	081058a9 	.word	0x081058a9
 81057b4:	081058a9 	.word	0x081058a9
 81057b8:	081058a9 	.word	0x081058a9
 81057bc:	081058a9 	.word	0x081058a9
 81057c0:	0810589b 	.word	0x0810589b
 81057c4:	081058a9 	.word	0x081058a9
 81057c8:	081058a9 	.word	0x081058a9
 81057cc:	081058a9 	.word	0x081058a9
 81057d0:	081058a9 	.word	0x081058a9
 81057d4:	081058a9 	.word	0x081058a9
 81057d8:	081058a9 	.word	0x081058a9
 81057dc:	081058a9 	.word	0x081058a9
 81057e0:	081058a9 	.word	0x081058a9
 81057e4:	081058a9 	.word	0x081058a9
 81057e8:	081058a9 	.word	0x081058a9
 81057ec:	081058a9 	.word	0x081058a9
 81057f0:	081058a9 	.word	0x081058a9
 81057f4:	081058a9 	.word	0x081058a9
 81057f8:	081058a9 	.word	0x081058a9
 81057fc:	081058a9 	.word	0x081058a9
 8105800:	081058a9 	.word	0x081058a9
 8105804:	081058a9 	.word	0x081058a9
 8105808:	081058a9 	.word	0x081058a9
 810580c:	081058a9 	.word	0x081058a9
 8105810:	081058a9 	.word	0x081058a9
 8105814:	081058a9 	.word	0x081058a9
 8105818:	081058a9 	.word	0x081058a9
 810581c:	081058a9 	.word	0x081058a9
 8105820:	081058a9 	.word	0x081058a9
 8105824:	081058a9 	.word	0x081058a9
 8105828:	081058a9 	.word	0x081058a9
 810582c:	081058a9 	.word	0x081058a9
 8105830:	081058a9 	.word	0x081058a9
 8105834:	081058a9 	.word	0x081058a9
 8105838:	081058a9 	.word	0x081058a9
 810583c:	081058a9 	.word	0x081058a9
 8105840:	081058a1 	.word	0x081058a1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105844:	f7fd fd24 	bl	8103290 <HAL_RCC_GetPCLK1Freq>
 8105848:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810584a:	e033      	b.n	81058b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810584c:	f7fd fd36 	bl	81032bc <HAL_RCC_GetPCLK2Freq>
 8105850:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105852:	e02f      	b.n	81058b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105854:	f107 0314 	add.w	r3, r7, #20
 8105858:	4618      	mov	r0, r3
 810585a:	f7fd fd9d 	bl	8103398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810585e:	69bb      	ldr	r3, [r7, #24]
 8105860:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105862:	e027      	b.n	81058b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105864:	f107 0308 	add.w	r3, r7, #8
 8105868:	4618      	mov	r0, r3
 810586a:	f7fd fee1 	bl	8103630 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810586e:	68fb      	ldr	r3, [r7, #12]
 8105870:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105872:	e01f      	b.n	81058b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105874:	4b2c      	ldr	r3, [pc, #176]	; (8105928 <UART_SetConfig+0xb50>)
 8105876:	681b      	ldr	r3, [r3, #0]
 8105878:	f003 0320 	and.w	r3, r3, #32
 810587c:	2b00      	cmp	r3, #0
 810587e:	d009      	beq.n	8105894 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105880:	4b29      	ldr	r3, [pc, #164]	; (8105928 <UART_SetConfig+0xb50>)
 8105882:	681b      	ldr	r3, [r3, #0]
 8105884:	08db      	lsrs	r3, r3, #3
 8105886:	f003 0303 	and.w	r3, r3, #3
 810588a:	4a28      	ldr	r2, [pc, #160]	; (810592c <UART_SetConfig+0xb54>)
 810588c:	fa22 f303 	lsr.w	r3, r2, r3
 8105890:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105892:	e00f      	b.n	81058b4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8105894:	4b25      	ldr	r3, [pc, #148]	; (810592c <UART_SetConfig+0xb54>)
 8105896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105898:	e00c      	b.n	81058b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810589a:	4b25      	ldr	r3, [pc, #148]	; (8105930 <UART_SetConfig+0xb58>)
 810589c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810589e:	e009      	b.n	81058b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81058a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058a6:	e005      	b.n	81058b4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 81058a8:	2300      	movs	r3, #0
 81058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81058ac:	2301      	movs	r3, #1
 81058ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81058b2:	bf00      	nop
    }

    if (pclk != 0U)
 81058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81058b6:	2b00      	cmp	r3, #0
 81058b8:	d021      	beq.n	81058fe <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81058be:	4a1d      	ldr	r2, [pc, #116]	; (8105934 <UART_SetConfig+0xb5c>)
 81058c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81058c4:	461a      	mov	r2, r3
 81058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81058c8:	fbb3 f2f2 	udiv	r2, r3, r2
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	685b      	ldr	r3, [r3, #4]
 81058d0:	085b      	lsrs	r3, r3, #1
 81058d2:	441a      	add	r2, r3
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	685b      	ldr	r3, [r3, #4]
 81058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 81058dc:	b29b      	uxth	r3, r3
 81058de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058e2:	2b0f      	cmp	r3, #15
 81058e4:	d908      	bls.n	81058f8 <UART_SetConfig+0xb20>
 81058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81058ec:	d204      	bcs.n	81058f8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	681b      	ldr	r3, [r3, #0]
 81058f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81058f4:	60da      	str	r2, [r3, #12]
 81058f6:	e002      	b.n	81058fe <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 81058f8:	2301      	movs	r3, #1
 81058fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81058fe:	687b      	ldr	r3, [r7, #4]
 8105900:	2201      	movs	r2, #1
 8105902:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	2201      	movs	r2, #1
 810590a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810590e:	687b      	ldr	r3, [r7, #4]
 8105910:	2200      	movs	r2, #0
 8105912:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	2200      	movs	r2, #0
 8105918:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 810591a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810591e:	4618      	mov	r0, r3
 8105920:	3738      	adds	r7, #56	; 0x38
 8105922:	46bd      	mov	sp, r7
 8105924:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8105928:	58024400 	.word	0x58024400
 810592c:	03d09000 	.word	0x03d09000
 8105930:	003d0900 	.word	0x003d0900
 8105934:	0810a400 	.word	0x0810a400

08105938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105938:	b480      	push	{r7}
 810593a:	b083      	sub	sp, #12
 810593c:	af00      	add	r7, sp, #0
 810593e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105940:	687b      	ldr	r3, [r7, #4]
 8105942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105944:	f003 0301 	and.w	r3, r3, #1
 8105948:	2b00      	cmp	r3, #0
 810594a:	d00a      	beq.n	8105962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	681b      	ldr	r3, [r3, #0]
 8105950:	685b      	ldr	r3, [r3, #4]
 8105952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	681b      	ldr	r3, [r3, #0]
 810595e:	430a      	orrs	r2, r1
 8105960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105966:	f003 0302 	and.w	r3, r3, #2
 810596a:	2b00      	cmp	r3, #0
 810596c:	d00a      	beq.n	8105984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	681b      	ldr	r3, [r3, #0]
 8105972:	685b      	ldr	r3, [r3, #4]
 8105974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105978:	687b      	ldr	r3, [r7, #4]
 810597a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	681b      	ldr	r3, [r3, #0]
 8105980:	430a      	orrs	r2, r1
 8105982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105988:	f003 0304 	and.w	r3, r3, #4
 810598c:	2b00      	cmp	r3, #0
 810598e:	d00a      	beq.n	81059a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	681b      	ldr	r3, [r3, #0]
 8105994:	685b      	ldr	r3, [r3, #4]
 8105996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	681b      	ldr	r3, [r3, #0]
 81059a2:	430a      	orrs	r2, r1
 81059a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81059a6:	687b      	ldr	r3, [r7, #4]
 81059a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059aa:	f003 0308 	and.w	r3, r3, #8
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	d00a      	beq.n	81059c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	681b      	ldr	r3, [r3, #0]
 81059b6:	685b      	ldr	r3, [r3, #4]
 81059b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	681b      	ldr	r3, [r3, #0]
 81059c4:	430a      	orrs	r2, r1
 81059c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059cc:	f003 0310 	and.w	r3, r3, #16
 81059d0:	2b00      	cmp	r3, #0
 81059d2:	d00a      	beq.n	81059ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	681b      	ldr	r3, [r3, #0]
 81059d8:	689b      	ldr	r3, [r3, #8]
 81059da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81059de:	687b      	ldr	r3, [r7, #4]
 81059e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	681b      	ldr	r3, [r3, #0]
 81059e6:	430a      	orrs	r2, r1
 81059e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81059ea:	687b      	ldr	r3, [r7, #4]
 81059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059ee:	f003 0320 	and.w	r3, r3, #32
 81059f2:	2b00      	cmp	r3, #0
 81059f4:	d00a      	beq.n	8105a0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	681b      	ldr	r3, [r3, #0]
 81059fa:	689b      	ldr	r3, [r3, #8]
 81059fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	681b      	ldr	r3, [r3, #0]
 8105a08:	430a      	orrs	r2, r1
 8105a0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105a14:	2b00      	cmp	r3, #0
 8105a16:	d01a      	beq.n	8105a4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	685b      	ldr	r3, [r3, #4]
 8105a1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	430a      	orrs	r2, r1
 8105a2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105a36:	d10a      	bne.n	8105a4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	685b      	ldr	r3, [r3, #4]
 8105a3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8105a46:	687b      	ldr	r3, [r7, #4]
 8105a48:	681b      	ldr	r3, [r3, #0]
 8105a4a:	430a      	orrs	r2, r1
 8105a4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105a56:	2b00      	cmp	r3, #0
 8105a58:	d00a      	beq.n	8105a70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	681b      	ldr	r3, [r3, #0]
 8105a5e:	685b      	ldr	r3, [r3, #4]
 8105a60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105a68:	687b      	ldr	r3, [r7, #4]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	430a      	orrs	r2, r1
 8105a6e:	605a      	str	r2, [r3, #4]
  }
}
 8105a70:	bf00      	nop
 8105a72:	370c      	adds	r7, #12
 8105a74:	46bd      	mov	sp, r7
 8105a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a7a:	4770      	bx	lr

08105a7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105a7c:	b580      	push	{r7, lr}
 8105a7e:	b086      	sub	sp, #24
 8105a80:	af02      	add	r7, sp, #8
 8105a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	2200      	movs	r2, #0
 8105a88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8105a8c:	f7fc f944 	bl	8101d18 <HAL_GetTick>
 8105a90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105a92:	687b      	ldr	r3, [r7, #4]
 8105a94:	681b      	ldr	r3, [r3, #0]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	f003 0308 	and.w	r3, r3, #8
 8105a9c:	2b08      	cmp	r3, #8
 8105a9e:	d10e      	bne.n	8105abe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105aa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105aa4:	9300      	str	r3, [sp, #0]
 8105aa6:	68fb      	ldr	r3, [r7, #12]
 8105aa8:	2200      	movs	r2, #0
 8105aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105aae:	6878      	ldr	r0, [r7, #4]
 8105ab0:	f000 f82c 	bl	8105b0c <UART_WaitOnFlagUntilTimeout>
 8105ab4:	4603      	mov	r3, r0
 8105ab6:	2b00      	cmp	r3, #0
 8105ab8:	d001      	beq.n	8105abe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105aba:	2303      	movs	r3, #3
 8105abc:	e022      	b.n	8105b04 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	681b      	ldr	r3, [r3, #0]
 8105ac4:	f003 0304 	and.w	r3, r3, #4
 8105ac8:	2b04      	cmp	r3, #4
 8105aca:	d10e      	bne.n	8105aea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105acc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105ad0:	9300      	str	r3, [sp, #0]
 8105ad2:	68fb      	ldr	r3, [r7, #12]
 8105ad4:	2200      	movs	r2, #0
 8105ad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8105ada:	6878      	ldr	r0, [r7, #4]
 8105adc:	f000 f816 	bl	8105b0c <UART_WaitOnFlagUntilTimeout>
 8105ae0:	4603      	mov	r3, r0
 8105ae2:	2b00      	cmp	r3, #0
 8105ae4:	d001      	beq.n	8105aea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105ae6:	2303      	movs	r3, #3
 8105ae8:	e00c      	b.n	8105b04 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8105aea:	687b      	ldr	r3, [r7, #4]
 8105aec:	2220      	movs	r2, #32
 8105aee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	2220      	movs	r2, #32
 8105af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	2200      	movs	r2, #0
 8105afe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105b02:	2300      	movs	r3, #0
}
 8105b04:	4618      	mov	r0, r3
 8105b06:	3710      	adds	r7, #16
 8105b08:	46bd      	mov	sp, r7
 8105b0a:	bd80      	pop	{r7, pc}

08105b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105b0c:	b580      	push	{r7, lr}
 8105b0e:	b084      	sub	sp, #16
 8105b10:	af00      	add	r7, sp, #0
 8105b12:	60f8      	str	r0, [r7, #12]
 8105b14:	60b9      	str	r1, [r7, #8]
 8105b16:	603b      	str	r3, [r7, #0]
 8105b18:	4613      	mov	r3, r2
 8105b1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105b1c:	e062      	b.n	8105be4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105b1e:	69bb      	ldr	r3, [r7, #24]
 8105b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b24:	d05e      	beq.n	8105be4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105b26:	f7fc f8f7 	bl	8101d18 <HAL_GetTick>
 8105b2a:	4602      	mov	r2, r0
 8105b2c:	683b      	ldr	r3, [r7, #0]
 8105b2e:	1ad3      	subs	r3, r2, r3
 8105b30:	69ba      	ldr	r2, [r7, #24]
 8105b32:	429a      	cmp	r2, r3
 8105b34:	d302      	bcc.n	8105b3c <UART_WaitOnFlagUntilTimeout+0x30>
 8105b36:	69bb      	ldr	r3, [r7, #24]
 8105b38:	2b00      	cmp	r3, #0
 8105b3a:	d11d      	bne.n	8105b78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8105b3c:	68fb      	ldr	r3, [r7, #12]
 8105b3e:	681b      	ldr	r3, [r3, #0]
 8105b40:	681a      	ldr	r2, [r3, #0]
 8105b42:	68fb      	ldr	r3, [r7, #12]
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8105b4a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105b4c:	68fb      	ldr	r3, [r7, #12]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	689a      	ldr	r2, [r3, #8]
 8105b52:	68fb      	ldr	r3, [r7, #12]
 8105b54:	681b      	ldr	r3, [r3, #0]
 8105b56:	f022 0201 	bic.w	r2, r2, #1
 8105b5a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8105b5c:	68fb      	ldr	r3, [r7, #12]
 8105b5e:	2220      	movs	r2, #32
 8105b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8105b64:	68fb      	ldr	r3, [r7, #12]
 8105b66:	2220      	movs	r2, #32
 8105b68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8105b6c:	68fb      	ldr	r3, [r7, #12]
 8105b6e:	2200      	movs	r2, #0
 8105b70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8105b74:	2303      	movs	r3, #3
 8105b76:	e045      	b.n	8105c04 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105b78:	68fb      	ldr	r3, [r7, #12]
 8105b7a:	681b      	ldr	r3, [r3, #0]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	f003 0304 	and.w	r3, r3, #4
 8105b82:	2b00      	cmp	r3, #0
 8105b84:	d02e      	beq.n	8105be4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105b86:	68fb      	ldr	r3, [r7, #12]
 8105b88:	681b      	ldr	r3, [r3, #0]
 8105b8a:	69db      	ldr	r3, [r3, #28]
 8105b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105b94:	d126      	bne.n	8105be4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105b96:	68fb      	ldr	r3, [r7, #12]
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105b9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8105ba0:	68fb      	ldr	r3, [r7, #12]
 8105ba2:	681b      	ldr	r3, [r3, #0]
 8105ba4:	681a      	ldr	r2, [r3, #0]
 8105ba6:	68fb      	ldr	r3, [r7, #12]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8105bae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105bb0:	68fb      	ldr	r3, [r7, #12]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	689a      	ldr	r2, [r3, #8]
 8105bb6:	68fb      	ldr	r3, [r7, #12]
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	f022 0201 	bic.w	r2, r2, #1
 8105bbe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8105bc0:	68fb      	ldr	r3, [r7, #12]
 8105bc2:	2220      	movs	r2, #32
 8105bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8105bc8:	68fb      	ldr	r3, [r7, #12]
 8105bca:	2220      	movs	r2, #32
 8105bcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	2220      	movs	r2, #32
 8105bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105bd8:	68fb      	ldr	r3, [r7, #12]
 8105bda:	2200      	movs	r2, #0
 8105bdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8105be0:	2303      	movs	r3, #3
 8105be2:	e00f      	b.n	8105c04 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105be4:	68fb      	ldr	r3, [r7, #12]
 8105be6:	681b      	ldr	r3, [r3, #0]
 8105be8:	69da      	ldr	r2, [r3, #28]
 8105bea:	68bb      	ldr	r3, [r7, #8]
 8105bec:	4013      	ands	r3, r2
 8105bee:	68ba      	ldr	r2, [r7, #8]
 8105bf0:	429a      	cmp	r2, r3
 8105bf2:	bf0c      	ite	eq
 8105bf4:	2301      	moveq	r3, #1
 8105bf6:	2300      	movne	r3, #0
 8105bf8:	b2db      	uxtb	r3, r3
 8105bfa:	461a      	mov	r2, r3
 8105bfc:	79fb      	ldrb	r3, [r7, #7]
 8105bfe:	429a      	cmp	r2, r3
 8105c00:	d08d      	beq.n	8105b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105c02:	2300      	movs	r3, #0
}
 8105c04:	4618      	mov	r0, r3
 8105c06:	3710      	adds	r7, #16
 8105c08:	46bd      	mov	sp, r7
 8105c0a:	bd80      	pop	{r7, pc}

08105c0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105c0c:	b480      	push	{r7}
 8105c0e:	b085      	sub	sp, #20
 8105c10:	af00      	add	r7, sp, #0
 8105c12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105c1a:	2b01      	cmp	r3, #1
 8105c1c:	d101      	bne.n	8105c22 <HAL_UARTEx_DisableFifoMode+0x16>
 8105c1e:	2302      	movs	r3, #2
 8105c20:	e027      	b.n	8105c72 <HAL_UARTEx_DisableFifoMode+0x66>
 8105c22:	687b      	ldr	r3, [r7, #4]
 8105c24:	2201      	movs	r2, #1
 8105c26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	2224      	movs	r2, #36	; 0x24
 8105c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105c32:	687b      	ldr	r3, [r7, #4]
 8105c34:	681b      	ldr	r3, [r3, #0]
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105c3a:	687b      	ldr	r3, [r7, #4]
 8105c3c:	681b      	ldr	r3, [r3, #0]
 8105c3e:	681a      	ldr	r2, [r3, #0]
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	681b      	ldr	r3, [r3, #0]
 8105c44:	f022 0201 	bic.w	r2, r2, #1
 8105c48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105c4a:	68fb      	ldr	r3, [r7, #12]
 8105c4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105c50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105c52:	687b      	ldr	r3, [r7, #4]
 8105c54:	2200      	movs	r2, #0
 8105c56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105c58:	687b      	ldr	r3, [r7, #4]
 8105c5a:	681b      	ldr	r3, [r3, #0]
 8105c5c:	68fa      	ldr	r2, [r7, #12]
 8105c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105c60:	687b      	ldr	r3, [r7, #4]
 8105c62:	2220      	movs	r2, #32
 8105c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105c68:	687b      	ldr	r3, [r7, #4]
 8105c6a:	2200      	movs	r2, #0
 8105c6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105c70:	2300      	movs	r3, #0
}
 8105c72:	4618      	mov	r0, r3
 8105c74:	3714      	adds	r7, #20
 8105c76:	46bd      	mov	sp, r7
 8105c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c7c:	4770      	bx	lr

08105c7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105c7e:	b580      	push	{r7, lr}
 8105c80:	b084      	sub	sp, #16
 8105c82:	af00      	add	r7, sp, #0
 8105c84:	6078      	str	r0, [r7, #4]
 8105c86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105c88:	687b      	ldr	r3, [r7, #4]
 8105c8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105c8e:	2b01      	cmp	r3, #1
 8105c90:	d101      	bne.n	8105c96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105c92:	2302      	movs	r3, #2
 8105c94:	e02d      	b.n	8105cf2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105c96:	687b      	ldr	r3, [r7, #4]
 8105c98:	2201      	movs	r2, #1
 8105c9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	2224      	movs	r2, #36	; 0x24
 8105ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105ca6:	687b      	ldr	r3, [r7, #4]
 8105ca8:	681b      	ldr	r3, [r3, #0]
 8105caa:	681b      	ldr	r3, [r3, #0]
 8105cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105cae:	687b      	ldr	r3, [r7, #4]
 8105cb0:	681b      	ldr	r3, [r3, #0]
 8105cb2:	681a      	ldr	r2, [r3, #0]
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	f022 0201 	bic.w	r2, r2, #1
 8105cbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105cbe:	687b      	ldr	r3, [r7, #4]
 8105cc0:	681b      	ldr	r3, [r3, #0]
 8105cc2:	689b      	ldr	r3, [r3, #8]
 8105cc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	683a      	ldr	r2, [r7, #0]
 8105cce:	430a      	orrs	r2, r1
 8105cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105cd2:	6878      	ldr	r0, [r7, #4]
 8105cd4:	f000 f850 	bl	8105d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	68fa      	ldr	r2, [r7, #12]
 8105cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105ce0:	687b      	ldr	r3, [r7, #4]
 8105ce2:	2220      	movs	r2, #32
 8105ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	2200      	movs	r2, #0
 8105cec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105cf0:	2300      	movs	r3, #0
}
 8105cf2:	4618      	mov	r0, r3
 8105cf4:	3710      	adds	r7, #16
 8105cf6:	46bd      	mov	sp, r7
 8105cf8:	bd80      	pop	{r7, pc}

08105cfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105cfa:	b580      	push	{r7, lr}
 8105cfc:	b084      	sub	sp, #16
 8105cfe:	af00      	add	r7, sp, #0
 8105d00:	6078      	str	r0, [r7, #4]
 8105d02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105d0a:	2b01      	cmp	r3, #1
 8105d0c:	d101      	bne.n	8105d12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105d0e:	2302      	movs	r3, #2
 8105d10:	e02d      	b.n	8105d6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105d12:	687b      	ldr	r3, [r7, #4]
 8105d14:	2201      	movs	r2, #1
 8105d16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	2224      	movs	r2, #36	; 0x24
 8105d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	681b      	ldr	r3, [r3, #0]
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	681a      	ldr	r2, [r3, #0]
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	f022 0201 	bic.w	r2, r2, #1
 8105d38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	689b      	ldr	r3, [r3, #8]
 8105d40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	683a      	ldr	r2, [r7, #0]
 8105d4a:	430a      	orrs	r2, r1
 8105d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105d4e:	6878      	ldr	r0, [r7, #4]
 8105d50:	f000 f812 	bl	8105d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	68fa      	ldr	r2, [r7, #12]
 8105d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105d5c:	687b      	ldr	r3, [r7, #4]
 8105d5e:	2220      	movs	r2, #32
 8105d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	2200      	movs	r2, #0
 8105d68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105d6c:	2300      	movs	r3, #0
}
 8105d6e:	4618      	mov	r0, r3
 8105d70:	3710      	adds	r7, #16
 8105d72:	46bd      	mov	sp, r7
 8105d74:	bd80      	pop	{r7, pc}
	...

08105d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105d78:	b480      	push	{r7}
 8105d7a:	b089      	sub	sp, #36	; 0x24
 8105d7c:	af00      	add	r7, sp, #0
 8105d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8105d80:	4a2f      	ldr	r2, [pc, #188]	; (8105e40 <UARTEx_SetNbDataToProcess+0xc8>)
 8105d82:	f107 0314 	add.w	r3, r7, #20
 8105d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105d8a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8105d8e:	4a2d      	ldr	r2, [pc, #180]	; (8105e44 <UARTEx_SetNbDataToProcess+0xcc>)
 8105d90:	f107 030c 	add.w	r3, r7, #12
 8105d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105d98:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105da0:	2b00      	cmp	r3, #0
 8105da2:	d108      	bne.n	8105db6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8105da4:	687b      	ldr	r3, [r7, #4]
 8105da6:	2201      	movs	r2, #1
 8105da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	2201      	movs	r2, #1
 8105db0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105db4:	e03d      	b.n	8105e32 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105db6:	2310      	movs	r3, #16
 8105db8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105dba:	2310      	movs	r3, #16
 8105dbc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	689b      	ldr	r3, [r3, #8]
 8105dc4:	0e5b      	lsrs	r3, r3, #25
 8105dc6:	b2db      	uxtb	r3, r3
 8105dc8:	f003 0307 	and.w	r3, r3, #7
 8105dcc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105dce:	687b      	ldr	r3, [r7, #4]
 8105dd0:	681b      	ldr	r3, [r3, #0]
 8105dd2:	689b      	ldr	r3, [r3, #8]
 8105dd4:	0f5b      	lsrs	r3, r3, #29
 8105dd6:	b2db      	uxtb	r3, r3
 8105dd8:	f003 0307 	and.w	r3, r3, #7
 8105ddc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8105dde:	7fbb      	ldrb	r3, [r7, #30]
 8105de0:	7f3a      	ldrb	r2, [r7, #28]
 8105de2:	f107 0120 	add.w	r1, r7, #32
 8105de6:	440a      	add	r2, r1
 8105de8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8105dec:	fb02 f303 	mul.w	r3, r2, r3
 8105df0:	7f3a      	ldrb	r2, [r7, #28]
 8105df2:	f107 0120 	add.w	r1, r7, #32
 8105df6:	440a      	add	r2, r1
 8105df8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8105dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8105e00:	b29a      	uxth	r2, r3
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8105e08:	7ffb      	ldrb	r3, [r7, #31]
 8105e0a:	7f7a      	ldrb	r2, [r7, #29]
 8105e0c:	f107 0120 	add.w	r1, r7, #32
 8105e10:	440a      	add	r2, r1
 8105e12:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8105e16:	fb02 f303 	mul.w	r3, r2, r3
 8105e1a:	7f7a      	ldrb	r2, [r7, #29]
 8105e1c:	f107 0120 	add.w	r1, r7, #32
 8105e20:	440a      	add	r2, r1
 8105e22:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8105e26:	fb93 f3f2 	sdiv	r3, r3, r2
 8105e2a:	b29a      	uxth	r2, r3
 8105e2c:	687b      	ldr	r3, [r7, #4]
 8105e2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8105e32:	bf00      	nop
 8105e34:	3724      	adds	r7, #36	; 0x24
 8105e36:	46bd      	mov	sp, r7
 8105e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e3c:	4770      	bx	lr
 8105e3e:	bf00      	nop
 8105e40:	0810a3a4 	.word	0x0810a3a4
 8105e44:	0810a3ac 	.word	0x0810a3ac

08105e48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8105e48:	b480      	push	{r7}
 8105e4a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8105e4c:	bf00      	nop
 8105e4e:	46bd      	mov	sp, r7
 8105e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e54:	4770      	bx	lr
	...

08105e58 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8105e58:	b480      	push	{r7}
 8105e5a:	b085      	sub	sp, #20
 8105e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105e5e:	f3ef 8305 	mrs	r3, IPSR
 8105e62:	60bb      	str	r3, [r7, #8]
  return(result);
 8105e64:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105e66:	2b00      	cmp	r3, #0
 8105e68:	d10f      	bne.n	8105e8a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8105e6e:	607b      	str	r3, [r7, #4]
  return(result);
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	2b00      	cmp	r3, #0
 8105e74:	d105      	bne.n	8105e82 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8105e76:	f3ef 8311 	mrs	r3, BASEPRI
 8105e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8105e7c:	683b      	ldr	r3, [r7, #0]
 8105e7e:	2b00      	cmp	r3, #0
 8105e80:	d007      	beq.n	8105e92 <osKernelInitialize+0x3a>
 8105e82:	4b0e      	ldr	r3, [pc, #56]	; (8105ebc <osKernelInitialize+0x64>)
 8105e84:	681b      	ldr	r3, [r3, #0]
 8105e86:	2b02      	cmp	r3, #2
 8105e88:	d103      	bne.n	8105e92 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8105e8a:	f06f 0305 	mvn.w	r3, #5
 8105e8e:	60fb      	str	r3, [r7, #12]
 8105e90:	e00c      	b.n	8105eac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8105e92:	4b0a      	ldr	r3, [pc, #40]	; (8105ebc <osKernelInitialize+0x64>)
 8105e94:	681b      	ldr	r3, [r3, #0]
 8105e96:	2b00      	cmp	r3, #0
 8105e98:	d105      	bne.n	8105ea6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8105e9a:	4b08      	ldr	r3, [pc, #32]	; (8105ebc <osKernelInitialize+0x64>)
 8105e9c:	2201      	movs	r2, #1
 8105e9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8105ea0:	2300      	movs	r3, #0
 8105ea2:	60fb      	str	r3, [r7, #12]
 8105ea4:	e002      	b.n	8105eac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8105ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8105eaa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8105eac:	68fb      	ldr	r3, [r7, #12]
}
 8105eae:	4618      	mov	r0, r3
 8105eb0:	3714      	adds	r7, #20
 8105eb2:	46bd      	mov	sp, r7
 8105eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105eb8:	4770      	bx	lr
 8105eba:	bf00      	nop
 8105ebc:	10000200 	.word	0x10000200

08105ec0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8105ec0:	b580      	push	{r7, lr}
 8105ec2:	b084      	sub	sp, #16
 8105ec4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105ec6:	f3ef 8305 	mrs	r3, IPSR
 8105eca:	60bb      	str	r3, [r7, #8]
  return(result);
 8105ecc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105ece:	2b00      	cmp	r3, #0
 8105ed0:	d10f      	bne.n	8105ef2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8105ed6:	607b      	str	r3, [r7, #4]
  return(result);
 8105ed8:	687b      	ldr	r3, [r7, #4]
 8105eda:	2b00      	cmp	r3, #0
 8105edc:	d105      	bne.n	8105eea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8105ede:	f3ef 8311 	mrs	r3, BASEPRI
 8105ee2:	603b      	str	r3, [r7, #0]
  return(result);
 8105ee4:	683b      	ldr	r3, [r7, #0]
 8105ee6:	2b00      	cmp	r3, #0
 8105ee8:	d007      	beq.n	8105efa <osKernelStart+0x3a>
 8105eea:	4b0f      	ldr	r3, [pc, #60]	; (8105f28 <osKernelStart+0x68>)
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	2b02      	cmp	r3, #2
 8105ef0:	d103      	bne.n	8105efa <osKernelStart+0x3a>
    stat = osErrorISR;
 8105ef2:	f06f 0305 	mvn.w	r3, #5
 8105ef6:	60fb      	str	r3, [r7, #12]
 8105ef8:	e010      	b.n	8105f1c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8105efa:	4b0b      	ldr	r3, [pc, #44]	; (8105f28 <osKernelStart+0x68>)
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	2b01      	cmp	r3, #1
 8105f00:	d109      	bne.n	8105f16 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8105f02:	f7ff ffa1 	bl	8105e48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8105f06:	4b08      	ldr	r3, [pc, #32]	; (8105f28 <osKernelStart+0x68>)
 8105f08:	2202      	movs	r2, #2
 8105f0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8105f0c:	f001 fc86 	bl	810781c <vTaskStartScheduler>
      stat = osOK;
 8105f10:	2300      	movs	r3, #0
 8105f12:	60fb      	str	r3, [r7, #12]
 8105f14:	e002      	b.n	8105f1c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8105f16:	f04f 33ff 	mov.w	r3, #4294967295
 8105f1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8105f1c:	68fb      	ldr	r3, [r7, #12]
}
 8105f1e:	4618      	mov	r0, r3
 8105f20:	3710      	adds	r7, #16
 8105f22:	46bd      	mov	sp, r7
 8105f24:	bd80      	pop	{r7, pc}
 8105f26:	bf00      	nop
 8105f28:	10000200 	.word	0x10000200

08105f2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8105f2c:	b580      	push	{r7, lr}
 8105f2e:	b090      	sub	sp, #64	; 0x40
 8105f30:	af04      	add	r7, sp, #16
 8105f32:	60f8      	str	r0, [r7, #12]
 8105f34:	60b9      	str	r1, [r7, #8]
 8105f36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8105f38:	2300      	movs	r3, #0
 8105f3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105f3c:	f3ef 8305 	mrs	r3, IPSR
 8105f40:	61fb      	str	r3, [r7, #28]
  return(result);
 8105f42:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8105f44:	2b00      	cmp	r3, #0
 8105f46:	f040 808f 	bne.w	8106068 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8105f4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8105f50:	69bb      	ldr	r3, [r7, #24]
 8105f52:	2b00      	cmp	r3, #0
 8105f54:	d105      	bne.n	8105f62 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8105f56:	f3ef 8311 	mrs	r3, BASEPRI
 8105f5a:	617b      	str	r3, [r7, #20]
  return(result);
 8105f5c:	697b      	ldr	r3, [r7, #20]
 8105f5e:	2b00      	cmp	r3, #0
 8105f60:	d003      	beq.n	8105f6a <osThreadNew+0x3e>
 8105f62:	4b44      	ldr	r3, [pc, #272]	; (8106074 <osThreadNew+0x148>)
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	2b02      	cmp	r3, #2
 8105f68:	d07e      	beq.n	8106068 <osThreadNew+0x13c>
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	d07b      	beq.n	8106068 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8105f70:	2380      	movs	r3, #128	; 0x80
 8105f72:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8105f74:	2318      	movs	r3, #24
 8105f76:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8105f78:	2300      	movs	r3, #0
 8105f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8105f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8105f80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	2b00      	cmp	r3, #0
 8105f86:	d045      	beq.n	8106014 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	d002      	beq.n	8105f96 <osThreadNew+0x6a>
        name = attr->name;
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8105f96:	687b      	ldr	r3, [r7, #4]
 8105f98:	699b      	ldr	r3, [r3, #24]
 8105f9a:	2b00      	cmp	r3, #0
 8105f9c:	d002      	beq.n	8105fa4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8105f9e:	687b      	ldr	r3, [r7, #4]
 8105fa0:	699b      	ldr	r3, [r3, #24]
 8105fa2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8105fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105fa6:	2b00      	cmp	r3, #0
 8105fa8:	d008      	beq.n	8105fbc <osThreadNew+0x90>
 8105faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105fac:	2b38      	cmp	r3, #56	; 0x38
 8105fae:	d805      	bhi.n	8105fbc <osThreadNew+0x90>
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	685b      	ldr	r3, [r3, #4]
 8105fb4:	f003 0301 	and.w	r3, r3, #1
 8105fb8:	2b00      	cmp	r3, #0
 8105fba:	d001      	beq.n	8105fc0 <osThreadNew+0x94>
        return (NULL);
 8105fbc:	2300      	movs	r3, #0
 8105fbe:	e054      	b.n	810606a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8105fc0:	687b      	ldr	r3, [r7, #4]
 8105fc2:	695b      	ldr	r3, [r3, #20]
 8105fc4:	2b00      	cmp	r3, #0
 8105fc6:	d003      	beq.n	8105fd0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	695b      	ldr	r3, [r3, #20]
 8105fcc:	089b      	lsrs	r3, r3, #2
 8105fce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	689b      	ldr	r3, [r3, #8]
 8105fd4:	2b00      	cmp	r3, #0
 8105fd6:	d00e      	beq.n	8105ff6 <osThreadNew+0xca>
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	68db      	ldr	r3, [r3, #12]
 8105fdc:	2b5b      	cmp	r3, #91	; 0x5b
 8105fde:	d90a      	bls.n	8105ff6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105fe0:	687b      	ldr	r3, [r7, #4]
 8105fe2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8105fe4:	2b00      	cmp	r3, #0
 8105fe6:	d006      	beq.n	8105ff6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8105fe8:	687b      	ldr	r3, [r7, #4]
 8105fea:	695b      	ldr	r3, [r3, #20]
 8105fec:	2b00      	cmp	r3, #0
 8105fee:	d002      	beq.n	8105ff6 <osThreadNew+0xca>
        mem = 1;
 8105ff0:	2301      	movs	r3, #1
 8105ff2:	623b      	str	r3, [r7, #32]
 8105ff4:	e010      	b.n	8106018 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8105ff6:	687b      	ldr	r3, [r7, #4]
 8105ff8:	689b      	ldr	r3, [r3, #8]
 8105ffa:	2b00      	cmp	r3, #0
 8105ffc:	d10c      	bne.n	8106018 <osThreadNew+0xec>
 8105ffe:	687b      	ldr	r3, [r7, #4]
 8106000:	68db      	ldr	r3, [r3, #12]
 8106002:	2b00      	cmp	r3, #0
 8106004:	d108      	bne.n	8106018 <osThreadNew+0xec>
 8106006:	687b      	ldr	r3, [r7, #4]
 8106008:	691b      	ldr	r3, [r3, #16]
 810600a:	2b00      	cmp	r3, #0
 810600c:	d104      	bne.n	8106018 <osThreadNew+0xec>
          mem = 0;
 810600e:	2300      	movs	r3, #0
 8106010:	623b      	str	r3, [r7, #32]
 8106012:	e001      	b.n	8106018 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8106014:	2300      	movs	r3, #0
 8106016:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8106018:	6a3b      	ldr	r3, [r7, #32]
 810601a:	2b01      	cmp	r3, #1
 810601c:	d110      	bne.n	8106040 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8106022:	687a      	ldr	r2, [r7, #4]
 8106024:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8106026:	9202      	str	r2, [sp, #8]
 8106028:	9301      	str	r3, [sp, #4]
 810602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810602c:	9300      	str	r3, [sp, #0]
 810602e:	68bb      	ldr	r3, [r7, #8]
 8106030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106032:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106034:	68f8      	ldr	r0, [r7, #12]
 8106036:	f001 fa1f 	bl	8107478 <xTaskCreateStatic>
 810603a:	4603      	mov	r3, r0
 810603c:	613b      	str	r3, [r7, #16]
 810603e:	e013      	b.n	8106068 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8106040:	6a3b      	ldr	r3, [r7, #32]
 8106042:	2b00      	cmp	r3, #0
 8106044:	d110      	bne.n	8106068 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8106046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106048:	b29a      	uxth	r2, r3
 810604a:	f107 0310 	add.w	r3, r7, #16
 810604e:	9301      	str	r3, [sp, #4]
 8106050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106052:	9300      	str	r3, [sp, #0]
 8106054:	68bb      	ldr	r3, [r7, #8]
 8106056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106058:	68f8      	ldr	r0, [r7, #12]
 810605a:	f001 fa67 	bl	810752c <xTaskCreate>
 810605e:	4603      	mov	r3, r0
 8106060:	2b01      	cmp	r3, #1
 8106062:	d001      	beq.n	8106068 <osThreadNew+0x13c>
          hTask = NULL;
 8106064:	2300      	movs	r3, #0
 8106066:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8106068:	693b      	ldr	r3, [r7, #16]
}
 810606a:	4618      	mov	r0, r3
 810606c:	3730      	adds	r7, #48	; 0x30
 810606e:	46bd      	mov	sp, r7
 8106070:	bd80      	pop	{r7, pc}
 8106072:	bf00      	nop
 8106074:	10000200 	.word	0x10000200

08106078 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8106078:	b580      	push	{r7, lr}
 810607a:	b086      	sub	sp, #24
 810607c:	af00      	add	r7, sp, #0
 810607e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8106080:	f3ef 8305 	mrs	r3, IPSR
 8106084:	613b      	str	r3, [r7, #16]
  return(result);
 8106086:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8106088:	2b00      	cmp	r3, #0
 810608a:	d10f      	bne.n	81060ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810608c:	f3ef 8310 	mrs	r3, PRIMASK
 8106090:	60fb      	str	r3, [r7, #12]
  return(result);
 8106092:	68fb      	ldr	r3, [r7, #12]
 8106094:	2b00      	cmp	r3, #0
 8106096:	d105      	bne.n	81060a4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8106098:	f3ef 8311 	mrs	r3, BASEPRI
 810609c:	60bb      	str	r3, [r7, #8]
  return(result);
 810609e:	68bb      	ldr	r3, [r7, #8]
 81060a0:	2b00      	cmp	r3, #0
 81060a2:	d007      	beq.n	81060b4 <osDelay+0x3c>
 81060a4:	4b0a      	ldr	r3, [pc, #40]	; (81060d0 <osDelay+0x58>)
 81060a6:	681b      	ldr	r3, [r3, #0]
 81060a8:	2b02      	cmp	r3, #2
 81060aa:	d103      	bne.n	81060b4 <osDelay+0x3c>
    stat = osErrorISR;
 81060ac:	f06f 0305 	mvn.w	r3, #5
 81060b0:	617b      	str	r3, [r7, #20]
 81060b2:	e007      	b.n	81060c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 81060b4:	2300      	movs	r3, #0
 81060b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	2b00      	cmp	r3, #0
 81060bc:	d002      	beq.n	81060c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 81060be:	6878      	ldr	r0, [r7, #4]
 81060c0:	f001 fb78 	bl	81077b4 <vTaskDelay>
    }
  }

  return (stat);
 81060c4:	697b      	ldr	r3, [r7, #20]
}
 81060c6:	4618      	mov	r0, r3
 81060c8:	3718      	adds	r7, #24
 81060ca:	46bd      	mov	sp, r7
 81060cc:	bd80      	pop	{r7, pc}
 81060ce:	bf00      	nop
 81060d0:	10000200 	.word	0x10000200

081060d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81060d4:	b480      	push	{r7}
 81060d6:	b085      	sub	sp, #20
 81060d8:	af00      	add	r7, sp, #0
 81060da:	60f8      	str	r0, [r7, #12]
 81060dc:	60b9      	str	r1, [r7, #8]
 81060de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81060e0:	68fb      	ldr	r3, [r7, #12]
 81060e2:	4a07      	ldr	r2, [pc, #28]	; (8106100 <vApplicationGetIdleTaskMemory+0x2c>)
 81060e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81060e6:	68bb      	ldr	r3, [r7, #8]
 81060e8:	4a06      	ldr	r2, [pc, #24]	; (8106104 <vApplicationGetIdleTaskMemory+0x30>)
 81060ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	2280      	movs	r2, #128	; 0x80
 81060f0:	601a      	str	r2, [r3, #0]
}
 81060f2:	bf00      	nop
 81060f4:	3714      	adds	r7, #20
 81060f6:	46bd      	mov	sp, r7
 81060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060fc:	4770      	bx	lr
 81060fe:	bf00      	nop
 8106100:	10000204 	.word	0x10000204
 8106104:	10000260 	.word	0x10000260

08106108 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8106108:	b480      	push	{r7}
 810610a:	b085      	sub	sp, #20
 810610c:	af00      	add	r7, sp, #0
 810610e:	60f8      	str	r0, [r7, #12]
 8106110:	60b9      	str	r1, [r7, #8]
 8106112:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8106114:	68fb      	ldr	r3, [r7, #12]
 8106116:	4a07      	ldr	r2, [pc, #28]	; (8106134 <vApplicationGetTimerTaskMemory+0x2c>)
 8106118:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810611a:	68bb      	ldr	r3, [r7, #8]
 810611c:	4a06      	ldr	r2, [pc, #24]	; (8106138 <vApplicationGetTimerTaskMemory+0x30>)
 810611e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8106120:	687b      	ldr	r3, [r7, #4]
 8106122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8106126:	601a      	str	r2, [r3, #0]
}
 8106128:	bf00      	nop
 810612a:	3714      	adds	r7, #20
 810612c:	46bd      	mov	sp, r7
 810612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106132:	4770      	bx	lr
 8106134:	10000460 	.word	0x10000460
 8106138:	100004bc 	.word	0x100004bc

0810613c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810613c:	b580      	push	{r7, lr}
 810613e:	b08a      	sub	sp, #40	; 0x28
 8106140:	af00      	add	r7, sp, #0
 8106142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8106144:	2300      	movs	r3, #0
 8106146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8106148:	f001 fbcc 	bl	81078e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810614c:	4b57      	ldr	r3, [pc, #348]	; (81062ac <pvPortMalloc+0x170>)
 810614e:	681b      	ldr	r3, [r3, #0]
 8106150:	2b00      	cmp	r3, #0
 8106152:	d101      	bne.n	8106158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8106154:	f000 f90c 	bl	8106370 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8106158:	4b55      	ldr	r3, [pc, #340]	; (81062b0 <pvPortMalloc+0x174>)
 810615a:	681a      	ldr	r2, [r3, #0]
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	4013      	ands	r3, r2
 8106160:	2b00      	cmp	r3, #0
 8106162:	f040 808c 	bne.w	810627e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8106166:	687b      	ldr	r3, [r7, #4]
 8106168:	2b00      	cmp	r3, #0
 810616a:	d01c      	beq.n	81061a6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 810616c:	2208      	movs	r2, #8
 810616e:	687b      	ldr	r3, [r7, #4]
 8106170:	4413      	add	r3, r2
 8106172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	f003 0307 	and.w	r3, r3, #7
 810617a:	2b00      	cmp	r3, #0
 810617c:	d013      	beq.n	81061a6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	f023 0307 	bic.w	r3, r3, #7
 8106184:	3308      	adds	r3, #8
 8106186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8106188:	687b      	ldr	r3, [r7, #4]
 810618a:	f003 0307 	and.w	r3, r3, #7
 810618e:	2b00      	cmp	r3, #0
 8106190:	d009      	beq.n	81061a6 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8106192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106196:	f383 8811 	msr	BASEPRI, r3
 810619a:	f3bf 8f6f 	isb	sy
 810619e:	f3bf 8f4f 	dsb	sy
 81061a2:	617b      	str	r3, [r7, #20]
 81061a4:	e7fe      	b.n	81061a4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	2b00      	cmp	r3, #0
 81061aa:	d068      	beq.n	810627e <pvPortMalloc+0x142>
 81061ac:	4b41      	ldr	r3, [pc, #260]	; (81062b4 <pvPortMalloc+0x178>)
 81061ae:	681b      	ldr	r3, [r3, #0]
 81061b0:	687a      	ldr	r2, [r7, #4]
 81061b2:	429a      	cmp	r2, r3
 81061b4:	d863      	bhi.n	810627e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81061b6:	4b40      	ldr	r3, [pc, #256]	; (81062b8 <pvPortMalloc+0x17c>)
 81061b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81061ba:	4b3f      	ldr	r3, [pc, #252]	; (81062b8 <pvPortMalloc+0x17c>)
 81061bc:	681b      	ldr	r3, [r3, #0]
 81061be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81061c0:	e004      	b.n	81061cc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 81061c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061c8:	681b      	ldr	r3, [r3, #0]
 81061ca:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81061cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061ce:	685b      	ldr	r3, [r3, #4]
 81061d0:	687a      	ldr	r2, [r7, #4]
 81061d2:	429a      	cmp	r2, r3
 81061d4:	d903      	bls.n	81061de <pvPortMalloc+0xa2>
 81061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061d8:	681b      	ldr	r3, [r3, #0]
 81061da:	2b00      	cmp	r3, #0
 81061dc:	d1f1      	bne.n	81061c2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81061de:	4b33      	ldr	r3, [pc, #204]	; (81062ac <pvPortMalloc+0x170>)
 81061e0:	681b      	ldr	r3, [r3, #0]
 81061e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81061e4:	429a      	cmp	r2, r3
 81061e6:	d04a      	beq.n	810627e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81061e8:	6a3b      	ldr	r3, [r7, #32]
 81061ea:	681b      	ldr	r3, [r3, #0]
 81061ec:	2208      	movs	r2, #8
 81061ee:	4413      	add	r3, r2
 81061f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061f4:	681a      	ldr	r2, [r3, #0]
 81061f6:	6a3b      	ldr	r3, [r7, #32]
 81061f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 81061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061fc:	685a      	ldr	r2, [r3, #4]
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	1ad2      	subs	r2, r2, r3
 8106202:	2308      	movs	r3, #8
 8106204:	005b      	lsls	r3, r3, #1
 8106206:	429a      	cmp	r2, r3
 8106208:	d91e      	bls.n	8106248 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810620a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	4413      	add	r3, r2
 8106210:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8106212:	69bb      	ldr	r3, [r7, #24]
 8106214:	f003 0307 	and.w	r3, r3, #7
 8106218:	2b00      	cmp	r3, #0
 810621a:	d009      	beq.n	8106230 <pvPortMalloc+0xf4>
 810621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106220:	f383 8811 	msr	BASEPRI, r3
 8106224:	f3bf 8f6f 	isb	sy
 8106228:	f3bf 8f4f 	dsb	sy
 810622c:	613b      	str	r3, [r7, #16]
 810622e:	e7fe      	b.n	810622e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8106230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106232:	685a      	ldr	r2, [r3, #4]
 8106234:	687b      	ldr	r3, [r7, #4]
 8106236:	1ad2      	subs	r2, r2, r3
 8106238:	69bb      	ldr	r3, [r7, #24]
 810623a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810623c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810623e:	687a      	ldr	r2, [r7, #4]
 8106240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8106242:	69b8      	ldr	r0, [r7, #24]
 8106244:	f000 f8f6 	bl	8106434 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8106248:	4b1a      	ldr	r3, [pc, #104]	; (81062b4 <pvPortMalloc+0x178>)
 810624a:	681a      	ldr	r2, [r3, #0]
 810624c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810624e:	685b      	ldr	r3, [r3, #4]
 8106250:	1ad3      	subs	r3, r2, r3
 8106252:	4a18      	ldr	r2, [pc, #96]	; (81062b4 <pvPortMalloc+0x178>)
 8106254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8106256:	4b17      	ldr	r3, [pc, #92]	; (81062b4 <pvPortMalloc+0x178>)
 8106258:	681a      	ldr	r2, [r3, #0]
 810625a:	4b18      	ldr	r3, [pc, #96]	; (81062bc <pvPortMalloc+0x180>)
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	429a      	cmp	r2, r3
 8106260:	d203      	bcs.n	810626a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8106262:	4b14      	ldr	r3, [pc, #80]	; (81062b4 <pvPortMalloc+0x178>)
 8106264:	681b      	ldr	r3, [r3, #0]
 8106266:	4a15      	ldr	r2, [pc, #84]	; (81062bc <pvPortMalloc+0x180>)
 8106268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810626c:	685a      	ldr	r2, [r3, #4]
 810626e:	4b10      	ldr	r3, [pc, #64]	; (81062b0 <pvPortMalloc+0x174>)
 8106270:	681b      	ldr	r3, [r3, #0]
 8106272:	431a      	orrs	r2, r3
 8106274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8106278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810627a:	2200      	movs	r2, #0
 810627c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810627e:	f001 fb3f 	bl	8107900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8106282:	69fb      	ldr	r3, [r7, #28]
 8106284:	f003 0307 	and.w	r3, r3, #7
 8106288:	2b00      	cmp	r3, #0
 810628a:	d009      	beq.n	81062a0 <pvPortMalloc+0x164>
 810628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106290:	f383 8811 	msr	BASEPRI, r3
 8106294:	f3bf 8f6f 	isb	sy
 8106298:	f3bf 8f4f 	dsb	sy
 810629c:	60fb      	str	r3, [r7, #12]
 810629e:	e7fe      	b.n	810629e <pvPortMalloc+0x162>
	return pvReturn;
 81062a0:	69fb      	ldr	r3, [r7, #28]
}
 81062a2:	4618      	mov	r0, r3
 81062a4:	3728      	adds	r7, #40	; 0x28
 81062a6:	46bd      	mov	sp, r7
 81062a8:	bd80      	pop	{r7, pc}
 81062aa:	bf00      	nop
 81062ac:	100044c4 	.word	0x100044c4
 81062b0:	100044d0 	.word	0x100044d0
 81062b4:	100044c8 	.word	0x100044c8
 81062b8:	100044bc 	.word	0x100044bc
 81062bc:	100044cc 	.word	0x100044cc

081062c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81062c0:	b580      	push	{r7, lr}
 81062c2:	b086      	sub	sp, #24
 81062c4:	af00      	add	r7, sp, #0
 81062c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	2b00      	cmp	r3, #0
 81062d0:	d046      	beq.n	8106360 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81062d2:	2308      	movs	r3, #8
 81062d4:	425b      	negs	r3, r3
 81062d6:	697a      	ldr	r2, [r7, #20]
 81062d8:	4413      	add	r3, r2
 81062da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81062dc:	697b      	ldr	r3, [r7, #20]
 81062de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81062e0:	693b      	ldr	r3, [r7, #16]
 81062e2:	685a      	ldr	r2, [r3, #4]
 81062e4:	4b20      	ldr	r3, [pc, #128]	; (8106368 <vPortFree+0xa8>)
 81062e6:	681b      	ldr	r3, [r3, #0]
 81062e8:	4013      	ands	r3, r2
 81062ea:	2b00      	cmp	r3, #0
 81062ec:	d109      	bne.n	8106302 <vPortFree+0x42>
 81062ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81062f2:	f383 8811 	msr	BASEPRI, r3
 81062f6:	f3bf 8f6f 	isb	sy
 81062fa:	f3bf 8f4f 	dsb	sy
 81062fe:	60fb      	str	r3, [r7, #12]
 8106300:	e7fe      	b.n	8106300 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8106302:	693b      	ldr	r3, [r7, #16]
 8106304:	681b      	ldr	r3, [r3, #0]
 8106306:	2b00      	cmp	r3, #0
 8106308:	d009      	beq.n	810631e <vPortFree+0x5e>
 810630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810630e:	f383 8811 	msr	BASEPRI, r3
 8106312:	f3bf 8f6f 	isb	sy
 8106316:	f3bf 8f4f 	dsb	sy
 810631a:	60bb      	str	r3, [r7, #8]
 810631c:	e7fe      	b.n	810631c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810631e:	693b      	ldr	r3, [r7, #16]
 8106320:	685a      	ldr	r2, [r3, #4]
 8106322:	4b11      	ldr	r3, [pc, #68]	; (8106368 <vPortFree+0xa8>)
 8106324:	681b      	ldr	r3, [r3, #0]
 8106326:	4013      	ands	r3, r2
 8106328:	2b00      	cmp	r3, #0
 810632a:	d019      	beq.n	8106360 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810632c:	693b      	ldr	r3, [r7, #16]
 810632e:	681b      	ldr	r3, [r3, #0]
 8106330:	2b00      	cmp	r3, #0
 8106332:	d115      	bne.n	8106360 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8106334:	693b      	ldr	r3, [r7, #16]
 8106336:	685a      	ldr	r2, [r3, #4]
 8106338:	4b0b      	ldr	r3, [pc, #44]	; (8106368 <vPortFree+0xa8>)
 810633a:	681b      	ldr	r3, [r3, #0]
 810633c:	43db      	mvns	r3, r3
 810633e:	401a      	ands	r2, r3
 8106340:	693b      	ldr	r3, [r7, #16]
 8106342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8106344:	f001 face 	bl	81078e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8106348:	693b      	ldr	r3, [r7, #16]
 810634a:	685a      	ldr	r2, [r3, #4]
 810634c:	4b07      	ldr	r3, [pc, #28]	; (810636c <vPortFree+0xac>)
 810634e:	681b      	ldr	r3, [r3, #0]
 8106350:	4413      	add	r3, r2
 8106352:	4a06      	ldr	r2, [pc, #24]	; (810636c <vPortFree+0xac>)
 8106354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8106356:	6938      	ldr	r0, [r7, #16]
 8106358:	f000 f86c 	bl	8106434 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 810635c:	f001 fad0 	bl	8107900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8106360:	bf00      	nop
 8106362:	3718      	adds	r7, #24
 8106364:	46bd      	mov	sp, r7
 8106366:	bd80      	pop	{r7, pc}
 8106368:	100044d0 	.word	0x100044d0
 810636c:	100044c8 	.word	0x100044c8

08106370 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8106370:	b480      	push	{r7}
 8106372:	b085      	sub	sp, #20
 8106374:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8106376:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 810637a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810637c:	4b27      	ldr	r3, [pc, #156]	; (810641c <prvHeapInit+0xac>)
 810637e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8106380:	68fb      	ldr	r3, [r7, #12]
 8106382:	f003 0307 	and.w	r3, r3, #7
 8106386:	2b00      	cmp	r3, #0
 8106388:	d00c      	beq.n	81063a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810638a:	68fb      	ldr	r3, [r7, #12]
 810638c:	3307      	adds	r3, #7
 810638e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8106390:	68fb      	ldr	r3, [r7, #12]
 8106392:	f023 0307 	bic.w	r3, r3, #7
 8106396:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8106398:	68ba      	ldr	r2, [r7, #8]
 810639a:	68fb      	ldr	r3, [r7, #12]
 810639c:	1ad3      	subs	r3, r2, r3
 810639e:	4a1f      	ldr	r2, [pc, #124]	; (810641c <prvHeapInit+0xac>)
 81063a0:	4413      	add	r3, r2
 81063a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81063a4:	68fb      	ldr	r3, [r7, #12]
 81063a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81063a8:	4a1d      	ldr	r2, [pc, #116]	; (8106420 <prvHeapInit+0xb0>)
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81063ae:	4b1c      	ldr	r3, [pc, #112]	; (8106420 <prvHeapInit+0xb0>)
 81063b0:	2200      	movs	r2, #0
 81063b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	68ba      	ldr	r2, [r7, #8]
 81063b8:	4413      	add	r3, r2
 81063ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81063bc:	2208      	movs	r2, #8
 81063be:	68fb      	ldr	r3, [r7, #12]
 81063c0:	1a9b      	subs	r3, r3, r2
 81063c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81063c4:	68fb      	ldr	r3, [r7, #12]
 81063c6:	f023 0307 	bic.w	r3, r3, #7
 81063ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81063cc:	68fb      	ldr	r3, [r7, #12]
 81063ce:	4a15      	ldr	r2, [pc, #84]	; (8106424 <prvHeapInit+0xb4>)
 81063d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81063d2:	4b14      	ldr	r3, [pc, #80]	; (8106424 <prvHeapInit+0xb4>)
 81063d4:	681b      	ldr	r3, [r3, #0]
 81063d6:	2200      	movs	r2, #0
 81063d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81063da:	4b12      	ldr	r3, [pc, #72]	; (8106424 <prvHeapInit+0xb4>)
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	2200      	movs	r2, #0
 81063e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81063e2:	687b      	ldr	r3, [r7, #4]
 81063e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81063e6:	683b      	ldr	r3, [r7, #0]
 81063e8:	68fa      	ldr	r2, [r7, #12]
 81063ea:	1ad2      	subs	r2, r2, r3
 81063ec:	683b      	ldr	r3, [r7, #0]
 81063ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81063f0:	4b0c      	ldr	r3, [pc, #48]	; (8106424 <prvHeapInit+0xb4>)
 81063f2:	681a      	ldr	r2, [r3, #0]
 81063f4:	683b      	ldr	r3, [r7, #0]
 81063f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 81063f8:	683b      	ldr	r3, [r7, #0]
 81063fa:	685b      	ldr	r3, [r3, #4]
 81063fc:	4a0a      	ldr	r2, [pc, #40]	; (8106428 <prvHeapInit+0xb8>)
 81063fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8106400:	683b      	ldr	r3, [r7, #0]
 8106402:	685b      	ldr	r3, [r3, #4]
 8106404:	4a09      	ldr	r2, [pc, #36]	; (810642c <prvHeapInit+0xbc>)
 8106406:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8106408:	4b09      	ldr	r3, [pc, #36]	; (8106430 <prvHeapInit+0xc0>)
 810640a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810640e:	601a      	str	r2, [r3, #0]
}
 8106410:	bf00      	nop
 8106412:	3714      	adds	r7, #20
 8106414:	46bd      	mov	sp, r7
 8106416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810641a:	4770      	bx	lr
 810641c:	100008bc 	.word	0x100008bc
 8106420:	100044bc 	.word	0x100044bc
 8106424:	100044c4 	.word	0x100044c4
 8106428:	100044cc 	.word	0x100044cc
 810642c:	100044c8 	.word	0x100044c8
 8106430:	100044d0 	.word	0x100044d0

08106434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8106434:	b480      	push	{r7}
 8106436:	b085      	sub	sp, #20
 8106438:	af00      	add	r7, sp, #0
 810643a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810643c:	4b28      	ldr	r3, [pc, #160]	; (81064e0 <prvInsertBlockIntoFreeList+0xac>)
 810643e:	60fb      	str	r3, [r7, #12]
 8106440:	e002      	b.n	8106448 <prvInsertBlockIntoFreeList+0x14>
 8106442:	68fb      	ldr	r3, [r7, #12]
 8106444:	681b      	ldr	r3, [r3, #0]
 8106446:	60fb      	str	r3, [r7, #12]
 8106448:	68fb      	ldr	r3, [r7, #12]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	687a      	ldr	r2, [r7, #4]
 810644e:	429a      	cmp	r2, r3
 8106450:	d8f7      	bhi.n	8106442 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8106452:	68fb      	ldr	r3, [r7, #12]
 8106454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8106456:	68fb      	ldr	r3, [r7, #12]
 8106458:	685b      	ldr	r3, [r3, #4]
 810645a:	68ba      	ldr	r2, [r7, #8]
 810645c:	4413      	add	r3, r2
 810645e:	687a      	ldr	r2, [r7, #4]
 8106460:	429a      	cmp	r2, r3
 8106462:	d108      	bne.n	8106476 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8106464:	68fb      	ldr	r3, [r7, #12]
 8106466:	685a      	ldr	r2, [r3, #4]
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	685b      	ldr	r3, [r3, #4]
 810646c:	441a      	add	r2, r3
 810646e:	68fb      	ldr	r3, [r7, #12]
 8106470:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8106472:	68fb      	ldr	r3, [r7, #12]
 8106474:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810647a:	687b      	ldr	r3, [r7, #4]
 810647c:	685b      	ldr	r3, [r3, #4]
 810647e:	68ba      	ldr	r2, [r7, #8]
 8106480:	441a      	add	r2, r3
 8106482:	68fb      	ldr	r3, [r7, #12]
 8106484:	681b      	ldr	r3, [r3, #0]
 8106486:	429a      	cmp	r2, r3
 8106488:	d118      	bne.n	81064bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810648a:	68fb      	ldr	r3, [r7, #12]
 810648c:	681a      	ldr	r2, [r3, #0]
 810648e:	4b15      	ldr	r3, [pc, #84]	; (81064e4 <prvInsertBlockIntoFreeList+0xb0>)
 8106490:	681b      	ldr	r3, [r3, #0]
 8106492:	429a      	cmp	r2, r3
 8106494:	d00d      	beq.n	81064b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	685a      	ldr	r2, [r3, #4]
 810649a:	68fb      	ldr	r3, [r7, #12]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	685b      	ldr	r3, [r3, #4]
 81064a0:	441a      	add	r2, r3
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81064a6:	68fb      	ldr	r3, [r7, #12]
 81064a8:	681b      	ldr	r3, [r3, #0]
 81064aa:	681a      	ldr	r2, [r3, #0]
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	601a      	str	r2, [r3, #0]
 81064b0:	e008      	b.n	81064c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81064b2:	4b0c      	ldr	r3, [pc, #48]	; (81064e4 <prvInsertBlockIntoFreeList+0xb0>)
 81064b4:	681a      	ldr	r2, [r3, #0]
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	601a      	str	r2, [r3, #0]
 81064ba:	e003      	b.n	81064c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81064bc:	68fb      	ldr	r3, [r7, #12]
 81064be:	681a      	ldr	r2, [r3, #0]
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81064c4:	68fa      	ldr	r2, [r7, #12]
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	429a      	cmp	r2, r3
 81064ca:	d002      	beq.n	81064d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81064cc:	68fb      	ldr	r3, [r7, #12]
 81064ce:	687a      	ldr	r2, [r7, #4]
 81064d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81064d2:	bf00      	nop
 81064d4:	3714      	adds	r7, #20
 81064d6:	46bd      	mov	sp, r7
 81064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064dc:	4770      	bx	lr
 81064de:	bf00      	nop
 81064e0:	100044bc 	.word	0x100044bc
 81064e4:	100044c4 	.word	0x100044c4

081064e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81064e8:	b480      	push	{r7}
 81064ea:	b083      	sub	sp, #12
 81064ec:	af00      	add	r7, sp, #0
 81064ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	f103 0208 	add.w	r2, r3, #8
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8106500:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	f103 0208 	add.w	r2, r3, #8
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	f103 0208 	add.w	r2, r3, #8
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8106516:	687b      	ldr	r3, [r7, #4]
 8106518:	2200      	movs	r2, #0
 810651a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810651c:	bf00      	nop
 810651e:	370c      	adds	r7, #12
 8106520:	46bd      	mov	sp, r7
 8106522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106526:	4770      	bx	lr

08106528 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8106528:	b480      	push	{r7}
 810652a:	b083      	sub	sp, #12
 810652c:	af00      	add	r7, sp, #0
 810652e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	2200      	movs	r2, #0
 8106534:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8106536:	bf00      	nop
 8106538:	370c      	adds	r7, #12
 810653a:	46bd      	mov	sp, r7
 810653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106540:	4770      	bx	lr

08106542 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8106542:	b480      	push	{r7}
 8106544:	b085      	sub	sp, #20
 8106546:	af00      	add	r7, sp, #0
 8106548:	6078      	str	r0, [r7, #4]
 810654a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	685b      	ldr	r3, [r3, #4]
 8106550:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8106552:	683b      	ldr	r3, [r7, #0]
 8106554:	68fa      	ldr	r2, [r7, #12]
 8106556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8106558:	68fb      	ldr	r3, [r7, #12]
 810655a:	689a      	ldr	r2, [r3, #8]
 810655c:	683b      	ldr	r3, [r7, #0]
 810655e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8106560:	68fb      	ldr	r3, [r7, #12]
 8106562:	689b      	ldr	r3, [r3, #8]
 8106564:	683a      	ldr	r2, [r7, #0]
 8106566:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8106568:	68fb      	ldr	r3, [r7, #12]
 810656a:	683a      	ldr	r2, [r7, #0]
 810656c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810656e:	683b      	ldr	r3, [r7, #0]
 8106570:	687a      	ldr	r2, [r7, #4]
 8106572:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	681b      	ldr	r3, [r3, #0]
 8106578:	1c5a      	adds	r2, r3, #1
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	601a      	str	r2, [r3, #0]
}
 810657e:	bf00      	nop
 8106580:	3714      	adds	r7, #20
 8106582:	46bd      	mov	sp, r7
 8106584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106588:	4770      	bx	lr

0810658a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810658a:	b480      	push	{r7}
 810658c:	b085      	sub	sp, #20
 810658e:	af00      	add	r7, sp, #0
 8106590:	6078      	str	r0, [r7, #4]
 8106592:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8106594:	683b      	ldr	r3, [r7, #0]
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810659a:	68bb      	ldr	r3, [r7, #8]
 810659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81065a0:	d103      	bne.n	81065aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81065a2:	687b      	ldr	r3, [r7, #4]
 81065a4:	691b      	ldr	r3, [r3, #16]
 81065a6:	60fb      	str	r3, [r7, #12]
 81065a8:	e00c      	b.n	81065c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81065aa:	687b      	ldr	r3, [r7, #4]
 81065ac:	3308      	adds	r3, #8
 81065ae:	60fb      	str	r3, [r7, #12]
 81065b0:	e002      	b.n	81065b8 <vListInsert+0x2e>
 81065b2:	68fb      	ldr	r3, [r7, #12]
 81065b4:	685b      	ldr	r3, [r3, #4]
 81065b6:	60fb      	str	r3, [r7, #12]
 81065b8:	68fb      	ldr	r3, [r7, #12]
 81065ba:	685b      	ldr	r3, [r3, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	68ba      	ldr	r2, [r7, #8]
 81065c0:	429a      	cmp	r2, r3
 81065c2:	d2f6      	bcs.n	81065b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81065c4:	68fb      	ldr	r3, [r7, #12]
 81065c6:	685a      	ldr	r2, [r3, #4]
 81065c8:	683b      	ldr	r3, [r7, #0]
 81065ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81065cc:	683b      	ldr	r3, [r7, #0]
 81065ce:	685b      	ldr	r3, [r3, #4]
 81065d0:	683a      	ldr	r2, [r7, #0]
 81065d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81065d4:	683b      	ldr	r3, [r7, #0]
 81065d6:	68fa      	ldr	r2, [r7, #12]
 81065d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81065da:	68fb      	ldr	r3, [r7, #12]
 81065dc:	683a      	ldr	r2, [r7, #0]
 81065de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81065e0:	683b      	ldr	r3, [r7, #0]
 81065e2:	687a      	ldr	r2, [r7, #4]
 81065e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	1c5a      	adds	r2, r3, #1
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	601a      	str	r2, [r3, #0]
}
 81065f0:	bf00      	nop
 81065f2:	3714      	adds	r7, #20
 81065f4:	46bd      	mov	sp, r7
 81065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065fa:	4770      	bx	lr

081065fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 81065fc:	b480      	push	{r7}
 81065fe:	b085      	sub	sp, #20
 8106600:	af00      	add	r7, sp, #0
 8106602:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8106604:	687b      	ldr	r3, [r7, #4]
 8106606:	691b      	ldr	r3, [r3, #16]
 8106608:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810660a:	687b      	ldr	r3, [r7, #4]
 810660c:	685b      	ldr	r3, [r3, #4]
 810660e:	687a      	ldr	r2, [r7, #4]
 8106610:	6892      	ldr	r2, [r2, #8]
 8106612:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8106614:	687b      	ldr	r3, [r7, #4]
 8106616:	689b      	ldr	r3, [r3, #8]
 8106618:	687a      	ldr	r2, [r7, #4]
 810661a:	6852      	ldr	r2, [r2, #4]
 810661c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810661e:	68fb      	ldr	r3, [r7, #12]
 8106620:	685b      	ldr	r3, [r3, #4]
 8106622:	687a      	ldr	r2, [r7, #4]
 8106624:	429a      	cmp	r2, r3
 8106626:	d103      	bne.n	8106630 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	689a      	ldr	r2, [r3, #8]
 810662c:	68fb      	ldr	r3, [r7, #12]
 810662e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	2200      	movs	r2, #0
 8106634:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8106636:	68fb      	ldr	r3, [r7, #12]
 8106638:	681b      	ldr	r3, [r3, #0]
 810663a:	1e5a      	subs	r2, r3, #1
 810663c:	68fb      	ldr	r3, [r7, #12]
 810663e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8106640:	68fb      	ldr	r3, [r7, #12]
 8106642:	681b      	ldr	r3, [r3, #0]
}
 8106644:	4618      	mov	r0, r3
 8106646:	3714      	adds	r7, #20
 8106648:	46bd      	mov	sp, r7
 810664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810664e:	4770      	bx	lr

08106650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8106650:	b480      	push	{r7}
 8106652:	b085      	sub	sp, #20
 8106654:	af00      	add	r7, sp, #0
 8106656:	60f8      	str	r0, [r7, #12]
 8106658:	60b9      	str	r1, [r7, #8]
 810665a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810665c:	68fb      	ldr	r3, [r7, #12]
 810665e:	3b04      	subs	r3, #4
 8106660:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8106662:	68fb      	ldr	r3, [r7, #12]
 8106664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8106668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810666a:	68fb      	ldr	r3, [r7, #12]
 810666c:	3b04      	subs	r3, #4
 810666e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8106670:	68bb      	ldr	r3, [r7, #8]
 8106672:	f023 0201 	bic.w	r2, r3, #1
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810667a:	68fb      	ldr	r3, [r7, #12]
 810667c:	3b04      	subs	r3, #4
 810667e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8106680:	4a0c      	ldr	r2, [pc, #48]	; (81066b4 <pxPortInitialiseStack+0x64>)
 8106682:	68fb      	ldr	r3, [r7, #12]
 8106684:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8106686:	68fb      	ldr	r3, [r7, #12]
 8106688:	3b14      	subs	r3, #20
 810668a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810668c:	687a      	ldr	r2, [r7, #4]
 810668e:	68fb      	ldr	r3, [r7, #12]
 8106690:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8106692:	68fb      	ldr	r3, [r7, #12]
 8106694:	3b04      	subs	r3, #4
 8106696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8106698:	68fb      	ldr	r3, [r7, #12]
 810669a:	f06f 0202 	mvn.w	r2, #2
 810669e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81066a0:	68fb      	ldr	r3, [r7, #12]
 81066a2:	3b20      	subs	r3, #32
 81066a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81066a6:	68fb      	ldr	r3, [r7, #12]
}
 81066a8:	4618      	mov	r0, r3
 81066aa:	3714      	adds	r7, #20
 81066ac:	46bd      	mov	sp, r7
 81066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066b2:	4770      	bx	lr
 81066b4:	081066b9 	.word	0x081066b9

081066b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81066b8:	b480      	push	{r7}
 81066ba:	b085      	sub	sp, #20
 81066bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81066be:	2300      	movs	r3, #0
 81066c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81066c2:	4b11      	ldr	r3, [pc, #68]	; (8106708 <prvTaskExitError+0x50>)
 81066c4:	681b      	ldr	r3, [r3, #0]
 81066c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81066ca:	d009      	beq.n	81066e0 <prvTaskExitError+0x28>
 81066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81066d0:	f383 8811 	msr	BASEPRI, r3
 81066d4:	f3bf 8f6f 	isb	sy
 81066d8:	f3bf 8f4f 	dsb	sy
 81066dc:	60fb      	str	r3, [r7, #12]
 81066de:	e7fe      	b.n	81066de <prvTaskExitError+0x26>
 81066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81066e4:	f383 8811 	msr	BASEPRI, r3
 81066e8:	f3bf 8f6f 	isb	sy
 81066ec:	f3bf 8f4f 	dsb	sy
 81066f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81066f2:	bf00      	nop
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	2b00      	cmp	r3, #0
 81066f8:	d0fc      	beq.n	81066f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 81066fa:	bf00      	nop
 81066fc:	3714      	adds	r7, #20
 81066fe:	46bd      	mov	sp, r7
 8106700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106704:	4770      	bx	lr
 8106706:	bf00      	nop
 8106708:	1000000c 	.word	0x1000000c
 810670c:	00000000 	.word	0x00000000

08106710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8106710:	4b07      	ldr	r3, [pc, #28]	; (8106730 <pxCurrentTCBConst2>)
 8106712:	6819      	ldr	r1, [r3, #0]
 8106714:	6808      	ldr	r0, [r1, #0]
 8106716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810671a:	f380 8809 	msr	PSP, r0
 810671e:	f3bf 8f6f 	isb	sy
 8106722:	f04f 0000 	mov.w	r0, #0
 8106726:	f380 8811 	msr	BASEPRI, r0
 810672a:	4770      	bx	lr
 810672c:	f3af 8000 	nop.w

08106730 <pxCurrentTCBConst2>:
 8106730:	100044dc 	.word	0x100044dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8106734:	bf00      	nop
 8106736:	bf00      	nop

08106738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8106738:	4808      	ldr	r0, [pc, #32]	; (810675c <prvPortStartFirstTask+0x24>)
 810673a:	6800      	ldr	r0, [r0, #0]
 810673c:	6800      	ldr	r0, [r0, #0]
 810673e:	f380 8808 	msr	MSP, r0
 8106742:	f04f 0000 	mov.w	r0, #0
 8106746:	f380 8814 	msr	CONTROL, r0
 810674a:	b662      	cpsie	i
 810674c:	b661      	cpsie	f
 810674e:	f3bf 8f4f 	dsb	sy
 8106752:	f3bf 8f6f 	isb	sy
 8106756:	df00      	svc	0
 8106758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810675a:	bf00      	nop
 810675c:	e000ed08 	.word	0xe000ed08

08106760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8106760:	b580      	push	{r7, lr}
 8106762:	b086      	sub	sp, #24
 8106764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8106766:	4b44      	ldr	r3, [pc, #272]	; (8106878 <xPortStartScheduler+0x118>)
 8106768:	681b      	ldr	r3, [r3, #0]
 810676a:	4a44      	ldr	r2, [pc, #272]	; (810687c <xPortStartScheduler+0x11c>)
 810676c:	4293      	cmp	r3, r2
 810676e:	d109      	bne.n	8106784 <xPortStartScheduler+0x24>
 8106770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106774:	f383 8811 	msr	BASEPRI, r3
 8106778:	f3bf 8f6f 	isb	sy
 810677c:	f3bf 8f4f 	dsb	sy
 8106780:	613b      	str	r3, [r7, #16]
 8106782:	e7fe      	b.n	8106782 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8106784:	4b3c      	ldr	r3, [pc, #240]	; (8106878 <xPortStartScheduler+0x118>)
 8106786:	681b      	ldr	r3, [r3, #0]
 8106788:	4a3d      	ldr	r2, [pc, #244]	; (8106880 <xPortStartScheduler+0x120>)
 810678a:	4293      	cmp	r3, r2
 810678c:	d109      	bne.n	81067a2 <xPortStartScheduler+0x42>
 810678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106792:	f383 8811 	msr	BASEPRI, r3
 8106796:	f3bf 8f6f 	isb	sy
 810679a:	f3bf 8f4f 	dsb	sy
 810679e:	60fb      	str	r3, [r7, #12]
 81067a0:	e7fe      	b.n	81067a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81067a2:	4b38      	ldr	r3, [pc, #224]	; (8106884 <xPortStartScheduler+0x124>)
 81067a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81067a6:	697b      	ldr	r3, [r7, #20]
 81067a8:	781b      	ldrb	r3, [r3, #0]
 81067aa:	b2db      	uxtb	r3, r3
 81067ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81067ae:	697b      	ldr	r3, [r7, #20]
 81067b0:	22ff      	movs	r2, #255	; 0xff
 81067b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81067b4:	697b      	ldr	r3, [r7, #20]
 81067b6:	781b      	ldrb	r3, [r3, #0]
 81067b8:	b2db      	uxtb	r3, r3
 81067ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81067bc:	78fb      	ldrb	r3, [r7, #3]
 81067be:	b2db      	uxtb	r3, r3
 81067c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81067c4:	b2da      	uxtb	r2, r3
 81067c6:	4b30      	ldr	r3, [pc, #192]	; (8106888 <xPortStartScheduler+0x128>)
 81067c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81067ca:	4b30      	ldr	r3, [pc, #192]	; (810688c <xPortStartScheduler+0x12c>)
 81067cc:	2207      	movs	r2, #7
 81067ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81067d0:	e009      	b.n	81067e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 81067d2:	4b2e      	ldr	r3, [pc, #184]	; (810688c <xPortStartScheduler+0x12c>)
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	3b01      	subs	r3, #1
 81067d8:	4a2c      	ldr	r2, [pc, #176]	; (810688c <xPortStartScheduler+0x12c>)
 81067da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81067dc:	78fb      	ldrb	r3, [r7, #3]
 81067de:	b2db      	uxtb	r3, r3
 81067e0:	005b      	lsls	r3, r3, #1
 81067e2:	b2db      	uxtb	r3, r3
 81067e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81067e6:	78fb      	ldrb	r3, [r7, #3]
 81067e8:	b2db      	uxtb	r3, r3
 81067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81067ee:	2b80      	cmp	r3, #128	; 0x80
 81067f0:	d0ef      	beq.n	81067d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81067f2:	4b26      	ldr	r3, [pc, #152]	; (810688c <xPortStartScheduler+0x12c>)
 81067f4:	681b      	ldr	r3, [r3, #0]
 81067f6:	f1c3 0307 	rsb	r3, r3, #7
 81067fa:	2b04      	cmp	r3, #4
 81067fc:	d009      	beq.n	8106812 <xPortStartScheduler+0xb2>
 81067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106802:	f383 8811 	msr	BASEPRI, r3
 8106806:	f3bf 8f6f 	isb	sy
 810680a:	f3bf 8f4f 	dsb	sy
 810680e:	60bb      	str	r3, [r7, #8]
 8106810:	e7fe      	b.n	8106810 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8106812:	4b1e      	ldr	r3, [pc, #120]	; (810688c <xPortStartScheduler+0x12c>)
 8106814:	681b      	ldr	r3, [r3, #0]
 8106816:	021b      	lsls	r3, r3, #8
 8106818:	4a1c      	ldr	r2, [pc, #112]	; (810688c <xPortStartScheduler+0x12c>)
 810681a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810681c:	4b1b      	ldr	r3, [pc, #108]	; (810688c <xPortStartScheduler+0x12c>)
 810681e:	681b      	ldr	r3, [r3, #0]
 8106820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8106824:	4a19      	ldr	r2, [pc, #100]	; (810688c <xPortStartScheduler+0x12c>)
 8106826:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8106828:	687b      	ldr	r3, [r7, #4]
 810682a:	b2da      	uxtb	r2, r3
 810682c:	697b      	ldr	r3, [r7, #20]
 810682e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8106830:	4b17      	ldr	r3, [pc, #92]	; (8106890 <xPortStartScheduler+0x130>)
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	4a16      	ldr	r2, [pc, #88]	; (8106890 <xPortStartScheduler+0x130>)
 8106836:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810683a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810683c:	4b14      	ldr	r3, [pc, #80]	; (8106890 <xPortStartScheduler+0x130>)
 810683e:	681b      	ldr	r3, [r3, #0]
 8106840:	4a13      	ldr	r2, [pc, #76]	; (8106890 <xPortStartScheduler+0x130>)
 8106842:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8106846:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8106848:	f000 f8d6 	bl	81069f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810684c:	4b11      	ldr	r3, [pc, #68]	; (8106894 <xPortStartScheduler+0x134>)
 810684e:	2200      	movs	r2, #0
 8106850:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8106852:	f000 f8f5 	bl	8106a40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8106856:	4b10      	ldr	r3, [pc, #64]	; (8106898 <xPortStartScheduler+0x138>)
 8106858:	681b      	ldr	r3, [r3, #0]
 810685a:	4a0f      	ldr	r2, [pc, #60]	; (8106898 <xPortStartScheduler+0x138>)
 810685c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8106860:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8106862:	f7ff ff69 	bl	8106738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8106866:	f001 f9af 	bl	8107bc8 <vTaskSwitchContext>
	prvTaskExitError();
 810686a:	f7ff ff25 	bl	81066b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810686e:	2300      	movs	r3, #0
}
 8106870:	4618      	mov	r0, r3
 8106872:	3718      	adds	r7, #24
 8106874:	46bd      	mov	sp, r7
 8106876:	bd80      	pop	{r7, pc}
 8106878:	e000ed00 	.word	0xe000ed00
 810687c:	410fc271 	.word	0x410fc271
 8106880:	410fc270 	.word	0x410fc270
 8106884:	e000e400 	.word	0xe000e400
 8106888:	100044d4 	.word	0x100044d4
 810688c:	100044d8 	.word	0x100044d8
 8106890:	e000ed20 	.word	0xe000ed20
 8106894:	1000000c 	.word	0x1000000c
 8106898:	e000ef34 	.word	0xe000ef34

0810689c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810689c:	b480      	push	{r7}
 810689e:	b083      	sub	sp, #12
 81068a0:	af00      	add	r7, sp, #0
 81068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81068a6:	f383 8811 	msr	BASEPRI, r3
 81068aa:	f3bf 8f6f 	isb	sy
 81068ae:	f3bf 8f4f 	dsb	sy
 81068b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81068b4:	4b0e      	ldr	r3, [pc, #56]	; (81068f0 <vPortEnterCritical+0x54>)
 81068b6:	681b      	ldr	r3, [r3, #0]
 81068b8:	3301      	adds	r3, #1
 81068ba:	4a0d      	ldr	r2, [pc, #52]	; (81068f0 <vPortEnterCritical+0x54>)
 81068bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81068be:	4b0c      	ldr	r3, [pc, #48]	; (81068f0 <vPortEnterCritical+0x54>)
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	2b01      	cmp	r3, #1
 81068c4:	d10e      	bne.n	81068e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 81068c6:	4b0b      	ldr	r3, [pc, #44]	; (81068f4 <vPortEnterCritical+0x58>)
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	b2db      	uxtb	r3, r3
 81068cc:	2b00      	cmp	r3, #0
 81068ce:	d009      	beq.n	81068e4 <vPortEnterCritical+0x48>
 81068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81068d4:	f383 8811 	msr	BASEPRI, r3
 81068d8:	f3bf 8f6f 	isb	sy
 81068dc:	f3bf 8f4f 	dsb	sy
 81068e0:	603b      	str	r3, [r7, #0]
 81068e2:	e7fe      	b.n	81068e2 <vPortEnterCritical+0x46>
	}
}
 81068e4:	bf00      	nop
 81068e6:	370c      	adds	r7, #12
 81068e8:	46bd      	mov	sp, r7
 81068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068ee:	4770      	bx	lr
 81068f0:	1000000c 	.word	0x1000000c
 81068f4:	e000ed04 	.word	0xe000ed04

081068f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 81068f8:	b480      	push	{r7}
 81068fa:	b083      	sub	sp, #12
 81068fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81068fe:	4b11      	ldr	r3, [pc, #68]	; (8106944 <vPortExitCritical+0x4c>)
 8106900:	681b      	ldr	r3, [r3, #0]
 8106902:	2b00      	cmp	r3, #0
 8106904:	d109      	bne.n	810691a <vPortExitCritical+0x22>
 8106906:	f04f 0350 	mov.w	r3, #80	; 0x50
 810690a:	f383 8811 	msr	BASEPRI, r3
 810690e:	f3bf 8f6f 	isb	sy
 8106912:	f3bf 8f4f 	dsb	sy
 8106916:	607b      	str	r3, [r7, #4]
 8106918:	e7fe      	b.n	8106918 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810691a:	4b0a      	ldr	r3, [pc, #40]	; (8106944 <vPortExitCritical+0x4c>)
 810691c:	681b      	ldr	r3, [r3, #0]
 810691e:	3b01      	subs	r3, #1
 8106920:	4a08      	ldr	r2, [pc, #32]	; (8106944 <vPortExitCritical+0x4c>)
 8106922:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8106924:	4b07      	ldr	r3, [pc, #28]	; (8106944 <vPortExitCritical+0x4c>)
 8106926:	681b      	ldr	r3, [r3, #0]
 8106928:	2b00      	cmp	r3, #0
 810692a:	d104      	bne.n	8106936 <vPortExitCritical+0x3e>
 810692c:	2300      	movs	r3, #0
 810692e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8106930:	683b      	ldr	r3, [r7, #0]
 8106932:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8106936:	bf00      	nop
 8106938:	370c      	adds	r7, #12
 810693a:	46bd      	mov	sp, r7
 810693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106940:	4770      	bx	lr
 8106942:	bf00      	nop
 8106944:	1000000c 	.word	0x1000000c
	...

08106950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8106950:	f3ef 8009 	mrs	r0, PSP
 8106954:	f3bf 8f6f 	isb	sy
 8106958:	4b15      	ldr	r3, [pc, #84]	; (81069b0 <pxCurrentTCBConst>)
 810695a:	681a      	ldr	r2, [r3, #0]
 810695c:	f01e 0f10 	tst.w	lr, #16
 8106960:	bf08      	it	eq
 8106962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8106966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810696a:	6010      	str	r0, [r2, #0]
 810696c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8106970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8106974:	f380 8811 	msr	BASEPRI, r0
 8106978:	f3bf 8f4f 	dsb	sy
 810697c:	f3bf 8f6f 	isb	sy
 8106980:	f001 f922 	bl	8107bc8 <vTaskSwitchContext>
 8106984:	f04f 0000 	mov.w	r0, #0
 8106988:	f380 8811 	msr	BASEPRI, r0
 810698c:	bc09      	pop	{r0, r3}
 810698e:	6819      	ldr	r1, [r3, #0]
 8106990:	6808      	ldr	r0, [r1, #0]
 8106992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106996:	f01e 0f10 	tst.w	lr, #16
 810699a:	bf08      	it	eq
 810699c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 81069a0:	f380 8809 	msr	PSP, r0
 81069a4:	f3bf 8f6f 	isb	sy
 81069a8:	4770      	bx	lr
 81069aa:	bf00      	nop
 81069ac:	f3af 8000 	nop.w

081069b0 <pxCurrentTCBConst>:
 81069b0:	100044dc 	.word	0x100044dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81069b4:	bf00      	nop
 81069b6:	bf00      	nop

081069b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81069b8:	b580      	push	{r7, lr}
 81069ba:	b082      	sub	sp, #8
 81069bc:	af00      	add	r7, sp, #0
	__asm volatile
 81069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81069c2:	f383 8811 	msr	BASEPRI, r3
 81069c6:	f3bf 8f6f 	isb	sy
 81069ca:	f3bf 8f4f 	dsb	sy
 81069ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81069d0:	f001 f842 	bl	8107a58 <xTaskIncrementTick>
 81069d4:	4603      	mov	r3, r0
 81069d6:	2b00      	cmp	r3, #0
 81069d8:	d003      	beq.n	81069e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81069da:	4b06      	ldr	r3, [pc, #24]	; (81069f4 <SysTick_Handler+0x3c>)
 81069dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81069e0:	601a      	str	r2, [r3, #0]
 81069e2:	2300      	movs	r3, #0
 81069e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 81069e6:	683b      	ldr	r3, [r7, #0]
 81069e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 81069ec:	bf00      	nop
 81069ee:	3708      	adds	r7, #8
 81069f0:	46bd      	mov	sp, r7
 81069f2:	bd80      	pop	{r7, pc}
 81069f4:	e000ed04 	.word	0xe000ed04

081069f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81069f8:	b480      	push	{r7}
 81069fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81069fc:	4b0b      	ldr	r3, [pc, #44]	; (8106a2c <vPortSetupTimerInterrupt+0x34>)
 81069fe:	2200      	movs	r2, #0
 8106a00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8106a02:	4b0b      	ldr	r3, [pc, #44]	; (8106a30 <vPortSetupTimerInterrupt+0x38>)
 8106a04:	2200      	movs	r2, #0
 8106a06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8106a08:	4b0a      	ldr	r3, [pc, #40]	; (8106a34 <vPortSetupTimerInterrupt+0x3c>)
 8106a0a:	681b      	ldr	r3, [r3, #0]
 8106a0c:	4a0a      	ldr	r2, [pc, #40]	; (8106a38 <vPortSetupTimerInterrupt+0x40>)
 8106a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8106a12:	099b      	lsrs	r3, r3, #6
 8106a14:	4a09      	ldr	r2, [pc, #36]	; (8106a3c <vPortSetupTimerInterrupt+0x44>)
 8106a16:	3b01      	subs	r3, #1
 8106a18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8106a1a:	4b04      	ldr	r3, [pc, #16]	; (8106a2c <vPortSetupTimerInterrupt+0x34>)
 8106a1c:	2207      	movs	r2, #7
 8106a1e:	601a      	str	r2, [r3, #0]
}
 8106a20:	bf00      	nop
 8106a22:	46bd      	mov	sp, r7
 8106a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a28:	4770      	bx	lr
 8106a2a:	bf00      	nop
 8106a2c:	e000e010 	.word	0xe000e010
 8106a30:	e000e018 	.word	0xe000e018
 8106a34:	10000004 	.word	0x10000004
 8106a38:	10624dd3 	.word	0x10624dd3
 8106a3c:	e000e014 	.word	0xe000e014

08106a40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8106a40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8106a50 <vPortEnableVFP+0x10>
 8106a44:	6801      	ldr	r1, [r0, #0]
 8106a46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8106a4a:	6001      	str	r1, [r0, #0]
 8106a4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8106a4e:	bf00      	nop
 8106a50:	e000ed88 	.word	0xe000ed88

08106a54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8106a54:	b480      	push	{r7}
 8106a56:	b085      	sub	sp, #20
 8106a58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8106a5a:	f3ef 8305 	mrs	r3, IPSR
 8106a5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8106a60:	68fb      	ldr	r3, [r7, #12]
 8106a62:	2b0f      	cmp	r3, #15
 8106a64:	d913      	bls.n	8106a8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8106a66:	4a16      	ldr	r2, [pc, #88]	; (8106ac0 <vPortValidateInterruptPriority+0x6c>)
 8106a68:	68fb      	ldr	r3, [r7, #12]
 8106a6a:	4413      	add	r3, r2
 8106a6c:	781b      	ldrb	r3, [r3, #0]
 8106a6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8106a70:	4b14      	ldr	r3, [pc, #80]	; (8106ac4 <vPortValidateInterruptPriority+0x70>)
 8106a72:	781b      	ldrb	r3, [r3, #0]
 8106a74:	7afa      	ldrb	r2, [r7, #11]
 8106a76:	429a      	cmp	r2, r3
 8106a78:	d209      	bcs.n	8106a8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8106a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106a7e:	f383 8811 	msr	BASEPRI, r3
 8106a82:	f3bf 8f6f 	isb	sy
 8106a86:	f3bf 8f4f 	dsb	sy
 8106a8a:	607b      	str	r3, [r7, #4]
 8106a8c:	e7fe      	b.n	8106a8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8106a8e:	4b0e      	ldr	r3, [pc, #56]	; (8106ac8 <vPortValidateInterruptPriority+0x74>)
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106a96:	4b0d      	ldr	r3, [pc, #52]	; (8106acc <vPortValidateInterruptPriority+0x78>)
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	429a      	cmp	r2, r3
 8106a9c:	d909      	bls.n	8106ab2 <vPortValidateInterruptPriority+0x5e>
 8106a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106aa2:	f383 8811 	msr	BASEPRI, r3
 8106aa6:	f3bf 8f6f 	isb	sy
 8106aaa:	f3bf 8f4f 	dsb	sy
 8106aae:	603b      	str	r3, [r7, #0]
 8106ab0:	e7fe      	b.n	8106ab0 <vPortValidateInterruptPriority+0x5c>
	}
 8106ab2:	bf00      	nop
 8106ab4:	3714      	adds	r7, #20
 8106ab6:	46bd      	mov	sp, r7
 8106ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106abc:	4770      	bx	lr
 8106abe:	bf00      	nop
 8106ac0:	e000e3f0 	.word	0xe000e3f0
 8106ac4:	100044d4 	.word	0x100044d4
 8106ac8:	e000ed0c 	.word	0xe000ed0c
 8106acc:	100044d8 	.word	0x100044d8

08106ad0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8106ad0:	b580      	push	{r7, lr}
 8106ad2:	b084      	sub	sp, #16
 8106ad4:	af00      	add	r7, sp, #0
 8106ad6:	6078      	str	r0, [r7, #4]
 8106ad8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8106ade:	68fb      	ldr	r3, [r7, #12]
 8106ae0:	2b00      	cmp	r3, #0
 8106ae2:	d109      	bne.n	8106af8 <xQueueGenericReset+0x28>
 8106ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106ae8:	f383 8811 	msr	BASEPRI, r3
 8106aec:	f3bf 8f6f 	isb	sy
 8106af0:	f3bf 8f4f 	dsb	sy
 8106af4:	60bb      	str	r3, [r7, #8]
 8106af6:	e7fe      	b.n	8106af6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8106af8:	f7ff fed0 	bl	810689c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106afc:	68fb      	ldr	r3, [r7, #12]
 8106afe:	681a      	ldr	r2, [r3, #0]
 8106b00:	68fb      	ldr	r3, [r7, #12]
 8106b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b04:	68f9      	ldr	r1, [r7, #12]
 8106b06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8106b08:	fb01 f303 	mul.w	r3, r1, r3
 8106b0c:	441a      	add	r2, r3
 8106b0e:	68fb      	ldr	r3, [r7, #12]
 8106b10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8106b12:	68fb      	ldr	r3, [r7, #12]
 8106b14:	2200      	movs	r2, #0
 8106b16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8106b18:	68fb      	ldr	r3, [r7, #12]
 8106b1a:	681a      	ldr	r2, [r3, #0]
 8106b1c:	68fb      	ldr	r3, [r7, #12]
 8106b1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106b20:	68fb      	ldr	r3, [r7, #12]
 8106b22:	681a      	ldr	r2, [r3, #0]
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106b28:	3b01      	subs	r3, #1
 8106b2a:	68f9      	ldr	r1, [r7, #12]
 8106b2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8106b2e:	fb01 f303 	mul.w	r3, r1, r3
 8106b32:	441a      	add	r2, r3
 8106b34:	68fb      	ldr	r3, [r7, #12]
 8106b36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8106b38:	68fb      	ldr	r3, [r7, #12]
 8106b3a:	22ff      	movs	r2, #255	; 0xff
 8106b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8106b40:	68fb      	ldr	r3, [r7, #12]
 8106b42:	22ff      	movs	r2, #255	; 0xff
 8106b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8106b48:	683b      	ldr	r3, [r7, #0]
 8106b4a:	2b00      	cmp	r3, #0
 8106b4c:	d114      	bne.n	8106b78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106b4e:	68fb      	ldr	r3, [r7, #12]
 8106b50:	691b      	ldr	r3, [r3, #16]
 8106b52:	2b00      	cmp	r3, #0
 8106b54:	d01a      	beq.n	8106b8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106b56:	68fb      	ldr	r3, [r7, #12]
 8106b58:	3310      	adds	r3, #16
 8106b5a:	4618      	mov	r0, r3
 8106b5c:	f001 f8de 	bl	8107d1c <xTaskRemoveFromEventList>
 8106b60:	4603      	mov	r3, r0
 8106b62:	2b00      	cmp	r3, #0
 8106b64:	d012      	beq.n	8106b8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8106b66:	4b0d      	ldr	r3, [pc, #52]	; (8106b9c <xQueueGenericReset+0xcc>)
 8106b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106b6c:	601a      	str	r2, [r3, #0]
 8106b6e:	f3bf 8f4f 	dsb	sy
 8106b72:	f3bf 8f6f 	isb	sy
 8106b76:	e009      	b.n	8106b8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8106b78:	68fb      	ldr	r3, [r7, #12]
 8106b7a:	3310      	adds	r3, #16
 8106b7c:	4618      	mov	r0, r3
 8106b7e:	f7ff fcb3 	bl	81064e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8106b82:	68fb      	ldr	r3, [r7, #12]
 8106b84:	3324      	adds	r3, #36	; 0x24
 8106b86:	4618      	mov	r0, r3
 8106b88:	f7ff fcae 	bl	81064e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8106b8c:	f7ff feb4 	bl	81068f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8106b90:	2301      	movs	r3, #1
}
 8106b92:	4618      	mov	r0, r3
 8106b94:	3710      	adds	r7, #16
 8106b96:	46bd      	mov	sp, r7
 8106b98:	bd80      	pop	{r7, pc}
 8106b9a:	bf00      	nop
 8106b9c:	e000ed04 	.word	0xe000ed04

08106ba0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8106ba0:	b580      	push	{r7, lr}
 8106ba2:	b08e      	sub	sp, #56	; 0x38
 8106ba4:	af02      	add	r7, sp, #8
 8106ba6:	60f8      	str	r0, [r7, #12]
 8106ba8:	60b9      	str	r1, [r7, #8]
 8106baa:	607a      	str	r2, [r7, #4]
 8106bac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8106bae:	68fb      	ldr	r3, [r7, #12]
 8106bb0:	2b00      	cmp	r3, #0
 8106bb2:	d109      	bne.n	8106bc8 <xQueueGenericCreateStatic+0x28>
 8106bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106bb8:	f383 8811 	msr	BASEPRI, r3
 8106bbc:	f3bf 8f6f 	isb	sy
 8106bc0:	f3bf 8f4f 	dsb	sy
 8106bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8106bc6:	e7fe      	b.n	8106bc6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8106bc8:	683b      	ldr	r3, [r7, #0]
 8106bca:	2b00      	cmp	r3, #0
 8106bcc:	d109      	bne.n	8106be2 <xQueueGenericCreateStatic+0x42>
 8106bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106bd2:	f383 8811 	msr	BASEPRI, r3
 8106bd6:	f3bf 8f6f 	isb	sy
 8106bda:	f3bf 8f4f 	dsb	sy
 8106bde:	627b      	str	r3, [r7, #36]	; 0x24
 8106be0:	e7fe      	b.n	8106be0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	2b00      	cmp	r3, #0
 8106be6:	d002      	beq.n	8106bee <xQueueGenericCreateStatic+0x4e>
 8106be8:	68bb      	ldr	r3, [r7, #8]
 8106bea:	2b00      	cmp	r3, #0
 8106bec:	d001      	beq.n	8106bf2 <xQueueGenericCreateStatic+0x52>
 8106bee:	2301      	movs	r3, #1
 8106bf0:	e000      	b.n	8106bf4 <xQueueGenericCreateStatic+0x54>
 8106bf2:	2300      	movs	r3, #0
 8106bf4:	2b00      	cmp	r3, #0
 8106bf6:	d109      	bne.n	8106c0c <xQueueGenericCreateStatic+0x6c>
 8106bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106bfc:	f383 8811 	msr	BASEPRI, r3
 8106c00:	f3bf 8f6f 	isb	sy
 8106c04:	f3bf 8f4f 	dsb	sy
 8106c08:	623b      	str	r3, [r7, #32]
 8106c0a:	e7fe      	b.n	8106c0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	2b00      	cmp	r3, #0
 8106c10:	d102      	bne.n	8106c18 <xQueueGenericCreateStatic+0x78>
 8106c12:	68bb      	ldr	r3, [r7, #8]
 8106c14:	2b00      	cmp	r3, #0
 8106c16:	d101      	bne.n	8106c1c <xQueueGenericCreateStatic+0x7c>
 8106c18:	2301      	movs	r3, #1
 8106c1a:	e000      	b.n	8106c1e <xQueueGenericCreateStatic+0x7e>
 8106c1c:	2300      	movs	r3, #0
 8106c1e:	2b00      	cmp	r3, #0
 8106c20:	d109      	bne.n	8106c36 <xQueueGenericCreateStatic+0x96>
 8106c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c26:	f383 8811 	msr	BASEPRI, r3
 8106c2a:	f3bf 8f6f 	isb	sy
 8106c2e:	f3bf 8f4f 	dsb	sy
 8106c32:	61fb      	str	r3, [r7, #28]
 8106c34:	e7fe      	b.n	8106c34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8106c36:	2350      	movs	r3, #80	; 0x50
 8106c38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8106c3a:	697b      	ldr	r3, [r7, #20]
 8106c3c:	2b50      	cmp	r3, #80	; 0x50
 8106c3e:	d009      	beq.n	8106c54 <xQueueGenericCreateStatic+0xb4>
 8106c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c44:	f383 8811 	msr	BASEPRI, r3
 8106c48:	f3bf 8f6f 	isb	sy
 8106c4c:	f3bf 8f4f 	dsb	sy
 8106c50:	61bb      	str	r3, [r7, #24]
 8106c52:	e7fe      	b.n	8106c52 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8106c54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106c56:	683b      	ldr	r3, [r7, #0]
 8106c58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8106c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c5c:	2b00      	cmp	r3, #0
 8106c5e:	d00d      	beq.n	8106c7c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8106c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c62:	2201      	movs	r2, #1
 8106c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8106c68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8106c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c6e:	9300      	str	r3, [sp, #0]
 8106c70:	4613      	mov	r3, r2
 8106c72:	687a      	ldr	r2, [r7, #4]
 8106c74:	68b9      	ldr	r1, [r7, #8]
 8106c76:	68f8      	ldr	r0, [r7, #12]
 8106c78:	f000 f805 	bl	8106c86 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8106c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8106c7e:	4618      	mov	r0, r3
 8106c80:	3730      	adds	r7, #48	; 0x30
 8106c82:	46bd      	mov	sp, r7
 8106c84:	bd80      	pop	{r7, pc}

08106c86 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8106c86:	b580      	push	{r7, lr}
 8106c88:	b084      	sub	sp, #16
 8106c8a:	af00      	add	r7, sp, #0
 8106c8c:	60f8      	str	r0, [r7, #12]
 8106c8e:	60b9      	str	r1, [r7, #8]
 8106c90:	607a      	str	r2, [r7, #4]
 8106c92:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8106c94:	68bb      	ldr	r3, [r7, #8]
 8106c96:	2b00      	cmp	r3, #0
 8106c98:	d103      	bne.n	8106ca2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8106c9a:	69bb      	ldr	r3, [r7, #24]
 8106c9c:	69ba      	ldr	r2, [r7, #24]
 8106c9e:	601a      	str	r2, [r3, #0]
 8106ca0:	e002      	b.n	8106ca8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8106ca2:	69bb      	ldr	r3, [r7, #24]
 8106ca4:	687a      	ldr	r2, [r7, #4]
 8106ca6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8106ca8:	69bb      	ldr	r3, [r7, #24]
 8106caa:	68fa      	ldr	r2, [r7, #12]
 8106cac:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8106cae:	69bb      	ldr	r3, [r7, #24]
 8106cb0:	68ba      	ldr	r2, [r7, #8]
 8106cb2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8106cb4:	2101      	movs	r1, #1
 8106cb6:	69b8      	ldr	r0, [r7, #24]
 8106cb8:	f7ff ff0a 	bl	8106ad0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8106cbc:	69bb      	ldr	r3, [r7, #24]
 8106cbe:	78fa      	ldrb	r2, [r7, #3]
 8106cc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8106cc4:	bf00      	nop
 8106cc6:	3710      	adds	r7, #16
 8106cc8:	46bd      	mov	sp, r7
 8106cca:	bd80      	pop	{r7, pc}

08106ccc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8106ccc:	b580      	push	{r7, lr}
 8106cce:	b08e      	sub	sp, #56	; 0x38
 8106cd0:	af00      	add	r7, sp, #0
 8106cd2:	60f8      	str	r0, [r7, #12]
 8106cd4:	60b9      	str	r1, [r7, #8]
 8106cd6:	607a      	str	r2, [r7, #4]
 8106cd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8106cda:	2300      	movs	r3, #0
 8106cdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106cde:	68fb      	ldr	r3, [r7, #12]
 8106ce0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8106ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ce4:	2b00      	cmp	r3, #0
 8106ce6:	d109      	bne.n	8106cfc <xQueueGenericSend+0x30>
 8106ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106cec:	f383 8811 	msr	BASEPRI, r3
 8106cf0:	f3bf 8f6f 	isb	sy
 8106cf4:	f3bf 8f4f 	dsb	sy
 8106cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8106cfa:	e7fe      	b.n	8106cfa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106cfc:	68bb      	ldr	r3, [r7, #8]
 8106cfe:	2b00      	cmp	r3, #0
 8106d00:	d103      	bne.n	8106d0a <xQueueGenericSend+0x3e>
 8106d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106d06:	2b00      	cmp	r3, #0
 8106d08:	d101      	bne.n	8106d0e <xQueueGenericSend+0x42>
 8106d0a:	2301      	movs	r3, #1
 8106d0c:	e000      	b.n	8106d10 <xQueueGenericSend+0x44>
 8106d0e:	2300      	movs	r3, #0
 8106d10:	2b00      	cmp	r3, #0
 8106d12:	d109      	bne.n	8106d28 <xQueueGenericSend+0x5c>
 8106d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d18:	f383 8811 	msr	BASEPRI, r3
 8106d1c:	f3bf 8f6f 	isb	sy
 8106d20:	f3bf 8f4f 	dsb	sy
 8106d24:	627b      	str	r3, [r7, #36]	; 0x24
 8106d26:	e7fe      	b.n	8106d26 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106d28:	683b      	ldr	r3, [r7, #0]
 8106d2a:	2b02      	cmp	r3, #2
 8106d2c:	d103      	bne.n	8106d36 <xQueueGenericSend+0x6a>
 8106d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d32:	2b01      	cmp	r3, #1
 8106d34:	d101      	bne.n	8106d3a <xQueueGenericSend+0x6e>
 8106d36:	2301      	movs	r3, #1
 8106d38:	e000      	b.n	8106d3c <xQueueGenericSend+0x70>
 8106d3a:	2300      	movs	r3, #0
 8106d3c:	2b00      	cmp	r3, #0
 8106d3e:	d109      	bne.n	8106d54 <xQueueGenericSend+0x88>
 8106d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d44:	f383 8811 	msr	BASEPRI, r3
 8106d48:	f3bf 8f6f 	isb	sy
 8106d4c:	f3bf 8f4f 	dsb	sy
 8106d50:	623b      	str	r3, [r7, #32]
 8106d52:	e7fe      	b.n	8106d52 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106d54:	f001 f998 	bl	8108088 <xTaskGetSchedulerState>
 8106d58:	4603      	mov	r3, r0
 8106d5a:	2b00      	cmp	r3, #0
 8106d5c:	d102      	bne.n	8106d64 <xQueueGenericSend+0x98>
 8106d5e:	687b      	ldr	r3, [r7, #4]
 8106d60:	2b00      	cmp	r3, #0
 8106d62:	d101      	bne.n	8106d68 <xQueueGenericSend+0x9c>
 8106d64:	2301      	movs	r3, #1
 8106d66:	e000      	b.n	8106d6a <xQueueGenericSend+0x9e>
 8106d68:	2300      	movs	r3, #0
 8106d6a:	2b00      	cmp	r3, #0
 8106d6c:	d109      	bne.n	8106d82 <xQueueGenericSend+0xb6>
 8106d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d72:	f383 8811 	msr	BASEPRI, r3
 8106d76:	f3bf 8f6f 	isb	sy
 8106d7a:	f3bf 8f4f 	dsb	sy
 8106d7e:	61fb      	str	r3, [r7, #28]
 8106d80:	e7fe      	b.n	8106d80 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106d82:	f7ff fd8b 	bl	810689c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d8e:	429a      	cmp	r2, r3
 8106d90:	d302      	bcc.n	8106d98 <xQueueGenericSend+0xcc>
 8106d92:	683b      	ldr	r3, [r7, #0]
 8106d94:	2b02      	cmp	r3, #2
 8106d96:	d129      	bne.n	8106dec <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106d98:	683a      	ldr	r2, [r7, #0]
 8106d9a:	68b9      	ldr	r1, [r7, #8]
 8106d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106d9e:	f000 f9ff 	bl	81071a0 <prvCopyDataToQueue>
 8106da2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106da8:	2b00      	cmp	r3, #0
 8106daa:	d010      	beq.n	8106dce <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106dae:	3324      	adds	r3, #36	; 0x24
 8106db0:	4618      	mov	r0, r3
 8106db2:	f000 ffb3 	bl	8107d1c <xTaskRemoveFromEventList>
 8106db6:	4603      	mov	r3, r0
 8106db8:	2b00      	cmp	r3, #0
 8106dba:	d013      	beq.n	8106de4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8106dbc:	4b3f      	ldr	r3, [pc, #252]	; (8106ebc <xQueueGenericSend+0x1f0>)
 8106dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106dc2:	601a      	str	r2, [r3, #0]
 8106dc4:	f3bf 8f4f 	dsb	sy
 8106dc8:	f3bf 8f6f 	isb	sy
 8106dcc:	e00a      	b.n	8106de4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8106dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106dd0:	2b00      	cmp	r3, #0
 8106dd2:	d007      	beq.n	8106de4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8106dd4:	4b39      	ldr	r3, [pc, #228]	; (8106ebc <xQueueGenericSend+0x1f0>)
 8106dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106dda:	601a      	str	r2, [r3, #0]
 8106ddc:	f3bf 8f4f 	dsb	sy
 8106de0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8106de4:	f7ff fd88 	bl	81068f8 <vPortExitCritical>
				return pdPASS;
 8106de8:	2301      	movs	r3, #1
 8106dea:	e063      	b.n	8106eb4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	2b00      	cmp	r3, #0
 8106df0:	d103      	bne.n	8106dfa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8106df2:	f7ff fd81 	bl	81068f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8106df6:	2300      	movs	r3, #0
 8106df8:	e05c      	b.n	8106eb4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8106dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106dfc:	2b00      	cmp	r3, #0
 8106dfe:	d106      	bne.n	8106e0e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8106e00:	f107 0314 	add.w	r3, r7, #20
 8106e04:	4618      	mov	r0, r3
 8106e06:	f000 ffeb 	bl	8107de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8106e0a:	2301      	movs	r3, #1
 8106e0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8106e0e:	f7ff fd73 	bl	81068f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8106e12:	f000 fd67 	bl	81078e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8106e16:	f7ff fd41 	bl	810689c <vPortEnterCritical>
 8106e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106e20:	b25b      	sxtb	r3, r3
 8106e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e26:	d103      	bne.n	8106e30 <xQueueGenericSend+0x164>
 8106e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e2a:	2200      	movs	r2, #0
 8106e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106e36:	b25b      	sxtb	r3, r3
 8106e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106e3c:	d103      	bne.n	8106e46 <xQueueGenericSend+0x17a>
 8106e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e40:	2200      	movs	r2, #0
 8106e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106e46:	f7ff fd57 	bl	81068f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106e4a:	1d3a      	adds	r2, r7, #4
 8106e4c:	f107 0314 	add.w	r3, r7, #20
 8106e50:	4611      	mov	r1, r2
 8106e52:	4618      	mov	r0, r3
 8106e54:	f000 ffda 	bl	8107e0c <xTaskCheckForTimeOut>
 8106e58:	4603      	mov	r3, r0
 8106e5a:	2b00      	cmp	r3, #0
 8106e5c:	d124      	bne.n	8106ea8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8106e5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106e60:	f000 fa96 	bl	8107390 <prvIsQueueFull>
 8106e64:	4603      	mov	r3, r0
 8106e66:	2b00      	cmp	r3, #0
 8106e68:	d018      	beq.n	8106e9c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8106e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106e6c:	3310      	adds	r3, #16
 8106e6e:	687a      	ldr	r2, [r7, #4]
 8106e70:	4611      	mov	r1, r2
 8106e72:	4618      	mov	r0, r3
 8106e74:	f000 ff04 	bl	8107c80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8106e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106e7a:	f000 fa21 	bl	81072c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8106e7e:	f000 fd3f 	bl	8107900 <xTaskResumeAll>
 8106e82:	4603      	mov	r3, r0
 8106e84:	2b00      	cmp	r3, #0
 8106e86:	f47f af7c 	bne.w	8106d82 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8106e8a:	4b0c      	ldr	r3, [pc, #48]	; (8106ebc <xQueueGenericSend+0x1f0>)
 8106e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106e90:	601a      	str	r2, [r3, #0]
 8106e92:	f3bf 8f4f 	dsb	sy
 8106e96:	f3bf 8f6f 	isb	sy
 8106e9a:	e772      	b.n	8106d82 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8106e9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106e9e:	f000 fa0f 	bl	81072c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8106ea2:	f000 fd2d 	bl	8107900 <xTaskResumeAll>
 8106ea6:	e76c      	b.n	8106d82 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8106ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106eaa:	f000 fa09 	bl	81072c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106eae:	f000 fd27 	bl	8107900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8106eb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8106eb4:	4618      	mov	r0, r3
 8106eb6:	3738      	adds	r7, #56	; 0x38
 8106eb8:	46bd      	mov	sp, r7
 8106eba:	bd80      	pop	{r7, pc}
 8106ebc:	e000ed04 	.word	0xe000ed04

08106ec0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8106ec0:	b580      	push	{r7, lr}
 8106ec2:	b08e      	sub	sp, #56	; 0x38
 8106ec4:	af00      	add	r7, sp, #0
 8106ec6:	60f8      	str	r0, [r7, #12]
 8106ec8:	60b9      	str	r1, [r7, #8]
 8106eca:	607a      	str	r2, [r7, #4]
 8106ecc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8106ece:	68fb      	ldr	r3, [r7, #12]
 8106ed0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8106ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ed4:	2b00      	cmp	r3, #0
 8106ed6:	d109      	bne.n	8106eec <xQueueGenericSendFromISR+0x2c>
 8106ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106edc:	f383 8811 	msr	BASEPRI, r3
 8106ee0:	f3bf 8f6f 	isb	sy
 8106ee4:	f3bf 8f4f 	dsb	sy
 8106ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8106eea:	e7fe      	b.n	8106eea <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106eec:	68bb      	ldr	r3, [r7, #8]
 8106eee:	2b00      	cmp	r3, #0
 8106ef0:	d103      	bne.n	8106efa <xQueueGenericSendFromISR+0x3a>
 8106ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ef6:	2b00      	cmp	r3, #0
 8106ef8:	d101      	bne.n	8106efe <xQueueGenericSendFromISR+0x3e>
 8106efa:	2301      	movs	r3, #1
 8106efc:	e000      	b.n	8106f00 <xQueueGenericSendFromISR+0x40>
 8106efe:	2300      	movs	r3, #0
 8106f00:	2b00      	cmp	r3, #0
 8106f02:	d109      	bne.n	8106f18 <xQueueGenericSendFromISR+0x58>
 8106f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f08:	f383 8811 	msr	BASEPRI, r3
 8106f0c:	f3bf 8f6f 	isb	sy
 8106f10:	f3bf 8f4f 	dsb	sy
 8106f14:	623b      	str	r3, [r7, #32]
 8106f16:	e7fe      	b.n	8106f16 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106f18:	683b      	ldr	r3, [r7, #0]
 8106f1a:	2b02      	cmp	r3, #2
 8106f1c:	d103      	bne.n	8106f26 <xQueueGenericSendFromISR+0x66>
 8106f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f22:	2b01      	cmp	r3, #1
 8106f24:	d101      	bne.n	8106f2a <xQueueGenericSendFromISR+0x6a>
 8106f26:	2301      	movs	r3, #1
 8106f28:	e000      	b.n	8106f2c <xQueueGenericSendFromISR+0x6c>
 8106f2a:	2300      	movs	r3, #0
 8106f2c:	2b00      	cmp	r3, #0
 8106f2e:	d109      	bne.n	8106f44 <xQueueGenericSendFromISR+0x84>
 8106f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f34:	f383 8811 	msr	BASEPRI, r3
 8106f38:	f3bf 8f6f 	isb	sy
 8106f3c:	f3bf 8f4f 	dsb	sy
 8106f40:	61fb      	str	r3, [r7, #28]
 8106f42:	e7fe      	b.n	8106f42 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106f44:	f7ff fd86 	bl	8106a54 <vPortValidateInterruptPriority>
	__asm volatile
 8106f48:	f3ef 8211 	mrs	r2, BASEPRI
 8106f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f50:	f383 8811 	msr	BASEPRI, r3
 8106f54:	f3bf 8f6f 	isb	sy
 8106f58:	f3bf 8f4f 	dsb	sy
 8106f5c:	61ba      	str	r2, [r7, #24]
 8106f5e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8106f60:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106f62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f6c:	429a      	cmp	r2, r3
 8106f6e:	d302      	bcc.n	8106f76 <xQueueGenericSendFromISR+0xb6>
 8106f70:	683b      	ldr	r3, [r7, #0]
 8106f72:	2b02      	cmp	r3, #2
 8106f74:	d12c      	bne.n	8106fd0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8106f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106f80:	683a      	ldr	r2, [r7, #0]
 8106f82:	68b9      	ldr	r1, [r7, #8]
 8106f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106f86:	f000 f90b 	bl	81071a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8106f8a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8106f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106f92:	d112      	bne.n	8106fba <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106f98:	2b00      	cmp	r3, #0
 8106f9a:	d016      	beq.n	8106fca <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f9e:	3324      	adds	r3, #36	; 0x24
 8106fa0:	4618      	mov	r0, r3
 8106fa2:	f000 febb 	bl	8107d1c <xTaskRemoveFromEventList>
 8106fa6:	4603      	mov	r3, r0
 8106fa8:	2b00      	cmp	r3, #0
 8106faa:	d00e      	beq.n	8106fca <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	2b00      	cmp	r3, #0
 8106fb0:	d00b      	beq.n	8106fca <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	2201      	movs	r2, #1
 8106fb6:	601a      	str	r2, [r3, #0]
 8106fb8:	e007      	b.n	8106fca <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8106fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8106fbe:	3301      	adds	r3, #1
 8106fc0:	b2db      	uxtb	r3, r3
 8106fc2:	b25a      	sxtb	r2, r3
 8106fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8106fca:	2301      	movs	r3, #1
 8106fcc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8106fce:	e001      	b.n	8106fd4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8106fd0:	2300      	movs	r3, #0
 8106fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8106fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106fd6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8106fd8:	693b      	ldr	r3, [r7, #16]
 8106fda:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8106fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8106fe0:	4618      	mov	r0, r3
 8106fe2:	3738      	adds	r7, #56	; 0x38
 8106fe4:	46bd      	mov	sp, r7
 8106fe6:	bd80      	pop	{r7, pc}

08106fe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8106fe8:	b580      	push	{r7, lr}
 8106fea:	b08c      	sub	sp, #48	; 0x30
 8106fec:	af00      	add	r7, sp, #0
 8106fee:	60f8      	str	r0, [r7, #12]
 8106ff0:	60b9      	str	r1, [r7, #8]
 8106ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8106ff4:	2300      	movs	r3, #0
 8106ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106ff8:	68fb      	ldr	r3, [r7, #12]
 8106ffa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8106ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ffe:	2b00      	cmp	r3, #0
 8107000:	d109      	bne.n	8107016 <xQueueReceive+0x2e>
	__asm volatile
 8107002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107006:	f383 8811 	msr	BASEPRI, r3
 810700a:	f3bf 8f6f 	isb	sy
 810700e:	f3bf 8f4f 	dsb	sy
 8107012:	623b      	str	r3, [r7, #32]
 8107014:	e7fe      	b.n	8107014 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8107016:	68bb      	ldr	r3, [r7, #8]
 8107018:	2b00      	cmp	r3, #0
 810701a:	d103      	bne.n	8107024 <xQueueReceive+0x3c>
 810701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107020:	2b00      	cmp	r3, #0
 8107022:	d101      	bne.n	8107028 <xQueueReceive+0x40>
 8107024:	2301      	movs	r3, #1
 8107026:	e000      	b.n	810702a <xQueueReceive+0x42>
 8107028:	2300      	movs	r3, #0
 810702a:	2b00      	cmp	r3, #0
 810702c:	d109      	bne.n	8107042 <xQueueReceive+0x5a>
 810702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107032:	f383 8811 	msr	BASEPRI, r3
 8107036:	f3bf 8f6f 	isb	sy
 810703a:	f3bf 8f4f 	dsb	sy
 810703e:	61fb      	str	r3, [r7, #28]
 8107040:	e7fe      	b.n	8107040 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8107042:	f001 f821 	bl	8108088 <xTaskGetSchedulerState>
 8107046:	4603      	mov	r3, r0
 8107048:	2b00      	cmp	r3, #0
 810704a:	d102      	bne.n	8107052 <xQueueReceive+0x6a>
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	2b00      	cmp	r3, #0
 8107050:	d101      	bne.n	8107056 <xQueueReceive+0x6e>
 8107052:	2301      	movs	r3, #1
 8107054:	e000      	b.n	8107058 <xQueueReceive+0x70>
 8107056:	2300      	movs	r3, #0
 8107058:	2b00      	cmp	r3, #0
 810705a:	d109      	bne.n	8107070 <xQueueReceive+0x88>
 810705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107060:	f383 8811 	msr	BASEPRI, r3
 8107064:	f3bf 8f6f 	isb	sy
 8107068:	f3bf 8f4f 	dsb	sy
 810706c:	61bb      	str	r3, [r7, #24]
 810706e:	e7fe      	b.n	810706e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8107070:	f7ff fc14 	bl	810689c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8107074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107078:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810707c:	2b00      	cmp	r3, #0
 810707e:	d01f      	beq.n	81070c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8107080:	68b9      	ldr	r1, [r7, #8]
 8107082:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107084:	f000 f8f6 	bl	8107274 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8107088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810708a:	1e5a      	subs	r2, r3, #1
 810708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810708e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107092:	691b      	ldr	r3, [r3, #16]
 8107094:	2b00      	cmp	r3, #0
 8107096:	d00f      	beq.n	81070b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8107098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810709a:	3310      	adds	r3, #16
 810709c:	4618      	mov	r0, r3
 810709e:	f000 fe3d 	bl	8107d1c <xTaskRemoveFromEventList>
 81070a2:	4603      	mov	r3, r0
 81070a4:	2b00      	cmp	r3, #0
 81070a6:	d007      	beq.n	81070b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81070a8:	4b3c      	ldr	r3, [pc, #240]	; (810719c <xQueueReceive+0x1b4>)
 81070aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81070ae:	601a      	str	r2, [r3, #0]
 81070b0:	f3bf 8f4f 	dsb	sy
 81070b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81070b8:	f7ff fc1e 	bl	81068f8 <vPortExitCritical>
				return pdPASS;
 81070bc:	2301      	movs	r3, #1
 81070be:	e069      	b.n	8107194 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	2b00      	cmp	r3, #0
 81070c4:	d103      	bne.n	81070ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81070c6:	f7ff fc17 	bl	81068f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81070ca:	2300      	movs	r3, #0
 81070cc:	e062      	b.n	8107194 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 81070ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81070d0:	2b00      	cmp	r3, #0
 81070d2:	d106      	bne.n	81070e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81070d4:	f107 0310 	add.w	r3, r7, #16
 81070d8:	4618      	mov	r0, r3
 81070da:	f000 fe81 	bl	8107de0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81070de:	2301      	movs	r3, #1
 81070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81070e2:	f7ff fc09 	bl	81068f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81070e6:	f000 fbfd 	bl	81078e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81070ea:	f7ff fbd7 	bl	810689c <vPortEnterCritical>
 81070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81070f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81070f4:	b25b      	sxtb	r3, r3
 81070f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81070fa:	d103      	bne.n	8107104 <xQueueReceive+0x11c>
 81070fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81070fe:	2200      	movs	r2, #0
 8107100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810710a:	b25b      	sxtb	r3, r3
 810710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107110:	d103      	bne.n	810711a <xQueueReceive+0x132>
 8107112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107114:	2200      	movs	r2, #0
 8107116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810711a:	f7ff fbed 	bl	81068f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810711e:	1d3a      	adds	r2, r7, #4
 8107120:	f107 0310 	add.w	r3, r7, #16
 8107124:	4611      	mov	r1, r2
 8107126:	4618      	mov	r0, r3
 8107128:	f000 fe70 	bl	8107e0c <xTaskCheckForTimeOut>
 810712c:	4603      	mov	r3, r0
 810712e:	2b00      	cmp	r3, #0
 8107130:	d123      	bne.n	810717a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8107132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107134:	f000 f916 	bl	8107364 <prvIsQueueEmpty>
 8107138:	4603      	mov	r3, r0
 810713a:	2b00      	cmp	r3, #0
 810713c:	d017      	beq.n	810716e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107140:	3324      	adds	r3, #36	; 0x24
 8107142:	687a      	ldr	r2, [r7, #4]
 8107144:	4611      	mov	r1, r2
 8107146:	4618      	mov	r0, r3
 8107148:	f000 fd9a 	bl	8107c80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810714c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810714e:	f000 f8b7 	bl	81072c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8107152:	f000 fbd5 	bl	8107900 <xTaskResumeAll>
 8107156:	4603      	mov	r3, r0
 8107158:	2b00      	cmp	r3, #0
 810715a:	d189      	bne.n	8107070 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 810715c:	4b0f      	ldr	r3, [pc, #60]	; (810719c <xQueueReceive+0x1b4>)
 810715e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107162:	601a      	str	r2, [r3, #0]
 8107164:	f3bf 8f4f 	dsb	sy
 8107168:	f3bf 8f6f 	isb	sy
 810716c:	e780      	b.n	8107070 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810716e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107170:	f000 f8a6 	bl	81072c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8107174:	f000 fbc4 	bl	8107900 <xTaskResumeAll>
 8107178:	e77a      	b.n	8107070 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810717a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810717c:	f000 f8a0 	bl	81072c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8107180:	f000 fbbe 	bl	8107900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8107184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107186:	f000 f8ed 	bl	8107364 <prvIsQueueEmpty>
 810718a:	4603      	mov	r3, r0
 810718c:	2b00      	cmp	r3, #0
 810718e:	f43f af6f 	beq.w	8107070 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8107192:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8107194:	4618      	mov	r0, r3
 8107196:	3730      	adds	r7, #48	; 0x30
 8107198:	46bd      	mov	sp, r7
 810719a:	bd80      	pop	{r7, pc}
 810719c:	e000ed04 	.word	0xe000ed04

081071a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81071a0:	b580      	push	{r7, lr}
 81071a2:	b086      	sub	sp, #24
 81071a4:	af00      	add	r7, sp, #0
 81071a6:	60f8      	str	r0, [r7, #12]
 81071a8:	60b9      	str	r1, [r7, #8]
 81071aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81071ac:	2300      	movs	r3, #0
 81071ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81071b0:	68fb      	ldr	r3, [r7, #12]
 81071b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81071b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81071b6:	68fb      	ldr	r3, [r7, #12]
 81071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81071ba:	2b00      	cmp	r3, #0
 81071bc:	d10d      	bne.n	81071da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81071be:	68fb      	ldr	r3, [r7, #12]
 81071c0:	681b      	ldr	r3, [r3, #0]
 81071c2:	2b00      	cmp	r3, #0
 81071c4:	d14d      	bne.n	8107262 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81071c6:	68fb      	ldr	r3, [r7, #12]
 81071c8:	689b      	ldr	r3, [r3, #8]
 81071ca:	4618      	mov	r0, r3
 81071cc:	f000 ff7a 	bl	81080c4 <xTaskPriorityDisinherit>
 81071d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81071d2:	68fb      	ldr	r3, [r7, #12]
 81071d4:	2200      	movs	r2, #0
 81071d6:	609a      	str	r2, [r3, #8]
 81071d8:	e043      	b.n	8107262 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81071da:	687b      	ldr	r3, [r7, #4]
 81071dc:	2b00      	cmp	r3, #0
 81071de:	d119      	bne.n	8107214 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81071e0:	68fb      	ldr	r3, [r7, #12]
 81071e2:	6858      	ldr	r0, [r3, #4]
 81071e4:	68fb      	ldr	r3, [r7, #12]
 81071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81071e8:	461a      	mov	r2, r3
 81071ea:	68b9      	ldr	r1, [r7, #8]
 81071ec:	f001 fb9a 	bl	8108924 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 81071f0:	68fb      	ldr	r3, [r7, #12]
 81071f2:	685a      	ldr	r2, [r3, #4]
 81071f4:	68fb      	ldr	r3, [r7, #12]
 81071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81071f8:	441a      	add	r2, r3
 81071fa:	68fb      	ldr	r3, [r7, #12]
 81071fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81071fe:	68fb      	ldr	r3, [r7, #12]
 8107200:	685a      	ldr	r2, [r3, #4]
 8107202:	68fb      	ldr	r3, [r7, #12]
 8107204:	689b      	ldr	r3, [r3, #8]
 8107206:	429a      	cmp	r2, r3
 8107208:	d32b      	bcc.n	8107262 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810720a:	68fb      	ldr	r3, [r7, #12]
 810720c:	681a      	ldr	r2, [r3, #0]
 810720e:	68fb      	ldr	r3, [r7, #12]
 8107210:	605a      	str	r2, [r3, #4]
 8107212:	e026      	b.n	8107262 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8107214:	68fb      	ldr	r3, [r7, #12]
 8107216:	68d8      	ldr	r0, [r3, #12]
 8107218:	68fb      	ldr	r3, [r7, #12]
 810721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810721c:	461a      	mov	r2, r3
 810721e:	68b9      	ldr	r1, [r7, #8]
 8107220:	f001 fb80 	bl	8108924 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	68da      	ldr	r2, [r3, #12]
 8107228:	68fb      	ldr	r3, [r7, #12]
 810722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810722c:	425b      	negs	r3, r3
 810722e:	441a      	add	r2, r3
 8107230:	68fb      	ldr	r3, [r7, #12]
 8107232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8107234:	68fb      	ldr	r3, [r7, #12]
 8107236:	68da      	ldr	r2, [r3, #12]
 8107238:	68fb      	ldr	r3, [r7, #12]
 810723a:	681b      	ldr	r3, [r3, #0]
 810723c:	429a      	cmp	r2, r3
 810723e:	d207      	bcs.n	8107250 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8107240:	68fb      	ldr	r3, [r7, #12]
 8107242:	689a      	ldr	r2, [r3, #8]
 8107244:	68fb      	ldr	r3, [r7, #12]
 8107246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107248:	425b      	negs	r3, r3
 810724a:	441a      	add	r2, r3
 810724c:	68fb      	ldr	r3, [r7, #12]
 810724e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8107250:	687b      	ldr	r3, [r7, #4]
 8107252:	2b02      	cmp	r3, #2
 8107254:	d105      	bne.n	8107262 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8107256:	693b      	ldr	r3, [r7, #16]
 8107258:	2b00      	cmp	r3, #0
 810725a:	d002      	beq.n	8107262 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810725c:	693b      	ldr	r3, [r7, #16]
 810725e:	3b01      	subs	r3, #1
 8107260:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8107262:	693b      	ldr	r3, [r7, #16]
 8107264:	1c5a      	adds	r2, r3, #1
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810726a:	697b      	ldr	r3, [r7, #20]
}
 810726c:	4618      	mov	r0, r3
 810726e:	3718      	adds	r7, #24
 8107270:	46bd      	mov	sp, r7
 8107272:	bd80      	pop	{r7, pc}

08107274 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8107274:	b580      	push	{r7, lr}
 8107276:	b082      	sub	sp, #8
 8107278:	af00      	add	r7, sp, #0
 810727a:	6078      	str	r0, [r7, #4]
 810727c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810727e:	687b      	ldr	r3, [r7, #4]
 8107280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107282:	2b00      	cmp	r3, #0
 8107284:	d018      	beq.n	81072b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8107286:	687b      	ldr	r3, [r7, #4]
 8107288:	68da      	ldr	r2, [r3, #12]
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810728e:	441a      	add	r2, r3
 8107290:	687b      	ldr	r3, [r7, #4]
 8107292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8107294:	687b      	ldr	r3, [r7, #4]
 8107296:	68da      	ldr	r2, [r3, #12]
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	689b      	ldr	r3, [r3, #8]
 810729c:	429a      	cmp	r2, r3
 810729e:	d303      	bcc.n	81072a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	681a      	ldr	r2, [r3, #0]
 81072a4:	687b      	ldr	r3, [r7, #4]
 81072a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81072a8:	687b      	ldr	r3, [r7, #4]
 81072aa:	68d9      	ldr	r1, [r3, #12]
 81072ac:	687b      	ldr	r3, [r7, #4]
 81072ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81072b0:	461a      	mov	r2, r3
 81072b2:	6838      	ldr	r0, [r7, #0]
 81072b4:	f001 fb36 	bl	8108924 <memcpy>
	}
}
 81072b8:	bf00      	nop
 81072ba:	3708      	adds	r7, #8
 81072bc:	46bd      	mov	sp, r7
 81072be:	bd80      	pop	{r7, pc}

081072c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81072c0:	b580      	push	{r7, lr}
 81072c2:	b084      	sub	sp, #16
 81072c4:	af00      	add	r7, sp, #0
 81072c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81072c8:	f7ff fae8 	bl	810689c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81072cc:	687b      	ldr	r3, [r7, #4]
 81072ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81072d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81072d4:	e011      	b.n	81072fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81072da:	2b00      	cmp	r3, #0
 81072dc:	d012      	beq.n	8107304 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	3324      	adds	r3, #36	; 0x24
 81072e2:	4618      	mov	r0, r3
 81072e4:	f000 fd1a 	bl	8107d1c <xTaskRemoveFromEventList>
 81072e8:	4603      	mov	r3, r0
 81072ea:	2b00      	cmp	r3, #0
 81072ec:	d001      	beq.n	81072f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81072ee:	f000 fded 	bl	8107ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 81072f2:	7bfb      	ldrb	r3, [r7, #15]
 81072f4:	3b01      	subs	r3, #1
 81072f6:	b2db      	uxtb	r3, r3
 81072f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81072fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 81072fe:	2b00      	cmp	r3, #0
 8107300:	dce9      	bgt.n	81072d6 <prvUnlockQueue+0x16>
 8107302:	e000      	b.n	8107306 <prvUnlockQueue+0x46>
					break;
 8107304:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	22ff      	movs	r2, #255	; 0xff
 810730a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810730e:	f7ff faf3 	bl	81068f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8107312:	f7ff fac3 	bl	810689c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8107316:	687b      	ldr	r3, [r7, #4]
 8107318:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810731c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810731e:	e011      	b.n	8107344 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	691b      	ldr	r3, [r3, #16]
 8107324:	2b00      	cmp	r3, #0
 8107326:	d012      	beq.n	810734e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	3310      	adds	r3, #16
 810732c:	4618      	mov	r0, r3
 810732e:	f000 fcf5 	bl	8107d1c <xTaskRemoveFromEventList>
 8107332:	4603      	mov	r3, r0
 8107334:	2b00      	cmp	r3, #0
 8107336:	d001      	beq.n	810733c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8107338:	f000 fdc8 	bl	8107ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810733c:	7bbb      	ldrb	r3, [r7, #14]
 810733e:	3b01      	subs	r3, #1
 8107340:	b2db      	uxtb	r3, r3
 8107342:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8107344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8107348:	2b00      	cmp	r3, #0
 810734a:	dce9      	bgt.n	8107320 <prvUnlockQueue+0x60>
 810734c:	e000      	b.n	8107350 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810734e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	22ff      	movs	r2, #255	; 0xff
 8107354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8107358:	f7ff face 	bl	81068f8 <vPortExitCritical>
}
 810735c:	bf00      	nop
 810735e:	3710      	adds	r7, #16
 8107360:	46bd      	mov	sp, r7
 8107362:	bd80      	pop	{r7, pc}

08107364 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8107364:	b580      	push	{r7, lr}
 8107366:	b084      	sub	sp, #16
 8107368:	af00      	add	r7, sp, #0
 810736a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810736c:	f7ff fa96 	bl	810689c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107374:	2b00      	cmp	r3, #0
 8107376:	d102      	bne.n	810737e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8107378:	2301      	movs	r3, #1
 810737a:	60fb      	str	r3, [r7, #12]
 810737c:	e001      	b.n	8107382 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810737e:	2300      	movs	r3, #0
 8107380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8107382:	f7ff fab9 	bl	81068f8 <vPortExitCritical>

	return xReturn;
 8107386:	68fb      	ldr	r3, [r7, #12]
}
 8107388:	4618      	mov	r0, r3
 810738a:	3710      	adds	r7, #16
 810738c:	46bd      	mov	sp, r7
 810738e:	bd80      	pop	{r7, pc}

08107390 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8107390:	b580      	push	{r7, lr}
 8107392:	b084      	sub	sp, #16
 8107394:	af00      	add	r7, sp, #0
 8107396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8107398:	f7ff fa80 	bl	810689c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810739c:	687b      	ldr	r3, [r7, #4]
 810739e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81073a4:	429a      	cmp	r2, r3
 81073a6:	d102      	bne.n	81073ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81073a8:	2301      	movs	r3, #1
 81073aa:	60fb      	str	r3, [r7, #12]
 81073ac:	e001      	b.n	81073b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81073ae:	2300      	movs	r3, #0
 81073b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81073b2:	f7ff faa1 	bl	81068f8 <vPortExitCritical>

	return xReturn;
 81073b6:	68fb      	ldr	r3, [r7, #12]
}
 81073b8:	4618      	mov	r0, r3
 81073ba:	3710      	adds	r7, #16
 81073bc:	46bd      	mov	sp, r7
 81073be:	bd80      	pop	{r7, pc}

081073c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 81073c0:	b480      	push	{r7}
 81073c2:	b085      	sub	sp, #20
 81073c4:	af00      	add	r7, sp, #0
 81073c6:	6078      	str	r0, [r7, #4]
 81073c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81073ca:	2300      	movs	r3, #0
 81073cc:	60fb      	str	r3, [r7, #12]
 81073ce:	e014      	b.n	81073fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81073d0:	4a0e      	ldr	r2, [pc, #56]	; (810740c <vQueueAddToRegistry+0x4c>)
 81073d2:	68fb      	ldr	r3, [r7, #12]
 81073d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81073d8:	2b00      	cmp	r3, #0
 81073da:	d10b      	bne.n	81073f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81073dc:	490b      	ldr	r1, [pc, #44]	; (810740c <vQueueAddToRegistry+0x4c>)
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	683a      	ldr	r2, [r7, #0]
 81073e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81073e6:	4a09      	ldr	r2, [pc, #36]	; (810740c <vQueueAddToRegistry+0x4c>)
 81073e8:	68fb      	ldr	r3, [r7, #12]
 81073ea:	00db      	lsls	r3, r3, #3
 81073ec:	4413      	add	r3, r2
 81073ee:	687a      	ldr	r2, [r7, #4]
 81073f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 81073f2:	e005      	b.n	8107400 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81073f4:	68fb      	ldr	r3, [r7, #12]
 81073f6:	3301      	adds	r3, #1
 81073f8:	60fb      	str	r3, [r7, #12]
 81073fa:	68fb      	ldr	r3, [r7, #12]
 81073fc:	2b07      	cmp	r3, #7
 81073fe:	d9e7      	bls.n	81073d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8107400:	bf00      	nop
 8107402:	3714      	adds	r7, #20
 8107404:	46bd      	mov	sp, r7
 8107406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810740a:	4770      	bx	lr
 810740c:	10004ce8 	.word	0x10004ce8

08107410 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107410:	b580      	push	{r7, lr}
 8107412:	b086      	sub	sp, #24
 8107414:	af00      	add	r7, sp, #0
 8107416:	60f8      	str	r0, [r7, #12]
 8107418:	60b9      	str	r1, [r7, #8]
 810741a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810741c:	68fb      	ldr	r3, [r7, #12]
 810741e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8107420:	f7ff fa3c 	bl	810689c <vPortEnterCritical>
 8107424:	697b      	ldr	r3, [r7, #20]
 8107426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810742a:	b25b      	sxtb	r3, r3
 810742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107430:	d103      	bne.n	810743a <vQueueWaitForMessageRestricted+0x2a>
 8107432:	697b      	ldr	r3, [r7, #20]
 8107434:	2200      	movs	r2, #0
 8107436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810743a:	697b      	ldr	r3, [r7, #20]
 810743c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107440:	b25b      	sxtb	r3, r3
 8107442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107446:	d103      	bne.n	8107450 <vQueueWaitForMessageRestricted+0x40>
 8107448:	697b      	ldr	r3, [r7, #20]
 810744a:	2200      	movs	r2, #0
 810744c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107450:	f7ff fa52 	bl	81068f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8107454:	697b      	ldr	r3, [r7, #20]
 8107456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107458:	2b00      	cmp	r3, #0
 810745a:	d106      	bne.n	810746a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810745c:	697b      	ldr	r3, [r7, #20]
 810745e:	3324      	adds	r3, #36	; 0x24
 8107460:	687a      	ldr	r2, [r7, #4]
 8107462:	68b9      	ldr	r1, [r7, #8]
 8107464:	4618      	mov	r0, r3
 8107466:	f000 fc2f 	bl	8107cc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810746a:	6978      	ldr	r0, [r7, #20]
 810746c:	f7ff ff28 	bl	81072c0 <prvUnlockQueue>
	}
 8107470:	bf00      	nop
 8107472:	3718      	adds	r7, #24
 8107474:	46bd      	mov	sp, r7
 8107476:	bd80      	pop	{r7, pc}

08107478 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8107478:	b580      	push	{r7, lr}
 810747a:	b08e      	sub	sp, #56	; 0x38
 810747c:	af04      	add	r7, sp, #16
 810747e:	60f8      	str	r0, [r7, #12]
 8107480:	60b9      	str	r1, [r7, #8]
 8107482:	607a      	str	r2, [r7, #4]
 8107484:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8107486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107488:	2b00      	cmp	r3, #0
 810748a:	d109      	bne.n	81074a0 <xTaskCreateStatic+0x28>
 810748c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107490:	f383 8811 	msr	BASEPRI, r3
 8107494:	f3bf 8f6f 	isb	sy
 8107498:	f3bf 8f4f 	dsb	sy
 810749c:	623b      	str	r3, [r7, #32]
 810749e:	e7fe      	b.n	810749e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 81074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81074a2:	2b00      	cmp	r3, #0
 81074a4:	d109      	bne.n	81074ba <xTaskCreateStatic+0x42>
 81074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81074aa:	f383 8811 	msr	BASEPRI, r3
 81074ae:	f3bf 8f6f 	isb	sy
 81074b2:	f3bf 8f4f 	dsb	sy
 81074b6:	61fb      	str	r3, [r7, #28]
 81074b8:	e7fe      	b.n	81074b8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81074ba:	235c      	movs	r3, #92	; 0x5c
 81074bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81074be:	693b      	ldr	r3, [r7, #16]
 81074c0:	2b5c      	cmp	r3, #92	; 0x5c
 81074c2:	d009      	beq.n	81074d8 <xTaskCreateStatic+0x60>
 81074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81074c8:	f383 8811 	msr	BASEPRI, r3
 81074cc:	f3bf 8f6f 	isb	sy
 81074d0:	f3bf 8f4f 	dsb	sy
 81074d4:	61bb      	str	r3, [r7, #24]
 81074d6:	e7fe      	b.n	81074d6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81074d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81074dc:	2b00      	cmp	r3, #0
 81074de:	d01e      	beq.n	810751e <xTaskCreateStatic+0xa6>
 81074e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81074e2:	2b00      	cmp	r3, #0
 81074e4:	d01b      	beq.n	810751e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81074e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81074ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81074ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 81074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81074f2:	2202      	movs	r2, #2
 81074f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 81074f8:	2300      	movs	r3, #0
 81074fa:	9303      	str	r3, [sp, #12]
 81074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81074fe:	9302      	str	r3, [sp, #8]
 8107500:	f107 0314 	add.w	r3, r7, #20
 8107504:	9301      	str	r3, [sp, #4]
 8107506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107508:	9300      	str	r3, [sp, #0]
 810750a:	683b      	ldr	r3, [r7, #0]
 810750c:	687a      	ldr	r2, [r7, #4]
 810750e:	68b9      	ldr	r1, [r7, #8]
 8107510:	68f8      	ldr	r0, [r7, #12]
 8107512:	f000 f850 	bl	81075b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8107516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8107518:	f000 f8dc 	bl	81076d4 <prvAddNewTaskToReadyList>
 810751c:	e001      	b.n	8107522 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810751e:	2300      	movs	r3, #0
 8107520:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8107522:	697b      	ldr	r3, [r7, #20]
	}
 8107524:	4618      	mov	r0, r3
 8107526:	3728      	adds	r7, #40	; 0x28
 8107528:	46bd      	mov	sp, r7
 810752a:	bd80      	pop	{r7, pc}

0810752c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810752c:	b580      	push	{r7, lr}
 810752e:	b08c      	sub	sp, #48	; 0x30
 8107530:	af04      	add	r7, sp, #16
 8107532:	60f8      	str	r0, [r7, #12]
 8107534:	60b9      	str	r1, [r7, #8]
 8107536:	603b      	str	r3, [r7, #0]
 8107538:	4613      	mov	r3, r2
 810753a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810753c:	88fb      	ldrh	r3, [r7, #6]
 810753e:	009b      	lsls	r3, r3, #2
 8107540:	4618      	mov	r0, r3
 8107542:	f7fe fdfb 	bl	810613c <pvPortMalloc>
 8107546:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8107548:	697b      	ldr	r3, [r7, #20]
 810754a:	2b00      	cmp	r3, #0
 810754c:	d00e      	beq.n	810756c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810754e:	205c      	movs	r0, #92	; 0x5c
 8107550:	f7fe fdf4 	bl	810613c <pvPortMalloc>
 8107554:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8107556:	69fb      	ldr	r3, [r7, #28]
 8107558:	2b00      	cmp	r3, #0
 810755a:	d003      	beq.n	8107564 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810755c:	69fb      	ldr	r3, [r7, #28]
 810755e:	697a      	ldr	r2, [r7, #20]
 8107560:	631a      	str	r2, [r3, #48]	; 0x30
 8107562:	e005      	b.n	8107570 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8107564:	6978      	ldr	r0, [r7, #20]
 8107566:	f7fe feab 	bl	81062c0 <vPortFree>
 810756a:	e001      	b.n	8107570 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810756c:	2300      	movs	r3, #0
 810756e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8107570:	69fb      	ldr	r3, [r7, #28]
 8107572:	2b00      	cmp	r3, #0
 8107574:	d017      	beq.n	81075a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8107576:	69fb      	ldr	r3, [r7, #28]
 8107578:	2200      	movs	r2, #0
 810757a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810757e:	88fa      	ldrh	r2, [r7, #6]
 8107580:	2300      	movs	r3, #0
 8107582:	9303      	str	r3, [sp, #12]
 8107584:	69fb      	ldr	r3, [r7, #28]
 8107586:	9302      	str	r3, [sp, #8]
 8107588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810758a:	9301      	str	r3, [sp, #4]
 810758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810758e:	9300      	str	r3, [sp, #0]
 8107590:	683b      	ldr	r3, [r7, #0]
 8107592:	68b9      	ldr	r1, [r7, #8]
 8107594:	68f8      	ldr	r0, [r7, #12]
 8107596:	f000 f80e 	bl	81075b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810759a:	69f8      	ldr	r0, [r7, #28]
 810759c:	f000 f89a 	bl	81076d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81075a0:	2301      	movs	r3, #1
 81075a2:	61bb      	str	r3, [r7, #24]
 81075a4:	e002      	b.n	81075ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81075a6:	f04f 33ff 	mov.w	r3, #4294967295
 81075aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81075ac:	69bb      	ldr	r3, [r7, #24]
	}
 81075ae:	4618      	mov	r0, r3
 81075b0:	3720      	adds	r7, #32
 81075b2:	46bd      	mov	sp, r7
 81075b4:	bd80      	pop	{r7, pc}

081075b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81075b6:	b580      	push	{r7, lr}
 81075b8:	b088      	sub	sp, #32
 81075ba:	af00      	add	r7, sp, #0
 81075bc:	60f8      	str	r0, [r7, #12]
 81075be:	60b9      	str	r1, [r7, #8]
 81075c0:	607a      	str	r2, [r7, #4]
 81075c2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81075c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 81075c8:	687b      	ldr	r3, [r7, #4]
 81075ca:	009b      	lsls	r3, r3, #2
 81075cc:	461a      	mov	r2, r3
 81075ce:	21a5      	movs	r1, #165	; 0xa5
 81075d0:	f001 f9b3 	bl	810893a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81075d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81075d8:	687b      	ldr	r3, [r7, #4]
 81075da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81075de:	3b01      	subs	r3, #1
 81075e0:	009b      	lsls	r3, r3, #2
 81075e2:	4413      	add	r3, r2
 81075e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81075e6:	69bb      	ldr	r3, [r7, #24]
 81075e8:	f023 0307 	bic.w	r3, r3, #7
 81075ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81075ee:	69bb      	ldr	r3, [r7, #24]
 81075f0:	f003 0307 	and.w	r3, r3, #7
 81075f4:	2b00      	cmp	r3, #0
 81075f6:	d009      	beq.n	810760c <prvInitialiseNewTask+0x56>
 81075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81075fc:	f383 8811 	msr	BASEPRI, r3
 8107600:	f3bf 8f6f 	isb	sy
 8107604:	f3bf 8f4f 	dsb	sy
 8107608:	617b      	str	r3, [r7, #20]
 810760a:	e7fe      	b.n	810760a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810760c:	68bb      	ldr	r3, [r7, #8]
 810760e:	2b00      	cmp	r3, #0
 8107610:	d01f      	beq.n	8107652 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107612:	2300      	movs	r3, #0
 8107614:	61fb      	str	r3, [r7, #28]
 8107616:	e012      	b.n	810763e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8107618:	68ba      	ldr	r2, [r7, #8]
 810761a:	69fb      	ldr	r3, [r7, #28]
 810761c:	4413      	add	r3, r2
 810761e:	7819      	ldrb	r1, [r3, #0]
 8107620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107622:	69fb      	ldr	r3, [r7, #28]
 8107624:	4413      	add	r3, r2
 8107626:	3334      	adds	r3, #52	; 0x34
 8107628:	460a      	mov	r2, r1
 810762a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810762c:	68ba      	ldr	r2, [r7, #8]
 810762e:	69fb      	ldr	r3, [r7, #28]
 8107630:	4413      	add	r3, r2
 8107632:	781b      	ldrb	r3, [r3, #0]
 8107634:	2b00      	cmp	r3, #0
 8107636:	d006      	beq.n	8107646 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107638:	69fb      	ldr	r3, [r7, #28]
 810763a:	3301      	adds	r3, #1
 810763c:	61fb      	str	r3, [r7, #28]
 810763e:	69fb      	ldr	r3, [r7, #28]
 8107640:	2b0f      	cmp	r3, #15
 8107642:	d9e9      	bls.n	8107618 <prvInitialiseNewTask+0x62>
 8107644:	e000      	b.n	8107648 <prvInitialiseNewTask+0x92>
			{
				break;
 8107646:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8107648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810764a:	2200      	movs	r2, #0
 810764c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8107650:	e003      	b.n	810765a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8107652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107654:	2200      	movs	r2, #0
 8107656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810765c:	2b37      	cmp	r3, #55	; 0x37
 810765e:	d901      	bls.n	8107664 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8107660:	2337      	movs	r3, #55	; 0x37
 8107662:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8107664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107668:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810766c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810766e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8107670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107672:	2200      	movs	r2, #0
 8107674:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8107676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107678:	3304      	adds	r3, #4
 810767a:	4618      	mov	r0, r3
 810767c:	f7fe ff54 	bl	8106528 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8107680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107682:	3318      	adds	r3, #24
 8107684:	4618      	mov	r0, r3
 8107686:	f7fe ff4f 	bl	8106528 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810768c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810768e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107692:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8107696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107698:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810769c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810769e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076a2:	2200      	movs	r2, #0
 81076a4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076a8:	2200      	movs	r2, #0
 81076aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81076ae:	683a      	ldr	r2, [r7, #0]
 81076b0:	68f9      	ldr	r1, [r7, #12]
 81076b2:	69b8      	ldr	r0, [r7, #24]
 81076b4:	f7fe ffcc 	bl	8106650 <pxPortInitialiseStack>
 81076b8:	4602      	mov	r2, r0
 81076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81076bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81076c0:	2b00      	cmp	r3, #0
 81076c2:	d002      	beq.n	81076ca <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81076c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81076c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81076ca:	bf00      	nop
 81076cc:	3720      	adds	r7, #32
 81076ce:	46bd      	mov	sp, r7
 81076d0:	bd80      	pop	{r7, pc}
	...

081076d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81076d4:	b580      	push	{r7, lr}
 81076d6:	b082      	sub	sp, #8
 81076d8:	af00      	add	r7, sp, #0
 81076da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81076dc:	f7ff f8de 	bl	810689c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81076e0:	4b2d      	ldr	r3, [pc, #180]	; (8107798 <prvAddNewTaskToReadyList+0xc4>)
 81076e2:	681b      	ldr	r3, [r3, #0]
 81076e4:	3301      	adds	r3, #1
 81076e6:	4a2c      	ldr	r2, [pc, #176]	; (8107798 <prvAddNewTaskToReadyList+0xc4>)
 81076e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81076ea:	4b2c      	ldr	r3, [pc, #176]	; (810779c <prvAddNewTaskToReadyList+0xc8>)
 81076ec:	681b      	ldr	r3, [r3, #0]
 81076ee:	2b00      	cmp	r3, #0
 81076f0:	d109      	bne.n	8107706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 81076f2:	4a2a      	ldr	r2, [pc, #168]	; (810779c <prvAddNewTaskToReadyList+0xc8>)
 81076f4:	687b      	ldr	r3, [r7, #4]
 81076f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 81076f8:	4b27      	ldr	r3, [pc, #156]	; (8107798 <prvAddNewTaskToReadyList+0xc4>)
 81076fa:	681b      	ldr	r3, [r3, #0]
 81076fc:	2b01      	cmp	r3, #1
 81076fe:	d110      	bne.n	8107722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8107700:	f000 fc08 	bl	8107f14 <prvInitialiseTaskLists>
 8107704:	e00d      	b.n	8107722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8107706:	4b26      	ldr	r3, [pc, #152]	; (81077a0 <prvAddNewTaskToReadyList+0xcc>)
 8107708:	681b      	ldr	r3, [r3, #0]
 810770a:	2b00      	cmp	r3, #0
 810770c:	d109      	bne.n	8107722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810770e:	4b23      	ldr	r3, [pc, #140]	; (810779c <prvAddNewTaskToReadyList+0xc8>)
 8107710:	681b      	ldr	r3, [r3, #0]
 8107712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107714:	687b      	ldr	r3, [r7, #4]
 8107716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107718:	429a      	cmp	r2, r3
 810771a:	d802      	bhi.n	8107722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810771c:	4a1f      	ldr	r2, [pc, #124]	; (810779c <prvAddNewTaskToReadyList+0xc8>)
 810771e:	687b      	ldr	r3, [r7, #4]
 8107720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8107722:	4b20      	ldr	r3, [pc, #128]	; (81077a4 <prvAddNewTaskToReadyList+0xd0>)
 8107724:	681b      	ldr	r3, [r3, #0]
 8107726:	3301      	adds	r3, #1
 8107728:	4a1e      	ldr	r2, [pc, #120]	; (81077a4 <prvAddNewTaskToReadyList+0xd0>)
 810772a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810772c:	4b1d      	ldr	r3, [pc, #116]	; (81077a4 <prvAddNewTaskToReadyList+0xd0>)
 810772e:	681a      	ldr	r2, [r3, #0]
 8107730:	687b      	ldr	r3, [r7, #4]
 8107732:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107738:	4b1b      	ldr	r3, [pc, #108]	; (81077a8 <prvAddNewTaskToReadyList+0xd4>)
 810773a:	681b      	ldr	r3, [r3, #0]
 810773c:	429a      	cmp	r2, r3
 810773e:	d903      	bls.n	8107748 <prvAddNewTaskToReadyList+0x74>
 8107740:	687b      	ldr	r3, [r7, #4]
 8107742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107744:	4a18      	ldr	r2, [pc, #96]	; (81077a8 <prvAddNewTaskToReadyList+0xd4>)
 8107746:	6013      	str	r3, [r2, #0]
 8107748:	687b      	ldr	r3, [r7, #4]
 810774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810774c:	4613      	mov	r3, r2
 810774e:	009b      	lsls	r3, r3, #2
 8107750:	4413      	add	r3, r2
 8107752:	009b      	lsls	r3, r3, #2
 8107754:	4a15      	ldr	r2, [pc, #84]	; (81077ac <prvAddNewTaskToReadyList+0xd8>)
 8107756:	441a      	add	r2, r3
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	3304      	adds	r3, #4
 810775c:	4619      	mov	r1, r3
 810775e:	4610      	mov	r0, r2
 8107760:	f7fe feef 	bl	8106542 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8107764:	f7ff f8c8 	bl	81068f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8107768:	4b0d      	ldr	r3, [pc, #52]	; (81077a0 <prvAddNewTaskToReadyList+0xcc>)
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	2b00      	cmp	r3, #0
 810776e:	d00e      	beq.n	810778e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8107770:	4b0a      	ldr	r3, [pc, #40]	; (810779c <prvAddNewTaskToReadyList+0xc8>)
 8107772:	681b      	ldr	r3, [r3, #0]
 8107774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107776:	687b      	ldr	r3, [r7, #4]
 8107778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810777a:	429a      	cmp	r2, r3
 810777c:	d207      	bcs.n	810778e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810777e:	4b0c      	ldr	r3, [pc, #48]	; (81077b0 <prvAddNewTaskToReadyList+0xdc>)
 8107780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107784:	601a      	str	r2, [r3, #0]
 8107786:	f3bf 8f4f 	dsb	sy
 810778a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810778e:	bf00      	nop
 8107790:	3708      	adds	r7, #8
 8107792:	46bd      	mov	sp, r7
 8107794:	bd80      	pop	{r7, pc}
 8107796:	bf00      	nop
 8107798:	100049b0 	.word	0x100049b0
 810779c:	100044dc 	.word	0x100044dc
 81077a0:	100049bc 	.word	0x100049bc
 81077a4:	100049cc 	.word	0x100049cc
 81077a8:	100049b8 	.word	0x100049b8
 81077ac:	100044e0 	.word	0x100044e0
 81077b0:	e000ed04 	.word	0xe000ed04

081077b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81077b4:	b580      	push	{r7, lr}
 81077b6:	b084      	sub	sp, #16
 81077b8:	af00      	add	r7, sp, #0
 81077ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81077bc:	2300      	movs	r3, #0
 81077be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	2b00      	cmp	r3, #0
 81077c4:	d016      	beq.n	81077f4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81077c6:	4b13      	ldr	r3, [pc, #76]	; (8107814 <vTaskDelay+0x60>)
 81077c8:	681b      	ldr	r3, [r3, #0]
 81077ca:	2b00      	cmp	r3, #0
 81077cc:	d009      	beq.n	81077e2 <vTaskDelay+0x2e>
 81077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 81077d2:	f383 8811 	msr	BASEPRI, r3
 81077d6:	f3bf 8f6f 	isb	sy
 81077da:	f3bf 8f4f 	dsb	sy
 81077de:	60bb      	str	r3, [r7, #8]
 81077e0:	e7fe      	b.n	81077e0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 81077e2:	f000 f87f 	bl	81078e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81077e6:	2100      	movs	r1, #0
 81077e8:	6878      	ldr	r0, [r7, #4]
 81077ea:	f000 fcd7 	bl	810819c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81077ee:	f000 f887 	bl	8107900 <xTaskResumeAll>
 81077f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81077f4:	68fb      	ldr	r3, [r7, #12]
 81077f6:	2b00      	cmp	r3, #0
 81077f8:	d107      	bne.n	810780a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 81077fa:	4b07      	ldr	r3, [pc, #28]	; (8107818 <vTaskDelay+0x64>)
 81077fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107800:	601a      	str	r2, [r3, #0]
 8107802:	f3bf 8f4f 	dsb	sy
 8107806:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810780a:	bf00      	nop
 810780c:	3710      	adds	r7, #16
 810780e:	46bd      	mov	sp, r7
 8107810:	bd80      	pop	{r7, pc}
 8107812:	bf00      	nop
 8107814:	100049d8 	.word	0x100049d8
 8107818:	e000ed04 	.word	0xe000ed04

0810781c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810781c:	b580      	push	{r7, lr}
 810781e:	b08a      	sub	sp, #40	; 0x28
 8107820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8107822:	2300      	movs	r3, #0
 8107824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8107826:	2300      	movs	r3, #0
 8107828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810782a:	463a      	mov	r2, r7
 810782c:	1d39      	adds	r1, r7, #4
 810782e:	f107 0308 	add.w	r3, r7, #8
 8107832:	4618      	mov	r0, r3
 8107834:	f7fe fc4e 	bl	81060d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8107838:	6839      	ldr	r1, [r7, #0]
 810783a:	687b      	ldr	r3, [r7, #4]
 810783c:	68ba      	ldr	r2, [r7, #8]
 810783e:	9202      	str	r2, [sp, #8]
 8107840:	9301      	str	r3, [sp, #4]
 8107842:	2300      	movs	r3, #0
 8107844:	9300      	str	r3, [sp, #0]
 8107846:	2300      	movs	r3, #0
 8107848:	460a      	mov	r2, r1
 810784a:	4920      	ldr	r1, [pc, #128]	; (81078cc <vTaskStartScheduler+0xb0>)
 810784c:	4820      	ldr	r0, [pc, #128]	; (81078d0 <vTaskStartScheduler+0xb4>)
 810784e:	f7ff fe13 	bl	8107478 <xTaskCreateStatic>
 8107852:	4602      	mov	r2, r0
 8107854:	4b1f      	ldr	r3, [pc, #124]	; (81078d4 <vTaskStartScheduler+0xb8>)
 8107856:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8107858:	4b1e      	ldr	r3, [pc, #120]	; (81078d4 <vTaskStartScheduler+0xb8>)
 810785a:	681b      	ldr	r3, [r3, #0]
 810785c:	2b00      	cmp	r3, #0
 810785e:	d002      	beq.n	8107866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8107860:	2301      	movs	r3, #1
 8107862:	617b      	str	r3, [r7, #20]
 8107864:	e001      	b.n	810786a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8107866:	2300      	movs	r3, #0
 8107868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810786a:	697b      	ldr	r3, [r7, #20]
 810786c:	2b01      	cmp	r3, #1
 810786e:	d102      	bne.n	8107876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8107870:	f000 fce8 	bl	8108244 <xTimerCreateTimerTask>
 8107874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8107876:	697b      	ldr	r3, [r7, #20]
 8107878:	2b01      	cmp	r3, #1
 810787a:	d115      	bne.n	81078a8 <vTaskStartScheduler+0x8c>
 810787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107880:	f383 8811 	msr	BASEPRI, r3
 8107884:	f3bf 8f6f 	isb	sy
 8107888:	f3bf 8f4f 	dsb	sy
 810788c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810788e:	4b12      	ldr	r3, [pc, #72]	; (81078d8 <vTaskStartScheduler+0xbc>)
 8107890:	f04f 32ff 	mov.w	r2, #4294967295
 8107894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8107896:	4b11      	ldr	r3, [pc, #68]	; (81078dc <vTaskStartScheduler+0xc0>)
 8107898:	2201      	movs	r2, #1
 810789a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810789c:	4b10      	ldr	r3, [pc, #64]	; (81078e0 <vTaskStartScheduler+0xc4>)
 810789e:	2200      	movs	r2, #0
 81078a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 81078a2:	f7fe ff5d 	bl	8106760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 81078a6:	e00d      	b.n	81078c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 81078a8:	697b      	ldr	r3, [r7, #20]
 81078aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 81078ae:	d109      	bne.n	81078c4 <vTaskStartScheduler+0xa8>
 81078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81078b4:	f383 8811 	msr	BASEPRI, r3
 81078b8:	f3bf 8f6f 	isb	sy
 81078bc:	f3bf 8f4f 	dsb	sy
 81078c0:	60fb      	str	r3, [r7, #12]
 81078c2:	e7fe      	b.n	81078c2 <vTaskStartScheduler+0xa6>
}
 81078c4:	bf00      	nop
 81078c6:	3718      	adds	r7, #24
 81078c8:	46bd      	mov	sp, r7
 81078ca:	bd80      	pop	{r7, pc}
 81078cc:	0810a3b4 	.word	0x0810a3b4
 81078d0:	08107ee5 	.word	0x08107ee5
 81078d4:	100049d4 	.word	0x100049d4
 81078d8:	100049d0 	.word	0x100049d0
 81078dc:	100049bc 	.word	0x100049bc
 81078e0:	100049b4 	.word	0x100049b4

081078e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81078e4:	b480      	push	{r7}
 81078e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 81078e8:	4b04      	ldr	r3, [pc, #16]	; (81078fc <vTaskSuspendAll+0x18>)
 81078ea:	681b      	ldr	r3, [r3, #0]
 81078ec:	3301      	adds	r3, #1
 81078ee:	4a03      	ldr	r2, [pc, #12]	; (81078fc <vTaskSuspendAll+0x18>)
 81078f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 81078f2:	bf00      	nop
 81078f4:	46bd      	mov	sp, r7
 81078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078fa:	4770      	bx	lr
 81078fc:	100049d8 	.word	0x100049d8

08107900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8107900:	b580      	push	{r7, lr}
 8107902:	b084      	sub	sp, #16
 8107904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8107906:	2300      	movs	r3, #0
 8107908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810790a:	2300      	movs	r3, #0
 810790c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810790e:	4b41      	ldr	r3, [pc, #260]	; (8107a14 <xTaskResumeAll+0x114>)
 8107910:	681b      	ldr	r3, [r3, #0]
 8107912:	2b00      	cmp	r3, #0
 8107914:	d109      	bne.n	810792a <xTaskResumeAll+0x2a>
 8107916:	f04f 0350 	mov.w	r3, #80	; 0x50
 810791a:	f383 8811 	msr	BASEPRI, r3
 810791e:	f3bf 8f6f 	isb	sy
 8107922:	f3bf 8f4f 	dsb	sy
 8107926:	603b      	str	r3, [r7, #0]
 8107928:	e7fe      	b.n	8107928 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810792a:	f7fe ffb7 	bl	810689c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810792e:	4b39      	ldr	r3, [pc, #228]	; (8107a14 <xTaskResumeAll+0x114>)
 8107930:	681b      	ldr	r3, [r3, #0]
 8107932:	3b01      	subs	r3, #1
 8107934:	4a37      	ldr	r2, [pc, #220]	; (8107a14 <xTaskResumeAll+0x114>)
 8107936:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107938:	4b36      	ldr	r3, [pc, #216]	; (8107a14 <xTaskResumeAll+0x114>)
 810793a:	681b      	ldr	r3, [r3, #0]
 810793c:	2b00      	cmp	r3, #0
 810793e:	d162      	bne.n	8107a06 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8107940:	4b35      	ldr	r3, [pc, #212]	; (8107a18 <xTaskResumeAll+0x118>)
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	2b00      	cmp	r3, #0
 8107946:	d05e      	beq.n	8107a06 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107948:	e02f      	b.n	81079aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810794a:	4b34      	ldr	r3, [pc, #208]	; (8107a1c <xTaskResumeAll+0x11c>)
 810794c:	68db      	ldr	r3, [r3, #12]
 810794e:	68db      	ldr	r3, [r3, #12]
 8107950:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107952:	68fb      	ldr	r3, [r7, #12]
 8107954:	3318      	adds	r3, #24
 8107956:	4618      	mov	r0, r3
 8107958:	f7fe fe50 	bl	81065fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810795c:	68fb      	ldr	r3, [r7, #12]
 810795e:	3304      	adds	r3, #4
 8107960:	4618      	mov	r0, r3
 8107962:	f7fe fe4b 	bl	81065fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8107966:	68fb      	ldr	r3, [r7, #12]
 8107968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810796a:	4b2d      	ldr	r3, [pc, #180]	; (8107a20 <xTaskResumeAll+0x120>)
 810796c:	681b      	ldr	r3, [r3, #0]
 810796e:	429a      	cmp	r2, r3
 8107970:	d903      	bls.n	810797a <xTaskResumeAll+0x7a>
 8107972:	68fb      	ldr	r3, [r7, #12]
 8107974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107976:	4a2a      	ldr	r2, [pc, #168]	; (8107a20 <xTaskResumeAll+0x120>)
 8107978:	6013      	str	r3, [r2, #0]
 810797a:	68fb      	ldr	r3, [r7, #12]
 810797c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810797e:	4613      	mov	r3, r2
 8107980:	009b      	lsls	r3, r3, #2
 8107982:	4413      	add	r3, r2
 8107984:	009b      	lsls	r3, r3, #2
 8107986:	4a27      	ldr	r2, [pc, #156]	; (8107a24 <xTaskResumeAll+0x124>)
 8107988:	441a      	add	r2, r3
 810798a:	68fb      	ldr	r3, [r7, #12]
 810798c:	3304      	adds	r3, #4
 810798e:	4619      	mov	r1, r3
 8107990:	4610      	mov	r0, r2
 8107992:	f7fe fdd6 	bl	8106542 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107996:	68fb      	ldr	r3, [r7, #12]
 8107998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810799a:	4b23      	ldr	r3, [pc, #140]	; (8107a28 <xTaskResumeAll+0x128>)
 810799c:	681b      	ldr	r3, [r3, #0]
 810799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81079a0:	429a      	cmp	r2, r3
 81079a2:	d302      	bcc.n	81079aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 81079a4:	4b21      	ldr	r3, [pc, #132]	; (8107a2c <xTaskResumeAll+0x12c>)
 81079a6:	2201      	movs	r2, #1
 81079a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81079aa:	4b1c      	ldr	r3, [pc, #112]	; (8107a1c <xTaskResumeAll+0x11c>)
 81079ac:	681b      	ldr	r3, [r3, #0]
 81079ae:	2b00      	cmp	r3, #0
 81079b0:	d1cb      	bne.n	810794a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81079b2:	68fb      	ldr	r3, [r7, #12]
 81079b4:	2b00      	cmp	r3, #0
 81079b6:	d001      	beq.n	81079bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81079b8:	f000 fb46 	bl	8108048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 81079bc:	4b1c      	ldr	r3, [pc, #112]	; (8107a30 <xTaskResumeAll+0x130>)
 81079be:	681b      	ldr	r3, [r3, #0]
 81079c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 81079c2:	687b      	ldr	r3, [r7, #4]
 81079c4:	2b00      	cmp	r3, #0
 81079c6:	d010      	beq.n	81079ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81079c8:	f000 f846 	bl	8107a58 <xTaskIncrementTick>
 81079cc:	4603      	mov	r3, r0
 81079ce:	2b00      	cmp	r3, #0
 81079d0:	d002      	beq.n	81079d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 81079d2:	4b16      	ldr	r3, [pc, #88]	; (8107a2c <xTaskResumeAll+0x12c>)
 81079d4:	2201      	movs	r2, #1
 81079d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 81079d8:	687b      	ldr	r3, [r7, #4]
 81079da:	3b01      	subs	r3, #1
 81079dc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 81079de:	687b      	ldr	r3, [r7, #4]
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	d1f1      	bne.n	81079c8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 81079e4:	4b12      	ldr	r3, [pc, #72]	; (8107a30 <xTaskResumeAll+0x130>)
 81079e6:	2200      	movs	r2, #0
 81079e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81079ea:	4b10      	ldr	r3, [pc, #64]	; (8107a2c <xTaskResumeAll+0x12c>)
 81079ec:	681b      	ldr	r3, [r3, #0]
 81079ee:	2b00      	cmp	r3, #0
 81079f0:	d009      	beq.n	8107a06 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81079f2:	2301      	movs	r3, #1
 81079f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81079f6:	4b0f      	ldr	r3, [pc, #60]	; (8107a34 <xTaskResumeAll+0x134>)
 81079f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81079fc:	601a      	str	r2, [r3, #0]
 81079fe:	f3bf 8f4f 	dsb	sy
 8107a02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8107a06:	f7fe ff77 	bl	81068f8 <vPortExitCritical>

	return xAlreadyYielded;
 8107a0a:	68bb      	ldr	r3, [r7, #8]
}
 8107a0c:	4618      	mov	r0, r3
 8107a0e:	3710      	adds	r7, #16
 8107a10:	46bd      	mov	sp, r7
 8107a12:	bd80      	pop	{r7, pc}
 8107a14:	100049d8 	.word	0x100049d8
 8107a18:	100049b0 	.word	0x100049b0
 8107a1c:	10004970 	.word	0x10004970
 8107a20:	100049b8 	.word	0x100049b8
 8107a24:	100044e0 	.word	0x100044e0
 8107a28:	100044dc 	.word	0x100044dc
 8107a2c:	100049c4 	.word	0x100049c4
 8107a30:	100049c0 	.word	0x100049c0
 8107a34:	e000ed04 	.word	0xe000ed04

08107a38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8107a38:	b480      	push	{r7}
 8107a3a:	b083      	sub	sp, #12
 8107a3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8107a3e:	4b05      	ldr	r3, [pc, #20]	; (8107a54 <xTaskGetTickCount+0x1c>)
 8107a40:	681b      	ldr	r3, [r3, #0]
 8107a42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8107a44:	687b      	ldr	r3, [r7, #4]
}
 8107a46:	4618      	mov	r0, r3
 8107a48:	370c      	adds	r7, #12
 8107a4a:	46bd      	mov	sp, r7
 8107a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a50:	4770      	bx	lr
 8107a52:	bf00      	nop
 8107a54:	100049b4 	.word	0x100049b4

08107a58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8107a58:	b580      	push	{r7, lr}
 8107a5a:	b086      	sub	sp, #24
 8107a5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8107a5e:	2300      	movs	r3, #0
 8107a60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107a62:	4b4e      	ldr	r3, [pc, #312]	; (8107b9c <xTaskIncrementTick+0x144>)
 8107a64:	681b      	ldr	r3, [r3, #0]
 8107a66:	2b00      	cmp	r3, #0
 8107a68:	f040 8088 	bne.w	8107b7c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107a6c:	4b4c      	ldr	r3, [pc, #304]	; (8107ba0 <xTaskIncrementTick+0x148>)
 8107a6e:	681b      	ldr	r3, [r3, #0]
 8107a70:	3301      	adds	r3, #1
 8107a72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107a74:	4a4a      	ldr	r2, [pc, #296]	; (8107ba0 <xTaskIncrementTick+0x148>)
 8107a76:	693b      	ldr	r3, [r7, #16]
 8107a78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8107a7a:	693b      	ldr	r3, [r7, #16]
 8107a7c:	2b00      	cmp	r3, #0
 8107a7e:	d11f      	bne.n	8107ac0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8107a80:	4b48      	ldr	r3, [pc, #288]	; (8107ba4 <xTaskIncrementTick+0x14c>)
 8107a82:	681b      	ldr	r3, [r3, #0]
 8107a84:	681b      	ldr	r3, [r3, #0]
 8107a86:	2b00      	cmp	r3, #0
 8107a88:	d009      	beq.n	8107a9e <xTaskIncrementTick+0x46>
 8107a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107a8e:	f383 8811 	msr	BASEPRI, r3
 8107a92:	f3bf 8f6f 	isb	sy
 8107a96:	f3bf 8f4f 	dsb	sy
 8107a9a:	603b      	str	r3, [r7, #0]
 8107a9c:	e7fe      	b.n	8107a9c <xTaskIncrementTick+0x44>
 8107a9e:	4b41      	ldr	r3, [pc, #260]	; (8107ba4 <xTaskIncrementTick+0x14c>)
 8107aa0:	681b      	ldr	r3, [r3, #0]
 8107aa2:	60fb      	str	r3, [r7, #12]
 8107aa4:	4b40      	ldr	r3, [pc, #256]	; (8107ba8 <xTaskIncrementTick+0x150>)
 8107aa6:	681b      	ldr	r3, [r3, #0]
 8107aa8:	4a3e      	ldr	r2, [pc, #248]	; (8107ba4 <xTaskIncrementTick+0x14c>)
 8107aaa:	6013      	str	r3, [r2, #0]
 8107aac:	4a3e      	ldr	r2, [pc, #248]	; (8107ba8 <xTaskIncrementTick+0x150>)
 8107aae:	68fb      	ldr	r3, [r7, #12]
 8107ab0:	6013      	str	r3, [r2, #0]
 8107ab2:	4b3e      	ldr	r3, [pc, #248]	; (8107bac <xTaskIncrementTick+0x154>)
 8107ab4:	681b      	ldr	r3, [r3, #0]
 8107ab6:	3301      	adds	r3, #1
 8107ab8:	4a3c      	ldr	r2, [pc, #240]	; (8107bac <xTaskIncrementTick+0x154>)
 8107aba:	6013      	str	r3, [r2, #0]
 8107abc:	f000 fac4 	bl	8108048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107ac0:	4b3b      	ldr	r3, [pc, #236]	; (8107bb0 <xTaskIncrementTick+0x158>)
 8107ac2:	681b      	ldr	r3, [r3, #0]
 8107ac4:	693a      	ldr	r2, [r7, #16]
 8107ac6:	429a      	cmp	r2, r3
 8107ac8:	d349      	bcc.n	8107b5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107aca:	4b36      	ldr	r3, [pc, #216]	; (8107ba4 <xTaskIncrementTick+0x14c>)
 8107acc:	681b      	ldr	r3, [r3, #0]
 8107ace:	681b      	ldr	r3, [r3, #0]
 8107ad0:	2b00      	cmp	r3, #0
 8107ad2:	d104      	bne.n	8107ade <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107ad4:	4b36      	ldr	r3, [pc, #216]	; (8107bb0 <xTaskIncrementTick+0x158>)
 8107ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8107ada:	601a      	str	r2, [r3, #0]
					break;
 8107adc:	e03f      	b.n	8107b5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107ade:	4b31      	ldr	r3, [pc, #196]	; (8107ba4 <xTaskIncrementTick+0x14c>)
 8107ae0:	681b      	ldr	r3, [r3, #0]
 8107ae2:	68db      	ldr	r3, [r3, #12]
 8107ae4:	68db      	ldr	r3, [r3, #12]
 8107ae6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107ae8:	68bb      	ldr	r3, [r7, #8]
 8107aea:	685b      	ldr	r3, [r3, #4]
 8107aec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8107aee:	693a      	ldr	r2, [r7, #16]
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	429a      	cmp	r2, r3
 8107af4:	d203      	bcs.n	8107afe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8107af6:	4a2e      	ldr	r2, [pc, #184]	; (8107bb0 <xTaskIncrementTick+0x158>)
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8107afc:	e02f      	b.n	8107b5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107afe:	68bb      	ldr	r3, [r7, #8]
 8107b00:	3304      	adds	r3, #4
 8107b02:	4618      	mov	r0, r3
 8107b04:	f7fe fd7a 	bl	81065fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107b08:	68bb      	ldr	r3, [r7, #8]
 8107b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107b0c:	2b00      	cmp	r3, #0
 8107b0e:	d004      	beq.n	8107b1a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107b10:	68bb      	ldr	r3, [r7, #8]
 8107b12:	3318      	adds	r3, #24
 8107b14:	4618      	mov	r0, r3
 8107b16:	f7fe fd71 	bl	81065fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8107b1a:	68bb      	ldr	r3, [r7, #8]
 8107b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107b1e:	4b25      	ldr	r3, [pc, #148]	; (8107bb4 <xTaskIncrementTick+0x15c>)
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	429a      	cmp	r2, r3
 8107b24:	d903      	bls.n	8107b2e <xTaskIncrementTick+0xd6>
 8107b26:	68bb      	ldr	r3, [r7, #8]
 8107b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b2a:	4a22      	ldr	r2, [pc, #136]	; (8107bb4 <xTaskIncrementTick+0x15c>)
 8107b2c:	6013      	str	r3, [r2, #0]
 8107b2e:	68bb      	ldr	r3, [r7, #8]
 8107b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107b32:	4613      	mov	r3, r2
 8107b34:	009b      	lsls	r3, r3, #2
 8107b36:	4413      	add	r3, r2
 8107b38:	009b      	lsls	r3, r3, #2
 8107b3a:	4a1f      	ldr	r2, [pc, #124]	; (8107bb8 <xTaskIncrementTick+0x160>)
 8107b3c:	441a      	add	r2, r3
 8107b3e:	68bb      	ldr	r3, [r7, #8]
 8107b40:	3304      	adds	r3, #4
 8107b42:	4619      	mov	r1, r3
 8107b44:	4610      	mov	r0, r2
 8107b46:	f7fe fcfc 	bl	8106542 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107b4a:	68bb      	ldr	r3, [r7, #8]
 8107b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107b4e:	4b1b      	ldr	r3, [pc, #108]	; (8107bbc <xTaskIncrementTick+0x164>)
 8107b50:	681b      	ldr	r3, [r3, #0]
 8107b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b54:	429a      	cmp	r2, r3
 8107b56:	d3b8      	bcc.n	8107aca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8107b58:	2301      	movs	r3, #1
 8107b5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107b5c:	e7b5      	b.n	8107aca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8107b5e:	4b17      	ldr	r3, [pc, #92]	; (8107bbc <xTaskIncrementTick+0x164>)
 8107b60:	681b      	ldr	r3, [r3, #0]
 8107b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107b64:	4914      	ldr	r1, [pc, #80]	; (8107bb8 <xTaskIncrementTick+0x160>)
 8107b66:	4613      	mov	r3, r2
 8107b68:	009b      	lsls	r3, r3, #2
 8107b6a:	4413      	add	r3, r2
 8107b6c:	009b      	lsls	r3, r3, #2
 8107b6e:	440b      	add	r3, r1
 8107b70:	681b      	ldr	r3, [r3, #0]
 8107b72:	2b01      	cmp	r3, #1
 8107b74:	d907      	bls.n	8107b86 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8107b76:	2301      	movs	r3, #1
 8107b78:	617b      	str	r3, [r7, #20]
 8107b7a:	e004      	b.n	8107b86 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8107b7c:	4b10      	ldr	r3, [pc, #64]	; (8107bc0 <xTaskIncrementTick+0x168>)
 8107b7e:	681b      	ldr	r3, [r3, #0]
 8107b80:	3301      	adds	r3, #1
 8107b82:	4a0f      	ldr	r2, [pc, #60]	; (8107bc0 <xTaskIncrementTick+0x168>)
 8107b84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8107b86:	4b0f      	ldr	r3, [pc, #60]	; (8107bc4 <xTaskIncrementTick+0x16c>)
 8107b88:	681b      	ldr	r3, [r3, #0]
 8107b8a:	2b00      	cmp	r3, #0
 8107b8c:	d001      	beq.n	8107b92 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8107b8e:	2301      	movs	r3, #1
 8107b90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8107b92:	697b      	ldr	r3, [r7, #20]
}
 8107b94:	4618      	mov	r0, r3
 8107b96:	3718      	adds	r7, #24
 8107b98:	46bd      	mov	sp, r7
 8107b9a:	bd80      	pop	{r7, pc}
 8107b9c:	100049d8 	.word	0x100049d8
 8107ba0:	100049b4 	.word	0x100049b4
 8107ba4:	10004968 	.word	0x10004968
 8107ba8:	1000496c 	.word	0x1000496c
 8107bac:	100049c8 	.word	0x100049c8
 8107bb0:	100049d0 	.word	0x100049d0
 8107bb4:	100049b8 	.word	0x100049b8
 8107bb8:	100044e0 	.word	0x100044e0
 8107bbc:	100044dc 	.word	0x100044dc
 8107bc0:	100049c0 	.word	0x100049c0
 8107bc4:	100049c4 	.word	0x100049c4

08107bc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107bc8:	b480      	push	{r7}
 8107bca:	b085      	sub	sp, #20
 8107bcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107bce:	4b27      	ldr	r3, [pc, #156]	; (8107c6c <vTaskSwitchContext+0xa4>)
 8107bd0:	681b      	ldr	r3, [r3, #0]
 8107bd2:	2b00      	cmp	r3, #0
 8107bd4:	d003      	beq.n	8107bde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8107bd6:	4b26      	ldr	r3, [pc, #152]	; (8107c70 <vTaskSwitchContext+0xa8>)
 8107bd8:	2201      	movs	r2, #1
 8107bda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107bdc:	e040      	b.n	8107c60 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8107bde:	4b24      	ldr	r3, [pc, #144]	; (8107c70 <vTaskSwitchContext+0xa8>)
 8107be0:	2200      	movs	r2, #0
 8107be2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107be4:	4b23      	ldr	r3, [pc, #140]	; (8107c74 <vTaskSwitchContext+0xac>)
 8107be6:	681b      	ldr	r3, [r3, #0]
 8107be8:	60fb      	str	r3, [r7, #12]
 8107bea:	e00f      	b.n	8107c0c <vTaskSwitchContext+0x44>
 8107bec:	68fb      	ldr	r3, [r7, #12]
 8107bee:	2b00      	cmp	r3, #0
 8107bf0:	d109      	bne.n	8107c06 <vTaskSwitchContext+0x3e>
 8107bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107bf6:	f383 8811 	msr	BASEPRI, r3
 8107bfa:	f3bf 8f6f 	isb	sy
 8107bfe:	f3bf 8f4f 	dsb	sy
 8107c02:	607b      	str	r3, [r7, #4]
 8107c04:	e7fe      	b.n	8107c04 <vTaskSwitchContext+0x3c>
 8107c06:	68fb      	ldr	r3, [r7, #12]
 8107c08:	3b01      	subs	r3, #1
 8107c0a:	60fb      	str	r3, [r7, #12]
 8107c0c:	491a      	ldr	r1, [pc, #104]	; (8107c78 <vTaskSwitchContext+0xb0>)
 8107c0e:	68fa      	ldr	r2, [r7, #12]
 8107c10:	4613      	mov	r3, r2
 8107c12:	009b      	lsls	r3, r3, #2
 8107c14:	4413      	add	r3, r2
 8107c16:	009b      	lsls	r3, r3, #2
 8107c18:	440b      	add	r3, r1
 8107c1a:	681b      	ldr	r3, [r3, #0]
 8107c1c:	2b00      	cmp	r3, #0
 8107c1e:	d0e5      	beq.n	8107bec <vTaskSwitchContext+0x24>
 8107c20:	68fa      	ldr	r2, [r7, #12]
 8107c22:	4613      	mov	r3, r2
 8107c24:	009b      	lsls	r3, r3, #2
 8107c26:	4413      	add	r3, r2
 8107c28:	009b      	lsls	r3, r3, #2
 8107c2a:	4a13      	ldr	r2, [pc, #76]	; (8107c78 <vTaskSwitchContext+0xb0>)
 8107c2c:	4413      	add	r3, r2
 8107c2e:	60bb      	str	r3, [r7, #8]
 8107c30:	68bb      	ldr	r3, [r7, #8]
 8107c32:	685b      	ldr	r3, [r3, #4]
 8107c34:	685a      	ldr	r2, [r3, #4]
 8107c36:	68bb      	ldr	r3, [r7, #8]
 8107c38:	605a      	str	r2, [r3, #4]
 8107c3a:	68bb      	ldr	r3, [r7, #8]
 8107c3c:	685a      	ldr	r2, [r3, #4]
 8107c3e:	68bb      	ldr	r3, [r7, #8]
 8107c40:	3308      	adds	r3, #8
 8107c42:	429a      	cmp	r2, r3
 8107c44:	d104      	bne.n	8107c50 <vTaskSwitchContext+0x88>
 8107c46:	68bb      	ldr	r3, [r7, #8]
 8107c48:	685b      	ldr	r3, [r3, #4]
 8107c4a:	685a      	ldr	r2, [r3, #4]
 8107c4c:	68bb      	ldr	r3, [r7, #8]
 8107c4e:	605a      	str	r2, [r3, #4]
 8107c50:	68bb      	ldr	r3, [r7, #8]
 8107c52:	685b      	ldr	r3, [r3, #4]
 8107c54:	68db      	ldr	r3, [r3, #12]
 8107c56:	4a09      	ldr	r2, [pc, #36]	; (8107c7c <vTaskSwitchContext+0xb4>)
 8107c58:	6013      	str	r3, [r2, #0]
 8107c5a:	4a06      	ldr	r2, [pc, #24]	; (8107c74 <vTaskSwitchContext+0xac>)
 8107c5c:	68fb      	ldr	r3, [r7, #12]
 8107c5e:	6013      	str	r3, [r2, #0]
}
 8107c60:	bf00      	nop
 8107c62:	3714      	adds	r7, #20
 8107c64:	46bd      	mov	sp, r7
 8107c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c6a:	4770      	bx	lr
 8107c6c:	100049d8 	.word	0x100049d8
 8107c70:	100049c4 	.word	0x100049c4
 8107c74:	100049b8 	.word	0x100049b8
 8107c78:	100044e0 	.word	0x100044e0
 8107c7c:	100044dc 	.word	0x100044dc

08107c80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8107c80:	b580      	push	{r7, lr}
 8107c82:	b084      	sub	sp, #16
 8107c84:	af00      	add	r7, sp, #0
 8107c86:	6078      	str	r0, [r7, #4]
 8107c88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	2b00      	cmp	r3, #0
 8107c8e:	d109      	bne.n	8107ca4 <vTaskPlaceOnEventList+0x24>
 8107c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107c94:	f383 8811 	msr	BASEPRI, r3
 8107c98:	f3bf 8f6f 	isb	sy
 8107c9c:	f3bf 8f4f 	dsb	sy
 8107ca0:	60fb      	str	r3, [r7, #12]
 8107ca2:	e7fe      	b.n	8107ca2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107ca4:	4b07      	ldr	r3, [pc, #28]	; (8107cc4 <vTaskPlaceOnEventList+0x44>)
 8107ca6:	681b      	ldr	r3, [r3, #0]
 8107ca8:	3318      	adds	r3, #24
 8107caa:	4619      	mov	r1, r3
 8107cac:	6878      	ldr	r0, [r7, #4]
 8107cae:	f7fe fc6c 	bl	810658a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8107cb2:	2101      	movs	r1, #1
 8107cb4:	6838      	ldr	r0, [r7, #0]
 8107cb6:	f000 fa71 	bl	810819c <prvAddCurrentTaskToDelayedList>
}
 8107cba:	bf00      	nop
 8107cbc:	3710      	adds	r7, #16
 8107cbe:	46bd      	mov	sp, r7
 8107cc0:	bd80      	pop	{r7, pc}
 8107cc2:	bf00      	nop
 8107cc4:	100044dc 	.word	0x100044dc

08107cc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107cc8:	b580      	push	{r7, lr}
 8107cca:	b086      	sub	sp, #24
 8107ccc:	af00      	add	r7, sp, #0
 8107cce:	60f8      	str	r0, [r7, #12]
 8107cd0:	60b9      	str	r1, [r7, #8]
 8107cd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8107cd4:	68fb      	ldr	r3, [r7, #12]
 8107cd6:	2b00      	cmp	r3, #0
 8107cd8:	d109      	bne.n	8107cee <vTaskPlaceOnEventListRestricted+0x26>
 8107cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107cde:	f383 8811 	msr	BASEPRI, r3
 8107ce2:	f3bf 8f6f 	isb	sy
 8107ce6:	f3bf 8f4f 	dsb	sy
 8107cea:	617b      	str	r3, [r7, #20]
 8107cec:	e7fe      	b.n	8107cec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107cee:	4b0a      	ldr	r3, [pc, #40]	; (8107d18 <vTaskPlaceOnEventListRestricted+0x50>)
 8107cf0:	681b      	ldr	r3, [r3, #0]
 8107cf2:	3318      	adds	r3, #24
 8107cf4:	4619      	mov	r1, r3
 8107cf6:	68f8      	ldr	r0, [r7, #12]
 8107cf8:	f7fe fc23 	bl	8106542 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8107cfc:	687b      	ldr	r3, [r7, #4]
 8107cfe:	2b00      	cmp	r3, #0
 8107d00:	d002      	beq.n	8107d08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8107d02:	f04f 33ff 	mov.w	r3, #4294967295
 8107d06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8107d08:	6879      	ldr	r1, [r7, #4]
 8107d0a:	68b8      	ldr	r0, [r7, #8]
 8107d0c:	f000 fa46 	bl	810819c <prvAddCurrentTaskToDelayedList>
	}
 8107d10:	bf00      	nop
 8107d12:	3718      	adds	r7, #24
 8107d14:	46bd      	mov	sp, r7
 8107d16:	bd80      	pop	{r7, pc}
 8107d18:	100044dc 	.word	0x100044dc

08107d1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8107d1c:	b580      	push	{r7, lr}
 8107d1e:	b086      	sub	sp, #24
 8107d20:	af00      	add	r7, sp, #0
 8107d22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107d24:	687b      	ldr	r3, [r7, #4]
 8107d26:	68db      	ldr	r3, [r3, #12]
 8107d28:	68db      	ldr	r3, [r3, #12]
 8107d2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8107d2c:	693b      	ldr	r3, [r7, #16]
 8107d2e:	2b00      	cmp	r3, #0
 8107d30:	d109      	bne.n	8107d46 <xTaskRemoveFromEventList+0x2a>
 8107d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107d36:	f383 8811 	msr	BASEPRI, r3
 8107d3a:	f3bf 8f6f 	isb	sy
 8107d3e:	f3bf 8f4f 	dsb	sy
 8107d42:	60fb      	str	r3, [r7, #12]
 8107d44:	e7fe      	b.n	8107d44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8107d46:	693b      	ldr	r3, [r7, #16]
 8107d48:	3318      	adds	r3, #24
 8107d4a:	4618      	mov	r0, r3
 8107d4c:	f7fe fc56 	bl	81065fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107d50:	4b1d      	ldr	r3, [pc, #116]	; (8107dc8 <xTaskRemoveFromEventList+0xac>)
 8107d52:	681b      	ldr	r3, [r3, #0]
 8107d54:	2b00      	cmp	r3, #0
 8107d56:	d11d      	bne.n	8107d94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107d58:	693b      	ldr	r3, [r7, #16]
 8107d5a:	3304      	adds	r3, #4
 8107d5c:	4618      	mov	r0, r3
 8107d5e:	f7fe fc4d 	bl	81065fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8107d62:	693b      	ldr	r3, [r7, #16]
 8107d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107d66:	4b19      	ldr	r3, [pc, #100]	; (8107dcc <xTaskRemoveFromEventList+0xb0>)
 8107d68:	681b      	ldr	r3, [r3, #0]
 8107d6a:	429a      	cmp	r2, r3
 8107d6c:	d903      	bls.n	8107d76 <xTaskRemoveFromEventList+0x5a>
 8107d6e:	693b      	ldr	r3, [r7, #16]
 8107d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d72:	4a16      	ldr	r2, [pc, #88]	; (8107dcc <xTaskRemoveFromEventList+0xb0>)
 8107d74:	6013      	str	r3, [r2, #0]
 8107d76:	693b      	ldr	r3, [r7, #16]
 8107d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107d7a:	4613      	mov	r3, r2
 8107d7c:	009b      	lsls	r3, r3, #2
 8107d7e:	4413      	add	r3, r2
 8107d80:	009b      	lsls	r3, r3, #2
 8107d82:	4a13      	ldr	r2, [pc, #76]	; (8107dd0 <xTaskRemoveFromEventList+0xb4>)
 8107d84:	441a      	add	r2, r3
 8107d86:	693b      	ldr	r3, [r7, #16]
 8107d88:	3304      	adds	r3, #4
 8107d8a:	4619      	mov	r1, r3
 8107d8c:	4610      	mov	r0, r2
 8107d8e:	f7fe fbd8 	bl	8106542 <vListInsertEnd>
 8107d92:	e005      	b.n	8107da0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8107d94:	693b      	ldr	r3, [r7, #16]
 8107d96:	3318      	adds	r3, #24
 8107d98:	4619      	mov	r1, r3
 8107d9a:	480e      	ldr	r0, [pc, #56]	; (8107dd4 <xTaskRemoveFromEventList+0xb8>)
 8107d9c:	f7fe fbd1 	bl	8106542 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8107da0:	693b      	ldr	r3, [r7, #16]
 8107da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107da4:	4b0c      	ldr	r3, [pc, #48]	; (8107dd8 <xTaskRemoveFromEventList+0xbc>)
 8107da6:	681b      	ldr	r3, [r3, #0]
 8107da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107daa:	429a      	cmp	r2, r3
 8107dac:	d905      	bls.n	8107dba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8107dae:	2301      	movs	r3, #1
 8107db0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8107db2:	4b0a      	ldr	r3, [pc, #40]	; (8107ddc <xTaskRemoveFromEventList+0xc0>)
 8107db4:	2201      	movs	r2, #1
 8107db6:	601a      	str	r2, [r3, #0]
 8107db8:	e001      	b.n	8107dbe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8107dba:	2300      	movs	r3, #0
 8107dbc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8107dbe:	697b      	ldr	r3, [r7, #20]
}
 8107dc0:	4618      	mov	r0, r3
 8107dc2:	3718      	adds	r7, #24
 8107dc4:	46bd      	mov	sp, r7
 8107dc6:	bd80      	pop	{r7, pc}
 8107dc8:	100049d8 	.word	0x100049d8
 8107dcc:	100049b8 	.word	0x100049b8
 8107dd0:	100044e0 	.word	0x100044e0
 8107dd4:	10004970 	.word	0x10004970
 8107dd8:	100044dc 	.word	0x100044dc
 8107ddc:	100049c4 	.word	0x100049c4

08107de0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8107de0:	b480      	push	{r7}
 8107de2:	b083      	sub	sp, #12
 8107de4:	af00      	add	r7, sp, #0
 8107de6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8107de8:	4b06      	ldr	r3, [pc, #24]	; (8107e04 <vTaskInternalSetTimeOutState+0x24>)
 8107dea:	681a      	ldr	r2, [r3, #0]
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8107df0:	4b05      	ldr	r3, [pc, #20]	; (8107e08 <vTaskInternalSetTimeOutState+0x28>)
 8107df2:	681a      	ldr	r2, [r3, #0]
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	605a      	str	r2, [r3, #4]
}
 8107df8:	bf00      	nop
 8107dfa:	370c      	adds	r7, #12
 8107dfc:	46bd      	mov	sp, r7
 8107dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e02:	4770      	bx	lr
 8107e04:	100049c8 	.word	0x100049c8
 8107e08:	100049b4 	.word	0x100049b4

08107e0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8107e0c:	b580      	push	{r7, lr}
 8107e0e:	b088      	sub	sp, #32
 8107e10:	af00      	add	r7, sp, #0
 8107e12:	6078      	str	r0, [r7, #4]
 8107e14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	2b00      	cmp	r3, #0
 8107e1a:	d109      	bne.n	8107e30 <xTaskCheckForTimeOut+0x24>
 8107e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e20:	f383 8811 	msr	BASEPRI, r3
 8107e24:	f3bf 8f6f 	isb	sy
 8107e28:	f3bf 8f4f 	dsb	sy
 8107e2c:	613b      	str	r3, [r7, #16]
 8107e2e:	e7fe      	b.n	8107e2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8107e30:	683b      	ldr	r3, [r7, #0]
 8107e32:	2b00      	cmp	r3, #0
 8107e34:	d109      	bne.n	8107e4a <xTaskCheckForTimeOut+0x3e>
 8107e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e3a:	f383 8811 	msr	BASEPRI, r3
 8107e3e:	f3bf 8f6f 	isb	sy
 8107e42:	f3bf 8f4f 	dsb	sy
 8107e46:	60fb      	str	r3, [r7, #12]
 8107e48:	e7fe      	b.n	8107e48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8107e4a:	f7fe fd27 	bl	810689c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8107e4e:	4b1d      	ldr	r3, [pc, #116]	; (8107ec4 <xTaskCheckForTimeOut+0xb8>)
 8107e50:	681b      	ldr	r3, [r3, #0]
 8107e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	685b      	ldr	r3, [r3, #4]
 8107e58:	69ba      	ldr	r2, [r7, #24]
 8107e5a:	1ad3      	subs	r3, r2, r3
 8107e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8107e5e:	683b      	ldr	r3, [r7, #0]
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107e66:	d102      	bne.n	8107e6e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8107e68:	2300      	movs	r3, #0
 8107e6a:	61fb      	str	r3, [r7, #28]
 8107e6c:	e023      	b.n	8107eb6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8107e6e:	687b      	ldr	r3, [r7, #4]
 8107e70:	681a      	ldr	r2, [r3, #0]
 8107e72:	4b15      	ldr	r3, [pc, #84]	; (8107ec8 <xTaskCheckForTimeOut+0xbc>)
 8107e74:	681b      	ldr	r3, [r3, #0]
 8107e76:	429a      	cmp	r2, r3
 8107e78:	d007      	beq.n	8107e8a <xTaskCheckForTimeOut+0x7e>
 8107e7a:	687b      	ldr	r3, [r7, #4]
 8107e7c:	685b      	ldr	r3, [r3, #4]
 8107e7e:	69ba      	ldr	r2, [r7, #24]
 8107e80:	429a      	cmp	r2, r3
 8107e82:	d302      	bcc.n	8107e8a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8107e84:	2301      	movs	r3, #1
 8107e86:	61fb      	str	r3, [r7, #28]
 8107e88:	e015      	b.n	8107eb6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8107e8a:	683b      	ldr	r3, [r7, #0]
 8107e8c:	681b      	ldr	r3, [r3, #0]
 8107e8e:	697a      	ldr	r2, [r7, #20]
 8107e90:	429a      	cmp	r2, r3
 8107e92:	d20b      	bcs.n	8107eac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8107e94:	683b      	ldr	r3, [r7, #0]
 8107e96:	681a      	ldr	r2, [r3, #0]
 8107e98:	697b      	ldr	r3, [r7, #20]
 8107e9a:	1ad2      	subs	r2, r2, r3
 8107e9c:	683b      	ldr	r3, [r7, #0]
 8107e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8107ea0:	6878      	ldr	r0, [r7, #4]
 8107ea2:	f7ff ff9d 	bl	8107de0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8107ea6:	2300      	movs	r3, #0
 8107ea8:	61fb      	str	r3, [r7, #28]
 8107eaa:	e004      	b.n	8107eb6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8107eac:	683b      	ldr	r3, [r7, #0]
 8107eae:	2200      	movs	r2, #0
 8107eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8107eb2:	2301      	movs	r3, #1
 8107eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8107eb6:	f7fe fd1f 	bl	81068f8 <vPortExitCritical>

	return xReturn;
 8107eba:	69fb      	ldr	r3, [r7, #28]
}
 8107ebc:	4618      	mov	r0, r3
 8107ebe:	3720      	adds	r7, #32
 8107ec0:	46bd      	mov	sp, r7
 8107ec2:	bd80      	pop	{r7, pc}
 8107ec4:	100049b4 	.word	0x100049b4
 8107ec8:	100049c8 	.word	0x100049c8

08107ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8107ecc:	b480      	push	{r7}
 8107ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8107ed0:	4b03      	ldr	r3, [pc, #12]	; (8107ee0 <vTaskMissedYield+0x14>)
 8107ed2:	2201      	movs	r2, #1
 8107ed4:	601a      	str	r2, [r3, #0]
}
 8107ed6:	bf00      	nop
 8107ed8:	46bd      	mov	sp, r7
 8107eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ede:	4770      	bx	lr
 8107ee0:	100049c4 	.word	0x100049c4

08107ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8107ee4:	b580      	push	{r7, lr}
 8107ee6:	b082      	sub	sp, #8
 8107ee8:	af00      	add	r7, sp, #0
 8107eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8107eec:	f000 f852 	bl	8107f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8107ef0:	4b06      	ldr	r3, [pc, #24]	; (8107f0c <prvIdleTask+0x28>)
 8107ef2:	681b      	ldr	r3, [r3, #0]
 8107ef4:	2b01      	cmp	r3, #1
 8107ef6:	d9f9      	bls.n	8107eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8107ef8:	4b05      	ldr	r3, [pc, #20]	; (8107f10 <prvIdleTask+0x2c>)
 8107efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107efe:	601a      	str	r2, [r3, #0]
 8107f00:	f3bf 8f4f 	dsb	sy
 8107f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8107f08:	e7f0      	b.n	8107eec <prvIdleTask+0x8>
 8107f0a:	bf00      	nop
 8107f0c:	100044e0 	.word	0x100044e0
 8107f10:	e000ed04 	.word	0xe000ed04

08107f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8107f14:	b580      	push	{r7, lr}
 8107f16:	b082      	sub	sp, #8
 8107f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107f1a:	2300      	movs	r3, #0
 8107f1c:	607b      	str	r3, [r7, #4]
 8107f1e:	e00c      	b.n	8107f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8107f20:	687a      	ldr	r2, [r7, #4]
 8107f22:	4613      	mov	r3, r2
 8107f24:	009b      	lsls	r3, r3, #2
 8107f26:	4413      	add	r3, r2
 8107f28:	009b      	lsls	r3, r3, #2
 8107f2a:	4a12      	ldr	r2, [pc, #72]	; (8107f74 <prvInitialiseTaskLists+0x60>)
 8107f2c:	4413      	add	r3, r2
 8107f2e:	4618      	mov	r0, r3
 8107f30:	f7fe fada 	bl	81064e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107f34:	687b      	ldr	r3, [r7, #4]
 8107f36:	3301      	adds	r3, #1
 8107f38:	607b      	str	r3, [r7, #4]
 8107f3a:	687b      	ldr	r3, [r7, #4]
 8107f3c:	2b37      	cmp	r3, #55	; 0x37
 8107f3e:	d9ef      	bls.n	8107f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8107f40:	480d      	ldr	r0, [pc, #52]	; (8107f78 <prvInitialiseTaskLists+0x64>)
 8107f42:	f7fe fad1 	bl	81064e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8107f46:	480d      	ldr	r0, [pc, #52]	; (8107f7c <prvInitialiseTaskLists+0x68>)
 8107f48:	f7fe face 	bl	81064e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8107f4c:	480c      	ldr	r0, [pc, #48]	; (8107f80 <prvInitialiseTaskLists+0x6c>)
 8107f4e:	f7fe facb 	bl	81064e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8107f52:	480c      	ldr	r0, [pc, #48]	; (8107f84 <prvInitialiseTaskLists+0x70>)
 8107f54:	f7fe fac8 	bl	81064e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8107f58:	480b      	ldr	r0, [pc, #44]	; (8107f88 <prvInitialiseTaskLists+0x74>)
 8107f5a:	f7fe fac5 	bl	81064e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8107f5e:	4b0b      	ldr	r3, [pc, #44]	; (8107f8c <prvInitialiseTaskLists+0x78>)
 8107f60:	4a05      	ldr	r2, [pc, #20]	; (8107f78 <prvInitialiseTaskLists+0x64>)
 8107f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8107f64:	4b0a      	ldr	r3, [pc, #40]	; (8107f90 <prvInitialiseTaskLists+0x7c>)
 8107f66:	4a05      	ldr	r2, [pc, #20]	; (8107f7c <prvInitialiseTaskLists+0x68>)
 8107f68:	601a      	str	r2, [r3, #0]
}
 8107f6a:	bf00      	nop
 8107f6c:	3708      	adds	r7, #8
 8107f6e:	46bd      	mov	sp, r7
 8107f70:	bd80      	pop	{r7, pc}
 8107f72:	bf00      	nop
 8107f74:	100044e0 	.word	0x100044e0
 8107f78:	10004940 	.word	0x10004940
 8107f7c:	10004954 	.word	0x10004954
 8107f80:	10004970 	.word	0x10004970
 8107f84:	10004984 	.word	0x10004984
 8107f88:	1000499c 	.word	0x1000499c
 8107f8c:	10004968 	.word	0x10004968
 8107f90:	1000496c 	.word	0x1000496c

08107f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8107f94:	b580      	push	{r7, lr}
 8107f96:	b082      	sub	sp, #8
 8107f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107f9a:	e019      	b.n	8107fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8107f9c:	f7fe fc7e 	bl	810689c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107fa0:	4b0f      	ldr	r3, [pc, #60]	; (8107fe0 <prvCheckTasksWaitingTermination+0x4c>)
 8107fa2:	68db      	ldr	r3, [r3, #12]
 8107fa4:	68db      	ldr	r3, [r3, #12]
 8107fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	3304      	adds	r3, #4
 8107fac:	4618      	mov	r0, r3
 8107fae:	f7fe fb25 	bl	81065fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8107fb2:	4b0c      	ldr	r3, [pc, #48]	; (8107fe4 <prvCheckTasksWaitingTermination+0x50>)
 8107fb4:	681b      	ldr	r3, [r3, #0]
 8107fb6:	3b01      	subs	r3, #1
 8107fb8:	4a0a      	ldr	r2, [pc, #40]	; (8107fe4 <prvCheckTasksWaitingTermination+0x50>)
 8107fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8107fbc:	4b0a      	ldr	r3, [pc, #40]	; (8107fe8 <prvCheckTasksWaitingTermination+0x54>)
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	3b01      	subs	r3, #1
 8107fc2:	4a09      	ldr	r2, [pc, #36]	; (8107fe8 <prvCheckTasksWaitingTermination+0x54>)
 8107fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8107fc6:	f7fe fc97 	bl	81068f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8107fca:	6878      	ldr	r0, [r7, #4]
 8107fcc:	f000 f80e 	bl	8107fec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8107fd0:	4b05      	ldr	r3, [pc, #20]	; (8107fe8 <prvCheckTasksWaitingTermination+0x54>)
 8107fd2:	681b      	ldr	r3, [r3, #0]
 8107fd4:	2b00      	cmp	r3, #0
 8107fd6:	d1e1      	bne.n	8107f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8107fd8:	bf00      	nop
 8107fda:	3708      	adds	r7, #8
 8107fdc:	46bd      	mov	sp, r7
 8107fde:	bd80      	pop	{r7, pc}
 8107fe0:	10004984 	.word	0x10004984
 8107fe4:	100049b0 	.word	0x100049b0
 8107fe8:	10004998 	.word	0x10004998

08107fec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8107fec:	b580      	push	{r7, lr}
 8107fee:	b084      	sub	sp, #16
 8107ff0:	af00      	add	r7, sp, #0
 8107ff2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8107ffa:	2b00      	cmp	r3, #0
 8107ffc:	d108      	bne.n	8108010 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108002:	4618      	mov	r0, r3
 8108004:	f7fe f95c 	bl	81062c0 <vPortFree>
				vPortFree( pxTCB );
 8108008:	6878      	ldr	r0, [r7, #4]
 810800a:	f7fe f959 	bl	81062c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810800e:	e017      	b.n	8108040 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8108010:	687b      	ldr	r3, [r7, #4]
 8108012:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8108016:	2b01      	cmp	r3, #1
 8108018:	d103      	bne.n	8108022 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810801a:	6878      	ldr	r0, [r7, #4]
 810801c:	f7fe f950 	bl	81062c0 <vPortFree>
	}
 8108020:	e00e      	b.n	8108040 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8108028:	2b02      	cmp	r3, #2
 810802a:	d009      	beq.n	8108040 <prvDeleteTCB+0x54>
 810802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108030:	f383 8811 	msr	BASEPRI, r3
 8108034:	f3bf 8f6f 	isb	sy
 8108038:	f3bf 8f4f 	dsb	sy
 810803c:	60fb      	str	r3, [r7, #12]
 810803e:	e7fe      	b.n	810803e <prvDeleteTCB+0x52>
	}
 8108040:	bf00      	nop
 8108042:	3710      	adds	r7, #16
 8108044:	46bd      	mov	sp, r7
 8108046:	bd80      	pop	{r7, pc}

08108048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8108048:	b480      	push	{r7}
 810804a:	b083      	sub	sp, #12
 810804c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810804e:	4b0c      	ldr	r3, [pc, #48]	; (8108080 <prvResetNextTaskUnblockTime+0x38>)
 8108050:	681b      	ldr	r3, [r3, #0]
 8108052:	681b      	ldr	r3, [r3, #0]
 8108054:	2b00      	cmp	r3, #0
 8108056:	d104      	bne.n	8108062 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8108058:	4b0a      	ldr	r3, [pc, #40]	; (8108084 <prvResetNextTaskUnblockTime+0x3c>)
 810805a:	f04f 32ff 	mov.w	r2, #4294967295
 810805e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8108060:	e008      	b.n	8108074 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108062:	4b07      	ldr	r3, [pc, #28]	; (8108080 <prvResetNextTaskUnblockTime+0x38>)
 8108064:	681b      	ldr	r3, [r3, #0]
 8108066:	68db      	ldr	r3, [r3, #12]
 8108068:	68db      	ldr	r3, [r3, #12]
 810806a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810806c:	687b      	ldr	r3, [r7, #4]
 810806e:	685b      	ldr	r3, [r3, #4]
 8108070:	4a04      	ldr	r2, [pc, #16]	; (8108084 <prvResetNextTaskUnblockTime+0x3c>)
 8108072:	6013      	str	r3, [r2, #0]
}
 8108074:	bf00      	nop
 8108076:	370c      	adds	r7, #12
 8108078:	46bd      	mov	sp, r7
 810807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810807e:	4770      	bx	lr
 8108080:	10004968 	.word	0x10004968
 8108084:	100049d0 	.word	0x100049d0

08108088 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8108088:	b480      	push	{r7}
 810808a:	b083      	sub	sp, #12
 810808c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810808e:	4b0b      	ldr	r3, [pc, #44]	; (81080bc <xTaskGetSchedulerState+0x34>)
 8108090:	681b      	ldr	r3, [r3, #0]
 8108092:	2b00      	cmp	r3, #0
 8108094:	d102      	bne.n	810809c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8108096:	2301      	movs	r3, #1
 8108098:	607b      	str	r3, [r7, #4]
 810809a:	e008      	b.n	81080ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810809c:	4b08      	ldr	r3, [pc, #32]	; (81080c0 <xTaskGetSchedulerState+0x38>)
 810809e:	681b      	ldr	r3, [r3, #0]
 81080a0:	2b00      	cmp	r3, #0
 81080a2:	d102      	bne.n	81080aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81080a4:	2302      	movs	r3, #2
 81080a6:	607b      	str	r3, [r7, #4]
 81080a8:	e001      	b.n	81080ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81080aa:	2300      	movs	r3, #0
 81080ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81080ae:	687b      	ldr	r3, [r7, #4]
	}
 81080b0:	4618      	mov	r0, r3
 81080b2:	370c      	adds	r7, #12
 81080b4:	46bd      	mov	sp, r7
 81080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080ba:	4770      	bx	lr
 81080bc:	100049bc 	.word	0x100049bc
 81080c0:	100049d8 	.word	0x100049d8

081080c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81080c4:	b580      	push	{r7, lr}
 81080c6:	b086      	sub	sp, #24
 81080c8:	af00      	add	r7, sp, #0
 81080ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81080d0:	2300      	movs	r3, #0
 81080d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	2b00      	cmp	r3, #0
 81080d8:	d054      	beq.n	8108184 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81080da:	4b2d      	ldr	r3, [pc, #180]	; (8108190 <xTaskPriorityDisinherit+0xcc>)
 81080dc:	681b      	ldr	r3, [r3, #0]
 81080de:	693a      	ldr	r2, [r7, #16]
 81080e0:	429a      	cmp	r2, r3
 81080e2:	d009      	beq.n	81080f8 <xTaskPriorityDisinherit+0x34>
 81080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81080e8:	f383 8811 	msr	BASEPRI, r3
 81080ec:	f3bf 8f6f 	isb	sy
 81080f0:	f3bf 8f4f 	dsb	sy
 81080f4:	60fb      	str	r3, [r7, #12]
 81080f6:	e7fe      	b.n	81080f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 81080f8:	693b      	ldr	r3, [r7, #16]
 81080fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81080fc:	2b00      	cmp	r3, #0
 81080fe:	d109      	bne.n	8108114 <xTaskPriorityDisinherit+0x50>
 8108100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108104:	f383 8811 	msr	BASEPRI, r3
 8108108:	f3bf 8f6f 	isb	sy
 810810c:	f3bf 8f4f 	dsb	sy
 8108110:	60bb      	str	r3, [r7, #8]
 8108112:	e7fe      	b.n	8108112 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8108114:	693b      	ldr	r3, [r7, #16]
 8108116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108118:	1e5a      	subs	r2, r3, #1
 810811a:	693b      	ldr	r3, [r7, #16]
 810811c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810811e:	693b      	ldr	r3, [r7, #16]
 8108120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108122:	693b      	ldr	r3, [r7, #16]
 8108124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108126:	429a      	cmp	r2, r3
 8108128:	d02c      	beq.n	8108184 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810812a:	693b      	ldr	r3, [r7, #16]
 810812c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810812e:	2b00      	cmp	r3, #0
 8108130:	d128      	bne.n	8108184 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8108132:	693b      	ldr	r3, [r7, #16]
 8108134:	3304      	adds	r3, #4
 8108136:	4618      	mov	r0, r3
 8108138:	f7fe fa60 	bl	81065fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810813c:	693b      	ldr	r3, [r7, #16]
 810813e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108140:	693b      	ldr	r3, [r7, #16]
 8108142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108144:	693b      	ldr	r3, [r7, #16]
 8108146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108148:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810814c:	693b      	ldr	r3, [r7, #16]
 810814e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8108150:	693b      	ldr	r3, [r7, #16]
 8108152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108154:	4b0f      	ldr	r3, [pc, #60]	; (8108194 <xTaskPriorityDisinherit+0xd0>)
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	429a      	cmp	r2, r3
 810815a:	d903      	bls.n	8108164 <xTaskPriorityDisinherit+0xa0>
 810815c:	693b      	ldr	r3, [r7, #16]
 810815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108160:	4a0c      	ldr	r2, [pc, #48]	; (8108194 <xTaskPriorityDisinherit+0xd0>)
 8108162:	6013      	str	r3, [r2, #0]
 8108164:	693b      	ldr	r3, [r7, #16]
 8108166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108168:	4613      	mov	r3, r2
 810816a:	009b      	lsls	r3, r3, #2
 810816c:	4413      	add	r3, r2
 810816e:	009b      	lsls	r3, r3, #2
 8108170:	4a09      	ldr	r2, [pc, #36]	; (8108198 <xTaskPriorityDisinherit+0xd4>)
 8108172:	441a      	add	r2, r3
 8108174:	693b      	ldr	r3, [r7, #16]
 8108176:	3304      	adds	r3, #4
 8108178:	4619      	mov	r1, r3
 810817a:	4610      	mov	r0, r2
 810817c:	f7fe f9e1 	bl	8106542 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8108180:	2301      	movs	r3, #1
 8108182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8108184:	697b      	ldr	r3, [r7, #20]
	}
 8108186:	4618      	mov	r0, r3
 8108188:	3718      	adds	r7, #24
 810818a:	46bd      	mov	sp, r7
 810818c:	bd80      	pop	{r7, pc}
 810818e:	bf00      	nop
 8108190:	100044dc 	.word	0x100044dc
 8108194:	100049b8 	.word	0x100049b8
 8108198:	100044e0 	.word	0x100044e0

0810819c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810819c:	b580      	push	{r7, lr}
 810819e:	b084      	sub	sp, #16
 81081a0:	af00      	add	r7, sp, #0
 81081a2:	6078      	str	r0, [r7, #4]
 81081a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81081a6:	4b21      	ldr	r3, [pc, #132]	; (810822c <prvAddCurrentTaskToDelayedList+0x90>)
 81081a8:	681b      	ldr	r3, [r3, #0]
 81081aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81081ac:	4b20      	ldr	r3, [pc, #128]	; (8108230 <prvAddCurrentTaskToDelayedList+0x94>)
 81081ae:	681b      	ldr	r3, [r3, #0]
 81081b0:	3304      	adds	r3, #4
 81081b2:	4618      	mov	r0, r3
 81081b4:	f7fe fa22 	bl	81065fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81081b8:	687b      	ldr	r3, [r7, #4]
 81081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81081be:	d10a      	bne.n	81081d6 <prvAddCurrentTaskToDelayedList+0x3a>
 81081c0:	683b      	ldr	r3, [r7, #0]
 81081c2:	2b00      	cmp	r3, #0
 81081c4:	d007      	beq.n	81081d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81081c6:	4b1a      	ldr	r3, [pc, #104]	; (8108230 <prvAddCurrentTaskToDelayedList+0x94>)
 81081c8:	681b      	ldr	r3, [r3, #0]
 81081ca:	3304      	adds	r3, #4
 81081cc:	4619      	mov	r1, r3
 81081ce:	4819      	ldr	r0, [pc, #100]	; (8108234 <prvAddCurrentTaskToDelayedList+0x98>)
 81081d0:	f7fe f9b7 	bl	8106542 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81081d4:	e026      	b.n	8108224 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81081d6:	68fa      	ldr	r2, [r7, #12]
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	4413      	add	r3, r2
 81081dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81081de:	4b14      	ldr	r3, [pc, #80]	; (8108230 <prvAddCurrentTaskToDelayedList+0x94>)
 81081e0:	681b      	ldr	r3, [r3, #0]
 81081e2:	68ba      	ldr	r2, [r7, #8]
 81081e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81081e6:	68ba      	ldr	r2, [r7, #8]
 81081e8:	68fb      	ldr	r3, [r7, #12]
 81081ea:	429a      	cmp	r2, r3
 81081ec:	d209      	bcs.n	8108202 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81081ee:	4b12      	ldr	r3, [pc, #72]	; (8108238 <prvAddCurrentTaskToDelayedList+0x9c>)
 81081f0:	681a      	ldr	r2, [r3, #0]
 81081f2:	4b0f      	ldr	r3, [pc, #60]	; (8108230 <prvAddCurrentTaskToDelayedList+0x94>)
 81081f4:	681b      	ldr	r3, [r3, #0]
 81081f6:	3304      	adds	r3, #4
 81081f8:	4619      	mov	r1, r3
 81081fa:	4610      	mov	r0, r2
 81081fc:	f7fe f9c5 	bl	810658a <vListInsert>
}
 8108200:	e010      	b.n	8108224 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8108202:	4b0e      	ldr	r3, [pc, #56]	; (810823c <prvAddCurrentTaskToDelayedList+0xa0>)
 8108204:	681a      	ldr	r2, [r3, #0]
 8108206:	4b0a      	ldr	r3, [pc, #40]	; (8108230 <prvAddCurrentTaskToDelayedList+0x94>)
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	3304      	adds	r3, #4
 810820c:	4619      	mov	r1, r3
 810820e:	4610      	mov	r0, r2
 8108210:	f7fe f9bb 	bl	810658a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8108214:	4b0a      	ldr	r3, [pc, #40]	; (8108240 <prvAddCurrentTaskToDelayedList+0xa4>)
 8108216:	681b      	ldr	r3, [r3, #0]
 8108218:	68ba      	ldr	r2, [r7, #8]
 810821a:	429a      	cmp	r2, r3
 810821c:	d202      	bcs.n	8108224 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810821e:	4a08      	ldr	r2, [pc, #32]	; (8108240 <prvAddCurrentTaskToDelayedList+0xa4>)
 8108220:	68bb      	ldr	r3, [r7, #8]
 8108222:	6013      	str	r3, [r2, #0]
}
 8108224:	bf00      	nop
 8108226:	3710      	adds	r7, #16
 8108228:	46bd      	mov	sp, r7
 810822a:	bd80      	pop	{r7, pc}
 810822c:	100049b4 	.word	0x100049b4
 8108230:	100044dc 	.word	0x100044dc
 8108234:	1000499c 	.word	0x1000499c
 8108238:	1000496c 	.word	0x1000496c
 810823c:	10004968 	.word	0x10004968
 8108240:	100049d0 	.word	0x100049d0

08108244 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8108244:	b580      	push	{r7, lr}
 8108246:	b08a      	sub	sp, #40	; 0x28
 8108248:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810824a:	2300      	movs	r3, #0
 810824c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810824e:	f000 faff 	bl	8108850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8108252:	4b1c      	ldr	r3, [pc, #112]	; (81082c4 <xTimerCreateTimerTask+0x80>)
 8108254:	681b      	ldr	r3, [r3, #0]
 8108256:	2b00      	cmp	r3, #0
 8108258:	d021      	beq.n	810829e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810825a:	2300      	movs	r3, #0
 810825c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810825e:	2300      	movs	r3, #0
 8108260:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8108262:	1d3a      	adds	r2, r7, #4
 8108264:	f107 0108 	add.w	r1, r7, #8
 8108268:	f107 030c 	add.w	r3, r7, #12
 810826c:	4618      	mov	r0, r3
 810826e:	f7fd ff4b 	bl	8106108 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8108272:	6879      	ldr	r1, [r7, #4]
 8108274:	68bb      	ldr	r3, [r7, #8]
 8108276:	68fa      	ldr	r2, [r7, #12]
 8108278:	9202      	str	r2, [sp, #8]
 810827a:	9301      	str	r3, [sp, #4]
 810827c:	2302      	movs	r3, #2
 810827e:	9300      	str	r3, [sp, #0]
 8108280:	2300      	movs	r3, #0
 8108282:	460a      	mov	r2, r1
 8108284:	4910      	ldr	r1, [pc, #64]	; (81082c8 <xTimerCreateTimerTask+0x84>)
 8108286:	4811      	ldr	r0, [pc, #68]	; (81082cc <xTimerCreateTimerTask+0x88>)
 8108288:	f7ff f8f6 	bl	8107478 <xTaskCreateStatic>
 810828c:	4602      	mov	r2, r0
 810828e:	4b10      	ldr	r3, [pc, #64]	; (81082d0 <xTimerCreateTimerTask+0x8c>)
 8108290:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8108292:	4b0f      	ldr	r3, [pc, #60]	; (81082d0 <xTimerCreateTimerTask+0x8c>)
 8108294:	681b      	ldr	r3, [r3, #0]
 8108296:	2b00      	cmp	r3, #0
 8108298:	d001      	beq.n	810829e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810829a:	2301      	movs	r3, #1
 810829c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810829e:	697b      	ldr	r3, [r7, #20]
 81082a0:	2b00      	cmp	r3, #0
 81082a2:	d109      	bne.n	81082b8 <xTimerCreateTimerTask+0x74>
 81082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81082a8:	f383 8811 	msr	BASEPRI, r3
 81082ac:	f3bf 8f6f 	isb	sy
 81082b0:	f3bf 8f4f 	dsb	sy
 81082b4:	613b      	str	r3, [r7, #16]
 81082b6:	e7fe      	b.n	81082b6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 81082b8:	697b      	ldr	r3, [r7, #20]
}
 81082ba:	4618      	mov	r0, r3
 81082bc:	3718      	adds	r7, #24
 81082be:	46bd      	mov	sp, r7
 81082c0:	bd80      	pop	{r7, pc}
 81082c2:	bf00      	nop
 81082c4:	10004a0c 	.word	0x10004a0c
 81082c8:	0810a3bc 	.word	0x0810a3bc
 81082cc:	08108405 	.word	0x08108405
 81082d0:	10004a10 	.word	0x10004a10

081082d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81082d4:	b580      	push	{r7, lr}
 81082d6:	b08a      	sub	sp, #40	; 0x28
 81082d8:	af00      	add	r7, sp, #0
 81082da:	60f8      	str	r0, [r7, #12]
 81082dc:	60b9      	str	r1, [r7, #8]
 81082de:	607a      	str	r2, [r7, #4]
 81082e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81082e2:	2300      	movs	r3, #0
 81082e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81082e6:	68fb      	ldr	r3, [r7, #12]
 81082e8:	2b00      	cmp	r3, #0
 81082ea:	d109      	bne.n	8108300 <xTimerGenericCommand+0x2c>
 81082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81082f0:	f383 8811 	msr	BASEPRI, r3
 81082f4:	f3bf 8f6f 	isb	sy
 81082f8:	f3bf 8f4f 	dsb	sy
 81082fc:	623b      	str	r3, [r7, #32]
 81082fe:	e7fe      	b.n	81082fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8108300:	4b19      	ldr	r3, [pc, #100]	; (8108368 <xTimerGenericCommand+0x94>)
 8108302:	681b      	ldr	r3, [r3, #0]
 8108304:	2b00      	cmp	r3, #0
 8108306:	d02a      	beq.n	810835e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8108308:	68bb      	ldr	r3, [r7, #8]
 810830a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810830c:	687b      	ldr	r3, [r7, #4]
 810830e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8108310:	68fb      	ldr	r3, [r7, #12]
 8108312:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8108314:	68bb      	ldr	r3, [r7, #8]
 8108316:	2b05      	cmp	r3, #5
 8108318:	dc18      	bgt.n	810834c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810831a:	f7ff feb5 	bl	8108088 <xTaskGetSchedulerState>
 810831e:	4603      	mov	r3, r0
 8108320:	2b02      	cmp	r3, #2
 8108322:	d109      	bne.n	8108338 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8108324:	4b10      	ldr	r3, [pc, #64]	; (8108368 <xTimerGenericCommand+0x94>)
 8108326:	6818      	ldr	r0, [r3, #0]
 8108328:	f107 0110 	add.w	r1, r7, #16
 810832c:	2300      	movs	r3, #0
 810832e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108330:	f7fe fccc 	bl	8106ccc <xQueueGenericSend>
 8108334:	6278      	str	r0, [r7, #36]	; 0x24
 8108336:	e012      	b.n	810835e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8108338:	4b0b      	ldr	r3, [pc, #44]	; (8108368 <xTimerGenericCommand+0x94>)
 810833a:	6818      	ldr	r0, [r3, #0]
 810833c:	f107 0110 	add.w	r1, r7, #16
 8108340:	2300      	movs	r3, #0
 8108342:	2200      	movs	r2, #0
 8108344:	f7fe fcc2 	bl	8106ccc <xQueueGenericSend>
 8108348:	6278      	str	r0, [r7, #36]	; 0x24
 810834a:	e008      	b.n	810835e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810834c:	4b06      	ldr	r3, [pc, #24]	; (8108368 <xTimerGenericCommand+0x94>)
 810834e:	6818      	ldr	r0, [r3, #0]
 8108350:	f107 0110 	add.w	r1, r7, #16
 8108354:	2300      	movs	r3, #0
 8108356:	683a      	ldr	r2, [r7, #0]
 8108358:	f7fe fdb2 	bl	8106ec0 <xQueueGenericSendFromISR>
 810835c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8108360:	4618      	mov	r0, r3
 8108362:	3728      	adds	r7, #40	; 0x28
 8108364:	46bd      	mov	sp, r7
 8108366:	bd80      	pop	{r7, pc}
 8108368:	10004a0c 	.word	0x10004a0c

0810836c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810836c:	b580      	push	{r7, lr}
 810836e:	b088      	sub	sp, #32
 8108370:	af02      	add	r7, sp, #8
 8108372:	6078      	str	r0, [r7, #4]
 8108374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108376:	4b22      	ldr	r3, [pc, #136]	; (8108400 <prvProcessExpiredTimer+0x94>)
 8108378:	681b      	ldr	r3, [r3, #0]
 810837a:	68db      	ldr	r3, [r3, #12]
 810837c:	68db      	ldr	r3, [r3, #12]
 810837e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108380:	697b      	ldr	r3, [r7, #20]
 8108382:	3304      	adds	r3, #4
 8108384:	4618      	mov	r0, r3
 8108386:	f7fe f939 	bl	81065fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810838a:	697b      	ldr	r3, [r7, #20]
 810838c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108390:	f003 0304 	and.w	r3, r3, #4
 8108394:	2b00      	cmp	r3, #0
 8108396:	d021      	beq.n	81083dc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8108398:	697b      	ldr	r3, [r7, #20]
 810839a:	699a      	ldr	r2, [r3, #24]
 810839c:	687b      	ldr	r3, [r7, #4]
 810839e:	18d1      	adds	r1, r2, r3
 81083a0:	687b      	ldr	r3, [r7, #4]
 81083a2:	683a      	ldr	r2, [r7, #0]
 81083a4:	6978      	ldr	r0, [r7, #20]
 81083a6:	f000 f8d1 	bl	810854c <prvInsertTimerInActiveList>
 81083aa:	4603      	mov	r3, r0
 81083ac:	2b00      	cmp	r3, #0
 81083ae:	d01e      	beq.n	81083ee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81083b0:	2300      	movs	r3, #0
 81083b2:	9300      	str	r3, [sp, #0]
 81083b4:	2300      	movs	r3, #0
 81083b6:	687a      	ldr	r2, [r7, #4]
 81083b8:	2100      	movs	r1, #0
 81083ba:	6978      	ldr	r0, [r7, #20]
 81083bc:	f7ff ff8a 	bl	81082d4 <xTimerGenericCommand>
 81083c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81083c2:	693b      	ldr	r3, [r7, #16]
 81083c4:	2b00      	cmp	r3, #0
 81083c6:	d112      	bne.n	81083ee <prvProcessExpiredTimer+0x82>
 81083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81083cc:	f383 8811 	msr	BASEPRI, r3
 81083d0:	f3bf 8f6f 	isb	sy
 81083d4:	f3bf 8f4f 	dsb	sy
 81083d8:	60fb      	str	r3, [r7, #12]
 81083da:	e7fe      	b.n	81083da <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81083dc:	697b      	ldr	r3, [r7, #20]
 81083de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81083e2:	f023 0301 	bic.w	r3, r3, #1
 81083e6:	b2da      	uxtb	r2, r3
 81083e8:	697b      	ldr	r3, [r7, #20]
 81083ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81083ee:	697b      	ldr	r3, [r7, #20]
 81083f0:	6a1b      	ldr	r3, [r3, #32]
 81083f2:	6978      	ldr	r0, [r7, #20]
 81083f4:	4798      	blx	r3
}
 81083f6:	bf00      	nop
 81083f8:	3718      	adds	r7, #24
 81083fa:	46bd      	mov	sp, r7
 81083fc:	bd80      	pop	{r7, pc}
 81083fe:	bf00      	nop
 8108400:	10004a04 	.word	0x10004a04

08108404 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8108404:	b580      	push	{r7, lr}
 8108406:	b084      	sub	sp, #16
 8108408:	af00      	add	r7, sp, #0
 810840a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810840c:	f107 0308 	add.w	r3, r7, #8
 8108410:	4618      	mov	r0, r3
 8108412:	f000 f857 	bl	81084c4 <prvGetNextExpireTime>
 8108416:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8108418:	68bb      	ldr	r3, [r7, #8]
 810841a:	4619      	mov	r1, r3
 810841c:	68f8      	ldr	r0, [r7, #12]
 810841e:	f000 f803 	bl	8108428 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8108422:	f000 f8d5 	bl	81085d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8108426:	e7f1      	b.n	810840c <prvTimerTask+0x8>

08108428 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8108428:	b580      	push	{r7, lr}
 810842a:	b084      	sub	sp, #16
 810842c:	af00      	add	r7, sp, #0
 810842e:	6078      	str	r0, [r7, #4]
 8108430:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8108432:	f7ff fa57 	bl	81078e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8108436:	f107 0308 	add.w	r3, r7, #8
 810843a:	4618      	mov	r0, r3
 810843c:	f000 f866 	bl	810850c <prvSampleTimeNow>
 8108440:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8108442:	68bb      	ldr	r3, [r7, #8]
 8108444:	2b00      	cmp	r3, #0
 8108446:	d130      	bne.n	81084aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8108448:	683b      	ldr	r3, [r7, #0]
 810844a:	2b00      	cmp	r3, #0
 810844c:	d10a      	bne.n	8108464 <prvProcessTimerOrBlockTask+0x3c>
 810844e:	687a      	ldr	r2, [r7, #4]
 8108450:	68fb      	ldr	r3, [r7, #12]
 8108452:	429a      	cmp	r2, r3
 8108454:	d806      	bhi.n	8108464 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8108456:	f7ff fa53 	bl	8107900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810845a:	68f9      	ldr	r1, [r7, #12]
 810845c:	6878      	ldr	r0, [r7, #4]
 810845e:	f7ff ff85 	bl	810836c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8108462:	e024      	b.n	81084ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8108464:	683b      	ldr	r3, [r7, #0]
 8108466:	2b00      	cmp	r3, #0
 8108468:	d008      	beq.n	810847c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810846a:	4b13      	ldr	r3, [pc, #76]	; (81084b8 <prvProcessTimerOrBlockTask+0x90>)
 810846c:	681b      	ldr	r3, [r3, #0]
 810846e:	681b      	ldr	r3, [r3, #0]
 8108470:	2b00      	cmp	r3, #0
 8108472:	d101      	bne.n	8108478 <prvProcessTimerOrBlockTask+0x50>
 8108474:	2301      	movs	r3, #1
 8108476:	e000      	b.n	810847a <prvProcessTimerOrBlockTask+0x52>
 8108478:	2300      	movs	r3, #0
 810847a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810847c:	4b0f      	ldr	r3, [pc, #60]	; (81084bc <prvProcessTimerOrBlockTask+0x94>)
 810847e:	6818      	ldr	r0, [r3, #0]
 8108480:	687a      	ldr	r2, [r7, #4]
 8108482:	68fb      	ldr	r3, [r7, #12]
 8108484:	1ad3      	subs	r3, r2, r3
 8108486:	683a      	ldr	r2, [r7, #0]
 8108488:	4619      	mov	r1, r3
 810848a:	f7fe ffc1 	bl	8107410 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810848e:	f7ff fa37 	bl	8107900 <xTaskResumeAll>
 8108492:	4603      	mov	r3, r0
 8108494:	2b00      	cmp	r3, #0
 8108496:	d10a      	bne.n	81084ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8108498:	4b09      	ldr	r3, [pc, #36]	; (81084c0 <prvProcessTimerOrBlockTask+0x98>)
 810849a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810849e:	601a      	str	r2, [r3, #0]
 81084a0:	f3bf 8f4f 	dsb	sy
 81084a4:	f3bf 8f6f 	isb	sy
}
 81084a8:	e001      	b.n	81084ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81084aa:	f7ff fa29 	bl	8107900 <xTaskResumeAll>
}
 81084ae:	bf00      	nop
 81084b0:	3710      	adds	r7, #16
 81084b2:	46bd      	mov	sp, r7
 81084b4:	bd80      	pop	{r7, pc}
 81084b6:	bf00      	nop
 81084b8:	10004a08 	.word	0x10004a08
 81084bc:	10004a0c 	.word	0x10004a0c
 81084c0:	e000ed04 	.word	0xe000ed04

081084c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81084c4:	b480      	push	{r7}
 81084c6:	b085      	sub	sp, #20
 81084c8:	af00      	add	r7, sp, #0
 81084ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81084cc:	4b0e      	ldr	r3, [pc, #56]	; (8108508 <prvGetNextExpireTime+0x44>)
 81084ce:	681b      	ldr	r3, [r3, #0]
 81084d0:	681b      	ldr	r3, [r3, #0]
 81084d2:	2b00      	cmp	r3, #0
 81084d4:	d101      	bne.n	81084da <prvGetNextExpireTime+0x16>
 81084d6:	2201      	movs	r2, #1
 81084d8:	e000      	b.n	81084dc <prvGetNextExpireTime+0x18>
 81084da:	2200      	movs	r2, #0
 81084dc:	687b      	ldr	r3, [r7, #4]
 81084de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81084e0:	687b      	ldr	r3, [r7, #4]
 81084e2:	681b      	ldr	r3, [r3, #0]
 81084e4:	2b00      	cmp	r3, #0
 81084e6:	d105      	bne.n	81084f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81084e8:	4b07      	ldr	r3, [pc, #28]	; (8108508 <prvGetNextExpireTime+0x44>)
 81084ea:	681b      	ldr	r3, [r3, #0]
 81084ec:	68db      	ldr	r3, [r3, #12]
 81084ee:	681b      	ldr	r3, [r3, #0]
 81084f0:	60fb      	str	r3, [r7, #12]
 81084f2:	e001      	b.n	81084f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 81084f4:	2300      	movs	r3, #0
 81084f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 81084f8:	68fb      	ldr	r3, [r7, #12]
}
 81084fa:	4618      	mov	r0, r3
 81084fc:	3714      	adds	r7, #20
 81084fe:	46bd      	mov	sp, r7
 8108500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108504:	4770      	bx	lr
 8108506:	bf00      	nop
 8108508:	10004a04 	.word	0x10004a04

0810850c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810850c:	b580      	push	{r7, lr}
 810850e:	b084      	sub	sp, #16
 8108510:	af00      	add	r7, sp, #0
 8108512:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8108514:	f7ff fa90 	bl	8107a38 <xTaskGetTickCount>
 8108518:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810851a:	4b0b      	ldr	r3, [pc, #44]	; (8108548 <prvSampleTimeNow+0x3c>)
 810851c:	681b      	ldr	r3, [r3, #0]
 810851e:	68fa      	ldr	r2, [r7, #12]
 8108520:	429a      	cmp	r2, r3
 8108522:	d205      	bcs.n	8108530 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8108524:	f000 f930 	bl	8108788 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8108528:	687b      	ldr	r3, [r7, #4]
 810852a:	2201      	movs	r2, #1
 810852c:	601a      	str	r2, [r3, #0]
 810852e:	e002      	b.n	8108536 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8108530:	687b      	ldr	r3, [r7, #4]
 8108532:	2200      	movs	r2, #0
 8108534:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8108536:	4a04      	ldr	r2, [pc, #16]	; (8108548 <prvSampleTimeNow+0x3c>)
 8108538:	68fb      	ldr	r3, [r7, #12]
 810853a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810853c:	68fb      	ldr	r3, [r7, #12]
}
 810853e:	4618      	mov	r0, r3
 8108540:	3710      	adds	r7, #16
 8108542:	46bd      	mov	sp, r7
 8108544:	bd80      	pop	{r7, pc}
 8108546:	bf00      	nop
 8108548:	10004a14 	.word	0x10004a14

0810854c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810854c:	b580      	push	{r7, lr}
 810854e:	b086      	sub	sp, #24
 8108550:	af00      	add	r7, sp, #0
 8108552:	60f8      	str	r0, [r7, #12]
 8108554:	60b9      	str	r1, [r7, #8]
 8108556:	607a      	str	r2, [r7, #4]
 8108558:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810855a:	2300      	movs	r3, #0
 810855c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810855e:	68fb      	ldr	r3, [r7, #12]
 8108560:	68ba      	ldr	r2, [r7, #8]
 8108562:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8108564:	68fb      	ldr	r3, [r7, #12]
 8108566:	68fa      	ldr	r2, [r7, #12]
 8108568:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810856a:	68ba      	ldr	r2, [r7, #8]
 810856c:	687b      	ldr	r3, [r7, #4]
 810856e:	429a      	cmp	r2, r3
 8108570:	d812      	bhi.n	8108598 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108572:	687a      	ldr	r2, [r7, #4]
 8108574:	683b      	ldr	r3, [r7, #0]
 8108576:	1ad2      	subs	r2, r2, r3
 8108578:	68fb      	ldr	r3, [r7, #12]
 810857a:	699b      	ldr	r3, [r3, #24]
 810857c:	429a      	cmp	r2, r3
 810857e:	d302      	bcc.n	8108586 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8108580:	2301      	movs	r3, #1
 8108582:	617b      	str	r3, [r7, #20]
 8108584:	e01b      	b.n	81085be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8108586:	4b10      	ldr	r3, [pc, #64]	; (81085c8 <prvInsertTimerInActiveList+0x7c>)
 8108588:	681a      	ldr	r2, [r3, #0]
 810858a:	68fb      	ldr	r3, [r7, #12]
 810858c:	3304      	adds	r3, #4
 810858e:	4619      	mov	r1, r3
 8108590:	4610      	mov	r0, r2
 8108592:	f7fd fffa 	bl	810658a <vListInsert>
 8108596:	e012      	b.n	81085be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8108598:	687a      	ldr	r2, [r7, #4]
 810859a:	683b      	ldr	r3, [r7, #0]
 810859c:	429a      	cmp	r2, r3
 810859e:	d206      	bcs.n	81085ae <prvInsertTimerInActiveList+0x62>
 81085a0:	68ba      	ldr	r2, [r7, #8]
 81085a2:	683b      	ldr	r3, [r7, #0]
 81085a4:	429a      	cmp	r2, r3
 81085a6:	d302      	bcc.n	81085ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81085a8:	2301      	movs	r3, #1
 81085aa:	617b      	str	r3, [r7, #20]
 81085ac:	e007      	b.n	81085be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81085ae:	4b07      	ldr	r3, [pc, #28]	; (81085cc <prvInsertTimerInActiveList+0x80>)
 81085b0:	681a      	ldr	r2, [r3, #0]
 81085b2:	68fb      	ldr	r3, [r7, #12]
 81085b4:	3304      	adds	r3, #4
 81085b6:	4619      	mov	r1, r3
 81085b8:	4610      	mov	r0, r2
 81085ba:	f7fd ffe6 	bl	810658a <vListInsert>
		}
	}

	return xProcessTimerNow;
 81085be:	697b      	ldr	r3, [r7, #20]
}
 81085c0:	4618      	mov	r0, r3
 81085c2:	3718      	adds	r7, #24
 81085c4:	46bd      	mov	sp, r7
 81085c6:	bd80      	pop	{r7, pc}
 81085c8:	10004a08 	.word	0x10004a08
 81085cc:	10004a04 	.word	0x10004a04

081085d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81085d0:	b580      	push	{r7, lr}
 81085d2:	b08e      	sub	sp, #56	; 0x38
 81085d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81085d6:	e0c6      	b.n	8108766 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81085d8:	687b      	ldr	r3, [r7, #4]
 81085da:	2b00      	cmp	r3, #0
 81085dc:	da17      	bge.n	810860e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81085de:	1d3b      	adds	r3, r7, #4
 81085e0:	3304      	adds	r3, #4
 81085e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81085e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81085e6:	2b00      	cmp	r3, #0
 81085e8:	d109      	bne.n	81085fe <prvProcessReceivedCommands+0x2e>
 81085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 81085ee:	f383 8811 	msr	BASEPRI, r3
 81085f2:	f3bf 8f6f 	isb	sy
 81085f6:	f3bf 8f4f 	dsb	sy
 81085fa:	61fb      	str	r3, [r7, #28]
 81085fc:	e7fe      	b.n	81085fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 81085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108600:	681b      	ldr	r3, [r3, #0]
 8108602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108604:	6850      	ldr	r0, [r2, #4]
 8108606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108608:	6892      	ldr	r2, [r2, #8]
 810860a:	4611      	mov	r1, r2
 810860c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810860e:	687b      	ldr	r3, [r7, #4]
 8108610:	2b00      	cmp	r3, #0
 8108612:	f2c0 80a7 	blt.w	8108764 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8108616:	68fb      	ldr	r3, [r7, #12]
 8108618:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810861c:	695b      	ldr	r3, [r3, #20]
 810861e:	2b00      	cmp	r3, #0
 8108620:	d004      	beq.n	810862c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108624:	3304      	adds	r3, #4
 8108626:	4618      	mov	r0, r3
 8108628:	f7fd ffe8 	bl	81065fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810862c:	463b      	mov	r3, r7
 810862e:	4618      	mov	r0, r3
 8108630:	f7ff ff6c 	bl	810850c <prvSampleTimeNow>
 8108634:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8108636:	687b      	ldr	r3, [r7, #4]
 8108638:	2b09      	cmp	r3, #9
 810863a:	f200 8094 	bhi.w	8108766 <prvProcessReceivedCommands+0x196>
 810863e:	a201      	add	r2, pc, #4	; (adr r2, 8108644 <prvProcessReceivedCommands+0x74>)
 8108640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108644:	0810866d 	.word	0x0810866d
 8108648:	0810866d 	.word	0x0810866d
 810864c:	0810866d 	.word	0x0810866d
 8108650:	081086df 	.word	0x081086df
 8108654:	081086f3 	.word	0x081086f3
 8108658:	0810873b 	.word	0x0810873b
 810865c:	0810866d 	.word	0x0810866d
 8108660:	0810866d 	.word	0x0810866d
 8108664:	081086df 	.word	0x081086df
 8108668:	081086f3 	.word	0x081086f3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810866e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108672:	f043 0301 	orr.w	r3, r3, #1
 8108676:	b2da      	uxtb	r2, r3
 8108678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810867a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810867e:	68ba      	ldr	r2, [r7, #8]
 8108680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108682:	699b      	ldr	r3, [r3, #24]
 8108684:	18d1      	adds	r1, r2, r3
 8108686:	68bb      	ldr	r3, [r7, #8]
 8108688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810868a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810868c:	f7ff ff5e 	bl	810854c <prvInsertTimerInActiveList>
 8108690:	4603      	mov	r3, r0
 8108692:	2b00      	cmp	r3, #0
 8108694:	d067      	beq.n	8108766 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8108696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108698:	6a1b      	ldr	r3, [r3, #32]
 810869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810869c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81086a4:	f003 0304 	and.w	r3, r3, #4
 81086a8:	2b00      	cmp	r3, #0
 81086aa:	d05c      	beq.n	8108766 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81086ac:	68ba      	ldr	r2, [r7, #8]
 81086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086b0:	699b      	ldr	r3, [r3, #24]
 81086b2:	441a      	add	r2, r3
 81086b4:	2300      	movs	r3, #0
 81086b6:	9300      	str	r3, [sp, #0]
 81086b8:	2300      	movs	r3, #0
 81086ba:	2100      	movs	r1, #0
 81086bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81086be:	f7ff fe09 	bl	81082d4 <xTimerGenericCommand>
 81086c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81086c4:	6a3b      	ldr	r3, [r7, #32]
 81086c6:	2b00      	cmp	r3, #0
 81086c8:	d14d      	bne.n	8108766 <prvProcessReceivedCommands+0x196>
 81086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 81086ce:	f383 8811 	msr	BASEPRI, r3
 81086d2:	f3bf 8f6f 	isb	sy
 81086d6:	f3bf 8f4f 	dsb	sy
 81086da:	61bb      	str	r3, [r7, #24]
 81086dc:	e7fe      	b.n	81086dc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81086de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81086e4:	f023 0301 	bic.w	r3, r3, #1
 81086e8:	b2da      	uxtb	r2, r3
 81086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 81086f0:	e039      	b.n	8108766 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 81086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81086f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81086f8:	f043 0301 	orr.w	r3, r3, #1
 81086fc:	b2da      	uxtb	r2, r3
 81086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8108704:	68ba      	ldr	r2, [r7, #8]
 8108706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108708:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810870c:	699b      	ldr	r3, [r3, #24]
 810870e:	2b00      	cmp	r3, #0
 8108710:	d109      	bne.n	8108726 <prvProcessReceivedCommands+0x156>
 8108712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108716:	f383 8811 	msr	BASEPRI, r3
 810871a:	f3bf 8f6f 	isb	sy
 810871e:	f3bf 8f4f 	dsb	sy
 8108722:	617b      	str	r3, [r7, #20]
 8108724:	e7fe      	b.n	8108724 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8108726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108728:	699a      	ldr	r2, [r3, #24]
 810872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810872c:	18d1      	adds	r1, r2, r3
 810872e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108732:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8108734:	f7ff ff0a 	bl	810854c <prvInsertTimerInActiveList>
					break;
 8108738:	e015      	b.n	8108766 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810873c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108740:	f003 0302 	and.w	r3, r3, #2
 8108744:	2b00      	cmp	r3, #0
 8108746:	d103      	bne.n	8108750 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8108748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810874a:	f7fd fdb9 	bl	81062c0 <vPortFree>
 810874e:	e00a      	b.n	8108766 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108756:	f023 0301 	bic.w	r3, r3, #1
 810875a:	b2da      	uxtb	r2, r3
 810875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810875e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8108762:	e000      	b.n	8108766 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8108764:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8108766:	4b07      	ldr	r3, [pc, #28]	; (8108784 <prvProcessReceivedCommands+0x1b4>)
 8108768:	681b      	ldr	r3, [r3, #0]
 810876a:	1d39      	adds	r1, r7, #4
 810876c:	2200      	movs	r2, #0
 810876e:	4618      	mov	r0, r3
 8108770:	f7fe fc3a 	bl	8106fe8 <xQueueReceive>
 8108774:	4603      	mov	r3, r0
 8108776:	2b00      	cmp	r3, #0
 8108778:	f47f af2e 	bne.w	81085d8 <prvProcessReceivedCommands+0x8>
	}
}
 810877c:	bf00      	nop
 810877e:	3730      	adds	r7, #48	; 0x30
 8108780:	46bd      	mov	sp, r7
 8108782:	bd80      	pop	{r7, pc}
 8108784:	10004a0c 	.word	0x10004a0c

08108788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8108788:	b580      	push	{r7, lr}
 810878a:	b088      	sub	sp, #32
 810878c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810878e:	e047      	b.n	8108820 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8108790:	4b2d      	ldr	r3, [pc, #180]	; (8108848 <prvSwitchTimerLists+0xc0>)
 8108792:	681b      	ldr	r3, [r3, #0]
 8108794:	68db      	ldr	r3, [r3, #12]
 8108796:	681b      	ldr	r3, [r3, #0]
 8108798:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810879a:	4b2b      	ldr	r3, [pc, #172]	; (8108848 <prvSwitchTimerLists+0xc0>)
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	68db      	ldr	r3, [r3, #12]
 81087a0:	68db      	ldr	r3, [r3, #12]
 81087a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81087a4:	68fb      	ldr	r3, [r7, #12]
 81087a6:	3304      	adds	r3, #4
 81087a8:	4618      	mov	r0, r3
 81087aa:	f7fd ff27 	bl	81065fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81087ae:	68fb      	ldr	r3, [r7, #12]
 81087b0:	6a1b      	ldr	r3, [r3, #32]
 81087b2:	68f8      	ldr	r0, [r7, #12]
 81087b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81087b6:	68fb      	ldr	r3, [r7, #12]
 81087b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81087bc:	f003 0304 	and.w	r3, r3, #4
 81087c0:	2b00      	cmp	r3, #0
 81087c2:	d02d      	beq.n	8108820 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81087c4:	68fb      	ldr	r3, [r7, #12]
 81087c6:	699b      	ldr	r3, [r3, #24]
 81087c8:	693a      	ldr	r2, [r7, #16]
 81087ca:	4413      	add	r3, r2
 81087cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81087ce:	68ba      	ldr	r2, [r7, #8]
 81087d0:	693b      	ldr	r3, [r7, #16]
 81087d2:	429a      	cmp	r2, r3
 81087d4:	d90e      	bls.n	81087f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81087d6:	68fb      	ldr	r3, [r7, #12]
 81087d8:	68ba      	ldr	r2, [r7, #8]
 81087da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81087dc:	68fb      	ldr	r3, [r7, #12]
 81087de:	68fa      	ldr	r2, [r7, #12]
 81087e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81087e2:	4b19      	ldr	r3, [pc, #100]	; (8108848 <prvSwitchTimerLists+0xc0>)
 81087e4:	681a      	ldr	r2, [r3, #0]
 81087e6:	68fb      	ldr	r3, [r7, #12]
 81087e8:	3304      	adds	r3, #4
 81087ea:	4619      	mov	r1, r3
 81087ec:	4610      	mov	r0, r2
 81087ee:	f7fd fecc 	bl	810658a <vListInsert>
 81087f2:	e015      	b.n	8108820 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81087f4:	2300      	movs	r3, #0
 81087f6:	9300      	str	r3, [sp, #0]
 81087f8:	2300      	movs	r3, #0
 81087fa:	693a      	ldr	r2, [r7, #16]
 81087fc:	2100      	movs	r1, #0
 81087fe:	68f8      	ldr	r0, [r7, #12]
 8108800:	f7ff fd68 	bl	81082d4 <xTimerGenericCommand>
 8108804:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8108806:	687b      	ldr	r3, [r7, #4]
 8108808:	2b00      	cmp	r3, #0
 810880a:	d109      	bne.n	8108820 <prvSwitchTimerLists+0x98>
 810880c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108810:	f383 8811 	msr	BASEPRI, r3
 8108814:	f3bf 8f6f 	isb	sy
 8108818:	f3bf 8f4f 	dsb	sy
 810881c:	603b      	str	r3, [r7, #0]
 810881e:	e7fe      	b.n	810881e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8108820:	4b09      	ldr	r3, [pc, #36]	; (8108848 <prvSwitchTimerLists+0xc0>)
 8108822:	681b      	ldr	r3, [r3, #0]
 8108824:	681b      	ldr	r3, [r3, #0]
 8108826:	2b00      	cmp	r3, #0
 8108828:	d1b2      	bne.n	8108790 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810882a:	4b07      	ldr	r3, [pc, #28]	; (8108848 <prvSwitchTimerLists+0xc0>)
 810882c:	681b      	ldr	r3, [r3, #0]
 810882e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8108830:	4b06      	ldr	r3, [pc, #24]	; (810884c <prvSwitchTimerLists+0xc4>)
 8108832:	681b      	ldr	r3, [r3, #0]
 8108834:	4a04      	ldr	r2, [pc, #16]	; (8108848 <prvSwitchTimerLists+0xc0>)
 8108836:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8108838:	4a04      	ldr	r2, [pc, #16]	; (810884c <prvSwitchTimerLists+0xc4>)
 810883a:	697b      	ldr	r3, [r7, #20]
 810883c:	6013      	str	r3, [r2, #0]
}
 810883e:	bf00      	nop
 8108840:	3718      	adds	r7, #24
 8108842:	46bd      	mov	sp, r7
 8108844:	bd80      	pop	{r7, pc}
 8108846:	bf00      	nop
 8108848:	10004a04 	.word	0x10004a04
 810884c:	10004a08 	.word	0x10004a08

08108850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8108850:	b580      	push	{r7, lr}
 8108852:	b082      	sub	sp, #8
 8108854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8108856:	f7fe f821 	bl	810689c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810885a:	4b15      	ldr	r3, [pc, #84]	; (81088b0 <prvCheckForValidListAndQueue+0x60>)
 810885c:	681b      	ldr	r3, [r3, #0]
 810885e:	2b00      	cmp	r3, #0
 8108860:	d120      	bne.n	81088a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8108862:	4814      	ldr	r0, [pc, #80]	; (81088b4 <prvCheckForValidListAndQueue+0x64>)
 8108864:	f7fd fe40 	bl	81064e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8108868:	4813      	ldr	r0, [pc, #76]	; (81088b8 <prvCheckForValidListAndQueue+0x68>)
 810886a:	f7fd fe3d 	bl	81064e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810886e:	4b13      	ldr	r3, [pc, #76]	; (81088bc <prvCheckForValidListAndQueue+0x6c>)
 8108870:	4a10      	ldr	r2, [pc, #64]	; (81088b4 <prvCheckForValidListAndQueue+0x64>)
 8108872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8108874:	4b12      	ldr	r3, [pc, #72]	; (81088c0 <prvCheckForValidListAndQueue+0x70>)
 8108876:	4a10      	ldr	r2, [pc, #64]	; (81088b8 <prvCheckForValidListAndQueue+0x68>)
 8108878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810887a:	2300      	movs	r3, #0
 810887c:	9300      	str	r3, [sp, #0]
 810887e:	4b11      	ldr	r3, [pc, #68]	; (81088c4 <prvCheckForValidListAndQueue+0x74>)
 8108880:	4a11      	ldr	r2, [pc, #68]	; (81088c8 <prvCheckForValidListAndQueue+0x78>)
 8108882:	2110      	movs	r1, #16
 8108884:	200a      	movs	r0, #10
 8108886:	f7fe f98b 	bl	8106ba0 <xQueueGenericCreateStatic>
 810888a:	4602      	mov	r2, r0
 810888c:	4b08      	ldr	r3, [pc, #32]	; (81088b0 <prvCheckForValidListAndQueue+0x60>)
 810888e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8108890:	4b07      	ldr	r3, [pc, #28]	; (81088b0 <prvCheckForValidListAndQueue+0x60>)
 8108892:	681b      	ldr	r3, [r3, #0]
 8108894:	2b00      	cmp	r3, #0
 8108896:	d005      	beq.n	81088a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8108898:	4b05      	ldr	r3, [pc, #20]	; (81088b0 <prvCheckForValidListAndQueue+0x60>)
 810889a:	681b      	ldr	r3, [r3, #0]
 810889c:	490b      	ldr	r1, [pc, #44]	; (81088cc <prvCheckForValidListAndQueue+0x7c>)
 810889e:	4618      	mov	r0, r3
 81088a0:	f7fe fd8e 	bl	81073c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81088a4:	f7fe f828 	bl	81068f8 <vPortExitCritical>
}
 81088a8:	bf00      	nop
 81088aa:	46bd      	mov	sp, r7
 81088ac:	bd80      	pop	{r7, pc}
 81088ae:	bf00      	nop
 81088b0:	10004a0c 	.word	0x10004a0c
 81088b4:	100049dc 	.word	0x100049dc
 81088b8:	100049f0 	.word	0x100049f0
 81088bc:	10004a04 	.word	0x10004a04
 81088c0:	10004a08 	.word	0x10004a08
 81088c4:	10004ab8 	.word	0x10004ab8
 81088c8:	10004a18 	.word	0x10004a18
 81088cc:	0810a3c4 	.word	0x0810a3c4

081088d0 <__errno>:
 81088d0:	4b01      	ldr	r3, [pc, #4]	; (81088d8 <__errno+0x8>)
 81088d2:	6818      	ldr	r0, [r3, #0]
 81088d4:	4770      	bx	lr
 81088d6:	bf00      	nop
 81088d8:	10000010 	.word	0x10000010

081088dc <__libc_init_array>:
 81088dc:	b570      	push	{r4, r5, r6, lr}
 81088de:	4e0d      	ldr	r6, [pc, #52]	; (8108914 <__libc_init_array+0x38>)
 81088e0:	4c0d      	ldr	r4, [pc, #52]	; (8108918 <__libc_init_array+0x3c>)
 81088e2:	1ba4      	subs	r4, r4, r6
 81088e4:	10a4      	asrs	r4, r4, #2
 81088e6:	2500      	movs	r5, #0
 81088e8:	42a5      	cmp	r5, r4
 81088ea:	d109      	bne.n	8108900 <__libc_init_array+0x24>
 81088ec:	4e0b      	ldr	r6, [pc, #44]	; (810891c <__libc_init_array+0x40>)
 81088ee:	4c0c      	ldr	r4, [pc, #48]	; (8108920 <__libc_init_array+0x44>)
 81088f0:	f001 fd46 	bl	810a380 <_init>
 81088f4:	1ba4      	subs	r4, r4, r6
 81088f6:	10a4      	asrs	r4, r4, #2
 81088f8:	2500      	movs	r5, #0
 81088fa:	42a5      	cmp	r5, r4
 81088fc:	d105      	bne.n	810890a <__libc_init_array+0x2e>
 81088fe:	bd70      	pop	{r4, r5, r6, pc}
 8108900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8108904:	4798      	blx	r3
 8108906:	3501      	adds	r5, #1
 8108908:	e7ee      	b.n	81088e8 <__libc_init_array+0xc>
 810890a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810890e:	4798      	blx	r3
 8108910:	3501      	adds	r5, #1
 8108912:	e7f2      	b.n	81088fa <__libc_init_array+0x1e>
 8108914:	0810a648 	.word	0x0810a648
 8108918:	0810a648 	.word	0x0810a648
 810891c:	0810a648 	.word	0x0810a648
 8108920:	0810a64c 	.word	0x0810a64c

08108924 <memcpy>:
 8108924:	b510      	push	{r4, lr}
 8108926:	1e43      	subs	r3, r0, #1
 8108928:	440a      	add	r2, r1
 810892a:	4291      	cmp	r1, r2
 810892c:	d100      	bne.n	8108930 <memcpy+0xc>
 810892e:	bd10      	pop	{r4, pc}
 8108930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108938:	e7f7      	b.n	810892a <memcpy+0x6>

0810893a <memset>:
 810893a:	4402      	add	r2, r0
 810893c:	4603      	mov	r3, r0
 810893e:	4293      	cmp	r3, r2
 8108940:	d100      	bne.n	8108944 <memset+0xa>
 8108942:	4770      	bx	lr
 8108944:	f803 1b01 	strb.w	r1, [r3], #1
 8108948:	e7f9      	b.n	810893e <memset+0x4>

0810894a <__cvt>:
 810894a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810894e:	ec55 4b10 	vmov	r4, r5, d0
 8108952:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8108954:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108958:	2d00      	cmp	r5, #0
 810895a:	460e      	mov	r6, r1
 810895c:	4691      	mov	r9, r2
 810895e:	4619      	mov	r1, r3
 8108960:	bfb8      	it	lt
 8108962:	4622      	movlt	r2, r4
 8108964:	462b      	mov	r3, r5
 8108966:	f027 0720 	bic.w	r7, r7, #32
 810896a:	bfbb      	ittet	lt
 810896c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108970:	461d      	movlt	r5, r3
 8108972:	2300      	movge	r3, #0
 8108974:	232d      	movlt	r3, #45	; 0x2d
 8108976:	bfb8      	it	lt
 8108978:	4614      	movlt	r4, r2
 810897a:	2f46      	cmp	r7, #70	; 0x46
 810897c:	700b      	strb	r3, [r1, #0]
 810897e:	d004      	beq.n	810898a <__cvt+0x40>
 8108980:	2f45      	cmp	r7, #69	; 0x45
 8108982:	d100      	bne.n	8108986 <__cvt+0x3c>
 8108984:	3601      	adds	r6, #1
 8108986:	2102      	movs	r1, #2
 8108988:	e000      	b.n	810898c <__cvt+0x42>
 810898a:	2103      	movs	r1, #3
 810898c:	ab03      	add	r3, sp, #12
 810898e:	9301      	str	r3, [sp, #4]
 8108990:	ab02      	add	r3, sp, #8
 8108992:	9300      	str	r3, [sp, #0]
 8108994:	4632      	mov	r2, r6
 8108996:	4653      	mov	r3, sl
 8108998:	ec45 4b10 	vmov	d0, r4, r5
 810899c:	f000 fbac 	bl	81090f8 <_dtoa_r>
 81089a0:	2f47      	cmp	r7, #71	; 0x47
 81089a2:	4680      	mov	r8, r0
 81089a4:	d102      	bne.n	81089ac <__cvt+0x62>
 81089a6:	f019 0f01 	tst.w	r9, #1
 81089aa:	d026      	beq.n	81089fa <__cvt+0xb0>
 81089ac:	2f46      	cmp	r7, #70	; 0x46
 81089ae:	eb08 0906 	add.w	r9, r8, r6
 81089b2:	d111      	bne.n	81089d8 <__cvt+0x8e>
 81089b4:	f898 3000 	ldrb.w	r3, [r8]
 81089b8:	2b30      	cmp	r3, #48	; 0x30
 81089ba:	d10a      	bne.n	81089d2 <__cvt+0x88>
 81089bc:	2200      	movs	r2, #0
 81089be:	2300      	movs	r3, #0
 81089c0:	4620      	mov	r0, r4
 81089c2:	4629      	mov	r1, r5
 81089c4:	f7f8 f8b8 	bl	8100b38 <__aeabi_dcmpeq>
 81089c8:	b918      	cbnz	r0, 81089d2 <__cvt+0x88>
 81089ca:	f1c6 0601 	rsb	r6, r6, #1
 81089ce:	f8ca 6000 	str.w	r6, [sl]
 81089d2:	f8da 3000 	ldr.w	r3, [sl]
 81089d6:	4499      	add	r9, r3
 81089d8:	2200      	movs	r2, #0
 81089da:	2300      	movs	r3, #0
 81089dc:	4620      	mov	r0, r4
 81089de:	4629      	mov	r1, r5
 81089e0:	f7f8 f8aa 	bl	8100b38 <__aeabi_dcmpeq>
 81089e4:	b938      	cbnz	r0, 81089f6 <__cvt+0xac>
 81089e6:	2230      	movs	r2, #48	; 0x30
 81089e8:	9b03      	ldr	r3, [sp, #12]
 81089ea:	454b      	cmp	r3, r9
 81089ec:	d205      	bcs.n	81089fa <__cvt+0xb0>
 81089ee:	1c59      	adds	r1, r3, #1
 81089f0:	9103      	str	r1, [sp, #12]
 81089f2:	701a      	strb	r2, [r3, #0]
 81089f4:	e7f8      	b.n	81089e8 <__cvt+0x9e>
 81089f6:	f8cd 900c 	str.w	r9, [sp, #12]
 81089fa:	9b03      	ldr	r3, [sp, #12]
 81089fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81089fe:	eba3 0308 	sub.w	r3, r3, r8
 8108a02:	4640      	mov	r0, r8
 8108a04:	6013      	str	r3, [r2, #0]
 8108a06:	b004      	add	sp, #16
 8108a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08108a0c <__exponent>:
 8108a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8108a0e:	2900      	cmp	r1, #0
 8108a10:	4604      	mov	r4, r0
 8108a12:	bfba      	itte	lt
 8108a14:	4249      	neglt	r1, r1
 8108a16:	232d      	movlt	r3, #45	; 0x2d
 8108a18:	232b      	movge	r3, #43	; 0x2b
 8108a1a:	2909      	cmp	r1, #9
 8108a1c:	f804 2b02 	strb.w	r2, [r4], #2
 8108a20:	7043      	strb	r3, [r0, #1]
 8108a22:	dd20      	ble.n	8108a66 <__exponent+0x5a>
 8108a24:	f10d 0307 	add.w	r3, sp, #7
 8108a28:	461f      	mov	r7, r3
 8108a2a:	260a      	movs	r6, #10
 8108a2c:	fb91 f5f6 	sdiv	r5, r1, r6
 8108a30:	fb06 1115 	mls	r1, r6, r5, r1
 8108a34:	3130      	adds	r1, #48	; 0x30
 8108a36:	2d09      	cmp	r5, #9
 8108a38:	f803 1c01 	strb.w	r1, [r3, #-1]
 8108a3c:	f103 32ff 	add.w	r2, r3, #4294967295
 8108a40:	4629      	mov	r1, r5
 8108a42:	dc09      	bgt.n	8108a58 <__exponent+0x4c>
 8108a44:	3130      	adds	r1, #48	; 0x30
 8108a46:	3b02      	subs	r3, #2
 8108a48:	f802 1c01 	strb.w	r1, [r2, #-1]
 8108a4c:	42bb      	cmp	r3, r7
 8108a4e:	4622      	mov	r2, r4
 8108a50:	d304      	bcc.n	8108a5c <__exponent+0x50>
 8108a52:	1a10      	subs	r0, r2, r0
 8108a54:	b003      	add	sp, #12
 8108a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8108a58:	4613      	mov	r3, r2
 8108a5a:	e7e7      	b.n	8108a2c <__exponent+0x20>
 8108a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108a60:	f804 2b01 	strb.w	r2, [r4], #1
 8108a64:	e7f2      	b.n	8108a4c <__exponent+0x40>
 8108a66:	2330      	movs	r3, #48	; 0x30
 8108a68:	4419      	add	r1, r3
 8108a6a:	7083      	strb	r3, [r0, #2]
 8108a6c:	1d02      	adds	r2, r0, #4
 8108a6e:	70c1      	strb	r1, [r0, #3]
 8108a70:	e7ef      	b.n	8108a52 <__exponent+0x46>
	...

08108a74 <_printf_float>:
 8108a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108a78:	b08d      	sub	sp, #52	; 0x34
 8108a7a:	460c      	mov	r4, r1
 8108a7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8108a80:	4616      	mov	r6, r2
 8108a82:	461f      	mov	r7, r3
 8108a84:	4605      	mov	r5, r0
 8108a86:	f001 f8ef 	bl	8109c68 <_localeconv_r>
 8108a8a:	6803      	ldr	r3, [r0, #0]
 8108a8c:	9304      	str	r3, [sp, #16]
 8108a8e:	4618      	mov	r0, r3
 8108a90:	f7f7 fc26 	bl	81002e0 <strlen>
 8108a94:	2300      	movs	r3, #0
 8108a96:	930a      	str	r3, [sp, #40]	; 0x28
 8108a98:	f8d8 3000 	ldr.w	r3, [r8]
 8108a9c:	9005      	str	r0, [sp, #20]
 8108a9e:	3307      	adds	r3, #7
 8108aa0:	f023 0307 	bic.w	r3, r3, #7
 8108aa4:	f103 0208 	add.w	r2, r3, #8
 8108aa8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8108aac:	f8d4 b000 	ldr.w	fp, [r4]
 8108ab0:	f8c8 2000 	str.w	r2, [r8]
 8108ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ab8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8108abc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8108ac0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8108ac4:	9307      	str	r3, [sp, #28]
 8108ac6:	f8cd 8018 	str.w	r8, [sp, #24]
 8108aca:	f04f 32ff 	mov.w	r2, #4294967295
 8108ace:	4ba7      	ldr	r3, [pc, #668]	; (8108d6c <_printf_float+0x2f8>)
 8108ad0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8108ad4:	f7f8 f862 	bl	8100b9c <__aeabi_dcmpun>
 8108ad8:	bb70      	cbnz	r0, 8108b38 <_printf_float+0xc4>
 8108ada:	f04f 32ff 	mov.w	r2, #4294967295
 8108ade:	4ba3      	ldr	r3, [pc, #652]	; (8108d6c <_printf_float+0x2f8>)
 8108ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8108ae4:	f7f8 f83c 	bl	8100b60 <__aeabi_dcmple>
 8108ae8:	bb30      	cbnz	r0, 8108b38 <_printf_float+0xc4>
 8108aea:	2200      	movs	r2, #0
 8108aec:	2300      	movs	r3, #0
 8108aee:	4640      	mov	r0, r8
 8108af0:	4649      	mov	r1, r9
 8108af2:	f7f8 f82b 	bl	8100b4c <__aeabi_dcmplt>
 8108af6:	b110      	cbz	r0, 8108afe <_printf_float+0x8a>
 8108af8:	232d      	movs	r3, #45	; 0x2d
 8108afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108afe:	4a9c      	ldr	r2, [pc, #624]	; (8108d70 <_printf_float+0x2fc>)
 8108b00:	4b9c      	ldr	r3, [pc, #624]	; (8108d74 <_printf_float+0x300>)
 8108b02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8108b06:	bf8c      	ite	hi
 8108b08:	4690      	movhi	r8, r2
 8108b0a:	4698      	movls	r8, r3
 8108b0c:	2303      	movs	r3, #3
 8108b0e:	f02b 0204 	bic.w	r2, fp, #4
 8108b12:	6123      	str	r3, [r4, #16]
 8108b14:	6022      	str	r2, [r4, #0]
 8108b16:	f04f 0900 	mov.w	r9, #0
 8108b1a:	9700      	str	r7, [sp, #0]
 8108b1c:	4633      	mov	r3, r6
 8108b1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8108b20:	4621      	mov	r1, r4
 8108b22:	4628      	mov	r0, r5
 8108b24:	f000 f9e6 	bl	8108ef4 <_printf_common>
 8108b28:	3001      	adds	r0, #1
 8108b2a:	f040 808d 	bne.w	8108c48 <_printf_float+0x1d4>
 8108b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8108b32:	b00d      	add	sp, #52	; 0x34
 8108b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108b38:	4642      	mov	r2, r8
 8108b3a:	464b      	mov	r3, r9
 8108b3c:	4640      	mov	r0, r8
 8108b3e:	4649      	mov	r1, r9
 8108b40:	f7f8 f82c 	bl	8100b9c <__aeabi_dcmpun>
 8108b44:	b110      	cbz	r0, 8108b4c <_printf_float+0xd8>
 8108b46:	4a8c      	ldr	r2, [pc, #560]	; (8108d78 <_printf_float+0x304>)
 8108b48:	4b8c      	ldr	r3, [pc, #560]	; (8108d7c <_printf_float+0x308>)
 8108b4a:	e7da      	b.n	8108b02 <_printf_float+0x8e>
 8108b4c:	6861      	ldr	r1, [r4, #4]
 8108b4e:	1c4b      	adds	r3, r1, #1
 8108b50:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8108b54:	a80a      	add	r0, sp, #40	; 0x28
 8108b56:	d13e      	bne.n	8108bd6 <_printf_float+0x162>
 8108b58:	2306      	movs	r3, #6
 8108b5a:	6063      	str	r3, [r4, #4]
 8108b5c:	2300      	movs	r3, #0
 8108b5e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8108b62:	ab09      	add	r3, sp, #36	; 0x24
 8108b64:	9300      	str	r3, [sp, #0]
 8108b66:	ec49 8b10 	vmov	d0, r8, r9
 8108b6a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8108b6e:	6022      	str	r2, [r4, #0]
 8108b70:	f8cd a004 	str.w	sl, [sp, #4]
 8108b74:	6861      	ldr	r1, [r4, #4]
 8108b76:	4628      	mov	r0, r5
 8108b78:	f7ff fee7 	bl	810894a <__cvt>
 8108b7c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8108b80:	2b47      	cmp	r3, #71	; 0x47
 8108b82:	4680      	mov	r8, r0
 8108b84:	d109      	bne.n	8108b9a <_printf_float+0x126>
 8108b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108b88:	1cd8      	adds	r0, r3, #3
 8108b8a:	db02      	blt.n	8108b92 <_printf_float+0x11e>
 8108b8c:	6862      	ldr	r2, [r4, #4]
 8108b8e:	4293      	cmp	r3, r2
 8108b90:	dd47      	ble.n	8108c22 <_printf_float+0x1ae>
 8108b92:	f1aa 0a02 	sub.w	sl, sl, #2
 8108b96:	fa5f fa8a 	uxtb.w	sl, sl
 8108b9a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8108b9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108ba0:	d824      	bhi.n	8108bec <_printf_float+0x178>
 8108ba2:	3901      	subs	r1, #1
 8108ba4:	4652      	mov	r2, sl
 8108ba6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8108baa:	9109      	str	r1, [sp, #36]	; 0x24
 8108bac:	f7ff ff2e 	bl	8108a0c <__exponent>
 8108bb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108bb2:	1813      	adds	r3, r2, r0
 8108bb4:	2a01      	cmp	r2, #1
 8108bb6:	4681      	mov	r9, r0
 8108bb8:	6123      	str	r3, [r4, #16]
 8108bba:	dc02      	bgt.n	8108bc2 <_printf_float+0x14e>
 8108bbc:	6822      	ldr	r2, [r4, #0]
 8108bbe:	07d1      	lsls	r1, r2, #31
 8108bc0:	d501      	bpl.n	8108bc6 <_printf_float+0x152>
 8108bc2:	3301      	adds	r3, #1
 8108bc4:	6123      	str	r3, [r4, #16]
 8108bc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8108bca:	2b00      	cmp	r3, #0
 8108bcc:	d0a5      	beq.n	8108b1a <_printf_float+0xa6>
 8108bce:	232d      	movs	r3, #45	; 0x2d
 8108bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108bd4:	e7a1      	b.n	8108b1a <_printf_float+0xa6>
 8108bd6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8108bda:	f000 8177 	beq.w	8108ecc <_printf_float+0x458>
 8108bde:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8108be2:	d1bb      	bne.n	8108b5c <_printf_float+0xe8>
 8108be4:	2900      	cmp	r1, #0
 8108be6:	d1b9      	bne.n	8108b5c <_printf_float+0xe8>
 8108be8:	2301      	movs	r3, #1
 8108bea:	e7b6      	b.n	8108b5a <_printf_float+0xe6>
 8108bec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8108bf0:	d119      	bne.n	8108c26 <_printf_float+0x1b2>
 8108bf2:	2900      	cmp	r1, #0
 8108bf4:	6863      	ldr	r3, [r4, #4]
 8108bf6:	dd0c      	ble.n	8108c12 <_printf_float+0x19e>
 8108bf8:	6121      	str	r1, [r4, #16]
 8108bfa:	b913      	cbnz	r3, 8108c02 <_printf_float+0x18e>
 8108bfc:	6822      	ldr	r2, [r4, #0]
 8108bfe:	07d2      	lsls	r2, r2, #31
 8108c00:	d502      	bpl.n	8108c08 <_printf_float+0x194>
 8108c02:	3301      	adds	r3, #1
 8108c04:	440b      	add	r3, r1
 8108c06:	6123      	str	r3, [r4, #16]
 8108c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108c0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8108c0c:	f04f 0900 	mov.w	r9, #0
 8108c10:	e7d9      	b.n	8108bc6 <_printf_float+0x152>
 8108c12:	b913      	cbnz	r3, 8108c1a <_printf_float+0x1a6>
 8108c14:	6822      	ldr	r2, [r4, #0]
 8108c16:	07d0      	lsls	r0, r2, #31
 8108c18:	d501      	bpl.n	8108c1e <_printf_float+0x1aa>
 8108c1a:	3302      	adds	r3, #2
 8108c1c:	e7f3      	b.n	8108c06 <_printf_float+0x192>
 8108c1e:	2301      	movs	r3, #1
 8108c20:	e7f1      	b.n	8108c06 <_printf_float+0x192>
 8108c22:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8108c26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8108c2a:	4293      	cmp	r3, r2
 8108c2c:	db05      	blt.n	8108c3a <_printf_float+0x1c6>
 8108c2e:	6822      	ldr	r2, [r4, #0]
 8108c30:	6123      	str	r3, [r4, #16]
 8108c32:	07d1      	lsls	r1, r2, #31
 8108c34:	d5e8      	bpl.n	8108c08 <_printf_float+0x194>
 8108c36:	3301      	adds	r3, #1
 8108c38:	e7e5      	b.n	8108c06 <_printf_float+0x192>
 8108c3a:	2b00      	cmp	r3, #0
 8108c3c:	bfd4      	ite	le
 8108c3e:	f1c3 0302 	rsble	r3, r3, #2
 8108c42:	2301      	movgt	r3, #1
 8108c44:	4413      	add	r3, r2
 8108c46:	e7de      	b.n	8108c06 <_printf_float+0x192>
 8108c48:	6823      	ldr	r3, [r4, #0]
 8108c4a:	055a      	lsls	r2, r3, #21
 8108c4c:	d407      	bmi.n	8108c5e <_printf_float+0x1ea>
 8108c4e:	6923      	ldr	r3, [r4, #16]
 8108c50:	4642      	mov	r2, r8
 8108c52:	4631      	mov	r1, r6
 8108c54:	4628      	mov	r0, r5
 8108c56:	47b8      	blx	r7
 8108c58:	3001      	adds	r0, #1
 8108c5a:	d12b      	bne.n	8108cb4 <_printf_float+0x240>
 8108c5c:	e767      	b.n	8108b2e <_printf_float+0xba>
 8108c5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8108c62:	f240 80dc 	bls.w	8108e1e <_printf_float+0x3aa>
 8108c66:	2200      	movs	r2, #0
 8108c68:	2300      	movs	r3, #0
 8108c6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108c6e:	f7f7 ff63 	bl	8100b38 <__aeabi_dcmpeq>
 8108c72:	2800      	cmp	r0, #0
 8108c74:	d033      	beq.n	8108cde <_printf_float+0x26a>
 8108c76:	2301      	movs	r3, #1
 8108c78:	4a41      	ldr	r2, [pc, #260]	; (8108d80 <_printf_float+0x30c>)
 8108c7a:	4631      	mov	r1, r6
 8108c7c:	4628      	mov	r0, r5
 8108c7e:	47b8      	blx	r7
 8108c80:	3001      	adds	r0, #1
 8108c82:	f43f af54 	beq.w	8108b2e <_printf_float+0xba>
 8108c86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108c8a:	429a      	cmp	r2, r3
 8108c8c:	db02      	blt.n	8108c94 <_printf_float+0x220>
 8108c8e:	6823      	ldr	r3, [r4, #0]
 8108c90:	07d8      	lsls	r0, r3, #31
 8108c92:	d50f      	bpl.n	8108cb4 <_printf_float+0x240>
 8108c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108c98:	4631      	mov	r1, r6
 8108c9a:	4628      	mov	r0, r5
 8108c9c:	47b8      	blx	r7
 8108c9e:	3001      	adds	r0, #1
 8108ca0:	f43f af45 	beq.w	8108b2e <_printf_float+0xba>
 8108ca4:	f04f 0800 	mov.w	r8, #0
 8108ca8:	f104 091a 	add.w	r9, r4, #26
 8108cac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108cae:	3b01      	subs	r3, #1
 8108cb0:	4543      	cmp	r3, r8
 8108cb2:	dc09      	bgt.n	8108cc8 <_printf_float+0x254>
 8108cb4:	6823      	ldr	r3, [r4, #0]
 8108cb6:	079b      	lsls	r3, r3, #30
 8108cb8:	f100 8103 	bmi.w	8108ec2 <_printf_float+0x44e>
 8108cbc:	68e0      	ldr	r0, [r4, #12]
 8108cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108cc0:	4298      	cmp	r0, r3
 8108cc2:	bfb8      	it	lt
 8108cc4:	4618      	movlt	r0, r3
 8108cc6:	e734      	b.n	8108b32 <_printf_float+0xbe>
 8108cc8:	2301      	movs	r3, #1
 8108cca:	464a      	mov	r2, r9
 8108ccc:	4631      	mov	r1, r6
 8108cce:	4628      	mov	r0, r5
 8108cd0:	47b8      	blx	r7
 8108cd2:	3001      	adds	r0, #1
 8108cd4:	f43f af2b 	beq.w	8108b2e <_printf_float+0xba>
 8108cd8:	f108 0801 	add.w	r8, r8, #1
 8108cdc:	e7e6      	b.n	8108cac <_printf_float+0x238>
 8108cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108ce0:	2b00      	cmp	r3, #0
 8108ce2:	dc2b      	bgt.n	8108d3c <_printf_float+0x2c8>
 8108ce4:	2301      	movs	r3, #1
 8108ce6:	4a26      	ldr	r2, [pc, #152]	; (8108d80 <_printf_float+0x30c>)
 8108ce8:	4631      	mov	r1, r6
 8108cea:	4628      	mov	r0, r5
 8108cec:	47b8      	blx	r7
 8108cee:	3001      	adds	r0, #1
 8108cf0:	f43f af1d 	beq.w	8108b2e <_printf_float+0xba>
 8108cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108cf6:	b923      	cbnz	r3, 8108d02 <_printf_float+0x28e>
 8108cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108cfa:	b913      	cbnz	r3, 8108d02 <_printf_float+0x28e>
 8108cfc:	6823      	ldr	r3, [r4, #0]
 8108cfe:	07d9      	lsls	r1, r3, #31
 8108d00:	d5d8      	bpl.n	8108cb4 <_printf_float+0x240>
 8108d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108d06:	4631      	mov	r1, r6
 8108d08:	4628      	mov	r0, r5
 8108d0a:	47b8      	blx	r7
 8108d0c:	3001      	adds	r0, #1
 8108d0e:	f43f af0e 	beq.w	8108b2e <_printf_float+0xba>
 8108d12:	f04f 0900 	mov.w	r9, #0
 8108d16:	f104 0a1a 	add.w	sl, r4, #26
 8108d1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108d1c:	425b      	negs	r3, r3
 8108d1e:	454b      	cmp	r3, r9
 8108d20:	dc01      	bgt.n	8108d26 <_printf_float+0x2b2>
 8108d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108d24:	e794      	b.n	8108c50 <_printf_float+0x1dc>
 8108d26:	2301      	movs	r3, #1
 8108d28:	4652      	mov	r2, sl
 8108d2a:	4631      	mov	r1, r6
 8108d2c:	4628      	mov	r0, r5
 8108d2e:	47b8      	blx	r7
 8108d30:	3001      	adds	r0, #1
 8108d32:	f43f aefc 	beq.w	8108b2e <_printf_float+0xba>
 8108d36:	f109 0901 	add.w	r9, r9, #1
 8108d3a:	e7ee      	b.n	8108d1a <_printf_float+0x2a6>
 8108d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108d3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8108d40:	429a      	cmp	r2, r3
 8108d42:	bfa8      	it	ge
 8108d44:	461a      	movge	r2, r3
 8108d46:	2a00      	cmp	r2, #0
 8108d48:	4691      	mov	r9, r2
 8108d4a:	dd07      	ble.n	8108d5c <_printf_float+0x2e8>
 8108d4c:	4613      	mov	r3, r2
 8108d4e:	4631      	mov	r1, r6
 8108d50:	4642      	mov	r2, r8
 8108d52:	4628      	mov	r0, r5
 8108d54:	47b8      	blx	r7
 8108d56:	3001      	adds	r0, #1
 8108d58:	f43f aee9 	beq.w	8108b2e <_printf_float+0xba>
 8108d5c:	f104 031a 	add.w	r3, r4, #26
 8108d60:	f04f 0b00 	mov.w	fp, #0
 8108d64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108d68:	9306      	str	r3, [sp, #24]
 8108d6a:	e015      	b.n	8108d98 <_printf_float+0x324>
 8108d6c:	7fefffff 	.word	0x7fefffff
 8108d70:	0810a41c 	.word	0x0810a41c
 8108d74:	0810a418 	.word	0x0810a418
 8108d78:	0810a424 	.word	0x0810a424
 8108d7c:	0810a420 	.word	0x0810a420
 8108d80:	0810a428 	.word	0x0810a428
 8108d84:	2301      	movs	r3, #1
 8108d86:	9a06      	ldr	r2, [sp, #24]
 8108d88:	4631      	mov	r1, r6
 8108d8a:	4628      	mov	r0, r5
 8108d8c:	47b8      	blx	r7
 8108d8e:	3001      	adds	r0, #1
 8108d90:	f43f aecd 	beq.w	8108b2e <_printf_float+0xba>
 8108d94:	f10b 0b01 	add.w	fp, fp, #1
 8108d98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8108d9c:	ebaa 0309 	sub.w	r3, sl, r9
 8108da0:	455b      	cmp	r3, fp
 8108da2:	dcef      	bgt.n	8108d84 <_printf_float+0x310>
 8108da4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108da8:	429a      	cmp	r2, r3
 8108daa:	44d0      	add	r8, sl
 8108dac:	db15      	blt.n	8108dda <_printf_float+0x366>
 8108dae:	6823      	ldr	r3, [r4, #0]
 8108db0:	07da      	lsls	r2, r3, #31
 8108db2:	d412      	bmi.n	8108dda <_printf_float+0x366>
 8108db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108db6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108db8:	eba3 020a 	sub.w	r2, r3, sl
 8108dbc:	eba3 0a01 	sub.w	sl, r3, r1
 8108dc0:	4592      	cmp	sl, r2
 8108dc2:	bfa8      	it	ge
 8108dc4:	4692      	movge	sl, r2
 8108dc6:	f1ba 0f00 	cmp.w	sl, #0
 8108dca:	dc0e      	bgt.n	8108dea <_printf_float+0x376>
 8108dcc:	f04f 0800 	mov.w	r8, #0
 8108dd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8108dd4:	f104 091a 	add.w	r9, r4, #26
 8108dd8:	e019      	b.n	8108e0e <_printf_float+0x39a>
 8108dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108dde:	4631      	mov	r1, r6
 8108de0:	4628      	mov	r0, r5
 8108de2:	47b8      	blx	r7
 8108de4:	3001      	adds	r0, #1
 8108de6:	d1e5      	bne.n	8108db4 <_printf_float+0x340>
 8108de8:	e6a1      	b.n	8108b2e <_printf_float+0xba>
 8108dea:	4653      	mov	r3, sl
 8108dec:	4642      	mov	r2, r8
 8108dee:	4631      	mov	r1, r6
 8108df0:	4628      	mov	r0, r5
 8108df2:	47b8      	blx	r7
 8108df4:	3001      	adds	r0, #1
 8108df6:	d1e9      	bne.n	8108dcc <_printf_float+0x358>
 8108df8:	e699      	b.n	8108b2e <_printf_float+0xba>
 8108dfa:	2301      	movs	r3, #1
 8108dfc:	464a      	mov	r2, r9
 8108dfe:	4631      	mov	r1, r6
 8108e00:	4628      	mov	r0, r5
 8108e02:	47b8      	blx	r7
 8108e04:	3001      	adds	r0, #1
 8108e06:	f43f ae92 	beq.w	8108b2e <_printf_float+0xba>
 8108e0a:	f108 0801 	add.w	r8, r8, #1
 8108e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108e12:	1a9b      	subs	r3, r3, r2
 8108e14:	eba3 030a 	sub.w	r3, r3, sl
 8108e18:	4543      	cmp	r3, r8
 8108e1a:	dcee      	bgt.n	8108dfa <_printf_float+0x386>
 8108e1c:	e74a      	b.n	8108cb4 <_printf_float+0x240>
 8108e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108e20:	2a01      	cmp	r2, #1
 8108e22:	dc01      	bgt.n	8108e28 <_printf_float+0x3b4>
 8108e24:	07db      	lsls	r3, r3, #31
 8108e26:	d53a      	bpl.n	8108e9e <_printf_float+0x42a>
 8108e28:	2301      	movs	r3, #1
 8108e2a:	4642      	mov	r2, r8
 8108e2c:	4631      	mov	r1, r6
 8108e2e:	4628      	mov	r0, r5
 8108e30:	47b8      	blx	r7
 8108e32:	3001      	adds	r0, #1
 8108e34:	f43f ae7b 	beq.w	8108b2e <_printf_float+0xba>
 8108e38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108e3c:	4631      	mov	r1, r6
 8108e3e:	4628      	mov	r0, r5
 8108e40:	47b8      	blx	r7
 8108e42:	3001      	adds	r0, #1
 8108e44:	f108 0801 	add.w	r8, r8, #1
 8108e48:	f43f ae71 	beq.w	8108b2e <_printf_float+0xba>
 8108e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108e4e:	2200      	movs	r2, #0
 8108e50:	f103 3aff 	add.w	sl, r3, #4294967295
 8108e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108e58:	2300      	movs	r3, #0
 8108e5a:	f7f7 fe6d 	bl	8100b38 <__aeabi_dcmpeq>
 8108e5e:	b9c8      	cbnz	r0, 8108e94 <_printf_float+0x420>
 8108e60:	4653      	mov	r3, sl
 8108e62:	4642      	mov	r2, r8
 8108e64:	4631      	mov	r1, r6
 8108e66:	4628      	mov	r0, r5
 8108e68:	47b8      	blx	r7
 8108e6a:	3001      	adds	r0, #1
 8108e6c:	d10e      	bne.n	8108e8c <_printf_float+0x418>
 8108e6e:	e65e      	b.n	8108b2e <_printf_float+0xba>
 8108e70:	2301      	movs	r3, #1
 8108e72:	4652      	mov	r2, sl
 8108e74:	4631      	mov	r1, r6
 8108e76:	4628      	mov	r0, r5
 8108e78:	47b8      	blx	r7
 8108e7a:	3001      	adds	r0, #1
 8108e7c:	f43f ae57 	beq.w	8108b2e <_printf_float+0xba>
 8108e80:	f108 0801 	add.w	r8, r8, #1
 8108e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108e86:	3b01      	subs	r3, #1
 8108e88:	4543      	cmp	r3, r8
 8108e8a:	dcf1      	bgt.n	8108e70 <_printf_float+0x3fc>
 8108e8c:	464b      	mov	r3, r9
 8108e8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8108e92:	e6de      	b.n	8108c52 <_printf_float+0x1de>
 8108e94:	f04f 0800 	mov.w	r8, #0
 8108e98:	f104 0a1a 	add.w	sl, r4, #26
 8108e9c:	e7f2      	b.n	8108e84 <_printf_float+0x410>
 8108e9e:	2301      	movs	r3, #1
 8108ea0:	e7df      	b.n	8108e62 <_printf_float+0x3ee>
 8108ea2:	2301      	movs	r3, #1
 8108ea4:	464a      	mov	r2, r9
 8108ea6:	4631      	mov	r1, r6
 8108ea8:	4628      	mov	r0, r5
 8108eaa:	47b8      	blx	r7
 8108eac:	3001      	adds	r0, #1
 8108eae:	f43f ae3e 	beq.w	8108b2e <_printf_float+0xba>
 8108eb2:	f108 0801 	add.w	r8, r8, #1
 8108eb6:	68e3      	ldr	r3, [r4, #12]
 8108eb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8108eba:	1a9b      	subs	r3, r3, r2
 8108ebc:	4543      	cmp	r3, r8
 8108ebe:	dcf0      	bgt.n	8108ea2 <_printf_float+0x42e>
 8108ec0:	e6fc      	b.n	8108cbc <_printf_float+0x248>
 8108ec2:	f04f 0800 	mov.w	r8, #0
 8108ec6:	f104 0919 	add.w	r9, r4, #25
 8108eca:	e7f4      	b.n	8108eb6 <_printf_float+0x442>
 8108ecc:	2900      	cmp	r1, #0
 8108ece:	f43f ae8b 	beq.w	8108be8 <_printf_float+0x174>
 8108ed2:	2300      	movs	r3, #0
 8108ed4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8108ed8:	ab09      	add	r3, sp, #36	; 0x24
 8108eda:	9300      	str	r3, [sp, #0]
 8108edc:	ec49 8b10 	vmov	d0, r8, r9
 8108ee0:	6022      	str	r2, [r4, #0]
 8108ee2:	f8cd a004 	str.w	sl, [sp, #4]
 8108ee6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8108eea:	4628      	mov	r0, r5
 8108eec:	f7ff fd2d 	bl	810894a <__cvt>
 8108ef0:	4680      	mov	r8, r0
 8108ef2:	e648      	b.n	8108b86 <_printf_float+0x112>

08108ef4 <_printf_common>:
 8108ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108ef8:	4691      	mov	r9, r2
 8108efa:	461f      	mov	r7, r3
 8108efc:	688a      	ldr	r2, [r1, #8]
 8108efe:	690b      	ldr	r3, [r1, #16]
 8108f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108f04:	4293      	cmp	r3, r2
 8108f06:	bfb8      	it	lt
 8108f08:	4613      	movlt	r3, r2
 8108f0a:	f8c9 3000 	str.w	r3, [r9]
 8108f0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8108f12:	4606      	mov	r6, r0
 8108f14:	460c      	mov	r4, r1
 8108f16:	b112      	cbz	r2, 8108f1e <_printf_common+0x2a>
 8108f18:	3301      	adds	r3, #1
 8108f1a:	f8c9 3000 	str.w	r3, [r9]
 8108f1e:	6823      	ldr	r3, [r4, #0]
 8108f20:	0699      	lsls	r1, r3, #26
 8108f22:	bf42      	ittt	mi
 8108f24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8108f28:	3302      	addmi	r3, #2
 8108f2a:	f8c9 3000 	strmi.w	r3, [r9]
 8108f2e:	6825      	ldr	r5, [r4, #0]
 8108f30:	f015 0506 	ands.w	r5, r5, #6
 8108f34:	d107      	bne.n	8108f46 <_printf_common+0x52>
 8108f36:	f104 0a19 	add.w	sl, r4, #25
 8108f3a:	68e3      	ldr	r3, [r4, #12]
 8108f3c:	f8d9 2000 	ldr.w	r2, [r9]
 8108f40:	1a9b      	subs	r3, r3, r2
 8108f42:	42ab      	cmp	r3, r5
 8108f44:	dc28      	bgt.n	8108f98 <_printf_common+0xa4>
 8108f46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8108f4a:	6822      	ldr	r2, [r4, #0]
 8108f4c:	3300      	adds	r3, #0
 8108f4e:	bf18      	it	ne
 8108f50:	2301      	movne	r3, #1
 8108f52:	0692      	lsls	r2, r2, #26
 8108f54:	d42d      	bmi.n	8108fb2 <_printf_common+0xbe>
 8108f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108f5a:	4639      	mov	r1, r7
 8108f5c:	4630      	mov	r0, r6
 8108f5e:	47c0      	blx	r8
 8108f60:	3001      	adds	r0, #1
 8108f62:	d020      	beq.n	8108fa6 <_printf_common+0xb2>
 8108f64:	6823      	ldr	r3, [r4, #0]
 8108f66:	68e5      	ldr	r5, [r4, #12]
 8108f68:	f8d9 2000 	ldr.w	r2, [r9]
 8108f6c:	f003 0306 	and.w	r3, r3, #6
 8108f70:	2b04      	cmp	r3, #4
 8108f72:	bf08      	it	eq
 8108f74:	1aad      	subeq	r5, r5, r2
 8108f76:	68a3      	ldr	r3, [r4, #8]
 8108f78:	6922      	ldr	r2, [r4, #16]
 8108f7a:	bf0c      	ite	eq
 8108f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108f80:	2500      	movne	r5, #0
 8108f82:	4293      	cmp	r3, r2
 8108f84:	bfc4      	itt	gt
 8108f86:	1a9b      	subgt	r3, r3, r2
 8108f88:	18ed      	addgt	r5, r5, r3
 8108f8a:	f04f 0900 	mov.w	r9, #0
 8108f8e:	341a      	adds	r4, #26
 8108f90:	454d      	cmp	r5, r9
 8108f92:	d11a      	bne.n	8108fca <_printf_common+0xd6>
 8108f94:	2000      	movs	r0, #0
 8108f96:	e008      	b.n	8108faa <_printf_common+0xb6>
 8108f98:	2301      	movs	r3, #1
 8108f9a:	4652      	mov	r2, sl
 8108f9c:	4639      	mov	r1, r7
 8108f9e:	4630      	mov	r0, r6
 8108fa0:	47c0      	blx	r8
 8108fa2:	3001      	adds	r0, #1
 8108fa4:	d103      	bne.n	8108fae <_printf_common+0xba>
 8108fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8108faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108fae:	3501      	adds	r5, #1
 8108fb0:	e7c3      	b.n	8108f3a <_printf_common+0x46>
 8108fb2:	18e1      	adds	r1, r4, r3
 8108fb4:	1c5a      	adds	r2, r3, #1
 8108fb6:	2030      	movs	r0, #48	; 0x30
 8108fb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8108fbc:	4422      	add	r2, r4
 8108fbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8108fc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8108fc6:	3302      	adds	r3, #2
 8108fc8:	e7c5      	b.n	8108f56 <_printf_common+0x62>
 8108fca:	2301      	movs	r3, #1
 8108fcc:	4622      	mov	r2, r4
 8108fce:	4639      	mov	r1, r7
 8108fd0:	4630      	mov	r0, r6
 8108fd2:	47c0      	blx	r8
 8108fd4:	3001      	adds	r0, #1
 8108fd6:	d0e6      	beq.n	8108fa6 <_printf_common+0xb2>
 8108fd8:	f109 0901 	add.w	r9, r9, #1
 8108fdc:	e7d8      	b.n	8108f90 <_printf_common+0x9c>

08108fde <quorem>:
 8108fde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108fe2:	6903      	ldr	r3, [r0, #16]
 8108fe4:	690c      	ldr	r4, [r1, #16]
 8108fe6:	42a3      	cmp	r3, r4
 8108fe8:	4680      	mov	r8, r0
 8108fea:	f2c0 8082 	blt.w	81090f2 <quorem+0x114>
 8108fee:	3c01      	subs	r4, #1
 8108ff0:	f101 0714 	add.w	r7, r1, #20
 8108ff4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8108ff8:	f100 0614 	add.w	r6, r0, #20
 8108ffc:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8109000:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8109004:	eb06 030c 	add.w	r3, r6, ip
 8109008:	3501      	adds	r5, #1
 810900a:	eb07 090c 	add.w	r9, r7, ip
 810900e:	9301      	str	r3, [sp, #4]
 8109010:	fbb0 f5f5 	udiv	r5, r0, r5
 8109014:	b395      	cbz	r5, 810907c <quorem+0x9e>
 8109016:	f04f 0a00 	mov.w	sl, #0
 810901a:	4638      	mov	r0, r7
 810901c:	46b6      	mov	lr, r6
 810901e:	46d3      	mov	fp, sl
 8109020:	f850 2b04 	ldr.w	r2, [r0], #4
 8109024:	b293      	uxth	r3, r2
 8109026:	fb05 a303 	mla	r3, r5, r3, sl
 810902a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810902e:	b29b      	uxth	r3, r3
 8109030:	ebab 0303 	sub.w	r3, fp, r3
 8109034:	0c12      	lsrs	r2, r2, #16
 8109036:	f8de b000 	ldr.w	fp, [lr]
 810903a:	fb05 a202 	mla	r2, r5, r2, sl
 810903e:	fa13 f38b 	uxtah	r3, r3, fp
 8109042:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8109046:	fa1f fb82 	uxth.w	fp, r2
 810904a:	f8de 2000 	ldr.w	r2, [lr]
 810904e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8109052:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109056:	b29b      	uxth	r3, r3
 8109058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810905c:	4581      	cmp	r9, r0
 810905e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8109062:	f84e 3b04 	str.w	r3, [lr], #4
 8109066:	d2db      	bcs.n	8109020 <quorem+0x42>
 8109068:	f856 300c 	ldr.w	r3, [r6, ip]
 810906c:	b933      	cbnz	r3, 810907c <quorem+0x9e>
 810906e:	9b01      	ldr	r3, [sp, #4]
 8109070:	3b04      	subs	r3, #4
 8109072:	429e      	cmp	r6, r3
 8109074:	461a      	mov	r2, r3
 8109076:	d330      	bcc.n	81090da <quorem+0xfc>
 8109078:	f8c8 4010 	str.w	r4, [r8, #16]
 810907c:	4640      	mov	r0, r8
 810907e:	f001 f81f 	bl	810a0c0 <__mcmp>
 8109082:	2800      	cmp	r0, #0
 8109084:	db25      	blt.n	81090d2 <quorem+0xf4>
 8109086:	3501      	adds	r5, #1
 8109088:	4630      	mov	r0, r6
 810908a:	f04f 0c00 	mov.w	ip, #0
 810908e:	f857 2b04 	ldr.w	r2, [r7], #4
 8109092:	f8d0 e000 	ldr.w	lr, [r0]
 8109096:	b293      	uxth	r3, r2
 8109098:	ebac 0303 	sub.w	r3, ip, r3
 810909c:	0c12      	lsrs	r2, r2, #16
 810909e:	fa13 f38e 	uxtah	r3, r3, lr
 81090a2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 81090a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81090aa:	b29b      	uxth	r3, r3
 81090ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81090b0:	45b9      	cmp	r9, r7
 81090b2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 81090b6:	f840 3b04 	str.w	r3, [r0], #4
 81090ba:	d2e8      	bcs.n	810908e <quorem+0xb0>
 81090bc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 81090c0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 81090c4:	b92a      	cbnz	r2, 81090d2 <quorem+0xf4>
 81090c6:	3b04      	subs	r3, #4
 81090c8:	429e      	cmp	r6, r3
 81090ca:	461a      	mov	r2, r3
 81090cc:	d30b      	bcc.n	81090e6 <quorem+0x108>
 81090ce:	f8c8 4010 	str.w	r4, [r8, #16]
 81090d2:	4628      	mov	r0, r5
 81090d4:	b003      	add	sp, #12
 81090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81090da:	6812      	ldr	r2, [r2, #0]
 81090dc:	3b04      	subs	r3, #4
 81090de:	2a00      	cmp	r2, #0
 81090e0:	d1ca      	bne.n	8109078 <quorem+0x9a>
 81090e2:	3c01      	subs	r4, #1
 81090e4:	e7c5      	b.n	8109072 <quorem+0x94>
 81090e6:	6812      	ldr	r2, [r2, #0]
 81090e8:	3b04      	subs	r3, #4
 81090ea:	2a00      	cmp	r2, #0
 81090ec:	d1ef      	bne.n	81090ce <quorem+0xf0>
 81090ee:	3c01      	subs	r4, #1
 81090f0:	e7ea      	b.n	81090c8 <quorem+0xea>
 81090f2:	2000      	movs	r0, #0
 81090f4:	e7ee      	b.n	81090d4 <quorem+0xf6>
	...

081090f8 <_dtoa_r>:
 81090f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81090fc:	ec57 6b10 	vmov	r6, r7, d0
 8109100:	b097      	sub	sp, #92	; 0x5c
 8109102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109104:	9106      	str	r1, [sp, #24]
 8109106:	4604      	mov	r4, r0
 8109108:	920b      	str	r2, [sp, #44]	; 0x2c
 810910a:	9312      	str	r3, [sp, #72]	; 0x48
 810910c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8109110:	e9cd 6700 	strd	r6, r7, [sp]
 8109114:	b93d      	cbnz	r5, 8109126 <_dtoa_r+0x2e>
 8109116:	2010      	movs	r0, #16
 8109118:	f000 fdb4 	bl	8109c84 <malloc>
 810911c:	6260      	str	r0, [r4, #36]	; 0x24
 810911e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8109122:	6005      	str	r5, [r0, #0]
 8109124:	60c5      	str	r5, [r0, #12]
 8109126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109128:	6819      	ldr	r1, [r3, #0]
 810912a:	b151      	cbz	r1, 8109142 <_dtoa_r+0x4a>
 810912c:	685a      	ldr	r2, [r3, #4]
 810912e:	604a      	str	r2, [r1, #4]
 8109130:	2301      	movs	r3, #1
 8109132:	4093      	lsls	r3, r2
 8109134:	608b      	str	r3, [r1, #8]
 8109136:	4620      	mov	r0, r4
 8109138:	f000 fde0 	bl	8109cfc <_Bfree>
 810913c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810913e:	2200      	movs	r2, #0
 8109140:	601a      	str	r2, [r3, #0]
 8109142:	1e3b      	subs	r3, r7, #0
 8109144:	bfbb      	ittet	lt
 8109146:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810914a:	9301      	strlt	r3, [sp, #4]
 810914c:	2300      	movge	r3, #0
 810914e:	2201      	movlt	r2, #1
 8109150:	bfac      	ite	ge
 8109152:	f8c8 3000 	strge.w	r3, [r8]
 8109156:	f8c8 2000 	strlt.w	r2, [r8]
 810915a:	4baf      	ldr	r3, [pc, #700]	; (8109418 <_dtoa_r+0x320>)
 810915c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8109160:	ea33 0308 	bics.w	r3, r3, r8
 8109164:	d114      	bne.n	8109190 <_dtoa_r+0x98>
 8109166:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8109168:	f242 730f 	movw	r3, #9999	; 0x270f
 810916c:	6013      	str	r3, [r2, #0]
 810916e:	9b00      	ldr	r3, [sp, #0]
 8109170:	b923      	cbnz	r3, 810917c <_dtoa_r+0x84>
 8109172:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8109176:	2800      	cmp	r0, #0
 8109178:	f000 8542 	beq.w	8109c00 <_dtoa_r+0xb08>
 810917c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810917e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810942c <_dtoa_r+0x334>
 8109182:	2b00      	cmp	r3, #0
 8109184:	f000 8544 	beq.w	8109c10 <_dtoa_r+0xb18>
 8109188:	f10b 0303 	add.w	r3, fp, #3
 810918c:	f000 bd3e 	b.w	8109c0c <_dtoa_r+0xb14>
 8109190:	e9dd 6700 	ldrd	r6, r7, [sp]
 8109194:	2200      	movs	r2, #0
 8109196:	2300      	movs	r3, #0
 8109198:	4630      	mov	r0, r6
 810919a:	4639      	mov	r1, r7
 810919c:	f7f7 fccc 	bl	8100b38 <__aeabi_dcmpeq>
 81091a0:	4681      	mov	r9, r0
 81091a2:	b168      	cbz	r0, 81091c0 <_dtoa_r+0xc8>
 81091a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81091a6:	2301      	movs	r3, #1
 81091a8:	6013      	str	r3, [r2, #0]
 81091aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81091ac:	2b00      	cmp	r3, #0
 81091ae:	f000 8524 	beq.w	8109bfa <_dtoa_r+0xb02>
 81091b2:	4b9a      	ldr	r3, [pc, #616]	; (810941c <_dtoa_r+0x324>)
 81091b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 81091b6:	f103 3bff 	add.w	fp, r3, #4294967295
 81091ba:	6013      	str	r3, [r2, #0]
 81091bc:	f000 bd28 	b.w	8109c10 <_dtoa_r+0xb18>
 81091c0:	aa14      	add	r2, sp, #80	; 0x50
 81091c2:	a915      	add	r1, sp, #84	; 0x54
 81091c4:	ec47 6b10 	vmov	d0, r6, r7
 81091c8:	4620      	mov	r0, r4
 81091ca:	f000 fff0 	bl	810a1ae <__d2b>
 81091ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 81091d2:	9004      	str	r0, [sp, #16]
 81091d4:	2d00      	cmp	r5, #0
 81091d6:	d07c      	beq.n	81092d2 <_dtoa_r+0x1da>
 81091d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 81091dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 81091e0:	46b2      	mov	sl, r6
 81091e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 81091e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81091ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 81091ee:	2200      	movs	r2, #0
 81091f0:	4b8b      	ldr	r3, [pc, #556]	; (8109420 <_dtoa_r+0x328>)
 81091f2:	4650      	mov	r0, sl
 81091f4:	4659      	mov	r1, fp
 81091f6:	f7f7 f87f 	bl	81002f8 <__aeabi_dsub>
 81091fa:	a381      	add	r3, pc, #516	; (adr r3, 8109400 <_dtoa_r+0x308>)
 81091fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109200:	f7f7 fa32 	bl	8100668 <__aeabi_dmul>
 8109204:	a380      	add	r3, pc, #512	; (adr r3, 8109408 <_dtoa_r+0x310>)
 8109206:	e9d3 2300 	ldrd	r2, r3, [r3]
 810920a:	f7f7 f877 	bl	81002fc <__adddf3>
 810920e:	4606      	mov	r6, r0
 8109210:	4628      	mov	r0, r5
 8109212:	460f      	mov	r7, r1
 8109214:	f7f7 f9be 	bl	8100594 <__aeabi_i2d>
 8109218:	a37d      	add	r3, pc, #500	; (adr r3, 8109410 <_dtoa_r+0x318>)
 810921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810921e:	f7f7 fa23 	bl	8100668 <__aeabi_dmul>
 8109222:	4602      	mov	r2, r0
 8109224:	460b      	mov	r3, r1
 8109226:	4630      	mov	r0, r6
 8109228:	4639      	mov	r1, r7
 810922a:	f7f7 f867 	bl	81002fc <__adddf3>
 810922e:	4606      	mov	r6, r0
 8109230:	460f      	mov	r7, r1
 8109232:	f7f7 fcc9 	bl	8100bc8 <__aeabi_d2iz>
 8109236:	2200      	movs	r2, #0
 8109238:	4682      	mov	sl, r0
 810923a:	2300      	movs	r3, #0
 810923c:	4630      	mov	r0, r6
 810923e:	4639      	mov	r1, r7
 8109240:	f7f7 fc84 	bl	8100b4c <__aeabi_dcmplt>
 8109244:	b148      	cbz	r0, 810925a <_dtoa_r+0x162>
 8109246:	4650      	mov	r0, sl
 8109248:	f7f7 f9a4 	bl	8100594 <__aeabi_i2d>
 810924c:	4632      	mov	r2, r6
 810924e:	463b      	mov	r3, r7
 8109250:	f7f7 fc72 	bl	8100b38 <__aeabi_dcmpeq>
 8109254:	b908      	cbnz	r0, 810925a <_dtoa_r+0x162>
 8109256:	f10a 3aff 	add.w	sl, sl, #4294967295
 810925a:	f1ba 0f16 	cmp.w	sl, #22
 810925e:	d859      	bhi.n	8109314 <_dtoa_r+0x21c>
 8109260:	4970      	ldr	r1, [pc, #448]	; (8109424 <_dtoa_r+0x32c>)
 8109262:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8109266:	e9dd 2300 	ldrd	r2, r3, [sp]
 810926a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810926e:	f7f7 fc8b 	bl	8100b88 <__aeabi_dcmpgt>
 8109272:	2800      	cmp	r0, #0
 8109274:	d050      	beq.n	8109318 <_dtoa_r+0x220>
 8109276:	f10a 3aff 	add.w	sl, sl, #4294967295
 810927a:	2300      	movs	r3, #0
 810927c:	930f      	str	r3, [sp, #60]	; 0x3c
 810927e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109280:	1b5d      	subs	r5, r3, r5
 8109282:	f1b5 0801 	subs.w	r8, r5, #1
 8109286:	bf49      	itett	mi
 8109288:	f1c5 0301 	rsbmi	r3, r5, #1
 810928c:	2300      	movpl	r3, #0
 810928e:	9305      	strmi	r3, [sp, #20]
 8109290:	f04f 0800 	movmi.w	r8, #0
 8109294:	bf58      	it	pl
 8109296:	9305      	strpl	r3, [sp, #20]
 8109298:	f1ba 0f00 	cmp.w	sl, #0
 810929c:	db3e      	blt.n	810931c <_dtoa_r+0x224>
 810929e:	2300      	movs	r3, #0
 81092a0:	44d0      	add	r8, sl
 81092a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 81092a6:	9307      	str	r3, [sp, #28]
 81092a8:	9b06      	ldr	r3, [sp, #24]
 81092aa:	2b09      	cmp	r3, #9
 81092ac:	f200 8090 	bhi.w	81093d0 <_dtoa_r+0x2d8>
 81092b0:	2b05      	cmp	r3, #5
 81092b2:	bfc4      	itt	gt
 81092b4:	3b04      	subgt	r3, #4
 81092b6:	9306      	strgt	r3, [sp, #24]
 81092b8:	9b06      	ldr	r3, [sp, #24]
 81092ba:	f1a3 0302 	sub.w	r3, r3, #2
 81092be:	bfcc      	ite	gt
 81092c0:	2500      	movgt	r5, #0
 81092c2:	2501      	movle	r5, #1
 81092c4:	2b03      	cmp	r3, #3
 81092c6:	f200 808f 	bhi.w	81093e8 <_dtoa_r+0x2f0>
 81092ca:	e8df f003 	tbb	[pc, r3]
 81092ce:	7f7d      	.short	0x7f7d
 81092d0:	7131      	.short	0x7131
 81092d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 81092d6:	441d      	add	r5, r3
 81092d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 81092dc:	2820      	cmp	r0, #32
 81092de:	dd13      	ble.n	8109308 <_dtoa_r+0x210>
 81092e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 81092e4:	9b00      	ldr	r3, [sp, #0]
 81092e6:	fa08 f800 	lsl.w	r8, r8, r0
 81092ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 81092ee:	fa23 f000 	lsr.w	r0, r3, r0
 81092f2:	ea48 0000 	orr.w	r0, r8, r0
 81092f6:	f7f7 f93d 	bl	8100574 <__aeabi_ui2d>
 81092fa:	2301      	movs	r3, #1
 81092fc:	4682      	mov	sl, r0
 81092fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8109302:	3d01      	subs	r5, #1
 8109304:	9313      	str	r3, [sp, #76]	; 0x4c
 8109306:	e772      	b.n	81091ee <_dtoa_r+0xf6>
 8109308:	9b00      	ldr	r3, [sp, #0]
 810930a:	f1c0 0020 	rsb	r0, r0, #32
 810930e:	fa03 f000 	lsl.w	r0, r3, r0
 8109312:	e7f0      	b.n	81092f6 <_dtoa_r+0x1fe>
 8109314:	2301      	movs	r3, #1
 8109316:	e7b1      	b.n	810927c <_dtoa_r+0x184>
 8109318:	900f      	str	r0, [sp, #60]	; 0x3c
 810931a:	e7b0      	b.n	810927e <_dtoa_r+0x186>
 810931c:	9b05      	ldr	r3, [sp, #20]
 810931e:	eba3 030a 	sub.w	r3, r3, sl
 8109322:	9305      	str	r3, [sp, #20]
 8109324:	f1ca 0300 	rsb	r3, sl, #0
 8109328:	9307      	str	r3, [sp, #28]
 810932a:	2300      	movs	r3, #0
 810932c:	930e      	str	r3, [sp, #56]	; 0x38
 810932e:	e7bb      	b.n	81092a8 <_dtoa_r+0x1b0>
 8109330:	2301      	movs	r3, #1
 8109332:	930a      	str	r3, [sp, #40]	; 0x28
 8109334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109336:	2b00      	cmp	r3, #0
 8109338:	dd59      	ble.n	81093ee <_dtoa_r+0x2f6>
 810933a:	9302      	str	r3, [sp, #8]
 810933c:	4699      	mov	r9, r3
 810933e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8109340:	2200      	movs	r2, #0
 8109342:	6072      	str	r2, [r6, #4]
 8109344:	2204      	movs	r2, #4
 8109346:	f102 0014 	add.w	r0, r2, #20
 810934a:	4298      	cmp	r0, r3
 810934c:	6871      	ldr	r1, [r6, #4]
 810934e:	d953      	bls.n	81093f8 <_dtoa_r+0x300>
 8109350:	4620      	mov	r0, r4
 8109352:	f000 fc9f 	bl	8109c94 <_Balloc>
 8109356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109358:	6030      	str	r0, [r6, #0]
 810935a:	f1b9 0f0e 	cmp.w	r9, #14
 810935e:	f8d3 b000 	ldr.w	fp, [r3]
 8109362:	f200 80e6 	bhi.w	8109532 <_dtoa_r+0x43a>
 8109366:	2d00      	cmp	r5, #0
 8109368:	f000 80e3 	beq.w	8109532 <_dtoa_r+0x43a>
 810936c:	ed9d 7b00 	vldr	d7, [sp]
 8109370:	f1ba 0f00 	cmp.w	sl, #0
 8109374:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8109378:	dd74      	ble.n	8109464 <_dtoa_r+0x36c>
 810937a:	4a2a      	ldr	r2, [pc, #168]	; (8109424 <_dtoa_r+0x32c>)
 810937c:	f00a 030f 	and.w	r3, sl, #15
 8109380:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109384:	ed93 7b00 	vldr	d7, [r3]
 8109388:	ea4f 162a 	mov.w	r6, sl, asr #4
 810938c:	06f0      	lsls	r0, r6, #27
 810938e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8109392:	d565      	bpl.n	8109460 <_dtoa_r+0x368>
 8109394:	4b24      	ldr	r3, [pc, #144]	; (8109428 <_dtoa_r+0x330>)
 8109396:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810939a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810939e:	f7f7 fa8d 	bl	81008bc <__aeabi_ddiv>
 81093a2:	e9cd 0100 	strd	r0, r1, [sp]
 81093a6:	f006 060f 	and.w	r6, r6, #15
 81093aa:	2503      	movs	r5, #3
 81093ac:	4f1e      	ldr	r7, [pc, #120]	; (8109428 <_dtoa_r+0x330>)
 81093ae:	e04c      	b.n	810944a <_dtoa_r+0x352>
 81093b0:	2301      	movs	r3, #1
 81093b2:	930a      	str	r3, [sp, #40]	; 0x28
 81093b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81093b6:	4453      	add	r3, sl
 81093b8:	f103 0901 	add.w	r9, r3, #1
 81093bc:	9302      	str	r3, [sp, #8]
 81093be:	464b      	mov	r3, r9
 81093c0:	2b01      	cmp	r3, #1
 81093c2:	bfb8      	it	lt
 81093c4:	2301      	movlt	r3, #1
 81093c6:	e7ba      	b.n	810933e <_dtoa_r+0x246>
 81093c8:	2300      	movs	r3, #0
 81093ca:	e7b2      	b.n	8109332 <_dtoa_r+0x23a>
 81093cc:	2300      	movs	r3, #0
 81093ce:	e7f0      	b.n	81093b2 <_dtoa_r+0x2ba>
 81093d0:	2501      	movs	r5, #1
 81093d2:	2300      	movs	r3, #0
 81093d4:	9306      	str	r3, [sp, #24]
 81093d6:	950a      	str	r5, [sp, #40]	; 0x28
 81093d8:	f04f 33ff 	mov.w	r3, #4294967295
 81093dc:	9302      	str	r3, [sp, #8]
 81093de:	4699      	mov	r9, r3
 81093e0:	2200      	movs	r2, #0
 81093e2:	2312      	movs	r3, #18
 81093e4:	920b      	str	r2, [sp, #44]	; 0x2c
 81093e6:	e7aa      	b.n	810933e <_dtoa_r+0x246>
 81093e8:	2301      	movs	r3, #1
 81093ea:	930a      	str	r3, [sp, #40]	; 0x28
 81093ec:	e7f4      	b.n	81093d8 <_dtoa_r+0x2e0>
 81093ee:	2301      	movs	r3, #1
 81093f0:	9302      	str	r3, [sp, #8]
 81093f2:	4699      	mov	r9, r3
 81093f4:	461a      	mov	r2, r3
 81093f6:	e7f5      	b.n	81093e4 <_dtoa_r+0x2ec>
 81093f8:	3101      	adds	r1, #1
 81093fa:	6071      	str	r1, [r6, #4]
 81093fc:	0052      	lsls	r2, r2, #1
 81093fe:	e7a2      	b.n	8109346 <_dtoa_r+0x24e>
 8109400:	636f4361 	.word	0x636f4361
 8109404:	3fd287a7 	.word	0x3fd287a7
 8109408:	8b60c8b3 	.word	0x8b60c8b3
 810940c:	3fc68a28 	.word	0x3fc68a28
 8109410:	509f79fb 	.word	0x509f79fb
 8109414:	3fd34413 	.word	0x3fd34413
 8109418:	7ff00000 	.word	0x7ff00000
 810941c:	0810a429 	.word	0x0810a429
 8109420:	3ff80000 	.word	0x3ff80000
 8109424:	0810a460 	.word	0x0810a460
 8109428:	0810a438 	.word	0x0810a438
 810942c:	0810a433 	.word	0x0810a433
 8109430:	07f1      	lsls	r1, r6, #31
 8109432:	d508      	bpl.n	8109446 <_dtoa_r+0x34e>
 8109434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8109438:	e9d7 2300 	ldrd	r2, r3, [r7]
 810943c:	f7f7 f914 	bl	8100668 <__aeabi_dmul>
 8109440:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8109444:	3501      	adds	r5, #1
 8109446:	1076      	asrs	r6, r6, #1
 8109448:	3708      	adds	r7, #8
 810944a:	2e00      	cmp	r6, #0
 810944c:	d1f0      	bne.n	8109430 <_dtoa_r+0x338>
 810944e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8109452:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109456:	f7f7 fa31 	bl	81008bc <__aeabi_ddiv>
 810945a:	e9cd 0100 	strd	r0, r1, [sp]
 810945e:	e01a      	b.n	8109496 <_dtoa_r+0x39e>
 8109460:	2502      	movs	r5, #2
 8109462:	e7a3      	b.n	81093ac <_dtoa_r+0x2b4>
 8109464:	f000 80a0 	beq.w	81095a8 <_dtoa_r+0x4b0>
 8109468:	f1ca 0600 	rsb	r6, sl, #0
 810946c:	4b9f      	ldr	r3, [pc, #636]	; (81096ec <_dtoa_r+0x5f4>)
 810946e:	4fa0      	ldr	r7, [pc, #640]	; (81096f0 <_dtoa_r+0x5f8>)
 8109470:	f006 020f 	and.w	r2, r6, #15
 8109474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109478:	e9d3 2300 	ldrd	r2, r3, [r3]
 810947c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8109480:	f7f7 f8f2 	bl	8100668 <__aeabi_dmul>
 8109484:	e9cd 0100 	strd	r0, r1, [sp]
 8109488:	1136      	asrs	r6, r6, #4
 810948a:	2300      	movs	r3, #0
 810948c:	2502      	movs	r5, #2
 810948e:	2e00      	cmp	r6, #0
 8109490:	d17f      	bne.n	8109592 <_dtoa_r+0x49a>
 8109492:	2b00      	cmp	r3, #0
 8109494:	d1e1      	bne.n	810945a <_dtoa_r+0x362>
 8109496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109498:	2b00      	cmp	r3, #0
 810949a:	f000 8087 	beq.w	81095ac <_dtoa_r+0x4b4>
 810949e:	e9dd 6700 	ldrd	r6, r7, [sp]
 81094a2:	2200      	movs	r2, #0
 81094a4:	4b93      	ldr	r3, [pc, #588]	; (81096f4 <_dtoa_r+0x5fc>)
 81094a6:	4630      	mov	r0, r6
 81094a8:	4639      	mov	r1, r7
 81094aa:	f7f7 fb4f 	bl	8100b4c <__aeabi_dcmplt>
 81094ae:	2800      	cmp	r0, #0
 81094b0:	d07c      	beq.n	81095ac <_dtoa_r+0x4b4>
 81094b2:	f1b9 0f00 	cmp.w	r9, #0
 81094b6:	d079      	beq.n	81095ac <_dtoa_r+0x4b4>
 81094b8:	9b02      	ldr	r3, [sp, #8]
 81094ba:	2b00      	cmp	r3, #0
 81094bc:	dd35      	ble.n	810952a <_dtoa_r+0x432>
 81094be:	f10a 33ff 	add.w	r3, sl, #4294967295
 81094c2:	9308      	str	r3, [sp, #32]
 81094c4:	4639      	mov	r1, r7
 81094c6:	2200      	movs	r2, #0
 81094c8:	4b8b      	ldr	r3, [pc, #556]	; (81096f8 <_dtoa_r+0x600>)
 81094ca:	4630      	mov	r0, r6
 81094cc:	f7f7 f8cc 	bl	8100668 <__aeabi_dmul>
 81094d0:	e9cd 0100 	strd	r0, r1, [sp]
 81094d4:	9f02      	ldr	r7, [sp, #8]
 81094d6:	3501      	adds	r5, #1
 81094d8:	4628      	mov	r0, r5
 81094da:	f7f7 f85b 	bl	8100594 <__aeabi_i2d>
 81094de:	e9dd 2300 	ldrd	r2, r3, [sp]
 81094e2:	f7f7 f8c1 	bl	8100668 <__aeabi_dmul>
 81094e6:	2200      	movs	r2, #0
 81094e8:	4b84      	ldr	r3, [pc, #528]	; (81096fc <_dtoa_r+0x604>)
 81094ea:	f7f6 ff07 	bl	81002fc <__adddf3>
 81094ee:	4605      	mov	r5, r0
 81094f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 81094f4:	2f00      	cmp	r7, #0
 81094f6:	d15d      	bne.n	81095b4 <_dtoa_r+0x4bc>
 81094f8:	2200      	movs	r2, #0
 81094fa:	4b81      	ldr	r3, [pc, #516]	; (8109700 <_dtoa_r+0x608>)
 81094fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109500:	f7f6 fefa 	bl	81002f8 <__aeabi_dsub>
 8109504:	462a      	mov	r2, r5
 8109506:	4633      	mov	r3, r6
 8109508:	e9cd 0100 	strd	r0, r1, [sp]
 810950c:	f7f7 fb3c 	bl	8100b88 <__aeabi_dcmpgt>
 8109510:	2800      	cmp	r0, #0
 8109512:	f040 8288 	bne.w	8109a26 <_dtoa_r+0x92e>
 8109516:	462a      	mov	r2, r5
 8109518:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810951c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109520:	f7f7 fb14 	bl	8100b4c <__aeabi_dcmplt>
 8109524:	2800      	cmp	r0, #0
 8109526:	f040 827c 	bne.w	8109a22 <_dtoa_r+0x92a>
 810952a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810952e:	e9cd 2300 	strd	r2, r3, [sp]
 8109532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109534:	2b00      	cmp	r3, #0
 8109536:	f2c0 8150 	blt.w	81097da <_dtoa_r+0x6e2>
 810953a:	f1ba 0f0e 	cmp.w	sl, #14
 810953e:	f300 814c 	bgt.w	81097da <_dtoa_r+0x6e2>
 8109542:	4b6a      	ldr	r3, [pc, #424]	; (81096ec <_dtoa_r+0x5f4>)
 8109544:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109548:	ed93 7b00 	vldr	d7, [r3]
 810954c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810954e:	2b00      	cmp	r3, #0
 8109550:	ed8d 7b02 	vstr	d7, [sp, #8]
 8109554:	f280 80d8 	bge.w	8109708 <_dtoa_r+0x610>
 8109558:	f1b9 0f00 	cmp.w	r9, #0
 810955c:	f300 80d4 	bgt.w	8109708 <_dtoa_r+0x610>
 8109560:	f040 825e 	bne.w	8109a20 <_dtoa_r+0x928>
 8109564:	2200      	movs	r2, #0
 8109566:	4b66      	ldr	r3, [pc, #408]	; (8109700 <_dtoa_r+0x608>)
 8109568:	ec51 0b17 	vmov	r0, r1, d7
 810956c:	f7f7 f87c 	bl	8100668 <__aeabi_dmul>
 8109570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8109574:	f7f7 fafe 	bl	8100b74 <__aeabi_dcmpge>
 8109578:	464f      	mov	r7, r9
 810957a:	464e      	mov	r6, r9
 810957c:	2800      	cmp	r0, #0
 810957e:	f040 8234 	bne.w	81099ea <_dtoa_r+0x8f2>
 8109582:	2331      	movs	r3, #49	; 0x31
 8109584:	f10b 0501 	add.w	r5, fp, #1
 8109588:	f88b 3000 	strb.w	r3, [fp]
 810958c:	f10a 0a01 	add.w	sl, sl, #1
 8109590:	e22f      	b.n	81099f2 <_dtoa_r+0x8fa>
 8109592:	07f2      	lsls	r2, r6, #31
 8109594:	d505      	bpl.n	81095a2 <_dtoa_r+0x4aa>
 8109596:	e9d7 2300 	ldrd	r2, r3, [r7]
 810959a:	f7f7 f865 	bl	8100668 <__aeabi_dmul>
 810959e:	3501      	adds	r5, #1
 81095a0:	2301      	movs	r3, #1
 81095a2:	1076      	asrs	r6, r6, #1
 81095a4:	3708      	adds	r7, #8
 81095a6:	e772      	b.n	810948e <_dtoa_r+0x396>
 81095a8:	2502      	movs	r5, #2
 81095aa:	e774      	b.n	8109496 <_dtoa_r+0x39e>
 81095ac:	f8cd a020 	str.w	sl, [sp, #32]
 81095b0:	464f      	mov	r7, r9
 81095b2:	e791      	b.n	81094d8 <_dtoa_r+0x3e0>
 81095b4:	4b4d      	ldr	r3, [pc, #308]	; (81096ec <_dtoa_r+0x5f4>)
 81095b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81095ba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 81095be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81095c0:	2b00      	cmp	r3, #0
 81095c2:	d047      	beq.n	8109654 <_dtoa_r+0x55c>
 81095c4:	4602      	mov	r2, r0
 81095c6:	460b      	mov	r3, r1
 81095c8:	2000      	movs	r0, #0
 81095ca:	494e      	ldr	r1, [pc, #312]	; (8109704 <_dtoa_r+0x60c>)
 81095cc:	f7f7 f976 	bl	81008bc <__aeabi_ddiv>
 81095d0:	462a      	mov	r2, r5
 81095d2:	4633      	mov	r3, r6
 81095d4:	f7f6 fe90 	bl	81002f8 <__aeabi_dsub>
 81095d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81095dc:	465d      	mov	r5, fp
 81095de:	e9dd 0100 	ldrd	r0, r1, [sp]
 81095e2:	f7f7 faf1 	bl	8100bc8 <__aeabi_d2iz>
 81095e6:	4606      	mov	r6, r0
 81095e8:	f7f6 ffd4 	bl	8100594 <__aeabi_i2d>
 81095ec:	4602      	mov	r2, r0
 81095ee:	460b      	mov	r3, r1
 81095f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 81095f4:	f7f6 fe80 	bl	81002f8 <__aeabi_dsub>
 81095f8:	3630      	adds	r6, #48	; 0x30
 81095fa:	f805 6b01 	strb.w	r6, [r5], #1
 81095fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8109602:	e9cd 0100 	strd	r0, r1, [sp]
 8109606:	f7f7 faa1 	bl	8100b4c <__aeabi_dcmplt>
 810960a:	2800      	cmp	r0, #0
 810960c:	d163      	bne.n	81096d6 <_dtoa_r+0x5de>
 810960e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8109612:	2000      	movs	r0, #0
 8109614:	4937      	ldr	r1, [pc, #220]	; (81096f4 <_dtoa_r+0x5fc>)
 8109616:	f7f6 fe6f 	bl	81002f8 <__aeabi_dsub>
 810961a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810961e:	f7f7 fa95 	bl	8100b4c <__aeabi_dcmplt>
 8109622:	2800      	cmp	r0, #0
 8109624:	f040 80b7 	bne.w	8109796 <_dtoa_r+0x69e>
 8109628:	eba5 030b 	sub.w	r3, r5, fp
 810962c:	429f      	cmp	r7, r3
 810962e:	f77f af7c 	ble.w	810952a <_dtoa_r+0x432>
 8109632:	2200      	movs	r2, #0
 8109634:	4b30      	ldr	r3, [pc, #192]	; (81096f8 <_dtoa_r+0x600>)
 8109636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810963a:	f7f7 f815 	bl	8100668 <__aeabi_dmul>
 810963e:	2200      	movs	r2, #0
 8109640:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8109644:	4b2c      	ldr	r3, [pc, #176]	; (81096f8 <_dtoa_r+0x600>)
 8109646:	e9dd 0100 	ldrd	r0, r1, [sp]
 810964a:	f7f7 f80d 	bl	8100668 <__aeabi_dmul>
 810964e:	e9cd 0100 	strd	r0, r1, [sp]
 8109652:	e7c4      	b.n	81095de <_dtoa_r+0x4e6>
 8109654:	462a      	mov	r2, r5
 8109656:	4633      	mov	r3, r6
 8109658:	f7f7 f806 	bl	8100668 <__aeabi_dmul>
 810965c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8109660:	eb0b 0507 	add.w	r5, fp, r7
 8109664:	465e      	mov	r6, fp
 8109666:	e9dd 0100 	ldrd	r0, r1, [sp]
 810966a:	f7f7 faad 	bl	8100bc8 <__aeabi_d2iz>
 810966e:	4607      	mov	r7, r0
 8109670:	f7f6 ff90 	bl	8100594 <__aeabi_i2d>
 8109674:	3730      	adds	r7, #48	; 0x30
 8109676:	4602      	mov	r2, r0
 8109678:	460b      	mov	r3, r1
 810967a:	e9dd 0100 	ldrd	r0, r1, [sp]
 810967e:	f7f6 fe3b 	bl	81002f8 <__aeabi_dsub>
 8109682:	f806 7b01 	strb.w	r7, [r6], #1
 8109686:	42ae      	cmp	r6, r5
 8109688:	e9cd 0100 	strd	r0, r1, [sp]
 810968c:	f04f 0200 	mov.w	r2, #0
 8109690:	d126      	bne.n	81096e0 <_dtoa_r+0x5e8>
 8109692:	4b1c      	ldr	r3, [pc, #112]	; (8109704 <_dtoa_r+0x60c>)
 8109694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109698:	f7f6 fe30 	bl	81002fc <__adddf3>
 810969c:	4602      	mov	r2, r0
 810969e:	460b      	mov	r3, r1
 81096a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 81096a4:	f7f7 fa70 	bl	8100b88 <__aeabi_dcmpgt>
 81096a8:	2800      	cmp	r0, #0
 81096aa:	d174      	bne.n	8109796 <_dtoa_r+0x69e>
 81096ac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 81096b0:	2000      	movs	r0, #0
 81096b2:	4914      	ldr	r1, [pc, #80]	; (8109704 <_dtoa_r+0x60c>)
 81096b4:	f7f6 fe20 	bl	81002f8 <__aeabi_dsub>
 81096b8:	4602      	mov	r2, r0
 81096ba:	460b      	mov	r3, r1
 81096bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 81096c0:	f7f7 fa44 	bl	8100b4c <__aeabi_dcmplt>
 81096c4:	2800      	cmp	r0, #0
 81096c6:	f43f af30 	beq.w	810952a <_dtoa_r+0x432>
 81096ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81096ce:	2b30      	cmp	r3, #48	; 0x30
 81096d0:	f105 32ff 	add.w	r2, r5, #4294967295
 81096d4:	d002      	beq.n	81096dc <_dtoa_r+0x5e4>
 81096d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 81096da:	e04a      	b.n	8109772 <_dtoa_r+0x67a>
 81096dc:	4615      	mov	r5, r2
 81096de:	e7f4      	b.n	81096ca <_dtoa_r+0x5d2>
 81096e0:	4b05      	ldr	r3, [pc, #20]	; (81096f8 <_dtoa_r+0x600>)
 81096e2:	f7f6 ffc1 	bl	8100668 <__aeabi_dmul>
 81096e6:	e9cd 0100 	strd	r0, r1, [sp]
 81096ea:	e7bc      	b.n	8109666 <_dtoa_r+0x56e>
 81096ec:	0810a460 	.word	0x0810a460
 81096f0:	0810a438 	.word	0x0810a438
 81096f4:	3ff00000 	.word	0x3ff00000
 81096f8:	40240000 	.word	0x40240000
 81096fc:	401c0000 	.word	0x401c0000
 8109700:	40140000 	.word	0x40140000
 8109704:	3fe00000 	.word	0x3fe00000
 8109708:	e9dd 6700 	ldrd	r6, r7, [sp]
 810970c:	465d      	mov	r5, fp
 810970e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109712:	4630      	mov	r0, r6
 8109714:	4639      	mov	r1, r7
 8109716:	f7f7 f8d1 	bl	81008bc <__aeabi_ddiv>
 810971a:	f7f7 fa55 	bl	8100bc8 <__aeabi_d2iz>
 810971e:	4680      	mov	r8, r0
 8109720:	f7f6 ff38 	bl	8100594 <__aeabi_i2d>
 8109724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109728:	f7f6 ff9e 	bl	8100668 <__aeabi_dmul>
 810972c:	4602      	mov	r2, r0
 810972e:	460b      	mov	r3, r1
 8109730:	4630      	mov	r0, r6
 8109732:	4639      	mov	r1, r7
 8109734:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8109738:	f7f6 fdde 	bl	81002f8 <__aeabi_dsub>
 810973c:	f805 6b01 	strb.w	r6, [r5], #1
 8109740:	eba5 060b 	sub.w	r6, r5, fp
 8109744:	45b1      	cmp	r9, r6
 8109746:	4602      	mov	r2, r0
 8109748:	460b      	mov	r3, r1
 810974a:	d139      	bne.n	81097c0 <_dtoa_r+0x6c8>
 810974c:	f7f6 fdd6 	bl	81002fc <__adddf3>
 8109750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109754:	4606      	mov	r6, r0
 8109756:	460f      	mov	r7, r1
 8109758:	f7f7 fa16 	bl	8100b88 <__aeabi_dcmpgt>
 810975c:	b9c8      	cbnz	r0, 8109792 <_dtoa_r+0x69a>
 810975e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109762:	4630      	mov	r0, r6
 8109764:	4639      	mov	r1, r7
 8109766:	f7f7 f9e7 	bl	8100b38 <__aeabi_dcmpeq>
 810976a:	b110      	cbz	r0, 8109772 <_dtoa_r+0x67a>
 810976c:	f018 0f01 	tst.w	r8, #1
 8109770:	d10f      	bne.n	8109792 <_dtoa_r+0x69a>
 8109772:	9904      	ldr	r1, [sp, #16]
 8109774:	4620      	mov	r0, r4
 8109776:	f000 fac1 	bl	8109cfc <_Bfree>
 810977a:	2300      	movs	r3, #0
 810977c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810977e:	702b      	strb	r3, [r5, #0]
 8109780:	f10a 0301 	add.w	r3, sl, #1
 8109784:	6013      	str	r3, [r2, #0]
 8109786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109788:	2b00      	cmp	r3, #0
 810978a:	f000 8241 	beq.w	8109c10 <_dtoa_r+0xb18>
 810978e:	601d      	str	r5, [r3, #0]
 8109790:	e23e      	b.n	8109c10 <_dtoa_r+0xb18>
 8109792:	f8cd a020 	str.w	sl, [sp, #32]
 8109796:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810979a:	2a39      	cmp	r2, #57	; 0x39
 810979c:	f105 33ff 	add.w	r3, r5, #4294967295
 81097a0:	d108      	bne.n	81097b4 <_dtoa_r+0x6bc>
 81097a2:	459b      	cmp	fp, r3
 81097a4:	d10a      	bne.n	81097bc <_dtoa_r+0x6c4>
 81097a6:	9b08      	ldr	r3, [sp, #32]
 81097a8:	3301      	adds	r3, #1
 81097aa:	9308      	str	r3, [sp, #32]
 81097ac:	2330      	movs	r3, #48	; 0x30
 81097ae:	f88b 3000 	strb.w	r3, [fp]
 81097b2:	465b      	mov	r3, fp
 81097b4:	781a      	ldrb	r2, [r3, #0]
 81097b6:	3201      	adds	r2, #1
 81097b8:	701a      	strb	r2, [r3, #0]
 81097ba:	e78c      	b.n	81096d6 <_dtoa_r+0x5de>
 81097bc:	461d      	mov	r5, r3
 81097be:	e7ea      	b.n	8109796 <_dtoa_r+0x69e>
 81097c0:	2200      	movs	r2, #0
 81097c2:	4b9b      	ldr	r3, [pc, #620]	; (8109a30 <_dtoa_r+0x938>)
 81097c4:	f7f6 ff50 	bl	8100668 <__aeabi_dmul>
 81097c8:	2200      	movs	r2, #0
 81097ca:	2300      	movs	r3, #0
 81097cc:	4606      	mov	r6, r0
 81097ce:	460f      	mov	r7, r1
 81097d0:	f7f7 f9b2 	bl	8100b38 <__aeabi_dcmpeq>
 81097d4:	2800      	cmp	r0, #0
 81097d6:	d09a      	beq.n	810970e <_dtoa_r+0x616>
 81097d8:	e7cb      	b.n	8109772 <_dtoa_r+0x67a>
 81097da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81097dc:	2a00      	cmp	r2, #0
 81097de:	f000 808b 	beq.w	81098f8 <_dtoa_r+0x800>
 81097e2:	9a06      	ldr	r2, [sp, #24]
 81097e4:	2a01      	cmp	r2, #1
 81097e6:	dc6e      	bgt.n	81098c6 <_dtoa_r+0x7ce>
 81097e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 81097ea:	2a00      	cmp	r2, #0
 81097ec:	d067      	beq.n	81098be <_dtoa_r+0x7c6>
 81097ee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 81097f2:	9f07      	ldr	r7, [sp, #28]
 81097f4:	9d05      	ldr	r5, [sp, #20]
 81097f6:	9a05      	ldr	r2, [sp, #20]
 81097f8:	2101      	movs	r1, #1
 81097fa:	441a      	add	r2, r3
 81097fc:	4620      	mov	r0, r4
 81097fe:	9205      	str	r2, [sp, #20]
 8109800:	4498      	add	r8, r3
 8109802:	f000 fb1b 	bl	8109e3c <__i2b>
 8109806:	4606      	mov	r6, r0
 8109808:	2d00      	cmp	r5, #0
 810980a:	dd0c      	ble.n	8109826 <_dtoa_r+0x72e>
 810980c:	f1b8 0f00 	cmp.w	r8, #0
 8109810:	dd09      	ble.n	8109826 <_dtoa_r+0x72e>
 8109812:	4545      	cmp	r5, r8
 8109814:	9a05      	ldr	r2, [sp, #20]
 8109816:	462b      	mov	r3, r5
 8109818:	bfa8      	it	ge
 810981a:	4643      	movge	r3, r8
 810981c:	1ad2      	subs	r2, r2, r3
 810981e:	9205      	str	r2, [sp, #20]
 8109820:	1aed      	subs	r5, r5, r3
 8109822:	eba8 0803 	sub.w	r8, r8, r3
 8109826:	9b07      	ldr	r3, [sp, #28]
 8109828:	b1eb      	cbz	r3, 8109866 <_dtoa_r+0x76e>
 810982a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810982c:	2b00      	cmp	r3, #0
 810982e:	d067      	beq.n	8109900 <_dtoa_r+0x808>
 8109830:	b18f      	cbz	r7, 8109856 <_dtoa_r+0x75e>
 8109832:	4631      	mov	r1, r6
 8109834:	463a      	mov	r2, r7
 8109836:	4620      	mov	r0, r4
 8109838:	f000 fba0 	bl	8109f7c <__pow5mult>
 810983c:	9a04      	ldr	r2, [sp, #16]
 810983e:	4601      	mov	r1, r0
 8109840:	4606      	mov	r6, r0
 8109842:	4620      	mov	r0, r4
 8109844:	f000 fb03 	bl	8109e4e <__multiply>
 8109848:	9904      	ldr	r1, [sp, #16]
 810984a:	9008      	str	r0, [sp, #32]
 810984c:	4620      	mov	r0, r4
 810984e:	f000 fa55 	bl	8109cfc <_Bfree>
 8109852:	9b08      	ldr	r3, [sp, #32]
 8109854:	9304      	str	r3, [sp, #16]
 8109856:	9b07      	ldr	r3, [sp, #28]
 8109858:	1bda      	subs	r2, r3, r7
 810985a:	d004      	beq.n	8109866 <_dtoa_r+0x76e>
 810985c:	9904      	ldr	r1, [sp, #16]
 810985e:	4620      	mov	r0, r4
 8109860:	f000 fb8c 	bl	8109f7c <__pow5mult>
 8109864:	9004      	str	r0, [sp, #16]
 8109866:	2101      	movs	r1, #1
 8109868:	4620      	mov	r0, r4
 810986a:	f000 fae7 	bl	8109e3c <__i2b>
 810986e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109870:	4607      	mov	r7, r0
 8109872:	2b00      	cmp	r3, #0
 8109874:	f000 81d0 	beq.w	8109c18 <_dtoa_r+0xb20>
 8109878:	461a      	mov	r2, r3
 810987a:	4601      	mov	r1, r0
 810987c:	4620      	mov	r0, r4
 810987e:	f000 fb7d 	bl	8109f7c <__pow5mult>
 8109882:	9b06      	ldr	r3, [sp, #24]
 8109884:	2b01      	cmp	r3, #1
 8109886:	4607      	mov	r7, r0
 8109888:	dc40      	bgt.n	810990c <_dtoa_r+0x814>
 810988a:	9b00      	ldr	r3, [sp, #0]
 810988c:	2b00      	cmp	r3, #0
 810988e:	d139      	bne.n	8109904 <_dtoa_r+0x80c>
 8109890:	9b01      	ldr	r3, [sp, #4]
 8109892:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109896:	2b00      	cmp	r3, #0
 8109898:	d136      	bne.n	8109908 <_dtoa_r+0x810>
 810989a:	9b01      	ldr	r3, [sp, #4]
 810989c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81098a0:	0d1b      	lsrs	r3, r3, #20
 81098a2:	051b      	lsls	r3, r3, #20
 81098a4:	b12b      	cbz	r3, 81098b2 <_dtoa_r+0x7ba>
 81098a6:	9b05      	ldr	r3, [sp, #20]
 81098a8:	3301      	adds	r3, #1
 81098aa:	9305      	str	r3, [sp, #20]
 81098ac:	f108 0801 	add.w	r8, r8, #1
 81098b0:	2301      	movs	r3, #1
 81098b2:	9307      	str	r3, [sp, #28]
 81098b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81098b6:	2b00      	cmp	r3, #0
 81098b8:	d12a      	bne.n	8109910 <_dtoa_r+0x818>
 81098ba:	2001      	movs	r0, #1
 81098bc:	e030      	b.n	8109920 <_dtoa_r+0x828>
 81098be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 81098c0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 81098c4:	e795      	b.n	81097f2 <_dtoa_r+0x6fa>
 81098c6:	9b07      	ldr	r3, [sp, #28]
 81098c8:	f109 37ff 	add.w	r7, r9, #4294967295
 81098cc:	42bb      	cmp	r3, r7
 81098ce:	bfbf      	itttt	lt
 81098d0:	9b07      	ldrlt	r3, [sp, #28]
 81098d2:	9707      	strlt	r7, [sp, #28]
 81098d4:	1afa      	sublt	r2, r7, r3
 81098d6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 81098d8:	bfbb      	ittet	lt
 81098da:	189b      	addlt	r3, r3, r2
 81098dc:	930e      	strlt	r3, [sp, #56]	; 0x38
 81098de:	1bdf      	subge	r7, r3, r7
 81098e0:	2700      	movlt	r7, #0
 81098e2:	f1b9 0f00 	cmp.w	r9, #0
 81098e6:	bfb5      	itete	lt
 81098e8:	9b05      	ldrlt	r3, [sp, #20]
 81098ea:	9d05      	ldrge	r5, [sp, #20]
 81098ec:	eba3 0509 	sublt.w	r5, r3, r9
 81098f0:	464b      	movge	r3, r9
 81098f2:	bfb8      	it	lt
 81098f4:	2300      	movlt	r3, #0
 81098f6:	e77e      	b.n	81097f6 <_dtoa_r+0x6fe>
 81098f8:	9f07      	ldr	r7, [sp, #28]
 81098fa:	9d05      	ldr	r5, [sp, #20]
 81098fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 81098fe:	e783      	b.n	8109808 <_dtoa_r+0x710>
 8109900:	9a07      	ldr	r2, [sp, #28]
 8109902:	e7ab      	b.n	810985c <_dtoa_r+0x764>
 8109904:	2300      	movs	r3, #0
 8109906:	e7d4      	b.n	81098b2 <_dtoa_r+0x7ba>
 8109908:	9b00      	ldr	r3, [sp, #0]
 810990a:	e7d2      	b.n	81098b2 <_dtoa_r+0x7ba>
 810990c:	2300      	movs	r3, #0
 810990e:	9307      	str	r3, [sp, #28]
 8109910:	693b      	ldr	r3, [r7, #16]
 8109912:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8109916:	6918      	ldr	r0, [r3, #16]
 8109918:	f000 fa42 	bl	8109da0 <__hi0bits>
 810991c:	f1c0 0020 	rsb	r0, r0, #32
 8109920:	4440      	add	r0, r8
 8109922:	f010 001f 	ands.w	r0, r0, #31
 8109926:	d047      	beq.n	81099b8 <_dtoa_r+0x8c0>
 8109928:	f1c0 0320 	rsb	r3, r0, #32
 810992c:	2b04      	cmp	r3, #4
 810992e:	dd3b      	ble.n	81099a8 <_dtoa_r+0x8b0>
 8109930:	9b05      	ldr	r3, [sp, #20]
 8109932:	f1c0 001c 	rsb	r0, r0, #28
 8109936:	4403      	add	r3, r0
 8109938:	9305      	str	r3, [sp, #20]
 810993a:	4405      	add	r5, r0
 810993c:	4480      	add	r8, r0
 810993e:	9b05      	ldr	r3, [sp, #20]
 8109940:	2b00      	cmp	r3, #0
 8109942:	dd05      	ble.n	8109950 <_dtoa_r+0x858>
 8109944:	461a      	mov	r2, r3
 8109946:	9904      	ldr	r1, [sp, #16]
 8109948:	4620      	mov	r0, r4
 810994a:	f000 fb65 	bl	810a018 <__lshift>
 810994e:	9004      	str	r0, [sp, #16]
 8109950:	f1b8 0f00 	cmp.w	r8, #0
 8109954:	dd05      	ble.n	8109962 <_dtoa_r+0x86a>
 8109956:	4639      	mov	r1, r7
 8109958:	4642      	mov	r2, r8
 810995a:	4620      	mov	r0, r4
 810995c:	f000 fb5c 	bl	810a018 <__lshift>
 8109960:	4607      	mov	r7, r0
 8109962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109964:	b353      	cbz	r3, 81099bc <_dtoa_r+0x8c4>
 8109966:	4639      	mov	r1, r7
 8109968:	9804      	ldr	r0, [sp, #16]
 810996a:	f000 fba9 	bl	810a0c0 <__mcmp>
 810996e:	2800      	cmp	r0, #0
 8109970:	da24      	bge.n	81099bc <_dtoa_r+0x8c4>
 8109972:	2300      	movs	r3, #0
 8109974:	220a      	movs	r2, #10
 8109976:	9904      	ldr	r1, [sp, #16]
 8109978:	4620      	mov	r0, r4
 810997a:	f000 f9d6 	bl	8109d2a <__multadd>
 810997e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109980:	9004      	str	r0, [sp, #16]
 8109982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109986:	2b00      	cmp	r3, #0
 8109988:	f000 814d 	beq.w	8109c26 <_dtoa_r+0xb2e>
 810998c:	2300      	movs	r3, #0
 810998e:	4631      	mov	r1, r6
 8109990:	220a      	movs	r2, #10
 8109992:	4620      	mov	r0, r4
 8109994:	f000 f9c9 	bl	8109d2a <__multadd>
 8109998:	9b02      	ldr	r3, [sp, #8]
 810999a:	2b00      	cmp	r3, #0
 810999c:	4606      	mov	r6, r0
 810999e:	dc4f      	bgt.n	8109a40 <_dtoa_r+0x948>
 81099a0:	9b06      	ldr	r3, [sp, #24]
 81099a2:	2b02      	cmp	r3, #2
 81099a4:	dd4c      	ble.n	8109a40 <_dtoa_r+0x948>
 81099a6:	e011      	b.n	81099cc <_dtoa_r+0x8d4>
 81099a8:	d0c9      	beq.n	810993e <_dtoa_r+0x846>
 81099aa:	9a05      	ldr	r2, [sp, #20]
 81099ac:	331c      	adds	r3, #28
 81099ae:	441a      	add	r2, r3
 81099b0:	9205      	str	r2, [sp, #20]
 81099b2:	441d      	add	r5, r3
 81099b4:	4498      	add	r8, r3
 81099b6:	e7c2      	b.n	810993e <_dtoa_r+0x846>
 81099b8:	4603      	mov	r3, r0
 81099ba:	e7f6      	b.n	81099aa <_dtoa_r+0x8b2>
 81099bc:	f1b9 0f00 	cmp.w	r9, #0
 81099c0:	dc38      	bgt.n	8109a34 <_dtoa_r+0x93c>
 81099c2:	9b06      	ldr	r3, [sp, #24]
 81099c4:	2b02      	cmp	r3, #2
 81099c6:	dd35      	ble.n	8109a34 <_dtoa_r+0x93c>
 81099c8:	f8cd 9008 	str.w	r9, [sp, #8]
 81099cc:	9b02      	ldr	r3, [sp, #8]
 81099ce:	b963      	cbnz	r3, 81099ea <_dtoa_r+0x8f2>
 81099d0:	4639      	mov	r1, r7
 81099d2:	2205      	movs	r2, #5
 81099d4:	4620      	mov	r0, r4
 81099d6:	f000 f9a8 	bl	8109d2a <__multadd>
 81099da:	4601      	mov	r1, r0
 81099dc:	4607      	mov	r7, r0
 81099de:	9804      	ldr	r0, [sp, #16]
 81099e0:	f000 fb6e 	bl	810a0c0 <__mcmp>
 81099e4:	2800      	cmp	r0, #0
 81099e6:	f73f adcc 	bgt.w	8109582 <_dtoa_r+0x48a>
 81099ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81099ec:	465d      	mov	r5, fp
 81099ee:	ea6f 0a03 	mvn.w	sl, r3
 81099f2:	f04f 0900 	mov.w	r9, #0
 81099f6:	4639      	mov	r1, r7
 81099f8:	4620      	mov	r0, r4
 81099fa:	f000 f97f 	bl	8109cfc <_Bfree>
 81099fe:	2e00      	cmp	r6, #0
 8109a00:	f43f aeb7 	beq.w	8109772 <_dtoa_r+0x67a>
 8109a04:	f1b9 0f00 	cmp.w	r9, #0
 8109a08:	d005      	beq.n	8109a16 <_dtoa_r+0x91e>
 8109a0a:	45b1      	cmp	r9, r6
 8109a0c:	d003      	beq.n	8109a16 <_dtoa_r+0x91e>
 8109a0e:	4649      	mov	r1, r9
 8109a10:	4620      	mov	r0, r4
 8109a12:	f000 f973 	bl	8109cfc <_Bfree>
 8109a16:	4631      	mov	r1, r6
 8109a18:	4620      	mov	r0, r4
 8109a1a:	f000 f96f 	bl	8109cfc <_Bfree>
 8109a1e:	e6a8      	b.n	8109772 <_dtoa_r+0x67a>
 8109a20:	2700      	movs	r7, #0
 8109a22:	463e      	mov	r6, r7
 8109a24:	e7e1      	b.n	81099ea <_dtoa_r+0x8f2>
 8109a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8109a2a:	463e      	mov	r6, r7
 8109a2c:	e5a9      	b.n	8109582 <_dtoa_r+0x48a>
 8109a2e:	bf00      	nop
 8109a30:	40240000 	.word	0x40240000
 8109a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109a36:	f8cd 9008 	str.w	r9, [sp, #8]
 8109a3a:	2b00      	cmp	r3, #0
 8109a3c:	f000 80fa 	beq.w	8109c34 <_dtoa_r+0xb3c>
 8109a40:	2d00      	cmp	r5, #0
 8109a42:	dd05      	ble.n	8109a50 <_dtoa_r+0x958>
 8109a44:	4631      	mov	r1, r6
 8109a46:	462a      	mov	r2, r5
 8109a48:	4620      	mov	r0, r4
 8109a4a:	f000 fae5 	bl	810a018 <__lshift>
 8109a4e:	4606      	mov	r6, r0
 8109a50:	9b07      	ldr	r3, [sp, #28]
 8109a52:	2b00      	cmp	r3, #0
 8109a54:	d04c      	beq.n	8109af0 <_dtoa_r+0x9f8>
 8109a56:	6871      	ldr	r1, [r6, #4]
 8109a58:	4620      	mov	r0, r4
 8109a5a:	f000 f91b 	bl	8109c94 <_Balloc>
 8109a5e:	6932      	ldr	r2, [r6, #16]
 8109a60:	3202      	adds	r2, #2
 8109a62:	4605      	mov	r5, r0
 8109a64:	0092      	lsls	r2, r2, #2
 8109a66:	f106 010c 	add.w	r1, r6, #12
 8109a6a:	300c      	adds	r0, #12
 8109a6c:	f7fe ff5a 	bl	8108924 <memcpy>
 8109a70:	2201      	movs	r2, #1
 8109a72:	4629      	mov	r1, r5
 8109a74:	4620      	mov	r0, r4
 8109a76:	f000 facf 	bl	810a018 <__lshift>
 8109a7a:	9b00      	ldr	r3, [sp, #0]
 8109a7c:	f8cd b014 	str.w	fp, [sp, #20]
 8109a80:	f003 0301 	and.w	r3, r3, #1
 8109a84:	46b1      	mov	r9, r6
 8109a86:	9307      	str	r3, [sp, #28]
 8109a88:	4606      	mov	r6, r0
 8109a8a:	4639      	mov	r1, r7
 8109a8c:	9804      	ldr	r0, [sp, #16]
 8109a8e:	f7ff faa6 	bl	8108fde <quorem>
 8109a92:	4649      	mov	r1, r9
 8109a94:	4605      	mov	r5, r0
 8109a96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8109a9a:	9804      	ldr	r0, [sp, #16]
 8109a9c:	f000 fb10 	bl	810a0c0 <__mcmp>
 8109aa0:	4632      	mov	r2, r6
 8109aa2:	9000      	str	r0, [sp, #0]
 8109aa4:	4639      	mov	r1, r7
 8109aa6:	4620      	mov	r0, r4
 8109aa8:	f000 fb24 	bl	810a0f4 <__mdiff>
 8109aac:	68c3      	ldr	r3, [r0, #12]
 8109aae:	4602      	mov	r2, r0
 8109ab0:	bb03      	cbnz	r3, 8109af4 <_dtoa_r+0x9fc>
 8109ab2:	4601      	mov	r1, r0
 8109ab4:	9008      	str	r0, [sp, #32]
 8109ab6:	9804      	ldr	r0, [sp, #16]
 8109ab8:	f000 fb02 	bl	810a0c0 <__mcmp>
 8109abc:	9a08      	ldr	r2, [sp, #32]
 8109abe:	4603      	mov	r3, r0
 8109ac0:	4611      	mov	r1, r2
 8109ac2:	4620      	mov	r0, r4
 8109ac4:	9308      	str	r3, [sp, #32]
 8109ac6:	f000 f919 	bl	8109cfc <_Bfree>
 8109aca:	9b08      	ldr	r3, [sp, #32]
 8109acc:	b9a3      	cbnz	r3, 8109af8 <_dtoa_r+0xa00>
 8109ace:	9a06      	ldr	r2, [sp, #24]
 8109ad0:	b992      	cbnz	r2, 8109af8 <_dtoa_r+0xa00>
 8109ad2:	9a07      	ldr	r2, [sp, #28]
 8109ad4:	b982      	cbnz	r2, 8109af8 <_dtoa_r+0xa00>
 8109ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8109ada:	d029      	beq.n	8109b30 <_dtoa_r+0xa38>
 8109adc:	9b00      	ldr	r3, [sp, #0]
 8109ade:	2b00      	cmp	r3, #0
 8109ae0:	dd01      	ble.n	8109ae6 <_dtoa_r+0x9ee>
 8109ae2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8109ae6:	9b05      	ldr	r3, [sp, #20]
 8109ae8:	1c5d      	adds	r5, r3, #1
 8109aea:	f883 8000 	strb.w	r8, [r3]
 8109aee:	e782      	b.n	81099f6 <_dtoa_r+0x8fe>
 8109af0:	4630      	mov	r0, r6
 8109af2:	e7c2      	b.n	8109a7a <_dtoa_r+0x982>
 8109af4:	2301      	movs	r3, #1
 8109af6:	e7e3      	b.n	8109ac0 <_dtoa_r+0x9c8>
 8109af8:	9a00      	ldr	r2, [sp, #0]
 8109afa:	2a00      	cmp	r2, #0
 8109afc:	db04      	blt.n	8109b08 <_dtoa_r+0xa10>
 8109afe:	d125      	bne.n	8109b4c <_dtoa_r+0xa54>
 8109b00:	9a06      	ldr	r2, [sp, #24]
 8109b02:	bb1a      	cbnz	r2, 8109b4c <_dtoa_r+0xa54>
 8109b04:	9a07      	ldr	r2, [sp, #28]
 8109b06:	bb0a      	cbnz	r2, 8109b4c <_dtoa_r+0xa54>
 8109b08:	2b00      	cmp	r3, #0
 8109b0a:	ddec      	ble.n	8109ae6 <_dtoa_r+0x9ee>
 8109b0c:	2201      	movs	r2, #1
 8109b0e:	9904      	ldr	r1, [sp, #16]
 8109b10:	4620      	mov	r0, r4
 8109b12:	f000 fa81 	bl	810a018 <__lshift>
 8109b16:	4639      	mov	r1, r7
 8109b18:	9004      	str	r0, [sp, #16]
 8109b1a:	f000 fad1 	bl	810a0c0 <__mcmp>
 8109b1e:	2800      	cmp	r0, #0
 8109b20:	dc03      	bgt.n	8109b2a <_dtoa_r+0xa32>
 8109b22:	d1e0      	bne.n	8109ae6 <_dtoa_r+0x9ee>
 8109b24:	f018 0f01 	tst.w	r8, #1
 8109b28:	d0dd      	beq.n	8109ae6 <_dtoa_r+0x9ee>
 8109b2a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8109b2e:	d1d8      	bne.n	8109ae2 <_dtoa_r+0x9ea>
 8109b30:	9b05      	ldr	r3, [sp, #20]
 8109b32:	9a05      	ldr	r2, [sp, #20]
 8109b34:	1c5d      	adds	r5, r3, #1
 8109b36:	2339      	movs	r3, #57	; 0x39
 8109b38:	7013      	strb	r3, [r2, #0]
 8109b3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109b3e:	2b39      	cmp	r3, #57	; 0x39
 8109b40:	f105 32ff 	add.w	r2, r5, #4294967295
 8109b44:	d04f      	beq.n	8109be6 <_dtoa_r+0xaee>
 8109b46:	3301      	adds	r3, #1
 8109b48:	7013      	strb	r3, [r2, #0]
 8109b4a:	e754      	b.n	81099f6 <_dtoa_r+0x8fe>
 8109b4c:	9a05      	ldr	r2, [sp, #20]
 8109b4e:	2b00      	cmp	r3, #0
 8109b50:	f102 0501 	add.w	r5, r2, #1
 8109b54:	dd06      	ble.n	8109b64 <_dtoa_r+0xa6c>
 8109b56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8109b5a:	d0e9      	beq.n	8109b30 <_dtoa_r+0xa38>
 8109b5c:	f108 0801 	add.w	r8, r8, #1
 8109b60:	9b05      	ldr	r3, [sp, #20]
 8109b62:	e7c2      	b.n	8109aea <_dtoa_r+0x9f2>
 8109b64:	9a02      	ldr	r2, [sp, #8]
 8109b66:	f805 8c01 	strb.w	r8, [r5, #-1]
 8109b6a:	eba5 030b 	sub.w	r3, r5, fp
 8109b6e:	4293      	cmp	r3, r2
 8109b70:	d021      	beq.n	8109bb6 <_dtoa_r+0xabe>
 8109b72:	2300      	movs	r3, #0
 8109b74:	220a      	movs	r2, #10
 8109b76:	9904      	ldr	r1, [sp, #16]
 8109b78:	4620      	mov	r0, r4
 8109b7a:	f000 f8d6 	bl	8109d2a <__multadd>
 8109b7e:	45b1      	cmp	r9, r6
 8109b80:	9004      	str	r0, [sp, #16]
 8109b82:	f04f 0300 	mov.w	r3, #0
 8109b86:	f04f 020a 	mov.w	r2, #10
 8109b8a:	4649      	mov	r1, r9
 8109b8c:	4620      	mov	r0, r4
 8109b8e:	d105      	bne.n	8109b9c <_dtoa_r+0xaa4>
 8109b90:	f000 f8cb 	bl	8109d2a <__multadd>
 8109b94:	4681      	mov	r9, r0
 8109b96:	4606      	mov	r6, r0
 8109b98:	9505      	str	r5, [sp, #20]
 8109b9a:	e776      	b.n	8109a8a <_dtoa_r+0x992>
 8109b9c:	f000 f8c5 	bl	8109d2a <__multadd>
 8109ba0:	4631      	mov	r1, r6
 8109ba2:	4681      	mov	r9, r0
 8109ba4:	2300      	movs	r3, #0
 8109ba6:	220a      	movs	r2, #10
 8109ba8:	4620      	mov	r0, r4
 8109baa:	f000 f8be 	bl	8109d2a <__multadd>
 8109bae:	4606      	mov	r6, r0
 8109bb0:	e7f2      	b.n	8109b98 <_dtoa_r+0xaa0>
 8109bb2:	f04f 0900 	mov.w	r9, #0
 8109bb6:	2201      	movs	r2, #1
 8109bb8:	9904      	ldr	r1, [sp, #16]
 8109bba:	4620      	mov	r0, r4
 8109bbc:	f000 fa2c 	bl	810a018 <__lshift>
 8109bc0:	4639      	mov	r1, r7
 8109bc2:	9004      	str	r0, [sp, #16]
 8109bc4:	f000 fa7c 	bl	810a0c0 <__mcmp>
 8109bc8:	2800      	cmp	r0, #0
 8109bca:	dcb6      	bgt.n	8109b3a <_dtoa_r+0xa42>
 8109bcc:	d102      	bne.n	8109bd4 <_dtoa_r+0xadc>
 8109bce:	f018 0f01 	tst.w	r8, #1
 8109bd2:	d1b2      	bne.n	8109b3a <_dtoa_r+0xa42>
 8109bd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109bd8:	2b30      	cmp	r3, #48	; 0x30
 8109bda:	f105 32ff 	add.w	r2, r5, #4294967295
 8109bde:	f47f af0a 	bne.w	81099f6 <_dtoa_r+0x8fe>
 8109be2:	4615      	mov	r5, r2
 8109be4:	e7f6      	b.n	8109bd4 <_dtoa_r+0xadc>
 8109be6:	4593      	cmp	fp, r2
 8109be8:	d105      	bne.n	8109bf6 <_dtoa_r+0xafe>
 8109bea:	2331      	movs	r3, #49	; 0x31
 8109bec:	f10a 0a01 	add.w	sl, sl, #1
 8109bf0:	f88b 3000 	strb.w	r3, [fp]
 8109bf4:	e6ff      	b.n	81099f6 <_dtoa_r+0x8fe>
 8109bf6:	4615      	mov	r5, r2
 8109bf8:	e79f      	b.n	8109b3a <_dtoa_r+0xa42>
 8109bfa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8109c60 <_dtoa_r+0xb68>
 8109bfe:	e007      	b.n	8109c10 <_dtoa_r+0xb18>
 8109c00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109c02:	f8df b060 	ldr.w	fp, [pc, #96]	; 8109c64 <_dtoa_r+0xb6c>
 8109c06:	b11b      	cbz	r3, 8109c10 <_dtoa_r+0xb18>
 8109c08:	f10b 0308 	add.w	r3, fp, #8
 8109c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8109c0e:	6013      	str	r3, [r2, #0]
 8109c10:	4658      	mov	r0, fp
 8109c12:	b017      	add	sp, #92	; 0x5c
 8109c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c18:	9b06      	ldr	r3, [sp, #24]
 8109c1a:	2b01      	cmp	r3, #1
 8109c1c:	f77f ae35 	ble.w	810988a <_dtoa_r+0x792>
 8109c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109c22:	9307      	str	r3, [sp, #28]
 8109c24:	e649      	b.n	81098ba <_dtoa_r+0x7c2>
 8109c26:	9b02      	ldr	r3, [sp, #8]
 8109c28:	2b00      	cmp	r3, #0
 8109c2a:	dc03      	bgt.n	8109c34 <_dtoa_r+0xb3c>
 8109c2c:	9b06      	ldr	r3, [sp, #24]
 8109c2e:	2b02      	cmp	r3, #2
 8109c30:	f73f aecc 	bgt.w	81099cc <_dtoa_r+0x8d4>
 8109c34:	465d      	mov	r5, fp
 8109c36:	4639      	mov	r1, r7
 8109c38:	9804      	ldr	r0, [sp, #16]
 8109c3a:	f7ff f9d0 	bl	8108fde <quorem>
 8109c3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8109c42:	f805 8b01 	strb.w	r8, [r5], #1
 8109c46:	9a02      	ldr	r2, [sp, #8]
 8109c48:	eba5 030b 	sub.w	r3, r5, fp
 8109c4c:	429a      	cmp	r2, r3
 8109c4e:	ddb0      	ble.n	8109bb2 <_dtoa_r+0xaba>
 8109c50:	2300      	movs	r3, #0
 8109c52:	220a      	movs	r2, #10
 8109c54:	9904      	ldr	r1, [sp, #16]
 8109c56:	4620      	mov	r0, r4
 8109c58:	f000 f867 	bl	8109d2a <__multadd>
 8109c5c:	9004      	str	r0, [sp, #16]
 8109c5e:	e7ea      	b.n	8109c36 <_dtoa_r+0xb3e>
 8109c60:	0810a428 	.word	0x0810a428
 8109c64:	0810a42a 	.word	0x0810a42a

08109c68 <_localeconv_r>:
 8109c68:	4b04      	ldr	r3, [pc, #16]	; (8109c7c <_localeconv_r+0x14>)
 8109c6a:	681b      	ldr	r3, [r3, #0]
 8109c6c:	6a18      	ldr	r0, [r3, #32]
 8109c6e:	4b04      	ldr	r3, [pc, #16]	; (8109c80 <_localeconv_r+0x18>)
 8109c70:	2800      	cmp	r0, #0
 8109c72:	bf08      	it	eq
 8109c74:	4618      	moveq	r0, r3
 8109c76:	30f0      	adds	r0, #240	; 0xf0
 8109c78:	4770      	bx	lr
 8109c7a:	bf00      	nop
 8109c7c:	10000010 	.word	0x10000010
 8109c80:	10000074 	.word	0x10000074

08109c84 <malloc>:
 8109c84:	4b02      	ldr	r3, [pc, #8]	; (8109c90 <malloc+0xc>)
 8109c86:	4601      	mov	r1, r0
 8109c88:	6818      	ldr	r0, [r3, #0]
 8109c8a:	f000 baed 	b.w	810a268 <_malloc_r>
 8109c8e:	bf00      	nop
 8109c90:	10000010 	.word	0x10000010

08109c94 <_Balloc>:
 8109c94:	b570      	push	{r4, r5, r6, lr}
 8109c96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109c98:	4604      	mov	r4, r0
 8109c9a:	460e      	mov	r6, r1
 8109c9c:	b93d      	cbnz	r5, 8109cae <_Balloc+0x1a>
 8109c9e:	2010      	movs	r0, #16
 8109ca0:	f7ff fff0 	bl	8109c84 <malloc>
 8109ca4:	6260      	str	r0, [r4, #36]	; 0x24
 8109ca6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8109caa:	6005      	str	r5, [r0, #0]
 8109cac:	60c5      	str	r5, [r0, #12]
 8109cae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8109cb0:	68eb      	ldr	r3, [r5, #12]
 8109cb2:	b183      	cbz	r3, 8109cd6 <_Balloc+0x42>
 8109cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109cb6:	68db      	ldr	r3, [r3, #12]
 8109cb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8109cbc:	b9b8      	cbnz	r0, 8109cee <_Balloc+0x5a>
 8109cbe:	2101      	movs	r1, #1
 8109cc0:	fa01 f506 	lsl.w	r5, r1, r6
 8109cc4:	1d6a      	adds	r2, r5, #5
 8109cc6:	0092      	lsls	r2, r2, #2
 8109cc8:	4620      	mov	r0, r4
 8109cca:	f000 fabf 	bl	810a24c <_calloc_r>
 8109cce:	b160      	cbz	r0, 8109cea <_Balloc+0x56>
 8109cd0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8109cd4:	e00e      	b.n	8109cf4 <_Balloc+0x60>
 8109cd6:	2221      	movs	r2, #33	; 0x21
 8109cd8:	2104      	movs	r1, #4
 8109cda:	4620      	mov	r0, r4
 8109cdc:	f000 fab6 	bl	810a24c <_calloc_r>
 8109ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109ce2:	60e8      	str	r0, [r5, #12]
 8109ce4:	68db      	ldr	r3, [r3, #12]
 8109ce6:	2b00      	cmp	r3, #0
 8109ce8:	d1e4      	bne.n	8109cb4 <_Balloc+0x20>
 8109cea:	2000      	movs	r0, #0
 8109cec:	bd70      	pop	{r4, r5, r6, pc}
 8109cee:	6802      	ldr	r2, [r0, #0]
 8109cf0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8109cf4:	2300      	movs	r3, #0
 8109cf6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8109cfa:	e7f7      	b.n	8109cec <_Balloc+0x58>

08109cfc <_Bfree>:
 8109cfc:	b570      	push	{r4, r5, r6, lr}
 8109cfe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8109d00:	4606      	mov	r6, r0
 8109d02:	460d      	mov	r5, r1
 8109d04:	b93c      	cbnz	r4, 8109d16 <_Bfree+0x1a>
 8109d06:	2010      	movs	r0, #16
 8109d08:	f7ff ffbc 	bl	8109c84 <malloc>
 8109d0c:	6270      	str	r0, [r6, #36]	; 0x24
 8109d0e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8109d12:	6004      	str	r4, [r0, #0]
 8109d14:	60c4      	str	r4, [r0, #12]
 8109d16:	b13d      	cbz	r5, 8109d28 <_Bfree+0x2c>
 8109d18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8109d1a:	686a      	ldr	r2, [r5, #4]
 8109d1c:	68db      	ldr	r3, [r3, #12]
 8109d1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8109d22:	6029      	str	r1, [r5, #0]
 8109d24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8109d28:	bd70      	pop	{r4, r5, r6, pc}

08109d2a <__multadd>:
 8109d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109d2e:	690d      	ldr	r5, [r1, #16]
 8109d30:	461f      	mov	r7, r3
 8109d32:	4606      	mov	r6, r0
 8109d34:	460c      	mov	r4, r1
 8109d36:	f101 0c14 	add.w	ip, r1, #20
 8109d3a:	2300      	movs	r3, #0
 8109d3c:	f8dc 0000 	ldr.w	r0, [ip]
 8109d40:	b281      	uxth	r1, r0
 8109d42:	fb02 7101 	mla	r1, r2, r1, r7
 8109d46:	0c0f      	lsrs	r7, r1, #16
 8109d48:	0c00      	lsrs	r0, r0, #16
 8109d4a:	fb02 7000 	mla	r0, r2, r0, r7
 8109d4e:	b289      	uxth	r1, r1
 8109d50:	3301      	adds	r3, #1
 8109d52:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8109d56:	429d      	cmp	r5, r3
 8109d58:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8109d5c:	f84c 1b04 	str.w	r1, [ip], #4
 8109d60:	dcec      	bgt.n	8109d3c <__multadd+0x12>
 8109d62:	b1d7      	cbz	r7, 8109d9a <__multadd+0x70>
 8109d64:	68a3      	ldr	r3, [r4, #8]
 8109d66:	42ab      	cmp	r3, r5
 8109d68:	dc12      	bgt.n	8109d90 <__multadd+0x66>
 8109d6a:	6861      	ldr	r1, [r4, #4]
 8109d6c:	4630      	mov	r0, r6
 8109d6e:	3101      	adds	r1, #1
 8109d70:	f7ff ff90 	bl	8109c94 <_Balloc>
 8109d74:	6922      	ldr	r2, [r4, #16]
 8109d76:	3202      	adds	r2, #2
 8109d78:	f104 010c 	add.w	r1, r4, #12
 8109d7c:	4680      	mov	r8, r0
 8109d7e:	0092      	lsls	r2, r2, #2
 8109d80:	300c      	adds	r0, #12
 8109d82:	f7fe fdcf 	bl	8108924 <memcpy>
 8109d86:	4621      	mov	r1, r4
 8109d88:	4630      	mov	r0, r6
 8109d8a:	f7ff ffb7 	bl	8109cfc <_Bfree>
 8109d8e:	4644      	mov	r4, r8
 8109d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8109d94:	3501      	adds	r5, #1
 8109d96:	615f      	str	r7, [r3, #20]
 8109d98:	6125      	str	r5, [r4, #16]
 8109d9a:	4620      	mov	r0, r4
 8109d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08109da0 <__hi0bits>:
 8109da0:	0c02      	lsrs	r2, r0, #16
 8109da2:	0412      	lsls	r2, r2, #16
 8109da4:	4603      	mov	r3, r0
 8109da6:	b9b2      	cbnz	r2, 8109dd6 <__hi0bits+0x36>
 8109da8:	0403      	lsls	r3, r0, #16
 8109daa:	2010      	movs	r0, #16
 8109dac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8109db0:	bf04      	itt	eq
 8109db2:	021b      	lsleq	r3, r3, #8
 8109db4:	3008      	addeq	r0, #8
 8109db6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8109dba:	bf04      	itt	eq
 8109dbc:	011b      	lsleq	r3, r3, #4
 8109dbe:	3004      	addeq	r0, #4
 8109dc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8109dc4:	bf04      	itt	eq
 8109dc6:	009b      	lsleq	r3, r3, #2
 8109dc8:	3002      	addeq	r0, #2
 8109dca:	2b00      	cmp	r3, #0
 8109dcc:	db06      	blt.n	8109ddc <__hi0bits+0x3c>
 8109dce:	005b      	lsls	r3, r3, #1
 8109dd0:	d503      	bpl.n	8109dda <__hi0bits+0x3a>
 8109dd2:	3001      	adds	r0, #1
 8109dd4:	4770      	bx	lr
 8109dd6:	2000      	movs	r0, #0
 8109dd8:	e7e8      	b.n	8109dac <__hi0bits+0xc>
 8109dda:	2020      	movs	r0, #32
 8109ddc:	4770      	bx	lr

08109dde <__lo0bits>:
 8109dde:	6803      	ldr	r3, [r0, #0]
 8109de0:	f013 0207 	ands.w	r2, r3, #7
 8109de4:	4601      	mov	r1, r0
 8109de6:	d00b      	beq.n	8109e00 <__lo0bits+0x22>
 8109de8:	07da      	lsls	r2, r3, #31
 8109dea:	d423      	bmi.n	8109e34 <__lo0bits+0x56>
 8109dec:	0798      	lsls	r0, r3, #30
 8109dee:	bf49      	itett	mi
 8109df0:	085b      	lsrmi	r3, r3, #1
 8109df2:	089b      	lsrpl	r3, r3, #2
 8109df4:	2001      	movmi	r0, #1
 8109df6:	600b      	strmi	r3, [r1, #0]
 8109df8:	bf5c      	itt	pl
 8109dfa:	600b      	strpl	r3, [r1, #0]
 8109dfc:	2002      	movpl	r0, #2
 8109dfe:	4770      	bx	lr
 8109e00:	b298      	uxth	r0, r3
 8109e02:	b9a8      	cbnz	r0, 8109e30 <__lo0bits+0x52>
 8109e04:	0c1b      	lsrs	r3, r3, #16
 8109e06:	2010      	movs	r0, #16
 8109e08:	f013 0fff 	tst.w	r3, #255	; 0xff
 8109e0c:	bf04      	itt	eq
 8109e0e:	0a1b      	lsreq	r3, r3, #8
 8109e10:	3008      	addeq	r0, #8
 8109e12:	071a      	lsls	r2, r3, #28
 8109e14:	bf04      	itt	eq
 8109e16:	091b      	lsreq	r3, r3, #4
 8109e18:	3004      	addeq	r0, #4
 8109e1a:	079a      	lsls	r2, r3, #30
 8109e1c:	bf04      	itt	eq
 8109e1e:	089b      	lsreq	r3, r3, #2
 8109e20:	3002      	addeq	r0, #2
 8109e22:	07da      	lsls	r2, r3, #31
 8109e24:	d402      	bmi.n	8109e2c <__lo0bits+0x4e>
 8109e26:	085b      	lsrs	r3, r3, #1
 8109e28:	d006      	beq.n	8109e38 <__lo0bits+0x5a>
 8109e2a:	3001      	adds	r0, #1
 8109e2c:	600b      	str	r3, [r1, #0]
 8109e2e:	4770      	bx	lr
 8109e30:	4610      	mov	r0, r2
 8109e32:	e7e9      	b.n	8109e08 <__lo0bits+0x2a>
 8109e34:	2000      	movs	r0, #0
 8109e36:	4770      	bx	lr
 8109e38:	2020      	movs	r0, #32
 8109e3a:	4770      	bx	lr

08109e3c <__i2b>:
 8109e3c:	b510      	push	{r4, lr}
 8109e3e:	460c      	mov	r4, r1
 8109e40:	2101      	movs	r1, #1
 8109e42:	f7ff ff27 	bl	8109c94 <_Balloc>
 8109e46:	2201      	movs	r2, #1
 8109e48:	6144      	str	r4, [r0, #20]
 8109e4a:	6102      	str	r2, [r0, #16]
 8109e4c:	bd10      	pop	{r4, pc}

08109e4e <__multiply>:
 8109e4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109e52:	4614      	mov	r4, r2
 8109e54:	690a      	ldr	r2, [r1, #16]
 8109e56:	6923      	ldr	r3, [r4, #16]
 8109e58:	429a      	cmp	r2, r3
 8109e5a:	bfb8      	it	lt
 8109e5c:	460b      	movlt	r3, r1
 8109e5e:	4688      	mov	r8, r1
 8109e60:	bfbc      	itt	lt
 8109e62:	46a0      	movlt	r8, r4
 8109e64:	461c      	movlt	r4, r3
 8109e66:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8109e6a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8109e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109e72:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8109e76:	eb07 0609 	add.w	r6, r7, r9
 8109e7a:	42b3      	cmp	r3, r6
 8109e7c:	bfb8      	it	lt
 8109e7e:	3101      	addlt	r1, #1
 8109e80:	f7ff ff08 	bl	8109c94 <_Balloc>
 8109e84:	f100 0514 	add.w	r5, r0, #20
 8109e88:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8109e8c:	462b      	mov	r3, r5
 8109e8e:	2200      	movs	r2, #0
 8109e90:	4573      	cmp	r3, lr
 8109e92:	d316      	bcc.n	8109ec2 <__multiply+0x74>
 8109e94:	f104 0214 	add.w	r2, r4, #20
 8109e98:	f108 0114 	add.w	r1, r8, #20
 8109e9c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8109ea0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8109ea4:	9300      	str	r3, [sp, #0]
 8109ea6:	9b00      	ldr	r3, [sp, #0]
 8109ea8:	9201      	str	r2, [sp, #4]
 8109eaa:	4293      	cmp	r3, r2
 8109eac:	d80c      	bhi.n	8109ec8 <__multiply+0x7a>
 8109eae:	2e00      	cmp	r6, #0
 8109eb0:	dd03      	ble.n	8109eba <__multiply+0x6c>
 8109eb2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8109eb6:	2b00      	cmp	r3, #0
 8109eb8:	d05d      	beq.n	8109f76 <__multiply+0x128>
 8109eba:	6106      	str	r6, [r0, #16]
 8109ebc:	b003      	add	sp, #12
 8109ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109ec2:	f843 2b04 	str.w	r2, [r3], #4
 8109ec6:	e7e3      	b.n	8109e90 <__multiply+0x42>
 8109ec8:	f8b2 b000 	ldrh.w	fp, [r2]
 8109ecc:	f1bb 0f00 	cmp.w	fp, #0
 8109ed0:	d023      	beq.n	8109f1a <__multiply+0xcc>
 8109ed2:	4689      	mov	r9, r1
 8109ed4:	46ac      	mov	ip, r5
 8109ed6:	f04f 0800 	mov.w	r8, #0
 8109eda:	f859 4b04 	ldr.w	r4, [r9], #4
 8109ede:	f8dc a000 	ldr.w	sl, [ip]
 8109ee2:	b2a3      	uxth	r3, r4
 8109ee4:	fa1f fa8a 	uxth.w	sl, sl
 8109ee8:	fb0b a303 	mla	r3, fp, r3, sl
 8109eec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8109ef0:	f8dc 4000 	ldr.w	r4, [ip]
 8109ef4:	4443      	add	r3, r8
 8109ef6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8109efa:	fb0b 840a 	mla	r4, fp, sl, r8
 8109efe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8109f02:	46e2      	mov	sl, ip
 8109f04:	b29b      	uxth	r3, r3
 8109f06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8109f0a:	454f      	cmp	r7, r9
 8109f0c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8109f10:	f84a 3b04 	str.w	r3, [sl], #4
 8109f14:	d82b      	bhi.n	8109f6e <__multiply+0x120>
 8109f16:	f8cc 8004 	str.w	r8, [ip, #4]
 8109f1a:	9b01      	ldr	r3, [sp, #4]
 8109f1c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8109f20:	3204      	adds	r2, #4
 8109f22:	f1ba 0f00 	cmp.w	sl, #0
 8109f26:	d020      	beq.n	8109f6a <__multiply+0x11c>
 8109f28:	682b      	ldr	r3, [r5, #0]
 8109f2a:	4689      	mov	r9, r1
 8109f2c:	46a8      	mov	r8, r5
 8109f2e:	f04f 0b00 	mov.w	fp, #0
 8109f32:	f8b9 c000 	ldrh.w	ip, [r9]
 8109f36:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8109f3a:	fb0a 440c 	mla	r4, sl, ip, r4
 8109f3e:	445c      	add	r4, fp
 8109f40:	46c4      	mov	ip, r8
 8109f42:	b29b      	uxth	r3, r3
 8109f44:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8109f48:	f84c 3b04 	str.w	r3, [ip], #4
 8109f4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8109f50:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8109f54:	0c1b      	lsrs	r3, r3, #16
 8109f56:	fb0a b303 	mla	r3, sl, r3, fp
 8109f5a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8109f5e:	454f      	cmp	r7, r9
 8109f60:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8109f64:	d805      	bhi.n	8109f72 <__multiply+0x124>
 8109f66:	f8c8 3004 	str.w	r3, [r8, #4]
 8109f6a:	3504      	adds	r5, #4
 8109f6c:	e79b      	b.n	8109ea6 <__multiply+0x58>
 8109f6e:	46d4      	mov	ip, sl
 8109f70:	e7b3      	b.n	8109eda <__multiply+0x8c>
 8109f72:	46e0      	mov	r8, ip
 8109f74:	e7dd      	b.n	8109f32 <__multiply+0xe4>
 8109f76:	3e01      	subs	r6, #1
 8109f78:	e799      	b.n	8109eae <__multiply+0x60>
	...

08109f7c <__pow5mult>:
 8109f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8109f80:	4615      	mov	r5, r2
 8109f82:	f012 0203 	ands.w	r2, r2, #3
 8109f86:	4606      	mov	r6, r0
 8109f88:	460f      	mov	r7, r1
 8109f8a:	d007      	beq.n	8109f9c <__pow5mult+0x20>
 8109f8c:	3a01      	subs	r2, #1
 8109f8e:	4c21      	ldr	r4, [pc, #132]	; (810a014 <__pow5mult+0x98>)
 8109f90:	2300      	movs	r3, #0
 8109f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8109f96:	f7ff fec8 	bl	8109d2a <__multadd>
 8109f9a:	4607      	mov	r7, r0
 8109f9c:	10ad      	asrs	r5, r5, #2
 8109f9e:	d035      	beq.n	810a00c <__pow5mult+0x90>
 8109fa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8109fa2:	b93c      	cbnz	r4, 8109fb4 <__pow5mult+0x38>
 8109fa4:	2010      	movs	r0, #16
 8109fa6:	f7ff fe6d 	bl	8109c84 <malloc>
 8109faa:	6270      	str	r0, [r6, #36]	; 0x24
 8109fac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8109fb0:	6004      	str	r4, [r0, #0]
 8109fb2:	60c4      	str	r4, [r0, #12]
 8109fb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8109fb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8109fbc:	b94c      	cbnz	r4, 8109fd2 <__pow5mult+0x56>
 8109fbe:	f240 2171 	movw	r1, #625	; 0x271
 8109fc2:	4630      	mov	r0, r6
 8109fc4:	f7ff ff3a 	bl	8109e3c <__i2b>
 8109fc8:	2300      	movs	r3, #0
 8109fca:	f8c8 0008 	str.w	r0, [r8, #8]
 8109fce:	4604      	mov	r4, r0
 8109fd0:	6003      	str	r3, [r0, #0]
 8109fd2:	f04f 0800 	mov.w	r8, #0
 8109fd6:	07eb      	lsls	r3, r5, #31
 8109fd8:	d50a      	bpl.n	8109ff0 <__pow5mult+0x74>
 8109fda:	4639      	mov	r1, r7
 8109fdc:	4622      	mov	r2, r4
 8109fde:	4630      	mov	r0, r6
 8109fe0:	f7ff ff35 	bl	8109e4e <__multiply>
 8109fe4:	4639      	mov	r1, r7
 8109fe6:	4681      	mov	r9, r0
 8109fe8:	4630      	mov	r0, r6
 8109fea:	f7ff fe87 	bl	8109cfc <_Bfree>
 8109fee:	464f      	mov	r7, r9
 8109ff0:	106d      	asrs	r5, r5, #1
 8109ff2:	d00b      	beq.n	810a00c <__pow5mult+0x90>
 8109ff4:	6820      	ldr	r0, [r4, #0]
 8109ff6:	b938      	cbnz	r0, 810a008 <__pow5mult+0x8c>
 8109ff8:	4622      	mov	r2, r4
 8109ffa:	4621      	mov	r1, r4
 8109ffc:	4630      	mov	r0, r6
 8109ffe:	f7ff ff26 	bl	8109e4e <__multiply>
 810a002:	6020      	str	r0, [r4, #0]
 810a004:	f8c0 8000 	str.w	r8, [r0]
 810a008:	4604      	mov	r4, r0
 810a00a:	e7e4      	b.n	8109fd6 <__pow5mult+0x5a>
 810a00c:	4638      	mov	r0, r7
 810a00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a012:	bf00      	nop
 810a014:	0810a528 	.word	0x0810a528

0810a018 <__lshift>:
 810a018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a01c:	460c      	mov	r4, r1
 810a01e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810a022:	6923      	ldr	r3, [r4, #16]
 810a024:	6849      	ldr	r1, [r1, #4]
 810a026:	eb0a 0903 	add.w	r9, sl, r3
 810a02a:	68a3      	ldr	r3, [r4, #8]
 810a02c:	4607      	mov	r7, r0
 810a02e:	4616      	mov	r6, r2
 810a030:	f109 0501 	add.w	r5, r9, #1
 810a034:	42ab      	cmp	r3, r5
 810a036:	db32      	blt.n	810a09e <__lshift+0x86>
 810a038:	4638      	mov	r0, r7
 810a03a:	f7ff fe2b 	bl	8109c94 <_Balloc>
 810a03e:	2300      	movs	r3, #0
 810a040:	4680      	mov	r8, r0
 810a042:	f100 0114 	add.w	r1, r0, #20
 810a046:	461a      	mov	r2, r3
 810a048:	4553      	cmp	r3, sl
 810a04a:	db2b      	blt.n	810a0a4 <__lshift+0x8c>
 810a04c:	6920      	ldr	r0, [r4, #16]
 810a04e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a052:	f104 0314 	add.w	r3, r4, #20
 810a056:	f016 021f 	ands.w	r2, r6, #31
 810a05a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810a05e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810a062:	d025      	beq.n	810a0b0 <__lshift+0x98>
 810a064:	f1c2 0e20 	rsb	lr, r2, #32
 810a068:	2000      	movs	r0, #0
 810a06a:	681e      	ldr	r6, [r3, #0]
 810a06c:	468a      	mov	sl, r1
 810a06e:	4096      	lsls	r6, r2
 810a070:	4330      	orrs	r0, r6
 810a072:	f84a 0b04 	str.w	r0, [sl], #4
 810a076:	f853 0b04 	ldr.w	r0, [r3], #4
 810a07a:	459c      	cmp	ip, r3
 810a07c:	fa20 f00e 	lsr.w	r0, r0, lr
 810a080:	d814      	bhi.n	810a0ac <__lshift+0x94>
 810a082:	6048      	str	r0, [r1, #4]
 810a084:	b108      	cbz	r0, 810a08a <__lshift+0x72>
 810a086:	f109 0502 	add.w	r5, r9, #2
 810a08a:	3d01      	subs	r5, #1
 810a08c:	4638      	mov	r0, r7
 810a08e:	f8c8 5010 	str.w	r5, [r8, #16]
 810a092:	4621      	mov	r1, r4
 810a094:	f7ff fe32 	bl	8109cfc <_Bfree>
 810a098:	4640      	mov	r0, r8
 810a09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a09e:	3101      	adds	r1, #1
 810a0a0:	005b      	lsls	r3, r3, #1
 810a0a2:	e7c7      	b.n	810a034 <__lshift+0x1c>
 810a0a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810a0a8:	3301      	adds	r3, #1
 810a0aa:	e7cd      	b.n	810a048 <__lshift+0x30>
 810a0ac:	4651      	mov	r1, sl
 810a0ae:	e7dc      	b.n	810a06a <__lshift+0x52>
 810a0b0:	3904      	subs	r1, #4
 810a0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 810a0b6:	f841 2f04 	str.w	r2, [r1, #4]!
 810a0ba:	459c      	cmp	ip, r3
 810a0bc:	d8f9      	bhi.n	810a0b2 <__lshift+0x9a>
 810a0be:	e7e4      	b.n	810a08a <__lshift+0x72>

0810a0c0 <__mcmp>:
 810a0c0:	6903      	ldr	r3, [r0, #16]
 810a0c2:	690a      	ldr	r2, [r1, #16]
 810a0c4:	1a9b      	subs	r3, r3, r2
 810a0c6:	b530      	push	{r4, r5, lr}
 810a0c8:	d10c      	bne.n	810a0e4 <__mcmp+0x24>
 810a0ca:	0092      	lsls	r2, r2, #2
 810a0cc:	3014      	adds	r0, #20
 810a0ce:	3114      	adds	r1, #20
 810a0d0:	1884      	adds	r4, r0, r2
 810a0d2:	4411      	add	r1, r2
 810a0d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810a0d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810a0dc:	4295      	cmp	r5, r2
 810a0de:	d003      	beq.n	810a0e8 <__mcmp+0x28>
 810a0e0:	d305      	bcc.n	810a0ee <__mcmp+0x2e>
 810a0e2:	2301      	movs	r3, #1
 810a0e4:	4618      	mov	r0, r3
 810a0e6:	bd30      	pop	{r4, r5, pc}
 810a0e8:	42a0      	cmp	r0, r4
 810a0ea:	d3f3      	bcc.n	810a0d4 <__mcmp+0x14>
 810a0ec:	e7fa      	b.n	810a0e4 <__mcmp+0x24>
 810a0ee:	f04f 33ff 	mov.w	r3, #4294967295
 810a0f2:	e7f7      	b.n	810a0e4 <__mcmp+0x24>

0810a0f4 <__mdiff>:
 810a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a0f8:	460d      	mov	r5, r1
 810a0fa:	4607      	mov	r7, r0
 810a0fc:	4611      	mov	r1, r2
 810a0fe:	4628      	mov	r0, r5
 810a100:	4614      	mov	r4, r2
 810a102:	f7ff ffdd 	bl	810a0c0 <__mcmp>
 810a106:	1e06      	subs	r6, r0, #0
 810a108:	d108      	bne.n	810a11c <__mdiff+0x28>
 810a10a:	4631      	mov	r1, r6
 810a10c:	4638      	mov	r0, r7
 810a10e:	f7ff fdc1 	bl	8109c94 <_Balloc>
 810a112:	2301      	movs	r3, #1
 810a114:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810a118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a11c:	bfa4      	itt	ge
 810a11e:	4623      	movge	r3, r4
 810a120:	462c      	movge	r4, r5
 810a122:	4638      	mov	r0, r7
 810a124:	6861      	ldr	r1, [r4, #4]
 810a126:	bfa6      	itte	ge
 810a128:	461d      	movge	r5, r3
 810a12a:	2600      	movge	r6, #0
 810a12c:	2601      	movlt	r6, #1
 810a12e:	f7ff fdb1 	bl	8109c94 <_Balloc>
 810a132:	692b      	ldr	r3, [r5, #16]
 810a134:	60c6      	str	r6, [r0, #12]
 810a136:	6926      	ldr	r6, [r4, #16]
 810a138:	f105 0914 	add.w	r9, r5, #20
 810a13c:	f104 0214 	add.w	r2, r4, #20
 810a140:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810a144:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810a148:	f100 0514 	add.w	r5, r0, #20
 810a14c:	f04f 0e00 	mov.w	lr, #0
 810a150:	f852 ab04 	ldr.w	sl, [r2], #4
 810a154:	f859 4b04 	ldr.w	r4, [r9], #4
 810a158:	fa1e f18a 	uxtah	r1, lr, sl
 810a15c:	b2a3      	uxth	r3, r4
 810a15e:	1ac9      	subs	r1, r1, r3
 810a160:	0c23      	lsrs	r3, r4, #16
 810a162:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810a166:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810a16a:	b289      	uxth	r1, r1
 810a16c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810a170:	45c8      	cmp	r8, r9
 810a172:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810a176:	4694      	mov	ip, r2
 810a178:	f845 3b04 	str.w	r3, [r5], #4
 810a17c:	d8e8      	bhi.n	810a150 <__mdiff+0x5c>
 810a17e:	45bc      	cmp	ip, r7
 810a180:	d304      	bcc.n	810a18c <__mdiff+0x98>
 810a182:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810a186:	b183      	cbz	r3, 810a1aa <__mdiff+0xb6>
 810a188:	6106      	str	r6, [r0, #16]
 810a18a:	e7c5      	b.n	810a118 <__mdiff+0x24>
 810a18c:	f85c 1b04 	ldr.w	r1, [ip], #4
 810a190:	fa1e f381 	uxtah	r3, lr, r1
 810a194:	141a      	asrs	r2, r3, #16
 810a196:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810a19a:	b29b      	uxth	r3, r3
 810a19c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a1a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810a1a4:	f845 3b04 	str.w	r3, [r5], #4
 810a1a8:	e7e9      	b.n	810a17e <__mdiff+0x8a>
 810a1aa:	3e01      	subs	r6, #1
 810a1ac:	e7e9      	b.n	810a182 <__mdiff+0x8e>

0810a1ae <__d2b>:
 810a1ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810a1b2:	460e      	mov	r6, r1
 810a1b4:	2101      	movs	r1, #1
 810a1b6:	ec59 8b10 	vmov	r8, r9, d0
 810a1ba:	4615      	mov	r5, r2
 810a1bc:	f7ff fd6a 	bl	8109c94 <_Balloc>
 810a1c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810a1c4:	4607      	mov	r7, r0
 810a1c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a1ca:	bb34      	cbnz	r4, 810a21a <__d2b+0x6c>
 810a1cc:	9301      	str	r3, [sp, #4]
 810a1ce:	f1b8 0300 	subs.w	r3, r8, #0
 810a1d2:	d027      	beq.n	810a224 <__d2b+0x76>
 810a1d4:	a802      	add	r0, sp, #8
 810a1d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 810a1da:	f7ff fe00 	bl	8109dde <__lo0bits>
 810a1de:	9900      	ldr	r1, [sp, #0]
 810a1e0:	b1f0      	cbz	r0, 810a220 <__d2b+0x72>
 810a1e2:	9a01      	ldr	r2, [sp, #4]
 810a1e4:	f1c0 0320 	rsb	r3, r0, #32
 810a1e8:	fa02 f303 	lsl.w	r3, r2, r3
 810a1ec:	430b      	orrs	r3, r1
 810a1ee:	40c2      	lsrs	r2, r0
 810a1f0:	617b      	str	r3, [r7, #20]
 810a1f2:	9201      	str	r2, [sp, #4]
 810a1f4:	9b01      	ldr	r3, [sp, #4]
 810a1f6:	61bb      	str	r3, [r7, #24]
 810a1f8:	2b00      	cmp	r3, #0
 810a1fa:	bf14      	ite	ne
 810a1fc:	2102      	movne	r1, #2
 810a1fe:	2101      	moveq	r1, #1
 810a200:	6139      	str	r1, [r7, #16]
 810a202:	b1c4      	cbz	r4, 810a236 <__d2b+0x88>
 810a204:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810a208:	4404      	add	r4, r0
 810a20a:	6034      	str	r4, [r6, #0]
 810a20c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810a210:	6028      	str	r0, [r5, #0]
 810a212:	4638      	mov	r0, r7
 810a214:	b003      	add	sp, #12
 810a216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a21a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a21e:	e7d5      	b.n	810a1cc <__d2b+0x1e>
 810a220:	6179      	str	r1, [r7, #20]
 810a222:	e7e7      	b.n	810a1f4 <__d2b+0x46>
 810a224:	a801      	add	r0, sp, #4
 810a226:	f7ff fdda 	bl	8109dde <__lo0bits>
 810a22a:	9b01      	ldr	r3, [sp, #4]
 810a22c:	617b      	str	r3, [r7, #20]
 810a22e:	2101      	movs	r1, #1
 810a230:	6139      	str	r1, [r7, #16]
 810a232:	3020      	adds	r0, #32
 810a234:	e7e5      	b.n	810a202 <__d2b+0x54>
 810a236:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810a23a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810a23e:	6030      	str	r0, [r6, #0]
 810a240:	6918      	ldr	r0, [r3, #16]
 810a242:	f7ff fdad 	bl	8109da0 <__hi0bits>
 810a246:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810a24a:	e7e1      	b.n	810a210 <__d2b+0x62>

0810a24c <_calloc_r>:
 810a24c:	b538      	push	{r3, r4, r5, lr}
 810a24e:	fb02 f401 	mul.w	r4, r2, r1
 810a252:	4621      	mov	r1, r4
 810a254:	f000 f808 	bl	810a268 <_malloc_r>
 810a258:	4605      	mov	r5, r0
 810a25a:	b118      	cbz	r0, 810a264 <_calloc_r+0x18>
 810a25c:	4622      	mov	r2, r4
 810a25e:	2100      	movs	r1, #0
 810a260:	f7fe fb6b 	bl	810893a <memset>
 810a264:	4628      	mov	r0, r5
 810a266:	bd38      	pop	{r3, r4, r5, pc}

0810a268 <_malloc_r>:
 810a268:	b570      	push	{r4, r5, r6, lr}
 810a26a:	1ccd      	adds	r5, r1, #3
 810a26c:	f025 0503 	bic.w	r5, r5, #3
 810a270:	3508      	adds	r5, #8
 810a272:	2d0c      	cmp	r5, #12
 810a274:	bf38      	it	cc
 810a276:	250c      	movcc	r5, #12
 810a278:	2d00      	cmp	r5, #0
 810a27a:	4606      	mov	r6, r0
 810a27c:	db01      	blt.n	810a282 <_malloc_r+0x1a>
 810a27e:	42a9      	cmp	r1, r5
 810a280:	d903      	bls.n	810a28a <_malloc_r+0x22>
 810a282:	230c      	movs	r3, #12
 810a284:	6033      	str	r3, [r6, #0]
 810a286:	2000      	movs	r0, #0
 810a288:	bd70      	pop	{r4, r5, r6, pc}
 810a28a:	f000 f869 	bl	810a360 <__malloc_lock>
 810a28e:	4a21      	ldr	r2, [pc, #132]	; (810a314 <_malloc_r+0xac>)
 810a290:	6814      	ldr	r4, [r2, #0]
 810a292:	4621      	mov	r1, r4
 810a294:	b991      	cbnz	r1, 810a2bc <_malloc_r+0x54>
 810a296:	4c20      	ldr	r4, [pc, #128]	; (810a318 <_malloc_r+0xb0>)
 810a298:	6823      	ldr	r3, [r4, #0]
 810a29a:	b91b      	cbnz	r3, 810a2a4 <_malloc_r+0x3c>
 810a29c:	4630      	mov	r0, r6
 810a29e:	f000 f83d 	bl	810a31c <_sbrk_r>
 810a2a2:	6020      	str	r0, [r4, #0]
 810a2a4:	4629      	mov	r1, r5
 810a2a6:	4630      	mov	r0, r6
 810a2a8:	f000 f838 	bl	810a31c <_sbrk_r>
 810a2ac:	1c43      	adds	r3, r0, #1
 810a2ae:	d124      	bne.n	810a2fa <_malloc_r+0x92>
 810a2b0:	230c      	movs	r3, #12
 810a2b2:	6033      	str	r3, [r6, #0]
 810a2b4:	4630      	mov	r0, r6
 810a2b6:	f000 f854 	bl	810a362 <__malloc_unlock>
 810a2ba:	e7e4      	b.n	810a286 <_malloc_r+0x1e>
 810a2bc:	680b      	ldr	r3, [r1, #0]
 810a2be:	1b5b      	subs	r3, r3, r5
 810a2c0:	d418      	bmi.n	810a2f4 <_malloc_r+0x8c>
 810a2c2:	2b0b      	cmp	r3, #11
 810a2c4:	d90f      	bls.n	810a2e6 <_malloc_r+0x7e>
 810a2c6:	600b      	str	r3, [r1, #0]
 810a2c8:	50cd      	str	r5, [r1, r3]
 810a2ca:	18cc      	adds	r4, r1, r3
 810a2cc:	4630      	mov	r0, r6
 810a2ce:	f000 f848 	bl	810a362 <__malloc_unlock>
 810a2d2:	f104 000b 	add.w	r0, r4, #11
 810a2d6:	1d23      	adds	r3, r4, #4
 810a2d8:	f020 0007 	bic.w	r0, r0, #7
 810a2dc:	1ac3      	subs	r3, r0, r3
 810a2de:	d0d3      	beq.n	810a288 <_malloc_r+0x20>
 810a2e0:	425a      	negs	r2, r3
 810a2e2:	50e2      	str	r2, [r4, r3]
 810a2e4:	e7d0      	b.n	810a288 <_malloc_r+0x20>
 810a2e6:	428c      	cmp	r4, r1
 810a2e8:	684b      	ldr	r3, [r1, #4]
 810a2ea:	bf16      	itet	ne
 810a2ec:	6063      	strne	r3, [r4, #4]
 810a2ee:	6013      	streq	r3, [r2, #0]
 810a2f0:	460c      	movne	r4, r1
 810a2f2:	e7eb      	b.n	810a2cc <_malloc_r+0x64>
 810a2f4:	460c      	mov	r4, r1
 810a2f6:	6849      	ldr	r1, [r1, #4]
 810a2f8:	e7cc      	b.n	810a294 <_malloc_r+0x2c>
 810a2fa:	1cc4      	adds	r4, r0, #3
 810a2fc:	f024 0403 	bic.w	r4, r4, #3
 810a300:	42a0      	cmp	r0, r4
 810a302:	d005      	beq.n	810a310 <_malloc_r+0xa8>
 810a304:	1a21      	subs	r1, r4, r0
 810a306:	4630      	mov	r0, r6
 810a308:	f000 f808 	bl	810a31c <_sbrk_r>
 810a30c:	3001      	adds	r0, #1
 810a30e:	d0cf      	beq.n	810a2b0 <_malloc_r+0x48>
 810a310:	6025      	str	r5, [r4, #0]
 810a312:	e7db      	b.n	810a2cc <_malloc_r+0x64>
 810a314:	10004b08 	.word	0x10004b08
 810a318:	10004b0c 	.word	0x10004b0c

0810a31c <_sbrk_r>:
 810a31c:	b538      	push	{r3, r4, r5, lr}
 810a31e:	4c06      	ldr	r4, [pc, #24]	; (810a338 <_sbrk_r+0x1c>)
 810a320:	2300      	movs	r3, #0
 810a322:	4605      	mov	r5, r0
 810a324:	4608      	mov	r0, r1
 810a326:	6023      	str	r3, [r4, #0]
 810a328:	f7f7 fa48 	bl	81017bc <_sbrk>
 810a32c:	1c43      	adds	r3, r0, #1
 810a32e:	d102      	bne.n	810a336 <_sbrk_r+0x1a>
 810a330:	6823      	ldr	r3, [r4, #0]
 810a332:	b103      	cbz	r3, 810a336 <_sbrk_r+0x1a>
 810a334:	602b      	str	r3, [r5, #0]
 810a336:	bd38      	pop	{r3, r4, r5, pc}
 810a338:	10004d28 	.word	0x10004d28

0810a33c <__ascii_mbtowc>:
 810a33c:	b082      	sub	sp, #8
 810a33e:	b901      	cbnz	r1, 810a342 <__ascii_mbtowc+0x6>
 810a340:	a901      	add	r1, sp, #4
 810a342:	b142      	cbz	r2, 810a356 <__ascii_mbtowc+0x1a>
 810a344:	b14b      	cbz	r3, 810a35a <__ascii_mbtowc+0x1e>
 810a346:	7813      	ldrb	r3, [r2, #0]
 810a348:	600b      	str	r3, [r1, #0]
 810a34a:	7812      	ldrb	r2, [r2, #0]
 810a34c:	1c10      	adds	r0, r2, #0
 810a34e:	bf18      	it	ne
 810a350:	2001      	movne	r0, #1
 810a352:	b002      	add	sp, #8
 810a354:	4770      	bx	lr
 810a356:	4610      	mov	r0, r2
 810a358:	e7fb      	b.n	810a352 <__ascii_mbtowc+0x16>
 810a35a:	f06f 0001 	mvn.w	r0, #1
 810a35e:	e7f8      	b.n	810a352 <__ascii_mbtowc+0x16>

0810a360 <__malloc_lock>:
 810a360:	4770      	bx	lr

0810a362 <__malloc_unlock>:
 810a362:	4770      	bx	lr

0810a364 <__ascii_wctomb>:
 810a364:	b149      	cbz	r1, 810a37a <__ascii_wctomb+0x16>
 810a366:	2aff      	cmp	r2, #255	; 0xff
 810a368:	bf85      	ittet	hi
 810a36a:	238a      	movhi	r3, #138	; 0x8a
 810a36c:	6003      	strhi	r3, [r0, #0]
 810a36e:	700a      	strbls	r2, [r1, #0]
 810a370:	f04f 30ff 	movhi.w	r0, #4294967295
 810a374:	bf98      	it	ls
 810a376:	2001      	movls	r0, #1
 810a378:	4770      	bx	lr
 810a37a:	4608      	mov	r0, r1
 810a37c:	4770      	bx	lr
	...

0810a380 <_init>:
 810a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a382:	bf00      	nop
 810a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a386:	bc08      	pop	{r3}
 810a388:	469e      	mov	lr, r3
 810a38a:	4770      	bx	lr

0810a38c <_fini>:
 810a38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a38e:	bf00      	nop
 810a390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a392:	bc08      	pop	{r3}
 810a394:	469e      	mov	lr, r3
 810a396:	4770      	bx	lr
