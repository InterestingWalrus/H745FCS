
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a93c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0810abe0  0810abe0  0001abe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810aed0  0810aed0  0001aed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810aed8  0810aed8  0001aed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810aedc  0810aedc  0001aedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  10000000  0810aee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b20  100001e0  0810b0c0  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10004d00  0810b0c0  00024d00  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003372c  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005235  00000000  00000000  0005393c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001c28  00000000  00000000  00058b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a20  00000000  00000000  0005a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d0ac  00000000  00000000  0005c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001aab4  00000000  00000000  0009926c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0018cb4e  00000000  00000000  000b3d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0024086e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fd0  00000000  00000000  002408ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e0 	.word	0x100001e0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810abc4 	.word	0x0810abc4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e4 	.word	0x100001e4
 81002dc:	0810abc4 	.word	0x0810abc4

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81004ce:	f1a4 0401 	sub.w	r4, r4, #1
 81004d2:	d1e9      	bne.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2f>:
 8100cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100cc0:	bf24      	itt	cs
 8100cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100cca:	d90d      	bls.n	8100ce8 <__aeabi_d2f+0x30>
 8100ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100ce0:	bf08      	it	eq
 8100ce2:	f020 0001 	biceq.w	r0, r0, #1
 8100ce6:	4770      	bx	lr
 8100ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100cec:	d121      	bne.n	8100d32 <__aeabi_d2f+0x7a>
 8100cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100cf2:	bfbc      	itt	lt
 8100cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100cf8:	4770      	bxlt	lr
 8100cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d02:	f1c2 0218 	rsb	r2, r2, #24
 8100d06:	f1c2 0c20 	rsb	ip, r2, #32
 8100d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d12:	bf18      	it	ne
 8100d14:	f040 0001 	orrne.w	r0, r0, #1
 8100d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d24:	ea40 000c 	orr.w	r0, r0, ip
 8100d28:	fa23 f302 	lsr.w	r3, r3, r2
 8100d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d30:	e7cc      	b.n	8100ccc <__aeabi_d2f+0x14>
 8100d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d36:	d107      	bne.n	8100d48 <__aeabi_d2f+0x90>
 8100d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d3c:	bf1e      	ittt	ne
 8100d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d46:	4770      	bxne	lr
 8100d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d54:	4770      	bx	lr
 8100d56:	bf00      	nop

08100d58 <__aeabi_uldivmod>:
 8100d58:	b953      	cbnz	r3, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5a:	b94a      	cbnz	r2, 8100d70 <__aeabi_uldivmod+0x18>
 8100d5c:	2900      	cmp	r1, #0
 8100d5e:	bf08      	it	eq
 8100d60:	2800      	cmpeq	r0, #0
 8100d62:	bf1c      	itt	ne
 8100d64:	f04f 31ff 	movne.w	r1, #4294967295
 8100d68:	f04f 30ff 	movne.w	r0, #4294967295
 8100d6c:	f000 b972 	b.w	8101054 <__aeabi_idiv0>
 8100d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8100d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100d78:	f000 f806 	bl	8100d88 <__udivmoddi4>
 8100d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100d84:	b004      	add	sp, #16
 8100d86:	4770      	bx	lr

08100d88 <__udivmoddi4>:
 8100d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100d8c:	9e08      	ldr	r6, [sp, #32]
 8100d8e:	4604      	mov	r4, r0
 8100d90:	4688      	mov	r8, r1
 8100d92:	2b00      	cmp	r3, #0
 8100d94:	d14b      	bne.n	8100e2e <__udivmoddi4+0xa6>
 8100d96:	428a      	cmp	r2, r1
 8100d98:	4615      	mov	r5, r2
 8100d9a:	d967      	bls.n	8100e6c <__udivmoddi4+0xe4>
 8100d9c:	fab2 f282 	clz	r2, r2
 8100da0:	b14a      	cbz	r2, 8100db6 <__udivmoddi4+0x2e>
 8100da2:	f1c2 0720 	rsb	r7, r2, #32
 8100da6:	fa01 f302 	lsl.w	r3, r1, r2
 8100daa:	fa20 f707 	lsr.w	r7, r0, r7
 8100dae:	4095      	lsls	r5, r2
 8100db0:	ea47 0803 	orr.w	r8, r7, r3
 8100db4:	4094      	lsls	r4, r2
 8100db6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100dba:	0c23      	lsrs	r3, r4, #16
 8100dbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8100dc0:	fa1f fc85 	uxth.w	ip, r5
 8100dc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8100dc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100dcc:	fb07 f10c 	mul.w	r1, r7, ip
 8100dd0:	4299      	cmp	r1, r3
 8100dd2:	d909      	bls.n	8100de8 <__udivmoddi4+0x60>
 8100dd4:	18eb      	adds	r3, r5, r3
 8100dd6:	f107 30ff 	add.w	r0, r7, #4294967295
 8100dda:	f080 811b 	bcs.w	8101014 <__udivmoddi4+0x28c>
 8100dde:	4299      	cmp	r1, r3
 8100de0:	f240 8118 	bls.w	8101014 <__udivmoddi4+0x28c>
 8100de4:	3f02      	subs	r7, #2
 8100de6:	442b      	add	r3, r5
 8100de8:	1a5b      	subs	r3, r3, r1
 8100dea:	b2a4      	uxth	r4, r4
 8100dec:	fbb3 f0fe 	udiv	r0, r3, lr
 8100df0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100df8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100dfc:	45a4      	cmp	ip, r4
 8100dfe:	d909      	bls.n	8100e14 <__udivmoddi4+0x8c>
 8100e00:	192c      	adds	r4, r5, r4
 8100e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e06:	f080 8107 	bcs.w	8101018 <__udivmoddi4+0x290>
 8100e0a:	45a4      	cmp	ip, r4
 8100e0c:	f240 8104 	bls.w	8101018 <__udivmoddi4+0x290>
 8100e10:	3802      	subs	r0, #2
 8100e12:	442c      	add	r4, r5
 8100e14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100e18:	eba4 040c 	sub.w	r4, r4, ip
 8100e1c:	2700      	movs	r7, #0
 8100e1e:	b11e      	cbz	r6, 8100e28 <__udivmoddi4+0xa0>
 8100e20:	40d4      	lsrs	r4, r2
 8100e22:	2300      	movs	r3, #0
 8100e24:	e9c6 4300 	strd	r4, r3, [r6]
 8100e28:	4639      	mov	r1, r7
 8100e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e2e:	428b      	cmp	r3, r1
 8100e30:	d909      	bls.n	8100e46 <__udivmoddi4+0xbe>
 8100e32:	2e00      	cmp	r6, #0
 8100e34:	f000 80eb 	beq.w	810100e <__udivmoddi4+0x286>
 8100e38:	2700      	movs	r7, #0
 8100e3a:	e9c6 0100 	strd	r0, r1, [r6]
 8100e3e:	4638      	mov	r0, r7
 8100e40:	4639      	mov	r1, r7
 8100e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100e46:	fab3 f783 	clz	r7, r3
 8100e4a:	2f00      	cmp	r7, #0
 8100e4c:	d147      	bne.n	8100ede <__udivmoddi4+0x156>
 8100e4e:	428b      	cmp	r3, r1
 8100e50:	d302      	bcc.n	8100e58 <__udivmoddi4+0xd0>
 8100e52:	4282      	cmp	r2, r0
 8100e54:	f200 80fa 	bhi.w	810104c <__udivmoddi4+0x2c4>
 8100e58:	1a84      	subs	r4, r0, r2
 8100e5a:	eb61 0303 	sbc.w	r3, r1, r3
 8100e5e:	2001      	movs	r0, #1
 8100e60:	4698      	mov	r8, r3
 8100e62:	2e00      	cmp	r6, #0
 8100e64:	d0e0      	beq.n	8100e28 <__udivmoddi4+0xa0>
 8100e66:	e9c6 4800 	strd	r4, r8, [r6]
 8100e6a:	e7dd      	b.n	8100e28 <__udivmoddi4+0xa0>
 8100e6c:	b902      	cbnz	r2, 8100e70 <__udivmoddi4+0xe8>
 8100e6e:	deff      	udf	#255	; 0xff
 8100e70:	fab2 f282 	clz	r2, r2
 8100e74:	2a00      	cmp	r2, #0
 8100e76:	f040 808f 	bne.w	8100f98 <__udivmoddi4+0x210>
 8100e7a:	1b49      	subs	r1, r1, r5
 8100e7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e80:	fa1f f885 	uxth.w	r8, r5
 8100e84:	2701      	movs	r7, #1
 8100e86:	fbb1 fcfe 	udiv	ip, r1, lr
 8100e8a:	0c23      	lsrs	r3, r4, #16
 8100e8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100e90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e94:	fb08 f10c 	mul.w	r1, r8, ip
 8100e98:	4299      	cmp	r1, r3
 8100e9a:	d907      	bls.n	8100eac <__udivmoddi4+0x124>
 8100e9c:	18eb      	adds	r3, r5, r3
 8100e9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100ea2:	d202      	bcs.n	8100eaa <__udivmoddi4+0x122>
 8100ea4:	4299      	cmp	r1, r3
 8100ea6:	f200 80cd 	bhi.w	8101044 <__udivmoddi4+0x2bc>
 8100eaa:	4684      	mov	ip, r0
 8100eac:	1a59      	subs	r1, r3, r1
 8100eae:	b2a3      	uxth	r3, r4
 8100eb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8100eb4:	fb0e 1410 	mls	r4, lr, r0, r1
 8100eb8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100ebc:	fb08 f800 	mul.w	r8, r8, r0
 8100ec0:	45a0      	cmp	r8, r4
 8100ec2:	d907      	bls.n	8100ed4 <__udivmoddi4+0x14c>
 8100ec4:	192c      	adds	r4, r5, r4
 8100ec6:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eca:	d202      	bcs.n	8100ed2 <__udivmoddi4+0x14a>
 8100ecc:	45a0      	cmp	r8, r4
 8100ece:	f200 80b6 	bhi.w	810103e <__udivmoddi4+0x2b6>
 8100ed2:	4618      	mov	r0, r3
 8100ed4:	eba4 0408 	sub.w	r4, r4, r8
 8100ed8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100edc:	e79f      	b.n	8100e1e <__udivmoddi4+0x96>
 8100ede:	f1c7 0c20 	rsb	ip, r7, #32
 8100ee2:	40bb      	lsls	r3, r7
 8100ee4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100ee8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100eec:	fa01 f407 	lsl.w	r4, r1, r7
 8100ef0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100ef4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100ef8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100efc:	4325      	orrs	r5, r4
 8100efe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100f02:	0c2c      	lsrs	r4, r5, #16
 8100f04:	fb08 3319 	mls	r3, r8, r9, r3
 8100f08:	fa1f fa8e 	uxth.w	sl, lr
 8100f0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100f10:	fb09 f40a 	mul.w	r4, r9, sl
 8100f14:	429c      	cmp	r4, r3
 8100f16:	fa02 f207 	lsl.w	r2, r2, r7
 8100f1a:	fa00 f107 	lsl.w	r1, r0, r7
 8100f1e:	d90b      	bls.n	8100f38 <__udivmoddi4+0x1b0>
 8100f20:	eb1e 0303 	adds.w	r3, lr, r3
 8100f24:	f109 30ff 	add.w	r0, r9, #4294967295
 8100f28:	f080 8087 	bcs.w	810103a <__udivmoddi4+0x2b2>
 8100f2c:	429c      	cmp	r4, r3
 8100f2e:	f240 8084 	bls.w	810103a <__udivmoddi4+0x2b2>
 8100f32:	f1a9 0902 	sub.w	r9, r9, #2
 8100f36:	4473      	add	r3, lr
 8100f38:	1b1b      	subs	r3, r3, r4
 8100f3a:	b2ad      	uxth	r5, r5
 8100f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100f40:	fb08 3310 	mls	r3, r8, r0, r3
 8100f44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100f48:	fb00 fa0a 	mul.w	sl, r0, sl
 8100f4c:	45a2      	cmp	sl, r4
 8100f4e:	d908      	bls.n	8100f62 <__udivmoddi4+0x1da>
 8100f50:	eb1e 0404 	adds.w	r4, lr, r4
 8100f54:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f58:	d26b      	bcs.n	8101032 <__udivmoddi4+0x2aa>
 8100f5a:	45a2      	cmp	sl, r4
 8100f5c:	d969      	bls.n	8101032 <__udivmoddi4+0x2aa>
 8100f5e:	3802      	subs	r0, #2
 8100f60:	4474      	add	r4, lr
 8100f62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100f66:	fba0 8902 	umull	r8, r9, r0, r2
 8100f6a:	eba4 040a 	sub.w	r4, r4, sl
 8100f6e:	454c      	cmp	r4, r9
 8100f70:	46c2      	mov	sl, r8
 8100f72:	464b      	mov	r3, r9
 8100f74:	d354      	bcc.n	8101020 <__udivmoddi4+0x298>
 8100f76:	d051      	beq.n	810101c <__udivmoddi4+0x294>
 8100f78:	2e00      	cmp	r6, #0
 8100f7a:	d069      	beq.n	8101050 <__udivmoddi4+0x2c8>
 8100f7c:	ebb1 050a 	subs.w	r5, r1, sl
 8100f80:	eb64 0403 	sbc.w	r4, r4, r3
 8100f84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100f88:	40fd      	lsrs	r5, r7
 8100f8a:	40fc      	lsrs	r4, r7
 8100f8c:	ea4c 0505 	orr.w	r5, ip, r5
 8100f90:	e9c6 5400 	strd	r5, r4, [r6]
 8100f94:	2700      	movs	r7, #0
 8100f96:	e747      	b.n	8100e28 <__udivmoddi4+0xa0>
 8100f98:	f1c2 0320 	rsb	r3, r2, #32
 8100f9c:	fa20 f703 	lsr.w	r7, r0, r3
 8100fa0:	4095      	lsls	r5, r2
 8100fa2:	fa01 f002 	lsl.w	r0, r1, r2
 8100fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8100faa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100fae:	4338      	orrs	r0, r7
 8100fb0:	0c01      	lsrs	r1, r0, #16
 8100fb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8100fb6:	fa1f f885 	uxth.w	r8, r5
 8100fba:	fb0e 3317 	mls	r3, lr, r7, r3
 8100fbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fc2:	fb07 f308 	mul.w	r3, r7, r8
 8100fc6:	428b      	cmp	r3, r1
 8100fc8:	fa04 f402 	lsl.w	r4, r4, r2
 8100fcc:	d907      	bls.n	8100fde <__udivmoddi4+0x256>
 8100fce:	1869      	adds	r1, r5, r1
 8100fd0:	f107 3cff 	add.w	ip, r7, #4294967295
 8100fd4:	d22f      	bcs.n	8101036 <__udivmoddi4+0x2ae>
 8100fd6:	428b      	cmp	r3, r1
 8100fd8:	d92d      	bls.n	8101036 <__udivmoddi4+0x2ae>
 8100fda:	3f02      	subs	r7, #2
 8100fdc:	4429      	add	r1, r5
 8100fde:	1acb      	subs	r3, r1, r3
 8100fe0:	b281      	uxth	r1, r0
 8100fe2:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fe6:	fb0e 3310 	mls	r3, lr, r0, r3
 8100fea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fee:	fb00 f308 	mul.w	r3, r0, r8
 8100ff2:	428b      	cmp	r3, r1
 8100ff4:	d907      	bls.n	8101006 <__udivmoddi4+0x27e>
 8100ff6:	1869      	adds	r1, r5, r1
 8100ff8:	f100 3cff 	add.w	ip, r0, #4294967295
 8100ffc:	d217      	bcs.n	810102e <__udivmoddi4+0x2a6>
 8100ffe:	428b      	cmp	r3, r1
 8101000:	d915      	bls.n	810102e <__udivmoddi4+0x2a6>
 8101002:	3802      	subs	r0, #2
 8101004:	4429      	add	r1, r5
 8101006:	1ac9      	subs	r1, r1, r3
 8101008:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 810100c:	e73b      	b.n	8100e86 <__udivmoddi4+0xfe>
 810100e:	4637      	mov	r7, r6
 8101010:	4630      	mov	r0, r6
 8101012:	e709      	b.n	8100e28 <__udivmoddi4+0xa0>
 8101014:	4607      	mov	r7, r0
 8101016:	e6e7      	b.n	8100de8 <__udivmoddi4+0x60>
 8101018:	4618      	mov	r0, r3
 810101a:	e6fb      	b.n	8100e14 <__udivmoddi4+0x8c>
 810101c:	4541      	cmp	r1, r8
 810101e:	d2ab      	bcs.n	8100f78 <__udivmoddi4+0x1f0>
 8101020:	ebb8 0a02 	subs.w	sl, r8, r2
 8101024:	eb69 020e 	sbc.w	r2, r9, lr
 8101028:	3801      	subs	r0, #1
 810102a:	4613      	mov	r3, r2
 810102c:	e7a4      	b.n	8100f78 <__udivmoddi4+0x1f0>
 810102e:	4660      	mov	r0, ip
 8101030:	e7e9      	b.n	8101006 <__udivmoddi4+0x27e>
 8101032:	4618      	mov	r0, r3
 8101034:	e795      	b.n	8100f62 <__udivmoddi4+0x1da>
 8101036:	4667      	mov	r7, ip
 8101038:	e7d1      	b.n	8100fde <__udivmoddi4+0x256>
 810103a:	4681      	mov	r9, r0
 810103c:	e77c      	b.n	8100f38 <__udivmoddi4+0x1b0>
 810103e:	3802      	subs	r0, #2
 8101040:	442c      	add	r4, r5
 8101042:	e747      	b.n	8100ed4 <__udivmoddi4+0x14c>
 8101044:	f1ac 0c02 	sub.w	ip, ip, #2
 8101048:	442b      	add	r3, r5
 810104a:	e72f      	b.n	8100eac <__udivmoddi4+0x124>
 810104c:	4638      	mov	r0, r7
 810104e:	e708      	b.n	8100e62 <__udivmoddi4+0xda>
 8101050:	4637      	mov	r7, r6
 8101052:	e6e9      	b.n	8100e28 <__udivmoddi4+0xa0>

08101054 <__aeabi_idiv0>:
 8101054:	4770      	bx	lr
 8101056:	bf00      	nop

08101058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101058:	b480      	push	{r7}
 810105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810105c:	4b0b      	ldr	r3, [pc, #44]	; (810108c <SystemInit+0x34>)
 810105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101062:	4a0a      	ldr	r2, [pc, #40]	; (810108c <SystemInit+0x34>)
 8101064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 810106c:	4b07      	ldr	r3, [pc, #28]	; (810108c <SystemInit+0x34>)
 810106e:	691b      	ldr	r3, [r3, #16]
 8101070:	4a06      	ldr	r2, [pc, #24]	; (810108c <SystemInit+0x34>)
 8101072:	f043 0304 	orr.w	r3, r3, #4
 8101076:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101078:	4b04      	ldr	r3, [pc, #16]	; (810108c <SystemInit+0x34>)
 810107a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810107e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101080:	bf00      	nop
 8101082:	46bd      	mov	sp, r7
 8101084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101088:	4770      	bx	lr
 810108a:	bf00      	nop
 810108c:	e000ed00 	.word	0xe000ed00

08101090 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8101090:	b580      	push	{r7, lr}
 8101092:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8101094:	4a04      	ldr	r2, [pc, #16]	; (81010a8 <MX_FREERTOS_Init+0x18>)
 8101096:	2100      	movs	r1, #0
 8101098:	4804      	ldr	r0, [pc, #16]	; (81010ac <MX_FREERTOS_Init+0x1c>)
 810109a:	f005 f84b 	bl	8106134 <osThreadNew>
 810109e:	4602      	mov	r2, r0
 81010a0:	4b03      	ldr	r3, [pc, #12]	; (81010b0 <MX_FREERTOS_Init+0x20>)
 81010a2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 81010a4:	bf00      	nop
 81010a6:	bd80      	pop	{r7, pc}
 81010a8:	0810ac34 	.word	0x0810ac34
 81010ac:	081010b5 	.word	0x081010b5
 81010b0:	10004b10 	.word	0x10004b10

081010b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81010b4:	b580      	push	{r7, lr}
 81010b6:	b082      	sub	sp, #8
 81010b8:	af00      	add	r7, sp, #0
 81010ba:	6078      	str	r0, [r7, #4]
//	 {
//		 duty_cycle = 1000;
//	 }
	  //LSM303ReadAcc(data);
	  //LSM303ReadMag(mag_data);
	 temp =  LSM303GetTemp();
 81010bc:	f000 f9f6 	bl	81014ac <LSM303GetTemp>
 81010c0:	eef0 7a40 	vmov.f32	s15, s0
 81010c4:	4b1d      	ldr	r3, [pc, #116]	; (810113c <StartDefaultTask+0x88>)
 81010c6:	edc3 7a00 	vstr	s15, [r3]
	  temp*=100;
 81010ca:	4b1c      	ldr	r3, [pc, #112]	; (810113c <StartDefaultTask+0x88>)
 81010cc:	edd3 7a00 	vldr	s15, [r3]
 81010d0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8101140 <StartDefaultTask+0x8c>
 81010d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 81010d8:	4b18      	ldr	r3, [pc, #96]	; (810113c <StartDefaultTask+0x88>)
 81010da:	edc3 7a00 	vstr	s15, [r3]

	 // sprintf ((char*)buf, "X:% 06d Y:% 06d Z:% 06d \r\n", data[0], data[1], data[2]);
	 // sprintf ((char*)buf, "X:% 06d Y:% 06d Z:% 06d \r\n", mag_data[0], mag_data[1], mag_data[2]);
	  sprintf ((char*)buf, ":%u.%02u C\r\n", (unsigned int) temp/100, (unsigned int)temp % 100);
 81010de:	4b17      	ldr	r3, [pc, #92]	; (810113c <StartDefaultTask+0x88>)
 81010e0:	edd3 7a00 	vldr	s15, [r3]
 81010e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81010e8:	ee17 2a90 	vmov	r2, s15
 81010ec:	4b15      	ldr	r3, [pc, #84]	; (8101144 <StartDefaultTask+0x90>)
 81010ee:	fba3 2302 	umull	r2, r3, r3, r2
 81010f2:	0958      	lsrs	r0, r3, #5
 81010f4:	4b11      	ldr	r3, [pc, #68]	; (810113c <StartDefaultTask+0x88>)
 81010f6:	edd3 7a00 	vldr	s15, [r3]
 81010fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81010fe:	ee17 2a90 	vmov	r2, s15
 8101102:	4b10      	ldr	r3, [pc, #64]	; (8101144 <StartDefaultTask+0x90>)
 8101104:	fba3 1302 	umull	r1, r3, r3, r2
 8101108:	095b      	lsrs	r3, r3, #5
 810110a:	2164      	movs	r1, #100	; 0x64
 810110c:	fb01 f303 	mul.w	r3, r1, r3
 8101110:	1ad3      	subs	r3, r2, r3
 8101112:	4602      	mov	r2, r0
 8101114:	490c      	ldr	r1, [pc, #48]	; (8101148 <StartDefaultTask+0x94>)
 8101116:	480d      	ldr	r0, [pc, #52]	; (810114c <StartDefaultTask+0x98>)
 8101118:	f008 f97c 	bl	8109414 <siprintf>

	  	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 810111c:	480b      	ldr	r0, [pc, #44]	; (810114c <StartDefaultTask+0x98>)
 810111e:	f7ff f8df 	bl	81002e0 <strlen>
 8101122:	4603      	mov	r3, r0
 8101124:	b29a      	uxth	r2, r3
 8101126:	f04f 33ff 	mov.w	r3, #4294967295
 810112a:	4908      	ldr	r1, [pc, #32]	; (810114c <StartDefaultTask+0x98>)
 810112c:	4808      	ldr	r0, [pc, #32]	; (8101150 <StartDefaultTask+0x9c>)
 810112e:	f003 fec1 	bl	8104eb4 <HAL_UART_Transmit>
	  	//LED2_ON();

    osDelay(250);
 8101132:	20fa      	movs	r0, #250	; 0xfa
 8101134:	f005 f8a4 	bl	8106280 <osDelay>
	 temp =  LSM303GetTemp();
 8101138:	e7c0      	b.n	81010bc <StartDefaultTask+0x8>
 810113a:	bf00      	nop
 810113c:	10004b14 	.word	0x10004b14
 8101140:	42c80000 	.word	0x42c80000
 8101144:	51eb851f 	.word	0x51eb851f
 8101148:	0810abec 	.word	0x0810abec
 810114c:	10004b20 	.word	0x10004b20
 8101150:	10004c2c 	.word	0x10004c2c

08101154 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8101154:	b580      	push	{r7, lr}
 8101156:	b08a      	sub	sp, #40	; 0x28
 8101158:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810115a:	f107 0314 	add.w	r3, r7, #20
 810115e:	2200      	movs	r2, #0
 8101160:	601a      	str	r2, [r3, #0]
 8101162:	605a      	str	r2, [r3, #4]
 8101164:	609a      	str	r2, [r3, #8]
 8101166:	60da      	str	r2, [r3, #12]
 8101168:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 810116a:	4b33      	ldr	r3, [pc, #204]	; (8101238 <MX_GPIO_Init+0xe4>)
 810116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101170:	4a31      	ldr	r2, [pc, #196]	; (8101238 <MX_GPIO_Init+0xe4>)
 8101172:	f043 0310 	orr.w	r3, r3, #16
 8101176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810117a:	4b2f      	ldr	r3, [pc, #188]	; (8101238 <MX_GPIO_Init+0xe4>)
 810117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101180:	f003 0310 	and.w	r3, r3, #16
 8101184:	613b      	str	r3, [r7, #16]
 8101186:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101188:	4b2b      	ldr	r3, [pc, #172]	; (8101238 <MX_GPIO_Init+0xe4>)
 810118a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810118e:	4a2a      	ldr	r2, [pc, #168]	; (8101238 <MX_GPIO_Init+0xe4>)
 8101190:	f043 0308 	orr.w	r3, r3, #8
 8101194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101198:	4b27      	ldr	r3, [pc, #156]	; (8101238 <MX_GPIO_Init+0xe4>)
 810119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810119e:	f003 0308 	and.w	r3, r3, #8
 81011a2:	60fb      	str	r3, [r7, #12]
 81011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81011a6:	4b24      	ldr	r3, [pc, #144]	; (8101238 <MX_GPIO_Init+0xe4>)
 81011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ac:	4a22      	ldr	r2, [pc, #136]	; (8101238 <MX_GPIO_Init+0xe4>)
 81011ae:	f043 0301 	orr.w	r3, r3, #1
 81011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011b6:	4b20      	ldr	r3, [pc, #128]	; (8101238 <MX_GPIO_Init+0xe4>)
 81011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011bc:	f003 0301 	and.w	r3, r3, #1
 81011c0:	60bb      	str	r3, [r7, #8]
 81011c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81011c4:	4b1c      	ldr	r3, [pc, #112]	; (8101238 <MX_GPIO_Init+0xe4>)
 81011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ca:	4a1b      	ldr	r2, [pc, #108]	; (8101238 <MX_GPIO_Init+0xe4>)
 81011cc:	f043 0302 	orr.w	r3, r3, #2
 81011d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011d4:	4b18      	ldr	r3, [pc, #96]	; (8101238 <MX_GPIO_Init+0xe4>)
 81011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011da:	f003 0302 	and.w	r3, r3, #2
 81011de:	607b      	str	r3, [r7, #4]
 81011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81011e2:	2200      	movs	r2, #0
 81011e4:	2102      	movs	r1, #2
 81011e6:	4815      	ldr	r0, [pc, #84]	; (810123c <MX_GPIO_Init+0xe8>)
 81011e8:	f001 f8d6 	bl	8102398 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81011ec:	2200      	movs	r2, #0
 81011ee:	2101      	movs	r1, #1
 81011f0:	4813      	ldr	r0, [pc, #76]	; (8101240 <MX_GPIO_Init+0xec>)
 81011f2:	f001 f8d1 	bl	8102398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81011f6:	2302      	movs	r3, #2
 81011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81011fa:	2301      	movs	r3, #1
 81011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011fe:	2300      	movs	r3, #0
 8101200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101202:	2300      	movs	r3, #0
 8101204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101206:	f107 0314 	add.w	r3, r7, #20
 810120a:	4619      	mov	r1, r3
 810120c:	480b      	ldr	r0, [pc, #44]	; (810123c <MX_GPIO_Init+0xe8>)
 810120e:	f000 ff13 	bl	8102038 <HAL_GPIO_Init>

  // Configure GPIO Pin
  GPIO_InitStruct.Pin = LD1_Pin;
 8101212:	2301      	movs	r3, #1
 8101214:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101216:	2301      	movs	r3, #1
 8101218:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810121a:	2300      	movs	r3, #0
 810121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810121e:	2300      	movs	r3, #0
 8101220:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8101222:	f107 0314 	add.w	r3, r7, #20
 8101226:	4619      	mov	r1, r3
 8101228:	4805      	ldr	r0, [pc, #20]	; (8101240 <MX_GPIO_Init+0xec>)
 810122a:	f000 ff05 	bl	8102038 <HAL_GPIO_Init>


}
 810122e:	bf00      	nop
 8101230:	3728      	adds	r7, #40	; 0x28
 8101232:	46bd      	mov	sp, r7
 8101234:	bd80      	pop	{r7, pc}
 8101236:	bf00      	nop
 8101238:	58024400 	.word	0x58024400
 810123c:	58021000 	.word	0x58021000
 8101240:	58020400 	.word	0x58020400

08101244 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8101244:	b580      	push	{r7, lr}
 8101246:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8101248:	4b1b      	ldr	r3, [pc, #108]	; (81012b8 <MX_I2C1_Init+0x74>)
 810124a:	4a1c      	ldr	r2, [pc, #112]	; (81012bc <MX_I2C1_Init+0x78>)
 810124c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 810124e:	4b1a      	ldr	r3, [pc, #104]	; (81012b8 <MX_I2C1_Init+0x74>)
 8101250:	4a1b      	ldr	r2, [pc, #108]	; (81012c0 <MX_I2C1_Init+0x7c>)
 8101252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8101254:	4b18      	ldr	r3, [pc, #96]	; (81012b8 <MX_I2C1_Init+0x74>)
 8101256:	2200      	movs	r2, #0
 8101258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810125a:	4b17      	ldr	r3, [pc, #92]	; (81012b8 <MX_I2C1_Init+0x74>)
 810125c:	2201      	movs	r2, #1
 810125e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101260:	4b15      	ldr	r3, [pc, #84]	; (81012b8 <MX_I2C1_Init+0x74>)
 8101262:	2200      	movs	r2, #0
 8101264:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8101266:	4b14      	ldr	r3, [pc, #80]	; (81012b8 <MX_I2C1_Init+0x74>)
 8101268:	2200      	movs	r2, #0
 810126a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 810126c:	4b12      	ldr	r3, [pc, #72]	; (81012b8 <MX_I2C1_Init+0x74>)
 810126e:	2200      	movs	r2, #0
 8101270:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101272:	4b11      	ldr	r3, [pc, #68]	; (81012b8 <MX_I2C1_Init+0x74>)
 8101274:	2200      	movs	r2, #0
 8101276:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8101278:	4b0f      	ldr	r3, [pc, #60]	; (81012b8 <MX_I2C1_Init+0x74>)
 810127a:	2200      	movs	r2, #0
 810127c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810127e:	480e      	ldr	r0, [pc, #56]	; (81012b8 <MX_I2C1_Init+0x74>)
 8101280:	f001 f8da 	bl	8102438 <HAL_I2C_Init>
 8101284:	4603      	mov	r3, r0
 8101286:	2b00      	cmp	r3, #0
 8101288:	d001      	beq.n	810128e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 810128a:	f000 fa41 	bl	8101710 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810128e:	2100      	movs	r1, #0
 8101290:	4809      	ldr	r0, [pc, #36]	; (81012b8 <MX_I2C1_Init+0x74>)
 8101292:	f001 fdab 	bl	8102dec <HAL_I2CEx_ConfigAnalogFilter>
 8101296:	4603      	mov	r3, r0
 8101298:	2b00      	cmp	r3, #0
 810129a:	d001      	beq.n	81012a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810129c:	f000 fa38 	bl	8101710 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81012a0:	2100      	movs	r1, #0
 81012a2:	4805      	ldr	r0, [pc, #20]	; (81012b8 <MX_I2C1_Init+0x74>)
 81012a4:	f001 fded 	bl	8102e82 <HAL_I2CEx_ConfigDigitalFilter>
 81012a8:	4603      	mov	r3, r0
 81012aa:	2b00      	cmp	r3, #0
 81012ac:	d001      	beq.n	81012b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81012ae:	f000 fa2f 	bl	8101710 <Error_Handler>
  }

}
 81012b2:	bf00      	nop
 81012b4:	bd80      	pop	{r7, pc}
 81012b6:	bf00      	nop
 81012b8:	10004b48 	.word	0x10004b48
 81012bc:	40005400 	.word	0x40005400
 81012c0:	307075b1 	.word	0x307075b1

081012c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81012c4:	b580      	push	{r7, lr}
 81012c6:	b08a      	sub	sp, #40	; 0x28
 81012c8:	af00      	add	r7, sp, #0
 81012ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012cc:	f107 0314 	add.w	r3, r7, #20
 81012d0:	2200      	movs	r2, #0
 81012d2:	601a      	str	r2, [r3, #0]
 81012d4:	605a      	str	r2, [r3, #4]
 81012d6:	609a      	str	r2, [r3, #8]
 81012d8:	60da      	str	r2, [r3, #12]
 81012da:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	681b      	ldr	r3, [r3, #0]
 81012e0:	4a1a      	ldr	r2, [pc, #104]	; (810134c <HAL_I2C_MspInit+0x88>)
 81012e2:	4293      	cmp	r3, r2
 81012e4:	d12e      	bne.n	8101344 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81012e6:	4b1a      	ldr	r3, [pc, #104]	; (8101350 <HAL_I2C_MspInit+0x8c>)
 81012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012ec:	4a18      	ldr	r2, [pc, #96]	; (8101350 <HAL_I2C_MspInit+0x8c>)
 81012ee:	f043 0302 	orr.w	r3, r3, #2
 81012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012f6:	4b16      	ldr	r3, [pc, #88]	; (8101350 <HAL_I2C_MspInit+0x8c>)
 81012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012fc:	f003 0302 	and.w	r3, r3, #2
 8101300:	613b      	str	r3, [r7, #16]
 8101302:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101304:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810130a:	2312      	movs	r3, #18
 810130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810130e:	2300      	movs	r3, #0
 8101310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101312:	2300      	movs	r3, #0
 8101314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101316:	2304      	movs	r3, #4
 8101318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810131a:	f107 0314 	add.w	r3, r7, #20
 810131e:	4619      	mov	r1, r3
 8101320:	480c      	ldr	r0, [pc, #48]	; (8101354 <HAL_I2C_MspInit+0x90>)
 8101322:	f000 fe89 	bl	8102038 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101326:	4b0a      	ldr	r3, [pc, #40]	; (8101350 <HAL_I2C_MspInit+0x8c>)
 8101328:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810132c:	4a08      	ldr	r2, [pc, #32]	; (8101350 <HAL_I2C_MspInit+0x8c>)
 810132e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101332:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101336:	4b06      	ldr	r3, [pc, #24]	; (8101350 <HAL_I2C_MspInit+0x8c>)
 8101338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810133c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101340:	60fb      	str	r3, [r7, #12]
 8101342:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8101344:	bf00      	nop
 8101346:	3728      	adds	r7, #40	; 0x28
 8101348:	46bd      	mov	sp, r7
 810134a:	bd80      	pop	{r7, pc}
 810134c:	40005400 	.word	0x40005400
 8101350:	58024400 	.word	0x58024400
 8101354:	58020400 	.word	0x58020400

08101358 <LSM303StartUp>:
void I2CWrite(uint16_t Address, uint8_t reg, uint8_t value);
void ErrorHandler(void);


void LSM303StartUp(void)
{
 8101358:	b580      	push	{r7, lr}
 810135a:	af00      	add	r7, sp, #0
	// Wait for sensor to initialise
	HAL_Delay(100);
 810135c:	2064      	movs	r0, #100	; 0x64
 810135e:	f000 fd55 	bl	8101e0c <HAL_Delay>

	// check Sensor is present
	if(ReadSensorID(LSM303_ACC_ADDR, LSM303_REG_WHO_AM_I) == 0x33)
 8101362:	210f      	movs	r1, #15
 8101364:	2032      	movs	r0, #50	; 0x32
 8101366:	f000 f94b 	bl	8101600 <ReadSensorID>
 810136a:	4603      	mov	r3, r0
 810136c:	2b33      	cmp	r3, #51	; 0x33
 810136e:	d001      	beq.n	8101374 <LSM303StartUp+0x1c>
		//LED1_ON();
	}

	else
	{
		ErrorHandler();
 8101370:	f000 f93a 	bl	81015e8 <ErrorHandler>
	}

}
 8101374:	bf00      	nop
 8101376:	bd80      	pop	{r7, pc}

08101378 <LSM303AccInit>:

void LSM303AccInit ()
{
 8101378:	b580      	push	{r7, lr}
 810137a:	b082      	sub	sp, #8
 810137c:	af00      	add	r7, sp, #0
	LSM303StartUp();
 810137e:	f7ff ffeb 	bl	8101358 <LSM303StartUp>
	uint16_t InitStruct = 0x00;
 8101382:	2300      	movs	r3, #0
 8101384:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8101386:	2300      	movs	r3, #0
 8101388:	717b      	strb	r3, [r7, #5]

	InitStruct |= (NORMAL_MODE | ODR_400HZ | X_EN | Y_EN | Z_EN) ;
 810138a:	88fb      	ldrh	r3, [r7, #6]
 810138c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8101390:	80fb      	strh	r3, [r7, #6]
	InitStruct |= ((BDU_CONTINUOUS | BLE_LSB | FS_2G | HR_EN) << 8);
 8101392:	88fb      	ldrh	r3, [r7, #6]
 8101394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8101398:	80fb      	strh	r3, [r7, #6]

	ctrl = (uint8_t)InitStruct;
 810139a:	88fb      	ldrh	r3, [r7, #6]
 810139c:	717b      	strb	r3, [r7, #5]
    LSM303Write(LSM303_ACC_ADDR, CTRL_REG1_A, ctrl);
 810139e:	797b      	ldrb	r3, [r7, #5]
 81013a0:	461a      	mov	r2, r3
 81013a2:	2120      	movs	r1, #32
 81013a4:	2032      	movs	r0, #50	; 0x32
 81013a6:	f000 f85b 	bl	8101460 <LSM303Write>
    ctrl = (uint8_t)(InitStruct << 8);
 81013aa:	2300      	movs	r3, #0
 81013ac:	717b      	strb	r3, [r7, #5]
    LSM303Write(LSM303_ACC_ADDR, CTRL_REG4_A, ctrl);
 81013ae:	797b      	ldrb	r3, [r7, #5]
 81013b0:	461a      	mov	r2, r3
 81013b2:	2123      	movs	r1, #35	; 0x23
 81013b4:	2032      	movs	r0, #50	; 0x32
 81013b6:	f000 f853 	bl	8101460 <LSM303Write>

    // Configure Filter structure for the accelerometer
    InitStruct = (uint8_t) (HPM_NORMAL | HPCF_16 | HPF_AO1_DISABLE | HPF_AO2_DISABLE);
 81013ba:	2390      	movs	r3, #144	; 0x90
 81013bc:	80fb      	strh	r3, [r7, #6]
    FilterConfig(InitStruct);
 81013be:	88fb      	ldrh	r3, [r7, #6]
 81013c0:	b2db      	uxtb	r3, r3
 81013c2:	4618      	mov	r0, r3
 81013c4:	f000 f804 	bl	81013d0 <FilterConfig>


}
 81013c8:	bf00      	nop
 81013ca:	3708      	adds	r7, #8
 81013cc:	46bd      	mov	sp, r7
 81013ce:	bd80      	pop	{r7, pc}

081013d0 <FilterConfig>:

// configure filter for the Sensor
void FilterConfig(uint8_t FilterStruct)
{
 81013d0:	b580      	push	{r7, lr}
 81013d2:	b084      	sub	sp, #16
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	4603      	mov	r3, r0
 81013d8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_tmp;

	reg_tmp = LSM303Read(LSM303_ACC_ADDR, CTRL_REG2_A);
 81013da:	2121      	movs	r1, #33	; 0x21
 81013dc:	2032      	movs	r0, #50	; 0x32
 81013de:	f000 f852 	bl	8101486 <LSM303Read>
 81013e2:	4603      	mov	r3, r0
 81013e4:	73fb      	strb	r3, [r7, #15]

	reg_tmp &= 0x0C;
 81013e6:	7bfb      	ldrb	r3, [r7, #15]
 81013e8:	f003 030c 	and.w	r3, r3, #12
 81013ec:	73fb      	strb	r3, [r7, #15]
	reg_tmp |= FilterStruct;
 81013ee:	7bfa      	ldrb	r2, [r7, #15]
 81013f0:	79fb      	ldrb	r3, [r7, #7]
 81013f2:	4313      	orrs	r3, r2
 81013f4:	73fb      	strb	r3, [r7, #15]

	// Write value to the Register
	LSM303Write(LSM303_ACC_ADDR, CTRL_REG2_A, reg_tmp);
 81013f6:	7bfb      	ldrb	r3, [r7, #15]
 81013f8:	461a      	mov	r2, r3
 81013fa:	2121      	movs	r1, #33	; 0x21
 81013fc:	2032      	movs	r0, #50	; 0x32
 81013fe:	f000 f82f 	bl	8101460 <LSM303Write>
}
 8101402:	bf00      	nop
 8101404:	3710      	adds	r7, #16
 8101406:	46bd      	mov	sp, r7
 8101408:	bd80      	pop	{r7, pc}

0810140a <LSM303MagInit>:

void LSM303MagInit()
{
 810140a:	b580      	push	{r7, lr}
 810140c:	b082      	sub	sp, #8
 810140e:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8101410:	2300      	movs	r3, #0
 8101412:	71fb      	strb	r3, [r7, #7]
	uint32_t InitStruct = 0x00;
 8101414:	2300      	movs	r3, #0
 8101416:	603b      	str	r3, [r7, #0]

	InitStruct |= (TEMP_ENABLE | ODR_220HZ );
 8101418:	683b      	ldr	r3, [r7, #0]
 810141a:	f043 039c 	orr.w	r3, r3, #156	; 0x9c
 810141e:	603b      	str	r3, [r7, #0]
	InitStruct |= (LSM303_MAGGAIN_4_0) << 8;
 8101420:	683b      	ldr	r3, [r7, #0]
 8101422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101426:	603b      	str	r3, [r7, #0]
	InitStruct |=  (CONTINUOUS_CONVERSION) << 16;

	ctrl = (uint8_t)InitStruct;
 8101428:	683b      	ldr	r3, [r7, #0]
 810142a:	71fb      	strb	r3, [r7, #7]
	LSM303Write(LSM303_MAG_ADDR, CRA_REG_M, ctrl);
 810142c:	79fb      	ldrb	r3, [r7, #7]
 810142e:	461a      	mov	r2, r3
 8101430:	2100      	movs	r1, #0
 8101432:	203c      	movs	r0, #60	; 0x3c
 8101434:	f000 f814 	bl	8101460 <LSM303Write>
	ctrl = (uint8_t) (InitStruct << 8);
 8101438:	2300      	movs	r3, #0
 810143a:	71fb      	strb	r3, [r7, #7]
	LSM303Write(LSM303_MAG_ADDR, CRB_REG_M, ctrl);
 810143c:	79fb      	ldrb	r3, [r7, #7]
 810143e:	461a      	mov	r2, r3
 8101440:	2101      	movs	r1, #1
 8101442:	203c      	movs	r0, #60	; 0x3c
 8101444:	f000 f80c 	bl	8101460 <LSM303Write>
	ctrl = (uint8_t) (InitStruct << 16);
 8101448:	2300      	movs	r3, #0
 810144a:	71fb      	strb	r3, [r7, #7]
	LSM303Write(LSM303_MAG_ADDR, MR_REG_M, ctrl);
 810144c:	79fb      	ldrb	r3, [r7, #7]
 810144e:	461a      	mov	r2, r3
 8101450:	2102      	movs	r1, #2
 8101452:	203c      	movs	r0, #60	; 0x3c
 8101454:	f000 f804 	bl	8101460 <LSM303Write>

}
 8101458:	bf00      	nop
 810145a:	3708      	adds	r7, #8
 810145c:	46bd      	mov	sp, r7
 810145e:	bd80      	pop	{r7, pc}

08101460 <LSM303Write>:

void LSM303Write(uint16_t DeviceAddr, uint8_t reg, uint8_t value)
{
 8101460:	b580      	push	{r7, lr}
 8101462:	b082      	sub	sp, #8
 8101464:	af00      	add	r7, sp, #0
 8101466:	4603      	mov	r3, r0
 8101468:	80fb      	strh	r3, [r7, #6]
 810146a:	460b      	mov	r3, r1
 810146c:	717b      	strb	r3, [r7, #5]
 810146e:	4613      	mov	r3, r2
 8101470:	713b      	strb	r3, [r7, #4]
	I2CWrite(DeviceAddr, reg, value);
 8101472:	793a      	ldrb	r2, [r7, #4]
 8101474:	7979      	ldrb	r1, [r7, #5]
 8101476:	88fb      	ldrh	r3, [r7, #6]
 8101478:	4618      	mov	r0, r3
 810147a:	f000 f889 	bl	8101590 <I2CWrite>
}
 810147e:	bf00      	nop
 8101480:	3708      	adds	r7, #8
 8101482:	46bd      	mov	sp, r7
 8101484:	bd80      	pop	{r7, pc}

08101486 <LSM303Read>:


uint8_t LSM303Read(uint16_t DeviceAddr, uint8_t reg)
{
 8101486:	b580      	push	{r7, lr}
 8101488:	b082      	sub	sp, #8
 810148a:	af00      	add	r7, sp, #0
 810148c:	4603      	mov	r3, r0
 810148e:	460a      	mov	r2, r1
 8101490:	80fb      	strh	r3, [r7, #6]
 8101492:	4613      	mov	r3, r2
 8101494:	717b      	strb	r3, [r7, #5]
	return I2CRead(DeviceAddr, reg);
 8101496:	797a      	ldrb	r2, [r7, #5]
 8101498:	88fb      	ldrh	r3, [r7, #6]
 810149a:	4611      	mov	r1, r2
 810149c:	4618      	mov	r0, r3
 810149e:	f000 f851 	bl	8101544 <I2CRead>
 81014a2:	4603      	mov	r3, r0
}
 81014a4:	4618      	mov	r0, r3
 81014a6:	3708      	adds	r7, #8
 81014a8:	46bd      	mov	sp, r7
 81014aa:	bd80      	pop	{r7, pc}

081014ac <LSM303GetTemp>:


}

float_t LSM303GetTemp()
{
 81014ac:	b590      	push	{r4, r7, lr}
 81014ae:	b083      	sub	sp, #12
 81014b0:	af00      	add	r7, sp, #0
	uint8_t TEMP_H;
	uint8_t TEMP_L;
	float_t temp;
	uint16_t pData;

	TEMP_H = LSM303Read(LSM303_MAG_ADDR, TEMP_OUT_H_M);
 81014b2:	2131      	movs	r1, #49	; 0x31
 81014b4:	203c      	movs	r0, #60	; 0x3c
 81014b6:	f7ff ffe6 	bl	8101486 <LSM303Read>
 81014ba:	4603      	mov	r3, r0
 81014bc:	717b      	strb	r3, [r7, #5]
	TEMP_L = LSM303Read(LSM303_MAG_ADDR, TEMP_OUT_L_M);
 81014be:	2132      	movs	r1, #50	; 0x32
 81014c0:	203c      	movs	r0, #60	; 0x3c
 81014c2:	f7ff ffe0 	bl	8101486 <LSM303Read>
 81014c6:	4603      	mov	r3, r0
 81014c8:	713b      	strb	r3, [r7, #4]

    pData = (TEMP_H << 8);
 81014ca:	797b      	ldrb	r3, [r7, #5]
 81014cc:	b29b      	uxth	r3, r3
 81014ce:	021b      	lsls	r3, r3, #8
 81014d0:	80fb      	strh	r3, [r7, #6]
    pData |= TEMP_L;
 81014d2:	793b      	ldrb	r3, [r7, #4]
 81014d4:	b29a      	uxth	r2, r3
 81014d6:	88fb      	ldrh	r3, [r7, #6]
 81014d8:	4313      	orrs	r3, r2
 81014da:	80fb      	strh	r3, [r7, #6]

    // ALternatively
    // pData = (uint16_t)(TEMP_H << 4 | TEMP_L >> 4


	pData = ((uint16_t) pData >> 4);
 81014dc:	88fb      	ldrh	r3, [r7, #6]
 81014de:	091b      	lsrs	r3, r3, #4
 81014e0:	80fb      	strh	r3, [r7, #6]

	//2s complement
	if(pData > 0xF77 )
 81014e2:	88fb      	ldrh	r3, [r7, #6]
 81014e4:	f640 7277 	movw	r2, #3959	; 0xf77
 81014e8:	4293      	cmp	r3, r2
 81014ea:	d905      	bls.n	81014f8 <LSM303GetTemp+0x4c>
	{
		pData |= 0xF000;
 81014ec:	88fb      	ldrh	r3, [r7, #6]
 81014ee:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 81014f2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 81014f6:	80fb      	strh	r3, [r7, #6]
	}
   // pData = ((uint16_t) ((TEMP_H << 8) | TEMP_L) >> 4);

	temp =  (pData / 256.0) + 20;
 81014f8:	88fb      	ldrh	r3, [r7, #6]
 81014fa:	4618      	mov	r0, r3
 81014fc:	f7ff f89a 	bl	8100634 <__aeabi_i2d>
 8101500:	f04f 0200 	mov.w	r2, #0
 8101504:	4b0d      	ldr	r3, [pc, #52]	; (810153c <LSM303GetTemp+0x90>)
 8101506:	f7ff fa29 	bl	810095c <__aeabi_ddiv>
 810150a:	4603      	mov	r3, r0
 810150c:	460c      	mov	r4, r1
 810150e:	4618      	mov	r0, r3
 8101510:	4621      	mov	r1, r4
 8101512:	f04f 0200 	mov.w	r2, #0
 8101516:	4b0a      	ldr	r3, [pc, #40]	; (8101540 <LSM303GetTemp+0x94>)
 8101518:	f7fe ff40 	bl	810039c <__adddf3>
 810151c:	4603      	mov	r3, r0
 810151e:	460c      	mov	r4, r1
 8101520:	4618      	mov	r0, r3
 8101522:	4621      	mov	r1, r4
 8101524:	f7ff fbc8 	bl	8100cb8 <__aeabi_d2f>
 8101528:	4603      	mov	r3, r0
 810152a:	603b      	str	r3, [r7, #0]
    // temp = pData / 256.0;

     return temp;
 810152c:	683b      	ldr	r3, [r7, #0]
 810152e:	ee07 3a90 	vmov	s15, r3
}
 8101532:	eeb0 0a67 	vmov.f32	s0, s15
 8101536:	370c      	adds	r7, #12
 8101538:	46bd      	mov	sp, r7
 810153a:	bd90      	pop	{r4, r7, pc}
 810153c:	40700000 	.word	0x40700000
 8101540:	40340000 	.word	0x40340000

08101544 <I2CRead>:
	}
}


uint8_t I2CRead(uint16_t Address, uint8_t reg)
{
 8101544:	b580      	push	{r7, lr}
 8101546:	b088      	sub	sp, #32
 8101548:	af04      	add	r7, sp, #16
 810154a:	4603      	mov	r3, r0
 810154c:	460a      	mov	r2, r1
 810154e:	80fb      	strh	r3, [r7, #6]
 8101550:	4613      	mov	r3, r2
 8101552:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;
	uint8_t value = 0x00;
 8101554:	2300      	movs	r3, #0
 8101556:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1, Address, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 8101558:	797b      	ldrb	r3, [r7, #5]
 810155a:	b29a      	uxth	r2, r3
 810155c:	88f9      	ldrh	r1, [r7, #6]
 810155e:	2332      	movs	r3, #50	; 0x32
 8101560:	9302      	str	r3, [sp, #8]
 8101562:	2301      	movs	r3, #1
 8101564:	9301      	str	r3, [sp, #4]
 8101566:	f107 030e 	add.w	r3, r7, #14
 810156a:	9300      	str	r3, [sp, #0]
 810156c:	2301      	movs	r3, #1
 810156e:	4807      	ldr	r0, [pc, #28]	; (810158c <I2CRead+0x48>)
 8101570:	f001 f906 	bl	8102780 <HAL_I2C_Mem_Read>
 8101574:	4603      	mov	r3, r0
 8101576:	73fb      	strb	r3, [r7, #15]

	if(status !=HAL_OK)
 8101578:	7bfb      	ldrb	r3, [r7, #15]
 810157a:	2b00      	cmp	r3, #0
 810157c:	d001      	beq.n	8101582 <I2CRead+0x3e>
	{
		ErrorHandler();
 810157e:	f000 f833 	bl	81015e8 <ErrorHandler>
//	else
//	{
//		LED1_ON();
//	}

	return value;
 8101582:	7bbb      	ldrb	r3, [r7, #14]
}
 8101584:	4618      	mov	r0, r3
 8101586:	3710      	adds	r7, #16
 8101588:	46bd      	mov	sp, r7
 810158a:	bd80      	pop	{r7, pc}
 810158c:	10004b48 	.word	0x10004b48

08101590 <I2CWrite>:

void I2CWrite(uint16_t Address, uint8_t reg, uint8_t value)
{
 8101590:	b580      	push	{r7, lr}
 8101592:	b088      	sub	sp, #32
 8101594:	af04      	add	r7, sp, #16
 8101596:	4603      	mov	r3, r0
 8101598:	80fb      	strh	r3, [r7, #6]
 810159a:	460b      	mov	r3, r1
 810159c:	717b      	strb	r3, [r7, #5]
 810159e:	4613      	mov	r3, r2
 81015a0:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, Address, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 81015a2:	797b      	ldrb	r3, [r7, #5]
 81015a4:	b29a      	uxth	r2, r3
 81015a6:	88f9      	ldrh	r1, [r7, #6]
 81015a8:	2332      	movs	r3, #50	; 0x32
 81015aa:	9302      	str	r3, [sp, #8]
 81015ac:	2301      	movs	r3, #1
 81015ae:	9301      	str	r3, [sp, #4]
 81015b0:	1d3b      	adds	r3, r7, #4
 81015b2:	9300      	str	r3, [sp, #0]
 81015b4:	2301      	movs	r3, #1
 81015b6:	480a      	ldr	r0, [pc, #40]	; (81015e0 <I2CWrite+0x50>)
 81015b8:	f000 ffce 	bl	8102558 <HAL_I2C_Mem_Write>
 81015bc:	4603      	mov	r3, r0
 81015be:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 81015c0:	7bfb      	ldrb	r3, [r7, #15]
 81015c2:	2b00      	cmp	r3, #0
 81015c4:	d002      	beq.n	81015cc <I2CWrite+0x3c>
	{
		ErrorHandler();
 81015c6:	f000 f80f 	bl	81015e8 <ErrorHandler>
	else
	{
		LED1_ON();
	}

}
 81015ca:	e004      	b.n	81015d6 <I2CWrite+0x46>
		LED1_ON();
 81015cc:	2201      	movs	r2, #1
 81015ce:	2101      	movs	r1, #1
 81015d0:	4804      	ldr	r0, [pc, #16]	; (81015e4 <I2CWrite+0x54>)
 81015d2:	f000 fee1 	bl	8102398 <HAL_GPIO_WritePin>
}
 81015d6:	bf00      	nop
 81015d8:	3710      	adds	r7, #16
 81015da:	46bd      	mov	sp, r7
 81015dc:	bd80      	pop	{r7, pc}
 81015de:	bf00      	nop
 81015e0:	10004b48 	.word	0x10004b48
 81015e4:	58020400 	.word	0x58020400

081015e8 <ErrorHandler>:

void ErrorHandler(void)
{
 81015e8:	b580      	push	{r7, lr}
 81015ea:	af00      	add	r7, sp, #0
	LED2_ON();
 81015ec:	2201      	movs	r2, #1
 81015ee:	2102      	movs	r1, #2
 81015f0:	4802      	ldr	r0, [pc, #8]	; (81015fc <ErrorHandler+0x14>)
 81015f2:	f000 fed1 	bl	8102398 <HAL_GPIO_WritePin>
}
 81015f6:	bf00      	nop
 81015f8:	bd80      	pop	{r7, pc}
 81015fa:	bf00      	nop
 81015fc:	58021000 	.word	0x58021000

08101600 <ReadSensorID>:

uint8_t ReadSensorID (uint16_t DeviceAddr, uint8_t reg)
{
 8101600:	b580      	push	{r7, lr}
 8101602:	b082      	sub	sp, #8
 8101604:	af00      	add	r7, sp, #0
 8101606:	4603      	mov	r3, r0
 8101608:	460a      	mov	r2, r1
 810160a:	80fb      	strh	r3, [r7, #6]
 810160c:	4613      	mov	r3, r2
 810160e:	717b      	strb	r3, [r7, #5]
	return I2CRead(DeviceAddr, reg);
 8101610:	797a      	ldrb	r2, [r7, #5]
 8101612:	88fb      	ldrh	r3, [r7, #6]
 8101614:	4611      	mov	r1, r2
 8101616:	4618      	mov	r0, r3
 8101618:	f7ff ff94 	bl	8101544 <I2CRead>
 810161c:	4603      	mov	r3, r0
}
 810161e:	4618      	mov	r0, r3
 8101620:	3708      	adds	r7, #8
 8101622:	46bd      	mov	sp, r7
 8101624:	bd80      	pop	{r7, pc}
	...

08101628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101628:	b580      	push	{r7, lr}
 810162a:	b082      	sub	sp, #8
 810162c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810162e:	4b2b      	ldr	r3, [pc, #172]	; (81016dc <main+0xb4>)
 8101630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101634:	4a29      	ldr	r2, [pc, #164]	; (81016dc <main+0xb4>)
 8101636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810163a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810163e:	4b27      	ldr	r3, [pc, #156]	; (81016dc <main+0xb4>)
 8101640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101648:	607b      	str	r3, [r7, #4]
 810164a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810164c:	2001      	movs	r0, #1
 810164e:	f000 febd 	bl	81023cc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101652:	f001 fcd9 	bl	8103008 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101656:	2201      	movs	r2, #1
 8101658:	2102      	movs	r1, #2
 810165a:	2000      	movs	r0, #0
 810165c:	f001 fc5e 	bl	8102f1c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101660:	4b1f      	ldr	r3, [pc, #124]	; (81016e0 <main+0xb8>)
 8101662:	681b      	ldr	r3, [r3, #0]
 8101664:	091b      	lsrs	r3, r3, #4
 8101666:	f003 030f 	and.w	r3, r3, #15
 810166a:	2b07      	cmp	r3, #7
 810166c:	d108      	bne.n	8101680 <main+0x58>
 810166e:	4b1d      	ldr	r3, [pc, #116]	; (81016e4 <main+0xbc>)
 8101670:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101674:	4a1b      	ldr	r2, [pc, #108]	; (81016e4 <main+0xbc>)
 8101676:	f043 0301 	orr.w	r3, r3, #1
 810167a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810167e:	e007      	b.n	8101690 <main+0x68>
 8101680:	4b18      	ldr	r3, [pc, #96]	; (81016e4 <main+0xbc>)
 8101682:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101686:	4a17      	ldr	r2, [pc, #92]	; (81016e4 <main+0xbc>)
 8101688:	f043 0301 	orr.w	r3, r3, #1
 810168c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101690:	f000 fb3e 	bl	8101d10 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101694:	f7ff fd5e 	bl	8101154 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8101698:	f000 fa7a 	bl	8101b90 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 810169c:	f000 f928 	bl	81018f0 <MX_TIM1_Init>
  MX_I2C1_Init();
 81016a0:	f7ff fdd0 	bl	8101244 <MX_I2C1_Init>
  LSM303AccInit();
 81016a4:	f7ff fe68 	bl	8101378 <LSM303AccInit>
  LSM303MagInit();
 81016a8:	f7ff feaf 	bl	810140a <LSM303MagInit>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81016ac:	2100      	movs	r1, #0
 81016ae:	480e      	ldr	r0, [pc, #56]	; (81016e8 <main+0xc0>)
 81016b0:	f002 fa68 	bl	8103b84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 81016b4:	2104      	movs	r1, #4
 81016b6:	480c      	ldr	r0, [pc, #48]	; (81016e8 <main+0xc0>)
 81016b8:	f002 fa64 	bl	8103b84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 81016bc:	2108      	movs	r1, #8
 81016be:	480a      	ldr	r0, [pc, #40]	; (81016e8 <main+0xc0>)
 81016c0:	f002 fa60 	bl	8103b84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 81016c4:	210c      	movs	r1, #12
 81016c6:	4808      	ldr	r0, [pc, #32]	; (81016e8 <main+0xc0>)
 81016c8:	f002 fa5c 	bl	8103b84 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81016cc:	f004 fcc8 	bl	8106060 <osKernelInitialize>
  MX_FREERTOS_Init();
 81016d0:	f7ff fcde 	bl	8101090 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81016d4:	f004 fcf8 	bl	81060c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81016d8:	e7fe      	b.n	81016d8 <main+0xb0>
 81016da:	bf00      	nop
 81016dc:	58024400 	.word	0x58024400
 81016e0:	e000ed00 	.word	0xe000ed00
 81016e4:	58026400 	.word	0x58026400
 81016e8:	10004be0 	.word	0x10004be0

081016ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81016ec:	b580      	push	{r7, lr}
 81016ee:	b082      	sub	sp, #8
 81016f0:	af00      	add	r7, sp, #0
 81016f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 81016f4:	687b      	ldr	r3, [r7, #4]
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	4a04      	ldr	r2, [pc, #16]	; (810170c <HAL_TIM_PeriodElapsedCallback+0x20>)
 81016fa:	4293      	cmp	r3, r2
 81016fc:	d101      	bne.n	8101702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81016fe:	f000 fb65 	bl	8101dcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101702:	bf00      	nop
 8101704:	3708      	adds	r7, #8
 8101706:	46bd      	mov	sp, r7
 8101708:	bd80      	pop	{r7, pc}
 810170a:	bf00      	nop
 810170c:	40001400 	.word	0x40001400

08101710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101710:	b480      	push	{r7}
 8101712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101714:	bf00      	nop
 8101716:	46bd      	mov	sp, r7
 8101718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810171c:	4770      	bx	lr
	...

08101720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101720:	b580      	push	{r7, lr}
 8101722:	b082      	sub	sp, #8
 8101724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101726:	4b14      	ldr	r3, [pc, #80]	; (8101778 <HAL_MspInit+0x58>)
 8101728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810172c:	4a12      	ldr	r2, [pc, #72]	; (8101778 <HAL_MspInit+0x58>)
 810172e:	f043 0302 	orr.w	r3, r3, #2
 8101732:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101736:	4b10      	ldr	r3, [pc, #64]	; (8101778 <HAL_MspInit+0x58>)
 8101738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810173c:	f003 0302 	and.w	r3, r3, #2
 8101740:	607b      	str	r3, [r7, #4]
 8101742:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101744:	2200      	movs	r2, #0
 8101746:	210f      	movs	r1, #15
 8101748:	f06f 0001 	mvn.w	r0, #1
 810174c:	f000 fc38 	bl	8101fc0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 8101750:	2200      	movs	r2, #0
 8101752:	2100      	movs	r1, #0
 8101754:	2040      	movs	r0, #64	; 0x40
 8101756:	f000 fc33 	bl	8101fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 810175a:	2040      	movs	r0, #64	; 0x40
 810175c:	f000 fc4a 	bl	8101ff4 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101760:	2200      	movs	r2, #0
 8101762:	2105      	movs	r1, #5
 8101764:	207e      	movs	r0, #126	; 0x7e
 8101766:	f000 fc2b 	bl	8101fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 810176a:	207e      	movs	r0, #126	; 0x7e
 810176c:	f000 fc42 	bl	8101ff4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101770:	bf00      	nop
 8101772:	3708      	adds	r7, #8
 8101774:	46bd      	mov	sp, r7
 8101776:	bd80      	pop	{r7, pc}
 8101778:	58024400 	.word	0x58024400

0810177c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810177c:	b580      	push	{r7, lr}
 810177e:	b08e      	sub	sp, #56	; 0x38
 8101780:	af00      	add	r7, sp, #0
 8101782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8101784:	2300      	movs	r3, #0
 8101786:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8101788:	2300      	movs	r3, #0
 810178a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 810178c:	2200      	movs	r2, #0
 810178e:	6879      	ldr	r1, [r7, #4]
 8101790:	2037      	movs	r0, #55	; 0x37
 8101792:	f000 fc15 	bl	8101fc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8101796:	2037      	movs	r0, #55	; 0x37
 8101798:	f000 fc2c 	bl	8101ff4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 810179c:	4b21      	ldr	r3, [pc, #132]	; (8101824 <HAL_InitTick+0xa8>)
 810179e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81017a2:	4a20      	ldr	r2, [pc, #128]	; (8101824 <HAL_InitTick+0xa8>)
 81017a4:	f043 0320 	orr.w	r3, r3, #32
 81017a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81017ac:	4b1d      	ldr	r3, [pc, #116]	; (8101824 <HAL_InitTick+0xa8>)
 81017ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81017b2:	f003 0320 	and.w	r3, r3, #32
 81017b6:	60bb      	str	r3, [r7, #8]
 81017b8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81017ba:	f107 020c 	add.w	r2, r7, #12
 81017be:	f107 0310 	add.w	r3, r7, #16
 81017c2:	4611      	mov	r1, r2
 81017c4:	4618      	mov	r0, r3
 81017c6:	f001 fdfd 	bl	81033c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 81017ca:	f001 fdcf 	bl	810336c <HAL_RCC_GetPCLK1Freq>
 81017ce:	4603      	mov	r3, r0
 81017d0:	005b      	lsls	r3, r3, #1
 81017d2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 81017d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81017d6:	4a14      	ldr	r2, [pc, #80]	; (8101828 <HAL_InitTick+0xac>)
 81017d8:	fba2 2303 	umull	r2, r3, r2, r3
 81017dc:	0c9b      	lsrs	r3, r3, #18
 81017de:	3b01      	subs	r3, #1
 81017e0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 81017e2:	4b12      	ldr	r3, [pc, #72]	; (810182c <HAL_InitTick+0xb0>)
 81017e4:	4a12      	ldr	r2, [pc, #72]	; (8101830 <HAL_InitTick+0xb4>)
 81017e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 81017e8:	4b10      	ldr	r3, [pc, #64]	; (810182c <HAL_InitTick+0xb0>)
 81017ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 81017ee:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 81017f0:	4a0e      	ldr	r2, [pc, #56]	; (810182c <HAL_InitTick+0xb0>)
 81017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81017f4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 81017f6:	4b0d      	ldr	r3, [pc, #52]	; (810182c <HAL_InitTick+0xb0>)
 81017f8:	2200      	movs	r2, #0
 81017fa:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 81017fc:	4b0b      	ldr	r3, [pc, #44]	; (810182c <HAL_InitTick+0xb0>)
 81017fe:	2200      	movs	r2, #0
 8101800:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8101802:	480a      	ldr	r0, [pc, #40]	; (810182c <HAL_InitTick+0xb0>)
 8101804:	f002 f8ce 	bl	81039a4 <HAL_TIM_Base_Init>
 8101808:	4603      	mov	r3, r0
 810180a:	2b00      	cmp	r3, #0
 810180c:	d104      	bne.n	8101818 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 810180e:	4807      	ldr	r0, [pc, #28]	; (810182c <HAL_InitTick+0xb0>)
 8101810:	f002 f920 	bl	8103a54 <HAL_TIM_Base_Start_IT>
 8101814:	4603      	mov	r3, r0
 8101816:	e000      	b.n	810181a <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8101818:	2301      	movs	r3, #1
}
 810181a:	4618      	mov	r0, r3
 810181c:	3738      	adds	r7, #56	; 0x38
 810181e:	46bd      	mov	sp, r7
 8101820:	bd80      	pop	{r7, pc}
 8101822:	bf00      	nop
 8101824:	58024400 	.word	0x58024400
 8101828:	431bde83 	.word	0x431bde83
 810182c:	10004b94 	.word	0x10004b94
 8101830:	40001400 	.word	0x40001400

08101834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101834:	b480      	push	{r7}
 8101836:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8101838:	bf00      	nop
 810183a:	46bd      	mov	sp, r7
 810183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101840:	4770      	bx	lr

08101842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101842:	b480      	push	{r7}
 8101844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101846:	e7fe      	b.n	8101846 <HardFault_Handler+0x4>

08101848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101848:	b480      	push	{r7}
 810184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810184c:	e7fe      	b.n	810184c <MemManage_Handler+0x4>

0810184e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810184e:	b480      	push	{r7}
 8101850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101852:	e7fe      	b.n	8101852 <BusFault_Handler+0x4>

08101854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101854:	b480      	push	{r7}
 8101856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101858:	e7fe      	b.n	8101858 <UsageFault_Handler+0x4>

0810185a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810185a:	b480      	push	{r7}
 810185c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810185e:	bf00      	nop
 8101860:	46bd      	mov	sp, r7
 8101862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101866:	4770      	bx	lr

08101868 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101868:	b480      	push	{r7}
 810186a:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 810186c:	bf00      	nop
 810186e:	46bd      	mov	sp, r7
 8101870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101874:	4770      	bx	lr

08101876 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101876:	b580      	push	{r7, lr}
 8101878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810187a:	f000 fdb9 	bl	81023f0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 810187e:	bf00      	nop
 8101880:	bd80      	pop	{r7, pc}
	...

08101884 <TIM7_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8101884:	b580      	push	{r7, lr}
 8101886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8101888:	4802      	ldr	r0, [pc, #8]	; (8101894 <TIM7_IRQHandler+0x10>)
 810188a:	f002 fa4d 	bl	8103d28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 810188e:	bf00      	nop
 8101890:	bd80      	pop	{r7, pc}
 8101892:	bf00      	nop
 8101894:	10004b94 	.word	0x10004b94

08101898 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8101898:	b580      	push	{r7, lr}
 810189a:	b084      	sub	sp, #16
 810189c:	af00      	add	r7, sp, #0
 810189e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 81018a0:	4b11      	ldr	r3, [pc, #68]	; (81018e8 <_sbrk+0x50>)
 81018a2:	681b      	ldr	r3, [r3, #0]
 81018a4:	2b00      	cmp	r3, #0
 81018a6:	d102      	bne.n	81018ae <_sbrk+0x16>
		heap_end = &end;
 81018a8:	4b0f      	ldr	r3, [pc, #60]	; (81018e8 <_sbrk+0x50>)
 81018aa:	4a10      	ldr	r2, [pc, #64]	; (81018ec <_sbrk+0x54>)
 81018ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 81018ae:	4b0e      	ldr	r3, [pc, #56]	; (81018e8 <_sbrk+0x50>)
 81018b0:	681b      	ldr	r3, [r3, #0]
 81018b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 81018b4:	4b0c      	ldr	r3, [pc, #48]	; (81018e8 <_sbrk+0x50>)
 81018b6:	681a      	ldr	r2, [r3, #0]
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	4413      	add	r3, r2
 81018bc:	466a      	mov	r2, sp
 81018be:	4293      	cmp	r3, r2
 81018c0:	d907      	bls.n	81018d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 81018c2:	f007 f90d 	bl	8108ae0 <__errno>
 81018c6:	4602      	mov	r2, r0
 81018c8:	230c      	movs	r3, #12
 81018ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 81018cc:	f04f 33ff 	mov.w	r3, #4294967295
 81018d0:	e006      	b.n	81018e0 <_sbrk+0x48>
	}

	heap_end += incr;
 81018d2:	4b05      	ldr	r3, [pc, #20]	; (81018e8 <_sbrk+0x50>)
 81018d4:	681a      	ldr	r2, [r3, #0]
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	4413      	add	r3, r2
 81018da:	4a03      	ldr	r2, [pc, #12]	; (81018e8 <_sbrk+0x50>)
 81018dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 81018de:	68fb      	ldr	r3, [r7, #12]
}
 81018e0:	4618      	mov	r0, r3
 81018e2:	3710      	adds	r7, #16
 81018e4:	46bd      	mov	sp, r7
 81018e6:	bd80      	pop	{r7, pc}
 81018e8:	100001fc 	.word	0x100001fc
 81018ec:	10004d00 	.word	0x10004d00

081018f0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 81018f0:	b580      	push	{r7, lr}
 81018f2:	b09a      	sub	sp, #104	; 0x68
 81018f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81018f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81018fa:	2200      	movs	r2, #0
 81018fc:	601a      	str	r2, [r3, #0]
 81018fe:	605a      	str	r2, [r3, #4]
 8101900:	609a      	str	r2, [r3, #8]
 8101902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101904:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101908:	2200      	movs	r2, #0
 810190a:	601a      	str	r2, [r3, #0]
 810190c:	605a      	str	r2, [r3, #4]
 810190e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101914:	2200      	movs	r2, #0
 8101916:	601a      	str	r2, [r3, #0]
 8101918:	605a      	str	r2, [r3, #4]
 810191a:	609a      	str	r2, [r3, #8]
 810191c:	60da      	str	r2, [r3, #12]
 810191e:	611a      	str	r2, [r3, #16]
 8101920:	615a      	str	r2, [r3, #20]
 8101922:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101924:	1d3b      	adds	r3, r7, #4
 8101926:	222c      	movs	r2, #44	; 0x2c
 8101928:	2100      	movs	r1, #0
 810192a:	4618      	mov	r0, r3
 810192c:	f007 f90d 	bl	8108b4a <memset>

  htim1.Instance = TIM1;
 8101930:	4b55      	ldr	r3, [pc, #340]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101932:	4a56      	ldr	r2, [pc, #344]	; (8101a8c <MX_TIM1_Init+0x19c>)
 8101934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 8101936:	4b54      	ldr	r3, [pc, #336]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101938:	2236      	movs	r2, #54	; 0x36
 810193a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810193c:	4b52      	ldr	r3, [pc, #328]	; (8101a88 <MX_TIM1_Init+0x198>)
 810193e:	2200      	movs	r2, #0
 8101940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 8101942:	4b51      	ldr	r3, [pc, #324]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101944:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8101948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810194a:	4b4f      	ldr	r3, [pc, #316]	; (8101a88 <MX_TIM1_Init+0x198>)
 810194c:	2200      	movs	r2, #0
 810194e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101950:	4b4d      	ldr	r3, [pc, #308]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101952:	2200      	movs	r2, #0
 8101954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101956:	4b4c      	ldr	r3, [pc, #304]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101958:	2200      	movs	r2, #0
 810195a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810195c:	484a      	ldr	r0, [pc, #296]	; (8101a88 <MX_TIM1_Init+0x198>)
 810195e:	f002 f821 	bl	81039a4 <HAL_TIM_Base_Init>
 8101962:	4603      	mov	r3, r0
 8101964:	2b00      	cmp	r3, #0
 8101966:	d001      	beq.n	810196c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101968:	f7ff fed2 	bl	8101710 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101970:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101976:	4619      	mov	r1, r3
 8101978:	4843      	ldr	r0, [pc, #268]	; (8101a88 <MX_TIM1_Init+0x198>)
 810197a:	f002 fc05 	bl	8104188 <HAL_TIM_ConfigClockSource>
 810197e:	4603      	mov	r3, r0
 8101980:	2b00      	cmp	r3, #0
 8101982:	d001      	beq.n	8101988 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101984:	f7ff fec4 	bl	8101710 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101988:	483f      	ldr	r0, [pc, #252]	; (8101a88 <MX_TIM1_Init+0x198>)
 810198a:	f002 f899 	bl	8103ac0 <HAL_TIM_PWM_Init>
 810198e:	4603      	mov	r3, r0
 8101990:	2b00      	cmp	r3, #0
 8101992:	d001      	beq.n	8101998 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101994:	f7ff febc 	bl	8101710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101998:	2300      	movs	r3, #0
 810199a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810199c:	2300      	movs	r3, #0
 810199e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81019a0:	2300      	movs	r3, #0
 81019a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81019a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81019a8:	4619      	mov	r1, r3
 81019aa:	4837      	ldr	r0, [pc, #220]	; (8101a88 <MX_TIM1_Init+0x198>)
 81019ac:	f003 f90e 	bl	8104bcc <HAL_TIMEx_MasterConfigSynchronization>
 81019b0:	4603      	mov	r3, r0
 81019b2:	2b00      	cmp	r3, #0
 81019b4:	d001      	beq.n	81019ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 81019b6:	f7ff feab 	bl	8101710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81019ba:	2360      	movs	r3, #96	; 0x60
 81019bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 81019be:	2332      	movs	r3, #50	; 0x32
 81019c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81019c2:	2300      	movs	r3, #0
 81019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81019c6:	2300      	movs	r3, #0
 81019c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81019ca:	2300      	movs	r3, #0
 81019cc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81019ce:	2300      	movs	r3, #0
 81019d0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81019d2:	2300      	movs	r3, #0
 81019d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81019d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81019da:	2200      	movs	r2, #0
 81019dc:	4619      	mov	r1, r3
 81019de:	482a      	ldr	r0, [pc, #168]	; (8101a88 <MX_TIM1_Init+0x198>)
 81019e0:	f002 fac2 	bl	8103f68 <HAL_TIM_PWM_ConfigChannel>
 81019e4:	4603      	mov	r3, r0
 81019e6:	2b00      	cmp	r3, #0
 81019e8:	d001      	beq.n	81019ee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 81019ea:	f7ff fe91 	bl	8101710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81019ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81019f2:	2204      	movs	r2, #4
 81019f4:	4619      	mov	r1, r3
 81019f6:	4824      	ldr	r0, [pc, #144]	; (8101a88 <MX_TIM1_Init+0x198>)
 81019f8:	f002 fab6 	bl	8103f68 <HAL_TIM_PWM_ConfigChannel>
 81019fc:	4603      	mov	r3, r0
 81019fe:	2b00      	cmp	r3, #0
 8101a00:	d001      	beq.n	8101a06 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101a02:	f7ff fe85 	bl	8101710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101a06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101a0a:	2208      	movs	r2, #8
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	481e      	ldr	r0, [pc, #120]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101a10:	f002 faaa 	bl	8103f68 <HAL_TIM_PWM_ConfigChannel>
 8101a14:	4603      	mov	r3, r0
 8101a16:	2b00      	cmp	r3, #0
 8101a18:	d001      	beq.n	8101a1e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8101a1a:	f7ff fe79 	bl	8101710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101a22:	220c      	movs	r2, #12
 8101a24:	4619      	mov	r1, r3
 8101a26:	4818      	ldr	r0, [pc, #96]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101a28:	f002 fa9e 	bl	8103f68 <HAL_TIM_PWM_ConfigChannel>
 8101a2c:	4603      	mov	r3, r0
 8101a2e:	2b00      	cmp	r3, #0
 8101a30:	d001      	beq.n	8101a36 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8101a32:	f7ff fe6d 	bl	8101710 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101a36:	2300      	movs	r3, #0
 8101a38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101a3a:	2300      	movs	r3, #0
 8101a3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101a3e:	2300      	movs	r3, #0
 8101a40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101a42:	2300      	movs	r3, #0
 8101a44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101a46:	2300      	movs	r3, #0
 8101a48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101a4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101a50:	2300      	movs	r3, #0
 8101a52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101a54:	2300      	movs	r3, #0
 8101a56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101a5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101a5e:	2300      	movs	r3, #0
 8101a60:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101a62:	2300      	movs	r3, #0
 8101a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101a66:	1d3b      	adds	r3, r7, #4
 8101a68:	4619      	mov	r1, r3
 8101a6a:	4807      	ldr	r0, [pc, #28]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101a6c:	f003 f936 	bl	8104cdc <HAL_TIMEx_ConfigBreakDeadTime>
 8101a70:	4603      	mov	r3, r0
 8101a72:	2b00      	cmp	r3, #0
 8101a74:	d001      	beq.n	8101a7a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8101a76:	f7ff fe4b 	bl	8101710 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8101a7a:	4803      	ldr	r0, [pc, #12]	; (8101a88 <MX_TIM1_Init+0x198>)
 8101a7c:	f000 f82a 	bl	8101ad4 <HAL_TIM_MspPostInit>

}
 8101a80:	bf00      	nop
 8101a82:	3768      	adds	r7, #104	; 0x68
 8101a84:	46bd      	mov	sp, r7
 8101a86:	bd80      	pop	{r7, pc}
 8101a88:	10004be0 	.word	0x10004be0
 8101a8c:	40010000 	.word	0x40010000

08101a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8101a90:	b480      	push	{r7}
 8101a92:	b085      	sub	sp, #20
 8101a94:	af00      	add	r7, sp, #0
 8101a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	681b      	ldr	r3, [r3, #0]
 8101a9c:	4a0b      	ldr	r2, [pc, #44]	; (8101acc <HAL_TIM_Base_MspInit+0x3c>)
 8101a9e:	4293      	cmp	r3, r2
 8101aa0:	d10e      	bne.n	8101ac0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101aa2:	4b0b      	ldr	r3, [pc, #44]	; (8101ad0 <HAL_TIM_Base_MspInit+0x40>)
 8101aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101aa8:	4a09      	ldr	r2, [pc, #36]	; (8101ad0 <HAL_TIM_Base_MspInit+0x40>)
 8101aaa:	f043 0301 	orr.w	r3, r3, #1
 8101aae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101ab2:	4b07      	ldr	r3, [pc, #28]	; (8101ad0 <HAL_TIM_Base_MspInit+0x40>)
 8101ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101ab8:	f003 0301 	and.w	r3, r3, #1
 8101abc:	60fb      	str	r3, [r7, #12]
 8101abe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8101ac0:	bf00      	nop
 8101ac2:	3714      	adds	r7, #20
 8101ac4:	46bd      	mov	sp, r7
 8101ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aca:	4770      	bx	lr
 8101acc:	40010000 	.word	0x40010000
 8101ad0:	58024400 	.word	0x58024400

08101ad4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8101ad4:	b580      	push	{r7, lr}
 8101ad6:	b08a      	sub	sp, #40	; 0x28
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101adc:	f107 0314 	add.w	r3, r7, #20
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	601a      	str	r2, [r3, #0]
 8101ae4:	605a      	str	r2, [r3, #4]
 8101ae6:	609a      	str	r2, [r3, #8]
 8101ae8:	60da      	str	r2, [r3, #12]
 8101aea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	4a23      	ldr	r2, [pc, #140]	; (8101b80 <HAL_TIM_MspPostInit+0xac>)
 8101af2:	4293      	cmp	r3, r2
 8101af4:	d13f      	bne.n	8101b76 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101af6:	4b23      	ldr	r3, [pc, #140]	; (8101b84 <HAL_TIM_MspPostInit+0xb0>)
 8101af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101afc:	4a21      	ldr	r2, [pc, #132]	; (8101b84 <HAL_TIM_MspPostInit+0xb0>)
 8101afe:	f043 0310 	orr.w	r3, r3, #16
 8101b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b06:	4b1f      	ldr	r3, [pc, #124]	; (8101b84 <HAL_TIM_MspPostInit+0xb0>)
 8101b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b0c:	f003 0310 	and.w	r3, r3, #16
 8101b10:	613b      	str	r3, [r7, #16]
 8101b12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101b14:	4b1b      	ldr	r3, [pc, #108]	; (8101b84 <HAL_TIM_MspPostInit+0xb0>)
 8101b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b1a:	4a1a      	ldr	r2, [pc, #104]	; (8101b84 <HAL_TIM_MspPostInit+0xb0>)
 8101b1c:	f043 0301 	orr.w	r3, r3, #1
 8101b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101b24:	4b17      	ldr	r3, [pc, #92]	; (8101b84 <HAL_TIM_MspPostInit+0xb0>)
 8101b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b2a:	f003 0301 	and.w	r3, r3, #1
 8101b2e:	60fb      	str	r3, [r7, #12]
 8101b30:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8101b32:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8101b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b38:	2302      	movs	r3, #2
 8101b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b3c:	2300      	movs	r3, #0
 8101b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b40:	2300      	movs	r3, #0
 8101b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101b44:	2301      	movs	r3, #1
 8101b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101b48:	f107 0314 	add.w	r3, r7, #20
 8101b4c:	4619      	mov	r1, r3
 8101b4e:	480e      	ldr	r0, [pc, #56]	; (8101b88 <HAL_TIM_MspPostInit+0xb4>)
 8101b50:	f000 fa72 	bl	8102038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8101b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b5a:	2302      	movs	r3, #2
 8101b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b5e:	2300      	movs	r3, #0
 8101b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b62:	2300      	movs	r3, #0
 8101b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101b66:	2301      	movs	r3, #1
 8101b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101b6a:	f107 0314 	add.w	r3, r7, #20
 8101b6e:	4619      	mov	r1, r3
 8101b70:	4806      	ldr	r0, [pc, #24]	; (8101b8c <HAL_TIM_MspPostInit+0xb8>)
 8101b72:	f000 fa61 	bl	8102038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101b76:	bf00      	nop
 8101b78:	3728      	adds	r7, #40	; 0x28
 8101b7a:	46bd      	mov	sp, r7
 8101b7c:	bd80      	pop	{r7, pc}
 8101b7e:	bf00      	nop
 8101b80:	40010000 	.word	0x40010000
 8101b84:	58024400 	.word	0x58024400
 8101b88:	58021000 	.word	0x58021000
 8101b8c:	58020000 	.word	0x58020000

08101b90 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101b90:	b580      	push	{r7, lr}
 8101b92:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101b94:	4b22      	ldr	r3, [pc, #136]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101b96:	4a23      	ldr	r2, [pc, #140]	; (8101c24 <MX_USART3_UART_Init+0x94>)
 8101b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101b9a:	4b21      	ldr	r3, [pc, #132]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101ba2:	4b1f      	ldr	r3, [pc, #124]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101ba4:	2200      	movs	r2, #0
 8101ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101ba8:	4b1d      	ldr	r3, [pc, #116]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101baa:	2200      	movs	r2, #0
 8101bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101bae:	4b1c      	ldr	r3, [pc, #112]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bb0:	2200      	movs	r2, #0
 8101bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101bb4:	4b1a      	ldr	r3, [pc, #104]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bb6:	220c      	movs	r2, #12
 8101bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101bba:	4b19      	ldr	r3, [pc, #100]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bbc:	2200      	movs	r2, #0
 8101bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101bc0:	4b17      	ldr	r3, [pc, #92]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bc2:	2200      	movs	r2, #0
 8101bc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101bc6:	4b16      	ldr	r3, [pc, #88]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bc8:	2200      	movs	r2, #0
 8101bca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101bcc:	4b14      	ldr	r3, [pc, #80]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bce:	2200      	movs	r2, #0
 8101bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101bd2:	4b13      	ldr	r3, [pc, #76]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bd4:	2200      	movs	r2, #0
 8101bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101bd8:	4811      	ldr	r0, [pc, #68]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bda:	f003 f91b 	bl	8104e14 <HAL_UART_Init>
 8101bde:	4603      	mov	r3, r0
 8101be0:	2b00      	cmp	r3, #0
 8101be2:	d001      	beq.n	8101be8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101be4:	f7ff fd94 	bl	8101710 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101be8:	2100      	movs	r1, #0
 8101bea:	480d      	ldr	r0, [pc, #52]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bec:	f004 f94b 	bl	8105e86 <HAL_UARTEx_SetTxFifoThreshold>
 8101bf0:	4603      	mov	r3, r0
 8101bf2:	2b00      	cmp	r3, #0
 8101bf4:	d001      	beq.n	8101bfa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101bf6:	f7ff fd8b 	bl	8101710 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101bfa:	2100      	movs	r1, #0
 8101bfc:	4808      	ldr	r0, [pc, #32]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101bfe:	f004 f980 	bl	8105f02 <HAL_UARTEx_SetRxFifoThreshold>
 8101c02:	4603      	mov	r3, r0
 8101c04:	2b00      	cmp	r3, #0
 8101c06:	d001      	beq.n	8101c0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101c08:	f7ff fd82 	bl	8101710 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101c0c:	4804      	ldr	r0, [pc, #16]	; (8101c20 <MX_USART3_UART_Init+0x90>)
 8101c0e:	f004 f901 	bl	8105e14 <HAL_UARTEx_DisableFifoMode>
 8101c12:	4603      	mov	r3, r0
 8101c14:	2b00      	cmp	r3, #0
 8101c16:	d001      	beq.n	8101c1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101c18:	f7ff fd7a 	bl	8101710 <Error_Handler>
  }

}
 8101c1c:	bf00      	nop
 8101c1e:	bd80      	pop	{r7, pc}
 8101c20:	10004c2c 	.word	0x10004c2c
 8101c24:	40004800 	.word	0x40004800

08101c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101c28:	b580      	push	{r7, lr}
 8101c2a:	b08a      	sub	sp, #40	; 0x28
 8101c2c:	af00      	add	r7, sp, #0
 8101c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c30:	f107 0314 	add.w	r3, r7, #20
 8101c34:	2200      	movs	r2, #0
 8101c36:	601a      	str	r2, [r3, #0]
 8101c38:	605a      	str	r2, [r3, #4]
 8101c3a:	609a      	str	r2, [r3, #8]
 8101c3c:	60da      	str	r2, [r3, #12]
 8101c3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	4a1a      	ldr	r2, [pc, #104]	; (8101cb0 <HAL_UART_MspInit+0x88>)
 8101c46:	4293      	cmp	r3, r2
 8101c48:	d12e      	bne.n	8101ca8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101c4a:	4b1a      	ldr	r3, [pc, #104]	; (8101cb4 <HAL_UART_MspInit+0x8c>)
 8101c4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c50:	4a18      	ldr	r2, [pc, #96]	; (8101cb4 <HAL_UART_MspInit+0x8c>)
 8101c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101c56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101c5a:	4b16      	ldr	r3, [pc, #88]	; (8101cb4 <HAL_UART_MspInit+0x8c>)
 8101c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101c64:	613b      	str	r3, [r7, #16]
 8101c66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101c68:	4b12      	ldr	r3, [pc, #72]	; (8101cb4 <HAL_UART_MspInit+0x8c>)
 8101c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c6e:	4a11      	ldr	r2, [pc, #68]	; (8101cb4 <HAL_UART_MspInit+0x8c>)
 8101c70:	f043 0308 	orr.w	r3, r3, #8
 8101c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c78:	4b0e      	ldr	r3, [pc, #56]	; (8101cb4 <HAL_UART_MspInit+0x8c>)
 8101c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c7e:	f003 0308 	and.w	r3, r3, #8
 8101c82:	60fb      	str	r3, [r7, #12]
 8101c84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101c86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c8c:	2302      	movs	r3, #2
 8101c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c90:	2300      	movs	r3, #0
 8101c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c94:	2300      	movs	r3, #0
 8101c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101c98:	2307      	movs	r3, #7
 8101c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101c9c:	f107 0314 	add.w	r3, r7, #20
 8101ca0:	4619      	mov	r1, r3
 8101ca2:	4805      	ldr	r0, [pc, #20]	; (8101cb8 <HAL_UART_MspInit+0x90>)
 8101ca4:	f000 f9c8 	bl	8102038 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101ca8:	bf00      	nop
 8101caa:	3728      	adds	r7, #40	; 0x28
 8101cac:	46bd      	mov	sp, r7
 8101cae:	bd80      	pop	{r7, pc}
 8101cb0:	40004800 	.word	0x40004800
 8101cb4:	58024400 	.word	0x58024400
 8101cb8:	58020c00 	.word	0x58020c00

08101cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101cc2:	e003      	b.n	8101ccc <LoopCopyDataInit>

08101cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101cc4:	4b0c      	ldr	r3, [pc, #48]	; (8101cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8101cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101cca:	3104      	adds	r1, #4

08101ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101ccc:	480b      	ldr	r0, [pc, #44]	; (8101cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8101cce:	4b0c      	ldr	r3, [pc, #48]	; (8101d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8101cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101cd4:	d3f6      	bcc.n	8101cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8101cd6:	4a0b      	ldr	r2, [pc, #44]	; (8101d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8101cd8:	e002      	b.n	8101ce0 <LoopFillZerobss>

08101cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101cdc:	f842 3b04 	str.w	r3, [r2], #4

08101ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101ce0:	4b09      	ldr	r3, [pc, #36]	; (8101d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8101ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101ce4:	d3f9      	bcc.n	8101cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8101ce6:	f7ff f9b7 	bl	8101058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8101cea:	f006 feff 	bl	8108aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101cee:	f7ff fc9b 	bl	8101628 <main>
  bx  lr    
 8101cf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101cf4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101cf8:	0810aee0 	.word	0x0810aee0
  ldr  r0, =_sdata
 8101cfc:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101d00:	100001e0 	.word	0x100001e0
  ldr  r2, =_sbss
 8101d04:	100001e0 	.word	0x100001e0
  ldr  r3, = _ebss
 8101d08:	10004d00 	.word	0x10004d00

08101d0c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101d0c:	e7fe      	b.n	8101d0c <ADC3_IRQHandler>
	...

08101d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101d10:	b580      	push	{r7, lr}
 8101d12:	b082      	sub	sp, #8
 8101d14:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101d16:	4b28      	ldr	r3, [pc, #160]	; (8101db8 <HAL_Init+0xa8>)
 8101d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d1c:	4a26      	ldr	r2, [pc, #152]	; (8101db8 <HAL_Init+0xa8>)
 8101d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101d22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101d26:	4b24      	ldr	r3, [pc, #144]	; (8101db8 <HAL_Init+0xa8>)
 8101d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101d30:	603b      	str	r3, [r7, #0]
 8101d32:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101d34:	4b21      	ldr	r3, [pc, #132]	; (8101dbc <HAL_Init+0xac>)
 8101d36:	681b      	ldr	r3, [r3, #0]
 8101d38:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101d40:	4a1e      	ldr	r2, [pc, #120]	; (8101dbc <HAL_Init+0xac>)
 8101d42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101d46:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d48:	4b1c      	ldr	r3, [pc, #112]	; (8101dbc <HAL_Init+0xac>)
 8101d4a:	681b      	ldr	r3, [r3, #0]
 8101d4c:	4a1b      	ldr	r2, [pc, #108]	; (8101dbc <HAL_Init+0xac>)
 8101d4e:	f043 0301 	orr.w	r3, r3, #1
 8101d52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d54:	2003      	movs	r0, #3
 8101d56:	f000 f928 	bl	8101faa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d5a:	f001 f963 	bl	8103024 <HAL_RCC_GetSysClockFreq>
 8101d5e:	4601      	mov	r1, r0
 8101d60:	4b15      	ldr	r3, [pc, #84]	; (8101db8 <HAL_Init+0xa8>)
 8101d62:	699b      	ldr	r3, [r3, #24]
 8101d64:	0a1b      	lsrs	r3, r3, #8
 8101d66:	f003 030f 	and.w	r3, r3, #15
 8101d6a:	4a15      	ldr	r2, [pc, #84]	; (8101dc0 <HAL_Init+0xb0>)
 8101d6c:	5cd3      	ldrb	r3, [r2, r3]
 8101d6e:	f003 031f 	and.w	r3, r3, #31
 8101d72:	fa21 f303 	lsr.w	r3, r1, r3
 8101d76:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101d78:	4b0f      	ldr	r3, [pc, #60]	; (8101db8 <HAL_Init+0xa8>)
 8101d7a:	699b      	ldr	r3, [r3, #24]
 8101d7c:	f003 030f 	and.w	r3, r3, #15
 8101d80:	4a0f      	ldr	r2, [pc, #60]	; (8101dc0 <HAL_Init+0xb0>)
 8101d82:	5cd3      	ldrb	r3, [r2, r3]
 8101d84:	f003 031f 	and.w	r3, r3, #31
 8101d88:	687a      	ldr	r2, [r7, #4]
 8101d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8101d8e:	4a0d      	ldr	r2, [pc, #52]	; (8101dc4 <HAL_Init+0xb4>)
 8101d90:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101d92:	4b0c      	ldr	r3, [pc, #48]	; (8101dc4 <HAL_Init+0xb4>)
 8101d94:	681b      	ldr	r3, [r3, #0]
 8101d96:	4a0c      	ldr	r2, [pc, #48]	; (8101dc8 <HAL_Init+0xb8>)
 8101d98:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101d9a:	2000      	movs	r0, #0
 8101d9c:	f7ff fcee 	bl	810177c <HAL_InitTick>
 8101da0:	4603      	mov	r3, r0
 8101da2:	2b00      	cmp	r3, #0
 8101da4:	d001      	beq.n	8101daa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101da6:	2301      	movs	r3, #1
 8101da8:	e002      	b.n	8101db0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101daa:	f7ff fcb9 	bl	8101720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101dae:	2300      	movs	r3, #0
}
 8101db0:	4618      	mov	r0, r3
 8101db2:	3708      	adds	r7, #8
 8101db4:	46bd      	mov	sp, r7
 8101db6:	bd80      	pop	{r7, pc}
 8101db8:	58024400 	.word	0x58024400
 8101dbc:	40024400 	.word	0x40024400
 8101dc0:	0810ac24 	.word	0x0810ac24
 8101dc4:	10000004 	.word	0x10000004
 8101dc8:	10000000 	.word	0x10000000

08101dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101dcc:	b480      	push	{r7}
 8101dce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101dd0:	4b06      	ldr	r3, [pc, #24]	; (8101dec <HAL_IncTick+0x20>)
 8101dd2:	781b      	ldrb	r3, [r3, #0]
 8101dd4:	461a      	mov	r2, r3
 8101dd6:	4b06      	ldr	r3, [pc, #24]	; (8101df0 <HAL_IncTick+0x24>)
 8101dd8:	681b      	ldr	r3, [r3, #0]
 8101dda:	4413      	add	r3, r2
 8101ddc:	4a04      	ldr	r2, [pc, #16]	; (8101df0 <HAL_IncTick+0x24>)
 8101dde:	6013      	str	r3, [r2, #0]
}
 8101de0:	bf00      	nop
 8101de2:	46bd      	mov	sp, r7
 8101de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de8:	4770      	bx	lr
 8101dea:	bf00      	nop
 8101dec:	10000008 	.word	0x10000008
 8101df0:	10004cb8 	.word	0x10004cb8

08101df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101df4:	b480      	push	{r7}
 8101df6:	af00      	add	r7, sp, #0
  return uwTick;
 8101df8:	4b03      	ldr	r3, [pc, #12]	; (8101e08 <HAL_GetTick+0x14>)
 8101dfa:	681b      	ldr	r3, [r3, #0]
}
 8101dfc:	4618      	mov	r0, r3
 8101dfe:	46bd      	mov	sp, r7
 8101e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e04:	4770      	bx	lr
 8101e06:	bf00      	nop
 8101e08:	10004cb8 	.word	0x10004cb8

08101e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101e0c:	b580      	push	{r7, lr}
 8101e0e:	b084      	sub	sp, #16
 8101e10:	af00      	add	r7, sp, #0
 8101e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101e14:	f7ff ffee 	bl	8101df4 <HAL_GetTick>
 8101e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101e1a:	687b      	ldr	r3, [r7, #4]
 8101e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101e1e:	68fb      	ldr	r3, [r7, #12]
 8101e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e24:	d005      	beq.n	8101e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101e26:	4b09      	ldr	r3, [pc, #36]	; (8101e4c <HAL_Delay+0x40>)
 8101e28:	781b      	ldrb	r3, [r3, #0]
 8101e2a:	461a      	mov	r2, r3
 8101e2c:	68fb      	ldr	r3, [r7, #12]
 8101e2e:	4413      	add	r3, r2
 8101e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101e32:	bf00      	nop
 8101e34:	f7ff ffde 	bl	8101df4 <HAL_GetTick>
 8101e38:	4602      	mov	r2, r0
 8101e3a:	68bb      	ldr	r3, [r7, #8]
 8101e3c:	1ad3      	subs	r3, r2, r3
 8101e3e:	68fa      	ldr	r2, [r7, #12]
 8101e40:	429a      	cmp	r2, r3
 8101e42:	d8f7      	bhi.n	8101e34 <HAL_Delay+0x28>
  {
  }
}
 8101e44:	bf00      	nop
 8101e46:	3710      	adds	r7, #16
 8101e48:	46bd      	mov	sp, r7
 8101e4a:	bd80      	pop	{r7, pc}
 8101e4c:	10000008 	.word	0x10000008

08101e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e50:	b480      	push	{r7}
 8101e52:	b085      	sub	sp, #20
 8101e54:	af00      	add	r7, sp, #0
 8101e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	f003 0307 	and.w	r3, r3, #7
 8101e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101e60:	4b0c      	ldr	r3, [pc, #48]	; (8101e94 <__NVIC_SetPriorityGrouping+0x44>)
 8101e62:	68db      	ldr	r3, [r3, #12]
 8101e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101e66:	68ba      	ldr	r2, [r7, #8]
 8101e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101e6c:	4013      	ands	r3, r2
 8101e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101e70:	68fb      	ldr	r3, [r7, #12]
 8101e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101e74:	68bb      	ldr	r3, [r7, #8]
 8101e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101e82:	4a04      	ldr	r2, [pc, #16]	; (8101e94 <__NVIC_SetPriorityGrouping+0x44>)
 8101e84:	68bb      	ldr	r3, [r7, #8]
 8101e86:	60d3      	str	r3, [r2, #12]
}
 8101e88:	bf00      	nop
 8101e8a:	3714      	adds	r7, #20
 8101e8c:	46bd      	mov	sp, r7
 8101e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e92:	4770      	bx	lr
 8101e94:	e000ed00 	.word	0xe000ed00

08101e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101e98:	b480      	push	{r7}
 8101e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101e9c:	4b04      	ldr	r3, [pc, #16]	; (8101eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8101e9e:	68db      	ldr	r3, [r3, #12]
 8101ea0:	0a1b      	lsrs	r3, r3, #8
 8101ea2:	f003 0307 	and.w	r3, r3, #7
}
 8101ea6:	4618      	mov	r0, r3
 8101ea8:	46bd      	mov	sp, r7
 8101eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eae:	4770      	bx	lr
 8101eb0:	e000ed00 	.word	0xe000ed00

08101eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101eb4:	b480      	push	{r7}
 8101eb6:	b083      	sub	sp, #12
 8101eb8:	af00      	add	r7, sp, #0
 8101eba:	4603      	mov	r3, r0
 8101ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ec2:	2b00      	cmp	r3, #0
 8101ec4:	db0b      	blt.n	8101ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101ec6:	88fb      	ldrh	r3, [r7, #6]
 8101ec8:	f003 021f 	and.w	r2, r3, #31
 8101ecc:	4907      	ldr	r1, [pc, #28]	; (8101eec <__NVIC_EnableIRQ+0x38>)
 8101ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ed2:	095b      	lsrs	r3, r3, #5
 8101ed4:	2001      	movs	r0, #1
 8101ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8101eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8101ede:	bf00      	nop
 8101ee0:	370c      	adds	r7, #12
 8101ee2:	46bd      	mov	sp, r7
 8101ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee8:	4770      	bx	lr
 8101eea:	bf00      	nop
 8101eec:	e000e100 	.word	0xe000e100

08101ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101ef0:	b480      	push	{r7}
 8101ef2:	b083      	sub	sp, #12
 8101ef4:	af00      	add	r7, sp, #0
 8101ef6:	4603      	mov	r3, r0
 8101ef8:	6039      	str	r1, [r7, #0]
 8101efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	db0a      	blt.n	8101f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f04:	683b      	ldr	r3, [r7, #0]
 8101f06:	b2da      	uxtb	r2, r3
 8101f08:	490c      	ldr	r1, [pc, #48]	; (8101f3c <__NVIC_SetPriority+0x4c>)
 8101f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f0e:	0112      	lsls	r2, r2, #4
 8101f10:	b2d2      	uxtb	r2, r2
 8101f12:	440b      	add	r3, r1
 8101f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101f18:	e00a      	b.n	8101f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f1a:	683b      	ldr	r3, [r7, #0]
 8101f1c:	b2da      	uxtb	r2, r3
 8101f1e:	4908      	ldr	r1, [pc, #32]	; (8101f40 <__NVIC_SetPriority+0x50>)
 8101f20:	88fb      	ldrh	r3, [r7, #6]
 8101f22:	f003 030f 	and.w	r3, r3, #15
 8101f26:	3b04      	subs	r3, #4
 8101f28:	0112      	lsls	r2, r2, #4
 8101f2a:	b2d2      	uxtb	r2, r2
 8101f2c:	440b      	add	r3, r1
 8101f2e:	761a      	strb	r2, [r3, #24]
}
 8101f30:	bf00      	nop
 8101f32:	370c      	adds	r7, #12
 8101f34:	46bd      	mov	sp, r7
 8101f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f3a:	4770      	bx	lr
 8101f3c:	e000e100 	.word	0xe000e100
 8101f40:	e000ed00 	.word	0xe000ed00

08101f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f44:	b480      	push	{r7}
 8101f46:	b089      	sub	sp, #36	; 0x24
 8101f48:	af00      	add	r7, sp, #0
 8101f4a:	60f8      	str	r0, [r7, #12]
 8101f4c:	60b9      	str	r1, [r7, #8]
 8101f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101f50:	68fb      	ldr	r3, [r7, #12]
 8101f52:	f003 0307 	and.w	r3, r3, #7
 8101f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101f58:	69fb      	ldr	r3, [r7, #28]
 8101f5a:	f1c3 0307 	rsb	r3, r3, #7
 8101f5e:	2b04      	cmp	r3, #4
 8101f60:	bf28      	it	cs
 8101f62:	2304      	movcs	r3, #4
 8101f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101f66:	69fb      	ldr	r3, [r7, #28]
 8101f68:	3304      	adds	r3, #4
 8101f6a:	2b06      	cmp	r3, #6
 8101f6c:	d902      	bls.n	8101f74 <NVIC_EncodePriority+0x30>
 8101f6e:	69fb      	ldr	r3, [r7, #28]
 8101f70:	3b03      	subs	r3, #3
 8101f72:	e000      	b.n	8101f76 <NVIC_EncodePriority+0x32>
 8101f74:	2300      	movs	r3, #0
 8101f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f78:	f04f 32ff 	mov.w	r2, #4294967295
 8101f7c:	69bb      	ldr	r3, [r7, #24]
 8101f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8101f82:	43da      	mvns	r2, r3
 8101f84:	68bb      	ldr	r3, [r7, #8]
 8101f86:	401a      	ands	r2, r3
 8101f88:	697b      	ldr	r3, [r7, #20]
 8101f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8101f90:	697b      	ldr	r3, [r7, #20]
 8101f92:	fa01 f303 	lsl.w	r3, r1, r3
 8101f96:	43d9      	mvns	r1, r3
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f9c:	4313      	orrs	r3, r2
         );
}
 8101f9e:	4618      	mov	r0, r3
 8101fa0:	3724      	adds	r7, #36	; 0x24
 8101fa2:	46bd      	mov	sp, r7
 8101fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa8:	4770      	bx	lr

08101faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101faa:	b580      	push	{r7, lr}
 8101fac:	b082      	sub	sp, #8
 8101fae:	af00      	add	r7, sp, #0
 8101fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101fb2:	6878      	ldr	r0, [r7, #4]
 8101fb4:	f7ff ff4c 	bl	8101e50 <__NVIC_SetPriorityGrouping>
}
 8101fb8:	bf00      	nop
 8101fba:	3708      	adds	r7, #8
 8101fbc:	46bd      	mov	sp, r7
 8101fbe:	bd80      	pop	{r7, pc}

08101fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101fc0:	b580      	push	{r7, lr}
 8101fc2:	b086      	sub	sp, #24
 8101fc4:	af00      	add	r7, sp, #0
 8101fc6:	4603      	mov	r3, r0
 8101fc8:	60b9      	str	r1, [r7, #8]
 8101fca:	607a      	str	r2, [r7, #4]
 8101fcc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101fce:	f7ff ff63 	bl	8101e98 <__NVIC_GetPriorityGrouping>
 8101fd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101fd4:	687a      	ldr	r2, [r7, #4]
 8101fd6:	68b9      	ldr	r1, [r7, #8]
 8101fd8:	6978      	ldr	r0, [r7, #20]
 8101fda:	f7ff ffb3 	bl	8101f44 <NVIC_EncodePriority>
 8101fde:	4602      	mov	r2, r0
 8101fe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101fe4:	4611      	mov	r1, r2
 8101fe6:	4618      	mov	r0, r3
 8101fe8:	f7ff ff82 	bl	8101ef0 <__NVIC_SetPriority>
}
 8101fec:	bf00      	nop
 8101fee:	3718      	adds	r7, #24
 8101ff0:	46bd      	mov	sp, r7
 8101ff2:	bd80      	pop	{r7, pc}

08101ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101ff4:	b580      	push	{r7, lr}
 8101ff6:	b082      	sub	sp, #8
 8101ff8:	af00      	add	r7, sp, #0
 8101ffa:	4603      	mov	r3, r0
 8101ffc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102002:	4618      	mov	r0, r3
 8102004:	f7ff ff56 	bl	8101eb4 <__NVIC_EnableIRQ>
}
 8102008:	bf00      	nop
 810200a:	3708      	adds	r7, #8
 810200c:	46bd      	mov	sp, r7
 810200e:	bd80      	pop	{r7, pc}

08102010 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102010:	b480      	push	{r7}
 8102012:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102014:	4b07      	ldr	r3, [pc, #28]	; (8102034 <HAL_GetCurrentCPUID+0x24>)
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	091b      	lsrs	r3, r3, #4
 810201a:	f003 030f 	and.w	r3, r3, #15
 810201e:	2b07      	cmp	r3, #7
 8102020:	d101      	bne.n	8102026 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102022:	2303      	movs	r3, #3
 8102024:	e000      	b.n	8102028 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102026:	2301      	movs	r3, #1
  }
}
 8102028:	4618      	mov	r0, r3
 810202a:	46bd      	mov	sp, r7
 810202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102030:	4770      	bx	lr
 8102032:	bf00      	nop
 8102034:	e000ed00 	.word	0xe000ed00

08102038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102038:	b480      	push	{r7}
 810203a:	b089      	sub	sp, #36	; 0x24
 810203c:	af00      	add	r7, sp, #0
 810203e:	6078      	str	r0, [r7, #4]
 8102040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102042:	2300      	movs	r3, #0
 8102044:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102046:	4b89      	ldr	r3, [pc, #548]	; (810226c <HAL_GPIO_Init+0x234>)
 8102048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810204a:	e194      	b.n	8102376 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810204c:	683b      	ldr	r3, [r7, #0]
 810204e:	681a      	ldr	r2, [r3, #0]
 8102050:	2101      	movs	r1, #1
 8102052:	69fb      	ldr	r3, [r7, #28]
 8102054:	fa01 f303 	lsl.w	r3, r1, r3
 8102058:	4013      	ands	r3, r2
 810205a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810205c:	693b      	ldr	r3, [r7, #16]
 810205e:	2b00      	cmp	r3, #0
 8102060:	f000 8186 	beq.w	8102370 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102064:	683b      	ldr	r3, [r7, #0]
 8102066:	685b      	ldr	r3, [r3, #4]
 8102068:	2b01      	cmp	r3, #1
 810206a:	d00b      	beq.n	8102084 <HAL_GPIO_Init+0x4c>
 810206c:	683b      	ldr	r3, [r7, #0]
 810206e:	685b      	ldr	r3, [r3, #4]
 8102070:	2b02      	cmp	r3, #2
 8102072:	d007      	beq.n	8102084 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102074:	683b      	ldr	r3, [r7, #0]
 8102076:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102078:	2b11      	cmp	r3, #17
 810207a:	d003      	beq.n	8102084 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810207c:	683b      	ldr	r3, [r7, #0]
 810207e:	685b      	ldr	r3, [r3, #4]
 8102080:	2b12      	cmp	r3, #18
 8102082:	d130      	bne.n	81020e6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	689b      	ldr	r3, [r3, #8]
 8102088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810208a:	69fb      	ldr	r3, [r7, #28]
 810208c:	005b      	lsls	r3, r3, #1
 810208e:	2203      	movs	r2, #3
 8102090:	fa02 f303 	lsl.w	r3, r2, r3
 8102094:	43db      	mvns	r3, r3
 8102096:	69ba      	ldr	r2, [r7, #24]
 8102098:	4013      	ands	r3, r2
 810209a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810209c:	683b      	ldr	r3, [r7, #0]
 810209e:	68da      	ldr	r2, [r3, #12]
 81020a0:	69fb      	ldr	r3, [r7, #28]
 81020a2:	005b      	lsls	r3, r3, #1
 81020a4:	fa02 f303 	lsl.w	r3, r2, r3
 81020a8:	69ba      	ldr	r2, [r7, #24]
 81020aa:	4313      	orrs	r3, r2
 81020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81020ae:	687b      	ldr	r3, [r7, #4]
 81020b0:	69ba      	ldr	r2, [r7, #24]
 81020b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	685b      	ldr	r3, [r3, #4]
 81020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81020ba:	2201      	movs	r2, #1
 81020bc:	69fb      	ldr	r3, [r7, #28]
 81020be:	fa02 f303 	lsl.w	r3, r2, r3
 81020c2:	43db      	mvns	r3, r3
 81020c4:	69ba      	ldr	r2, [r7, #24]
 81020c6:	4013      	ands	r3, r2
 81020c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81020ca:	683b      	ldr	r3, [r7, #0]
 81020cc:	685b      	ldr	r3, [r3, #4]
 81020ce:	091b      	lsrs	r3, r3, #4
 81020d0:	f003 0201 	and.w	r2, r3, #1
 81020d4:	69fb      	ldr	r3, [r7, #28]
 81020d6:	fa02 f303 	lsl.w	r3, r2, r3
 81020da:	69ba      	ldr	r2, [r7, #24]
 81020dc:	4313      	orrs	r3, r2
 81020de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81020e0:	687b      	ldr	r3, [r7, #4]
 81020e2:	69ba      	ldr	r2, [r7, #24]
 81020e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81020e6:	687b      	ldr	r3, [r7, #4]
 81020e8:	68db      	ldr	r3, [r3, #12]
 81020ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81020ec:	69fb      	ldr	r3, [r7, #28]
 81020ee:	005b      	lsls	r3, r3, #1
 81020f0:	2203      	movs	r2, #3
 81020f2:	fa02 f303 	lsl.w	r3, r2, r3
 81020f6:	43db      	mvns	r3, r3
 81020f8:	69ba      	ldr	r2, [r7, #24]
 81020fa:	4013      	ands	r3, r2
 81020fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81020fe:	683b      	ldr	r3, [r7, #0]
 8102100:	689a      	ldr	r2, [r3, #8]
 8102102:	69fb      	ldr	r3, [r7, #28]
 8102104:	005b      	lsls	r3, r3, #1
 8102106:	fa02 f303 	lsl.w	r3, r2, r3
 810210a:	69ba      	ldr	r2, [r7, #24]
 810210c:	4313      	orrs	r3, r2
 810210e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102110:	687b      	ldr	r3, [r7, #4]
 8102112:	69ba      	ldr	r2, [r7, #24]
 8102114:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102116:	683b      	ldr	r3, [r7, #0]
 8102118:	685b      	ldr	r3, [r3, #4]
 810211a:	2b02      	cmp	r3, #2
 810211c:	d003      	beq.n	8102126 <HAL_GPIO_Init+0xee>
 810211e:	683b      	ldr	r3, [r7, #0]
 8102120:	685b      	ldr	r3, [r3, #4]
 8102122:	2b12      	cmp	r3, #18
 8102124:	d123      	bne.n	810216e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102126:	69fb      	ldr	r3, [r7, #28]
 8102128:	08da      	lsrs	r2, r3, #3
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	3208      	adds	r2, #8
 810212e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102134:	69fb      	ldr	r3, [r7, #28]
 8102136:	f003 0307 	and.w	r3, r3, #7
 810213a:	009b      	lsls	r3, r3, #2
 810213c:	220f      	movs	r2, #15
 810213e:	fa02 f303 	lsl.w	r3, r2, r3
 8102142:	43db      	mvns	r3, r3
 8102144:	69ba      	ldr	r2, [r7, #24]
 8102146:	4013      	ands	r3, r2
 8102148:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810214a:	683b      	ldr	r3, [r7, #0]
 810214c:	691a      	ldr	r2, [r3, #16]
 810214e:	69fb      	ldr	r3, [r7, #28]
 8102150:	f003 0307 	and.w	r3, r3, #7
 8102154:	009b      	lsls	r3, r3, #2
 8102156:	fa02 f303 	lsl.w	r3, r2, r3
 810215a:	69ba      	ldr	r2, [r7, #24]
 810215c:	4313      	orrs	r3, r2
 810215e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102160:	69fb      	ldr	r3, [r7, #28]
 8102162:	08da      	lsrs	r2, r3, #3
 8102164:	687b      	ldr	r3, [r7, #4]
 8102166:	3208      	adds	r2, #8
 8102168:	69b9      	ldr	r1, [r7, #24]
 810216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	681b      	ldr	r3, [r3, #0]
 8102172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102174:	69fb      	ldr	r3, [r7, #28]
 8102176:	005b      	lsls	r3, r3, #1
 8102178:	2203      	movs	r2, #3
 810217a:	fa02 f303 	lsl.w	r3, r2, r3
 810217e:	43db      	mvns	r3, r3
 8102180:	69ba      	ldr	r2, [r7, #24]
 8102182:	4013      	ands	r3, r2
 8102184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102186:	683b      	ldr	r3, [r7, #0]
 8102188:	685b      	ldr	r3, [r3, #4]
 810218a:	f003 0203 	and.w	r2, r3, #3
 810218e:	69fb      	ldr	r3, [r7, #28]
 8102190:	005b      	lsls	r3, r3, #1
 8102192:	fa02 f303 	lsl.w	r3, r2, r3
 8102196:	69ba      	ldr	r2, [r7, #24]
 8102198:	4313      	orrs	r3, r2
 810219a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810219c:	687b      	ldr	r3, [r7, #4]
 810219e:	69ba      	ldr	r2, [r7, #24]
 81021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81021a2:	683b      	ldr	r3, [r7, #0]
 81021a4:	685b      	ldr	r3, [r3, #4]
 81021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81021aa:	2b00      	cmp	r3, #0
 81021ac:	f000 80e0 	beq.w	8102370 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81021b0:	4b2f      	ldr	r3, [pc, #188]	; (8102270 <HAL_GPIO_Init+0x238>)
 81021b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81021b6:	4a2e      	ldr	r2, [pc, #184]	; (8102270 <HAL_GPIO_Init+0x238>)
 81021b8:	f043 0302 	orr.w	r3, r3, #2
 81021bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81021c0:	4b2b      	ldr	r3, [pc, #172]	; (8102270 <HAL_GPIO_Init+0x238>)
 81021c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81021c6:	f003 0302 	and.w	r3, r3, #2
 81021ca:	60fb      	str	r3, [r7, #12]
 81021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81021ce:	4a29      	ldr	r2, [pc, #164]	; (8102274 <HAL_GPIO_Init+0x23c>)
 81021d0:	69fb      	ldr	r3, [r7, #28]
 81021d2:	089b      	lsrs	r3, r3, #2
 81021d4:	3302      	adds	r3, #2
 81021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81021dc:	69fb      	ldr	r3, [r7, #28]
 81021de:	f003 0303 	and.w	r3, r3, #3
 81021e2:	009b      	lsls	r3, r3, #2
 81021e4:	220f      	movs	r2, #15
 81021e6:	fa02 f303 	lsl.w	r3, r2, r3
 81021ea:	43db      	mvns	r3, r3
 81021ec:	69ba      	ldr	r2, [r7, #24]
 81021ee:	4013      	ands	r3, r2
 81021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	4a20      	ldr	r2, [pc, #128]	; (8102278 <HAL_GPIO_Init+0x240>)
 81021f6:	4293      	cmp	r3, r2
 81021f8:	d052      	beq.n	81022a0 <HAL_GPIO_Init+0x268>
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	4a1f      	ldr	r2, [pc, #124]	; (810227c <HAL_GPIO_Init+0x244>)
 81021fe:	4293      	cmp	r3, r2
 8102200:	d031      	beq.n	8102266 <HAL_GPIO_Init+0x22e>
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	4a1e      	ldr	r2, [pc, #120]	; (8102280 <HAL_GPIO_Init+0x248>)
 8102206:	4293      	cmp	r3, r2
 8102208:	d02b      	beq.n	8102262 <HAL_GPIO_Init+0x22a>
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	4a1d      	ldr	r2, [pc, #116]	; (8102284 <HAL_GPIO_Init+0x24c>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d025      	beq.n	810225e <HAL_GPIO_Init+0x226>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	4a1c      	ldr	r2, [pc, #112]	; (8102288 <HAL_GPIO_Init+0x250>)
 8102216:	4293      	cmp	r3, r2
 8102218:	d01f      	beq.n	810225a <HAL_GPIO_Init+0x222>
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	4a1b      	ldr	r2, [pc, #108]	; (810228c <HAL_GPIO_Init+0x254>)
 810221e:	4293      	cmp	r3, r2
 8102220:	d019      	beq.n	8102256 <HAL_GPIO_Init+0x21e>
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	4a1a      	ldr	r2, [pc, #104]	; (8102290 <HAL_GPIO_Init+0x258>)
 8102226:	4293      	cmp	r3, r2
 8102228:	d013      	beq.n	8102252 <HAL_GPIO_Init+0x21a>
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	4a19      	ldr	r2, [pc, #100]	; (8102294 <HAL_GPIO_Init+0x25c>)
 810222e:	4293      	cmp	r3, r2
 8102230:	d00d      	beq.n	810224e <HAL_GPIO_Init+0x216>
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	4a18      	ldr	r2, [pc, #96]	; (8102298 <HAL_GPIO_Init+0x260>)
 8102236:	4293      	cmp	r3, r2
 8102238:	d007      	beq.n	810224a <HAL_GPIO_Init+0x212>
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	4a17      	ldr	r2, [pc, #92]	; (810229c <HAL_GPIO_Init+0x264>)
 810223e:	4293      	cmp	r3, r2
 8102240:	d101      	bne.n	8102246 <HAL_GPIO_Init+0x20e>
 8102242:	2309      	movs	r3, #9
 8102244:	e02d      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 8102246:	230a      	movs	r3, #10
 8102248:	e02b      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 810224a:	2308      	movs	r3, #8
 810224c:	e029      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 810224e:	2307      	movs	r3, #7
 8102250:	e027      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 8102252:	2306      	movs	r3, #6
 8102254:	e025      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 8102256:	2305      	movs	r3, #5
 8102258:	e023      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 810225a:	2304      	movs	r3, #4
 810225c:	e021      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 810225e:	2303      	movs	r3, #3
 8102260:	e01f      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 8102262:	2302      	movs	r3, #2
 8102264:	e01d      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 8102266:	2301      	movs	r3, #1
 8102268:	e01b      	b.n	81022a2 <HAL_GPIO_Init+0x26a>
 810226a:	bf00      	nop
 810226c:	580000c0 	.word	0x580000c0
 8102270:	58024400 	.word	0x58024400
 8102274:	58000400 	.word	0x58000400
 8102278:	58020000 	.word	0x58020000
 810227c:	58020400 	.word	0x58020400
 8102280:	58020800 	.word	0x58020800
 8102284:	58020c00 	.word	0x58020c00
 8102288:	58021000 	.word	0x58021000
 810228c:	58021400 	.word	0x58021400
 8102290:	58021800 	.word	0x58021800
 8102294:	58021c00 	.word	0x58021c00
 8102298:	58022000 	.word	0x58022000
 810229c:	58022400 	.word	0x58022400
 81022a0:	2300      	movs	r3, #0
 81022a2:	69fa      	ldr	r2, [r7, #28]
 81022a4:	f002 0203 	and.w	r2, r2, #3
 81022a8:	0092      	lsls	r2, r2, #2
 81022aa:	4093      	lsls	r3, r2
 81022ac:	69ba      	ldr	r2, [r7, #24]
 81022ae:	4313      	orrs	r3, r2
 81022b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81022b2:	4938      	ldr	r1, [pc, #224]	; (8102394 <HAL_GPIO_Init+0x35c>)
 81022b4:	69fb      	ldr	r3, [r7, #28]
 81022b6:	089b      	lsrs	r3, r3, #2
 81022b8:	3302      	adds	r3, #2
 81022ba:	69ba      	ldr	r2, [r7, #24]
 81022bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81022c0:	697b      	ldr	r3, [r7, #20]
 81022c2:	681b      	ldr	r3, [r3, #0]
 81022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81022c6:	693b      	ldr	r3, [r7, #16]
 81022c8:	43db      	mvns	r3, r3
 81022ca:	69ba      	ldr	r2, [r7, #24]
 81022cc:	4013      	ands	r3, r2
 81022ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81022d0:	683b      	ldr	r3, [r7, #0]
 81022d2:	685b      	ldr	r3, [r3, #4]
 81022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81022d8:	2b00      	cmp	r3, #0
 81022da:	d003      	beq.n	81022e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81022dc:	69ba      	ldr	r2, [r7, #24]
 81022de:	693b      	ldr	r3, [r7, #16]
 81022e0:	4313      	orrs	r3, r2
 81022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81022e4:	697b      	ldr	r3, [r7, #20]
 81022e6:	69ba      	ldr	r2, [r7, #24]
 81022e8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81022ea:	697b      	ldr	r3, [r7, #20]
 81022ec:	685b      	ldr	r3, [r3, #4]
 81022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81022f0:	693b      	ldr	r3, [r7, #16]
 81022f2:	43db      	mvns	r3, r3
 81022f4:	69ba      	ldr	r2, [r7, #24]
 81022f6:	4013      	ands	r3, r2
 81022f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81022fa:	683b      	ldr	r3, [r7, #0]
 81022fc:	685b      	ldr	r3, [r3, #4]
 81022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102302:	2b00      	cmp	r3, #0
 8102304:	d003      	beq.n	810230e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8102306:	69ba      	ldr	r2, [r7, #24]
 8102308:	693b      	ldr	r3, [r7, #16]
 810230a:	4313      	orrs	r3, r2
 810230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810230e:	697b      	ldr	r3, [r7, #20]
 8102310:	69ba      	ldr	r2, [r7, #24]
 8102312:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102318:	681b      	ldr	r3, [r3, #0]
 810231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810231c:	693b      	ldr	r3, [r7, #16]
 810231e:	43db      	mvns	r3, r3
 8102320:	69ba      	ldr	r2, [r7, #24]
 8102322:	4013      	ands	r3, r2
 8102324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8102326:	683b      	ldr	r3, [r7, #0]
 8102328:	685b      	ldr	r3, [r3, #4]
 810232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810232e:	2b00      	cmp	r3, #0
 8102330:	d003      	beq.n	810233a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8102332:	69ba      	ldr	r2, [r7, #24]
 8102334:	693b      	ldr	r3, [r7, #16]
 8102336:	4313      	orrs	r3, r2
 8102338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810233a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810233e:	69bb      	ldr	r3, [r7, #24]
 8102340:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102346:	685b      	ldr	r3, [r3, #4]
 8102348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810234a:	693b      	ldr	r3, [r7, #16]
 810234c:	43db      	mvns	r3, r3
 810234e:	69ba      	ldr	r2, [r7, #24]
 8102350:	4013      	ands	r3, r2
 8102352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8102354:	683b      	ldr	r3, [r7, #0]
 8102356:	685b      	ldr	r3, [r3, #4]
 8102358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810235c:	2b00      	cmp	r3, #0
 810235e:	d003      	beq.n	8102368 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8102360:	69ba      	ldr	r2, [r7, #24]
 8102362:	693b      	ldr	r3, [r7, #16]
 8102364:	4313      	orrs	r3, r2
 8102366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810236c:	69bb      	ldr	r3, [r7, #24]
 810236e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8102370:	69fb      	ldr	r3, [r7, #28]
 8102372:	3301      	adds	r3, #1
 8102374:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102376:	683b      	ldr	r3, [r7, #0]
 8102378:	681a      	ldr	r2, [r3, #0]
 810237a:	69fb      	ldr	r3, [r7, #28]
 810237c:	fa22 f303 	lsr.w	r3, r2, r3
 8102380:	2b00      	cmp	r3, #0
 8102382:	f47f ae63 	bne.w	810204c <HAL_GPIO_Init+0x14>
  }
}
 8102386:	bf00      	nop
 8102388:	3724      	adds	r7, #36	; 0x24
 810238a:	46bd      	mov	sp, r7
 810238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102390:	4770      	bx	lr
 8102392:	bf00      	nop
 8102394:	58000400 	.word	0x58000400

08102398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102398:	b480      	push	{r7}
 810239a:	b083      	sub	sp, #12
 810239c:	af00      	add	r7, sp, #0
 810239e:	6078      	str	r0, [r7, #4]
 81023a0:	460b      	mov	r3, r1
 81023a2:	807b      	strh	r3, [r7, #2]
 81023a4:	4613      	mov	r3, r2
 81023a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81023a8:	787b      	ldrb	r3, [r7, #1]
 81023aa:	2b00      	cmp	r3, #0
 81023ac:	d003      	beq.n	81023b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81023ae:	887a      	ldrh	r2, [r7, #2]
 81023b0:	687b      	ldr	r3, [r7, #4]
 81023b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81023b4:	e003      	b.n	81023be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81023b6:	887b      	ldrh	r3, [r7, #2]
 81023b8:	041a      	lsls	r2, r3, #16
 81023ba:	687b      	ldr	r3, [r7, #4]
 81023bc:	619a      	str	r2, [r3, #24]
}
 81023be:	bf00      	nop
 81023c0:	370c      	adds	r7, #12
 81023c2:	46bd      	mov	sp, r7
 81023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c8:	4770      	bx	lr
	...

081023cc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81023cc:	b480      	push	{r7}
 81023ce:	b083      	sub	sp, #12
 81023d0:	af00      	add	r7, sp, #0
 81023d2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81023d4:	4b05      	ldr	r3, [pc, #20]	; (81023ec <HAL_HSEM_ActivateNotification+0x20>)
 81023d6:	681a      	ldr	r2, [r3, #0]
 81023d8:	4904      	ldr	r1, [pc, #16]	; (81023ec <HAL_HSEM_ActivateNotification+0x20>)
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	4313      	orrs	r3, r2
 81023de:	600b      	str	r3, [r1, #0]
#endif
}
 81023e0:	bf00      	nop
 81023e2:	370c      	adds	r7, #12
 81023e4:	46bd      	mov	sp, r7
 81023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023ea:	4770      	bx	lr
 81023ec:	58026510 	.word	0x58026510

081023f0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81023f0:	b580      	push	{r7, lr}
 81023f2:	b082      	sub	sp, #8
 81023f4:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81023f6:	4b0a      	ldr	r3, [pc, #40]	; (8102420 <HAL_HSEM_IRQHandler+0x30>)
 81023f8:	68db      	ldr	r3, [r3, #12]
 81023fa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 81023fc:	4b08      	ldr	r3, [pc, #32]	; (8102420 <HAL_HSEM_IRQHandler+0x30>)
 81023fe:	681a      	ldr	r2, [r3, #0]
 8102400:	687b      	ldr	r3, [r7, #4]
 8102402:	43db      	mvns	r3, r3
 8102404:	4906      	ldr	r1, [pc, #24]	; (8102420 <HAL_HSEM_IRQHandler+0x30>)
 8102406:	4013      	ands	r3, r2
 8102408:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810240a:	4a05      	ldr	r2, [pc, #20]	; (8102420 <HAL_HSEM_IRQHandler+0x30>)
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8102410:	6878      	ldr	r0, [r7, #4]
 8102412:	f000 f807 	bl	8102424 <HAL_HSEM_FreeCallback>
}
 8102416:	bf00      	nop
 8102418:	3708      	adds	r7, #8
 810241a:	46bd      	mov	sp, r7
 810241c:	bd80      	pop	{r7, pc}
 810241e:	bf00      	nop
 8102420:	58026510 	.word	0x58026510

08102424 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8102424:	b480      	push	{r7}
 8102426:	b083      	sub	sp, #12
 8102428:	af00      	add	r7, sp, #0
 810242a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 810242c:	bf00      	nop
 810242e:	370c      	adds	r7, #12
 8102430:	46bd      	mov	sp, r7
 8102432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102436:	4770      	bx	lr

08102438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102438:	b580      	push	{r7, lr}
 810243a:	b082      	sub	sp, #8
 810243c:	af00      	add	r7, sp, #0
 810243e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8102440:	687b      	ldr	r3, [r7, #4]
 8102442:	2b00      	cmp	r3, #0
 8102444:	d101      	bne.n	810244a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102446:	2301      	movs	r3, #1
 8102448:	e081      	b.n	810254e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102450:	b2db      	uxtb	r3, r3
 8102452:	2b00      	cmp	r3, #0
 8102454:	d106      	bne.n	8102464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	2200      	movs	r2, #0
 810245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810245e:	6878      	ldr	r0, [r7, #4]
 8102460:	f7fe ff30 	bl	81012c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	2224      	movs	r2, #36	; 0x24
 8102468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	681a      	ldr	r2, [r3, #0]
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	681b      	ldr	r3, [r3, #0]
 8102476:	f022 0201 	bic.w	r2, r2, #1
 810247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	685a      	ldr	r2, [r3, #4]
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102488:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	689a      	ldr	r2, [r3, #8]
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	681b      	ldr	r3, [r3, #0]
 8102494:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102498:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810249a:	687b      	ldr	r3, [r7, #4]
 810249c:	68db      	ldr	r3, [r3, #12]
 810249e:	2b01      	cmp	r3, #1
 81024a0:	d107      	bne.n	81024b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	689a      	ldr	r2, [r3, #8]
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81024ae:	609a      	str	r2, [r3, #8]
 81024b0:	e006      	b.n	81024c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	689a      	ldr	r2, [r3, #8]
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	681b      	ldr	r3, [r3, #0]
 81024ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81024be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	68db      	ldr	r3, [r3, #12]
 81024c4:	2b02      	cmp	r3, #2
 81024c6:	d104      	bne.n	81024d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81024d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	681b      	ldr	r3, [r3, #0]
 81024d6:	685b      	ldr	r3, [r3, #4]
 81024d8:	687a      	ldr	r2, [r7, #4]
 81024da:	6812      	ldr	r2, [r2, #0]
 81024dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81024e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81024e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81024e6:	687b      	ldr	r3, [r7, #4]
 81024e8:	681b      	ldr	r3, [r3, #0]
 81024ea:	68da      	ldr	r2, [r3, #12]
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81024f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	691a      	ldr	r2, [r3, #16]
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	695b      	ldr	r3, [r3, #20]
 81024fe:	ea42 0103 	orr.w	r1, r2, r3
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	699b      	ldr	r3, [r3, #24]
 8102506:	021a      	lsls	r2, r3, #8
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	430a      	orrs	r2, r1
 810250e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	69d9      	ldr	r1, [r3, #28]
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	6a1a      	ldr	r2, [r3, #32]
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	681b      	ldr	r3, [r3, #0]
 810251c:	430a      	orrs	r2, r1
 810251e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	681a      	ldr	r2, [r3, #0]
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	f042 0201 	orr.w	r2, r2, #1
 810252e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	2200      	movs	r2, #0
 8102534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	2220      	movs	r2, #32
 810253a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	2200      	movs	r2, #0
 8102542:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	2200      	movs	r2, #0
 8102548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 810254c:	2300      	movs	r3, #0
}
 810254e:	4618      	mov	r0, r3
 8102550:	3708      	adds	r7, #8
 8102552:	46bd      	mov	sp, r7
 8102554:	bd80      	pop	{r7, pc}
	...

08102558 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102558:	b580      	push	{r7, lr}
 810255a:	b088      	sub	sp, #32
 810255c:	af02      	add	r7, sp, #8
 810255e:	60f8      	str	r0, [r7, #12]
 8102560:	4608      	mov	r0, r1
 8102562:	4611      	mov	r1, r2
 8102564:	461a      	mov	r2, r3
 8102566:	4603      	mov	r3, r0
 8102568:	817b      	strh	r3, [r7, #10]
 810256a:	460b      	mov	r3, r1
 810256c:	813b      	strh	r3, [r7, #8]
 810256e:	4613      	mov	r3, r2
 8102570:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102572:	68fb      	ldr	r3, [r7, #12]
 8102574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102578:	b2db      	uxtb	r3, r3
 810257a:	2b20      	cmp	r3, #32
 810257c:	f040 80f9 	bne.w	8102772 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8102580:	6a3b      	ldr	r3, [r7, #32]
 8102582:	2b00      	cmp	r3, #0
 8102584:	d002      	beq.n	810258c <HAL_I2C_Mem_Write+0x34>
 8102586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102588:	2b00      	cmp	r3, #0
 810258a:	d105      	bne.n	8102598 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 810258c:	68fb      	ldr	r3, [r7, #12]
 810258e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8102592:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102594:	2301      	movs	r3, #1
 8102596:	e0ed      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102598:	68fb      	ldr	r3, [r7, #12]
 810259a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810259e:	2b01      	cmp	r3, #1
 81025a0:	d101      	bne.n	81025a6 <HAL_I2C_Mem_Write+0x4e>
 81025a2:	2302      	movs	r3, #2
 81025a4:	e0e6      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
 81025a6:	68fb      	ldr	r3, [r7, #12]
 81025a8:	2201      	movs	r2, #1
 81025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81025ae:	f7ff fc21 	bl	8101df4 <HAL_GetTick>
 81025b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81025b4:	697b      	ldr	r3, [r7, #20]
 81025b6:	9300      	str	r3, [sp, #0]
 81025b8:	2319      	movs	r3, #25
 81025ba:	2201      	movs	r2, #1
 81025bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81025c0:	68f8      	ldr	r0, [r7, #12]
 81025c2:	f000 fac3 	bl	8102b4c <I2C_WaitOnFlagUntilTimeout>
 81025c6:	4603      	mov	r3, r0
 81025c8:	2b00      	cmp	r3, #0
 81025ca:	d001      	beq.n	81025d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81025cc:	2301      	movs	r3, #1
 81025ce:	e0d1      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81025d0:	68fb      	ldr	r3, [r7, #12]
 81025d2:	2221      	movs	r2, #33	; 0x21
 81025d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81025d8:	68fb      	ldr	r3, [r7, #12]
 81025da:	2240      	movs	r2, #64	; 0x40
 81025dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81025e0:	68fb      	ldr	r3, [r7, #12]
 81025e2:	2200      	movs	r2, #0
 81025e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81025e6:	68fb      	ldr	r3, [r7, #12]
 81025e8:	6a3a      	ldr	r2, [r7, #32]
 81025ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81025ec:	68fb      	ldr	r3, [r7, #12]
 81025ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81025f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81025f2:	68fb      	ldr	r3, [r7, #12]
 81025f4:	2200      	movs	r2, #0
 81025f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81025f8:	88f8      	ldrh	r0, [r7, #6]
 81025fa:	893a      	ldrh	r2, [r7, #8]
 81025fc:	8979      	ldrh	r1, [r7, #10]
 81025fe:	697b      	ldr	r3, [r7, #20]
 8102600:	9301      	str	r3, [sp, #4]
 8102602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102604:	9300      	str	r3, [sp, #0]
 8102606:	4603      	mov	r3, r0
 8102608:	68f8      	ldr	r0, [r7, #12]
 810260a:	f000 f9d3 	bl	81029b4 <I2C_RequestMemoryWrite>
 810260e:	4603      	mov	r3, r0
 8102610:	2b00      	cmp	r3, #0
 8102612:	d005      	beq.n	8102620 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102614:	68fb      	ldr	r3, [r7, #12]
 8102616:	2200      	movs	r2, #0
 8102618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 810261c:	2301      	movs	r3, #1
 810261e:	e0a9      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102620:	68fb      	ldr	r3, [r7, #12]
 8102622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102624:	b29b      	uxth	r3, r3
 8102626:	2bff      	cmp	r3, #255	; 0xff
 8102628:	d90e      	bls.n	8102648 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810262a:	68fb      	ldr	r3, [r7, #12]
 810262c:	22ff      	movs	r2, #255	; 0xff
 810262e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102630:	68fb      	ldr	r3, [r7, #12]
 8102632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102634:	b2da      	uxtb	r2, r3
 8102636:	8979      	ldrh	r1, [r7, #10]
 8102638:	2300      	movs	r3, #0
 810263a:	9300      	str	r3, [sp, #0]
 810263c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102640:	68f8      	ldr	r0, [r7, #12]
 8102642:	f000 fba5 	bl	8102d90 <I2C_TransferConfig>
 8102646:	e00f      	b.n	8102668 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102648:	68fb      	ldr	r3, [r7, #12]
 810264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810264c:	b29a      	uxth	r2, r3
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102652:	68fb      	ldr	r3, [r7, #12]
 8102654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102656:	b2da      	uxtb	r2, r3
 8102658:	8979      	ldrh	r1, [r7, #10]
 810265a:	2300      	movs	r3, #0
 810265c:	9300      	str	r3, [sp, #0]
 810265e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102662:	68f8      	ldr	r0, [r7, #12]
 8102664:	f000 fb94 	bl	8102d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102668:	697a      	ldr	r2, [r7, #20]
 810266a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810266c:	68f8      	ldr	r0, [r7, #12]
 810266e:	f000 faad 	bl	8102bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8102672:	4603      	mov	r3, r0
 8102674:	2b00      	cmp	r3, #0
 8102676:	d001      	beq.n	810267c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102678:	2301      	movs	r3, #1
 810267a:	e07b      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810267c:	68fb      	ldr	r3, [r7, #12]
 810267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102680:	781a      	ldrb	r2, [r3, #0]
 8102682:	68fb      	ldr	r3, [r7, #12]
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102688:	68fb      	ldr	r3, [r7, #12]
 810268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810268c:	1c5a      	adds	r2, r3, #1
 810268e:	68fb      	ldr	r3, [r7, #12]
 8102690:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8102692:	68fb      	ldr	r3, [r7, #12]
 8102694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102696:	b29b      	uxth	r3, r3
 8102698:	3b01      	subs	r3, #1
 810269a:	b29a      	uxth	r2, r3
 810269c:	68fb      	ldr	r3, [r7, #12]
 810269e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81026a0:	68fb      	ldr	r3, [r7, #12]
 81026a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026a4:	3b01      	subs	r3, #1
 81026a6:	b29a      	uxth	r2, r3
 81026a8:	68fb      	ldr	r3, [r7, #12]
 81026aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81026ac:	68fb      	ldr	r3, [r7, #12]
 81026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81026b0:	b29b      	uxth	r3, r3
 81026b2:	2b00      	cmp	r3, #0
 81026b4:	d034      	beq.n	8102720 <HAL_I2C_Mem_Write+0x1c8>
 81026b6:	68fb      	ldr	r3, [r7, #12]
 81026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026ba:	2b00      	cmp	r3, #0
 81026bc:	d130      	bne.n	8102720 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81026be:	697b      	ldr	r3, [r7, #20]
 81026c0:	9300      	str	r3, [sp, #0]
 81026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026c4:	2200      	movs	r2, #0
 81026c6:	2180      	movs	r1, #128	; 0x80
 81026c8:	68f8      	ldr	r0, [r7, #12]
 81026ca:	f000 fa3f 	bl	8102b4c <I2C_WaitOnFlagUntilTimeout>
 81026ce:	4603      	mov	r3, r0
 81026d0:	2b00      	cmp	r3, #0
 81026d2:	d001      	beq.n	81026d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81026d4:	2301      	movs	r3, #1
 81026d6:	e04d      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81026d8:	68fb      	ldr	r3, [r7, #12]
 81026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81026dc:	b29b      	uxth	r3, r3
 81026de:	2bff      	cmp	r3, #255	; 0xff
 81026e0:	d90e      	bls.n	8102700 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	22ff      	movs	r2, #255	; 0xff
 81026e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81026e8:	68fb      	ldr	r3, [r7, #12]
 81026ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026ec:	b2da      	uxtb	r2, r3
 81026ee:	8979      	ldrh	r1, [r7, #10]
 81026f0:	2300      	movs	r3, #0
 81026f2:	9300      	str	r3, [sp, #0]
 81026f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81026f8:	68f8      	ldr	r0, [r7, #12]
 81026fa:	f000 fb49 	bl	8102d90 <I2C_TransferConfig>
 81026fe:	e00f      	b.n	8102720 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102700:	68fb      	ldr	r3, [r7, #12]
 8102702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102704:	b29a      	uxth	r2, r3
 8102706:	68fb      	ldr	r3, [r7, #12]
 8102708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810270a:	68fb      	ldr	r3, [r7, #12]
 810270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810270e:	b2da      	uxtb	r2, r3
 8102710:	8979      	ldrh	r1, [r7, #10]
 8102712:	2300      	movs	r3, #0
 8102714:	9300      	str	r3, [sp, #0]
 8102716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810271a:	68f8      	ldr	r0, [r7, #12]
 810271c:	f000 fb38 	bl	8102d90 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102724:	b29b      	uxth	r3, r3
 8102726:	2b00      	cmp	r3, #0
 8102728:	d19e      	bne.n	8102668 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810272a:	697a      	ldr	r2, [r7, #20]
 810272c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810272e:	68f8      	ldr	r0, [r7, #12]
 8102730:	f000 fa8c 	bl	8102c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8102734:	4603      	mov	r3, r0
 8102736:	2b00      	cmp	r3, #0
 8102738:	d001      	beq.n	810273e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810273a:	2301      	movs	r3, #1
 810273c:	e01a      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810273e:	68fb      	ldr	r3, [r7, #12]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	2220      	movs	r2, #32
 8102744:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102746:	68fb      	ldr	r3, [r7, #12]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	6859      	ldr	r1, [r3, #4]
 810274c:	68fb      	ldr	r3, [r7, #12]
 810274e:	681a      	ldr	r2, [r3, #0]
 8102750:	4b0a      	ldr	r3, [pc, #40]	; (810277c <HAL_I2C_Mem_Write+0x224>)
 8102752:	400b      	ands	r3, r1
 8102754:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102756:	68fb      	ldr	r3, [r7, #12]
 8102758:	2220      	movs	r2, #32
 810275a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810275e:	68fb      	ldr	r3, [r7, #12]
 8102760:	2200      	movs	r2, #0
 8102762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102766:	68fb      	ldr	r3, [r7, #12]
 8102768:	2200      	movs	r2, #0
 810276a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810276e:	2300      	movs	r3, #0
 8102770:	e000      	b.n	8102774 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8102772:	2302      	movs	r3, #2
  }
}
 8102774:	4618      	mov	r0, r3
 8102776:	3718      	adds	r7, #24
 8102778:	46bd      	mov	sp, r7
 810277a:	bd80      	pop	{r7, pc}
 810277c:	fe00e800 	.word	0xfe00e800

08102780 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102780:	b580      	push	{r7, lr}
 8102782:	b088      	sub	sp, #32
 8102784:	af02      	add	r7, sp, #8
 8102786:	60f8      	str	r0, [r7, #12]
 8102788:	4608      	mov	r0, r1
 810278a:	4611      	mov	r1, r2
 810278c:	461a      	mov	r2, r3
 810278e:	4603      	mov	r3, r0
 8102790:	817b      	strh	r3, [r7, #10]
 8102792:	460b      	mov	r3, r1
 8102794:	813b      	strh	r3, [r7, #8]
 8102796:	4613      	mov	r3, r2
 8102798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810279a:	68fb      	ldr	r3, [r7, #12]
 810279c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81027a0:	b2db      	uxtb	r3, r3
 81027a2:	2b20      	cmp	r3, #32
 81027a4:	f040 80fd 	bne.w	81029a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81027a8:	6a3b      	ldr	r3, [r7, #32]
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d002      	beq.n	81027b4 <HAL_I2C_Mem_Read+0x34>
 81027ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81027b0:	2b00      	cmp	r3, #0
 81027b2:	d105      	bne.n	81027c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81027b4:	68fb      	ldr	r3, [r7, #12]
 81027b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 81027ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81027bc:	2301      	movs	r3, #1
 81027be:	e0f1      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81027c0:	68fb      	ldr	r3, [r7, #12]
 81027c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81027c6:	2b01      	cmp	r3, #1
 81027c8:	d101      	bne.n	81027ce <HAL_I2C_Mem_Read+0x4e>
 81027ca:	2302      	movs	r3, #2
 81027cc:	e0ea      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
 81027ce:	68fb      	ldr	r3, [r7, #12]
 81027d0:	2201      	movs	r2, #1
 81027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81027d6:	f7ff fb0d 	bl	8101df4 <HAL_GetTick>
 81027da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81027dc:	697b      	ldr	r3, [r7, #20]
 81027de:	9300      	str	r3, [sp, #0]
 81027e0:	2319      	movs	r3, #25
 81027e2:	2201      	movs	r2, #1
 81027e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81027e8:	68f8      	ldr	r0, [r7, #12]
 81027ea:	f000 f9af 	bl	8102b4c <I2C_WaitOnFlagUntilTimeout>
 81027ee:	4603      	mov	r3, r0
 81027f0:	2b00      	cmp	r3, #0
 81027f2:	d001      	beq.n	81027f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81027f4:	2301      	movs	r3, #1
 81027f6:	e0d5      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81027f8:	68fb      	ldr	r3, [r7, #12]
 81027fa:	2222      	movs	r2, #34	; 0x22
 81027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8102800:	68fb      	ldr	r3, [r7, #12]
 8102802:	2240      	movs	r2, #64	; 0x40
 8102804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102808:	68fb      	ldr	r3, [r7, #12]
 810280a:	2200      	movs	r2, #0
 810280c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810280e:	68fb      	ldr	r3, [r7, #12]
 8102810:	6a3a      	ldr	r2, [r7, #32]
 8102812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102814:	68fb      	ldr	r3, [r7, #12]
 8102816:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810281a:	68fb      	ldr	r3, [r7, #12]
 810281c:	2200      	movs	r2, #0
 810281e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8102820:	88f8      	ldrh	r0, [r7, #6]
 8102822:	893a      	ldrh	r2, [r7, #8]
 8102824:	8979      	ldrh	r1, [r7, #10]
 8102826:	697b      	ldr	r3, [r7, #20]
 8102828:	9301      	str	r3, [sp, #4]
 810282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810282c:	9300      	str	r3, [sp, #0]
 810282e:	4603      	mov	r3, r0
 8102830:	68f8      	ldr	r0, [r7, #12]
 8102832:	f000 f913 	bl	8102a5c <I2C_RequestMemoryRead>
 8102836:	4603      	mov	r3, r0
 8102838:	2b00      	cmp	r3, #0
 810283a:	d005      	beq.n	8102848 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 810283c:	68fb      	ldr	r3, [r7, #12]
 810283e:	2200      	movs	r2, #0
 8102840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102844:	2301      	movs	r3, #1
 8102846:	e0ad      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102848:	68fb      	ldr	r3, [r7, #12]
 810284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810284c:	b29b      	uxth	r3, r3
 810284e:	2bff      	cmp	r3, #255	; 0xff
 8102850:	d90e      	bls.n	8102870 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102852:	68fb      	ldr	r3, [r7, #12]
 8102854:	22ff      	movs	r2, #255	; 0xff
 8102856:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8102858:	68fb      	ldr	r3, [r7, #12]
 810285a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810285c:	b2da      	uxtb	r2, r3
 810285e:	8979      	ldrh	r1, [r7, #10]
 8102860:	4b52      	ldr	r3, [pc, #328]	; (81029ac <HAL_I2C_Mem_Read+0x22c>)
 8102862:	9300      	str	r3, [sp, #0]
 8102864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102868:	68f8      	ldr	r0, [r7, #12]
 810286a:	f000 fa91 	bl	8102d90 <I2C_TransferConfig>
 810286e:	e00f      	b.n	8102890 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102870:	68fb      	ldr	r3, [r7, #12]
 8102872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102874:	b29a      	uxth	r2, r3
 8102876:	68fb      	ldr	r3, [r7, #12]
 8102878:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810287a:	68fb      	ldr	r3, [r7, #12]
 810287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810287e:	b2da      	uxtb	r2, r3
 8102880:	8979      	ldrh	r1, [r7, #10]
 8102882:	4b4a      	ldr	r3, [pc, #296]	; (81029ac <HAL_I2C_Mem_Read+0x22c>)
 8102884:	9300      	str	r3, [sp, #0]
 8102886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810288a:	68f8      	ldr	r0, [r7, #12]
 810288c:	f000 fa80 	bl	8102d90 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102890:	697b      	ldr	r3, [r7, #20]
 8102892:	9300      	str	r3, [sp, #0]
 8102894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102896:	2200      	movs	r2, #0
 8102898:	2104      	movs	r1, #4
 810289a:	68f8      	ldr	r0, [r7, #12]
 810289c:	f000 f956 	bl	8102b4c <I2C_WaitOnFlagUntilTimeout>
 81028a0:	4603      	mov	r3, r0
 81028a2:	2b00      	cmp	r3, #0
 81028a4:	d001      	beq.n	81028aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81028a6:	2301      	movs	r3, #1
 81028a8:	e07c      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81028b0:	68fb      	ldr	r3, [r7, #12]
 81028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028b4:	b2d2      	uxtb	r2, r2
 81028b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81028b8:	68fb      	ldr	r3, [r7, #12]
 81028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028bc:	1c5a      	adds	r2, r3, #1
 81028be:	68fb      	ldr	r3, [r7, #12]
 81028c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81028c2:	68fb      	ldr	r3, [r7, #12]
 81028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81028c6:	3b01      	subs	r3, #1
 81028c8:	b29a      	uxth	r2, r3
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81028ce:	68fb      	ldr	r3, [r7, #12]
 81028d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81028d2:	b29b      	uxth	r3, r3
 81028d4:	3b01      	subs	r3, #1
 81028d6:	b29a      	uxth	r2, r3
 81028d8:	68fb      	ldr	r3, [r7, #12]
 81028da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81028dc:	68fb      	ldr	r3, [r7, #12]
 81028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81028e0:	b29b      	uxth	r3, r3
 81028e2:	2b00      	cmp	r3, #0
 81028e4:	d034      	beq.n	8102950 <HAL_I2C_Mem_Read+0x1d0>
 81028e6:	68fb      	ldr	r3, [r7, #12]
 81028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81028ea:	2b00      	cmp	r3, #0
 81028ec:	d130      	bne.n	8102950 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81028ee:	697b      	ldr	r3, [r7, #20]
 81028f0:	9300      	str	r3, [sp, #0]
 81028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028f4:	2200      	movs	r2, #0
 81028f6:	2180      	movs	r1, #128	; 0x80
 81028f8:	68f8      	ldr	r0, [r7, #12]
 81028fa:	f000 f927 	bl	8102b4c <I2C_WaitOnFlagUntilTimeout>
 81028fe:	4603      	mov	r3, r0
 8102900:	2b00      	cmp	r3, #0
 8102902:	d001      	beq.n	8102908 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102904:	2301      	movs	r3, #1
 8102906:	e04d      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102908:	68fb      	ldr	r3, [r7, #12]
 810290a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810290c:	b29b      	uxth	r3, r3
 810290e:	2bff      	cmp	r3, #255	; 0xff
 8102910:	d90e      	bls.n	8102930 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102912:	68fb      	ldr	r3, [r7, #12]
 8102914:	22ff      	movs	r2, #255	; 0xff
 8102916:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8102918:	68fb      	ldr	r3, [r7, #12]
 810291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810291c:	b2da      	uxtb	r2, r3
 810291e:	8979      	ldrh	r1, [r7, #10]
 8102920:	2300      	movs	r3, #0
 8102922:	9300      	str	r3, [sp, #0]
 8102924:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102928:	68f8      	ldr	r0, [r7, #12]
 810292a:	f000 fa31 	bl	8102d90 <I2C_TransferConfig>
 810292e:	e00f      	b.n	8102950 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102930:	68fb      	ldr	r3, [r7, #12]
 8102932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102934:	b29a      	uxth	r2, r3
 8102936:	68fb      	ldr	r3, [r7, #12]
 8102938:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810293a:	68fb      	ldr	r3, [r7, #12]
 810293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810293e:	b2da      	uxtb	r2, r3
 8102940:	8979      	ldrh	r1, [r7, #10]
 8102942:	2300      	movs	r3, #0
 8102944:	9300      	str	r3, [sp, #0]
 8102946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810294a:	68f8      	ldr	r0, [r7, #12]
 810294c:	f000 fa20 	bl	8102d90 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8102950:	68fb      	ldr	r3, [r7, #12]
 8102952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102954:	b29b      	uxth	r3, r3
 8102956:	2b00      	cmp	r3, #0
 8102958:	d19a      	bne.n	8102890 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810295a:	697a      	ldr	r2, [r7, #20]
 810295c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810295e:	68f8      	ldr	r0, [r7, #12]
 8102960:	f000 f974 	bl	8102c4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8102964:	4603      	mov	r3, r0
 8102966:	2b00      	cmp	r3, #0
 8102968:	d001      	beq.n	810296e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810296a:	2301      	movs	r3, #1
 810296c:	e01a      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810296e:	68fb      	ldr	r3, [r7, #12]
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	2220      	movs	r2, #32
 8102974:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102976:	68fb      	ldr	r3, [r7, #12]
 8102978:	681b      	ldr	r3, [r3, #0]
 810297a:	6859      	ldr	r1, [r3, #4]
 810297c:	68fb      	ldr	r3, [r7, #12]
 810297e:	681a      	ldr	r2, [r3, #0]
 8102980:	4b0b      	ldr	r3, [pc, #44]	; (81029b0 <HAL_I2C_Mem_Read+0x230>)
 8102982:	400b      	ands	r3, r1
 8102984:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102986:	68fb      	ldr	r3, [r7, #12]
 8102988:	2220      	movs	r2, #32
 810298a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810298e:	68fb      	ldr	r3, [r7, #12]
 8102990:	2200      	movs	r2, #0
 8102992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102996:	68fb      	ldr	r3, [r7, #12]
 8102998:	2200      	movs	r2, #0
 810299a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810299e:	2300      	movs	r3, #0
 81029a0:	e000      	b.n	81029a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81029a2:	2302      	movs	r3, #2
  }
}
 81029a4:	4618      	mov	r0, r3
 81029a6:	3718      	adds	r7, #24
 81029a8:	46bd      	mov	sp, r7
 81029aa:	bd80      	pop	{r7, pc}
 81029ac:	80002400 	.word	0x80002400
 81029b0:	fe00e800 	.word	0xfe00e800

081029b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81029b4:	b580      	push	{r7, lr}
 81029b6:	b086      	sub	sp, #24
 81029b8:	af02      	add	r7, sp, #8
 81029ba:	60f8      	str	r0, [r7, #12]
 81029bc:	4608      	mov	r0, r1
 81029be:	4611      	mov	r1, r2
 81029c0:	461a      	mov	r2, r3
 81029c2:	4603      	mov	r3, r0
 81029c4:	817b      	strh	r3, [r7, #10]
 81029c6:	460b      	mov	r3, r1
 81029c8:	813b      	strh	r3, [r7, #8]
 81029ca:	4613      	mov	r3, r2
 81029cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81029ce:	88fb      	ldrh	r3, [r7, #6]
 81029d0:	b2da      	uxtb	r2, r3
 81029d2:	8979      	ldrh	r1, [r7, #10]
 81029d4:	4b20      	ldr	r3, [pc, #128]	; (8102a58 <I2C_RequestMemoryWrite+0xa4>)
 81029d6:	9300      	str	r3, [sp, #0]
 81029d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81029dc:	68f8      	ldr	r0, [r7, #12]
 81029de:	f000 f9d7 	bl	8102d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81029e2:	69fa      	ldr	r2, [r7, #28]
 81029e4:	69b9      	ldr	r1, [r7, #24]
 81029e6:	68f8      	ldr	r0, [r7, #12]
 81029e8:	f000 f8f0 	bl	8102bcc <I2C_WaitOnTXISFlagUntilTimeout>
 81029ec:	4603      	mov	r3, r0
 81029ee:	2b00      	cmp	r3, #0
 81029f0:	d001      	beq.n	81029f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81029f2:	2301      	movs	r3, #1
 81029f4:	e02c      	b.n	8102a50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81029f6:	88fb      	ldrh	r3, [r7, #6]
 81029f8:	2b01      	cmp	r3, #1
 81029fa:	d105      	bne.n	8102a08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81029fc:	893b      	ldrh	r3, [r7, #8]
 81029fe:	b2da      	uxtb	r2, r3
 8102a00:	68fb      	ldr	r3, [r7, #12]
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	629a      	str	r2, [r3, #40]	; 0x28
 8102a06:	e015      	b.n	8102a34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102a08:	893b      	ldrh	r3, [r7, #8]
 8102a0a:	0a1b      	lsrs	r3, r3, #8
 8102a0c:	b29b      	uxth	r3, r3
 8102a0e:	b2da      	uxtb	r2, r3
 8102a10:	68fb      	ldr	r3, [r7, #12]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102a16:	69fa      	ldr	r2, [r7, #28]
 8102a18:	69b9      	ldr	r1, [r7, #24]
 8102a1a:	68f8      	ldr	r0, [r7, #12]
 8102a1c:	f000 f8d6 	bl	8102bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8102a20:	4603      	mov	r3, r0
 8102a22:	2b00      	cmp	r3, #0
 8102a24:	d001      	beq.n	8102a2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102a26:	2301      	movs	r3, #1
 8102a28:	e012      	b.n	8102a50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102a2a:	893b      	ldrh	r3, [r7, #8]
 8102a2c:	b2da      	uxtb	r2, r3
 8102a2e:	68fb      	ldr	r3, [r7, #12]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102a34:	69fb      	ldr	r3, [r7, #28]
 8102a36:	9300      	str	r3, [sp, #0]
 8102a38:	69bb      	ldr	r3, [r7, #24]
 8102a3a:	2200      	movs	r2, #0
 8102a3c:	2180      	movs	r1, #128	; 0x80
 8102a3e:	68f8      	ldr	r0, [r7, #12]
 8102a40:	f000 f884 	bl	8102b4c <I2C_WaitOnFlagUntilTimeout>
 8102a44:	4603      	mov	r3, r0
 8102a46:	2b00      	cmp	r3, #0
 8102a48:	d001      	beq.n	8102a4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8102a4a:	2301      	movs	r3, #1
 8102a4c:	e000      	b.n	8102a50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102a4e:	2300      	movs	r3, #0
}
 8102a50:	4618      	mov	r0, r3
 8102a52:	3710      	adds	r7, #16
 8102a54:	46bd      	mov	sp, r7
 8102a56:	bd80      	pop	{r7, pc}
 8102a58:	80002000 	.word	0x80002000

08102a5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102a5c:	b580      	push	{r7, lr}
 8102a5e:	b086      	sub	sp, #24
 8102a60:	af02      	add	r7, sp, #8
 8102a62:	60f8      	str	r0, [r7, #12]
 8102a64:	4608      	mov	r0, r1
 8102a66:	4611      	mov	r1, r2
 8102a68:	461a      	mov	r2, r3
 8102a6a:	4603      	mov	r3, r0
 8102a6c:	817b      	strh	r3, [r7, #10]
 8102a6e:	460b      	mov	r3, r1
 8102a70:	813b      	strh	r3, [r7, #8]
 8102a72:	4613      	mov	r3, r2
 8102a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102a76:	88fb      	ldrh	r3, [r7, #6]
 8102a78:	b2da      	uxtb	r2, r3
 8102a7a:	8979      	ldrh	r1, [r7, #10]
 8102a7c:	4b20      	ldr	r3, [pc, #128]	; (8102b00 <I2C_RequestMemoryRead+0xa4>)
 8102a7e:	9300      	str	r3, [sp, #0]
 8102a80:	2300      	movs	r3, #0
 8102a82:	68f8      	ldr	r0, [r7, #12]
 8102a84:	f000 f984 	bl	8102d90 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102a88:	69fa      	ldr	r2, [r7, #28]
 8102a8a:	69b9      	ldr	r1, [r7, #24]
 8102a8c:	68f8      	ldr	r0, [r7, #12]
 8102a8e:	f000 f89d 	bl	8102bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8102a92:	4603      	mov	r3, r0
 8102a94:	2b00      	cmp	r3, #0
 8102a96:	d001      	beq.n	8102a9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102a98:	2301      	movs	r3, #1
 8102a9a:	e02c      	b.n	8102af6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102a9c:	88fb      	ldrh	r3, [r7, #6]
 8102a9e:	2b01      	cmp	r3, #1
 8102aa0:	d105      	bne.n	8102aae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102aa2:	893b      	ldrh	r3, [r7, #8]
 8102aa4:	b2da      	uxtb	r2, r3
 8102aa6:	68fb      	ldr	r3, [r7, #12]
 8102aa8:	681b      	ldr	r3, [r3, #0]
 8102aaa:	629a      	str	r2, [r3, #40]	; 0x28
 8102aac:	e015      	b.n	8102ada <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102aae:	893b      	ldrh	r3, [r7, #8]
 8102ab0:	0a1b      	lsrs	r3, r3, #8
 8102ab2:	b29b      	uxth	r3, r3
 8102ab4:	b2da      	uxtb	r2, r3
 8102ab6:	68fb      	ldr	r3, [r7, #12]
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102abc:	69fa      	ldr	r2, [r7, #28]
 8102abe:	69b9      	ldr	r1, [r7, #24]
 8102ac0:	68f8      	ldr	r0, [r7, #12]
 8102ac2:	f000 f883 	bl	8102bcc <I2C_WaitOnTXISFlagUntilTimeout>
 8102ac6:	4603      	mov	r3, r0
 8102ac8:	2b00      	cmp	r3, #0
 8102aca:	d001      	beq.n	8102ad0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102acc:	2301      	movs	r3, #1
 8102ace:	e012      	b.n	8102af6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102ad0:	893b      	ldrh	r3, [r7, #8]
 8102ad2:	b2da      	uxtb	r2, r3
 8102ad4:	68fb      	ldr	r3, [r7, #12]
 8102ad6:	681b      	ldr	r3, [r3, #0]
 8102ad8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102ada:	69fb      	ldr	r3, [r7, #28]
 8102adc:	9300      	str	r3, [sp, #0]
 8102ade:	69bb      	ldr	r3, [r7, #24]
 8102ae0:	2200      	movs	r2, #0
 8102ae2:	2140      	movs	r1, #64	; 0x40
 8102ae4:	68f8      	ldr	r0, [r7, #12]
 8102ae6:	f000 f831 	bl	8102b4c <I2C_WaitOnFlagUntilTimeout>
 8102aea:	4603      	mov	r3, r0
 8102aec:	2b00      	cmp	r3, #0
 8102aee:	d001      	beq.n	8102af4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102af0:	2301      	movs	r3, #1
 8102af2:	e000      	b.n	8102af6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102af4:	2300      	movs	r3, #0
}
 8102af6:	4618      	mov	r0, r3
 8102af8:	3710      	adds	r7, #16
 8102afa:	46bd      	mov	sp, r7
 8102afc:	bd80      	pop	{r7, pc}
 8102afe:	bf00      	nop
 8102b00:	80002000 	.word	0x80002000

08102b04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102b04:	b480      	push	{r7}
 8102b06:	b083      	sub	sp, #12
 8102b08:	af00      	add	r7, sp, #0
 8102b0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102b0c:	687b      	ldr	r3, [r7, #4]
 8102b0e:	681b      	ldr	r3, [r3, #0]
 8102b10:	699b      	ldr	r3, [r3, #24]
 8102b12:	f003 0302 	and.w	r3, r3, #2
 8102b16:	2b02      	cmp	r3, #2
 8102b18:	d103      	bne.n	8102b22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	2200      	movs	r2, #0
 8102b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	699b      	ldr	r3, [r3, #24]
 8102b28:	f003 0301 	and.w	r3, r3, #1
 8102b2c:	2b01      	cmp	r3, #1
 8102b2e:	d007      	beq.n	8102b40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	699a      	ldr	r2, [r3, #24]
 8102b36:	687b      	ldr	r3, [r7, #4]
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	f042 0201 	orr.w	r2, r2, #1
 8102b3e:	619a      	str	r2, [r3, #24]
  }
}
 8102b40:	bf00      	nop
 8102b42:	370c      	adds	r7, #12
 8102b44:	46bd      	mov	sp, r7
 8102b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b4a:	4770      	bx	lr

08102b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8102b4c:	b580      	push	{r7, lr}
 8102b4e:	b084      	sub	sp, #16
 8102b50:	af00      	add	r7, sp, #0
 8102b52:	60f8      	str	r0, [r7, #12]
 8102b54:	60b9      	str	r1, [r7, #8]
 8102b56:	603b      	str	r3, [r7, #0]
 8102b58:	4613      	mov	r3, r2
 8102b5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102b5c:	e022      	b.n	8102ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102b5e:	683b      	ldr	r3, [r7, #0]
 8102b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b64:	d01e      	beq.n	8102ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102b66:	f7ff f945 	bl	8101df4 <HAL_GetTick>
 8102b6a:	4602      	mov	r2, r0
 8102b6c:	69bb      	ldr	r3, [r7, #24]
 8102b6e:	1ad3      	subs	r3, r2, r3
 8102b70:	683a      	ldr	r2, [r7, #0]
 8102b72:	429a      	cmp	r2, r3
 8102b74:	d302      	bcc.n	8102b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8102b76:	683b      	ldr	r3, [r7, #0]
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d113      	bne.n	8102ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b7c:	68fb      	ldr	r3, [r7, #12]
 8102b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102b80:	f043 0220 	orr.w	r2, r3, #32
 8102b84:	68fb      	ldr	r3, [r7, #12]
 8102b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	2220      	movs	r2, #32
 8102b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102b90:	68fb      	ldr	r3, [r7, #12]
 8102b92:	2200      	movs	r2, #0
 8102b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b98:	68fb      	ldr	r3, [r7, #12]
 8102b9a:	2200      	movs	r2, #0
 8102b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102ba0:	2301      	movs	r3, #1
 8102ba2:	e00f      	b.n	8102bc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102ba4:	68fb      	ldr	r3, [r7, #12]
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	699a      	ldr	r2, [r3, #24]
 8102baa:	68bb      	ldr	r3, [r7, #8]
 8102bac:	4013      	ands	r3, r2
 8102bae:	68ba      	ldr	r2, [r7, #8]
 8102bb0:	429a      	cmp	r2, r3
 8102bb2:	bf0c      	ite	eq
 8102bb4:	2301      	moveq	r3, #1
 8102bb6:	2300      	movne	r3, #0
 8102bb8:	b2db      	uxtb	r3, r3
 8102bba:	461a      	mov	r2, r3
 8102bbc:	79fb      	ldrb	r3, [r7, #7]
 8102bbe:	429a      	cmp	r2, r3
 8102bc0:	d0cd      	beq.n	8102b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8102bc2:	2300      	movs	r3, #0
}
 8102bc4:	4618      	mov	r0, r3
 8102bc6:	3710      	adds	r7, #16
 8102bc8:	46bd      	mov	sp, r7
 8102bca:	bd80      	pop	{r7, pc}

08102bcc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102bcc:	b580      	push	{r7, lr}
 8102bce:	b084      	sub	sp, #16
 8102bd0:	af00      	add	r7, sp, #0
 8102bd2:	60f8      	str	r0, [r7, #12]
 8102bd4:	60b9      	str	r1, [r7, #8]
 8102bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102bd8:	e02c      	b.n	8102c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102bda:	687a      	ldr	r2, [r7, #4]
 8102bdc:	68b9      	ldr	r1, [r7, #8]
 8102bde:	68f8      	ldr	r0, [r7, #12]
 8102be0:	f000 f870 	bl	8102cc4 <I2C_IsAcknowledgeFailed>
 8102be4:	4603      	mov	r3, r0
 8102be6:	2b00      	cmp	r3, #0
 8102be8:	d001      	beq.n	8102bee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102bea:	2301      	movs	r3, #1
 8102bec:	e02a      	b.n	8102c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102bee:	68bb      	ldr	r3, [r7, #8]
 8102bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102bf4:	d01e      	beq.n	8102c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102bf6:	f7ff f8fd 	bl	8101df4 <HAL_GetTick>
 8102bfa:	4602      	mov	r2, r0
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	1ad3      	subs	r3, r2, r3
 8102c00:	68ba      	ldr	r2, [r7, #8]
 8102c02:	429a      	cmp	r2, r3
 8102c04:	d302      	bcc.n	8102c0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102c06:	68bb      	ldr	r3, [r7, #8]
 8102c08:	2b00      	cmp	r3, #0
 8102c0a:	d113      	bne.n	8102c34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c10:	f043 0220 	orr.w	r2, r3, #32
 8102c14:	68fb      	ldr	r3, [r7, #12]
 8102c16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102c18:	68fb      	ldr	r3, [r7, #12]
 8102c1a:	2220      	movs	r2, #32
 8102c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	2200      	movs	r2, #0
 8102c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102c28:	68fb      	ldr	r3, [r7, #12]
 8102c2a:	2200      	movs	r2, #0
 8102c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102c30:	2301      	movs	r3, #1
 8102c32:	e007      	b.n	8102c44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	699b      	ldr	r3, [r3, #24]
 8102c3a:	f003 0302 	and.w	r3, r3, #2
 8102c3e:	2b02      	cmp	r3, #2
 8102c40:	d1cb      	bne.n	8102bda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102c42:	2300      	movs	r3, #0
}
 8102c44:	4618      	mov	r0, r3
 8102c46:	3710      	adds	r7, #16
 8102c48:	46bd      	mov	sp, r7
 8102c4a:	bd80      	pop	{r7, pc}

08102c4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102c4c:	b580      	push	{r7, lr}
 8102c4e:	b084      	sub	sp, #16
 8102c50:	af00      	add	r7, sp, #0
 8102c52:	60f8      	str	r0, [r7, #12]
 8102c54:	60b9      	str	r1, [r7, #8]
 8102c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102c58:	e028      	b.n	8102cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8102c5a:	687a      	ldr	r2, [r7, #4]
 8102c5c:	68b9      	ldr	r1, [r7, #8]
 8102c5e:	68f8      	ldr	r0, [r7, #12]
 8102c60:	f000 f830 	bl	8102cc4 <I2C_IsAcknowledgeFailed>
 8102c64:	4603      	mov	r3, r0
 8102c66:	2b00      	cmp	r3, #0
 8102c68:	d001      	beq.n	8102c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102c6a:	2301      	movs	r3, #1
 8102c6c:	e026      	b.n	8102cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102c6e:	f7ff f8c1 	bl	8101df4 <HAL_GetTick>
 8102c72:	4602      	mov	r2, r0
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	1ad3      	subs	r3, r2, r3
 8102c78:	68ba      	ldr	r2, [r7, #8]
 8102c7a:	429a      	cmp	r2, r3
 8102c7c:	d302      	bcc.n	8102c84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102c7e:	68bb      	ldr	r3, [r7, #8]
 8102c80:	2b00      	cmp	r3, #0
 8102c82:	d113      	bne.n	8102cac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c84:	68fb      	ldr	r3, [r7, #12]
 8102c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102c88:	f043 0220 	orr.w	r2, r3, #32
 8102c8c:	68fb      	ldr	r3, [r7, #12]
 8102c8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102c90:	68fb      	ldr	r3, [r7, #12]
 8102c92:	2220      	movs	r2, #32
 8102c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102c98:	68fb      	ldr	r3, [r7, #12]
 8102c9a:	2200      	movs	r2, #0
 8102c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102ca0:	68fb      	ldr	r3, [r7, #12]
 8102ca2:	2200      	movs	r2, #0
 8102ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102ca8:	2301      	movs	r3, #1
 8102caa:	e007      	b.n	8102cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102cac:	68fb      	ldr	r3, [r7, #12]
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	699b      	ldr	r3, [r3, #24]
 8102cb2:	f003 0320 	and.w	r3, r3, #32
 8102cb6:	2b20      	cmp	r3, #32
 8102cb8:	d1cf      	bne.n	8102c5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8102cba:	2300      	movs	r3, #0
}
 8102cbc:	4618      	mov	r0, r3
 8102cbe:	3710      	adds	r7, #16
 8102cc0:	46bd      	mov	sp, r7
 8102cc2:	bd80      	pop	{r7, pc}

08102cc4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102cc4:	b580      	push	{r7, lr}
 8102cc6:	b084      	sub	sp, #16
 8102cc8:	af00      	add	r7, sp, #0
 8102cca:	60f8      	str	r0, [r7, #12]
 8102ccc:	60b9      	str	r1, [r7, #8]
 8102cce:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	699b      	ldr	r3, [r3, #24]
 8102cd6:	f003 0310 	and.w	r3, r3, #16
 8102cda:	2b10      	cmp	r3, #16
 8102cdc:	d151      	bne.n	8102d82 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102cde:	e022      	b.n	8102d26 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102ce0:	68bb      	ldr	r3, [r7, #8]
 8102ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102ce6:	d01e      	beq.n	8102d26 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102ce8:	f7ff f884 	bl	8101df4 <HAL_GetTick>
 8102cec:	4602      	mov	r2, r0
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	1ad3      	subs	r3, r2, r3
 8102cf2:	68ba      	ldr	r2, [r7, #8]
 8102cf4:	429a      	cmp	r2, r3
 8102cf6:	d302      	bcc.n	8102cfe <I2C_IsAcknowledgeFailed+0x3a>
 8102cf8:	68bb      	ldr	r3, [r7, #8]
 8102cfa:	2b00      	cmp	r3, #0
 8102cfc:	d113      	bne.n	8102d26 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102cfe:	68fb      	ldr	r3, [r7, #12]
 8102d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d02:	f043 0220 	orr.w	r2, r3, #32
 8102d06:	68fb      	ldr	r3, [r7, #12]
 8102d08:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102d0a:	68fb      	ldr	r3, [r7, #12]
 8102d0c:	2220      	movs	r2, #32
 8102d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d12:	68fb      	ldr	r3, [r7, #12]
 8102d14:	2200      	movs	r2, #0
 8102d16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102d1a:	68fb      	ldr	r3, [r7, #12]
 8102d1c:	2200      	movs	r2, #0
 8102d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102d22:	2301      	movs	r3, #1
 8102d24:	e02e      	b.n	8102d84 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102d26:	68fb      	ldr	r3, [r7, #12]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	699b      	ldr	r3, [r3, #24]
 8102d2c:	f003 0320 	and.w	r3, r3, #32
 8102d30:	2b20      	cmp	r3, #32
 8102d32:	d1d5      	bne.n	8102ce0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102d34:	68fb      	ldr	r3, [r7, #12]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	2210      	movs	r2, #16
 8102d3a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102d3c:	68fb      	ldr	r3, [r7, #12]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	2220      	movs	r2, #32
 8102d42:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102d44:	68f8      	ldr	r0, [r7, #12]
 8102d46:	f7ff fedd 	bl	8102b04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102d4a:	68fb      	ldr	r3, [r7, #12]
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	6859      	ldr	r1, [r3, #4]
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	681a      	ldr	r2, [r3, #0]
 8102d54:	4b0d      	ldr	r3, [pc, #52]	; (8102d8c <I2C_IsAcknowledgeFailed+0xc8>)
 8102d56:	400b      	ands	r3, r1
 8102d58:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8102d5a:	68fb      	ldr	r3, [r7, #12]
 8102d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102d5e:	f043 0204 	orr.w	r2, r3, #4
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102d66:	68fb      	ldr	r3, [r7, #12]
 8102d68:	2220      	movs	r2, #32
 8102d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8102d6e:	68fb      	ldr	r3, [r7, #12]
 8102d70:	2200      	movs	r2, #0
 8102d72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102d76:	68fb      	ldr	r3, [r7, #12]
 8102d78:	2200      	movs	r2, #0
 8102d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102d7e:	2301      	movs	r3, #1
 8102d80:	e000      	b.n	8102d84 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102d82:	2300      	movs	r3, #0
}
 8102d84:	4618      	mov	r0, r3
 8102d86:	3710      	adds	r7, #16
 8102d88:	46bd      	mov	sp, r7
 8102d8a:	bd80      	pop	{r7, pc}
 8102d8c:	fe00e800 	.word	0xfe00e800

08102d90 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8102d90:	b480      	push	{r7}
 8102d92:	b085      	sub	sp, #20
 8102d94:	af00      	add	r7, sp, #0
 8102d96:	60f8      	str	r0, [r7, #12]
 8102d98:	607b      	str	r3, [r7, #4]
 8102d9a:	460b      	mov	r3, r1
 8102d9c:	817b      	strh	r3, [r7, #10]
 8102d9e:	4613      	mov	r3, r2
 8102da0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8102da2:	68fb      	ldr	r3, [r7, #12]
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	685a      	ldr	r2, [r3, #4]
 8102da8:	69bb      	ldr	r3, [r7, #24]
 8102daa:	0d5b      	lsrs	r3, r3, #21
 8102dac:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102db0:	4b0d      	ldr	r3, [pc, #52]	; (8102de8 <I2C_TransferConfig+0x58>)
 8102db2:	430b      	orrs	r3, r1
 8102db4:	43db      	mvns	r3, r3
 8102db6:	ea02 0103 	and.w	r1, r2, r3
 8102dba:	897b      	ldrh	r3, [r7, #10]
 8102dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8102dc0:	7a7b      	ldrb	r3, [r7, #9]
 8102dc2:	041b      	lsls	r3, r3, #16
 8102dc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8102dc8:	431a      	orrs	r2, r3
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	431a      	orrs	r2, r3
 8102dce:	69bb      	ldr	r3, [r7, #24]
 8102dd0:	431a      	orrs	r2, r3
 8102dd2:	68fb      	ldr	r3, [r7, #12]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	430a      	orrs	r2, r1
 8102dd8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8102dda:	bf00      	nop
 8102ddc:	3714      	adds	r7, #20
 8102dde:	46bd      	mov	sp, r7
 8102de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102de4:	4770      	bx	lr
 8102de6:	bf00      	nop
 8102de8:	03ff63ff 	.word	0x03ff63ff

08102dec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8102dec:	b480      	push	{r7}
 8102dee:	b083      	sub	sp, #12
 8102df0:	af00      	add	r7, sp, #0
 8102df2:	6078      	str	r0, [r7, #4]
 8102df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102dfc:	b2db      	uxtb	r3, r3
 8102dfe:	2b20      	cmp	r3, #32
 8102e00:	d138      	bne.n	8102e74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102e08:	2b01      	cmp	r3, #1
 8102e0a:	d101      	bne.n	8102e10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8102e0c:	2302      	movs	r3, #2
 8102e0e:	e032      	b.n	8102e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8102e10:	687b      	ldr	r3, [r7, #4]
 8102e12:	2201      	movs	r2, #1
 8102e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102e18:	687b      	ldr	r3, [r7, #4]
 8102e1a:	2224      	movs	r2, #36	; 0x24
 8102e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	681a      	ldr	r2, [r3, #0]
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	f022 0201 	bic.w	r2, r2, #1
 8102e2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	681b      	ldr	r3, [r3, #0]
 8102e34:	681a      	ldr	r2, [r3, #0]
 8102e36:	687b      	ldr	r3, [r7, #4]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8102e3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102e40:	687b      	ldr	r3, [r7, #4]
 8102e42:	681b      	ldr	r3, [r3, #0]
 8102e44:	6819      	ldr	r1, [r3, #0]
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	683a      	ldr	r2, [r7, #0]
 8102e4c:	430a      	orrs	r2, r1
 8102e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	681a      	ldr	r2, [r3, #0]
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	f042 0201 	orr.w	r2, r2, #1
 8102e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	2220      	movs	r2, #32
 8102e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102e68:	687b      	ldr	r3, [r7, #4]
 8102e6a:	2200      	movs	r2, #0
 8102e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102e70:	2300      	movs	r3, #0
 8102e72:	e000      	b.n	8102e76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102e74:	2302      	movs	r3, #2
  }
}
 8102e76:	4618      	mov	r0, r3
 8102e78:	370c      	adds	r7, #12
 8102e7a:	46bd      	mov	sp, r7
 8102e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e80:	4770      	bx	lr

08102e82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102e82:	b480      	push	{r7}
 8102e84:	b085      	sub	sp, #20
 8102e86:	af00      	add	r7, sp, #0
 8102e88:	6078      	str	r0, [r7, #4]
 8102e8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102e92:	b2db      	uxtb	r3, r3
 8102e94:	2b20      	cmp	r3, #32
 8102e96:	d139      	bne.n	8102f0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102e9e:	2b01      	cmp	r3, #1
 8102ea0:	d101      	bne.n	8102ea6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102ea2:	2302      	movs	r3, #2
 8102ea4:	e033      	b.n	8102f0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	2201      	movs	r2, #1
 8102eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102eae:	687b      	ldr	r3, [r7, #4]
 8102eb0:	2224      	movs	r2, #36	; 0x24
 8102eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	681a      	ldr	r2, [r3, #0]
 8102ebc:	687b      	ldr	r3, [r7, #4]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	f022 0201 	bic.w	r2, r2, #1
 8102ec4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	681b      	ldr	r3, [r3, #0]
 8102ecc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102ed4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8102ed6:	683b      	ldr	r3, [r7, #0]
 8102ed8:	021b      	lsls	r3, r3, #8
 8102eda:	68fa      	ldr	r2, [r7, #12]
 8102edc:	4313      	orrs	r3, r2
 8102ede:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	68fa      	ldr	r2, [r7, #12]
 8102ee6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	681b      	ldr	r3, [r3, #0]
 8102eec:	681a      	ldr	r2, [r3, #0]
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	681b      	ldr	r3, [r3, #0]
 8102ef2:	f042 0201 	orr.w	r2, r2, #1
 8102ef6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102ef8:	687b      	ldr	r3, [r7, #4]
 8102efa:	2220      	movs	r2, #32
 8102efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102f00:	687b      	ldr	r3, [r7, #4]
 8102f02:	2200      	movs	r2, #0
 8102f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102f08:	2300      	movs	r3, #0
 8102f0a:	e000      	b.n	8102f0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8102f0c:	2302      	movs	r3, #2
  }
}
 8102f0e:	4618      	mov	r0, r3
 8102f10:	3714      	adds	r7, #20
 8102f12:	46bd      	mov	sp, r7
 8102f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f18:	4770      	bx	lr
	...

08102f1c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102f1c:	b580      	push	{r7, lr}
 8102f1e:	b084      	sub	sp, #16
 8102f20:	af00      	add	r7, sp, #0
 8102f22:	60f8      	str	r0, [r7, #12]
 8102f24:	460b      	mov	r3, r1
 8102f26:	607a      	str	r2, [r7, #4]
 8102f28:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102f2a:	4b35      	ldr	r3, [pc, #212]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f2c:	681b      	ldr	r3, [r3, #0]
 8102f2e:	f023 0201 	bic.w	r2, r3, #1
 8102f32:	4933      	ldr	r1, [pc, #204]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f34:	68fb      	ldr	r3, [r7, #12]
 8102f36:	4313      	orrs	r3, r2
 8102f38:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	2b00      	cmp	r3, #0
 8102f3e:	d121      	bne.n	8102f84 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102f40:	f7ff f866 	bl	8102010 <HAL_GetCurrentCPUID>
 8102f44:	4603      	mov	r3, r0
 8102f46:	2b03      	cmp	r3, #3
 8102f48:	d154      	bne.n	8102ff4 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102f4a:	4b2d      	ldr	r3, [pc, #180]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f4c:	691b      	ldr	r3, [r3, #16]
 8102f4e:	4a2c      	ldr	r2, [pc, #176]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f50:	f023 0301 	bic.w	r3, r3, #1
 8102f54:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f56:	4b2b      	ldr	r3, [pc, #172]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102f58:	691b      	ldr	r3, [r3, #16]
 8102f5a:	4a2a      	ldr	r2, [pc, #168]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102f5c:	f043 0304 	orr.w	r3, r3, #4
 8102f60:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8102f66:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102f6a:	7afb      	ldrb	r3, [r7, #11]
 8102f6c:	2b01      	cmp	r3, #1
 8102f6e:	d101      	bne.n	8102f74 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102f70:	bf30      	wfi
 8102f72:	e000      	b.n	8102f76 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102f74:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f76:	4b23      	ldr	r3, [pc, #140]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102f78:	691b      	ldr	r3, [r3, #16]
 8102f7a:	4a22      	ldr	r2, [pc, #136]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102f7c:	f023 0304 	bic.w	r3, r3, #4
 8102f80:	6113      	str	r3, [r2, #16]
 8102f82:	e03a      	b.n	8102ffa <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	2b01      	cmp	r3, #1
 8102f88:	d121      	bne.n	8102fce <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102f8a:	f7ff f841 	bl	8102010 <HAL_GetCurrentCPUID>
 8102f8e:	4603      	mov	r3, r0
 8102f90:	2b01      	cmp	r3, #1
 8102f92:	d131      	bne.n	8102ff8 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102f94:	4b1a      	ldr	r3, [pc, #104]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f96:	695b      	ldr	r3, [r3, #20]
 8102f98:	4a19      	ldr	r2, [pc, #100]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102f9a:	f023 0302 	bic.w	r3, r3, #2
 8102f9e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fa0:	4b18      	ldr	r3, [pc, #96]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102fa2:	691b      	ldr	r3, [r3, #16]
 8102fa4:	4a17      	ldr	r2, [pc, #92]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102fa6:	f043 0304 	orr.w	r3, r3, #4
 8102faa:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102fac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8102fb0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102fb4:	7afb      	ldrb	r3, [r7, #11]
 8102fb6:	2b01      	cmp	r3, #1
 8102fb8:	d101      	bne.n	8102fbe <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102fba:	bf30      	wfi
 8102fbc:	e000      	b.n	8102fc0 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102fbe:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fc0:	4b10      	ldr	r3, [pc, #64]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102fc2:	691b      	ldr	r3, [r3, #16]
 8102fc4:	4a0f      	ldr	r2, [pc, #60]	; (8103004 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102fc6:	f023 0304 	bic.w	r3, r3, #4
 8102fca:	6113      	str	r3, [r2, #16]
 8102fcc:	e015      	b.n	8102ffa <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102fce:	f7ff f81f 	bl	8102010 <HAL_GetCurrentCPUID>
 8102fd2:	4603      	mov	r3, r0
 8102fd4:	2b03      	cmp	r3, #3
 8102fd6:	d106      	bne.n	8102fe6 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102fd8:	4b09      	ldr	r3, [pc, #36]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102fda:	691b      	ldr	r3, [r3, #16]
 8102fdc:	4a08      	ldr	r2, [pc, #32]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102fde:	f023 0304 	bic.w	r3, r3, #4
 8102fe2:	6113      	str	r3, [r2, #16]
 8102fe4:	e009      	b.n	8102ffa <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102fe6:	4b06      	ldr	r3, [pc, #24]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102fe8:	695b      	ldr	r3, [r3, #20]
 8102fea:	4a05      	ldr	r2, [pc, #20]	; (8103000 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102fec:	f023 0304 	bic.w	r3, r3, #4
 8102ff0:	6153      	str	r3, [r2, #20]
 8102ff2:	e002      	b.n	8102ffa <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8102ff4:	bf00      	nop
 8102ff6:	e000      	b.n	8102ffa <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8102ff8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102ffa:	3710      	adds	r7, #16
 8102ffc:	46bd      	mov	sp, r7
 8102ffe:	bd80      	pop	{r7, pc}
 8103000:	58024800 	.word	0x58024800
 8103004:	e000ed00 	.word	0xe000ed00

08103008 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103008:	b580      	push	{r7, lr}
 810300a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810300c:	f7ff f800 	bl	8102010 <HAL_GetCurrentCPUID>
 8103010:	4603      	mov	r3, r0
 8103012:	2b03      	cmp	r3, #3
 8103014:	d101      	bne.n	810301a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103016:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103018:	e001      	b.n	810301e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810301a:	bf40      	sev
    __WFE ();
 810301c:	bf20      	wfe
}
 810301e:	bf00      	nop
 8103020:	bd80      	pop	{r7, pc}
	...

08103024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103024:	b480      	push	{r7}
 8103026:	b089      	sub	sp, #36	; 0x24
 8103028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810302a:	4baf      	ldr	r3, [pc, #700]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810302c:	691b      	ldr	r3, [r3, #16]
 810302e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103032:	2b18      	cmp	r3, #24
 8103034:	f200 814e 	bhi.w	81032d4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8103038:	a201      	add	r2, pc, #4	; (adr r2, 8103040 <HAL_RCC_GetSysClockFreq+0x1c>)
 810303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810303e:	bf00      	nop
 8103040:	081030a5 	.word	0x081030a5
 8103044:	081032d5 	.word	0x081032d5
 8103048:	081032d5 	.word	0x081032d5
 810304c:	081032d5 	.word	0x081032d5
 8103050:	081032d5 	.word	0x081032d5
 8103054:	081032d5 	.word	0x081032d5
 8103058:	081032d5 	.word	0x081032d5
 810305c:	081032d5 	.word	0x081032d5
 8103060:	081030cb 	.word	0x081030cb
 8103064:	081032d5 	.word	0x081032d5
 8103068:	081032d5 	.word	0x081032d5
 810306c:	081032d5 	.word	0x081032d5
 8103070:	081032d5 	.word	0x081032d5
 8103074:	081032d5 	.word	0x081032d5
 8103078:	081032d5 	.word	0x081032d5
 810307c:	081032d5 	.word	0x081032d5
 8103080:	081030d1 	.word	0x081030d1
 8103084:	081032d5 	.word	0x081032d5
 8103088:	081032d5 	.word	0x081032d5
 810308c:	081032d5 	.word	0x081032d5
 8103090:	081032d5 	.word	0x081032d5
 8103094:	081032d5 	.word	0x081032d5
 8103098:	081032d5 	.word	0x081032d5
 810309c:	081032d5 	.word	0x081032d5
 81030a0:	081030d7 	.word	0x081030d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81030a4:	4b90      	ldr	r3, [pc, #576]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	f003 0320 	and.w	r3, r3, #32
 81030ac:	2b00      	cmp	r3, #0
 81030ae:	d009      	beq.n	81030c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81030b0:	4b8d      	ldr	r3, [pc, #564]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	08db      	lsrs	r3, r3, #3
 81030b6:	f003 0303 	and.w	r3, r3, #3
 81030ba:	4a8c      	ldr	r2, [pc, #560]	; (81032ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 81030bc:	fa22 f303 	lsr.w	r3, r2, r3
 81030c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81030c2:	e10a      	b.n	81032da <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81030c4:	4b89      	ldr	r3, [pc, #548]	; (81032ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 81030c6:	61bb      	str	r3, [r7, #24]
    break;
 81030c8:	e107      	b.n	81032da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81030ca:	4b89      	ldr	r3, [pc, #548]	; (81032f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81030cc:	61bb      	str	r3, [r7, #24]
    break;
 81030ce:	e104      	b.n	81032da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81030d0:	4b88      	ldr	r3, [pc, #544]	; (81032f4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 81030d2:	61bb      	str	r3, [r7, #24]
    break;
 81030d4:	e101      	b.n	81032da <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81030d6:	4b84      	ldr	r3, [pc, #528]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030da:	f003 0303 	and.w	r3, r3, #3
 81030de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81030e0:	4b81      	ldr	r3, [pc, #516]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030e4:	091b      	lsrs	r3, r3, #4
 81030e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81030ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81030ec:	4b7e      	ldr	r3, [pc, #504]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030f0:	f003 0301 	and.w	r3, r3, #1
 81030f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81030f6:	4b7c      	ldr	r3, [pc, #496]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81030fa:	08db      	lsrs	r3, r3, #3
 81030fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103100:	68fa      	ldr	r2, [r7, #12]
 8103102:	fb02 f303 	mul.w	r3, r2, r3
 8103106:	ee07 3a90 	vmov	s15, r3
 810310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810310e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103112:	693b      	ldr	r3, [r7, #16]
 8103114:	2b00      	cmp	r3, #0
 8103116:	f000 80da 	beq.w	81032ce <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 810311a:	697b      	ldr	r3, [r7, #20]
 810311c:	2b01      	cmp	r3, #1
 810311e:	d05a      	beq.n	81031d6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8103120:	2b01      	cmp	r3, #1
 8103122:	d302      	bcc.n	810312a <HAL_RCC_GetSysClockFreq+0x106>
 8103124:	2b02      	cmp	r3, #2
 8103126:	d078      	beq.n	810321a <HAL_RCC_GetSysClockFreq+0x1f6>
 8103128:	e099      	b.n	810325e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810312a:	4b6f      	ldr	r3, [pc, #444]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810312c:	681b      	ldr	r3, [r3, #0]
 810312e:	f003 0320 	and.w	r3, r3, #32
 8103132:	2b00      	cmp	r3, #0
 8103134:	d02d      	beq.n	8103192 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103136:	4b6c      	ldr	r3, [pc, #432]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	08db      	lsrs	r3, r3, #3
 810313c:	f003 0303 	and.w	r3, r3, #3
 8103140:	4a6a      	ldr	r2, [pc, #424]	; (81032ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 8103142:	fa22 f303 	lsr.w	r3, r2, r3
 8103146:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103148:	687b      	ldr	r3, [r7, #4]
 810314a:	ee07 3a90 	vmov	s15, r3
 810314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103152:	693b      	ldr	r3, [r7, #16]
 8103154:	ee07 3a90 	vmov	s15, r3
 8103158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810315c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103160:	4b61      	ldr	r3, [pc, #388]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103168:	ee07 3a90 	vmov	s15, r3
 810316c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103170:	ed97 6a02 	vldr	s12, [r7, #8]
 8103174:	eddf 5a60 	vldr	s11, [pc, #384]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810317c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103188:	ee67 7a27 	vmul.f32	s15, s14, s15
 810318c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103190:	e087      	b.n	81032a2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103192:	693b      	ldr	r3, [r7, #16]
 8103194:	ee07 3a90 	vmov	s15, r3
 8103198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810319c:	eddf 6a57 	vldr	s13, [pc, #348]	; 81032fc <HAL_RCC_GetSysClockFreq+0x2d8>
 81031a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031a4:	4b50      	ldr	r3, [pc, #320]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031ac:	ee07 3a90 	vmov	s15, r3
 81031b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031b4:	ed97 6a02 	vldr	s12, [r7, #8]
 81031b8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 81031bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81031d4:	e065      	b.n	81032a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81031d6:	693b      	ldr	r3, [r7, #16]
 81031d8:	ee07 3a90 	vmov	s15, r3
 81031dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031e0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8103300 <HAL_RCC_GetSysClockFreq+0x2dc>
 81031e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031e8:	4b3f      	ldr	r3, [pc, #252]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031f0:	ee07 3a90 	vmov	s15, r3
 81031f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031f8:	ed97 6a02 	vldr	s12, [r7, #8]
 81031fc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810320c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103218:	e043      	b.n	81032a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810321a:	693b      	ldr	r3, [r7, #16]
 810321c:	ee07 3a90 	vmov	s15, r3
 8103220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103224:	eddf 6a37 	vldr	s13, [pc, #220]	; 8103304 <HAL_RCC_GetSysClockFreq+0x2e0>
 8103228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810322c:	4b2e      	ldr	r3, [pc, #184]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103234:	ee07 3a90 	vmov	s15, r3
 8103238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810323c:	ed97 6a02 	vldr	s12, [r7, #8]
 8103240:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810324c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810325c:	e021      	b.n	81032a2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810325e:	693b      	ldr	r3, [r7, #16]
 8103260:	ee07 3a90 	vmov	s15, r3
 8103264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103268:	eddf 6a25 	vldr	s13, [pc, #148]	; 8103300 <HAL_RCC_GetSysClockFreq+0x2dc>
 810326c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103270:	4b1d      	ldr	r3, [pc, #116]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8103272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103278:	ee07 3a90 	vmov	s15, r3
 810327c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103280:	ed97 6a02 	vldr	s12, [r7, #8]
 8103284:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8103288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810328c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103298:	ee67 7a27 	vmul.f32	s15, s14, s15
 810329c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81032a0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81032a2:	4b11      	ldr	r3, [pc, #68]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81032a6:	0a5b      	lsrs	r3, r3, #9
 81032a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81032ac:	3301      	adds	r3, #1
 81032ae:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81032b0:	683b      	ldr	r3, [r7, #0]
 81032b2:	ee07 3a90 	vmov	s15, r3
 81032b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81032ba:	edd7 6a07 	vldr	s13, [r7, #28]
 81032be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032c6:	ee17 3a90 	vmov	r3, s15
 81032ca:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81032cc:	e005      	b.n	81032da <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 81032ce:	2300      	movs	r3, #0
 81032d0:	61bb      	str	r3, [r7, #24]
    break;
 81032d2:	e002      	b.n	81032da <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81032d4:	4b06      	ldr	r3, [pc, #24]	; (81032f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81032d6:	61bb      	str	r3, [r7, #24]
    break;
 81032d8:	bf00      	nop
  }

  return sysclockfreq;
 81032da:	69bb      	ldr	r3, [r7, #24]
}
 81032dc:	4618      	mov	r0, r3
 81032de:	3724      	adds	r7, #36	; 0x24
 81032e0:	46bd      	mov	sp, r7
 81032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032e6:	4770      	bx	lr
 81032e8:	58024400 	.word	0x58024400
 81032ec:	03d09000 	.word	0x03d09000
 81032f0:	003d0900 	.word	0x003d0900
 81032f4:	007a1200 	.word	0x007a1200
 81032f8:	46000000 	.word	0x46000000
 81032fc:	4c742400 	.word	0x4c742400
 8103300:	4a742400 	.word	0x4a742400
 8103304:	4af42400 	.word	0x4af42400

08103308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103308:	b580      	push	{r7, lr}
 810330a:	b082      	sub	sp, #8
 810330c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810330e:	f7ff fe89 	bl	8103024 <HAL_RCC_GetSysClockFreq>
 8103312:	4601      	mov	r1, r0
 8103314:	4b11      	ldr	r3, [pc, #68]	; (810335c <HAL_RCC_GetHCLKFreq+0x54>)
 8103316:	699b      	ldr	r3, [r3, #24]
 8103318:	0a1b      	lsrs	r3, r3, #8
 810331a:	f003 030f 	and.w	r3, r3, #15
 810331e:	4a10      	ldr	r2, [pc, #64]	; (8103360 <HAL_RCC_GetHCLKFreq+0x58>)
 8103320:	5cd3      	ldrb	r3, [r2, r3]
 8103322:	f003 031f 	and.w	r3, r3, #31
 8103326:	fa21 f303 	lsr.w	r3, r1, r3
 810332a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810332c:	4b0b      	ldr	r3, [pc, #44]	; (810335c <HAL_RCC_GetHCLKFreq+0x54>)
 810332e:	699b      	ldr	r3, [r3, #24]
 8103330:	f003 030f 	and.w	r3, r3, #15
 8103334:	4a0a      	ldr	r2, [pc, #40]	; (8103360 <HAL_RCC_GetHCLKFreq+0x58>)
 8103336:	5cd3      	ldrb	r3, [r2, r3]
 8103338:	f003 031f 	and.w	r3, r3, #31
 810333c:	687a      	ldr	r2, [r7, #4]
 810333e:	fa22 f303 	lsr.w	r3, r2, r3
 8103342:	4a08      	ldr	r2, [pc, #32]	; (8103364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103344:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103346:	4b07      	ldr	r3, [pc, #28]	; (8103364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103348:	681b      	ldr	r3, [r3, #0]
 810334a:	4a07      	ldr	r2, [pc, #28]	; (8103368 <HAL_RCC_GetHCLKFreq+0x60>)
 810334c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810334e:	4b05      	ldr	r3, [pc, #20]	; (8103364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103350:	681b      	ldr	r3, [r3, #0]
}
 8103352:	4618      	mov	r0, r3
 8103354:	3708      	adds	r7, #8
 8103356:	46bd      	mov	sp, r7
 8103358:	bd80      	pop	{r7, pc}
 810335a:	bf00      	nop
 810335c:	58024400 	.word	0x58024400
 8103360:	0810ac24 	.word	0x0810ac24
 8103364:	10000004 	.word	0x10000004
 8103368:	10000000 	.word	0x10000000

0810336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810336c:	b580      	push	{r7, lr}
 810336e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103370:	f7ff ffca 	bl	8103308 <HAL_RCC_GetHCLKFreq>
 8103374:	4601      	mov	r1, r0
 8103376:	4b06      	ldr	r3, [pc, #24]	; (8103390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103378:	69db      	ldr	r3, [r3, #28]
 810337a:	091b      	lsrs	r3, r3, #4
 810337c:	f003 0307 	and.w	r3, r3, #7
 8103380:	4a04      	ldr	r2, [pc, #16]	; (8103394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103382:	5cd3      	ldrb	r3, [r2, r3]
 8103384:	f003 031f 	and.w	r3, r3, #31
 8103388:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810338c:	4618      	mov	r0, r3
 810338e:	bd80      	pop	{r7, pc}
 8103390:	58024400 	.word	0x58024400
 8103394:	0810ac24 	.word	0x0810ac24

08103398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103398:	b580      	push	{r7, lr}
 810339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810339c:	f7ff ffb4 	bl	8103308 <HAL_RCC_GetHCLKFreq>
 81033a0:	4601      	mov	r1, r0
 81033a2:	4b06      	ldr	r3, [pc, #24]	; (81033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 81033a4:	69db      	ldr	r3, [r3, #28]
 81033a6:	0a1b      	lsrs	r3, r3, #8
 81033a8:	f003 0307 	and.w	r3, r3, #7
 81033ac:	4a04      	ldr	r2, [pc, #16]	; (81033c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81033ae:	5cd3      	ldrb	r3, [r2, r3]
 81033b0:	f003 031f 	and.w	r3, r3, #31
 81033b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81033b8:	4618      	mov	r0, r3
 81033ba:	bd80      	pop	{r7, pc}
 81033bc:	58024400 	.word	0x58024400
 81033c0:	0810ac24 	.word	0x0810ac24

081033c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81033c4:	b480      	push	{r7}
 81033c6:	b083      	sub	sp, #12
 81033c8:	af00      	add	r7, sp, #0
 81033ca:	6078      	str	r0, [r7, #4]
 81033cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	223f      	movs	r2, #63	; 0x3f
 81033d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81033d4:	4b1a      	ldr	r3, [pc, #104]	; (8103440 <HAL_RCC_GetClockConfig+0x7c>)
 81033d6:	691b      	ldr	r3, [r3, #16]
 81033d8:	f003 0207 	and.w	r2, r3, #7
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81033e0:	4b17      	ldr	r3, [pc, #92]	; (8103440 <HAL_RCC_GetClockConfig+0x7c>)
 81033e2:	699b      	ldr	r3, [r3, #24]
 81033e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81033ec:	4b14      	ldr	r3, [pc, #80]	; (8103440 <HAL_RCC_GetClockConfig+0x7c>)
 81033ee:	699b      	ldr	r3, [r3, #24]
 81033f0:	f003 020f 	and.w	r2, r3, #15
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81033f8:	4b11      	ldr	r3, [pc, #68]	; (8103440 <HAL_RCC_GetClockConfig+0x7c>)
 81033fa:	699b      	ldr	r3, [r3, #24]
 81033fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103404:	4b0e      	ldr	r3, [pc, #56]	; (8103440 <HAL_RCC_GetClockConfig+0x7c>)
 8103406:	69db      	ldr	r3, [r3, #28]
 8103408:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103410:	4b0b      	ldr	r3, [pc, #44]	; (8103440 <HAL_RCC_GetClockConfig+0x7c>)
 8103412:	69db      	ldr	r3, [r3, #28]
 8103414:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810341c:	4b08      	ldr	r3, [pc, #32]	; (8103440 <HAL_RCC_GetClockConfig+0x7c>)
 810341e:	6a1b      	ldr	r3, [r3, #32]
 8103420:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103428:	4b06      	ldr	r3, [pc, #24]	; (8103444 <HAL_RCC_GetClockConfig+0x80>)
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	f003 020f 	and.w	r2, r3, #15
 8103430:	683b      	ldr	r3, [r7, #0]
 8103432:	601a      	str	r2, [r3, #0]
}
 8103434:	bf00      	nop
 8103436:	370c      	adds	r7, #12
 8103438:	46bd      	mov	sp, r7
 810343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810343e:	4770      	bx	lr
 8103440:	58024400 	.word	0x58024400
 8103444:	52002000 	.word	0x52002000

08103448 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103448:	b580      	push	{r7, lr}
 810344a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810344c:	f7ff ff5c 	bl	8103308 <HAL_RCC_GetHCLKFreq>
 8103450:	4601      	mov	r1, r0
 8103452:	4b06      	ldr	r3, [pc, #24]	; (810346c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103454:	6a1b      	ldr	r3, [r3, #32]
 8103456:	091b      	lsrs	r3, r3, #4
 8103458:	f003 0307 	and.w	r3, r3, #7
 810345c:	4a04      	ldr	r2, [pc, #16]	; (8103470 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810345e:	5cd3      	ldrb	r3, [r2, r3]
 8103460:	f003 031f 	and.w	r3, r3, #31
 8103464:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103468:	4618      	mov	r0, r3
 810346a:	bd80      	pop	{r7, pc}
 810346c:	58024400 	.word	0x58024400
 8103470:	0810ac24 	.word	0x0810ac24

08103474 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103474:	b480      	push	{r7}
 8103476:	b089      	sub	sp, #36	; 0x24
 8103478:	af00      	add	r7, sp, #0
 810347a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810347c:	4b9d      	ldr	r3, [pc, #628]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103480:	f003 0303 	and.w	r3, r3, #3
 8103484:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103486:	4b9b      	ldr	r3, [pc, #620]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8103488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810348a:	0b1b      	lsrs	r3, r3, #12
 810348c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103490:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103492:	4b98      	ldr	r3, [pc, #608]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8103494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103496:	091b      	lsrs	r3, r3, #4
 8103498:	f003 0301 	and.w	r3, r3, #1
 810349c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810349e:	4b95      	ldr	r3, [pc, #596]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81034a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81034a2:	08db      	lsrs	r3, r3, #3
 81034a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81034a8:	693a      	ldr	r2, [r7, #16]
 81034aa:	fb02 f303 	mul.w	r3, r2, r3
 81034ae:	ee07 3a90 	vmov	s15, r3
 81034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81034ba:	697b      	ldr	r3, [r7, #20]
 81034bc:	2b00      	cmp	r3, #0
 81034be:	f000 810a 	beq.w	81036d6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81034c2:	69bb      	ldr	r3, [r7, #24]
 81034c4:	2b01      	cmp	r3, #1
 81034c6:	d05a      	beq.n	810357e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81034c8:	2b01      	cmp	r3, #1
 81034ca:	d302      	bcc.n	81034d2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81034cc:	2b02      	cmp	r3, #2
 81034ce:	d078      	beq.n	81035c2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81034d0:	e099      	b.n	8103606 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81034d2:	4b88      	ldr	r3, [pc, #544]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81034d4:	681b      	ldr	r3, [r3, #0]
 81034d6:	f003 0320 	and.w	r3, r3, #32
 81034da:	2b00      	cmp	r3, #0
 81034dc:	d02d      	beq.n	810353a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81034de:	4b85      	ldr	r3, [pc, #532]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	08db      	lsrs	r3, r3, #3
 81034e4:	f003 0303 	and.w	r3, r3, #3
 81034e8:	4a83      	ldr	r2, [pc, #524]	; (81036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 81034ea:	fa22 f303 	lsr.w	r3, r2, r3
 81034ee:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81034f0:	68bb      	ldr	r3, [r7, #8]
 81034f2:	ee07 3a90 	vmov	s15, r3
 81034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034fa:	697b      	ldr	r3, [r7, #20]
 81034fc:	ee07 3a90 	vmov	s15, r3
 8103500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103508:	4b7a      	ldr	r3, [pc, #488]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810350a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810350c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103510:	ee07 3a90 	vmov	s15, r3
 8103514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103518:	ed97 6a03 	vldr	s12, [r7, #12]
 810351c:	eddf 5a77 	vldr	s11, [pc, #476]	; 81036fc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8103520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810352c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103534:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103538:	e087      	b.n	810364a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810353a:	697b      	ldr	r3, [r7, #20]
 810353c:	ee07 3a90 	vmov	s15, r3
 8103540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103544:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8103700 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8103548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810354c:	4b69      	ldr	r3, [pc, #420]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810354e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103554:	ee07 3a90 	vmov	s15, r3
 8103558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810355c:	ed97 6a03 	vldr	s12, [r7, #12]
 8103560:	eddf 5a66 	vldr	s11, [pc, #408]	; 81036fc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8103564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810356c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810357c:	e065      	b.n	810364a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810357e:	697b      	ldr	r3, [r7, #20]
 8103580:	ee07 3a90 	vmov	s15, r3
 8103584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103588:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8103704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 810358c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103590:	4b58      	ldr	r3, [pc, #352]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8103592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103598:	ee07 3a90 	vmov	s15, r3
 810359c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81035a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 81036fc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81035a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81035c0:	e043      	b.n	810364a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81035c2:	697b      	ldr	r3, [r7, #20]
 81035c4:	ee07 3a90 	vmov	s15, r3
 81035c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8103708 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81035d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035d4:	4b47      	ldr	r3, [pc, #284]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81035d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035dc:	ee07 3a90 	vmov	s15, r3
 81035e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81035e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 81036fc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81035ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103600:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103604:	e021      	b.n	810364a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103606:	697b      	ldr	r3, [r7, #20]
 8103608:	ee07 3a90 	vmov	s15, r3
 810360c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103610:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8103704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8103614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103618:	4b36      	ldr	r3, [pc, #216]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103620:	ee07 3a90 	vmov	s15, r3
 8103624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103628:	ed97 6a03 	vldr	s12, [r7, #12]
 810362c:	eddf 5a33 	vldr	s11, [pc, #204]	; 81036fc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8103630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810363c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103644:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103648:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810364a:	4b2a      	ldr	r3, [pc, #168]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810364e:	0a5b      	lsrs	r3, r3, #9
 8103650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103654:	ee07 3a90 	vmov	s15, r3
 8103658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810365c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103660:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103664:	edd7 6a07 	vldr	s13, [r7, #28]
 8103668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810366c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103670:	ee17 2a90 	vmov	r2, s15
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103678:	4b1e      	ldr	r3, [pc, #120]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810367c:	0c1b      	lsrs	r3, r3, #16
 810367e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103682:	ee07 3a90 	vmov	s15, r3
 8103686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810368a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810368e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103692:	edd7 6a07 	vldr	s13, [r7, #28]
 8103696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810369a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810369e:	ee17 2a90 	vmov	r2, s15
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81036a6:	4b13      	ldr	r3, [pc, #76]	; (81036f4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81036aa:	0e1b      	lsrs	r3, r3, #24
 81036ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81036b0:	ee07 3a90 	vmov	s15, r3
 81036b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81036bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81036c0:	edd7 6a07 	vldr	s13, [r7, #28]
 81036c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81036c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81036cc:	ee17 2a90 	vmov	r2, s15
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81036d4:	e008      	b.n	81036e8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	2200      	movs	r2, #0
 81036da:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	2200      	movs	r2, #0
 81036e0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	2200      	movs	r2, #0
 81036e6:	609a      	str	r2, [r3, #8]
}
 81036e8:	bf00      	nop
 81036ea:	3724      	adds	r7, #36	; 0x24
 81036ec:	46bd      	mov	sp, r7
 81036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036f2:	4770      	bx	lr
 81036f4:	58024400 	.word	0x58024400
 81036f8:	03d09000 	.word	0x03d09000
 81036fc:	46000000 	.word	0x46000000
 8103700:	4c742400 	.word	0x4c742400
 8103704:	4a742400 	.word	0x4a742400
 8103708:	4af42400 	.word	0x4af42400

0810370c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810370c:	b480      	push	{r7}
 810370e:	b089      	sub	sp, #36	; 0x24
 8103710:	af00      	add	r7, sp, #0
 8103712:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103714:	4b9d      	ldr	r3, [pc, #628]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103718:	f003 0303 	and.w	r3, r3, #3
 810371c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810371e:	4b9b      	ldr	r3, [pc, #620]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103722:	0d1b      	lsrs	r3, r3, #20
 8103724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103728:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810372a:	4b98      	ldr	r3, [pc, #608]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810372e:	0a1b      	lsrs	r3, r3, #8
 8103730:	f003 0301 	and.w	r3, r3, #1
 8103734:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8103736:	4b95      	ldr	r3, [pc, #596]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810373a:	08db      	lsrs	r3, r3, #3
 810373c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103740:	693a      	ldr	r2, [r7, #16]
 8103742:	fb02 f303 	mul.w	r3, r2, r3
 8103746:	ee07 3a90 	vmov	s15, r3
 810374a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810374e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103752:	697b      	ldr	r3, [r7, #20]
 8103754:	2b00      	cmp	r3, #0
 8103756:	f000 810a 	beq.w	810396e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 810375a:	69bb      	ldr	r3, [r7, #24]
 810375c:	2b01      	cmp	r3, #1
 810375e:	d05a      	beq.n	8103816 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8103760:	2b01      	cmp	r3, #1
 8103762:	d302      	bcc.n	810376a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8103764:	2b02      	cmp	r3, #2
 8103766:	d078      	beq.n	810385a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8103768:	e099      	b.n	810389e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810376a:	4b88      	ldr	r3, [pc, #544]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	f003 0320 	and.w	r3, r3, #32
 8103772:	2b00      	cmp	r3, #0
 8103774:	d02d      	beq.n	81037d2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103776:	4b85      	ldr	r3, [pc, #532]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103778:	681b      	ldr	r3, [r3, #0]
 810377a:	08db      	lsrs	r3, r3, #3
 810377c:	f003 0303 	and.w	r3, r3, #3
 8103780:	4a83      	ldr	r2, [pc, #524]	; (8103990 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8103782:	fa22 f303 	lsr.w	r3, r2, r3
 8103786:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103788:	68bb      	ldr	r3, [r7, #8]
 810378a:	ee07 3a90 	vmov	s15, r3
 810378e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103792:	697b      	ldr	r3, [r7, #20]
 8103794:	ee07 3a90 	vmov	s15, r3
 8103798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810379c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037a0:	4b7a      	ldr	r3, [pc, #488]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81037a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037a8:	ee07 3a90 	vmov	s15, r3
 81037ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81037b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8103994 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81037b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81037d0:	e087      	b.n	81038e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81037d2:	697b      	ldr	r3, [r7, #20]
 81037d4:	ee07 3a90 	vmov	s15, r3
 81037d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8103998 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 81037e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037e4:	4b69      	ldr	r3, [pc, #420]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037ec:	ee07 3a90 	vmov	s15, r3
 81037f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037f4:	ed97 6a03 	vldr	s12, [r7, #12]
 81037f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8103994 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81037fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103800:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103804:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103808:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810380c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103810:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103814:	e065      	b.n	81038e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103816:	697b      	ldr	r3, [r7, #20]
 8103818:	ee07 3a90 	vmov	s15, r3
 810381c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103820:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810399c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8103824:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103828:	4b58      	ldr	r3, [pc, #352]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810382a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810382c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103830:	ee07 3a90 	vmov	s15, r3
 8103834:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103838:	ed97 6a03 	vldr	s12, [r7, #12]
 810383c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8103994 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8103840:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103844:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103848:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810384c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103854:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103858:	e043      	b.n	81038e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810385a:	697b      	ldr	r3, [r7, #20]
 810385c:	ee07 3a90 	vmov	s15, r3
 8103860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103864:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81039a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8103868:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810386c:	4b47      	ldr	r3, [pc, #284]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103874:	ee07 3a90 	vmov	s15, r3
 8103878:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810387c:	ed97 6a03 	vldr	s12, [r7, #12]
 8103880:	eddf 5a44 	vldr	s11, [pc, #272]	; 8103994 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8103884:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103888:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810388c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103890:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103898:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810389c:	e021      	b.n	81038e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810389e:	697b      	ldr	r3, [r7, #20]
 81038a0:	ee07 3a90 	vmov	s15, r3
 81038a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038a8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 810399c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81038ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038b0:	4b36      	ldr	r3, [pc, #216]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038b8:	ee07 3a90 	vmov	s15, r3
 81038bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038c0:	ed97 6a03 	vldr	s12, [r7, #12]
 81038c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8103994 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81038c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81038e0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81038e2:	4b2a      	ldr	r3, [pc, #168]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038e6:	0a5b      	lsrs	r3, r3, #9
 81038e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038ec:	ee07 3a90 	vmov	s15, r3
 81038f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81038f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81038fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8103900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103908:	ee17 2a90 	vmov	r2, s15
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8103910:	4b1e      	ldr	r3, [pc, #120]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103914:	0c1b      	lsrs	r3, r3, #16
 8103916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810391a:	ee07 3a90 	vmov	s15, r3
 810391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103926:	ee37 7a87 	vadd.f32	s14, s15, s14
 810392a:	edd7 6a07 	vldr	s13, [r7, #28]
 810392e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103936:	ee17 2a90 	vmov	r2, s15
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810393e:	4b13      	ldr	r3, [pc, #76]	; (810398c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103942:	0e1b      	lsrs	r3, r3, #24
 8103944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103948:	ee07 3a90 	vmov	s15, r3
 810394c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103958:	edd7 6a07 	vldr	s13, [r7, #28]
 810395c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103964:	ee17 2a90 	vmov	r2, s15
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810396c:	e008      	b.n	8103980 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	2200      	movs	r2, #0
 8103972:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	2200      	movs	r2, #0
 8103978:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	2200      	movs	r2, #0
 810397e:	609a      	str	r2, [r3, #8]
}
 8103980:	bf00      	nop
 8103982:	3724      	adds	r7, #36	; 0x24
 8103984:	46bd      	mov	sp, r7
 8103986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810398a:	4770      	bx	lr
 810398c:	58024400 	.word	0x58024400
 8103990:	03d09000 	.word	0x03d09000
 8103994:	46000000 	.word	0x46000000
 8103998:	4c742400 	.word	0x4c742400
 810399c:	4a742400 	.word	0x4a742400
 81039a0:	4af42400 	.word	0x4af42400

081039a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81039a4:	b580      	push	{r7, lr}
 81039a6:	b082      	sub	sp, #8
 81039a8:	af00      	add	r7, sp, #0
 81039aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	2b00      	cmp	r3, #0
 81039b0:	d101      	bne.n	81039b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81039b2:	2301      	movs	r3, #1
 81039b4:	e049      	b.n	8103a4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81039bc:	b2db      	uxtb	r3, r3
 81039be:	2b00      	cmp	r3, #0
 81039c0:	d106      	bne.n	81039d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	2200      	movs	r2, #0
 81039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81039ca:	6878      	ldr	r0, [r7, #4]
 81039cc:	f7fe f860 	bl	8101a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	2202      	movs	r2, #2
 81039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681a      	ldr	r2, [r3, #0]
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	3304      	adds	r3, #4
 81039e0:	4619      	mov	r1, r3
 81039e2:	4610      	mov	r0, r2
 81039e4:	f000 fcc8 	bl	8104378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	2201      	movs	r2, #1
 81039ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	2201      	movs	r2, #1
 81039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81039f8:	687b      	ldr	r3, [r7, #4]
 81039fa:	2201      	movs	r2, #1
 81039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	2201      	movs	r2, #1
 8103a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	2201      	movs	r2, #1
 8103a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	2201      	movs	r2, #1
 8103a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	2201      	movs	r2, #1
 8103a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	2201      	movs	r2, #1
 8103a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103a28:	687b      	ldr	r3, [r7, #4]
 8103a2a:	2201      	movs	r2, #1
 8103a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	2201      	movs	r2, #1
 8103a34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	2201      	movs	r2, #1
 8103a3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	2201      	movs	r2, #1
 8103a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103a48:	2300      	movs	r3, #0
}
 8103a4a:	4618      	mov	r0, r3
 8103a4c:	3708      	adds	r7, #8
 8103a4e:	46bd      	mov	sp, r7
 8103a50:	bd80      	pop	{r7, pc}
	...

08103a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103a54:	b480      	push	{r7}
 8103a56:	b085      	sub	sp, #20
 8103a58:	af00      	add	r7, sp, #0
 8103a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103a62:	b2db      	uxtb	r3, r3
 8103a64:	2b01      	cmp	r3, #1
 8103a66:	d001      	beq.n	8103a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103a68:	2301      	movs	r3, #1
 8103a6a:	e021      	b.n	8103ab0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	2202      	movs	r2, #2
 8103a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	681b      	ldr	r3, [r3, #0]
 8103a78:	68da      	ldr	r2, [r3, #12]
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	f042 0201 	orr.w	r2, r2, #1
 8103a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	689a      	ldr	r2, [r3, #8]
 8103a8a:	4b0c      	ldr	r3, [pc, #48]	; (8103abc <HAL_TIM_Base_Start_IT+0x68>)
 8103a8c:	4013      	ands	r3, r2
 8103a8e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103a90:	68fb      	ldr	r3, [r7, #12]
 8103a92:	2b06      	cmp	r3, #6
 8103a94:	d00b      	beq.n	8103aae <HAL_TIM_Base_Start_IT+0x5a>
 8103a96:	68fb      	ldr	r3, [r7, #12]
 8103a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103a9c:	d007      	beq.n	8103aae <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	681a      	ldr	r2, [r3, #0]
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	f042 0201 	orr.w	r2, r2, #1
 8103aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8103aae:	2300      	movs	r3, #0
}
 8103ab0:	4618      	mov	r0, r3
 8103ab2:	3714      	adds	r7, #20
 8103ab4:	46bd      	mov	sp, r7
 8103ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103aba:	4770      	bx	lr
 8103abc:	00010007 	.word	0x00010007

08103ac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8103ac0:	b580      	push	{r7, lr}
 8103ac2:	b082      	sub	sp, #8
 8103ac4:	af00      	add	r7, sp, #0
 8103ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103ac8:	687b      	ldr	r3, [r7, #4]
 8103aca:	2b00      	cmp	r3, #0
 8103acc:	d101      	bne.n	8103ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8103ace:	2301      	movs	r3, #1
 8103ad0:	e049      	b.n	8103b66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103ad8:	b2db      	uxtb	r3, r3
 8103ada:	2b00      	cmp	r3, #0
 8103adc:	d106      	bne.n	8103aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103ade:	687b      	ldr	r3, [r7, #4]
 8103ae0:	2200      	movs	r2, #0
 8103ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8103ae6:	6878      	ldr	r0, [r7, #4]
 8103ae8:	f000 f841 	bl	8103b6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	2202      	movs	r2, #2
 8103af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681a      	ldr	r2, [r3, #0]
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	3304      	adds	r3, #4
 8103afc:	4619      	mov	r1, r3
 8103afe:	4610      	mov	r0, r2
 8103b00:	f000 fc3a 	bl	8104378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	2201      	movs	r2, #1
 8103b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	2201      	movs	r2, #1
 8103b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103b14:	687b      	ldr	r3, [r7, #4]
 8103b16:	2201      	movs	r2, #1
 8103b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	2201      	movs	r2, #1
 8103b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	2201      	movs	r2, #1
 8103b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	2201      	movs	r2, #1
 8103b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	2201      	movs	r2, #1
 8103b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	2201      	movs	r2, #1
 8103b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	2201      	movs	r2, #1
 8103b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	2201      	movs	r2, #1
 8103b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	2201      	movs	r2, #1
 8103b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103b5c:	687b      	ldr	r3, [r7, #4]
 8103b5e:	2201      	movs	r2, #1
 8103b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103b64:	2300      	movs	r3, #0
}
 8103b66:	4618      	mov	r0, r3
 8103b68:	3708      	adds	r7, #8
 8103b6a:	46bd      	mov	sp, r7
 8103b6c:	bd80      	pop	{r7, pc}

08103b6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8103b6e:	b480      	push	{r7}
 8103b70:	b083      	sub	sp, #12
 8103b72:	af00      	add	r7, sp, #0
 8103b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8103b76:	bf00      	nop
 8103b78:	370c      	adds	r7, #12
 8103b7a:	46bd      	mov	sp, r7
 8103b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b80:	4770      	bx	lr
	...

08103b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8103b84:	b580      	push	{r7, lr}
 8103b86:	b084      	sub	sp, #16
 8103b88:	af00      	add	r7, sp, #0
 8103b8a:	6078      	str	r0, [r7, #4]
 8103b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8103b8e:	683b      	ldr	r3, [r7, #0]
 8103b90:	2b00      	cmp	r3, #0
 8103b92:	d109      	bne.n	8103ba8 <HAL_TIM_PWM_Start+0x24>
 8103b94:	687b      	ldr	r3, [r7, #4]
 8103b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8103b9a:	b2db      	uxtb	r3, r3
 8103b9c:	2b01      	cmp	r3, #1
 8103b9e:	bf14      	ite	ne
 8103ba0:	2301      	movne	r3, #1
 8103ba2:	2300      	moveq	r3, #0
 8103ba4:	b2db      	uxtb	r3, r3
 8103ba6:	e03c      	b.n	8103c22 <HAL_TIM_PWM_Start+0x9e>
 8103ba8:	683b      	ldr	r3, [r7, #0]
 8103baa:	2b04      	cmp	r3, #4
 8103bac:	d109      	bne.n	8103bc2 <HAL_TIM_PWM_Start+0x3e>
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103bb4:	b2db      	uxtb	r3, r3
 8103bb6:	2b01      	cmp	r3, #1
 8103bb8:	bf14      	ite	ne
 8103bba:	2301      	movne	r3, #1
 8103bbc:	2300      	moveq	r3, #0
 8103bbe:	b2db      	uxtb	r3, r3
 8103bc0:	e02f      	b.n	8103c22 <HAL_TIM_PWM_Start+0x9e>
 8103bc2:	683b      	ldr	r3, [r7, #0]
 8103bc4:	2b08      	cmp	r3, #8
 8103bc6:	d109      	bne.n	8103bdc <HAL_TIM_PWM_Start+0x58>
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103bce:	b2db      	uxtb	r3, r3
 8103bd0:	2b01      	cmp	r3, #1
 8103bd2:	bf14      	ite	ne
 8103bd4:	2301      	movne	r3, #1
 8103bd6:	2300      	moveq	r3, #0
 8103bd8:	b2db      	uxtb	r3, r3
 8103bda:	e022      	b.n	8103c22 <HAL_TIM_PWM_Start+0x9e>
 8103bdc:	683b      	ldr	r3, [r7, #0]
 8103bde:	2b0c      	cmp	r3, #12
 8103be0:	d109      	bne.n	8103bf6 <HAL_TIM_PWM_Start+0x72>
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103be8:	b2db      	uxtb	r3, r3
 8103bea:	2b01      	cmp	r3, #1
 8103bec:	bf14      	ite	ne
 8103bee:	2301      	movne	r3, #1
 8103bf0:	2300      	moveq	r3, #0
 8103bf2:	b2db      	uxtb	r3, r3
 8103bf4:	e015      	b.n	8103c22 <HAL_TIM_PWM_Start+0x9e>
 8103bf6:	683b      	ldr	r3, [r7, #0]
 8103bf8:	2b10      	cmp	r3, #16
 8103bfa:	d109      	bne.n	8103c10 <HAL_TIM_PWM_Start+0x8c>
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8103c02:	b2db      	uxtb	r3, r3
 8103c04:	2b01      	cmp	r3, #1
 8103c06:	bf14      	ite	ne
 8103c08:	2301      	movne	r3, #1
 8103c0a:	2300      	moveq	r3, #0
 8103c0c:	b2db      	uxtb	r3, r3
 8103c0e:	e008      	b.n	8103c22 <HAL_TIM_PWM_Start+0x9e>
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8103c16:	b2db      	uxtb	r3, r3
 8103c18:	2b01      	cmp	r3, #1
 8103c1a:	bf14      	ite	ne
 8103c1c:	2301      	movne	r3, #1
 8103c1e:	2300      	moveq	r3, #0
 8103c20:	b2db      	uxtb	r3, r3
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d001      	beq.n	8103c2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8103c26:	2301      	movs	r3, #1
 8103c28:	e06e      	b.n	8103d08 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8103c2a:	683b      	ldr	r3, [r7, #0]
 8103c2c:	2b00      	cmp	r3, #0
 8103c2e:	d104      	bne.n	8103c3a <HAL_TIM_PWM_Start+0xb6>
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	2202      	movs	r2, #2
 8103c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103c38:	e023      	b.n	8103c82 <HAL_TIM_PWM_Start+0xfe>
 8103c3a:	683b      	ldr	r3, [r7, #0]
 8103c3c:	2b04      	cmp	r3, #4
 8103c3e:	d104      	bne.n	8103c4a <HAL_TIM_PWM_Start+0xc6>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	2202      	movs	r2, #2
 8103c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103c48:	e01b      	b.n	8103c82 <HAL_TIM_PWM_Start+0xfe>
 8103c4a:	683b      	ldr	r3, [r7, #0]
 8103c4c:	2b08      	cmp	r3, #8
 8103c4e:	d104      	bne.n	8103c5a <HAL_TIM_PWM_Start+0xd6>
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	2202      	movs	r2, #2
 8103c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103c58:	e013      	b.n	8103c82 <HAL_TIM_PWM_Start+0xfe>
 8103c5a:	683b      	ldr	r3, [r7, #0]
 8103c5c:	2b0c      	cmp	r3, #12
 8103c5e:	d104      	bne.n	8103c6a <HAL_TIM_PWM_Start+0xe6>
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	2202      	movs	r2, #2
 8103c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103c68:	e00b      	b.n	8103c82 <HAL_TIM_PWM_Start+0xfe>
 8103c6a:	683b      	ldr	r3, [r7, #0]
 8103c6c:	2b10      	cmp	r3, #16
 8103c6e:	d104      	bne.n	8103c7a <HAL_TIM_PWM_Start+0xf6>
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	2202      	movs	r2, #2
 8103c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103c78:	e003      	b.n	8103c82 <HAL_TIM_PWM_Start+0xfe>
 8103c7a:	687b      	ldr	r3, [r7, #4]
 8103c7c:	2202      	movs	r2, #2
 8103c7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	2201      	movs	r2, #1
 8103c88:	6839      	ldr	r1, [r7, #0]
 8103c8a:	4618      	mov	r0, r3
 8103c8c:	f000 ff78 	bl	8104b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	4a1e      	ldr	r2, [pc, #120]	; (8103d10 <HAL_TIM_PWM_Start+0x18c>)
 8103c96:	4293      	cmp	r3, r2
 8103c98:	d013      	beq.n	8103cc2 <HAL_TIM_PWM_Start+0x13e>
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	4a1d      	ldr	r2, [pc, #116]	; (8103d14 <HAL_TIM_PWM_Start+0x190>)
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d00e      	beq.n	8103cc2 <HAL_TIM_PWM_Start+0x13e>
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a1b      	ldr	r2, [pc, #108]	; (8103d18 <HAL_TIM_PWM_Start+0x194>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d009      	beq.n	8103cc2 <HAL_TIM_PWM_Start+0x13e>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	4a1a      	ldr	r2, [pc, #104]	; (8103d1c <HAL_TIM_PWM_Start+0x198>)
 8103cb4:	4293      	cmp	r3, r2
 8103cb6:	d004      	beq.n	8103cc2 <HAL_TIM_PWM_Start+0x13e>
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	4a18      	ldr	r2, [pc, #96]	; (8103d20 <HAL_TIM_PWM_Start+0x19c>)
 8103cbe:	4293      	cmp	r3, r2
 8103cc0:	d101      	bne.n	8103cc6 <HAL_TIM_PWM_Start+0x142>
 8103cc2:	2301      	movs	r3, #1
 8103cc4:	e000      	b.n	8103cc8 <HAL_TIM_PWM_Start+0x144>
 8103cc6:	2300      	movs	r3, #0
 8103cc8:	2b00      	cmp	r3, #0
 8103cca:	d007      	beq.n	8103cdc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	681b      	ldr	r3, [r3, #0]
 8103cd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103cda:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	689a      	ldr	r2, [r3, #8]
 8103ce2:	4b10      	ldr	r3, [pc, #64]	; (8103d24 <HAL_TIM_PWM_Start+0x1a0>)
 8103ce4:	4013      	ands	r3, r2
 8103ce6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103ce8:	68fb      	ldr	r3, [r7, #12]
 8103cea:	2b06      	cmp	r3, #6
 8103cec:	d00b      	beq.n	8103d06 <HAL_TIM_PWM_Start+0x182>
 8103cee:	68fb      	ldr	r3, [r7, #12]
 8103cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103cf4:	d007      	beq.n	8103d06 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	681a      	ldr	r2, [r3, #0]
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	f042 0201 	orr.w	r2, r2, #1
 8103d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8103d06:	2300      	movs	r3, #0
}
 8103d08:	4618      	mov	r0, r3
 8103d0a:	3710      	adds	r7, #16
 8103d0c:	46bd      	mov	sp, r7
 8103d0e:	bd80      	pop	{r7, pc}
 8103d10:	40010000 	.word	0x40010000
 8103d14:	40010400 	.word	0x40010400
 8103d18:	40014000 	.word	0x40014000
 8103d1c:	40014400 	.word	0x40014400
 8103d20:	40014800 	.word	0x40014800
 8103d24:	00010007 	.word	0x00010007

08103d28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103d28:	b580      	push	{r7, lr}
 8103d2a:	b082      	sub	sp, #8
 8103d2c:	af00      	add	r7, sp, #0
 8103d2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	691b      	ldr	r3, [r3, #16]
 8103d36:	f003 0302 	and.w	r3, r3, #2
 8103d3a:	2b02      	cmp	r3, #2
 8103d3c:	d122      	bne.n	8103d84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	681b      	ldr	r3, [r3, #0]
 8103d42:	68db      	ldr	r3, [r3, #12]
 8103d44:	f003 0302 	and.w	r3, r3, #2
 8103d48:	2b02      	cmp	r3, #2
 8103d4a:	d11b      	bne.n	8103d84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	681b      	ldr	r3, [r3, #0]
 8103d50:	f06f 0202 	mvn.w	r2, #2
 8103d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103d56:	687b      	ldr	r3, [r7, #4]
 8103d58:	2201      	movs	r2, #1
 8103d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	699b      	ldr	r3, [r3, #24]
 8103d62:	f003 0303 	and.w	r3, r3, #3
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d003      	beq.n	8103d72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103d6a:	6878      	ldr	r0, [r7, #4]
 8103d6c:	f000 fae6 	bl	810433c <HAL_TIM_IC_CaptureCallback>
 8103d70:	e005      	b.n	8103d7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d72:	6878      	ldr	r0, [r7, #4]
 8103d74:	f000 fad8 	bl	8104328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d78:	6878      	ldr	r0, [r7, #4]
 8103d7a:	f000 fae9 	bl	8104350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	2200      	movs	r2, #0
 8103d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	691b      	ldr	r3, [r3, #16]
 8103d8a:	f003 0304 	and.w	r3, r3, #4
 8103d8e:	2b04      	cmp	r3, #4
 8103d90:	d122      	bne.n	8103dd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8103d92:	687b      	ldr	r3, [r7, #4]
 8103d94:	681b      	ldr	r3, [r3, #0]
 8103d96:	68db      	ldr	r3, [r3, #12]
 8103d98:	f003 0304 	and.w	r3, r3, #4
 8103d9c:	2b04      	cmp	r3, #4
 8103d9e:	d11b      	bne.n	8103dd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	f06f 0204 	mvn.w	r2, #4
 8103da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	2202      	movs	r2, #2
 8103dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	699b      	ldr	r3, [r3, #24]
 8103db6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103dba:	2b00      	cmp	r3, #0
 8103dbc:	d003      	beq.n	8103dc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103dbe:	6878      	ldr	r0, [r7, #4]
 8103dc0:	f000 fabc 	bl	810433c <HAL_TIM_IC_CaptureCallback>
 8103dc4:	e005      	b.n	8103dd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103dc6:	6878      	ldr	r0, [r7, #4]
 8103dc8:	f000 faae 	bl	8104328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103dcc:	6878      	ldr	r0, [r7, #4]
 8103dce:	f000 fabf 	bl	8104350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	2200      	movs	r2, #0
 8103dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	681b      	ldr	r3, [r3, #0]
 8103ddc:	691b      	ldr	r3, [r3, #16]
 8103dde:	f003 0308 	and.w	r3, r3, #8
 8103de2:	2b08      	cmp	r3, #8
 8103de4:	d122      	bne.n	8103e2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8103de6:	687b      	ldr	r3, [r7, #4]
 8103de8:	681b      	ldr	r3, [r3, #0]
 8103dea:	68db      	ldr	r3, [r3, #12]
 8103dec:	f003 0308 	and.w	r3, r3, #8
 8103df0:	2b08      	cmp	r3, #8
 8103df2:	d11b      	bne.n	8103e2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	f06f 0208 	mvn.w	r2, #8
 8103dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	2204      	movs	r2, #4
 8103e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	681b      	ldr	r3, [r3, #0]
 8103e08:	69db      	ldr	r3, [r3, #28]
 8103e0a:	f003 0303 	and.w	r3, r3, #3
 8103e0e:	2b00      	cmp	r3, #0
 8103e10:	d003      	beq.n	8103e1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103e12:	6878      	ldr	r0, [r7, #4]
 8103e14:	f000 fa92 	bl	810433c <HAL_TIM_IC_CaptureCallback>
 8103e18:	e005      	b.n	8103e26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103e1a:	6878      	ldr	r0, [r7, #4]
 8103e1c:	f000 fa84 	bl	8104328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103e20:	6878      	ldr	r0, [r7, #4]
 8103e22:	f000 fa95 	bl	8104350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	2200      	movs	r2, #0
 8103e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	691b      	ldr	r3, [r3, #16]
 8103e32:	f003 0310 	and.w	r3, r3, #16
 8103e36:	2b10      	cmp	r3, #16
 8103e38:	d122      	bne.n	8103e80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	681b      	ldr	r3, [r3, #0]
 8103e3e:	68db      	ldr	r3, [r3, #12]
 8103e40:	f003 0310 	and.w	r3, r3, #16
 8103e44:	2b10      	cmp	r3, #16
 8103e46:	d11b      	bne.n	8103e80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	681b      	ldr	r3, [r3, #0]
 8103e4c:	f06f 0210 	mvn.w	r2, #16
 8103e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	2208      	movs	r2, #8
 8103e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	69db      	ldr	r3, [r3, #28]
 8103e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103e62:	2b00      	cmp	r3, #0
 8103e64:	d003      	beq.n	8103e6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103e66:	6878      	ldr	r0, [r7, #4]
 8103e68:	f000 fa68 	bl	810433c <HAL_TIM_IC_CaptureCallback>
 8103e6c:	e005      	b.n	8103e7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103e6e:	6878      	ldr	r0, [r7, #4]
 8103e70:	f000 fa5a 	bl	8104328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103e74:	6878      	ldr	r0, [r7, #4]
 8103e76:	f000 fa6b 	bl	8104350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	2200      	movs	r2, #0
 8103e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	691b      	ldr	r3, [r3, #16]
 8103e86:	f003 0301 	and.w	r3, r3, #1
 8103e8a:	2b01      	cmp	r3, #1
 8103e8c:	d10e      	bne.n	8103eac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8103e8e:	687b      	ldr	r3, [r7, #4]
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	68db      	ldr	r3, [r3, #12]
 8103e94:	f003 0301 	and.w	r3, r3, #1
 8103e98:	2b01      	cmp	r3, #1
 8103e9a:	d107      	bne.n	8103eac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8103e9c:	687b      	ldr	r3, [r7, #4]
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	f06f 0201 	mvn.w	r2, #1
 8103ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103ea6:	6878      	ldr	r0, [r7, #4]
 8103ea8:	f7fd fc20 	bl	81016ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	691b      	ldr	r3, [r3, #16]
 8103eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103eb6:	2b80      	cmp	r3, #128	; 0x80
 8103eb8:	d10e      	bne.n	8103ed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	68db      	ldr	r3, [r3, #12]
 8103ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103ec4:	2b80      	cmp	r3, #128	; 0x80
 8103ec6:	d107      	bne.n	8103ed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	681b      	ldr	r3, [r3, #0]
 8103ecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8103ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103ed2:	6878      	ldr	r0, [r7, #4]
 8103ed4:	f000 ff8a 	bl	8104dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	691b      	ldr	r3, [r3, #16]
 8103ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103ee6:	d10e      	bne.n	8103f06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	681b      	ldr	r3, [r3, #0]
 8103eec:	68db      	ldr	r3, [r3, #12]
 8103eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103ef2:	2b80      	cmp	r3, #128	; 0x80
 8103ef4:	d107      	bne.n	8103f06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	681b      	ldr	r3, [r3, #0]
 8103efa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8103efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103f00:	6878      	ldr	r0, [r7, #4]
 8103f02:	f000 ff7d 	bl	8104e00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8103f06:	687b      	ldr	r3, [r7, #4]
 8103f08:	681b      	ldr	r3, [r3, #0]
 8103f0a:	691b      	ldr	r3, [r3, #16]
 8103f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103f10:	2b40      	cmp	r3, #64	; 0x40
 8103f12:	d10e      	bne.n	8103f32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	68db      	ldr	r3, [r3, #12]
 8103f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103f1e:	2b40      	cmp	r3, #64	; 0x40
 8103f20:	d107      	bne.n	8103f32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8103f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103f2c:	6878      	ldr	r0, [r7, #4]
 8103f2e:	f000 fa19 	bl	8104364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	681b      	ldr	r3, [r3, #0]
 8103f36:	691b      	ldr	r3, [r3, #16]
 8103f38:	f003 0320 	and.w	r3, r3, #32
 8103f3c:	2b20      	cmp	r3, #32
 8103f3e:	d10e      	bne.n	8103f5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	68db      	ldr	r3, [r3, #12]
 8103f46:	f003 0320 	and.w	r3, r3, #32
 8103f4a:	2b20      	cmp	r3, #32
 8103f4c:	d107      	bne.n	8103f5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	f06f 0220 	mvn.w	r2, #32
 8103f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103f58:	6878      	ldr	r0, [r7, #4]
 8103f5a:	f000 ff3d 	bl	8104dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103f5e:	bf00      	nop
 8103f60:	3708      	adds	r7, #8
 8103f62:	46bd      	mov	sp, r7
 8103f64:	bd80      	pop	{r7, pc}
	...

08103f68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8103f68:	b580      	push	{r7, lr}
 8103f6a:	b084      	sub	sp, #16
 8103f6c:	af00      	add	r7, sp, #0
 8103f6e:	60f8      	str	r0, [r7, #12]
 8103f70:	60b9      	str	r1, [r7, #8]
 8103f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8103f74:	68fb      	ldr	r3, [r7, #12]
 8103f76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103f7a:	2b01      	cmp	r3, #1
 8103f7c:	d101      	bne.n	8103f82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8103f7e:	2302      	movs	r3, #2
 8103f80:	e0fd      	b.n	810417e <HAL_TIM_PWM_ConfigChannel+0x216>
 8103f82:	68fb      	ldr	r3, [r7, #12]
 8103f84:	2201      	movs	r2, #1
 8103f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	2b14      	cmp	r3, #20
 8103f8e:	f200 80f0 	bhi.w	8104172 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8103f92:	a201      	add	r2, pc, #4	; (adr r2, 8103f98 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8103f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f98:	08103fed 	.word	0x08103fed
 8103f9c:	08104173 	.word	0x08104173
 8103fa0:	08104173 	.word	0x08104173
 8103fa4:	08104173 	.word	0x08104173
 8103fa8:	0810402d 	.word	0x0810402d
 8103fac:	08104173 	.word	0x08104173
 8103fb0:	08104173 	.word	0x08104173
 8103fb4:	08104173 	.word	0x08104173
 8103fb8:	0810406f 	.word	0x0810406f
 8103fbc:	08104173 	.word	0x08104173
 8103fc0:	08104173 	.word	0x08104173
 8103fc4:	08104173 	.word	0x08104173
 8103fc8:	081040af 	.word	0x081040af
 8103fcc:	08104173 	.word	0x08104173
 8103fd0:	08104173 	.word	0x08104173
 8103fd4:	08104173 	.word	0x08104173
 8103fd8:	081040f1 	.word	0x081040f1
 8103fdc:	08104173 	.word	0x08104173
 8103fe0:	08104173 	.word	0x08104173
 8103fe4:	08104173 	.word	0x08104173
 8103fe8:	08104131 	.word	0x08104131
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8103fec:	68fb      	ldr	r3, [r7, #12]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	68b9      	ldr	r1, [r7, #8]
 8103ff2:	4618      	mov	r0, r3
 8103ff4:	f000 fa5a 	bl	81044ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	699a      	ldr	r2, [r3, #24]
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	681b      	ldr	r3, [r3, #0]
 8104002:	f042 0208 	orr.w	r2, r2, #8
 8104006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8104008:	68fb      	ldr	r3, [r7, #12]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	699a      	ldr	r2, [r3, #24]
 810400e:	68fb      	ldr	r3, [r7, #12]
 8104010:	681b      	ldr	r3, [r3, #0]
 8104012:	f022 0204 	bic.w	r2, r2, #4
 8104016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	6999      	ldr	r1, [r3, #24]
 810401e:	68bb      	ldr	r3, [r7, #8]
 8104020:	691a      	ldr	r2, [r3, #16]
 8104022:	68fb      	ldr	r3, [r7, #12]
 8104024:	681b      	ldr	r3, [r3, #0]
 8104026:	430a      	orrs	r2, r1
 8104028:	619a      	str	r2, [r3, #24]
      break;
 810402a:	e0a3      	b.n	8104174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810402c:	68fb      	ldr	r3, [r7, #12]
 810402e:	681b      	ldr	r3, [r3, #0]
 8104030:	68b9      	ldr	r1, [r7, #8]
 8104032:	4618      	mov	r0, r3
 8104034:	f000 faca 	bl	81045cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	681b      	ldr	r3, [r3, #0]
 810403c:	699a      	ldr	r2, [r3, #24]
 810403e:	68fb      	ldr	r3, [r7, #12]
 8104040:	681b      	ldr	r3, [r3, #0]
 8104042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8104048:	68fb      	ldr	r3, [r7, #12]
 810404a:	681b      	ldr	r3, [r3, #0]
 810404c:	699a      	ldr	r2, [r3, #24]
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8104056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8104058:	68fb      	ldr	r3, [r7, #12]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	6999      	ldr	r1, [r3, #24]
 810405e:	68bb      	ldr	r3, [r7, #8]
 8104060:	691b      	ldr	r3, [r3, #16]
 8104062:	021a      	lsls	r2, r3, #8
 8104064:	68fb      	ldr	r3, [r7, #12]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	430a      	orrs	r2, r1
 810406a:	619a      	str	r2, [r3, #24]
      break;
 810406c:	e082      	b.n	8104174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	681b      	ldr	r3, [r3, #0]
 8104072:	68b9      	ldr	r1, [r7, #8]
 8104074:	4618      	mov	r0, r3
 8104076:	f000 fb33 	bl	81046e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810407a:	68fb      	ldr	r3, [r7, #12]
 810407c:	681b      	ldr	r3, [r3, #0]
 810407e:	69da      	ldr	r2, [r3, #28]
 8104080:	68fb      	ldr	r3, [r7, #12]
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	f042 0208 	orr.w	r2, r2, #8
 8104088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810408a:	68fb      	ldr	r3, [r7, #12]
 810408c:	681b      	ldr	r3, [r3, #0]
 810408e:	69da      	ldr	r2, [r3, #28]
 8104090:	68fb      	ldr	r3, [r7, #12]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	f022 0204 	bic.w	r2, r2, #4
 8104098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810409a:	68fb      	ldr	r3, [r7, #12]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	69d9      	ldr	r1, [r3, #28]
 81040a0:	68bb      	ldr	r3, [r7, #8]
 81040a2:	691a      	ldr	r2, [r3, #16]
 81040a4:	68fb      	ldr	r3, [r7, #12]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	430a      	orrs	r2, r1
 81040aa:	61da      	str	r2, [r3, #28]
      break;
 81040ac:	e062      	b.n	8104174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81040ae:	68fb      	ldr	r3, [r7, #12]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	68b9      	ldr	r1, [r7, #8]
 81040b4:	4618      	mov	r0, r3
 81040b6:	f000 fb99 	bl	81047ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81040ba:	68fb      	ldr	r3, [r7, #12]
 81040bc:	681b      	ldr	r3, [r3, #0]
 81040be:	69da      	ldr	r2, [r3, #28]
 81040c0:	68fb      	ldr	r3, [r7, #12]
 81040c2:	681b      	ldr	r3, [r3, #0]
 81040c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81040c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81040ca:	68fb      	ldr	r3, [r7, #12]
 81040cc:	681b      	ldr	r3, [r3, #0]
 81040ce:	69da      	ldr	r2, [r3, #28]
 81040d0:	68fb      	ldr	r3, [r7, #12]
 81040d2:	681b      	ldr	r3, [r3, #0]
 81040d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81040d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81040da:	68fb      	ldr	r3, [r7, #12]
 81040dc:	681b      	ldr	r3, [r3, #0]
 81040de:	69d9      	ldr	r1, [r3, #28]
 81040e0:	68bb      	ldr	r3, [r7, #8]
 81040e2:	691b      	ldr	r3, [r3, #16]
 81040e4:	021a      	lsls	r2, r3, #8
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	430a      	orrs	r2, r1
 81040ec:	61da      	str	r2, [r3, #28]
      break;
 81040ee:	e041      	b.n	8104174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81040f0:	68fb      	ldr	r3, [r7, #12]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	68b9      	ldr	r1, [r7, #8]
 81040f6:	4618      	mov	r0, r3
 81040f8:	f000 fbe0 	bl	81048bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81040fc:	68fb      	ldr	r3, [r7, #12]
 81040fe:	681b      	ldr	r3, [r3, #0]
 8104100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104102:	68fb      	ldr	r3, [r7, #12]
 8104104:	681b      	ldr	r3, [r3, #0]
 8104106:	f042 0208 	orr.w	r2, r2, #8
 810410a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 810410c:	68fb      	ldr	r3, [r7, #12]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104112:	68fb      	ldr	r3, [r7, #12]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	f022 0204 	bic.w	r2, r2, #4
 810411a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810411c:	68fb      	ldr	r3, [r7, #12]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104122:	68bb      	ldr	r3, [r7, #8]
 8104124:	691a      	ldr	r2, [r3, #16]
 8104126:	68fb      	ldr	r3, [r7, #12]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	430a      	orrs	r2, r1
 810412c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810412e:	e021      	b.n	8104174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8104130:	68fb      	ldr	r3, [r7, #12]
 8104132:	681b      	ldr	r3, [r3, #0]
 8104134:	68b9      	ldr	r1, [r7, #8]
 8104136:	4618      	mov	r0, r3
 8104138:	f000 fc22 	bl	8104980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	681b      	ldr	r3, [r3, #0]
 8104140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810414a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810414c:	68fb      	ldr	r3, [r7, #12]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104152:	68fb      	ldr	r3, [r7, #12]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810415a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810415c:	68fb      	ldr	r3, [r7, #12]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8104162:	68bb      	ldr	r3, [r7, #8]
 8104164:	691b      	ldr	r3, [r3, #16]
 8104166:	021a      	lsls	r2, r3, #8
 8104168:	68fb      	ldr	r3, [r7, #12]
 810416a:	681b      	ldr	r3, [r3, #0]
 810416c:	430a      	orrs	r2, r1
 810416e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8104170:	e000      	b.n	8104174 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8104172:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	2200      	movs	r2, #0
 8104178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810417c:	2300      	movs	r3, #0
}
 810417e:	4618      	mov	r0, r3
 8104180:	3710      	adds	r7, #16
 8104182:	46bd      	mov	sp, r7
 8104184:	bd80      	pop	{r7, pc}
 8104186:	bf00      	nop

08104188 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8104188:	b580      	push	{r7, lr}
 810418a:	b084      	sub	sp, #16
 810418c:	af00      	add	r7, sp, #0
 810418e:	6078      	str	r0, [r7, #4]
 8104190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8104192:	687b      	ldr	r3, [r7, #4]
 8104194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104198:	2b01      	cmp	r3, #1
 810419a:	d101      	bne.n	81041a0 <HAL_TIM_ConfigClockSource+0x18>
 810419c:	2302      	movs	r3, #2
 810419e:	e0b9      	b.n	8104314 <HAL_TIM_ConfigClockSource+0x18c>
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	2201      	movs	r2, #1
 81041a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	2202      	movs	r2, #2
 81041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81041b0:	687b      	ldr	r3, [r7, #4]
 81041b2:	681b      	ldr	r3, [r3, #0]
 81041b4:	689b      	ldr	r3, [r3, #8]
 81041b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81041b8:	68fb      	ldr	r3, [r7, #12]
 81041ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81041be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81041c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81041c4:	68fb      	ldr	r3, [r7, #12]
 81041c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81041ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	68fa      	ldr	r2, [r7, #12]
 81041d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81041d4:	683b      	ldr	r3, [r7, #0]
 81041d6:	681b      	ldr	r3, [r3, #0]
 81041d8:	2b70      	cmp	r3, #112	; 0x70
 81041da:	d02e      	beq.n	810423a <HAL_TIM_ConfigClockSource+0xb2>
 81041dc:	2b70      	cmp	r3, #112	; 0x70
 81041de:	d812      	bhi.n	8104206 <HAL_TIM_ConfigClockSource+0x7e>
 81041e0:	2b30      	cmp	r3, #48	; 0x30
 81041e2:	f000 8084 	beq.w	81042ee <HAL_TIM_ConfigClockSource+0x166>
 81041e6:	2b30      	cmp	r3, #48	; 0x30
 81041e8:	d806      	bhi.n	81041f8 <HAL_TIM_ConfigClockSource+0x70>
 81041ea:	2b10      	cmp	r3, #16
 81041ec:	d07f      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
 81041ee:	2b20      	cmp	r3, #32
 81041f0:	d07d      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
 81041f2:	2b00      	cmp	r3, #0
 81041f4:	d07b      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 81041f6:	e084      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81041f8:	2b50      	cmp	r3, #80	; 0x50
 81041fa:	d048      	beq.n	810428e <HAL_TIM_ConfigClockSource+0x106>
 81041fc:	2b60      	cmp	r3, #96	; 0x60
 81041fe:	d056      	beq.n	81042ae <HAL_TIM_ConfigClockSource+0x126>
 8104200:	2b40      	cmp	r3, #64	; 0x40
 8104202:	d064      	beq.n	81042ce <HAL_TIM_ConfigClockSource+0x146>
      break;
 8104204:	e07d      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8104206:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810420a:	d070      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
 810420c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8104210:	d809      	bhi.n	8104226 <HAL_TIM_ConfigClockSource+0x9e>
 8104212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104216:	d027      	beq.n	8104268 <HAL_TIM_ConfigClockSource+0xe0>
 8104218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810421c:	d067      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
 810421e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104222:	d06d      	beq.n	8104300 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8104224:	e06d      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8104226:	4a3d      	ldr	r2, [pc, #244]	; (810431c <HAL_TIM_ConfigClockSource+0x194>)
 8104228:	4293      	cmp	r3, r2
 810422a:	d060      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
 810422c:	4a3c      	ldr	r2, [pc, #240]	; (8104320 <HAL_TIM_ConfigClockSource+0x198>)
 810422e:	4293      	cmp	r3, r2
 8104230:	d05d      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
 8104232:	4a3c      	ldr	r2, [pc, #240]	; (8104324 <HAL_TIM_ConfigClockSource+0x19c>)
 8104234:	4293      	cmp	r3, r2
 8104236:	d05a      	beq.n	81042ee <HAL_TIM_ConfigClockSource+0x166>
      break;
 8104238:	e063      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	6818      	ldr	r0, [r3, #0]
 810423e:	683b      	ldr	r3, [r7, #0]
 8104240:	6899      	ldr	r1, [r3, #8]
 8104242:	683b      	ldr	r3, [r7, #0]
 8104244:	685a      	ldr	r2, [r3, #4]
 8104246:	683b      	ldr	r3, [r7, #0]
 8104248:	68db      	ldr	r3, [r3, #12]
 810424a:	f000 fc79 	bl	8104b40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	689b      	ldr	r3, [r3, #8]
 8104254:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8104256:	68fb      	ldr	r3, [r7, #12]
 8104258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810425c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	681b      	ldr	r3, [r3, #0]
 8104262:	68fa      	ldr	r2, [r7, #12]
 8104264:	609a      	str	r2, [r3, #8]
      break;
 8104266:	e04c      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	6818      	ldr	r0, [r3, #0]
 810426c:	683b      	ldr	r3, [r7, #0]
 810426e:	6899      	ldr	r1, [r3, #8]
 8104270:	683b      	ldr	r3, [r7, #0]
 8104272:	685a      	ldr	r2, [r3, #4]
 8104274:	683b      	ldr	r3, [r7, #0]
 8104276:	68db      	ldr	r3, [r3, #12]
 8104278:	f000 fc62 	bl	8104b40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	681b      	ldr	r3, [r3, #0]
 8104280:	689a      	ldr	r2, [r3, #8]
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	681b      	ldr	r3, [r3, #0]
 8104286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810428a:	609a      	str	r2, [r3, #8]
      break;
 810428c:	e039      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	6818      	ldr	r0, [r3, #0]
 8104292:	683b      	ldr	r3, [r7, #0]
 8104294:	6859      	ldr	r1, [r3, #4]
 8104296:	683b      	ldr	r3, [r7, #0]
 8104298:	68db      	ldr	r3, [r3, #12]
 810429a:	461a      	mov	r2, r3
 810429c:	f000 fbd4 	bl	8104a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	2150      	movs	r1, #80	; 0x50
 81042a6:	4618      	mov	r0, r3
 81042a8:	f000 fc2d 	bl	8104b06 <TIM_ITRx_SetConfig>
      break;
 81042ac:	e029      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	6818      	ldr	r0, [r3, #0]
 81042b2:	683b      	ldr	r3, [r7, #0]
 81042b4:	6859      	ldr	r1, [r3, #4]
 81042b6:	683b      	ldr	r3, [r7, #0]
 81042b8:	68db      	ldr	r3, [r3, #12]
 81042ba:	461a      	mov	r2, r3
 81042bc:	f000 fbf3 	bl	8104aa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81042c0:	687b      	ldr	r3, [r7, #4]
 81042c2:	681b      	ldr	r3, [r3, #0]
 81042c4:	2160      	movs	r1, #96	; 0x60
 81042c6:	4618      	mov	r0, r3
 81042c8:	f000 fc1d 	bl	8104b06 <TIM_ITRx_SetConfig>
      break;
 81042cc:	e019      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	6818      	ldr	r0, [r3, #0]
 81042d2:	683b      	ldr	r3, [r7, #0]
 81042d4:	6859      	ldr	r1, [r3, #4]
 81042d6:	683b      	ldr	r3, [r7, #0]
 81042d8:	68db      	ldr	r3, [r3, #12]
 81042da:	461a      	mov	r2, r3
 81042dc:	f000 fbb4 	bl	8104a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	2140      	movs	r1, #64	; 0x40
 81042e6:	4618      	mov	r0, r3
 81042e8:	f000 fc0d 	bl	8104b06 <TIM_ITRx_SetConfig>
      break;
 81042ec:	e009      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681a      	ldr	r2, [r3, #0]
 81042f2:	683b      	ldr	r3, [r7, #0]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	4619      	mov	r1, r3
 81042f8:	4610      	mov	r0, r2
 81042fa:	f000 fc04 	bl	8104b06 <TIM_ITRx_SetConfig>
      break;
 81042fe:	e000      	b.n	8104302 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8104300:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	2201      	movs	r2, #1
 8104306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	2200      	movs	r2, #0
 810430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104312:	2300      	movs	r3, #0
}
 8104314:	4618      	mov	r0, r3
 8104316:	3710      	adds	r7, #16
 8104318:	46bd      	mov	sp, r7
 810431a:	bd80      	pop	{r7, pc}
 810431c:	00100030 	.word	0x00100030
 8104320:	00100040 	.word	0x00100040
 8104324:	00100020 	.word	0x00100020

08104328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8104328:	b480      	push	{r7}
 810432a:	b083      	sub	sp, #12
 810432c:	af00      	add	r7, sp, #0
 810432e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8104330:	bf00      	nop
 8104332:	370c      	adds	r7, #12
 8104334:	46bd      	mov	sp, r7
 8104336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810433a:	4770      	bx	lr

0810433c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810433c:	b480      	push	{r7}
 810433e:	b083      	sub	sp, #12
 8104340:	af00      	add	r7, sp, #0
 8104342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8104344:	bf00      	nop
 8104346:	370c      	adds	r7, #12
 8104348:	46bd      	mov	sp, r7
 810434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810434e:	4770      	bx	lr

08104350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8104350:	b480      	push	{r7}
 8104352:	b083      	sub	sp, #12
 8104354:	af00      	add	r7, sp, #0
 8104356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8104358:	bf00      	nop
 810435a:	370c      	adds	r7, #12
 810435c:	46bd      	mov	sp, r7
 810435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104362:	4770      	bx	lr

08104364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8104364:	b480      	push	{r7}
 8104366:	b083      	sub	sp, #12
 8104368:	af00      	add	r7, sp, #0
 810436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810436c:	bf00      	nop
 810436e:	370c      	adds	r7, #12
 8104370:	46bd      	mov	sp, r7
 8104372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104376:	4770      	bx	lr

08104378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8104378:	b480      	push	{r7}
 810437a:	b085      	sub	sp, #20
 810437c:	af00      	add	r7, sp, #0
 810437e:	6078      	str	r0, [r7, #4]
 8104380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8104388:	687b      	ldr	r3, [r7, #4]
 810438a:	4a40      	ldr	r2, [pc, #256]	; (810448c <TIM_Base_SetConfig+0x114>)
 810438c:	4293      	cmp	r3, r2
 810438e:	d013      	beq.n	81043b8 <TIM_Base_SetConfig+0x40>
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104396:	d00f      	beq.n	81043b8 <TIM_Base_SetConfig+0x40>
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	4a3d      	ldr	r2, [pc, #244]	; (8104490 <TIM_Base_SetConfig+0x118>)
 810439c:	4293      	cmp	r3, r2
 810439e:	d00b      	beq.n	81043b8 <TIM_Base_SetConfig+0x40>
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	4a3c      	ldr	r2, [pc, #240]	; (8104494 <TIM_Base_SetConfig+0x11c>)
 81043a4:	4293      	cmp	r3, r2
 81043a6:	d007      	beq.n	81043b8 <TIM_Base_SetConfig+0x40>
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	4a3b      	ldr	r2, [pc, #236]	; (8104498 <TIM_Base_SetConfig+0x120>)
 81043ac:	4293      	cmp	r3, r2
 81043ae:	d003      	beq.n	81043b8 <TIM_Base_SetConfig+0x40>
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	4a3a      	ldr	r2, [pc, #232]	; (810449c <TIM_Base_SetConfig+0x124>)
 81043b4:	4293      	cmp	r3, r2
 81043b6:	d108      	bne.n	81043ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81043b8:	68fb      	ldr	r3, [r7, #12]
 81043ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81043be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81043c0:	683b      	ldr	r3, [r7, #0]
 81043c2:	685b      	ldr	r3, [r3, #4]
 81043c4:	68fa      	ldr	r2, [r7, #12]
 81043c6:	4313      	orrs	r3, r2
 81043c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	4a2f      	ldr	r2, [pc, #188]	; (810448c <TIM_Base_SetConfig+0x114>)
 81043ce:	4293      	cmp	r3, r2
 81043d0:	d01f      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81043d8:	d01b      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	4a2c      	ldr	r2, [pc, #176]	; (8104490 <TIM_Base_SetConfig+0x118>)
 81043de:	4293      	cmp	r3, r2
 81043e0:	d017      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	4a2b      	ldr	r2, [pc, #172]	; (8104494 <TIM_Base_SetConfig+0x11c>)
 81043e6:	4293      	cmp	r3, r2
 81043e8:	d013      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	4a2a      	ldr	r2, [pc, #168]	; (8104498 <TIM_Base_SetConfig+0x120>)
 81043ee:	4293      	cmp	r3, r2
 81043f0:	d00f      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	4a29      	ldr	r2, [pc, #164]	; (810449c <TIM_Base_SetConfig+0x124>)
 81043f6:	4293      	cmp	r3, r2
 81043f8:	d00b      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	4a28      	ldr	r2, [pc, #160]	; (81044a0 <TIM_Base_SetConfig+0x128>)
 81043fe:	4293      	cmp	r3, r2
 8104400:	d007      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	4a27      	ldr	r2, [pc, #156]	; (81044a4 <TIM_Base_SetConfig+0x12c>)
 8104406:	4293      	cmp	r3, r2
 8104408:	d003      	beq.n	8104412 <TIM_Base_SetConfig+0x9a>
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	4a26      	ldr	r2, [pc, #152]	; (81044a8 <TIM_Base_SetConfig+0x130>)
 810440e:	4293      	cmp	r3, r2
 8104410:	d108      	bne.n	8104424 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8104412:	68fb      	ldr	r3, [r7, #12]
 8104414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810441a:	683b      	ldr	r3, [r7, #0]
 810441c:	68db      	ldr	r3, [r3, #12]
 810441e:	68fa      	ldr	r2, [r7, #12]
 8104420:	4313      	orrs	r3, r2
 8104422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810442a:	683b      	ldr	r3, [r7, #0]
 810442c:	695b      	ldr	r3, [r3, #20]
 810442e:	4313      	orrs	r3, r2
 8104430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8104432:	687b      	ldr	r3, [r7, #4]
 8104434:	68fa      	ldr	r2, [r7, #12]
 8104436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8104438:	683b      	ldr	r3, [r7, #0]
 810443a:	689a      	ldr	r2, [r3, #8]
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8104440:	683b      	ldr	r3, [r7, #0]
 8104442:	681a      	ldr	r2, [r3, #0]
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	4a10      	ldr	r2, [pc, #64]	; (810448c <TIM_Base_SetConfig+0x114>)
 810444c:	4293      	cmp	r3, r2
 810444e:	d00f      	beq.n	8104470 <TIM_Base_SetConfig+0xf8>
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	4a12      	ldr	r2, [pc, #72]	; (810449c <TIM_Base_SetConfig+0x124>)
 8104454:	4293      	cmp	r3, r2
 8104456:	d00b      	beq.n	8104470 <TIM_Base_SetConfig+0xf8>
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	4a11      	ldr	r2, [pc, #68]	; (81044a0 <TIM_Base_SetConfig+0x128>)
 810445c:	4293      	cmp	r3, r2
 810445e:	d007      	beq.n	8104470 <TIM_Base_SetConfig+0xf8>
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	4a10      	ldr	r2, [pc, #64]	; (81044a4 <TIM_Base_SetConfig+0x12c>)
 8104464:	4293      	cmp	r3, r2
 8104466:	d003      	beq.n	8104470 <TIM_Base_SetConfig+0xf8>
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	4a0f      	ldr	r2, [pc, #60]	; (81044a8 <TIM_Base_SetConfig+0x130>)
 810446c:	4293      	cmp	r3, r2
 810446e:	d103      	bne.n	8104478 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8104470:	683b      	ldr	r3, [r7, #0]
 8104472:	691a      	ldr	r2, [r3, #16]
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8104478:	687b      	ldr	r3, [r7, #4]
 810447a:	2201      	movs	r2, #1
 810447c:	615a      	str	r2, [r3, #20]
}
 810447e:	bf00      	nop
 8104480:	3714      	adds	r7, #20
 8104482:	46bd      	mov	sp, r7
 8104484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104488:	4770      	bx	lr
 810448a:	bf00      	nop
 810448c:	40010000 	.word	0x40010000
 8104490:	40000400 	.word	0x40000400
 8104494:	40000800 	.word	0x40000800
 8104498:	40000c00 	.word	0x40000c00
 810449c:	40010400 	.word	0x40010400
 81044a0:	40014000 	.word	0x40014000
 81044a4:	40014400 	.word	0x40014400
 81044a8:	40014800 	.word	0x40014800

081044ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81044ac:	b480      	push	{r7}
 81044ae:	b087      	sub	sp, #28
 81044b0:	af00      	add	r7, sp, #0
 81044b2:	6078      	str	r0, [r7, #4]
 81044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	6a1b      	ldr	r3, [r3, #32]
 81044ba:	f023 0201 	bic.w	r2, r3, #1
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	6a1b      	ldr	r3, [r3, #32]
 81044c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	685b      	ldr	r3, [r3, #4]
 81044cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81044ce:	687b      	ldr	r3, [r7, #4]
 81044d0:	699b      	ldr	r3, [r3, #24]
 81044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81044d4:	68fb      	ldr	r3, [r7, #12]
 81044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81044e0:	68fb      	ldr	r3, [r7, #12]
 81044e2:	f023 0303 	bic.w	r3, r3, #3
 81044e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81044e8:	683b      	ldr	r3, [r7, #0]
 81044ea:	681b      	ldr	r3, [r3, #0]
 81044ec:	68fa      	ldr	r2, [r7, #12]
 81044ee:	4313      	orrs	r3, r2
 81044f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81044f2:	697b      	ldr	r3, [r7, #20]
 81044f4:	f023 0302 	bic.w	r3, r3, #2
 81044f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81044fa:	683b      	ldr	r3, [r7, #0]
 81044fc:	689b      	ldr	r3, [r3, #8]
 81044fe:	697a      	ldr	r2, [r7, #20]
 8104500:	4313      	orrs	r3, r2
 8104502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8104504:	687b      	ldr	r3, [r7, #4]
 8104506:	4a2c      	ldr	r2, [pc, #176]	; (81045b8 <TIM_OC1_SetConfig+0x10c>)
 8104508:	4293      	cmp	r3, r2
 810450a:	d00f      	beq.n	810452c <TIM_OC1_SetConfig+0x80>
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	4a2b      	ldr	r2, [pc, #172]	; (81045bc <TIM_OC1_SetConfig+0x110>)
 8104510:	4293      	cmp	r3, r2
 8104512:	d00b      	beq.n	810452c <TIM_OC1_SetConfig+0x80>
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	4a2a      	ldr	r2, [pc, #168]	; (81045c0 <TIM_OC1_SetConfig+0x114>)
 8104518:	4293      	cmp	r3, r2
 810451a:	d007      	beq.n	810452c <TIM_OC1_SetConfig+0x80>
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	4a29      	ldr	r2, [pc, #164]	; (81045c4 <TIM_OC1_SetConfig+0x118>)
 8104520:	4293      	cmp	r3, r2
 8104522:	d003      	beq.n	810452c <TIM_OC1_SetConfig+0x80>
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	4a28      	ldr	r2, [pc, #160]	; (81045c8 <TIM_OC1_SetConfig+0x11c>)
 8104528:	4293      	cmp	r3, r2
 810452a:	d10c      	bne.n	8104546 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810452c:	697b      	ldr	r3, [r7, #20]
 810452e:	f023 0308 	bic.w	r3, r3, #8
 8104532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8104534:	683b      	ldr	r3, [r7, #0]
 8104536:	68db      	ldr	r3, [r3, #12]
 8104538:	697a      	ldr	r2, [r7, #20]
 810453a:	4313      	orrs	r3, r2
 810453c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810453e:	697b      	ldr	r3, [r7, #20]
 8104540:	f023 0304 	bic.w	r3, r3, #4
 8104544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	4a1b      	ldr	r2, [pc, #108]	; (81045b8 <TIM_OC1_SetConfig+0x10c>)
 810454a:	4293      	cmp	r3, r2
 810454c:	d00f      	beq.n	810456e <TIM_OC1_SetConfig+0xc2>
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	4a1a      	ldr	r2, [pc, #104]	; (81045bc <TIM_OC1_SetConfig+0x110>)
 8104552:	4293      	cmp	r3, r2
 8104554:	d00b      	beq.n	810456e <TIM_OC1_SetConfig+0xc2>
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	4a19      	ldr	r2, [pc, #100]	; (81045c0 <TIM_OC1_SetConfig+0x114>)
 810455a:	4293      	cmp	r3, r2
 810455c:	d007      	beq.n	810456e <TIM_OC1_SetConfig+0xc2>
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	4a18      	ldr	r2, [pc, #96]	; (81045c4 <TIM_OC1_SetConfig+0x118>)
 8104562:	4293      	cmp	r3, r2
 8104564:	d003      	beq.n	810456e <TIM_OC1_SetConfig+0xc2>
 8104566:	687b      	ldr	r3, [r7, #4]
 8104568:	4a17      	ldr	r2, [pc, #92]	; (81045c8 <TIM_OC1_SetConfig+0x11c>)
 810456a:	4293      	cmp	r3, r2
 810456c:	d111      	bne.n	8104592 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810456e:	693b      	ldr	r3, [r7, #16]
 8104570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8104576:	693b      	ldr	r3, [r7, #16]
 8104578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810457c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810457e:	683b      	ldr	r3, [r7, #0]
 8104580:	695b      	ldr	r3, [r3, #20]
 8104582:	693a      	ldr	r2, [r7, #16]
 8104584:	4313      	orrs	r3, r2
 8104586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8104588:	683b      	ldr	r3, [r7, #0]
 810458a:	699b      	ldr	r3, [r3, #24]
 810458c:	693a      	ldr	r2, [r7, #16]
 810458e:	4313      	orrs	r3, r2
 8104590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	693a      	ldr	r2, [r7, #16]
 8104596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	68fa      	ldr	r2, [r7, #12]
 810459c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810459e:	683b      	ldr	r3, [r7, #0]
 81045a0:	685a      	ldr	r2, [r3, #4]
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	697a      	ldr	r2, [r7, #20]
 81045aa:	621a      	str	r2, [r3, #32]
}
 81045ac:	bf00      	nop
 81045ae:	371c      	adds	r7, #28
 81045b0:	46bd      	mov	sp, r7
 81045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045b6:	4770      	bx	lr
 81045b8:	40010000 	.word	0x40010000
 81045bc:	40010400 	.word	0x40010400
 81045c0:	40014000 	.word	0x40014000
 81045c4:	40014400 	.word	0x40014400
 81045c8:	40014800 	.word	0x40014800

081045cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81045cc:	b480      	push	{r7}
 81045ce:	b087      	sub	sp, #28
 81045d0:	af00      	add	r7, sp, #0
 81045d2:	6078      	str	r0, [r7, #4]
 81045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	6a1b      	ldr	r3, [r3, #32]
 81045da:	f023 0210 	bic.w	r2, r3, #16
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	6a1b      	ldr	r3, [r3, #32]
 81045e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	685b      	ldr	r3, [r3, #4]
 81045ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	699b      	ldr	r3, [r3, #24]
 81045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81045f4:	68fb      	ldr	r3, [r7, #12]
 81045f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8104600:	68fb      	ldr	r3, [r7, #12]
 8104602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104608:	683b      	ldr	r3, [r7, #0]
 810460a:	681b      	ldr	r3, [r3, #0]
 810460c:	021b      	lsls	r3, r3, #8
 810460e:	68fa      	ldr	r2, [r7, #12]
 8104610:	4313      	orrs	r3, r2
 8104612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8104614:	697b      	ldr	r3, [r7, #20]
 8104616:	f023 0320 	bic.w	r3, r3, #32
 810461a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810461c:	683b      	ldr	r3, [r7, #0]
 810461e:	689b      	ldr	r3, [r3, #8]
 8104620:	011b      	lsls	r3, r3, #4
 8104622:	697a      	ldr	r2, [r7, #20]
 8104624:	4313      	orrs	r3, r2
 8104626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8104628:	687b      	ldr	r3, [r7, #4]
 810462a:	4a28      	ldr	r2, [pc, #160]	; (81046cc <TIM_OC2_SetConfig+0x100>)
 810462c:	4293      	cmp	r3, r2
 810462e:	d003      	beq.n	8104638 <TIM_OC2_SetConfig+0x6c>
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	4a27      	ldr	r2, [pc, #156]	; (81046d0 <TIM_OC2_SetConfig+0x104>)
 8104634:	4293      	cmp	r3, r2
 8104636:	d10d      	bne.n	8104654 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8104638:	697b      	ldr	r3, [r7, #20]
 810463a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8104640:	683b      	ldr	r3, [r7, #0]
 8104642:	68db      	ldr	r3, [r3, #12]
 8104644:	011b      	lsls	r3, r3, #4
 8104646:	697a      	ldr	r2, [r7, #20]
 8104648:	4313      	orrs	r3, r2
 810464a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810464c:	697b      	ldr	r3, [r7, #20]
 810464e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8104652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	4a1d      	ldr	r2, [pc, #116]	; (81046cc <TIM_OC2_SetConfig+0x100>)
 8104658:	4293      	cmp	r3, r2
 810465a:	d00f      	beq.n	810467c <TIM_OC2_SetConfig+0xb0>
 810465c:	687b      	ldr	r3, [r7, #4]
 810465e:	4a1c      	ldr	r2, [pc, #112]	; (81046d0 <TIM_OC2_SetConfig+0x104>)
 8104660:	4293      	cmp	r3, r2
 8104662:	d00b      	beq.n	810467c <TIM_OC2_SetConfig+0xb0>
 8104664:	687b      	ldr	r3, [r7, #4]
 8104666:	4a1b      	ldr	r2, [pc, #108]	; (81046d4 <TIM_OC2_SetConfig+0x108>)
 8104668:	4293      	cmp	r3, r2
 810466a:	d007      	beq.n	810467c <TIM_OC2_SetConfig+0xb0>
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	4a1a      	ldr	r2, [pc, #104]	; (81046d8 <TIM_OC2_SetConfig+0x10c>)
 8104670:	4293      	cmp	r3, r2
 8104672:	d003      	beq.n	810467c <TIM_OC2_SetConfig+0xb0>
 8104674:	687b      	ldr	r3, [r7, #4]
 8104676:	4a19      	ldr	r2, [pc, #100]	; (81046dc <TIM_OC2_SetConfig+0x110>)
 8104678:	4293      	cmp	r3, r2
 810467a:	d113      	bne.n	81046a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810467c:	693b      	ldr	r3, [r7, #16]
 810467e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8104682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8104684:	693b      	ldr	r3, [r7, #16]
 8104686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810468a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810468c:	683b      	ldr	r3, [r7, #0]
 810468e:	695b      	ldr	r3, [r3, #20]
 8104690:	009b      	lsls	r3, r3, #2
 8104692:	693a      	ldr	r2, [r7, #16]
 8104694:	4313      	orrs	r3, r2
 8104696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8104698:	683b      	ldr	r3, [r7, #0]
 810469a:	699b      	ldr	r3, [r3, #24]
 810469c:	009b      	lsls	r3, r3, #2
 810469e:	693a      	ldr	r2, [r7, #16]
 81046a0:	4313      	orrs	r3, r2
 81046a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	693a      	ldr	r2, [r7, #16]
 81046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	68fa      	ldr	r2, [r7, #12]
 81046ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81046b0:	683b      	ldr	r3, [r7, #0]
 81046b2:	685a      	ldr	r2, [r3, #4]
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	697a      	ldr	r2, [r7, #20]
 81046bc:	621a      	str	r2, [r3, #32]
}
 81046be:	bf00      	nop
 81046c0:	371c      	adds	r7, #28
 81046c2:	46bd      	mov	sp, r7
 81046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046c8:	4770      	bx	lr
 81046ca:	bf00      	nop
 81046cc:	40010000 	.word	0x40010000
 81046d0:	40010400 	.word	0x40010400
 81046d4:	40014000 	.word	0x40014000
 81046d8:	40014400 	.word	0x40014400
 81046dc:	40014800 	.word	0x40014800

081046e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81046e0:	b480      	push	{r7}
 81046e2:	b087      	sub	sp, #28
 81046e4:	af00      	add	r7, sp, #0
 81046e6:	6078      	str	r0, [r7, #4]
 81046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	6a1b      	ldr	r3, [r3, #32]
 81046ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	6a1b      	ldr	r3, [r3, #32]
 81046fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	685b      	ldr	r3, [r3, #4]
 8104700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	69db      	ldr	r3, [r3, #28]
 8104706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8104708:	68fb      	ldr	r3, [r7, #12]
 810470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8104710:	68fb      	ldr	r3, [r7, #12]
 8104712:	f023 0303 	bic.w	r3, r3, #3
 8104716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8104718:	683b      	ldr	r3, [r7, #0]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	68fa      	ldr	r2, [r7, #12]
 810471e:	4313      	orrs	r3, r2
 8104720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8104722:	697b      	ldr	r3, [r7, #20]
 8104724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8104728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810472a:	683b      	ldr	r3, [r7, #0]
 810472c:	689b      	ldr	r3, [r3, #8]
 810472e:	021b      	lsls	r3, r3, #8
 8104730:	697a      	ldr	r2, [r7, #20]
 8104732:	4313      	orrs	r3, r2
 8104734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	4a27      	ldr	r2, [pc, #156]	; (81047d8 <TIM_OC3_SetConfig+0xf8>)
 810473a:	4293      	cmp	r3, r2
 810473c:	d003      	beq.n	8104746 <TIM_OC3_SetConfig+0x66>
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	4a26      	ldr	r2, [pc, #152]	; (81047dc <TIM_OC3_SetConfig+0xfc>)
 8104742:	4293      	cmp	r3, r2
 8104744:	d10d      	bne.n	8104762 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8104746:	697b      	ldr	r3, [r7, #20]
 8104748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810474c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810474e:	683b      	ldr	r3, [r7, #0]
 8104750:	68db      	ldr	r3, [r3, #12]
 8104752:	021b      	lsls	r3, r3, #8
 8104754:	697a      	ldr	r2, [r7, #20]
 8104756:	4313      	orrs	r3, r2
 8104758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810475a:	697b      	ldr	r3, [r7, #20]
 810475c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8104760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	4a1c      	ldr	r2, [pc, #112]	; (81047d8 <TIM_OC3_SetConfig+0xf8>)
 8104766:	4293      	cmp	r3, r2
 8104768:	d00f      	beq.n	810478a <TIM_OC3_SetConfig+0xaa>
 810476a:	687b      	ldr	r3, [r7, #4]
 810476c:	4a1b      	ldr	r2, [pc, #108]	; (81047dc <TIM_OC3_SetConfig+0xfc>)
 810476e:	4293      	cmp	r3, r2
 8104770:	d00b      	beq.n	810478a <TIM_OC3_SetConfig+0xaa>
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	4a1a      	ldr	r2, [pc, #104]	; (81047e0 <TIM_OC3_SetConfig+0x100>)
 8104776:	4293      	cmp	r3, r2
 8104778:	d007      	beq.n	810478a <TIM_OC3_SetConfig+0xaa>
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	4a19      	ldr	r2, [pc, #100]	; (81047e4 <TIM_OC3_SetConfig+0x104>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d003      	beq.n	810478a <TIM_OC3_SetConfig+0xaa>
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	4a18      	ldr	r2, [pc, #96]	; (81047e8 <TIM_OC3_SetConfig+0x108>)
 8104786:	4293      	cmp	r3, r2
 8104788:	d113      	bne.n	81047b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810478a:	693b      	ldr	r3, [r7, #16]
 810478c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8104790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8104792:	693b      	ldr	r3, [r7, #16]
 8104794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810479a:	683b      	ldr	r3, [r7, #0]
 810479c:	695b      	ldr	r3, [r3, #20]
 810479e:	011b      	lsls	r3, r3, #4
 81047a0:	693a      	ldr	r2, [r7, #16]
 81047a2:	4313      	orrs	r3, r2
 81047a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81047a6:	683b      	ldr	r3, [r7, #0]
 81047a8:	699b      	ldr	r3, [r3, #24]
 81047aa:	011b      	lsls	r3, r3, #4
 81047ac:	693a      	ldr	r2, [r7, #16]
 81047ae:	4313      	orrs	r3, r2
 81047b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	693a      	ldr	r2, [r7, #16]
 81047b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81047b8:	687b      	ldr	r3, [r7, #4]
 81047ba:	68fa      	ldr	r2, [r7, #12]
 81047bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81047be:	683b      	ldr	r3, [r7, #0]
 81047c0:	685a      	ldr	r2, [r3, #4]
 81047c2:	687b      	ldr	r3, [r7, #4]
 81047c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	697a      	ldr	r2, [r7, #20]
 81047ca:	621a      	str	r2, [r3, #32]
}
 81047cc:	bf00      	nop
 81047ce:	371c      	adds	r7, #28
 81047d0:	46bd      	mov	sp, r7
 81047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047d6:	4770      	bx	lr
 81047d8:	40010000 	.word	0x40010000
 81047dc:	40010400 	.word	0x40010400
 81047e0:	40014000 	.word	0x40014000
 81047e4:	40014400 	.word	0x40014400
 81047e8:	40014800 	.word	0x40014800

081047ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81047ec:	b480      	push	{r7}
 81047ee:	b087      	sub	sp, #28
 81047f0:	af00      	add	r7, sp, #0
 81047f2:	6078      	str	r0, [r7, #4]
 81047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	6a1b      	ldr	r3, [r3, #32]
 81047fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	6a1b      	ldr	r3, [r3, #32]
 8104806:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	685b      	ldr	r3, [r3, #4]
 810480c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	69db      	ldr	r3, [r3, #28]
 8104812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8104814:	68fb      	ldr	r3, [r7, #12]
 8104816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810481a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104824:	683b      	ldr	r3, [r7, #0]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	021b      	lsls	r3, r3, #8
 810482a:	68fa      	ldr	r2, [r7, #12]
 810482c:	4313      	orrs	r3, r2
 810482e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8104830:	693b      	ldr	r3, [r7, #16]
 8104832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8104836:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8104838:	683b      	ldr	r3, [r7, #0]
 810483a:	689b      	ldr	r3, [r3, #8]
 810483c:	031b      	lsls	r3, r3, #12
 810483e:	693a      	ldr	r2, [r7, #16]
 8104840:	4313      	orrs	r3, r2
 8104842:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	4a18      	ldr	r2, [pc, #96]	; (81048a8 <TIM_OC4_SetConfig+0xbc>)
 8104848:	4293      	cmp	r3, r2
 810484a:	d00f      	beq.n	810486c <TIM_OC4_SetConfig+0x80>
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	4a17      	ldr	r2, [pc, #92]	; (81048ac <TIM_OC4_SetConfig+0xc0>)
 8104850:	4293      	cmp	r3, r2
 8104852:	d00b      	beq.n	810486c <TIM_OC4_SetConfig+0x80>
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	4a16      	ldr	r2, [pc, #88]	; (81048b0 <TIM_OC4_SetConfig+0xc4>)
 8104858:	4293      	cmp	r3, r2
 810485a:	d007      	beq.n	810486c <TIM_OC4_SetConfig+0x80>
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	4a15      	ldr	r2, [pc, #84]	; (81048b4 <TIM_OC4_SetConfig+0xc8>)
 8104860:	4293      	cmp	r3, r2
 8104862:	d003      	beq.n	810486c <TIM_OC4_SetConfig+0x80>
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	4a14      	ldr	r2, [pc, #80]	; (81048b8 <TIM_OC4_SetConfig+0xcc>)
 8104868:	4293      	cmp	r3, r2
 810486a:	d109      	bne.n	8104880 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810486c:	697b      	ldr	r3, [r7, #20]
 810486e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8104872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8104874:	683b      	ldr	r3, [r7, #0]
 8104876:	695b      	ldr	r3, [r3, #20]
 8104878:	019b      	lsls	r3, r3, #6
 810487a:	697a      	ldr	r2, [r7, #20]
 810487c:	4313      	orrs	r3, r2
 810487e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	697a      	ldr	r2, [r7, #20]
 8104884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	68fa      	ldr	r2, [r7, #12]
 810488a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810488c:	683b      	ldr	r3, [r7, #0]
 810488e:	685a      	ldr	r2, [r3, #4]
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	693a      	ldr	r2, [r7, #16]
 8104898:	621a      	str	r2, [r3, #32]
}
 810489a:	bf00      	nop
 810489c:	371c      	adds	r7, #28
 810489e:	46bd      	mov	sp, r7
 81048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048a4:	4770      	bx	lr
 81048a6:	bf00      	nop
 81048a8:	40010000 	.word	0x40010000
 81048ac:	40010400 	.word	0x40010400
 81048b0:	40014000 	.word	0x40014000
 81048b4:	40014400 	.word	0x40014400
 81048b8:	40014800 	.word	0x40014800

081048bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81048bc:	b480      	push	{r7}
 81048be:	b087      	sub	sp, #28
 81048c0:	af00      	add	r7, sp, #0
 81048c2:	6078      	str	r0, [r7, #4]
 81048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	6a1b      	ldr	r3, [r3, #32]
 81048ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	6a1b      	ldr	r3, [r3, #32]
 81048d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	685b      	ldr	r3, [r3, #4]
 81048dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81048de:	687b      	ldr	r3, [r7, #4]
 81048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81048e4:	68fb      	ldr	r3, [r7, #12]
 81048e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81048ec:	683b      	ldr	r3, [r7, #0]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	68fa      	ldr	r2, [r7, #12]
 81048f2:	4313      	orrs	r3, r2
 81048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81048f6:	693b      	ldr	r3, [r7, #16]
 81048f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81048fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81048fe:	683b      	ldr	r3, [r7, #0]
 8104900:	689b      	ldr	r3, [r3, #8]
 8104902:	041b      	lsls	r3, r3, #16
 8104904:	693a      	ldr	r2, [r7, #16]
 8104906:	4313      	orrs	r3, r2
 8104908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	4a17      	ldr	r2, [pc, #92]	; (810496c <TIM_OC5_SetConfig+0xb0>)
 810490e:	4293      	cmp	r3, r2
 8104910:	d00f      	beq.n	8104932 <TIM_OC5_SetConfig+0x76>
 8104912:	687b      	ldr	r3, [r7, #4]
 8104914:	4a16      	ldr	r2, [pc, #88]	; (8104970 <TIM_OC5_SetConfig+0xb4>)
 8104916:	4293      	cmp	r3, r2
 8104918:	d00b      	beq.n	8104932 <TIM_OC5_SetConfig+0x76>
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	4a15      	ldr	r2, [pc, #84]	; (8104974 <TIM_OC5_SetConfig+0xb8>)
 810491e:	4293      	cmp	r3, r2
 8104920:	d007      	beq.n	8104932 <TIM_OC5_SetConfig+0x76>
 8104922:	687b      	ldr	r3, [r7, #4]
 8104924:	4a14      	ldr	r2, [pc, #80]	; (8104978 <TIM_OC5_SetConfig+0xbc>)
 8104926:	4293      	cmp	r3, r2
 8104928:	d003      	beq.n	8104932 <TIM_OC5_SetConfig+0x76>
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	4a13      	ldr	r2, [pc, #76]	; (810497c <TIM_OC5_SetConfig+0xc0>)
 810492e:	4293      	cmp	r3, r2
 8104930:	d109      	bne.n	8104946 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8104932:	697b      	ldr	r3, [r7, #20]
 8104934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104938:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810493a:	683b      	ldr	r3, [r7, #0]
 810493c:	695b      	ldr	r3, [r3, #20]
 810493e:	021b      	lsls	r3, r3, #8
 8104940:	697a      	ldr	r2, [r7, #20]
 8104942:	4313      	orrs	r3, r2
 8104944:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104946:	687b      	ldr	r3, [r7, #4]
 8104948:	697a      	ldr	r2, [r7, #20]
 810494a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	68fa      	ldr	r2, [r7, #12]
 8104950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8104952:	683b      	ldr	r3, [r7, #0]
 8104954:	685a      	ldr	r2, [r3, #4]
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810495a:	687b      	ldr	r3, [r7, #4]
 810495c:	693a      	ldr	r2, [r7, #16]
 810495e:	621a      	str	r2, [r3, #32]
}
 8104960:	bf00      	nop
 8104962:	371c      	adds	r7, #28
 8104964:	46bd      	mov	sp, r7
 8104966:	f85d 7b04 	ldr.w	r7, [sp], #4
 810496a:	4770      	bx	lr
 810496c:	40010000 	.word	0x40010000
 8104970:	40010400 	.word	0x40010400
 8104974:	40014000 	.word	0x40014000
 8104978:	40014400 	.word	0x40014400
 810497c:	40014800 	.word	0x40014800

08104980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8104980:	b480      	push	{r7}
 8104982:	b087      	sub	sp, #28
 8104984:	af00      	add	r7, sp, #0
 8104986:	6078      	str	r0, [r7, #4]
 8104988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	6a1b      	ldr	r3, [r3, #32]
 810498e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	6a1b      	ldr	r3, [r3, #32]
 810499a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	685b      	ldr	r3, [r3, #4]
 81049a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81049ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81049b0:	683b      	ldr	r3, [r7, #0]
 81049b2:	681b      	ldr	r3, [r3, #0]
 81049b4:	021b      	lsls	r3, r3, #8
 81049b6:	68fa      	ldr	r2, [r7, #12]
 81049b8:	4313      	orrs	r3, r2
 81049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81049bc:	693b      	ldr	r3, [r7, #16]
 81049be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81049c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81049c4:	683b      	ldr	r3, [r7, #0]
 81049c6:	689b      	ldr	r3, [r3, #8]
 81049c8:	051b      	lsls	r3, r3, #20
 81049ca:	693a      	ldr	r2, [r7, #16]
 81049cc:	4313      	orrs	r3, r2
 81049ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	4a18      	ldr	r2, [pc, #96]	; (8104a34 <TIM_OC6_SetConfig+0xb4>)
 81049d4:	4293      	cmp	r3, r2
 81049d6:	d00f      	beq.n	81049f8 <TIM_OC6_SetConfig+0x78>
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	4a17      	ldr	r2, [pc, #92]	; (8104a38 <TIM_OC6_SetConfig+0xb8>)
 81049dc:	4293      	cmp	r3, r2
 81049de:	d00b      	beq.n	81049f8 <TIM_OC6_SetConfig+0x78>
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	4a16      	ldr	r2, [pc, #88]	; (8104a3c <TIM_OC6_SetConfig+0xbc>)
 81049e4:	4293      	cmp	r3, r2
 81049e6:	d007      	beq.n	81049f8 <TIM_OC6_SetConfig+0x78>
 81049e8:	687b      	ldr	r3, [r7, #4]
 81049ea:	4a15      	ldr	r2, [pc, #84]	; (8104a40 <TIM_OC6_SetConfig+0xc0>)
 81049ec:	4293      	cmp	r3, r2
 81049ee:	d003      	beq.n	81049f8 <TIM_OC6_SetConfig+0x78>
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	4a14      	ldr	r2, [pc, #80]	; (8104a44 <TIM_OC6_SetConfig+0xc4>)
 81049f4:	4293      	cmp	r3, r2
 81049f6:	d109      	bne.n	8104a0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81049f8:	697b      	ldr	r3, [r7, #20]
 81049fa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81049fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8104a00:	683b      	ldr	r3, [r7, #0]
 8104a02:	695b      	ldr	r3, [r3, #20]
 8104a04:	029b      	lsls	r3, r3, #10
 8104a06:	697a      	ldr	r2, [r7, #20]
 8104a08:	4313      	orrs	r3, r2
 8104a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	697a      	ldr	r2, [r7, #20]
 8104a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8104a12:	687b      	ldr	r3, [r7, #4]
 8104a14:	68fa      	ldr	r2, [r7, #12]
 8104a16:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8104a18:	683b      	ldr	r3, [r7, #0]
 8104a1a:	685a      	ldr	r2, [r3, #4]
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104a20:	687b      	ldr	r3, [r7, #4]
 8104a22:	693a      	ldr	r2, [r7, #16]
 8104a24:	621a      	str	r2, [r3, #32]
}
 8104a26:	bf00      	nop
 8104a28:	371c      	adds	r7, #28
 8104a2a:	46bd      	mov	sp, r7
 8104a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a30:	4770      	bx	lr
 8104a32:	bf00      	nop
 8104a34:	40010000 	.word	0x40010000
 8104a38:	40010400 	.word	0x40010400
 8104a3c:	40014000 	.word	0x40014000
 8104a40:	40014400 	.word	0x40014400
 8104a44:	40014800 	.word	0x40014800

08104a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104a48:	b480      	push	{r7}
 8104a4a:	b087      	sub	sp, #28
 8104a4c:	af00      	add	r7, sp, #0
 8104a4e:	60f8      	str	r0, [r7, #12]
 8104a50:	60b9      	str	r1, [r7, #8]
 8104a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	6a1b      	ldr	r3, [r3, #32]
 8104a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8104a5a:	68fb      	ldr	r3, [r7, #12]
 8104a5c:	6a1b      	ldr	r3, [r3, #32]
 8104a5e:	f023 0201 	bic.w	r2, r3, #1
 8104a62:	68fb      	ldr	r3, [r7, #12]
 8104a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	699b      	ldr	r3, [r3, #24]
 8104a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8104a6c:	693b      	ldr	r3, [r7, #16]
 8104a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8104a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8104a74:	687b      	ldr	r3, [r7, #4]
 8104a76:	011b      	lsls	r3, r3, #4
 8104a78:	693a      	ldr	r2, [r7, #16]
 8104a7a:	4313      	orrs	r3, r2
 8104a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8104a7e:	697b      	ldr	r3, [r7, #20]
 8104a80:	f023 030a 	bic.w	r3, r3, #10
 8104a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8104a86:	697a      	ldr	r2, [r7, #20]
 8104a88:	68bb      	ldr	r3, [r7, #8]
 8104a8a:	4313      	orrs	r3, r2
 8104a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8104a8e:	68fb      	ldr	r3, [r7, #12]
 8104a90:	693a      	ldr	r2, [r7, #16]
 8104a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8104a94:	68fb      	ldr	r3, [r7, #12]
 8104a96:	697a      	ldr	r2, [r7, #20]
 8104a98:	621a      	str	r2, [r3, #32]
}
 8104a9a:	bf00      	nop
 8104a9c:	371c      	adds	r7, #28
 8104a9e:	46bd      	mov	sp, r7
 8104aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aa4:	4770      	bx	lr

08104aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104aa6:	b480      	push	{r7}
 8104aa8:	b087      	sub	sp, #28
 8104aaa:	af00      	add	r7, sp, #0
 8104aac:	60f8      	str	r0, [r7, #12]
 8104aae:	60b9      	str	r1, [r7, #8]
 8104ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8104ab2:	68fb      	ldr	r3, [r7, #12]
 8104ab4:	6a1b      	ldr	r3, [r3, #32]
 8104ab6:	f023 0210 	bic.w	r2, r3, #16
 8104aba:	68fb      	ldr	r3, [r7, #12]
 8104abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104abe:	68fb      	ldr	r3, [r7, #12]
 8104ac0:	699b      	ldr	r3, [r3, #24]
 8104ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	6a1b      	ldr	r3, [r3, #32]
 8104ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8104aca:	697b      	ldr	r3, [r7, #20]
 8104acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8104ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	031b      	lsls	r3, r3, #12
 8104ad6:	697a      	ldr	r2, [r7, #20]
 8104ad8:	4313      	orrs	r3, r2
 8104ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8104adc:	693b      	ldr	r3, [r7, #16]
 8104ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8104ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8104ae4:	68bb      	ldr	r3, [r7, #8]
 8104ae6:	011b      	lsls	r3, r3, #4
 8104ae8:	693a      	ldr	r2, [r7, #16]
 8104aea:	4313      	orrs	r3, r2
 8104aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8104aee:	68fb      	ldr	r3, [r7, #12]
 8104af0:	697a      	ldr	r2, [r7, #20]
 8104af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8104af4:	68fb      	ldr	r3, [r7, #12]
 8104af6:	693a      	ldr	r2, [r7, #16]
 8104af8:	621a      	str	r2, [r3, #32]
}
 8104afa:	bf00      	nop
 8104afc:	371c      	adds	r7, #28
 8104afe:	46bd      	mov	sp, r7
 8104b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b04:	4770      	bx	lr

08104b06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8104b06:	b480      	push	{r7}
 8104b08:	b085      	sub	sp, #20
 8104b0a:	af00      	add	r7, sp, #0
 8104b0c:	6078      	str	r0, [r7, #4]
 8104b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8104b10:	687b      	ldr	r3, [r7, #4]
 8104b12:	689b      	ldr	r3, [r3, #8]
 8104b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8104b16:	68fb      	ldr	r3, [r7, #12]
 8104b18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8104b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104b20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8104b22:	683a      	ldr	r2, [r7, #0]
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	4313      	orrs	r3, r2
 8104b28:	f043 0307 	orr.w	r3, r3, #7
 8104b2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8104b2e:	687b      	ldr	r3, [r7, #4]
 8104b30:	68fa      	ldr	r2, [r7, #12]
 8104b32:	609a      	str	r2, [r3, #8]
}
 8104b34:	bf00      	nop
 8104b36:	3714      	adds	r7, #20
 8104b38:	46bd      	mov	sp, r7
 8104b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b3e:	4770      	bx	lr

08104b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8104b40:	b480      	push	{r7}
 8104b42:	b087      	sub	sp, #28
 8104b44:	af00      	add	r7, sp, #0
 8104b46:	60f8      	str	r0, [r7, #12]
 8104b48:	60b9      	str	r1, [r7, #8]
 8104b4a:	607a      	str	r2, [r7, #4]
 8104b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8104b4e:	68fb      	ldr	r3, [r7, #12]
 8104b50:	689b      	ldr	r3, [r3, #8]
 8104b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8104b54:	697b      	ldr	r3, [r7, #20]
 8104b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8104b5c:	683b      	ldr	r3, [r7, #0]
 8104b5e:	021a      	lsls	r2, r3, #8
 8104b60:	687b      	ldr	r3, [r7, #4]
 8104b62:	431a      	orrs	r2, r3
 8104b64:	68bb      	ldr	r3, [r7, #8]
 8104b66:	4313      	orrs	r3, r2
 8104b68:	697a      	ldr	r2, [r7, #20]
 8104b6a:	4313      	orrs	r3, r2
 8104b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8104b6e:	68fb      	ldr	r3, [r7, #12]
 8104b70:	697a      	ldr	r2, [r7, #20]
 8104b72:	609a      	str	r2, [r3, #8]
}
 8104b74:	bf00      	nop
 8104b76:	371c      	adds	r7, #28
 8104b78:	46bd      	mov	sp, r7
 8104b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b7e:	4770      	bx	lr

08104b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8104b80:	b480      	push	{r7}
 8104b82:	b087      	sub	sp, #28
 8104b84:	af00      	add	r7, sp, #0
 8104b86:	60f8      	str	r0, [r7, #12]
 8104b88:	60b9      	str	r1, [r7, #8]
 8104b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8104b8c:	68bb      	ldr	r3, [r7, #8]
 8104b8e:	f003 031f 	and.w	r3, r3, #31
 8104b92:	2201      	movs	r2, #1
 8104b94:	fa02 f303 	lsl.w	r3, r2, r3
 8104b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8104b9a:	68fb      	ldr	r3, [r7, #12]
 8104b9c:	6a1a      	ldr	r2, [r3, #32]
 8104b9e:	697b      	ldr	r3, [r7, #20]
 8104ba0:	43db      	mvns	r3, r3
 8104ba2:	401a      	ands	r2, r3
 8104ba4:	68fb      	ldr	r3, [r7, #12]
 8104ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8104ba8:	68fb      	ldr	r3, [r7, #12]
 8104baa:	6a1a      	ldr	r2, [r3, #32]
 8104bac:	68bb      	ldr	r3, [r7, #8]
 8104bae:	f003 031f 	and.w	r3, r3, #31
 8104bb2:	6879      	ldr	r1, [r7, #4]
 8104bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8104bb8:	431a      	orrs	r2, r3
 8104bba:	68fb      	ldr	r3, [r7, #12]
 8104bbc:	621a      	str	r2, [r3, #32]
}
 8104bbe:	bf00      	nop
 8104bc0:	371c      	adds	r7, #28
 8104bc2:	46bd      	mov	sp, r7
 8104bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bc8:	4770      	bx	lr
	...

08104bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8104bcc:	b480      	push	{r7}
 8104bce:	b085      	sub	sp, #20
 8104bd0:	af00      	add	r7, sp, #0
 8104bd2:	6078      	str	r0, [r7, #4]
 8104bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104bdc:	2b01      	cmp	r3, #1
 8104bde:	d101      	bne.n	8104be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8104be0:	2302      	movs	r3, #2
 8104be2:	e068      	b.n	8104cb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	2201      	movs	r2, #1
 8104be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	2202      	movs	r2, #2
 8104bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	685b      	ldr	r3, [r3, #4]
 8104bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8104bfc:	687b      	ldr	r3, [r7, #4]
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	689b      	ldr	r3, [r3, #8]
 8104c02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	681b      	ldr	r3, [r3, #0]
 8104c08:	4a2e      	ldr	r2, [pc, #184]	; (8104cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8104c0a:	4293      	cmp	r3, r2
 8104c0c:	d004      	beq.n	8104c18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8104c0e:	687b      	ldr	r3, [r7, #4]
 8104c10:	681b      	ldr	r3, [r3, #0]
 8104c12:	4a2d      	ldr	r2, [pc, #180]	; (8104cc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8104c14:	4293      	cmp	r3, r2
 8104c16:	d108      	bne.n	8104c2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8104c18:	68fb      	ldr	r3, [r7, #12]
 8104c1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8104c1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8104c20:	683b      	ldr	r3, [r7, #0]
 8104c22:	685b      	ldr	r3, [r3, #4]
 8104c24:	68fa      	ldr	r2, [r7, #12]
 8104c26:	4313      	orrs	r3, r2
 8104c28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8104c2a:	68fb      	ldr	r3, [r7, #12]
 8104c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104c30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8104c32:	683b      	ldr	r3, [r7, #0]
 8104c34:	681b      	ldr	r3, [r3, #0]
 8104c36:	68fa      	ldr	r2, [r7, #12]
 8104c38:	4313      	orrs	r3, r2
 8104c3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	681b      	ldr	r3, [r3, #0]
 8104c40:	68fa      	ldr	r2, [r7, #12]
 8104c42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	681b      	ldr	r3, [r3, #0]
 8104c48:	4a1e      	ldr	r2, [pc, #120]	; (8104cc4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8104c4a:	4293      	cmp	r3, r2
 8104c4c:	d01d      	beq.n	8104c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104c4e:	687b      	ldr	r3, [r7, #4]
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104c56:	d018      	beq.n	8104c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104c58:	687b      	ldr	r3, [r7, #4]
 8104c5a:	681b      	ldr	r3, [r3, #0]
 8104c5c:	4a1b      	ldr	r2, [pc, #108]	; (8104ccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8104c5e:	4293      	cmp	r3, r2
 8104c60:	d013      	beq.n	8104c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	681b      	ldr	r3, [r3, #0]
 8104c66:	4a1a      	ldr	r2, [pc, #104]	; (8104cd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8104c68:	4293      	cmp	r3, r2
 8104c6a:	d00e      	beq.n	8104c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	681b      	ldr	r3, [r3, #0]
 8104c70:	4a18      	ldr	r2, [pc, #96]	; (8104cd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8104c72:	4293      	cmp	r3, r2
 8104c74:	d009      	beq.n	8104c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	4a13      	ldr	r2, [pc, #76]	; (8104cc8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8104c7c:	4293      	cmp	r3, r2
 8104c7e:	d004      	beq.n	8104c8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	4a14      	ldr	r2, [pc, #80]	; (8104cd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8104c86:	4293      	cmp	r3, r2
 8104c88:	d10c      	bne.n	8104ca4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8104c8a:	68bb      	ldr	r3, [r7, #8]
 8104c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8104c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8104c92:	683b      	ldr	r3, [r7, #0]
 8104c94:	689b      	ldr	r3, [r3, #8]
 8104c96:	68ba      	ldr	r2, [r7, #8]
 8104c98:	4313      	orrs	r3, r2
 8104c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	681b      	ldr	r3, [r3, #0]
 8104ca0:	68ba      	ldr	r2, [r7, #8]
 8104ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	2201      	movs	r2, #1
 8104ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8104cac:	687b      	ldr	r3, [r7, #4]
 8104cae:	2200      	movs	r2, #0
 8104cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104cb4:	2300      	movs	r3, #0
}
 8104cb6:	4618      	mov	r0, r3
 8104cb8:	3714      	adds	r7, #20
 8104cba:	46bd      	mov	sp, r7
 8104cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cc0:	4770      	bx	lr
 8104cc2:	bf00      	nop
 8104cc4:	40010000 	.word	0x40010000
 8104cc8:	40010400 	.word	0x40010400
 8104ccc:	40000400 	.word	0x40000400
 8104cd0:	40000800 	.word	0x40000800
 8104cd4:	40000c00 	.word	0x40000c00
 8104cd8:	40001800 	.word	0x40001800

08104cdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8104cdc:	b480      	push	{r7}
 8104cde:	b085      	sub	sp, #20
 8104ce0:	af00      	add	r7, sp, #0
 8104ce2:	6078      	str	r0, [r7, #4]
 8104ce4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8104ce6:	2300      	movs	r3, #0
 8104ce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8104cf0:	2b01      	cmp	r3, #1
 8104cf2:	d101      	bne.n	8104cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8104cf4:	2302      	movs	r3, #2
 8104cf6:	e065      	b.n	8104dc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8104cf8:	687b      	ldr	r3, [r7, #4]
 8104cfa:	2201      	movs	r2, #1
 8104cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8104d00:	68fb      	ldr	r3, [r7, #12]
 8104d02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104d06:	683b      	ldr	r3, [r7, #0]
 8104d08:	68db      	ldr	r3, [r3, #12]
 8104d0a:	4313      	orrs	r3, r2
 8104d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8104d0e:	68fb      	ldr	r3, [r7, #12]
 8104d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104d14:	683b      	ldr	r3, [r7, #0]
 8104d16:	689b      	ldr	r3, [r3, #8]
 8104d18:	4313      	orrs	r3, r2
 8104d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8104d1c:	68fb      	ldr	r3, [r7, #12]
 8104d1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8104d22:	683b      	ldr	r3, [r7, #0]
 8104d24:	685b      	ldr	r3, [r3, #4]
 8104d26:	4313      	orrs	r3, r2
 8104d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8104d2a:	68fb      	ldr	r3, [r7, #12]
 8104d2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8104d30:	683b      	ldr	r3, [r7, #0]
 8104d32:	681b      	ldr	r3, [r3, #0]
 8104d34:	4313      	orrs	r3, r2
 8104d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8104d38:	68fb      	ldr	r3, [r7, #12]
 8104d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8104d3e:	683b      	ldr	r3, [r7, #0]
 8104d40:	691b      	ldr	r3, [r3, #16]
 8104d42:	4313      	orrs	r3, r2
 8104d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8104d46:	68fb      	ldr	r3, [r7, #12]
 8104d48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8104d4c:	683b      	ldr	r3, [r7, #0]
 8104d4e:	695b      	ldr	r3, [r3, #20]
 8104d50:	4313      	orrs	r3, r2
 8104d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8104d54:	68fb      	ldr	r3, [r7, #12]
 8104d56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104d5a:	683b      	ldr	r3, [r7, #0]
 8104d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d5e:	4313      	orrs	r3, r2
 8104d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8104d62:	68fb      	ldr	r3, [r7, #12]
 8104d64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8104d68:	683b      	ldr	r3, [r7, #0]
 8104d6a:	699b      	ldr	r3, [r3, #24]
 8104d6c:	041b      	lsls	r3, r3, #16
 8104d6e:	4313      	orrs	r3, r2
 8104d70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8104d72:	687b      	ldr	r3, [r7, #4]
 8104d74:	681b      	ldr	r3, [r3, #0]
 8104d76:	4a16      	ldr	r2, [pc, #88]	; (8104dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8104d78:	4293      	cmp	r3, r2
 8104d7a:	d004      	beq.n	8104d86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	4a14      	ldr	r2, [pc, #80]	; (8104dd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8104d82:	4293      	cmp	r3, r2
 8104d84:	d115      	bne.n	8104db2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8104d86:	68fb      	ldr	r3, [r7, #12]
 8104d88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8104d8c:	683b      	ldr	r3, [r7, #0]
 8104d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d90:	051b      	lsls	r3, r3, #20
 8104d92:	4313      	orrs	r3, r2
 8104d94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8104d96:	68fb      	ldr	r3, [r7, #12]
 8104d98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104d9c:	683b      	ldr	r3, [r7, #0]
 8104d9e:	69db      	ldr	r3, [r3, #28]
 8104da0:	4313      	orrs	r3, r2
 8104da2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8104daa:	683b      	ldr	r3, [r7, #0]
 8104dac:	6a1b      	ldr	r3, [r3, #32]
 8104dae:	4313      	orrs	r3, r2
 8104db0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8104db2:	687b      	ldr	r3, [r7, #4]
 8104db4:	681b      	ldr	r3, [r3, #0]
 8104db6:	68fa      	ldr	r2, [r7, #12]
 8104db8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8104dba:	687b      	ldr	r3, [r7, #4]
 8104dbc:	2200      	movs	r2, #0
 8104dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104dc2:	2300      	movs	r3, #0
}
 8104dc4:	4618      	mov	r0, r3
 8104dc6:	3714      	adds	r7, #20
 8104dc8:	46bd      	mov	sp, r7
 8104dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dce:	4770      	bx	lr
 8104dd0:	40010000 	.word	0x40010000
 8104dd4:	40010400 	.word	0x40010400

08104dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8104dd8:	b480      	push	{r7}
 8104dda:	b083      	sub	sp, #12
 8104ddc:	af00      	add	r7, sp, #0
 8104dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8104de0:	bf00      	nop
 8104de2:	370c      	adds	r7, #12
 8104de4:	46bd      	mov	sp, r7
 8104de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dea:	4770      	bx	lr

08104dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8104dec:	b480      	push	{r7}
 8104dee:	b083      	sub	sp, #12
 8104df0:	af00      	add	r7, sp, #0
 8104df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8104df4:	bf00      	nop
 8104df6:	370c      	adds	r7, #12
 8104df8:	46bd      	mov	sp, r7
 8104dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dfe:	4770      	bx	lr

08104e00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8104e00:	b480      	push	{r7}
 8104e02:	b083      	sub	sp, #12
 8104e04:	af00      	add	r7, sp, #0
 8104e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8104e08:	bf00      	nop
 8104e0a:	370c      	adds	r7, #12
 8104e0c:	46bd      	mov	sp, r7
 8104e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e12:	4770      	bx	lr

08104e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104e14:	b580      	push	{r7, lr}
 8104e16:	b082      	sub	sp, #8
 8104e18:	af00      	add	r7, sp, #0
 8104e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104e1c:	687b      	ldr	r3, [r7, #4]
 8104e1e:	2b00      	cmp	r3, #0
 8104e20:	d101      	bne.n	8104e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104e22:	2301      	movs	r3, #1
 8104e24:	e042      	b.n	8104eac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104e2c:	2b00      	cmp	r3, #0
 8104e2e:	d106      	bne.n	8104e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104e30:	687b      	ldr	r3, [r7, #4]
 8104e32:	2200      	movs	r2, #0
 8104e34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104e38:	6878      	ldr	r0, [r7, #4]
 8104e3a:	f7fc fef5 	bl	8101c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	2224      	movs	r2, #36	; 0x24
 8104e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8104e46:	687b      	ldr	r3, [r7, #4]
 8104e48:	681b      	ldr	r3, [r3, #0]
 8104e4a:	681a      	ldr	r2, [r3, #0]
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	f022 0201 	bic.w	r2, r2, #1
 8104e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104e56:	6878      	ldr	r0, [r7, #4]
 8104e58:	f000 f8c2 	bl	8104fe0 <UART_SetConfig>
 8104e5c:	4603      	mov	r3, r0
 8104e5e:	2b01      	cmp	r3, #1
 8104e60:	d101      	bne.n	8104e66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104e62:	2301      	movs	r3, #1
 8104e64:	e022      	b.n	8104eac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e6a:	2b00      	cmp	r3, #0
 8104e6c:	d002      	beq.n	8104e74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8104e6e:	6878      	ldr	r0, [r7, #4]
 8104e70:	f000 fe66 	bl	8105b40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	685a      	ldr	r2, [r3, #4]
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	689a      	ldr	r2, [r3, #8]
 8104e8a:	687b      	ldr	r3, [r7, #4]
 8104e8c:	681b      	ldr	r3, [r3, #0]
 8104e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104e94:	687b      	ldr	r3, [r7, #4]
 8104e96:	681b      	ldr	r3, [r3, #0]
 8104e98:	681a      	ldr	r2, [r3, #0]
 8104e9a:	687b      	ldr	r3, [r7, #4]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	f042 0201 	orr.w	r2, r2, #1
 8104ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104ea4:	6878      	ldr	r0, [r7, #4]
 8104ea6:	f000 feed 	bl	8105c84 <UART_CheckIdleState>
 8104eaa:	4603      	mov	r3, r0
}
 8104eac:	4618      	mov	r0, r3
 8104eae:	3708      	adds	r7, #8
 8104eb0:	46bd      	mov	sp, r7
 8104eb2:	bd80      	pop	{r7, pc}

08104eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104eb4:	b580      	push	{r7, lr}
 8104eb6:	b08a      	sub	sp, #40	; 0x28
 8104eb8:	af02      	add	r7, sp, #8
 8104eba:	60f8      	str	r0, [r7, #12]
 8104ebc:	60b9      	str	r1, [r7, #8]
 8104ebe:	603b      	str	r3, [r7, #0]
 8104ec0:	4613      	mov	r3, r2
 8104ec2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104ec4:	68fb      	ldr	r3, [r7, #12]
 8104ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104eca:	2b20      	cmp	r3, #32
 8104ecc:	f040 8083 	bne.w	8104fd6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8104ed0:	68bb      	ldr	r3, [r7, #8]
 8104ed2:	2b00      	cmp	r3, #0
 8104ed4:	d002      	beq.n	8104edc <HAL_UART_Transmit+0x28>
 8104ed6:	88fb      	ldrh	r3, [r7, #6]
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	d101      	bne.n	8104ee0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8104edc:	2301      	movs	r3, #1
 8104ede:	e07b      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8104ee0:	68fb      	ldr	r3, [r7, #12]
 8104ee2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8104ee6:	2b01      	cmp	r3, #1
 8104ee8:	d101      	bne.n	8104eee <HAL_UART_Transmit+0x3a>
 8104eea:	2302      	movs	r3, #2
 8104eec:	e074      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
 8104eee:	68fb      	ldr	r3, [r7, #12]
 8104ef0:	2201      	movs	r2, #1
 8104ef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104ef6:	68fb      	ldr	r3, [r7, #12]
 8104ef8:	2200      	movs	r2, #0
 8104efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8104efe:	68fb      	ldr	r3, [r7, #12]
 8104f00:	2221      	movs	r2, #33	; 0x21
 8104f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8104f06:	f7fc ff75 	bl	8101df4 <HAL_GetTick>
 8104f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104f0c:	68fb      	ldr	r3, [r7, #12]
 8104f0e:	88fa      	ldrh	r2, [r7, #6]
 8104f10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104f14:	68fb      	ldr	r3, [r7, #12]
 8104f16:	88fa      	ldrh	r2, [r7, #6]
 8104f18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	689b      	ldr	r3, [r3, #8]
 8104f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104f24:	d108      	bne.n	8104f38 <HAL_UART_Transmit+0x84>
 8104f26:	68fb      	ldr	r3, [r7, #12]
 8104f28:	691b      	ldr	r3, [r3, #16]
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d104      	bne.n	8104f38 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8104f2e:	2300      	movs	r3, #0
 8104f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8104f32:	68bb      	ldr	r3, [r7, #8]
 8104f34:	61bb      	str	r3, [r7, #24]
 8104f36:	e003      	b.n	8104f40 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104f38:	68bb      	ldr	r3, [r7, #8]
 8104f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104f3c:	2300      	movs	r3, #0
 8104f3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8104f40:	68fb      	ldr	r3, [r7, #12]
 8104f42:	2200      	movs	r2, #0
 8104f44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8104f48:	e02c      	b.n	8104fa4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104f4a:	683b      	ldr	r3, [r7, #0]
 8104f4c:	9300      	str	r3, [sp, #0]
 8104f4e:	697b      	ldr	r3, [r7, #20]
 8104f50:	2200      	movs	r2, #0
 8104f52:	2180      	movs	r1, #128	; 0x80
 8104f54:	68f8      	ldr	r0, [r7, #12]
 8104f56:	f000 fedd 	bl	8105d14 <UART_WaitOnFlagUntilTimeout>
 8104f5a:	4603      	mov	r3, r0
 8104f5c:	2b00      	cmp	r3, #0
 8104f5e:	d001      	beq.n	8104f64 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104f60:	2303      	movs	r3, #3
 8104f62:	e039      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104f64:	69fb      	ldr	r3, [r7, #28]
 8104f66:	2b00      	cmp	r3, #0
 8104f68:	d10b      	bne.n	8104f82 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104f6a:	69bb      	ldr	r3, [r7, #24]
 8104f6c:	881b      	ldrh	r3, [r3, #0]
 8104f6e:	461a      	mov	r2, r3
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	681b      	ldr	r3, [r3, #0]
 8104f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104f78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8104f7a:	69bb      	ldr	r3, [r7, #24]
 8104f7c:	3302      	adds	r3, #2
 8104f7e:	61bb      	str	r3, [r7, #24]
 8104f80:	e007      	b.n	8104f92 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104f82:	69fb      	ldr	r3, [r7, #28]
 8104f84:	781a      	ldrb	r2, [r3, #0]
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	681b      	ldr	r3, [r3, #0]
 8104f8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8104f8c:	69fb      	ldr	r3, [r7, #28]
 8104f8e:	3301      	adds	r3, #1
 8104f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104f92:	68fb      	ldr	r3, [r7, #12]
 8104f94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104f98:	b29b      	uxth	r3, r3
 8104f9a:	3b01      	subs	r3, #1
 8104f9c:	b29a      	uxth	r2, r3
 8104f9e:	68fb      	ldr	r3, [r7, #12]
 8104fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104fa4:	68fb      	ldr	r3, [r7, #12]
 8104fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104faa:	b29b      	uxth	r3, r3
 8104fac:	2b00      	cmp	r3, #0
 8104fae:	d1cc      	bne.n	8104f4a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104fb0:	683b      	ldr	r3, [r7, #0]
 8104fb2:	9300      	str	r3, [sp, #0]
 8104fb4:	697b      	ldr	r3, [r7, #20]
 8104fb6:	2200      	movs	r2, #0
 8104fb8:	2140      	movs	r1, #64	; 0x40
 8104fba:	68f8      	ldr	r0, [r7, #12]
 8104fbc:	f000 feaa 	bl	8105d14 <UART_WaitOnFlagUntilTimeout>
 8104fc0:	4603      	mov	r3, r0
 8104fc2:	2b00      	cmp	r3, #0
 8104fc4:	d001      	beq.n	8104fca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8104fc6:	2303      	movs	r3, #3
 8104fc8:	e006      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104fca:	68fb      	ldr	r3, [r7, #12]
 8104fcc:	2220      	movs	r2, #32
 8104fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8104fd2:	2300      	movs	r3, #0
 8104fd4:	e000      	b.n	8104fd8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8104fd6:	2302      	movs	r3, #2
  }
}
 8104fd8:	4618      	mov	r0, r3
 8104fda:	3720      	adds	r7, #32
 8104fdc:	46bd      	mov	sp, r7
 8104fde:	bd80      	pop	{r7, pc}

08104fe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104fe0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8104fe4:	b08e      	sub	sp, #56	; 0x38
 8104fe6:	af00      	add	r7, sp, #0
 8104fe8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104fea:	2300      	movs	r3, #0
 8104fec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104ff0:	687b      	ldr	r3, [r7, #4]
 8104ff2:	689a      	ldr	r2, [r3, #8]
 8104ff4:	687b      	ldr	r3, [r7, #4]
 8104ff6:	691b      	ldr	r3, [r3, #16]
 8104ff8:	431a      	orrs	r2, r3
 8104ffa:	687b      	ldr	r3, [r7, #4]
 8104ffc:	695b      	ldr	r3, [r3, #20]
 8104ffe:	431a      	orrs	r2, r3
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	69db      	ldr	r3, [r3, #28]
 8105004:	4313      	orrs	r3, r2
 8105006:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810500c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810500e:	4313      	orrs	r3, r2
 8105010:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8105012:	687b      	ldr	r3, [r7, #4]
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	681a      	ldr	r2, [r3, #0]
 8105018:	4bc2      	ldr	r3, [pc, #776]	; (8105324 <UART_SetConfig+0x344>)
 810501a:	4013      	ands	r3, r2
 810501c:	687a      	ldr	r2, [r7, #4]
 810501e:	6812      	ldr	r2, [r2, #0]
 8105020:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8105022:	430b      	orrs	r3, r1
 8105024:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	681b      	ldr	r3, [r3, #0]
 810502a:	685b      	ldr	r3, [r3, #4]
 810502c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	68da      	ldr	r2, [r3, #12]
 8105034:	687b      	ldr	r3, [r7, #4]
 8105036:	681b      	ldr	r3, [r3, #0]
 8105038:	430a      	orrs	r2, r1
 810503a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810503c:	687b      	ldr	r3, [r7, #4]
 810503e:	699b      	ldr	r3, [r3, #24]
 8105040:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105042:	687b      	ldr	r3, [r7, #4]
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	4ab8      	ldr	r2, [pc, #736]	; (8105328 <UART_SetConfig+0x348>)
 8105048:	4293      	cmp	r3, r2
 810504a:	d004      	beq.n	8105056 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810504c:	687b      	ldr	r3, [r7, #4]
 810504e:	6a1b      	ldr	r3, [r3, #32]
 8105050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105052:	4313      	orrs	r3, r2
 8105054:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105056:	687b      	ldr	r3, [r7, #4]
 8105058:	681b      	ldr	r3, [r3, #0]
 810505a:	689b      	ldr	r3, [r3, #8]
 810505c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8105060:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8105064:	687a      	ldr	r2, [r7, #4]
 8105066:	6812      	ldr	r2, [r2, #0]
 8105068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810506a:	430b      	orrs	r3, r1
 810506c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	681b      	ldr	r3, [r3, #0]
 8105072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105074:	f023 010f 	bic.w	r1, r3, #15
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	430a      	orrs	r2, r1
 8105082:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8105084:	687b      	ldr	r3, [r7, #4]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	4aa8      	ldr	r2, [pc, #672]	; (810532c <UART_SetConfig+0x34c>)
 810508a:	4293      	cmp	r3, r2
 810508c:	d177      	bne.n	810517e <UART_SetConfig+0x19e>
 810508e:	4ba8      	ldr	r3, [pc, #672]	; (8105330 <UART_SetConfig+0x350>)
 8105090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105096:	2b28      	cmp	r3, #40	; 0x28
 8105098:	d86c      	bhi.n	8105174 <UART_SetConfig+0x194>
 810509a:	a201      	add	r2, pc, #4	; (adr r2, 81050a0 <UART_SetConfig+0xc0>)
 810509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050a0:	08105145 	.word	0x08105145
 81050a4:	08105175 	.word	0x08105175
 81050a8:	08105175 	.word	0x08105175
 81050ac:	08105175 	.word	0x08105175
 81050b0:	08105175 	.word	0x08105175
 81050b4:	08105175 	.word	0x08105175
 81050b8:	08105175 	.word	0x08105175
 81050bc:	08105175 	.word	0x08105175
 81050c0:	0810514d 	.word	0x0810514d
 81050c4:	08105175 	.word	0x08105175
 81050c8:	08105175 	.word	0x08105175
 81050cc:	08105175 	.word	0x08105175
 81050d0:	08105175 	.word	0x08105175
 81050d4:	08105175 	.word	0x08105175
 81050d8:	08105175 	.word	0x08105175
 81050dc:	08105175 	.word	0x08105175
 81050e0:	08105155 	.word	0x08105155
 81050e4:	08105175 	.word	0x08105175
 81050e8:	08105175 	.word	0x08105175
 81050ec:	08105175 	.word	0x08105175
 81050f0:	08105175 	.word	0x08105175
 81050f4:	08105175 	.word	0x08105175
 81050f8:	08105175 	.word	0x08105175
 81050fc:	08105175 	.word	0x08105175
 8105100:	0810515d 	.word	0x0810515d
 8105104:	08105175 	.word	0x08105175
 8105108:	08105175 	.word	0x08105175
 810510c:	08105175 	.word	0x08105175
 8105110:	08105175 	.word	0x08105175
 8105114:	08105175 	.word	0x08105175
 8105118:	08105175 	.word	0x08105175
 810511c:	08105175 	.word	0x08105175
 8105120:	08105165 	.word	0x08105165
 8105124:	08105175 	.word	0x08105175
 8105128:	08105175 	.word	0x08105175
 810512c:	08105175 	.word	0x08105175
 8105130:	08105175 	.word	0x08105175
 8105134:	08105175 	.word	0x08105175
 8105138:	08105175 	.word	0x08105175
 810513c:	08105175 	.word	0x08105175
 8105140:	0810516d 	.word	0x0810516d
 8105144:	2301      	movs	r3, #1
 8105146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810514a:	e231      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810514c:	2304      	movs	r3, #4
 810514e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105152:	e22d      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105154:	2308      	movs	r3, #8
 8105156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810515a:	e229      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810515c:	2310      	movs	r3, #16
 810515e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105162:	e225      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105164:	2320      	movs	r3, #32
 8105166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810516a:	e221      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810516c:	2340      	movs	r3, #64	; 0x40
 810516e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105172:	e21d      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105174:	2380      	movs	r3, #128	; 0x80
 8105176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810517a:	bf00      	nop
 810517c:	e218      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	4a6c      	ldr	r2, [pc, #432]	; (8105334 <UART_SetConfig+0x354>)
 8105184:	4293      	cmp	r3, r2
 8105186:	d132      	bne.n	81051ee <UART_SetConfig+0x20e>
 8105188:	4b69      	ldr	r3, [pc, #420]	; (8105330 <UART_SetConfig+0x350>)
 810518a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810518c:	f003 0307 	and.w	r3, r3, #7
 8105190:	2b05      	cmp	r3, #5
 8105192:	d827      	bhi.n	81051e4 <UART_SetConfig+0x204>
 8105194:	a201      	add	r2, pc, #4	; (adr r2, 810519c <UART_SetConfig+0x1bc>)
 8105196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810519a:	bf00      	nop
 810519c:	081051b5 	.word	0x081051b5
 81051a0:	081051bd 	.word	0x081051bd
 81051a4:	081051c5 	.word	0x081051c5
 81051a8:	081051cd 	.word	0x081051cd
 81051ac:	081051d5 	.word	0x081051d5
 81051b0:	081051dd 	.word	0x081051dd
 81051b4:	2300      	movs	r3, #0
 81051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ba:	e1f9      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81051bc:	2304      	movs	r3, #4
 81051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051c2:	e1f5      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81051c4:	2308      	movs	r3, #8
 81051c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ca:	e1f1      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81051cc:	2310      	movs	r3, #16
 81051ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051d2:	e1ed      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81051d4:	2320      	movs	r3, #32
 81051d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051da:	e1e9      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81051dc:	2340      	movs	r3, #64	; 0x40
 81051de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051e2:	e1e5      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81051e4:	2380      	movs	r3, #128	; 0x80
 81051e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ea:	bf00      	nop
 81051ec:	e1e0      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	681b      	ldr	r3, [r3, #0]
 81051f2:	4a51      	ldr	r2, [pc, #324]	; (8105338 <UART_SetConfig+0x358>)
 81051f4:	4293      	cmp	r3, r2
 81051f6:	d132      	bne.n	810525e <UART_SetConfig+0x27e>
 81051f8:	4b4d      	ldr	r3, [pc, #308]	; (8105330 <UART_SetConfig+0x350>)
 81051fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81051fc:	f003 0307 	and.w	r3, r3, #7
 8105200:	2b05      	cmp	r3, #5
 8105202:	d827      	bhi.n	8105254 <UART_SetConfig+0x274>
 8105204:	a201      	add	r2, pc, #4	; (adr r2, 810520c <UART_SetConfig+0x22c>)
 8105206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810520a:	bf00      	nop
 810520c:	08105225 	.word	0x08105225
 8105210:	0810522d 	.word	0x0810522d
 8105214:	08105235 	.word	0x08105235
 8105218:	0810523d 	.word	0x0810523d
 810521c:	08105245 	.word	0x08105245
 8105220:	0810524d 	.word	0x0810524d
 8105224:	2300      	movs	r3, #0
 8105226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810522a:	e1c1      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810522c:	2304      	movs	r3, #4
 810522e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105232:	e1bd      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105234:	2308      	movs	r3, #8
 8105236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810523a:	e1b9      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810523c:	2310      	movs	r3, #16
 810523e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105242:	e1b5      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105244:	2320      	movs	r3, #32
 8105246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810524a:	e1b1      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810524c:	2340      	movs	r3, #64	; 0x40
 810524e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105252:	e1ad      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105254:	2380      	movs	r3, #128	; 0x80
 8105256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810525a:	bf00      	nop
 810525c:	e1a8      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	4a36      	ldr	r2, [pc, #216]	; (810533c <UART_SetConfig+0x35c>)
 8105264:	4293      	cmp	r3, r2
 8105266:	d132      	bne.n	81052ce <UART_SetConfig+0x2ee>
 8105268:	4b31      	ldr	r3, [pc, #196]	; (8105330 <UART_SetConfig+0x350>)
 810526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810526c:	f003 0307 	and.w	r3, r3, #7
 8105270:	2b05      	cmp	r3, #5
 8105272:	d827      	bhi.n	81052c4 <UART_SetConfig+0x2e4>
 8105274:	a201      	add	r2, pc, #4	; (adr r2, 810527c <UART_SetConfig+0x29c>)
 8105276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810527a:	bf00      	nop
 810527c:	08105295 	.word	0x08105295
 8105280:	0810529d 	.word	0x0810529d
 8105284:	081052a5 	.word	0x081052a5
 8105288:	081052ad 	.word	0x081052ad
 810528c:	081052b5 	.word	0x081052b5
 8105290:	081052bd 	.word	0x081052bd
 8105294:	2300      	movs	r3, #0
 8105296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810529a:	e189      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810529c:	2304      	movs	r3, #4
 810529e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052a2:	e185      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81052a4:	2308      	movs	r3, #8
 81052a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052aa:	e181      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81052ac:	2310      	movs	r3, #16
 81052ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052b2:	e17d      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81052b4:	2320      	movs	r3, #32
 81052b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052ba:	e179      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81052bc:	2340      	movs	r3, #64	; 0x40
 81052be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052c2:	e175      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81052c4:	2380      	movs	r3, #128	; 0x80
 81052c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81052ca:	bf00      	nop
 81052cc:	e170      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	4a1b      	ldr	r2, [pc, #108]	; (8105340 <UART_SetConfig+0x360>)
 81052d4:	4293      	cmp	r3, r2
 81052d6:	d142      	bne.n	810535e <UART_SetConfig+0x37e>
 81052d8:	4b15      	ldr	r3, [pc, #84]	; (8105330 <UART_SetConfig+0x350>)
 81052da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81052dc:	f003 0307 	and.w	r3, r3, #7
 81052e0:	2b05      	cmp	r3, #5
 81052e2:	d837      	bhi.n	8105354 <UART_SetConfig+0x374>
 81052e4:	a201      	add	r2, pc, #4	; (adr r2, 81052ec <UART_SetConfig+0x30c>)
 81052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052ea:	bf00      	nop
 81052ec:	08105305 	.word	0x08105305
 81052f0:	0810530d 	.word	0x0810530d
 81052f4:	08105315 	.word	0x08105315
 81052f8:	0810531d 	.word	0x0810531d
 81052fc:	08105345 	.word	0x08105345
 8105300:	0810534d 	.word	0x0810534d
 8105304:	2300      	movs	r3, #0
 8105306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810530a:	e151      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810530c:	2304      	movs	r3, #4
 810530e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105312:	e14d      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105314:	2308      	movs	r3, #8
 8105316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810531a:	e149      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810531c:	2310      	movs	r3, #16
 810531e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105322:	e145      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105324:	cfff69f3 	.word	0xcfff69f3
 8105328:	58000c00 	.word	0x58000c00
 810532c:	40011000 	.word	0x40011000
 8105330:	58024400 	.word	0x58024400
 8105334:	40004400 	.word	0x40004400
 8105338:	40004800 	.word	0x40004800
 810533c:	40004c00 	.word	0x40004c00
 8105340:	40005000 	.word	0x40005000
 8105344:	2320      	movs	r3, #32
 8105346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810534a:	e131      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810534c:	2340      	movs	r3, #64	; 0x40
 810534e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105352:	e12d      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105354:	2380      	movs	r3, #128	; 0x80
 8105356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810535a:	bf00      	nop
 810535c:	e128      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	4ab6      	ldr	r2, [pc, #728]	; (810563c <UART_SetConfig+0x65c>)
 8105364:	4293      	cmp	r3, r2
 8105366:	d178      	bne.n	810545a <UART_SetConfig+0x47a>
 8105368:	4bb5      	ldr	r3, [pc, #724]	; (8105640 <UART_SetConfig+0x660>)
 810536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810536c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105370:	2b28      	cmp	r3, #40	; 0x28
 8105372:	d86d      	bhi.n	8105450 <UART_SetConfig+0x470>
 8105374:	a201      	add	r2, pc, #4	; (adr r2, 810537c <UART_SetConfig+0x39c>)
 8105376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810537a:	bf00      	nop
 810537c:	08105421 	.word	0x08105421
 8105380:	08105451 	.word	0x08105451
 8105384:	08105451 	.word	0x08105451
 8105388:	08105451 	.word	0x08105451
 810538c:	08105451 	.word	0x08105451
 8105390:	08105451 	.word	0x08105451
 8105394:	08105451 	.word	0x08105451
 8105398:	08105451 	.word	0x08105451
 810539c:	08105429 	.word	0x08105429
 81053a0:	08105451 	.word	0x08105451
 81053a4:	08105451 	.word	0x08105451
 81053a8:	08105451 	.word	0x08105451
 81053ac:	08105451 	.word	0x08105451
 81053b0:	08105451 	.word	0x08105451
 81053b4:	08105451 	.word	0x08105451
 81053b8:	08105451 	.word	0x08105451
 81053bc:	08105431 	.word	0x08105431
 81053c0:	08105451 	.word	0x08105451
 81053c4:	08105451 	.word	0x08105451
 81053c8:	08105451 	.word	0x08105451
 81053cc:	08105451 	.word	0x08105451
 81053d0:	08105451 	.word	0x08105451
 81053d4:	08105451 	.word	0x08105451
 81053d8:	08105451 	.word	0x08105451
 81053dc:	08105439 	.word	0x08105439
 81053e0:	08105451 	.word	0x08105451
 81053e4:	08105451 	.word	0x08105451
 81053e8:	08105451 	.word	0x08105451
 81053ec:	08105451 	.word	0x08105451
 81053f0:	08105451 	.word	0x08105451
 81053f4:	08105451 	.word	0x08105451
 81053f8:	08105451 	.word	0x08105451
 81053fc:	08105441 	.word	0x08105441
 8105400:	08105451 	.word	0x08105451
 8105404:	08105451 	.word	0x08105451
 8105408:	08105451 	.word	0x08105451
 810540c:	08105451 	.word	0x08105451
 8105410:	08105451 	.word	0x08105451
 8105414:	08105451 	.word	0x08105451
 8105418:	08105451 	.word	0x08105451
 810541c:	08105449 	.word	0x08105449
 8105420:	2301      	movs	r3, #1
 8105422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105426:	e0c3      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105428:	2304      	movs	r3, #4
 810542a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810542e:	e0bf      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105430:	2308      	movs	r3, #8
 8105432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105436:	e0bb      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105438:	2310      	movs	r3, #16
 810543a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810543e:	e0b7      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105440:	2320      	movs	r3, #32
 8105442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105446:	e0b3      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105448:	2340      	movs	r3, #64	; 0x40
 810544a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810544e:	e0af      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105450:	2380      	movs	r3, #128	; 0x80
 8105452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105456:	bf00      	nop
 8105458:	e0aa      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810545a:	687b      	ldr	r3, [r7, #4]
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	4a79      	ldr	r2, [pc, #484]	; (8105644 <UART_SetConfig+0x664>)
 8105460:	4293      	cmp	r3, r2
 8105462:	d132      	bne.n	81054ca <UART_SetConfig+0x4ea>
 8105464:	4b76      	ldr	r3, [pc, #472]	; (8105640 <UART_SetConfig+0x660>)
 8105466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105468:	f003 0307 	and.w	r3, r3, #7
 810546c:	2b05      	cmp	r3, #5
 810546e:	d827      	bhi.n	81054c0 <UART_SetConfig+0x4e0>
 8105470:	a201      	add	r2, pc, #4	; (adr r2, 8105478 <UART_SetConfig+0x498>)
 8105472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105476:	bf00      	nop
 8105478:	08105491 	.word	0x08105491
 810547c:	08105499 	.word	0x08105499
 8105480:	081054a1 	.word	0x081054a1
 8105484:	081054a9 	.word	0x081054a9
 8105488:	081054b1 	.word	0x081054b1
 810548c:	081054b9 	.word	0x081054b9
 8105490:	2300      	movs	r3, #0
 8105492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105496:	e08b      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105498:	2304      	movs	r3, #4
 810549a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810549e:	e087      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81054a0:	2308      	movs	r3, #8
 81054a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054a6:	e083      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81054a8:	2310      	movs	r3, #16
 81054aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054ae:	e07f      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81054b0:	2320      	movs	r3, #32
 81054b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054b6:	e07b      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81054b8:	2340      	movs	r3, #64	; 0x40
 81054ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054be:	e077      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81054c0:	2380      	movs	r3, #128	; 0x80
 81054c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81054c6:	bf00      	nop
 81054c8:	e072      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	4a5e      	ldr	r2, [pc, #376]	; (8105648 <UART_SetConfig+0x668>)
 81054d0:	4293      	cmp	r3, r2
 81054d2:	d132      	bne.n	810553a <UART_SetConfig+0x55a>
 81054d4:	4b5a      	ldr	r3, [pc, #360]	; (8105640 <UART_SetConfig+0x660>)
 81054d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81054d8:	f003 0307 	and.w	r3, r3, #7
 81054dc:	2b05      	cmp	r3, #5
 81054de:	d827      	bhi.n	8105530 <UART_SetConfig+0x550>
 81054e0:	a201      	add	r2, pc, #4	; (adr r2, 81054e8 <UART_SetConfig+0x508>)
 81054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054e6:	bf00      	nop
 81054e8:	08105501 	.word	0x08105501
 81054ec:	08105509 	.word	0x08105509
 81054f0:	08105511 	.word	0x08105511
 81054f4:	08105519 	.word	0x08105519
 81054f8:	08105521 	.word	0x08105521
 81054fc:	08105529 	.word	0x08105529
 8105500:	2300      	movs	r3, #0
 8105502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105506:	e053      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105508:	2304      	movs	r3, #4
 810550a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810550e:	e04f      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105510:	2308      	movs	r3, #8
 8105512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105516:	e04b      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105518:	2310      	movs	r3, #16
 810551a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810551e:	e047      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105520:	2320      	movs	r3, #32
 8105522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105526:	e043      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105528:	2340      	movs	r3, #64	; 0x40
 810552a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810552e:	e03f      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105530:	2380      	movs	r3, #128	; 0x80
 8105532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105536:	bf00      	nop
 8105538:	e03a      	b.n	81055b0 <UART_SetConfig+0x5d0>
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	681b      	ldr	r3, [r3, #0]
 810553e:	4a43      	ldr	r2, [pc, #268]	; (810564c <UART_SetConfig+0x66c>)
 8105540:	4293      	cmp	r3, r2
 8105542:	d132      	bne.n	81055aa <UART_SetConfig+0x5ca>
 8105544:	4b3e      	ldr	r3, [pc, #248]	; (8105640 <UART_SetConfig+0x660>)
 8105546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105548:	f003 0307 	and.w	r3, r3, #7
 810554c:	2b05      	cmp	r3, #5
 810554e:	d827      	bhi.n	81055a0 <UART_SetConfig+0x5c0>
 8105550:	a201      	add	r2, pc, #4	; (adr r2, 8105558 <UART_SetConfig+0x578>)
 8105552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105556:	bf00      	nop
 8105558:	08105571 	.word	0x08105571
 810555c:	08105579 	.word	0x08105579
 8105560:	08105581 	.word	0x08105581
 8105564:	08105589 	.word	0x08105589
 8105568:	08105591 	.word	0x08105591
 810556c:	08105599 	.word	0x08105599
 8105570:	2302      	movs	r3, #2
 8105572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105576:	e01b      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105578:	2304      	movs	r3, #4
 810557a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810557e:	e017      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105580:	2308      	movs	r3, #8
 8105582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105586:	e013      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105588:	2310      	movs	r3, #16
 810558a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810558e:	e00f      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105590:	2320      	movs	r3, #32
 8105592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105596:	e00b      	b.n	81055b0 <UART_SetConfig+0x5d0>
 8105598:	2340      	movs	r3, #64	; 0x40
 810559a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810559e:	e007      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81055a0:	2380      	movs	r3, #128	; 0x80
 81055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81055a6:	bf00      	nop
 81055a8:	e002      	b.n	81055b0 <UART_SetConfig+0x5d0>
 81055aa:	2380      	movs	r3, #128	; 0x80
 81055ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	4a25      	ldr	r2, [pc, #148]	; (810564c <UART_SetConfig+0x66c>)
 81055b6:	4293      	cmp	r3, r2
 81055b8:	f040 80b8 	bne.w	810572c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81055bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81055c0:	2b08      	cmp	r3, #8
 81055c2:	d019      	beq.n	81055f8 <UART_SetConfig+0x618>
 81055c4:	2b08      	cmp	r3, #8
 81055c6:	dc04      	bgt.n	81055d2 <UART_SetConfig+0x5f2>
 81055c8:	2b02      	cmp	r3, #2
 81055ca:	d009      	beq.n	81055e0 <UART_SetConfig+0x600>
 81055cc:	2b04      	cmp	r3, #4
 81055ce:	d00b      	beq.n	81055e8 <UART_SetConfig+0x608>
 81055d0:	e042      	b.n	8105658 <UART_SetConfig+0x678>
 81055d2:	2b20      	cmp	r3, #32
 81055d4:	d02b      	beq.n	810562e <UART_SetConfig+0x64e>
 81055d6:	2b40      	cmp	r3, #64	; 0x40
 81055d8:	d02c      	beq.n	8105634 <UART_SetConfig+0x654>
 81055da:	2b10      	cmp	r3, #16
 81055dc:	d014      	beq.n	8105608 <UART_SetConfig+0x628>
 81055de:	e03b      	b.n	8105658 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81055e0:	f7fd ff32 	bl	8103448 <HAL_RCCEx_GetD3PCLK1Freq>
 81055e4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81055e6:	e03d      	b.n	8105664 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81055e8:	f107 0314 	add.w	r3, r7, #20
 81055ec:	4618      	mov	r0, r3
 81055ee:	f7fd ff41 	bl	8103474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81055f2:	69bb      	ldr	r3, [r7, #24]
 81055f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055f6:	e035      	b.n	8105664 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81055f8:	f107 0308 	add.w	r3, r7, #8
 81055fc:	4618      	mov	r0, r3
 81055fe:	f7fe f885 	bl	810370c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105602:	68fb      	ldr	r3, [r7, #12]
 8105604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105606:	e02d      	b.n	8105664 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105608:	4b0d      	ldr	r3, [pc, #52]	; (8105640 <UART_SetConfig+0x660>)
 810560a:	681b      	ldr	r3, [r3, #0]
 810560c:	f003 0320 	and.w	r3, r3, #32
 8105610:	2b00      	cmp	r3, #0
 8105612:	d009      	beq.n	8105628 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105614:	4b0a      	ldr	r3, [pc, #40]	; (8105640 <UART_SetConfig+0x660>)
 8105616:	681b      	ldr	r3, [r3, #0]
 8105618:	08db      	lsrs	r3, r3, #3
 810561a:	f003 0303 	and.w	r3, r3, #3
 810561e:	4a0c      	ldr	r2, [pc, #48]	; (8105650 <UART_SetConfig+0x670>)
 8105620:	fa22 f303 	lsr.w	r3, r2, r3
 8105624:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105626:	e01d      	b.n	8105664 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8105628:	4b09      	ldr	r3, [pc, #36]	; (8105650 <UART_SetConfig+0x670>)
 810562a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810562c:	e01a      	b.n	8105664 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810562e:	4b09      	ldr	r3, [pc, #36]	; (8105654 <UART_SetConfig+0x674>)
 8105630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105632:	e017      	b.n	8105664 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810563a:	e013      	b.n	8105664 <UART_SetConfig+0x684>
 810563c:	40011400 	.word	0x40011400
 8105640:	58024400 	.word	0x58024400
 8105644:	40007800 	.word	0x40007800
 8105648:	40007c00 	.word	0x40007c00
 810564c:	58000c00 	.word	0x58000c00
 8105650:	03d09000 	.word	0x03d09000
 8105654:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8105658:	2300      	movs	r3, #0
 810565a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810565c:	2301      	movs	r3, #1
 810565e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105662:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105666:	2b00      	cmp	r3, #0
 8105668:	f000 824d 	beq.w	8105b06 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105670:	4aad      	ldr	r2, [pc, #692]	; (8105928 <UART_SetConfig+0x948>)
 8105672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105676:	461a      	mov	r2, r3
 8105678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810567a:	fbb3 f3f2 	udiv	r3, r3, r2
 810567e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	685a      	ldr	r2, [r3, #4]
 8105684:	4613      	mov	r3, r2
 8105686:	005b      	lsls	r3, r3, #1
 8105688:	4413      	add	r3, r2
 810568a:	6a3a      	ldr	r2, [r7, #32]
 810568c:	429a      	cmp	r2, r3
 810568e:	d305      	bcc.n	810569c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105690:	687b      	ldr	r3, [r7, #4]
 8105692:	685b      	ldr	r3, [r3, #4]
 8105694:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105696:	6a3a      	ldr	r2, [r7, #32]
 8105698:	429a      	cmp	r2, r3
 810569a:	d903      	bls.n	81056a4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 810569c:	2301      	movs	r3, #1
 810569e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81056a2:	e230      	b.n	8105b06 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81056a6:	4618      	mov	r0, r3
 81056a8:	f04f 0100 	mov.w	r1, #0
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81056b0:	4a9d      	ldr	r2, [pc, #628]	; (8105928 <UART_SetConfig+0x948>)
 81056b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81056b6:	b29b      	uxth	r3, r3
 81056b8:	f04f 0400 	mov.w	r4, #0
 81056bc:	461a      	mov	r2, r3
 81056be:	4623      	mov	r3, r4
 81056c0:	f7fb fb4a 	bl	8100d58 <__aeabi_uldivmod>
 81056c4:	4603      	mov	r3, r0
 81056c6:	460c      	mov	r4, r1
 81056c8:	4619      	mov	r1, r3
 81056ca:	4622      	mov	r2, r4
 81056cc:	f04f 0300 	mov.w	r3, #0
 81056d0:	f04f 0400 	mov.w	r4, #0
 81056d4:	0214      	lsls	r4, r2, #8
 81056d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81056da:	020b      	lsls	r3, r1, #8
 81056dc:	687a      	ldr	r2, [r7, #4]
 81056de:	6852      	ldr	r2, [r2, #4]
 81056e0:	0852      	lsrs	r2, r2, #1
 81056e2:	4611      	mov	r1, r2
 81056e4:	f04f 0200 	mov.w	r2, #0
 81056e8:	eb13 0b01 	adds.w	fp, r3, r1
 81056ec:	eb44 0c02 	adc.w	ip, r4, r2
 81056f0:	4658      	mov	r0, fp
 81056f2:	4661      	mov	r1, ip
 81056f4:	687b      	ldr	r3, [r7, #4]
 81056f6:	685b      	ldr	r3, [r3, #4]
 81056f8:	f04f 0400 	mov.w	r4, #0
 81056fc:	461a      	mov	r2, r3
 81056fe:	4623      	mov	r3, r4
 8105700:	f7fb fb2a 	bl	8100d58 <__aeabi_uldivmod>
 8105704:	4603      	mov	r3, r0
 8105706:	460c      	mov	r4, r1
 8105708:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810570c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105710:	d308      	bcc.n	8105724 <UART_SetConfig+0x744>
 8105712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105718:	d204      	bcs.n	8105724 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 810571a:	687b      	ldr	r3, [r7, #4]
 810571c:	681b      	ldr	r3, [r3, #0]
 810571e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105720:	60da      	str	r2, [r3, #12]
 8105722:	e1f0      	b.n	8105b06 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8105724:	2301      	movs	r3, #1
 8105726:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810572a:	e1ec      	b.n	8105b06 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	69db      	ldr	r3, [r3, #28]
 8105730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105734:	f040 8100 	bne.w	8105938 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8105738:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810573c:	2b40      	cmp	r3, #64	; 0x40
 810573e:	f200 80b7 	bhi.w	81058b0 <UART_SetConfig+0x8d0>
 8105742:	a201      	add	r2, pc, #4	; (adr r2, 8105748 <UART_SetConfig+0x768>)
 8105744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105748:	0810584d 	.word	0x0810584d
 810574c:	08105855 	.word	0x08105855
 8105750:	081058b1 	.word	0x081058b1
 8105754:	081058b1 	.word	0x081058b1
 8105758:	0810585d 	.word	0x0810585d
 810575c:	081058b1 	.word	0x081058b1
 8105760:	081058b1 	.word	0x081058b1
 8105764:	081058b1 	.word	0x081058b1
 8105768:	0810586d 	.word	0x0810586d
 810576c:	081058b1 	.word	0x081058b1
 8105770:	081058b1 	.word	0x081058b1
 8105774:	081058b1 	.word	0x081058b1
 8105778:	081058b1 	.word	0x081058b1
 810577c:	081058b1 	.word	0x081058b1
 8105780:	081058b1 	.word	0x081058b1
 8105784:	081058b1 	.word	0x081058b1
 8105788:	0810587d 	.word	0x0810587d
 810578c:	081058b1 	.word	0x081058b1
 8105790:	081058b1 	.word	0x081058b1
 8105794:	081058b1 	.word	0x081058b1
 8105798:	081058b1 	.word	0x081058b1
 810579c:	081058b1 	.word	0x081058b1
 81057a0:	081058b1 	.word	0x081058b1
 81057a4:	081058b1 	.word	0x081058b1
 81057a8:	081058b1 	.word	0x081058b1
 81057ac:	081058b1 	.word	0x081058b1
 81057b0:	081058b1 	.word	0x081058b1
 81057b4:	081058b1 	.word	0x081058b1
 81057b8:	081058b1 	.word	0x081058b1
 81057bc:	081058b1 	.word	0x081058b1
 81057c0:	081058b1 	.word	0x081058b1
 81057c4:	081058b1 	.word	0x081058b1
 81057c8:	081058a3 	.word	0x081058a3
 81057cc:	081058b1 	.word	0x081058b1
 81057d0:	081058b1 	.word	0x081058b1
 81057d4:	081058b1 	.word	0x081058b1
 81057d8:	081058b1 	.word	0x081058b1
 81057dc:	081058b1 	.word	0x081058b1
 81057e0:	081058b1 	.word	0x081058b1
 81057e4:	081058b1 	.word	0x081058b1
 81057e8:	081058b1 	.word	0x081058b1
 81057ec:	081058b1 	.word	0x081058b1
 81057f0:	081058b1 	.word	0x081058b1
 81057f4:	081058b1 	.word	0x081058b1
 81057f8:	081058b1 	.word	0x081058b1
 81057fc:	081058b1 	.word	0x081058b1
 8105800:	081058b1 	.word	0x081058b1
 8105804:	081058b1 	.word	0x081058b1
 8105808:	081058b1 	.word	0x081058b1
 810580c:	081058b1 	.word	0x081058b1
 8105810:	081058b1 	.word	0x081058b1
 8105814:	081058b1 	.word	0x081058b1
 8105818:	081058b1 	.word	0x081058b1
 810581c:	081058b1 	.word	0x081058b1
 8105820:	081058b1 	.word	0x081058b1
 8105824:	081058b1 	.word	0x081058b1
 8105828:	081058b1 	.word	0x081058b1
 810582c:	081058b1 	.word	0x081058b1
 8105830:	081058b1 	.word	0x081058b1
 8105834:	081058b1 	.word	0x081058b1
 8105838:	081058b1 	.word	0x081058b1
 810583c:	081058b1 	.word	0x081058b1
 8105840:	081058b1 	.word	0x081058b1
 8105844:	081058b1 	.word	0x081058b1
 8105848:	081058a9 	.word	0x081058a9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810584c:	f7fd fd8e 	bl	810336c <HAL_RCC_GetPCLK1Freq>
 8105850:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105852:	e033      	b.n	81058bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105854:	f7fd fda0 	bl	8103398 <HAL_RCC_GetPCLK2Freq>
 8105858:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810585a:	e02f      	b.n	81058bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810585c:	f107 0314 	add.w	r3, r7, #20
 8105860:	4618      	mov	r0, r3
 8105862:	f7fd fe07 	bl	8103474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105866:	69bb      	ldr	r3, [r7, #24]
 8105868:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810586a:	e027      	b.n	81058bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810586c:	f107 0308 	add.w	r3, r7, #8
 8105870:	4618      	mov	r0, r3
 8105872:	f7fd ff4b 	bl	810370c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810587a:	e01f      	b.n	81058bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810587c:	4b2b      	ldr	r3, [pc, #172]	; (810592c <UART_SetConfig+0x94c>)
 810587e:	681b      	ldr	r3, [r3, #0]
 8105880:	f003 0320 	and.w	r3, r3, #32
 8105884:	2b00      	cmp	r3, #0
 8105886:	d009      	beq.n	810589c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105888:	4b28      	ldr	r3, [pc, #160]	; (810592c <UART_SetConfig+0x94c>)
 810588a:	681b      	ldr	r3, [r3, #0]
 810588c:	08db      	lsrs	r3, r3, #3
 810588e:	f003 0303 	and.w	r3, r3, #3
 8105892:	4a27      	ldr	r2, [pc, #156]	; (8105930 <UART_SetConfig+0x950>)
 8105894:	fa22 f303 	lsr.w	r3, r2, r3
 8105898:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810589a:	e00f      	b.n	81058bc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 810589c:	4b24      	ldr	r3, [pc, #144]	; (8105930 <UART_SetConfig+0x950>)
 810589e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058a0:	e00c      	b.n	81058bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81058a2:	4b24      	ldr	r3, [pc, #144]	; (8105934 <UART_SetConfig+0x954>)
 81058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058a6:	e009      	b.n	81058bc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81058a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81058ae:	e005      	b.n	81058bc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 81058b0:	2300      	movs	r3, #0
 81058b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81058b4:	2301      	movs	r3, #1
 81058b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81058ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81058be:	2b00      	cmp	r3, #0
 81058c0:	f000 8121 	beq.w	8105b06 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81058c8:	4a17      	ldr	r2, [pc, #92]	; (8105928 <UART_SetConfig+0x948>)
 81058ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81058ce:	461a      	mov	r2, r3
 81058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81058d2:	fbb3 f3f2 	udiv	r3, r3, r2
 81058d6:	005a      	lsls	r2, r3, #1
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	685b      	ldr	r3, [r3, #4]
 81058dc:	085b      	lsrs	r3, r3, #1
 81058de:	441a      	add	r2, r3
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	685b      	ldr	r3, [r3, #4]
 81058e4:	fbb2 f3f3 	udiv	r3, r2, r3
 81058e8:	b29b      	uxth	r3, r3
 81058ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058ee:	2b0f      	cmp	r3, #15
 81058f0:	d916      	bls.n	8105920 <UART_SetConfig+0x940>
 81058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81058f8:	d212      	bcs.n	8105920 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058fc:	b29b      	uxth	r3, r3
 81058fe:	f023 030f 	bic.w	r3, r3, #15
 8105902:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105906:	085b      	lsrs	r3, r3, #1
 8105908:	b29b      	uxth	r3, r3
 810590a:	f003 0307 	and.w	r3, r3, #7
 810590e:	b29a      	uxth	r2, r3
 8105910:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8105912:	4313      	orrs	r3, r2
 8105914:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8105916:	687b      	ldr	r3, [r7, #4]
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810591c:	60da      	str	r2, [r3, #12]
 810591e:	e0f2      	b.n	8105b06 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8105920:	2301      	movs	r3, #1
 8105922:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105926:	e0ee      	b.n	8105b06 <UART_SetConfig+0xb26>
 8105928:	0810ac58 	.word	0x0810ac58
 810592c:	58024400 	.word	0x58024400
 8105930:	03d09000 	.word	0x03d09000
 8105934:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8105938:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810593c:	2b40      	cmp	r3, #64	; 0x40
 810593e:	f200 80b7 	bhi.w	8105ab0 <UART_SetConfig+0xad0>
 8105942:	a201      	add	r2, pc, #4	; (adr r2, 8105948 <UART_SetConfig+0x968>)
 8105944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105948:	08105a4d 	.word	0x08105a4d
 810594c:	08105a55 	.word	0x08105a55
 8105950:	08105ab1 	.word	0x08105ab1
 8105954:	08105ab1 	.word	0x08105ab1
 8105958:	08105a5d 	.word	0x08105a5d
 810595c:	08105ab1 	.word	0x08105ab1
 8105960:	08105ab1 	.word	0x08105ab1
 8105964:	08105ab1 	.word	0x08105ab1
 8105968:	08105a6d 	.word	0x08105a6d
 810596c:	08105ab1 	.word	0x08105ab1
 8105970:	08105ab1 	.word	0x08105ab1
 8105974:	08105ab1 	.word	0x08105ab1
 8105978:	08105ab1 	.word	0x08105ab1
 810597c:	08105ab1 	.word	0x08105ab1
 8105980:	08105ab1 	.word	0x08105ab1
 8105984:	08105ab1 	.word	0x08105ab1
 8105988:	08105a7d 	.word	0x08105a7d
 810598c:	08105ab1 	.word	0x08105ab1
 8105990:	08105ab1 	.word	0x08105ab1
 8105994:	08105ab1 	.word	0x08105ab1
 8105998:	08105ab1 	.word	0x08105ab1
 810599c:	08105ab1 	.word	0x08105ab1
 81059a0:	08105ab1 	.word	0x08105ab1
 81059a4:	08105ab1 	.word	0x08105ab1
 81059a8:	08105ab1 	.word	0x08105ab1
 81059ac:	08105ab1 	.word	0x08105ab1
 81059b0:	08105ab1 	.word	0x08105ab1
 81059b4:	08105ab1 	.word	0x08105ab1
 81059b8:	08105ab1 	.word	0x08105ab1
 81059bc:	08105ab1 	.word	0x08105ab1
 81059c0:	08105ab1 	.word	0x08105ab1
 81059c4:	08105ab1 	.word	0x08105ab1
 81059c8:	08105aa3 	.word	0x08105aa3
 81059cc:	08105ab1 	.word	0x08105ab1
 81059d0:	08105ab1 	.word	0x08105ab1
 81059d4:	08105ab1 	.word	0x08105ab1
 81059d8:	08105ab1 	.word	0x08105ab1
 81059dc:	08105ab1 	.word	0x08105ab1
 81059e0:	08105ab1 	.word	0x08105ab1
 81059e4:	08105ab1 	.word	0x08105ab1
 81059e8:	08105ab1 	.word	0x08105ab1
 81059ec:	08105ab1 	.word	0x08105ab1
 81059f0:	08105ab1 	.word	0x08105ab1
 81059f4:	08105ab1 	.word	0x08105ab1
 81059f8:	08105ab1 	.word	0x08105ab1
 81059fc:	08105ab1 	.word	0x08105ab1
 8105a00:	08105ab1 	.word	0x08105ab1
 8105a04:	08105ab1 	.word	0x08105ab1
 8105a08:	08105ab1 	.word	0x08105ab1
 8105a0c:	08105ab1 	.word	0x08105ab1
 8105a10:	08105ab1 	.word	0x08105ab1
 8105a14:	08105ab1 	.word	0x08105ab1
 8105a18:	08105ab1 	.word	0x08105ab1
 8105a1c:	08105ab1 	.word	0x08105ab1
 8105a20:	08105ab1 	.word	0x08105ab1
 8105a24:	08105ab1 	.word	0x08105ab1
 8105a28:	08105ab1 	.word	0x08105ab1
 8105a2c:	08105ab1 	.word	0x08105ab1
 8105a30:	08105ab1 	.word	0x08105ab1
 8105a34:	08105ab1 	.word	0x08105ab1
 8105a38:	08105ab1 	.word	0x08105ab1
 8105a3c:	08105ab1 	.word	0x08105ab1
 8105a40:	08105ab1 	.word	0x08105ab1
 8105a44:	08105ab1 	.word	0x08105ab1
 8105a48:	08105aa9 	.word	0x08105aa9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105a4c:	f7fd fc8e 	bl	810336c <HAL_RCC_GetPCLK1Freq>
 8105a50:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105a52:	e033      	b.n	8105abc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105a54:	f7fd fca0 	bl	8103398 <HAL_RCC_GetPCLK2Freq>
 8105a58:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105a5a:	e02f      	b.n	8105abc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a5c:	f107 0314 	add.w	r3, r7, #20
 8105a60:	4618      	mov	r0, r3
 8105a62:	f7fd fd07 	bl	8103474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105a66:	69bb      	ldr	r3, [r7, #24]
 8105a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105a6a:	e027      	b.n	8105abc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105a6c:	f107 0308 	add.w	r3, r7, #8
 8105a70:	4618      	mov	r0, r3
 8105a72:	f7fd fe4b 	bl	810370c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105a76:	68fb      	ldr	r3, [r7, #12]
 8105a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105a7a:	e01f      	b.n	8105abc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a7c:	4b2c      	ldr	r3, [pc, #176]	; (8105b30 <UART_SetConfig+0xb50>)
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	f003 0320 	and.w	r3, r3, #32
 8105a84:	2b00      	cmp	r3, #0
 8105a86:	d009      	beq.n	8105a9c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105a88:	4b29      	ldr	r3, [pc, #164]	; (8105b30 <UART_SetConfig+0xb50>)
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	08db      	lsrs	r3, r3, #3
 8105a8e:	f003 0303 	and.w	r3, r3, #3
 8105a92:	4a28      	ldr	r2, [pc, #160]	; (8105b34 <UART_SetConfig+0xb54>)
 8105a94:	fa22 f303 	lsr.w	r3, r2, r3
 8105a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105a9a:	e00f      	b.n	8105abc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8105a9c:	4b25      	ldr	r3, [pc, #148]	; (8105b34 <UART_SetConfig+0xb54>)
 8105a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105aa0:	e00c      	b.n	8105abc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105aa2:	4b25      	ldr	r3, [pc, #148]	; (8105b38 <UART_SetConfig+0xb58>)
 8105aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105aa6:	e009      	b.n	8105abc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105aae:	e005      	b.n	8105abc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8105ab0:	2300      	movs	r3, #0
 8105ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105ab4:	2301      	movs	r3, #1
 8105ab6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105aba:	bf00      	nop
    }

    if (pclk != 0U)
 8105abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105abe:	2b00      	cmp	r3, #0
 8105ac0:	d021      	beq.n	8105b06 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105ac6:	4a1d      	ldr	r2, [pc, #116]	; (8105b3c <UART_SetConfig+0xb5c>)
 8105ac8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105acc:	461a      	mov	r2, r3
 8105ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105ad0:	fbb3 f2f2 	udiv	r2, r3, r2
 8105ad4:	687b      	ldr	r3, [r7, #4]
 8105ad6:	685b      	ldr	r3, [r3, #4]
 8105ad8:	085b      	lsrs	r3, r3, #1
 8105ada:	441a      	add	r2, r3
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	685b      	ldr	r3, [r3, #4]
 8105ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8105ae4:	b29b      	uxth	r3, r3
 8105ae6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105aea:	2b0f      	cmp	r3, #15
 8105aec:	d908      	bls.n	8105b00 <UART_SetConfig+0xb20>
 8105aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105af4:	d204      	bcs.n	8105b00 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	681b      	ldr	r3, [r3, #0]
 8105afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105afc:	60da      	str	r2, [r3, #12]
 8105afe:	e002      	b.n	8105b06 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8105b00:	2301      	movs	r3, #1
 8105b02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	2201      	movs	r2, #1
 8105b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105b0e:	687b      	ldr	r3, [r7, #4]
 8105b10:	2201      	movs	r2, #1
 8105b12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105b16:	687b      	ldr	r3, [r7, #4]
 8105b18:	2200      	movs	r2, #0
 8105b1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	2200      	movs	r2, #0
 8105b20:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8105b22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8105b26:	4618      	mov	r0, r3
 8105b28:	3738      	adds	r7, #56	; 0x38
 8105b2a:	46bd      	mov	sp, r7
 8105b2c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8105b30:	58024400 	.word	0x58024400
 8105b34:	03d09000 	.word	0x03d09000
 8105b38:	003d0900 	.word	0x003d0900
 8105b3c:	0810ac58 	.word	0x0810ac58

08105b40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105b40:	b480      	push	{r7}
 8105b42:	b083      	sub	sp, #12
 8105b44:	af00      	add	r7, sp, #0
 8105b46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105b48:	687b      	ldr	r3, [r7, #4]
 8105b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b4c:	f003 0301 	and.w	r3, r3, #1
 8105b50:	2b00      	cmp	r3, #0
 8105b52:	d00a      	beq.n	8105b6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	681b      	ldr	r3, [r3, #0]
 8105b58:	685b      	ldr	r3, [r3, #4]
 8105b5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105b5e:	687b      	ldr	r3, [r7, #4]
 8105b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105b62:	687b      	ldr	r3, [r7, #4]
 8105b64:	681b      	ldr	r3, [r3, #0]
 8105b66:	430a      	orrs	r2, r1
 8105b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b6e:	f003 0302 	and.w	r3, r3, #2
 8105b72:	2b00      	cmp	r3, #0
 8105b74:	d00a      	beq.n	8105b8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	681b      	ldr	r3, [r3, #0]
 8105b7a:	685b      	ldr	r3, [r3, #4]
 8105b7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	430a      	orrs	r2, r1
 8105b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105b8c:	687b      	ldr	r3, [r7, #4]
 8105b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b90:	f003 0304 	and.w	r3, r3, #4
 8105b94:	2b00      	cmp	r3, #0
 8105b96:	d00a      	beq.n	8105bae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	685b      	ldr	r3, [r3, #4]
 8105b9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105ba2:	687b      	ldr	r3, [r7, #4]
 8105ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105ba6:	687b      	ldr	r3, [r7, #4]
 8105ba8:	681b      	ldr	r3, [r3, #0]
 8105baa:	430a      	orrs	r2, r1
 8105bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bb2:	f003 0308 	and.w	r3, r3, #8
 8105bb6:	2b00      	cmp	r3, #0
 8105bb8:	d00a      	beq.n	8105bd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	681b      	ldr	r3, [r3, #0]
 8105bbe:	685b      	ldr	r3, [r3, #4]
 8105bc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105bc4:	687b      	ldr	r3, [r7, #4]
 8105bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105bc8:	687b      	ldr	r3, [r7, #4]
 8105bca:	681b      	ldr	r3, [r3, #0]
 8105bcc:	430a      	orrs	r2, r1
 8105bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bd4:	f003 0310 	and.w	r3, r3, #16
 8105bd8:	2b00      	cmp	r3, #0
 8105bda:	d00a      	beq.n	8105bf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105bdc:	687b      	ldr	r3, [r7, #4]
 8105bde:	681b      	ldr	r3, [r3, #0]
 8105be0:	689b      	ldr	r3, [r3, #8]
 8105be2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	681b      	ldr	r3, [r3, #0]
 8105bee:	430a      	orrs	r2, r1
 8105bf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105bf6:	f003 0320 	and.w	r3, r3, #32
 8105bfa:	2b00      	cmp	r3, #0
 8105bfc:	d00a      	beq.n	8105c14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	681b      	ldr	r3, [r3, #0]
 8105c02:	689b      	ldr	r3, [r3, #8]
 8105c04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105c08:	687b      	ldr	r3, [r7, #4]
 8105c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	681b      	ldr	r3, [r3, #0]
 8105c10:	430a      	orrs	r2, r1
 8105c12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105c14:	687b      	ldr	r3, [r7, #4]
 8105c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105c1c:	2b00      	cmp	r3, #0
 8105c1e:	d01a      	beq.n	8105c56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	685b      	ldr	r3, [r3, #4]
 8105c26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	681b      	ldr	r3, [r3, #0]
 8105c32:	430a      	orrs	r2, r1
 8105c34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105c36:	687b      	ldr	r3, [r7, #4]
 8105c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105c3e:	d10a      	bne.n	8105c56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	681b      	ldr	r3, [r3, #0]
 8105c44:	685b      	ldr	r3, [r3, #4]
 8105c46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105c4a:	687b      	ldr	r3, [r7, #4]
 8105c4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8105c4e:	687b      	ldr	r3, [r7, #4]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	430a      	orrs	r2, r1
 8105c54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105c56:	687b      	ldr	r3, [r7, #4]
 8105c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105c5e:	2b00      	cmp	r3, #0
 8105c60:	d00a      	beq.n	8105c78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105c62:	687b      	ldr	r3, [r7, #4]
 8105c64:	681b      	ldr	r3, [r3, #0]
 8105c66:	685b      	ldr	r3, [r3, #4]
 8105c68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8105c6c:	687b      	ldr	r3, [r7, #4]
 8105c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	681b      	ldr	r3, [r3, #0]
 8105c74:	430a      	orrs	r2, r1
 8105c76:	605a      	str	r2, [r3, #4]
  }
}
 8105c78:	bf00      	nop
 8105c7a:	370c      	adds	r7, #12
 8105c7c:	46bd      	mov	sp, r7
 8105c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c82:	4770      	bx	lr

08105c84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105c84:	b580      	push	{r7, lr}
 8105c86:	b086      	sub	sp, #24
 8105c88:	af02      	add	r7, sp, #8
 8105c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	2200      	movs	r2, #0
 8105c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8105c94:	f7fc f8ae 	bl	8101df4 <HAL_GetTick>
 8105c98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	681b      	ldr	r3, [r3, #0]
 8105c9e:	681b      	ldr	r3, [r3, #0]
 8105ca0:	f003 0308 	and.w	r3, r3, #8
 8105ca4:	2b08      	cmp	r3, #8
 8105ca6:	d10e      	bne.n	8105cc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105cac:	9300      	str	r3, [sp, #0]
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	2200      	movs	r2, #0
 8105cb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105cb6:	6878      	ldr	r0, [r7, #4]
 8105cb8:	f000 f82c 	bl	8105d14 <UART_WaitOnFlagUntilTimeout>
 8105cbc:	4603      	mov	r3, r0
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d001      	beq.n	8105cc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105cc2:	2303      	movs	r3, #3
 8105cc4:	e022      	b.n	8105d0c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105cc6:	687b      	ldr	r3, [r7, #4]
 8105cc8:	681b      	ldr	r3, [r3, #0]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	f003 0304 	and.w	r3, r3, #4
 8105cd0:	2b04      	cmp	r3, #4
 8105cd2:	d10e      	bne.n	8105cf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105cd8:	9300      	str	r3, [sp, #0]
 8105cda:	68fb      	ldr	r3, [r7, #12]
 8105cdc:	2200      	movs	r2, #0
 8105cde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8105ce2:	6878      	ldr	r0, [r7, #4]
 8105ce4:	f000 f816 	bl	8105d14 <UART_WaitOnFlagUntilTimeout>
 8105ce8:	4603      	mov	r3, r0
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	d001      	beq.n	8105cf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105cee:	2303      	movs	r3, #3
 8105cf0:	e00c      	b.n	8105d0c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	2220      	movs	r2, #32
 8105cf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	2220      	movs	r2, #32
 8105cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8105d02:	687b      	ldr	r3, [r7, #4]
 8105d04:	2200      	movs	r2, #0
 8105d06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105d0a:	2300      	movs	r3, #0
}
 8105d0c:	4618      	mov	r0, r3
 8105d0e:	3710      	adds	r7, #16
 8105d10:	46bd      	mov	sp, r7
 8105d12:	bd80      	pop	{r7, pc}

08105d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105d14:	b580      	push	{r7, lr}
 8105d16:	b084      	sub	sp, #16
 8105d18:	af00      	add	r7, sp, #0
 8105d1a:	60f8      	str	r0, [r7, #12]
 8105d1c:	60b9      	str	r1, [r7, #8]
 8105d1e:	603b      	str	r3, [r7, #0]
 8105d20:	4613      	mov	r3, r2
 8105d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105d24:	e062      	b.n	8105dec <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105d26:	69bb      	ldr	r3, [r7, #24]
 8105d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d2c:	d05e      	beq.n	8105dec <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105d2e:	f7fc f861 	bl	8101df4 <HAL_GetTick>
 8105d32:	4602      	mov	r2, r0
 8105d34:	683b      	ldr	r3, [r7, #0]
 8105d36:	1ad3      	subs	r3, r2, r3
 8105d38:	69ba      	ldr	r2, [r7, #24]
 8105d3a:	429a      	cmp	r2, r3
 8105d3c:	d302      	bcc.n	8105d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8105d3e:	69bb      	ldr	r3, [r7, #24]
 8105d40:	2b00      	cmp	r3, #0
 8105d42:	d11d      	bne.n	8105d80 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8105d44:	68fb      	ldr	r3, [r7, #12]
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	681a      	ldr	r2, [r3, #0]
 8105d4a:	68fb      	ldr	r3, [r7, #12]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8105d52:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105d54:	68fb      	ldr	r3, [r7, #12]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	689a      	ldr	r2, [r3, #8]
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	681b      	ldr	r3, [r3, #0]
 8105d5e:	f022 0201 	bic.w	r2, r2, #1
 8105d62:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8105d64:	68fb      	ldr	r3, [r7, #12]
 8105d66:	2220      	movs	r2, #32
 8105d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8105d6c:	68fb      	ldr	r3, [r7, #12]
 8105d6e:	2220      	movs	r2, #32
 8105d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8105d74:	68fb      	ldr	r3, [r7, #12]
 8105d76:	2200      	movs	r2, #0
 8105d78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8105d7c:	2303      	movs	r3, #3
 8105d7e:	e045      	b.n	8105e0c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105d80:	68fb      	ldr	r3, [r7, #12]
 8105d82:	681b      	ldr	r3, [r3, #0]
 8105d84:	681b      	ldr	r3, [r3, #0]
 8105d86:	f003 0304 	and.w	r3, r3, #4
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d02e      	beq.n	8105dec <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105d8e:	68fb      	ldr	r3, [r7, #12]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	69db      	ldr	r3, [r3, #28]
 8105d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105d9c:	d126      	bne.n	8105dec <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105d9e:	68fb      	ldr	r3, [r7, #12]
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105da6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8105da8:	68fb      	ldr	r3, [r7, #12]
 8105daa:	681b      	ldr	r3, [r3, #0]
 8105dac:	681a      	ldr	r2, [r3, #0]
 8105dae:	68fb      	ldr	r3, [r7, #12]
 8105db0:	681b      	ldr	r3, [r3, #0]
 8105db2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8105db6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105db8:	68fb      	ldr	r3, [r7, #12]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	689a      	ldr	r2, [r3, #8]
 8105dbe:	68fb      	ldr	r3, [r7, #12]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	f022 0201 	bic.w	r2, r2, #1
 8105dc6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8105dc8:	68fb      	ldr	r3, [r7, #12]
 8105dca:	2220      	movs	r2, #32
 8105dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8105dd0:	68fb      	ldr	r3, [r7, #12]
 8105dd2:	2220      	movs	r2, #32
 8105dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105dd8:	68fb      	ldr	r3, [r7, #12]
 8105dda:	2220      	movs	r2, #32
 8105ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105de0:	68fb      	ldr	r3, [r7, #12]
 8105de2:	2200      	movs	r2, #0
 8105de4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8105de8:	2303      	movs	r3, #3
 8105dea:	e00f      	b.n	8105e0c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105dec:	68fb      	ldr	r3, [r7, #12]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	69da      	ldr	r2, [r3, #28]
 8105df2:	68bb      	ldr	r3, [r7, #8]
 8105df4:	4013      	ands	r3, r2
 8105df6:	68ba      	ldr	r2, [r7, #8]
 8105df8:	429a      	cmp	r2, r3
 8105dfa:	bf0c      	ite	eq
 8105dfc:	2301      	moveq	r3, #1
 8105dfe:	2300      	movne	r3, #0
 8105e00:	b2db      	uxtb	r3, r3
 8105e02:	461a      	mov	r2, r3
 8105e04:	79fb      	ldrb	r3, [r7, #7]
 8105e06:	429a      	cmp	r2, r3
 8105e08:	d08d      	beq.n	8105d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105e0a:	2300      	movs	r3, #0
}
 8105e0c:	4618      	mov	r0, r3
 8105e0e:	3710      	adds	r7, #16
 8105e10:	46bd      	mov	sp, r7
 8105e12:	bd80      	pop	{r7, pc}

08105e14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105e14:	b480      	push	{r7}
 8105e16:	b085      	sub	sp, #20
 8105e18:	af00      	add	r7, sp, #0
 8105e1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105e22:	2b01      	cmp	r3, #1
 8105e24:	d101      	bne.n	8105e2a <HAL_UARTEx_DisableFifoMode+0x16>
 8105e26:	2302      	movs	r3, #2
 8105e28:	e027      	b.n	8105e7a <HAL_UARTEx_DisableFifoMode+0x66>
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	2201      	movs	r2, #1
 8105e2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105e32:	687b      	ldr	r3, [r7, #4]
 8105e34:	2224      	movs	r2, #36	; 0x24
 8105e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	681b      	ldr	r3, [r3, #0]
 8105e3e:	681b      	ldr	r3, [r3, #0]
 8105e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105e42:	687b      	ldr	r3, [r7, #4]
 8105e44:	681b      	ldr	r3, [r3, #0]
 8105e46:	681a      	ldr	r2, [r3, #0]
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	681b      	ldr	r3, [r3, #0]
 8105e4c:	f022 0201 	bic.w	r2, r2, #1
 8105e50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105e52:	68fb      	ldr	r3, [r7, #12]
 8105e54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105e58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105e5a:	687b      	ldr	r3, [r7, #4]
 8105e5c:	2200      	movs	r2, #0
 8105e5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105e60:	687b      	ldr	r3, [r7, #4]
 8105e62:	681b      	ldr	r3, [r3, #0]
 8105e64:	68fa      	ldr	r2, [r7, #12]
 8105e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105e68:	687b      	ldr	r3, [r7, #4]
 8105e6a:	2220      	movs	r2, #32
 8105e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	2200      	movs	r2, #0
 8105e74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105e78:	2300      	movs	r3, #0
}
 8105e7a:	4618      	mov	r0, r3
 8105e7c:	3714      	adds	r7, #20
 8105e7e:	46bd      	mov	sp, r7
 8105e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e84:	4770      	bx	lr

08105e86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105e86:	b580      	push	{r7, lr}
 8105e88:	b084      	sub	sp, #16
 8105e8a:	af00      	add	r7, sp, #0
 8105e8c:	6078      	str	r0, [r7, #4]
 8105e8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105e96:	2b01      	cmp	r3, #1
 8105e98:	d101      	bne.n	8105e9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105e9a:	2302      	movs	r3, #2
 8105e9c:	e02d      	b.n	8105efa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105e9e:	687b      	ldr	r3, [r7, #4]
 8105ea0:	2201      	movs	r2, #1
 8105ea2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105ea6:	687b      	ldr	r3, [r7, #4]
 8105ea8:	2224      	movs	r2, #36	; 0x24
 8105eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	681b      	ldr	r3, [r3, #0]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	681b      	ldr	r3, [r3, #0]
 8105eba:	681a      	ldr	r2, [r3, #0]
 8105ebc:	687b      	ldr	r3, [r7, #4]
 8105ebe:	681b      	ldr	r3, [r3, #0]
 8105ec0:	f022 0201 	bic.w	r2, r2, #1
 8105ec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	681b      	ldr	r3, [r3, #0]
 8105eca:	689b      	ldr	r3, [r3, #8]
 8105ecc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	681b      	ldr	r3, [r3, #0]
 8105ed4:	683a      	ldr	r2, [r7, #0]
 8105ed6:	430a      	orrs	r2, r1
 8105ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105eda:	6878      	ldr	r0, [r7, #4]
 8105edc:	f000 f850 	bl	8105f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105ee0:	687b      	ldr	r3, [r7, #4]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	68fa      	ldr	r2, [r7, #12]
 8105ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105ee8:	687b      	ldr	r3, [r7, #4]
 8105eea:	2220      	movs	r2, #32
 8105eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105ef0:	687b      	ldr	r3, [r7, #4]
 8105ef2:	2200      	movs	r2, #0
 8105ef4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105ef8:	2300      	movs	r3, #0
}
 8105efa:	4618      	mov	r0, r3
 8105efc:	3710      	adds	r7, #16
 8105efe:	46bd      	mov	sp, r7
 8105f00:	bd80      	pop	{r7, pc}

08105f02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105f02:	b580      	push	{r7, lr}
 8105f04:	b084      	sub	sp, #16
 8105f06:	af00      	add	r7, sp, #0
 8105f08:	6078      	str	r0, [r7, #4]
 8105f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105f12:	2b01      	cmp	r3, #1
 8105f14:	d101      	bne.n	8105f1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105f16:	2302      	movs	r3, #2
 8105f18:	e02d      	b.n	8105f76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	2201      	movs	r2, #1
 8105f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105f22:	687b      	ldr	r3, [r7, #4]
 8105f24:	2224      	movs	r2, #36	; 0x24
 8105f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105f2a:	687b      	ldr	r3, [r7, #4]
 8105f2c:	681b      	ldr	r3, [r3, #0]
 8105f2e:	681b      	ldr	r3, [r3, #0]
 8105f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	681a      	ldr	r2, [r3, #0]
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	f022 0201 	bic.w	r2, r2, #1
 8105f40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105f42:	687b      	ldr	r3, [r7, #4]
 8105f44:	681b      	ldr	r3, [r3, #0]
 8105f46:	689b      	ldr	r3, [r3, #8]
 8105f48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	683a      	ldr	r2, [r7, #0]
 8105f52:	430a      	orrs	r2, r1
 8105f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105f56:	6878      	ldr	r0, [r7, #4]
 8105f58:	f000 f812 	bl	8105f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105f5c:	687b      	ldr	r3, [r7, #4]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	68fa      	ldr	r2, [r7, #12]
 8105f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	2220      	movs	r2, #32
 8105f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105f6c:	687b      	ldr	r3, [r7, #4]
 8105f6e:	2200      	movs	r2, #0
 8105f70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105f74:	2300      	movs	r3, #0
}
 8105f76:	4618      	mov	r0, r3
 8105f78:	3710      	adds	r7, #16
 8105f7a:	46bd      	mov	sp, r7
 8105f7c:	bd80      	pop	{r7, pc}
	...

08105f80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105f80:	b480      	push	{r7}
 8105f82:	b089      	sub	sp, #36	; 0x24
 8105f84:	af00      	add	r7, sp, #0
 8105f86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8105f88:	4a2f      	ldr	r2, [pc, #188]	; (8106048 <UARTEx_SetNbDataToProcess+0xc8>)
 8105f8a:	f107 0314 	add.w	r3, r7, #20
 8105f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105f92:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8105f96:	4a2d      	ldr	r2, [pc, #180]	; (810604c <UARTEx_SetNbDataToProcess+0xcc>)
 8105f98:	f107 030c 	add.w	r3, r7, #12
 8105f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105fa0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105fa8:	2b00      	cmp	r3, #0
 8105faa:	d108      	bne.n	8105fbe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	2201      	movs	r2, #1
 8105fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	2201      	movs	r2, #1
 8105fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105fbc:	e03d      	b.n	810603a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105fbe:	2310      	movs	r3, #16
 8105fc0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105fc2:	2310      	movs	r3, #16
 8105fc4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105fc6:	687b      	ldr	r3, [r7, #4]
 8105fc8:	681b      	ldr	r3, [r3, #0]
 8105fca:	689b      	ldr	r3, [r3, #8]
 8105fcc:	0e5b      	lsrs	r3, r3, #25
 8105fce:	b2db      	uxtb	r3, r3
 8105fd0:	f003 0307 	and.w	r3, r3, #7
 8105fd4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	689b      	ldr	r3, [r3, #8]
 8105fdc:	0f5b      	lsrs	r3, r3, #29
 8105fde:	b2db      	uxtb	r3, r3
 8105fe0:	f003 0307 	and.w	r3, r3, #7
 8105fe4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8105fe6:	7fbb      	ldrb	r3, [r7, #30]
 8105fe8:	7f3a      	ldrb	r2, [r7, #28]
 8105fea:	f107 0120 	add.w	r1, r7, #32
 8105fee:	440a      	add	r2, r1
 8105ff0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8105ff4:	fb02 f303 	mul.w	r3, r2, r3
 8105ff8:	7f3a      	ldrb	r2, [r7, #28]
 8105ffa:	f107 0120 	add.w	r1, r7, #32
 8105ffe:	440a      	add	r2, r1
 8106000:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8106004:	fb93 f3f2 	sdiv	r3, r3, r2
 8106008:	b29a      	uxth	r2, r3
 810600a:	687b      	ldr	r3, [r7, #4]
 810600c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8106010:	7ffb      	ldrb	r3, [r7, #31]
 8106012:	7f7a      	ldrb	r2, [r7, #29]
 8106014:	f107 0120 	add.w	r1, r7, #32
 8106018:	440a      	add	r2, r1
 810601a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810601e:	fb02 f303 	mul.w	r3, r2, r3
 8106022:	7f7a      	ldrb	r2, [r7, #29]
 8106024:	f107 0120 	add.w	r1, r7, #32
 8106028:	440a      	add	r2, r1
 810602a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810602e:	fb93 f3f2 	sdiv	r3, r3, r2
 8106032:	b29a      	uxth	r2, r3
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810603a:	bf00      	nop
 810603c:	3724      	adds	r7, #36	; 0x24
 810603e:	46bd      	mov	sp, r7
 8106040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106044:	4770      	bx	lr
 8106046:	bf00      	nop
 8106048:	0810abfc 	.word	0x0810abfc
 810604c:	0810ac04 	.word	0x0810ac04

08106050 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8106050:	b480      	push	{r7}
 8106052:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8106054:	bf00      	nop
 8106056:	46bd      	mov	sp, r7
 8106058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810605c:	4770      	bx	lr
	...

08106060 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8106060:	b480      	push	{r7}
 8106062:	b085      	sub	sp, #20
 8106064:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8106066:	f3ef 8305 	mrs	r3, IPSR
 810606a:	60bb      	str	r3, [r7, #8]
  return(result);
 810606c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810606e:	2b00      	cmp	r3, #0
 8106070:	d10f      	bne.n	8106092 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8106072:	f3ef 8310 	mrs	r3, PRIMASK
 8106076:	607b      	str	r3, [r7, #4]
  return(result);
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	2b00      	cmp	r3, #0
 810607c:	d105      	bne.n	810608a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810607e:	f3ef 8311 	mrs	r3, BASEPRI
 8106082:	603b      	str	r3, [r7, #0]
  return(result);
 8106084:	683b      	ldr	r3, [r7, #0]
 8106086:	2b00      	cmp	r3, #0
 8106088:	d007      	beq.n	810609a <osKernelInitialize+0x3a>
 810608a:	4b0e      	ldr	r3, [pc, #56]	; (81060c4 <osKernelInitialize+0x64>)
 810608c:	681b      	ldr	r3, [r3, #0]
 810608e:	2b02      	cmp	r3, #2
 8106090:	d103      	bne.n	810609a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8106092:	f06f 0305 	mvn.w	r3, #5
 8106096:	60fb      	str	r3, [r7, #12]
 8106098:	e00c      	b.n	81060b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 810609a:	4b0a      	ldr	r3, [pc, #40]	; (81060c4 <osKernelInitialize+0x64>)
 810609c:	681b      	ldr	r3, [r3, #0]
 810609e:	2b00      	cmp	r3, #0
 81060a0:	d105      	bne.n	81060ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 81060a2:	4b08      	ldr	r3, [pc, #32]	; (81060c4 <osKernelInitialize+0x64>)
 81060a4:	2201      	movs	r2, #1
 81060a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 81060a8:	2300      	movs	r3, #0
 81060aa:	60fb      	str	r3, [r7, #12]
 81060ac:	e002      	b.n	81060b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 81060ae:	f04f 33ff 	mov.w	r3, #4294967295
 81060b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 81060b4:	68fb      	ldr	r3, [r7, #12]
}
 81060b6:	4618      	mov	r0, r3
 81060b8:	3714      	adds	r7, #20
 81060ba:	46bd      	mov	sp, r7
 81060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81060c0:	4770      	bx	lr
 81060c2:	bf00      	nop
 81060c4:	10000200 	.word	0x10000200

081060c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 81060c8:	b580      	push	{r7, lr}
 81060ca:	b084      	sub	sp, #16
 81060cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81060ce:	f3ef 8305 	mrs	r3, IPSR
 81060d2:	60bb      	str	r3, [r7, #8]
  return(result);
 81060d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81060d6:	2b00      	cmp	r3, #0
 81060d8:	d10f      	bne.n	81060fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81060da:	f3ef 8310 	mrs	r3, PRIMASK
 81060de:	607b      	str	r3, [r7, #4]
  return(result);
 81060e0:	687b      	ldr	r3, [r7, #4]
 81060e2:	2b00      	cmp	r3, #0
 81060e4:	d105      	bne.n	81060f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81060e6:	f3ef 8311 	mrs	r3, BASEPRI
 81060ea:	603b      	str	r3, [r7, #0]
  return(result);
 81060ec:	683b      	ldr	r3, [r7, #0]
 81060ee:	2b00      	cmp	r3, #0
 81060f0:	d007      	beq.n	8106102 <osKernelStart+0x3a>
 81060f2:	4b0f      	ldr	r3, [pc, #60]	; (8106130 <osKernelStart+0x68>)
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	2b02      	cmp	r3, #2
 81060f8:	d103      	bne.n	8106102 <osKernelStart+0x3a>
    stat = osErrorISR;
 81060fa:	f06f 0305 	mvn.w	r3, #5
 81060fe:	60fb      	str	r3, [r7, #12]
 8106100:	e010      	b.n	8106124 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8106102:	4b0b      	ldr	r3, [pc, #44]	; (8106130 <osKernelStart+0x68>)
 8106104:	681b      	ldr	r3, [r3, #0]
 8106106:	2b01      	cmp	r3, #1
 8106108:	d109      	bne.n	810611e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810610a:	f7ff ffa1 	bl	8106050 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810610e:	4b08      	ldr	r3, [pc, #32]	; (8106130 <osKernelStart+0x68>)
 8106110:	2202      	movs	r2, #2
 8106112:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8106114:	f001 fc8a 	bl	8107a2c <vTaskStartScheduler>
      stat = osOK;
 8106118:	2300      	movs	r3, #0
 810611a:	60fb      	str	r3, [r7, #12]
 810611c:	e002      	b.n	8106124 <osKernelStart+0x5c>
    } else {
      stat = osError;
 810611e:	f04f 33ff 	mov.w	r3, #4294967295
 8106122:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8106124:	68fb      	ldr	r3, [r7, #12]
}
 8106126:	4618      	mov	r0, r3
 8106128:	3710      	adds	r7, #16
 810612a:	46bd      	mov	sp, r7
 810612c:	bd80      	pop	{r7, pc}
 810612e:	bf00      	nop
 8106130:	10000200 	.word	0x10000200

08106134 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8106134:	b580      	push	{r7, lr}
 8106136:	b090      	sub	sp, #64	; 0x40
 8106138:	af04      	add	r7, sp, #16
 810613a:	60f8      	str	r0, [r7, #12]
 810613c:	60b9      	str	r1, [r7, #8]
 810613e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8106140:	2300      	movs	r3, #0
 8106142:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8106144:	f3ef 8305 	mrs	r3, IPSR
 8106148:	61fb      	str	r3, [r7, #28]
  return(result);
 810614a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 810614c:	2b00      	cmp	r3, #0
 810614e:	f040 808f 	bne.w	8106270 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8106152:	f3ef 8310 	mrs	r3, PRIMASK
 8106156:	61bb      	str	r3, [r7, #24]
  return(result);
 8106158:	69bb      	ldr	r3, [r7, #24]
 810615a:	2b00      	cmp	r3, #0
 810615c:	d105      	bne.n	810616a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810615e:	f3ef 8311 	mrs	r3, BASEPRI
 8106162:	617b      	str	r3, [r7, #20]
  return(result);
 8106164:	697b      	ldr	r3, [r7, #20]
 8106166:	2b00      	cmp	r3, #0
 8106168:	d003      	beq.n	8106172 <osThreadNew+0x3e>
 810616a:	4b44      	ldr	r3, [pc, #272]	; (810627c <osThreadNew+0x148>)
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	2b02      	cmp	r3, #2
 8106170:	d07e      	beq.n	8106270 <osThreadNew+0x13c>
 8106172:	68fb      	ldr	r3, [r7, #12]
 8106174:	2b00      	cmp	r3, #0
 8106176:	d07b      	beq.n	8106270 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8106178:	2380      	movs	r3, #128	; 0x80
 810617a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 810617c:	2318      	movs	r3, #24
 810617e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8106180:	2300      	movs	r3, #0
 8106182:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8106184:	f04f 33ff 	mov.w	r3, #4294967295
 8106188:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	2b00      	cmp	r3, #0
 810618e:	d045      	beq.n	810621c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	2b00      	cmp	r3, #0
 8106196:	d002      	beq.n	810619e <osThreadNew+0x6a>
        name = attr->name;
 8106198:	687b      	ldr	r3, [r7, #4]
 810619a:	681b      	ldr	r3, [r3, #0]
 810619c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	699b      	ldr	r3, [r3, #24]
 81061a2:	2b00      	cmp	r3, #0
 81061a4:	d002      	beq.n	81061ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 81061a6:	687b      	ldr	r3, [r7, #4]
 81061a8:	699b      	ldr	r3, [r3, #24]
 81061aa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 81061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061ae:	2b00      	cmp	r3, #0
 81061b0:	d008      	beq.n	81061c4 <osThreadNew+0x90>
 81061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061b4:	2b38      	cmp	r3, #56	; 0x38
 81061b6:	d805      	bhi.n	81061c4 <osThreadNew+0x90>
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	685b      	ldr	r3, [r3, #4]
 81061bc:	f003 0301 	and.w	r3, r3, #1
 81061c0:	2b00      	cmp	r3, #0
 81061c2:	d001      	beq.n	81061c8 <osThreadNew+0x94>
        return (NULL);
 81061c4:	2300      	movs	r3, #0
 81061c6:	e054      	b.n	8106272 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 81061c8:	687b      	ldr	r3, [r7, #4]
 81061ca:	695b      	ldr	r3, [r3, #20]
 81061cc:	2b00      	cmp	r3, #0
 81061ce:	d003      	beq.n	81061d8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	695b      	ldr	r3, [r3, #20]
 81061d4:	089b      	lsrs	r3, r3, #2
 81061d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81061d8:	687b      	ldr	r3, [r7, #4]
 81061da:	689b      	ldr	r3, [r3, #8]
 81061dc:	2b00      	cmp	r3, #0
 81061de:	d00e      	beq.n	81061fe <osThreadNew+0xca>
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	68db      	ldr	r3, [r3, #12]
 81061e4:	2b5b      	cmp	r3, #91	; 0x5b
 81061e6:	d90a      	bls.n	81061fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81061e8:	687b      	ldr	r3, [r7, #4]
 81061ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81061ec:	2b00      	cmp	r3, #0
 81061ee:	d006      	beq.n	81061fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81061f0:	687b      	ldr	r3, [r7, #4]
 81061f2:	695b      	ldr	r3, [r3, #20]
 81061f4:	2b00      	cmp	r3, #0
 81061f6:	d002      	beq.n	81061fe <osThreadNew+0xca>
        mem = 1;
 81061f8:	2301      	movs	r3, #1
 81061fa:	623b      	str	r3, [r7, #32]
 81061fc:	e010      	b.n	8106220 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	689b      	ldr	r3, [r3, #8]
 8106202:	2b00      	cmp	r3, #0
 8106204:	d10c      	bne.n	8106220 <osThreadNew+0xec>
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	68db      	ldr	r3, [r3, #12]
 810620a:	2b00      	cmp	r3, #0
 810620c:	d108      	bne.n	8106220 <osThreadNew+0xec>
 810620e:	687b      	ldr	r3, [r7, #4]
 8106210:	691b      	ldr	r3, [r3, #16]
 8106212:	2b00      	cmp	r3, #0
 8106214:	d104      	bne.n	8106220 <osThreadNew+0xec>
          mem = 0;
 8106216:	2300      	movs	r3, #0
 8106218:	623b      	str	r3, [r7, #32]
 810621a:	e001      	b.n	8106220 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 810621c:	2300      	movs	r3, #0
 810621e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8106220:	6a3b      	ldr	r3, [r7, #32]
 8106222:	2b01      	cmp	r3, #1
 8106224:	d110      	bne.n	8106248 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 810622a:	687a      	ldr	r2, [r7, #4]
 810622c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810622e:	9202      	str	r2, [sp, #8]
 8106230:	9301      	str	r3, [sp, #4]
 8106232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106234:	9300      	str	r3, [sp, #0]
 8106236:	68bb      	ldr	r3, [r7, #8]
 8106238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810623a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810623c:	68f8      	ldr	r0, [r7, #12]
 810623e:	f001 fa23 	bl	8107688 <xTaskCreateStatic>
 8106242:	4603      	mov	r3, r0
 8106244:	613b      	str	r3, [r7, #16]
 8106246:	e013      	b.n	8106270 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8106248:	6a3b      	ldr	r3, [r7, #32]
 810624a:	2b00      	cmp	r3, #0
 810624c:	d110      	bne.n	8106270 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106250:	b29a      	uxth	r2, r3
 8106252:	f107 0310 	add.w	r3, r7, #16
 8106256:	9301      	str	r3, [sp, #4]
 8106258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810625a:	9300      	str	r3, [sp, #0]
 810625c:	68bb      	ldr	r3, [r7, #8]
 810625e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106260:	68f8      	ldr	r0, [r7, #12]
 8106262:	f001 fa6b 	bl	810773c <xTaskCreate>
 8106266:	4603      	mov	r3, r0
 8106268:	2b01      	cmp	r3, #1
 810626a:	d001      	beq.n	8106270 <osThreadNew+0x13c>
          hTask = NULL;
 810626c:	2300      	movs	r3, #0
 810626e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8106270:	693b      	ldr	r3, [r7, #16]
}
 8106272:	4618      	mov	r0, r3
 8106274:	3730      	adds	r7, #48	; 0x30
 8106276:	46bd      	mov	sp, r7
 8106278:	bd80      	pop	{r7, pc}
 810627a:	bf00      	nop
 810627c:	10000200 	.word	0x10000200

08106280 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8106280:	b580      	push	{r7, lr}
 8106282:	b086      	sub	sp, #24
 8106284:	af00      	add	r7, sp, #0
 8106286:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8106288:	f3ef 8305 	mrs	r3, IPSR
 810628c:	613b      	str	r3, [r7, #16]
  return(result);
 810628e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8106290:	2b00      	cmp	r3, #0
 8106292:	d10f      	bne.n	81062b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8106294:	f3ef 8310 	mrs	r3, PRIMASK
 8106298:	60fb      	str	r3, [r7, #12]
  return(result);
 810629a:	68fb      	ldr	r3, [r7, #12]
 810629c:	2b00      	cmp	r3, #0
 810629e:	d105      	bne.n	81062ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81062a0:	f3ef 8311 	mrs	r3, BASEPRI
 81062a4:	60bb      	str	r3, [r7, #8]
  return(result);
 81062a6:	68bb      	ldr	r3, [r7, #8]
 81062a8:	2b00      	cmp	r3, #0
 81062aa:	d007      	beq.n	81062bc <osDelay+0x3c>
 81062ac:	4b0a      	ldr	r3, [pc, #40]	; (81062d8 <osDelay+0x58>)
 81062ae:	681b      	ldr	r3, [r3, #0]
 81062b0:	2b02      	cmp	r3, #2
 81062b2:	d103      	bne.n	81062bc <osDelay+0x3c>
    stat = osErrorISR;
 81062b4:	f06f 0305 	mvn.w	r3, #5
 81062b8:	617b      	str	r3, [r7, #20]
 81062ba:	e007      	b.n	81062cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 81062bc:	2300      	movs	r3, #0
 81062be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 81062c0:	687b      	ldr	r3, [r7, #4]
 81062c2:	2b00      	cmp	r3, #0
 81062c4:	d002      	beq.n	81062cc <osDelay+0x4c>
      vTaskDelay(ticks);
 81062c6:	6878      	ldr	r0, [r7, #4]
 81062c8:	f001 fb7c 	bl	81079c4 <vTaskDelay>
    }
  }

  return (stat);
 81062cc:	697b      	ldr	r3, [r7, #20]
}
 81062ce:	4618      	mov	r0, r3
 81062d0:	3718      	adds	r7, #24
 81062d2:	46bd      	mov	sp, r7
 81062d4:	bd80      	pop	{r7, pc}
 81062d6:	bf00      	nop
 81062d8:	10000200 	.word	0x10000200

081062dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81062dc:	b480      	push	{r7}
 81062de:	b085      	sub	sp, #20
 81062e0:	af00      	add	r7, sp, #0
 81062e2:	60f8      	str	r0, [r7, #12]
 81062e4:	60b9      	str	r1, [r7, #8]
 81062e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81062e8:	68fb      	ldr	r3, [r7, #12]
 81062ea:	4a07      	ldr	r2, [pc, #28]	; (8106308 <vApplicationGetIdleTaskMemory+0x2c>)
 81062ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81062ee:	68bb      	ldr	r3, [r7, #8]
 81062f0:	4a06      	ldr	r2, [pc, #24]	; (810630c <vApplicationGetIdleTaskMemory+0x30>)
 81062f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	2280      	movs	r2, #128	; 0x80
 81062f8:	601a      	str	r2, [r3, #0]
}
 81062fa:	bf00      	nop
 81062fc:	3714      	adds	r7, #20
 81062fe:	46bd      	mov	sp, r7
 8106300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106304:	4770      	bx	lr
 8106306:	bf00      	nop
 8106308:	10000204 	.word	0x10000204
 810630c:	10000260 	.word	0x10000260

08106310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8106310:	b480      	push	{r7}
 8106312:	b085      	sub	sp, #20
 8106314:	af00      	add	r7, sp, #0
 8106316:	60f8      	str	r0, [r7, #12]
 8106318:	60b9      	str	r1, [r7, #8]
 810631a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810631c:	68fb      	ldr	r3, [r7, #12]
 810631e:	4a07      	ldr	r2, [pc, #28]	; (810633c <vApplicationGetTimerTaskMemory+0x2c>)
 8106320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8106322:	68bb      	ldr	r3, [r7, #8]
 8106324:	4a06      	ldr	r2, [pc, #24]	; (8106340 <vApplicationGetTimerTaskMemory+0x30>)
 8106326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810632e:	601a      	str	r2, [r3, #0]
}
 8106330:	bf00      	nop
 8106332:	3714      	adds	r7, #20
 8106334:	46bd      	mov	sp, r7
 8106336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810633a:	4770      	bx	lr
 810633c:	10000460 	.word	0x10000460
 8106340:	100004bc 	.word	0x100004bc

08106344 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8106344:	b580      	push	{r7, lr}
 8106346:	b08a      	sub	sp, #40	; 0x28
 8106348:	af00      	add	r7, sp, #0
 810634a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810634c:	2300      	movs	r3, #0
 810634e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8106350:	f001 fbd0 	bl	8107af4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8106354:	4b57      	ldr	r3, [pc, #348]	; (81064b4 <pvPortMalloc+0x170>)
 8106356:	681b      	ldr	r3, [r3, #0]
 8106358:	2b00      	cmp	r3, #0
 810635a:	d101      	bne.n	8106360 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810635c:	f000 f90c 	bl	8106578 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8106360:	4b55      	ldr	r3, [pc, #340]	; (81064b8 <pvPortMalloc+0x174>)
 8106362:	681a      	ldr	r2, [r3, #0]
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	4013      	ands	r3, r2
 8106368:	2b00      	cmp	r3, #0
 810636a:	f040 808c 	bne.w	8106486 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810636e:	687b      	ldr	r3, [r7, #4]
 8106370:	2b00      	cmp	r3, #0
 8106372:	d01c      	beq.n	81063ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8106374:	2208      	movs	r2, #8
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	4413      	add	r3, r2
 810637a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	f003 0307 	and.w	r3, r3, #7
 8106382:	2b00      	cmp	r3, #0
 8106384:	d013      	beq.n	81063ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8106386:	687b      	ldr	r3, [r7, #4]
 8106388:	f023 0307 	bic.w	r3, r3, #7
 810638c:	3308      	adds	r3, #8
 810638e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	f003 0307 	and.w	r3, r3, #7
 8106396:	2b00      	cmp	r3, #0
 8106398:	d009      	beq.n	81063ae <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810639e:	f383 8811 	msr	BASEPRI, r3
 81063a2:	f3bf 8f6f 	isb	sy
 81063a6:	f3bf 8f4f 	dsb	sy
 81063aa:	617b      	str	r3, [r7, #20]
 81063ac:	e7fe      	b.n	81063ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	2b00      	cmp	r3, #0
 81063b2:	d068      	beq.n	8106486 <pvPortMalloc+0x142>
 81063b4:	4b41      	ldr	r3, [pc, #260]	; (81064bc <pvPortMalloc+0x178>)
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	687a      	ldr	r2, [r7, #4]
 81063ba:	429a      	cmp	r2, r3
 81063bc:	d863      	bhi.n	8106486 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 81063be:	4b40      	ldr	r3, [pc, #256]	; (81064c0 <pvPortMalloc+0x17c>)
 81063c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 81063c2:	4b3f      	ldr	r3, [pc, #252]	; (81064c0 <pvPortMalloc+0x17c>)
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81063c8:	e004      	b.n	81063d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 81063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 81063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063d0:	681b      	ldr	r3, [r3, #0]
 81063d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 81063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063d6:	685b      	ldr	r3, [r3, #4]
 81063d8:	687a      	ldr	r2, [r7, #4]
 81063da:	429a      	cmp	r2, r3
 81063dc:	d903      	bls.n	81063e6 <pvPortMalloc+0xa2>
 81063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	2b00      	cmp	r3, #0
 81063e4:	d1f1      	bne.n	81063ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 81063e6:	4b33      	ldr	r3, [pc, #204]	; (81064b4 <pvPortMalloc+0x170>)
 81063e8:	681b      	ldr	r3, [r3, #0]
 81063ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81063ec:	429a      	cmp	r2, r3
 81063ee:	d04a      	beq.n	8106486 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 81063f0:	6a3b      	ldr	r3, [r7, #32]
 81063f2:	681b      	ldr	r3, [r3, #0]
 81063f4:	2208      	movs	r2, #8
 81063f6:	4413      	add	r3, r2
 81063f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 81063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063fc:	681a      	ldr	r2, [r3, #0]
 81063fe:	6a3b      	ldr	r3, [r7, #32]
 8106400:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8106402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106404:	685a      	ldr	r2, [r3, #4]
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	1ad2      	subs	r2, r2, r3
 810640a:	2308      	movs	r3, #8
 810640c:	005b      	lsls	r3, r3, #1
 810640e:	429a      	cmp	r2, r3
 8106410:	d91e      	bls.n	8106450 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8106412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	4413      	add	r3, r2
 8106418:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810641a:	69bb      	ldr	r3, [r7, #24]
 810641c:	f003 0307 	and.w	r3, r3, #7
 8106420:	2b00      	cmp	r3, #0
 8106422:	d009      	beq.n	8106438 <pvPortMalloc+0xf4>
 8106424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106428:	f383 8811 	msr	BASEPRI, r3
 810642c:	f3bf 8f6f 	isb	sy
 8106430:	f3bf 8f4f 	dsb	sy
 8106434:	613b      	str	r3, [r7, #16]
 8106436:	e7fe      	b.n	8106436 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8106438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810643a:	685a      	ldr	r2, [r3, #4]
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	1ad2      	subs	r2, r2, r3
 8106440:	69bb      	ldr	r3, [r7, #24]
 8106442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8106444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106446:	687a      	ldr	r2, [r7, #4]
 8106448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810644a:	69b8      	ldr	r0, [r7, #24]
 810644c:	f000 f8f6 	bl	810663c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8106450:	4b1a      	ldr	r3, [pc, #104]	; (81064bc <pvPortMalloc+0x178>)
 8106452:	681a      	ldr	r2, [r3, #0]
 8106454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106456:	685b      	ldr	r3, [r3, #4]
 8106458:	1ad3      	subs	r3, r2, r3
 810645a:	4a18      	ldr	r2, [pc, #96]	; (81064bc <pvPortMalloc+0x178>)
 810645c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810645e:	4b17      	ldr	r3, [pc, #92]	; (81064bc <pvPortMalloc+0x178>)
 8106460:	681a      	ldr	r2, [r3, #0]
 8106462:	4b18      	ldr	r3, [pc, #96]	; (81064c4 <pvPortMalloc+0x180>)
 8106464:	681b      	ldr	r3, [r3, #0]
 8106466:	429a      	cmp	r2, r3
 8106468:	d203      	bcs.n	8106472 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810646a:	4b14      	ldr	r3, [pc, #80]	; (81064bc <pvPortMalloc+0x178>)
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	4a15      	ldr	r2, [pc, #84]	; (81064c4 <pvPortMalloc+0x180>)
 8106470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8106472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106474:	685a      	ldr	r2, [r3, #4]
 8106476:	4b10      	ldr	r3, [pc, #64]	; (81064b8 <pvPortMalloc+0x174>)
 8106478:	681b      	ldr	r3, [r3, #0]
 810647a:	431a      	orrs	r2, r3
 810647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810647e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8106480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106482:	2200      	movs	r2, #0
 8106484:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8106486:	f001 fb43 	bl	8107b10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810648a:	69fb      	ldr	r3, [r7, #28]
 810648c:	f003 0307 	and.w	r3, r3, #7
 8106490:	2b00      	cmp	r3, #0
 8106492:	d009      	beq.n	81064a8 <pvPortMalloc+0x164>
 8106494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106498:	f383 8811 	msr	BASEPRI, r3
 810649c:	f3bf 8f6f 	isb	sy
 81064a0:	f3bf 8f4f 	dsb	sy
 81064a4:	60fb      	str	r3, [r7, #12]
 81064a6:	e7fe      	b.n	81064a6 <pvPortMalloc+0x162>
	return pvReturn;
 81064a8:	69fb      	ldr	r3, [r7, #28]
}
 81064aa:	4618      	mov	r0, r3
 81064ac:	3728      	adds	r7, #40	; 0x28
 81064ae:	46bd      	mov	sp, r7
 81064b0:	bd80      	pop	{r7, pc}
 81064b2:	bf00      	nop
 81064b4:	100044c4 	.word	0x100044c4
 81064b8:	100044d0 	.word	0x100044d0
 81064bc:	100044c8 	.word	0x100044c8
 81064c0:	100044bc 	.word	0x100044bc
 81064c4:	100044cc 	.word	0x100044cc

081064c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 81064c8:	b580      	push	{r7, lr}
 81064ca:	b086      	sub	sp, #24
 81064cc:	af00      	add	r7, sp, #0
 81064ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 81064d4:	687b      	ldr	r3, [r7, #4]
 81064d6:	2b00      	cmp	r3, #0
 81064d8:	d046      	beq.n	8106568 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 81064da:	2308      	movs	r3, #8
 81064dc:	425b      	negs	r3, r3
 81064de:	697a      	ldr	r2, [r7, #20]
 81064e0:	4413      	add	r3, r2
 81064e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 81064e4:	697b      	ldr	r3, [r7, #20]
 81064e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 81064e8:	693b      	ldr	r3, [r7, #16]
 81064ea:	685a      	ldr	r2, [r3, #4]
 81064ec:	4b20      	ldr	r3, [pc, #128]	; (8106570 <vPortFree+0xa8>)
 81064ee:	681b      	ldr	r3, [r3, #0]
 81064f0:	4013      	ands	r3, r2
 81064f2:	2b00      	cmp	r3, #0
 81064f4:	d109      	bne.n	810650a <vPortFree+0x42>
 81064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81064fa:	f383 8811 	msr	BASEPRI, r3
 81064fe:	f3bf 8f6f 	isb	sy
 8106502:	f3bf 8f4f 	dsb	sy
 8106506:	60fb      	str	r3, [r7, #12]
 8106508:	e7fe      	b.n	8106508 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810650a:	693b      	ldr	r3, [r7, #16]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	2b00      	cmp	r3, #0
 8106510:	d009      	beq.n	8106526 <vPortFree+0x5e>
 8106512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106516:	f383 8811 	msr	BASEPRI, r3
 810651a:	f3bf 8f6f 	isb	sy
 810651e:	f3bf 8f4f 	dsb	sy
 8106522:	60bb      	str	r3, [r7, #8]
 8106524:	e7fe      	b.n	8106524 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8106526:	693b      	ldr	r3, [r7, #16]
 8106528:	685a      	ldr	r2, [r3, #4]
 810652a:	4b11      	ldr	r3, [pc, #68]	; (8106570 <vPortFree+0xa8>)
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	4013      	ands	r3, r2
 8106530:	2b00      	cmp	r3, #0
 8106532:	d019      	beq.n	8106568 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8106534:	693b      	ldr	r3, [r7, #16]
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	2b00      	cmp	r3, #0
 810653a:	d115      	bne.n	8106568 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810653c:	693b      	ldr	r3, [r7, #16]
 810653e:	685a      	ldr	r2, [r3, #4]
 8106540:	4b0b      	ldr	r3, [pc, #44]	; (8106570 <vPortFree+0xa8>)
 8106542:	681b      	ldr	r3, [r3, #0]
 8106544:	43db      	mvns	r3, r3
 8106546:	401a      	ands	r2, r3
 8106548:	693b      	ldr	r3, [r7, #16]
 810654a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810654c:	f001 fad2 	bl	8107af4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8106550:	693b      	ldr	r3, [r7, #16]
 8106552:	685a      	ldr	r2, [r3, #4]
 8106554:	4b07      	ldr	r3, [pc, #28]	; (8106574 <vPortFree+0xac>)
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	4413      	add	r3, r2
 810655a:	4a06      	ldr	r2, [pc, #24]	; (8106574 <vPortFree+0xac>)
 810655c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810655e:	6938      	ldr	r0, [r7, #16]
 8106560:	f000 f86c 	bl	810663c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8106564:	f001 fad4 	bl	8107b10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8106568:	bf00      	nop
 810656a:	3718      	adds	r7, #24
 810656c:	46bd      	mov	sp, r7
 810656e:	bd80      	pop	{r7, pc}
 8106570:	100044d0 	.word	0x100044d0
 8106574:	100044c8 	.word	0x100044c8

08106578 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8106578:	b480      	push	{r7}
 810657a:	b085      	sub	sp, #20
 810657c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810657e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8106582:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8106584:	4b27      	ldr	r3, [pc, #156]	; (8106624 <prvHeapInit+0xac>)
 8106586:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8106588:	68fb      	ldr	r3, [r7, #12]
 810658a:	f003 0307 	and.w	r3, r3, #7
 810658e:	2b00      	cmp	r3, #0
 8106590:	d00c      	beq.n	81065ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8106592:	68fb      	ldr	r3, [r7, #12]
 8106594:	3307      	adds	r3, #7
 8106596:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8106598:	68fb      	ldr	r3, [r7, #12]
 810659a:	f023 0307 	bic.w	r3, r3, #7
 810659e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 81065a0:	68ba      	ldr	r2, [r7, #8]
 81065a2:	68fb      	ldr	r3, [r7, #12]
 81065a4:	1ad3      	subs	r3, r2, r3
 81065a6:	4a1f      	ldr	r2, [pc, #124]	; (8106624 <prvHeapInit+0xac>)
 81065a8:	4413      	add	r3, r2
 81065aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 81065ac:	68fb      	ldr	r3, [r7, #12]
 81065ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 81065b0:	4a1d      	ldr	r2, [pc, #116]	; (8106628 <prvHeapInit+0xb0>)
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 81065b6:	4b1c      	ldr	r3, [pc, #112]	; (8106628 <prvHeapInit+0xb0>)
 81065b8:	2200      	movs	r2, #0
 81065ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 81065bc:	687b      	ldr	r3, [r7, #4]
 81065be:	68ba      	ldr	r2, [r7, #8]
 81065c0:	4413      	add	r3, r2
 81065c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 81065c4:	2208      	movs	r2, #8
 81065c6:	68fb      	ldr	r3, [r7, #12]
 81065c8:	1a9b      	subs	r3, r3, r2
 81065ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 81065cc:	68fb      	ldr	r3, [r7, #12]
 81065ce:	f023 0307 	bic.w	r3, r3, #7
 81065d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 81065d4:	68fb      	ldr	r3, [r7, #12]
 81065d6:	4a15      	ldr	r2, [pc, #84]	; (810662c <prvHeapInit+0xb4>)
 81065d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 81065da:	4b14      	ldr	r3, [pc, #80]	; (810662c <prvHeapInit+0xb4>)
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	2200      	movs	r2, #0
 81065e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 81065e2:	4b12      	ldr	r3, [pc, #72]	; (810662c <prvHeapInit+0xb4>)
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	2200      	movs	r2, #0
 81065e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 81065ee:	683b      	ldr	r3, [r7, #0]
 81065f0:	68fa      	ldr	r2, [r7, #12]
 81065f2:	1ad2      	subs	r2, r2, r3
 81065f4:	683b      	ldr	r3, [r7, #0]
 81065f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 81065f8:	4b0c      	ldr	r3, [pc, #48]	; (810662c <prvHeapInit+0xb4>)
 81065fa:	681a      	ldr	r2, [r3, #0]
 81065fc:	683b      	ldr	r3, [r7, #0]
 81065fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8106600:	683b      	ldr	r3, [r7, #0]
 8106602:	685b      	ldr	r3, [r3, #4]
 8106604:	4a0a      	ldr	r2, [pc, #40]	; (8106630 <prvHeapInit+0xb8>)
 8106606:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8106608:	683b      	ldr	r3, [r7, #0]
 810660a:	685b      	ldr	r3, [r3, #4]
 810660c:	4a09      	ldr	r2, [pc, #36]	; (8106634 <prvHeapInit+0xbc>)
 810660e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8106610:	4b09      	ldr	r3, [pc, #36]	; (8106638 <prvHeapInit+0xc0>)
 8106612:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8106616:	601a      	str	r2, [r3, #0]
}
 8106618:	bf00      	nop
 810661a:	3714      	adds	r7, #20
 810661c:	46bd      	mov	sp, r7
 810661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106622:	4770      	bx	lr
 8106624:	100008bc 	.word	0x100008bc
 8106628:	100044bc 	.word	0x100044bc
 810662c:	100044c4 	.word	0x100044c4
 8106630:	100044cc 	.word	0x100044cc
 8106634:	100044c8 	.word	0x100044c8
 8106638:	100044d0 	.word	0x100044d0

0810663c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810663c:	b480      	push	{r7}
 810663e:	b085      	sub	sp, #20
 8106640:	af00      	add	r7, sp, #0
 8106642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8106644:	4b28      	ldr	r3, [pc, #160]	; (81066e8 <prvInsertBlockIntoFreeList+0xac>)
 8106646:	60fb      	str	r3, [r7, #12]
 8106648:	e002      	b.n	8106650 <prvInsertBlockIntoFreeList+0x14>
 810664a:	68fb      	ldr	r3, [r7, #12]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	60fb      	str	r3, [r7, #12]
 8106650:	68fb      	ldr	r3, [r7, #12]
 8106652:	681b      	ldr	r3, [r3, #0]
 8106654:	687a      	ldr	r2, [r7, #4]
 8106656:	429a      	cmp	r2, r3
 8106658:	d8f7      	bhi.n	810664a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810665a:	68fb      	ldr	r3, [r7, #12]
 810665c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810665e:	68fb      	ldr	r3, [r7, #12]
 8106660:	685b      	ldr	r3, [r3, #4]
 8106662:	68ba      	ldr	r2, [r7, #8]
 8106664:	4413      	add	r3, r2
 8106666:	687a      	ldr	r2, [r7, #4]
 8106668:	429a      	cmp	r2, r3
 810666a:	d108      	bne.n	810667e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	685a      	ldr	r2, [r3, #4]
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	685b      	ldr	r3, [r3, #4]
 8106674:	441a      	add	r2, r3
 8106676:	68fb      	ldr	r3, [r7, #12]
 8106678:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810667a:	68fb      	ldr	r3, [r7, #12]
 810667c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8106682:	687b      	ldr	r3, [r7, #4]
 8106684:	685b      	ldr	r3, [r3, #4]
 8106686:	68ba      	ldr	r2, [r7, #8]
 8106688:	441a      	add	r2, r3
 810668a:	68fb      	ldr	r3, [r7, #12]
 810668c:	681b      	ldr	r3, [r3, #0]
 810668e:	429a      	cmp	r2, r3
 8106690:	d118      	bne.n	81066c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8106692:	68fb      	ldr	r3, [r7, #12]
 8106694:	681a      	ldr	r2, [r3, #0]
 8106696:	4b15      	ldr	r3, [pc, #84]	; (81066ec <prvInsertBlockIntoFreeList+0xb0>)
 8106698:	681b      	ldr	r3, [r3, #0]
 810669a:	429a      	cmp	r2, r3
 810669c:	d00d      	beq.n	81066ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	685a      	ldr	r2, [r3, #4]
 81066a2:	68fb      	ldr	r3, [r7, #12]
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	685b      	ldr	r3, [r3, #4]
 81066a8:	441a      	add	r2, r3
 81066aa:	687b      	ldr	r3, [r7, #4]
 81066ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 81066ae:	68fb      	ldr	r3, [r7, #12]
 81066b0:	681b      	ldr	r3, [r3, #0]
 81066b2:	681a      	ldr	r2, [r3, #0]
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	601a      	str	r2, [r3, #0]
 81066b8:	e008      	b.n	81066cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 81066ba:	4b0c      	ldr	r3, [pc, #48]	; (81066ec <prvInsertBlockIntoFreeList+0xb0>)
 81066bc:	681a      	ldr	r2, [r3, #0]
 81066be:	687b      	ldr	r3, [r7, #4]
 81066c0:	601a      	str	r2, [r3, #0]
 81066c2:	e003      	b.n	81066cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 81066c4:	68fb      	ldr	r3, [r7, #12]
 81066c6:	681a      	ldr	r2, [r3, #0]
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 81066cc:	68fa      	ldr	r2, [r7, #12]
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	429a      	cmp	r2, r3
 81066d2:	d002      	beq.n	81066da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 81066d4:	68fb      	ldr	r3, [r7, #12]
 81066d6:	687a      	ldr	r2, [r7, #4]
 81066d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81066da:	bf00      	nop
 81066dc:	3714      	adds	r7, #20
 81066de:	46bd      	mov	sp, r7
 81066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066e4:	4770      	bx	lr
 81066e6:	bf00      	nop
 81066e8:	100044bc 	.word	0x100044bc
 81066ec:	100044c4 	.word	0x100044c4

081066f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 81066f0:	b480      	push	{r7}
 81066f2:	b083      	sub	sp, #12
 81066f4:	af00      	add	r7, sp, #0
 81066f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	f103 0208 	add.w	r2, r3, #8
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8106702:	687b      	ldr	r3, [r7, #4]
 8106704:	f04f 32ff 	mov.w	r2, #4294967295
 8106708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810670a:	687b      	ldr	r3, [r7, #4]
 810670c:	f103 0208 	add.w	r2, r3, #8
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8106714:	687b      	ldr	r3, [r7, #4]
 8106716:	f103 0208 	add.w	r2, r3, #8
 810671a:	687b      	ldr	r3, [r7, #4]
 810671c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	2200      	movs	r2, #0
 8106722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8106724:	bf00      	nop
 8106726:	370c      	adds	r7, #12
 8106728:	46bd      	mov	sp, r7
 810672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810672e:	4770      	bx	lr

08106730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8106730:	b480      	push	{r7}
 8106732:	b083      	sub	sp, #12
 8106734:	af00      	add	r7, sp, #0
 8106736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	2200      	movs	r2, #0
 810673c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810673e:	bf00      	nop
 8106740:	370c      	adds	r7, #12
 8106742:	46bd      	mov	sp, r7
 8106744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106748:	4770      	bx	lr

0810674a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810674a:	b480      	push	{r7}
 810674c:	b085      	sub	sp, #20
 810674e:	af00      	add	r7, sp, #0
 8106750:	6078      	str	r0, [r7, #4]
 8106752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	685b      	ldr	r3, [r3, #4]
 8106758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810675a:	683b      	ldr	r3, [r7, #0]
 810675c:	68fa      	ldr	r2, [r7, #12]
 810675e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8106760:	68fb      	ldr	r3, [r7, #12]
 8106762:	689a      	ldr	r2, [r3, #8]
 8106764:	683b      	ldr	r3, [r7, #0]
 8106766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8106768:	68fb      	ldr	r3, [r7, #12]
 810676a:	689b      	ldr	r3, [r3, #8]
 810676c:	683a      	ldr	r2, [r7, #0]
 810676e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8106770:	68fb      	ldr	r3, [r7, #12]
 8106772:	683a      	ldr	r2, [r7, #0]
 8106774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8106776:	683b      	ldr	r3, [r7, #0]
 8106778:	687a      	ldr	r2, [r7, #4]
 810677a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810677c:	687b      	ldr	r3, [r7, #4]
 810677e:	681b      	ldr	r3, [r3, #0]
 8106780:	1c5a      	adds	r2, r3, #1
 8106782:	687b      	ldr	r3, [r7, #4]
 8106784:	601a      	str	r2, [r3, #0]
}
 8106786:	bf00      	nop
 8106788:	3714      	adds	r7, #20
 810678a:	46bd      	mov	sp, r7
 810678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106790:	4770      	bx	lr

08106792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8106792:	b480      	push	{r7}
 8106794:	b085      	sub	sp, #20
 8106796:	af00      	add	r7, sp, #0
 8106798:	6078      	str	r0, [r7, #4]
 810679a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810679c:	683b      	ldr	r3, [r7, #0]
 810679e:	681b      	ldr	r3, [r3, #0]
 81067a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 81067a2:	68bb      	ldr	r3, [r7, #8]
 81067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81067a8:	d103      	bne.n	81067b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	691b      	ldr	r3, [r3, #16]
 81067ae:	60fb      	str	r3, [r7, #12]
 81067b0:	e00c      	b.n	81067cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	3308      	adds	r3, #8
 81067b6:	60fb      	str	r3, [r7, #12]
 81067b8:	e002      	b.n	81067c0 <vListInsert+0x2e>
 81067ba:	68fb      	ldr	r3, [r7, #12]
 81067bc:	685b      	ldr	r3, [r3, #4]
 81067be:	60fb      	str	r3, [r7, #12]
 81067c0:	68fb      	ldr	r3, [r7, #12]
 81067c2:	685b      	ldr	r3, [r3, #4]
 81067c4:	681b      	ldr	r3, [r3, #0]
 81067c6:	68ba      	ldr	r2, [r7, #8]
 81067c8:	429a      	cmp	r2, r3
 81067ca:	d2f6      	bcs.n	81067ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 81067cc:	68fb      	ldr	r3, [r7, #12]
 81067ce:	685a      	ldr	r2, [r3, #4]
 81067d0:	683b      	ldr	r3, [r7, #0]
 81067d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 81067d4:	683b      	ldr	r3, [r7, #0]
 81067d6:	685b      	ldr	r3, [r3, #4]
 81067d8:	683a      	ldr	r2, [r7, #0]
 81067da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 81067dc:	683b      	ldr	r3, [r7, #0]
 81067de:	68fa      	ldr	r2, [r7, #12]
 81067e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 81067e2:	68fb      	ldr	r3, [r7, #12]
 81067e4:	683a      	ldr	r2, [r7, #0]
 81067e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 81067e8:	683b      	ldr	r3, [r7, #0]
 81067ea:	687a      	ldr	r2, [r7, #4]
 81067ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	681b      	ldr	r3, [r3, #0]
 81067f2:	1c5a      	adds	r2, r3, #1
 81067f4:	687b      	ldr	r3, [r7, #4]
 81067f6:	601a      	str	r2, [r3, #0]
}
 81067f8:	bf00      	nop
 81067fa:	3714      	adds	r7, #20
 81067fc:	46bd      	mov	sp, r7
 81067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106802:	4770      	bx	lr

08106804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8106804:	b480      	push	{r7}
 8106806:	b085      	sub	sp, #20
 8106808:	af00      	add	r7, sp, #0
 810680a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810680c:	687b      	ldr	r3, [r7, #4]
 810680e:	691b      	ldr	r3, [r3, #16]
 8106810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	685b      	ldr	r3, [r3, #4]
 8106816:	687a      	ldr	r2, [r7, #4]
 8106818:	6892      	ldr	r2, [r2, #8]
 810681a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	689b      	ldr	r3, [r3, #8]
 8106820:	687a      	ldr	r2, [r7, #4]
 8106822:	6852      	ldr	r2, [r2, #4]
 8106824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8106826:	68fb      	ldr	r3, [r7, #12]
 8106828:	685b      	ldr	r3, [r3, #4]
 810682a:	687a      	ldr	r2, [r7, #4]
 810682c:	429a      	cmp	r2, r3
 810682e:	d103      	bne.n	8106838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	689a      	ldr	r2, [r3, #8]
 8106834:	68fb      	ldr	r3, [r7, #12]
 8106836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	2200      	movs	r2, #0
 810683c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810683e:	68fb      	ldr	r3, [r7, #12]
 8106840:	681b      	ldr	r3, [r3, #0]
 8106842:	1e5a      	subs	r2, r3, #1
 8106844:	68fb      	ldr	r3, [r7, #12]
 8106846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8106848:	68fb      	ldr	r3, [r7, #12]
 810684a:	681b      	ldr	r3, [r3, #0]
}
 810684c:	4618      	mov	r0, r3
 810684e:	3714      	adds	r7, #20
 8106850:	46bd      	mov	sp, r7
 8106852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106856:	4770      	bx	lr

08106858 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8106858:	b480      	push	{r7}
 810685a:	b085      	sub	sp, #20
 810685c:	af00      	add	r7, sp, #0
 810685e:	60f8      	str	r0, [r7, #12]
 8106860:	60b9      	str	r1, [r7, #8]
 8106862:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8106864:	68fb      	ldr	r3, [r7, #12]
 8106866:	3b04      	subs	r3, #4
 8106868:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810686a:	68fb      	ldr	r3, [r7, #12]
 810686c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8106870:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8106872:	68fb      	ldr	r3, [r7, #12]
 8106874:	3b04      	subs	r3, #4
 8106876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8106878:	68bb      	ldr	r3, [r7, #8]
 810687a:	f023 0201 	bic.w	r2, r3, #1
 810687e:	68fb      	ldr	r3, [r7, #12]
 8106880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8106882:	68fb      	ldr	r3, [r7, #12]
 8106884:	3b04      	subs	r3, #4
 8106886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8106888:	4a0c      	ldr	r2, [pc, #48]	; (81068bc <pxPortInitialiseStack+0x64>)
 810688a:	68fb      	ldr	r3, [r7, #12]
 810688c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810688e:	68fb      	ldr	r3, [r7, #12]
 8106890:	3b14      	subs	r3, #20
 8106892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8106894:	687a      	ldr	r2, [r7, #4]
 8106896:	68fb      	ldr	r3, [r7, #12]
 8106898:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810689a:	68fb      	ldr	r3, [r7, #12]
 810689c:	3b04      	subs	r3, #4
 810689e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 81068a0:	68fb      	ldr	r3, [r7, #12]
 81068a2:	f06f 0202 	mvn.w	r2, #2
 81068a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 81068a8:	68fb      	ldr	r3, [r7, #12]
 81068aa:	3b20      	subs	r3, #32
 81068ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 81068ae:	68fb      	ldr	r3, [r7, #12]
}
 81068b0:	4618      	mov	r0, r3
 81068b2:	3714      	adds	r7, #20
 81068b4:	46bd      	mov	sp, r7
 81068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068ba:	4770      	bx	lr
 81068bc:	081068c1 	.word	0x081068c1

081068c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 81068c0:	b480      	push	{r7}
 81068c2:	b085      	sub	sp, #20
 81068c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 81068c6:	2300      	movs	r3, #0
 81068c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 81068ca:	4b11      	ldr	r3, [pc, #68]	; (8106910 <prvTaskExitError+0x50>)
 81068cc:	681b      	ldr	r3, [r3, #0]
 81068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81068d2:	d009      	beq.n	81068e8 <prvTaskExitError+0x28>
 81068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81068d8:	f383 8811 	msr	BASEPRI, r3
 81068dc:	f3bf 8f6f 	isb	sy
 81068e0:	f3bf 8f4f 	dsb	sy
 81068e4:	60fb      	str	r3, [r7, #12]
 81068e6:	e7fe      	b.n	81068e6 <prvTaskExitError+0x26>
 81068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81068ec:	f383 8811 	msr	BASEPRI, r3
 81068f0:	f3bf 8f6f 	isb	sy
 81068f4:	f3bf 8f4f 	dsb	sy
 81068f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 81068fa:	bf00      	nop
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	2b00      	cmp	r3, #0
 8106900:	d0fc      	beq.n	81068fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8106902:	bf00      	nop
 8106904:	3714      	adds	r7, #20
 8106906:	46bd      	mov	sp, r7
 8106908:	f85d 7b04 	ldr.w	r7, [sp], #4
 810690c:	4770      	bx	lr
 810690e:	bf00      	nop
 8106910:	1000000c 	.word	0x1000000c
	...

08106920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8106920:	4b07      	ldr	r3, [pc, #28]	; (8106940 <pxCurrentTCBConst2>)
 8106922:	6819      	ldr	r1, [r3, #0]
 8106924:	6808      	ldr	r0, [r1, #0]
 8106926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810692a:	f380 8809 	msr	PSP, r0
 810692e:	f3bf 8f6f 	isb	sy
 8106932:	f04f 0000 	mov.w	r0, #0
 8106936:	f380 8811 	msr	BASEPRI, r0
 810693a:	4770      	bx	lr
 810693c:	f3af 8000 	nop.w

08106940 <pxCurrentTCBConst2>:
 8106940:	100044dc 	.word	0x100044dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8106944:	bf00      	nop
 8106946:	bf00      	nop

08106948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8106948:	4808      	ldr	r0, [pc, #32]	; (810696c <prvPortStartFirstTask+0x24>)
 810694a:	6800      	ldr	r0, [r0, #0]
 810694c:	6800      	ldr	r0, [r0, #0]
 810694e:	f380 8808 	msr	MSP, r0
 8106952:	f04f 0000 	mov.w	r0, #0
 8106956:	f380 8814 	msr	CONTROL, r0
 810695a:	b662      	cpsie	i
 810695c:	b661      	cpsie	f
 810695e:	f3bf 8f4f 	dsb	sy
 8106962:	f3bf 8f6f 	isb	sy
 8106966:	df00      	svc	0
 8106968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810696a:	bf00      	nop
 810696c:	e000ed08 	.word	0xe000ed08

08106970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8106970:	b580      	push	{r7, lr}
 8106972:	b086      	sub	sp, #24
 8106974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8106976:	4b44      	ldr	r3, [pc, #272]	; (8106a88 <xPortStartScheduler+0x118>)
 8106978:	681b      	ldr	r3, [r3, #0]
 810697a:	4a44      	ldr	r2, [pc, #272]	; (8106a8c <xPortStartScheduler+0x11c>)
 810697c:	4293      	cmp	r3, r2
 810697e:	d109      	bne.n	8106994 <xPortStartScheduler+0x24>
 8106980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106984:	f383 8811 	msr	BASEPRI, r3
 8106988:	f3bf 8f6f 	isb	sy
 810698c:	f3bf 8f4f 	dsb	sy
 8106990:	613b      	str	r3, [r7, #16]
 8106992:	e7fe      	b.n	8106992 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8106994:	4b3c      	ldr	r3, [pc, #240]	; (8106a88 <xPortStartScheduler+0x118>)
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	4a3d      	ldr	r2, [pc, #244]	; (8106a90 <xPortStartScheduler+0x120>)
 810699a:	4293      	cmp	r3, r2
 810699c:	d109      	bne.n	81069b2 <xPortStartScheduler+0x42>
 810699e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81069a2:	f383 8811 	msr	BASEPRI, r3
 81069a6:	f3bf 8f6f 	isb	sy
 81069aa:	f3bf 8f4f 	dsb	sy
 81069ae:	60fb      	str	r3, [r7, #12]
 81069b0:	e7fe      	b.n	81069b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 81069b2:	4b38      	ldr	r3, [pc, #224]	; (8106a94 <xPortStartScheduler+0x124>)
 81069b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 81069b6:	697b      	ldr	r3, [r7, #20]
 81069b8:	781b      	ldrb	r3, [r3, #0]
 81069ba:	b2db      	uxtb	r3, r3
 81069bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 81069be:	697b      	ldr	r3, [r7, #20]
 81069c0:	22ff      	movs	r2, #255	; 0xff
 81069c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81069c4:	697b      	ldr	r3, [r7, #20]
 81069c6:	781b      	ldrb	r3, [r3, #0]
 81069c8:	b2db      	uxtb	r3, r3
 81069ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81069cc:	78fb      	ldrb	r3, [r7, #3]
 81069ce:	b2db      	uxtb	r3, r3
 81069d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81069d4:	b2da      	uxtb	r2, r3
 81069d6:	4b30      	ldr	r3, [pc, #192]	; (8106a98 <xPortStartScheduler+0x128>)
 81069d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81069da:	4b30      	ldr	r3, [pc, #192]	; (8106a9c <xPortStartScheduler+0x12c>)
 81069dc:	2207      	movs	r2, #7
 81069de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81069e0:	e009      	b.n	81069f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 81069e2:	4b2e      	ldr	r3, [pc, #184]	; (8106a9c <xPortStartScheduler+0x12c>)
 81069e4:	681b      	ldr	r3, [r3, #0]
 81069e6:	3b01      	subs	r3, #1
 81069e8:	4a2c      	ldr	r2, [pc, #176]	; (8106a9c <xPortStartScheduler+0x12c>)
 81069ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81069ec:	78fb      	ldrb	r3, [r7, #3]
 81069ee:	b2db      	uxtb	r3, r3
 81069f0:	005b      	lsls	r3, r3, #1
 81069f2:	b2db      	uxtb	r3, r3
 81069f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81069f6:	78fb      	ldrb	r3, [r7, #3]
 81069f8:	b2db      	uxtb	r3, r3
 81069fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81069fe:	2b80      	cmp	r3, #128	; 0x80
 8106a00:	d0ef      	beq.n	81069e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8106a02:	4b26      	ldr	r3, [pc, #152]	; (8106a9c <xPortStartScheduler+0x12c>)
 8106a04:	681b      	ldr	r3, [r3, #0]
 8106a06:	f1c3 0307 	rsb	r3, r3, #7
 8106a0a:	2b04      	cmp	r3, #4
 8106a0c:	d009      	beq.n	8106a22 <xPortStartScheduler+0xb2>
 8106a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106a12:	f383 8811 	msr	BASEPRI, r3
 8106a16:	f3bf 8f6f 	isb	sy
 8106a1a:	f3bf 8f4f 	dsb	sy
 8106a1e:	60bb      	str	r3, [r7, #8]
 8106a20:	e7fe      	b.n	8106a20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8106a22:	4b1e      	ldr	r3, [pc, #120]	; (8106a9c <xPortStartScheduler+0x12c>)
 8106a24:	681b      	ldr	r3, [r3, #0]
 8106a26:	021b      	lsls	r3, r3, #8
 8106a28:	4a1c      	ldr	r2, [pc, #112]	; (8106a9c <xPortStartScheduler+0x12c>)
 8106a2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8106a2c:	4b1b      	ldr	r3, [pc, #108]	; (8106a9c <xPortStartScheduler+0x12c>)
 8106a2e:	681b      	ldr	r3, [r3, #0]
 8106a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8106a34:	4a19      	ldr	r2, [pc, #100]	; (8106a9c <xPortStartScheduler+0x12c>)
 8106a36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8106a38:	687b      	ldr	r3, [r7, #4]
 8106a3a:	b2da      	uxtb	r2, r3
 8106a3c:	697b      	ldr	r3, [r7, #20]
 8106a3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8106a40:	4b17      	ldr	r3, [pc, #92]	; (8106aa0 <xPortStartScheduler+0x130>)
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	4a16      	ldr	r2, [pc, #88]	; (8106aa0 <xPortStartScheduler+0x130>)
 8106a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8106a4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8106a4c:	4b14      	ldr	r3, [pc, #80]	; (8106aa0 <xPortStartScheduler+0x130>)
 8106a4e:	681b      	ldr	r3, [r3, #0]
 8106a50:	4a13      	ldr	r2, [pc, #76]	; (8106aa0 <xPortStartScheduler+0x130>)
 8106a52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8106a56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8106a58:	f000 f8d6 	bl	8106c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8106a5c:	4b11      	ldr	r3, [pc, #68]	; (8106aa4 <xPortStartScheduler+0x134>)
 8106a5e:	2200      	movs	r2, #0
 8106a60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8106a62:	f000 f8f5 	bl	8106c50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8106a66:	4b10      	ldr	r3, [pc, #64]	; (8106aa8 <xPortStartScheduler+0x138>)
 8106a68:	681b      	ldr	r3, [r3, #0]
 8106a6a:	4a0f      	ldr	r2, [pc, #60]	; (8106aa8 <xPortStartScheduler+0x138>)
 8106a6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8106a70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8106a72:	f7ff ff69 	bl	8106948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8106a76:	f001 f9af 	bl	8107dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8106a7a:	f7ff ff21 	bl	81068c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8106a7e:	2300      	movs	r3, #0
}
 8106a80:	4618      	mov	r0, r3
 8106a82:	3718      	adds	r7, #24
 8106a84:	46bd      	mov	sp, r7
 8106a86:	bd80      	pop	{r7, pc}
 8106a88:	e000ed00 	.word	0xe000ed00
 8106a8c:	410fc271 	.word	0x410fc271
 8106a90:	410fc270 	.word	0x410fc270
 8106a94:	e000e400 	.word	0xe000e400
 8106a98:	100044d4 	.word	0x100044d4
 8106a9c:	100044d8 	.word	0x100044d8
 8106aa0:	e000ed20 	.word	0xe000ed20
 8106aa4:	1000000c 	.word	0x1000000c
 8106aa8:	e000ef34 	.word	0xe000ef34

08106aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8106aac:	b480      	push	{r7}
 8106aae:	b083      	sub	sp, #12
 8106ab0:	af00      	add	r7, sp, #0
 8106ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106ab6:	f383 8811 	msr	BASEPRI, r3
 8106aba:	f3bf 8f6f 	isb	sy
 8106abe:	f3bf 8f4f 	dsb	sy
 8106ac2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8106ac4:	4b0e      	ldr	r3, [pc, #56]	; (8106b00 <vPortEnterCritical+0x54>)
 8106ac6:	681b      	ldr	r3, [r3, #0]
 8106ac8:	3301      	adds	r3, #1
 8106aca:	4a0d      	ldr	r2, [pc, #52]	; (8106b00 <vPortEnterCritical+0x54>)
 8106acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8106ace:	4b0c      	ldr	r3, [pc, #48]	; (8106b00 <vPortEnterCritical+0x54>)
 8106ad0:	681b      	ldr	r3, [r3, #0]
 8106ad2:	2b01      	cmp	r3, #1
 8106ad4:	d10e      	bne.n	8106af4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8106ad6:	4b0b      	ldr	r3, [pc, #44]	; (8106b04 <vPortEnterCritical+0x58>)
 8106ad8:	681b      	ldr	r3, [r3, #0]
 8106ada:	b2db      	uxtb	r3, r3
 8106adc:	2b00      	cmp	r3, #0
 8106ade:	d009      	beq.n	8106af4 <vPortEnterCritical+0x48>
 8106ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106ae4:	f383 8811 	msr	BASEPRI, r3
 8106ae8:	f3bf 8f6f 	isb	sy
 8106aec:	f3bf 8f4f 	dsb	sy
 8106af0:	603b      	str	r3, [r7, #0]
 8106af2:	e7fe      	b.n	8106af2 <vPortEnterCritical+0x46>
	}
}
 8106af4:	bf00      	nop
 8106af6:	370c      	adds	r7, #12
 8106af8:	46bd      	mov	sp, r7
 8106afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106afe:	4770      	bx	lr
 8106b00:	1000000c 	.word	0x1000000c
 8106b04:	e000ed04 	.word	0xe000ed04

08106b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8106b08:	b480      	push	{r7}
 8106b0a:	b083      	sub	sp, #12
 8106b0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8106b0e:	4b11      	ldr	r3, [pc, #68]	; (8106b54 <vPortExitCritical+0x4c>)
 8106b10:	681b      	ldr	r3, [r3, #0]
 8106b12:	2b00      	cmp	r3, #0
 8106b14:	d109      	bne.n	8106b2a <vPortExitCritical+0x22>
 8106b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106b1a:	f383 8811 	msr	BASEPRI, r3
 8106b1e:	f3bf 8f6f 	isb	sy
 8106b22:	f3bf 8f4f 	dsb	sy
 8106b26:	607b      	str	r3, [r7, #4]
 8106b28:	e7fe      	b.n	8106b28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8106b2a:	4b0a      	ldr	r3, [pc, #40]	; (8106b54 <vPortExitCritical+0x4c>)
 8106b2c:	681b      	ldr	r3, [r3, #0]
 8106b2e:	3b01      	subs	r3, #1
 8106b30:	4a08      	ldr	r2, [pc, #32]	; (8106b54 <vPortExitCritical+0x4c>)
 8106b32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8106b34:	4b07      	ldr	r3, [pc, #28]	; (8106b54 <vPortExitCritical+0x4c>)
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	2b00      	cmp	r3, #0
 8106b3a:	d104      	bne.n	8106b46 <vPortExitCritical+0x3e>
 8106b3c:	2300      	movs	r3, #0
 8106b3e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8106b40:	683b      	ldr	r3, [r7, #0]
 8106b42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8106b46:	bf00      	nop
 8106b48:	370c      	adds	r7, #12
 8106b4a:	46bd      	mov	sp, r7
 8106b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b50:	4770      	bx	lr
 8106b52:	bf00      	nop
 8106b54:	1000000c 	.word	0x1000000c
	...

08106b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8106b60:	f3ef 8009 	mrs	r0, PSP
 8106b64:	f3bf 8f6f 	isb	sy
 8106b68:	4b15      	ldr	r3, [pc, #84]	; (8106bc0 <pxCurrentTCBConst>)
 8106b6a:	681a      	ldr	r2, [r3, #0]
 8106b6c:	f01e 0f10 	tst.w	lr, #16
 8106b70:	bf08      	it	eq
 8106b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8106b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106b7a:	6010      	str	r0, [r2, #0]
 8106b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8106b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8106b84:	f380 8811 	msr	BASEPRI, r0
 8106b88:	f3bf 8f4f 	dsb	sy
 8106b8c:	f3bf 8f6f 	isb	sy
 8106b90:	f001 f922 	bl	8107dd8 <vTaskSwitchContext>
 8106b94:	f04f 0000 	mov.w	r0, #0
 8106b98:	f380 8811 	msr	BASEPRI, r0
 8106b9c:	bc09      	pop	{r0, r3}
 8106b9e:	6819      	ldr	r1, [r3, #0]
 8106ba0:	6808      	ldr	r0, [r1, #0]
 8106ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106ba6:	f01e 0f10 	tst.w	lr, #16
 8106baa:	bf08      	it	eq
 8106bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8106bb0:	f380 8809 	msr	PSP, r0
 8106bb4:	f3bf 8f6f 	isb	sy
 8106bb8:	4770      	bx	lr
 8106bba:	bf00      	nop
 8106bbc:	f3af 8000 	nop.w

08106bc0 <pxCurrentTCBConst>:
 8106bc0:	100044dc 	.word	0x100044dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8106bc4:	bf00      	nop
 8106bc6:	bf00      	nop

08106bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8106bc8:	b580      	push	{r7, lr}
 8106bca:	b082      	sub	sp, #8
 8106bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8106bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106bd2:	f383 8811 	msr	BASEPRI, r3
 8106bd6:	f3bf 8f6f 	isb	sy
 8106bda:	f3bf 8f4f 	dsb	sy
 8106bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8106be0:	f001 f842 	bl	8107c68 <xTaskIncrementTick>
 8106be4:	4603      	mov	r3, r0
 8106be6:	2b00      	cmp	r3, #0
 8106be8:	d003      	beq.n	8106bf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8106bea:	4b06      	ldr	r3, [pc, #24]	; (8106c04 <SysTick_Handler+0x3c>)
 8106bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106bf0:	601a      	str	r2, [r3, #0]
 8106bf2:	2300      	movs	r3, #0
 8106bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8106bf6:	683b      	ldr	r3, [r7, #0]
 8106bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8106bfc:	bf00      	nop
 8106bfe:	3708      	adds	r7, #8
 8106c00:	46bd      	mov	sp, r7
 8106c02:	bd80      	pop	{r7, pc}
 8106c04:	e000ed04 	.word	0xe000ed04

08106c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8106c08:	b480      	push	{r7}
 8106c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8106c0c:	4b0b      	ldr	r3, [pc, #44]	; (8106c3c <vPortSetupTimerInterrupt+0x34>)
 8106c0e:	2200      	movs	r2, #0
 8106c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8106c12:	4b0b      	ldr	r3, [pc, #44]	; (8106c40 <vPortSetupTimerInterrupt+0x38>)
 8106c14:	2200      	movs	r2, #0
 8106c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8106c18:	4b0a      	ldr	r3, [pc, #40]	; (8106c44 <vPortSetupTimerInterrupt+0x3c>)
 8106c1a:	681b      	ldr	r3, [r3, #0]
 8106c1c:	4a0a      	ldr	r2, [pc, #40]	; (8106c48 <vPortSetupTimerInterrupt+0x40>)
 8106c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8106c22:	099b      	lsrs	r3, r3, #6
 8106c24:	4a09      	ldr	r2, [pc, #36]	; (8106c4c <vPortSetupTimerInterrupt+0x44>)
 8106c26:	3b01      	subs	r3, #1
 8106c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8106c2a:	4b04      	ldr	r3, [pc, #16]	; (8106c3c <vPortSetupTimerInterrupt+0x34>)
 8106c2c:	2207      	movs	r2, #7
 8106c2e:	601a      	str	r2, [r3, #0]
}
 8106c30:	bf00      	nop
 8106c32:	46bd      	mov	sp, r7
 8106c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c38:	4770      	bx	lr
 8106c3a:	bf00      	nop
 8106c3c:	e000e010 	.word	0xe000e010
 8106c40:	e000e018 	.word	0xe000e018
 8106c44:	10000004 	.word	0x10000004
 8106c48:	10624dd3 	.word	0x10624dd3
 8106c4c:	e000e014 	.word	0xe000e014

08106c50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8106c50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8106c60 <vPortEnableVFP+0x10>
 8106c54:	6801      	ldr	r1, [r0, #0]
 8106c56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8106c5a:	6001      	str	r1, [r0, #0]
 8106c5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8106c5e:	bf00      	nop
 8106c60:	e000ed88 	.word	0xe000ed88

08106c64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8106c64:	b480      	push	{r7}
 8106c66:	b085      	sub	sp, #20
 8106c68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8106c6a:	f3ef 8305 	mrs	r3, IPSR
 8106c6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8106c70:	68fb      	ldr	r3, [r7, #12]
 8106c72:	2b0f      	cmp	r3, #15
 8106c74:	d913      	bls.n	8106c9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8106c76:	4a16      	ldr	r2, [pc, #88]	; (8106cd0 <vPortValidateInterruptPriority+0x6c>)
 8106c78:	68fb      	ldr	r3, [r7, #12]
 8106c7a:	4413      	add	r3, r2
 8106c7c:	781b      	ldrb	r3, [r3, #0]
 8106c7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8106c80:	4b14      	ldr	r3, [pc, #80]	; (8106cd4 <vPortValidateInterruptPriority+0x70>)
 8106c82:	781b      	ldrb	r3, [r3, #0]
 8106c84:	7afa      	ldrb	r2, [r7, #11]
 8106c86:	429a      	cmp	r2, r3
 8106c88:	d209      	bcs.n	8106c9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8106c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c8e:	f383 8811 	msr	BASEPRI, r3
 8106c92:	f3bf 8f6f 	isb	sy
 8106c96:	f3bf 8f4f 	dsb	sy
 8106c9a:	607b      	str	r3, [r7, #4]
 8106c9c:	e7fe      	b.n	8106c9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8106c9e:	4b0e      	ldr	r3, [pc, #56]	; (8106cd8 <vPortValidateInterruptPriority+0x74>)
 8106ca0:	681b      	ldr	r3, [r3, #0]
 8106ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106ca6:	4b0d      	ldr	r3, [pc, #52]	; (8106cdc <vPortValidateInterruptPriority+0x78>)
 8106ca8:	681b      	ldr	r3, [r3, #0]
 8106caa:	429a      	cmp	r2, r3
 8106cac:	d909      	bls.n	8106cc2 <vPortValidateInterruptPriority+0x5e>
 8106cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106cb2:	f383 8811 	msr	BASEPRI, r3
 8106cb6:	f3bf 8f6f 	isb	sy
 8106cba:	f3bf 8f4f 	dsb	sy
 8106cbe:	603b      	str	r3, [r7, #0]
 8106cc0:	e7fe      	b.n	8106cc0 <vPortValidateInterruptPriority+0x5c>
	}
 8106cc2:	bf00      	nop
 8106cc4:	3714      	adds	r7, #20
 8106cc6:	46bd      	mov	sp, r7
 8106cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ccc:	4770      	bx	lr
 8106cce:	bf00      	nop
 8106cd0:	e000e3f0 	.word	0xe000e3f0
 8106cd4:	100044d4 	.word	0x100044d4
 8106cd8:	e000ed0c 	.word	0xe000ed0c
 8106cdc:	100044d8 	.word	0x100044d8

08106ce0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8106ce0:	b580      	push	{r7, lr}
 8106ce2:	b084      	sub	sp, #16
 8106ce4:	af00      	add	r7, sp, #0
 8106ce6:	6078      	str	r0, [r7, #4]
 8106ce8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8106cea:	687b      	ldr	r3, [r7, #4]
 8106cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8106cee:	68fb      	ldr	r3, [r7, #12]
 8106cf0:	2b00      	cmp	r3, #0
 8106cf2:	d109      	bne.n	8106d08 <xQueueGenericReset+0x28>
 8106cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106cf8:	f383 8811 	msr	BASEPRI, r3
 8106cfc:	f3bf 8f6f 	isb	sy
 8106d00:	f3bf 8f4f 	dsb	sy
 8106d04:	60bb      	str	r3, [r7, #8]
 8106d06:	e7fe      	b.n	8106d06 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8106d08:	f7ff fed0 	bl	8106aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106d0c:	68fb      	ldr	r3, [r7, #12]
 8106d0e:	681a      	ldr	r2, [r3, #0]
 8106d10:	68fb      	ldr	r3, [r7, #12]
 8106d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d14:	68f9      	ldr	r1, [r7, #12]
 8106d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8106d18:	fb01 f303 	mul.w	r3, r1, r3
 8106d1c:	441a      	add	r2, r3
 8106d1e:	68fb      	ldr	r3, [r7, #12]
 8106d20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8106d22:	68fb      	ldr	r3, [r7, #12]
 8106d24:	2200      	movs	r2, #0
 8106d26:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8106d28:	68fb      	ldr	r3, [r7, #12]
 8106d2a:	681a      	ldr	r2, [r3, #0]
 8106d2c:	68fb      	ldr	r3, [r7, #12]
 8106d2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106d30:	68fb      	ldr	r3, [r7, #12]
 8106d32:	681a      	ldr	r2, [r3, #0]
 8106d34:	68fb      	ldr	r3, [r7, #12]
 8106d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106d38:	3b01      	subs	r3, #1
 8106d3a:	68f9      	ldr	r1, [r7, #12]
 8106d3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8106d3e:	fb01 f303 	mul.w	r3, r1, r3
 8106d42:	441a      	add	r2, r3
 8106d44:	68fb      	ldr	r3, [r7, #12]
 8106d46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8106d48:	68fb      	ldr	r3, [r7, #12]
 8106d4a:	22ff      	movs	r2, #255	; 0xff
 8106d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8106d50:	68fb      	ldr	r3, [r7, #12]
 8106d52:	22ff      	movs	r2, #255	; 0xff
 8106d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8106d58:	683b      	ldr	r3, [r7, #0]
 8106d5a:	2b00      	cmp	r3, #0
 8106d5c:	d114      	bne.n	8106d88 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106d5e:	68fb      	ldr	r3, [r7, #12]
 8106d60:	691b      	ldr	r3, [r3, #16]
 8106d62:	2b00      	cmp	r3, #0
 8106d64:	d01a      	beq.n	8106d9c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106d66:	68fb      	ldr	r3, [r7, #12]
 8106d68:	3310      	adds	r3, #16
 8106d6a:	4618      	mov	r0, r3
 8106d6c:	f001 f8de 	bl	8107f2c <xTaskRemoveFromEventList>
 8106d70:	4603      	mov	r3, r0
 8106d72:	2b00      	cmp	r3, #0
 8106d74:	d012      	beq.n	8106d9c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8106d76:	4b0d      	ldr	r3, [pc, #52]	; (8106dac <xQueueGenericReset+0xcc>)
 8106d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106d7c:	601a      	str	r2, [r3, #0]
 8106d7e:	f3bf 8f4f 	dsb	sy
 8106d82:	f3bf 8f6f 	isb	sy
 8106d86:	e009      	b.n	8106d9c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8106d88:	68fb      	ldr	r3, [r7, #12]
 8106d8a:	3310      	adds	r3, #16
 8106d8c:	4618      	mov	r0, r3
 8106d8e:	f7ff fcaf 	bl	81066f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8106d92:	68fb      	ldr	r3, [r7, #12]
 8106d94:	3324      	adds	r3, #36	; 0x24
 8106d96:	4618      	mov	r0, r3
 8106d98:	f7ff fcaa 	bl	81066f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8106d9c:	f7ff feb4 	bl	8106b08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8106da0:	2301      	movs	r3, #1
}
 8106da2:	4618      	mov	r0, r3
 8106da4:	3710      	adds	r7, #16
 8106da6:	46bd      	mov	sp, r7
 8106da8:	bd80      	pop	{r7, pc}
 8106daa:	bf00      	nop
 8106dac:	e000ed04 	.word	0xe000ed04

08106db0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8106db0:	b580      	push	{r7, lr}
 8106db2:	b08e      	sub	sp, #56	; 0x38
 8106db4:	af02      	add	r7, sp, #8
 8106db6:	60f8      	str	r0, [r7, #12]
 8106db8:	60b9      	str	r1, [r7, #8]
 8106dba:	607a      	str	r2, [r7, #4]
 8106dbc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8106dbe:	68fb      	ldr	r3, [r7, #12]
 8106dc0:	2b00      	cmp	r3, #0
 8106dc2:	d109      	bne.n	8106dd8 <xQueueGenericCreateStatic+0x28>
 8106dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106dc8:	f383 8811 	msr	BASEPRI, r3
 8106dcc:	f3bf 8f6f 	isb	sy
 8106dd0:	f3bf 8f4f 	dsb	sy
 8106dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8106dd6:	e7fe      	b.n	8106dd6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8106dd8:	683b      	ldr	r3, [r7, #0]
 8106dda:	2b00      	cmp	r3, #0
 8106ddc:	d109      	bne.n	8106df2 <xQueueGenericCreateStatic+0x42>
 8106dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106de2:	f383 8811 	msr	BASEPRI, r3
 8106de6:	f3bf 8f6f 	isb	sy
 8106dea:	f3bf 8f4f 	dsb	sy
 8106dee:	627b      	str	r3, [r7, #36]	; 0x24
 8106df0:	e7fe      	b.n	8106df0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8106df2:	687b      	ldr	r3, [r7, #4]
 8106df4:	2b00      	cmp	r3, #0
 8106df6:	d002      	beq.n	8106dfe <xQueueGenericCreateStatic+0x4e>
 8106df8:	68bb      	ldr	r3, [r7, #8]
 8106dfa:	2b00      	cmp	r3, #0
 8106dfc:	d001      	beq.n	8106e02 <xQueueGenericCreateStatic+0x52>
 8106dfe:	2301      	movs	r3, #1
 8106e00:	e000      	b.n	8106e04 <xQueueGenericCreateStatic+0x54>
 8106e02:	2300      	movs	r3, #0
 8106e04:	2b00      	cmp	r3, #0
 8106e06:	d109      	bne.n	8106e1c <xQueueGenericCreateStatic+0x6c>
 8106e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106e0c:	f383 8811 	msr	BASEPRI, r3
 8106e10:	f3bf 8f6f 	isb	sy
 8106e14:	f3bf 8f4f 	dsb	sy
 8106e18:	623b      	str	r3, [r7, #32]
 8106e1a:	e7fe      	b.n	8106e1a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8106e1c:	687b      	ldr	r3, [r7, #4]
 8106e1e:	2b00      	cmp	r3, #0
 8106e20:	d102      	bne.n	8106e28 <xQueueGenericCreateStatic+0x78>
 8106e22:	68bb      	ldr	r3, [r7, #8]
 8106e24:	2b00      	cmp	r3, #0
 8106e26:	d101      	bne.n	8106e2c <xQueueGenericCreateStatic+0x7c>
 8106e28:	2301      	movs	r3, #1
 8106e2a:	e000      	b.n	8106e2e <xQueueGenericCreateStatic+0x7e>
 8106e2c:	2300      	movs	r3, #0
 8106e2e:	2b00      	cmp	r3, #0
 8106e30:	d109      	bne.n	8106e46 <xQueueGenericCreateStatic+0x96>
 8106e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106e36:	f383 8811 	msr	BASEPRI, r3
 8106e3a:	f3bf 8f6f 	isb	sy
 8106e3e:	f3bf 8f4f 	dsb	sy
 8106e42:	61fb      	str	r3, [r7, #28]
 8106e44:	e7fe      	b.n	8106e44 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8106e46:	2350      	movs	r3, #80	; 0x50
 8106e48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8106e4a:	697b      	ldr	r3, [r7, #20]
 8106e4c:	2b50      	cmp	r3, #80	; 0x50
 8106e4e:	d009      	beq.n	8106e64 <xQueueGenericCreateStatic+0xb4>
 8106e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106e54:	f383 8811 	msr	BASEPRI, r3
 8106e58:	f3bf 8f6f 	isb	sy
 8106e5c:	f3bf 8f4f 	dsb	sy
 8106e60:	61bb      	str	r3, [r7, #24]
 8106e62:	e7fe      	b.n	8106e62 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8106e64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106e66:	683b      	ldr	r3, [r7, #0]
 8106e68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8106e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e6c:	2b00      	cmp	r3, #0
 8106e6e:	d00d      	beq.n	8106e8c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8106e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e72:	2201      	movs	r2, #1
 8106e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8106e78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8106e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e7e:	9300      	str	r3, [sp, #0]
 8106e80:	4613      	mov	r3, r2
 8106e82:	687a      	ldr	r2, [r7, #4]
 8106e84:	68b9      	ldr	r1, [r7, #8]
 8106e86:	68f8      	ldr	r0, [r7, #12]
 8106e88:	f000 f805 	bl	8106e96 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8106e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8106e8e:	4618      	mov	r0, r3
 8106e90:	3730      	adds	r7, #48	; 0x30
 8106e92:	46bd      	mov	sp, r7
 8106e94:	bd80      	pop	{r7, pc}

08106e96 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8106e96:	b580      	push	{r7, lr}
 8106e98:	b084      	sub	sp, #16
 8106e9a:	af00      	add	r7, sp, #0
 8106e9c:	60f8      	str	r0, [r7, #12]
 8106e9e:	60b9      	str	r1, [r7, #8]
 8106ea0:	607a      	str	r2, [r7, #4]
 8106ea2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8106ea4:	68bb      	ldr	r3, [r7, #8]
 8106ea6:	2b00      	cmp	r3, #0
 8106ea8:	d103      	bne.n	8106eb2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8106eaa:	69bb      	ldr	r3, [r7, #24]
 8106eac:	69ba      	ldr	r2, [r7, #24]
 8106eae:	601a      	str	r2, [r3, #0]
 8106eb0:	e002      	b.n	8106eb8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8106eb2:	69bb      	ldr	r3, [r7, #24]
 8106eb4:	687a      	ldr	r2, [r7, #4]
 8106eb6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8106eb8:	69bb      	ldr	r3, [r7, #24]
 8106eba:	68fa      	ldr	r2, [r7, #12]
 8106ebc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8106ebe:	69bb      	ldr	r3, [r7, #24]
 8106ec0:	68ba      	ldr	r2, [r7, #8]
 8106ec2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8106ec4:	2101      	movs	r1, #1
 8106ec6:	69b8      	ldr	r0, [r7, #24]
 8106ec8:	f7ff ff0a 	bl	8106ce0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8106ecc:	69bb      	ldr	r3, [r7, #24]
 8106ece:	78fa      	ldrb	r2, [r7, #3]
 8106ed0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8106ed4:	bf00      	nop
 8106ed6:	3710      	adds	r7, #16
 8106ed8:	46bd      	mov	sp, r7
 8106eda:	bd80      	pop	{r7, pc}

08106edc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8106edc:	b580      	push	{r7, lr}
 8106ede:	b08e      	sub	sp, #56	; 0x38
 8106ee0:	af00      	add	r7, sp, #0
 8106ee2:	60f8      	str	r0, [r7, #12]
 8106ee4:	60b9      	str	r1, [r7, #8]
 8106ee6:	607a      	str	r2, [r7, #4]
 8106ee8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8106eea:	2300      	movs	r3, #0
 8106eec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8106eee:	68fb      	ldr	r3, [r7, #12]
 8106ef0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8106ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ef4:	2b00      	cmp	r3, #0
 8106ef6:	d109      	bne.n	8106f0c <xQueueGenericSend+0x30>
 8106ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106efc:	f383 8811 	msr	BASEPRI, r3
 8106f00:	f3bf 8f6f 	isb	sy
 8106f04:	f3bf 8f4f 	dsb	sy
 8106f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8106f0a:	e7fe      	b.n	8106f0a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106f0c:	68bb      	ldr	r3, [r7, #8]
 8106f0e:	2b00      	cmp	r3, #0
 8106f10:	d103      	bne.n	8106f1a <xQueueGenericSend+0x3e>
 8106f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106f16:	2b00      	cmp	r3, #0
 8106f18:	d101      	bne.n	8106f1e <xQueueGenericSend+0x42>
 8106f1a:	2301      	movs	r3, #1
 8106f1c:	e000      	b.n	8106f20 <xQueueGenericSend+0x44>
 8106f1e:	2300      	movs	r3, #0
 8106f20:	2b00      	cmp	r3, #0
 8106f22:	d109      	bne.n	8106f38 <xQueueGenericSend+0x5c>
 8106f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f28:	f383 8811 	msr	BASEPRI, r3
 8106f2c:	f3bf 8f6f 	isb	sy
 8106f30:	f3bf 8f4f 	dsb	sy
 8106f34:	627b      	str	r3, [r7, #36]	; 0x24
 8106f36:	e7fe      	b.n	8106f36 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106f38:	683b      	ldr	r3, [r7, #0]
 8106f3a:	2b02      	cmp	r3, #2
 8106f3c:	d103      	bne.n	8106f46 <xQueueGenericSend+0x6a>
 8106f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f42:	2b01      	cmp	r3, #1
 8106f44:	d101      	bne.n	8106f4a <xQueueGenericSend+0x6e>
 8106f46:	2301      	movs	r3, #1
 8106f48:	e000      	b.n	8106f4c <xQueueGenericSend+0x70>
 8106f4a:	2300      	movs	r3, #0
 8106f4c:	2b00      	cmp	r3, #0
 8106f4e:	d109      	bne.n	8106f64 <xQueueGenericSend+0x88>
 8106f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f54:	f383 8811 	msr	BASEPRI, r3
 8106f58:	f3bf 8f6f 	isb	sy
 8106f5c:	f3bf 8f4f 	dsb	sy
 8106f60:	623b      	str	r3, [r7, #32]
 8106f62:	e7fe      	b.n	8106f62 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106f64:	f001 f998 	bl	8108298 <xTaskGetSchedulerState>
 8106f68:	4603      	mov	r3, r0
 8106f6a:	2b00      	cmp	r3, #0
 8106f6c:	d102      	bne.n	8106f74 <xQueueGenericSend+0x98>
 8106f6e:	687b      	ldr	r3, [r7, #4]
 8106f70:	2b00      	cmp	r3, #0
 8106f72:	d101      	bne.n	8106f78 <xQueueGenericSend+0x9c>
 8106f74:	2301      	movs	r3, #1
 8106f76:	e000      	b.n	8106f7a <xQueueGenericSend+0x9e>
 8106f78:	2300      	movs	r3, #0
 8106f7a:	2b00      	cmp	r3, #0
 8106f7c:	d109      	bne.n	8106f92 <xQueueGenericSend+0xb6>
 8106f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f82:	f383 8811 	msr	BASEPRI, r3
 8106f86:	f3bf 8f6f 	isb	sy
 8106f8a:	f3bf 8f4f 	dsb	sy
 8106f8e:	61fb      	str	r3, [r7, #28]
 8106f90:	e7fe      	b.n	8106f90 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106f92:	f7ff fd8b 	bl	8106aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106f9e:	429a      	cmp	r2, r3
 8106fa0:	d302      	bcc.n	8106fa8 <xQueueGenericSend+0xcc>
 8106fa2:	683b      	ldr	r3, [r7, #0]
 8106fa4:	2b02      	cmp	r3, #2
 8106fa6:	d129      	bne.n	8106ffc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106fa8:	683a      	ldr	r2, [r7, #0]
 8106faa:	68b9      	ldr	r1, [r7, #8]
 8106fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106fae:	f000 f9ff 	bl	81073b0 <prvCopyDataToQueue>
 8106fb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106fb8:	2b00      	cmp	r3, #0
 8106fba:	d010      	beq.n	8106fde <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fbe:	3324      	adds	r3, #36	; 0x24
 8106fc0:	4618      	mov	r0, r3
 8106fc2:	f000 ffb3 	bl	8107f2c <xTaskRemoveFromEventList>
 8106fc6:	4603      	mov	r3, r0
 8106fc8:	2b00      	cmp	r3, #0
 8106fca:	d013      	beq.n	8106ff4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8106fcc:	4b3f      	ldr	r3, [pc, #252]	; (81070cc <xQueueGenericSend+0x1f0>)
 8106fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106fd2:	601a      	str	r2, [r3, #0]
 8106fd4:	f3bf 8f4f 	dsb	sy
 8106fd8:	f3bf 8f6f 	isb	sy
 8106fdc:	e00a      	b.n	8106ff4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8106fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106fe0:	2b00      	cmp	r3, #0
 8106fe2:	d007      	beq.n	8106ff4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8106fe4:	4b39      	ldr	r3, [pc, #228]	; (81070cc <xQueueGenericSend+0x1f0>)
 8106fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106fea:	601a      	str	r2, [r3, #0]
 8106fec:	f3bf 8f4f 	dsb	sy
 8106ff0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8106ff4:	f7ff fd88 	bl	8106b08 <vPortExitCritical>
				return pdPASS;
 8106ff8:	2301      	movs	r3, #1
 8106ffa:	e063      	b.n	81070c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8106ffc:	687b      	ldr	r3, [r7, #4]
 8106ffe:	2b00      	cmp	r3, #0
 8107000:	d103      	bne.n	810700a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8107002:	f7ff fd81 	bl	8106b08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8107006:	2300      	movs	r3, #0
 8107008:	e05c      	b.n	81070c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810700a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810700c:	2b00      	cmp	r3, #0
 810700e:	d106      	bne.n	810701e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8107010:	f107 0314 	add.w	r3, r7, #20
 8107014:	4618      	mov	r0, r3
 8107016:	f000 ffeb 	bl	8107ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810701a:	2301      	movs	r3, #1
 810701c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810701e:	f7ff fd73 	bl	8106b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8107022:	f000 fd67 	bl	8107af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8107026:	f7ff fd41 	bl	8106aac <vPortEnterCritical>
 810702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810702c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8107030:	b25b      	sxtb	r3, r3
 8107032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107036:	d103      	bne.n	8107040 <xQueueGenericSend+0x164>
 8107038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810703a:	2200      	movs	r2, #0
 810703c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107046:	b25b      	sxtb	r3, r3
 8107048:	f1b3 3fff 	cmp.w	r3, #4294967295
 810704c:	d103      	bne.n	8107056 <xQueueGenericSend+0x17a>
 810704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107050:	2200      	movs	r2, #0
 8107052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107056:	f7ff fd57 	bl	8106b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810705a:	1d3a      	adds	r2, r7, #4
 810705c:	f107 0314 	add.w	r3, r7, #20
 8107060:	4611      	mov	r1, r2
 8107062:	4618      	mov	r0, r3
 8107064:	f000 ffda 	bl	810801c <xTaskCheckForTimeOut>
 8107068:	4603      	mov	r3, r0
 810706a:	2b00      	cmp	r3, #0
 810706c:	d124      	bne.n	81070b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810706e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107070:	f000 fa96 	bl	81075a0 <prvIsQueueFull>
 8107074:	4603      	mov	r3, r0
 8107076:	2b00      	cmp	r3, #0
 8107078:	d018      	beq.n	81070ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810707c:	3310      	adds	r3, #16
 810707e:	687a      	ldr	r2, [r7, #4]
 8107080:	4611      	mov	r1, r2
 8107082:	4618      	mov	r0, r3
 8107084:	f000 ff04 	bl	8107e90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8107088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810708a:	f000 fa21 	bl	81074d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810708e:	f000 fd3f 	bl	8107b10 <xTaskResumeAll>
 8107092:	4603      	mov	r3, r0
 8107094:	2b00      	cmp	r3, #0
 8107096:	f47f af7c 	bne.w	8106f92 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 810709a:	4b0c      	ldr	r3, [pc, #48]	; (81070cc <xQueueGenericSend+0x1f0>)
 810709c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81070a0:	601a      	str	r2, [r3, #0]
 81070a2:	f3bf 8f4f 	dsb	sy
 81070a6:	f3bf 8f6f 	isb	sy
 81070aa:	e772      	b.n	8106f92 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 81070ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81070ae:	f000 fa0f 	bl	81074d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81070b2:	f000 fd2d 	bl	8107b10 <xTaskResumeAll>
 81070b6:	e76c      	b.n	8106f92 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 81070b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81070ba:	f000 fa09 	bl	81074d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81070be:	f000 fd27 	bl	8107b10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81070c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81070c4:	4618      	mov	r0, r3
 81070c6:	3738      	adds	r7, #56	; 0x38
 81070c8:	46bd      	mov	sp, r7
 81070ca:	bd80      	pop	{r7, pc}
 81070cc:	e000ed04 	.word	0xe000ed04

081070d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81070d0:	b580      	push	{r7, lr}
 81070d2:	b08e      	sub	sp, #56	; 0x38
 81070d4:	af00      	add	r7, sp, #0
 81070d6:	60f8      	str	r0, [r7, #12]
 81070d8:	60b9      	str	r1, [r7, #8]
 81070da:	607a      	str	r2, [r7, #4]
 81070dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81070de:	68fb      	ldr	r3, [r7, #12]
 81070e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81070e4:	2b00      	cmp	r3, #0
 81070e6:	d109      	bne.n	81070fc <xQueueGenericSendFromISR+0x2c>
 81070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81070ec:	f383 8811 	msr	BASEPRI, r3
 81070f0:	f3bf 8f6f 	isb	sy
 81070f4:	f3bf 8f4f 	dsb	sy
 81070f8:	627b      	str	r3, [r7, #36]	; 0x24
 81070fa:	e7fe      	b.n	81070fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81070fc:	68bb      	ldr	r3, [r7, #8]
 81070fe:	2b00      	cmp	r3, #0
 8107100:	d103      	bne.n	810710a <xQueueGenericSendFromISR+0x3a>
 8107102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107106:	2b00      	cmp	r3, #0
 8107108:	d101      	bne.n	810710e <xQueueGenericSendFromISR+0x3e>
 810710a:	2301      	movs	r3, #1
 810710c:	e000      	b.n	8107110 <xQueueGenericSendFromISR+0x40>
 810710e:	2300      	movs	r3, #0
 8107110:	2b00      	cmp	r3, #0
 8107112:	d109      	bne.n	8107128 <xQueueGenericSendFromISR+0x58>
 8107114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107118:	f383 8811 	msr	BASEPRI, r3
 810711c:	f3bf 8f6f 	isb	sy
 8107120:	f3bf 8f4f 	dsb	sy
 8107124:	623b      	str	r3, [r7, #32]
 8107126:	e7fe      	b.n	8107126 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8107128:	683b      	ldr	r3, [r7, #0]
 810712a:	2b02      	cmp	r3, #2
 810712c:	d103      	bne.n	8107136 <xQueueGenericSendFromISR+0x66>
 810712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107132:	2b01      	cmp	r3, #1
 8107134:	d101      	bne.n	810713a <xQueueGenericSendFromISR+0x6a>
 8107136:	2301      	movs	r3, #1
 8107138:	e000      	b.n	810713c <xQueueGenericSendFromISR+0x6c>
 810713a:	2300      	movs	r3, #0
 810713c:	2b00      	cmp	r3, #0
 810713e:	d109      	bne.n	8107154 <xQueueGenericSendFromISR+0x84>
 8107140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107144:	f383 8811 	msr	BASEPRI, r3
 8107148:	f3bf 8f6f 	isb	sy
 810714c:	f3bf 8f4f 	dsb	sy
 8107150:	61fb      	str	r3, [r7, #28]
 8107152:	e7fe      	b.n	8107152 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8107154:	f7ff fd86 	bl	8106c64 <vPortValidateInterruptPriority>
	__asm volatile
 8107158:	f3ef 8211 	mrs	r2, BASEPRI
 810715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107160:	f383 8811 	msr	BASEPRI, r3
 8107164:	f3bf 8f6f 	isb	sy
 8107168:	f3bf 8f4f 	dsb	sy
 810716c:	61ba      	str	r2, [r7, #24]
 810716e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8107170:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8107172:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8107174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107176:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810717a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810717c:	429a      	cmp	r2, r3
 810717e:	d302      	bcc.n	8107186 <xQueueGenericSendFromISR+0xb6>
 8107180:	683b      	ldr	r3, [r7, #0]
 8107182:	2b02      	cmp	r3, #2
 8107184:	d12c      	bne.n	81071e0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8107186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810718c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8107190:	683a      	ldr	r2, [r7, #0]
 8107192:	68b9      	ldr	r1, [r7, #8]
 8107194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8107196:	f000 f90b 	bl	81073b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810719a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 810719e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81071a2:	d112      	bne.n	81071ca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81071a8:	2b00      	cmp	r3, #0
 81071aa:	d016      	beq.n	81071da <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81071ae:	3324      	adds	r3, #36	; 0x24
 81071b0:	4618      	mov	r0, r3
 81071b2:	f000 febb 	bl	8107f2c <xTaskRemoveFromEventList>
 81071b6:	4603      	mov	r3, r0
 81071b8:	2b00      	cmp	r3, #0
 81071ba:	d00e      	beq.n	81071da <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	2b00      	cmp	r3, #0
 81071c0:	d00b      	beq.n	81071da <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	2201      	movs	r2, #1
 81071c6:	601a      	str	r2, [r3, #0]
 81071c8:	e007      	b.n	81071da <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81071ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81071ce:	3301      	adds	r3, #1
 81071d0:	b2db      	uxtb	r3, r3
 81071d2:	b25a      	sxtb	r2, r3
 81071d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81071d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 81071da:	2301      	movs	r3, #1
 81071dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 81071de:	e001      	b.n	81071e4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81071e0:	2300      	movs	r3, #0
 81071e2:	637b      	str	r3, [r7, #52]	; 0x34
 81071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81071e6:	613b      	str	r3, [r7, #16]
	__asm volatile
 81071e8:	693b      	ldr	r3, [r7, #16]
 81071ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81071ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 81071f0:	4618      	mov	r0, r3
 81071f2:	3738      	adds	r7, #56	; 0x38
 81071f4:	46bd      	mov	sp, r7
 81071f6:	bd80      	pop	{r7, pc}

081071f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81071f8:	b580      	push	{r7, lr}
 81071fa:	b08c      	sub	sp, #48	; 0x30
 81071fc:	af00      	add	r7, sp, #0
 81071fe:	60f8      	str	r0, [r7, #12]
 8107200:	60b9      	str	r1, [r7, #8]
 8107202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8107204:	2300      	movs	r3, #0
 8107206:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8107208:	68fb      	ldr	r3, [r7, #12]
 810720a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810720e:	2b00      	cmp	r3, #0
 8107210:	d109      	bne.n	8107226 <xQueueReceive+0x2e>
	__asm volatile
 8107212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107216:	f383 8811 	msr	BASEPRI, r3
 810721a:	f3bf 8f6f 	isb	sy
 810721e:	f3bf 8f4f 	dsb	sy
 8107222:	623b      	str	r3, [r7, #32]
 8107224:	e7fe      	b.n	8107224 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8107226:	68bb      	ldr	r3, [r7, #8]
 8107228:	2b00      	cmp	r3, #0
 810722a:	d103      	bne.n	8107234 <xQueueReceive+0x3c>
 810722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107230:	2b00      	cmp	r3, #0
 8107232:	d101      	bne.n	8107238 <xQueueReceive+0x40>
 8107234:	2301      	movs	r3, #1
 8107236:	e000      	b.n	810723a <xQueueReceive+0x42>
 8107238:	2300      	movs	r3, #0
 810723a:	2b00      	cmp	r3, #0
 810723c:	d109      	bne.n	8107252 <xQueueReceive+0x5a>
 810723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107242:	f383 8811 	msr	BASEPRI, r3
 8107246:	f3bf 8f6f 	isb	sy
 810724a:	f3bf 8f4f 	dsb	sy
 810724e:	61fb      	str	r3, [r7, #28]
 8107250:	e7fe      	b.n	8107250 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8107252:	f001 f821 	bl	8108298 <xTaskGetSchedulerState>
 8107256:	4603      	mov	r3, r0
 8107258:	2b00      	cmp	r3, #0
 810725a:	d102      	bne.n	8107262 <xQueueReceive+0x6a>
 810725c:	687b      	ldr	r3, [r7, #4]
 810725e:	2b00      	cmp	r3, #0
 8107260:	d101      	bne.n	8107266 <xQueueReceive+0x6e>
 8107262:	2301      	movs	r3, #1
 8107264:	e000      	b.n	8107268 <xQueueReceive+0x70>
 8107266:	2300      	movs	r3, #0
 8107268:	2b00      	cmp	r3, #0
 810726a:	d109      	bne.n	8107280 <xQueueReceive+0x88>
 810726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107270:	f383 8811 	msr	BASEPRI, r3
 8107274:	f3bf 8f6f 	isb	sy
 8107278:	f3bf 8f4f 	dsb	sy
 810727c:	61bb      	str	r3, [r7, #24]
 810727e:	e7fe      	b.n	810727e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8107280:	f7ff fc14 	bl	8106aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8107284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107288:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810728c:	2b00      	cmp	r3, #0
 810728e:	d01f      	beq.n	81072d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8107290:	68b9      	ldr	r1, [r7, #8]
 8107292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107294:	f000 f8f6 	bl	8107484 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8107298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810729a:	1e5a      	subs	r2, r3, #1
 810729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810729e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072a2:	691b      	ldr	r3, [r3, #16]
 81072a4:	2b00      	cmp	r3, #0
 81072a6:	d00f      	beq.n	81072c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072aa:	3310      	adds	r3, #16
 81072ac:	4618      	mov	r0, r3
 81072ae:	f000 fe3d 	bl	8107f2c <xTaskRemoveFromEventList>
 81072b2:	4603      	mov	r3, r0
 81072b4:	2b00      	cmp	r3, #0
 81072b6:	d007      	beq.n	81072c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 81072b8:	4b3c      	ldr	r3, [pc, #240]	; (81073ac <xQueueReceive+0x1b4>)
 81072ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81072be:	601a      	str	r2, [r3, #0]
 81072c0:	f3bf 8f4f 	dsb	sy
 81072c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81072c8:	f7ff fc1e 	bl	8106b08 <vPortExitCritical>
				return pdPASS;
 81072cc:	2301      	movs	r3, #1
 81072ce:	e069      	b.n	81073a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81072d0:	687b      	ldr	r3, [r7, #4]
 81072d2:	2b00      	cmp	r3, #0
 81072d4:	d103      	bne.n	81072de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81072d6:	f7ff fc17 	bl	8106b08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81072da:	2300      	movs	r3, #0
 81072dc:	e062      	b.n	81073a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 81072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81072e0:	2b00      	cmp	r3, #0
 81072e2:	d106      	bne.n	81072f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81072e4:	f107 0310 	add.w	r3, r7, #16
 81072e8:	4618      	mov	r0, r3
 81072ea:	f000 fe81 	bl	8107ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81072ee:	2301      	movs	r3, #1
 81072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81072f2:	f7ff fc09 	bl	8106b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81072f6:	f000 fbfd 	bl	8107af4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81072fa:	f7ff fbd7 	bl	8106aac <vPortEnterCritical>
 81072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8107304:	b25b      	sxtb	r3, r3
 8107306:	f1b3 3fff 	cmp.w	r3, #4294967295
 810730a:	d103      	bne.n	8107314 <xQueueReceive+0x11c>
 810730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810730e:	2200      	movs	r2, #0
 8107310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810731a:	b25b      	sxtb	r3, r3
 810731c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107320:	d103      	bne.n	810732a <xQueueReceive+0x132>
 8107322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107324:	2200      	movs	r2, #0
 8107326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810732a:	f7ff fbed 	bl	8106b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810732e:	1d3a      	adds	r2, r7, #4
 8107330:	f107 0310 	add.w	r3, r7, #16
 8107334:	4611      	mov	r1, r2
 8107336:	4618      	mov	r0, r3
 8107338:	f000 fe70 	bl	810801c <xTaskCheckForTimeOut>
 810733c:	4603      	mov	r3, r0
 810733e:	2b00      	cmp	r3, #0
 8107340:	d123      	bne.n	810738a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8107342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107344:	f000 f916 	bl	8107574 <prvIsQueueEmpty>
 8107348:	4603      	mov	r3, r0
 810734a:	2b00      	cmp	r3, #0
 810734c:	d017      	beq.n	810737e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810734e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107350:	3324      	adds	r3, #36	; 0x24
 8107352:	687a      	ldr	r2, [r7, #4]
 8107354:	4611      	mov	r1, r2
 8107356:	4618      	mov	r0, r3
 8107358:	f000 fd9a 	bl	8107e90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810735c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810735e:	f000 f8b7 	bl	81074d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8107362:	f000 fbd5 	bl	8107b10 <xTaskResumeAll>
 8107366:	4603      	mov	r3, r0
 8107368:	2b00      	cmp	r3, #0
 810736a:	d189      	bne.n	8107280 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 810736c:	4b0f      	ldr	r3, [pc, #60]	; (81073ac <xQueueReceive+0x1b4>)
 810736e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107372:	601a      	str	r2, [r3, #0]
 8107374:	f3bf 8f4f 	dsb	sy
 8107378:	f3bf 8f6f 	isb	sy
 810737c:	e780      	b.n	8107280 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810737e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107380:	f000 f8a6 	bl	81074d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8107384:	f000 fbc4 	bl	8107b10 <xTaskResumeAll>
 8107388:	e77a      	b.n	8107280 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810738a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810738c:	f000 f8a0 	bl	81074d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8107390:	f000 fbbe 	bl	8107b10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8107394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107396:	f000 f8ed 	bl	8107574 <prvIsQueueEmpty>
 810739a:	4603      	mov	r3, r0
 810739c:	2b00      	cmp	r3, #0
 810739e:	f43f af6f 	beq.w	8107280 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 81073a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 81073a4:	4618      	mov	r0, r3
 81073a6:	3730      	adds	r7, #48	; 0x30
 81073a8:	46bd      	mov	sp, r7
 81073aa:	bd80      	pop	{r7, pc}
 81073ac:	e000ed04 	.word	0xe000ed04

081073b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 81073b0:	b580      	push	{r7, lr}
 81073b2:	b086      	sub	sp, #24
 81073b4:	af00      	add	r7, sp, #0
 81073b6:	60f8      	str	r0, [r7, #12]
 81073b8:	60b9      	str	r1, [r7, #8]
 81073ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 81073bc:	2300      	movs	r3, #0
 81073be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81073c0:	68fb      	ldr	r3, [r7, #12]
 81073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81073c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 81073c6:	68fb      	ldr	r3, [r7, #12]
 81073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81073ca:	2b00      	cmp	r3, #0
 81073cc:	d10d      	bne.n	81073ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 81073ce:	68fb      	ldr	r3, [r7, #12]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	2b00      	cmp	r3, #0
 81073d4:	d14d      	bne.n	8107472 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 81073d6:	68fb      	ldr	r3, [r7, #12]
 81073d8:	689b      	ldr	r3, [r3, #8]
 81073da:	4618      	mov	r0, r3
 81073dc:	f000 ff7a 	bl	81082d4 <xTaskPriorityDisinherit>
 81073e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 81073e2:	68fb      	ldr	r3, [r7, #12]
 81073e4:	2200      	movs	r2, #0
 81073e6:	609a      	str	r2, [r3, #8]
 81073e8:	e043      	b.n	8107472 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 81073ea:	687b      	ldr	r3, [r7, #4]
 81073ec:	2b00      	cmp	r3, #0
 81073ee:	d119      	bne.n	8107424 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81073f0:	68fb      	ldr	r3, [r7, #12]
 81073f2:	6858      	ldr	r0, [r3, #4]
 81073f4:	68fb      	ldr	r3, [r7, #12]
 81073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81073f8:	461a      	mov	r2, r3
 81073fa:	68b9      	ldr	r1, [r7, #8]
 81073fc:	f001 fb9a 	bl	8108b34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8107400:	68fb      	ldr	r3, [r7, #12]
 8107402:	685a      	ldr	r2, [r3, #4]
 8107404:	68fb      	ldr	r3, [r7, #12]
 8107406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107408:	441a      	add	r2, r3
 810740a:	68fb      	ldr	r3, [r7, #12]
 810740c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810740e:	68fb      	ldr	r3, [r7, #12]
 8107410:	685a      	ldr	r2, [r3, #4]
 8107412:	68fb      	ldr	r3, [r7, #12]
 8107414:	689b      	ldr	r3, [r3, #8]
 8107416:	429a      	cmp	r2, r3
 8107418:	d32b      	bcc.n	8107472 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810741a:	68fb      	ldr	r3, [r7, #12]
 810741c:	681a      	ldr	r2, [r3, #0]
 810741e:	68fb      	ldr	r3, [r7, #12]
 8107420:	605a      	str	r2, [r3, #4]
 8107422:	e026      	b.n	8107472 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8107424:	68fb      	ldr	r3, [r7, #12]
 8107426:	68d8      	ldr	r0, [r3, #12]
 8107428:	68fb      	ldr	r3, [r7, #12]
 810742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810742c:	461a      	mov	r2, r3
 810742e:	68b9      	ldr	r1, [r7, #8]
 8107430:	f001 fb80 	bl	8108b34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	68da      	ldr	r2, [r3, #12]
 8107438:	68fb      	ldr	r3, [r7, #12]
 810743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810743c:	425b      	negs	r3, r3
 810743e:	441a      	add	r2, r3
 8107440:	68fb      	ldr	r3, [r7, #12]
 8107442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8107444:	68fb      	ldr	r3, [r7, #12]
 8107446:	68da      	ldr	r2, [r3, #12]
 8107448:	68fb      	ldr	r3, [r7, #12]
 810744a:	681b      	ldr	r3, [r3, #0]
 810744c:	429a      	cmp	r2, r3
 810744e:	d207      	bcs.n	8107460 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8107450:	68fb      	ldr	r3, [r7, #12]
 8107452:	689a      	ldr	r2, [r3, #8]
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107458:	425b      	negs	r3, r3
 810745a:	441a      	add	r2, r3
 810745c:	68fb      	ldr	r3, [r7, #12]
 810745e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	2b02      	cmp	r3, #2
 8107464:	d105      	bne.n	8107472 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8107466:	693b      	ldr	r3, [r7, #16]
 8107468:	2b00      	cmp	r3, #0
 810746a:	d002      	beq.n	8107472 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810746c:	693b      	ldr	r3, [r7, #16]
 810746e:	3b01      	subs	r3, #1
 8107470:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8107472:	693b      	ldr	r3, [r7, #16]
 8107474:	1c5a      	adds	r2, r3, #1
 8107476:	68fb      	ldr	r3, [r7, #12]
 8107478:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810747a:	697b      	ldr	r3, [r7, #20]
}
 810747c:	4618      	mov	r0, r3
 810747e:	3718      	adds	r7, #24
 8107480:	46bd      	mov	sp, r7
 8107482:	bd80      	pop	{r7, pc}

08107484 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8107484:	b580      	push	{r7, lr}
 8107486:	b082      	sub	sp, #8
 8107488:	af00      	add	r7, sp, #0
 810748a:	6078      	str	r0, [r7, #4]
 810748c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107492:	2b00      	cmp	r3, #0
 8107494:	d018      	beq.n	81074c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8107496:	687b      	ldr	r3, [r7, #4]
 8107498:	68da      	ldr	r2, [r3, #12]
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810749e:	441a      	add	r2, r3
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	68da      	ldr	r2, [r3, #12]
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	689b      	ldr	r3, [r3, #8]
 81074ac:	429a      	cmp	r2, r3
 81074ae:	d303      	bcc.n	81074b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 81074b0:	687b      	ldr	r3, [r7, #4]
 81074b2:	681a      	ldr	r2, [r3, #0]
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 81074b8:	687b      	ldr	r3, [r7, #4]
 81074ba:	68d9      	ldr	r1, [r3, #12]
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81074c0:	461a      	mov	r2, r3
 81074c2:	6838      	ldr	r0, [r7, #0]
 81074c4:	f001 fb36 	bl	8108b34 <memcpy>
	}
}
 81074c8:	bf00      	nop
 81074ca:	3708      	adds	r7, #8
 81074cc:	46bd      	mov	sp, r7
 81074ce:	bd80      	pop	{r7, pc}

081074d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 81074d0:	b580      	push	{r7, lr}
 81074d2:	b084      	sub	sp, #16
 81074d4:	af00      	add	r7, sp, #0
 81074d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 81074d8:	f7ff fae8 	bl	8106aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81074e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 81074e4:	e011      	b.n	810750a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81074ea:	2b00      	cmp	r3, #0
 81074ec:	d012      	beq.n	8107514 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	3324      	adds	r3, #36	; 0x24
 81074f2:	4618      	mov	r0, r3
 81074f4:	f000 fd1a 	bl	8107f2c <xTaskRemoveFromEventList>
 81074f8:	4603      	mov	r3, r0
 81074fa:	2b00      	cmp	r3, #0
 81074fc:	d001      	beq.n	8107502 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 81074fe:	f000 fded 	bl	81080dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8107502:	7bfb      	ldrb	r3, [r7, #15]
 8107504:	3b01      	subs	r3, #1
 8107506:	b2db      	uxtb	r3, r3
 8107508:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810750a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810750e:	2b00      	cmp	r3, #0
 8107510:	dce9      	bgt.n	81074e6 <prvUnlockQueue+0x16>
 8107512:	e000      	b.n	8107516 <prvUnlockQueue+0x46>
					break;
 8107514:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	22ff      	movs	r2, #255	; 0xff
 810751a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810751e:	f7ff faf3 	bl	8106b08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8107522:	f7ff fac3 	bl	8106aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8107526:	687b      	ldr	r3, [r7, #4]
 8107528:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810752c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810752e:	e011      	b.n	8107554 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8107530:	687b      	ldr	r3, [r7, #4]
 8107532:	691b      	ldr	r3, [r3, #16]
 8107534:	2b00      	cmp	r3, #0
 8107536:	d012      	beq.n	810755e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	3310      	adds	r3, #16
 810753c:	4618      	mov	r0, r3
 810753e:	f000 fcf5 	bl	8107f2c <xTaskRemoveFromEventList>
 8107542:	4603      	mov	r3, r0
 8107544:	2b00      	cmp	r3, #0
 8107546:	d001      	beq.n	810754c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8107548:	f000 fdc8 	bl	81080dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810754c:	7bbb      	ldrb	r3, [r7, #14]
 810754e:	3b01      	subs	r3, #1
 8107550:	b2db      	uxtb	r3, r3
 8107552:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8107554:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8107558:	2b00      	cmp	r3, #0
 810755a:	dce9      	bgt.n	8107530 <prvUnlockQueue+0x60>
 810755c:	e000      	b.n	8107560 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810755e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	22ff      	movs	r2, #255	; 0xff
 8107564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8107568:	f7ff face 	bl	8106b08 <vPortExitCritical>
}
 810756c:	bf00      	nop
 810756e:	3710      	adds	r7, #16
 8107570:	46bd      	mov	sp, r7
 8107572:	bd80      	pop	{r7, pc}

08107574 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8107574:	b580      	push	{r7, lr}
 8107576:	b084      	sub	sp, #16
 8107578:	af00      	add	r7, sp, #0
 810757a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810757c:	f7ff fa96 	bl	8106aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8107580:	687b      	ldr	r3, [r7, #4]
 8107582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107584:	2b00      	cmp	r3, #0
 8107586:	d102      	bne.n	810758e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8107588:	2301      	movs	r3, #1
 810758a:	60fb      	str	r3, [r7, #12]
 810758c:	e001      	b.n	8107592 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810758e:	2300      	movs	r3, #0
 8107590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8107592:	f7ff fab9 	bl	8106b08 <vPortExitCritical>

	return xReturn;
 8107596:	68fb      	ldr	r3, [r7, #12]
}
 8107598:	4618      	mov	r0, r3
 810759a:	3710      	adds	r7, #16
 810759c:	46bd      	mov	sp, r7
 810759e:	bd80      	pop	{r7, pc}

081075a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 81075a0:	b580      	push	{r7, lr}
 81075a2:	b084      	sub	sp, #16
 81075a4:	af00      	add	r7, sp, #0
 81075a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 81075a8:	f7ff fa80 	bl	8106aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 81075ac:	687b      	ldr	r3, [r7, #4]
 81075ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81075b0:	687b      	ldr	r3, [r7, #4]
 81075b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81075b4:	429a      	cmp	r2, r3
 81075b6:	d102      	bne.n	81075be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 81075b8:	2301      	movs	r3, #1
 81075ba:	60fb      	str	r3, [r7, #12]
 81075bc:	e001      	b.n	81075c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 81075be:	2300      	movs	r3, #0
 81075c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 81075c2:	f7ff faa1 	bl	8106b08 <vPortExitCritical>

	return xReturn;
 81075c6:	68fb      	ldr	r3, [r7, #12]
}
 81075c8:	4618      	mov	r0, r3
 81075ca:	3710      	adds	r7, #16
 81075cc:	46bd      	mov	sp, r7
 81075ce:	bd80      	pop	{r7, pc}

081075d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 81075d0:	b480      	push	{r7}
 81075d2:	b085      	sub	sp, #20
 81075d4:	af00      	add	r7, sp, #0
 81075d6:	6078      	str	r0, [r7, #4]
 81075d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 81075da:	2300      	movs	r3, #0
 81075dc:	60fb      	str	r3, [r7, #12]
 81075de:	e014      	b.n	810760a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 81075e0:	4a0e      	ldr	r2, [pc, #56]	; (810761c <vQueueAddToRegistry+0x4c>)
 81075e2:	68fb      	ldr	r3, [r7, #12]
 81075e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81075e8:	2b00      	cmp	r3, #0
 81075ea:	d10b      	bne.n	8107604 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 81075ec:	490b      	ldr	r1, [pc, #44]	; (810761c <vQueueAddToRegistry+0x4c>)
 81075ee:	68fb      	ldr	r3, [r7, #12]
 81075f0:	683a      	ldr	r2, [r7, #0]
 81075f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 81075f6:	4a09      	ldr	r2, [pc, #36]	; (810761c <vQueueAddToRegistry+0x4c>)
 81075f8:	68fb      	ldr	r3, [r7, #12]
 81075fa:	00db      	lsls	r3, r3, #3
 81075fc:	4413      	add	r3, r2
 81075fe:	687a      	ldr	r2, [r7, #4]
 8107600:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8107602:	e005      	b.n	8107610 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8107604:	68fb      	ldr	r3, [r7, #12]
 8107606:	3301      	adds	r3, #1
 8107608:	60fb      	str	r3, [r7, #12]
 810760a:	68fb      	ldr	r3, [r7, #12]
 810760c:	2b07      	cmp	r3, #7
 810760e:	d9e7      	bls.n	81075e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8107610:	bf00      	nop
 8107612:	3714      	adds	r7, #20
 8107614:	46bd      	mov	sp, r7
 8107616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810761a:	4770      	bx	lr
 810761c:	10004cbc 	.word	0x10004cbc

08107620 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107620:	b580      	push	{r7, lr}
 8107622:	b086      	sub	sp, #24
 8107624:	af00      	add	r7, sp, #0
 8107626:	60f8      	str	r0, [r7, #12]
 8107628:	60b9      	str	r1, [r7, #8]
 810762a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810762c:	68fb      	ldr	r3, [r7, #12]
 810762e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8107630:	f7ff fa3c 	bl	8106aac <vPortEnterCritical>
 8107634:	697b      	ldr	r3, [r7, #20]
 8107636:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810763a:	b25b      	sxtb	r3, r3
 810763c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107640:	d103      	bne.n	810764a <vQueueWaitForMessageRestricted+0x2a>
 8107642:	697b      	ldr	r3, [r7, #20]
 8107644:	2200      	movs	r2, #0
 8107646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810764a:	697b      	ldr	r3, [r7, #20]
 810764c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8107650:	b25b      	sxtb	r3, r3
 8107652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107656:	d103      	bne.n	8107660 <vQueueWaitForMessageRestricted+0x40>
 8107658:	697b      	ldr	r3, [r7, #20]
 810765a:	2200      	movs	r2, #0
 810765c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107660:	f7ff fa52 	bl	8106b08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8107664:	697b      	ldr	r3, [r7, #20]
 8107666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107668:	2b00      	cmp	r3, #0
 810766a:	d106      	bne.n	810767a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810766c:	697b      	ldr	r3, [r7, #20]
 810766e:	3324      	adds	r3, #36	; 0x24
 8107670:	687a      	ldr	r2, [r7, #4]
 8107672:	68b9      	ldr	r1, [r7, #8]
 8107674:	4618      	mov	r0, r3
 8107676:	f000 fc2f 	bl	8107ed8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810767a:	6978      	ldr	r0, [r7, #20]
 810767c:	f7ff ff28 	bl	81074d0 <prvUnlockQueue>
	}
 8107680:	bf00      	nop
 8107682:	3718      	adds	r7, #24
 8107684:	46bd      	mov	sp, r7
 8107686:	bd80      	pop	{r7, pc}

08107688 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8107688:	b580      	push	{r7, lr}
 810768a:	b08e      	sub	sp, #56	; 0x38
 810768c:	af04      	add	r7, sp, #16
 810768e:	60f8      	str	r0, [r7, #12]
 8107690:	60b9      	str	r1, [r7, #8]
 8107692:	607a      	str	r2, [r7, #4]
 8107694:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8107696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8107698:	2b00      	cmp	r3, #0
 810769a:	d109      	bne.n	81076b0 <xTaskCreateStatic+0x28>
 810769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81076a0:	f383 8811 	msr	BASEPRI, r3
 81076a4:	f3bf 8f6f 	isb	sy
 81076a8:	f3bf 8f4f 	dsb	sy
 81076ac:	623b      	str	r3, [r7, #32]
 81076ae:	e7fe      	b.n	81076ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 81076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81076b2:	2b00      	cmp	r3, #0
 81076b4:	d109      	bne.n	81076ca <xTaskCreateStatic+0x42>
 81076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81076ba:	f383 8811 	msr	BASEPRI, r3
 81076be:	f3bf 8f6f 	isb	sy
 81076c2:	f3bf 8f4f 	dsb	sy
 81076c6:	61fb      	str	r3, [r7, #28]
 81076c8:	e7fe      	b.n	81076c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 81076ca:	235c      	movs	r3, #92	; 0x5c
 81076cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 81076ce:	693b      	ldr	r3, [r7, #16]
 81076d0:	2b5c      	cmp	r3, #92	; 0x5c
 81076d2:	d009      	beq.n	81076e8 <xTaskCreateStatic+0x60>
 81076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81076d8:	f383 8811 	msr	BASEPRI, r3
 81076dc:	f3bf 8f6f 	isb	sy
 81076e0:	f3bf 8f4f 	dsb	sy
 81076e4:	61bb      	str	r3, [r7, #24]
 81076e6:	e7fe      	b.n	81076e6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 81076e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 81076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81076ec:	2b00      	cmp	r3, #0
 81076ee:	d01e      	beq.n	810772e <xTaskCreateStatic+0xa6>
 81076f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81076f2:	2b00      	cmp	r3, #0
 81076f4:	d01b      	beq.n	810772e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81076f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 81076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81076fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81076fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8107700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107702:	2202      	movs	r2, #2
 8107704:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8107708:	2300      	movs	r3, #0
 810770a:	9303      	str	r3, [sp, #12]
 810770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810770e:	9302      	str	r3, [sp, #8]
 8107710:	f107 0314 	add.w	r3, r7, #20
 8107714:	9301      	str	r3, [sp, #4]
 8107716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107718:	9300      	str	r3, [sp, #0]
 810771a:	683b      	ldr	r3, [r7, #0]
 810771c:	687a      	ldr	r2, [r7, #4]
 810771e:	68b9      	ldr	r1, [r7, #8]
 8107720:	68f8      	ldr	r0, [r7, #12]
 8107722:	f000 f850 	bl	81077c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8107726:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8107728:	f000 f8dc 	bl	81078e4 <prvAddNewTaskToReadyList>
 810772c:	e001      	b.n	8107732 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810772e:	2300      	movs	r3, #0
 8107730:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8107732:	697b      	ldr	r3, [r7, #20]
	}
 8107734:	4618      	mov	r0, r3
 8107736:	3728      	adds	r7, #40	; 0x28
 8107738:	46bd      	mov	sp, r7
 810773a:	bd80      	pop	{r7, pc}

0810773c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810773c:	b580      	push	{r7, lr}
 810773e:	b08c      	sub	sp, #48	; 0x30
 8107740:	af04      	add	r7, sp, #16
 8107742:	60f8      	str	r0, [r7, #12]
 8107744:	60b9      	str	r1, [r7, #8]
 8107746:	603b      	str	r3, [r7, #0]
 8107748:	4613      	mov	r3, r2
 810774a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810774c:	88fb      	ldrh	r3, [r7, #6]
 810774e:	009b      	lsls	r3, r3, #2
 8107750:	4618      	mov	r0, r3
 8107752:	f7fe fdf7 	bl	8106344 <pvPortMalloc>
 8107756:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8107758:	697b      	ldr	r3, [r7, #20]
 810775a:	2b00      	cmp	r3, #0
 810775c:	d00e      	beq.n	810777c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810775e:	205c      	movs	r0, #92	; 0x5c
 8107760:	f7fe fdf0 	bl	8106344 <pvPortMalloc>
 8107764:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8107766:	69fb      	ldr	r3, [r7, #28]
 8107768:	2b00      	cmp	r3, #0
 810776a:	d003      	beq.n	8107774 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810776c:	69fb      	ldr	r3, [r7, #28]
 810776e:	697a      	ldr	r2, [r7, #20]
 8107770:	631a      	str	r2, [r3, #48]	; 0x30
 8107772:	e005      	b.n	8107780 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8107774:	6978      	ldr	r0, [r7, #20]
 8107776:	f7fe fea7 	bl	81064c8 <vPortFree>
 810777a:	e001      	b.n	8107780 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810777c:	2300      	movs	r3, #0
 810777e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8107780:	69fb      	ldr	r3, [r7, #28]
 8107782:	2b00      	cmp	r3, #0
 8107784:	d017      	beq.n	81077b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8107786:	69fb      	ldr	r3, [r7, #28]
 8107788:	2200      	movs	r2, #0
 810778a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810778e:	88fa      	ldrh	r2, [r7, #6]
 8107790:	2300      	movs	r3, #0
 8107792:	9303      	str	r3, [sp, #12]
 8107794:	69fb      	ldr	r3, [r7, #28]
 8107796:	9302      	str	r3, [sp, #8]
 8107798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810779a:	9301      	str	r3, [sp, #4]
 810779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810779e:	9300      	str	r3, [sp, #0]
 81077a0:	683b      	ldr	r3, [r7, #0]
 81077a2:	68b9      	ldr	r1, [r7, #8]
 81077a4:	68f8      	ldr	r0, [r7, #12]
 81077a6:	f000 f80e 	bl	81077c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 81077aa:	69f8      	ldr	r0, [r7, #28]
 81077ac:	f000 f89a 	bl	81078e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 81077b0:	2301      	movs	r3, #1
 81077b2:	61bb      	str	r3, [r7, #24]
 81077b4:	e002      	b.n	81077bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 81077b6:	f04f 33ff 	mov.w	r3, #4294967295
 81077ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 81077bc:	69bb      	ldr	r3, [r7, #24]
	}
 81077be:	4618      	mov	r0, r3
 81077c0:	3720      	adds	r7, #32
 81077c2:	46bd      	mov	sp, r7
 81077c4:	bd80      	pop	{r7, pc}

081077c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 81077c6:	b580      	push	{r7, lr}
 81077c8:	b088      	sub	sp, #32
 81077ca:	af00      	add	r7, sp, #0
 81077cc:	60f8      	str	r0, [r7, #12]
 81077ce:	60b9      	str	r1, [r7, #8]
 81077d0:	607a      	str	r2, [r7, #4]
 81077d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 81077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81077d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 81077d8:	687b      	ldr	r3, [r7, #4]
 81077da:	009b      	lsls	r3, r3, #2
 81077dc:	461a      	mov	r2, r3
 81077de:	21a5      	movs	r1, #165	; 0xa5
 81077e0:	f001 f9b3 	bl	8108b4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 81077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81077e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81077e8:	687b      	ldr	r3, [r7, #4]
 81077ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 81077ee:	3b01      	subs	r3, #1
 81077f0:	009b      	lsls	r3, r3, #2
 81077f2:	4413      	add	r3, r2
 81077f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 81077f6:	69bb      	ldr	r3, [r7, #24]
 81077f8:	f023 0307 	bic.w	r3, r3, #7
 81077fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 81077fe:	69bb      	ldr	r3, [r7, #24]
 8107800:	f003 0307 	and.w	r3, r3, #7
 8107804:	2b00      	cmp	r3, #0
 8107806:	d009      	beq.n	810781c <prvInitialiseNewTask+0x56>
 8107808:	f04f 0350 	mov.w	r3, #80	; 0x50
 810780c:	f383 8811 	msr	BASEPRI, r3
 8107810:	f3bf 8f6f 	isb	sy
 8107814:	f3bf 8f4f 	dsb	sy
 8107818:	617b      	str	r3, [r7, #20]
 810781a:	e7fe      	b.n	810781a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810781c:	68bb      	ldr	r3, [r7, #8]
 810781e:	2b00      	cmp	r3, #0
 8107820:	d01f      	beq.n	8107862 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107822:	2300      	movs	r3, #0
 8107824:	61fb      	str	r3, [r7, #28]
 8107826:	e012      	b.n	810784e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8107828:	68ba      	ldr	r2, [r7, #8]
 810782a:	69fb      	ldr	r3, [r7, #28]
 810782c:	4413      	add	r3, r2
 810782e:	7819      	ldrb	r1, [r3, #0]
 8107830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107832:	69fb      	ldr	r3, [r7, #28]
 8107834:	4413      	add	r3, r2
 8107836:	3334      	adds	r3, #52	; 0x34
 8107838:	460a      	mov	r2, r1
 810783a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810783c:	68ba      	ldr	r2, [r7, #8]
 810783e:	69fb      	ldr	r3, [r7, #28]
 8107840:	4413      	add	r3, r2
 8107842:	781b      	ldrb	r3, [r3, #0]
 8107844:	2b00      	cmp	r3, #0
 8107846:	d006      	beq.n	8107856 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8107848:	69fb      	ldr	r3, [r7, #28]
 810784a:	3301      	adds	r3, #1
 810784c:	61fb      	str	r3, [r7, #28]
 810784e:	69fb      	ldr	r3, [r7, #28]
 8107850:	2b0f      	cmp	r3, #15
 8107852:	d9e9      	bls.n	8107828 <prvInitialiseNewTask+0x62>
 8107854:	e000      	b.n	8107858 <prvInitialiseNewTask+0x92>
			{
				break;
 8107856:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8107858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810785a:	2200      	movs	r2, #0
 810785c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8107860:	e003      	b.n	810786a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8107862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107864:	2200      	movs	r2, #0
 8107866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810786a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810786c:	2b37      	cmp	r3, #55	; 0x37
 810786e:	d901      	bls.n	8107874 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8107870:	2337      	movs	r3, #55	; 0x37
 8107872:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8107874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107878:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810787c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810787e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8107880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107882:	2200      	movs	r2, #0
 8107884:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8107886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107888:	3304      	adds	r3, #4
 810788a:	4618      	mov	r0, r3
 810788c:	f7fe ff50 	bl	8106730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8107890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8107892:	3318      	adds	r3, #24
 8107894:	4618      	mov	r0, r3
 8107896:	f7fe ff4b 	bl	8106730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810789c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810789e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81078a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81078a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 81078aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81078ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81078ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 81078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81078b2:	2200      	movs	r2, #0
 81078b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 81078b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81078b8:	2200      	movs	r2, #0
 81078ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 81078be:	683a      	ldr	r2, [r7, #0]
 81078c0:	68f9      	ldr	r1, [r7, #12]
 81078c2:	69b8      	ldr	r0, [r7, #24]
 81078c4:	f7fe ffc8 	bl	8106858 <pxPortInitialiseStack>
 81078c8:	4602      	mov	r2, r0
 81078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81078cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 81078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81078d0:	2b00      	cmp	r3, #0
 81078d2:	d002      	beq.n	81078da <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 81078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81078d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81078d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 81078da:	bf00      	nop
 81078dc:	3720      	adds	r7, #32
 81078de:	46bd      	mov	sp, r7
 81078e0:	bd80      	pop	{r7, pc}
	...

081078e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 81078e4:	b580      	push	{r7, lr}
 81078e6:	b082      	sub	sp, #8
 81078e8:	af00      	add	r7, sp, #0
 81078ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 81078ec:	f7ff f8de 	bl	8106aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 81078f0:	4b2d      	ldr	r3, [pc, #180]	; (81079a8 <prvAddNewTaskToReadyList+0xc4>)
 81078f2:	681b      	ldr	r3, [r3, #0]
 81078f4:	3301      	adds	r3, #1
 81078f6:	4a2c      	ldr	r2, [pc, #176]	; (81079a8 <prvAddNewTaskToReadyList+0xc4>)
 81078f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 81078fa:	4b2c      	ldr	r3, [pc, #176]	; (81079ac <prvAddNewTaskToReadyList+0xc8>)
 81078fc:	681b      	ldr	r3, [r3, #0]
 81078fe:	2b00      	cmp	r3, #0
 8107900:	d109      	bne.n	8107916 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8107902:	4a2a      	ldr	r2, [pc, #168]	; (81079ac <prvAddNewTaskToReadyList+0xc8>)
 8107904:	687b      	ldr	r3, [r7, #4]
 8107906:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8107908:	4b27      	ldr	r3, [pc, #156]	; (81079a8 <prvAddNewTaskToReadyList+0xc4>)
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	2b01      	cmp	r3, #1
 810790e:	d110      	bne.n	8107932 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8107910:	f000 fc08 	bl	8108124 <prvInitialiseTaskLists>
 8107914:	e00d      	b.n	8107932 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8107916:	4b26      	ldr	r3, [pc, #152]	; (81079b0 <prvAddNewTaskToReadyList+0xcc>)
 8107918:	681b      	ldr	r3, [r3, #0]
 810791a:	2b00      	cmp	r3, #0
 810791c:	d109      	bne.n	8107932 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810791e:	4b23      	ldr	r3, [pc, #140]	; (81079ac <prvAddNewTaskToReadyList+0xc8>)
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107928:	429a      	cmp	r2, r3
 810792a:	d802      	bhi.n	8107932 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810792c:	4a1f      	ldr	r2, [pc, #124]	; (81079ac <prvAddNewTaskToReadyList+0xc8>)
 810792e:	687b      	ldr	r3, [r7, #4]
 8107930:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8107932:	4b20      	ldr	r3, [pc, #128]	; (81079b4 <prvAddNewTaskToReadyList+0xd0>)
 8107934:	681b      	ldr	r3, [r3, #0]
 8107936:	3301      	adds	r3, #1
 8107938:	4a1e      	ldr	r2, [pc, #120]	; (81079b4 <prvAddNewTaskToReadyList+0xd0>)
 810793a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810793c:	4b1d      	ldr	r3, [pc, #116]	; (81079b4 <prvAddNewTaskToReadyList+0xd0>)
 810793e:	681a      	ldr	r2, [r3, #0]
 8107940:	687b      	ldr	r3, [r7, #4]
 8107942:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8107944:	687b      	ldr	r3, [r7, #4]
 8107946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107948:	4b1b      	ldr	r3, [pc, #108]	; (81079b8 <prvAddNewTaskToReadyList+0xd4>)
 810794a:	681b      	ldr	r3, [r3, #0]
 810794c:	429a      	cmp	r2, r3
 810794e:	d903      	bls.n	8107958 <prvAddNewTaskToReadyList+0x74>
 8107950:	687b      	ldr	r3, [r7, #4]
 8107952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107954:	4a18      	ldr	r2, [pc, #96]	; (81079b8 <prvAddNewTaskToReadyList+0xd4>)
 8107956:	6013      	str	r3, [r2, #0]
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810795c:	4613      	mov	r3, r2
 810795e:	009b      	lsls	r3, r3, #2
 8107960:	4413      	add	r3, r2
 8107962:	009b      	lsls	r3, r3, #2
 8107964:	4a15      	ldr	r2, [pc, #84]	; (81079bc <prvAddNewTaskToReadyList+0xd8>)
 8107966:	441a      	add	r2, r3
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	3304      	adds	r3, #4
 810796c:	4619      	mov	r1, r3
 810796e:	4610      	mov	r0, r2
 8107970:	f7fe feeb 	bl	810674a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8107974:	f7ff f8c8 	bl	8106b08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8107978:	4b0d      	ldr	r3, [pc, #52]	; (81079b0 <prvAddNewTaskToReadyList+0xcc>)
 810797a:	681b      	ldr	r3, [r3, #0]
 810797c:	2b00      	cmp	r3, #0
 810797e:	d00e      	beq.n	810799e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8107980:	4b0a      	ldr	r3, [pc, #40]	; (81079ac <prvAddNewTaskToReadyList+0xc8>)
 8107982:	681b      	ldr	r3, [r3, #0]
 8107984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107986:	687b      	ldr	r3, [r7, #4]
 8107988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810798a:	429a      	cmp	r2, r3
 810798c:	d207      	bcs.n	810799e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810798e:	4b0c      	ldr	r3, [pc, #48]	; (81079c0 <prvAddNewTaskToReadyList+0xdc>)
 8107990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107994:	601a      	str	r2, [r3, #0]
 8107996:	f3bf 8f4f 	dsb	sy
 810799a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810799e:	bf00      	nop
 81079a0:	3708      	adds	r7, #8
 81079a2:	46bd      	mov	sp, r7
 81079a4:	bd80      	pop	{r7, pc}
 81079a6:	bf00      	nop
 81079a8:	100049b0 	.word	0x100049b0
 81079ac:	100044dc 	.word	0x100044dc
 81079b0:	100049bc 	.word	0x100049bc
 81079b4:	100049cc 	.word	0x100049cc
 81079b8:	100049b8 	.word	0x100049b8
 81079bc:	100044e0 	.word	0x100044e0
 81079c0:	e000ed04 	.word	0xe000ed04

081079c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81079c4:	b580      	push	{r7, lr}
 81079c6:	b084      	sub	sp, #16
 81079c8:	af00      	add	r7, sp, #0
 81079ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81079cc:	2300      	movs	r3, #0
 81079ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81079d0:	687b      	ldr	r3, [r7, #4]
 81079d2:	2b00      	cmp	r3, #0
 81079d4:	d016      	beq.n	8107a04 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81079d6:	4b13      	ldr	r3, [pc, #76]	; (8107a24 <vTaskDelay+0x60>)
 81079d8:	681b      	ldr	r3, [r3, #0]
 81079da:	2b00      	cmp	r3, #0
 81079dc:	d009      	beq.n	81079f2 <vTaskDelay+0x2e>
 81079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 81079e2:	f383 8811 	msr	BASEPRI, r3
 81079e6:	f3bf 8f6f 	isb	sy
 81079ea:	f3bf 8f4f 	dsb	sy
 81079ee:	60bb      	str	r3, [r7, #8]
 81079f0:	e7fe      	b.n	81079f0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 81079f2:	f000 f87f 	bl	8107af4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81079f6:	2100      	movs	r1, #0
 81079f8:	6878      	ldr	r0, [r7, #4]
 81079fa:	f000 fcd7 	bl	81083ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81079fe:	f000 f887 	bl	8107b10 <xTaskResumeAll>
 8107a02:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8107a04:	68fb      	ldr	r3, [r7, #12]
 8107a06:	2b00      	cmp	r3, #0
 8107a08:	d107      	bne.n	8107a1a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8107a0a:	4b07      	ldr	r3, [pc, #28]	; (8107a28 <vTaskDelay+0x64>)
 8107a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107a10:	601a      	str	r2, [r3, #0]
 8107a12:	f3bf 8f4f 	dsb	sy
 8107a16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8107a1a:	bf00      	nop
 8107a1c:	3710      	adds	r7, #16
 8107a1e:	46bd      	mov	sp, r7
 8107a20:	bd80      	pop	{r7, pc}
 8107a22:	bf00      	nop
 8107a24:	100049d8 	.word	0x100049d8
 8107a28:	e000ed04 	.word	0xe000ed04

08107a2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8107a2c:	b580      	push	{r7, lr}
 8107a2e:	b08a      	sub	sp, #40	; 0x28
 8107a30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8107a32:	2300      	movs	r3, #0
 8107a34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8107a36:	2300      	movs	r3, #0
 8107a38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8107a3a:	463a      	mov	r2, r7
 8107a3c:	1d39      	adds	r1, r7, #4
 8107a3e:	f107 0308 	add.w	r3, r7, #8
 8107a42:	4618      	mov	r0, r3
 8107a44:	f7fe fc4a 	bl	81062dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8107a48:	6839      	ldr	r1, [r7, #0]
 8107a4a:	687b      	ldr	r3, [r7, #4]
 8107a4c:	68ba      	ldr	r2, [r7, #8]
 8107a4e:	9202      	str	r2, [sp, #8]
 8107a50:	9301      	str	r3, [sp, #4]
 8107a52:	2300      	movs	r3, #0
 8107a54:	9300      	str	r3, [sp, #0]
 8107a56:	2300      	movs	r3, #0
 8107a58:	460a      	mov	r2, r1
 8107a5a:	4920      	ldr	r1, [pc, #128]	; (8107adc <vTaskStartScheduler+0xb0>)
 8107a5c:	4820      	ldr	r0, [pc, #128]	; (8107ae0 <vTaskStartScheduler+0xb4>)
 8107a5e:	f7ff fe13 	bl	8107688 <xTaskCreateStatic>
 8107a62:	4602      	mov	r2, r0
 8107a64:	4b1f      	ldr	r3, [pc, #124]	; (8107ae4 <vTaskStartScheduler+0xb8>)
 8107a66:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8107a68:	4b1e      	ldr	r3, [pc, #120]	; (8107ae4 <vTaskStartScheduler+0xb8>)
 8107a6a:	681b      	ldr	r3, [r3, #0]
 8107a6c:	2b00      	cmp	r3, #0
 8107a6e:	d002      	beq.n	8107a76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8107a70:	2301      	movs	r3, #1
 8107a72:	617b      	str	r3, [r7, #20]
 8107a74:	e001      	b.n	8107a7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8107a76:	2300      	movs	r3, #0
 8107a78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8107a7a:	697b      	ldr	r3, [r7, #20]
 8107a7c:	2b01      	cmp	r3, #1
 8107a7e:	d102      	bne.n	8107a86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8107a80:	f000 fce8 	bl	8108454 <xTimerCreateTimerTask>
 8107a84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8107a86:	697b      	ldr	r3, [r7, #20]
 8107a88:	2b01      	cmp	r3, #1
 8107a8a:	d115      	bne.n	8107ab8 <vTaskStartScheduler+0x8c>
 8107a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107a90:	f383 8811 	msr	BASEPRI, r3
 8107a94:	f3bf 8f6f 	isb	sy
 8107a98:	f3bf 8f4f 	dsb	sy
 8107a9c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8107a9e:	4b12      	ldr	r3, [pc, #72]	; (8107ae8 <vTaskStartScheduler+0xbc>)
 8107aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8107aa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8107aa6:	4b11      	ldr	r3, [pc, #68]	; (8107aec <vTaskStartScheduler+0xc0>)
 8107aa8:	2201      	movs	r2, #1
 8107aaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8107aac:	4b10      	ldr	r3, [pc, #64]	; (8107af0 <vTaskStartScheduler+0xc4>)
 8107aae:	2200      	movs	r2, #0
 8107ab0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8107ab2:	f7fe ff5d 	bl	8106970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8107ab6:	e00d      	b.n	8107ad4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8107ab8:	697b      	ldr	r3, [r7, #20]
 8107aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107abe:	d109      	bne.n	8107ad4 <vTaskStartScheduler+0xa8>
 8107ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107ac4:	f383 8811 	msr	BASEPRI, r3
 8107ac8:	f3bf 8f6f 	isb	sy
 8107acc:	f3bf 8f4f 	dsb	sy
 8107ad0:	60fb      	str	r3, [r7, #12]
 8107ad2:	e7fe      	b.n	8107ad2 <vTaskStartScheduler+0xa6>
}
 8107ad4:	bf00      	nop
 8107ad6:	3718      	adds	r7, #24
 8107ad8:	46bd      	mov	sp, r7
 8107ada:	bd80      	pop	{r7, pc}
 8107adc:	0810ac0c 	.word	0x0810ac0c
 8107ae0:	081080f5 	.word	0x081080f5
 8107ae4:	100049d4 	.word	0x100049d4
 8107ae8:	100049d0 	.word	0x100049d0
 8107aec:	100049bc 	.word	0x100049bc
 8107af0:	100049b4 	.word	0x100049b4

08107af4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8107af4:	b480      	push	{r7}
 8107af6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8107af8:	4b04      	ldr	r3, [pc, #16]	; (8107b0c <vTaskSuspendAll+0x18>)
 8107afa:	681b      	ldr	r3, [r3, #0]
 8107afc:	3301      	adds	r3, #1
 8107afe:	4a03      	ldr	r2, [pc, #12]	; (8107b0c <vTaskSuspendAll+0x18>)
 8107b00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8107b02:	bf00      	nop
 8107b04:	46bd      	mov	sp, r7
 8107b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b0a:	4770      	bx	lr
 8107b0c:	100049d8 	.word	0x100049d8

08107b10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8107b10:	b580      	push	{r7, lr}
 8107b12:	b084      	sub	sp, #16
 8107b14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8107b16:	2300      	movs	r3, #0
 8107b18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8107b1a:	2300      	movs	r3, #0
 8107b1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8107b1e:	4b41      	ldr	r3, [pc, #260]	; (8107c24 <xTaskResumeAll+0x114>)
 8107b20:	681b      	ldr	r3, [r3, #0]
 8107b22:	2b00      	cmp	r3, #0
 8107b24:	d109      	bne.n	8107b3a <xTaskResumeAll+0x2a>
 8107b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b2a:	f383 8811 	msr	BASEPRI, r3
 8107b2e:	f3bf 8f6f 	isb	sy
 8107b32:	f3bf 8f4f 	dsb	sy
 8107b36:	603b      	str	r3, [r7, #0]
 8107b38:	e7fe      	b.n	8107b38 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8107b3a:	f7fe ffb7 	bl	8106aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8107b3e:	4b39      	ldr	r3, [pc, #228]	; (8107c24 <xTaskResumeAll+0x114>)
 8107b40:	681b      	ldr	r3, [r3, #0]
 8107b42:	3b01      	subs	r3, #1
 8107b44:	4a37      	ldr	r2, [pc, #220]	; (8107c24 <xTaskResumeAll+0x114>)
 8107b46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107b48:	4b36      	ldr	r3, [pc, #216]	; (8107c24 <xTaskResumeAll+0x114>)
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	2b00      	cmp	r3, #0
 8107b4e:	d162      	bne.n	8107c16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8107b50:	4b35      	ldr	r3, [pc, #212]	; (8107c28 <xTaskResumeAll+0x118>)
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	2b00      	cmp	r3, #0
 8107b56:	d05e      	beq.n	8107c16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107b58:	e02f      	b.n	8107bba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107b5a:	4b34      	ldr	r3, [pc, #208]	; (8107c2c <xTaskResumeAll+0x11c>)
 8107b5c:	68db      	ldr	r3, [r3, #12]
 8107b5e:	68db      	ldr	r3, [r3, #12]
 8107b60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107b62:	68fb      	ldr	r3, [r7, #12]
 8107b64:	3318      	adds	r3, #24
 8107b66:	4618      	mov	r0, r3
 8107b68:	f7fe fe4c 	bl	8106804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107b6c:	68fb      	ldr	r3, [r7, #12]
 8107b6e:	3304      	adds	r3, #4
 8107b70:	4618      	mov	r0, r3
 8107b72:	f7fe fe47 	bl	8106804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8107b76:	68fb      	ldr	r3, [r7, #12]
 8107b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107b7a:	4b2d      	ldr	r3, [pc, #180]	; (8107c30 <xTaskResumeAll+0x120>)
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	429a      	cmp	r2, r3
 8107b80:	d903      	bls.n	8107b8a <xTaskResumeAll+0x7a>
 8107b82:	68fb      	ldr	r3, [r7, #12]
 8107b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107b86:	4a2a      	ldr	r2, [pc, #168]	; (8107c30 <xTaskResumeAll+0x120>)
 8107b88:	6013      	str	r3, [r2, #0]
 8107b8a:	68fb      	ldr	r3, [r7, #12]
 8107b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107b8e:	4613      	mov	r3, r2
 8107b90:	009b      	lsls	r3, r3, #2
 8107b92:	4413      	add	r3, r2
 8107b94:	009b      	lsls	r3, r3, #2
 8107b96:	4a27      	ldr	r2, [pc, #156]	; (8107c34 <xTaskResumeAll+0x124>)
 8107b98:	441a      	add	r2, r3
 8107b9a:	68fb      	ldr	r3, [r7, #12]
 8107b9c:	3304      	adds	r3, #4
 8107b9e:	4619      	mov	r1, r3
 8107ba0:	4610      	mov	r0, r2
 8107ba2:	f7fe fdd2 	bl	810674a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107ba6:	68fb      	ldr	r3, [r7, #12]
 8107ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107baa:	4b23      	ldr	r3, [pc, #140]	; (8107c38 <xTaskResumeAll+0x128>)
 8107bac:	681b      	ldr	r3, [r3, #0]
 8107bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107bb0:	429a      	cmp	r2, r3
 8107bb2:	d302      	bcc.n	8107bba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8107bb4:	4b21      	ldr	r3, [pc, #132]	; (8107c3c <xTaskResumeAll+0x12c>)
 8107bb6:	2201      	movs	r2, #1
 8107bb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107bba:	4b1c      	ldr	r3, [pc, #112]	; (8107c2c <xTaskResumeAll+0x11c>)
 8107bbc:	681b      	ldr	r3, [r3, #0]
 8107bbe:	2b00      	cmp	r3, #0
 8107bc0:	d1cb      	bne.n	8107b5a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8107bc2:	68fb      	ldr	r3, [r7, #12]
 8107bc4:	2b00      	cmp	r3, #0
 8107bc6:	d001      	beq.n	8107bcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8107bc8:	f000 fb46 	bl	8108258 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8107bcc:	4b1c      	ldr	r3, [pc, #112]	; (8107c40 <xTaskResumeAll+0x130>)
 8107bce:	681b      	ldr	r3, [r3, #0]
 8107bd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8107bd2:	687b      	ldr	r3, [r7, #4]
 8107bd4:	2b00      	cmp	r3, #0
 8107bd6:	d010      	beq.n	8107bfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8107bd8:	f000 f846 	bl	8107c68 <xTaskIncrementTick>
 8107bdc:	4603      	mov	r3, r0
 8107bde:	2b00      	cmp	r3, #0
 8107be0:	d002      	beq.n	8107be8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8107be2:	4b16      	ldr	r3, [pc, #88]	; (8107c3c <xTaskResumeAll+0x12c>)
 8107be4:	2201      	movs	r2, #1
 8107be6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	3b01      	subs	r3, #1
 8107bec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	2b00      	cmp	r3, #0
 8107bf2:	d1f1      	bne.n	8107bd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8107bf4:	4b12      	ldr	r3, [pc, #72]	; (8107c40 <xTaskResumeAll+0x130>)
 8107bf6:	2200      	movs	r2, #0
 8107bf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8107bfa:	4b10      	ldr	r3, [pc, #64]	; (8107c3c <xTaskResumeAll+0x12c>)
 8107bfc:	681b      	ldr	r3, [r3, #0]
 8107bfe:	2b00      	cmp	r3, #0
 8107c00:	d009      	beq.n	8107c16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8107c02:	2301      	movs	r3, #1
 8107c04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8107c06:	4b0f      	ldr	r3, [pc, #60]	; (8107c44 <xTaskResumeAll+0x134>)
 8107c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107c0c:	601a      	str	r2, [r3, #0]
 8107c0e:	f3bf 8f4f 	dsb	sy
 8107c12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8107c16:	f7fe ff77 	bl	8106b08 <vPortExitCritical>

	return xAlreadyYielded;
 8107c1a:	68bb      	ldr	r3, [r7, #8]
}
 8107c1c:	4618      	mov	r0, r3
 8107c1e:	3710      	adds	r7, #16
 8107c20:	46bd      	mov	sp, r7
 8107c22:	bd80      	pop	{r7, pc}
 8107c24:	100049d8 	.word	0x100049d8
 8107c28:	100049b0 	.word	0x100049b0
 8107c2c:	10004970 	.word	0x10004970
 8107c30:	100049b8 	.word	0x100049b8
 8107c34:	100044e0 	.word	0x100044e0
 8107c38:	100044dc 	.word	0x100044dc
 8107c3c:	100049c4 	.word	0x100049c4
 8107c40:	100049c0 	.word	0x100049c0
 8107c44:	e000ed04 	.word	0xe000ed04

08107c48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8107c48:	b480      	push	{r7}
 8107c4a:	b083      	sub	sp, #12
 8107c4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8107c4e:	4b05      	ldr	r3, [pc, #20]	; (8107c64 <xTaskGetTickCount+0x1c>)
 8107c50:	681b      	ldr	r3, [r3, #0]
 8107c52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8107c54:	687b      	ldr	r3, [r7, #4]
}
 8107c56:	4618      	mov	r0, r3
 8107c58:	370c      	adds	r7, #12
 8107c5a:	46bd      	mov	sp, r7
 8107c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c60:	4770      	bx	lr
 8107c62:	bf00      	nop
 8107c64:	100049b4 	.word	0x100049b4

08107c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8107c68:	b580      	push	{r7, lr}
 8107c6a:	b086      	sub	sp, #24
 8107c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8107c6e:	2300      	movs	r3, #0
 8107c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107c72:	4b4e      	ldr	r3, [pc, #312]	; (8107dac <xTaskIncrementTick+0x144>)
 8107c74:	681b      	ldr	r3, [r3, #0]
 8107c76:	2b00      	cmp	r3, #0
 8107c78:	f040 8088 	bne.w	8107d8c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8107c7c:	4b4c      	ldr	r3, [pc, #304]	; (8107db0 <xTaskIncrementTick+0x148>)
 8107c7e:	681b      	ldr	r3, [r3, #0]
 8107c80:	3301      	adds	r3, #1
 8107c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107c84:	4a4a      	ldr	r2, [pc, #296]	; (8107db0 <xTaskIncrementTick+0x148>)
 8107c86:	693b      	ldr	r3, [r7, #16]
 8107c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8107c8a:	693b      	ldr	r3, [r7, #16]
 8107c8c:	2b00      	cmp	r3, #0
 8107c8e:	d11f      	bne.n	8107cd0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8107c90:	4b48      	ldr	r3, [pc, #288]	; (8107db4 <xTaskIncrementTick+0x14c>)
 8107c92:	681b      	ldr	r3, [r3, #0]
 8107c94:	681b      	ldr	r3, [r3, #0]
 8107c96:	2b00      	cmp	r3, #0
 8107c98:	d009      	beq.n	8107cae <xTaskIncrementTick+0x46>
 8107c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107c9e:	f383 8811 	msr	BASEPRI, r3
 8107ca2:	f3bf 8f6f 	isb	sy
 8107ca6:	f3bf 8f4f 	dsb	sy
 8107caa:	603b      	str	r3, [r7, #0]
 8107cac:	e7fe      	b.n	8107cac <xTaskIncrementTick+0x44>
 8107cae:	4b41      	ldr	r3, [pc, #260]	; (8107db4 <xTaskIncrementTick+0x14c>)
 8107cb0:	681b      	ldr	r3, [r3, #0]
 8107cb2:	60fb      	str	r3, [r7, #12]
 8107cb4:	4b40      	ldr	r3, [pc, #256]	; (8107db8 <xTaskIncrementTick+0x150>)
 8107cb6:	681b      	ldr	r3, [r3, #0]
 8107cb8:	4a3e      	ldr	r2, [pc, #248]	; (8107db4 <xTaskIncrementTick+0x14c>)
 8107cba:	6013      	str	r3, [r2, #0]
 8107cbc:	4a3e      	ldr	r2, [pc, #248]	; (8107db8 <xTaskIncrementTick+0x150>)
 8107cbe:	68fb      	ldr	r3, [r7, #12]
 8107cc0:	6013      	str	r3, [r2, #0]
 8107cc2:	4b3e      	ldr	r3, [pc, #248]	; (8107dbc <xTaskIncrementTick+0x154>)
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	3301      	adds	r3, #1
 8107cc8:	4a3c      	ldr	r2, [pc, #240]	; (8107dbc <xTaskIncrementTick+0x154>)
 8107cca:	6013      	str	r3, [r2, #0]
 8107ccc:	f000 fac4 	bl	8108258 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8107cd0:	4b3b      	ldr	r3, [pc, #236]	; (8107dc0 <xTaskIncrementTick+0x158>)
 8107cd2:	681b      	ldr	r3, [r3, #0]
 8107cd4:	693a      	ldr	r2, [r7, #16]
 8107cd6:	429a      	cmp	r2, r3
 8107cd8:	d349      	bcc.n	8107d6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107cda:	4b36      	ldr	r3, [pc, #216]	; (8107db4 <xTaskIncrementTick+0x14c>)
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	681b      	ldr	r3, [r3, #0]
 8107ce0:	2b00      	cmp	r3, #0
 8107ce2:	d104      	bne.n	8107cee <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107ce4:	4b36      	ldr	r3, [pc, #216]	; (8107dc0 <xTaskIncrementTick+0x158>)
 8107ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8107cea:	601a      	str	r2, [r3, #0]
					break;
 8107cec:	e03f      	b.n	8107d6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107cee:	4b31      	ldr	r3, [pc, #196]	; (8107db4 <xTaskIncrementTick+0x14c>)
 8107cf0:	681b      	ldr	r3, [r3, #0]
 8107cf2:	68db      	ldr	r3, [r3, #12]
 8107cf4:	68db      	ldr	r3, [r3, #12]
 8107cf6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8107cf8:	68bb      	ldr	r3, [r7, #8]
 8107cfa:	685b      	ldr	r3, [r3, #4]
 8107cfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8107cfe:	693a      	ldr	r2, [r7, #16]
 8107d00:	687b      	ldr	r3, [r7, #4]
 8107d02:	429a      	cmp	r2, r3
 8107d04:	d203      	bcs.n	8107d0e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8107d06:	4a2e      	ldr	r2, [pc, #184]	; (8107dc0 <xTaskIncrementTick+0x158>)
 8107d08:	687b      	ldr	r3, [r7, #4]
 8107d0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8107d0c:	e02f      	b.n	8107d6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107d0e:	68bb      	ldr	r3, [r7, #8]
 8107d10:	3304      	adds	r3, #4
 8107d12:	4618      	mov	r0, r3
 8107d14:	f7fe fd76 	bl	8106804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8107d18:	68bb      	ldr	r3, [r7, #8]
 8107d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d1c:	2b00      	cmp	r3, #0
 8107d1e:	d004      	beq.n	8107d2a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107d20:	68bb      	ldr	r3, [r7, #8]
 8107d22:	3318      	adds	r3, #24
 8107d24:	4618      	mov	r0, r3
 8107d26:	f7fe fd6d 	bl	8106804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8107d2a:	68bb      	ldr	r3, [r7, #8]
 8107d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107d2e:	4b25      	ldr	r3, [pc, #148]	; (8107dc4 <xTaskIncrementTick+0x15c>)
 8107d30:	681b      	ldr	r3, [r3, #0]
 8107d32:	429a      	cmp	r2, r3
 8107d34:	d903      	bls.n	8107d3e <xTaskIncrementTick+0xd6>
 8107d36:	68bb      	ldr	r3, [r7, #8]
 8107d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d3a:	4a22      	ldr	r2, [pc, #136]	; (8107dc4 <xTaskIncrementTick+0x15c>)
 8107d3c:	6013      	str	r3, [r2, #0]
 8107d3e:	68bb      	ldr	r3, [r7, #8]
 8107d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107d42:	4613      	mov	r3, r2
 8107d44:	009b      	lsls	r3, r3, #2
 8107d46:	4413      	add	r3, r2
 8107d48:	009b      	lsls	r3, r3, #2
 8107d4a:	4a1f      	ldr	r2, [pc, #124]	; (8107dc8 <xTaskIncrementTick+0x160>)
 8107d4c:	441a      	add	r2, r3
 8107d4e:	68bb      	ldr	r3, [r7, #8]
 8107d50:	3304      	adds	r3, #4
 8107d52:	4619      	mov	r1, r3
 8107d54:	4610      	mov	r0, r2
 8107d56:	f7fe fcf8 	bl	810674a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107d5a:	68bb      	ldr	r3, [r7, #8]
 8107d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107d5e:	4b1b      	ldr	r3, [pc, #108]	; (8107dcc <xTaskIncrementTick+0x164>)
 8107d60:	681b      	ldr	r3, [r3, #0]
 8107d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107d64:	429a      	cmp	r2, r3
 8107d66:	d3b8      	bcc.n	8107cda <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8107d68:	2301      	movs	r3, #1
 8107d6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8107d6c:	e7b5      	b.n	8107cda <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8107d6e:	4b17      	ldr	r3, [pc, #92]	; (8107dcc <xTaskIncrementTick+0x164>)
 8107d70:	681b      	ldr	r3, [r3, #0]
 8107d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107d74:	4914      	ldr	r1, [pc, #80]	; (8107dc8 <xTaskIncrementTick+0x160>)
 8107d76:	4613      	mov	r3, r2
 8107d78:	009b      	lsls	r3, r3, #2
 8107d7a:	4413      	add	r3, r2
 8107d7c:	009b      	lsls	r3, r3, #2
 8107d7e:	440b      	add	r3, r1
 8107d80:	681b      	ldr	r3, [r3, #0]
 8107d82:	2b01      	cmp	r3, #1
 8107d84:	d907      	bls.n	8107d96 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8107d86:	2301      	movs	r3, #1
 8107d88:	617b      	str	r3, [r7, #20]
 8107d8a:	e004      	b.n	8107d96 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8107d8c:	4b10      	ldr	r3, [pc, #64]	; (8107dd0 <xTaskIncrementTick+0x168>)
 8107d8e:	681b      	ldr	r3, [r3, #0]
 8107d90:	3301      	adds	r3, #1
 8107d92:	4a0f      	ldr	r2, [pc, #60]	; (8107dd0 <xTaskIncrementTick+0x168>)
 8107d94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8107d96:	4b0f      	ldr	r3, [pc, #60]	; (8107dd4 <xTaskIncrementTick+0x16c>)
 8107d98:	681b      	ldr	r3, [r3, #0]
 8107d9a:	2b00      	cmp	r3, #0
 8107d9c:	d001      	beq.n	8107da2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8107d9e:	2301      	movs	r3, #1
 8107da0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8107da2:	697b      	ldr	r3, [r7, #20]
}
 8107da4:	4618      	mov	r0, r3
 8107da6:	3718      	adds	r7, #24
 8107da8:	46bd      	mov	sp, r7
 8107daa:	bd80      	pop	{r7, pc}
 8107dac:	100049d8 	.word	0x100049d8
 8107db0:	100049b4 	.word	0x100049b4
 8107db4:	10004968 	.word	0x10004968
 8107db8:	1000496c 	.word	0x1000496c
 8107dbc:	100049c8 	.word	0x100049c8
 8107dc0:	100049d0 	.word	0x100049d0
 8107dc4:	100049b8 	.word	0x100049b8
 8107dc8:	100044e0 	.word	0x100044e0
 8107dcc:	100044dc 	.word	0x100044dc
 8107dd0:	100049c0 	.word	0x100049c0
 8107dd4:	100049c4 	.word	0x100049c4

08107dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8107dd8:	b480      	push	{r7}
 8107dda:	b085      	sub	sp, #20
 8107ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8107dde:	4b27      	ldr	r3, [pc, #156]	; (8107e7c <vTaskSwitchContext+0xa4>)
 8107de0:	681b      	ldr	r3, [r3, #0]
 8107de2:	2b00      	cmp	r3, #0
 8107de4:	d003      	beq.n	8107dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8107de6:	4b26      	ldr	r3, [pc, #152]	; (8107e80 <vTaskSwitchContext+0xa8>)
 8107de8:	2201      	movs	r2, #1
 8107dea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8107dec:	e040      	b.n	8107e70 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8107dee:	4b24      	ldr	r3, [pc, #144]	; (8107e80 <vTaskSwitchContext+0xa8>)
 8107df0:	2200      	movs	r2, #0
 8107df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107df4:	4b23      	ldr	r3, [pc, #140]	; (8107e84 <vTaskSwitchContext+0xac>)
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	60fb      	str	r3, [r7, #12]
 8107dfa:	e00f      	b.n	8107e1c <vTaskSwitchContext+0x44>
 8107dfc:	68fb      	ldr	r3, [r7, #12]
 8107dfe:	2b00      	cmp	r3, #0
 8107e00:	d109      	bne.n	8107e16 <vTaskSwitchContext+0x3e>
 8107e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107e06:	f383 8811 	msr	BASEPRI, r3
 8107e0a:	f3bf 8f6f 	isb	sy
 8107e0e:	f3bf 8f4f 	dsb	sy
 8107e12:	607b      	str	r3, [r7, #4]
 8107e14:	e7fe      	b.n	8107e14 <vTaskSwitchContext+0x3c>
 8107e16:	68fb      	ldr	r3, [r7, #12]
 8107e18:	3b01      	subs	r3, #1
 8107e1a:	60fb      	str	r3, [r7, #12]
 8107e1c:	491a      	ldr	r1, [pc, #104]	; (8107e88 <vTaskSwitchContext+0xb0>)
 8107e1e:	68fa      	ldr	r2, [r7, #12]
 8107e20:	4613      	mov	r3, r2
 8107e22:	009b      	lsls	r3, r3, #2
 8107e24:	4413      	add	r3, r2
 8107e26:	009b      	lsls	r3, r3, #2
 8107e28:	440b      	add	r3, r1
 8107e2a:	681b      	ldr	r3, [r3, #0]
 8107e2c:	2b00      	cmp	r3, #0
 8107e2e:	d0e5      	beq.n	8107dfc <vTaskSwitchContext+0x24>
 8107e30:	68fa      	ldr	r2, [r7, #12]
 8107e32:	4613      	mov	r3, r2
 8107e34:	009b      	lsls	r3, r3, #2
 8107e36:	4413      	add	r3, r2
 8107e38:	009b      	lsls	r3, r3, #2
 8107e3a:	4a13      	ldr	r2, [pc, #76]	; (8107e88 <vTaskSwitchContext+0xb0>)
 8107e3c:	4413      	add	r3, r2
 8107e3e:	60bb      	str	r3, [r7, #8]
 8107e40:	68bb      	ldr	r3, [r7, #8]
 8107e42:	685b      	ldr	r3, [r3, #4]
 8107e44:	685a      	ldr	r2, [r3, #4]
 8107e46:	68bb      	ldr	r3, [r7, #8]
 8107e48:	605a      	str	r2, [r3, #4]
 8107e4a:	68bb      	ldr	r3, [r7, #8]
 8107e4c:	685a      	ldr	r2, [r3, #4]
 8107e4e:	68bb      	ldr	r3, [r7, #8]
 8107e50:	3308      	adds	r3, #8
 8107e52:	429a      	cmp	r2, r3
 8107e54:	d104      	bne.n	8107e60 <vTaskSwitchContext+0x88>
 8107e56:	68bb      	ldr	r3, [r7, #8]
 8107e58:	685b      	ldr	r3, [r3, #4]
 8107e5a:	685a      	ldr	r2, [r3, #4]
 8107e5c:	68bb      	ldr	r3, [r7, #8]
 8107e5e:	605a      	str	r2, [r3, #4]
 8107e60:	68bb      	ldr	r3, [r7, #8]
 8107e62:	685b      	ldr	r3, [r3, #4]
 8107e64:	68db      	ldr	r3, [r3, #12]
 8107e66:	4a09      	ldr	r2, [pc, #36]	; (8107e8c <vTaskSwitchContext+0xb4>)
 8107e68:	6013      	str	r3, [r2, #0]
 8107e6a:	4a06      	ldr	r2, [pc, #24]	; (8107e84 <vTaskSwitchContext+0xac>)
 8107e6c:	68fb      	ldr	r3, [r7, #12]
 8107e6e:	6013      	str	r3, [r2, #0]
}
 8107e70:	bf00      	nop
 8107e72:	3714      	adds	r7, #20
 8107e74:	46bd      	mov	sp, r7
 8107e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e7a:	4770      	bx	lr
 8107e7c:	100049d8 	.word	0x100049d8
 8107e80:	100049c4 	.word	0x100049c4
 8107e84:	100049b8 	.word	0x100049b8
 8107e88:	100044e0 	.word	0x100044e0
 8107e8c:	100044dc 	.word	0x100044dc

08107e90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8107e90:	b580      	push	{r7, lr}
 8107e92:	b084      	sub	sp, #16
 8107e94:	af00      	add	r7, sp, #0
 8107e96:	6078      	str	r0, [r7, #4]
 8107e98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8107e9a:	687b      	ldr	r3, [r7, #4]
 8107e9c:	2b00      	cmp	r3, #0
 8107e9e:	d109      	bne.n	8107eb4 <vTaskPlaceOnEventList+0x24>
 8107ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107ea4:	f383 8811 	msr	BASEPRI, r3
 8107ea8:	f3bf 8f6f 	isb	sy
 8107eac:	f3bf 8f4f 	dsb	sy
 8107eb0:	60fb      	str	r3, [r7, #12]
 8107eb2:	e7fe      	b.n	8107eb2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107eb4:	4b07      	ldr	r3, [pc, #28]	; (8107ed4 <vTaskPlaceOnEventList+0x44>)
 8107eb6:	681b      	ldr	r3, [r3, #0]
 8107eb8:	3318      	adds	r3, #24
 8107eba:	4619      	mov	r1, r3
 8107ebc:	6878      	ldr	r0, [r7, #4]
 8107ebe:	f7fe fc68 	bl	8106792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8107ec2:	2101      	movs	r1, #1
 8107ec4:	6838      	ldr	r0, [r7, #0]
 8107ec6:	f000 fa71 	bl	81083ac <prvAddCurrentTaskToDelayedList>
}
 8107eca:	bf00      	nop
 8107ecc:	3710      	adds	r7, #16
 8107ece:	46bd      	mov	sp, r7
 8107ed0:	bd80      	pop	{r7, pc}
 8107ed2:	bf00      	nop
 8107ed4:	100044dc 	.word	0x100044dc

08107ed8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8107ed8:	b580      	push	{r7, lr}
 8107eda:	b086      	sub	sp, #24
 8107edc:	af00      	add	r7, sp, #0
 8107ede:	60f8      	str	r0, [r7, #12]
 8107ee0:	60b9      	str	r1, [r7, #8]
 8107ee2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8107ee4:	68fb      	ldr	r3, [r7, #12]
 8107ee6:	2b00      	cmp	r3, #0
 8107ee8:	d109      	bne.n	8107efe <vTaskPlaceOnEventListRestricted+0x26>
 8107eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107eee:	f383 8811 	msr	BASEPRI, r3
 8107ef2:	f3bf 8f6f 	isb	sy
 8107ef6:	f3bf 8f4f 	dsb	sy
 8107efa:	617b      	str	r3, [r7, #20]
 8107efc:	e7fe      	b.n	8107efc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107efe:	4b0a      	ldr	r3, [pc, #40]	; (8107f28 <vTaskPlaceOnEventListRestricted+0x50>)
 8107f00:	681b      	ldr	r3, [r3, #0]
 8107f02:	3318      	adds	r3, #24
 8107f04:	4619      	mov	r1, r3
 8107f06:	68f8      	ldr	r0, [r7, #12]
 8107f08:	f7fe fc1f 	bl	810674a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8107f0c:	687b      	ldr	r3, [r7, #4]
 8107f0e:	2b00      	cmp	r3, #0
 8107f10:	d002      	beq.n	8107f18 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8107f12:	f04f 33ff 	mov.w	r3, #4294967295
 8107f16:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8107f18:	6879      	ldr	r1, [r7, #4]
 8107f1a:	68b8      	ldr	r0, [r7, #8]
 8107f1c:	f000 fa46 	bl	81083ac <prvAddCurrentTaskToDelayedList>
	}
 8107f20:	bf00      	nop
 8107f22:	3718      	adds	r7, #24
 8107f24:	46bd      	mov	sp, r7
 8107f26:	bd80      	pop	{r7, pc}
 8107f28:	100044dc 	.word	0x100044dc

08107f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8107f2c:	b580      	push	{r7, lr}
 8107f2e:	b086      	sub	sp, #24
 8107f30:	af00      	add	r7, sp, #0
 8107f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107f34:	687b      	ldr	r3, [r7, #4]
 8107f36:	68db      	ldr	r3, [r3, #12]
 8107f38:	68db      	ldr	r3, [r3, #12]
 8107f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8107f3c:	693b      	ldr	r3, [r7, #16]
 8107f3e:	2b00      	cmp	r3, #0
 8107f40:	d109      	bne.n	8107f56 <xTaskRemoveFromEventList+0x2a>
 8107f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107f46:	f383 8811 	msr	BASEPRI, r3
 8107f4a:	f3bf 8f6f 	isb	sy
 8107f4e:	f3bf 8f4f 	dsb	sy
 8107f52:	60fb      	str	r3, [r7, #12]
 8107f54:	e7fe      	b.n	8107f54 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8107f56:	693b      	ldr	r3, [r7, #16]
 8107f58:	3318      	adds	r3, #24
 8107f5a:	4618      	mov	r0, r3
 8107f5c:	f7fe fc52 	bl	8106804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107f60:	4b1d      	ldr	r3, [pc, #116]	; (8107fd8 <xTaskRemoveFromEventList+0xac>)
 8107f62:	681b      	ldr	r3, [r3, #0]
 8107f64:	2b00      	cmp	r3, #0
 8107f66:	d11d      	bne.n	8107fa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107f68:	693b      	ldr	r3, [r7, #16]
 8107f6a:	3304      	adds	r3, #4
 8107f6c:	4618      	mov	r0, r3
 8107f6e:	f7fe fc49 	bl	8106804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8107f72:	693b      	ldr	r3, [r7, #16]
 8107f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107f76:	4b19      	ldr	r3, [pc, #100]	; (8107fdc <xTaskRemoveFromEventList+0xb0>)
 8107f78:	681b      	ldr	r3, [r3, #0]
 8107f7a:	429a      	cmp	r2, r3
 8107f7c:	d903      	bls.n	8107f86 <xTaskRemoveFromEventList+0x5a>
 8107f7e:	693b      	ldr	r3, [r7, #16]
 8107f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107f82:	4a16      	ldr	r2, [pc, #88]	; (8107fdc <xTaskRemoveFromEventList+0xb0>)
 8107f84:	6013      	str	r3, [r2, #0]
 8107f86:	693b      	ldr	r3, [r7, #16]
 8107f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107f8a:	4613      	mov	r3, r2
 8107f8c:	009b      	lsls	r3, r3, #2
 8107f8e:	4413      	add	r3, r2
 8107f90:	009b      	lsls	r3, r3, #2
 8107f92:	4a13      	ldr	r2, [pc, #76]	; (8107fe0 <xTaskRemoveFromEventList+0xb4>)
 8107f94:	441a      	add	r2, r3
 8107f96:	693b      	ldr	r3, [r7, #16]
 8107f98:	3304      	adds	r3, #4
 8107f9a:	4619      	mov	r1, r3
 8107f9c:	4610      	mov	r0, r2
 8107f9e:	f7fe fbd4 	bl	810674a <vListInsertEnd>
 8107fa2:	e005      	b.n	8107fb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8107fa4:	693b      	ldr	r3, [r7, #16]
 8107fa6:	3318      	adds	r3, #24
 8107fa8:	4619      	mov	r1, r3
 8107faa:	480e      	ldr	r0, [pc, #56]	; (8107fe4 <xTaskRemoveFromEventList+0xb8>)
 8107fac:	f7fe fbcd 	bl	810674a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8107fb0:	693b      	ldr	r3, [r7, #16]
 8107fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107fb4:	4b0c      	ldr	r3, [pc, #48]	; (8107fe8 <xTaskRemoveFromEventList+0xbc>)
 8107fb6:	681b      	ldr	r3, [r3, #0]
 8107fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107fba:	429a      	cmp	r2, r3
 8107fbc:	d905      	bls.n	8107fca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8107fbe:	2301      	movs	r3, #1
 8107fc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8107fc2:	4b0a      	ldr	r3, [pc, #40]	; (8107fec <xTaskRemoveFromEventList+0xc0>)
 8107fc4:	2201      	movs	r2, #1
 8107fc6:	601a      	str	r2, [r3, #0]
 8107fc8:	e001      	b.n	8107fce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8107fca:	2300      	movs	r3, #0
 8107fcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8107fce:	697b      	ldr	r3, [r7, #20]
}
 8107fd0:	4618      	mov	r0, r3
 8107fd2:	3718      	adds	r7, #24
 8107fd4:	46bd      	mov	sp, r7
 8107fd6:	bd80      	pop	{r7, pc}
 8107fd8:	100049d8 	.word	0x100049d8
 8107fdc:	100049b8 	.word	0x100049b8
 8107fe0:	100044e0 	.word	0x100044e0
 8107fe4:	10004970 	.word	0x10004970
 8107fe8:	100044dc 	.word	0x100044dc
 8107fec:	100049c4 	.word	0x100049c4

08107ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8107ff0:	b480      	push	{r7}
 8107ff2:	b083      	sub	sp, #12
 8107ff4:	af00      	add	r7, sp, #0
 8107ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8107ff8:	4b06      	ldr	r3, [pc, #24]	; (8108014 <vTaskInternalSetTimeOutState+0x24>)
 8107ffa:	681a      	ldr	r2, [r3, #0]
 8107ffc:	687b      	ldr	r3, [r7, #4]
 8107ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8108000:	4b05      	ldr	r3, [pc, #20]	; (8108018 <vTaskInternalSetTimeOutState+0x28>)
 8108002:	681a      	ldr	r2, [r3, #0]
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	605a      	str	r2, [r3, #4]
}
 8108008:	bf00      	nop
 810800a:	370c      	adds	r7, #12
 810800c:	46bd      	mov	sp, r7
 810800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108012:	4770      	bx	lr
 8108014:	100049c8 	.word	0x100049c8
 8108018:	100049b4 	.word	0x100049b4

0810801c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810801c:	b580      	push	{r7, lr}
 810801e:	b088      	sub	sp, #32
 8108020:	af00      	add	r7, sp, #0
 8108022:	6078      	str	r0, [r7, #4]
 8108024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8108026:	687b      	ldr	r3, [r7, #4]
 8108028:	2b00      	cmp	r3, #0
 810802a:	d109      	bne.n	8108040 <xTaskCheckForTimeOut+0x24>
 810802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108030:	f383 8811 	msr	BASEPRI, r3
 8108034:	f3bf 8f6f 	isb	sy
 8108038:	f3bf 8f4f 	dsb	sy
 810803c:	613b      	str	r3, [r7, #16]
 810803e:	e7fe      	b.n	810803e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8108040:	683b      	ldr	r3, [r7, #0]
 8108042:	2b00      	cmp	r3, #0
 8108044:	d109      	bne.n	810805a <xTaskCheckForTimeOut+0x3e>
 8108046:	f04f 0350 	mov.w	r3, #80	; 0x50
 810804a:	f383 8811 	msr	BASEPRI, r3
 810804e:	f3bf 8f6f 	isb	sy
 8108052:	f3bf 8f4f 	dsb	sy
 8108056:	60fb      	str	r3, [r7, #12]
 8108058:	e7fe      	b.n	8108058 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810805a:	f7fe fd27 	bl	8106aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810805e:	4b1d      	ldr	r3, [pc, #116]	; (81080d4 <xTaskCheckForTimeOut+0xb8>)
 8108060:	681b      	ldr	r3, [r3, #0]
 8108062:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	685b      	ldr	r3, [r3, #4]
 8108068:	69ba      	ldr	r2, [r7, #24]
 810806a:	1ad3      	subs	r3, r2, r3
 810806c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810806e:	683b      	ldr	r3, [r7, #0]
 8108070:	681b      	ldr	r3, [r3, #0]
 8108072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108076:	d102      	bne.n	810807e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8108078:	2300      	movs	r3, #0
 810807a:	61fb      	str	r3, [r7, #28]
 810807c:	e023      	b.n	81080c6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810807e:	687b      	ldr	r3, [r7, #4]
 8108080:	681a      	ldr	r2, [r3, #0]
 8108082:	4b15      	ldr	r3, [pc, #84]	; (81080d8 <xTaskCheckForTimeOut+0xbc>)
 8108084:	681b      	ldr	r3, [r3, #0]
 8108086:	429a      	cmp	r2, r3
 8108088:	d007      	beq.n	810809a <xTaskCheckForTimeOut+0x7e>
 810808a:	687b      	ldr	r3, [r7, #4]
 810808c:	685b      	ldr	r3, [r3, #4]
 810808e:	69ba      	ldr	r2, [r7, #24]
 8108090:	429a      	cmp	r2, r3
 8108092:	d302      	bcc.n	810809a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8108094:	2301      	movs	r3, #1
 8108096:	61fb      	str	r3, [r7, #28]
 8108098:	e015      	b.n	81080c6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810809a:	683b      	ldr	r3, [r7, #0]
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	697a      	ldr	r2, [r7, #20]
 81080a0:	429a      	cmp	r2, r3
 81080a2:	d20b      	bcs.n	81080bc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 81080a4:	683b      	ldr	r3, [r7, #0]
 81080a6:	681a      	ldr	r2, [r3, #0]
 81080a8:	697b      	ldr	r3, [r7, #20]
 81080aa:	1ad2      	subs	r2, r2, r3
 81080ac:	683b      	ldr	r3, [r7, #0]
 81080ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 81080b0:	6878      	ldr	r0, [r7, #4]
 81080b2:	f7ff ff9d 	bl	8107ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 81080b6:	2300      	movs	r3, #0
 81080b8:	61fb      	str	r3, [r7, #28]
 81080ba:	e004      	b.n	81080c6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 81080bc:	683b      	ldr	r3, [r7, #0]
 81080be:	2200      	movs	r2, #0
 81080c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81080c2:	2301      	movs	r3, #1
 81080c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81080c6:	f7fe fd1f 	bl	8106b08 <vPortExitCritical>

	return xReturn;
 81080ca:	69fb      	ldr	r3, [r7, #28]
}
 81080cc:	4618      	mov	r0, r3
 81080ce:	3720      	adds	r7, #32
 81080d0:	46bd      	mov	sp, r7
 81080d2:	bd80      	pop	{r7, pc}
 81080d4:	100049b4 	.word	0x100049b4
 81080d8:	100049c8 	.word	0x100049c8

081080dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81080dc:	b480      	push	{r7}
 81080de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81080e0:	4b03      	ldr	r3, [pc, #12]	; (81080f0 <vTaskMissedYield+0x14>)
 81080e2:	2201      	movs	r2, #1
 81080e4:	601a      	str	r2, [r3, #0]
}
 81080e6:	bf00      	nop
 81080e8:	46bd      	mov	sp, r7
 81080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080ee:	4770      	bx	lr
 81080f0:	100049c4 	.word	0x100049c4

081080f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81080f4:	b580      	push	{r7, lr}
 81080f6:	b082      	sub	sp, #8
 81080f8:	af00      	add	r7, sp, #0
 81080fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81080fc:	f000 f852 	bl	81081a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8108100:	4b06      	ldr	r3, [pc, #24]	; (810811c <prvIdleTask+0x28>)
 8108102:	681b      	ldr	r3, [r3, #0]
 8108104:	2b01      	cmp	r3, #1
 8108106:	d9f9      	bls.n	81080fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8108108:	4b05      	ldr	r3, [pc, #20]	; (8108120 <prvIdleTask+0x2c>)
 810810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810810e:	601a      	str	r2, [r3, #0]
 8108110:	f3bf 8f4f 	dsb	sy
 8108114:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8108118:	e7f0      	b.n	81080fc <prvIdleTask+0x8>
 810811a:	bf00      	nop
 810811c:	100044e0 	.word	0x100044e0
 8108120:	e000ed04 	.word	0xe000ed04

08108124 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8108124:	b580      	push	{r7, lr}
 8108126:	b082      	sub	sp, #8
 8108128:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810812a:	2300      	movs	r3, #0
 810812c:	607b      	str	r3, [r7, #4]
 810812e:	e00c      	b.n	810814a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8108130:	687a      	ldr	r2, [r7, #4]
 8108132:	4613      	mov	r3, r2
 8108134:	009b      	lsls	r3, r3, #2
 8108136:	4413      	add	r3, r2
 8108138:	009b      	lsls	r3, r3, #2
 810813a:	4a12      	ldr	r2, [pc, #72]	; (8108184 <prvInitialiseTaskLists+0x60>)
 810813c:	4413      	add	r3, r2
 810813e:	4618      	mov	r0, r3
 8108140:	f7fe fad6 	bl	81066f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	3301      	adds	r3, #1
 8108148:	607b      	str	r3, [r7, #4]
 810814a:	687b      	ldr	r3, [r7, #4]
 810814c:	2b37      	cmp	r3, #55	; 0x37
 810814e:	d9ef      	bls.n	8108130 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8108150:	480d      	ldr	r0, [pc, #52]	; (8108188 <prvInitialiseTaskLists+0x64>)
 8108152:	f7fe facd 	bl	81066f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8108156:	480d      	ldr	r0, [pc, #52]	; (810818c <prvInitialiseTaskLists+0x68>)
 8108158:	f7fe faca 	bl	81066f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810815c:	480c      	ldr	r0, [pc, #48]	; (8108190 <prvInitialiseTaskLists+0x6c>)
 810815e:	f7fe fac7 	bl	81066f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8108162:	480c      	ldr	r0, [pc, #48]	; (8108194 <prvInitialiseTaskLists+0x70>)
 8108164:	f7fe fac4 	bl	81066f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8108168:	480b      	ldr	r0, [pc, #44]	; (8108198 <prvInitialiseTaskLists+0x74>)
 810816a:	f7fe fac1 	bl	81066f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810816e:	4b0b      	ldr	r3, [pc, #44]	; (810819c <prvInitialiseTaskLists+0x78>)
 8108170:	4a05      	ldr	r2, [pc, #20]	; (8108188 <prvInitialiseTaskLists+0x64>)
 8108172:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8108174:	4b0a      	ldr	r3, [pc, #40]	; (81081a0 <prvInitialiseTaskLists+0x7c>)
 8108176:	4a05      	ldr	r2, [pc, #20]	; (810818c <prvInitialiseTaskLists+0x68>)
 8108178:	601a      	str	r2, [r3, #0]
}
 810817a:	bf00      	nop
 810817c:	3708      	adds	r7, #8
 810817e:	46bd      	mov	sp, r7
 8108180:	bd80      	pop	{r7, pc}
 8108182:	bf00      	nop
 8108184:	100044e0 	.word	0x100044e0
 8108188:	10004940 	.word	0x10004940
 810818c:	10004954 	.word	0x10004954
 8108190:	10004970 	.word	0x10004970
 8108194:	10004984 	.word	0x10004984
 8108198:	1000499c 	.word	0x1000499c
 810819c:	10004968 	.word	0x10004968
 81081a0:	1000496c 	.word	0x1000496c

081081a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 81081a4:	b580      	push	{r7, lr}
 81081a6:	b082      	sub	sp, #8
 81081a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81081aa:	e019      	b.n	81081e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 81081ac:	f7fe fc7e 	bl	8106aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81081b0:	4b0f      	ldr	r3, [pc, #60]	; (81081f0 <prvCheckTasksWaitingTermination+0x4c>)
 81081b2:	68db      	ldr	r3, [r3, #12]
 81081b4:	68db      	ldr	r3, [r3, #12]
 81081b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81081b8:	687b      	ldr	r3, [r7, #4]
 81081ba:	3304      	adds	r3, #4
 81081bc:	4618      	mov	r0, r3
 81081be:	f7fe fb21 	bl	8106804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81081c2:	4b0c      	ldr	r3, [pc, #48]	; (81081f4 <prvCheckTasksWaitingTermination+0x50>)
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	3b01      	subs	r3, #1
 81081c8:	4a0a      	ldr	r2, [pc, #40]	; (81081f4 <prvCheckTasksWaitingTermination+0x50>)
 81081ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81081cc:	4b0a      	ldr	r3, [pc, #40]	; (81081f8 <prvCheckTasksWaitingTermination+0x54>)
 81081ce:	681b      	ldr	r3, [r3, #0]
 81081d0:	3b01      	subs	r3, #1
 81081d2:	4a09      	ldr	r2, [pc, #36]	; (81081f8 <prvCheckTasksWaitingTermination+0x54>)
 81081d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81081d6:	f7fe fc97 	bl	8106b08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81081da:	6878      	ldr	r0, [r7, #4]
 81081dc:	f000 f80e 	bl	81081fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81081e0:	4b05      	ldr	r3, [pc, #20]	; (81081f8 <prvCheckTasksWaitingTermination+0x54>)
 81081e2:	681b      	ldr	r3, [r3, #0]
 81081e4:	2b00      	cmp	r3, #0
 81081e6:	d1e1      	bne.n	81081ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81081e8:	bf00      	nop
 81081ea:	3708      	adds	r7, #8
 81081ec:	46bd      	mov	sp, r7
 81081ee:	bd80      	pop	{r7, pc}
 81081f0:	10004984 	.word	0x10004984
 81081f4:	100049b0 	.word	0x100049b0
 81081f8:	10004998 	.word	0x10004998

081081fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81081fc:	b580      	push	{r7, lr}
 81081fe:	b084      	sub	sp, #16
 8108200:	af00      	add	r7, sp, #0
 8108202:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8108204:	687b      	ldr	r3, [r7, #4]
 8108206:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810820a:	2b00      	cmp	r3, #0
 810820c:	d108      	bne.n	8108220 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810820e:	687b      	ldr	r3, [r7, #4]
 8108210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8108212:	4618      	mov	r0, r3
 8108214:	f7fe f958 	bl	81064c8 <vPortFree>
				vPortFree( pxTCB );
 8108218:	6878      	ldr	r0, [r7, #4]
 810821a:	f7fe f955 	bl	81064c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810821e:	e017      	b.n	8108250 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8108220:	687b      	ldr	r3, [r7, #4]
 8108222:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8108226:	2b01      	cmp	r3, #1
 8108228:	d103      	bne.n	8108232 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810822a:	6878      	ldr	r0, [r7, #4]
 810822c:	f7fe f94c 	bl	81064c8 <vPortFree>
	}
 8108230:	e00e      	b.n	8108250 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8108232:	687b      	ldr	r3, [r7, #4]
 8108234:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8108238:	2b02      	cmp	r3, #2
 810823a:	d009      	beq.n	8108250 <prvDeleteTCB+0x54>
 810823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108240:	f383 8811 	msr	BASEPRI, r3
 8108244:	f3bf 8f6f 	isb	sy
 8108248:	f3bf 8f4f 	dsb	sy
 810824c:	60fb      	str	r3, [r7, #12]
 810824e:	e7fe      	b.n	810824e <prvDeleteTCB+0x52>
	}
 8108250:	bf00      	nop
 8108252:	3710      	adds	r7, #16
 8108254:	46bd      	mov	sp, r7
 8108256:	bd80      	pop	{r7, pc}

08108258 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8108258:	b480      	push	{r7}
 810825a:	b083      	sub	sp, #12
 810825c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810825e:	4b0c      	ldr	r3, [pc, #48]	; (8108290 <prvResetNextTaskUnblockTime+0x38>)
 8108260:	681b      	ldr	r3, [r3, #0]
 8108262:	681b      	ldr	r3, [r3, #0]
 8108264:	2b00      	cmp	r3, #0
 8108266:	d104      	bne.n	8108272 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8108268:	4b0a      	ldr	r3, [pc, #40]	; (8108294 <prvResetNextTaskUnblockTime+0x3c>)
 810826a:	f04f 32ff 	mov.w	r2, #4294967295
 810826e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8108270:	e008      	b.n	8108284 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108272:	4b07      	ldr	r3, [pc, #28]	; (8108290 <prvResetNextTaskUnblockTime+0x38>)
 8108274:	681b      	ldr	r3, [r3, #0]
 8108276:	68db      	ldr	r3, [r3, #12]
 8108278:	68db      	ldr	r3, [r3, #12]
 810827a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810827c:	687b      	ldr	r3, [r7, #4]
 810827e:	685b      	ldr	r3, [r3, #4]
 8108280:	4a04      	ldr	r2, [pc, #16]	; (8108294 <prvResetNextTaskUnblockTime+0x3c>)
 8108282:	6013      	str	r3, [r2, #0]
}
 8108284:	bf00      	nop
 8108286:	370c      	adds	r7, #12
 8108288:	46bd      	mov	sp, r7
 810828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810828e:	4770      	bx	lr
 8108290:	10004968 	.word	0x10004968
 8108294:	100049d0 	.word	0x100049d0

08108298 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8108298:	b480      	push	{r7}
 810829a:	b083      	sub	sp, #12
 810829c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810829e:	4b0b      	ldr	r3, [pc, #44]	; (81082cc <xTaskGetSchedulerState+0x34>)
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	2b00      	cmp	r3, #0
 81082a4:	d102      	bne.n	81082ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 81082a6:	2301      	movs	r3, #1
 81082a8:	607b      	str	r3, [r7, #4]
 81082aa:	e008      	b.n	81082be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81082ac:	4b08      	ldr	r3, [pc, #32]	; (81082d0 <xTaskGetSchedulerState+0x38>)
 81082ae:	681b      	ldr	r3, [r3, #0]
 81082b0:	2b00      	cmp	r3, #0
 81082b2:	d102      	bne.n	81082ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 81082b4:	2302      	movs	r3, #2
 81082b6:	607b      	str	r3, [r7, #4]
 81082b8:	e001      	b.n	81082be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 81082ba:	2300      	movs	r3, #0
 81082bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 81082be:	687b      	ldr	r3, [r7, #4]
	}
 81082c0:	4618      	mov	r0, r3
 81082c2:	370c      	adds	r7, #12
 81082c4:	46bd      	mov	sp, r7
 81082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082ca:	4770      	bx	lr
 81082cc:	100049bc 	.word	0x100049bc
 81082d0:	100049d8 	.word	0x100049d8

081082d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81082d4:	b580      	push	{r7, lr}
 81082d6:	b086      	sub	sp, #24
 81082d8:	af00      	add	r7, sp, #0
 81082da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81082dc:	687b      	ldr	r3, [r7, #4]
 81082de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81082e0:	2300      	movs	r3, #0
 81082e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81082e4:	687b      	ldr	r3, [r7, #4]
 81082e6:	2b00      	cmp	r3, #0
 81082e8:	d054      	beq.n	8108394 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81082ea:	4b2d      	ldr	r3, [pc, #180]	; (81083a0 <xTaskPriorityDisinherit+0xcc>)
 81082ec:	681b      	ldr	r3, [r3, #0]
 81082ee:	693a      	ldr	r2, [r7, #16]
 81082f0:	429a      	cmp	r2, r3
 81082f2:	d009      	beq.n	8108308 <xTaskPriorityDisinherit+0x34>
 81082f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81082f8:	f383 8811 	msr	BASEPRI, r3
 81082fc:	f3bf 8f6f 	isb	sy
 8108300:	f3bf 8f4f 	dsb	sy
 8108304:	60fb      	str	r3, [r7, #12]
 8108306:	e7fe      	b.n	8108306 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8108308:	693b      	ldr	r3, [r7, #16]
 810830a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810830c:	2b00      	cmp	r3, #0
 810830e:	d109      	bne.n	8108324 <xTaskPriorityDisinherit+0x50>
 8108310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108314:	f383 8811 	msr	BASEPRI, r3
 8108318:	f3bf 8f6f 	isb	sy
 810831c:	f3bf 8f4f 	dsb	sy
 8108320:	60bb      	str	r3, [r7, #8]
 8108322:	e7fe      	b.n	8108322 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8108324:	693b      	ldr	r3, [r7, #16]
 8108326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8108328:	1e5a      	subs	r2, r3, #1
 810832a:	693b      	ldr	r3, [r7, #16]
 810832c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810832e:	693b      	ldr	r3, [r7, #16]
 8108330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108332:	693b      	ldr	r3, [r7, #16]
 8108334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8108336:	429a      	cmp	r2, r3
 8108338:	d02c      	beq.n	8108394 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810833a:	693b      	ldr	r3, [r7, #16]
 810833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810833e:	2b00      	cmp	r3, #0
 8108340:	d128      	bne.n	8108394 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8108342:	693b      	ldr	r3, [r7, #16]
 8108344:	3304      	adds	r3, #4
 8108346:	4618      	mov	r0, r3
 8108348:	f7fe fa5c 	bl	8106804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810834c:	693b      	ldr	r3, [r7, #16]
 810834e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108350:	693b      	ldr	r3, [r7, #16]
 8108352:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108354:	693b      	ldr	r3, [r7, #16]
 8108356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108358:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810835c:	693b      	ldr	r3, [r7, #16]
 810835e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8108360:	693b      	ldr	r3, [r7, #16]
 8108362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108364:	4b0f      	ldr	r3, [pc, #60]	; (81083a4 <xTaskPriorityDisinherit+0xd0>)
 8108366:	681b      	ldr	r3, [r3, #0]
 8108368:	429a      	cmp	r2, r3
 810836a:	d903      	bls.n	8108374 <xTaskPriorityDisinherit+0xa0>
 810836c:	693b      	ldr	r3, [r7, #16]
 810836e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108370:	4a0c      	ldr	r2, [pc, #48]	; (81083a4 <xTaskPriorityDisinherit+0xd0>)
 8108372:	6013      	str	r3, [r2, #0]
 8108374:	693b      	ldr	r3, [r7, #16]
 8108376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108378:	4613      	mov	r3, r2
 810837a:	009b      	lsls	r3, r3, #2
 810837c:	4413      	add	r3, r2
 810837e:	009b      	lsls	r3, r3, #2
 8108380:	4a09      	ldr	r2, [pc, #36]	; (81083a8 <xTaskPriorityDisinherit+0xd4>)
 8108382:	441a      	add	r2, r3
 8108384:	693b      	ldr	r3, [r7, #16]
 8108386:	3304      	adds	r3, #4
 8108388:	4619      	mov	r1, r3
 810838a:	4610      	mov	r0, r2
 810838c:	f7fe f9dd 	bl	810674a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8108390:	2301      	movs	r3, #1
 8108392:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8108394:	697b      	ldr	r3, [r7, #20]
	}
 8108396:	4618      	mov	r0, r3
 8108398:	3718      	adds	r7, #24
 810839a:	46bd      	mov	sp, r7
 810839c:	bd80      	pop	{r7, pc}
 810839e:	bf00      	nop
 81083a0:	100044dc 	.word	0x100044dc
 81083a4:	100049b8 	.word	0x100049b8
 81083a8:	100044e0 	.word	0x100044e0

081083ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 81083ac:	b580      	push	{r7, lr}
 81083ae:	b084      	sub	sp, #16
 81083b0:	af00      	add	r7, sp, #0
 81083b2:	6078      	str	r0, [r7, #4]
 81083b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 81083b6:	4b21      	ldr	r3, [pc, #132]	; (810843c <prvAddCurrentTaskToDelayedList+0x90>)
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81083bc:	4b20      	ldr	r3, [pc, #128]	; (8108440 <prvAddCurrentTaskToDelayedList+0x94>)
 81083be:	681b      	ldr	r3, [r3, #0]
 81083c0:	3304      	adds	r3, #4
 81083c2:	4618      	mov	r0, r3
 81083c4:	f7fe fa1e 	bl	8106804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 81083c8:	687b      	ldr	r3, [r7, #4]
 81083ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 81083ce:	d10a      	bne.n	81083e6 <prvAddCurrentTaskToDelayedList+0x3a>
 81083d0:	683b      	ldr	r3, [r7, #0]
 81083d2:	2b00      	cmp	r3, #0
 81083d4:	d007      	beq.n	81083e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81083d6:	4b1a      	ldr	r3, [pc, #104]	; (8108440 <prvAddCurrentTaskToDelayedList+0x94>)
 81083d8:	681b      	ldr	r3, [r3, #0]
 81083da:	3304      	adds	r3, #4
 81083dc:	4619      	mov	r1, r3
 81083de:	4819      	ldr	r0, [pc, #100]	; (8108444 <prvAddCurrentTaskToDelayedList+0x98>)
 81083e0:	f7fe f9b3 	bl	810674a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 81083e4:	e026      	b.n	8108434 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 81083e6:	68fa      	ldr	r2, [r7, #12]
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	4413      	add	r3, r2
 81083ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 81083ee:	4b14      	ldr	r3, [pc, #80]	; (8108440 <prvAddCurrentTaskToDelayedList+0x94>)
 81083f0:	681b      	ldr	r3, [r3, #0]
 81083f2:	68ba      	ldr	r2, [r7, #8]
 81083f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 81083f6:	68ba      	ldr	r2, [r7, #8]
 81083f8:	68fb      	ldr	r3, [r7, #12]
 81083fa:	429a      	cmp	r2, r3
 81083fc:	d209      	bcs.n	8108412 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 81083fe:	4b12      	ldr	r3, [pc, #72]	; (8108448 <prvAddCurrentTaskToDelayedList+0x9c>)
 8108400:	681a      	ldr	r2, [r3, #0]
 8108402:	4b0f      	ldr	r3, [pc, #60]	; (8108440 <prvAddCurrentTaskToDelayedList+0x94>)
 8108404:	681b      	ldr	r3, [r3, #0]
 8108406:	3304      	adds	r3, #4
 8108408:	4619      	mov	r1, r3
 810840a:	4610      	mov	r0, r2
 810840c:	f7fe f9c1 	bl	8106792 <vListInsert>
}
 8108410:	e010      	b.n	8108434 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8108412:	4b0e      	ldr	r3, [pc, #56]	; (810844c <prvAddCurrentTaskToDelayedList+0xa0>)
 8108414:	681a      	ldr	r2, [r3, #0]
 8108416:	4b0a      	ldr	r3, [pc, #40]	; (8108440 <prvAddCurrentTaskToDelayedList+0x94>)
 8108418:	681b      	ldr	r3, [r3, #0]
 810841a:	3304      	adds	r3, #4
 810841c:	4619      	mov	r1, r3
 810841e:	4610      	mov	r0, r2
 8108420:	f7fe f9b7 	bl	8106792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8108424:	4b0a      	ldr	r3, [pc, #40]	; (8108450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8108426:	681b      	ldr	r3, [r3, #0]
 8108428:	68ba      	ldr	r2, [r7, #8]
 810842a:	429a      	cmp	r2, r3
 810842c:	d202      	bcs.n	8108434 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810842e:	4a08      	ldr	r2, [pc, #32]	; (8108450 <prvAddCurrentTaskToDelayedList+0xa4>)
 8108430:	68bb      	ldr	r3, [r7, #8]
 8108432:	6013      	str	r3, [r2, #0]
}
 8108434:	bf00      	nop
 8108436:	3710      	adds	r7, #16
 8108438:	46bd      	mov	sp, r7
 810843a:	bd80      	pop	{r7, pc}
 810843c:	100049b4 	.word	0x100049b4
 8108440:	100044dc 	.word	0x100044dc
 8108444:	1000499c 	.word	0x1000499c
 8108448:	1000496c 	.word	0x1000496c
 810844c:	10004968 	.word	0x10004968
 8108450:	100049d0 	.word	0x100049d0

08108454 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8108454:	b580      	push	{r7, lr}
 8108456:	b08a      	sub	sp, #40	; 0x28
 8108458:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810845a:	2300      	movs	r3, #0
 810845c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810845e:	f000 faff 	bl	8108a60 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8108462:	4b1c      	ldr	r3, [pc, #112]	; (81084d4 <xTimerCreateTimerTask+0x80>)
 8108464:	681b      	ldr	r3, [r3, #0]
 8108466:	2b00      	cmp	r3, #0
 8108468:	d021      	beq.n	81084ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810846a:	2300      	movs	r3, #0
 810846c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810846e:	2300      	movs	r3, #0
 8108470:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8108472:	1d3a      	adds	r2, r7, #4
 8108474:	f107 0108 	add.w	r1, r7, #8
 8108478:	f107 030c 	add.w	r3, r7, #12
 810847c:	4618      	mov	r0, r3
 810847e:	f7fd ff47 	bl	8106310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8108482:	6879      	ldr	r1, [r7, #4]
 8108484:	68bb      	ldr	r3, [r7, #8]
 8108486:	68fa      	ldr	r2, [r7, #12]
 8108488:	9202      	str	r2, [sp, #8]
 810848a:	9301      	str	r3, [sp, #4]
 810848c:	2302      	movs	r3, #2
 810848e:	9300      	str	r3, [sp, #0]
 8108490:	2300      	movs	r3, #0
 8108492:	460a      	mov	r2, r1
 8108494:	4910      	ldr	r1, [pc, #64]	; (81084d8 <xTimerCreateTimerTask+0x84>)
 8108496:	4811      	ldr	r0, [pc, #68]	; (81084dc <xTimerCreateTimerTask+0x88>)
 8108498:	f7ff f8f6 	bl	8107688 <xTaskCreateStatic>
 810849c:	4602      	mov	r2, r0
 810849e:	4b10      	ldr	r3, [pc, #64]	; (81084e0 <xTimerCreateTimerTask+0x8c>)
 81084a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 81084a2:	4b0f      	ldr	r3, [pc, #60]	; (81084e0 <xTimerCreateTimerTask+0x8c>)
 81084a4:	681b      	ldr	r3, [r3, #0]
 81084a6:	2b00      	cmp	r3, #0
 81084a8:	d001      	beq.n	81084ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 81084aa:	2301      	movs	r3, #1
 81084ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 81084ae:	697b      	ldr	r3, [r7, #20]
 81084b0:	2b00      	cmp	r3, #0
 81084b2:	d109      	bne.n	81084c8 <xTimerCreateTimerTask+0x74>
 81084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81084b8:	f383 8811 	msr	BASEPRI, r3
 81084bc:	f3bf 8f6f 	isb	sy
 81084c0:	f3bf 8f4f 	dsb	sy
 81084c4:	613b      	str	r3, [r7, #16]
 81084c6:	e7fe      	b.n	81084c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 81084c8:	697b      	ldr	r3, [r7, #20]
}
 81084ca:	4618      	mov	r0, r3
 81084cc:	3718      	adds	r7, #24
 81084ce:	46bd      	mov	sp, r7
 81084d0:	bd80      	pop	{r7, pc}
 81084d2:	bf00      	nop
 81084d4:	10004a0c 	.word	0x10004a0c
 81084d8:	0810ac14 	.word	0x0810ac14
 81084dc:	08108615 	.word	0x08108615
 81084e0:	10004a10 	.word	0x10004a10

081084e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 81084e4:	b580      	push	{r7, lr}
 81084e6:	b08a      	sub	sp, #40	; 0x28
 81084e8:	af00      	add	r7, sp, #0
 81084ea:	60f8      	str	r0, [r7, #12]
 81084ec:	60b9      	str	r1, [r7, #8]
 81084ee:	607a      	str	r2, [r7, #4]
 81084f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 81084f2:	2300      	movs	r3, #0
 81084f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 81084f6:	68fb      	ldr	r3, [r7, #12]
 81084f8:	2b00      	cmp	r3, #0
 81084fa:	d109      	bne.n	8108510 <xTimerGenericCommand+0x2c>
 81084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108500:	f383 8811 	msr	BASEPRI, r3
 8108504:	f3bf 8f6f 	isb	sy
 8108508:	f3bf 8f4f 	dsb	sy
 810850c:	623b      	str	r3, [r7, #32]
 810850e:	e7fe      	b.n	810850e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8108510:	4b19      	ldr	r3, [pc, #100]	; (8108578 <xTimerGenericCommand+0x94>)
 8108512:	681b      	ldr	r3, [r3, #0]
 8108514:	2b00      	cmp	r3, #0
 8108516:	d02a      	beq.n	810856e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8108518:	68bb      	ldr	r3, [r7, #8]
 810851a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8108520:	68fb      	ldr	r3, [r7, #12]
 8108522:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8108524:	68bb      	ldr	r3, [r7, #8]
 8108526:	2b05      	cmp	r3, #5
 8108528:	dc18      	bgt.n	810855c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810852a:	f7ff feb5 	bl	8108298 <xTaskGetSchedulerState>
 810852e:	4603      	mov	r3, r0
 8108530:	2b02      	cmp	r3, #2
 8108532:	d109      	bne.n	8108548 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8108534:	4b10      	ldr	r3, [pc, #64]	; (8108578 <xTimerGenericCommand+0x94>)
 8108536:	6818      	ldr	r0, [r3, #0]
 8108538:	f107 0110 	add.w	r1, r7, #16
 810853c:	2300      	movs	r3, #0
 810853e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108540:	f7fe fccc 	bl	8106edc <xQueueGenericSend>
 8108544:	6278      	str	r0, [r7, #36]	; 0x24
 8108546:	e012      	b.n	810856e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8108548:	4b0b      	ldr	r3, [pc, #44]	; (8108578 <xTimerGenericCommand+0x94>)
 810854a:	6818      	ldr	r0, [r3, #0]
 810854c:	f107 0110 	add.w	r1, r7, #16
 8108550:	2300      	movs	r3, #0
 8108552:	2200      	movs	r2, #0
 8108554:	f7fe fcc2 	bl	8106edc <xQueueGenericSend>
 8108558:	6278      	str	r0, [r7, #36]	; 0x24
 810855a:	e008      	b.n	810856e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810855c:	4b06      	ldr	r3, [pc, #24]	; (8108578 <xTimerGenericCommand+0x94>)
 810855e:	6818      	ldr	r0, [r3, #0]
 8108560:	f107 0110 	add.w	r1, r7, #16
 8108564:	2300      	movs	r3, #0
 8108566:	683a      	ldr	r2, [r7, #0]
 8108568:	f7fe fdb2 	bl	81070d0 <xQueueGenericSendFromISR>
 810856c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8108570:	4618      	mov	r0, r3
 8108572:	3728      	adds	r7, #40	; 0x28
 8108574:	46bd      	mov	sp, r7
 8108576:	bd80      	pop	{r7, pc}
 8108578:	10004a0c 	.word	0x10004a0c

0810857c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810857c:	b580      	push	{r7, lr}
 810857e:	b088      	sub	sp, #32
 8108580:	af02      	add	r7, sp, #8
 8108582:	6078      	str	r0, [r7, #4]
 8108584:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8108586:	4b22      	ldr	r3, [pc, #136]	; (8108610 <prvProcessExpiredTimer+0x94>)
 8108588:	681b      	ldr	r3, [r3, #0]
 810858a:	68db      	ldr	r3, [r3, #12]
 810858c:	68db      	ldr	r3, [r3, #12]
 810858e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108590:	697b      	ldr	r3, [r7, #20]
 8108592:	3304      	adds	r3, #4
 8108594:	4618      	mov	r0, r3
 8108596:	f7fe f935 	bl	8106804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810859a:	697b      	ldr	r3, [r7, #20]
 810859c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81085a0:	f003 0304 	and.w	r3, r3, #4
 81085a4:	2b00      	cmp	r3, #0
 81085a6:	d021      	beq.n	81085ec <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 81085a8:	697b      	ldr	r3, [r7, #20]
 81085aa:	699a      	ldr	r2, [r3, #24]
 81085ac:	687b      	ldr	r3, [r7, #4]
 81085ae:	18d1      	adds	r1, r2, r3
 81085b0:	687b      	ldr	r3, [r7, #4]
 81085b2:	683a      	ldr	r2, [r7, #0]
 81085b4:	6978      	ldr	r0, [r7, #20]
 81085b6:	f000 f8d1 	bl	810875c <prvInsertTimerInActiveList>
 81085ba:	4603      	mov	r3, r0
 81085bc:	2b00      	cmp	r3, #0
 81085be:	d01e      	beq.n	81085fe <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81085c0:	2300      	movs	r3, #0
 81085c2:	9300      	str	r3, [sp, #0]
 81085c4:	2300      	movs	r3, #0
 81085c6:	687a      	ldr	r2, [r7, #4]
 81085c8:	2100      	movs	r1, #0
 81085ca:	6978      	ldr	r0, [r7, #20]
 81085cc:	f7ff ff8a 	bl	81084e4 <xTimerGenericCommand>
 81085d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 81085d2:	693b      	ldr	r3, [r7, #16]
 81085d4:	2b00      	cmp	r3, #0
 81085d6:	d112      	bne.n	81085fe <prvProcessExpiredTimer+0x82>
 81085d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81085dc:	f383 8811 	msr	BASEPRI, r3
 81085e0:	f3bf 8f6f 	isb	sy
 81085e4:	f3bf 8f4f 	dsb	sy
 81085e8:	60fb      	str	r3, [r7, #12]
 81085ea:	e7fe      	b.n	81085ea <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81085ec:	697b      	ldr	r3, [r7, #20]
 81085ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81085f2:	f023 0301 	bic.w	r3, r3, #1
 81085f6:	b2da      	uxtb	r2, r3
 81085f8:	697b      	ldr	r3, [r7, #20]
 81085fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81085fe:	697b      	ldr	r3, [r7, #20]
 8108600:	6a1b      	ldr	r3, [r3, #32]
 8108602:	6978      	ldr	r0, [r7, #20]
 8108604:	4798      	blx	r3
}
 8108606:	bf00      	nop
 8108608:	3718      	adds	r7, #24
 810860a:	46bd      	mov	sp, r7
 810860c:	bd80      	pop	{r7, pc}
 810860e:	bf00      	nop
 8108610:	10004a04 	.word	0x10004a04

08108614 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8108614:	b580      	push	{r7, lr}
 8108616:	b084      	sub	sp, #16
 8108618:	af00      	add	r7, sp, #0
 810861a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810861c:	f107 0308 	add.w	r3, r7, #8
 8108620:	4618      	mov	r0, r3
 8108622:	f000 f857 	bl	81086d4 <prvGetNextExpireTime>
 8108626:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8108628:	68bb      	ldr	r3, [r7, #8]
 810862a:	4619      	mov	r1, r3
 810862c:	68f8      	ldr	r0, [r7, #12]
 810862e:	f000 f803 	bl	8108638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8108632:	f000 f8d5 	bl	81087e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8108636:	e7f1      	b.n	810861c <prvTimerTask+0x8>

08108638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8108638:	b580      	push	{r7, lr}
 810863a:	b084      	sub	sp, #16
 810863c:	af00      	add	r7, sp, #0
 810863e:	6078      	str	r0, [r7, #4]
 8108640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8108642:	f7ff fa57 	bl	8107af4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8108646:	f107 0308 	add.w	r3, r7, #8
 810864a:	4618      	mov	r0, r3
 810864c:	f000 f866 	bl	810871c <prvSampleTimeNow>
 8108650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8108652:	68bb      	ldr	r3, [r7, #8]
 8108654:	2b00      	cmp	r3, #0
 8108656:	d130      	bne.n	81086ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8108658:	683b      	ldr	r3, [r7, #0]
 810865a:	2b00      	cmp	r3, #0
 810865c:	d10a      	bne.n	8108674 <prvProcessTimerOrBlockTask+0x3c>
 810865e:	687a      	ldr	r2, [r7, #4]
 8108660:	68fb      	ldr	r3, [r7, #12]
 8108662:	429a      	cmp	r2, r3
 8108664:	d806      	bhi.n	8108674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8108666:	f7ff fa53 	bl	8107b10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810866a:	68f9      	ldr	r1, [r7, #12]
 810866c:	6878      	ldr	r0, [r7, #4]
 810866e:	f7ff ff85 	bl	810857c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8108672:	e024      	b.n	81086be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8108674:	683b      	ldr	r3, [r7, #0]
 8108676:	2b00      	cmp	r3, #0
 8108678:	d008      	beq.n	810868c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810867a:	4b13      	ldr	r3, [pc, #76]	; (81086c8 <prvProcessTimerOrBlockTask+0x90>)
 810867c:	681b      	ldr	r3, [r3, #0]
 810867e:	681b      	ldr	r3, [r3, #0]
 8108680:	2b00      	cmp	r3, #0
 8108682:	d101      	bne.n	8108688 <prvProcessTimerOrBlockTask+0x50>
 8108684:	2301      	movs	r3, #1
 8108686:	e000      	b.n	810868a <prvProcessTimerOrBlockTask+0x52>
 8108688:	2300      	movs	r3, #0
 810868a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810868c:	4b0f      	ldr	r3, [pc, #60]	; (81086cc <prvProcessTimerOrBlockTask+0x94>)
 810868e:	6818      	ldr	r0, [r3, #0]
 8108690:	687a      	ldr	r2, [r7, #4]
 8108692:	68fb      	ldr	r3, [r7, #12]
 8108694:	1ad3      	subs	r3, r2, r3
 8108696:	683a      	ldr	r2, [r7, #0]
 8108698:	4619      	mov	r1, r3
 810869a:	f7fe ffc1 	bl	8107620 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810869e:	f7ff fa37 	bl	8107b10 <xTaskResumeAll>
 81086a2:	4603      	mov	r3, r0
 81086a4:	2b00      	cmp	r3, #0
 81086a6:	d10a      	bne.n	81086be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 81086a8:	4b09      	ldr	r3, [pc, #36]	; (81086d0 <prvProcessTimerOrBlockTask+0x98>)
 81086aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81086ae:	601a      	str	r2, [r3, #0]
 81086b0:	f3bf 8f4f 	dsb	sy
 81086b4:	f3bf 8f6f 	isb	sy
}
 81086b8:	e001      	b.n	81086be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 81086ba:	f7ff fa29 	bl	8107b10 <xTaskResumeAll>
}
 81086be:	bf00      	nop
 81086c0:	3710      	adds	r7, #16
 81086c2:	46bd      	mov	sp, r7
 81086c4:	bd80      	pop	{r7, pc}
 81086c6:	bf00      	nop
 81086c8:	10004a08 	.word	0x10004a08
 81086cc:	10004a0c 	.word	0x10004a0c
 81086d0:	e000ed04 	.word	0xe000ed04

081086d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 81086d4:	b480      	push	{r7}
 81086d6:	b085      	sub	sp, #20
 81086d8:	af00      	add	r7, sp, #0
 81086da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 81086dc:	4b0e      	ldr	r3, [pc, #56]	; (8108718 <prvGetNextExpireTime+0x44>)
 81086de:	681b      	ldr	r3, [r3, #0]
 81086e0:	681b      	ldr	r3, [r3, #0]
 81086e2:	2b00      	cmp	r3, #0
 81086e4:	d101      	bne.n	81086ea <prvGetNextExpireTime+0x16>
 81086e6:	2201      	movs	r2, #1
 81086e8:	e000      	b.n	81086ec <prvGetNextExpireTime+0x18>
 81086ea:	2200      	movs	r2, #0
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 81086f0:	687b      	ldr	r3, [r7, #4]
 81086f2:	681b      	ldr	r3, [r3, #0]
 81086f4:	2b00      	cmp	r3, #0
 81086f6:	d105      	bne.n	8108704 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81086f8:	4b07      	ldr	r3, [pc, #28]	; (8108718 <prvGetNextExpireTime+0x44>)
 81086fa:	681b      	ldr	r3, [r3, #0]
 81086fc:	68db      	ldr	r3, [r3, #12]
 81086fe:	681b      	ldr	r3, [r3, #0]
 8108700:	60fb      	str	r3, [r7, #12]
 8108702:	e001      	b.n	8108708 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8108704:	2300      	movs	r3, #0
 8108706:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8108708:	68fb      	ldr	r3, [r7, #12]
}
 810870a:	4618      	mov	r0, r3
 810870c:	3714      	adds	r7, #20
 810870e:	46bd      	mov	sp, r7
 8108710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108714:	4770      	bx	lr
 8108716:	bf00      	nop
 8108718:	10004a04 	.word	0x10004a04

0810871c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810871c:	b580      	push	{r7, lr}
 810871e:	b084      	sub	sp, #16
 8108720:	af00      	add	r7, sp, #0
 8108722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8108724:	f7ff fa90 	bl	8107c48 <xTaskGetTickCount>
 8108728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810872a:	4b0b      	ldr	r3, [pc, #44]	; (8108758 <prvSampleTimeNow+0x3c>)
 810872c:	681b      	ldr	r3, [r3, #0]
 810872e:	68fa      	ldr	r2, [r7, #12]
 8108730:	429a      	cmp	r2, r3
 8108732:	d205      	bcs.n	8108740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8108734:	f000 f930 	bl	8108998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8108738:	687b      	ldr	r3, [r7, #4]
 810873a:	2201      	movs	r2, #1
 810873c:	601a      	str	r2, [r3, #0]
 810873e:	e002      	b.n	8108746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8108740:	687b      	ldr	r3, [r7, #4]
 8108742:	2200      	movs	r2, #0
 8108744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8108746:	4a04      	ldr	r2, [pc, #16]	; (8108758 <prvSampleTimeNow+0x3c>)
 8108748:	68fb      	ldr	r3, [r7, #12]
 810874a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810874c:	68fb      	ldr	r3, [r7, #12]
}
 810874e:	4618      	mov	r0, r3
 8108750:	3710      	adds	r7, #16
 8108752:	46bd      	mov	sp, r7
 8108754:	bd80      	pop	{r7, pc}
 8108756:	bf00      	nop
 8108758:	10004a14 	.word	0x10004a14

0810875c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810875c:	b580      	push	{r7, lr}
 810875e:	b086      	sub	sp, #24
 8108760:	af00      	add	r7, sp, #0
 8108762:	60f8      	str	r0, [r7, #12]
 8108764:	60b9      	str	r1, [r7, #8]
 8108766:	607a      	str	r2, [r7, #4]
 8108768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810876a:	2300      	movs	r3, #0
 810876c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810876e:	68fb      	ldr	r3, [r7, #12]
 8108770:	68ba      	ldr	r2, [r7, #8]
 8108772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8108774:	68fb      	ldr	r3, [r7, #12]
 8108776:	68fa      	ldr	r2, [r7, #12]
 8108778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810877a:	68ba      	ldr	r2, [r7, #8]
 810877c:	687b      	ldr	r3, [r7, #4]
 810877e:	429a      	cmp	r2, r3
 8108780:	d812      	bhi.n	81087a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8108782:	687a      	ldr	r2, [r7, #4]
 8108784:	683b      	ldr	r3, [r7, #0]
 8108786:	1ad2      	subs	r2, r2, r3
 8108788:	68fb      	ldr	r3, [r7, #12]
 810878a:	699b      	ldr	r3, [r3, #24]
 810878c:	429a      	cmp	r2, r3
 810878e:	d302      	bcc.n	8108796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8108790:	2301      	movs	r3, #1
 8108792:	617b      	str	r3, [r7, #20]
 8108794:	e01b      	b.n	81087ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8108796:	4b10      	ldr	r3, [pc, #64]	; (81087d8 <prvInsertTimerInActiveList+0x7c>)
 8108798:	681a      	ldr	r2, [r3, #0]
 810879a:	68fb      	ldr	r3, [r7, #12]
 810879c:	3304      	adds	r3, #4
 810879e:	4619      	mov	r1, r3
 81087a0:	4610      	mov	r0, r2
 81087a2:	f7fd fff6 	bl	8106792 <vListInsert>
 81087a6:	e012      	b.n	81087ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 81087a8:	687a      	ldr	r2, [r7, #4]
 81087aa:	683b      	ldr	r3, [r7, #0]
 81087ac:	429a      	cmp	r2, r3
 81087ae:	d206      	bcs.n	81087be <prvInsertTimerInActiveList+0x62>
 81087b0:	68ba      	ldr	r2, [r7, #8]
 81087b2:	683b      	ldr	r3, [r7, #0]
 81087b4:	429a      	cmp	r2, r3
 81087b6:	d302      	bcc.n	81087be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 81087b8:	2301      	movs	r3, #1
 81087ba:	617b      	str	r3, [r7, #20]
 81087bc:	e007      	b.n	81087ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81087be:	4b07      	ldr	r3, [pc, #28]	; (81087dc <prvInsertTimerInActiveList+0x80>)
 81087c0:	681a      	ldr	r2, [r3, #0]
 81087c2:	68fb      	ldr	r3, [r7, #12]
 81087c4:	3304      	adds	r3, #4
 81087c6:	4619      	mov	r1, r3
 81087c8:	4610      	mov	r0, r2
 81087ca:	f7fd ffe2 	bl	8106792 <vListInsert>
		}
	}

	return xProcessTimerNow;
 81087ce:	697b      	ldr	r3, [r7, #20]
}
 81087d0:	4618      	mov	r0, r3
 81087d2:	3718      	adds	r7, #24
 81087d4:	46bd      	mov	sp, r7
 81087d6:	bd80      	pop	{r7, pc}
 81087d8:	10004a08 	.word	0x10004a08
 81087dc:	10004a04 	.word	0x10004a04

081087e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 81087e0:	b580      	push	{r7, lr}
 81087e2:	b08e      	sub	sp, #56	; 0x38
 81087e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 81087e6:	e0c6      	b.n	8108976 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 81087e8:	687b      	ldr	r3, [r7, #4]
 81087ea:	2b00      	cmp	r3, #0
 81087ec:	da17      	bge.n	810881e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 81087ee:	1d3b      	adds	r3, r7, #4
 81087f0:	3304      	adds	r3, #4
 81087f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 81087f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81087f6:	2b00      	cmp	r3, #0
 81087f8:	d109      	bne.n	810880e <prvProcessReceivedCommands+0x2e>
 81087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81087fe:	f383 8811 	msr	BASEPRI, r3
 8108802:	f3bf 8f6f 	isb	sy
 8108806:	f3bf 8f4f 	dsb	sy
 810880a:	61fb      	str	r3, [r7, #28]
 810880c:	e7fe      	b.n	810880c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108810:	681b      	ldr	r3, [r3, #0]
 8108812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108814:	6850      	ldr	r0, [r2, #4]
 8108816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108818:	6892      	ldr	r2, [r2, #8]
 810881a:	4611      	mov	r1, r2
 810881c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810881e:	687b      	ldr	r3, [r7, #4]
 8108820:	2b00      	cmp	r3, #0
 8108822:	f2c0 80a7 	blt.w	8108974 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8108826:	68fb      	ldr	r3, [r7, #12]
 8108828:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810882c:	695b      	ldr	r3, [r3, #20]
 810882e:	2b00      	cmp	r3, #0
 8108830:	d004      	beq.n	810883c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108834:	3304      	adds	r3, #4
 8108836:	4618      	mov	r0, r3
 8108838:	f7fd ffe4 	bl	8106804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810883c:	463b      	mov	r3, r7
 810883e:	4618      	mov	r0, r3
 8108840:	f7ff ff6c 	bl	810871c <prvSampleTimeNow>
 8108844:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8108846:	687b      	ldr	r3, [r7, #4]
 8108848:	2b09      	cmp	r3, #9
 810884a:	f200 8094 	bhi.w	8108976 <prvProcessReceivedCommands+0x196>
 810884e:	a201      	add	r2, pc, #4	; (adr r2, 8108854 <prvProcessReceivedCommands+0x74>)
 8108850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108854:	0810887d 	.word	0x0810887d
 8108858:	0810887d 	.word	0x0810887d
 810885c:	0810887d 	.word	0x0810887d
 8108860:	081088ef 	.word	0x081088ef
 8108864:	08108903 	.word	0x08108903
 8108868:	0810894b 	.word	0x0810894b
 810886c:	0810887d 	.word	0x0810887d
 8108870:	0810887d 	.word	0x0810887d
 8108874:	081088ef 	.word	0x081088ef
 8108878:	08108903 	.word	0x08108903
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810887c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810887e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108882:	f043 0301 	orr.w	r3, r3, #1
 8108886:	b2da      	uxtb	r2, r3
 8108888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810888a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810888e:	68ba      	ldr	r2, [r7, #8]
 8108890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108892:	699b      	ldr	r3, [r3, #24]
 8108894:	18d1      	adds	r1, r2, r3
 8108896:	68bb      	ldr	r3, [r7, #8]
 8108898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810889a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810889c:	f7ff ff5e 	bl	810875c <prvInsertTimerInActiveList>
 81088a0:	4603      	mov	r3, r0
 81088a2:	2b00      	cmp	r3, #0
 81088a4:	d067      	beq.n	8108976 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088a8:	6a1b      	ldr	r3, [r3, #32]
 81088aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81088ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81088b4:	f003 0304 	and.w	r3, r3, #4
 81088b8:	2b00      	cmp	r3, #0
 81088ba:	d05c      	beq.n	8108976 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 81088bc:	68ba      	ldr	r2, [r7, #8]
 81088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088c0:	699b      	ldr	r3, [r3, #24]
 81088c2:	441a      	add	r2, r3
 81088c4:	2300      	movs	r3, #0
 81088c6:	9300      	str	r3, [sp, #0]
 81088c8:	2300      	movs	r3, #0
 81088ca:	2100      	movs	r1, #0
 81088cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81088ce:	f7ff fe09 	bl	81084e4 <xTimerGenericCommand>
 81088d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 81088d4:	6a3b      	ldr	r3, [r7, #32]
 81088d6:	2b00      	cmp	r3, #0
 81088d8:	d14d      	bne.n	8108976 <prvProcessReceivedCommands+0x196>
 81088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 81088de:	f383 8811 	msr	BASEPRI, r3
 81088e2:	f3bf 8f6f 	isb	sy
 81088e6:	f3bf 8f4f 	dsb	sy
 81088ea:	61bb      	str	r3, [r7, #24]
 81088ec:	e7fe      	b.n	81088ec <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 81088ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81088f4:	f023 0301 	bic.w	r3, r3, #1
 81088f8:	b2da      	uxtb	r2, r3
 81088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81088fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8108900:	e039      	b.n	8108976 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8108902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108908:	f043 0301 	orr.w	r3, r3, #1
 810890c:	b2da      	uxtb	r2, r3
 810890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8108914:	68ba      	ldr	r2, [r7, #8]
 8108916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108918:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810891c:	699b      	ldr	r3, [r3, #24]
 810891e:	2b00      	cmp	r3, #0
 8108920:	d109      	bne.n	8108936 <prvProcessReceivedCommands+0x156>
 8108922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108926:	f383 8811 	msr	BASEPRI, r3
 810892a:	f3bf 8f6f 	isb	sy
 810892e:	f3bf 8f4f 	dsb	sy
 8108932:	617b      	str	r3, [r7, #20]
 8108934:	e7fe      	b.n	8108934 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8108936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108938:	699a      	ldr	r2, [r3, #24]
 810893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810893c:	18d1      	adds	r1, r2, r3
 810893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8108944:	f7ff ff0a 	bl	810875c <prvInsertTimerInActiveList>
					break;
 8108948:	e015      	b.n	8108976 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810894c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108950:	f003 0302 	and.w	r3, r3, #2
 8108954:	2b00      	cmp	r3, #0
 8108956:	d103      	bne.n	8108960 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8108958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810895a:	f7fd fdb5 	bl	81064c8 <vPortFree>
 810895e:	e00a      	b.n	8108976 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108966:	f023 0301 	bic.w	r3, r3, #1
 810896a:	b2da      	uxtb	r2, r3
 810896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810896e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8108972:	e000      	b.n	8108976 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8108974:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8108976:	4b07      	ldr	r3, [pc, #28]	; (8108994 <prvProcessReceivedCommands+0x1b4>)
 8108978:	681b      	ldr	r3, [r3, #0]
 810897a:	1d39      	adds	r1, r7, #4
 810897c:	2200      	movs	r2, #0
 810897e:	4618      	mov	r0, r3
 8108980:	f7fe fc3a 	bl	81071f8 <xQueueReceive>
 8108984:	4603      	mov	r3, r0
 8108986:	2b00      	cmp	r3, #0
 8108988:	f47f af2e 	bne.w	81087e8 <prvProcessReceivedCommands+0x8>
	}
}
 810898c:	bf00      	nop
 810898e:	3730      	adds	r7, #48	; 0x30
 8108990:	46bd      	mov	sp, r7
 8108992:	bd80      	pop	{r7, pc}
 8108994:	10004a0c 	.word	0x10004a0c

08108998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8108998:	b580      	push	{r7, lr}
 810899a:	b088      	sub	sp, #32
 810899c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810899e:	e047      	b.n	8108a30 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 81089a0:	4b2d      	ldr	r3, [pc, #180]	; (8108a58 <prvSwitchTimerLists+0xc0>)
 81089a2:	681b      	ldr	r3, [r3, #0]
 81089a4:	68db      	ldr	r3, [r3, #12]
 81089a6:	681b      	ldr	r3, [r3, #0]
 81089a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81089aa:	4b2b      	ldr	r3, [pc, #172]	; (8108a58 <prvSwitchTimerLists+0xc0>)
 81089ac:	681b      	ldr	r3, [r3, #0]
 81089ae:	68db      	ldr	r3, [r3, #12]
 81089b0:	68db      	ldr	r3, [r3, #12]
 81089b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 81089b4:	68fb      	ldr	r3, [r7, #12]
 81089b6:	3304      	adds	r3, #4
 81089b8:	4618      	mov	r0, r3
 81089ba:	f7fd ff23 	bl	8106804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 81089be:	68fb      	ldr	r3, [r7, #12]
 81089c0:	6a1b      	ldr	r3, [r3, #32]
 81089c2:	68f8      	ldr	r0, [r7, #12]
 81089c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81089c6:	68fb      	ldr	r3, [r7, #12]
 81089c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81089cc:	f003 0304 	and.w	r3, r3, #4
 81089d0:	2b00      	cmp	r3, #0
 81089d2:	d02d      	beq.n	8108a30 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81089d4:	68fb      	ldr	r3, [r7, #12]
 81089d6:	699b      	ldr	r3, [r3, #24]
 81089d8:	693a      	ldr	r2, [r7, #16]
 81089da:	4413      	add	r3, r2
 81089dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81089de:	68ba      	ldr	r2, [r7, #8]
 81089e0:	693b      	ldr	r3, [r7, #16]
 81089e2:	429a      	cmp	r2, r3
 81089e4:	d90e      	bls.n	8108a04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81089e6:	68fb      	ldr	r3, [r7, #12]
 81089e8:	68ba      	ldr	r2, [r7, #8]
 81089ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81089ec:	68fb      	ldr	r3, [r7, #12]
 81089ee:	68fa      	ldr	r2, [r7, #12]
 81089f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81089f2:	4b19      	ldr	r3, [pc, #100]	; (8108a58 <prvSwitchTimerLists+0xc0>)
 81089f4:	681a      	ldr	r2, [r3, #0]
 81089f6:	68fb      	ldr	r3, [r7, #12]
 81089f8:	3304      	adds	r3, #4
 81089fa:	4619      	mov	r1, r3
 81089fc:	4610      	mov	r0, r2
 81089fe:	f7fd fec8 	bl	8106792 <vListInsert>
 8108a02:	e015      	b.n	8108a30 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8108a04:	2300      	movs	r3, #0
 8108a06:	9300      	str	r3, [sp, #0]
 8108a08:	2300      	movs	r3, #0
 8108a0a:	693a      	ldr	r2, [r7, #16]
 8108a0c:	2100      	movs	r1, #0
 8108a0e:	68f8      	ldr	r0, [r7, #12]
 8108a10:	f7ff fd68 	bl	81084e4 <xTimerGenericCommand>
 8108a14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8108a16:	687b      	ldr	r3, [r7, #4]
 8108a18:	2b00      	cmp	r3, #0
 8108a1a:	d109      	bne.n	8108a30 <prvSwitchTimerLists+0x98>
 8108a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a20:	f383 8811 	msr	BASEPRI, r3
 8108a24:	f3bf 8f6f 	isb	sy
 8108a28:	f3bf 8f4f 	dsb	sy
 8108a2c:	603b      	str	r3, [r7, #0]
 8108a2e:	e7fe      	b.n	8108a2e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8108a30:	4b09      	ldr	r3, [pc, #36]	; (8108a58 <prvSwitchTimerLists+0xc0>)
 8108a32:	681b      	ldr	r3, [r3, #0]
 8108a34:	681b      	ldr	r3, [r3, #0]
 8108a36:	2b00      	cmp	r3, #0
 8108a38:	d1b2      	bne.n	81089a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8108a3a:	4b07      	ldr	r3, [pc, #28]	; (8108a58 <prvSwitchTimerLists+0xc0>)
 8108a3c:	681b      	ldr	r3, [r3, #0]
 8108a3e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8108a40:	4b06      	ldr	r3, [pc, #24]	; (8108a5c <prvSwitchTimerLists+0xc4>)
 8108a42:	681b      	ldr	r3, [r3, #0]
 8108a44:	4a04      	ldr	r2, [pc, #16]	; (8108a58 <prvSwitchTimerLists+0xc0>)
 8108a46:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8108a48:	4a04      	ldr	r2, [pc, #16]	; (8108a5c <prvSwitchTimerLists+0xc4>)
 8108a4a:	697b      	ldr	r3, [r7, #20]
 8108a4c:	6013      	str	r3, [r2, #0]
}
 8108a4e:	bf00      	nop
 8108a50:	3718      	adds	r7, #24
 8108a52:	46bd      	mov	sp, r7
 8108a54:	bd80      	pop	{r7, pc}
 8108a56:	bf00      	nop
 8108a58:	10004a04 	.word	0x10004a04
 8108a5c:	10004a08 	.word	0x10004a08

08108a60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8108a60:	b580      	push	{r7, lr}
 8108a62:	b082      	sub	sp, #8
 8108a64:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8108a66:	f7fe f821 	bl	8106aac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8108a6a:	4b15      	ldr	r3, [pc, #84]	; (8108ac0 <prvCheckForValidListAndQueue+0x60>)
 8108a6c:	681b      	ldr	r3, [r3, #0]
 8108a6e:	2b00      	cmp	r3, #0
 8108a70:	d120      	bne.n	8108ab4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8108a72:	4814      	ldr	r0, [pc, #80]	; (8108ac4 <prvCheckForValidListAndQueue+0x64>)
 8108a74:	f7fd fe3c 	bl	81066f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8108a78:	4813      	ldr	r0, [pc, #76]	; (8108ac8 <prvCheckForValidListAndQueue+0x68>)
 8108a7a:	f7fd fe39 	bl	81066f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8108a7e:	4b13      	ldr	r3, [pc, #76]	; (8108acc <prvCheckForValidListAndQueue+0x6c>)
 8108a80:	4a10      	ldr	r2, [pc, #64]	; (8108ac4 <prvCheckForValidListAndQueue+0x64>)
 8108a82:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8108a84:	4b12      	ldr	r3, [pc, #72]	; (8108ad0 <prvCheckForValidListAndQueue+0x70>)
 8108a86:	4a10      	ldr	r2, [pc, #64]	; (8108ac8 <prvCheckForValidListAndQueue+0x68>)
 8108a88:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8108a8a:	2300      	movs	r3, #0
 8108a8c:	9300      	str	r3, [sp, #0]
 8108a8e:	4b11      	ldr	r3, [pc, #68]	; (8108ad4 <prvCheckForValidListAndQueue+0x74>)
 8108a90:	4a11      	ldr	r2, [pc, #68]	; (8108ad8 <prvCheckForValidListAndQueue+0x78>)
 8108a92:	2110      	movs	r1, #16
 8108a94:	200a      	movs	r0, #10
 8108a96:	f7fe f98b 	bl	8106db0 <xQueueGenericCreateStatic>
 8108a9a:	4602      	mov	r2, r0
 8108a9c:	4b08      	ldr	r3, [pc, #32]	; (8108ac0 <prvCheckForValidListAndQueue+0x60>)
 8108a9e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8108aa0:	4b07      	ldr	r3, [pc, #28]	; (8108ac0 <prvCheckForValidListAndQueue+0x60>)
 8108aa2:	681b      	ldr	r3, [r3, #0]
 8108aa4:	2b00      	cmp	r3, #0
 8108aa6:	d005      	beq.n	8108ab4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8108aa8:	4b05      	ldr	r3, [pc, #20]	; (8108ac0 <prvCheckForValidListAndQueue+0x60>)
 8108aaa:	681b      	ldr	r3, [r3, #0]
 8108aac:	490b      	ldr	r1, [pc, #44]	; (8108adc <prvCheckForValidListAndQueue+0x7c>)
 8108aae:	4618      	mov	r0, r3
 8108ab0:	f7fe fd8e 	bl	81075d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8108ab4:	f7fe f828 	bl	8106b08 <vPortExitCritical>
}
 8108ab8:	bf00      	nop
 8108aba:	46bd      	mov	sp, r7
 8108abc:	bd80      	pop	{r7, pc}
 8108abe:	bf00      	nop
 8108ac0:	10004a0c 	.word	0x10004a0c
 8108ac4:	100049dc 	.word	0x100049dc
 8108ac8:	100049f0 	.word	0x100049f0
 8108acc:	10004a04 	.word	0x10004a04
 8108ad0:	10004a08 	.word	0x10004a08
 8108ad4:	10004ab8 	.word	0x10004ab8
 8108ad8:	10004a18 	.word	0x10004a18
 8108adc:	0810ac1c 	.word	0x0810ac1c

08108ae0 <__errno>:
 8108ae0:	4b01      	ldr	r3, [pc, #4]	; (8108ae8 <__errno+0x8>)
 8108ae2:	6818      	ldr	r0, [r3, #0]
 8108ae4:	4770      	bx	lr
 8108ae6:	bf00      	nop
 8108ae8:	10000010 	.word	0x10000010

08108aec <__libc_init_array>:
 8108aec:	b570      	push	{r4, r5, r6, lr}
 8108aee:	4e0d      	ldr	r6, [pc, #52]	; (8108b24 <__libc_init_array+0x38>)
 8108af0:	4c0d      	ldr	r4, [pc, #52]	; (8108b28 <__libc_init_array+0x3c>)
 8108af2:	1ba4      	subs	r4, r4, r6
 8108af4:	10a4      	asrs	r4, r4, #2
 8108af6:	2500      	movs	r5, #0
 8108af8:	42a5      	cmp	r5, r4
 8108afa:	d109      	bne.n	8108b10 <__libc_init_array+0x24>
 8108afc:	4e0b      	ldr	r6, [pc, #44]	; (8108b2c <__libc_init_array+0x40>)
 8108afe:	4c0c      	ldr	r4, [pc, #48]	; (8108b30 <__libc_init_array+0x44>)
 8108b00:	f002 f860 	bl	810abc4 <_init>
 8108b04:	1ba4      	subs	r4, r4, r6
 8108b06:	10a4      	asrs	r4, r4, #2
 8108b08:	2500      	movs	r5, #0
 8108b0a:	42a5      	cmp	r5, r4
 8108b0c:	d105      	bne.n	8108b1a <__libc_init_array+0x2e>
 8108b0e:	bd70      	pop	{r4, r5, r6, pc}
 8108b10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8108b14:	4798      	blx	r3
 8108b16:	3501      	adds	r5, #1
 8108b18:	e7ee      	b.n	8108af8 <__libc_init_array+0xc>
 8108b1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8108b1e:	4798      	blx	r3
 8108b20:	3501      	adds	r5, #1
 8108b22:	e7f2      	b.n	8108b0a <__libc_init_array+0x1e>
 8108b24:	0810aed8 	.word	0x0810aed8
 8108b28:	0810aed8 	.word	0x0810aed8
 8108b2c:	0810aed8 	.word	0x0810aed8
 8108b30:	0810aedc 	.word	0x0810aedc

08108b34 <memcpy>:
 8108b34:	b510      	push	{r4, lr}
 8108b36:	1e43      	subs	r3, r0, #1
 8108b38:	440a      	add	r2, r1
 8108b3a:	4291      	cmp	r1, r2
 8108b3c:	d100      	bne.n	8108b40 <memcpy+0xc>
 8108b3e:	bd10      	pop	{r4, pc}
 8108b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108b44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108b48:	e7f7      	b.n	8108b3a <memcpy+0x6>

08108b4a <memset>:
 8108b4a:	4402      	add	r2, r0
 8108b4c:	4603      	mov	r3, r0
 8108b4e:	4293      	cmp	r3, r2
 8108b50:	d100      	bne.n	8108b54 <memset+0xa>
 8108b52:	4770      	bx	lr
 8108b54:	f803 1b01 	strb.w	r1, [r3], #1
 8108b58:	e7f9      	b.n	8108b4e <memset+0x4>

08108b5a <__cvt>:
 8108b5a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108b5e:	ec55 4b10 	vmov	r4, r5, d0
 8108b62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8108b64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8108b68:	2d00      	cmp	r5, #0
 8108b6a:	460e      	mov	r6, r1
 8108b6c:	4691      	mov	r9, r2
 8108b6e:	4619      	mov	r1, r3
 8108b70:	bfb8      	it	lt
 8108b72:	4622      	movlt	r2, r4
 8108b74:	462b      	mov	r3, r5
 8108b76:	f027 0720 	bic.w	r7, r7, #32
 8108b7a:	bfbb      	ittet	lt
 8108b7c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8108b80:	461d      	movlt	r5, r3
 8108b82:	2300      	movge	r3, #0
 8108b84:	232d      	movlt	r3, #45	; 0x2d
 8108b86:	bfb8      	it	lt
 8108b88:	4614      	movlt	r4, r2
 8108b8a:	2f46      	cmp	r7, #70	; 0x46
 8108b8c:	700b      	strb	r3, [r1, #0]
 8108b8e:	d004      	beq.n	8108b9a <__cvt+0x40>
 8108b90:	2f45      	cmp	r7, #69	; 0x45
 8108b92:	d100      	bne.n	8108b96 <__cvt+0x3c>
 8108b94:	3601      	adds	r6, #1
 8108b96:	2102      	movs	r1, #2
 8108b98:	e000      	b.n	8108b9c <__cvt+0x42>
 8108b9a:	2103      	movs	r1, #3
 8108b9c:	ab03      	add	r3, sp, #12
 8108b9e:	9301      	str	r3, [sp, #4]
 8108ba0:	ab02      	add	r3, sp, #8
 8108ba2:	9300      	str	r3, [sp, #0]
 8108ba4:	4632      	mov	r2, r6
 8108ba6:	4653      	mov	r3, sl
 8108ba8:	ec45 4b10 	vmov	d0, r4, r5
 8108bac:	f000 fce0 	bl	8109570 <_dtoa_r>
 8108bb0:	2f47      	cmp	r7, #71	; 0x47
 8108bb2:	4680      	mov	r8, r0
 8108bb4:	d102      	bne.n	8108bbc <__cvt+0x62>
 8108bb6:	f019 0f01 	tst.w	r9, #1
 8108bba:	d026      	beq.n	8108c0a <__cvt+0xb0>
 8108bbc:	2f46      	cmp	r7, #70	; 0x46
 8108bbe:	eb08 0906 	add.w	r9, r8, r6
 8108bc2:	d111      	bne.n	8108be8 <__cvt+0x8e>
 8108bc4:	f898 3000 	ldrb.w	r3, [r8]
 8108bc8:	2b30      	cmp	r3, #48	; 0x30
 8108bca:	d10a      	bne.n	8108be2 <__cvt+0x88>
 8108bcc:	2200      	movs	r2, #0
 8108bce:	2300      	movs	r3, #0
 8108bd0:	4620      	mov	r0, r4
 8108bd2:	4629      	mov	r1, r5
 8108bd4:	f7f8 f800 	bl	8100bd8 <__aeabi_dcmpeq>
 8108bd8:	b918      	cbnz	r0, 8108be2 <__cvt+0x88>
 8108bda:	f1c6 0601 	rsb	r6, r6, #1
 8108bde:	f8ca 6000 	str.w	r6, [sl]
 8108be2:	f8da 3000 	ldr.w	r3, [sl]
 8108be6:	4499      	add	r9, r3
 8108be8:	2200      	movs	r2, #0
 8108bea:	2300      	movs	r3, #0
 8108bec:	4620      	mov	r0, r4
 8108bee:	4629      	mov	r1, r5
 8108bf0:	f7f7 fff2 	bl	8100bd8 <__aeabi_dcmpeq>
 8108bf4:	b938      	cbnz	r0, 8108c06 <__cvt+0xac>
 8108bf6:	2230      	movs	r2, #48	; 0x30
 8108bf8:	9b03      	ldr	r3, [sp, #12]
 8108bfa:	454b      	cmp	r3, r9
 8108bfc:	d205      	bcs.n	8108c0a <__cvt+0xb0>
 8108bfe:	1c59      	adds	r1, r3, #1
 8108c00:	9103      	str	r1, [sp, #12]
 8108c02:	701a      	strb	r2, [r3, #0]
 8108c04:	e7f8      	b.n	8108bf8 <__cvt+0x9e>
 8108c06:	f8cd 900c 	str.w	r9, [sp, #12]
 8108c0a:	9b03      	ldr	r3, [sp, #12]
 8108c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8108c0e:	eba3 0308 	sub.w	r3, r3, r8
 8108c12:	4640      	mov	r0, r8
 8108c14:	6013      	str	r3, [r2, #0]
 8108c16:	b004      	add	sp, #16
 8108c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08108c1c <__exponent>:
 8108c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8108c1e:	2900      	cmp	r1, #0
 8108c20:	4604      	mov	r4, r0
 8108c22:	bfba      	itte	lt
 8108c24:	4249      	neglt	r1, r1
 8108c26:	232d      	movlt	r3, #45	; 0x2d
 8108c28:	232b      	movge	r3, #43	; 0x2b
 8108c2a:	2909      	cmp	r1, #9
 8108c2c:	f804 2b02 	strb.w	r2, [r4], #2
 8108c30:	7043      	strb	r3, [r0, #1]
 8108c32:	dd20      	ble.n	8108c76 <__exponent+0x5a>
 8108c34:	f10d 0307 	add.w	r3, sp, #7
 8108c38:	461f      	mov	r7, r3
 8108c3a:	260a      	movs	r6, #10
 8108c3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8108c40:	fb06 1115 	mls	r1, r6, r5, r1
 8108c44:	3130      	adds	r1, #48	; 0x30
 8108c46:	2d09      	cmp	r5, #9
 8108c48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8108c4c:	f103 32ff 	add.w	r2, r3, #4294967295
 8108c50:	4629      	mov	r1, r5
 8108c52:	dc09      	bgt.n	8108c68 <__exponent+0x4c>
 8108c54:	3130      	adds	r1, #48	; 0x30
 8108c56:	3b02      	subs	r3, #2
 8108c58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8108c5c:	42bb      	cmp	r3, r7
 8108c5e:	4622      	mov	r2, r4
 8108c60:	d304      	bcc.n	8108c6c <__exponent+0x50>
 8108c62:	1a10      	subs	r0, r2, r0
 8108c64:	b003      	add	sp, #12
 8108c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8108c68:	4613      	mov	r3, r2
 8108c6a:	e7e7      	b.n	8108c3c <__exponent+0x20>
 8108c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108c70:	f804 2b01 	strb.w	r2, [r4], #1
 8108c74:	e7f2      	b.n	8108c5c <__exponent+0x40>
 8108c76:	2330      	movs	r3, #48	; 0x30
 8108c78:	4419      	add	r1, r3
 8108c7a:	7083      	strb	r3, [r0, #2]
 8108c7c:	1d02      	adds	r2, r0, #4
 8108c7e:	70c1      	strb	r1, [r0, #3]
 8108c80:	e7ef      	b.n	8108c62 <__exponent+0x46>
	...

08108c84 <_printf_float>:
 8108c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108c88:	b08d      	sub	sp, #52	; 0x34
 8108c8a:	460c      	mov	r4, r1
 8108c8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8108c90:	4616      	mov	r6, r2
 8108c92:	461f      	mov	r7, r3
 8108c94:	4605      	mov	r5, r0
 8108c96:	f001 fa23 	bl	810a0e0 <_localeconv_r>
 8108c9a:	6803      	ldr	r3, [r0, #0]
 8108c9c:	9304      	str	r3, [sp, #16]
 8108c9e:	4618      	mov	r0, r3
 8108ca0:	f7f7 fb1e 	bl	81002e0 <strlen>
 8108ca4:	2300      	movs	r3, #0
 8108ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8108ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8108cac:	9005      	str	r0, [sp, #20]
 8108cae:	3307      	adds	r3, #7
 8108cb0:	f023 0307 	bic.w	r3, r3, #7
 8108cb4:	f103 0208 	add.w	r2, r3, #8
 8108cb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8108cbc:	f8d4 b000 	ldr.w	fp, [r4]
 8108cc0:	f8c8 2000 	str.w	r2, [r8]
 8108cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108cc8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8108ccc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8108cd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8108cd4:	9307      	str	r3, [sp, #28]
 8108cd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8108cda:	f04f 32ff 	mov.w	r2, #4294967295
 8108cde:	4ba7      	ldr	r3, [pc, #668]	; (8108f7c <_printf_float+0x2f8>)
 8108ce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8108ce4:	f7f7 ffaa 	bl	8100c3c <__aeabi_dcmpun>
 8108ce8:	bb70      	cbnz	r0, 8108d48 <_printf_float+0xc4>
 8108cea:	f04f 32ff 	mov.w	r2, #4294967295
 8108cee:	4ba3      	ldr	r3, [pc, #652]	; (8108f7c <_printf_float+0x2f8>)
 8108cf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8108cf4:	f7f7 ff84 	bl	8100c00 <__aeabi_dcmple>
 8108cf8:	bb30      	cbnz	r0, 8108d48 <_printf_float+0xc4>
 8108cfa:	2200      	movs	r2, #0
 8108cfc:	2300      	movs	r3, #0
 8108cfe:	4640      	mov	r0, r8
 8108d00:	4649      	mov	r1, r9
 8108d02:	f7f7 ff73 	bl	8100bec <__aeabi_dcmplt>
 8108d06:	b110      	cbz	r0, 8108d0e <_printf_float+0x8a>
 8108d08:	232d      	movs	r3, #45	; 0x2d
 8108d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108d0e:	4a9c      	ldr	r2, [pc, #624]	; (8108f80 <_printf_float+0x2fc>)
 8108d10:	4b9c      	ldr	r3, [pc, #624]	; (8108f84 <_printf_float+0x300>)
 8108d12:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8108d16:	bf8c      	ite	hi
 8108d18:	4690      	movhi	r8, r2
 8108d1a:	4698      	movls	r8, r3
 8108d1c:	2303      	movs	r3, #3
 8108d1e:	f02b 0204 	bic.w	r2, fp, #4
 8108d22:	6123      	str	r3, [r4, #16]
 8108d24:	6022      	str	r2, [r4, #0]
 8108d26:	f04f 0900 	mov.w	r9, #0
 8108d2a:	9700      	str	r7, [sp, #0]
 8108d2c:	4633      	mov	r3, r6
 8108d2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8108d30:	4621      	mov	r1, r4
 8108d32:	4628      	mov	r0, r5
 8108d34:	f000 f9e6 	bl	8109104 <_printf_common>
 8108d38:	3001      	adds	r0, #1
 8108d3a:	f040 808d 	bne.w	8108e58 <_printf_float+0x1d4>
 8108d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8108d42:	b00d      	add	sp, #52	; 0x34
 8108d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108d48:	4642      	mov	r2, r8
 8108d4a:	464b      	mov	r3, r9
 8108d4c:	4640      	mov	r0, r8
 8108d4e:	4649      	mov	r1, r9
 8108d50:	f7f7 ff74 	bl	8100c3c <__aeabi_dcmpun>
 8108d54:	b110      	cbz	r0, 8108d5c <_printf_float+0xd8>
 8108d56:	4a8c      	ldr	r2, [pc, #560]	; (8108f88 <_printf_float+0x304>)
 8108d58:	4b8c      	ldr	r3, [pc, #560]	; (8108f8c <_printf_float+0x308>)
 8108d5a:	e7da      	b.n	8108d12 <_printf_float+0x8e>
 8108d5c:	6861      	ldr	r1, [r4, #4]
 8108d5e:	1c4b      	adds	r3, r1, #1
 8108d60:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8108d64:	a80a      	add	r0, sp, #40	; 0x28
 8108d66:	d13e      	bne.n	8108de6 <_printf_float+0x162>
 8108d68:	2306      	movs	r3, #6
 8108d6a:	6063      	str	r3, [r4, #4]
 8108d6c:	2300      	movs	r3, #0
 8108d6e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8108d72:	ab09      	add	r3, sp, #36	; 0x24
 8108d74:	9300      	str	r3, [sp, #0]
 8108d76:	ec49 8b10 	vmov	d0, r8, r9
 8108d7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8108d7e:	6022      	str	r2, [r4, #0]
 8108d80:	f8cd a004 	str.w	sl, [sp, #4]
 8108d84:	6861      	ldr	r1, [r4, #4]
 8108d86:	4628      	mov	r0, r5
 8108d88:	f7ff fee7 	bl	8108b5a <__cvt>
 8108d8c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8108d90:	2b47      	cmp	r3, #71	; 0x47
 8108d92:	4680      	mov	r8, r0
 8108d94:	d109      	bne.n	8108daa <_printf_float+0x126>
 8108d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108d98:	1cd8      	adds	r0, r3, #3
 8108d9a:	db02      	blt.n	8108da2 <_printf_float+0x11e>
 8108d9c:	6862      	ldr	r2, [r4, #4]
 8108d9e:	4293      	cmp	r3, r2
 8108da0:	dd47      	ble.n	8108e32 <_printf_float+0x1ae>
 8108da2:	f1aa 0a02 	sub.w	sl, sl, #2
 8108da6:	fa5f fa8a 	uxtb.w	sl, sl
 8108daa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8108dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108db0:	d824      	bhi.n	8108dfc <_printf_float+0x178>
 8108db2:	3901      	subs	r1, #1
 8108db4:	4652      	mov	r2, sl
 8108db6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8108dba:	9109      	str	r1, [sp, #36]	; 0x24
 8108dbc:	f7ff ff2e 	bl	8108c1c <__exponent>
 8108dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108dc2:	1813      	adds	r3, r2, r0
 8108dc4:	2a01      	cmp	r2, #1
 8108dc6:	4681      	mov	r9, r0
 8108dc8:	6123      	str	r3, [r4, #16]
 8108dca:	dc02      	bgt.n	8108dd2 <_printf_float+0x14e>
 8108dcc:	6822      	ldr	r2, [r4, #0]
 8108dce:	07d1      	lsls	r1, r2, #31
 8108dd0:	d501      	bpl.n	8108dd6 <_printf_float+0x152>
 8108dd2:	3301      	adds	r3, #1
 8108dd4:	6123      	str	r3, [r4, #16]
 8108dd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d0a5      	beq.n	8108d2a <_printf_float+0xa6>
 8108dde:	232d      	movs	r3, #45	; 0x2d
 8108de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108de4:	e7a1      	b.n	8108d2a <_printf_float+0xa6>
 8108de6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8108dea:	f000 8177 	beq.w	81090dc <_printf_float+0x458>
 8108dee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8108df2:	d1bb      	bne.n	8108d6c <_printf_float+0xe8>
 8108df4:	2900      	cmp	r1, #0
 8108df6:	d1b9      	bne.n	8108d6c <_printf_float+0xe8>
 8108df8:	2301      	movs	r3, #1
 8108dfa:	e7b6      	b.n	8108d6a <_printf_float+0xe6>
 8108dfc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8108e00:	d119      	bne.n	8108e36 <_printf_float+0x1b2>
 8108e02:	2900      	cmp	r1, #0
 8108e04:	6863      	ldr	r3, [r4, #4]
 8108e06:	dd0c      	ble.n	8108e22 <_printf_float+0x19e>
 8108e08:	6121      	str	r1, [r4, #16]
 8108e0a:	b913      	cbnz	r3, 8108e12 <_printf_float+0x18e>
 8108e0c:	6822      	ldr	r2, [r4, #0]
 8108e0e:	07d2      	lsls	r2, r2, #31
 8108e10:	d502      	bpl.n	8108e18 <_printf_float+0x194>
 8108e12:	3301      	adds	r3, #1
 8108e14:	440b      	add	r3, r1
 8108e16:	6123      	str	r3, [r4, #16]
 8108e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108e1a:	65a3      	str	r3, [r4, #88]	; 0x58
 8108e1c:	f04f 0900 	mov.w	r9, #0
 8108e20:	e7d9      	b.n	8108dd6 <_printf_float+0x152>
 8108e22:	b913      	cbnz	r3, 8108e2a <_printf_float+0x1a6>
 8108e24:	6822      	ldr	r2, [r4, #0]
 8108e26:	07d0      	lsls	r0, r2, #31
 8108e28:	d501      	bpl.n	8108e2e <_printf_float+0x1aa>
 8108e2a:	3302      	adds	r3, #2
 8108e2c:	e7f3      	b.n	8108e16 <_printf_float+0x192>
 8108e2e:	2301      	movs	r3, #1
 8108e30:	e7f1      	b.n	8108e16 <_printf_float+0x192>
 8108e32:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8108e36:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8108e3a:	4293      	cmp	r3, r2
 8108e3c:	db05      	blt.n	8108e4a <_printf_float+0x1c6>
 8108e3e:	6822      	ldr	r2, [r4, #0]
 8108e40:	6123      	str	r3, [r4, #16]
 8108e42:	07d1      	lsls	r1, r2, #31
 8108e44:	d5e8      	bpl.n	8108e18 <_printf_float+0x194>
 8108e46:	3301      	adds	r3, #1
 8108e48:	e7e5      	b.n	8108e16 <_printf_float+0x192>
 8108e4a:	2b00      	cmp	r3, #0
 8108e4c:	bfd4      	ite	le
 8108e4e:	f1c3 0302 	rsble	r3, r3, #2
 8108e52:	2301      	movgt	r3, #1
 8108e54:	4413      	add	r3, r2
 8108e56:	e7de      	b.n	8108e16 <_printf_float+0x192>
 8108e58:	6823      	ldr	r3, [r4, #0]
 8108e5a:	055a      	lsls	r2, r3, #21
 8108e5c:	d407      	bmi.n	8108e6e <_printf_float+0x1ea>
 8108e5e:	6923      	ldr	r3, [r4, #16]
 8108e60:	4642      	mov	r2, r8
 8108e62:	4631      	mov	r1, r6
 8108e64:	4628      	mov	r0, r5
 8108e66:	47b8      	blx	r7
 8108e68:	3001      	adds	r0, #1
 8108e6a:	d12b      	bne.n	8108ec4 <_printf_float+0x240>
 8108e6c:	e767      	b.n	8108d3e <_printf_float+0xba>
 8108e6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8108e72:	f240 80dc 	bls.w	810902e <_printf_float+0x3aa>
 8108e76:	2200      	movs	r2, #0
 8108e78:	2300      	movs	r3, #0
 8108e7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108e7e:	f7f7 feab 	bl	8100bd8 <__aeabi_dcmpeq>
 8108e82:	2800      	cmp	r0, #0
 8108e84:	d033      	beq.n	8108eee <_printf_float+0x26a>
 8108e86:	2301      	movs	r3, #1
 8108e88:	4a41      	ldr	r2, [pc, #260]	; (8108f90 <_printf_float+0x30c>)
 8108e8a:	4631      	mov	r1, r6
 8108e8c:	4628      	mov	r0, r5
 8108e8e:	47b8      	blx	r7
 8108e90:	3001      	adds	r0, #1
 8108e92:	f43f af54 	beq.w	8108d3e <_printf_float+0xba>
 8108e96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108e9a:	429a      	cmp	r2, r3
 8108e9c:	db02      	blt.n	8108ea4 <_printf_float+0x220>
 8108e9e:	6823      	ldr	r3, [r4, #0]
 8108ea0:	07d8      	lsls	r0, r3, #31
 8108ea2:	d50f      	bpl.n	8108ec4 <_printf_float+0x240>
 8108ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108ea8:	4631      	mov	r1, r6
 8108eaa:	4628      	mov	r0, r5
 8108eac:	47b8      	blx	r7
 8108eae:	3001      	adds	r0, #1
 8108eb0:	f43f af45 	beq.w	8108d3e <_printf_float+0xba>
 8108eb4:	f04f 0800 	mov.w	r8, #0
 8108eb8:	f104 091a 	add.w	r9, r4, #26
 8108ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108ebe:	3b01      	subs	r3, #1
 8108ec0:	4543      	cmp	r3, r8
 8108ec2:	dc09      	bgt.n	8108ed8 <_printf_float+0x254>
 8108ec4:	6823      	ldr	r3, [r4, #0]
 8108ec6:	079b      	lsls	r3, r3, #30
 8108ec8:	f100 8103 	bmi.w	81090d2 <_printf_float+0x44e>
 8108ecc:	68e0      	ldr	r0, [r4, #12]
 8108ece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108ed0:	4298      	cmp	r0, r3
 8108ed2:	bfb8      	it	lt
 8108ed4:	4618      	movlt	r0, r3
 8108ed6:	e734      	b.n	8108d42 <_printf_float+0xbe>
 8108ed8:	2301      	movs	r3, #1
 8108eda:	464a      	mov	r2, r9
 8108edc:	4631      	mov	r1, r6
 8108ede:	4628      	mov	r0, r5
 8108ee0:	47b8      	blx	r7
 8108ee2:	3001      	adds	r0, #1
 8108ee4:	f43f af2b 	beq.w	8108d3e <_printf_float+0xba>
 8108ee8:	f108 0801 	add.w	r8, r8, #1
 8108eec:	e7e6      	b.n	8108ebc <_printf_float+0x238>
 8108eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108ef0:	2b00      	cmp	r3, #0
 8108ef2:	dc2b      	bgt.n	8108f4c <_printf_float+0x2c8>
 8108ef4:	2301      	movs	r3, #1
 8108ef6:	4a26      	ldr	r2, [pc, #152]	; (8108f90 <_printf_float+0x30c>)
 8108ef8:	4631      	mov	r1, r6
 8108efa:	4628      	mov	r0, r5
 8108efc:	47b8      	blx	r7
 8108efe:	3001      	adds	r0, #1
 8108f00:	f43f af1d 	beq.w	8108d3e <_printf_float+0xba>
 8108f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108f06:	b923      	cbnz	r3, 8108f12 <_printf_float+0x28e>
 8108f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108f0a:	b913      	cbnz	r3, 8108f12 <_printf_float+0x28e>
 8108f0c:	6823      	ldr	r3, [r4, #0]
 8108f0e:	07d9      	lsls	r1, r3, #31
 8108f10:	d5d8      	bpl.n	8108ec4 <_printf_float+0x240>
 8108f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108f16:	4631      	mov	r1, r6
 8108f18:	4628      	mov	r0, r5
 8108f1a:	47b8      	blx	r7
 8108f1c:	3001      	adds	r0, #1
 8108f1e:	f43f af0e 	beq.w	8108d3e <_printf_float+0xba>
 8108f22:	f04f 0900 	mov.w	r9, #0
 8108f26:	f104 0a1a 	add.w	sl, r4, #26
 8108f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108f2c:	425b      	negs	r3, r3
 8108f2e:	454b      	cmp	r3, r9
 8108f30:	dc01      	bgt.n	8108f36 <_printf_float+0x2b2>
 8108f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108f34:	e794      	b.n	8108e60 <_printf_float+0x1dc>
 8108f36:	2301      	movs	r3, #1
 8108f38:	4652      	mov	r2, sl
 8108f3a:	4631      	mov	r1, r6
 8108f3c:	4628      	mov	r0, r5
 8108f3e:	47b8      	blx	r7
 8108f40:	3001      	adds	r0, #1
 8108f42:	f43f aefc 	beq.w	8108d3e <_printf_float+0xba>
 8108f46:	f109 0901 	add.w	r9, r9, #1
 8108f4a:	e7ee      	b.n	8108f2a <_printf_float+0x2a6>
 8108f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8108f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8108f50:	429a      	cmp	r2, r3
 8108f52:	bfa8      	it	ge
 8108f54:	461a      	movge	r2, r3
 8108f56:	2a00      	cmp	r2, #0
 8108f58:	4691      	mov	r9, r2
 8108f5a:	dd07      	ble.n	8108f6c <_printf_float+0x2e8>
 8108f5c:	4613      	mov	r3, r2
 8108f5e:	4631      	mov	r1, r6
 8108f60:	4642      	mov	r2, r8
 8108f62:	4628      	mov	r0, r5
 8108f64:	47b8      	blx	r7
 8108f66:	3001      	adds	r0, #1
 8108f68:	f43f aee9 	beq.w	8108d3e <_printf_float+0xba>
 8108f6c:	f104 031a 	add.w	r3, r4, #26
 8108f70:	f04f 0b00 	mov.w	fp, #0
 8108f74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8108f78:	9306      	str	r3, [sp, #24]
 8108f7a:	e015      	b.n	8108fa8 <_printf_float+0x324>
 8108f7c:	7fefffff 	.word	0x7fefffff
 8108f80:	0810ac74 	.word	0x0810ac74
 8108f84:	0810ac70 	.word	0x0810ac70
 8108f88:	0810ac7c 	.word	0x0810ac7c
 8108f8c:	0810ac78 	.word	0x0810ac78
 8108f90:	0810ac80 	.word	0x0810ac80
 8108f94:	2301      	movs	r3, #1
 8108f96:	9a06      	ldr	r2, [sp, #24]
 8108f98:	4631      	mov	r1, r6
 8108f9a:	4628      	mov	r0, r5
 8108f9c:	47b8      	blx	r7
 8108f9e:	3001      	adds	r0, #1
 8108fa0:	f43f aecd 	beq.w	8108d3e <_printf_float+0xba>
 8108fa4:	f10b 0b01 	add.w	fp, fp, #1
 8108fa8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8108fac:	ebaa 0309 	sub.w	r3, sl, r9
 8108fb0:	455b      	cmp	r3, fp
 8108fb2:	dcef      	bgt.n	8108f94 <_printf_float+0x310>
 8108fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8108fb8:	429a      	cmp	r2, r3
 8108fba:	44d0      	add	r8, sl
 8108fbc:	db15      	blt.n	8108fea <_printf_float+0x366>
 8108fbe:	6823      	ldr	r3, [r4, #0]
 8108fc0:	07da      	lsls	r2, r3, #31
 8108fc2:	d412      	bmi.n	8108fea <_printf_float+0x366>
 8108fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108fc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108fc8:	eba3 020a 	sub.w	r2, r3, sl
 8108fcc:	eba3 0a01 	sub.w	sl, r3, r1
 8108fd0:	4592      	cmp	sl, r2
 8108fd2:	bfa8      	it	ge
 8108fd4:	4692      	movge	sl, r2
 8108fd6:	f1ba 0f00 	cmp.w	sl, #0
 8108fda:	dc0e      	bgt.n	8108ffa <_printf_float+0x376>
 8108fdc:	f04f 0800 	mov.w	r8, #0
 8108fe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8108fe4:	f104 091a 	add.w	r9, r4, #26
 8108fe8:	e019      	b.n	810901e <_printf_float+0x39a>
 8108fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8108fee:	4631      	mov	r1, r6
 8108ff0:	4628      	mov	r0, r5
 8108ff2:	47b8      	blx	r7
 8108ff4:	3001      	adds	r0, #1
 8108ff6:	d1e5      	bne.n	8108fc4 <_printf_float+0x340>
 8108ff8:	e6a1      	b.n	8108d3e <_printf_float+0xba>
 8108ffa:	4653      	mov	r3, sl
 8108ffc:	4642      	mov	r2, r8
 8108ffe:	4631      	mov	r1, r6
 8109000:	4628      	mov	r0, r5
 8109002:	47b8      	blx	r7
 8109004:	3001      	adds	r0, #1
 8109006:	d1e9      	bne.n	8108fdc <_printf_float+0x358>
 8109008:	e699      	b.n	8108d3e <_printf_float+0xba>
 810900a:	2301      	movs	r3, #1
 810900c:	464a      	mov	r2, r9
 810900e:	4631      	mov	r1, r6
 8109010:	4628      	mov	r0, r5
 8109012:	47b8      	blx	r7
 8109014:	3001      	adds	r0, #1
 8109016:	f43f ae92 	beq.w	8108d3e <_printf_float+0xba>
 810901a:	f108 0801 	add.w	r8, r8, #1
 810901e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109022:	1a9b      	subs	r3, r3, r2
 8109024:	eba3 030a 	sub.w	r3, r3, sl
 8109028:	4543      	cmp	r3, r8
 810902a:	dcee      	bgt.n	810900a <_printf_float+0x386>
 810902c:	e74a      	b.n	8108ec4 <_printf_float+0x240>
 810902e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109030:	2a01      	cmp	r2, #1
 8109032:	dc01      	bgt.n	8109038 <_printf_float+0x3b4>
 8109034:	07db      	lsls	r3, r3, #31
 8109036:	d53a      	bpl.n	81090ae <_printf_float+0x42a>
 8109038:	2301      	movs	r3, #1
 810903a:	4642      	mov	r2, r8
 810903c:	4631      	mov	r1, r6
 810903e:	4628      	mov	r0, r5
 8109040:	47b8      	blx	r7
 8109042:	3001      	adds	r0, #1
 8109044:	f43f ae7b 	beq.w	8108d3e <_printf_float+0xba>
 8109048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810904c:	4631      	mov	r1, r6
 810904e:	4628      	mov	r0, r5
 8109050:	47b8      	blx	r7
 8109052:	3001      	adds	r0, #1
 8109054:	f108 0801 	add.w	r8, r8, #1
 8109058:	f43f ae71 	beq.w	8108d3e <_printf_float+0xba>
 810905c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810905e:	2200      	movs	r2, #0
 8109060:	f103 3aff 	add.w	sl, r3, #4294967295
 8109064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109068:	2300      	movs	r3, #0
 810906a:	f7f7 fdb5 	bl	8100bd8 <__aeabi_dcmpeq>
 810906e:	b9c8      	cbnz	r0, 81090a4 <_printf_float+0x420>
 8109070:	4653      	mov	r3, sl
 8109072:	4642      	mov	r2, r8
 8109074:	4631      	mov	r1, r6
 8109076:	4628      	mov	r0, r5
 8109078:	47b8      	blx	r7
 810907a:	3001      	adds	r0, #1
 810907c:	d10e      	bne.n	810909c <_printf_float+0x418>
 810907e:	e65e      	b.n	8108d3e <_printf_float+0xba>
 8109080:	2301      	movs	r3, #1
 8109082:	4652      	mov	r2, sl
 8109084:	4631      	mov	r1, r6
 8109086:	4628      	mov	r0, r5
 8109088:	47b8      	blx	r7
 810908a:	3001      	adds	r0, #1
 810908c:	f43f ae57 	beq.w	8108d3e <_printf_float+0xba>
 8109090:	f108 0801 	add.w	r8, r8, #1
 8109094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109096:	3b01      	subs	r3, #1
 8109098:	4543      	cmp	r3, r8
 810909a:	dcf1      	bgt.n	8109080 <_printf_float+0x3fc>
 810909c:	464b      	mov	r3, r9
 810909e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81090a2:	e6de      	b.n	8108e62 <_printf_float+0x1de>
 81090a4:	f04f 0800 	mov.w	r8, #0
 81090a8:	f104 0a1a 	add.w	sl, r4, #26
 81090ac:	e7f2      	b.n	8109094 <_printf_float+0x410>
 81090ae:	2301      	movs	r3, #1
 81090b0:	e7df      	b.n	8109072 <_printf_float+0x3ee>
 81090b2:	2301      	movs	r3, #1
 81090b4:	464a      	mov	r2, r9
 81090b6:	4631      	mov	r1, r6
 81090b8:	4628      	mov	r0, r5
 81090ba:	47b8      	blx	r7
 81090bc:	3001      	adds	r0, #1
 81090be:	f43f ae3e 	beq.w	8108d3e <_printf_float+0xba>
 81090c2:	f108 0801 	add.w	r8, r8, #1
 81090c6:	68e3      	ldr	r3, [r4, #12]
 81090c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81090ca:	1a9b      	subs	r3, r3, r2
 81090cc:	4543      	cmp	r3, r8
 81090ce:	dcf0      	bgt.n	81090b2 <_printf_float+0x42e>
 81090d0:	e6fc      	b.n	8108ecc <_printf_float+0x248>
 81090d2:	f04f 0800 	mov.w	r8, #0
 81090d6:	f104 0919 	add.w	r9, r4, #25
 81090da:	e7f4      	b.n	81090c6 <_printf_float+0x442>
 81090dc:	2900      	cmp	r1, #0
 81090de:	f43f ae8b 	beq.w	8108df8 <_printf_float+0x174>
 81090e2:	2300      	movs	r3, #0
 81090e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 81090e8:	ab09      	add	r3, sp, #36	; 0x24
 81090ea:	9300      	str	r3, [sp, #0]
 81090ec:	ec49 8b10 	vmov	d0, r8, r9
 81090f0:	6022      	str	r2, [r4, #0]
 81090f2:	f8cd a004 	str.w	sl, [sp, #4]
 81090f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 81090fa:	4628      	mov	r0, r5
 81090fc:	f7ff fd2d 	bl	8108b5a <__cvt>
 8109100:	4680      	mov	r8, r0
 8109102:	e648      	b.n	8108d96 <_printf_float+0x112>

08109104 <_printf_common>:
 8109104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109108:	4691      	mov	r9, r2
 810910a:	461f      	mov	r7, r3
 810910c:	688a      	ldr	r2, [r1, #8]
 810910e:	690b      	ldr	r3, [r1, #16]
 8109110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109114:	4293      	cmp	r3, r2
 8109116:	bfb8      	it	lt
 8109118:	4613      	movlt	r3, r2
 810911a:	f8c9 3000 	str.w	r3, [r9]
 810911e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109122:	4606      	mov	r6, r0
 8109124:	460c      	mov	r4, r1
 8109126:	b112      	cbz	r2, 810912e <_printf_common+0x2a>
 8109128:	3301      	adds	r3, #1
 810912a:	f8c9 3000 	str.w	r3, [r9]
 810912e:	6823      	ldr	r3, [r4, #0]
 8109130:	0699      	lsls	r1, r3, #26
 8109132:	bf42      	ittt	mi
 8109134:	f8d9 3000 	ldrmi.w	r3, [r9]
 8109138:	3302      	addmi	r3, #2
 810913a:	f8c9 3000 	strmi.w	r3, [r9]
 810913e:	6825      	ldr	r5, [r4, #0]
 8109140:	f015 0506 	ands.w	r5, r5, #6
 8109144:	d107      	bne.n	8109156 <_printf_common+0x52>
 8109146:	f104 0a19 	add.w	sl, r4, #25
 810914a:	68e3      	ldr	r3, [r4, #12]
 810914c:	f8d9 2000 	ldr.w	r2, [r9]
 8109150:	1a9b      	subs	r3, r3, r2
 8109152:	42ab      	cmp	r3, r5
 8109154:	dc28      	bgt.n	81091a8 <_printf_common+0xa4>
 8109156:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810915a:	6822      	ldr	r2, [r4, #0]
 810915c:	3300      	adds	r3, #0
 810915e:	bf18      	it	ne
 8109160:	2301      	movne	r3, #1
 8109162:	0692      	lsls	r2, r2, #26
 8109164:	d42d      	bmi.n	81091c2 <_printf_common+0xbe>
 8109166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810916a:	4639      	mov	r1, r7
 810916c:	4630      	mov	r0, r6
 810916e:	47c0      	blx	r8
 8109170:	3001      	adds	r0, #1
 8109172:	d020      	beq.n	81091b6 <_printf_common+0xb2>
 8109174:	6823      	ldr	r3, [r4, #0]
 8109176:	68e5      	ldr	r5, [r4, #12]
 8109178:	f8d9 2000 	ldr.w	r2, [r9]
 810917c:	f003 0306 	and.w	r3, r3, #6
 8109180:	2b04      	cmp	r3, #4
 8109182:	bf08      	it	eq
 8109184:	1aad      	subeq	r5, r5, r2
 8109186:	68a3      	ldr	r3, [r4, #8]
 8109188:	6922      	ldr	r2, [r4, #16]
 810918a:	bf0c      	ite	eq
 810918c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109190:	2500      	movne	r5, #0
 8109192:	4293      	cmp	r3, r2
 8109194:	bfc4      	itt	gt
 8109196:	1a9b      	subgt	r3, r3, r2
 8109198:	18ed      	addgt	r5, r5, r3
 810919a:	f04f 0900 	mov.w	r9, #0
 810919e:	341a      	adds	r4, #26
 81091a0:	454d      	cmp	r5, r9
 81091a2:	d11a      	bne.n	81091da <_printf_common+0xd6>
 81091a4:	2000      	movs	r0, #0
 81091a6:	e008      	b.n	81091ba <_printf_common+0xb6>
 81091a8:	2301      	movs	r3, #1
 81091aa:	4652      	mov	r2, sl
 81091ac:	4639      	mov	r1, r7
 81091ae:	4630      	mov	r0, r6
 81091b0:	47c0      	blx	r8
 81091b2:	3001      	adds	r0, #1
 81091b4:	d103      	bne.n	81091be <_printf_common+0xba>
 81091b6:	f04f 30ff 	mov.w	r0, #4294967295
 81091ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81091be:	3501      	adds	r5, #1
 81091c0:	e7c3      	b.n	810914a <_printf_common+0x46>
 81091c2:	18e1      	adds	r1, r4, r3
 81091c4:	1c5a      	adds	r2, r3, #1
 81091c6:	2030      	movs	r0, #48	; 0x30
 81091c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81091cc:	4422      	add	r2, r4
 81091ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81091d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81091d6:	3302      	adds	r3, #2
 81091d8:	e7c5      	b.n	8109166 <_printf_common+0x62>
 81091da:	2301      	movs	r3, #1
 81091dc:	4622      	mov	r2, r4
 81091de:	4639      	mov	r1, r7
 81091e0:	4630      	mov	r0, r6
 81091e2:	47c0      	blx	r8
 81091e4:	3001      	adds	r0, #1
 81091e6:	d0e6      	beq.n	81091b6 <_printf_common+0xb2>
 81091e8:	f109 0901 	add.w	r9, r9, #1
 81091ec:	e7d8      	b.n	81091a0 <_printf_common+0x9c>
	...

081091f0 <_printf_i>:
 81091f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81091f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 81091f8:	460c      	mov	r4, r1
 81091fa:	7e09      	ldrb	r1, [r1, #24]
 81091fc:	b085      	sub	sp, #20
 81091fe:	296e      	cmp	r1, #110	; 0x6e
 8109200:	4617      	mov	r7, r2
 8109202:	4606      	mov	r6, r0
 8109204:	4698      	mov	r8, r3
 8109206:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109208:	f000 80b3 	beq.w	8109372 <_printf_i+0x182>
 810920c:	d822      	bhi.n	8109254 <_printf_i+0x64>
 810920e:	2963      	cmp	r1, #99	; 0x63
 8109210:	d036      	beq.n	8109280 <_printf_i+0x90>
 8109212:	d80a      	bhi.n	810922a <_printf_i+0x3a>
 8109214:	2900      	cmp	r1, #0
 8109216:	f000 80b9 	beq.w	810938c <_printf_i+0x19c>
 810921a:	2958      	cmp	r1, #88	; 0x58
 810921c:	f000 8083 	beq.w	8109326 <_printf_i+0x136>
 8109220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109224:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8109228:	e032      	b.n	8109290 <_printf_i+0xa0>
 810922a:	2964      	cmp	r1, #100	; 0x64
 810922c:	d001      	beq.n	8109232 <_printf_i+0x42>
 810922e:	2969      	cmp	r1, #105	; 0x69
 8109230:	d1f6      	bne.n	8109220 <_printf_i+0x30>
 8109232:	6820      	ldr	r0, [r4, #0]
 8109234:	6813      	ldr	r3, [r2, #0]
 8109236:	0605      	lsls	r5, r0, #24
 8109238:	f103 0104 	add.w	r1, r3, #4
 810923c:	d52a      	bpl.n	8109294 <_printf_i+0xa4>
 810923e:	681b      	ldr	r3, [r3, #0]
 8109240:	6011      	str	r1, [r2, #0]
 8109242:	2b00      	cmp	r3, #0
 8109244:	da03      	bge.n	810924e <_printf_i+0x5e>
 8109246:	222d      	movs	r2, #45	; 0x2d
 8109248:	425b      	negs	r3, r3
 810924a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 810924e:	486f      	ldr	r0, [pc, #444]	; (810940c <_printf_i+0x21c>)
 8109250:	220a      	movs	r2, #10
 8109252:	e039      	b.n	81092c8 <_printf_i+0xd8>
 8109254:	2973      	cmp	r1, #115	; 0x73
 8109256:	f000 809d 	beq.w	8109394 <_printf_i+0x1a4>
 810925a:	d808      	bhi.n	810926e <_printf_i+0x7e>
 810925c:	296f      	cmp	r1, #111	; 0x6f
 810925e:	d020      	beq.n	81092a2 <_printf_i+0xb2>
 8109260:	2970      	cmp	r1, #112	; 0x70
 8109262:	d1dd      	bne.n	8109220 <_printf_i+0x30>
 8109264:	6823      	ldr	r3, [r4, #0]
 8109266:	f043 0320 	orr.w	r3, r3, #32
 810926a:	6023      	str	r3, [r4, #0]
 810926c:	e003      	b.n	8109276 <_printf_i+0x86>
 810926e:	2975      	cmp	r1, #117	; 0x75
 8109270:	d017      	beq.n	81092a2 <_printf_i+0xb2>
 8109272:	2978      	cmp	r1, #120	; 0x78
 8109274:	d1d4      	bne.n	8109220 <_printf_i+0x30>
 8109276:	2378      	movs	r3, #120	; 0x78
 8109278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810927c:	4864      	ldr	r0, [pc, #400]	; (8109410 <_printf_i+0x220>)
 810927e:	e055      	b.n	810932c <_printf_i+0x13c>
 8109280:	6813      	ldr	r3, [r2, #0]
 8109282:	1d19      	adds	r1, r3, #4
 8109284:	681b      	ldr	r3, [r3, #0]
 8109286:	6011      	str	r1, [r2, #0]
 8109288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810928c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109290:	2301      	movs	r3, #1
 8109292:	e08c      	b.n	81093ae <_printf_i+0x1be>
 8109294:	681b      	ldr	r3, [r3, #0]
 8109296:	6011      	str	r1, [r2, #0]
 8109298:	f010 0f40 	tst.w	r0, #64	; 0x40
 810929c:	bf18      	it	ne
 810929e:	b21b      	sxthne	r3, r3
 81092a0:	e7cf      	b.n	8109242 <_printf_i+0x52>
 81092a2:	6813      	ldr	r3, [r2, #0]
 81092a4:	6825      	ldr	r5, [r4, #0]
 81092a6:	1d18      	adds	r0, r3, #4
 81092a8:	6010      	str	r0, [r2, #0]
 81092aa:	0628      	lsls	r0, r5, #24
 81092ac:	d501      	bpl.n	81092b2 <_printf_i+0xc2>
 81092ae:	681b      	ldr	r3, [r3, #0]
 81092b0:	e002      	b.n	81092b8 <_printf_i+0xc8>
 81092b2:	0668      	lsls	r0, r5, #25
 81092b4:	d5fb      	bpl.n	81092ae <_printf_i+0xbe>
 81092b6:	881b      	ldrh	r3, [r3, #0]
 81092b8:	4854      	ldr	r0, [pc, #336]	; (810940c <_printf_i+0x21c>)
 81092ba:	296f      	cmp	r1, #111	; 0x6f
 81092bc:	bf14      	ite	ne
 81092be:	220a      	movne	r2, #10
 81092c0:	2208      	moveq	r2, #8
 81092c2:	2100      	movs	r1, #0
 81092c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81092c8:	6865      	ldr	r5, [r4, #4]
 81092ca:	60a5      	str	r5, [r4, #8]
 81092cc:	2d00      	cmp	r5, #0
 81092ce:	f2c0 8095 	blt.w	81093fc <_printf_i+0x20c>
 81092d2:	6821      	ldr	r1, [r4, #0]
 81092d4:	f021 0104 	bic.w	r1, r1, #4
 81092d8:	6021      	str	r1, [r4, #0]
 81092da:	2b00      	cmp	r3, #0
 81092dc:	d13d      	bne.n	810935a <_printf_i+0x16a>
 81092de:	2d00      	cmp	r5, #0
 81092e0:	f040 808e 	bne.w	8109400 <_printf_i+0x210>
 81092e4:	4665      	mov	r5, ip
 81092e6:	2a08      	cmp	r2, #8
 81092e8:	d10b      	bne.n	8109302 <_printf_i+0x112>
 81092ea:	6823      	ldr	r3, [r4, #0]
 81092ec:	07db      	lsls	r3, r3, #31
 81092ee:	d508      	bpl.n	8109302 <_printf_i+0x112>
 81092f0:	6923      	ldr	r3, [r4, #16]
 81092f2:	6862      	ldr	r2, [r4, #4]
 81092f4:	429a      	cmp	r2, r3
 81092f6:	bfde      	ittt	le
 81092f8:	2330      	movle	r3, #48	; 0x30
 81092fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 81092fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8109302:	ebac 0305 	sub.w	r3, ip, r5
 8109306:	6123      	str	r3, [r4, #16]
 8109308:	f8cd 8000 	str.w	r8, [sp]
 810930c:	463b      	mov	r3, r7
 810930e:	aa03      	add	r2, sp, #12
 8109310:	4621      	mov	r1, r4
 8109312:	4630      	mov	r0, r6
 8109314:	f7ff fef6 	bl	8109104 <_printf_common>
 8109318:	3001      	adds	r0, #1
 810931a:	d14d      	bne.n	81093b8 <_printf_i+0x1c8>
 810931c:	f04f 30ff 	mov.w	r0, #4294967295
 8109320:	b005      	add	sp, #20
 8109322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109326:	4839      	ldr	r0, [pc, #228]	; (810940c <_printf_i+0x21c>)
 8109328:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 810932c:	6813      	ldr	r3, [r2, #0]
 810932e:	6821      	ldr	r1, [r4, #0]
 8109330:	1d1d      	adds	r5, r3, #4
 8109332:	681b      	ldr	r3, [r3, #0]
 8109334:	6015      	str	r5, [r2, #0]
 8109336:	060a      	lsls	r2, r1, #24
 8109338:	d50b      	bpl.n	8109352 <_printf_i+0x162>
 810933a:	07ca      	lsls	r2, r1, #31
 810933c:	bf44      	itt	mi
 810933e:	f041 0120 	orrmi.w	r1, r1, #32
 8109342:	6021      	strmi	r1, [r4, #0]
 8109344:	b91b      	cbnz	r3, 810934e <_printf_i+0x15e>
 8109346:	6822      	ldr	r2, [r4, #0]
 8109348:	f022 0220 	bic.w	r2, r2, #32
 810934c:	6022      	str	r2, [r4, #0]
 810934e:	2210      	movs	r2, #16
 8109350:	e7b7      	b.n	81092c2 <_printf_i+0xd2>
 8109352:	064d      	lsls	r5, r1, #25
 8109354:	bf48      	it	mi
 8109356:	b29b      	uxthmi	r3, r3
 8109358:	e7ef      	b.n	810933a <_printf_i+0x14a>
 810935a:	4665      	mov	r5, ip
 810935c:	fbb3 f1f2 	udiv	r1, r3, r2
 8109360:	fb02 3311 	mls	r3, r2, r1, r3
 8109364:	5cc3      	ldrb	r3, [r0, r3]
 8109366:	f805 3d01 	strb.w	r3, [r5, #-1]!
 810936a:	460b      	mov	r3, r1
 810936c:	2900      	cmp	r1, #0
 810936e:	d1f5      	bne.n	810935c <_printf_i+0x16c>
 8109370:	e7b9      	b.n	81092e6 <_printf_i+0xf6>
 8109372:	6813      	ldr	r3, [r2, #0]
 8109374:	6825      	ldr	r5, [r4, #0]
 8109376:	6961      	ldr	r1, [r4, #20]
 8109378:	1d18      	adds	r0, r3, #4
 810937a:	6010      	str	r0, [r2, #0]
 810937c:	0628      	lsls	r0, r5, #24
 810937e:	681b      	ldr	r3, [r3, #0]
 8109380:	d501      	bpl.n	8109386 <_printf_i+0x196>
 8109382:	6019      	str	r1, [r3, #0]
 8109384:	e002      	b.n	810938c <_printf_i+0x19c>
 8109386:	066a      	lsls	r2, r5, #25
 8109388:	d5fb      	bpl.n	8109382 <_printf_i+0x192>
 810938a:	8019      	strh	r1, [r3, #0]
 810938c:	2300      	movs	r3, #0
 810938e:	6123      	str	r3, [r4, #16]
 8109390:	4665      	mov	r5, ip
 8109392:	e7b9      	b.n	8109308 <_printf_i+0x118>
 8109394:	6813      	ldr	r3, [r2, #0]
 8109396:	1d19      	adds	r1, r3, #4
 8109398:	6011      	str	r1, [r2, #0]
 810939a:	681d      	ldr	r5, [r3, #0]
 810939c:	6862      	ldr	r2, [r4, #4]
 810939e:	2100      	movs	r1, #0
 81093a0:	4628      	mov	r0, r5
 81093a2:	f7f6 ffa5 	bl	81002f0 <memchr>
 81093a6:	b108      	cbz	r0, 81093ac <_printf_i+0x1bc>
 81093a8:	1b40      	subs	r0, r0, r5
 81093aa:	6060      	str	r0, [r4, #4]
 81093ac:	6863      	ldr	r3, [r4, #4]
 81093ae:	6123      	str	r3, [r4, #16]
 81093b0:	2300      	movs	r3, #0
 81093b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81093b6:	e7a7      	b.n	8109308 <_printf_i+0x118>
 81093b8:	6923      	ldr	r3, [r4, #16]
 81093ba:	462a      	mov	r2, r5
 81093bc:	4639      	mov	r1, r7
 81093be:	4630      	mov	r0, r6
 81093c0:	47c0      	blx	r8
 81093c2:	3001      	adds	r0, #1
 81093c4:	d0aa      	beq.n	810931c <_printf_i+0x12c>
 81093c6:	6823      	ldr	r3, [r4, #0]
 81093c8:	079b      	lsls	r3, r3, #30
 81093ca:	d413      	bmi.n	81093f4 <_printf_i+0x204>
 81093cc:	68e0      	ldr	r0, [r4, #12]
 81093ce:	9b03      	ldr	r3, [sp, #12]
 81093d0:	4298      	cmp	r0, r3
 81093d2:	bfb8      	it	lt
 81093d4:	4618      	movlt	r0, r3
 81093d6:	e7a3      	b.n	8109320 <_printf_i+0x130>
 81093d8:	2301      	movs	r3, #1
 81093da:	464a      	mov	r2, r9
 81093dc:	4639      	mov	r1, r7
 81093de:	4630      	mov	r0, r6
 81093e0:	47c0      	blx	r8
 81093e2:	3001      	adds	r0, #1
 81093e4:	d09a      	beq.n	810931c <_printf_i+0x12c>
 81093e6:	3501      	adds	r5, #1
 81093e8:	68e3      	ldr	r3, [r4, #12]
 81093ea:	9a03      	ldr	r2, [sp, #12]
 81093ec:	1a9b      	subs	r3, r3, r2
 81093ee:	42ab      	cmp	r3, r5
 81093f0:	dcf2      	bgt.n	81093d8 <_printf_i+0x1e8>
 81093f2:	e7eb      	b.n	81093cc <_printf_i+0x1dc>
 81093f4:	2500      	movs	r5, #0
 81093f6:	f104 0919 	add.w	r9, r4, #25
 81093fa:	e7f5      	b.n	81093e8 <_printf_i+0x1f8>
 81093fc:	2b00      	cmp	r3, #0
 81093fe:	d1ac      	bne.n	810935a <_printf_i+0x16a>
 8109400:	7803      	ldrb	r3, [r0, #0]
 8109402:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109406:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810940a:	e76c      	b.n	81092e6 <_printf_i+0xf6>
 810940c:	0810ac82 	.word	0x0810ac82
 8109410:	0810ac93 	.word	0x0810ac93

08109414 <siprintf>:
 8109414:	b40e      	push	{r1, r2, r3}
 8109416:	b500      	push	{lr}
 8109418:	b09c      	sub	sp, #112	; 0x70
 810941a:	ab1d      	add	r3, sp, #116	; 0x74
 810941c:	9002      	str	r0, [sp, #8]
 810941e:	9006      	str	r0, [sp, #24]
 8109420:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8109424:	4809      	ldr	r0, [pc, #36]	; (810944c <siprintf+0x38>)
 8109426:	9107      	str	r1, [sp, #28]
 8109428:	9104      	str	r1, [sp, #16]
 810942a:	4909      	ldr	r1, [pc, #36]	; (8109450 <siprintf+0x3c>)
 810942c:	f853 2b04 	ldr.w	r2, [r3], #4
 8109430:	9105      	str	r1, [sp, #20]
 8109432:	6800      	ldr	r0, [r0, #0]
 8109434:	9301      	str	r3, [sp, #4]
 8109436:	a902      	add	r1, sp, #8
 8109438:	f001 fa54 	bl	810a8e4 <_svfiprintf_r>
 810943c:	9b02      	ldr	r3, [sp, #8]
 810943e:	2200      	movs	r2, #0
 8109440:	701a      	strb	r2, [r3, #0]
 8109442:	b01c      	add	sp, #112	; 0x70
 8109444:	f85d eb04 	ldr.w	lr, [sp], #4
 8109448:	b003      	add	sp, #12
 810944a:	4770      	bx	lr
 810944c:	10000010 	.word	0x10000010
 8109450:	ffff0208 	.word	0xffff0208

08109454 <quorem>:
 8109454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109458:	6903      	ldr	r3, [r0, #16]
 810945a:	690c      	ldr	r4, [r1, #16]
 810945c:	42a3      	cmp	r3, r4
 810945e:	4680      	mov	r8, r0
 8109460:	f2c0 8082 	blt.w	8109568 <quorem+0x114>
 8109464:	3c01      	subs	r4, #1
 8109466:	f101 0714 	add.w	r7, r1, #20
 810946a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810946e:	f100 0614 	add.w	r6, r0, #20
 8109472:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8109476:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810947a:	eb06 030c 	add.w	r3, r6, ip
 810947e:	3501      	adds	r5, #1
 8109480:	eb07 090c 	add.w	r9, r7, ip
 8109484:	9301      	str	r3, [sp, #4]
 8109486:	fbb0 f5f5 	udiv	r5, r0, r5
 810948a:	b395      	cbz	r5, 81094f2 <quorem+0x9e>
 810948c:	f04f 0a00 	mov.w	sl, #0
 8109490:	4638      	mov	r0, r7
 8109492:	46b6      	mov	lr, r6
 8109494:	46d3      	mov	fp, sl
 8109496:	f850 2b04 	ldr.w	r2, [r0], #4
 810949a:	b293      	uxth	r3, r2
 810949c:	fb05 a303 	mla	r3, r5, r3, sl
 81094a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81094a4:	b29b      	uxth	r3, r3
 81094a6:	ebab 0303 	sub.w	r3, fp, r3
 81094aa:	0c12      	lsrs	r2, r2, #16
 81094ac:	f8de b000 	ldr.w	fp, [lr]
 81094b0:	fb05 a202 	mla	r2, r5, r2, sl
 81094b4:	fa13 f38b 	uxtah	r3, r3, fp
 81094b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 81094bc:	fa1f fb82 	uxth.w	fp, r2
 81094c0:	f8de 2000 	ldr.w	r2, [lr]
 81094c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 81094c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81094cc:	b29b      	uxth	r3, r3
 81094ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81094d2:	4581      	cmp	r9, r0
 81094d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 81094d8:	f84e 3b04 	str.w	r3, [lr], #4
 81094dc:	d2db      	bcs.n	8109496 <quorem+0x42>
 81094de:	f856 300c 	ldr.w	r3, [r6, ip]
 81094e2:	b933      	cbnz	r3, 81094f2 <quorem+0x9e>
 81094e4:	9b01      	ldr	r3, [sp, #4]
 81094e6:	3b04      	subs	r3, #4
 81094e8:	429e      	cmp	r6, r3
 81094ea:	461a      	mov	r2, r3
 81094ec:	d330      	bcc.n	8109550 <quorem+0xfc>
 81094ee:	f8c8 4010 	str.w	r4, [r8, #16]
 81094f2:	4640      	mov	r0, r8
 81094f4:	f001 f820 	bl	810a538 <__mcmp>
 81094f8:	2800      	cmp	r0, #0
 81094fa:	db25      	blt.n	8109548 <quorem+0xf4>
 81094fc:	3501      	adds	r5, #1
 81094fe:	4630      	mov	r0, r6
 8109500:	f04f 0c00 	mov.w	ip, #0
 8109504:	f857 2b04 	ldr.w	r2, [r7], #4
 8109508:	f8d0 e000 	ldr.w	lr, [r0]
 810950c:	b293      	uxth	r3, r2
 810950e:	ebac 0303 	sub.w	r3, ip, r3
 8109512:	0c12      	lsrs	r2, r2, #16
 8109514:	fa13 f38e 	uxtah	r3, r3, lr
 8109518:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810951c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109520:	b29b      	uxth	r3, r3
 8109522:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109526:	45b9      	cmp	r9, r7
 8109528:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810952c:	f840 3b04 	str.w	r3, [r0], #4
 8109530:	d2e8      	bcs.n	8109504 <quorem+0xb0>
 8109532:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8109536:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810953a:	b92a      	cbnz	r2, 8109548 <quorem+0xf4>
 810953c:	3b04      	subs	r3, #4
 810953e:	429e      	cmp	r6, r3
 8109540:	461a      	mov	r2, r3
 8109542:	d30b      	bcc.n	810955c <quorem+0x108>
 8109544:	f8c8 4010 	str.w	r4, [r8, #16]
 8109548:	4628      	mov	r0, r5
 810954a:	b003      	add	sp, #12
 810954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109550:	6812      	ldr	r2, [r2, #0]
 8109552:	3b04      	subs	r3, #4
 8109554:	2a00      	cmp	r2, #0
 8109556:	d1ca      	bne.n	81094ee <quorem+0x9a>
 8109558:	3c01      	subs	r4, #1
 810955a:	e7c5      	b.n	81094e8 <quorem+0x94>
 810955c:	6812      	ldr	r2, [r2, #0]
 810955e:	3b04      	subs	r3, #4
 8109560:	2a00      	cmp	r2, #0
 8109562:	d1ef      	bne.n	8109544 <quorem+0xf0>
 8109564:	3c01      	subs	r4, #1
 8109566:	e7ea      	b.n	810953e <quorem+0xea>
 8109568:	2000      	movs	r0, #0
 810956a:	e7ee      	b.n	810954a <quorem+0xf6>
 810956c:	0000      	movs	r0, r0
	...

08109570 <_dtoa_r>:
 8109570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109574:	ec57 6b10 	vmov	r6, r7, d0
 8109578:	b097      	sub	sp, #92	; 0x5c
 810957a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810957c:	9106      	str	r1, [sp, #24]
 810957e:	4604      	mov	r4, r0
 8109580:	920b      	str	r2, [sp, #44]	; 0x2c
 8109582:	9312      	str	r3, [sp, #72]	; 0x48
 8109584:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8109588:	e9cd 6700 	strd	r6, r7, [sp]
 810958c:	b93d      	cbnz	r5, 810959e <_dtoa_r+0x2e>
 810958e:	2010      	movs	r0, #16
 8109590:	f000 fdb4 	bl	810a0fc <malloc>
 8109594:	6260      	str	r0, [r4, #36]	; 0x24
 8109596:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810959a:	6005      	str	r5, [r0, #0]
 810959c:	60c5      	str	r5, [r0, #12]
 810959e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81095a0:	6819      	ldr	r1, [r3, #0]
 81095a2:	b151      	cbz	r1, 81095ba <_dtoa_r+0x4a>
 81095a4:	685a      	ldr	r2, [r3, #4]
 81095a6:	604a      	str	r2, [r1, #4]
 81095a8:	2301      	movs	r3, #1
 81095aa:	4093      	lsls	r3, r2
 81095ac:	608b      	str	r3, [r1, #8]
 81095ae:	4620      	mov	r0, r4
 81095b0:	f000 fde0 	bl	810a174 <_Bfree>
 81095b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81095b6:	2200      	movs	r2, #0
 81095b8:	601a      	str	r2, [r3, #0]
 81095ba:	1e3b      	subs	r3, r7, #0
 81095bc:	bfbb      	ittet	lt
 81095be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81095c2:	9301      	strlt	r3, [sp, #4]
 81095c4:	2300      	movge	r3, #0
 81095c6:	2201      	movlt	r2, #1
 81095c8:	bfac      	ite	ge
 81095ca:	f8c8 3000 	strge.w	r3, [r8]
 81095ce:	f8c8 2000 	strlt.w	r2, [r8]
 81095d2:	4baf      	ldr	r3, [pc, #700]	; (8109890 <_dtoa_r+0x320>)
 81095d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 81095d8:	ea33 0308 	bics.w	r3, r3, r8
 81095dc:	d114      	bne.n	8109608 <_dtoa_r+0x98>
 81095de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81095e0:	f242 730f 	movw	r3, #9999	; 0x270f
 81095e4:	6013      	str	r3, [r2, #0]
 81095e6:	9b00      	ldr	r3, [sp, #0]
 81095e8:	b923      	cbnz	r3, 81095f4 <_dtoa_r+0x84>
 81095ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 81095ee:	2800      	cmp	r0, #0
 81095f0:	f000 8542 	beq.w	810a078 <_dtoa_r+0xb08>
 81095f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81095f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 81098a4 <_dtoa_r+0x334>
 81095fa:	2b00      	cmp	r3, #0
 81095fc:	f000 8544 	beq.w	810a088 <_dtoa_r+0xb18>
 8109600:	f10b 0303 	add.w	r3, fp, #3
 8109604:	f000 bd3e 	b.w	810a084 <_dtoa_r+0xb14>
 8109608:	e9dd 6700 	ldrd	r6, r7, [sp]
 810960c:	2200      	movs	r2, #0
 810960e:	2300      	movs	r3, #0
 8109610:	4630      	mov	r0, r6
 8109612:	4639      	mov	r1, r7
 8109614:	f7f7 fae0 	bl	8100bd8 <__aeabi_dcmpeq>
 8109618:	4681      	mov	r9, r0
 810961a:	b168      	cbz	r0, 8109638 <_dtoa_r+0xc8>
 810961c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810961e:	2301      	movs	r3, #1
 8109620:	6013      	str	r3, [r2, #0]
 8109622:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109624:	2b00      	cmp	r3, #0
 8109626:	f000 8524 	beq.w	810a072 <_dtoa_r+0xb02>
 810962a:	4b9a      	ldr	r3, [pc, #616]	; (8109894 <_dtoa_r+0x324>)
 810962c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810962e:	f103 3bff 	add.w	fp, r3, #4294967295
 8109632:	6013      	str	r3, [r2, #0]
 8109634:	f000 bd28 	b.w	810a088 <_dtoa_r+0xb18>
 8109638:	aa14      	add	r2, sp, #80	; 0x50
 810963a:	a915      	add	r1, sp, #84	; 0x54
 810963c:	ec47 6b10 	vmov	d0, r6, r7
 8109640:	4620      	mov	r0, r4
 8109642:	f000 fff0 	bl	810a626 <__d2b>
 8109646:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810964a:	9004      	str	r0, [sp, #16]
 810964c:	2d00      	cmp	r5, #0
 810964e:	d07c      	beq.n	810974a <_dtoa_r+0x1da>
 8109650:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8109654:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8109658:	46b2      	mov	sl, r6
 810965a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810965e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8109662:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8109666:	2200      	movs	r2, #0
 8109668:	4b8b      	ldr	r3, [pc, #556]	; (8109898 <_dtoa_r+0x328>)
 810966a:	4650      	mov	r0, sl
 810966c:	4659      	mov	r1, fp
 810966e:	f7f6 fe93 	bl	8100398 <__aeabi_dsub>
 8109672:	a381      	add	r3, pc, #516	; (adr r3, 8109878 <_dtoa_r+0x308>)
 8109674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109678:	f7f7 f846 	bl	8100708 <__aeabi_dmul>
 810967c:	a380      	add	r3, pc, #512	; (adr r3, 8109880 <_dtoa_r+0x310>)
 810967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109682:	f7f6 fe8b 	bl	810039c <__adddf3>
 8109686:	4606      	mov	r6, r0
 8109688:	4628      	mov	r0, r5
 810968a:	460f      	mov	r7, r1
 810968c:	f7f6 ffd2 	bl	8100634 <__aeabi_i2d>
 8109690:	a37d      	add	r3, pc, #500	; (adr r3, 8109888 <_dtoa_r+0x318>)
 8109692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109696:	f7f7 f837 	bl	8100708 <__aeabi_dmul>
 810969a:	4602      	mov	r2, r0
 810969c:	460b      	mov	r3, r1
 810969e:	4630      	mov	r0, r6
 81096a0:	4639      	mov	r1, r7
 81096a2:	f7f6 fe7b 	bl	810039c <__adddf3>
 81096a6:	4606      	mov	r6, r0
 81096a8:	460f      	mov	r7, r1
 81096aa:	f7f7 fadd 	bl	8100c68 <__aeabi_d2iz>
 81096ae:	2200      	movs	r2, #0
 81096b0:	4682      	mov	sl, r0
 81096b2:	2300      	movs	r3, #0
 81096b4:	4630      	mov	r0, r6
 81096b6:	4639      	mov	r1, r7
 81096b8:	f7f7 fa98 	bl	8100bec <__aeabi_dcmplt>
 81096bc:	b148      	cbz	r0, 81096d2 <_dtoa_r+0x162>
 81096be:	4650      	mov	r0, sl
 81096c0:	f7f6 ffb8 	bl	8100634 <__aeabi_i2d>
 81096c4:	4632      	mov	r2, r6
 81096c6:	463b      	mov	r3, r7
 81096c8:	f7f7 fa86 	bl	8100bd8 <__aeabi_dcmpeq>
 81096cc:	b908      	cbnz	r0, 81096d2 <_dtoa_r+0x162>
 81096ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 81096d2:	f1ba 0f16 	cmp.w	sl, #22
 81096d6:	d859      	bhi.n	810978c <_dtoa_r+0x21c>
 81096d8:	4970      	ldr	r1, [pc, #448]	; (810989c <_dtoa_r+0x32c>)
 81096da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 81096de:	e9dd 2300 	ldrd	r2, r3, [sp]
 81096e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 81096e6:	f7f7 fa9f 	bl	8100c28 <__aeabi_dcmpgt>
 81096ea:	2800      	cmp	r0, #0
 81096ec:	d050      	beq.n	8109790 <_dtoa_r+0x220>
 81096ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 81096f2:	2300      	movs	r3, #0
 81096f4:	930f      	str	r3, [sp, #60]	; 0x3c
 81096f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 81096f8:	1b5d      	subs	r5, r3, r5
 81096fa:	f1b5 0801 	subs.w	r8, r5, #1
 81096fe:	bf49      	itett	mi
 8109700:	f1c5 0301 	rsbmi	r3, r5, #1
 8109704:	2300      	movpl	r3, #0
 8109706:	9305      	strmi	r3, [sp, #20]
 8109708:	f04f 0800 	movmi.w	r8, #0
 810970c:	bf58      	it	pl
 810970e:	9305      	strpl	r3, [sp, #20]
 8109710:	f1ba 0f00 	cmp.w	sl, #0
 8109714:	db3e      	blt.n	8109794 <_dtoa_r+0x224>
 8109716:	2300      	movs	r3, #0
 8109718:	44d0      	add	r8, sl
 810971a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810971e:	9307      	str	r3, [sp, #28]
 8109720:	9b06      	ldr	r3, [sp, #24]
 8109722:	2b09      	cmp	r3, #9
 8109724:	f200 8090 	bhi.w	8109848 <_dtoa_r+0x2d8>
 8109728:	2b05      	cmp	r3, #5
 810972a:	bfc4      	itt	gt
 810972c:	3b04      	subgt	r3, #4
 810972e:	9306      	strgt	r3, [sp, #24]
 8109730:	9b06      	ldr	r3, [sp, #24]
 8109732:	f1a3 0302 	sub.w	r3, r3, #2
 8109736:	bfcc      	ite	gt
 8109738:	2500      	movgt	r5, #0
 810973a:	2501      	movle	r5, #1
 810973c:	2b03      	cmp	r3, #3
 810973e:	f200 808f 	bhi.w	8109860 <_dtoa_r+0x2f0>
 8109742:	e8df f003 	tbb	[pc, r3]
 8109746:	7f7d      	.short	0x7f7d
 8109748:	7131      	.short	0x7131
 810974a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810974e:	441d      	add	r5, r3
 8109750:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8109754:	2820      	cmp	r0, #32
 8109756:	dd13      	ble.n	8109780 <_dtoa_r+0x210>
 8109758:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810975c:	9b00      	ldr	r3, [sp, #0]
 810975e:	fa08 f800 	lsl.w	r8, r8, r0
 8109762:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8109766:	fa23 f000 	lsr.w	r0, r3, r0
 810976a:	ea48 0000 	orr.w	r0, r8, r0
 810976e:	f7f6 ff51 	bl	8100614 <__aeabi_ui2d>
 8109772:	2301      	movs	r3, #1
 8109774:	4682      	mov	sl, r0
 8109776:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810977a:	3d01      	subs	r5, #1
 810977c:	9313      	str	r3, [sp, #76]	; 0x4c
 810977e:	e772      	b.n	8109666 <_dtoa_r+0xf6>
 8109780:	9b00      	ldr	r3, [sp, #0]
 8109782:	f1c0 0020 	rsb	r0, r0, #32
 8109786:	fa03 f000 	lsl.w	r0, r3, r0
 810978a:	e7f0      	b.n	810976e <_dtoa_r+0x1fe>
 810978c:	2301      	movs	r3, #1
 810978e:	e7b1      	b.n	81096f4 <_dtoa_r+0x184>
 8109790:	900f      	str	r0, [sp, #60]	; 0x3c
 8109792:	e7b0      	b.n	81096f6 <_dtoa_r+0x186>
 8109794:	9b05      	ldr	r3, [sp, #20]
 8109796:	eba3 030a 	sub.w	r3, r3, sl
 810979a:	9305      	str	r3, [sp, #20]
 810979c:	f1ca 0300 	rsb	r3, sl, #0
 81097a0:	9307      	str	r3, [sp, #28]
 81097a2:	2300      	movs	r3, #0
 81097a4:	930e      	str	r3, [sp, #56]	; 0x38
 81097a6:	e7bb      	b.n	8109720 <_dtoa_r+0x1b0>
 81097a8:	2301      	movs	r3, #1
 81097aa:	930a      	str	r3, [sp, #40]	; 0x28
 81097ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81097ae:	2b00      	cmp	r3, #0
 81097b0:	dd59      	ble.n	8109866 <_dtoa_r+0x2f6>
 81097b2:	9302      	str	r3, [sp, #8]
 81097b4:	4699      	mov	r9, r3
 81097b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 81097b8:	2200      	movs	r2, #0
 81097ba:	6072      	str	r2, [r6, #4]
 81097bc:	2204      	movs	r2, #4
 81097be:	f102 0014 	add.w	r0, r2, #20
 81097c2:	4298      	cmp	r0, r3
 81097c4:	6871      	ldr	r1, [r6, #4]
 81097c6:	d953      	bls.n	8109870 <_dtoa_r+0x300>
 81097c8:	4620      	mov	r0, r4
 81097ca:	f000 fc9f 	bl	810a10c <_Balloc>
 81097ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81097d0:	6030      	str	r0, [r6, #0]
 81097d2:	f1b9 0f0e 	cmp.w	r9, #14
 81097d6:	f8d3 b000 	ldr.w	fp, [r3]
 81097da:	f200 80e6 	bhi.w	81099aa <_dtoa_r+0x43a>
 81097de:	2d00      	cmp	r5, #0
 81097e0:	f000 80e3 	beq.w	81099aa <_dtoa_r+0x43a>
 81097e4:	ed9d 7b00 	vldr	d7, [sp]
 81097e8:	f1ba 0f00 	cmp.w	sl, #0
 81097ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 81097f0:	dd74      	ble.n	81098dc <_dtoa_r+0x36c>
 81097f2:	4a2a      	ldr	r2, [pc, #168]	; (810989c <_dtoa_r+0x32c>)
 81097f4:	f00a 030f 	and.w	r3, sl, #15
 81097f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81097fc:	ed93 7b00 	vldr	d7, [r3]
 8109800:	ea4f 162a 	mov.w	r6, sl, asr #4
 8109804:	06f0      	lsls	r0, r6, #27
 8109806:	ed8d 7b08 	vstr	d7, [sp, #32]
 810980a:	d565      	bpl.n	81098d8 <_dtoa_r+0x368>
 810980c:	4b24      	ldr	r3, [pc, #144]	; (81098a0 <_dtoa_r+0x330>)
 810980e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8109812:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109816:	f7f7 f8a1 	bl	810095c <__aeabi_ddiv>
 810981a:	e9cd 0100 	strd	r0, r1, [sp]
 810981e:	f006 060f 	and.w	r6, r6, #15
 8109822:	2503      	movs	r5, #3
 8109824:	4f1e      	ldr	r7, [pc, #120]	; (81098a0 <_dtoa_r+0x330>)
 8109826:	e04c      	b.n	81098c2 <_dtoa_r+0x352>
 8109828:	2301      	movs	r3, #1
 810982a:	930a      	str	r3, [sp, #40]	; 0x28
 810982c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810982e:	4453      	add	r3, sl
 8109830:	f103 0901 	add.w	r9, r3, #1
 8109834:	9302      	str	r3, [sp, #8]
 8109836:	464b      	mov	r3, r9
 8109838:	2b01      	cmp	r3, #1
 810983a:	bfb8      	it	lt
 810983c:	2301      	movlt	r3, #1
 810983e:	e7ba      	b.n	81097b6 <_dtoa_r+0x246>
 8109840:	2300      	movs	r3, #0
 8109842:	e7b2      	b.n	81097aa <_dtoa_r+0x23a>
 8109844:	2300      	movs	r3, #0
 8109846:	e7f0      	b.n	810982a <_dtoa_r+0x2ba>
 8109848:	2501      	movs	r5, #1
 810984a:	2300      	movs	r3, #0
 810984c:	9306      	str	r3, [sp, #24]
 810984e:	950a      	str	r5, [sp, #40]	; 0x28
 8109850:	f04f 33ff 	mov.w	r3, #4294967295
 8109854:	9302      	str	r3, [sp, #8]
 8109856:	4699      	mov	r9, r3
 8109858:	2200      	movs	r2, #0
 810985a:	2312      	movs	r3, #18
 810985c:	920b      	str	r2, [sp, #44]	; 0x2c
 810985e:	e7aa      	b.n	81097b6 <_dtoa_r+0x246>
 8109860:	2301      	movs	r3, #1
 8109862:	930a      	str	r3, [sp, #40]	; 0x28
 8109864:	e7f4      	b.n	8109850 <_dtoa_r+0x2e0>
 8109866:	2301      	movs	r3, #1
 8109868:	9302      	str	r3, [sp, #8]
 810986a:	4699      	mov	r9, r3
 810986c:	461a      	mov	r2, r3
 810986e:	e7f5      	b.n	810985c <_dtoa_r+0x2ec>
 8109870:	3101      	adds	r1, #1
 8109872:	6071      	str	r1, [r6, #4]
 8109874:	0052      	lsls	r2, r2, #1
 8109876:	e7a2      	b.n	81097be <_dtoa_r+0x24e>
 8109878:	636f4361 	.word	0x636f4361
 810987c:	3fd287a7 	.word	0x3fd287a7
 8109880:	8b60c8b3 	.word	0x8b60c8b3
 8109884:	3fc68a28 	.word	0x3fc68a28
 8109888:	509f79fb 	.word	0x509f79fb
 810988c:	3fd34413 	.word	0x3fd34413
 8109890:	7ff00000 	.word	0x7ff00000
 8109894:	0810ac81 	.word	0x0810ac81
 8109898:	3ff80000 	.word	0x3ff80000
 810989c:	0810ace0 	.word	0x0810ace0
 81098a0:	0810acb8 	.word	0x0810acb8
 81098a4:	0810acad 	.word	0x0810acad
 81098a8:	07f1      	lsls	r1, r6, #31
 81098aa:	d508      	bpl.n	81098be <_dtoa_r+0x34e>
 81098ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 81098b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81098b4:	f7f6 ff28 	bl	8100708 <__aeabi_dmul>
 81098b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 81098bc:	3501      	adds	r5, #1
 81098be:	1076      	asrs	r6, r6, #1
 81098c0:	3708      	adds	r7, #8
 81098c2:	2e00      	cmp	r6, #0
 81098c4:	d1f0      	bne.n	81098a8 <_dtoa_r+0x338>
 81098c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 81098ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 81098ce:	f7f7 f845 	bl	810095c <__aeabi_ddiv>
 81098d2:	e9cd 0100 	strd	r0, r1, [sp]
 81098d6:	e01a      	b.n	810990e <_dtoa_r+0x39e>
 81098d8:	2502      	movs	r5, #2
 81098da:	e7a3      	b.n	8109824 <_dtoa_r+0x2b4>
 81098dc:	f000 80a0 	beq.w	8109a20 <_dtoa_r+0x4b0>
 81098e0:	f1ca 0600 	rsb	r6, sl, #0
 81098e4:	4b9f      	ldr	r3, [pc, #636]	; (8109b64 <_dtoa_r+0x5f4>)
 81098e6:	4fa0      	ldr	r7, [pc, #640]	; (8109b68 <_dtoa_r+0x5f8>)
 81098e8:	f006 020f 	and.w	r2, r6, #15
 81098ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81098f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 81098f8:	f7f6 ff06 	bl	8100708 <__aeabi_dmul>
 81098fc:	e9cd 0100 	strd	r0, r1, [sp]
 8109900:	1136      	asrs	r6, r6, #4
 8109902:	2300      	movs	r3, #0
 8109904:	2502      	movs	r5, #2
 8109906:	2e00      	cmp	r6, #0
 8109908:	d17f      	bne.n	8109a0a <_dtoa_r+0x49a>
 810990a:	2b00      	cmp	r3, #0
 810990c:	d1e1      	bne.n	81098d2 <_dtoa_r+0x362>
 810990e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109910:	2b00      	cmp	r3, #0
 8109912:	f000 8087 	beq.w	8109a24 <_dtoa_r+0x4b4>
 8109916:	e9dd 6700 	ldrd	r6, r7, [sp]
 810991a:	2200      	movs	r2, #0
 810991c:	4b93      	ldr	r3, [pc, #588]	; (8109b6c <_dtoa_r+0x5fc>)
 810991e:	4630      	mov	r0, r6
 8109920:	4639      	mov	r1, r7
 8109922:	f7f7 f963 	bl	8100bec <__aeabi_dcmplt>
 8109926:	2800      	cmp	r0, #0
 8109928:	d07c      	beq.n	8109a24 <_dtoa_r+0x4b4>
 810992a:	f1b9 0f00 	cmp.w	r9, #0
 810992e:	d079      	beq.n	8109a24 <_dtoa_r+0x4b4>
 8109930:	9b02      	ldr	r3, [sp, #8]
 8109932:	2b00      	cmp	r3, #0
 8109934:	dd35      	ble.n	81099a2 <_dtoa_r+0x432>
 8109936:	f10a 33ff 	add.w	r3, sl, #4294967295
 810993a:	9308      	str	r3, [sp, #32]
 810993c:	4639      	mov	r1, r7
 810993e:	2200      	movs	r2, #0
 8109940:	4b8b      	ldr	r3, [pc, #556]	; (8109b70 <_dtoa_r+0x600>)
 8109942:	4630      	mov	r0, r6
 8109944:	f7f6 fee0 	bl	8100708 <__aeabi_dmul>
 8109948:	e9cd 0100 	strd	r0, r1, [sp]
 810994c:	9f02      	ldr	r7, [sp, #8]
 810994e:	3501      	adds	r5, #1
 8109950:	4628      	mov	r0, r5
 8109952:	f7f6 fe6f 	bl	8100634 <__aeabi_i2d>
 8109956:	e9dd 2300 	ldrd	r2, r3, [sp]
 810995a:	f7f6 fed5 	bl	8100708 <__aeabi_dmul>
 810995e:	2200      	movs	r2, #0
 8109960:	4b84      	ldr	r3, [pc, #528]	; (8109b74 <_dtoa_r+0x604>)
 8109962:	f7f6 fd1b 	bl	810039c <__adddf3>
 8109966:	4605      	mov	r5, r0
 8109968:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810996c:	2f00      	cmp	r7, #0
 810996e:	d15d      	bne.n	8109a2c <_dtoa_r+0x4bc>
 8109970:	2200      	movs	r2, #0
 8109972:	4b81      	ldr	r3, [pc, #516]	; (8109b78 <_dtoa_r+0x608>)
 8109974:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109978:	f7f6 fd0e 	bl	8100398 <__aeabi_dsub>
 810997c:	462a      	mov	r2, r5
 810997e:	4633      	mov	r3, r6
 8109980:	e9cd 0100 	strd	r0, r1, [sp]
 8109984:	f7f7 f950 	bl	8100c28 <__aeabi_dcmpgt>
 8109988:	2800      	cmp	r0, #0
 810998a:	f040 8288 	bne.w	8109e9e <_dtoa_r+0x92e>
 810998e:	462a      	mov	r2, r5
 8109990:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8109994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109998:	f7f7 f928 	bl	8100bec <__aeabi_dcmplt>
 810999c:	2800      	cmp	r0, #0
 810999e:	f040 827c 	bne.w	8109e9a <_dtoa_r+0x92a>
 81099a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 81099a6:	e9cd 2300 	strd	r2, r3, [sp]
 81099aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81099ac:	2b00      	cmp	r3, #0
 81099ae:	f2c0 8150 	blt.w	8109c52 <_dtoa_r+0x6e2>
 81099b2:	f1ba 0f0e 	cmp.w	sl, #14
 81099b6:	f300 814c 	bgt.w	8109c52 <_dtoa_r+0x6e2>
 81099ba:	4b6a      	ldr	r3, [pc, #424]	; (8109b64 <_dtoa_r+0x5f4>)
 81099bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81099c0:	ed93 7b00 	vldr	d7, [r3]
 81099c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81099c6:	2b00      	cmp	r3, #0
 81099c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 81099cc:	f280 80d8 	bge.w	8109b80 <_dtoa_r+0x610>
 81099d0:	f1b9 0f00 	cmp.w	r9, #0
 81099d4:	f300 80d4 	bgt.w	8109b80 <_dtoa_r+0x610>
 81099d8:	f040 825e 	bne.w	8109e98 <_dtoa_r+0x928>
 81099dc:	2200      	movs	r2, #0
 81099de:	4b66      	ldr	r3, [pc, #408]	; (8109b78 <_dtoa_r+0x608>)
 81099e0:	ec51 0b17 	vmov	r0, r1, d7
 81099e4:	f7f6 fe90 	bl	8100708 <__aeabi_dmul>
 81099e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81099ec:	f7f7 f912 	bl	8100c14 <__aeabi_dcmpge>
 81099f0:	464f      	mov	r7, r9
 81099f2:	464e      	mov	r6, r9
 81099f4:	2800      	cmp	r0, #0
 81099f6:	f040 8234 	bne.w	8109e62 <_dtoa_r+0x8f2>
 81099fa:	2331      	movs	r3, #49	; 0x31
 81099fc:	f10b 0501 	add.w	r5, fp, #1
 8109a00:	f88b 3000 	strb.w	r3, [fp]
 8109a04:	f10a 0a01 	add.w	sl, sl, #1
 8109a08:	e22f      	b.n	8109e6a <_dtoa_r+0x8fa>
 8109a0a:	07f2      	lsls	r2, r6, #31
 8109a0c:	d505      	bpl.n	8109a1a <_dtoa_r+0x4aa>
 8109a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109a12:	f7f6 fe79 	bl	8100708 <__aeabi_dmul>
 8109a16:	3501      	adds	r5, #1
 8109a18:	2301      	movs	r3, #1
 8109a1a:	1076      	asrs	r6, r6, #1
 8109a1c:	3708      	adds	r7, #8
 8109a1e:	e772      	b.n	8109906 <_dtoa_r+0x396>
 8109a20:	2502      	movs	r5, #2
 8109a22:	e774      	b.n	810990e <_dtoa_r+0x39e>
 8109a24:	f8cd a020 	str.w	sl, [sp, #32]
 8109a28:	464f      	mov	r7, r9
 8109a2a:	e791      	b.n	8109950 <_dtoa_r+0x3e0>
 8109a2c:	4b4d      	ldr	r3, [pc, #308]	; (8109b64 <_dtoa_r+0x5f4>)
 8109a2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8109a32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8109a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109a38:	2b00      	cmp	r3, #0
 8109a3a:	d047      	beq.n	8109acc <_dtoa_r+0x55c>
 8109a3c:	4602      	mov	r2, r0
 8109a3e:	460b      	mov	r3, r1
 8109a40:	2000      	movs	r0, #0
 8109a42:	494e      	ldr	r1, [pc, #312]	; (8109b7c <_dtoa_r+0x60c>)
 8109a44:	f7f6 ff8a 	bl	810095c <__aeabi_ddiv>
 8109a48:	462a      	mov	r2, r5
 8109a4a:	4633      	mov	r3, r6
 8109a4c:	f7f6 fca4 	bl	8100398 <__aeabi_dsub>
 8109a50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8109a54:	465d      	mov	r5, fp
 8109a56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109a5a:	f7f7 f905 	bl	8100c68 <__aeabi_d2iz>
 8109a5e:	4606      	mov	r6, r0
 8109a60:	f7f6 fde8 	bl	8100634 <__aeabi_i2d>
 8109a64:	4602      	mov	r2, r0
 8109a66:	460b      	mov	r3, r1
 8109a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109a6c:	f7f6 fc94 	bl	8100398 <__aeabi_dsub>
 8109a70:	3630      	adds	r6, #48	; 0x30
 8109a72:	f805 6b01 	strb.w	r6, [r5], #1
 8109a76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8109a7a:	e9cd 0100 	strd	r0, r1, [sp]
 8109a7e:	f7f7 f8b5 	bl	8100bec <__aeabi_dcmplt>
 8109a82:	2800      	cmp	r0, #0
 8109a84:	d163      	bne.n	8109b4e <_dtoa_r+0x5de>
 8109a86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8109a8a:	2000      	movs	r0, #0
 8109a8c:	4937      	ldr	r1, [pc, #220]	; (8109b6c <_dtoa_r+0x5fc>)
 8109a8e:	f7f6 fc83 	bl	8100398 <__aeabi_dsub>
 8109a92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8109a96:	f7f7 f8a9 	bl	8100bec <__aeabi_dcmplt>
 8109a9a:	2800      	cmp	r0, #0
 8109a9c:	f040 80b7 	bne.w	8109c0e <_dtoa_r+0x69e>
 8109aa0:	eba5 030b 	sub.w	r3, r5, fp
 8109aa4:	429f      	cmp	r7, r3
 8109aa6:	f77f af7c 	ble.w	81099a2 <_dtoa_r+0x432>
 8109aaa:	2200      	movs	r2, #0
 8109aac:	4b30      	ldr	r3, [pc, #192]	; (8109b70 <_dtoa_r+0x600>)
 8109aae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109ab2:	f7f6 fe29 	bl	8100708 <__aeabi_dmul>
 8109ab6:	2200      	movs	r2, #0
 8109ab8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8109abc:	4b2c      	ldr	r3, [pc, #176]	; (8109b70 <_dtoa_r+0x600>)
 8109abe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109ac2:	f7f6 fe21 	bl	8100708 <__aeabi_dmul>
 8109ac6:	e9cd 0100 	strd	r0, r1, [sp]
 8109aca:	e7c4      	b.n	8109a56 <_dtoa_r+0x4e6>
 8109acc:	462a      	mov	r2, r5
 8109ace:	4633      	mov	r3, r6
 8109ad0:	f7f6 fe1a 	bl	8100708 <__aeabi_dmul>
 8109ad4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8109ad8:	eb0b 0507 	add.w	r5, fp, r7
 8109adc:	465e      	mov	r6, fp
 8109ade:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109ae2:	f7f7 f8c1 	bl	8100c68 <__aeabi_d2iz>
 8109ae6:	4607      	mov	r7, r0
 8109ae8:	f7f6 fda4 	bl	8100634 <__aeabi_i2d>
 8109aec:	3730      	adds	r7, #48	; 0x30
 8109aee:	4602      	mov	r2, r0
 8109af0:	460b      	mov	r3, r1
 8109af2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109af6:	f7f6 fc4f 	bl	8100398 <__aeabi_dsub>
 8109afa:	f806 7b01 	strb.w	r7, [r6], #1
 8109afe:	42ae      	cmp	r6, r5
 8109b00:	e9cd 0100 	strd	r0, r1, [sp]
 8109b04:	f04f 0200 	mov.w	r2, #0
 8109b08:	d126      	bne.n	8109b58 <_dtoa_r+0x5e8>
 8109b0a:	4b1c      	ldr	r3, [pc, #112]	; (8109b7c <_dtoa_r+0x60c>)
 8109b0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109b10:	f7f6 fc44 	bl	810039c <__adddf3>
 8109b14:	4602      	mov	r2, r0
 8109b16:	460b      	mov	r3, r1
 8109b18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109b1c:	f7f7 f884 	bl	8100c28 <__aeabi_dcmpgt>
 8109b20:	2800      	cmp	r0, #0
 8109b22:	d174      	bne.n	8109c0e <_dtoa_r+0x69e>
 8109b24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8109b28:	2000      	movs	r0, #0
 8109b2a:	4914      	ldr	r1, [pc, #80]	; (8109b7c <_dtoa_r+0x60c>)
 8109b2c:	f7f6 fc34 	bl	8100398 <__aeabi_dsub>
 8109b30:	4602      	mov	r2, r0
 8109b32:	460b      	mov	r3, r1
 8109b34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8109b38:	f7f7 f858 	bl	8100bec <__aeabi_dcmplt>
 8109b3c:	2800      	cmp	r0, #0
 8109b3e:	f43f af30 	beq.w	81099a2 <_dtoa_r+0x432>
 8109b42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109b46:	2b30      	cmp	r3, #48	; 0x30
 8109b48:	f105 32ff 	add.w	r2, r5, #4294967295
 8109b4c:	d002      	beq.n	8109b54 <_dtoa_r+0x5e4>
 8109b4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8109b52:	e04a      	b.n	8109bea <_dtoa_r+0x67a>
 8109b54:	4615      	mov	r5, r2
 8109b56:	e7f4      	b.n	8109b42 <_dtoa_r+0x5d2>
 8109b58:	4b05      	ldr	r3, [pc, #20]	; (8109b70 <_dtoa_r+0x600>)
 8109b5a:	f7f6 fdd5 	bl	8100708 <__aeabi_dmul>
 8109b5e:	e9cd 0100 	strd	r0, r1, [sp]
 8109b62:	e7bc      	b.n	8109ade <_dtoa_r+0x56e>
 8109b64:	0810ace0 	.word	0x0810ace0
 8109b68:	0810acb8 	.word	0x0810acb8
 8109b6c:	3ff00000 	.word	0x3ff00000
 8109b70:	40240000 	.word	0x40240000
 8109b74:	401c0000 	.word	0x401c0000
 8109b78:	40140000 	.word	0x40140000
 8109b7c:	3fe00000 	.word	0x3fe00000
 8109b80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8109b84:	465d      	mov	r5, fp
 8109b86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109b8a:	4630      	mov	r0, r6
 8109b8c:	4639      	mov	r1, r7
 8109b8e:	f7f6 fee5 	bl	810095c <__aeabi_ddiv>
 8109b92:	f7f7 f869 	bl	8100c68 <__aeabi_d2iz>
 8109b96:	4680      	mov	r8, r0
 8109b98:	f7f6 fd4c 	bl	8100634 <__aeabi_i2d>
 8109b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109ba0:	f7f6 fdb2 	bl	8100708 <__aeabi_dmul>
 8109ba4:	4602      	mov	r2, r0
 8109ba6:	460b      	mov	r3, r1
 8109ba8:	4630      	mov	r0, r6
 8109baa:	4639      	mov	r1, r7
 8109bac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8109bb0:	f7f6 fbf2 	bl	8100398 <__aeabi_dsub>
 8109bb4:	f805 6b01 	strb.w	r6, [r5], #1
 8109bb8:	eba5 060b 	sub.w	r6, r5, fp
 8109bbc:	45b1      	cmp	r9, r6
 8109bbe:	4602      	mov	r2, r0
 8109bc0:	460b      	mov	r3, r1
 8109bc2:	d139      	bne.n	8109c38 <_dtoa_r+0x6c8>
 8109bc4:	f7f6 fbea 	bl	810039c <__adddf3>
 8109bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109bcc:	4606      	mov	r6, r0
 8109bce:	460f      	mov	r7, r1
 8109bd0:	f7f7 f82a 	bl	8100c28 <__aeabi_dcmpgt>
 8109bd4:	b9c8      	cbnz	r0, 8109c0a <_dtoa_r+0x69a>
 8109bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109bda:	4630      	mov	r0, r6
 8109bdc:	4639      	mov	r1, r7
 8109bde:	f7f6 fffb 	bl	8100bd8 <__aeabi_dcmpeq>
 8109be2:	b110      	cbz	r0, 8109bea <_dtoa_r+0x67a>
 8109be4:	f018 0f01 	tst.w	r8, #1
 8109be8:	d10f      	bne.n	8109c0a <_dtoa_r+0x69a>
 8109bea:	9904      	ldr	r1, [sp, #16]
 8109bec:	4620      	mov	r0, r4
 8109bee:	f000 fac1 	bl	810a174 <_Bfree>
 8109bf2:	2300      	movs	r3, #0
 8109bf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8109bf6:	702b      	strb	r3, [r5, #0]
 8109bf8:	f10a 0301 	add.w	r3, sl, #1
 8109bfc:	6013      	str	r3, [r2, #0]
 8109bfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109c00:	2b00      	cmp	r3, #0
 8109c02:	f000 8241 	beq.w	810a088 <_dtoa_r+0xb18>
 8109c06:	601d      	str	r5, [r3, #0]
 8109c08:	e23e      	b.n	810a088 <_dtoa_r+0xb18>
 8109c0a:	f8cd a020 	str.w	sl, [sp, #32]
 8109c0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8109c12:	2a39      	cmp	r2, #57	; 0x39
 8109c14:	f105 33ff 	add.w	r3, r5, #4294967295
 8109c18:	d108      	bne.n	8109c2c <_dtoa_r+0x6bc>
 8109c1a:	459b      	cmp	fp, r3
 8109c1c:	d10a      	bne.n	8109c34 <_dtoa_r+0x6c4>
 8109c1e:	9b08      	ldr	r3, [sp, #32]
 8109c20:	3301      	adds	r3, #1
 8109c22:	9308      	str	r3, [sp, #32]
 8109c24:	2330      	movs	r3, #48	; 0x30
 8109c26:	f88b 3000 	strb.w	r3, [fp]
 8109c2a:	465b      	mov	r3, fp
 8109c2c:	781a      	ldrb	r2, [r3, #0]
 8109c2e:	3201      	adds	r2, #1
 8109c30:	701a      	strb	r2, [r3, #0]
 8109c32:	e78c      	b.n	8109b4e <_dtoa_r+0x5de>
 8109c34:	461d      	mov	r5, r3
 8109c36:	e7ea      	b.n	8109c0e <_dtoa_r+0x69e>
 8109c38:	2200      	movs	r2, #0
 8109c3a:	4b9b      	ldr	r3, [pc, #620]	; (8109ea8 <_dtoa_r+0x938>)
 8109c3c:	f7f6 fd64 	bl	8100708 <__aeabi_dmul>
 8109c40:	2200      	movs	r2, #0
 8109c42:	2300      	movs	r3, #0
 8109c44:	4606      	mov	r6, r0
 8109c46:	460f      	mov	r7, r1
 8109c48:	f7f6 ffc6 	bl	8100bd8 <__aeabi_dcmpeq>
 8109c4c:	2800      	cmp	r0, #0
 8109c4e:	d09a      	beq.n	8109b86 <_dtoa_r+0x616>
 8109c50:	e7cb      	b.n	8109bea <_dtoa_r+0x67a>
 8109c52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109c54:	2a00      	cmp	r2, #0
 8109c56:	f000 808b 	beq.w	8109d70 <_dtoa_r+0x800>
 8109c5a:	9a06      	ldr	r2, [sp, #24]
 8109c5c:	2a01      	cmp	r2, #1
 8109c5e:	dc6e      	bgt.n	8109d3e <_dtoa_r+0x7ce>
 8109c60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8109c62:	2a00      	cmp	r2, #0
 8109c64:	d067      	beq.n	8109d36 <_dtoa_r+0x7c6>
 8109c66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109c6a:	9f07      	ldr	r7, [sp, #28]
 8109c6c:	9d05      	ldr	r5, [sp, #20]
 8109c6e:	9a05      	ldr	r2, [sp, #20]
 8109c70:	2101      	movs	r1, #1
 8109c72:	441a      	add	r2, r3
 8109c74:	4620      	mov	r0, r4
 8109c76:	9205      	str	r2, [sp, #20]
 8109c78:	4498      	add	r8, r3
 8109c7a:	f000 fb1b 	bl	810a2b4 <__i2b>
 8109c7e:	4606      	mov	r6, r0
 8109c80:	2d00      	cmp	r5, #0
 8109c82:	dd0c      	ble.n	8109c9e <_dtoa_r+0x72e>
 8109c84:	f1b8 0f00 	cmp.w	r8, #0
 8109c88:	dd09      	ble.n	8109c9e <_dtoa_r+0x72e>
 8109c8a:	4545      	cmp	r5, r8
 8109c8c:	9a05      	ldr	r2, [sp, #20]
 8109c8e:	462b      	mov	r3, r5
 8109c90:	bfa8      	it	ge
 8109c92:	4643      	movge	r3, r8
 8109c94:	1ad2      	subs	r2, r2, r3
 8109c96:	9205      	str	r2, [sp, #20]
 8109c98:	1aed      	subs	r5, r5, r3
 8109c9a:	eba8 0803 	sub.w	r8, r8, r3
 8109c9e:	9b07      	ldr	r3, [sp, #28]
 8109ca0:	b1eb      	cbz	r3, 8109cde <_dtoa_r+0x76e>
 8109ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109ca4:	2b00      	cmp	r3, #0
 8109ca6:	d067      	beq.n	8109d78 <_dtoa_r+0x808>
 8109ca8:	b18f      	cbz	r7, 8109cce <_dtoa_r+0x75e>
 8109caa:	4631      	mov	r1, r6
 8109cac:	463a      	mov	r2, r7
 8109cae:	4620      	mov	r0, r4
 8109cb0:	f000 fba0 	bl	810a3f4 <__pow5mult>
 8109cb4:	9a04      	ldr	r2, [sp, #16]
 8109cb6:	4601      	mov	r1, r0
 8109cb8:	4606      	mov	r6, r0
 8109cba:	4620      	mov	r0, r4
 8109cbc:	f000 fb03 	bl	810a2c6 <__multiply>
 8109cc0:	9904      	ldr	r1, [sp, #16]
 8109cc2:	9008      	str	r0, [sp, #32]
 8109cc4:	4620      	mov	r0, r4
 8109cc6:	f000 fa55 	bl	810a174 <_Bfree>
 8109cca:	9b08      	ldr	r3, [sp, #32]
 8109ccc:	9304      	str	r3, [sp, #16]
 8109cce:	9b07      	ldr	r3, [sp, #28]
 8109cd0:	1bda      	subs	r2, r3, r7
 8109cd2:	d004      	beq.n	8109cde <_dtoa_r+0x76e>
 8109cd4:	9904      	ldr	r1, [sp, #16]
 8109cd6:	4620      	mov	r0, r4
 8109cd8:	f000 fb8c 	bl	810a3f4 <__pow5mult>
 8109cdc:	9004      	str	r0, [sp, #16]
 8109cde:	2101      	movs	r1, #1
 8109ce0:	4620      	mov	r0, r4
 8109ce2:	f000 fae7 	bl	810a2b4 <__i2b>
 8109ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109ce8:	4607      	mov	r7, r0
 8109cea:	2b00      	cmp	r3, #0
 8109cec:	f000 81d0 	beq.w	810a090 <_dtoa_r+0xb20>
 8109cf0:	461a      	mov	r2, r3
 8109cf2:	4601      	mov	r1, r0
 8109cf4:	4620      	mov	r0, r4
 8109cf6:	f000 fb7d 	bl	810a3f4 <__pow5mult>
 8109cfa:	9b06      	ldr	r3, [sp, #24]
 8109cfc:	2b01      	cmp	r3, #1
 8109cfe:	4607      	mov	r7, r0
 8109d00:	dc40      	bgt.n	8109d84 <_dtoa_r+0x814>
 8109d02:	9b00      	ldr	r3, [sp, #0]
 8109d04:	2b00      	cmp	r3, #0
 8109d06:	d139      	bne.n	8109d7c <_dtoa_r+0x80c>
 8109d08:	9b01      	ldr	r3, [sp, #4]
 8109d0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109d0e:	2b00      	cmp	r3, #0
 8109d10:	d136      	bne.n	8109d80 <_dtoa_r+0x810>
 8109d12:	9b01      	ldr	r3, [sp, #4]
 8109d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8109d18:	0d1b      	lsrs	r3, r3, #20
 8109d1a:	051b      	lsls	r3, r3, #20
 8109d1c:	b12b      	cbz	r3, 8109d2a <_dtoa_r+0x7ba>
 8109d1e:	9b05      	ldr	r3, [sp, #20]
 8109d20:	3301      	adds	r3, #1
 8109d22:	9305      	str	r3, [sp, #20]
 8109d24:	f108 0801 	add.w	r8, r8, #1
 8109d28:	2301      	movs	r3, #1
 8109d2a:	9307      	str	r3, [sp, #28]
 8109d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109d2e:	2b00      	cmp	r3, #0
 8109d30:	d12a      	bne.n	8109d88 <_dtoa_r+0x818>
 8109d32:	2001      	movs	r0, #1
 8109d34:	e030      	b.n	8109d98 <_dtoa_r+0x828>
 8109d36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109d38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8109d3c:	e795      	b.n	8109c6a <_dtoa_r+0x6fa>
 8109d3e:	9b07      	ldr	r3, [sp, #28]
 8109d40:	f109 37ff 	add.w	r7, r9, #4294967295
 8109d44:	42bb      	cmp	r3, r7
 8109d46:	bfbf      	itttt	lt
 8109d48:	9b07      	ldrlt	r3, [sp, #28]
 8109d4a:	9707      	strlt	r7, [sp, #28]
 8109d4c:	1afa      	sublt	r2, r7, r3
 8109d4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8109d50:	bfbb      	ittet	lt
 8109d52:	189b      	addlt	r3, r3, r2
 8109d54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8109d56:	1bdf      	subge	r7, r3, r7
 8109d58:	2700      	movlt	r7, #0
 8109d5a:	f1b9 0f00 	cmp.w	r9, #0
 8109d5e:	bfb5      	itete	lt
 8109d60:	9b05      	ldrlt	r3, [sp, #20]
 8109d62:	9d05      	ldrge	r5, [sp, #20]
 8109d64:	eba3 0509 	sublt.w	r5, r3, r9
 8109d68:	464b      	movge	r3, r9
 8109d6a:	bfb8      	it	lt
 8109d6c:	2300      	movlt	r3, #0
 8109d6e:	e77e      	b.n	8109c6e <_dtoa_r+0x6fe>
 8109d70:	9f07      	ldr	r7, [sp, #28]
 8109d72:	9d05      	ldr	r5, [sp, #20]
 8109d74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8109d76:	e783      	b.n	8109c80 <_dtoa_r+0x710>
 8109d78:	9a07      	ldr	r2, [sp, #28]
 8109d7a:	e7ab      	b.n	8109cd4 <_dtoa_r+0x764>
 8109d7c:	2300      	movs	r3, #0
 8109d7e:	e7d4      	b.n	8109d2a <_dtoa_r+0x7ba>
 8109d80:	9b00      	ldr	r3, [sp, #0]
 8109d82:	e7d2      	b.n	8109d2a <_dtoa_r+0x7ba>
 8109d84:	2300      	movs	r3, #0
 8109d86:	9307      	str	r3, [sp, #28]
 8109d88:	693b      	ldr	r3, [r7, #16]
 8109d8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8109d8e:	6918      	ldr	r0, [r3, #16]
 8109d90:	f000 fa42 	bl	810a218 <__hi0bits>
 8109d94:	f1c0 0020 	rsb	r0, r0, #32
 8109d98:	4440      	add	r0, r8
 8109d9a:	f010 001f 	ands.w	r0, r0, #31
 8109d9e:	d047      	beq.n	8109e30 <_dtoa_r+0x8c0>
 8109da0:	f1c0 0320 	rsb	r3, r0, #32
 8109da4:	2b04      	cmp	r3, #4
 8109da6:	dd3b      	ble.n	8109e20 <_dtoa_r+0x8b0>
 8109da8:	9b05      	ldr	r3, [sp, #20]
 8109daa:	f1c0 001c 	rsb	r0, r0, #28
 8109dae:	4403      	add	r3, r0
 8109db0:	9305      	str	r3, [sp, #20]
 8109db2:	4405      	add	r5, r0
 8109db4:	4480      	add	r8, r0
 8109db6:	9b05      	ldr	r3, [sp, #20]
 8109db8:	2b00      	cmp	r3, #0
 8109dba:	dd05      	ble.n	8109dc8 <_dtoa_r+0x858>
 8109dbc:	461a      	mov	r2, r3
 8109dbe:	9904      	ldr	r1, [sp, #16]
 8109dc0:	4620      	mov	r0, r4
 8109dc2:	f000 fb65 	bl	810a490 <__lshift>
 8109dc6:	9004      	str	r0, [sp, #16]
 8109dc8:	f1b8 0f00 	cmp.w	r8, #0
 8109dcc:	dd05      	ble.n	8109dda <_dtoa_r+0x86a>
 8109dce:	4639      	mov	r1, r7
 8109dd0:	4642      	mov	r2, r8
 8109dd2:	4620      	mov	r0, r4
 8109dd4:	f000 fb5c 	bl	810a490 <__lshift>
 8109dd8:	4607      	mov	r7, r0
 8109dda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109ddc:	b353      	cbz	r3, 8109e34 <_dtoa_r+0x8c4>
 8109dde:	4639      	mov	r1, r7
 8109de0:	9804      	ldr	r0, [sp, #16]
 8109de2:	f000 fba9 	bl	810a538 <__mcmp>
 8109de6:	2800      	cmp	r0, #0
 8109de8:	da24      	bge.n	8109e34 <_dtoa_r+0x8c4>
 8109dea:	2300      	movs	r3, #0
 8109dec:	220a      	movs	r2, #10
 8109dee:	9904      	ldr	r1, [sp, #16]
 8109df0:	4620      	mov	r0, r4
 8109df2:	f000 f9d6 	bl	810a1a2 <__multadd>
 8109df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109df8:	9004      	str	r0, [sp, #16]
 8109dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109dfe:	2b00      	cmp	r3, #0
 8109e00:	f000 814d 	beq.w	810a09e <_dtoa_r+0xb2e>
 8109e04:	2300      	movs	r3, #0
 8109e06:	4631      	mov	r1, r6
 8109e08:	220a      	movs	r2, #10
 8109e0a:	4620      	mov	r0, r4
 8109e0c:	f000 f9c9 	bl	810a1a2 <__multadd>
 8109e10:	9b02      	ldr	r3, [sp, #8]
 8109e12:	2b00      	cmp	r3, #0
 8109e14:	4606      	mov	r6, r0
 8109e16:	dc4f      	bgt.n	8109eb8 <_dtoa_r+0x948>
 8109e18:	9b06      	ldr	r3, [sp, #24]
 8109e1a:	2b02      	cmp	r3, #2
 8109e1c:	dd4c      	ble.n	8109eb8 <_dtoa_r+0x948>
 8109e1e:	e011      	b.n	8109e44 <_dtoa_r+0x8d4>
 8109e20:	d0c9      	beq.n	8109db6 <_dtoa_r+0x846>
 8109e22:	9a05      	ldr	r2, [sp, #20]
 8109e24:	331c      	adds	r3, #28
 8109e26:	441a      	add	r2, r3
 8109e28:	9205      	str	r2, [sp, #20]
 8109e2a:	441d      	add	r5, r3
 8109e2c:	4498      	add	r8, r3
 8109e2e:	e7c2      	b.n	8109db6 <_dtoa_r+0x846>
 8109e30:	4603      	mov	r3, r0
 8109e32:	e7f6      	b.n	8109e22 <_dtoa_r+0x8b2>
 8109e34:	f1b9 0f00 	cmp.w	r9, #0
 8109e38:	dc38      	bgt.n	8109eac <_dtoa_r+0x93c>
 8109e3a:	9b06      	ldr	r3, [sp, #24]
 8109e3c:	2b02      	cmp	r3, #2
 8109e3e:	dd35      	ble.n	8109eac <_dtoa_r+0x93c>
 8109e40:	f8cd 9008 	str.w	r9, [sp, #8]
 8109e44:	9b02      	ldr	r3, [sp, #8]
 8109e46:	b963      	cbnz	r3, 8109e62 <_dtoa_r+0x8f2>
 8109e48:	4639      	mov	r1, r7
 8109e4a:	2205      	movs	r2, #5
 8109e4c:	4620      	mov	r0, r4
 8109e4e:	f000 f9a8 	bl	810a1a2 <__multadd>
 8109e52:	4601      	mov	r1, r0
 8109e54:	4607      	mov	r7, r0
 8109e56:	9804      	ldr	r0, [sp, #16]
 8109e58:	f000 fb6e 	bl	810a538 <__mcmp>
 8109e5c:	2800      	cmp	r0, #0
 8109e5e:	f73f adcc 	bgt.w	81099fa <_dtoa_r+0x48a>
 8109e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109e64:	465d      	mov	r5, fp
 8109e66:	ea6f 0a03 	mvn.w	sl, r3
 8109e6a:	f04f 0900 	mov.w	r9, #0
 8109e6e:	4639      	mov	r1, r7
 8109e70:	4620      	mov	r0, r4
 8109e72:	f000 f97f 	bl	810a174 <_Bfree>
 8109e76:	2e00      	cmp	r6, #0
 8109e78:	f43f aeb7 	beq.w	8109bea <_dtoa_r+0x67a>
 8109e7c:	f1b9 0f00 	cmp.w	r9, #0
 8109e80:	d005      	beq.n	8109e8e <_dtoa_r+0x91e>
 8109e82:	45b1      	cmp	r9, r6
 8109e84:	d003      	beq.n	8109e8e <_dtoa_r+0x91e>
 8109e86:	4649      	mov	r1, r9
 8109e88:	4620      	mov	r0, r4
 8109e8a:	f000 f973 	bl	810a174 <_Bfree>
 8109e8e:	4631      	mov	r1, r6
 8109e90:	4620      	mov	r0, r4
 8109e92:	f000 f96f 	bl	810a174 <_Bfree>
 8109e96:	e6a8      	b.n	8109bea <_dtoa_r+0x67a>
 8109e98:	2700      	movs	r7, #0
 8109e9a:	463e      	mov	r6, r7
 8109e9c:	e7e1      	b.n	8109e62 <_dtoa_r+0x8f2>
 8109e9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8109ea2:	463e      	mov	r6, r7
 8109ea4:	e5a9      	b.n	81099fa <_dtoa_r+0x48a>
 8109ea6:	bf00      	nop
 8109ea8:	40240000 	.word	0x40240000
 8109eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109eae:	f8cd 9008 	str.w	r9, [sp, #8]
 8109eb2:	2b00      	cmp	r3, #0
 8109eb4:	f000 80fa 	beq.w	810a0ac <_dtoa_r+0xb3c>
 8109eb8:	2d00      	cmp	r5, #0
 8109eba:	dd05      	ble.n	8109ec8 <_dtoa_r+0x958>
 8109ebc:	4631      	mov	r1, r6
 8109ebe:	462a      	mov	r2, r5
 8109ec0:	4620      	mov	r0, r4
 8109ec2:	f000 fae5 	bl	810a490 <__lshift>
 8109ec6:	4606      	mov	r6, r0
 8109ec8:	9b07      	ldr	r3, [sp, #28]
 8109eca:	2b00      	cmp	r3, #0
 8109ecc:	d04c      	beq.n	8109f68 <_dtoa_r+0x9f8>
 8109ece:	6871      	ldr	r1, [r6, #4]
 8109ed0:	4620      	mov	r0, r4
 8109ed2:	f000 f91b 	bl	810a10c <_Balloc>
 8109ed6:	6932      	ldr	r2, [r6, #16]
 8109ed8:	3202      	adds	r2, #2
 8109eda:	4605      	mov	r5, r0
 8109edc:	0092      	lsls	r2, r2, #2
 8109ede:	f106 010c 	add.w	r1, r6, #12
 8109ee2:	300c      	adds	r0, #12
 8109ee4:	f7fe fe26 	bl	8108b34 <memcpy>
 8109ee8:	2201      	movs	r2, #1
 8109eea:	4629      	mov	r1, r5
 8109eec:	4620      	mov	r0, r4
 8109eee:	f000 facf 	bl	810a490 <__lshift>
 8109ef2:	9b00      	ldr	r3, [sp, #0]
 8109ef4:	f8cd b014 	str.w	fp, [sp, #20]
 8109ef8:	f003 0301 	and.w	r3, r3, #1
 8109efc:	46b1      	mov	r9, r6
 8109efe:	9307      	str	r3, [sp, #28]
 8109f00:	4606      	mov	r6, r0
 8109f02:	4639      	mov	r1, r7
 8109f04:	9804      	ldr	r0, [sp, #16]
 8109f06:	f7ff faa5 	bl	8109454 <quorem>
 8109f0a:	4649      	mov	r1, r9
 8109f0c:	4605      	mov	r5, r0
 8109f0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8109f12:	9804      	ldr	r0, [sp, #16]
 8109f14:	f000 fb10 	bl	810a538 <__mcmp>
 8109f18:	4632      	mov	r2, r6
 8109f1a:	9000      	str	r0, [sp, #0]
 8109f1c:	4639      	mov	r1, r7
 8109f1e:	4620      	mov	r0, r4
 8109f20:	f000 fb24 	bl	810a56c <__mdiff>
 8109f24:	68c3      	ldr	r3, [r0, #12]
 8109f26:	4602      	mov	r2, r0
 8109f28:	bb03      	cbnz	r3, 8109f6c <_dtoa_r+0x9fc>
 8109f2a:	4601      	mov	r1, r0
 8109f2c:	9008      	str	r0, [sp, #32]
 8109f2e:	9804      	ldr	r0, [sp, #16]
 8109f30:	f000 fb02 	bl	810a538 <__mcmp>
 8109f34:	9a08      	ldr	r2, [sp, #32]
 8109f36:	4603      	mov	r3, r0
 8109f38:	4611      	mov	r1, r2
 8109f3a:	4620      	mov	r0, r4
 8109f3c:	9308      	str	r3, [sp, #32]
 8109f3e:	f000 f919 	bl	810a174 <_Bfree>
 8109f42:	9b08      	ldr	r3, [sp, #32]
 8109f44:	b9a3      	cbnz	r3, 8109f70 <_dtoa_r+0xa00>
 8109f46:	9a06      	ldr	r2, [sp, #24]
 8109f48:	b992      	cbnz	r2, 8109f70 <_dtoa_r+0xa00>
 8109f4a:	9a07      	ldr	r2, [sp, #28]
 8109f4c:	b982      	cbnz	r2, 8109f70 <_dtoa_r+0xa00>
 8109f4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8109f52:	d029      	beq.n	8109fa8 <_dtoa_r+0xa38>
 8109f54:	9b00      	ldr	r3, [sp, #0]
 8109f56:	2b00      	cmp	r3, #0
 8109f58:	dd01      	ble.n	8109f5e <_dtoa_r+0x9ee>
 8109f5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8109f5e:	9b05      	ldr	r3, [sp, #20]
 8109f60:	1c5d      	adds	r5, r3, #1
 8109f62:	f883 8000 	strb.w	r8, [r3]
 8109f66:	e782      	b.n	8109e6e <_dtoa_r+0x8fe>
 8109f68:	4630      	mov	r0, r6
 8109f6a:	e7c2      	b.n	8109ef2 <_dtoa_r+0x982>
 8109f6c:	2301      	movs	r3, #1
 8109f6e:	e7e3      	b.n	8109f38 <_dtoa_r+0x9c8>
 8109f70:	9a00      	ldr	r2, [sp, #0]
 8109f72:	2a00      	cmp	r2, #0
 8109f74:	db04      	blt.n	8109f80 <_dtoa_r+0xa10>
 8109f76:	d125      	bne.n	8109fc4 <_dtoa_r+0xa54>
 8109f78:	9a06      	ldr	r2, [sp, #24]
 8109f7a:	bb1a      	cbnz	r2, 8109fc4 <_dtoa_r+0xa54>
 8109f7c:	9a07      	ldr	r2, [sp, #28]
 8109f7e:	bb0a      	cbnz	r2, 8109fc4 <_dtoa_r+0xa54>
 8109f80:	2b00      	cmp	r3, #0
 8109f82:	ddec      	ble.n	8109f5e <_dtoa_r+0x9ee>
 8109f84:	2201      	movs	r2, #1
 8109f86:	9904      	ldr	r1, [sp, #16]
 8109f88:	4620      	mov	r0, r4
 8109f8a:	f000 fa81 	bl	810a490 <__lshift>
 8109f8e:	4639      	mov	r1, r7
 8109f90:	9004      	str	r0, [sp, #16]
 8109f92:	f000 fad1 	bl	810a538 <__mcmp>
 8109f96:	2800      	cmp	r0, #0
 8109f98:	dc03      	bgt.n	8109fa2 <_dtoa_r+0xa32>
 8109f9a:	d1e0      	bne.n	8109f5e <_dtoa_r+0x9ee>
 8109f9c:	f018 0f01 	tst.w	r8, #1
 8109fa0:	d0dd      	beq.n	8109f5e <_dtoa_r+0x9ee>
 8109fa2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8109fa6:	d1d8      	bne.n	8109f5a <_dtoa_r+0x9ea>
 8109fa8:	9b05      	ldr	r3, [sp, #20]
 8109faa:	9a05      	ldr	r2, [sp, #20]
 8109fac:	1c5d      	adds	r5, r3, #1
 8109fae:	2339      	movs	r3, #57	; 0x39
 8109fb0:	7013      	strb	r3, [r2, #0]
 8109fb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109fb6:	2b39      	cmp	r3, #57	; 0x39
 8109fb8:	f105 32ff 	add.w	r2, r5, #4294967295
 8109fbc:	d04f      	beq.n	810a05e <_dtoa_r+0xaee>
 8109fbe:	3301      	adds	r3, #1
 8109fc0:	7013      	strb	r3, [r2, #0]
 8109fc2:	e754      	b.n	8109e6e <_dtoa_r+0x8fe>
 8109fc4:	9a05      	ldr	r2, [sp, #20]
 8109fc6:	2b00      	cmp	r3, #0
 8109fc8:	f102 0501 	add.w	r5, r2, #1
 8109fcc:	dd06      	ble.n	8109fdc <_dtoa_r+0xa6c>
 8109fce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8109fd2:	d0e9      	beq.n	8109fa8 <_dtoa_r+0xa38>
 8109fd4:	f108 0801 	add.w	r8, r8, #1
 8109fd8:	9b05      	ldr	r3, [sp, #20]
 8109fda:	e7c2      	b.n	8109f62 <_dtoa_r+0x9f2>
 8109fdc:	9a02      	ldr	r2, [sp, #8]
 8109fde:	f805 8c01 	strb.w	r8, [r5, #-1]
 8109fe2:	eba5 030b 	sub.w	r3, r5, fp
 8109fe6:	4293      	cmp	r3, r2
 8109fe8:	d021      	beq.n	810a02e <_dtoa_r+0xabe>
 8109fea:	2300      	movs	r3, #0
 8109fec:	220a      	movs	r2, #10
 8109fee:	9904      	ldr	r1, [sp, #16]
 8109ff0:	4620      	mov	r0, r4
 8109ff2:	f000 f8d6 	bl	810a1a2 <__multadd>
 8109ff6:	45b1      	cmp	r9, r6
 8109ff8:	9004      	str	r0, [sp, #16]
 8109ffa:	f04f 0300 	mov.w	r3, #0
 8109ffe:	f04f 020a 	mov.w	r2, #10
 810a002:	4649      	mov	r1, r9
 810a004:	4620      	mov	r0, r4
 810a006:	d105      	bne.n	810a014 <_dtoa_r+0xaa4>
 810a008:	f000 f8cb 	bl	810a1a2 <__multadd>
 810a00c:	4681      	mov	r9, r0
 810a00e:	4606      	mov	r6, r0
 810a010:	9505      	str	r5, [sp, #20]
 810a012:	e776      	b.n	8109f02 <_dtoa_r+0x992>
 810a014:	f000 f8c5 	bl	810a1a2 <__multadd>
 810a018:	4631      	mov	r1, r6
 810a01a:	4681      	mov	r9, r0
 810a01c:	2300      	movs	r3, #0
 810a01e:	220a      	movs	r2, #10
 810a020:	4620      	mov	r0, r4
 810a022:	f000 f8be 	bl	810a1a2 <__multadd>
 810a026:	4606      	mov	r6, r0
 810a028:	e7f2      	b.n	810a010 <_dtoa_r+0xaa0>
 810a02a:	f04f 0900 	mov.w	r9, #0
 810a02e:	2201      	movs	r2, #1
 810a030:	9904      	ldr	r1, [sp, #16]
 810a032:	4620      	mov	r0, r4
 810a034:	f000 fa2c 	bl	810a490 <__lshift>
 810a038:	4639      	mov	r1, r7
 810a03a:	9004      	str	r0, [sp, #16]
 810a03c:	f000 fa7c 	bl	810a538 <__mcmp>
 810a040:	2800      	cmp	r0, #0
 810a042:	dcb6      	bgt.n	8109fb2 <_dtoa_r+0xa42>
 810a044:	d102      	bne.n	810a04c <_dtoa_r+0xadc>
 810a046:	f018 0f01 	tst.w	r8, #1
 810a04a:	d1b2      	bne.n	8109fb2 <_dtoa_r+0xa42>
 810a04c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810a050:	2b30      	cmp	r3, #48	; 0x30
 810a052:	f105 32ff 	add.w	r2, r5, #4294967295
 810a056:	f47f af0a 	bne.w	8109e6e <_dtoa_r+0x8fe>
 810a05a:	4615      	mov	r5, r2
 810a05c:	e7f6      	b.n	810a04c <_dtoa_r+0xadc>
 810a05e:	4593      	cmp	fp, r2
 810a060:	d105      	bne.n	810a06e <_dtoa_r+0xafe>
 810a062:	2331      	movs	r3, #49	; 0x31
 810a064:	f10a 0a01 	add.w	sl, sl, #1
 810a068:	f88b 3000 	strb.w	r3, [fp]
 810a06c:	e6ff      	b.n	8109e6e <_dtoa_r+0x8fe>
 810a06e:	4615      	mov	r5, r2
 810a070:	e79f      	b.n	8109fb2 <_dtoa_r+0xa42>
 810a072:	f8df b064 	ldr.w	fp, [pc, #100]	; 810a0d8 <_dtoa_r+0xb68>
 810a076:	e007      	b.n	810a088 <_dtoa_r+0xb18>
 810a078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a07a:	f8df b060 	ldr.w	fp, [pc, #96]	; 810a0dc <_dtoa_r+0xb6c>
 810a07e:	b11b      	cbz	r3, 810a088 <_dtoa_r+0xb18>
 810a080:	f10b 0308 	add.w	r3, fp, #8
 810a084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810a086:	6013      	str	r3, [r2, #0]
 810a088:	4658      	mov	r0, fp
 810a08a:	b017      	add	sp, #92	; 0x5c
 810a08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a090:	9b06      	ldr	r3, [sp, #24]
 810a092:	2b01      	cmp	r3, #1
 810a094:	f77f ae35 	ble.w	8109d02 <_dtoa_r+0x792>
 810a098:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810a09a:	9307      	str	r3, [sp, #28]
 810a09c:	e649      	b.n	8109d32 <_dtoa_r+0x7c2>
 810a09e:	9b02      	ldr	r3, [sp, #8]
 810a0a0:	2b00      	cmp	r3, #0
 810a0a2:	dc03      	bgt.n	810a0ac <_dtoa_r+0xb3c>
 810a0a4:	9b06      	ldr	r3, [sp, #24]
 810a0a6:	2b02      	cmp	r3, #2
 810a0a8:	f73f aecc 	bgt.w	8109e44 <_dtoa_r+0x8d4>
 810a0ac:	465d      	mov	r5, fp
 810a0ae:	4639      	mov	r1, r7
 810a0b0:	9804      	ldr	r0, [sp, #16]
 810a0b2:	f7ff f9cf 	bl	8109454 <quorem>
 810a0b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810a0ba:	f805 8b01 	strb.w	r8, [r5], #1
 810a0be:	9a02      	ldr	r2, [sp, #8]
 810a0c0:	eba5 030b 	sub.w	r3, r5, fp
 810a0c4:	429a      	cmp	r2, r3
 810a0c6:	ddb0      	ble.n	810a02a <_dtoa_r+0xaba>
 810a0c8:	2300      	movs	r3, #0
 810a0ca:	220a      	movs	r2, #10
 810a0cc:	9904      	ldr	r1, [sp, #16]
 810a0ce:	4620      	mov	r0, r4
 810a0d0:	f000 f867 	bl	810a1a2 <__multadd>
 810a0d4:	9004      	str	r0, [sp, #16]
 810a0d6:	e7ea      	b.n	810a0ae <_dtoa_r+0xb3e>
 810a0d8:	0810ac80 	.word	0x0810ac80
 810a0dc:	0810aca4 	.word	0x0810aca4

0810a0e0 <_localeconv_r>:
 810a0e0:	4b04      	ldr	r3, [pc, #16]	; (810a0f4 <_localeconv_r+0x14>)
 810a0e2:	681b      	ldr	r3, [r3, #0]
 810a0e4:	6a18      	ldr	r0, [r3, #32]
 810a0e6:	4b04      	ldr	r3, [pc, #16]	; (810a0f8 <_localeconv_r+0x18>)
 810a0e8:	2800      	cmp	r0, #0
 810a0ea:	bf08      	it	eq
 810a0ec:	4618      	moveq	r0, r3
 810a0ee:	30f0      	adds	r0, #240	; 0xf0
 810a0f0:	4770      	bx	lr
 810a0f2:	bf00      	nop
 810a0f4:	10000010 	.word	0x10000010
 810a0f8:	10000074 	.word	0x10000074

0810a0fc <malloc>:
 810a0fc:	4b02      	ldr	r3, [pc, #8]	; (810a108 <malloc+0xc>)
 810a0fe:	4601      	mov	r1, r0
 810a100:	6818      	ldr	r0, [r3, #0]
 810a102:	f000 bb3b 	b.w	810a77c <_malloc_r>
 810a106:	bf00      	nop
 810a108:	10000010 	.word	0x10000010

0810a10c <_Balloc>:
 810a10c:	b570      	push	{r4, r5, r6, lr}
 810a10e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810a110:	4604      	mov	r4, r0
 810a112:	460e      	mov	r6, r1
 810a114:	b93d      	cbnz	r5, 810a126 <_Balloc+0x1a>
 810a116:	2010      	movs	r0, #16
 810a118:	f7ff fff0 	bl	810a0fc <malloc>
 810a11c:	6260      	str	r0, [r4, #36]	; 0x24
 810a11e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810a122:	6005      	str	r5, [r0, #0]
 810a124:	60c5      	str	r5, [r0, #12]
 810a126:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810a128:	68eb      	ldr	r3, [r5, #12]
 810a12a:	b183      	cbz	r3, 810a14e <_Balloc+0x42>
 810a12c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a12e:	68db      	ldr	r3, [r3, #12]
 810a130:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 810a134:	b9b8      	cbnz	r0, 810a166 <_Balloc+0x5a>
 810a136:	2101      	movs	r1, #1
 810a138:	fa01 f506 	lsl.w	r5, r1, r6
 810a13c:	1d6a      	adds	r2, r5, #5
 810a13e:	0092      	lsls	r2, r2, #2
 810a140:	4620      	mov	r0, r4
 810a142:	f000 fabf 	bl	810a6c4 <_calloc_r>
 810a146:	b160      	cbz	r0, 810a162 <_Balloc+0x56>
 810a148:	e9c0 6501 	strd	r6, r5, [r0, #4]
 810a14c:	e00e      	b.n	810a16c <_Balloc+0x60>
 810a14e:	2221      	movs	r2, #33	; 0x21
 810a150:	2104      	movs	r1, #4
 810a152:	4620      	mov	r0, r4
 810a154:	f000 fab6 	bl	810a6c4 <_calloc_r>
 810a158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a15a:	60e8      	str	r0, [r5, #12]
 810a15c:	68db      	ldr	r3, [r3, #12]
 810a15e:	2b00      	cmp	r3, #0
 810a160:	d1e4      	bne.n	810a12c <_Balloc+0x20>
 810a162:	2000      	movs	r0, #0
 810a164:	bd70      	pop	{r4, r5, r6, pc}
 810a166:	6802      	ldr	r2, [r0, #0]
 810a168:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 810a16c:	2300      	movs	r3, #0
 810a16e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810a172:	e7f7      	b.n	810a164 <_Balloc+0x58>

0810a174 <_Bfree>:
 810a174:	b570      	push	{r4, r5, r6, lr}
 810a176:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810a178:	4606      	mov	r6, r0
 810a17a:	460d      	mov	r5, r1
 810a17c:	b93c      	cbnz	r4, 810a18e <_Bfree+0x1a>
 810a17e:	2010      	movs	r0, #16
 810a180:	f7ff ffbc 	bl	810a0fc <malloc>
 810a184:	6270      	str	r0, [r6, #36]	; 0x24
 810a186:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810a18a:	6004      	str	r4, [r0, #0]
 810a18c:	60c4      	str	r4, [r0, #12]
 810a18e:	b13d      	cbz	r5, 810a1a0 <_Bfree+0x2c>
 810a190:	6a73      	ldr	r3, [r6, #36]	; 0x24
 810a192:	686a      	ldr	r2, [r5, #4]
 810a194:	68db      	ldr	r3, [r3, #12]
 810a196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810a19a:	6029      	str	r1, [r5, #0]
 810a19c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 810a1a0:	bd70      	pop	{r4, r5, r6, pc}

0810a1a2 <__multadd>:
 810a1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a1a6:	690d      	ldr	r5, [r1, #16]
 810a1a8:	461f      	mov	r7, r3
 810a1aa:	4606      	mov	r6, r0
 810a1ac:	460c      	mov	r4, r1
 810a1ae:	f101 0c14 	add.w	ip, r1, #20
 810a1b2:	2300      	movs	r3, #0
 810a1b4:	f8dc 0000 	ldr.w	r0, [ip]
 810a1b8:	b281      	uxth	r1, r0
 810a1ba:	fb02 7101 	mla	r1, r2, r1, r7
 810a1be:	0c0f      	lsrs	r7, r1, #16
 810a1c0:	0c00      	lsrs	r0, r0, #16
 810a1c2:	fb02 7000 	mla	r0, r2, r0, r7
 810a1c6:	b289      	uxth	r1, r1
 810a1c8:	3301      	adds	r3, #1
 810a1ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 810a1ce:	429d      	cmp	r5, r3
 810a1d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 810a1d4:	f84c 1b04 	str.w	r1, [ip], #4
 810a1d8:	dcec      	bgt.n	810a1b4 <__multadd+0x12>
 810a1da:	b1d7      	cbz	r7, 810a212 <__multadd+0x70>
 810a1dc:	68a3      	ldr	r3, [r4, #8]
 810a1de:	42ab      	cmp	r3, r5
 810a1e0:	dc12      	bgt.n	810a208 <__multadd+0x66>
 810a1e2:	6861      	ldr	r1, [r4, #4]
 810a1e4:	4630      	mov	r0, r6
 810a1e6:	3101      	adds	r1, #1
 810a1e8:	f7ff ff90 	bl	810a10c <_Balloc>
 810a1ec:	6922      	ldr	r2, [r4, #16]
 810a1ee:	3202      	adds	r2, #2
 810a1f0:	f104 010c 	add.w	r1, r4, #12
 810a1f4:	4680      	mov	r8, r0
 810a1f6:	0092      	lsls	r2, r2, #2
 810a1f8:	300c      	adds	r0, #12
 810a1fa:	f7fe fc9b 	bl	8108b34 <memcpy>
 810a1fe:	4621      	mov	r1, r4
 810a200:	4630      	mov	r0, r6
 810a202:	f7ff ffb7 	bl	810a174 <_Bfree>
 810a206:	4644      	mov	r4, r8
 810a208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810a20c:	3501      	adds	r5, #1
 810a20e:	615f      	str	r7, [r3, #20]
 810a210:	6125      	str	r5, [r4, #16]
 810a212:	4620      	mov	r0, r4
 810a214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810a218 <__hi0bits>:
 810a218:	0c02      	lsrs	r2, r0, #16
 810a21a:	0412      	lsls	r2, r2, #16
 810a21c:	4603      	mov	r3, r0
 810a21e:	b9b2      	cbnz	r2, 810a24e <__hi0bits+0x36>
 810a220:	0403      	lsls	r3, r0, #16
 810a222:	2010      	movs	r0, #16
 810a224:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 810a228:	bf04      	itt	eq
 810a22a:	021b      	lsleq	r3, r3, #8
 810a22c:	3008      	addeq	r0, #8
 810a22e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 810a232:	bf04      	itt	eq
 810a234:	011b      	lsleq	r3, r3, #4
 810a236:	3004      	addeq	r0, #4
 810a238:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 810a23c:	bf04      	itt	eq
 810a23e:	009b      	lsleq	r3, r3, #2
 810a240:	3002      	addeq	r0, #2
 810a242:	2b00      	cmp	r3, #0
 810a244:	db06      	blt.n	810a254 <__hi0bits+0x3c>
 810a246:	005b      	lsls	r3, r3, #1
 810a248:	d503      	bpl.n	810a252 <__hi0bits+0x3a>
 810a24a:	3001      	adds	r0, #1
 810a24c:	4770      	bx	lr
 810a24e:	2000      	movs	r0, #0
 810a250:	e7e8      	b.n	810a224 <__hi0bits+0xc>
 810a252:	2020      	movs	r0, #32
 810a254:	4770      	bx	lr

0810a256 <__lo0bits>:
 810a256:	6803      	ldr	r3, [r0, #0]
 810a258:	f013 0207 	ands.w	r2, r3, #7
 810a25c:	4601      	mov	r1, r0
 810a25e:	d00b      	beq.n	810a278 <__lo0bits+0x22>
 810a260:	07da      	lsls	r2, r3, #31
 810a262:	d423      	bmi.n	810a2ac <__lo0bits+0x56>
 810a264:	0798      	lsls	r0, r3, #30
 810a266:	bf49      	itett	mi
 810a268:	085b      	lsrmi	r3, r3, #1
 810a26a:	089b      	lsrpl	r3, r3, #2
 810a26c:	2001      	movmi	r0, #1
 810a26e:	600b      	strmi	r3, [r1, #0]
 810a270:	bf5c      	itt	pl
 810a272:	600b      	strpl	r3, [r1, #0]
 810a274:	2002      	movpl	r0, #2
 810a276:	4770      	bx	lr
 810a278:	b298      	uxth	r0, r3
 810a27a:	b9a8      	cbnz	r0, 810a2a8 <__lo0bits+0x52>
 810a27c:	0c1b      	lsrs	r3, r3, #16
 810a27e:	2010      	movs	r0, #16
 810a280:	f013 0fff 	tst.w	r3, #255	; 0xff
 810a284:	bf04      	itt	eq
 810a286:	0a1b      	lsreq	r3, r3, #8
 810a288:	3008      	addeq	r0, #8
 810a28a:	071a      	lsls	r2, r3, #28
 810a28c:	bf04      	itt	eq
 810a28e:	091b      	lsreq	r3, r3, #4
 810a290:	3004      	addeq	r0, #4
 810a292:	079a      	lsls	r2, r3, #30
 810a294:	bf04      	itt	eq
 810a296:	089b      	lsreq	r3, r3, #2
 810a298:	3002      	addeq	r0, #2
 810a29a:	07da      	lsls	r2, r3, #31
 810a29c:	d402      	bmi.n	810a2a4 <__lo0bits+0x4e>
 810a29e:	085b      	lsrs	r3, r3, #1
 810a2a0:	d006      	beq.n	810a2b0 <__lo0bits+0x5a>
 810a2a2:	3001      	adds	r0, #1
 810a2a4:	600b      	str	r3, [r1, #0]
 810a2a6:	4770      	bx	lr
 810a2a8:	4610      	mov	r0, r2
 810a2aa:	e7e9      	b.n	810a280 <__lo0bits+0x2a>
 810a2ac:	2000      	movs	r0, #0
 810a2ae:	4770      	bx	lr
 810a2b0:	2020      	movs	r0, #32
 810a2b2:	4770      	bx	lr

0810a2b4 <__i2b>:
 810a2b4:	b510      	push	{r4, lr}
 810a2b6:	460c      	mov	r4, r1
 810a2b8:	2101      	movs	r1, #1
 810a2ba:	f7ff ff27 	bl	810a10c <_Balloc>
 810a2be:	2201      	movs	r2, #1
 810a2c0:	6144      	str	r4, [r0, #20]
 810a2c2:	6102      	str	r2, [r0, #16]
 810a2c4:	bd10      	pop	{r4, pc}

0810a2c6 <__multiply>:
 810a2c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a2ca:	4614      	mov	r4, r2
 810a2cc:	690a      	ldr	r2, [r1, #16]
 810a2ce:	6923      	ldr	r3, [r4, #16]
 810a2d0:	429a      	cmp	r2, r3
 810a2d2:	bfb8      	it	lt
 810a2d4:	460b      	movlt	r3, r1
 810a2d6:	4688      	mov	r8, r1
 810a2d8:	bfbc      	itt	lt
 810a2da:	46a0      	movlt	r8, r4
 810a2dc:	461c      	movlt	r4, r3
 810a2de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810a2e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810a2e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a2ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810a2ee:	eb07 0609 	add.w	r6, r7, r9
 810a2f2:	42b3      	cmp	r3, r6
 810a2f4:	bfb8      	it	lt
 810a2f6:	3101      	addlt	r1, #1
 810a2f8:	f7ff ff08 	bl	810a10c <_Balloc>
 810a2fc:	f100 0514 	add.w	r5, r0, #20
 810a300:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 810a304:	462b      	mov	r3, r5
 810a306:	2200      	movs	r2, #0
 810a308:	4573      	cmp	r3, lr
 810a30a:	d316      	bcc.n	810a33a <__multiply+0x74>
 810a30c:	f104 0214 	add.w	r2, r4, #20
 810a310:	f108 0114 	add.w	r1, r8, #20
 810a314:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 810a318:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810a31c:	9300      	str	r3, [sp, #0]
 810a31e:	9b00      	ldr	r3, [sp, #0]
 810a320:	9201      	str	r2, [sp, #4]
 810a322:	4293      	cmp	r3, r2
 810a324:	d80c      	bhi.n	810a340 <__multiply+0x7a>
 810a326:	2e00      	cmp	r6, #0
 810a328:	dd03      	ble.n	810a332 <__multiply+0x6c>
 810a32a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 810a32e:	2b00      	cmp	r3, #0
 810a330:	d05d      	beq.n	810a3ee <__multiply+0x128>
 810a332:	6106      	str	r6, [r0, #16]
 810a334:	b003      	add	sp, #12
 810a336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a33a:	f843 2b04 	str.w	r2, [r3], #4
 810a33e:	e7e3      	b.n	810a308 <__multiply+0x42>
 810a340:	f8b2 b000 	ldrh.w	fp, [r2]
 810a344:	f1bb 0f00 	cmp.w	fp, #0
 810a348:	d023      	beq.n	810a392 <__multiply+0xcc>
 810a34a:	4689      	mov	r9, r1
 810a34c:	46ac      	mov	ip, r5
 810a34e:	f04f 0800 	mov.w	r8, #0
 810a352:	f859 4b04 	ldr.w	r4, [r9], #4
 810a356:	f8dc a000 	ldr.w	sl, [ip]
 810a35a:	b2a3      	uxth	r3, r4
 810a35c:	fa1f fa8a 	uxth.w	sl, sl
 810a360:	fb0b a303 	mla	r3, fp, r3, sl
 810a364:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810a368:	f8dc 4000 	ldr.w	r4, [ip]
 810a36c:	4443      	add	r3, r8
 810a36e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810a372:	fb0b 840a 	mla	r4, fp, sl, r8
 810a376:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 810a37a:	46e2      	mov	sl, ip
 810a37c:	b29b      	uxth	r3, r3
 810a37e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810a382:	454f      	cmp	r7, r9
 810a384:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810a388:	f84a 3b04 	str.w	r3, [sl], #4
 810a38c:	d82b      	bhi.n	810a3e6 <__multiply+0x120>
 810a38e:	f8cc 8004 	str.w	r8, [ip, #4]
 810a392:	9b01      	ldr	r3, [sp, #4]
 810a394:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 810a398:	3204      	adds	r2, #4
 810a39a:	f1ba 0f00 	cmp.w	sl, #0
 810a39e:	d020      	beq.n	810a3e2 <__multiply+0x11c>
 810a3a0:	682b      	ldr	r3, [r5, #0]
 810a3a2:	4689      	mov	r9, r1
 810a3a4:	46a8      	mov	r8, r5
 810a3a6:	f04f 0b00 	mov.w	fp, #0
 810a3aa:	f8b9 c000 	ldrh.w	ip, [r9]
 810a3ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 810a3b2:	fb0a 440c 	mla	r4, sl, ip, r4
 810a3b6:	445c      	add	r4, fp
 810a3b8:	46c4      	mov	ip, r8
 810a3ba:	b29b      	uxth	r3, r3
 810a3bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810a3c0:	f84c 3b04 	str.w	r3, [ip], #4
 810a3c4:	f859 3b04 	ldr.w	r3, [r9], #4
 810a3c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 810a3cc:	0c1b      	lsrs	r3, r3, #16
 810a3ce:	fb0a b303 	mla	r3, sl, r3, fp
 810a3d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 810a3d6:	454f      	cmp	r7, r9
 810a3d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 810a3dc:	d805      	bhi.n	810a3ea <__multiply+0x124>
 810a3de:	f8c8 3004 	str.w	r3, [r8, #4]
 810a3e2:	3504      	adds	r5, #4
 810a3e4:	e79b      	b.n	810a31e <__multiply+0x58>
 810a3e6:	46d4      	mov	ip, sl
 810a3e8:	e7b3      	b.n	810a352 <__multiply+0x8c>
 810a3ea:	46e0      	mov	r8, ip
 810a3ec:	e7dd      	b.n	810a3aa <__multiply+0xe4>
 810a3ee:	3e01      	subs	r6, #1
 810a3f0:	e799      	b.n	810a326 <__multiply+0x60>
	...

0810a3f4 <__pow5mult>:
 810a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a3f8:	4615      	mov	r5, r2
 810a3fa:	f012 0203 	ands.w	r2, r2, #3
 810a3fe:	4606      	mov	r6, r0
 810a400:	460f      	mov	r7, r1
 810a402:	d007      	beq.n	810a414 <__pow5mult+0x20>
 810a404:	3a01      	subs	r2, #1
 810a406:	4c21      	ldr	r4, [pc, #132]	; (810a48c <__pow5mult+0x98>)
 810a408:	2300      	movs	r3, #0
 810a40a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810a40e:	f7ff fec8 	bl	810a1a2 <__multadd>
 810a412:	4607      	mov	r7, r0
 810a414:	10ad      	asrs	r5, r5, #2
 810a416:	d035      	beq.n	810a484 <__pow5mult+0x90>
 810a418:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810a41a:	b93c      	cbnz	r4, 810a42c <__pow5mult+0x38>
 810a41c:	2010      	movs	r0, #16
 810a41e:	f7ff fe6d 	bl	810a0fc <malloc>
 810a422:	6270      	str	r0, [r6, #36]	; 0x24
 810a424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810a428:	6004      	str	r4, [r0, #0]
 810a42a:	60c4      	str	r4, [r0, #12]
 810a42c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810a430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810a434:	b94c      	cbnz	r4, 810a44a <__pow5mult+0x56>
 810a436:	f240 2171 	movw	r1, #625	; 0x271
 810a43a:	4630      	mov	r0, r6
 810a43c:	f7ff ff3a 	bl	810a2b4 <__i2b>
 810a440:	2300      	movs	r3, #0
 810a442:	f8c8 0008 	str.w	r0, [r8, #8]
 810a446:	4604      	mov	r4, r0
 810a448:	6003      	str	r3, [r0, #0]
 810a44a:	f04f 0800 	mov.w	r8, #0
 810a44e:	07eb      	lsls	r3, r5, #31
 810a450:	d50a      	bpl.n	810a468 <__pow5mult+0x74>
 810a452:	4639      	mov	r1, r7
 810a454:	4622      	mov	r2, r4
 810a456:	4630      	mov	r0, r6
 810a458:	f7ff ff35 	bl	810a2c6 <__multiply>
 810a45c:	4639      	mov	r1, r7
 810a45e:	4681      	mov	r9, r0
 810a460:	4630      	mov	r0, r6
 810a462:	f7ff fe87 	bl	810a174 <_Bfree>
 810a466:	464f      	mov	r7, r9
 810a468:	106d      	asrs	r5, r5, #1
 810a46a:	d00b      	beq.n	810a484 <__pow5mult+0x90>
 810a46c:	6820      	ldr	r0, [r4, #0]
 810a46e:	b938      	cbnz	r0, 810a480 <__pow5mult+0x8c>
 810a470:	4622      	mov	r2, r4
 810a472:	4621      	mov	r1, r4
 810a474:	4630      	mov	r0, r6
 810a476:	f7ff ff26 	bl	810a2c6 <__multiply>
 810a47a:	6020      	str	r0, [r4, #0]
 810a47c:	f8c0 8000 	str.w	r8, [r0]
 810a480:	4604      	mov	r4, r0
 810a482:	e7e4      	b.n	810a44e <__pow5mult+0x5a>
 810a484:	4638      	mov	r0, r7
 810a486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a48a:	bf00      	nop
 810a48c:	0810ada8 	.word	0x0810ada8

0810a490 <__lshift>:
 810a490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a494:	460c      	mov	r4, r1
 810a496:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810a49a:	6923      	ldr	r3, [r4, #16]
 810a49c:	6849      	ldr	r1, [r1, #4]
 810a49e:	eb0a 0903 	add.w	r9, sl, r3
 810a4a2:	68a3      	ldr	r3, [r4, #8]
 810a4a4:	4607      	mov	r7, r0
 810a4a6:	4616      	mov	r6, r2
 810a4a8:	f109 0501 	add.w	r5, r9, #1
 810a4ac:	42ab      	cmp	r3, r5
 810a4ae:	db32      	blt.n	810a516 <__lshift+0x86>
 810a4b0:	4638      	mov	r0, r7
 810a4b2:	f7ff fe2b 	bl	810a10c <_Balloc>
 810a4b6:	2300      	movs	r3, #0
 810a4b8:	4680      	mov	r8, r0
 810a4ba:	f100 0114 	add.w	r1, r0, #20
 810a4be:	461a      	mov	r2, r3
 810a4c0:	4553      	cmp	r3, sl
 810a4c2:	db2b      	blt.n	810a51c <__lshift+0x8c>
 810a4c4:	6920      	ldr	r0, [r4, #16]
 810a4c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a4ca:	f104 0314 	add.w	r3, r4, #20
 810a4ce:	f016 021f 	ands.w	r2, r6, #31
 810a4d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810a4d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810a4da:	d025      	beq.n	810a528 <__lshift+0x98>
 810a4dc:	f1c2 0e20 	rsb	lr, r2, #32
 810a4e0:	2000      	movs	r0, #0
 810a4e2:	681e      	ldr	r6, [r3, #0]
 810a4e4:	468a      	mov	sl, r1
 810a4e6:	4096      	lsls	r6, r2
 810a4e8:	4330      	orrs	r0, r6
 810a4ea:	f84a 0b04 	str.w	r0, [sl], #4
 810a4ee:	f853 0b04 	ldr.w	r0, [r3], #4
 810a4f2:	459c      	cmp	ip, r3
 810a4f4:	fa20 f00e 	lsr.w	r0, r0, lr
 810a4f8:	d814      	bhi.n	810a524 <__lshift+0x94>
 810a4fa:	6048      	str	r0, [r1, #4]
 810a4fc:	b108      	cbz	r0, 810a502 <__lshift+0x72>
 810a4fe:	f109 0502 	add.w	r5, r9, #2
 810a502:	3d01      	subs	r5, #1
 810a504:	4638      	mov	r0, r7
 810a506:	f8c8 5010 	str.w	r5, [r8, #16]
 810a50a:	4621      	mov	r1, r4
 810a50c:	f7ff fe32 	bl	810a174 <_Bfree>
 810a510:	4640      	mov	r0, r8
 810a512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a516:	3101      	adds	r1, #1
 810a518:	005b      	lsls	r3, r3, #1
 810a51a:	e7c7      	b.n	810a4ac <__lshift+0x1c>
 810a51c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810a520:	3301      	adds	r3, #1
 810a522:	e7cd      	b.n	810a4c0 <__lshift+0x30>
 810a524:	4651      	mov	r1, sl
 810a526:	e7dc      	b.n	810a4e2 <__lshift+0x52>
 810a528:	3904      	subs	r1, #4
 810a52a:	f853 2b04 	ldr.w	r2, [r3], #4
 810a52e:	f841 2f04 	str.w	r2, [r1, #4]!
 810a532:	459c      	cmp	ip, r3
 810a534:	d8f9      	bhi.n	810a52a <__lshift+0x9a>
 810a536:	e7e4      	b.n	810a502 <__lshift+0x72>

0810a538 <__mcmp>:
 810a538:	6903      	ldr	r3, [r0, #16]
 810a53a:	690a      	ldr	r2, [r1, #16]
 810a53c:	1a9b      	subs	r3, r3, r2
 810a53e:	b530      	push	{r4, r5, lr}
 810a540:	d10c      	bne.n	810a55c <__mcmp+0x24>
 810a542:	0092      	lsls	r2, r2, #2
 810a544:	3014      	adds	r0, #20
 810a546:	3114      	adds	r1, #20
 810a548:	1884      	adds	r4, r0, r2
 810a54a:	4411      	add	r1, r2
 810a54c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810a550:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810a554:	4295      	cmp	r5, r2
 810a556:	d003      	beq.n	810a560 <__mcmp+0x28>
 810a558:	d305      	bcc.n	810a566 <__mcmp+0x2e>
 810a55a:	2301      	movs	r3, #1
 810a55c:	4618      	mov	r0, r3
 810a55e:	bd30      	pop	{r4, r5, pc}
 810a560:	42a0      	cmp	r0, r4
 810a562:	d3f3      	bcc.n	810a54c <__mcmp+0x14>
 810a564:	e7fa      	b.n	810a55c <__mcmp+0x24>
 810a566:	f04f 33ff 	mov.w	r3, #4294967295
 810a56a:	e7f7      	b.n	810a55c <__mcmp+0x24>

0810a56c <__mdiff>:
 810a56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a570:	460d      	mov	r5, r1
 810a572:	4607      	mov	r7, r0
 810a574:	4611      	mov	r1, r2
 810a576:	4628      	mov	r0, r5
 810a578:	4614      	mov	r4, r2
 810a57a:	f7ff ffdd 	bl	810a538 <__mcmp>
 810a57e:	1e06      	subs	r6, r0, #0
 810a580:	d108      	bne.n	810a594 <__mdiff+0x28>
 810a582:	4631      	mov	r1, r6
 810a584:	4638      	mov	r0, r7
 810a586:	f7ff fdc1 	bl	810a10c <_Balloc>
 810a58a:	2301      	movs	r3, #1
 810a58c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810a590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a594:	bfa4      	itt	ge
 810a596:	4623      	movge	r3, r4
 810a598:	462c      	movge	r4, r5
 810a59a:	4638      	mov	r0, r7
 810a59c:	6861      	ldr	r1, [r4, #4]
 810a59e:	bfa6      	itte	ge
 810a5a0:	461d      	movge	r5, r3
 810a5a2:	2600      	movge	r6, #0
 810a5a4:	2601      	movlt	r6, #1
 810a5a6:	f7ff fdb1 	bl	810a10c <_Balloc>
 810a5aa:	692b      	ldr	r3, [r5, #16]
 810a5ac:	60c6      	str	r6, [r0, #12]
 810a5ae:	6926      	ldr	r6, [r4, #16]
 810a5b0:	f105 0914 	add.w	r9, r5, #20
 810a5b4:	f104 0214 	add.w	r2, r4, #20
 810a5b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810a5bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810a5c0:	f100 0514 	add.w	r5, r0, #20
 810a5c4:	f04f 0e00 	mov.w	lr, #0
 810a5c8:	f852 ab04 	ldr.w	sl, [r2], #4
 810a5cc:	f859 4b04 	ldr.w	r4, [r9], #4
 810a5d0:	fa1e f18a 	uxtah	r1, lr, sl
 810a5d4:	b2a3      	uxth	r3, r4
 810a5d6:	1ac9      	subs	r1, r1, r3
 810a5d8:	0c23      	lsrs	r3, r4, #16
 810a5da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810a5de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810a5e2:	b289      	uxth	r1, r1
 810a5e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810a5e8:	45c8      	cmp	r8, r9
 810a5ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810a5ee:	4694      	mov	ip, r2
 810a5f0:	f845 3b04 	str.w	r3, [r5], #4
 810a5f4:	d8e8      	bhi.n	810a5c8 <__mdiff+0x5c>
 810a5f6:	45bc      	cmp	ip, r7
 810a5f8:	d304      	bcc.n	810a604 <__mdiff+0x98>
 810a5fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810a5fe:	b183      	cbz	r3, 810a622 <__mdiff+0xb6>
 810a600:	6106      	str	r6, [r0, #16]
 810a602:	e7c5      	b.n	810a590 <__mdiff+0x24>
 810a604:	f85c 1b04 	ldr.w	r1, [ip], #4
 810a608:	fa1e f381 	uxtah	r3, lr, r1
 810a60c:	141a      	asrs	r2, r3, #16
 810a60e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810a612:	b29b      	uxth	r3, r3
 810a614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810a618:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810a61c:	f845 3b04 	str.w	r3, [r5], #4
 810a620:	e7e9      	b.n	810a5f6 <__mdiff+0x8a>
 810a622:	3e01      	subs	r6, #1
 810a624:	e7e9      	b.n	810a5fa <__mdiff+0x8e>

0810a626 <__d2b>:
 810a626:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810a62a:	460e      	mov	r6, r1
 810a62c:	2101      	movs	r1, #1
 810a62e:	ec59 8b10 	vmov	r8, r9, d0
 810a632:	4615      	mov	r5, r2
 810a634:	f7ff fd6a 	bl	810a10c <_Balloc>
 810a638:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810a63c:	4607      	mov	r7, r0
 810a63e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810a642:	bb34      	cbnz	r4, 810a692 <__d2b+0x6c>
 810a644:	9301      	str	r3, [sp, #4]
 810a646:	f1b8 0300 	subs.w	r3, r8, #0
 810a64a:	d027      	beq.n	810a69c <__d2b+0x76>
 810a64c:	a802      	add	r0, sp, #8
 810a64e:	f840 3d08 	str.w	r3, [r0, #-8]!
 810a652:	f7ff fe00 	bl	810a256 <__lo0bits>
 810a656:	9900      	ldr	r1, [sp, #0]
 810a658:	b1f0      	cbz	r0, 810a698 <__d2b+0x72>
 810a65a:	9a01      	ldr	r2, [sp, #4]
 810a65c:	f1c0 0320 	rsb	r3, r0, #32
 810a660:	fa02 f303 	lsl.w	r3, r2, r3
 810a664:	430b      	orrs	r3, r1
 810a666:	40c2      	lsrs	r2, r0
 810a668:	617b      	str	r3, [r7, #20]
 810a66a:	9201      	str	r2, [sp, #4]
 810a66c:	9b01      	ldr	r3, [sp, #4]
 810a66e:	61bb      	str	r3, [r7, #24]
 810a670:	2b00      	cmp	r3, #0
 810a672:	bf14      	ite	ne
 810a674:	2102      	movne	r1, #2
 810a676:	2101      	moveq	r1, #1
 810a678:	6139      	str	r1, [r7, #16]
 810a67a:	b1c4      	cbz	r4, 810a6ae <__d2b+0x88>
 810a67c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810a680:	4404      	add	r4, r0
 810a682:	6034      	str	r4, [r6, #0]
 810a684:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810a688:	6028      	str	r0, [r5, #0]
 810a68a:	4638      	mov	r0, r7
 810a68c:	b003      	add	sp, #12
 810a68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810a696:	e7d5      	b.n	810a644 <__d2b+0x1e>
 810a698:	6179      	str	r1, [r7, #20]
 810a69a:	e7e7      	b.n	810a66c <__d2b+0x46>
 810a69c:	a801      	add	r0, sp, #4
 810a69e:	f7ff fdda 	bl	810a256 <__lo0bits>
 810a6a2:	9b01      	ldr	r3, [sp, #4]
 810a6a4:	617b      	str	r3, [r7, #20]
 810a6a6:	2101      	movs	r1, #1
 810a6a8:	6139      	str	r1, [r7, #16]
 810a6aa:	3020      	adds	r0, #32
 810a6ac:	e7e5      	b.n	810a67a <__d2b+0x54>
 810a6ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810a6b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810a6b6:	6030      	str	r0, [r6, #0]
 810a6b8:	6918      	ldr	r0, [r3, #16]
 810a6ba:	f7ff fdad 	bl	810a218 <__hi0bits>
 810a6be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810a6c2:	e7e1      	b.n	810a688 <__d2b+0x62>

0810a6c4 <_calloc_r>:
 810a6c4:	b538      	push	{r3, r4, r5, lr}
 810a6c6:	fb02 f401 	mul.w	r4, r2, r1
 810a6ca:	4621      	mov	r1, r4
 810a6cc:	f000 f856 	bl	810a77c <_malloc_r>
 810a6d0:	4605      	mov	r5, r0
 810a6d2:	b118      	cbz	r0, 810a6dc <_calloc_r+0x18>
 810a6d4:	4622      	mov	r2, r4
 810a6d6:	2100      	movs	r1, #0
 810a6d8:	f7fe fa37 	bl	8108b4a <memset>
 810a6dc:	4628      	mov	r0, r5
 810a6de:	bd38      	pop	{r3, r4, r5, pc}

0810a6e0 <_free_r>:
 810a6e0:	b538      	push	{r3, r4, r5, lr}
 810a6e2:	4605      	mov	r5, r0
 810a6e4:	2900      	cmp	r1, #0
 810a6e6:	d045      	beq.n	810a774 <_free_r+0x94>
 810a6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a6ec:	1f0c      	subs	r4, r1, #4
 810a6ee:	2b00      	cmp	r3, #0
 810a6f0:	bfb8      	it	lt
 810a6f2:	18e4      	addlt	r4, r4, r3
 810a6f4:	f000 fa29 	bl	810ab4a <__malloc_lock>
 810a6f8:	4a1f      	ldr	r2, [pc, #124]	; (810a778 <_free_r+0x98>)
 810a6fa:	6813      	ldr	r3, [r2, #0]
 810a6fc:	4610      	mov	r0, r2
 810a6fe:	b933      	cbnz	r3, 810a70e <_free_r+0x2e>
 810a700:	6063      	str	r3, [r4, #4]
 810a702:	6014      	str	r4, [r2, #0]
 810a704:	4628      	mov	r0, r5
 810a706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810a70a:	f000 ba1f 	b.w	810ab4c <__malloc_unlock>
 810a70e:	42a3      	cmp	r3, r4
 810a710:	d90c      	bls.n	810a72c <_free_r+0x4c>
 810a712:	6821      	ldr	r1, [r4, #0]
 810a714:	1862      	adds	r2, r4, r1
 810a716:	4293      	cmp	r3, r2
 810a718:	bf04      	itt	eq
 810a71a:	681a      	ldreq	r2, [r3, #0]
 810a71c:	685b      	ldreq	r3, [r3, #4]
 810a71e:	6063      	str	r3, [r4, #4]
 810a720:	bf04      	itt	eq
 810a722:	1852      	addeq	r2, r2, r1
 810a724:	6022      	streq	r2, [r4, #0]
 810a726:	6004      	str	r4, [r0, #0]
 810a728:	e7ec      	b.n	810a704 <_free_r+0x24>
 810a72a:	4613      	mov	r3, r2
 810a72c:	685a      	ldr	r2, [r3, #4]
 810a72e:	b10a      	cbz	r2, 810a734 <_free_r+0x54>
 810a730:	42a2      	cmp	r2, r4
 810a732:	d9fa      	bls.n	810a72a <_free_r+0x4a>
 810a734:	6819      	ldr	r1, [r3, #0]
 810a736:	1858      	adds	r0, r3, r1
 810a738:	42a0      	cmp	r0, r4
 810a73a:	d10b      	bne.n	810a754 <_free_r+0x74>
 810a73c:	6820      	ldr	r0, [r4, #0]
 810a73e:	4401      	add	r1, r0
 810a740:	1858      	adds	r0, r3, r1
 810a742:	4282      	cmp	r2, r0
 810a744:	6019      	str	r1, [r3, #0]
 810a746:	d1dd      	bne.n	810a704 <_free_r+0x24>
 810a748:	6810      	ldr	r0, [r2, #0]
 810a74a:	6852      	ldr	r2, [r2, #4]
 810a74c:	605a      	str	r2, [r3, #4]
 810a74e:	4401      	add	r1, r0
 810a750:	6019      	str	r1, [r3, #0]
 810a752:	e7d7      	b.n	810a704 <_free_r+0x24>
 810a754:	d902      	bls.n	810a75c <_free_r+0x7c>
 810a756:	230c      	movs	r3, #12
 810a758:	602b      	str	r3, [r5, #0]
 810a75a:	e7d3      	b.n	810a704 <_free_r+0x24>
 810a75c:	6820      	ldr	r0, [r4, #0]
 810a75e:	1821      	adds	r1, r4, r0
 810a760:	428a      	cmp	r2, r1
 810a762:	bf04      	itt	eq
 810a764:	6811      	ldreq	r1, [r2, #0]
 810a766:	6852      	ldreq	r2, [r2, #4]
 810a768:	6062      	str	r2, [r4, #4]
 810a76a:	bf04      	itt	eq
 810a76c:	1809      	addeq	r1, r1, r0
 810a76e:	6021      	streq	r1, [r4, #0]
 810a770:	605c      	str	r4, [r3, #4]
 810a772:	e7c7      	b.n	810a704 <_free_r+0x24>
 810a774:	bd38      	pop	{r3, r4, r5, pc}
 810a776:	bf00      	nop
 810a778:	10004b08 	.word	0x10004b08

0810a77c <_malloc_r>:
 810a77c:	b570      	push	{r4, r5, r6, lr}
 810a77e:	1ccd      	adds	r5, r1, #3
 810a780:	f025 0503 	bic.w	r5, r5, #3
 810a784:	3508      	adds	r5, #8
 810a786:	2d0c      	cmp	r5, #12
 810a788:	bf38      	it	cc
 810a78a:	250c      	movcc	r5, #12
 810a78c:	2d00      	cmp	r5, #0
 810a78e:	4606      	mov	r6, r0
 810a790:	db01      	blt.n	810a796 <_malloc_r+0x1a>
 810a792:	42a9      	cmp	r1, r5
 810a794:	d903      	bls.n	810a79e <_malloc_r+0x22>
 810a796:	230c      	movs	r3, #12
 810a798:	6033      	str	r3, [r6, #0]
 810a79a:	2000      	movs	r0, #0
 810a79c:	bd70      	pop	{r4, r5, r6, pc}
 810a79e:	f000 f9d4 	bl	810ab4a <__malloc_lock>
 810a7a2:	4a21      	ldr	r2, [pc, #132]	; (810a828 <_malloc_r+0xac>)
 810a7a4:	6814      	ldr	r4, [r2, #0]
 810a7a6:	4621      	mov	r1, r4
 810a7a8:	b991      	cbnz	r1, 810a7d0 <_malloc_r+0x54>
 810a7aa:	4c20      	ldr	r4, [pc, #128]	; (810a82c <_malloc_r+0xb0>)
 810a7ac:	6823      	ldr	r3, [r4, #0]
 810a7ae:	b91b      	cbnz	r3, 810a7b8 <_malloc_r+0x3c>
 810a7b0:	4630      	mov	r0, r6
 810a7b2:	f000 f98f 	bl	810aad4 <_sbrk_r>
 810a7b6:	6020      	str	r0, [r4, #0]
 810a7b8:	4629      	mov	r1, r5
 810a7ba:	4630      	mov	r0, r6
 810a7bc:	f000 f98a 	bl	810aad4 <_sbrk_r>
 810a7c0:	1c43      	adds	r3, r0, #1
 810a7c2:	d124      	bne.n	810a80e <_malloc_r+0x92>
 810a7c4:	230c      	movs	r3, #12
 810a7c6:	6033      	str	r3, [r6, #0]
 810a7c8:	4630      	mov	r0, r6
 810a7ca:	f000 f9bf 	bl	810ab4c <__malloc_unlock>
 810a7ce:	e7e4      	b.n	810a79a <_malloc_r+0x1e>
 810a7d0:	680b      	ldr	r3, [r1, #0]
 810a7d2:	1b5b      	subs	r3, r3, r5
 810a7d4:	d418      	bmi.n	810a808 <_malloc_r+0x8c>
 810a7d6:	2b0b      	cmp	r3, #11
 810a7d8:	d90f      	bls.n	810a7fa <_malloc_r+0x7e>
 810a7da:	600b      	str	r3, [r1, #0]
 810a7dc:	50cd      	str	r5, [r1, r3]
 810a7de:	18cc      	adds	r4, r1, r3
 810a7e0:	4630      	mov	r0, r6
 810a7e2:	f000 f9b3 	bl	810ab4c <__malloc_unlock>
 810a7e6:	f104 000b 	add.w	r0, r4, #11
 810a7ea:	1d23      	adds	r3, r4, #4
 810a7ec:	f020 0007 	bic.w	r0, r0, #7
 810a7f0:	1ac3      	subs	r3, r0, r3
 810a7f2:	d0d3      	beq.n	810a79c <_malloc_r+0x20>
 810a7f4:	425a      	negs	r2, r3
 810a7f6:	50e2      	str	r2, [r4, r3]
 810a7f8:	e7d0      	b.n	810a79c <_malloc_r+0x20>
 810a7fa:	428c      	cmp	r4, r1
 810a7fc:	684b      	ldr	r3, [r1, #4]
 810a7fe:	bf16      	itet	ne
 810a800:	6063      	strne	r3, [r4, #4]
 810a802:	6013      	streq	r3, [r2, #0]
 810a804:	460c      	movne	r4, r1
 810a806:	e7eb      	b.n	810a7e0 <_malloc_r+0x64>
 810a808:	460c      	mov	r4, r1
 810a80a:	6849      	ldr	r1, [r1, #4]
 810a80c:	e7cc      	b.n	810a7a8 <_malloc_r+0x2c>
 810a80e:	1cc4      	adds	r4, r0, #3
 810a810:	f024 0403 	bic.w	r4, r4, #3
 810a814:	42a0      	cmp	r0, r4
 810a816:	d005      	beq.n	810a824 <_malloc_r+0xa8>
 810a818:	1a21      	subs	r1, r4, r0
 810a81a:	4630      	mov	r0, r6
 810a81c:	f000 f95a 	bl	810aad4 <_sbrk_r>
 810a820:	3001      	adds	r0, #1
 810a822:	d0cf      	beq.n	810a7c4 <_malloc_r+0x48>
 810a824:	6025      	str	r5, [r4, #0]
 810a826:	e7db      	b.n	810a7e0 <_malloc_r+0x64>
 810a828:	10004b08 	.word	0x10004b08
 810a82c:	10004b0c 	.word	0x10004b0c

0810a830 <__ssputs_r>:
 810a830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a834:	688e      	ldr	r6, [r1, #8]
 810a836:	429e      	cmp	r6, r3
 810a838:	4682      	mov	sl, r0
 810a83a:	460c      	mov	r4, r1
 810a83c:	4690      	mov	r8, r2
 810a83e:	4699      	mov	r9, r3
 810a840:	d837      	bhi.n	810a8b2 <__ssputs_r+0x82>
 810a842:	898a      	ldrh	r2, [r1, #12]
 810a844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810a848:	d031      	beq.n	810a8ae <__ssputs_r+0x7e>
 810a84a:	6825      	ldr	r5, [r4, #0]
 810a84c:	6909      	ldr	r1, [r1, #16]
 810a84e:	1a6f      	subs	r7, r5, r1
 810a850:	6965      	ldr	r5, [r4, #20]
 810a852:	2302      	movs	r3, #2
 810a854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810a858:	fb95 f5f3 	sdiv	r5, r5, r3
 810a85c:	f109 0301 	add.w	r3, r9, #1
 810a860:	443b      	add	r3, r7
 810a862:	429d      	cmp	r5, r3
 810a864:	bf38      	it	cc
 810a866:	461d      	movcc	r5, r3
 810a868:	0553      	lsls	r3, r2, #21
 810a86a:	d530      	bpl.n	810a8ce <__ssputs_r+0x9e>
 810a86c:	4629      	mov	r1, r5
 810a86e:	f7ff ff85 	bl	810a77c <_malloc_r>
 810a872:	4606      	mov	r6, r0
 810a874:	b950      	cbnz	r0, 810a88c <__ssputs_r+0x5c>
 810a876:	230c      	movs	r3, #12
 810a878:	f8ca 3000 	str.w	r3, [sl]
 810a87c:	89a3      	ldrh	r3, [r4, #12]
 810a87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a882:	81a3      	strh	r3, [r4, #12]
 810a884:	f04f 30ff 	mov.w	r0, #4294967295
 810a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a88c:	463a      	mov	r2, r7
 810a88e:	6921      	ldr	r1, [r4, #16]
 810a890:	f7fe f950 	bl	8108b34 <memcpy>
 810a894:	89a3      	ldrh	r3, [r4, #12]
 810a896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810a89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a89e:	81a3      	strh	r3, [r4, #12]
 810a8a0:	6126      	str	r6, [r4, #16]
 810a8a2:	6165      	str	r5, [r4, #20]
 810a8a4:	443e      	add	r6, r7
 810a8a6:	1bed      	subs	r5, r5, r7
 810a8a8:	6026      	str	r6, [r4, #0]
 810a8aa:	60a5      	str	r5, [r4, #8]
 810a8ac:	464e      	mov	r6, r9
 810a8ae:	454e      	cmp	r6, r9
 810a8b0:	d900      	bls.n	810a8b4 <__ssputs_r+0x84>
 810a8b2:	464e      	mov	r6, r9
 810a8b4:	4632      	mov	r2, r6
 810a8b6:	4641      	mov	r1, r8
 810a8b8:	6820      	ldr	r0, [r4, #0]
 810a8ba:	f000 f92d 	bl	810ab18 <memmove>
 810a8be:	68a3      	ldr	r3, [r4, #8]
 810a8c0:	1b9b      	subs	r3, r3, r6
 810a8c2:	60a3      	str	r3, [r4, #8]
 810a8c4:	6823      	ldr	r3, [r4, #0]
 810a8c6:	441e      	add	r6, r3
 810a8c8:	6026      	str	r6, [r4, #0]
 810a8ca:	2000      	movs	r0, #0
 810a8cc:	e7dc      	b.n	810a888 <__ssputs_r+0x58>
 810a8ce:	462a      	mov	r2, r5
 810a8d0:	f000 f93d 	bl	810ab4e <_realloc_r>
 810a8d4:	4606      	mov	r6, r0
 810a8d6:	2800      	cmp	r0, #0
 810a8d8:	d1e2      	bne.n	810a8a0 <__ssputs_r+0x70>
 810a8da:	6921      	ldr	r1, [r4, #16]
 810a8dc:	4650      	mov	r0, sl
 810a8de:	f7ff feff 	bl	810a6e0 <_free_r>
 810a8e2:	e7c8      	b.n	810a876 <__ssputs_r+0x46>

0810a8e4 <_svfiprintf_r>:
 810a8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a8e8:	461d      	mov	r5, r3
 810a8ea:	898b      	ldrh	r3, [r1, #12]
 810a8ec:	061f      	lsls	r7, r3, #24
 810a8ee:	b09d      	sub	sp, #116	; 0x74
 810a8f0:	4680      	mov	r8, r0
 810a8f2:	460c      	mov	r4, r1
 810a8f4:	4616      	mov	r6, r2
 810a8f6:	d50f      	bpl.n	810a918 <_svfiprintf_r+0x34>
 810a8f8:	690b      	ldr	r3, [r1, #16]
 810a8fa:	b96b      	cbnz	r3, 810a918 <_svfiprintf_r+0x34>
 810a8fc:	2140      	movs	r1, #64	; 0x40
 810a8fe:	f7ff ff3d 	bl	810a77c <_malloc_r>
 810a902:	6020      	str	r0, [r4, #0]
 810a904:	6120      	str	r0, [r4, #16]
 810a906:	b928      	cbnz	r0, 810a914 <_svfiprintf_r+0x30>
 810a908:	230c      	movs	r3, #12
 810a90a:	f8c8 3000 	str.w	r3, [r8]
 810a90e:	f04f 30ff 	mov.w	r0, #4294967295
 810a912:	e0c8      	b.n	810aaa6 <_svfiprintf_r+0x1c2>
 810a914:	2340      	movs	r3, #64	; 0x40
 810a916:	6163      	str	r3, [r4, #20]
 810a918:	2300      	movs	r3, #0
 810a91a:	9309      	str	r3, [sp, #36]	; 0x24
 810a91c:	2320      	movs	r3, #32
 810a91e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a922:	2330      	movs	r3, #48	; 0x30
 810a924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a928:	9503      	str	r5, [sp, #12]
 810a92a:	f04f 0b01 	mov.w	fp, #1
 810a92e:	4637      	mov	r7, r6
 810a930:	463d      	mov	r5, r7
 810a932:	f815 3b01 	ldrb.w	r3, [r5], #1
 810a936:	b10b      	cbz	r3, 810a93c <_svfiprintf_r+0x58>
 810a938:	2b25      	cmp	r3, #37	; 0x25
 810a93a:	d13e      	bne.n	810a9ba <_svfiprintf_r+0xd6>
 810a93c:	ebb7 0a06 	subs.w	sl, r7, r6
 810a940:	d00b      	beq.n	810a95a <_svfiprintf_r+0x76>
 810a942:	4653      	mov	r3, sl
 810a944:	4632      	mov	r2, r6
 810a946:	4621      	mov	r1, r4
 810a948:	4640      	mov	r0, r8
 810a94a:	f7ff ff71 	bl	810a830 <__ssputs_r>
 810a94e:	3001      	adds	r0, #1
 810a950:	f000 80a4 	beq.w	810aa9c <_svfiprintf_r+0x1b8>
 810a954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a956:	4453      	add	r3, sl
 810a958:	9309      	str	r3, [sp, #36]	; 0x24
 810a95a:	783b      	ldrb	r3, [r7, #0]
 810a95c:	2b00      	cmp	r3, #0
 810a95e:	f000 809d 	beq.w	810aa9c <_svfiprintf_r+0x1b8>
 810a962:	2300      	movs	r3, #0
 810a964:	f04f 32ff 	mov.w	r2, #4294967295
 810a968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a96c:	9304      	str	r3, [sp, #16]
 810a96e:	9307      	str	r3, [sp, #28]
 810a970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a974:	931a      	str	r3, [sp, #104]	; 0x68
 810a976:	462f      	mov	r7, r5
 810a978:	2205      	movs	r2, #5
 810a97a:	f817 1b01 	ldrb.w	r1, [r7], #1
 810a97e:	4850      	ldr	r0, [pc, #320]	; (810aac0 <_svfiprintf_r+0x1dc>)
 810a980:	f7f5 fcb6 	bl	81002f0 <memchr>
 810a984:	9b04      	ldr	r3, [sp, #16]
 810a986:	b9d0      	cbnz	r0, 810a9be <_svfiprintf_r+0xda>
 810a988:	06d9      	lsls	r1, r3, #27
 810a98a:	bf44      	itt	mi
 810a98c:	2220      	movmi	r2, #32
 810a98e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 810a992:	071a      	lsls	r2, r3, #28
 810a994:	bf44      	itt	mi
 810a996:	222b      	movmi	r2, #43	; 0x2b
 810a998:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 810a99c:	782a      	ldrb	r2, [r5, #0]
 810a99e:	2a2a      	cmp	r2, #42	; 0x2a
 810a9a0:	d015      	beq.n	810a9ce <_svfiprintf_r+0xea>
 810a9a2:	9a07      	ldr	r2, [sp, #28]
 810a9a4:	462f      	mov	r7, r5
 810a9a6:	2000      	movs	r0, #0
 810a9a8:	250a      	movs	r5, #10
 810a9aa:	4639      	mov	r1, r7
 810a9ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a9b0:	3b30      	subs	r3, #48	; 0x30
 810a9b2:	2b09      	cmp	r3, #9
 810a9b4:	d94d      	bls.n	810aa52 <_svfiprintf_r+0x16e>
 810a9b6:	b1b8      	cbz	r0, 810a9e8 <_svfiprintf_r+0x104>
 810a9b8:	e00f      	b.n	810a9da <_svfiprintf_r+0xf6>
 810a9ba:	462f      	mov	r7, r5
 810a9bc:	e7b8      	b.n	810a930 <_svfiprintf_r+0x4c>
 810a9be:	4a40      	ldr	r2, [pc, #256]	; (810aac0 <_svfiprintf_r+0x1dc>)
 810a9c0:	1a80      	subs	r0, r0, r2
 810a9c2:	fa0b f000 	lsl.w	r0, fp, r0
 810a9c6:	4318      	orrs	r0, r3
 810a9c8:	9004      	str	r0, [sp, #16]
 810a9ca:	463d      	mov	r5, r7
 810a9cc:	e7d3      	b.n	810a976 <_svfiprintf_r+0x92>
 810a9ce:	9a03      	ldr	r2, [sp, #12]
 810a9d0:	1d11      	adds	r1, r2, #4
 810a9d2:	6812      	ldr	r2, [r2, #0]
 810a9d4:	9103      	str	r1, [sp, #12]
 810a9d6:	2a00      	cmp	r2, #0
 810a9d8:	db01      	blt.n	810a9de <_svfiprintf_r+0xfa>
 810a9da:	9207      	str	r2, [sp, #28]
 810a9dc:	e004      	b.n	810a9e8 <_svfiprintf_r+0x104>
 810a9de:	4252      	negs	r2, r2
 810a9e0:	f043 0302 	orr.w	r3, r3, #2
 810a9e4:	9207      	str	r2, [sp, #28]
 810a9e6:	9304      	str	r3, [sp, #16]
 810a9e8:	783b      	ldrb	r3, [r7, #0]
 810a9ea:	2b2e      	cmp	r3, #46	; 0x2e
 810a9ec:	d10c      	bne.n	810aa08 <_svfiprintf_r+0x124>
 810a9ee:	787b      	ldrb	r3, [r7, #1]
 810a9f0:	2b2a      	cmp	r3, #42	; 0x2a
 810a9f2:	d133      	bne.n	810aa5c <_svfiprintf_r+0x178>
 810a9f4:	9b03      	ldr	r3, [sp, #12]
 810a9f6:	1d1a      	adds	r2, r3, #4
 810a9f8:	681b      	ldr	r3, [r3, #0]
 810a9fa:	9203      	str	r2, [sp, #12]
 810a9fc:	2b00      	cmp	r3, #0
 810a9fe:	bfb8      	it	lt
 810aa00:	f04f 33ff 	movlt.w	r3, #4294967295
 810aa04:	3702      	adds	r7, #2
 810aa06:	9305      	str	r3, [sp, #20]
 810aa08:	4d2e      	ldr	r5, [pc, #184]	; (810aac4 <_svfiprintf_r+0x1e0>)
 810aa0a:	7839      	ldrb	r1, [r7, #0]
 810aa0c:	2203      	movs	r2, #3
 810aa0e:	4628      	mov	r0, r5
 810aa10:	f7f5 fc6e 	bl	81002f0 <memchr>
 810aa14:	b138      	cbz	r0, 810aa26 <_svfiprintf_r+0x142>
 810aa16:	2340      	movs	r3, #64	; 0x40
 810aa18:	1b40      	subs	r0, r0, r5
 810aa1a:	fa03 f000 	lsl.w	r0, r3, r0
 810aa1e:	9b04      	ldr	r3, [sp, #16]
 810aa20:	4303      	orrs	r3, r0
 810aa22:	3701      	adds	r7, #1
 810aa24:	9304      	str	r3, [sp, #16]
 810aa26:	7839      	ldrb	r1, [r7, #0]
 810aa28:	4827      	ldr	r0, [pc, #156]	; (810aac8 <_svfiprintf_r+0x1e4>)
 810aa2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810aa2e:	2206      	movs	r2, #6
 810aa30:	1c7e      	adds	r6, r7, #1
 810aa32:	f7f5 fc5d 	bl	81002f0 <memchr>
 810aa36:	2800      	cmp	r0, #0
 810aa38:	d038      	beq.n	810aaac <_svfiprintf_r+0x1c8>
 810aa3a:	4b24      	ldr	r3, [pc, #144]	; (810aacc <_svfiprintf_r+0x1e8>)
 810aa3c:	bb13      	cbnz	r3, 810aa84 <_svfiprintf_r+0x1a0>
 810aa3e:	9b03      	ldr	r3, [sp, #12]
 810aa40:	3307      	adds	r3, #7
 810aa42:	f023 0307 	bic.w	r3, r3, #7
 810aa46:	3308      	adds	r3, #8
 810aa48:	9303      	str	r3, [sp, #12]
 810aa4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810aa4c:	444b      	add	r3, r9
 810aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 810aa50:	e76d      	b.n	810a92e <_svfiprintf_r+0x4a>
 810aa52:	fb05 3202 	mla	r2, r5, r2, r3
 810aa56:	2001      	movs	r0, #1
 810aa58:	460f      	mov	r7, r1
 810aa5a:	e7a6      	b.n	810a9aa <_svfiprintf_r+0xc6>
 810aa5c:	2300      	movs	r3, #0
 810aa5e:	3701      	adds	r7, #1
 810aa60:	9305      	str	r3, [sp, #20]
 810aa62:	4619      	mov	r1, r3
 810aa64:	250a      	movs	r5, #10
 810aa66:	4638      	mov	r0, r7
 810aa68:	f810 2b01 	ldrb.w	r2, [r0], #1
 810aa6c:	3a30      	subs	r2, #48	; 0x30
 810aa6e:	2a09      	cmp	r2, #9
 810aa70:	d903      	bls.n	810aa7a <_svfiprintf_r+0x196>
 810aa72:	2b00      	cmp	r3, #0
 810aa74:	d0c8      	beq.n	810aa08 <_svfiprintf_r+0x124>
 810aa76:	9105      	str	r1, [sp, #20]
 810aa78:	e7c6      	b.n	810aa08 <_svfiprintf_r+0x124>
 810aa7a:	fb05 2101 	mla	r1, r5, r1, r2
 810aa7e:	2301      	movs	r3, #1
 810aa80:	4607      	mov	r7, r0
 810aa82:	e7f0      	b.n	810aa66 <_svfiprintf_r+0x182>
 810aa84:	ab03      	add	r3, sp, #12
 810aa86:	9300      	str	r3, [sp, #0]
 810aa88:	4622      	mov	r2, r4
 810aa8a:	4b11      	ldr	r3, [pc, #68]	; (810aad0 <_svfiprintf_r+0x1ec>)
 810aa8c:	a904      	add	r1, sp, #16
 810aa8e:	4640      	mov	r0, r8
 810aa90:	f7fe f8f8 	bl	8108c84 <_printf_float>
 810aa94:	f1b0 3fff 	cmp.w	r0, #4294967295
 810aa98:	4681      	mov	r9, r0
 810aa9a:	d1d6      	bne.n	810aa4a <_svfiprintf_r+0x166>
 810aa9c:	89a3      	ldrh	r3, [r4, #12]
 810aa9e:	065b      	lsls	r3, r3, #25
 810aaa0:	f53f af35 	bmi.w	810a90e <_svfiprintf_r+0x2a>
 810aaa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 810aaa6:	b01d      	add	sp, #116	; 0x74
 810aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aaac:	ab03      	add	r3, sp, #12
 810aaae:	9300      	str	r3, [sp, #0]
 810aab0:	4622      	mov	r2, r4
 810aab2:	4b07      	ldr	r3, [pc, #28]	; (810aad0 <_svfiprintf_r+0x1ec>)
 810aab4:	a904      	add	r1, sp, #16
 810aab6:	4640      	mov	r0, r8
 810aab8:	f7fe fb9a 	bl	81091f0 <_printf_i>
 810aabc:	e7ea      	b.n	810aa94 <_svfiprintf_r+0x1b0>
 810aabe:	bf00      	nop
 810aac0:	0810adb4 	.word	0x0810adb4
 810aac4:	0810adba 	.word	0x0810adba
 810aac8:	0810adbe 	.word	0x0810adbe
 810aacc:	08108c85 	.word	0x08108c85
 810aad0:	0810a831 	.word	0x0810a831

0810aad4 <_sbrk_r>:
 810aad4:	b538      	push	{r3, r4, r5, lr}
 810aad6:	4c06      	ldr	r4, [pc, #24]	; (810aaf0 <_sbrk_r+0x1c>)
 810aad8:	2300      	movs	r3, #0
 810aada:	4605      	mov	r5, r0
 810aadc:	4608      	mov	r0, r1
 810aade:	6023      	str	r3, [r4, #0]
 810aae0:	f7f6 feda 	bl	8101898 <_sbrk>
 810aae4:	1c43      	adds	r3, r0, #1
 810aae6:	d102      	bne.n	810aaee <_sbrk_r+0x1a>
 810aae8:	6823      	ldr	r3, [r4, #0]
 810aaea:	b103      	cbz	r3, 810aaee <_sbrk_r+0x1a>
 810aaec:	602b      	str	r3, [r5, #0]
 810aaee:	bd38      	pop	{r3, r4, r5, pc}
 810aaf0:	10004cfc 	.word	0x10004cfc

0810aaf4 <__ascii_mbtowc>:
 810aaf4:	b082      	sub	sp, #8
 810aaf6:	b901      	cbnz	r1, 810aafa <__ascii_mbtowc+0x6>
 810aaf8:	a901      	add	r1, sp, #4
 810aafa:	b142      	cbz	r2, 810ab0e <__ascii_mbtowc+0x1a>
 810aafc:	b14b      	cbz	r3, 810ab12 <__ascii_mbtowc+0x1e>
 810aafe:	7813      	ldrb	r3, [r2, #0]
 810ab00:	600b      	str	r3, [r1, #0]
 810ab02:	7812      	ldrb	r2, [r2, #0]
 810ab04:	1c10      	adds	r0, r2, #0
 810ab06:	bf18      	it	ne
 810ab08:	2001      	movne	r0, #1
 810ab0a:	b002      	add	sp, #8
 810ab0c:	4770      	bx	lr
 810ab0e:	4610      	mov	r0, r2
 810ab10:	e7fb      	b.n	810ab0a <__ascii_mbtowc+0x16>
 810ab12:	f06f 0001 	mvn.w	r0, #1
 810ab16:	e7f8      	b.n	810ab0a <__ascii_mbtowc+0x16>

0810ab18 <memmove>:
 810ab18:	4288      	cmp	r0, r1
 810ab1a:	b510      	push	{r4, lr}
 810ab1c:	eb01 0302 	add.w	r3, r1, r2
 810ab20:	d807      	bhi.n	810ab32 <memmove+0x1a>
 810ab22:	1e42      	subs	r2, r0, #1
 810ab24:	4299      	cmp	r1, r3
 810ab26:	d00a      	beq.n	810ab3e <memmove+0x26>
 810ab28:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ab2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 810ab30:	e7f8      	b.n	810ab24 <memmove+0xc>
 810ab32:	4283      	cmp	r3, r0
 810ab34:	d9f5      	bls.n	810ab22 <memmove+0xa>
 810ab36:	1881      	adds	r1, r0, r2
 810ab38:	1ad2      	subs	r2, r2, r3
 810ab3a:	42d3      	cmn	r3, r2
 810ab3c:	d100      	bne.n	810ab40 <memmove+0x28>
 810ab3e:	bd10      	pop	{r4, pc}
 810ab40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810ab44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 810ab48:	e7f7      	b.n	810ab3a <memmove+0x22>

0810ab4a <__malloc_lock>:
 810ab4a:	4770      	bx	lr

0810ab4c <__malloc_unlock>:
 810ab4c:	4770      	bx	lr

0810ab4e <_realloc_r>:
 810ab4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ab50:	4607      	mov	r7, r0
 810ab52:	4614      	mov	r4, r2
 810ab54:	460e      	mov	r6, r1
 810ab56:	b921      	cbnz	r1, 810ab62 <_realloc_r+0x14>
 810ab58:	4611      	mov	r1, r2
 810ab5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810ab5e:	f7ff be0d 	b.w	810a77c <_malloc_r>
 810ab62:	b922      	cbnz	r2, 810ab6e <_realloc_r+0x20>
 810ab64:	f7ff fdbc 	bl	810a6e0 <_free_r>
 810ab68:	4625      	mov	r5, r4
 810ab6a:	4628      	mov	r0, r5
 810ab6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ab6e:	f000 f821 	bl	810abb4 <_malloc_usable_size_r>
 810ab72:	42a0      	cmp	r0, r4
 810ab74:	d20f      	bcs.n	810ab96 <_realloc_r+0x48>
 810ab76:	4621      	mov	r1, r4
 810ab78:	4638      	mov	r0, r7
 810ab7a:	f7ff fdff 	bl	810a77c <_malloc_r>
 810ab7e:	4605      	mov	r5, r0
 810ab80:	2800      	cmp	r0, #0
 810ab82:	d0f2      	beq.n	810ab6a <_realloc_r+0x1c>
 810ab84:	4631      	mov	r1, r6
 810ab86:	4622      	mov	r2, r4
 810ab88:	f7fd ffd4 	bl	8108b34 <memcpy>
 810ab8c:	4631      	mov	r1, r6
 810ab8e:	4638      	mov	r0, r7
 810ab90:	f7ff fda6 	bl	810a6e0 <_free_r>
 810ab94:	e7e9      	b.n	810ab6a <_realloc_r+0x1c>
 810ab96:	4635      	mov	r5, r6
 810ab98:	e7e7      	b.n	810ab6a <_realloc_r+0x1c>

0810ab9a <__ascii_wctomb>:
 810ab9a:	b149      	cbz	r1, 810abb0 <__ascii_wctomb+0x16>
 810ab9c:	2aff      	cmp	r2, #255	; 0xff
 810ab9e:	bf85      	ittet	hi
 810aba0:	238a      	movhi	r3, #138	; 0x8a
 810aba2:	6003      	strhi	r3, [r0, #0]
 810aba4:	700a      	strbls	r2, [r1, #0]
 810aba6:	f04f 30ff 	movhi.w	r0, #4294967295
 810abaa:	bf98      	it	ls
 810abac:	2001      	movls	r0, #1
 810abae:	4770      	bx	lr
 810abb0:	4608      	mov	r0, r1
 810abb2:	4770      	bx	lr

0810abb4 <_malloc_usable_size_r>:
 810abb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810abb8:	1f18      	subs	r0, r3, #4
 810abba:	2b00      	cmp	r3, #0
 810abbc:	bfbc      	itt	lt
 810abbe:	580b      	ldrlt	r3, [r1, r0]
 810abc0:	18c0      	addlt	r0, r0, r3
 810abc2:	4770      	bx	lr

0810abc4 <_init>:
 810abc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810abc6:	bf00      	nop
 810abc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810abca:	bc08      	pop	{r3}
 810abcc:	469e      	mov	lr, r3
 810abce:	4770      	bx	lr

0810abd0 <_fini>:
 810abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810abd2:	bf00      	nop
 810abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810abd6:	bc08      	pop	{r3}
 810abd8:	469e      	mov	lr, r3
 810abda:	4770      	bx	lr
