
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087ac  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08108a4c  08108a4c  00018a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108b1c  08108b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08108b24  08108b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08108b28  08108b28  00018b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08108b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004b14  10000074  08108ba0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10004b88  08108ba0  00024b88  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000337c4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000051d0  00000000  00000000  00053868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001c10  00000000  00000000  00058a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001a08  00000000  00000000  0005a648  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003d0ba  00000000  00000000  0005c050  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001aa4f  00000000  00000000  0009910a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0018c958  00000000  00000000  000b3b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002404b1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000786c  00000000  00000000  0024052c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08108a34 	.word	0x08108a34

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	08108a34 	.word	0x08108a34

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_uldivmod>:
 8100390:	b953      	cbnz	r3, 81003a8 <__aeabi_uldivmod+0x18>
 8100392:	b94a      	cbnz	r2, 81003a8 <__aeabi_uldivmod+0x18>
 8100394:	2900      	cmp	r1, #0
 8100396:	bf08      	it	eq
 8100398:	2800      	cmpeq	r0, #0
 810039a:	bf1c      	itt	ne
 810039c:	f04f 31ff 	movne.w	r1, #4294967295
 81003a0:	f04f 30ff 	movne.w	r0, #4294967295
 81003a4:	f000 b972 	b.w	810068c <__aeabi_idiv0>
 81003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003b0:	f000 f806 	bl	81003c0 <__udivmoddi4>
 81003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003bc:	b004      	add	sp, #16
 81003be:	4770      	bx	lr

081003c0 <__udivmoddi4>:
 81003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003c4:	9e08      	ldr	r6, [sp, #32]
 81003c6:	4604      	mov	r4, r0
 81003c8:	4688      	mov	r8, r1
 81003ca:	2b00      	cmp	r3, #0
 81003cc:	d14b      	bne.n	8100466 <__udivmoddi4+0xa6>
 81003ce:	428a      	cmp	r2, r1
 81003d0:	4615      	mov	r5, r2
 81003d2:	d967      	bls.n	81004a4 <__udivmoddi4+0xe4>
 81003d4:	fab2 f282 	clz	r2, r2
 81003d8:	b14a      	cbz	r2, 81003ee <__udivmoddi4+0x2e>
 81003da:	f1c2 0720 	rsb	r7, r2, #32
 81003de:	fa01 f302 	lsl.w	r3, r1, r2
 81003e2:	fa20 f707 	lsr.w	r7, r0, r7
 81003e6:	4095      	lsls	r5, r2
 81003e8:	ea47 0803 	orr.w	r8, r7, r3
 81003ec:	4094      	lsls	r4, r2
 81003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 81003f2:	0c23      	lsrs	r3, r4, #16
 81003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 81003f8:	fa1f fc85 	uxth.w	ip, r5
 81003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8100400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100404:	fb07 f10c 	mul.w	r1, r7, ip
 8100408:	4299      	cmp	r1, r3
 810040a:	d909      	bls.n	8100420 <__udivmoddi4+0x60>
 810040c:	18eb      	adds	r3, r5, r3
 810040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8100412:	f080 811b 	bcs.w	810064c <__udivmoddi4+0x28c>
 8100416:	4299      	cmp	r1, r3
 8100418:	f240 8118 	bls.w	810064c <__udivmoddi4+0x28c>
 810041c:	3f02      	subs	r7, #2
 810041e:	442b      	add	r3, r5
 8100420:	1a5b      	subs	r3, r3, r1
 8100422:	b2a4      	uxth	r4, r4
 8100424:	fbb3 f0fe 	udiv	r0, r3, lr
 8100428:	fb0e 3310 	mls	r3, lr, r0, r3
 810042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100430:	fb00 fc0c 	mul.w	ip, r0, ip
 8100434:	45a4      	cmp	ip, r4
 8100436:	d909      	bls.n	810044c <__udivmoddi4+0x8c>
 8100438:	192c      	adds	r4, r5, r4
 810043a:	f100 33ff 	add.w	r3, r0, #4294967295
 810043e:	f080 8107 	bcs.w	8100650 <__udivmoddi4+0x290>
 8100442:	45a4      	cmp	ip, r4
 8100444:	f240 8104 	bls.w	8100650 <__udivmoddi4+0x290>
 8100448:	3802      	subs	r0, #2
 810044a:	442c      	add	r4, r5
 810044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100450:	eba4 040c 	sub.w	r4, r4, ip
 8100454:	2700      	movs	r7, #0
 8100456:	b11e      	cbz	r6, 8100460 <__udivmoddi4+0xa0>
 8100458:	40d4      	lsrs	r4, r2
 810045a:	2300      	movs	r3, #0
 810045c:	e9c6 4300 	strd	r4, r3, [r6]
 8100460:	4639      	mov	r1, r7
 8100462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100466:	428b      	cmp	r3, r1
 8100468:	d909      	bls.n	810047e <__udivmoddi4+0xbe>
 810046a:	2e00      	cmp	r6, #0
 810046c:	f000 80eb 	beq.w	8100646 <__udivmoddi4+0x286>
 8100470:	2700      	movs	r7, #0
 8100472:	e9c6 0100 	strd	r0, r1, [r6]
 8100476:	4638      	mov	r0, r7
 8100478:	4639      	mov	r1, r7
 810047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810047e:	fab3 f783 	clz	r7, r3
 8100482:	2f00      	cmp	r7, #0
 8100484:	d147      	bne.n	8100516 <__udivmoddi4+0x156>
 8100486:	428b      	cmp	r3, r1
 8100488:	d302      	bcc.n	8100490 <__udivmoddi4+0xd0>
 810048a:	4282      	cmp	r2, r0
 810048c:	f200 80fa 	bhi.w	8100684 <__udivmoddi4+0x2c4>
 8100490:	1a84      	subs	r4, r0, r2
 8100492:	eb61 0303 	sbc.w	r3, r1, r3
 8100496:	2001      	movs	r0, #1
 8100498:	4698      	mov	r8, r3
 810049a:	2e00      	cmp	r6, #0
 810049c:	d0e0      	beq.n	8100460 <__udivmoddi4+0xa0>
 810049e:	e9c6 4800 	strd	r4, r8, [r6]
 81004a2:	e7dd      	b.n	8100460 <__udivmoddi4+0xa0>
 81004a4:	b902      	cbnz	r2, 81004a8 <__udivmoddi4+0xe8>
 81004a6:	deff      	udf	#255	; 0xff
 81004a8:	fab2 f282 	clz	r2, r2
 81004ac:	2a00      	cmp	r2, #0
 81004ae:	f040 808f 	bne.w	81005d0 <__udivmoddi4+0x210>
 81004b2:	1b49      	subs	r1, r1, r5
 81004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 81004b8:	fa1f f885 	uxth.w	r8, r5
 81004bc:	2701      	movs	r7, #1
 81004be:	fbb1 fcfe 	udiv	ip, r1, lr
 81004c2:	0c23      	lsrs	r3, r4, #16
 81004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 81004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81004cc:	fb08 f10c 	mul.w	r1, r8, ip
 81004d0:	4299      	cmp	r1, r3
 81004d2:	d907      	bls.n	81004e4 <__udivmoddi4+0x124>
 81004d4:	18eb      	adds	r3, r5, r3
 81004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 81004da:	d202      	bcs.n	81004e2 <__udivmoddi4+0x122>
 81004dc:	4299      	cmp	r1, r3
 81004de:	f200 80cd 	bhi.w	810067c <__udivmoddi4+0x2bc>
 81004e2:	4684      	mov	ip, r0
 81004e4:	1a59      	subs	r1, r3, r1
 81004e6:	b2a3      	uxth	r3, r4
 81004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 81004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 81004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 81004f4:	fb08 f800 	mul.w	r8, r8, r0
 81004f8:	45a0      	cmp	r8, r4
 81004fa:	d907      	bls.n	810050c <__udivmoddi4+0x14c>
 81004fc:	192c      	adds	r4, r5, r4
 81004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8100502:	d202      	bcs.n	810050a <__udivmoddi4+0x14a>
 8100504:	45a0      	cmp	r8, r4
 8100506:	f200 80b6 	bhi.w	8100676 <__udivmoddi4+0x2b6>
 810050a:	4618      	mov	r0, r3
 810050c:	eba4 0408 	sub.w	r4, r4, r8
 8100510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100514:	e79f      	b.n	8100456 <__udivmoddi4+0x96>
 8100516:	f1c7 0c20 	rsb	ip, r7, #32
 810051a:	40bb      	lsls	r3, r7
 810051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100520:	ea4e 0e03 	orr.w	lr, lr, r3
 8100524:	fa01 f407 	lsl.w	r4, r1, r7
 8100528:	fa20 f50c 	lsr.w	r5, r0, ip
 810052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8100530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100534:	4325      	orrs	r5, r4
 8100536:	fbb3 f9f8 	udiv	r9, r3, r8
 810053a:	0c2c      	lsrs	r4, r5, #16
 810053c:	fb08 3319 	mls	r3, r8, r9, r3
 8100540:	fa1f fa8e 	uxth.w	sl, lr
 8100544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100548:	fb09 f40a 	mul.w	r4, r9, sl
 810054c:	429c      	cmp	r4, r3
 810054e:	fa02 f207 	lsl.w	r2, r2, r7
 8100552:	fa00 f107 	lsl.w	r1, r0, r7
 8100556:	d90b      	bls.n	8100570 <__udivmoddi4+0x1b0>
 8100558:	eb1e 0303 	adds.w	r3, lr, r3
 810055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8100560:	f080 8087 	bcs.w	8100672 <__udivmoddi4+0x2b2>
 8100564:	429c      	cmp	r4, r3
 8100566:	f240 8084 	bls.w	8100672 <__udivmoddi4+0x2b2>
 810056a:	f1a9 0902 	sub.w	r9, r9, #2
 810056e:	4473      	add	r3, lr
 8100570:	1b1b      	subs	r3, r3, r4
 8100572:	b2ad      	uxth	r5, r5
 8100574:	fbb3 f0f8 	udiv	r0, r3, r8
 8100578:	fb08 3310 	mls	r3, r8, r0, r3
 810057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100580:	fb00 fa0a 	mul.w	sl, r0, sl
 8100584:	45a2      	cmp	sl, r4
 8100586:	d908      	bls.n	810059a <__udivmoddi4+0x1da>
 8100588:	eb1e 0404 	adds.w	r4, lr, r4
 810058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8100590:	d26b      	bcs.n	810066a <__udivmoddi4+0x2aa>
 8100592:	45a2      	cmp	sl, r4
 8100594:	d969      	bls.n	810066a <__udivmoddi4+0x2aa>
 8100596:	3802      	subs	r0, #2
 8100598:	4474      	add	r4, lr
 810059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 810059e:	fba0 8902 	umull	r8, r9, r0, r2
 81005a2:	eba4 040a 	sub.w	r4, r4, sl
 81005a6:	454c      	cmp	r4, r9
 81005a8:	46c2      	mov	sl, r8
 81005aa:	464b      	mov	r3, r9
 81005ac:	d354      	bcc.n	8100658 <__udivmoddi4+0x298>
 81005ae:	d051      	beq.n	8100654 <__udivmoddi4+0x294>
 81005b0:	2e00      	cmp	r6, #0
 81005b2:	d069      	beq.n	8100688 <__udivmoddi4+0x2c8>
 81005b4:	ebb1 050a 	subs.w	r5, r1, sl
 81005b8:	eb64 0403 	sbc.w	r4, r4, r3
 81005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 81005c0:	40fd      	lsrs	r5, r7
 81005c2:	40fc      	lsrs	r4, r7
 81005c4:	ea4c 0505 	orr.w	r5, ip, r5
 81005c8:	e9c6 5400 	strd	r5, r4, [r6]
 81005cc:	2700      	movs	r7, #0
 81005ce:	e747      	b.n	8100460 <__udivmoddi4+0xa0>
 81005d0:	f1c2 0320 	rsb	r3, r2, #32
 81005d4:	fa20 f703 	lsr.w	r7, r0, r3
 81005d8:	4095      	lsls	r5, r2
 81005da:	fa01 f002 	lsl.w	r0, r1, r2
 81005de:	fa21 f303 	lsr.w	r3, r1, r3
 81005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 81005e6:	4338      	orrs	r0, r7
 81005e8:	0c01      	lsrs	r1, r0, #16
 81005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 81005ee:	fa1f f885 	uxth.w	r8, r5
 81005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 81005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81005fa:	fb07 f308 	mul.w	r3, r7, r8
 81005fe:	428b      	cmp	r3, r1
 8100600:	fa04 f402 	lsl.w	r4, r4, r2
 8100604:	d907      	bls.n	8100616 <__udivmoddi4+0x256>
 8100606:	1869      	adds	r1, r5, r1
 8100608:	f107 3cff 	add.w	ip, r7, #4294967295
 810060c:	d22f      	bcs.n	810066e <__udivmoddi4+0x2ae>
 810060e:	428b      	cmp	r3, r1
 8100610:	d92d      	bls.n	810066e <__udivmoddi4+0x2ae>
 8100612:	3f02      	subs	r7, #2
 8100614:	4429      	add	r1, r5
 8100616:	1acb      	subs	r3, r1, r3
 8100618:	b281      	uxth	r1, r0
 810061a:	fbb3 f0fe 	udiv	r0, r3, lr
 810061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8100622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100626:	fb00 f308 	mul.w	r3, r0, r8
 810062a:	428b      	cmp	r3, r1
 810062c:	d907      	bls.n	810063e <__udivmoddi4+0x27e>
 810062e:	1869      	adds	r1, r5, r1
 8100630:	f100 3cff 	add.w	ip, r0, #4294967295
 8100634:	d217      	bcs.n	8100666 <__udivmoddi4+0x2a6>
 8100636:	428b      	cmp	r3, r1
 8100638:	d915      	bls.n	8100666 <__udivmoddi4+0x2a6>
 810063a:	3802      	subs	r0, #2
 810063c:	4429      	add	r1, r5
 810063e:	1ac9      	subs	r1, r1, r3
 8100640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8100644:	e73b      	b.n	81004be <__udivmoddi4+0xfe>
 8100646:	4637      	mov	r7, r6
 8100648:	4630      	mov	r0, r6
 810064a:	e709      	b.n	8100460 <__udivmoddi4+0xa0>
 810064c:	4607      	mov	r7, r0
 810064e:	e6e7      	b.n	8100420 <__udivmoddi4+0x60>
 8100650:	4618      	mov	r0, r3
 8100652:	e6fb      	b.n	810044c <__udivmoddi4+0x8c>
 8100654:	4541      	cmp	r1, r8
 8100656:	d2ab      	bcs.n	81005b0 <__udivmoddi4+0x1f0>
 8100658:	ebb8 0a02 	subs.w	sl, r8, r2
 810065c:	eb69 020e 	sbc.w	r2, r9, lr
 8100660:	3801      	subs	r0, #1
 8100662:	4613      	mov	r3, r2
 8100664:	e7a4      	b.n	81005b0 <__udivmoddi4+0x1f0>
 8100666:	4660      	mov	r0, ip
 8100668:	e7e9      	b.n	810063e <__udivmoddi4+0x27e>
 810066a:	4618      	mov	r0, r3
 810066c:	e795      	b.n	810059a <__udivmoddi4+0x1da>
 810066e:	4667      	mov	r7, ip
 8100670:	e7d1      	b.n	8100616 <__udivmoddi4+0x256>
 8100672:	4681      	mov	r9, r0
 8100674:	e77c      	b.n	8100570 <__udivmoddi4+0x1b0>
 8100676:	3802      	subs	r0, #2
 8100678:	442c      	add	r4, r5
 810067a:	e747      	b.n	810050c <__udivmoddi4+0x14c>
 810067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8100680:	442b      	add	r3, r5
 8100682:	e72f      	b.n	81004e4 <__udivmoddi4+0x124>
 8100684:	4638      	mov	r0, r7
 8100686:	e708      	b.n	810049a <__udivmoddi4+0xda>
 8100688:	4637      	mov	r7, r6
 810068a:	e6e9      	b.n	8100460 <__udivmoddi4+0xa0>

0810068c <__aeabi_idiv0>:
 810068c:	4770      	bx	lr
 810068e:	bf00      	nop

08100690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100690:	b480      	push	{r7}
 8100692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100694:	4b0b      	ldr	r3, [pc, #44]	; (81006c4 <SystemInit+0x34>)
 8100696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810069a:	4a0a      	ldr	r2, [pc, #40]	; (81006c4 <SystemInit+0x34>)
 810069c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81006a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 81006a4:	4b07      	ldr	r3, [pc, #28]	; (81006c4 <SystemInit+0x34>)
 81006a6:	691b      	ldr	r3, [r3, #16]
 81006a8:	4a06      	ldr	r2, [pc, #24]	; (81006c4 <SystemInit+0x34>)
 81006aa:	f043 0304 	orr.w	r3, r3, #4
 81006ae:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81006b0:	4b04      	ldr	r3, [pc, #16]	; (81006c4 <SystemInit+0x34>)
 81006b2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81006b6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006b8:	bf00      	nop
 81006ba:	46bd      	mov	sp, r7
 81006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006c0:	4770      	bx	lr
 81006c2:	bf00      	nop
 81006c4:	e000ed00 	.word	0xe000ed00

081006c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 81006c8:	b580      	push	{r7, lr}
 81006ca:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 81006cc:	4a04      	ldr	r2, [pc, #16]	; (81006e0 <MX_FREERTOS_Init+0x18>)
 81006ce:	2100      	movs	r1, #0
 81006d0:	4804      	ldr	r0, [pc, #16]	; (81006e4 <MX_FREERTOS_Init+0x1c>)
 81006d2:	f005 f89f 	bl	8105814 <osThreadNew>
 81006d6:	4602      	mov	r2, r0
 81006d8:	4b03      	ldr	r3, [pc, #12]	; (81006e8 <MX_FREERTOS_Init+0x20>)
 81006da:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 81006dc:	bf00      	nop
 81006de:	bd80      	pop	{r7, pc}
 81006e0:	08108aac 	.word	0x08108aac
 81006e4:	081006ed 	.word	0x081006ed
 81006e8:	100049a4 	.word	0x100049a4

081006ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 81006ec:	b580      	push	{r7, lr}
 81006ee:	b084      	sub	sp, #16
 81006f0:	af02      	add	r7, sp, #8
 81006f2:	6078      	str	r0, [r7, #4]
//	  duty_cycle+=50;
//	 if(duty_cycle > 1900)
//	 {
//		 duty_cycle = 1000;
//	 }
	  LSM303ReadAcc(data);
 81006f4:	4811      	ldr	r0, [pc, #68]	; (810073c <StartDefaultTask+0x50>)
 81006f6:	f000 fa77 	bl	8100be8 <LSM303ReadAcc>
	  sprintf ((char*)buf, "X:% 06d Y:% 06d Z:% 06d \r\n", data[0], data[1], data[2]);
 81006fa:	4b10      	ldr	r3, [pc, #64]	; (810073c <StartDefaultTask+0x50>)
 81006fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8100700:	461a      	mov	r2, r3
 8100702:	4b0e      	ldr	r3, [pc, #56]	; (810073c <StartDefaultTask+0x50>)
 8100704:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8100708:	4619      	mov	r1, r3
 810070a:	4b0c      	ldr	r3, [pc, #48]	; (810073c <StartDefaultTask+0x50>)
 810070c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8100710:	9300      	str	r3, [sp, #0]
 8100712:	460b      	mov	r3, r1
 8100714:	490a      	ldr	r1, [pc, #40]	; (8100740 <StartDefaultTask+0x54>)
 8100716:	480b      	ldr	r0, [pc, #44]	; (8100744 <StartDefaultTask+0x58>)
 8100718:	f007 fd90 	bl	810823c <siprintf>

	  	 HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
 810071c:	4809      	ldr	r0, [pc, #36]	; (8100744 <StartDefaultTask+0x58>)
 810071e:	f7ff fddf 	bl	81002e0 <strlen>
 8100722:	4603      	mov	r3, r0
 8100724:	b29a      	uxth	r2, r3
 8100726:	f04f 33ff 	mov.w	r3, #4294967295
 810072a:	4906      	ldr	r1, [pc, #24]	; (8100744 <StartDefaultTask+0x58>)
 810072c:	4806      	ldr	r0, [pc, #24]	; (8100748 <StartDefaultTask+0x5c>)
 810072e:	f003 ff31 	bl	8104594 <HAL_UART_Transmit>
	  	//LED2_ON();

    osDelay(250);
 8100732:	20fa      	movs	r0, #250	; 0xfa
 8100734:	f005 f914 	bl	8105960 <osDelay>
	  LSM303ReadAcc(data);
 8100738:	e7dc      	b.n	81006f4 <StartDefaultTask+0x8>
 810073a:	bf00      	nop
 810073c:	100049a8 	.word	0x100049a8
 8100740:	08108a58 	.word	0x08108a58
 8100744:	100049b0 	.word	0x100049b0
 8100748:	10004ab4 	.word	0x10004ab4

0810074c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 810074c:	b580      	push	{r7, lr}
 810074e:	b08a      	sub	sp, #40	; 0x28
 8100750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100752:	f107 0314 	add.w	r3, r7, #20
 8100756:	2200      	movs	r2, #0
 8100758:	601a      	str	r2, [r3, #0]
 810075a:	605a      	str	r2, [r3, #4]
 810075c:	609a      	str	r2, [r3, #8]
 810075e:	60da      	str	r2, [r3, #12]
 8100760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100762:	4b33      	ldr	r3, [pc, #204]	; (8100830 <MX_GPIO_Init+0xe4>)
 8100764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100768:	4a31      	ldr	r2, [pc, #196]	; (8100830 <MX_GPIO_Init+0xe4>)
 810076a:	f043 0310 	orr.w	r3, r3, #16
 810076e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100772:	4b2f      	ldr	r3, [pc, #188]	; (8100830 <MX_GPIO_Init+0xe4>)
 8100774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100778:	f003 0310 	and.w	r3, r3, #16
 810077c:	613b      	str	r3, [r7, #16]
 810077e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100780:	4b2b      	ldr	r3, [pc, #172]	; (8100830 <MX_GPIO_Init+0xe4>)
 8100782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100786:	4a2a      	ldr	r2, [pc, #168]	; (8100830 <MX_GPIO_Init+0xe4>)
 8100788:	f043 0308 	orr.w	r3, r3, #8
 810078c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100790:	4b27      	ldr	r3, [pc, #156]	; (8100830 <MX_GPIO_Init+0xe4>)
 8100792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100796:	f003 0308 	and.w	r3, r3, #8
 810079a:	60fb      	str	r3, [r7, #12]
 810079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810079e:	4b24      	ldr	r3, [pc, #144]	; (8100830 <MX_GPIO_Init+0xe4>)
 81007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007a4:	4a22      	ldr	r2, [pc, #136]	; (8100830 <MX_GPIO_Init+0xe4>)
 81007a6:	f043 0301 	orr.w	r3, r3, #1
 81007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007ae:	4b20      	ldr	r3, [pc, #128]	; (8100830 <MX_GPIO_Init+0xe4>)
 81007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007b4:	f003 0301 	and.w	r3, r3, #1
 81007b8:	60bb      	str	r3, [r7, #8]
 81007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81007bc:	4b1c      	ldr	r3, [pc, #112]	; (8100830 <MX_GPIO_Init+0xe4>)
 81007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007c2:	4a1b      	ldr	r2, [pc, #108]	; (8100830 <MX_GPIO_Init+0xe4>)
 81007c4:	f043 0302 	orr.w	r3, r3, #2
 81007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007cc:	4b18      	ldr	r3, [pc, #96]	; (8100830 <MX_GPIO_Init+0xe4>)
 81007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007d2:	f003 0302 	and.w	r3, r3, #2
 81007d6:	607b      	str	r3, [r7, #4]
 81007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 81007da:	2200      	movs	r2, #0
 81007dc:	2102      	movs	r1, #2
 81007de:	4815      	ldr	r0, [pc, #84]	; (8100834 <MX_GPIO_Init+0xe8>)
 81007e0:	f001 f94a 	bl	8101a78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81007e4:	2200      	movs	r2, #0
 81007e6:	2101      	movs	r1, #1
 81007e8:	4813      	ldr	r0, [pc, #76]	; (8100838 <MX_GPIO_Init+0xec>)
 81007ea:	f001 f945 	bl	8101a78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81007ee:	2302      	movs	r3, #2
 81007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81007f2:	2301      	movs	r3, #1
 81007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007f6:	2300      	movs	r3, #0
 81007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81007fa:	2300      	movs	r3, #0
 81007fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81007fe:	f107 0314 	add.w	r3, r7, #20
 8100802:	4619      	mov	r1, r3
 8100804:	480b      	ldr	r0, [pc, #44]	; (8100834 <MX_GPIO_Init+0xe8>)
 8100806:	f000 ff87 	bl	8101718 <HAL_GPIO_Init>

  // Configure GPIO Pin
  GPIO_InitStruct.Pin = LD1_Pin;
 810080a:	2301      	movs	r3, #1
 810080c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810080e:	2301      	movs	r3, #1
 8100810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100812:	2300      	movs	r3, #0
 8100814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100816:	2300      	movs	r3, #0
 8100818:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 810081a:	f107 0314 	add.w	r3, r7, #20
 810081e:	4619      	mov	r1, r3
 8100820:	4805      	ldr	r0, [pc, #20]	; (8100838 <MX_GPIO_Init+0xec>)
 8100822:	f000 ff79 	bl	8101718 <HAL_GPIO_Init>


}
 8100826:	bf00      	nop
 8100828:	3728      	adds	r7, #40	; 0x28
 810082a:	46bd      	mov	sp, r7
 810082c:	bd80      	pop	{r7, pc}
 810082e:	bf00      	nop
 8100830:	58024400 	.word	0x58024400
 8100834:	58021000 	.word	0x58021000
 8100838:	58020400 	.word	0x58020400

0810083c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810083c:	b580      	push	{r7, lr}
 810083e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8100840:	4b1b      	ldr	r3, [pc, #108]	; (81008b0 <MX_I2C1_Init+0x74>)
 8100842:	4a1c      	ldr	r2, [pc, #112]	; (81008b4 <MX_I2C1_Init+0x78>)
 8100844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8100846:	4b1a      	ldr	r3, [pc, #104]	; (81008b0 <MX_I2C1_Init+0x74>)
 8100848:	4a1b      	ldr	r2, [pc, #108]	; (81008b8 <MX_I2C1_Init+0x7c>)
 810084a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 810084c:	4b18      	ldr	r3, [pc, #96]	; (81008b0 <MX_I2C1_Init+0x74>)
 810084e:	2200      	movs	r2, #0
 8100850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100852:	4b17      	ldr	r3, [pc, #92]	; (81008b0 <MX_I2C1_Init+0x74>)
 8100854:	2201      	movs	r2, #1
 8100856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100858:	4b15      	ldr	r3, [pc, #84]	; (81008b0 <MX_I2C1_Init+0x74>)
 810085a:	2200      	movs	r2, #0
 810085c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 810085e:	4b14      	ldr	r3, [pc, #80]	; (81008b0 <MX_I2C1_Init+0x74>)
 8100860:	2200      	movs	r2, #0
 8100862:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100864:	4b12      	ldr	r3, [pc, #72]	; (81008b0 <MX_I2C1_Init+0x74>)
 8100866:	2200      	movs	r2, #0
 8100868:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810086a:	4b11      	ldr	r3, [pc, #68]	; (81008b0 <MX_I2C1_Init+0x74>)
 810086c:	2200      	movs	r2, #0
 810086e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100870:	4b0f      	ldr	r3, [pc, #60]	; (81008b0 <MX_I2C1_Init+0x74>)
 8100872:	2200      	movs	r2, #0
 8100874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8100876:	480e      	ldr	r0, [pc, #56]	; (81008b0 <MX_I2C1_Init+0x74>)
 8100878:	f001 f94e 	bl	8101b18 <HAL_I2C_Init>
 810087c:	4603      	mov	r3, r0
 810087e:	2b00      	cmp	r3, #0
 8100880:	d001      	beq.n	8100886 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8100882:	f000 fab5 	bl	8100df0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100886:	2100      	movs	r1, #0
 8100888:	4809      	ldr	r0, [pc, #36]	; (81008b0 <MX_I2C1_Init+0x74>)
 810088a:	f001 fe1f 	bl	81024cc <HAL_I2CEx_ConfigAnalogFilter>
 810088e:	4603      	mov	r3, r0
 8100890:	2b00      	cmp	r3, #0
 8100892:	d001      	beq.n	8100898 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8100894:	f000 faac 	bl	8100df0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100898:	2100      	movs	r1, #0
 810089a:	4805      	ldr	r0, [pc, #20]	; (81008b0 <MX_I2C1_Init+0x74>)
 810089c:	f001 fe61 	bl	8102562 <HAL_I2CEx_ConfigDigitalFilter>
 81008a0:	4603      	mov	r3, r0
 81008a2:	2b00      	cmp	r3, #0
 81008a4:	d001      	beq.n	81008aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81008a6:	f000 faa3 	bl	8100df0 <Error_Handler>
  }

}
 81008aa:	bf00      	nop
 81008ac:	bd80      	pop	{r7, pc}
 81008ae:	bf00      	nop
 81008b0:	100049d0 	.word	0x100049d0
 81008b4:	40005400 	.word	0x40005400
 81008b8:	307075b1 	.word	0x307075b1

081008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 81008bc:	b580      	push	{r7, lr}
 81008be:	b08a      	sub	sp, #40	; 0x28
 81008c0:	af00      	add	r7, sp, #0
 81008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81008c4:	f107 0314 	add.w	r3, r7, #20
 81008c8:	2200      	movs	r2, #0
 81008ca:	601a      	str	r2, [r3, #0]
 81008cc:	605a      	str	r2, [r3, #4]
 81008ce:	609a      	str	r2, [r3, #8]
 81008d0:	60da      	str	r2, [r3, #12]
 81008d2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 81008d4:	687b      	ldr	r3, [r7, #4]
 81008d6:	681b      	ldr	r3, [r3, #0]
 81008d8:	4a1a      	ldr	r2, [pc, #104]	; (8100944 <HAL_I2C_MspInit+0x88>)
 81008da:	4293      	cmp	r3, r2
 81008dc:	d12e      	bne.n	810093c <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81008de:	4b1a      	ldr	r3, [pc, #104]	; (8100948 <HAL_I2C_MspInit+0x8c>)
 81008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008e4:	4a18      	ldr	r2, [pc, #96]	; (8100948 <HAL_I2C_MspInit+0x8c>)
 81008e6:	f043 0302 	orr.w	r3, r3, #2
 81008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81008ee:	4b16      	ldr	r3, [pc, #88]	; (8100948 <HAL_I2C_MspInit+0x8c>)
 81008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81008f4:	f003 0302 	and.w	r3, r3, #2
 81008f8:	613b      	str	r3, [r7, #16]
 81008fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81008fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8100900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100902:	2312      	movs	r3, #18
 8100904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100906:	2300      	movs	r3, #0
 8100908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810090a:	2300      	movs	r3, #0
 810090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810090e:	2304      	movs	r3, #4
 8100910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100912:	f107 0314 	add.w	r3, r7, #20
 8100916:	4619      	mov	r1, r3
 8100918:	480c      	ldr	r0, [pc, #48]	; (810094c <HAL_I2C_MspInit+0x90>)
 810091a:	f000 fefd 	bl	8101718 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810091e:	4b0a      	ldr	r3, [pc, #40]	; (8100948 <HAL_I2C_MspInit+0x8c>)
 8100920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100924:	4a08      	ldr	r2, [pc, #32]	; (8100948 <HAL_I2C_MspInit+0x8c>)
 8100926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810092a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810092e:	4b06      	ldr	r3, [pc, #24]	; (8100948 <HAL_I2C_MspInit+0x8c>)
 8100930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8100938:	60fb      	str	r3, [r7, #12]
 810093a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 810093c:	bf00      	nop
 810093e:	3728      	adds	r7, #40	; 0x28
 8100940:	46bd      	mov	sp, r7
 8100942:	bd80      	pop	{r7, pc}
 8100944:	40005400 	.word	0x40005400
 8100948:	58024400 	.word	0x58024400
 810094c:	58020400 	.word	0x58020400

08100950 <LSM303StartUp>:
void I2CWrite(uint16_t Address, uint8_t reg, uint8_t value);
void ErrorHandler(void);


void LSM303StartUp(void)
{
 8100950:	b580      	push	{r7, lr}
 8100952:	af00      	add	r7, sp, #0
	// Wait for sensor to initialise
	HAL_Delay(100);
 8100954:	2064      	movs	r0, #100	; 0x64
 8100956:	f000 fdc9 	bl	81014ec <HAL_Delay>

	// check Sensor is present
	if(ReadSensorID(LSM303_ACC_ADDR, LSM303_REG_WHO_AM_I) == 0x33)
 810095a:	210f      	movs	r1, #15
 810095c:	2032      	movs	r0, #50	; 0x32
 810095e:	f000 f9c1 	bl	8100ce4 <ReadSensorID>
 8100962:	4603      	mov	r3, r0
 8100964:	2b33      	cmp	r3, #51	; 0x33
 8100966:	d001      	beq.n	810096c <LSM303StartUp+0x1c>
		//LED1_ON();
	}

	else
	{
		ErrorHandler();
 8100968:	f000 f9b0 	bl	8100ccc <ErrorHandler>
	}

}
 810096c:	bf00      	nop
 810096e:	bd80      	pop	{r7, pc}

08100970 <LSM303AccInit>:

void LSM303AccInit ()
{
 8100970:	b580      	push	{r7, lr}
 8100972:	b082      	sub	sp, #8
 8100974:	af00      	add	r7, sp, #0
	LSM303StartUp();
 8100976:	f7ff ffeb 	bl	8100950 <LSM303StartUp>
	uint16_t InitStruct = 0x00;
 810097a:	2300      	movs	r3, #0
 810097c:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 810097e:	2300      	movs	r3, #0
 8100980:	717b      	strb	r3, [r7, #5]

	InitStruct |= (NORMAL_MODE | ODR_400HZ | X_EN | Y_EN | Z_EN) ;
 8100982:	88fb      	ldrh	r3, [r7, #6]
 8100984:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8100988:	80fb      	strh	r3, [r7, #6]
	InitStruct |= ((BDU_CONTINUOUS | BLE_LSB | FS_2G | HR_EN) << 8);
 810098a:	88fb      	ldrh	r3, [r7, #6]
 810098c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8100990:	80fb      	strh	r3, [r7, #6]

	ctrl = (uint8_t)InitStruct;
 8100992:	88fb      	ldrh	r3, [r7, #6]
 8100994:	717b      	strb	r3, [r7, #5]
    LSM303Write(LSM303_ACC_ADDR, CTRL_REG1_A, ctrl);
 8100996:	797b      	ldrb	r3, [r7, #5]
 8100998:	461a      	mov	r2, r3
 810099a:	2120      	movs	r1, #32
 810099c:	2032      	movs	r0, #50	; 0x32
 810099e:	f000 f830 	bl	8100a02 <LSM303Write>
    ctrl = (uint8_t)(InitStruct << 8);
 81009a2:	2300      	movs	r3, #0
 81009a4:	717b      	strb	r3, [r7, #5]
    LSM303Write(LSM303_ACC_ADDR, CTRL_REG4_A, ctrl);
 81009a6:	797b      	ldrb	r3, [r7, #5]
 81009a8:	461a      	mov	r2, r3
 81009aa:	2123      	movs	r1, #35	; 0x23
 81009ac:	2032      	movs	r0, #50	; 0x32
 81009ae:	f000 f828 	bl	8100a02 <LSM303Write>

    // Configure Filter structure for the accelerometer
    InitStruct = (uint8_t) (HPM_NORMAL | HPCF_16 | HPF_AO1_DISABLE | HPF_AO2_DISABLE);
 81009b2:	2390      	movs	r3, #144	; 0x90
 81009b4:	80fb      	strh	r3, [r7, #6]
    FilterConfig(InitStruct);
 81009b6:	88fb      	ldrh	r3, [r7, #6]
 81009b8:	b2db      	uxtb	r3, r3
 81009ba:	4618      	mov	r0, r3
 81009bc:	f000 f804 	bl	81009c8 <FilterConfig>


}
 81009c0:	bf00      	nop
 81009c2:	3708      	adds	r7, #8
 81009c4:	46bd      	mov	sp, r7
 81009c6:	bd80      	pop	{r7, pc}

081009c8 <FilterConfig>:

// configure filter for the Sensor
void FilterConfig(uint8_t FilterStruct)
{
 81009c8:	b580      	push	{r7, lr}
 81009ca:	b084      	sub	sp, #16
 81009cc:	af00      	add	r7, sp, #0
 81009ce:	4603      	mov	r3, r0
 81009d0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_tmp;

	reg_tmp = LSM303Read(LSM303_ACC_ADDR, CTRL_REG2_A);
 81009d2:	2121      	movs	r1, #33	; 0x21
 81009d4:	2032      	movs	r0, #50	; 0x32
 81009d6:	f000 f827 	bl	8100a28 <LSM303Read>
 81009da:	4603      	mov	r3, r0
 81009dc:	73fb      	strb	r3, [r7, #15]

	reg_tmp &= 0x0C;
 81009de:	7bfb      	ldrb	r3, [r7, #15]
 81009e0:	f003 030c 	and.w	r3, r3, #12
 81009e4:	73fb      	strb	r3, [r7, #15]
	reg_tmp |= FilterStruct;
 81009e6:	7bfa      	ldrb	r2, [r7, #15]
 81009e8:	79fb      	ldrb	r3, [r7, #7]
 81009ea:	4313      	orrs	r3, r2
 81009ec:	73fb      	strb	r3, [r7, #15]

	// Write value to the Register
	LSM303Write(LSM303_ACC_ADDR, CTRL_REG2_A, reg_tmp);
 81009ee:	7bfb      	ldrb	r3, [r7, #15]
 81009f0:	461a      	mov	r2, r3
 81009f2:	2121      	movs	r1, #33	; 0x21
 81009f4:	2032      	movs	r0, #50	; 0x32
 81009f6:	f000 f804 	bl	8100a02 <LSM303Write>
}
 81009fa:	bf00      	nop
 81009fc:	3710      	adds	r7, #16
 81009fe:	46bd      	mov	sp, r7
 8100a00:	bd80      	pop	{r7, pc}

08100a02 <LSM303Write>:
{
	//uint8_t ctrl = OD
}

void LSM303Write(uint16_t DeviceAddr, uint8_t reg, uint8_t value)
{
 8100a02:	b580      	push	{r7, lr}
 8100a04:	b082      	sub	sp, #8
 8100a06:	af00      	add	r7, sp, #0
 8100a08:	4603      	mov	r3, r0
 8100a0a:	80fb      	strh	r3, [r7, #6]
 8100a0c:	460b      	mov	r3, r1
 8100a0e:	717b      	strb	r3, [r7, #5]
 8100a10:	4613      	mov	r3, r2
 8100a12:	713b      	strb	r3, [r7, #4]
	I2CWrite(DeviceAddr, reg, value);
 8100a14:	793a      	ldrb	r2, [r7, #4]
 8100a16:	7979      	ldrb	r1, [r7, #5]
 8100a18:	88fb      	ldrh	r3, [r7, #6]
 8100a1a:	4618      	mov	r0, r3
 8100a1c:	f000 f92a 	bl	8100c74 <I2CWrite>
}
 8100a20:	bf00      	nop
 8100a22:	3708      	adds	r7, #8
 8100a24:	46bd      	mov	sp, r7
 8100a26:	bd80      	pop	{r7, pc}

08100a28 <LSM303Read>:


uint8_t LSM303Read(uint16_t DeviceAddr, uint8_t reg)
{
 8100a28:	b580      	push	{r7, lr}
 8100a2a:	b082      	sub	sp, #8
 8100a2c:	af00      	add	r7, sp, #0
 8100a2e:	4603      	mov	r3, r0
 8100a30:	460a      	mov	r2, r1
 8100a32:	80fb      	strh	r3, [r7, #6]
 8100a34:	4613      	mov	r3, r2
 8100a36:	717b      	strb	r3, [r7, #5]
	return I2CRead(DeviceAddr, reg);
 8100a38:	797a      	ldrb	r2, [r7, #5]
 8100a3a:	88fb      	ldrh	r3, [r7, #6]
 8100a3c:	4611      	mov	r1, r2
 8100a3e:	4618      	mov	r0, r3
 8100a40:	f000 f8f2 	bl	8100c28 <I2CRead>
 8100a44:	4603      	mov	r3, r0
}
 8100a46:	4618      	mov	r0, r3
 8100a48:	3708      	adds	r7, #8
 8100a4a:	46bd      	mov	sp, r7
 8100a4c:	bd80      	pop	{r7, pc}

08100a4e <AccGetXYZ>:

void AccGetXYZ(int16_t* pData)
{
 8100a4e:	b580      	push	{r7, lr}
 8100a50:	b088      	sub	sp, #32
 8100a52:	af00      	add	r7, sp, #0
 8100a54:	6078      	str	r0, [r7, #4]
	int16_t raw_Data [3];
	uint8_t ctrlx[2] = {0,0};
 8100a56:	2300      	movs	r3, #0
 8100a58:	753b      	strb	r3, [r7, #20]
 8100a5a:	2300      	movs	r3, #0
 8100a5c:	757b      	strb	r3, [r7, #21]
	int8_t buffer [6];
	uint8_t i = 0;
 8100a5e:	2300      	movs	r3, #0
 8100a60:	77fb      	strb	r3, [r7, #31]
	uint8_t sensitivity = SENS_2G;
 8100a62:	2301      	movs	r3, #1
 8100a64:	77bb      	strb	r3, [r7, #30]

	// read acceleration control content
	ctrlx[0] = LSM303Read(LSM303_ACC_ADDR, CTRL_REG4_A);
 8100a66:	2123      	movs	r1, #35	; 0x23
 8100a68:	2032      	movs	r0, #50	; 0x32
 8100a6a:	f7ff ffdd 	bl	8100a28 <LSM303Read>
 8100a6e:	4603      	mov	r3, r0
 8100a70:	753b      	strb	r3, [r7, #20]
	ctrlx[1] = LSM303Read(LSM303_ACC_ADDR, CTRL_REG5_A);
 8100a72:	2124      	movs	r1, #36	; 0x24
 8100a74:	2032      	movs	r0, #50	; 0x32
 8100a76:	f7ff ffd7 	bl	8100a28 <LSM303Read>
 8100a7a:	4603      	mov	r3, r0
 8100a7c:	757b      	strb	r3, [r7, #21]

	// Read Output Register
	buffer[0] = LSM303Read(LSM303_ACC_ADDR, OUT_X_L_A);
 8100a7e:	2128      	movs	r1, #40	; 0x28
 8100a80:	2032      	movs	r0, #50	; 0x32
 8100a82:	f7ff ffd1 	bl	8100a28 <LSM303Read>
 8100a86:	4603      	mov	r3, r0
 8100a88:	b25b      	sxtb	r3, r3
 8100a8a:	733b      	strb	r3, [r7, #12]
	buffer[1] = LSM303Read(LSM303_ACC_ADDR, OUT_X_H_A);
 8100a8c:	2129      	movs	r1, #41	; 0x29
 8100a8e:	2032      	movs	r0, #50	; 0x32
 8100a90:	f7ff ffca 	bl	8100a28 <LSM303Read>
 8100a94:	4603      	mov	r3, r0
 8100a96:	b25b      	sxtb	r3, r3
 8100a98:	737b      	strb	r3, [r7, #13]
	buffer[2] = LSM303Read(LSM303_ACC_ADDR, OUT_Y_L_A);
 8100a9a:	212a      	movs	r1, #42	; 0x2a
 8100a9c:	2032      	movs	r0, #50	; 0x32
 8100a9e:	f7ff ffc3 	bl	8100a28 <LSM303Read>
 8100aa2:	4603      	mov	r3, r0
 8100aa4:	b25b      	sxtb	r3, r3
 8100aa6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = LSM303Read(LSM303_ACC_ADDR, OUT_Y_H_A);
 8100aa8:	212b      	movs	r1, #43	; 0x2b
 8100aaa:	2032      	movs	r0, #50	; 0x32
 8100aac:	f7ff ffbc 	bl	8100a28 <LSM303Read>
 8100ab0:	4603      	mov	r3, r0
 8100ab2:	b25b      	sxtb	r3, r3
 8100ab4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = LSM303Read(LSM303_ACC_ADDR, OUT_Z_L_A);
 8100ab6:	212c      	movs	r1, #44	; 0x2c
 8100ab8:	2032      	movs	r0, #50	; 0x32
 8100aba:	f7ff ffb5 	bl	8100a28 <LSM303Read>
 8100abe:	4603      	mov	r3, r0
 8100ac0:	b25b      	sxtb	r3, r3
 8100ac2:	743b      	strb	r3, [r7, #16]
	buffer[5] = LSM303Read(LSM303_ACC_ADDR, OUT_Z_H_A);
 8100ac4:	212d      	movs	r1, #45	; 0x2d
 8100ac6:	2032      	movs	r0, #50	; 0x32
 8100ac8:	f7ff ffae 	bl	8100a28 <LSM303Read>
 8100acc:	4603      	mov	r3, r0
 8100ace:	b25b      	sxtb	r3, r3
 8100ad0:	747b      	strb	r3, [r7, #17]

	// check REG4 alignment
	if(!(ctrlx[0] && BLE_MSB))
 8100ad2:	7d3b      	ldrb	r3, [r7, #20]
 8100ad4:	2b00      	cmp	r3, #0
 8100ad6:	d126      	bne.n	8100b26 <AccGetXYZ+0xd8>
	{
		for (i = 0; i < 3; i++)
 8100ad8:	2300      	movs	r3, #0
 8100ada:	77fb      	strb	r3, [r7, #31]
 8100adc:	e01f      	b.n	8100b1e <AccGetXYZ+0xd0>
		{
			raw_Data[i] = ((int16_t) ((uint16_t)buffer[2*i+1] << 8) + buffer[2*i] );
 8100ade:	7ffb      	ldrb	r3, [r7, #31]
 8100ae0:	005b      	lsls	r3, r3, #1
 8100ae2:	3301      	adds	r3, #1
 8100ae4:	f107 0220 	add.w	r2, r7, #32
 8100ae8:	4413      	add	r3, r2
 8100aea:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8100aee:	b29b      	uxth	r3, r3
 8100af0:	021b      	lsls	r3, r3, #8
 8100af2:	b29a      	uxth	r2, r3
 8100af4:	7ffb      	ldrb	r3, [r7, #31]
 8100af6:	005b      	lsls	r3, r3, #1
 8100af8:	f107 0120 	add.w	r1, r7, #32
 8100afc:	440b      	add	r3, r1
 8100afe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8100b02:	b29b      	uxth	r3, r3
 8100b04:	4413      	add	r3, r2
 8100b06:	b29a      	uxth	r2, r3
 8100b08:	7ffb      	ldrb	r3, [r7, #31]
 8100b0a:	b212      	sxth	r2, r2
 8100b0c:	005b      	lsls	r3, r3, #1
 8100b0e:	f107 0120 	add.w	r1, r7, #32
 8100b12:	440b      	add	r3, r1
 8100b14:	f823 2c08 	strh.w	r2, [r3, #-8]
		for (i = 0; i < 3; i++)
 8100b18:	7ffb      	ldrb	r3, [r7, #31]
 8100b1a:	3301      	adds	r3, #1
 8100b1c:	77fb      	strb	r3, [r7, #31]
 8100b1e:	7ffb      	ldrb	r3, [r7, #31]
 8100b20:	2b02      	cmp	r3, #2
 8100b22:	d9dc      	bls.n	8100ade <AccGetXYZ+0x90>
 8100b24:	e025      	b.n	8100b72 <AccGetXYZ+0x124>
		}
	}

	else // Big Endian Mode
	{
		for (i = 0; i < 3; i++)
 8100b26:	2300      	movs	r3, #0
 8100b28:	77fb      	strb	r3, [r7, #31]
 8100b2a:	e01f      	b.n	8100b6c <AccGetXYZ+0x11e>
		{
			raw_Data[i] = ((int16_t) ((uint16_t)buffer[2*i] << 8) + buffer[2*i+1] );
 8100b2c:	7ffb      	ldrb	r3, [r7, #31]
 8100b2e:	005b      	lsls	r3, r3, #1
 8100b30:	f107 0220 	add.w	r2, r7, #32
 8100b34:	4413      	add	r3, r2
 8100b36:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8100b3a:	b29b      	uxth	r3, r3
 8100b3c:	021b      	lsls	r3, r3, #8
 8100b3e:	b29a      	uxth	r2, r3
 8100b40:	7ffb      	ldrb	r3, [r7, #31]
 8100b42:	005b      	lsls	r3, r3, #1
 8100b44:	3301      	adds	r3, #1
 8100b46:	f107 0120 	add.w	r1, r7, #32
 8100b4a:	440b      	add	r3, r1
 8100b4c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8100b50:	b29b      	uxth	r3, r3
 8100b52:	4413      	add	r3, r2
 8100b54:	b29a      	uxth	r2, r3
 8100b56:	7ffb      	ldrb	r3, [r7, #31]
 8100b58:	b212      	sxth	r2, r2
 8100b5a:	005b      	lsls	r3, r3, #1
 8100b5c:	f107 0120 	add.w	r1, r7, #32
 8100b60:	440b      	add	r3, r1
 8100b62:	f823 2c08 	strh.w	r2, [r3, #-8]
		for (i = 0; i < 3; i++)
 8100b66:	7ffb      	ldrb	r3, [r7, #31]
 8100b68:	3301      	adds	r3, #1
 8100b6a:	77fb      	strb	r3, [r7, #31]
 8100b6c:	7ffb      	ldrb	r3, [r7, #31]
 8100b6e:	2b02      	cmp	r3, #2
 8100b70:	d9dc      	bls.n	8100b2c <AccGetXYZ+0xde>
		}
	}

	// Switch sensitvity value in CTRL4
	switch(ctrlx[0] & FS_16G)
 8100b72:	7d3b      	ldrb	r3, [r7, #20]
 8100b74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8100b78:	2b10      	cmp	r3, #16
 8100b7a:	d00c      	beq.n	8100b96 <AccGetXYZ+0x148>
 8100b7c:	2b10      	cmp	r3, #16
 8100b7e:	dc02      	bgt.n	8100b86 <AccGetXYZ+0x138>
 8100b80:	2b00      	cmp	r3, #0
 8100b82:	d005      	beq.n	8100b90 <AccGetXYZ+0x142>
 8100b84:	e010      	b.n	8100ba8 <AccGetXYZ+0x15a>
 8100b86:	2b20      	cmp	r3, #32
 8100b88:	d008      	beq.n	8100b9c <AccGetXYZ+0x14e>
 8100b8a:	2b30      	cmp	r3, #48	; 0x30
 8100b8c:	d009      	beq.n	8100ba2 <AccGetXYZ+0x154>
 8100b8e:	e00b      	b.n	8100ba8 <AccGetXYZ+0x15a>
	{
		case FS_2G:
			sensitivity = SENS_2G;
 8100b90:	2301      	movs	r3, #1
 8100b92:	77bb      	strb	r3, [r7, #30]
		break;
 8100b94:	e008      	b.n	8100ba8 <AccGetXYZ+0x15a>

		case FS_4G:
			sensitivity = SENS_4G;
 8100b96:	2302      	movs	r3, #2
 8100b98:	77bb      	strb	r3, [r7, #30]
		break;
 8100b9a:	e005      	b.n	8100ba8 <AccGetXYZ+0x15a>

		case FS_8G:
			sensitivity = SENS_8G;
 8100b9c:	2304      	movs	r3, #4
 8100b9e:	77bb      	strb	r3, [r7, #30]
		break;
 8100ba0:	e002      	b.n	8100ba8 <AccGetXYZ+0x15a>

		case FS_16G:
			sensitivity = SENS_16G;
 8100ba2:	230c      	movs	r3, #12
 8100ba4:	77bb      	strb	r3, [r7, #30]
		break;
 8100ba6:	bf00      	nop
	}

	// Obtain value in mg for each axis
	for(i = 0; i < 3; i++)
 8100ba8:	2300      	movs	r3, #0
 8100baa:	77fb      	strb	r3, [r7, #31]
 8100bac:	e015      	b.n	8100bda <AccGetXYZ+0x18c>
	{
		pData[i] = (raw_Data[i] * sensitivity);
 8100bae:	7ffb      	ldrb	r3, [r7, #31]
 8100bb0:	005b      	lsls	r3, r3, #1
 8100bb2:	f107 0220 	add.w	r2, r7, #32
 8100bb6:	4413      	add	r3, r2
 8100bb8:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8100bbc:	b29a      	uxth	r2, r3
 8100bbe:	7fbb      	ldrb	r3, [r7, #30]
 8100bc0:	b29b      	uxth	r3, r3
 8100bc2:	fb12 f303 	smulbb	r3, r2, r3
 8100bc6:	b299      	uxth	r1, r3
 8100bc8:	7ffb      	ldrb	r3, [r7, #31]
 8100bca:	005b      	lsls	r3, r3, #1
 8100bcc:	687a      	ldr	r2, [r7, #4]
 8100bce:	4413      	add	r3, r2
 8100bd0:	b20a      	sxth	r2, r1
 8100bd2:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < 3; i++)
 8100bd4:	7ffb      	ldrb	r3, [r7, #31]
 8100bd6:	3301      	adds	r3, #1
 8100bd8:	77fb      	strb	r3, [r7, #31]
 8100bda:	7ffb      	ldrb	r3, [r7, #31]
 8100bdc:	2b02      	cmp	r3, #2
 8100bde:	d9e6      	bls.n	8100bae <AccGetXYZ+0x160>
	}

}
 8100be0:	bf00      	nop
 8100be2:	3720      	adds	r7, #32
 8100be4:	46bd      	mov	sp, r7
 8100be6:	bd80      	pop	{r7, pc}

08100be8 <LSM303ReadAcc>:
//	data->z = buffer[2];
//
//}

void LSM303ReadAcc(int16_t* pData)
{
 8100be8:	b580      	push	{r7, lr}
 8100bea:	b084      	sub	sp, #16
 8100bec:	af00      	add	r7, sp, #0
 8100bee:	6078      	str	r0, [r7, #4]
	int16_t buffer[3] = {0};
 8100bf0:	f107 0308 	add.w	r3, r7, #8
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	601a      	str	r2, [r3, #0]
 8100bf8:	809a      	strh	r2, [r3, #4]
	//LSM303AccData* sensor_acc = {0};

	AccGetXYZ(buffer);
 8100bfa:	f107 0308 	add.w	r3, r7, #8
 8100bfe:	4618      	mov	r0, r3
 8100c00:	f7ff ff25 	bl	8100a4e <AccGetXYZ>
	//data->x = buffer[0];
	//data->y = buffer[1];
	//data->z = buffer[2];
	pData[0] = buffer[0];
 8100c04:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8100c08:	687b      	ldr	r3, [r7, #4]
 8100c0a:	801a      	strh	r2, [r3, #0]
	pData[1] = buffer[1];
 8100c0c:	687b      	ldr	r3, [r7, #4]
 8100c0e:	3302      	adds	r3, #2
 8100c10:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8100c14:	801a      	strh	r2, [r3, #0]
	pData[2] = buffer[2];
 8100c16:	687b      	ldr	r3, [r7, #4]
 8100c18:	3304      	adds	r3, #4
 8100c1a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8100c1e:	801a      	strh	r2, [r3, #0]

}
 8100c20:	bf00      	nop
 8100c22:	3710      	adds	r7, #16
 8100c24:	46bd      	mov	sp, r7
 8100c26:	bd80      	pop	{r7, pc}

08100c28 <I2CRead>:



uint8_t I2CRead(uint16_t Address, uint8_t reg)
{
 8100c28:	b580      	push	{r7, lr}
 8100c2a:	b088      	sub	sp, #32
 8100c2c:	af04      	add	r7, sp, #16
 8100c2e:	4603      	mov	r3, r0
 8100c30:	460a      	mov	r2, r1
 8100c32:	80fb      	strh	r3, [r7, #6]
 8100c34:	4613      	mov	r3, r2
 8100c36:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;
	uint8_t value = 0x00;
 8100c38:	2300      	movs	r3, #0
 8100c3a:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1, Address, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 8100c3c:	797b      	ldrb	r3, [r7, #5]
 8100c3e:	b29a      	uxth	r2, r3
 8100c40:	88f9      	ldrh	r1, [r7, #6]
 8100c42:	2332      	movs	r3, #50	; 0x32
 8100c44:	9302      	str	r3, [sp, #8]
 8100c46:	2301      	movs	r3, #1
 8100c48:	9301      	str	r3, [sp, #4]
 8100c4a:	f107 030e 	add.w	r3, r7, #14
 8100c4e:	9300      	str	r3, [sp, #0]
 8100c50:	2301      	movs	r3, #1
 8100c52:	4807      	ldr	r0, [pc, #28]	; (8100c70 <I2CRead+0x48>)
 8100c54:	f001 f904 	bl	8101e60 <HAL_I2C_Mem_Read>
 8100c58:	4603      	mov	r3, r0
 8100c5a:	73fb      	strb	r3, [r7, #15]

	if(status !=HAL_OK)
 8100c5c:	7bfb      	ldrb	r3, [r7, #15]
 8100c5e:	2b00      	cmp	r3, #0
 8100c60:	d001      	beq.n	8100c66 <I2CRead+0x3e>
	{
		ErrorHandler();
 8100c62:	f000 f833 	bl	8100ccc <ErrorHandler>
//	else
//	{
//		LED1_ON();
//	}

	return value;
 8100c66:	7bbb      	ldrb	r3, [r7, #14]
}
 8100c68:	4618      	mov	r0, r3
 8100c6a:	3710      	adds	r7, #16
 8100c6c:	46bd      	mov	sp, r7
 8100c6e:	bd80      	pop	{r7, pc}
 8100c70:	100049d0 	.word	0x100049d0

08100c74 <I2CWrite>:

void I2CWrite(uint16_t Address, uint8_t reg, uint8_t value)
{
 8100c74:	b580      	push	{r7, lr}
 8100c76:	b088      	sub	sp, #32
 8100c78:	af04      	add	r7, sp, #16
 8100c7a:	4603      	mov	r3, r0
 8100c7c:	80fb      	strh	r3, [r7, #6]
 8100c7e:	460b      	mov	r3, r1
 8100c80:	717b      	strb	r3, [r7, #5]
 8100c82:	4613      	mov	r3, r2
 8100c84:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, Address, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 8100c86:	797b      	ldrb	r3, [r7, #5]
 8100c88:	b29a      	uxth	r2, r3
 8100c8a:	88f9      	ldrh	r1, [r7, #6]
 8100c8c:	2332      	movs	r3, #50	; 0x32
 8100c8e:	9302      	str	r3, [sp, #8]
 8100c90:	2301      	movs	r3, #1
 8100c92:	9301      	str	r3, [sp, #4]
 8100c94:	1d3b      	adds	r3, r7, #4
 8100c96:	9300      	str	r3, [sp, #0]
 8100c98:	2301      	movs	r3, #1
 8100c9a:	480a      	ldr	r0, [pc, #40]	; (8100cc4 <I2CWrite+0x50>)
 8100c9c:	f000 ffcc 	bl	8101c38 <HAL_I2C_Mem_Write>
 8100ca0:	4603      	mov	r3, r0
 8100ca2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8100ca4:	7bfb      	ldrb	r3, [r7, #15]
 8100ca6:	2b00      	cmp	r3, #0
 8100ca8:	d002      	beq.n	8100cb0 <I2CWrite+0x3c>
	{
		ErrorHandler();
 8100caa:	f000 f80f 	bl	8100ccc <ErrorHandler>
	else
	{
		LED1_ON();
	}

}
 8100cae:	e004      	b.n	8100cba <I2CWrite+0x46>
		LED1_ON();
 8100cb0:	2201      	movs	r2, #1
 8100cb2:	2101      	movs	r1, #1
 8100cb4:	4804      	ldr	r0, [pc, #16]	; (8100cc8 <I2CWrite+0x54>)
 8100cb6:	f000 fedf 	bl	8101a78 <HAL_GPIO_WritePin>
}
 8100cba:	bf00      	nop
 8100cbc:	3710      	adds	r7, #16
 8100cbe:	46bd      	mov	sp, r7
 8100cc0:	bd80      	pop	{r7, pc}
 8100cc2:	bf00      	nop
 8100cc4:	100049d0 	.word	0x100049d0
 8100cc8:	58020400 	.word	0x58020400

08100ccc <ErrorHandler>:

void ErrorHandler(void)
{
 8100ccc:	b580      	push	{r7, lr}
 8100cce:	af00      	add	r7, sp, #0
	LED2_ON();
 8100cd0:	2201      	movs	r2, #1
 8100cd2:	2102      	movs	r1, #2
 8100cd4:	4802      	ldr	r0, [pc, #8]	; (8100ce0 <ErrorHandler+0x14>)
 8100cd6:	f000 fecf 	bl	8101a78 <HAL_GPIO_WritePin>
}
 8100cda:	bf00      	nop
 8100cdc:	bd80      	pop	{r7, pc}
 8100cde:	bf00      	nop
 8100ce0:	58021000 	.word	0x58021000

08100ce4 <ReadSensorID>:

uint8_t ReadSensorID (uint16_t DeviceAddr, uint8_t reg)
{
 8100ce4:	b580      	push	{r7, lr}
 8100ce6:	b082      	sub	sp, #8
 8100ce8:	af00      	add	r7, sp, #0
 8100cea:	4603      	mov	r3, r0
 8100cec:	460a      	mov	r2, r1
 8100cee:	80fb      	strh	r3, [r7, #6]
 8100cf0:	4613      	mov	r3, r2
 8100cf2:	717b      	strb	r3, [r7, #5]
	return I2CRead(DeviceAddr, reg);
 8100cf4:	797a      	ldrb	r2, [r7, #5]
 8100cf6:	88fb      	ldrh	r3, [r7, #6]
 8100cf8:	4611      	mov	r1, r2
 8100cfa:	4618      	mov	r0, r3
 8100cfc:	f7ff ff94 	bl	8100c28 <I2CRead>
 8100d00:	4603      	mov	r3, r0
}
 8100d02:	4618      	mov	r0, r3
 8100d04:	3708      	adds	r7, #8
 8100d06:	46bd      	mov	sp, r7
 8100d08:	bd80      	pop	{r7, pc}
	...

08100d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100d0c:	b580      	push	{r7, lr}
 8100d0e:	b082      	sub	sp, #8
 8100d10:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100d12:	4b2a      	ldr	r3, [pc, #168]	; (8100dbc <main+0xb0>)
 8100d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d18:	4a28      	ldr	r2, [pc, #160]	; (8100dbc <main+0xb0>)
 8100d1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d22:	4b26      	ldr	r3, [pc, #152]	; (8100dbc <main+0xb0>)
 8100d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100d2c:	607b      	str	r3, [r7, #4]
 8100d2e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100d30:	2001      	movs	r0, #1
 8100d32:	f000 febb 	bl	8101aac <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100d36:	f001 fcd7 	bl	81026e8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100d3a:	2201      	movs	r2, #1
 8100d3c:	2102      	movs	r1, #2
 8100d3e:	2000      	movs	r0, #0
 8100d40:	f001 fc5c 	bl	81025fc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100d44:	4b1e      	ldr	r3, [pc, #120]	; (8100dc0 <main+0xb4>)
 8100d46:	681b      	ldr	r3, [r3, #0]
 8100d48:	091b      	lsrs	r3, r3, #4
 8100d4a:	f003 030f 	and.w	r3, r3, #15
 8100d4e:	2b07      	cmp	r3, #7
 8100d50:	d108      	bne.n	8100d64 <main+0x58>
 8100d52:	4b1c      	ldr	r3, [pc, #112]	; (8100dc4 <main+0xb8>)
 8100d54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100d58:	4a1a      	ldr	r2, [pc, #104]	; (8100dc4 <main+0xb8>)
 8100d5a:	f043 0301 	orr.w	r3, r3, #1
 8100d5e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100d62:	e007      	b.n	8100d74 <main+0x68>
 8100d64:	4b17      	ldr	r3, [pc, #92]	; (8100dc4 <main+0xb8>)
 8100d66:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100d6a:	4a16      	ldr	r2, [pc, #88]	; (8100dc4 <main+0xb8>)
 8100d6c:	f043 0301 	orr.w	r3, r3, #1
 8100d70:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100d74:	f000 fb3c 	bl	81013f0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100d78:	f7ff fce8 	bl	810074c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8100d7c:	f000 fa78 	bl	8101270 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8100d80:	f000 f926 	bl	8100fd0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8100d84:	f7ff fd5a 	bl	810083c <MX_I2C1_Init>
  LSM303AccInit();
 8100d88:	f7ff fdf2 	bl	8100970 <LSM303AccInit>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8100d8c:	2100      	movs	r1, #0
 8100d8e:	480e      	ldr	r0, [pc, #56]	; (8100dc8 <main+0xbc>)
 8100d90:	f002 fa68 	bl	8103264 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8100d94:	2104      	movs	r1, #4
 8100d96:	480c      	ldr	r0, [pc, #48]	; (8100dc8 <main+0xbc>)
 8100d98:	f002 fa64 	bl	8103264 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8100d9c:	2108      	movs	r1, #8
 8100d9e:	480a      	ldr	r0, [pc, #40]	; (8100dc8 <main+0xbc>)
 8100da0:	f002 fa60 	bl	8103264 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8100da4:	210c      	movs	r1, #12
 8100da6:	4808      	ldr	r0, [pc, #32]	; (8100dc8 <main+0xbc>)
 8100da8:	f002 fa5c 	bl	8103264 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8100dac:	f004 fcc8 	bl	8105740 <osKernelInitialize>
  MX_FREERTOS_Init();
 8100db0:	f7ff fc8a 	bl	81006c8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8100db4:	f004 fcf8 	bl	81057a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100db8:	e7fe      	b.n	8100db8 <main+0xac>
 8100dba:	bf00      	nop
 8100dbc:	58024400 	.word	0x58024400
 8100dc0:	e000ed00 	.word	0xe000ed00
 8100dc4:	58026400 	.word	0x58026400
 8100dc8:	10004a68 	.word	0x10004a68

08100dcc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100dcc:	b580      	push	{r7, lr}
 8100dce:	b082      	sub	sp, #8
 8100dd0:	af00      	add	r7, sp, #0
 8100dd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8100dd4:	687b      	ldr	r3, [r7, #4]
 8100dd6:	681b      	ldr	r3, [r3, #0]
 8100dd8:	4a04      	ldr	r2, [pc, #16]	; (8100dec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100dda:	4293      	cmp	r3, r2
 8100ddc:	d101      	bne.n	8100de2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100dde:	f000 fb65 	bl	81014ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100de2:	bf00      	nop
 8100de4:	3708      	adds	r7, #8
 8100de6:	46bd      	mov	sp, r7
 8100de8:	bd80      	pop	{r7, pc}
 8100dea:	bf00      	nop
 8100dec:	40001400 	.word	0x40001400

08100df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100df0:	b480      	push	{r7}
 8100df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8100df4:	bf00      	nop
 8100df6:	46bd      	mov	sp, r7
 8100df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100dfc:	4770      	bx	lr
	...

08100e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100e00:	b580      	push	{r7, lr}
 8100e02:	b082      	sub	sp, #8
 8100e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100e06:	4b14      	ldr	r3, [pc, #80]	; (8100e58 <HAL_MspInit+0x58>)
 8100e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100e0c:	4a12      	ldr	r2, [pc, #72]	; (8100e58 <HAL_MspInit+0x58>)
 8100e0e:	f043 0302 	orr.w	r3, r3, #2
 8100e12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100e16:	4b10      	ldr	r3, [pc, #64]	; (8100e58 <HAL_MspInit+0x58>)
 8100e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100e1c:	f003 0302 	and.w	r3, r3, #2
 8100e20:	607b      	str	r3, [r7, #4]
 8100e22:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100e24:	2200      	movs	r2, #0
 8100e26:	210f      	movs	r1, #15
 8100e28:	f06f 0001 	mvn.w	r0, #1
 8100e2c:	f000 fc38 	bl	81016a0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 8100e30:	2200      	movs	r2, #0
 8100e32:	2100      	movs	r1, #0
 8100e34:	2040      	movs	r0, #64	; 0x40
 8100e36:	f000 fc33 	bl	81016a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8100e3a:	2040      	movs	r0, #64	; 0x40
 8100e3c:	f000 fc4a 	bl	81016d4 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8100e40:	2200      	movs	r2, #0
 8100e42:	2105      	movs	r1, #5
 8100e44:	207e      	movs	r0, #126	; 0x7e
 8100e46:	f000 fc2b 	bl	81016a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100e4a:	207e      	movs	r0, #126	; 0x7e
 8100e4c:	f000 fc42 	bl	81016d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100e50:	bf00      	nop
 8100e52:	3708      	adds	r7, #8
 8100e54:	46bd      	mov	sp, r7
 8100e56:	bd80      	pop	{r7, pc}
 8100e58:	58024400 	.word	0x58024400

08100e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100e5c:	b580      	push	{r7, lr}
 8100e5e:	b08e      	sub	sp, #56	; 0x38
 8100e60:	af00      	add	r7, sp, #0
 8100e62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8100e64:	2300      	movs	r3, #0
 8100e66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8100e68:	2300      	movs	r3, #0
 8100e6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8100e6c:	2200      	movs	r2, #0
 8100e6e:	6879      	ldr	r1, [r7, #4]
 8100e70:	2037      	movs	r0, #55	; 0x37
 8100e72:	f000 fc15 	bl	81016a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8100e76:	2037      	movs	r0, #55	; 0x37
 8100e78:	f000 fc2c 	bl	81016d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8100e7c:	4b21      	ldr	r3, [pc, #132]	; (8100f04 <HAL_InitTick+0xa8>)
 8100e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e82:	4a20      	ldr	r2, [pc, #128]	; (8100f04 <HAL_InitTick+0xa8>)
 8100e84:	f043 0320 	orr.w	r3, r3, #32
 8100e88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100e8c:	4b1d      	ldr	r3, [pc, #116]	; (8100f04 <HAL_InitTick+0xa8>)
 8100e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e92:	f003 0320 	and.w	r3, r3, #32
 8100e96:	60bb      	str	r3, [r7, #8]
 8100e98:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100e9a:	f107 020c 	add.w	r2, r7, #12
 8100e9e:	f107 0310 	add.w	r3, r7, #16
 8100ea2:	4611      	mov	r1, r2
 8100ea4:	4618      	mov	r0, r3
 8100ea6:	f001 fdfd 	bl	8102aa4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8100eaa:	f001 fdcf 	bl	8102a4c <HAL_RCC_GetPCLK1Freq>
 8100eae:	4603      	mov	r3, r0
 8100eb0:	005b      	lsls	r3, r3, #1
 8100eb2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8100eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100eb6:	4a14      	ldr	r2, [pc, #80]	; (8100f08 <HAL_InitTick+0xac>)
 8100eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8100ebc:	0c9b      	lsrs	r3, r3, #18
 8100ebe:	3b01      	subs	r3, #1
 8100ec0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8100ec2:	4b12      	ldr	r3, [pc, #72]	; (8100f0c <HAL_InitTick+0xb0>)
 8100ec4:	4a12      	ldr	r2, [pc, #72]	; (8100f10 <HAL_InitTick+0xb4>)
 8100ec6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8100ec8:	4b10      	ldr	r3, [pc, #64]	; (8100f0c <HAL_InitTick+0xb0>)
 8100eca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8100ece:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8100ed0:	4a0e      	ldr	r2, [pc, #56]	; (8100f0c <HAL_InitTick+0xb0>)
 8100ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100ed4:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8100ed6:	4b0d      	ldr	r3, [pc, #52]	; (8100f0c <HAL_InitTick+0xb0>)
 8100ed8:	2200      	movs	r2, #0
 8100eda:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100edc:	4b0b      	ldr	r3, [pc, #44]	; (8100f0c <HAL_InitTick+0xb0>)
 8100ede:	2200      	movs	r2, #0
 8100ee0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8100ee2:	480a      	ldr	r0, [pc, #40]	; (8100f0c <HAL_InitTick+0xb0>)
 8100ee4:	f002 f8ce 	bl	8103084 <HAL_TIM_Base_Init>
 8100ee8:	4603      	mov	r3, r0
 8100eea:	2b00      	cmp	r3, #0
 8100eec:	d104      	bne.n	8100ef8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8100eee:	4807      	ldr	r0, [pc, #28]	; (8100f0c <HAL_InitTick+0xb0>)
 8100ef0:	f002 f920 	bl	8103134 <HAL_TIM_Base_Start_IT>
 8100ef4:	4603      	mov	r3, r0
 8100ef6:	e000      	b.n	8100efa <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8100ef8:	2301      	movs	r3, #1
}
 8100efa:	4618      	mov	r0, r3
 8100efc:	3738      	adds	r7, #56	; 0x38
 8100efe:	46bd      	mov	sp, r7
 8100f00:	bd80      	pop	{r7, pc}
 8100f02:	bf00      	nop
 8100f04:	58024400 	.word	0x58024400
 8100f08:	431bde83 	.word	0x431bde83
 8100f0c:	10004a1c 	.word	0x10004a1c
 8100f10:	40001400 	.word	0x40001400

08100f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100f14:	b480      	push	{r7}
 8100f16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8100f18:	bf00      	nop
 8100f1a:	46bd      	mov	sp, r7
 8100f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f20:	4770      	bx	lr

08100f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100f22:	b480      	push	{r7}
 8100f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100f26:	e7fe      	b.n	8100f26 <HardFault_Handler+0x4>

08100f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100f28:	b480      	push	{r7}
 8100f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100f2c:	e7fe      	b.n	8100f2c <MemManage_Handler+0x4>

08100f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100f2e:	b480      	push	{r7}
 8100f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100f32:	e7fe      	b.n	8100f32 <BusFault_Handler+0x4>

08100f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100f34:	b480      	push	{r7}
 8100f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100f38:	e7fe      	b.n	8100f38 <UsageFault_Handler+0x4>

08100f3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100f3a:	b480      	push	{r7}
 8100f3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100f3e:	bf00      	nop
 8100f40:	46bd      	mov	sp, r7
 8100f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f46:	4770      	bx	lr

08100f48 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8100f48:	b480      	push	{r7}
 8100f4a:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8100f4c:	bf00      	nop
 8100f4e:	46bd      	mov	sp, r7
 8100f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f54:	4770      	bx	lr

08100f56 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100f56:	b580      	push	{r7, lr}
 8100f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100f5a:	f000 fdb9 	bl	8101ad0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100f5e:	bf00      	nop
 8100f60:	bd80      	pop	{r7, pc}
	...

08100f64 <TIM7_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8100f64:	b580      	push	{r7, lr}
 8100f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8100f68:	4802      	ldr	r0, [pc, #8]	; (8100f74 <TIM7_IRQHandler+0x10>)
 8100f6a:	f002 fa4d 	bl	8103408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8100f6e:	bf00      	nop
 8100f70:	bd80      	pop	{r7, pc}
 8100f72:	bf00      	nop
 8100f74:	10004a1c 	.word	0x10004a1c

08100f78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8100f78:	b580      	push	{r7, lr}
 8100f7a:	b084      	sub	sp, #16
 8100f7c:	af00      	add	r7, sp, #0
 8100f7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8100f80:	4b11      	ldr	r3, [pc, #68]	; (8100fc8 <_sbrk+0x50>)
 8100f82:	681b      	ldr	r3, [r3, #0]
 8100f84:	2b00      	cmp	r3, #0
 8100f86:	d102      	bne.n	8100f8e <_sbrk+0x16>
		heap_end = &end;
 8100f88:	4b0f      	ldr	r3, [pc, #60]	; (8100fc8 <_sbrk+0x50>)
 8100f8a:	4a10      	ldr	r2, [pc, #64]	; (8100fcc <_sbrk+0x54>)
 8100f8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8100f8e:	4b0e      	ldr	r3, [pc, #56]	; (8100fc8 <_sbrk+0x50>)
 8100f90:	681b      	ldr	r3, [r3, #0]
 8100f92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8100f94:	4b0c      	ldr	r3, [pc, #48]	; (8100fc8 <_sbrk+0x50>)
 8100f96:	681a      	ldr	r2, [r3, #0]
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	4413      	add	r3, r2
 8100f9c:	466a      	mov	r2, sp
 8100f9e:	4293      	cmp	r3, r2
 8100fa0:	d907      	bls.n	8100fb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8100fa2:	f007 f90d 	bl	81081c0 <__errno>
 8100fa6:	4602      	mov	r2, r0
 8100fa8:	230c      	movs	r3, #12
 8100faa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8100fac:	f04f 33ff 	mov.w	r3, #4294967295
 8100fb0:	e006      	b.n	8100fc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8100fb2:	4b05      	ldr	r3, [pc, #20]	; (8100fc8 <_sbrk+0x50>)
 8100fb4:	681a      	ldr	r2, [r3, #0]
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	4413      	add	r3, r2
 8100fba:	4a03      	ldr	r2, [pc, #12]	; (8100fc8 <_sbrk+0x50>)
 8100fbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8100fbe:	68fb      	ldr	r3, [r7, #12]
}
 8100fc0:	4618      	mov	r0, r3
 8100fc2:	3710      	adds	r7, #16
 8100fc4:	46bd      	mov	sp, r7
 8100fc6:	bd80      	pop	{r7, pc}
 8100fc8:	10000090 	.word	0x10000090
 8100fcc:	10004b88 	.word	0x10004b88

08100fd0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8100fd0:	b580      	push	{r7, lr}
 8100fd2:	b09a      	sub	sp, #104	; 0x68
 8100fd4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100fd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100fda:	2200      	movs	r2, #0
 8100fdc:	601a      	str	r2, [r3, #0]
 8100fde:	605a      	str	r2, [r3, #4]
 8100fe0:	609a      	str	r2, [r3, #8]
 8100fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100fe8:	2200      	movs	r2, #0
 8100fea:	601a      	str	r2, [r3, #0]
 8100fec:	605a      	str	r2, [r3, #4]
 8100fee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100ff4:	2200      	movs	r2, #0
 8100ff6:	601a      	str	r2, [r3, #0]
 8100ff8:	605a      	str	r2, [r3, #4]
 8100ffa:	609a      	str	r2, [r3, #8]
 8100ffc:	60da      	str	r2, [r3, #12]
 8100ffe:	611a      	str	r2, [r3, #16]
 8101000:	615a      	str	r2, [r3, #20]
 8101002:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101004:	1d3b      	adds	r3, r7, #4
 8101006:	222c      	movs	r2, #44	; 0x2c
 8101008:	2100      	movs	r1, #0
 810100a:	4618      	mov	r0, r3
 810100c:	f007 f90d 	bl	810822a <memset>

  htim1.Instance = TIM1;
 8101010:	4b55      	ldr	r3, [pc, #340]	; (8101168 <MX_TIM1_Init+0x198>)
 8101012:	4a56      	ldr	r2, [pc, #344]	; (810116c <MX_TIM1_Init+0x19c>)
 8101014:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 8101016:	4b54      	ldr	r3, [pc, #336]	; (8101168 <MX_TIM1_Init+0x198>)
 8101018:	2236      	movs	r2, #54	; 0x36
 810101a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 810101c:	4b52      	ldr	r3, [pc, #328]	; (8101168 <MX_TIM1_Init+0x198>)
 810101e:	2200      	movs	r2, #0
 8101020:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 8101022:	4b51      	ldr	r3, [pc, #324]	; (8101168 <MX_TIM1_Init+0x198>)
 8101024:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8101028:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810102a:	4b4f      	ldr	r3, [pc, #316]	; (8101168 <MX_TIM1_Init+0x198>)
 810102c:	2200      	movs	r2, #0
 810102e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101030:	4b4d      	ldr	r3, [pc, #308]	; (8101168 <MX_TIM1_Init+0x198>)
 8101032:	2200      	movs	r2, #0
 8101034:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101036:	4b4c      	ldr	r3, [pc, #304]	; (8101168 <MX_TIM1_Init+0x198>)
 8101038:	2200      	movs	r2, #0
 810103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810103c:	484a      	ldr	r0, [pc, #296]	; (8101168 <MX_TIM1_Init+0x198>)
 810103e:	f002 f821 	bl	8103084 <HAL_TIM_Base_Init>
 8101042:	4603      	mov	r3, r0
 8101044:	2b00      	cmp	r3, #0
 8101046:	d001      	beq.n	810104c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101048:	f7ff fed2 	bl	8100df0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810104c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101050:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101052:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101056:	4619      	mov	r1, r3
 8101058:	4843      	ldr	r0, [pc, #268]	; (8101168 <MX_TIM1_Init+0x198>)
 810105a:	f002 fc05 	bl	8103868 <HAL_TIM_ConfigClockSource>
 810105e:	4603      	mov	r3, r0
 8101060:	2b00      	cmp	r3, #0
 8101062:	d001      	beq.n	8101068 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101064:	f7ff fec4 	bl	8100df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101068:	483f      	ldr	r0, [pc, #252]	; (8101168 <MX_TIM1_Init+0x198>)
 810106a:	f002 f899 	bl	81031a0 <HAL_TIM_PWM_Init>
 810106e:	4603      	mov	r3, r0
 8101070:	2b00      	cmp	r3, #0
 8101072:	d001      	beq.n	8101078 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101074:	f7ff febc 	bl	8100df0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101078:	2300      	movs	r3, #0
 810107a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810107c:	2300      	movs	r3, #0
 810107e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101080:	2300      	movs	r3, #0
 8101082:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101084:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101088:	4619      	mov	r1, r3
 810108a:	4837      	ldr	r0, [pc, #220]	; (8101168 <MX_TIM1_Init+0x198>)
 810108c:	f003 f90e 	bl	81042ac <HAL_TIMEx_MasterConfigSynchronization>
 8101090:	4603      	mov	r3, r0
 8101092:	2b00      	cmp	r3, #0
 8101094:	d001      	beq.n	810109a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101096:	f7ff feab 	bl	8100df0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810109a:	2360      	movs	r3, #96	; 0x60
 810109c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 810109e:	2332      	movs	r3, #50	; 0x32
 81010a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81010a2:	2300      	movs	r3, #0
 81010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81010a6:	2300      	movs	r3, #0
 81010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81010aa:	2300      	movs	r3, #0
 81010ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81010ae:	2300      	movs	r3, #0
 81010b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81010b2:	2300      	movs	r3, #0
 81010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81010b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81010ba:	2200      	movs	r2, #0
 81010bc:	4619      	mov	r1, r3
 81010be:	482a      	ldr	r0, [pc, #168]	; (8101168 <MX_TIM1_Init+0x198>)
 81010c0:	f002 fac2 	bl	8103648 <HAL_TIM_PWM_ConfigChannel>
 81010c4:	4603      	mov	r3, r0
 81010c6:	2b00      	cmp	r3, #0
 81010c8:	d001      	beq.n	81010ce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 81010ca:	f7ff fe91 	bl	8100df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 81010ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81010d2:	2204      	movs	r2, #4
 81010d4:	4619      	mov	r1, r3
 81010d6:	4824      	ldr	r0, [pc, #144]	; (8101168 <MX_TIM1_Init+0x198>)
 81010d8:	f002 fab6 	bl	8103648 <HAL_TIM_PWM_ConfigChannel>
 81010dc:	4603      	mov	r3, r0
 81010de:	2b00      	cmp	r3, #0
 81010e0:	d001      	beq.n	81010e6 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 81010e2:	f7ff fe85 	bl	8100df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 81010e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81010ea:	2208      	movs	r2, #8
 81010ec:	4619      	mov	r1, r3
 81010ee:	481e      	ldr	r0, [pc, #120]	; (8101168 <MX_TIM1_Init+0x198>)
 81010f0:	f002 faaa 	bl	8103648 <HAL_TIM_PWM_ConfigChannel>
 81010f4:	4603      	mov	r3, r0
 81010f6:	2b00      	cmp	r3, #0
 81010f8:	d001      	beq.n	81010fe <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81010fa:	f7ff fe79 	bl	8100df0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81010fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101102:	220c      	movs	r2, #12
 8101104:	4619      	mov	r1, r3
 8101106:	4818      	ldr	r0, [pc, #96]	; (8101168 <MX_TIM1_Init+0x198>)
 8101108:	f002 fa9e 	bl	8103648 <HAL_TIM_PWM_ConfigChannel>
 810110c:	4603      	mov	r3, r0
 810110e:	2b00      	cmp	r3, #0
 8101110:	d001      	beq.n	8101116 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8101112:	f7ff fe6d 	bl	8100df0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101116:	2300      	movs	r3, #0
 8101118:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 810111a:	2300      	movs	r3, #0
 810111c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810111e:	2300      	movs	r3, #0
 8101120:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101122:	2300      	movs	r3, #0
 8101124:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101126:	2300      	movs	r3, #0
 8101128:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 810112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810112e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101130:	2300      	movs	r3, #0
 8101132:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101134:	2300      	movs	r3, #0
 8101136:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101138:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810113c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810113e:	2300      	movs	r3, #0
 8101140:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101142:	2300      	movs	r3, #0
 8101144:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101146:	1d3b      	adds	r3, r7, #4
 8101148:	4619      	mov	r1, r3
 810114a:	4807      	ldr	r0, [pc, #28]	; (8101168 <MX_TIM1_Init+0x198>)
 810114c:	f003 f936 	bl	81043bc <HAL_TIMEx_ConfigBreakDeadTime>
 8101150:	4603      	mov	r3, r0
 8101152:	2b00      	cmp	r3, #0
 8101154:	d001      	beq.n	810115a <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8101156:	f7ff fe4b 	bl	8100df0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 810115a:	4803      	ldr	r0, [pc, #12]	; (8101168 <MX_TIM1_Init+0x198>)
 810115c:	f000 f82a 	bl	81011b4 <HAL_TIM_MspPostInit>

}
 8101160:	bf00      	nop
 8101162:	3768      	adds	r7, #104	; 0x68
 8101164:	46bd      	mov	sp, r7
 8101166:	bd80      	pop	{r7, pc}
 8101168:	10004a68 	.word	0x10004a68
 810116c:	40010000 	.word	0x40010000

08101170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8101170:	b480      	push	{r7}
 8101172:	b085      	sub	sp, #20
 8101174:	af00      	add	r7, sp, #0
 8101176:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	681b      	ldr	r3, [r3, #0]
 810117c:	4a0b      	ldr	r2, [pc, #44]	; (81011ac <HAL_TIM_Base_MspInit+0x3c>)
 810117e:	4293      	cmp	r3, r2
 8101180:	d10e      	bne.n	81011a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8101182:	4b0b      	ldr	r3, [pc, #44]	; (81011b0 <HAL_TIM_Base_MspInit+0x40>)
 8101184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101188:	4a09      	ldr	r2, [pc, #36]	; (81011b0 <HAL_TIM_Base_MspInit+0x40>)
 810118a:	f043 0301 	orr.w	r3, r3, #1
 810118e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101192:	4b07      	ldr	r3, [pc, #28]	; (81011b0 <HAL_TIM_Base_MspInit+0x40>)
 8101194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101198:	f003 0301 	and.w	r3, r3, #1
 810119c:	60fb      	str	r3, [r7, #12]
 810119e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 81011a0:	bf00      	nop
 81011a2:	3714      	adds	r7, #20
 81011a4:	46bd      	mov	sp, r7
 81011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011aa:	4770      	bx	lr
 81011ac:	40010000 	.word	0x40010000
 81011b0:	58024400 	.word	0x58024400

081011b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 81011b4:	b580      	push	{r7, lr}
 81011b6:	b08a      	sub	sp, #40	; 0x28
 81011b8:	af00      	add	r7, sp, #0
 81011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011bc:	f107 0314 	add.w	r3, r7, #20
 81011c0:	2200      	movs	r2, #0
 81011c2:	601a      	str	r2, [r3, #0]
 81011c4:	605a      	str	r2, [r3, #4]
 81011c6:	609a      	str	r2, [r3, #8]
 81011c8:	60da      	str	r2, [r3, #12]
 81011ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 81011cc:	687b      	ldr	r3, [r7, #4]
 81011ce:	681b      	ldr	r3, [r3, #0]
 81011d0:	4a23      	ldr	r2, [pc, #140]	; (8101260 <HAL_TIM_MspPostInit+0xac>)
 81011d2:	4293      	cmp	r3, r2
 81011d4:	d13f      	bne.n	8101256 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 81011d6:	4b23      	ldr	r3, [pc, #140]	; (8101264 <HAL_TIM_MspPostInit+0xb0>)
 81011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011dc:	4a21      	ldr	r2, [pc, #132]	; (8101264 <HAL_TIM_MspPostInit+0xb0>)
 81011de:	f043 0310 	orr.w	r3, r3, #16
 81011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011e6:	4b1f      	ldr	r3, [pc, #124]	; (8101264 <HAL_TIM_MspPostInit+0xb0>)
 81011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011ec:	f003 0310 	and.w	r3, r3, #16
 81011f0:	613b      	str	r3, [r7, #16]
 81011f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81011f4:	4b1b      	ldr	r3, [pc, #108]	; (8101264 <HAL_TIM_MspPostInit+0xb0>)
 81011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011fa:	4a1a      	ldr	r2, [pc, #104]	; (8101264 <HAL_TIM_MspPostInit+0xb0>)
 81011fc:	f043 0301 	orr.w	r3, r3, #1
 8101200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101204:	4b17      	ldr	r3, [pc, #92]	; (8101264 <HAL_TIM_MspPostInit+0xb0>)
 8101206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810120a:	f003 0301 	and.w	r3, r3, #1
 810120e:	60fb      	str	r3, [r7, #12]
 8101210:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8101212:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8101216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101218:	2302      	movs	r3, #2
 810121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810121c:	2300      	movs	r3, #0
 810121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101220:	2300      	movs	r3, #0
 8101222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101224:	2301      	movs	r3, #1
 8101226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101228:	f107 0314 	add.w	r3, r7, #20
 810122c:	4619      	mov	r1, r3
 810122e:	480e      	ldr	r0, [pc, #56]	; (8101268 <HAL_TIM_MspPostInit+0xb4>)
 8101230:	f000 fa72 	bl	8101718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8101234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810123a:	2302      	movs	r3, #2
 810123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810123e:	2300      	movs	r3, #0
 8101240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101242:	2300      	movs	r3, #0
 8101244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101246:	2301      	movs	r3, #1
 8101248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810124a:	f107 0314 	add.w	r3, r7, #20
 810124e:	4619      	mov	r1, r3
 8101250:	4806      	ldr	r0, [pc, #24]	; (810126c <HAL_TIM_MspPostInit+0xb8>)
 8101252:	f000 fa61 	bl	8101718 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101256:	bf00      	nop
 8101258:	3728      	adds	r7, #40	; 0x28
 810125a:	46bd      	mov	sp, r7
 810125c:	bd80      	pop	{r7, pc}
 810125e:	bf00      	nop
 8101260:	40010000 	.word	0x40010000
 8101264:	58024400 	.word	0x58024400
 8101268:	58021000 	.word	0x58021000
 810126c:	58020000 	.word	0x58020000

08101270 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101270:	b580      	push	{r7, lr}
 8101272:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101274:	4b22      	ldr	r3, [pc, #136]	; (8101300 <MX_USART3_UART_Init+0x90>)
 8101276:	4a23      	ldr	r2, [pc, #140]	; (8101304 <MX_USART3_UART_Init+0x94>)
 8101278:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810127a:	4b21      	ldr	r3, [pc, #132]	; (8101300 <MX_USART3_UART_Init+0x90>)
 810127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101280:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101282:	4b1f      	ldr	r3, [pc, #124]	; (8101300 <MX_USART3_UART_Init+0x90>)
 8101284:	2200      	movs	r2, #0
 8101286:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101288:	4b1d      	ldr	r3, [pc, #116]	; (8101300 <MX_USART3_UART_Init+0x90>)
 810128a:	2200      	movs	r2, #0
 810128c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810128e:	4b1c      	ldr	r3, [pc, #112]	; (8101300 <MX_USART3_UART_Init+0x90>)
 8101290:	2200      	movs	r2, #0
 8101292:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101294:	4b1a      	ldr	r3, [pc, #104]	; (8101300 <MX_USART3_UART_Init+0x90>)
 8101296:	220c      	movs	r2, #12
 8101298:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810129a:	4b19      	ldr	r3, [pc, #100]	; (8101300 <MX_USART3_UART_Init+0x90>)
 810129c:	2200      	movs	r2, #0
 810129e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81012a0:	4b17      	ldr	r3, [pc, #92]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012a2:	2200      	movs	r2, #0
 81012a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81012a6:	4b16      	ldr	r3, [pc, #88]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012a8:	2200      	movs	r2, #0
 81012aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81012ac:	4b14      	ldr	r3, [pc, #80]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012ae:	2200      	movs	r2, #0
 81012b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81012b2:	4b13      	ldr	r3, [pc, #76]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012b4:	2200      	movs	r2, #0
 81012b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81012b8:	4811      	ldr	r0, [pc, #68]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012ba:	f003 f91b 	bl	81044f4 <HAL_UART_Init>
 81012be:	4603      	mov	r3, r0
 81012c0:	2b00      	cmp	r3, #0
 81012c2:	d001      	beq.n	81012c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81012c4:	f7ff fd94 	bl	8100df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81012c8:	2100      	movs	r1, #0
 81012ca:	480d      	ldr	r0, [pc, #52]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012cc:	f004 f94b 	bl	8105566 <HAL_UARTEx_SetTxFifoThreshold>
 81012d0:	4603      	mov	r3, r0
 81012d2:	2b00      	cmp	r3, #0
 81012d4:	d001      	beq.n	81012da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81012d6:	f7ff fd8b 	bl	8100df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81012da:	2100      	movs	r1, #0
 81012dc:	4808      	ldr	r0, [pc, #32]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012de:	f004 f980 	bl	81055e2 <HAL_UARTEx_SetRxFifoThreshold>
 81012e2:	4603      	mov	r3, r0
 81012e4:	2b00      	cmp	r3, #0
 81012e6:	d001      	beq.n	81012ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81012e8:	f7ff fd82 	bl	8100df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81012ec:	4804      	ldr	r0, [pc, #16]	; (8101300 <MX_USART3_UART_Init+0x90>)
 81012ee:	f004 f901 	bl	81054f4 <HAL_UARTEx_DisableFifoMode>
 81012f2:	4603      	mov	r3, r0
 81012f4:	2b00      	cmp	r3, #0
 81012f6:	d001      	beq.n	81012fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81012f8:	f7ff fd7a 	bl	8100df0 <Error_Handler>
  }

}
 81012fc:	bf00      	nop
 81012fe:	bd80      	pop	{r7, pc}
 8101300:	10004ab4 	.word	0x10004ab4
 8101304:	40004800 	.word	0x40004800

08101308 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101308:	b580      	push	{r7, lr}
 810130a:	b08a      	sub	sp, #40	; 0x28
 810130c:	af00      	add	r7, sp, #0
 810130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101310:	f107 0314 	add.w	r3, r7, #20
 8101314:	2200      	movs	r2, #0
 8101316:	601a      	str	r2, [r3, #0]
 8101318:	605a      	str	r2, [r3, #4]
 810131a:	609a      	str	r2, [r3, #8]
 810131c:	60da      	str	r2, [r3, #12]
 810131e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8101320:	687b      	ldr	r3, [r7, #4]
 8101322:	681b      	ldr	r3, [r3, #0]
 8101324:	4a1a      	ldr	r2, [pc, #104]	; (8101390 <HAL_UART_MspInit+0x88>)
 8101326:	4293      	cmp	r3, r2
 8101328:	d12e      	bne.n	8101388 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810132a:	4b1a      	ldr	r3, [pc, #104]	; (8101394 <HAL_UART_MspInit+0x8c>)
 810132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101330:	4a18      	ldr	r2, [pc, #96]	; (8101394 <HAL_UART_MspInit+0x8c>)
 8101332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810133a:	4b16      	ldr	r3, [pc, #88]	; (8101394 <HAL_UART_MspInit+0x8c>)
 810133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101344:	613b      	str	r3, [r7, #16]
 8101346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101348:	4b12      	ldr	r3, [pc, #72]	; (8101394 <HAL_UART_MspInit+0x8c>)
 810134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810134e:	4a11      	ldr	r2, [pc, #68]	; (8101394 <HAL_UART_MspInit+0x8c>)
 8101350:	f043 0308 	orr.w	r3, r3, #8
 8101354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101358:	4b0e      	ldr	r3, [pc, #56]	; (8101394 <HAL_UART_MspInit+0x8c>)
 810135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810135e:	f003 0308 	and.w	r3, r3, #8
 8101362:	60fb      	str	r3, [r7, #12]
 8101364:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101366:	f44f 7340 	mov.w	r3, #768	; 0x300
 810136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810136c:	2302      	movs	r3, #2
 810136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101370:	2300      	movs	r3, #0
 8101372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101374:	2300      	movs	r3, #0
 8101376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101378:	2307      	movs	r3, #7
 810137a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 810137c:	f107 0314 	add.w	r3, r7, #20
 8101380:	4619      	mov	r1, r3
 8101382:	4805      	ldr	r0, [pc, #20]	; (8101398 <HAL_UART_MspInit+0x90>)
 8101384:	f000 f9c8 	bl	8101718 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101388:	bf00      	nop
 810138a:	3728      	adds	r7, #40	; 0x28
 810138c:	46bd      	mov	sp, r7
 810138e:	bd80      	pop	{r7, pc}
 8101390:	40004800 	.word	0x40004800
 8101394:	58024400 	.word	0x58024400
 8101398:	58020c00 	.word	0x58020c00

0810139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 810139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81013d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 81013a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 81013a2:	e003      	b.n	81013ac <LoopCopyDataInit>

081013a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 81013a4:	4b0c      	ldr	r3, [pc, #48]	; (81013d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 81013a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 81013a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 81013aa:	3104      	adds	r1, #4

081013ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 81013ac:	480b      	ldr	r0, [pc, #44]	; (81013dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 81013ae:	4b0c      	ldr	r3, [pc, #48]	; (81013e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 81013b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81013b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81013b4:	d3f6      	bcc.n	81013a4 <CopyDataInit>
  ldr  r2, =_sbss
 81013b6:	4a0b      	ldr	r2, [pc, #44]	; (81013e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 81013b8:	e002      	b.n	81013c0 <LoopFillZerobss>

081013ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81013ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81013bc:	f842 3b04 	str.w	r3, [r2], #4

081013c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81013c0:	4b09      	ldr	r3, [pc, #36]	; (81013e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 81013c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81013c4:	d3f9      	bcc.n	81013ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 81013c6:	f7ff f963 	bl	8100690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 81013ca:	f006 feff 	bl	81081cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81013ce:	f7ff fc9d 	bl	8100d0c <main>
  bx  lr    
 81013d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81013d4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81013d8:	08108b2c 	.word	0x08108b2c
  ldr  r0, =_sdata
 81013dc:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81013e0:	10000074 	.word	0x10000074
  ldr  r2, =_sbss
 81013e4:	10000074 	.word	0x10000074
  ldr  r3, = _ebss
 81013e8:	10004b88 	.word	0x10004b88

081013ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81013ec:	e7fe      	b.n	81013ec <ADC3_IRQHandler>
	...

081013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81013f0:	b580      	push	{r7, lr}
 81013f2:	b082      	sub	sp, #8
 81013f4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81013f6:	4b28      	ldr	r3, [pc, #160]	; (8101498 <HAL_Init+0xa8>)
 81013f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81013fc:	4a26      	ldr	r2, [pc, #152]	; (8101498 <HAL_Init+0xa8>)
 81013fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101402:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101406:	4b24      	ldr	r3, [pc, #144]	; (8101498 <HAL_Init+0xa8>)
 8101408:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101410:	603b      	str	r3, [r7, #0]
 8101412:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101414:	4b21      	ldr	r3, [pc, #132]	; (810149c <HAL_Init+0xac>)
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810141c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101420:	4a1e      	ldr	r2, [pc, #120]	; (810149c <HAL_Init+0xac>)
 8101422:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101426:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101428:	4b1c      	ldr	r3, [pc, #112]	; (810149c <HAL_Init+0xac>)
 810142a:	681b      	ldr	r3, [r3, #0]
 810142c:	4a1b      	ldr	r2, [pc, #108]	; (810149c <HAL_Init+0xac>)
 810142e:	f043 0301 	orr.w	r3, r3, #1
 8101432:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101434:	2003      	movs	r0, #3
 8101436:	f000 f928 	bl	810168a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810143a:	f001 f963 	bl	8102704 <HAL_RCC_GetSysClockFreq>
 810143e:	4601      	mov	r1, r0
 8101440:	4b15      	ldr	r3, [pc, #84]	; (8101498 <HAL_Init+0xa8>)
 8101442:	699b      	ldr	r3, [r3, #24]
 8101444:	0a1b      	lsrs	r3, r3, #8
 8101446:	f003 030f 	and.w	r3, r3, #15
 810144a:	4a15      	ldr	r2, [pc, #84]	; (81014a0 <HAL_Init+0xb0>)
 810144c:	5cd3      	ldrb	r3, [r2, r3]
 810144e:	f003 031f 	and.w	r3, r3, #31
 8101452:	fa21 f303 	lsr.w	r3, r1, r3
 8101456:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101458:	4b0f      	ldr	r3, [pc, #60]	; (8101498 <HAL_Init+0xa8>)
 810145a:	699b      	ldr	r3, [r3, #24]
 810145c:	f003 030f 	and.w	r3, r3, #15
 8101460:	4a0f      	ldr	r2, [pc, #60]	; (81014a0 <HAL_Init+0xb0>)
 8101462:	5cd3      	ldrb	r3, [r2, r3]
 8101464:	f003 031f 	and.w	r3, r3, #31
 8101468:	687a      	ldr	r2, [r7, #4]
 810146a:	fa22 f303 	lsr.w	r3, r2, r3
 810146e:	4a0d      	ldr	r2, [pc, #52]	; (81014a4 <HAL_Init+0xb4>)
 8101470:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101472:	4b0c      	ldr	r3, [pc, #48]	; (81014a4 <HAL_Init+0xb4>)
 8101474:	681b      	ldr	r3, [r3, #0]
 8101476:	4a0c      	ldr	r2, [pc, #48]	; (81014a8 <HAL_Init+0xb8>)
 8101478:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810147a:	2000      	movs	r0, #0
 810147c:	f7ff fcee 	bl	8100e5c <HAL_InitTick>
 8101480:	4603      	mov	r3, r0
 8101482:	2b00      	cmp	r3, #0
 8101484:	d001      	beq.n	810148a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101486:	2301      	movs	r3, #1
 8101488:	e002      	b.n	8101490 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810148a:	f7ff fcb9 	bl	8100e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810148e:	2300      	movs	r3, #0
}
 8101490:	4618      	mov	r0, r3
 8101492:	3708      	adds	r7, #8
 8101494:	46bd      	mov	sp, r7
 8101496:	bd80      	pop	{r7, pc}
 8101498:	58024400 	.word	0x58024400
 810149c:	40024400 	.word	0x40024400
 81014a0:	08108a9c 	.word	0x08108a9c
 81014a4:	10000004 	.word	0x10000004
 81014a8:	10000000 	.word	0x10000000

081014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81014ac:	b480      	push	{r7}
 81014ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81014b0:	4b06      	ldr	r3, [pc, #24]	; (81014cc <HAL_IncTick+0x20>)
 81014b2:	781b      	ldrb	r3, [r3, #0]
 81014b4:	461a      	mov	r2, r3
 81014b6:	4b06      	ldr	r3, [pc, #24]	; (81014d0 <HAL_IncTick+0x24>)
 81014b8:	681b      	ldr	r3, [r3, #0]
 81014ba:	4413      	add	r3, r2
 81014bc:	4a04      	ldr	r2, [pc, #16]	; (81014d0 <HAL_IncTick+0x24>)
 81014be:	6013      	str	r3, [r2, #0]
}
 81014c0:	bf00      	nop
 81014c2:	46bd      	mov	sp, r7
 81014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014c8:	4770      	bx	lr
 81014ca:	bf00      	nop
 81014cc:	10000008 	.word	0x10000008
 81014d0:	10004b40 	.word	0x10004b40

081014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81014d4:	b480      	push	{r7}
 81014d6:	af00      	add	r7, sp, #0
  return uwTick;
 81014d8:	4b03      	ldr	r3, [pc, #12]	; (81014e8 <HAL_GetTick+0x14>)
 81014da:	681b      	ldr	r3, [r3, #0]
}
 81014dc:	4618      	mov	r0, r3
 81014de:	46bd      	mov	sp, r7
 81014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e4:	4770      	bx	lr
 81014e6:	bf00      	nop
 81014e8:	10004b40 	.word	0x10004b40

081014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81014ec:	b580      	push	{r7, lr}
 81014ee:	b084      	sub	sp, #16
 81014f0:	af00      	add	r7, sp, #0
 81014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81014f4:	f7ff ffee 	bl	81014d4 <HAL_GetTick>
 81014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81014fa:	687b      	ldr	r3, [r7, #4]
 81014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81014fe:	68fb      	ldr	r3, [r7, #12]
 8101500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101504:	d005      	beq.n	8101512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101506:	4b09      	ldr	r3, [pc, #36]	; (810152c <HAL_Delay+0x40>)
 8101508:	781b      	ldrb	r3, [r3, #0]
 810150a:	461a      	mov	r2, r3
 810150c:	68fb      	ldr	r3, [r7, #12]
 810150e:	4413      	add	r3, r2
 8101510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101512:	bf00      	nop
 8101514:	f7ff ffde 	bl	81014d4 <HAL_GetTick>
 8101518:	4602      	mov	r2, r0
 810151a:	68bb      	ldr	r3, [r7, #8]
 810151c:	1ad3      	subs	r3, r2, r3
 810151e:	68fa      	ldr	r2, [r7, #12]
 8101520:	429a      	cmp	r2, r3
 8101522:	d8f7      	bhi.n	8101514 <HAL_Delay+0x28>
  {
  }
}
 8101524:	bf00      	nop
 8101526:	3710      	adds	r7, #16
 8101528:	46bd      	mov	sp, r7
 810152a:	bd80      	pop	{r7, pc}
 810152c:	10000008 	.word	0x10000008

08101530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101530:	b480      	push	{r7}
 8101532:	b085      	sub	sp, #20
 8101534:	af00      	add	r7, sp, #0
 8101536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	f003 0307 	and.w	r3, r3, #7
 810153e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101540:	4b0c      	ldr	r3, [pc, #48]	; (8101574 <__NVIC_SetPriorityGrouping+0x44>)
 8101542:	68db      	ldr	r3, [r3, #12]
 8101544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101546:	68ba      	ldr	r2, [r7, #8]
 8101548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810154c:	4013      	ands	r3, r2
 810154e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101550:	68fb      	ldr	r3, [r7, #12]
 8101552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101554:	68bb      	ldr	r3, [r7, #8]
 8101556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810155c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101562:	4a04      	ldr	r2, [pc, #16]	; (8101574 <__NVIC_SetPriorityGrouping+0x44>)
 8101564:	68bb      	ldr	r3, [r7, #8]
 8101566:	60d3      	str	r3, [r2, #12]
}
 8101568:	bf00      	nop
 810156a:	3714      	adds	r7, #20
 810156c:	46bd      	mov	sp, r7
 810156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101572:	4770      	bx	lr
 8101574:	e000ed00 	.word	0xe000ed00

08101578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101578:	b480      	push	{r7}
 810157a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810157c:	4b04      	ldr	r3, [pc, #16]	; (8101590 <__NVIC_GetPriorityGrouping+0x18>)
 810157e:	68db      	ldr	r3, [r3, #12]
 8101580:	0a1b      	lsrs	r3, r3, #8
 8101582:	f003 0307 	and.w	r3, r3, #7
}
 8101586:	4618      	mov	r0, r3
 8101588:	46bd      	mov	sp, r7
 810158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810158e:	4770      	bx	lr
 8101590:	e000ed00 	.word	0xe000ed00

08101594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101594:	b480      	push	{r7}
 8101596:	b083      	sub	sp, #12
 8101598:	af00      	add	r7, sp, #0
 810159a:	4603      	mov	r3, r0
 810159c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015a2:	2b00      	cmp	r3, #0
 81015a4:	db0b      	blt.n	81015be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81015a6:	88fb      	ldrh	r3, [r7, #6]
 81015a8:	f003 021f 	and.w	r2, r3, #31
 81015ac:	4907      	ldr	r1, [pc, #28]	; (81015cc <__NVIC_EnableIRQ+0x38>)
 81015ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015b2:	095b      	lsrs	r3, r3, #5
 81015b4:	2001      	movs	r0, #1
 81015b6:	fa00 f202 	lsl.w	r2, r0, r2
 81015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 81015be:	bf00      	nop
 81015c0:	370c      	adds	r7, #12
 81015c2:	46bd      	mov	sp, r7
 81015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c8:	4770      	bx	lr
 81015ca:	bf00      	nop
 81015cc:	e000e100 	.word	0xe000e100

081015d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81015d0:	b480      	push	{r7}
 81015d2:	b083      	sub	sp, #12
 81015d4:	af00      	add	r7, sp, #0
 81015d6:	4603      	mov	r3, r0
 81015d8:	6039      	str	r1, [r7, #0]
 81015da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81015dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015e0:	2b00      	cmp	r3, #0
 81015e2:	db0a      	blt.n	81015fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81015e4:	683b      	ldr	r3, [r7, #0]
 81015e6:	b2da      	uxtb	r2, r3
 81015e8:	490c      	ldr	r1, [pc, #48]	; (810161c <__NVIC_SetPriority+0x4c>)
 81015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81015ee:	0112      	lsls	r2, r2, #4
 81015f0:	b2d2      	uxtb	r2, r2
 81015f2:	440b      	add	r3, r1
 81015f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81015f8:	e00a      	b.n	8101610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81015fa:	683b      	ldr	r3, [r7, #0]
 81015fc:	b2da      	uxtb	r2, r3
 81015fe:	4908      	ldr	r1, [pc, #32]	; (8101620 <__NVIC_SetPriority+0x50>)
 8101600:	88fb      	ldrh	r3, [r7, #6]
 8101602:	f003 030f 	and.w	r3, r3, #15
 8101606:	3b04      	subs	r3, #4
 8101608:	0112      	lsls	r2, r2, #4
 810160a:	b2d2      	uxtb	r2, r2
 810160c:	440b      	add	r3, r1
 810160e:	761a      	strb	r2, [r3, #24]
}
 8101610:	bf00      	nop
 8101612:	370c      	adds	r7, #12
 8101614:	46bd      	mov	sp, r7
 8101616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810161a:	4770      	bx	lr
 810161c:	e000e100 	.word	0xe000e100
 8101620:	e000ed00 	.word	0xe000ed00

08101624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101624:	b480      	push	{r7}
 8101626:	b089      	sub	sp, #36	; 0x24
 8101628:	af00      	add	r7, sp, #0
 810162a:	60f8      	str	r0, [r7, #12]
 810162c:	60b9      	str	r1, [r7, #8]
 810162e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101630:	68fb      	ldr	r3, [r7, #12]
 8101632:	f003 0307 	and.w	r3, r3, #7
 8101636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101638:	69fb      	ldr	r3, [r7, #28]
 810163a:	f1c3 0307 	rsb	r3, r3, #7
 810163e:	2b04      	cmp	r3, #4
 8101640:	bf28      	it	cs
 8101642:	2304      	movcs	r3, #4
 8101644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101646:	69fb      	ldr	r3, [r7, #28]
 8101648:	3304      	adds	r3, #4
 810164a:	2b06      	cmp	r3, #6
 810164c:	d902      	bls.n	8101654 <NVIC_EncodePriority+0x30>
 810164e:	69fb      	ldr	r3, [r7, #28]
 8101650:	3b03      	subs	r3, #3
 8101652:	e000      	b.n	8101656 <NVIC_EncodePriority+0x32>
 8101654:	2300      	movs	r3, #0
 8101656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101658:	f04f 32ff 	mov.w	r2, #4294967295
 810165c:	69bb      	ldr	r3, [r7, #24]
 810165e:	fa02 f303 	lsl.w	r3, r2, r3
 8101662:	43da      	mvns	r2, r3
 8101664:	68bb      	ldr	r3, [r7, #8]
 8101666:	401a      	ands	r2, r3
 8101668:	697b      	ldr	r3, [r7, #20]
 810166a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810166c:	f04f 31ff 	mov.w	r1, #4294967295
 8101670:	697b      	ldr	r3, [r7, #20]
 8101672:	fa01 f303 	lsl.w	r3, r1, r3
 8101676:	43d9      	mvns	r1, r3
 8101678:	687b      	ldr	r3, [r7, #4]
 810167a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810167c:	4313      	orrs	r3, r2
         );
}
 810167e:	4618      	mov	r0, r3
 8101680:	3724      	adds	r7, #36	; 0x24
 8101682:	46bd      	mov	sp, r7
 8101684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101688:	4770      	bx	lr

0810168a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810168a:	b580      	push	{r7, lr}
 810168c:	b082      	sub	sp, #8
 810168e:	af00      	add	r7, sp, #0
 8101690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101692:	6878      	ldr	r0, [r7, #4]
 8101694:	f7ff ff4c 	bl	8101530 <__NVIC_SetPriorityGrouping>
}
 8101698:	bf00      	nop
 810169a:	3708      	adds	r7, #8
 810169c:	46bd      	mov	sp, r7
 810169e:	bd80      	pop	{r7, pc}

081016a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81016a0:	b580      	push	{r7, lr}
 81016a2:	b086      	sub	sp, #24
 81016a4:	af00      	add	r7, sp, #0
 81016a6:	4603      	mov	r3, r0
 81016a8:	60b9      	str	r1, [r7, #8]
 81016aa:	607a      	str	r2, [r7, #4]
 81016ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81016ae:	f7ff ff63 	bl	8101578 <__NVIC_GetPriorityGrouping>
 81016b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81016b4:	687a      	ldr	r2, [r7, #4]
 81016b6:	68b9      	ldr	r1, [r7, #8]
 81016b8:	6978      	ldr	r0, [r7, #20]
 81016ba:	f7ff ffb3 	bl	8101624 <NVIC_EncodePriority>
 81016be:	4602      	mov	r2, r0
 81016c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81016c4:	4611      	mov	r1, r2
 81016c6:	4618      	mov	r0, r3
 81016c8:	f7ff ff82 	bl	81015d0 <__NVIC_SetPriority>
}
 81016cc:	bf00      	nop
 81016ce:	3718      	adds	r7, #24
 81016d0:	46bd      	mov	sp, r7
 81016d2:	bd80      	pop	{r7, pc}

081016d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81016d4:	b580      	push	{r7, lr}
 81016d6:	b082      	sub	sp, #8
 81016d8:	af00      	add	r7, sp, #0
 81016da:	4603      	mov	r3, r0
 81016dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016e2:	4618      	mov	r0, r3
 81016e4:	f7ff ff56 	bl	8101594 <__NVIC_EnableIRQ>
}
 81016e8:	bf00      	nop
 81016ea:	3708      	adds	r7, #8
 81016ec:	46bd      	mov	sp, r7
 81016ee:	bd80      	pop	{r7, pc}

081016f0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81016f0:	b480      	push	{r7}
 81016f2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81016f4:	4b07      	ldr	r3, [pc, #28]	; (8101714 <HAL_GetCurrentCPUID+0x24>)
 81016f6:	681b      	ldr	r3, [r3, #0]
 81016f8:	091b      	lsrs	r3, r3, #4
 81016fa:	f003 030f 	and.w	r3, r3, #15
 81016fe:	2b07      	cmp	r3, #7
 8101700:	d101      	bne.n	8101706 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101702:	2303      	movs	r3, #3
 8101704:	e000      	b.n	8101708 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101706:	2301      	movs	r3, #1
  }
}
 8101708:	4618      	mov	r0, r3
 810170a:	46bd      	mov	sp, r7
 810170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101710:	4770      	bx	lr
 8101712:	bf00      	nop
 8101714:	e000ed00 	.word	0xe000ed00

08101718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101718:	b480      	push	{r7}
 810171a:	b089      	sub	sp, #36	; 0x24
 810171c:	af00      	add	r7, sp, #0
 810171e:	6078      	str	r0, [r7, #4]
 8101720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101722:	2300      	movs	r3, #0
 8101724:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101726:	4b89      	ldr	r3, [pc, #548]	; (810194c <HAL_GPIO_Init+0x234>)
 8101728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810172a:	e194      	b.n	8101a56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810172c:	683b      	ldr	r3, [r7, #0]
 810172e:	681a      	ldr	r2, [r3, #0]
 8101730:	2101      	movs	r1, #1
 8101732:	69fb      	ldr	r3, [r7, #28]
 8101734:	fa01 f303 	lsl.w	r3, r1, r3
 8101738:	4013      	ands	r3, r2
 810173a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810173c:	693b      	ldr	r3, [r7, #16]
 810173e:	2b00      	cmp	r3, #0
 8101740:	f000 8186 	beq.w	8101a50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101744:	683b      	ldr	r3, [r7, #0]
 8101746:	685b      	ldr	r3, [r3, #4]
 8101748:	2b01      	cmp	r3, #1
 810174a:	d00b      	beq.n	8101764 <HAL_GPIO_Init+0x4c>
 810174c:	683b      	ldr	r3, [r7, #0]
 810174e:	685b      	ldr	r3, [r3, #4]
 8101750:	2b02      	cmp	r3, #2
 8101752:	d007      	beq.n	8101764 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101754:	683b      	ldr	r3, [r7, #0]
 8101756:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8101758:	2b11      	cmp	r3, #17
 810175a:	d003      	beq.n	8101764 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810175c:	683b      	ldr	r3, [r7, #0]
 810175e:	685b      	ldr	r3, [r3, #4]
 8101760:	2b12      	cmp	r3, #18
 8101762:	d130      	bne.n	81017c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101764:	687b      	ldr	r3, [r7, #4]
 8101766:	689b      	ldr	r3, [r3, #8]
 8101768:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810176a:	69fb      	ldr	r3, [r7, #28]
 810176c:	005b      	lsls	r3, r3, #1
 810176e:	2203      	movs	r2, #3
 8101770:	fa02 f303 	lsl.w	r3, r2, r3
 8101774:	43db      	mvns	r3, r3
 8101776:	69ba      	ldr	r2, [r7, #24]
 8101778:	4013      	ands	r3, r2
 810177a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810177c:	683b      	ldr	r3, [r7, #0]
 810177e:	68da      	ldr	r2, [r3, #12]
 8101780:	69fb      	ldr	r3, [r7, #28]
 8101782:	005b      	lsls	r3, r3, #1
 8101784:	fa02 f303 	lsl.w	r3, r2, r3
 8101788:	69ba      	ldr	r2, [r7, #24]
 810178a:	4313      	orrs	r3, r2
 810178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810178e:	687b      	ldr	r3, [r7, #4]
 8101790:	69ba      	ldr	r2, [r7, #24]
 8101792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	685b      	ldr	r3, [r3, #4]
 8101798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810179a:	2201      	movs	r2, #1
 810179c:	69fb      	ldr	r3, [r7, #28]
 810179e:	fa02 f303 	lsl.w	r3, r2, r3
 81017a2:	43db      	mvns	r3, r3
 81017a4:	69ba      	ldr	r2, [r7, #24]
 81017a6:	4013      	ands	r3, r2
 81017a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 81017aa:	683b      	ldr	r3, [r7, #0]
 81017ac:	685b      	ldr	r3, [r3, #4]
 81017ae:	091b      	lsrs	r3, r3, #4
 81017b0:	f003 0201 	and.w	r2, r3, #1
 81017b4:	69fb      	ldr	r3, [r7, #28]
 81017b6:	fa02 f303 	lsl.w	r3, r2, r3
 81017ba:	69ba      	ldr	r2, [r7, #24]
 81017bc:	4313      	orrs	r3, r2
 81017be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81017c0:	687b      	ldr	r3, [r7, #4]
 81017c2:	69ba      	ldr	r2, [r7, #24]
 81017c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	68db      	ldr	r3, [r3, #12]
 81017ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81017cc:	69fb      	ldr	r3, [r7, #28]
 81017ce:	005b      	lsls	r3, r3, #1
 81017d0:	2203      	movs	r2, #3
 81017d2:	fa02 f303 	lsl.w	r3, r2, r3
 81017d6:	43db      	mvns	r3, r3
 81017d8:	69ba      	ldr	r2, [r7, #24]
 81017da:	4013      	ands	r3, r2
 81017dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81017de:	683b      	ldr	r3, [r7, #0]
 81017e0:	689a      	ldr	r2, [r3, #8]
 81017e2:	69fb      	ldr	r3, [r7, #28]
 81017e4:	005b      	lsls	r3, r3, #1
 81017e6:	fa02 f303 	lsl.w	r3, r2, r3
 81017ea:	69ba      	ldr	r2, [r7, #24]
 81017ec:	4313      	orrs	r3, r2
 81017ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81017f0:	687b      	ldr	r3, [r7, #4]
 81017f2:	69ba      	ldr	r2, [r7, #24]
 81017f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81017f6:	683b      	ldr	r3, [r7, #0]
 81017f8:	685b      	ldr	r3, [r3, #4]
 81017fa:	2b02      	cmp	r3, #2
 81017fc:	d003      	beq.n	8101806 <HAL_GPIO_Init+0xee>
 81017fe:	683b      	ldr	r3, [r7, #0]
 8101800:	685b      	ldr	r3, [r3, #4]
 8101802:	2b12      	cmp	r3, #18
 8101804:	d123      	bne.n	810184e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101806:	69fb      	ldr	r3, [r7, #28]
 8101808:	08da      	lsrs	r2, r3, #3
 810180a:	687b      	ldr	r3, [r7, #4]
 810180c:	3208      	adds	r2, #8
 810180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101814:	69fb      	ldr	r3, [r7, #28]
 8101816:	f003 0307 	and.w	r3, r3, #7
 810181a:	009b      	lsls	r3, r3, #2
 810181c:	220f      	movs	r2, #15
 810181e:	fa02 f303 	lsl.w	r3, r2, r3
 8101822:	43db      	mvns	r3, r3
 8101824:	69ba      	ldr	r2, [r7, #24]
 8101826:	4013      	ands	r3, r2
 8101828:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810182a:	683b      	ldr	r3, [r7, #0]
 810182c:	691a      	ldr	r2, [r3, #16]
 810182e:	69fb      	ldr	r3, [r7, #28]
 8101830:	f003 0307 	and.w	r3, r3, #7
 8101834:	009b      	lsls	r3, r3, #2
 8101836:	fa02 f303 	lsl.w	r3, r2, r3
 810183a:	69ba      	ldr	r2, [r7, #24]
 810183c:	4313      	orrs	r3, r2
 810183e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101840:	69fb      	ldr	r3, [r7, #28]
 8101842:	08da      	lsrs	r2, r3, #3
 8101844:	687b      	ldr	r3, [r7, #4]
 8101846:	3208      	adds	r2, #8
 8101848:	69b9      	ldr	r1, [r7, #24]
 810184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810184e:	687b      	ldr	r3, [r7, #4]
 8101850:	681b      	ldr	r3, [r3, #0]
 8101852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101854:	69fb      	ldr	r3, [r7, #28]
 8101856:	005b      	lsls	r3, r3, #1
 8101858:	2203      	movs	r2, #3
 810185a:	fa02 f303 	lsl.w	r3, r2, r3
 810185e:	43db      	mvns	r3, r3
 8101860:	69ba      	ldr	r2, [r7, #24]
 8101862:	4013      	ands	r3, r2
 8101864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101866:	683b      	ldr	r3, [r7, #0]
 8101868:	685b      	ldr	r3, [r3, #4]
 810186a:	f003 0203 	and.w	r2, r3, #3
 810186e:	69fb      	ldr	r3, [r7, #28]
 8101870:	005b      	lsls	r3, r3, #1
 8101872:	fa02 f303 	lsl.w	r3, r2, r3
 8101876:	69ba      	ldr	r2, [r7, #24]
 8101878:	4313      	orrs	r3, r2
 810187a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	69ba      	ldr	r2, [r7, #24]
 8101880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8101882:	683b      	ldr	r3, [r7, #0]
 8101884:	685b      	ldr	r3, [r3, #4]
 8101886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810188a:	2b00      	cmp	r3, #0
 810188c:	f000 80e0 	beq.w	8101a50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101890:	4b2f      	ldr	r3, [pc, #188]	; (8101950 <HAL_GPIO_Init+0x238>)
 8101892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101896:	4a2e      	ldr	r2, [pc, #184]	; (8101950 <HAL_GPIO_Init+0x238>)
 8101898:	f043 0302 	orr.w	r3, r3, #2
 810189c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81018a0:	4b2b      	ldr	r3, [pc, #172]	; (8101950 <HAL_GPIO_Init+0x238>)
 81018a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81018a6:	f003 0302 	and.w	r3, r3, #2
 81018aa:	60fb      	str	r3, [r7, #12]
 81018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81018ae:	4a29      	ldr	r2, [pc, #164]	; (8101954 <HAL_GPIO_Init+0x23c>)
 81018b0:	69fb      	ldr	r3, [r7, #28]
 81018b2:	089b      	lsrs	r3, r3, #2
 81018b4:	3302      	adds	r3, #2
 81018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81018bc:	69fb      	ldr	r3, [r7, #28]
 81018be:	f003 0303 	and.w	r3, r3, #3
 81018c2:	009b      	lsls	r3, r3, #2
 81018c4:	220f      	movs	r2, #15
 81018c6:	fa02 f303 	lsl.w	r3, r2, r3
 81018ca:	43db      	mvns	r3, r3
 81018cc:	69ba      	ldr	r2, [r7, #24]
 81018ce:	4013      	ands	r3, r2
 81018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	4a20      	ldr	r2, [pc, #128]	; (8101958 <HAL_GPIO_Init+0x240>)
 81018d6:	4293      	cmp	r3, r2
 81018d8:	d052      	beq.n	8101980 <HAL_GPIO_Init+0x268>
 81018da:	687b      	ldr	r3, [r7, #4]
 81018dc:	4a1f      	ldr	r2, [pc, #124]	; (810195c <HAL_GPIO_Init+0x244>)
 81018de:	4293      	cmp	r3, r2
 81018e0:	d031      	beq.n	8101946 <HAL_GPIO_Init+0x22e>
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	4a1e      	ldr	r2, [pc, #120]	; (8101960 <HAL_GPIO_Init+0x248>)
 81018e6:	4293      	cmp	r3, r2
 81018e8:	d02b      	beq.n	8101942 <HAL_GPIO_Init+0x22a>
 81018ea:	687b      	ldr	r3, [r7, #4]
 81018ec:	4a1d      	ldr	r2, [pc, #116]	; (8101964 <HAL_GPIO_Init+0x24c>)
 81018ee:	4293      	cmp	r3, r2
 81018f0:	d025      	beq.n	810193e <HAL_GPIO_Init+0x226>
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	4a1c      	ldr	r2, [pc, #112]	; (8101968 <HAL_GPIO_Init+0x250>)
 81018f6:	4293      	cmp	r3, r2
 81018f8:	d01f      	beq.n	810193a <HAL_GPIO_Init+0x222>
 81018fa:	687b      	ldr	r3, [r7, #4]
 81018fc:	4a1b      	ldr	r2, [pc, #108]	; (810196c <HAL_GPIO_Init+0x254>)
 81018fe:	4293      	cmp	r3, r2
 8101900:	d019      	beq.n	8101936 <HAL_GPIO_Init+0x21e>
 8101902:	687b      	ldr	r3, [r7, #4]
 8101904:	4a1a      	ldr	r2, [pc, #104]	; (8101970 <HAL_GPIO_Init+0x258>)
 8101906:	4293      	cmp	r3, r2
 8101908:	d013      	beq.n	8101932 <HAL_GPIO_Init+0x21a>
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	4a19      	ldr	r2, [pc, #100]	; (8101974 <HAL_GPIO_Init+0x25c>)
 810190e:	4293      	cmp	r3, r2
 8101910:	d00d      	beq.n	810192e <HAL_GPIO_Init+0x216>
 8101912:	687b      	ldr	r3, [r7, #4]
 8101914:	4a18      	ldr	r2, [pc, #96]	; (8101978 <HAL_GPIO_Init+0x260>)
 8101916:	4293      	cmp	r3, r2
 8101918:	d007      	beq.n	810192a <HAL_GPIO_Init+0x212>
 810191a:	687b      	ldr	r3, [r7, #4]
 810191c:	4a17      	ldr	r2, [pc, #92]	; (810197c <HAL_GPIO_Init+0x264>)
 810191e:	4293      	cmp	r3, r2
 8101920:	d101      	bne.n	8101926 <HAL_GPIO_Init+0x20e>
 8101922:	2309      	movs	r3, #9
 8101924:	e02d      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 8101926:	230a      	movs	r3, #10
 8101928:	e02b      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 810192a:	2308      	movs	r3, #8
 810192c:	e029      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 810192e:	2307      	movs	r3, #7
 8101930:	e027      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 8101932:	2306      	movs	r3, #6
 8101934:	e025      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 8101936:	2305      	movs	r3, #5
 8101938:	e023      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 810193a:	2304      	movs	r3, #4
 810193c:	e021      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 810193e:	2303      	movs	r3, #3
 8101940:	e01f      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 8101942:	2302      	movs	r3, #2
 8101944:	e01d      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 8101946:	2301      	movs	r3, #1
 8101948:	e01b      	b.n	8101982 <HAL_GPIO_Init+0x26a>
 810194a:	bf00      	nop
 810194c:	580000c0 	.word	0x580000c0
 8101950:	58024400 	.word	0x58024400
 8101954:	58000400 	.word	0x58000400
 8101958:	58020000 	.word	0x58020000
 810195c:	58020400 	.word	0x58020400
 8101960:	58020800 	.word	0x58020800
 8101964:	58020c00 	.word	0x58020c00
 8101968:	58021000 	.word	0x58021000
 810196c:	58021400 	.word	0x58021400
 8101970:	58021800 	.word	0x58021800
 8101974:	58021c00 	.word	0x58021c00
 8101978:	58022000 	.word	0x58022000
 810197c:	58022400 	.word	0x58022400
 8101980:	2300      	movs	r3, #0
 8101982:	69fa      	ldr	r2, [r7, #28]
 8101984:	f002 0203 	and.w	r2, r2, #3
 8101988:	0092      	lsls	r2, r2, #2
 810198a:	4093      	lsls	r3, r2
 810198c:	69ba      	ldr	r2, [r7, #24]
 810198e:	4313      	orrs	r3, r2
 8101990:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101992:	4938      	ldr	r1, [pc, #224]	; (8101a74 <HAL_GPIO_Init+0x35c>)
 8101994:	69fb      	ldr	r3, [r7, #28]
 8101996:	089b      	lsrs	r3, r3, #2
 8101998:	3302      	adds	r3, #2
 810199a:	69ba      	ldr	r2, [r7, #24]
 810199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81019a0:	697b      	ldr	r3, [r7, #20]
 81019a2:	681b      	ldr	r3, [r3, #0]
 81019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81019a6:	693b      	ldr	r3, [r7, #16]
 81019a8:	43db      	mvns	r3, r3
 81019aa:	69ba      	ldr	r2, [r7, #24]
 81019ac:	4013      	ands	r3, r2
 81019ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81019b0:	683b      	ldr	r3, [r7, #0]
 81019b2:	685b      	ldr	r3, [r3, #4]
 81019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81019b8:	2b00      	cmp	r3, #0
 81019ba:	d003      	beq.n	81019c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81019bc:	69ba      	ldr	r2, [r7, #24]
 81019be:	693b      	ldr	r3, [r7, #16]
 81019c0:	4313      	orrs	r3, r2
 81019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81019c4:	697b      	ldr	r3, [r7, #20]
 81019c6:	69ba      	ldr	r2, [r7, #24]
 81019c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81019ca:	697b      	ldr	r3, [r7, #20]
 81019cc:	685b      	ldr	r3, [r3, #4]
 81019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81019d0:	693b      	ldr	r3, [r7, #16]
 81019d2:	43db      	mvns	r3, r3
 81019d4:	69ba      	ldr	r2, [r7, #24]
 81019d6:	4013      	ands	r3, r2
 81019d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81019da:	683b      	ldr	r3, [r7, #0]
 81019dc:	685b      	ldr	r3, [r3, #4]
 81019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81019e2:	2b00      	cmp	r3, #0
 81019e4:	d003      	beq.n	81019ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81019e6:	69ba      	ldr	r2, [r7, #24]
 81019e8:	693b      	ldr	r3, [r7, #16]
 81019ea:	4313      	orrs	r3, r2
 81019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81019ee:	697b      	ldr	r3, [r7, #20]
 81019f0:	69ba      	ldr	r2, [r7, #24]
 81019f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81019f8:	681b      	ldr	r3, [r3, #0]
 81019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81019fc:	693b      	ldr	r3, [r7, #16]
 81019fe:	43db      	mvns	r3, r3
 8101a00:	69ba      	ldr	r2, [r7, #24]
 8101a02:	4013      	ands	r3, r2
 8101a04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8101a06:	683b      	ldr	r3, [r7, #0]
 8101a08:	685b      	ldr	r3, [r3, #4]
 8101a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101a0e:	2b00      	cmp	r3, #0
 8101a10:	d003      	beq.n	8101a1a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8101a12:	69ba      	ldr	r2, [r7, #24]
 8101a14:	693b      	ldr	r3, [r7, #16]
 8101a16:	4313      	orrs	r3, r2
 8101a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101a1e:	69bb      	ldr	r3, [r7, #24]
 8101a20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101a26:	685b      	ldr	r3, [r3, #4]
 8101a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101a2a:	693b      	ldr	r3, [r7, #16]
 8101a2c:	43db      	mvns	r3, r3
 8101a2e:	69ba      	ldr	r2, [r7, #24]
 8101a30:	4013      	ands	r3, r2
 8101a32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8101a34:	683b      	ldr	r3, [r7, #0]
 8101a36:	685b      	ldr	r3, [r3, #4]
 8101a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101a3c:	2b00      	cmp	r3, #0
 8101a3e:	d003      	beq.n	8101a48 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8101a40:	69ba      	ldr	r2, [r7, #24]
 8101a42:	693b      	ldr	r3, [r7, #16]
 8101a44:	4313      	orrs	r3, r2
 8101a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101a4c:	69bb      	ldr	r3, [r7, #24]
 8101a4e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8101a50:	69fb      	ldr	r3, [r7, #28]
 8101a52:	3301      	adds	r3, #1
 8101a54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101a56:	683b      	ldr	r3, [r7, #0]
 8101a58:	681a      	ldr	r2, [r3, #0]
 8101a5a:	69fb      	ldr	r3, [r7, #28]
 8101a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8101a60:	2b00      	cmp	r3, #0
 8101a62:	f47f ae63 	bne.w	810172c <HAL_GPIO_Init+0x14>
  }
}
 8101a66:	bf00      	nop
 8101a68:	3724      	adds	r7, #36	; 0x24
 8101a6a:	46bd      	mov	sp, r7
 8101a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a70:	4770      	bx	lr
 8101a72:	bf00      	nop
 8101a74:	58000400 	.word	0x58000400

08101a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101a78:	b480      	push	{r7}
 8101a7a:	b083      	sub	sp, #12
 8101a7c:	af00      	add	r7, sp, #0
 8101a7e:	6078      	str	r0, [r7, #4]
 8101a80:	460b      	mov	r3, r1
 8101a82:	807b      	strh	r3, [r7, #2]
 8101a84:	4613      	mov	r3, r2
 8101a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101a88:	787b      	ldrb	r3, [r7, #1]
 8101a8a:	2b00      	cmp	r3, #0
 8101a8c:	d003      	beq.n	8101a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101a8e:	887a      	ldrh	r2, [r7, #2]
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101a94:	e003      	b.n	8101a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101a96:	887b      	ldrh	r3, [r7, #2]
 8101a98:	041a      	lsls	r2, r3, #16
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	619a      	str	r2, [r3, #24]
}
 8101a9e:	bf00      	nop
 8101aa0:	370c      	adds	r7, #12
 8101aa2:	46bd      	mov	sp, r7
 8101aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa8:	4770      	bx	lr
	...

08101aac <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101aac:	b480      	push	{r7}
 8101aae:	b083      	sub	sp, #12
 8101ab0:	af00      	add	r7, sp, #0
 8101ab2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101ab4:	4b05      	ldr	r3, [pc, #20]	; (8101acc <HAL_HSEM_ActivateNotification+0x20>)
 8101ab6:	681a      	ldr	r2, [r3, #0]
 8101ab8:	4904      	ldr	r1, [pc, #16]	; (8101acc <HAL_HSEM_ActivateNotification+0x20>)
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	4313      	orrs	r3, r2
 8101abe:	600b      	str	r3, [r1, #0]
#endif
}
 8101ac0:	bf00      	nop
 8101ac2:	370c      	adds	r7, #12
 8101ac4:	46bd      	mov	sp, r7
 8101ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aca:	4770      	bx	lr
 8101acc:	58026510 	.word	0x58026510

08101ad0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8101ad0:	b580      	push	{r7, lr}
 8101ad2:	b082      	sub	sp, #8
 8101ad4:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8101ad6:	4b0a      	ldr	r3, [pc, #40]	; (8101b00 <HAL_HSEM_IRQHandler+0x30>)
 8101ad8:	68db      	ldr	r3, [r3, #12]
 8101ada:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8101adc:	4b08      	ldr	r3, [pc, #32]	; (8101b00 <HAL_HSEM_IRQHandler+0x30>)
 8101ade:	681a      	ldr	r2, [r3, #0]
 8101ae0:	687b      	ldr	r3, [r7, #4]
 8101ae2:	43db      	mvns	r3, r3
 8101ae4:	4906      	ldr	r1, [pc, #24]	; (8101b00 <HAL_HSEM_IRQHandler+0x30>)
 8101ae6:	4013      	ands	r3, r2
 8101ae8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8101aea:	4a05      	ldr	r2, [pc, #20]	; (8101b00 <HAL_HSEM_IRQHandler+0x30>)
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8101af0:	6878      	ldr	r0, [r7, #4]
 8101af2:	f000 f807 	bl	8101b04 <HAL_HSEM_FreeCallback>
}
 8101af6:	bf00      	nop
 8101af8:	3708      	adds	r7, #8
 8101afa:	46bd      	mov	sp, r7
 8101afc:	bd80      	pop	{r7, pc}
 8101afe:	bf00      	nop
 8101b00:	58026510 	.word	0x58026510

08101b04 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8101b04:	b480      	push	{r7}
 8101b06:	b083      	sub	sp, #12
 8101b08:	af00      	add	r7, sp, #0
 8101b0a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8101b0c:	bf00      	nop
 8101b0e:	370c      	adds	r7, #12
 8101b10:	46bd      	mov	sp, r7
 8101b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b16:	4770      	bx	lr

08101b18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101b18:	b580      	push	{r7, lr}
 8101b1a:	b082      	sub	sp, #8
 8101b1c:	af00      	add	r7, sp, #0
 8101b1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101b20:	687b      	ldr	r3, [r7, #4]
 8101b22:	2b00      	cmp	r3, #0
 8101b24:	d101      	bne.n	8101b2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101b26:	2301      	movs	r3, #1
 8101b28:	e081      	b.n	8101c2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101b30:	b2db      	uxtb	r3, r3
 8101b32:	2b00      	cmp	r3, #0
 8101b34:	d106      	bne.n	8101b44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101b36:	687b      	ldr	r3, [r7, #4]
 8101b38:	2200      	movs	r2, #0
 8101b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101b3e:	6878      	ldr	r0, [r7, #4]
 8101b40:	f7fe febc 	bl	81008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101b44:	687b      	ldr	r3, [r7, #4]
 8101b46:	2224      	movs	r2, #36	; 0x24
 8101b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101b4c:	687b      	ldr	r3, [r7, #4]
 8101b4e:	681b      	ldr	r3, [r3, #0]
 8101b50:	681a      	ldr	r2, [r3, #0]
 8101b52:	687b      	ldr	r3, [r7, #4]
 8101b54:	681b      	ldr	r3, [r3, #0]
 8101b56:	f022 0201 	bic.w	r2, r2, #1
 8101b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	685a      	ldr	r2, [r3, #4]
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	681b      	ldr	r3, [r3, #0]
 8101b64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8101b68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	681b      	ldr	r3, [r3, #0]
 8101b6e:	689a      	ldr	r2, [r3, #8]
 8101b70:	687b      	ldr	r3, [r7, #4]
 8101b72:	681b      	ldr	r3, [r3, #0]
 8101b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101b78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	68db      	ldr	r3, [r3, #12]
 8101b7e:	2b01      	cmp	r3, #1
 8101b80:	d107      	bne.n	8101b92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	689a      	ldr	r2, [r3, #8]
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	681b      	ldr	r3, [r3, #0]
 8101b8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8101b8e:	609a      	str	r2, [r3, #8]
 8101b90:	e006      	b.n	8101ba0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101b92:	687b      	ldr	r3, [r7, #4]
 8101b94:	689a      	ldr	r2, [r3, #8]
 8101b96:	687b      	ldr	r3, [r7, #4]
 8101b98:	681b      	ldr	r3, [r3, #0]
 8101b9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8101b9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	68db      	ldr	r3, [r3, #12]
 8101ba4:	2b02      	cmp	r3, #2
 8101ba6:	d104      	bne.n	8101bb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8101ba8:	687b      	ldr	r3, [r7, #4]
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8101bb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	681b      	ldr	r3, [r3, #0]
 8101bb6:	685b      	ldr	r3, [r3, #4]
 8101bb8:	687a      	ldr	r2, [r7, #4]
 8101bba:	6812      	ldr	r2, [r2, #0]
 8101bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101bc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	68da      	ldr	r2, [r3, #12]
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	681b      	ldr	r3, [r3, #0]
 8101bd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8101bd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	691a      	ldr	r2, [r3, #16]
 8101bda:	687b      	ldr	r3, [r7, #4]
 8101bdc:	695b      	ldr	r3, [r3, #20]
 8101bde:	ea42 0103 	orr.w	r1, r2, r3
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	699b      	ldr	r3, [r3, #24]
 8101be6:	021a      	lsls	r2, r3, #8
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	681b      	ldr	r3, [r3, #0]
 8101bec:	430a      	orrs	r2, r1
 8101bee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	69d9      	ldr	r1, [r3, #28]
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	6a1a      	ldr	r2, [r3, #32]
 8101bf8:	687b      	ldr	r3, [r7, #4]
 8101bfa:	681b      	ldr	r3, [r3, #0]
 8101bfc:	430a      	orrs	r2, r1
 8101bfe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101c00:	687b      	ldr	r3, [r7, #4]
 8101c02:	681b      	ldr	r3, [r3, #0]
 8101c04:	681a      	ldr	r2, [r3, #0]
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	f042 0201 	orr.w	r2, r2, #1
 8101c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	2200      	movs	r2, #0
 8101c14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	2220      	movs	r2, #32
 8101c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	2200      	movs	r2, #0
 8101c22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	2200      	movs	r2, #0
 8101c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8101c2c:	2300      	movs	r3, #0
}
 8101c2e:	4618      	mov	r0, r3
 8101c30:	3708      	adds	r7, #8
 8101c32:	46bd      	mov	sp, r7
 8101c34:	bd80      	pop	{r7, pc}
	...

08101c38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101c38:	b580      	push	{r7, lr}
 8101c3a:	b088      	sub	sp, #32
 8101c3c:	af02      	add	r7, sp, #8
 8101c3e:	60f8      	str	r0, [r7, #12]
 8101c40:	4608      	mov	r0, r1
 8101c42:	4611      	mov	r1, r2
 8101c44:	461a      	mov	r2, r3
 8101c46:	4603      	mov	r3, r0
 8101c48:	817b      	strh	r3, [r7, #10]
 8101c4a:	460b      	mov	r3, r1
 8101c4c:	813b      	strh	r3, [r7, #8]
 8101c4e:	4613      	mov	r3, r2
 8101c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101c52:	68fb      	ldr	r3, [r7, #12]
 8101c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101c58:	b2db      	uxtb	r3, r3
 8101c5a:	2b20      	cmp	r3, #32
 8101c5c:	f040 80f9 	bne.w	8101e52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8101c60:	6a3b      	ldr	r3, [r7, #32]
 8101c62:	2b00      	cmp	r3, #0
 8101c64:	d002      	beq.n	8101c6c <HAL_I2C_Mem_Write+0x34>
 8101c66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101c68:	2b00      	cmp	r3, #0
 8101c6a:	d105      	bne.n	8101c78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8101c6c:	68fb      	ldr	r3, [r7, #12]
 8101c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101c72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8101c74:	2301      	movs	r3, #1
 8101c76:	e0ed      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101c78:	68fb      	ldr	r3, [r7, #12]
 8101c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101c7e:	2b01      	cmp	r3, #1
 8101c80:	d101      	bne.n	8101c86 <HAL_I2C_Mem_Write+0x4e>
 8101c82:	2302      	movs	r3, #2
 8101c84:	e0e6      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
 8101c86:	68fb      	ldr	r3, [r7, #12]
 8101c88:	2201      	movs	r2, #1
 8101c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8101c8e:	f7ff fc21 	bl	81014d4 <HAL_GetTick>
 8101c92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8101c94:	697b      	ldr	r3, [r7, #20]
 8101c96:	9300      	str	r3, [sp, #0]
 8101c98:	2319      	movs	r3, #25
 8101c9a:	2201      	movs	r2, #1
 8101c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101ca0:	68f8      	ldr	r0, [r7, #12]
 8101ca2:	f000 fac3 	bl	810222c <I2C_WaitOnFlagUntilTimeout>
 8101ca6:	4603      	mov	r3, r0
 8101ca8:	2b00      	cmp	r3, #0
 8101caa:	d001      	beq.n	8101cb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8101cac:	2301      	movs	r3, #1
 8101cae:	e0d1      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8101cb0:	68fb      	ldr	r3, [r7, #12]
 8101cb2:	2221      	movs	r2, #33	; 0x21
 8101cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8101cb8:	68fb      	ldr	r3, [r7, #12]
 8101cba:	2240      	movs	r2, #64	; 0x40
 8101cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101cc0:	68fb      	ldr	r3, [r7, #12]
 8101cc2:	2200      	movs	r2, #0
 8101cc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8101cc6:	68fb      	ldr	r3, [r7, #12]
 8101cc8:	6a3a      	ldr	r2, [r7, #32]
 8101cca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8101ccc:	68fb      	ldr	r3, [r7, #12]
 8101cce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8101cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8101cd2:	68fb      	ldr	r3, [r7, #12]
 8101cd4:	2200      	movs	r2, #0
 8101cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8101cd8:	88f8      	ldrh	r0, [r7, #6]
 8101cda:	893a      	ldrh	r2, [r7, #8]
 8101cdc:	8979      	ldrh	r1, [r7, #10]
 8101cde:	697b      	ldr	r3, [r7, #20]
 8101ce0:	9301      	str	r3, [sp, #4]
 8101ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ce4:	9300      	str	r3, [sp, #0]
 8101ce6:	4603      	mov	r3, r0
 8101ce8:	68f8      	ldr	r0, [r7, #12]
 8101cea:	f000 f9d3 	bl	8102094 <I2C_RequestMemoryWrite>
 8101cee:	4603      	mov	r3, r0
 8101cf0:	2b00      	cmp	r3, #0
 8101cf2:	d005      	beq.n	8101d00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8101cf4:	68fb      	ldr	r3, [r7, #12]
 8101cf6:	2200      	movs	r2, #0
 8101cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8101cfc:	2301      	movs	r3, #1
 8101cfe:	e0a9      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101d00:	68fb      	ldr	r3, [r7, #12]
 8101d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101d04:	b29b      	uxth	r3, r3
 8101d06:	2bff      	cmp	r3, #255	; 0xff
 8101d08:	d90e      	bls.n	8101d28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8101d0a:	68fb      	ldr	r3, [r7, #12]
 8101d0c:	22ff      	movs	r2, #255	; 0xff
 8101d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8101d10:	68fb      	ldr	r3, [r7, #12]
 8101d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101d14:	b2da      	uxtb	r2, r3
 8101d16:	8979      	ldrh	r1, [r7, #10]
 8101d18:	2300      	movs	r3, #0
 8101d1a:	9300      	str	r3, [sp, #0]
 8101d1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101d20:	68f8      	ldr	r0, [r7, #12]
 8101d22:	f000 fba5 	bl	8102470 <I2C_TransferConfig>
 8101d26:	e00f      	b.n	8101d48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8101d28:	68fb      	ldr	r3, [r7, #12]
 8101d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101d2c:	b29a      	uxth	r2, r3
 8101d2e:	68fb      	ldr	r3, [r7, #12]
 8101d30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8101d32:	68fb      	ldr	r3, [r7, #12]
 8101d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101d36:	b2da      	uxtb	r2, r3
 8101d38:	8979      	ldrh	r1, [r7, #10]
 8101d3a:	2300      	movs	r3, #0
 8101d3c:	9300      	str	r3, [sp, #0]
 8101d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101d42:	68f8      	ldr	r0, [r7, #12]
 8101d44:	f000 fb94 	bl	8102470 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101d48:	697a      	ldr	r2, [r7, #20]
 8101d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8101d4c:	68f8      	ldr	r0, [r7, #12]
 8101d4e:	f000 faad 	bl	81022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8101d52:	4603      	mov	r3, r0
 8101d54:	2b00      	cmp	r3, #0
 8101d56:	d001      	beq.n	8101d5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8101d58:	2301      	movs	r3, #1
 8101d5a:	e07b      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8101d5c:	68fb      	ldr	r3, [r7, #12]
 8101d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d60:	781a      	ldrb	r2, [r3, #0]
 8101d62:	68fb      	ldr	r3, [r7, #12]
 8101d64:	681b      	ldr	r3, [r3, #0]
 8101d66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8101d68:	68fb      	ldr	r3, [r7, #12]
 8101d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d6c:	1c5a      	adds	r2, r3, #1
 8101d6e:	68fb      	ldr	r3, [r7, #12]
 8101d70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8101d72:	68fb      	ldr	r3, [r7, #12]
 8101d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101d76:	b29b      	uxth	r3, r3
 8101d78:	3b01      	subs	r3, #1
 8101d7a:	b29a      	uxth	r2, r3
 8101d7c:	68fb      	ldr	r3, [r7, #12]
 8101d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8101d80:	68fb      	ldr	r3, [r7, #12]
 8101d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101d84:	3b01      	subs	r3, #1
 8101d86:	b29a      	uxth	r2, r3
 8101d88:	68fb      	ldr	r3, [r7, #12]
 8101d8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8101d8c:	68fb      	ldr	r3, [r7, #12]
 8101d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101d90:	b29b      	uxth	r3, r3
 8101d92:	2b00      	cmp	r3, #0
 8101d94:	d034      	beq.n	8101e00 <HAL_I2C_Mem_Write+0x1c8>
 8101d96:	68fb      	ldr	r3, [r7, #12]
 8101d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	d130      	bne.n	8101e00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	9300      	str	r3, [sp, #0]
 8101da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101da4:	2200      	movs	r2, #0
 8101da6:	2180      	movs	r1, #128	; 0x80
 8101da8:	68f8      	ldr	r0, [r7, #12]
 8101daa:	f000 fa3f 	bl	810222c <I2C_WaitOnFlagUntilTimeout>
 8101dae:	4603      	mov	r3, r0
 8101db0:	2b00      	cmp	r3, #0
 8101db2:	d001      	beq.n	8101db8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8101db4:	2301      	movs	r3, #1
 8101db6:	e04d      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101db8:	68fb      	ldr	r3, [r7, #12]
 8101dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101dbc:	b29b      	uxth	r3, r3
 8101dbe:	2bff      	cmp	r3, #255	; 0xff
 8101dc0:	d90e      	bls.n	8101de0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8101dc2:	68fb      	ldr	r3, [r7, #12]
 8101dc4:	22ff      	movs	r2, #255	; 0xff
 8101dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8101dc8:	68fb      	ldr	r3, [r7, #12]
 8101dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101dcc:	b2da      	uxtb	r2, r3
 8101dce:	8979      	ldrh	r1, [r7, #10]
 8101dd0:	2300      	movs	r3, #0
 8101dd2:	9300      	str	r3, [sp, #0]
 8101dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101dd8:	68f8      	ldr	r0, [r7, #12]
 8101dda:	f000 fb49 	bl	8102470 <I2C_TransferConfig>
 8101dde:	e00f      	b.n	8101e00 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8101de0:	68fb      	ldr	r3, [r7, #12]
 8101de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101de4:	b29a      	uxth	r2, r3
 8101de6:	68fb      	ldr	r3, [r7, #12]
 8101de8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8101dea:	68fb      	ldr	r3, [r7, #12]
 8101dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101dee:	b2da      	uxtb	r2, r3
 8101df0:	8979      	ldrh	r1, [r7, #10]
 8101df2:	2300      	movs	r3, #0
 8101df4:	9300      	str	r3, [sp, #0]
 8101df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101dfa:	68f8      	ldr	r0, [r7, #12]
 8101dfc:	f000 fb38 	bl	8102470 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8101e00:	68fb      	ldr	r3, [r7, #12]
 8101e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101e04:	b29b      	uxth	r3, r3
 8101e06:	2b00      	cmp	r3, #0
 8101e08:	d19e      	bne.n	8101d48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8101e0a:	697a      	ldr	r2, [r7, #20]
 8101e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8101e0e:	68f8      	ldr	r0, [r7, #12]
 8101e10:	f000 fa8c 	bl	810232c <I2C_WaitOnSTOPFlagUntilTimeout>
 8101e14:	4603      	mov	r3, r0
 8101e16:	2b00      	cmp	r3, #0
 8101e18:	d001      	beq.n	8101e1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8101e1a:	2301      	movs	r3, #1
 8101e1c:	e01a      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8101e1e:	68fb      	ldr	r3, [r7, #12]
 8101e20:	681b      	ldr	r3, [r3, #0]
 8101e22:	2220      	movs	r2, #32
 8101e24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8101e26:	68fb      	ldr	r3, [r7, #12]
 8101e28:	681b      	ldr	r3, [r3, #0]
 8101e2a:	6859      	ldr	r1, [r3, #4]
 8101e2c:	68fb      	ldr	r3, [r7, #12]
 8101e2e:	681a      	ldr	r2, [r3, #0]
 8101e30:	4b0a      	ldr	r3, [pc, #40]	; (8101e5c <HAL_I2C_Mem_Write+0x224>)
 8101e32:	400b      	ands	r3, r1
 8101e34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8101e36:	68fb      	ldr	r3, [r7, #12]
 8101e38:	2220      	movs	r2, #32
 8101e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8101e3e:	68fb      	ldr	r3, [r7, #12]
 8101e40:	2200      	movs	r2, #0
 8101e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101e46:	68fb      	ldr	r3, [r7, #12]
 8101e48:	2200      	movs	r2, #0
 8101e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8101e4e:	2300      	movs	r3, #0
 8101e50:	e000      	b.n	8101e54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8101e52:	2302      	movs	r3, #2
  }
}
 8101e54:	4618      	mov	r0, r3
 8101e56:	3718      	adds	r7, #24
 8101e58:	46bd      	mov	sp, r7
 8101e5a:	bd80      	pop	{r7, pc}
 8101e5c:	fe00e800 	.word	0xfe00e800

08101e60 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8101e60:	b580      	push	{r7, lr}
 8101e62:	b088      	sub	sp, #32
 8101e64:	af02      	add	r7, sp, #8
 8101e66:	60f8      	str	r0, [r7, #12]
 8101e68:	4608      	mov	r0, r1
 8101e6a:	4611      	mov	r1, r2
 8101e6c:	461a      	mov	r2, r3
 8101e6e:	4603      	mov	r3, r0
 8101e70:	817b      	strh	r3, [r7, #10]
 8101e72:	460b      	mov	r3, r1
 8101e74:	813b      	strh	r3, [r7, #8]
 8101e76:	4613      	mov	r3, r2
 8101e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101e7a:	68fb      	ldr	r3, [r7, #12]
 8101e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8101e80:	b2db      	uxtb	r3, r3
 8101e82:	2b20      	cmp	r3, #32
 8101e84:	f040 80fd 	bne.w	8102082 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8101e88:	6a3b      	ldr	r3, [r7, #32]
 8101e8a:	2b00      	cmp	r3, #0
 8101e8c:	d002      	beq.n	8101e94 <HAL_I2C_Mem_Read+0x34>
 8101e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101e90:	2b00      	cmp	r3, #0
 8101e92:	d105      	bne.n	8101ea0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8101e94:	68fb      	ldr	r3, [r7, #12]
 8101e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8101e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8101e9c:	2301      	movs	r3, #1
 8101e9e:	e0f1      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101ea0:	68fb      	ldr	r3, [r7, #12]
 8101ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8101ea6:	2b01      	cmp	r3, #1
 8101ea8:	d101      	bne.n	8101eae <HAL_I2C_Mem_Read+0x4e>
 8101eaa:	2302      	movs	r3, #2
 8101eac:	e0ea      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
 8101eae:	68fb      	ldr	r3, [r7, #12]
 8101eb0:	2201      	movs	r2, #1
 8101eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8101eb6:	f7ff fb0d 	bl	81014d4 <HAL_GetTick>
 8101eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8101ebc:	697b      	ldr	r3, [r7, #20]
 8101ebe:	9300      	str	r3, [sp, #0]
 8101ec0:	2319      	movs	r3, #25
 8101ec2:	2201      	movs	r2, #1
 8101ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8101ec8:	68f8      	ldr	r0, [r7, #12]
 8101eca:	f000 f9af 	bl	810222c <I2C_WaitOnFlagUntilTimeout>
 8101ece:	4603      	mov	r3, r0
 8101ed0:	2b00      	cmp	r3, #0
 8101ed2:	d001      	beq.n	8101ed8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8101ed4:	2301      	movs	r3, #1
 8101ed6:	e0d5      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8101ed8:	68fb      	ldr	r3, [r7, #12]
 8101eda:	2222      	movs	r2, #34	; 0x22
 8101edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8101ee0:	68fb      	ldr	r3, [r7, #12]
 8101ee2:	2240      	movs	r2, #64	; 0x40
 8101ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101ee8:	68fb      	ldr	r3, [r7, #12]
 8101eea:	2200      	movs	r2, #0
 8101eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8101eee:	68fb      	ldr	r3, [r7, #12]
 8101ef0:	6a3a      	ldr	r2, [r7, #32]
 8101ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8101ef4:	68fb      	ldr	r3, [r7, #12]
 8101ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8101ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8101efa:	68fb      	ldr	r3, [r7, #12]
 8101efc:	2200      	movs	r2, #0
 8101efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8101f00:	88f8      	ldrh	r0, [r7, #6]
 8101f02:	893a      	ldrh	r2, [r7, #8]
 8101f04:	8979      	ldrh	r1, [r7, #10]
 8101f06:	697b      	ldr	r3, [r7, #20]
 8101f08:	9301      	str	r3, [sp, #4]
 8101f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101f0c:	9300      	str	r3, [sp, #0]
 8101f0e:	4603      	mov	r3, r0
 8101f10:	68f8      	ldr	r0, [r7, #12]
 8101f12:	f000 f913 	bl	810213c <I2C_RequestMemoryRead>
 8101f16:	4603      	mov	r3, r0
 8101f18:	2b00      	cmp	r3, #0
 8101f1a:	d005      	beq.n	8101f28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8101f1c:	68fb      	ldr	r3, [r7, #12]
 8101f1e:	2200      	movs	r2, #0
 8101f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8101f24:	2301      	movs	r3, #1
 8101f26:	e0ad      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101f28:	68fb      	ldr	r3, [r7, #12]
 8101f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101f2c:	b29b      	uxth	r3, r3
 8101f2e:	2bff      	cmp	r3, #255	; 0xff
 8101f30:	d90e      	bls.n	8101f50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8101f32:	68fb      	ldr	r3, [r7, #12]
 8101f34:	22ff      	movs	r2, #255	; 0xff
 8101f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8101f38:	68fb      	ldr	r3, [r7, #12]
 8101f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101f3c:	b2da      	uxtb	r2, r3
 8101f3e:	8979      	ldrh	r1, [r7, #10]
 8101f40:	4b52      	ldr	r3, [pc, #328]	; (810208c <HAL_I2C_Mem_Read+0x22c>)
 8101f42:	9300      	str	r3, [sp, #0]
 8101f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8101f48:	68f8      	ldr	r0, [r7, #12]
 8101f4a:	f000 fa91 	bl	8102470 <I2C_TransferConfig>
 8101f4e:	e00f      	b.n	8101f70 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8101f50:	68fb      	ldr	r3, [r7, #12]
 8101f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101f54:	b29a      	uxth	r2, r3
 8101f56:	68fb      	ldr	r3, [r7, #12]
 8101f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8101f5a:	68fb      	ldr	r3, [r7, #12]
 8101f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101f5e:	b2da      	uxtb	r2, r3
 8101f60:	8979      	ldrh	r1, [r7, #10]
 8101f62:	4b4a      	ldr	r3, [pc, #296]	; (810208c <HAL_I2C_Mem_Read+0x22c>)
 8101f64:	9300      	str	r3, [sp, #0]
 8101f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101f6a:	68f8      	ldr	r0, [r7, #12]
 8101f6c:	f000 fa80 	bl	8102470 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8101f70:	697b      	ldr	r3, [r7, #20]
 8101f72:	9300      	str	r3, [sp, #0]
 8101f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101f76:	2200      	movs	r2, #0
 8101f78:	2104      	movs	r1, #4
 8101f7a:	68f8      	ldr	r0, [r7, #12]
 8101f7c:	f000 f956 	bl	810222c <I2C_WaitOnFlagUntilTimeout>
 8101f80:	4603      	mov	r3, r0
 8101f82:	2b00      	cmp	r3, #0
 8101f84:	d001      	beq.n	8101f8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8101f86:	2301      	movs	r3, #1
 8101f88:	e07c      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8101f8a:	68fb      	ldr	r3, [r7, #12]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8101f90:	68fb      	ldr	r3, [r7, #12]
 8101f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101f94:	b2d2      	uxtb	r2, r2
 8101f96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8101f98:	68fb      	ldr	r3, [r7, #12]
 8101f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101f9c:	1c5a      	adds	r2, r3, #1
 8101f9e:	68fb      	ldr	r3, [r7, #12]
 8101fa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8101fa2:	68fb      	ldr	r3, [r7, #12]
 8101fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101fa6:	3b01      	subs	r3, #1
 8101fa8:	b29a      	uxth	r2, r3
 8101faa:	68fb      	ldr	r3, [r7, #12]
 8101fac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8101fae:	68fb      	ldr	r3, [r7, #12]
 8101fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101fb2:	b29b      	uxth	r3, r3
 8101fb4:	3b01      	subs	r3, #1
 8101fb6:	b29a      	uxth	r2, r3
 8101fb8:	68fb      	ldr	r3, [r7, #12]
 8101fba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8101fbc:	68fb      	ldr	r3, [r7, #12]
 8101fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101fc0:	b29b      	uxth	r3, r3
 8101fc2:	2b00      	cmp	r3, #0
 8101fc4:	d034      	beq.n	8102030 <HAL_I2C_Mem_Read+0x1d0>
 8101fc6:	68fb      	ldr	r3, [r7, #12]
 8101fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101fca:	2b00      	cmp	r3, #0
 8101fcc:	d130      	bne.n	8102030 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8101fce:	697b      	ldr	r3, [r7, #20]
 8101fd0:	9300      	str	r3, [sp, #0]
 8101fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101fd4:	2200      	movs	r2, #0
 8101fd6:	2180      	movs	r1, #128	; 0x80
 8101fd8:	68f8      	ldr	r0, [r7, #12]
 8101fda:	f000 f927 	bl	810222c <I2C_WaitOnFlagUntilTimeout>
 8101fde:	4603      	mov	r3, r0
 8101fe0:	2b00      	cmp	r3, #0
 8101fe2:	d001      	beq.n	8101fe8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8101fe4:	2301      	movs	r3, #1
 8101fe6:	e04d      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8101fe8:	68fb      	ldr	r3, [r7, #12]
 8101fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8101fec:	b29b      	uxth	r3, r3
 8101fee:	2bff      	cmp	r3, #255	; 0xff
 8101ff0:	d90e      	bls.n	8102010 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8101ff2:	68fb      	ldr	r3, [r7, #12]
 8101ff4:	22ff      	movs	r2, #255	; 0xff
 8101ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8101ff8:	68fb      	ldr	r3, [r7, #12]
 8101ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8101ffc:	b2da      	uxtb	r2, r3
 8101ffe:	8979      	ldrh	r1, [r7, #10]
 8102000:	2300      	movs	r3, #0
 8102002:	9300      	str	r3, [sp, #0]
 8102004:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102008:	68f8      	ldr	r0, [r7, #12]
 810200a:	f000 fa31 	bl	8102470 <I2C_TransferConfig>
 810200e:	e00f      	b.n	8102030 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102010:	68fb      	ldr	r3, [r7, #12]
 8102012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102014:	b29a      	uxth	r2, r3
 8102016:	68fb      	ldr	r3, [r7, #12]
 8102018:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810201a:	68fb      	ldr	r3, [r7, #12]
 810201c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810201e:	b2da      	uxtb	r2, r3
 8102020:	8979      	ldrh	r1, [r7, #10]
 8102022:	2300      	movs	r3, #0
 8102024:	9300      	str	r3, [sp, #0]
 8102026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810202a:	68f8      	ldr	r0, [r7, #12]
 810202c:	f000 fa20 	bl	8102470 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8102030:	68fb      	ldr	r3, [r7, #12]
 8102032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102034:	b29b      	uxth	r3, r3
 8102036:	2b00      	cmp	r3, #0
 8102038:	d19a      	bne.n	8101f70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810203a:	697a      	ldr	r2, [r7, #20]
 810203c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810203e:	68f8      	ldr	r0, [r7, #12]
 8102040:	f000 f974 	bl	810232c <I2C_WaitOnSTOPFlagUntilTimeout>
 8102044:	4603      	mov	r3, r0
 8102046:	2b00      	cmp	r3, #0
 8102048:	d001      	beq.n	810204e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810204a:	2301      	movs	r3, #1
 810204c:	e01a      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810204e:	68fb      	ldr	r3, [r7, #12]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	2220      	movs	r2, #32
 8102054:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102056:	68fb      	ldr	r3, [r7, #12]
 8102058:	681b      	ldr	r3, [r3, #0]
 810205a:	6859      	ldr	r1, [r3, #4]
 810205c:	68fb      	ldr	r3, [r7, #12]
 810205e:	681a      	ldr	r2, [r3, #0]
 8102060:	4b0b      	ldr	r3, [pc, #44]	; (8102090 <HAL_I2C_Mem_Read+0x230>)
 8102062:	400b      	ands	r3, r1
 8102064:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102066:	68fb      	ldr	r3, [r7, #12]
 8102068:	2220      	movs	r2, #32
 810206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810206e:	68fb      	ldr	r3, [r7, #12]
 8102070:	2200      	movs	r2, #0
 8102072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102076:	68fb      	ldr	r3, [r7, #12]
 8102078:	2200      	movs	r2, #0
 810207a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810207e:	2300      	movs	r3, #0
 8102080:	e000      	b.n	8102084 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102082:	2302      	movs	r3, #2
  }
}
 8102084:	4618      	mov	r0, r3
 8102086:	3718      	adds	r7, #24
 8102088:	46bd      	mov	sp, r7
 810208a:	bd80      	pop	{r7, pc}
 810208c:	80002400 	.word	0x80002400
 8102090:	fe00e800 	.word	0xfe00e800

08102094 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8102094:	b580      	push	{r7, lr}
 8102096:	b086      	sub	sp, #24
 8102098:	af02      	add	r7, sp, #8
 810209a:	60f8      	str	r0, [r7, #12]
 810209c:	4608      	mov	r0, r1
 810209e:	4611      	mov	r1, r2
 81020a0:	461a      	mov	r2, r3
 81020a2:	4603      	mov	r3, r0
 81020a4:	817b      	strh	r3, [r7, #10]
 81020a6:	460b      	mov	r3, r1
 81020a8:	813b      	strh	r3, [r7, #8]
 81020aa:	4613      	mov	r3, r2
 81020ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81020ae:	88fb      	ldrh	r3, [r7, #6]
 81020b0:	b2da      	uxtb	r2, r3
 81020b2:	8979      	ldrh	r1, [r7, #10]
 81020b4:	4b20      	ldr	r3, [pc, #128]	; (8102138 <I2C_RequestMemoryWrite+0xa4>)
 81020b6:	9300      	str	r3, [sp, #0]
 81020b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81020bc:	68f8      	ldr	r0, [r7, #12]
 81020be:	f000 f9d7 	bl	8102470 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81020c2:	69fa      	ldr	r2, [r7, #28]
 81020c4:	69b9      	ldr	r1, [r7, #24]
 81020c6:	68f8      	ldr	r0, [r7, #12]
 81020c8:	f000 f8f0 	bl	81022ac <I2C_WaitOnTXISFlagUntilTimeout>
 81020cc:	4603      	mov	r3, r0
 81020ce:	2b00      	cmp	r3, #0
 81020d0:	d001      	beq.n	81020d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81020d2:	2301      	movs	r3, #1
 81020d4:	e02c      	b.n	8102130 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81020d6:	88fb      	ldrh	r3, [r7, #6]
 81020d8:	2b01      	cmp	r3, #1
 81020da:	d105      	bne.n	81020e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81020dc:	893b      	ldrh	r3, [r7, #8]
 81020de:	b2da      	uxtb	r2, r3
 81020e0:	68fb      	ldr	r3, [r7, #12]
 81020e2:	681b      	ldr	r3, [r3, #0]
 81020e4:	629a      	str	r2, [r3, #40]	; 0x28
 81020e6:	e015      	b.n	8102114 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81020e8:	893b      	ldrh	r3, [r7, #8]
 81020ea:	0a1b      	lsrs	r3, r3, #8
 81020ec:	b29b      	uxth	r3, r3
 81020ee:	b2da      	uxtb	r2, r3
 81020f0:	68fb      	ldr	r3, [r7, #12]
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81020f6:	69fa      	ldr	r2, [r7, #28]
 81020f8:	69b9      	ldr	r1, [r7, #24]
 81020fa:	68f8      	ldr	r0, [r7, #12]
 81020fc:	f000 f8d6 	bl	81022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8102100:	4603      	mov	r3, r0
 8102102:	2b00      	cmp	r3, #0
 8102104:	d001      	beq.n	810210a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102106:	2301      	movs	r3, #1
 8102108:	e012      	b.n	8102130 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810210a:	893b      	ldrh	r3, [r7, #8]
 810210c:	b2da      	uxtb	r2, r3
 810210e:	68fb      	ldr	r3, [r7, #12]
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102114:	69fb      	ldr	r3, [r7, #28]
 8102116:	9300      	str	r3, [sp, #0]
 8102118:	69bb      	ldr	r3, [r7, #24]
 810211a:	2200      	movs	r2, #0
 810211c:	2180      	movs	r1, #128	; 0x80
 810211e:	68f8      	ldr	r0, [r7, #12]
 8102120:	f000 f884 	bl	810222c <I2C_WaitOnFlagUntilTimeout>
 8102124:	4603      	mov	r3, r0
 8102126:	2b00      	cmp	r3, #0
 8102128:	d001      	beq.n	810212e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810212a:	2301      	movs	r3, #1
 810212c:	e000      	b.n	8102130 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810212e:	2300      	movs	r3, #0
}
 8102130:	4618      	mov	r0, r3
 8102132:	3710      	adds	r7, #16
 8102134:	46bd      	mov	sp, r7
 8102136:	bd80      	pop	{r7, pc}
 8102138:	80002000 	.word	0x80002000

0810213c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	b086      	sub	sp, #24
 8102140:	af02      	add	r7, sp, #8
 8102142:	60f8      	str	r0, [r7, #12]
 8102144:	4608      	mov	r0, r1
 8102146:	4611      	mov	r1, r2
 8102148:	461a      	mov	r2, r3
 810214a:	4603      	mov	r3, r0
 810214c:	817b      	strh	r3, [r7, #10]
 810214e:	460b      	mov	r3, r1
 8102150:	813b      	strh	r3, [r7, #8]
 8102152:	4613      	mov	r3, r2
 8102154:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102156:	88fb      	ldrh	r3, [r7, #6]
 8102158:	b2da      	uxtb	r2, r3
 810215a:	8979      	ldrh	r1, [r7, #10]
 810215c:	4b20      	ldr	r3, [pc, #128]	; (81021e0 <I2C_RequestMemoryRead+0xa4>)
 810215e:	9300      	str	r3, [sp, #0]
 8102160:	2300      	movs	r3, #0
 8102162:	68f8      	ldr	r0, [r7, #12]
 8102164:	f000 f984 	bl	8102470 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102168:	69fa      	ldr	r2, [r7, #28]
 810216a:	69b9      	ldr	r1, [r7, #24]
 810216c:	68f8      	ldr	r0, [r7, #12]
 810216e:	f000 f89d 	bl	81022ac <I2C_WaitOnTXISFlagUntilTimeout>
 8102172:	4603      	mov	r3, r0
 8102174:	2b00      	cmp	r3, #0
 8102176:	d001      	beq.n	810217c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102178:	2301      	movs	r3, #1
 810217a:	e02c      	b.n	81021d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 810217c:	88fb      	ldrh	r3, [r7, #6]
 810217e:	2b01      	cmp	r3, #1
 8102180:	d105      	bne.n	810218e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102182:	893b      	ldrh	r3, [r7, #8]
 8102184:	b2da      	uxtb	r2, r3
 8102186:	68fb      	ldr	r3, [r7, #12]
 8102188:	681b      	ldr	r3, [r3, #0]
 810218a:	629a      	str	r2, [r3, #40]	; 0x28
 810218c:	e015      	b.n	81021ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810218e:	893b      	ldrh	r3, [r7, #8]
 8102190:	0a1b      	lsrs	r3, r3, #8
 8102192:	b29b      	uxth	r3, r3
 8102194:	b2da      	uxtb	r2, r3
 8102196:	68fb      	ldr	r3, [r7, #12]
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810219c:	69fa      	ldr	r2, [r7, #28]
 810219e:	69b9      	ldr	r1, [r7, #24]
 81021a0:	68f8      	ldr	r0, [r7, #12]
 81021a2:	f000 f883 	bl	81022ac <I2C_WaitOnTXISFlagUntilTimeout>
 81021a6:	4603      	mov	r3, r0
 81021a8:	2b00      	cmp	r3, #0
 81021aa:	d001      	beq.n	81021b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81021ac:	2301      	movs	r3, #1
 81021ae:	e012      	b.n	81021d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81021b0:	893b      	ldrh	r3, [r7, #8]
 81021b2:	b2da      	uxtb	r2, r3
 81021b4:	68fb      	ldr	r3, [r7, #12]
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81021ba:	69fb      	ldr	r3, [r7, #28]
 81021bc:	9300      	str	r3, [sp, #0]
 81021be:	69bb      	ldr	r3, [r7, #24]
 81021c0:	2200      	movs	r2, #0
 81021c2:	2140      	movs	r1, #64	; 0x40
 81021c4:	68f8      	ldr	r0, [r7, #12]
 81021c6:	f000 f831 	bl	810222c <I2C_WaitOnFlagUntilTimeout>
 81021ca:	4603      	mov	r3, r0
 81021cc:	2b00      	cmp	r3, #0
 81021ce:	d001      	beq.n	81021d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81021d0:	2301      	movs	r3, #1
 81021d2:	e000      	b.n	81021d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81021d4:	2300      	movs	r3, #0
}
 81021d6:	4618      	mov	r0, r3
 81021d8:	3710      	adds	r7, #16
 81021da:	46bd      	mov	sp, r7
 81021dc:	bd80      	pop	{r7, pc}
 81021de:	bf00      	nop
 81021e0:	80002000 	.word	0x80002000

081021e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81021e4:	b480      	push	{r7}
 81021e6:	b083      	sub	sp, #12
 81021e8:	af00      	add	r7, sp, #0
 81021ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81021ec:	687b      	ldr	r3, [r7, #4]
 81021ee:	681b      	ldr	r3, [r3, #0]
 81021f0:	699b      	ldr	r3, [r3, #24]
 81021f2:	f003 0302 	and.w	r3, r3, #2
 81021f6:	2b02      	cmp	r3, #2
 81021f8:	d103      	bne.n	8102202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	681b      	ldr	r3, [r3, #0]
 81021fe:	2200      	movs	r2, #0
 8102200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	681b      	ldr	r3, [r3, #0]
 8102206:	699b      	ldr	r3, [r3, #24]
 8102208:	f003 0301 	and.w	r3, r3, #1
 810220c:	2b01      	cmp	r3, #1
 810220e:	d007      	beq.n	8102220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	699a      	ldr	r2, [r3, #24]
 8102216:	687b      	ldr	r3, [r7, #4]
 8102218:	681b      	ldr	r3, [r3, #0]
 810221a:	f042 0201 	orr.w	r2, r2, #1
 810221e:	619a      	str	r2, [r3, #24]
  }
}
 8102220:	bf00      	nop
 8102222:	370c      	adds	r7, #12
 8102224:	46bd      	mov	sp, r7
 8102226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810222a:	4770      	bx	lr

0810222c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 810222c:	b580      	push	{r7, lr}
 810222e:	b084      	sub	sp, #16
 8102230:	af00      	add	r7, sp, #0
 8102232:	60f8      	str	r0, [r7, #12]
 8102234:	60b9      	str	r1, [r7, #8]
 8102236:	603b      	str	r3, [r7, #0]
 8102238:	4613      	mov	r3, r2
 810223a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 810223c:	e022      	b.n	8102284 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810223e:	683b      	ldr	r3, [r7, #0]
 8102240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102244:	d01e      	beq.n	8102284 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102246:	f7ff f945 	bl	81014d4 <HAL_GetTick>
 810224a:	4602      	mov	r2, r0
 810224c:	69bb      	ldr	r3, [r7, #24]
 810224e:	1ad3      	subs	r3, r2, r3
 8102250:	683a      	ldr	r2, [r7, #0]
 8102252:	429a      	cmp	r2, r3
 8102254:	d302      	bcc.n	810225c <I2C_WaitOnFlagUntilTimeout+0x30>
 8102256:	683b      	ldr	r3, [r7, #0]
 8102258:	2b00      	cmp	r3, #0
 810225a:	d113      	bne.n	8102284 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810225c:	68fb      	ldr	r3, [r7, #12]
 810225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102260:	f043 0220 	orr.w	r2, r3, #32
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102268:	68fb      	ldr	r3, [r7, #12]
 810226a:	2220      	movs	r2, #32
 810226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102270:	68fb      	ldr	r3, [r7, #12]
 8102272:	2200      	movs	r2, #0
 8102274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102278:	68fb      	ldr	r3, [r7, #12]
 810227a:	2200      	movs	r2, #0
 810227c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8102280:	2301      	movs	r3, #1
 8102282:	e00f      	b.n	81022a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102284:	68fb      	ldr	r3, [r7, #12]
 8102286:	681b      	ldr	r3, [r3, #0]
 8102288:	699a      	ldr	r2, [r3, #24]
 810228a:	68bb      	ldr	r3, [r7, #8]
 810228c:	4013      	ands	r3, r2
 810228e:	68ba      	ldr	r2, [r7, #8]
 8102290:	429a      	cmp	r2, r3
 8102292:	bf0c      	ite	eq
 8102294:	2301      	moveq	r3, #1
 8102296:	2300      	movne	r3, #0
 8102298:	b2db      	uxtb	r3, r3
 810229a:	461a      	mov	r2, r3
 810229c:	79fb      	ldrb	r3, [r7, #7]
 810229e:	429a      	cmp	r2, r3
 81022a0:	d0cd      	beq.n	810223e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 81022a2:	2300      	movs	r3, #0
}
 81022a4:	4618      	mov	r0, r3
 81022a6:	3710      	adds	r7, #16
 81022a8:	46bd      	mov	sp, r7
 81022aa:	bd80      	pop	{r7, pc}

081022ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81022ac:	b580      	push	{r7, lr}
 81022ae:	b084      	sub	sp, #16
 81022b0:	af00      	add	r7, sp, #0
 81022b2:	60f8      	str	r0, [r7, #12]
 81022b4:	60b9      	str	r1, [r7, #8]
 81022b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81022b8:	e02c      	b.n	8102314 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 81022ba:	687a      	ldr	r2, [r7, #4]
 81022bc:	68b9      	ldr	r1, [r7, #8]
 81022be:	68f8      	ldr	r0, [r7, #12]
 81022c0:	f000 f870 	bl	81023a4 <I2C_IsAcknowledgeFailed>
 81022c4:	4603      	mov	r3, r0
 81022c6:	2b00      	cmp	r3, #0
 81022c8:	d001      	beq.n	81022ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81022ca:	2301      	movs	r3, #1
 81022cc:	e02a      	b.n	8102324 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81022ce:	68bb      	ldr	r3, [r7, #8]
 81022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81022d4:	d01e      	beq.n	8102314 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81022d6:	f7ff f8fd 	bl	81014d4 <HAL_GetTick>
 81022da:	4602      	mov	r2, r0
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	1ad3      	subs	r3, r2, r3
 81022e0:	68ba      	ldr	r2, [r7, #8]
 81022e2:	429a      	cmp	r2, r3
 81022e4:	d302      	bcc.n	81022ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81022e6:	68bb      	ldr	r3, [r7, #8]
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	d113      	bne.n	8102314 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81022ec:	68fb      	ldr	r3, [r7, #12]
 81022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81022f0:	f043 0220 	orr.w	r2, r3, #32
 81022f4:	68fb      	ldr	r3, [r7, #12]
 81022f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 81022f8:	68fb      	ldr	r3, [r7, #12]
 81022fa:	2220      	movs	r2, #32
 81022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102300:	68fb      	ldr	r3, [r7, #12]
 8102302:	2200      	movs	r2, #0
 8102304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102308:	68fb      	ldr	r3, [r7, #12]
 810230a:	2200      	movs	r2, #0
 810230c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102310:	2301      	movs	r3, #1
 8102312:	e007      	b.n	8102324 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102314:	68fb      	ldr	r3, [r7, #12]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	699b      	ldr	r3, [r3, #24]
 810231a:	f003 0302 	and.w	r3, r3, #2
 810231e:	2b02      	cmp	r3, #2
 8102320:	d1cb      	bne.n	81022ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102322:	2300      	movs	r3, #0
}
 8102324:	4618      	mov	r0, r3
 8102326:	3710      	adds	r7, #16
 8102328:	46bd      	mov	sp, r7
 810232a:	bd80      	pop	{r7, pc}

0810232c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 810232c:	b580      	push	{r7, lr}
 810232e:	b084      	sub	sp, #16
 8102330:	af00      	add	r7, sp, #0
 8102332:	60f8      	str	r0, [r7, #12]
 8102334:	60b9      	str	r1, [r7, #8]
 8102336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102338:	e028      	b.n	810238c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 810233a:	687a      	ldr	r2, [r7, #4]
 810233c:	68b9      	ldr	r1, [r7, #8]
 810233e:	68f8      	ldr	r0, [r7, #12]
 8102340:	f000 f830 	bl	81023a4 <I2C_IsAcknowledgeFailed>
 8102344:	4603      	mov	r3, r0
 8102346:	2b00      	cmp	r3, #0
 8102348:	d001      	beq.n	810234e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 810234a:	2301      	movs	r3, #1
 810234c:	e026      	b.n	810239c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810234e:	f7ff f8c1 	bl	81014d4 <HAL_GetTick>
 8102352:	4602      	mov	r2, r0
 8102354:	687b      	ldr	r3, [r7, #4]
 8102356:	1ad3      	subs	r3, r2, r3
 8102358:	68ba      	ldr	r2, [r7, #8]
 810235a:	429a      	cmp	r2, r3
 810235c:	d302      	bcc.n	8102364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810235e:	68bb      	ldr	r3, [r7, #8]
 8102360:	2b00      	cmp	r3, #0
 8102362:	d113      	bne.n	810238c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102364:	68fb      	ldr	r3, [r7, #12]
 8102366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102368:	f043 0220 	orr.w	r2, r3, #32
 810236c:	68fb      	ldr	r3, [r7, #12]
 810236e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8102370:	68fb      	ldr	r3, [r7, #12]
 8102372:	2220      	movs	r2, #32
 8102374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8102378:	68fb      	ldr	r3, [r7, #12]
 810237a:	2200      	movs	r2, #0
 810237c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102380:	68fb      	ldr	r3, [r7, #12]
 8102382:	2200      	movs	r2, #0
 8102384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8102388:	2301      	movs	r3, #1
 810238a:	e007      	b.n	810239c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810238c:	68fb      	ldr	r3, [r7, #12]
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	699b      	ldr	r3, [r3, #24]
 8102392:	f003 0320 	and.w	r3, r3, #32
 8102396:	2b20      	cmp	r3, #32
 8102398:	d1cf      	bne.n	810233a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 810239a:	2300      	movs	r3, #0
}
 810239c:	4618      	mov	r0, r3
 810239e:	3710      	adds	r7, #16
 81023a0:	46bd      	mov	sp, r7
 81023a2:	bd80      	pop	{r7, pc}

081023a4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81023a4:	b580      	push	{r7, lr}
 81023a6:	b084      	sub	sp, #16
 81023a8:	af00      	add	r7, sp, #0
 81023aa:	60f8      	str	r0, [r7, #12]
 81023ac:	60b9      	str	r1, [r7, #8]
 81023ae:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 81023b0:	68fb      	ldr	r3, [r7, #12]
 81023b2:	681b      	ldr	r3, [r3, #0]
 81023b4:	699b      	ldr	r3, [r3, #24]
 81023b6:	f003 0310 	and.w	r3, r3, #16
 81023ba:	2b10      	cmp	r3, #16
 81023bc:	d151      	bne.n	8102462 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81023be:	e022      	b.n	8102406 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81023c0:	68bb      	ldr	r3, [r7, #8]
 81023c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81023c6:	d01e      	beq.n	8102406 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81023c8:	f7ff f884 	bl	81014d4 <HAL_GetTick>
 81023cc:	4602      	mov	r2, r0
 81023ce:	687b      	ldr	r3, [r7, #4]
 81023d0:	1ad3      	subs	r3, r2, r3
 81023d2:	68ba      	ldr	r2, [r7, #8]
 81023d4:	429a      	cmp	r2, r3
 81023d6:	d302      	bcc.n	81023de <I2C_IsAcknowledgeFailed+0x3a>
 81023d8:	68bb      	ldr	r3, [r7, #8]
 81023da:	2b00      	cmp	r3, #0
 81023dc:	d113      	bne.n	8102406 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 81023de:	68fb      	ldr	r3, [r7, #12]
 81023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81023e2:	f043 0220 	orr.w	r2, r3, #32
 81023e6:	68fb      	ldr	r3, [r7, #12]
 81023e8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 81023ea:	68fb      	ldr	r3, [r7, #12]
 81023ec:	2220      	movs	r2, #32
 81023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 81023f2:	68fb      	ldr	r3, [r7, #12]
 81023f4:	2200      	movs	r2, #0
 81023f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 81023fa:	68fb      	ldr	r3, [r7, #12]
 81023fc:	2200      	movs	r2, #0
 81023fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102402:	2301      	movs	r3, #1
 8102404:	e02e      	b.n	8102464 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102406:	68fb      	ldr	r3, [r7, #12]
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	699b      	ldr	r3, [r3, #24]
 810240c:	f003 0320 	and.w	r3, r3, #32
 8102410:	2b20      	cmp	r3, #32
 8102412:	d1d5      	bne.n	81023c0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102414:	68fb      	ldr	r3, [r7, #12]
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	2210      	movs	r2, #16
 810241a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810241c:	68fb      	ldr	r3, [r7, #12]
 810241e:	681b      	ldr	r3, [r3, #0]
 8102420:	2220      	movs	r2, #32
 8102422:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8102424:	68f8      	ldr	r0, [r7, #12]
 8102426:	f7ff fedd 	bl	81021e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810242a:	68fb      	ldr	r3, [r7, #12]
 810242c:	681b      	ldr	r3, [r3, #0]
 810242e:	6859      	ldr	r1, [r3, #4]
 8102430:	68fb      	ldr	r3, [r7, #12]
 8102432:	681a      	ldr	r2, [r3, #0]
 8102434:	4b0d      	ldr	r3, [pc, #52]	; (810246c <I2C_IsAcknowledgeFailed+0xc8>)
 8102436:	400b      	ands	r3, r1
 8102438:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 810243a:	68fb      	ldr	r3, [r7, #12]
 810243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810243e:	f043 0204 	orr.w	r2, r3, #4
 8102442:	68fb      	ldr	r3, [r7, #12]
 8102444:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8102446:	68fb      	ldr	r3, [r7, #12]
 8102448:	2220      	movs	r2, #32
 810244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810244e:	68fb      	ldr	r3, [r7, #12]
 8102450:	2200      	movs	r2, #0
 8102452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102456:	68fb      	ldr	r3, [r7, #12]
 8102458:	2200      	movs	r2, #0
 810245a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 810245e:	2301      	movs	r3, #1
 8102460:	e000      	b.n	8102464 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8102462:	2300      	movs	r3, #0
}
 8102464:	4618      	mov	r0, r3
 8102466:	3710      	adds	r7, #16
 8102468:	46bd      	mov	sp, r7
 810246a:	bd80      	pop	{r7, pc}
 810246c:	fe00e800 	.word	0xfe00e800

08102470 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8102470:	b480      	push	{r7}
 8102472:	b085      	sub	sp, #20
 8102474:	af00      	add	r7, sp, #0
 8102476:	60f8      	str	r0, [r7, #12]
 8102478:	607b      	str	r3, [r7, #4]
 810247a:	460b      	mov	r3, r1
 810247c:	817b      	strh	r3, [r7, #10]
 810247e:	4613      	mov	r3, r2
 8102480:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8102482:	68fb      	ldr	r3, [r7, #12]
 8102484:	681b      	ldr	r3, [r3, #0]
 8102486:	685a      	ldr	r2, [r3, #4]
 8102488:	69bb      	ldr	r3, [r7, #24]
 810248a:	0d5b      	lsrs	r3, r3, #21
 810248c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8102490:	4b0d      	ldr	r3, [pc, #52]	; (81024c8 <I2C_TransferConfig+0x58>)
 8102492:	430b      	orrs	r3, r1
 8102494:	43db      	mvns	r3, r3
 8102496:	ea02 0103 	and.w	r1, r2, r3
 810249a:	897b      	ldrh	r3, [r7, #10]
 810249c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 81024a0:	7a7b      	ldrb	r3, [r7, #9]
 81024a2:	041b      	lsls	r3, r3, #16
 81024a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 81024a8:	431a      	orrs	r2, r3
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	431a      	orrs	r2, r3
 81024ae:	69bb      	ldr	r3, [r7, #24]
 81024b0:	431a      	orrs	r2, r3
 81024b2:	68fb      	ldr	r3, [r7, #12]
 81024b4:	681b      	ldr	r3, [r3, #0]
 81024b6:	430a      	orrs	r2, r1
 81024b8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 81024ba:	bf00      	nop
 81024bc:	3714      	adds	r7, #20
 81024be:	46bd      	mov	sp, r7
 81024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024c4:	4770      	bx	lr
 81024c6:	bf00      	nop
 81024c8:	03ff63ff 	.word	0x03ff63ff

081024cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81024cc:	b480      	push	{r7}
 81024ce:	b083      	sub	sp, #12
 81024d0:	af00      	add	r7, sp, #0
 81024d2:	6078      	str	r0, [r7, #4]
 81024d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81024dc:	b2db      	uxtb	r3, r3
 81024de:	2b20      	cmp	r3, #32
 81024e0:	d138      	bne.n	8102554 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81024e8:	2b01      	cmp	r3, #1
 81024ea:	d101      	bne.n	81024f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81024ec:	2302      	movs	r3, #2
 81024ee:	e032      	b.n	8102556 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	2201      	movs	r2, #1
 81024f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	2224      	movs	r2, #36	; 0x24
 81024fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102500:	687b      	ldr	r3, [r7, #4]
 8102502:	681b      	ldr	r3, [r3, #0]
 8102504:	681a      	ldr	r2, [r3, #0]
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	681b      	ldr	r3, [r3, #0]
 810250a:	f022 0201 	bic.w	r2, r2, #1
 810250e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	681a      	ldr	r2, [r3, #0]
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 810251e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8102520:	687b      	ldr	r3, [r7, #4]
 8102522:	681b      	ldr	r3, [r3, #0]
 8102524:	6819      	ldr	r1, [r3, #0]
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	683a      	ldr	r2, [r7, #0]
 810252c:	430a      	orrs	r2, r1
 810252e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8102530:	687b      	ldr	r3, [r7, #4]
 8102532:	681b      	ldr	r3, [r3, #0]
 8102534:	681a      	ldr	r2, [r3, #0]
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	f042 0201 	orr.w	r2, r2, #1
 810253e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	2220      	movs	r2, #32
 8102544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	2200      	movs	r2, #0
 810254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8102550:	2300      	movs	r3, #0
 8102552:	e000      	b.n	8102556 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8102554:	2302      	movs	r3, #2
  }
}
 8102556:	4618      	mov	r0, r3
 8102558:	370c      	adds	r7, #12
 810255a:	46bd      	mov	sp, r7
 810255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102560:	4770      	bx	lr

08102562 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8102562:	b480      	push	{r7}
 8102564:	b085      	sub	sp, #20
 8102566:	af00      	add	r7, sp, #0
 8102568:	6078      	str	r0, [r7, #4]
 810256a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102572:	b2db      	uxtb	r3, r3
 8102574:	2b20      	cmp	r3, #32
 8102576:	d139      	bne.n	81025ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810257e:	2b01      	cmp	r3, #1
 8102580:	d101      	bne.n	8102586 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8102582:	2302      	movs	r3, #2
 8102584:	e033      	b.n	81025ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	2201      	movs	r2, #1
 810258a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810258e:	687b      	ldr	r3, [r7, #4]
 8102590:	2224      	movs	r2, #36	; 0x24
 8102592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	681b      	ldr	r3, [r3, #0]
 810259a:	681a      	ldr	r2, [r3, #0]
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	f022 0201 	bic.w	r2, r2, #1
 81025a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	681b      	ldr	r3, [r3, #0]
 81025aa:	681b      	ldr	r3, [r3, #0]
 81025ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81025ae:	68fb      	ldr	r3, [r7, #12]
 81025b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81025b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81025b6:	683b      	ldr	r3, [r7, #0]
 81025b8:	021b      	lsls	r3, r3, #8
 81025ba:	68fa      	ldr	r2, [r7, #12]
 81025bc:	4313      	orrs	r3, r2
 81025be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81025c0:	687b      	ldr	r3, [r7, #4]
 81025c2:	681b      	ldr	r3, [r3, #0]
 81025c4:	68fa      	ldr	r2, [r7, #12]
 81025c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81025c8:	687b      	ldr	r3, [r7, #4]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	681a      	ldr	r2, [r3, #0]
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	f042 0201 	orr.w	r2, r2, #1
 81025d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	2220      	movs	r2, #32
 81025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	2200      	movs	r2, #0
 81025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81025e8:	2300      	movs	r3, #0
 81025ea:	e000      	b.n	81025ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81025ec:	2302      	movs	r3, #2
  }
}
 81025ee:	4618      	mov	r0, r3
 81025f0:	3714      	adds	r7, #20
 81025f2:	46bd      	mov	sp, r7
 81025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025f8:	4770      	bx	lr
	...

081025fc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81025fc:	b580      	push	{r7, lr}
 81025fe:	b084      	sub	sp, #16
 8102600:	af00      	add	r7, sp, #0
 8102602:	60f8      	str	r0, [r7, #12]
 8102604:	460b      	mov	r3, r1
 8102606:	607a      	str	r2, [r7, #4]
 8102608:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810260a:	4b35      	ldr	r3, [pc, #212]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	f023 0201 	bic.w	r2, r3, #1
 8102612:	4933      	ldr	r1, [pc, #204]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102614:	68fb      	ldr	r3, [r7, #12]
 8102616:	4313      	orrs	r3, r2
 8102618:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	2b00      	cmp	r3, #0
 810261e:	d121      	bne.n	8102664 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102620:	f7ff f866 	bl	81016f0 <HAL_GetCurrentCPUID>
 8102624:	4603      	mov	r3, r0
 8102626:	2b03      	cmp	r3, #3
 8102628:	d154      	bne.n	81026d4 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810262a:	4b2d      	ldr	r3, [pc, #180]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810262c:	691b      	ldr	r3, [r3, #16]
 810262e:	4a2c      	ldr	r2, [pc, #176]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102630:	f023 0301 	bic.w	r3, r3, #1
 8102634:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102636:	4b2b      	ldr	r3, [pc, #172]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102638:	691b      	ldr	r3, [r3, #16]
 810263a:	4a2a      	ldr	r2, [pc, #168]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810263c:	f043 0304 	orr.w	r3, r3, #4
 8102640:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102642:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8102646:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810264a:	7afb      	ldrb	r3, [r7, #11]
 810264c:	2b01      	cmp	r3, #1
 810264e:	d101      	bne.n	8102654 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102650:	bf30      	wfi
 8102652:	e000      	b.n	8102656 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102654:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102656:	4b23      	ldr	r3, [pc, #140]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102658:	691b      	ldr	r3, [r3, #16]
 810265a:	4a22      	ldr	r2, [pc, #136]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 810265c:	f023 0304 	bic.w	r3, r3, #4
 8102660:	6113      	str	r3, [r2, #16]
 8102662:	e03a      	b.n	81026da <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	2b01      	cmp	r3, #1
 8102668:	d121      	bne.n	81026ae <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810266a:	f7ff f841 	bl	81016f0 <HAL_GetCurrentCPUID>
 810266e:	4603      	mov	r3, r0
 8102670:	2b01      	cmp	r3, #1
 8102672:	d131      	bne.n	81026d8 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102674:	4b1a      	ldr	r3, [pc, #104]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8102676:	695b      	ldr	r3, [r3, #20]
 8102678:	4a19      	ldr	r2, [pc, #100]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810267a:	f023 0302 	bic.w	r3, r3, #2
 810267e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102680:	4b18      	ldr	r3, [pc, #96]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102682:	691b      	ldr	r3, [r3, #16]
 8102684:	4a17      	ldr	r2, [pc, #92]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8102686:	f043 0304 	orr.w	r3, r3, #4
 810268a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810268c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8102690:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102694:	7afb      	ldrb	r3, [r7, #11]
 8102696:	2b01      	cmp	r3, #1
 8102698:	d101      	bne.n	810269e <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810269a:	bf30      	wfi
 810269c:	e000      	b.n	81026a0 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810269e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81026a0:	4b10      	ldr	r3, [pc, #64]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81026a2:	691b      	ldr	r3, [r3, #16]
 81026a4:	4a0f      	ldr	r2, [pc, #60]	; (81026e4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 81026a6:	f023 0304 	bic.w	r3, r3, #4
 81026aa:	6113      	str	r3, [r2, #16]
 81026ac:	e015      	b.n	81026da <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81026ae:	f7ff f81f 	bl	81016f0 <HAL_GetCurrentCPUID>
 81026b2:	4603      	mov	r3, r0
 81026b4:	2b03      	cmp	r3, #3
 81026b6:	d106      	bne.n	81026c6 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81026b8:	4b09      	ldr	r3, [pc, #36]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81026ba:	691b      	ldr	r3, [r3, #16]
 81026bc:	4a08      	ldr	r2, [pc, #32]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81026be:	f023 0304 	bic.w	r3, r3, #4
 81026c2:	6113      	str	r3, [r2, #16]
 81026c4:	e009      	b.n	81026da <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81026c6:	4b06      	ldr	r3, [pc, #24]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81026c8:	695b      	ldr	r3, [r3, #20]
 81026ca:	4a05      	ldr	r2, [pc, #20]	; (81026e0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81026cc:	f023 0304 	bic.w	r3, r3, #4
 81026d0:	6153      	str	r3, [r2, #20]
 81026d2:	e002      	b.n	81026da <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81026d4:	bf00      	nop
 81026d6:	e000      	b.n	81026da <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 81026d8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81026da:	3710      	adds	r7, #16
 81026dc:	46bd      	mov	sp, r7
 81026de:	bd80      	pop	{r7, pc}
 81026e0:	58024800 	.word	0x58024800
 81026e4:	e000ed00 	.word	0xe000ed00

081026e8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81026e8:	b580      	push	{r7, lr}
 81026ea:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81026ec:	f7ff f800 	bl	81016f0 <HAL_GetCurrentCPUID>
 81026f0:	4603      	mov	r3, r0
 81026f2:	2b03      	cmp	r3, #3
 81026f4:	d101      	bne.n	81026fa <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81026f6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81026f8:	e001      	b.n	81026fe <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81026fa:	bf40      	sev
    __WFE ();
 81026fc:	bf20      	wfe
}
 81026fe:	bf00      	nop
 8102700:	bd80      	pop	{r7, pc}
	...

08102704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102704:	b480      	push	{r7}
 8102706:	b089      	sub	sp, #36	; 0x24
 8102708:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810270a:	4baf      	ldr	r3, [pc, #700]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810270c:	691b      	ldr	r3, [r3, #16]
 810270e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102712:	2b18      	cmp	r3, #24
 8102714:	f200 814e 	bhi.w	81029b4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8102718:	a201      	add	r2, pc, #4	; (adr r2, 8102720 <HAL_RCC_GetSysClockFreq+0x1c>)
 810271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810271e:	bf00      	nop
 8102720:	08102785 	.word	0x08102785
 8102724:	081029b5 	.word	0x081029b5
 8102728:	081029b5 	.word	0x081029b5
 810272c:	081029b5 	.word	0x081029b5
 8102730:	081029b5 	.word	0x081029b5
 8102734:	081029b5 	.word	0x081029b5
 8102738:	081029b5 	.word	0x081029b5
 810273c:	081029b5 	.word	0x081029b5
 8102740:	081027ab 	.word	0x081027ab
 8102744:	081029b5 	.word	0x081029b5
 8102748:	081029b5 	.word	0x081029b5
 810274c:	081029b5 	.word	0x081029b5
 8102750:	081029b5 	.word	0x081029b5
 8102754:	081029b5 	.word	0x081029b5
 8102758:	081029b5 	.word	0x081029b5
 810275c:	081029b5 	.word	0x081029b5
 8102760:	081027b1 	.word	0x081027b1
 8102764:	081029b5 	.word	0x081029b5
 8102768:	081029b5 	.word	0x081029b5
 810276c:	081029b5 	.word	0x081029b5
 8102770:	081029b5 	.word	0x081029b5
 8102774:	081029b5 	.word	0x081029b5
 8102778:	081029b5 	.word	0x081029b5
 810277c:	081029b5 	.word	0x081029b5
 8102780:	081027b7 	.word	0x081027b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102784:	4b90      	ldr	r3, [pc, #576]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	f003 0320 	and.w	r3, r3, #32
 810278c:	2b00      	cmp	r3, #0
 810278e:	d009      	beq.n	81027a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102790:	4b8d      	ldr	r3, [pc, #564]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	08db      	lsrs	r3, r3, #3
 8102796:	f003 0303 	and.w	r3, r3, #3
 810279a:	4a8c      	ldr	r2, [pc, #560]	; (81029cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 810279c:	fa22 f303 	lsr.w	r3, r2, r3
 81027a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81027a2:	e10a      	b.n	81029ba <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81027a4:	4b89      	ldr	r3, [pc, #548]	; (81029cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 81027a6:	61bb      	str	r3, [r7, #24]
    break;
 81027a8:	e107      	b.n	81029ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81027aa:	4b89      	ldr	r3, [pc, #548]	; (81029d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81027ac:	61bb      	str	r3, [r7, #24]
    break;
 81027ae:	e104      	b.n	81029ba <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81027b0:	4b88      	ldr	r3, [pc, #544]	; (81029d4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 81027b2:	61bb      	str	r3, [r7, #24]
    break;
 81027b4:	e101      	b.n	81029ba <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81027b6:	4b84      	ldr	r3, [pc, #528]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027ba:	f003 0303 	and.w	r3, r3, #3
 81027be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81027c0:	4b81      	ldr	r3, [pc, #516]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81027c4:	091b      	lsrs	r3, r3, #4
 81027c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81027ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81027cc:	4b7e      	ldr	r3, [pc, #504]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027d0:	f003 0301 	and.w	r3, r3, #1
 81027d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81027d6:	4b7c      	ldr	r3, [pc, #496]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81027da:	08db      	lsrs	r3, r3, #3
 81027dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81027e0:	68fa      	ldr	r2, [r7, #12]
 81027e2:	fb02 f303 	mul.w	r3, r2, r3
 81027e6:	ee07 3a90 	vmov	s15, r3
 81027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81027f2:	693b      	ldr	r3, [r7, #16]
 81027f4:	2b00      	cmp	r3, #0
 81027f6:	f000 80da 	beq.w	81029ae <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81027fa:	697b      	ldr	r3, [r7, #20]
 81027fc:	2b01      	cmp	r3, #1
 81027fe:	d05a      	beq.n	81028b6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8102800:	2b01      	cmp	r3, #1
 8102802:	d302      	bcc.n	810280a <HAL_RCC_GetSysClockFreq+0x106>
 8102804:	2b02      	cmp	r3, #2
 8102806:	d078      	beq.n	81028fa <HAL_RCC_GetSysClockFreq+0x1f6>
 8102808:	e099      	b.n	810293e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810280a:	4b6f      	ldr	r3, [pc, #444]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810280c:	681b      	ldr	r3, [r3, #0]
 810280e:	f003 0320 	and.w	r3, r3, #32
 8102812:	2b00      	cmp	r3, #0
 8102814:	d02d      	beq.n	8102872 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102816:	4b6c      	ldr	r3, [pc, #432]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	08db      	lsrs	r3, r3, #3
 810281c:	f003 0303 	and.w	r3, r3, #3
 8102820:	4a6a      	ldr	r2, [pc, #424]	; (81029cc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8102822:	fa22 f303 	lsr.w	r3, r2, r3
 8102826:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	ee07 3a90 	vmov	s15, r3
 810282e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102832:	693b      	ldr	r3, [r7, #16]
 8102834:	ee07 3a90 	vmov	s15, r3
 8102838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810283c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102840:	4b61      	ldr	r3, [pc, #388]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102848:	ee07 3a90 	vmov	s15, r3
 810284c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102850:	ed97 6a02 	vldr	s12, [r7, #8]
 8102854:	eddf 5a60 	vldr	s11, [pc, #384]	; 81029d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8102858:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810285c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102860:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102864:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102868:	ee67 7a27 	vmul.f32	s15, s14, s15
 810286c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102870:	e087      	b.n	8102982 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102872:	693b      	ldr	r3, [r7, #16]
 8102874:	ee07 3a90 	vmov	s15, r3
 8102878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810287c:	eddf 6a57 	vldr	s13, [pc, #348]	; 81029dc <HAL_RCC_GetSysClockFreq+0x2d8>
 8102880:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102884:	4b50      	ldr	r3, [pc, #320]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810288c:	ee07 3a90 	vmov	s15, r3
 8102890:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102894:	ed97 6a02 	vldr	s12, [r7, #8]
 8102898:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81029d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 810289c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81028b4:	e065      	b.n	8102982 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81028b6:	693b      	ldr	r3, [r7, #16]
 81028b8:	ee07 3a90 	vmov	s15, r3
 81028bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81028c0:	eddf 6a47 	vldr	s13, [pc, #284]	; 81029e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 81028c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81028c8:	4b3f      	ldr	r3, [pc, #252]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81028cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81028d0:	ee07 3a90 	vmov	s15, r3
 81028d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81028d8:	ed97 6a02 	vldr	s12, [r7, #8]
 81028dc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81029d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 81028e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81028e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81028e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81028ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81028f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81028f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81028f8:	e043      	b.n	8102982 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81028fa:	693b      	ldr	r3, [r7, #16]
 81028fc:	ee07 3a90 	vmov	s15, r3
 8102900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102904:	eddf 6a37 	vldr	s13, [pc, #220]	; 81029e4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8102908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810290c:	4b2e      	ldr	r3, [pc, #184]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102914:	ee07 3a90 	vmov	s15, r3
 8102918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810291c:	ed97 6a02 	vldr	s12, [r7, #8]
 8102920:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81029d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8102924:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102928:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810292c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102930:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102938:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810293c:	e021      	b.n	8102982 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810293e:	693b      	ldr	r3, [r7, #16]
 8102940:	ee07 3a90 	vmov	s15, r3
 8102944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102948:	eddf 6a25 	vldr	s13, [pc, #148]	; 81029e0 <HAL_RCC_GetSysClockFreq+0x2dc>
 810294c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102950:	4b1d      	ldr	r3, [pc, #116]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102958:	ee07 3a90 	vmov	s15, r3
 810295c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102960:	ed97 6a02 	vldr	s12, [r7, #8]
 8102964:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81029d8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8102968:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810296c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102978:	ee67 7a27 	vmul.f32	s15, s14, s15
 810297c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102980:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102982:	4b11      	ldr	r3, [pc, #68]	; (81029c8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8102984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102986:	0a5b      	lsrs	r3, r3, #9
 8102988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810298c:	3301      	adds	r3, #1
 810298e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102990:	683b      	ldr	r3, [r7, #0]
 8102992:	ee07 3a90 	vmov	s15, r3
 8102996:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810299a:	edd7 6a07 	vldr	s13, [r7, #28]
 810299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81029a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81029a6:	ee17 3a90 	vmov	r3, s15
 81029aa:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81029ac:	e005      	b.n	81029ba <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 81029ae:	2300      	movs	r3, #0
 81029b0:	61bb      	str	r3, [r7, #24]
    break;
 81029b2:	e002      	b.n	81029ba <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81029b4:	4b06      	ldr	r3, [pc, #24]	; (81029d0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81029b6:	61bb      	str	r3, [r7, #24]
    break;
 81029b8:	bf00      	nop
  }

  return sysclockfreq;
 81029ba:	69bb      	ldr	r3, [r7, #24]
}
 81029bc:	4618      	mov	r0, r3
 81029be:	3724      	adds	r7, #36	; 0x24
 81029c0:	46bd      	mov	sp, r7
 81029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c6:	4770      	bx	lr
 81029c8:	58024400 	.word	0x58024400
 81029cc:	03d09000 	.word	0x03d09000
 81029d0:	003d0900 	.word	0x003d0900
 81029d4:	007a1200 	.word	0x007a1200
 81029d8:	46000000 	.word	0x46000000
 81029dc:	4c742400 	.word	0x4c742400
 81029e0:	4a742400 	.word	0x4a742400
 81029e4:	4af42400 	.word	0x4af42400

081029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81029e8:	b580      	push	{r7, lr}
 81029ea:	b082      	sub	sp, #8
 81029ec:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81029ee:	f7ff fe89 	bl	8102704 <HAL_RCC_GetSysClockFreq>
 81029f2:	4601      	mov	r1, r0
 81029f4:	4b11      	ldr	r3, [pc, #68]	; (8102a3c <HAL_RCC_GetHCLKFreq+0x54>)
 81029f6:	699b      	ldr	r3, [r3, #24]
 81029f8:	0a1b      	lsrs	r3, r3, #8
 81029fa:	f003 030f 	and.w	r3, r3, #15
 81029fe:	4a10      	ldr	r2, [pc, #64]	; (8102a40 <HAL_RCC_GetHCLKFreq+0x58>)
 8102a00:	5cd3      	ldrb	r3, [r2, r3]
 8102a02:	f003 031f 	and.w	r3, r3, #31
 8102a06:	fa21 f303 	lsr.w	r3, r1, r3
 8102a0a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102a0c:	4b0b      	ldr	r3, [pc, #44]	; (8102a3c <HAL_RCC_GetHCLKFreq+0x54>)
 8102a0e:	699b      	ldr	r3, [r3, #24]
 8102a10:	f003 030f 	and.w	r3, r3, #15
 8102a14:	4a0a      	ldr	r2, [pc, #40]	; (8102a40 <HAL_RCC_GetHCLKFreq+0x58>)
 8102a16:	5cd3      	ldrb	r3, [r2, r3]
 8102a18:	f003 031f 	and.w	r3, r3, #31
 8102a1c:	687a      	ldr	r2, [r7, #4]
 8102a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8102a22:	4a08      	ldr	r2, [pc, #32]	; (8102a44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102a24:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102a26:	4b07      	ldr	r3, [pc, #28]	; (8102a44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102a28:	681b      	ldr	r3, [r3, #0]
 8102a2a:	4a07      	ldr	r2, [pc, #28]	; (8102a48 <HAL_RCC_GetHCLKFreq+0x60>)
 8102a2c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102a2e:	4b05      	ldr	r3, [pc, #20]	; (8102a44 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102a30:	681b      	ldr	r3, [r3, #0]
}
 8102a32:	4618      	mov	r0, r3
 8102a34:	3708      	adds	r7, #8
 8102a36:	46bd      	mov	sp, r7
 8102a38:	bd80      	pop	{r7, pc}
 8102a3a:	bf00      	nop
 8102a3c:	58024400 	.word	0x58024400
 8102a40:	08108a9c 	.word	0x08108a9c
 8102a44:	10000004 	.word	0x10000004
 8102a48:	10000000 	.word	0x10000000

08102a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102a4c:	b580      	push	{r7, lr}
 8102a4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102a50:	f7ff ffca 	bl	81029e8 <HAL_RCC_GetHCLKFreq>
 8102a54:	4601      	mov	r1, r0
 8102a56:	4b06      	ldr	r3, [pc, #24]	; (8102a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102a58:	69db      	ldr	r3, [r3, #28]
 8102a5a:	091b      	lsrs	r3, r3, #4
 8102a5c:	f003 0307 	and.w	r3, r3, #7
 8102a60:	4a04      	ldr	r2, [pc, #16]	; (8102a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102a62:	5cd3      	ldrb	r3, [r2, r3]
 8102a64:	f003 031f 	and.w	r3, r3, #31
 8102a68:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102a6c:	4618      	mov	r0, r3
 8102a6e:	bd80      	pop	{r7, pc}
 8102a70:	58024400 	.word	0x58024400
 8102a74:	08108a9c 	.word	0x08108a9c

08102a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102a78:	b580      	push	{r7, lr}
 8102a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102a7c:	f7ff ffb4 	bl	81029e8 <HAL_RCC_GetHCLKFreq>
 8102a80:	4601      	mov	r1, r0
 8102a82:	4b06      	ldr	r3, [pc, #24]	; (8102a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8102a84:	69db      	ldr	r3, [r3, #28]
 8102a86:	0a1b      	lsrs	r3, r3, #8
 8102a88:	f003 0307 	and.w	r3, r3, #7
 8102a8c:	4a04      	ldr	r2, [pc, #16]	; (8102aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8102a8e:	5cd3      	ldrb	r3, [r2, r3]
 8102a90:	f003 031f 	and.w	r3, r3, #31
 8102a94:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102a98:	4618      	mov	r0, r3
 8102a9a:	bd80      	pop	{r7, pc}
 8102a9c:	58024400 	.word	0x58024400
 8102aa0:	08108a9c 	.word	0x08108a9c

08102aa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8102aa4:	b480      	push	{r7}
 8102aa6:	b083      	sub	sp, #12
 8102aa8:	af00      	add	r7, sp, #0
 8102aaa:	6078      	str	r0, [r7, #4]
 8102aac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	223f      	movs	r2, #63	; 0x3f
 8102ab2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8102ab4:	4b1a      	ldr	r3, [pc, #104]	; (8102b20 <HAL_RCC_GetClockConfig+0x7c>)
 8102ab6:	691b      	ldr	r3, [r3, #16]
 8102ab8:	f003 0207 	and.w	r2, r3, #7
 8102abc:	687b      	ldr	r3, [r7, #4]
 8102abe:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8102ac0:	4b17      	ldr	r3, [pc, #92]	; (8102b20 <HAL_RCC_GetClockConfig+0x7c>)
 8102ac2:	699b      	ldr	r3, [r3, #24]
 8102ac4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8102acc:	4b14      	ldr	r3, [pc, #80]	; (8102b20 <HAL_RCC_GetClockConfig+0x7c>)
 8102ace:	699b      	ldr	r3, [r3, #24]
 8102ad0:	f003 020f 	and.w	r2, r3, #15
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8102ad8:	4b11      	ldr	r3, [pc, #68]	; (8102b20 <HAL_RCC_GetClockConfig+0x7c>)
 8102ada:	699b      	ldr	r3, [r3, #24]
 8102adc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8102ae0:	687b      	ldr	r3, [r7, #4]
 8102ae2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8102ae4:	4b0e      	ldr	r3, [pc, #56]	; (8102b20 <HAL_RCC_GetClockConfig+0x7c>)
 8102ae6:	69db      	ldr	r3, [r3, #28]
 8102ae8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8102aec:	687b      	ldr	r3, [r7, #4]
 8102aee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8102af0:	4b0b      	ldr	r3, [pc, #44]	; (8102b20 <HAL_RCC_GetClockConfig+0x7c>)
 8102af2:	69db      	ldr	r3, [r3, #28]
 8102af4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8102afc:	4b08      	ldr	r3, [pc, #32]	; (8102b20 <HAL_RCC_GetClockConfig+0x7c>)
 8102afe:	6a1b      	ldr	r3, [r3, #32]
 8102b00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8102b04:	687b      	ldr	r3, [r7, #4]
 8102b06:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8102b08:	4b06      	ldr	r3, [pc, #24]	; (8102b24 <HAL_RCC_GetClockConfig+0x80>)
 8102b0a:	681b      	ldr	r3, [r3, #0]
 8102b0c:	f003 020f 	and.w	r2, r3, #15
 8102b10:	683b      	ldr	r3, [r7, #0]
 8102b12:	601a      	str	r2, [r3, #0]
}
 8102b14:	bf00      	nop
 8102b16:	370c      	adds	r7, #12
 8102b18:	46bd      	mov	sp, r7
 8102b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b1e:	4770      	bx	lr
 8102b20:	58024400 	.word	0x58024400
 8102b24:	52002000 	.word	0x52002000

08102b28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102b28:	b580      	push	{r7, lr}
 8102b2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102b2c:	f7ff ff5c 	bl	81029e8 <HAL_RCC_GetHCLKFreq>
 8102b30:	4601      	mov	r1, r0
 8102b32:	4b06      	ldr	r3, [pc, #24]	; (8102b4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102b34:	6a1b      	ldr	r3, [r3, #32]
 8102b36:	091b      	lsrs	r3, r3, #4
 8102b38:	f003 0307 	and.w	r3, r3, #7
 8102b3c:	4a04      	ldr	r2, [pc, #16]	; (8102b50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102b3e:	5cd3      	ldrb	r3, [r2, r3]
 8102b40:	f003 031f 	and.w	r3, r3, #31
 8102b44:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102b48:	4618      	mov	r0, r3
 8102b4a:	bd80      	pop	{r7, pc}
 8102b4c:	58024400 	.word	0x58024400
 8102b50:	08108a9c 	.word	0x08108a9c

08102b54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8102b54:	b480      	push	{r7}
 8102b56:	b089      	sub	sp, #36	; 0x24
 8102b58:	af00      	add	r7, sp, #0
 8102b5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102b5c:	4b9d      	ldr	r3, [pc, #628]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b60:	f003 0303 	and.w	r3, r3, #3
 8102b64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8102b66:	4b9b      	ldr	r3, [pc, #620]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b6a:	0b1b      	lsrs	r3, r3, #12
 8102b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102b70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102b72:	4b98      	ldr	r3, [pc, #608]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b76:	091b      	lsrs	r3, r3, #4
 8102b78:	f003 0301 	and.w	r3, r3, #1
 8102b7c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8102b7e:	4b95      	ldr	r3, [pc, #596]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b82:	08db      	lsrs	r3, r3, #3
 8102b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102b88:	693a      	ldr	r2, [r7, #16]
 8102b8a:	fb02 f303 	mul.w	r3, r2, r3
 8102b8e:	ee07 3a90 	vmov	s15, r3
 8102b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102b9a:	697b      	ldr	r3, [r7, #20]
 8102b9c:	2b00      	cmp	r3, #0
 8102b9e:	f000 810a 	beq.w	8102db6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8102ba2:	69bb      	ldr	r3, [r7, #24]
 8102ba4:	2b01      	cmp	r3, #1
 8102ba6:	d05a      	beq.n	8102c5e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8102ba8:	2b01      	cmp	r3, #1
 8102baa:	d302      	bcc.n	8102bb2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8102bac:	2b02      	cmp	r3, #2
 8102bae:	d078      	beq.n	8102ca2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8102bb0:	e099      	b.n	8102ce6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102bb2:	4b88      	ldr	r3, [pc, #544]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102bb4:	681b      	ldr	r3, [r3, #0]
 8102bb6:	f003 0320 	and.w	r3, r3, #32
 8102bba:	2b00      	cmp	r3, #0
 8102bbc:	d02d      	beq.n	8102c1a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102bbe:	4b85      	ldr	r3, [pc, #532]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	08db      	lsrs	r3, r3, #3
 8102bc4:	f003 0303 	and.w	r3, r3, #3
 8102bc8:	4a83      	ldr	r2, [pc, #524]	; (8102dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8102bca:	fa22 f303 	lsr.w	r3, r2, r3
 8102bce:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102bd0:	68bb      	ldr	r3, [r7, #8]
 8102bd2:	ee07 3a90 	vmov	s15, r3
 8102bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bda:	697b      	ldr	r3, [r7, #20]
 8102bdc:	ee07 3a90 	vmov	s15, r3
 8102be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102be8:	4b7a      	ldr	r3, [pc, #488]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102bf0:	ee07 3a90 	vmov	s15, r3
 8102bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8102bfc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8102ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8102c00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c14:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102c18:	e087      	b.n	8102d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102c1a:	697b      	ldr	r3, [r7, #20]
 8102c1c:	ee07 3a90 	vmov	s15, r3
 8102c20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c24:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8102de0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8102c28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c2c:	4b69      	ldr	r3, [pc, #420]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c34:	ee07 3a90 	vmov	s15, r3
 8102c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c40:	eddf 5a66 	vldr	s11, [pc, #408]	; 8102ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8102c44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102c5c:	e065      	b.n	8102d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102c5e:	697b      	ldr	r3, [r7, #20]
 8102c60:	ee07 3a90 	vmov	s15, r3
 8102c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c68:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8102de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8102c6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c70:	4b58      	ldr	r3, [pc, #352]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c78:	ee07 3a90 	vmov	s15, r3
 8102c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c80:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c84:	eddf 5a55 	vldr	s11, [pc, #340]	; 8102ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8102c88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102ca0:	e043      	b.n	8102d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102ca2:	697b      	ldr	r3, [r7, #20]
 8102ca4:	ee07 3a90 	vmov	s15, r3
 8102ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8102de8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8102cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cb4:	4b47      	ldr	r3, [pc, #284]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cbc:	ee07 3a90 	vmov	s15, r3
 8102cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8102cc8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8102ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8102ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ce0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102ce4:	e021      	b.n	8102d2a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102ce6:	697b      	ldr	r3, [r7, #20]
 8102ce8:	ee07 3a90 	vmov	s15, r3
 8102cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cf0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8102de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8102cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cf8:	4b36      	ldr	r3, [pc, #216]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d00:	ee07 3a90 	vmov	s15, r3
 8102d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d08:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8102ddc <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8102d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102d28:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8102d2a:	4b2a      	ldr	r3, [pc, #168]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102d2e:	0a5b      	lsrs	r3, r3, #9
 8102d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d34:	ee07 3a90 	vmov	s15, r3
 8102d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d50:	ee17 2a90 	vmov	r2, s15
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8102d58:	4b1e      	ldr	r3, [pc, #120]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102d5c:	0c1b      	lsrs	r3, r3, #16
 8102d5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d62:	ee07 3a90 	vmov	s15, r3
 8102d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102d6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d72:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d7e:	ee17 2a90 	vmov	r2, s15
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8102d86:	4b13      	ldr	r3, [pc, #76]	; (8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8102d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102d8a:	0e1b      	lsrs	r3, r3, #24
 8102d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d90:	ee07 3a90 	vmov	s15, r3
 8102d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8102da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102dac:	ee17 2a90 	vmov	r2, s15
 8102db0:	687b      	ldr	r3, [r7, #4]
 8102db2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102db4:	e008      	b.n	8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	2200      	movs	r2, #0
 8102dba:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8102dbc:	687b      	ldr	r3, [r7, #4]
 8102dbe:	2200      	movs	r2, #0
 8102dc0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	2200      	movs	r2, #0
 8102dc6:	609a      	str	r2, [r3, #8]
}
 8102dc8:	bf00      	nop
 8102dca:	3724      	adds	r7, #36	; 0x24
 8102dcc:	46bd      	mov	sp, r7
 8102dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dd2:	4770      	bx	lr
 8102dd4:	58024400 	.word	0x58024400
 8102dd8:	03d09000 	.word	0x03d09000
 8102ddc:	46000000 	.word	0x46000000
 8102de0:	4c742400 	.word	0x4c742400
 8102de4:	4a742400 	.word	0x4a742400
 8102de8:	4af42400 	.word	0x4af42400

08102dec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8102dec:	b480      	push	{r7}
 8102dee:	b089      	sub	sp, #36	; 0x24
 8102df0:	af00      	add	r7, sp, #0
 8102df2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102df4:	4b9d      	ldr	r3, [pc, #628]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102df8:	f003 0303 	and.w	r3, r3, #3
 8102dfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8102dfe:	4b9b      	ldr	r3, [pc, #620]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102e02:	0d1b      	lsrs	r3, r3, #20
 8102e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102e08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8102e0a:	4b98      	ldr	r3, [pc, #608]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e0e:	0a1b      	lsrs	r3, r3, #8
 8102e10:	f003 0301 	and.w	r3, r3, #1
 8102e14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8102e16:	4b95      	ldr	r3, [pc, #596]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102e1a:	08db      	lsrs	r3, r3, #3
 8102e1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102e20:	693a      	ldr	r2, [r7, #16]
 8102e22:	fb02 f303 	mul.w	r3, r2, r3
 8102e26:	ee07 3a90 	vmov	s15, r3
 8102e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102e32:	697b      	ldr	r3, [r7, #20]
 8102e34:	2b00      	cmp	r3, #0
 8102e36:	f000 810a 	beq.w	810304e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8102e3a:	69bb      	ldr	r3, [r7, #24]
 8102e3c:	2b01      	cmp	r3, #1
 8102e3e:	d05a      	beq.n	8102ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8102e40:	2b01      	cmp	r3, #1
 8102e42:	d302      	bcc.n	8102e4a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8102e44:	2b02      	cmp	r3, #2
 8102e46:	d078      	beq.n	8102f3a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8102e48:	e099      	b.n	8102f7e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102e4a:	4b88      	ldr	r3, [pc, #544]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102e4c:	681b      	ldr	r3, [r3, #0]
 8102e4e:	f003 0320 	and.w	r3, r3, #32
 8102e52:	2b00      	cmp	r3, #0
 8102e54:	d02d      	beq.n	8102eb2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102e56:	4b85      	ldr	r3, [pc, #532]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102e58:	681b      	ldr	r3, [r3, #0]
 8102e5a:	08db      	lsrs	r3, r3, #3
 8102e5c:	f003 0303 	and.w	r3, r3, #3
 8102e60:	4a83      	ldr	r2, [pc, #524]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8102e62:	fa22 f303 	lsr.w	r3, r2, r3
 8102e66:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102e68:	68bb      	ldr	r3, [r7, #8]
 8102e6a:	ee07 3a90 	vmov	s15, r3
 8102e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e72:	697b      	ldr	r3, [r7, #20]
 8102e74:	ee07 3a90 	vmov	s15, r3
 8102e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e80:	4b7a      	ldr	r3, [pc, #488]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e88:	ee07 3a90 	vmov	s15, r3
 8102e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e90:	ed97 6a03 	vldr	s12, [r7, #12]
 8102e94:	eddf 5a77 	vldr	s11, [pc, #476]	; 8103074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8102e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102eac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102eb0:	e087      	b.n	8102fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102eb2:	697b      	ldr	r3, [r7, #20]
 8102eb4:	ee07 3a90 	vmov	s15, r3
 8102eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ebc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8103078 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8102ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ec4:	4b69      	ldr	r3, [pc, #420]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ecc:	ee07 3a90 	vmov	s15, r3
 8102ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ed4:	ed97 6a03 	vldr	s12, [r7, #12]
 8102ed8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8103074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8102edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ef0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102ef4:	e065      	b.n	8102fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102ef6:	697b      	ldr	r3, [r7, #20]
 8102ef8:	ee07 3a90 	vmov	s15, r3
 8102efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810307c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8102f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f08:	4b58      	ldr	r3, [pc, #352]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f10:	ee07 3a90 	vmov	s15, r3
 8102f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8103074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8102f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102f38:	e043      	b.n	8102fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102f3a:	697b      	ldr	r3, [r7, #20]
 8102f3c:	ee07 3a90 	vmov	s15, r3
 8102f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8103080 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8102f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f4c:	4b47      	ldr	r3, [pc, #284]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f54:	ee07 3a90 	vmov	s15, r3
 8102f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f60:	eddf 5a44 	vldr	s11, [pc, #272]	; 8103074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8102f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102f7c:	e021      	b.n	8102fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102f7e:	697b      	ldr	r3, [r7, #20]
 8102f80:	ee07 3a90 	vmov	s15, r3
 8102f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f88:	eddf 6a3c 	vldr	s13, [pc, #240]	; 810307c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8102f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f90:	4b36      	ldr	r3, [pc, #216]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f98:	ee07 3a90 	vmov	s15, r3
 8102f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8102fa4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8103074 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8102fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102fc0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8102fc2:	4b2a      	ldr	r3, [pc, #168]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102fc6:	0a5b      	lsrs	r3, r3, #9
 8102fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102fcc:	ee07 3a90 	vmov	s15, r3
 8102fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8102fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102fe8:	ee17 2a90 	vmov	r2, s15
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8102ff0:	4b1e      	ldr	r3, [pc, #120]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ff4:	0c1b      	lsrs	r3, r3, #16
 8102ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102ffa:	ee07 3a90 	vmov	s15, r3
 8102ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103006:	ee37 7a87 	vadd.f32	s14, s15, s14
 810300a:	edd7 6a07 	vldr	s13, [r7, #28]
 810300e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103016:	ee17 2a90 	vmov	r2, s15
 810301a:	687b      	ldr	r3, [r7, #4]
 810301c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810301e:	4b13      	ldr	r3, [pc, #76]	; (810306c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8103020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103022:	0e1b      	lsrs	r3, r3, #24
 8103024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103028:	ee07 3a90 	vmov	s15, r3
 810302c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103038:	edd7 6a07 	vldr	s13, [r7, #28]
 810303c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103044:	ee17 2a90 	vmov	r2, s15
 8103048:	687b      	ldr	r3, [r7, #4]
 810304a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810304c:	e008      	b.n	8103060 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810304e:	687b      	ldr	r3, [r7, #4]
 8103050:	2200      	movs	r2, #0
 8103052:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103054:	687b      	ldr	r3, [r7, #4]
 8103056:	2200      	movs	r2, #0
 8103058:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	2200      	movs	r2, #0
 810305e:	609a      	str	r2, [r3, #8]
}
 8103060:	bf00      	nop
 8103062:	3724      	adds	r7, #36	; 0x24
 8103064:	46bd      	mov	sp, r7
 8103066:	f85d 7b04 	ldr.w	r7, [sp], #4
 810306a:	4770      	bx	lr
 810306c:	58024400 	.word	0x58024400
 8103070:	03d09000 	.word	0x03d09000
 8103074:	46000000 	.word	0x46000000
 8103078:	4c742400 	.word	0x4c742400
 810307c:	4a742400 	.word	0x4a742400
 8103080:	4af42400 	.word	0x4af42400

08103084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103084:	b580      	push	{r7, lr}
 8103086:	b082      	sub	sp, #8
 8103088:	af00      	add	r7, sp, #0
 810308a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	2b00      	cmp	r3, #0
 8103090:	d101      	bne.n	8103096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103092:	2301      	movs	r3, #1
 8103094:	e049      	b.n	810312a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810309c:	b2db      	uxtb	r3, r3
 810309e:	2b00      	cmp	r3, #0
 81030a0:	d106      	bne.n	81030b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	2200      	movs	r2, #0
 81030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81030aa:	6878      	ldr	r0, [r7, #4]
 81030ac:	f7fe f860 	bl	8101170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	2202      	movs	r2, #2
 81030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	681a      	ldr	r2, [r3, #0]
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	3304      	adds	r3, #4
 81030c0:	4619      	mov	r1, r3
 81030c2:	4610      	mov	r0, r2
 81030c4:	f000 fcc8 	bl	8103a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	2201      	movs	r2, #1
 81030cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81030d0:	687b      	ldr	r3, [r7, #4]
 81030d2:	2201      	movs	r2, #1
 81030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	2201      	movs	r2, #1
 81030dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	2201      	movs	r2, #1
 81030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	2201      	movs	r2, #1
 81030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81030f0:	687b      	ldr	r3, [r7, #4]
 81030f2:	2201      	movs	r2, #1
 81030f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	2201      	movs	r2, #1
 81030fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103100:	687b      	ldr	r3, [r7, #4]
 8103102:	2201      	movs	r2, #1
 8103104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103108:	687b      	ldr	r3, [r7, #4]
 810310a:	2201      	movs	r2, #1
 810310c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	2201      	movs	r2, #1
 8103114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	2201      	movs	r2, #1
 810311c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	2201      	movs	r2, #1
 8103124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103128:	2300      	movs	r3, #0
}
 810312a:	4618      	mov	r0, r3
 810312c:	3708      	adds	r7, #8
 810312e:	46bd      	mov	sp, r7
 8103130:	bd80      	pop	{r7, pc}
	...

08103134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103134:	b480      	push	{r7}
 8103136:	b085      	sub	sp, #20
 8103138:	af00      	add	r7, sp, #0
 810313a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103142:	b2db      	uxtb	r3, r3
 8103144:	2b01      	cmp	r3, #1
 8103146:	d001      	beq.n	810314c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103148:	2301      	movs	r3, #1
 810314a:	e021      	b.n	8103190 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	2202      	movs	r2, #2
 8103150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	681b      	ldr	r3, [r3, #0]
 8103158:	68da      	ldr	r2, [r3, #12]
 810315a:	687b      	ldr	r3, [r7, #4]
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	f042 0201 	orr.w	r2, r2, #1
 8103162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	689a      	ldr	r2, [r3, #8]
 810316a:	4b0c      	ldr	r3, [pc, #48]	; (810319c <HAL_TIM_Base_Start_IT+0x68>)
 810316c:	4013      	ands	r3, r2
 810316e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103170:	68fb      	ldr	r3, [r7, #12]
 8103172:	2b06      	cmp	r3, #6
 8103174:	d00b      	beq.n	810318e <HAL_TIM_Base_Start_IT+0x5a>
 8103176:	68fb      	ldr	r3, [r7, #12]
 8103178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810317c:	d007      	beq.n	810318e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	681a      	ldr	r2, [r3, #0]
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	f042 0201 	orr.w	r2, r2, #1
 810318c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810318e:	2300      	movs	r3, #0
}
 8103190:	4618      	mov	r0, r3
 8103192:	3714      	adds	r7, #20
 8103194:	46bd      	mov	sp, r7
 8103196:	f85d 7b04 	ldr.w	r7, [sp], #4
 810319a:	4770      	bx	lr
 810319c:	00010007 	.word	0x00010007

081031a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81031a0:	b580      	push	{r7, lr}
 81031a2:	b082      	sub	sp, #8
 81031a4:	af00      	add	r7, sp, #0
 81031a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	2b00      	cmp	r3, #0
 81031ac:	d101      	bne.n	81031b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81031ae:	2301      	movs	r3, #1
 81031b0:	e049      	b.n	8103246 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81031b8:	b2db      	uxtb	r3, r3
 81031ba:	2b00      	cmp	r3, #0
 81031bc:	d106      	bne.n	81031cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81031be:	687b      	ldr	r3, [r7, #4]
 81031c0:	2200      	movs	r2, #0
 81031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81031c6:	6878      	ldr	r0, [r7, #4]
 81031c8:	f000 f841 	bl	810324e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	2202      	movs	r2, #2
 81031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	681a      	ldr	r2, [r3, #0]
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	3304      	adds	r3, #4
 81031dc:	4619      	mov	r1, r3
 81031de:	4610      	mov	r0, r2
 81031e0:	f000 fc3a 	bl	8103a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	2201      	movs	r2, #1
 81031e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	2201      	movs	r2, #1
 81031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	2201      	movs	r2, #1
 81031f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	2201      	movs	r2, #1
 8103200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	2201      	movs	r2, #1
 8103208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	2201      	movs	r2, #1
 8103210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	2201      	movs	r2, #1
 8103218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810321c:	687b      	ldr	r3, [r7, #4]
 810321e:	2201      	movs	r2, #1
 8103220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	2201      	movs	r2, #1
 8103228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	2201      	movs	r2, #1
 8103230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	2201      	movs	r2, #1
 8103238:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	2201      	movs	r2, #1
 8103240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103244:	2300      	movs	r3, #0
}
 8103246:	4618      	mov	r0, r3
 8103248:	3708      	adds	r7, #8
 810324a:	46bd      	mov	sp, r7
 810324c:	bd80      	pop	{r7, pc}

0810324e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 810324e:	b480      	push	{r7}
 8103250:	b083      	sub	sp, #12
 8103252:	af00      	add	r7, sp, #0
 8103254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8103256:	bf00      	nop
 8103258:	370c      	adds	r7, #12
 810325a:	46bd      	mov	sp, r7
 810325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103260:	4770      	bx	lr
	...

08103264 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8103264:	b580      	push	{r7, lr}
 8103266:	b084      	sub	sp, #16
 8103268:	af00      	add	r7, sp, #0
 810326a:	6078      	str	r0, [r7, #4]
 810326c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 810326e:	683b      	ldr	r3, [r7, #0]
 8103270:	2b00      	cmp	r3, #0
 8103272:	d109      	bne.n	8103288 <HAL_TIM_PWM_Start+0x24>
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810327a:	b2db      	uxtb	r3, r3
 810327c:	2b01      	cmp	r3, #1
 810327e:	bf14      	ite	ne
 8103280:	2301      	movne	r3, #1
 8103282:	2300      	moveq	r3, #0
 8103284:	b2db      	uxtb	r3, r3
 8103286:	e03c      	b.n	8103302 <HAL_TIM_PWM_Start+0x9e>
 8103288:	683b      	ldr	r3, [r7, #0]
 810328a:	2b04      	cmp	r3, #4
 810328c:	d109      	bne.n	81032a2 <HAL_TIM_PWM_Start+0x3e>
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8103294:	b2db      	uxtb	r3, r3
 8103296:	2b01      	cmp	r3, #1
 8103298:	bf14      	ite	ne
 810329a:	2301      	movne	r3, #1
 810329c:	2300      	moveq	r3, #0
 810329e:	b2db      	uxtb	r3, r3
 81032a0:	e02f      	b.n	8103302 <HAL_TIM_PWM_Start+0x9e>
 81032a2:	683b      	ldr	r3, [r7, #0]
 81032a4:	2b08      	cmp	r3, #8
 81032a6:	d109      	bne.n	81032bc <HAL_TIM_PWM_Start+0x58>
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81032ae:	b2db      	uxtb	r3, r3
 81032b0:	2b01      	cmp	r3, #1
 81032b2:	bf14      	ite	ne
 81032b4:	2301      	movne	r3, #1
 81032b6:	2300      	moveq	r3, #0
 81032b8:	b2db      	uxtb	r3, r3
 81032ba:	e022      	b.n	8103302 <HAL_TIM_PWM_Start+0x9e>
 81032bc:	683b      	ldr	r3, [r7, #0]
 81032be:	2b0c      	cmp	r3, #12
 81032c0:	d109      	bne.n	81032d6 <HAL_TIM_PWM_Start+0x72>
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81032c8:	b2db      	uxtb	r3, r3
 81032ca:	2b01      	cmp	r3, #1
 81032cc:	bf14      	ite	ne
 81032ce:	2301      	movne	r3, #1
 81032d0:	2300      	moveq	r3, #0
 81032d2:	b2db      	uxtb	r3, r3
 81032d4:	e015      	b.n	8103302 <HAL_TIM_PWM_Start+0x9e>
 81032d6:	683b      	ldr	r3, [r7, #0]
 81032d8:	2b10      	cmp	r3, #16
 81032da:	d109      	bne.n	81032f0 <HAL_TIM_PWM_Start+0x8c>
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81032e2:	b2db      	uxtb	r3, r3
 81032e4:	2b01      	cmp	r3, #1
 81032e6:	bf14      	ite	ne
 81032e8:	2301      	movne	r3, #1
 81032ea:	2300      	moveq	r3, #0
 81032ec:	b2db      	uxtb	r3, r3
 81032ee:	e008      	b.n	8103302 <HAL_TIM_PWM_Start+0x9e>
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81032f6:	b2db      	uxtb	r3, r3
 81032f8:	2b01      	cmp	r3, #1
 81032fa:	bf14      	ite	ne
 81032fc:	2301      	movne	r3, #1
 81032fe:	2300      	moveq	r3, #0
 8103300:	b2db      	uxtb	r3, r3
 8103302:	2b00      	cmp	r3, #0
 8103304:	d001      	beq.n	810330a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8103306:	2301      	movs	r3, #1
 8103308:	e06e      	b.n	81033e8 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810330a:	683b      	ldr	r3, [r7, #0]
 810330c:	2b00      	cmp	r3, #0
 810330e:	d104      	bne.n	810331a <HAL_TIM_PWM_Start+0xb6>
 8103310:	687b      	ldr	r3, [r7, #4]
 8103312:	2202      	movs	r2, #2
 8103314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103318:	e023      	b.n	8103362 <HAL_TIM_PWM_Start+0xfe>
 810331a:	683b      	ldr	r3, [r7, #0]
 810331c:	2b04      	cmp	r3, #4
 810331e:	d104      	bne.n	810332a <HAL_TIM_PWM_Start+0xc6>
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	2202      	movs	r2, #2
 8103324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103328:	e01b      	b.n	8103362 <HAL_TIM_PWM_Start+0xfe>
 810332a:	683b      	ldr	r3, [r7, #0]
 810332c:	2b08      	cmp	r3, #8
 810332e:	d104      	bne.n	810333a <HAL_TIM_PWM_Start+0xd6>
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	2202      	movs	r2, #2
 8103334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103338:	e013      	b.n	8103362 <HAL_TIM_PWM_Start+0xfe>
 810333a:	683b      	ldr	r3, [r7, #0]
 810333c:	2b0c      	cmp	r3, #12
 810333e:	d104      	bne.n	810334a <HAL_TIM_PWM_Start+0xe6>
 8103340:	687b      	ldr	r3, [r7, #4]
 8103342:	2202      	movs	r2, #2
 8103344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103348:	e00b      	b.n	8103362 <HAL_TIM_PWM_Start+0xfe>
 810334a:	683b      	ldr	r3, [r7, #0]
 810334c:	2b10      	cmp	r3, #16
 810334e:	d104      	bne.n	810335a <HAL_TIM_PWM_Start+0xf6>
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	2202      	movs	r2, #2
 8103354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103358:	e003      	b.n	8103362 <HAL_TIM_PWM_Start+0xfe>
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	2202      	movs	r2, #2
 810335e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	681b      	ldr	r3, [r3, #0]
 8103366:	2201      	movs	r2, #1
 8103368:	6839      	ldr	r1, [r7, #0]
 810336a:	4618      	mov	r0, r3
 810336c:	f000 ff78 	bl	8104260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	681b      	ldr	r3, [r3, #0]
 8103374:	4a1e      	ldr	r2, [pc, #120]	; (81033f0 <HAL_TIM_PWM_Start+0x18c>)
 8103376:	4293      	cmp	r3, r2
 8103378:	d013      	beq.n	81033a2 <HAL_TIM_PWM_Start+0x13e>
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	4a1d      	ldr	r2, [pc, #116]	; (81033f4 <HAL_TIM_PWM_Start+0x190>)
 8103380:	4293      	cmp	r3, r2
 8103382:	d00e      	beq.n	81033a2 <HAL_TIM_PWM_Start+0x13e>
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	681b      	ldr	r3, [r3, #0]
 8103388:	4a1b      	ldr	r2, [pc, #108]	; (81033f8 <HAL_TIM_PWM_Start+0x194>)
 810338a:	4293      	cmp	r3, r2
 810338c:	d009      	beq.n	81033a2 <HAL_TIM_PWM_Start+0x13e>
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	681b      	ldr	r3, [r3, #0]
 8103392:	4a1a      	ldr	r2, [pc, #104]	; (81033fc <HAL_TIM_PWM_Start+0x198>)
 8103394:	4293      	cmp	r3, r2
 8103396:	d004      	beq.n	81033a2 <HAL_TIM_PWM_Start+0x13e>
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	4a18      	ldr	r2, [pc, #96]	; (8103400 <HAL_TIM_PWM_Start+0x19c>)
 810339e:	4293      	cmp	r3, r2
 81033a0:	d101      	bne.n	81033a6 <HAL_TIM_PWM_Start+0x142>
 81033a2:	2301      	movs	r3, #1
 81033a4:	e000      	b.n	81033a8 <HAL_TIM_PWM_Start+0x144>
 81033a6:	2300      	movs	r3, #0
 81033a8:	2b00      	cmp	r3, #0
 81033aa:	d007      	beq.n	81033bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 81033ac:	687b      	ldr	r3, [r7, #4]
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81033ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	689a      	ldr	r2, [r3, #8]
 81033c2:	4b10      	ldr	r3, [pc, #64]	; (8103404 <HAL_TIM_PWM_Start+0x1a0>)
 81033c4:	4013      	ands	r3, r2
 81033c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81033c8:	68fb      	ldr	r3, [r7, #12]
 81033ca:	2b06      	cmp	r3, #6
 81033cc:	d00b      	beq.n	81033e6 <HAL_TIM_PWM_Start+0x182>
 81033ce:	68fb      	ldr	r3, [r7, #12]
 81033d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81033d4:	d007      	beq.n	81033e6 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	681a      	ldr	r2, [r3, #0]
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	681b      	ldr	r3, [r3, #0]
 81033e0:	f042 0201 	orr.w	r2, r2, #1
 81033e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81033e6:	2300      	movs	r3, #0
}
 81033e8:	4618      	mov	r0, r3
 81033ea:	3710      	adds	r7, #16
 81033ec:	46bd      	mov	sp, r7
 81033ee:	bd80      	pop	{r7, pc}
 81033f0:	40010000 	.word	0x40010000
 81033f4:	40010400 	.word	0x40010400
 81033f8:	40014000 	.word	0x40014000
 81033fc:	40014400 	.word	0x40014400
 8103400:	40014800 	.word	0x40014800
 8103404:	00010007 	.word	0x00010007

08103408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103408:	b580      	push	{r7, lr}
 810340a:	b082      	sub	sp, #8
 810340c:	af00      	add	r7, sp, #0
 810340e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8103410:	687b      	ldr	r3, [r7, #4]
 8103412:	681b      	ldr	r3, [r3, #0]
 8103414:	691b      	ldr	r3, [r3, #16]
 8103416:	f003 0302 	and.w	r3, r3, #2
 810341a:	2b02      	cmp	r3, #2
 810341c:	d122      	bne.n	8103464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	68db      	ldr	r3, [r3, #12]
 8103424:	f003 0302 	and.w	r3, r3, #2
 8103428:	2b02      	cmp	r3, #2
 810342a:	d11b      	bne.n	8103464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	681b      	ldr	r3, [r3, #0]
 8103430:	f06f 0202 	mvn.w	r2, #2
 8103434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	2201      	movs	r2, #1
 810343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	699b      	ldr	r3, [r3, #24]
 8103442:	f003 0303 	and.w	r3, r3, #3
 8103446:	2b00      	cmp	r3, #0
 8103448:	d003      	beq.n	8103452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810344a:	6878      	ldr	r0, [r7, #4]
 810344c:	f000 fae6 	bl	8103a1c <HAL_TIM_IC_CaptureCallback>
 8103450:	e005      	b.n	810345e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103452:	6878      	ldr	r0, [r7, #4]
 8103454:	f000 fad8 	bl	8103a08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103458:	6878      	ldr	r0, [r7, #4]
 810345a:	f000 fae9 	bl	8103a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810345e:	687b      	ldr	r3, [r7, #4]
 8103460:	2200      	movs	r2, #0
 8103462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	691b      	ldr	r3, [r3, #16]
 810346a:	f003 0304 	and.w	r3, r3, #4
 810346e:	2b04      	cmp	r3, #4
 8103470:	d122      	bne.n	81034b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	681b      	ldr	r3, [r3, #0]
 8103476:	68db      	ldr	r3, [r3, #12]
 8103478:	f003 0304 	and.w	r3, r3, #4
 810347c:	2b04      	cmp	r3, #4
 810347e:	d11b      	bne.n	81034b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	f06f 0204 	mvn.w	r2, #4
 8103488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	2202      	movs	r2, #2
 810348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	699b      	ldr	r3, [r3, #24]
 8103496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810349a:	2b00      	cmp	r3, #0
 810349c:	d003      	beq.n	81034a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810349e:	6878      	ldr	r0, [r7, #4]
 81034a0:	f000 fabc 	bl	8103a1c <HAL_TIM_IC_CaptureCallback>
 81034a4:	e005      	b.n	81034b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81034a6:	6878      	ldr	r0, [r7, #4]
 81034a8:	f000 faae 	bl	8103a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81034ac:	6878      	ldr	r0, [r7, #4]
 81034ae:	f000 fabf 	bl	8103a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81034b2:	687b      	ldr	r3, [r7, #4]
 81034b4:	2200      	movs	r2, #0
 81034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	691b      	ldr	r3, [r3, #16]
 81034be:	f003 0308 	and.w	r3, r3, #8
 81034c2:	2b08      	cmp	r3, #8
 81034c4:	d122      	bne.n	810350c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	681b      	ldr	r3, [r3, #0]
 81034ca:	68db      	ldr	r3, [r3, #12]
 81034cc:	f003 0308 	and.w	r3, r3, #8
 81034d0:	2b08      	cmp	r3, #8
 81034d2:	d11b      	bne.n	810350c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81034d4:	687b      	ldr	r3, [r7, #4]
 81034d6:	681b      	ldr	r3, [r3, #0]
 81034d8:	f06f 0208 	mvn.w	r2, #8
 81034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	2204      	movs	r2, #4
 81034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81034e4:	687b      	ldr	r3, [r7, #4]
 81034e6:	681b      	ldr	r3, [r3, #0]
 81034e8:	69db      	ldr	r3, [r3, #28]
 81034ea:	f003 0303 	and.w	r3, r3, #3
 81034ee:	2b00      	cmp	r3, #0
 81034f0:	d003      	beq.n	81034fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81034f2:	6878      	ldr	r0, [r7, #4]
 81034f4:	f000 fa92 	bl	8103a1c <HAL_TIM_IC_CaptureCallback>
 81034f8:	e005      	b.n	8103506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81034fa:	6878      	ldr	r0, [r7, #4]
 81034fc:	f000 fa84 	bl	8103a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103500:	6878      	ldr	r0, [r7, #4]
 8103502:	f000 fa95 	bl	8103a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	2200      	movs	r2, #0
 810350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	681b      	ldr	r3, [r3, #0]
 8103510:	691b      	ldr	r3, [r3, #16]
 8103512:	f003 0310 	and.w	r3, r3, #16
 8103516:	2b10      	cmp	r3, #16
 8103518:	d122      	bne.n	8103560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	681b      	ldr	r3, [r3, #0]
 810351e:	68db      	ldr	r3, [r3, #12]
 8103520:	f003 0310 	and.w	r3, r3, #16
 8103524:	2b10      	cmp	r3, #16
 8103526:	d11b      	bne.n	8103560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	f06f 0210 	mvn.w	r2, #16
 8103530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	2208      	movs	r2, #8
 8103536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	681b      	ldr	r3, [r3, #0]
 810353c:	69db      	ldr	r3, [r3, #28]
 810353e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103542:	2b00      	cmp	r3, #0
 8103544:	d003      	beq.n	810354e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103546:	6878      	ldr	r0, [r7, #4]
 8103548:	f000 fa68 	bl	8103a1c <HAL_TIM_IC_CaptureCallback>
 810354c:	e005      	b.n	810355a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810354e:	6878      	ldr	r0, [r7, #4]
 8103550:	f000 fa5a 	bl	8103a08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103554:	6878      	ldr	r0, [r7, #4]
 8103556:	f000 fa6b 	bl	8103a30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	2200      	movs	r2, #0
 810355e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	691b      	ldr	r3, [r3, #16]
 8103566:	f003 0301 	and.w	r3, r3, #1
 810356a:	2b01      	cmp	r3, #1
 810356c:	d10e      	bne.n	810358c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	68db      	ldr	r3, [r3, #12]
 8103574:	f003 0301 	and.w	r3, r3, #1
 8103578:	2b01      	cmp	r3, #1
 810357a:	d107      	bne.n	810358c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	681b      	ldr	r3, [r3, #0]
 8103580:	f06f 0201 	mvn.w	r2, #1
 8103584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103586:	6878      	ldr	r0, [r7, #4]
 8103588:	f7fd fc20 	bl	8100dcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	691b      	ldr	r3, [r3, #16]
 8103592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103596:	2b80      	cmp	r3, #128	; 0x80
 8103598:	d10e      	bne.n	81035b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810359a:	687b      	ldr	r3, [r7, #4]
 810359c:	681b      	ldr	r3, [r3, #0]
 810359e:	68db      	ldr	r3, [r3, #12]
 81035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81035a4:	2b80      	cmp	r3, #128	; 0x80
 81035a6:	d107      	bne.n	81035b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81035b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81035b2:	6878      	ldr	r0, [r7, #4]
 81035b4:	f000 ff8a 	bl	81044cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	691b      	ldr	r3, [r3, #16]
 81035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81035c6:	d10e      	bne.n	81035e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	681b      	ldr	r3, [r3, #0]
 81035cc:	68db      	ldr	r3, [r3, #12]
 81035ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81035d2:	2b80      	cmp	r3, #128	; 0x80
 81035d4:	d107      	bne.n	81035e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81035de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81035e0:	6878      	ldr	r0, [r7, #4]
 81035e2:	f000 ff7d 	bl	81044e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81035e6:	687b      	ldr	r3, [r7, #4]
 81035e8:	681b      	ldr	r3, [r3, #0]
 81035ea:	691b      	ldr	r3, [r3, #16]
 81035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81035f0:	2b40      	cmp	r3, #64	; 0x40
 81035f2:	d10e      	bne.n	8103612 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81035f4:	687b      	ldr	r3, [r7, #4]
 81035f6:	681b      	ldr	r3, [r3, #0]
 81035f8:	68db      	ldr	r3, [r3, #12]
 81035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81035fe:	2b40      	cmp	r3, #64	; 0x40
 8103600:	d107      	bne.n	8103612 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	681b      	ldr	r3, [r3, #0]
 8103606:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810360c:	6878      	ldr	r0, [r7, #4]
 810360e:	f000 fa19 	bl	8103a44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	691b      	ldr	r3, [r3, #16]
 8103618:	f003 0320 	and.w	r3, r3, #32
 810361c:	2b20      	cmp	r3, #32
 810361e:	d10e      	bne.n	810363e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8103620:	687b      	ldr	r3, [r7, #4]
 8103622:	681b      	ldr	r3, [r3, #0]
 8103624:	68db      	ldr	r3, [r3, #12]
 8103626:	f003 0320 	and.w	r3, r3, #32
 810362a:	2b20      	cmp	r3, #32
 810362c:	d107      	bne.n	810363e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	f06f 0220 	mvn.w	r2, #32
 8103636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103638:	6878      	ldr	r0, [r7, #4]
 810363a:	f000 ff3d 	bl	81044b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810363e:	bf00      	nop
 8103640:	3708      	adds	r7, #8
 8103642:	46bd      	mov	sp, r7
 8103644:	bd80      	pop	{r7, pc}
	...

08103648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8103648:	b580      	push	{r7, lr}
 810364a:	b084      	sub	sp, #16
 810364c:	af00      	add	r7, sp, #0
 810364e:	60f8      	str	r0, [r7, #12]
 8103650:	60b9      	str	r1, [r7, #8]
 8103652:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8103654:	68fb      	ldr	r3, [r7, #12]
 8103656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810365a:	2b01      	cmp	r3, #1
 810365c:	d101      	bne.n	8103662 <HAL_TIM_PWM_ConfigChannel+0x1a>
 810365e:	2302      	movs	r3, #2
 8103660:	e0fd      	b.n	810385e <HAL_TIM_PWM_ConfigChannel+0x216>
 8103662:	68fb      	ldr	r3, [r7, #12]
 8103664:	2201      	movs	r2, #1
 8103666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	2b14      	cmp	r3, #20
 810366e:	f200 80f0 	bhi.w	8103852 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8103672:	a201      	add	r2, pc, #4	; (adr r2, 8103678 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8103674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103678:	081036cd 	.word	0x081036cd
 810367c:	08103853 	.word	0x08103853
 8103680:	08103853 	.word	0x08103853
 8103684:	08103853 	.word	0x08103853
 8103688:	0810370d 	.word	0x0810370d
 810368c:	08103853 	.word	0x08103853
 8103690:	08103853 	.word	0x08103853
 8103694:	08103853 	.word	0x08103853
 8103698:	0810374f 	.word	0x0810374f
 810369c:	08103853 	.word	0x08103853
 81036a0:	08103853 	.word	0x08103853
 81036a4:	08103853 	.word	0x08103853
 81036a8:	0810378f 	.word	0x0810378f
 81036ac:	08103853 	.word	0x08103853
 81036b0:	08103853 	.word	0x08103853
 81036b4:	08103853 	.word	0x08103853
 81036b8:	081037d1 	.word	0x081037d1
 81036bc:	08103853 	.word	0x08103853
 81036c0:	08103853 	.word	0x08103853
 81036c4:	08103853 	.word	0x08103853
 81036c8:	08103811 	.word	0x08103811
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81036cc:	68fb      	ldr	r3, [r7, #12]
 81036ce:	681b      	ldr	r3, [r3, #0]
 81036d0:	68b9      	ldr	r1, [r7, #8]
 81036d2:	4618      	mov	r0, r3
 81036d4:	f000 fa5a 	bl	8103b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81036d8:	68fb      	ldr	r3, [r7, #12]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	699a      	ldr	r2, [r3, #24]
 81036de:	68fb      	ldr	r3, [r7, #12]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	f042 0208 	orr.w	r2, r2, #8
 81036e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81036e8:	68fb      	ldr	r3, [r7, #12]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	699a      	ldr	r2, [r3, #24]
 81036ee:	68fb      	ldr	r3, [r7, #12]
 81036f0:	681b      	ldr	r3, [r3, #0]
 81036f2:	f022 0204 	bic.w	r2, r2, #4
 81036f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81036f8:	68fb      	ldr	r3, [r7, #12]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	6999      	ldr	r1, [r3, #24]
 81036fe:	68bb      	ldr	r3, [r7, #8]
 8103700:	691a      	ldr	r2, [r3, #16]
 8103702:	68fb      	ldr	r3, [r7, #12]
 8103704:	681b      	ldr	r3, [r3, #0]
 8103706:	430a      	orrs	r2, r1
 8103708:	619a      	str	r2, [r3, #24]
      break;
 810370a:	e0a3      	b.n	8103854 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810370c:	68fb      	ldr	r3, [r7, #12]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	68b9      	ldr	r1, [r7, #8]
 8103712:	4618      	mov	r0, r3
 8103714:	f000 faca 	bl	8103cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8103718:	68fb      	ldr	r3, [r7, #12]
 810371a:	681b      	ldr	r3, [r3, #0]
 810371c:	699a      	ldr	r2, [r3, #24]
 810371e:	68fb      	ldr	r3, [r7, #12]
 8103720:	681b      	ldr	r3, [r3, #0]
 8103722:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8103728:	68fb      	ldr	r3, [r7, #12]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	699a      	ldr	r2, [r3, #24]
 810372e:	68fb      	ldr	r3, [r7, #12]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8103736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8103738:	68fb      	ldr	r3, [r7, #12]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	6999      	ldr	r1, [r3, #24]
 810373e:	68bb      	ldr	r3, [r7, #8]
 8103740:	691b      	ldr	r3, [r3, #16]
 8103742:	021a      	lsls	r2, r3, #8
 8103744:	68fb      	ldr	r3, [r7, #12]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	430a      	orrs	r2, r1
 810374a:	619a      	str	r2, [r3, #24]
      break;
 810374c:	e082      	b.n	8103854 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810374e:	68fb      	ldr	r3, [r7, #12]
 8103750:	681b      	ldr	r3, [r3, #0]
 8103752:	68b9      	ldr	r1, [r7, #8]
 8103754:	4618      	mov	r0, r3
 8103756:	f000 fb33 	bl	8103dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 810375a:	68fb      	ldr	r3, [r7, #12]
 810375c:	681b      	ldr	r3, [r3, #0]
 810375e:	69da      	ldr	r2, [r3, #28]
 8103760:	68fb      	ldr	r3, [r7, #12]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	f042 0208 	orr.w	r2, r2, #8
 8103768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810376a:	68fb      	ldr	r3, [r7, #12]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	69da      	ldr	r2, [r3, #28]
 8103770:	68fb      	ldr	r3, [r7, #12]
 8103772:	681b      	ldr	r3, [r3, #0]
 8103774:	f022 0204 	bic.w	r2, r2, #4
 8103778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810377a:	68fb      	ldr	r3, [r7, #12]
 810377c:	681b      	ldr	r3, [r3, #0]
 810377e:	69d9      	ldr	r1, [r3, #28]
 8103780:	68bb      	ldr	r3, [r7, #8]
 8103782:	691a      	ldr	r2, [r3, #16]
 8103784:	68fb      	ldr	r3, [r7, #12]
 8103786:	681b      	ldr	r3, [r3, #0]
 8103788:	430a      	orrs	r2, r1
 810378a:	61da      	str	r2, [r3, #28]
      break;
 810378c:	e062      	b.n	8103854 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810378e:	68fb      	ldr	r3, [r7, #12]
 8103790:	681b      	ldr	r3, [r3, #0]
 8103792:	68b9      	ldr	r1, [r7, #8]
 8103794:	4618      	mov	r0, r3
 8103796:	f000 fb99 	bl	8103ecc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810379a:	68fb      	ldr	r3, [r7, #12]
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	69da      	ldr	r2, [r3, #28]
 81037a0:	68fb      	ldr	r3, [r7, #12]
 81037a2:	681b      	ldr	r3, [r3, #0]
 81037a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81037a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81037aa:	68fb      	ldr	r3, [r7, #12]
 81037ac:	681b      	ldr	r3, [r3, #0]
 81037ae:	69da      	ldr	r2, [r3, #28]
 81037b0:	68fb      	ldr	r3, [r7, #12]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81037b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81037ba:	68fb      	ldr	r3, [r7, #12]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	69d9      	ldr	r1, [r3, #28]
 81037c0:	68bb      	ldr	r3, [r7, #8]
 81037c2:	691b      	ldr	r3, [r3, #16]
 81037c4:	021a      	lsls	r2, r3, #8
 81037c6:	68fb      	ldr	r3, [r7, #12]
 81037c8:	681b      	ldr	r3, [r3, #0]
 81037ca:	430a      	orrs	r2, r1
 81037cc:	61da      	str	r2, [r3, #28]
      break;
 81037ce:	e041      	b.n	8103854 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81037d0:	68fb      	ldr	r3, [r7, #12]
 81037d2:	681b      	ldr	r3, [r3, #0]
 81037d4:	68b9      	ldr	r1, [r7, #8]
 81037d6:	4618      	mov	r0, r3
 81037d8:	f000 fbe0 	bl	8103f9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81037dc:	68fb      	ldr	r3, [r7, #12]
 81037de:	681b      	ldr	r3, [r3, #0]
 81037e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81037e2:	68fb      	ldr	r3, [r7, #12]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	f042 0208 	orr.w	r2, r2, #8
 81037ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81037ec:	68fb      	ldr	r3, [r7, #12]
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81037f2:	68fb      	ldr	r3, [r7, #12]
 81037f4:	681b      	ldr	r3, [r3, #0]
 81037f6:	f022 0204 	bic.w	r2, r2, #4
 81037fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81037fc:	68fb      	ldr	r3, [r7, #12]
 81037fe:	681b      	ldr	r3, [r3, #0]
 8103800:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8103802:	68bb      	ldr	r3, [r7, #8]
 8103804:	691a      	ldr	r2, [r3, #16]
 8103806:	68fb      	ldr	r3, [r7, #12]
 8103808:	681b      	ldr	r3, [r3, #0]
 810380a:	430a      	orrs	r2, r1
 810380c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810380e:	e021      	b.n	8103854 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8103810:	68fb      	ldr	r3, [r7, #12]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	68b9      	ldr	r1, [r7, #8]
 8103816:	4618      	mov	r0, r3
 8103818:	f000 fc22 	bl	8104060 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810381c:	68fb      	ldr	r3, [r7, #12]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103822:	68fb      	ldr	r3, [r7, #12]
 8103824:	681b      	ldr	r3, [r3, #0]
 8103826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810382a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810382c:	68fb      	ldr	r3, [r7, #12]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103832:	68fb      	ldr	r3, [r7, #12]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810383a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810383c:	68fb      	ldr	r3, [r7, #12]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8103842:	68bb      	ldr	r3, [r7, #8]
 8103844:	691b      	ldr	r3, [r3, #16]
 8103846:	021a      	lsls	r2, r3, #8
 8103848:	68fb      	ldr	r3, [r7, #12]
 810384a:	681b      	ldr	r3, [r3, #0]
 810384c:	430a      	orrs	r2, r1
 810384e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8103850:	e000      	b.n	8103854 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8103852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8103854:	68fb      	ldr	r3, [r7, #12]
 8103856:	2200      	movs	r2, #0
 8103858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810385c:	2300      	movs	r3, #0
}
 810385e:	4618      	mov	r0, r3
 8103860:	3710      	adds	r7, #16
 8103862:	46bd      	mov	sp, r7
 8103864:	bd80      	pop	{r7, pc}
 8103866:	bf00      	nop

08103868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8103868:	b580      	push	{r7, lr}
 810386a:	b084      	sub	sp, #16
 810386c:	af00      	add	r7, sp, #0
 810386e:	6078      	str	r0, [r7, #4]
 8103870:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103878:	2b01      	cmp	r3, #1
 810387a:	d101      	bne.n	8103880 <HAL_TIM_ConfigClockSource+0x18>
 810387c:	2302      	movs	r3, #2
 810387e:	e0b9      	b.n	81039f4 <HAL_TIM_ConfigClockSource+0x18c>
 8103880:	687b      	ldr	r3, [r7, #4]
 8103882:	2201      	movs	r2, #1
 8103884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	2202      	movs	r2, #2
 810388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8103890:	687b      	ldr	r3, [r7, #4]
 8103892:	681b      	ldr	r3, [r3, #0]
 8103894:	689b      	ldr	r3, [r3, #8]
 8103896:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8103898:	68fb      	ldr	r3, [r7, #12]
 810389a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810389e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81038a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81038a4:	68fb      	ldr	r3, [r7, #12]
 81038a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81038aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 81038ac:	687b      	ldr	r3, [r7, #4]
 81038ae:	681b      	ldr	r3, [r3, #0]
 81038b0:	68fa      	ldr	r2, [r7, #12]
 81038b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81038b4:	683b      	ldr	r3, [r7, #0]
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	2b70      	cmp	r3, #112	; 0x70
 81038ba:	d02e      	beq.n	810391a <HAL_TIM_ConfigClockSource+0xb2>
 81038bc:	2b70      	cmp	r3, #112	; 0x70
 81038be:	d812      	bhi.n	81038e6 <HAL_TIM_ConfigClockSource+0x7e>
 81038c0:	2b30      	cmp	r3, #48	; 0x30
 81038c2:	f000 8084 	beq.w	81039ce <HAL_TIM_ConfigClockSource+0x166>
 81038c6:	2b30      	cmp	r3, #48	; 0x30
 81038c8:	d806      	bhi.n	81038d8 <HAL_TIM_ConfigClockSource+0x70>
 81038ca:	2b10      	cmp	r3, #16
 81038cc:	d07f      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
 81038ce:	2b20      	cmp	r3, #32
 81038d0:	d07d      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d07b      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 81038d6:	e084      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81038d8:	2b50      	cmp	r3, #80	; 0x50
 81038da:	d048      	beq.n	810396e <HAL_TIM_ConfigClockSource+0x106>
 81038dc:	2b60      	cmp	r3, #96	; 0x60
 81038de:	d056      	beq.n	810398e <HAL_TIM_ConfigClockSource+0x126>
 81038e0:	2b40      	cmp	r3, #64	; 0x40
 81038e2:	d064      	beq.n	81039ae <HAL_TIM_ConfigClockSource+0x146>
      break;
 81038e4:	e07d      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81038e6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81038ea:	d070      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
 81038ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81038f0:	d809      	bhi.n	8103906 <HAL_TIM_ConfigClockSource+0x9e>
 81038f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81038f6:	d027      	beq.n	8103948 <HAL_TIM_ConfigClockSource+0xe0>
 81038f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81038fc:	d067      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
 81038fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103902:	d06d      	beq.n	81039e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8103904:	e06d      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8103906:	4a3d      	ldr	r2, [pc, #244]	; (81039fc <HAL_TIM_ConfigClockSource+0x194>)
 8103908:	4293      	cmp	r3, r2
 810390a:	d060      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
 810390c:	4a3c      	ldr	r2, [pc, #240]	; (8103a00 <HAL_TIM_ConfigClockSource+0x198>)
 810390e:	4293      	cmp	r3, r2
 8103910:	d05d      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
 8103912:	4a3c      	ldr	r2, [pc, #240]	; (8103a04 <HAL_TIM_ConfigClockSource+0x19c>)
 8103914:	4293      	cmp	r3, r2
 8103916:	d05a      	beq.n	81039ce <HAL_TIM_ConfigClockSource+0x166>
      break;
 8103918:	e063      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	6818      	ldr	r0, [r3, #0]
 810391e:	683b      	ldr	r3, [r7, #0]
 8103920:	6899      	ldr	r1, [r3, #8]
 8103922:	683b      	ldr	r3, [r7, #0]
 8103924:	685a      	ldr	r2, [r3, #4]
 8103926:	683b      	ldr	r3, [r7, #0]
 8103928:	68db      	ldr	r3, [r3, #12]
 810392a:	f000 fc79 	bl	8104220 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	681b      	ldr	r3, [r3, #0]
 8103932:	689b      	ldr	r3, [r3, #8]
 8103934:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8103936:	68fb      	ldr	r3, [r7, #12]
 8103938:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810393c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	68fa      	ldr	r2, [r7, #12]
 8103944:	609a      	str	r2, [r3, #8]
      break;
 8103946:	e04c      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	6818      	ldr	r0, [r3, #0]
 810394c:	683b      	ldr	r3, [r7, #0]
 810394e:	6899      	ldr	r1, [r3, #8]
 8103950:	683b      	ldr	r3, [r7, #0]
 8103952:	685a      	ldr	r2, [r3, #4]
 8103954:	683b      	ldr	r3, [r7, #0]
 8103956:	68db      	ldr	r3, [r3, #12]
 8103958:	f000 fc62 	bl	8104220 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	681b      	ldr	r3, [r3, #0]
 8103960:	689a      	ldr	r2, [r3, #8]
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810396a:	609a      	str	r2, [r3, #8]
      break;
 810396c:	e039      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	6818      	ldr	r0, [r3, #0]
 8103972:	683b      	ldr	r3, [r7, #0]
 8103974:	6859      	ldr	r1, [r3, #4]
 8103976:	683b      	ldr	r3, [r7, #0]
 8103978:	68db      	ldr	r3, [r3, #12]
 810397a:	461a      	mov	r2, r3
 810397c:	f000 fbd4 	bl	8104128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	2150      	movs	r1, #80	; 0x50
 8103986:	4618      	mov	r0, r3
 8103988:	f000 fc2d 	bl	81041e6 <TIM_ITRx_SetConfig>
      break;
 810398c:	e029      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	6818      	ldr	r0, [r3, #0]
 8103992:	683b      	ldr	r3, [r7, #0]
 8103994:	6859      	ldr	r1, [r3, #4]
 8103996:	683b      	ldr	r3, [r7, #0]
 8103998:	68db      	ldr	r3, [r3, #12]
 810399a:	461a      	mov	r2, r3
 810399c:	f000 fbf3 	bl	8104186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	2160      	movs	r1, #96	; 0x60
 81039a6:	4618      	mov	r0, r3
 81039a8:	f000 fc1d 	bl	81041e6 <TIM_ITRx_SetConfig>
      break;
 81039ac:	e019      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	6818      	ldr	r0, [r3, #0]
 81039b2:	683b      	ldr	r3, [r7, #0]
 81039b4:	6859      	ldr	r1, [r3, #4]
 81039b6:	683b      	ldr	r3, [r7, #0]
 81039b8:	68db      	ldr	r3, [r3, #12]
 81039ba:	461a      	mov	r2, r3
 81039bc:	f000 fbb4 	bl	8104128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	2140      	movs	r1, #64	; 0x40
 81039c6:	4618      	mov	r0, r3
 81039c8:	f000 fc0d 	bl	81041e6 <TIM_ITRx_SetConfig>
      break;
 81039cc:	e009      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	681a      	ldr	r2, [r3, #0]
 81039d2:	683b      	ldr	r3, [r7, #0]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	4619      	mov	r1, r3
 81039d8:	4610      	mov	r0, r2
 81039da:	f000 fc04 	bl	81041e6 <TIM_ITRx_SetConfig>
      break;
 81039de:	e000      	b.n	81039e2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 81039e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	2201      	movs	r2, #1
 81039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81039ea:	687b      	ldr	r3, [r7, #4]
 81039ec:	2200      	movs	r2, #0
 81039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81039f2:	2300      	movs	r3, #0
}
 81039f4:	4618      	mov	r0, r3
 81039f6:	3710      	adds	r7, #16
 81039f8:	46bd      	mov	sp, r7
 81039fa:	bd80      	pop	{r7, pc}
 81039fc:	00100030 	.word	0x00100030
 8103a00:	00100040 	.word	0x00100040
 8103a04:	00100020 	.word	0x00100020

08103a08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103a08:	b480      	push	{r7}
 8103a0a:	b083      	sub	sp, #12
 8103a0c:	af00      	add	r7, sp, #0
 8103a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103a10:	bf00      	nop
 8103a12:	370c      	adds	r7, #12
 8103a14:	46bd      	mov	sp, r7
 8103a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a1a:	4770      	bx	lr

08103a1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103a1c:	b480      	push	{r7}
 8103a1e:	b083      	sub	sp, #12
 8103a20:	af00      	add	r7, sp, #0
 8103a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103a24:	bf00      	nop
 8103a26:	370c      	adds	r7, #12
 8103a28:	46bd      	mov	sp, r7
 8103a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a2e:	4770      	bx	lr

08103a30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103a30:	b480      	push	{r7}
 8103a32:	b083      	sub	sp, #12
 8103a34:	af00      	add	r7, sp, #0
 8103a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103a38:	bf00      	nop
 8103a3a:	370c      	adds	r7, #12
 8103a3c:	46bd      	mov	sp, r7
 8103a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a42:	4770      	bx	lr

08103a44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103a44:	b480      	push	{r7}
 8103a46:	b083      	sub	sp, #12
 8103a48:	af00      	add	r7, sp, #0
 8103a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103a4c:	bf00      	nop
 8103a4e:	370c      	adds	r7, #12
 8103a50:	46bd      	mov	sp, r7
 8103a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a56:	4770      	bx	lr

08103a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8103a58:	b480      	push	{r7}
 8103a5a:	b085      	sub	sp, #20
 8103a5c:	af00      	add	r7, sp, #0
 8103a5e:	6078      	str	r0, [r7, #4]
 8103a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	4a40      	ldr	r2, [pc, #256]	; (8103b6c <TIM_Base_SetConfig+0x114>)
 8103a6c:	4293      	cmp	r3, r2
 8103a6e:	d013      	beq.n	8103a98 <TIM_Base_SetConfig+0x40>
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103a76:	d00f      	beq.n	8103a98 <TIM_Base_SetConfig+0x40>
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	4a3d      	ldr	r2, [pc, #244]	; (8103b70 <TIM_Base_SetConfig+0x118>)
 8103a7c:	4293      	cmp	r3, r2
 8103a7e:	d00b      	beq.n	8103a98 <TIM_Base_SetConfig+0x40>
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	4a3c      	ldr	r2, [pc, #240]	; (8103b74 <TIM_Base_SetConfig+0x11c>)
 8103a84:	4293      	cmp	r3, r2
 8103a86:	d007      	beq.n	8103a98 <TIM_Base_SetConfig+0x40>
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	4a3b      	ldr	r2, [pc, #236]	; (8103b78 <TIM_Base_SetConfig+0x120>)
 8103a8c:	4293      	cmp	r3, r2
 8103a8e:	d003      	beq.n	8103a98 <TIM_Base_SetConfig+0x40>
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	4a3a      	ldr	r2, [pc, #232]	; (8103b7c <TIM_Base_SetConfig+0x124>)
 8103a94:	4293      	cmp	r3, r2
 8103a96:	d108      	bne.n	8103aaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103a98:	68fb      	ldr	r3, [r7, #12]
 8103a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103a9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103aa0:	683b      	ldr	r3, [r7, #0]
 8103aa2:	685b      	ldr	r3, [r3, #4]
 8103aa4:	68fa      	ldr	r2, [r7, #12]
 8103aa6:	4313      	orrs	r3, r2
 8103aa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	4a2f      	ldr	r2, [pc, #188]	; (8103b6c <TIM_Base_SetConfig+0x114>)
 8103aae:	4293      	cmp	r3, r2
 8103ab0:	d01f      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103ab8:	d01b      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103aba:	687b      	ldr	r3, [r7, #4]
 8103abc:	4a2c      	ldr	r2, [pc, #176]	; (8103b70 <TIM_Base_SetConfig+0x118>)
 8103abe:	4293      	cmp	r3, r2
 8103ac0:	d017      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	4a2b      	ldr	r2, [pc, #172]	; (8103b74 <TIM_Base_SetConfig+0x11c>)
 8103ac6:	4293      	cmp	r3, r2
 8103ac8:	d013      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	4a2a      	ldr	r2, [pc, #168]	; (8103b78 <TIM_Base_SetConfig+0x120>)
 8103ace:	4293      	cmp	r3, r2
 8103ad0:	d00f      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103ad2:	687b      	ldr	r3, [r7, #4]
 8103ad4:	4a29      	ldr	r2, [pc, #164]	; (8103b7c <TIM_Base_SetConfig+0x124>)
 8103ad6:	4293      	cmp	r3, r2
 8103ad8:	d00b      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	4a28      	ldr	r2, [pc, #160]	; (8103b80 <TIM_Base_SetConfig+0x128>)
 8103ade:	4293      	cmp	r3, r2
 8103ae0:	d007      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	4a27      	ldr	r2, [pc, #156]	; (8103b84 <TIM_Base_SetConfig+0x12c>)
 8103ae6:	4293      	cmp	r3, r2
 8103ae8:	d003      	beq.n	8103af2 <TIM_Base_SetConfig+0x9a>
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	4a26      	ldr	r2, [pc, #152]	; (8103b88 <TIM_Base_SetConfig+0x130>)
 8103aee:	4293      	cmp	r3, r2
 8103af0:	d108      	bne.n	8103b04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8103af2:	68fb      	ldr	r3, [r7, #12]
 8103af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103afa:	683b      	ldr	r3, [r7, #0]
 8103afc:	68db      	ldr	r3, [r3, #12]
 8103afe:	68fa      	ldr	r2, [r7, #12]
 8103b00:	4313      	orrs	r3, r2
 8103b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8103b04:	68fb      	ldr	r3, [r7, #12]
 8103b06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8103b0a:	683b      	ldr	r3, [r7, #0]
 8103b0c:	695b      	ldr	r3, [r3, #20]
 8103b0e:	4313      	orrs	r3, r2
 8103b10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8103b12:	687b      	ldr	r3, [r7, #4]
 8103b14:	68fa      	ldr	r2, [r7, #12]
 8103b16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8103b18:	683b      	ldr	r3, [r7, #0]
 8103b1a:	689a      	ldr	r2, [r3, #8]
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8103b20:	683b      	ldr	r3, [r7, #0]
 8103b22:	681a      	ldr	r2, [r3, #0]
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	4a10      	ldr	r2, [pc, #64]	; (8103b6c <TIM_Base_SetConfig+0x114>)
 8103b2c:	4293      	cmp	r3, r2
 8103b2e:	d00f      	beq.n	8103b50 <TIM_Base_SetConfig+0xf8>
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	4a12      	ldr	r2, [pc, #72]	; (8103b7c <TIM_Base_SetConfig+0x124>)
 8103b34:	4293      	cmp	r3, r2
 8103b36:	d00b      	beq.n	8103b50 <TIM_Base_SetConfig+0xf8>
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	4a11      	ldr	r2, [pc, #68]	; (8103b80 <TIM_Base_SetConfig+0x128>)
 8103b3c:	4293      	cmp	r3, r2
 8103b3e:	d007      	beq.n	8103b50 <TIM_Base_SetConfig+0xf8>
 8103b40:	687b      	ldr	r3, [r7, #4]
 8103b42:	4a10      	ldr	r2, [pc, #64]	; (8103b84 <TIM_Base_SetConfig+0x12c>)
 8103b44:	4293      	cmp	r3, r2
 8103b46:	d003      	beq.n	8103b50 <TIM_Base_SetConfig+0xf8>
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	4a0f      	ldr	r2, [pc, #60]	; (8103b88 <TIM_Base_SetConfig+0x130>)
 8103b4c:	4293      	cmp	r3, r2
 8103b4e:	d103      	bne.n	8103b58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103b50:	683b      	ldr	r3, [r7, #0]
 8103b52:	691a      	ldr	r2, [r3, #16]
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103b58:	687b      	ldr	r3, [r7, #4]
 8103b5a:	2201      	movs	r2, #1
 8103b5c:	615a      	str	r2, [r3, #20]
}
 8103b5e:	bf00      	nop
 8103b60:	3714      	adds	r7, #20
 8103b62:	46bd      	mov	sp, r7
 8103b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b68:	4770      	bx	lr
 8103b6a:	bf00      	nop
 8103b6c:	40010000 	.word	0x40010000
 8103b70:	40000400 	.word	0x40000400
 8103b74:	40000800 	.word	0x40000800
 8103b78:	40000c00 	.word	0x40000c00
 8103b7c:	40010400 	.word	0x40010400
 8103b80:	40014000 	.word	0x40014000
 8103b84:	40014400 	.word	0x40014400
 8103b88:	40014800 	.word	0x40014800

08103b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103b8c:	b480      	push	{r7}
 8103b8e:	b087      	sub	sp, #28
 8103b90:	af00      	add	r7, sp, #0
 8103b92:	6078      	str	r0, [r7, #4]
 8103b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	6a1b      	ldr	r3, [r3, #32]
 8103b9a:	f023 0201 	bic.w	r2, r3, #1
 8103b9e:	687b      	ldr	r3, [r7, #4]
 8103ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	6a1b      	ldr	r3, [r3, #32]
 8103ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	685b      	ldr	r3, [r3, #4]
 8103bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8103bae:	687b      	ldr	r3, [r7, #4]
 8103bb0:	699b      	ldr	r3, [r3, #24]
 8103bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8103bb4:	68fb      	ldr	r3, [r7, #12]
 8103bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8103bc0:	68fb      	ldr	r3, [r7, #12]
 8103bc2:	f023 0303 	bic.w	r3, r3, #3
 8103bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103bc8:	683b      	ldr	r3, [r7, #0]
 8103bca:	681b      	ldr	r3, [r3, #0]
 8103bcc:	68fa      	ldr	r2, [r7, #12]
 8103bce:	4313      	orrs	r3, r2
 8103bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8103bd2:	697b      	ldr	r3, [r7, #20]
 8103bd4:	f023 0302 	bic.w	r3, r3, #2
 8103bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8103bda:	683b      	ldr	r3, [r7, #0]
 8103bdc:	689b      	ldr	r3, [r3, #8]
 8103bde:	697a      	ldr	r2, [r7, #20]
 8103be0:	4313      	orrs	r3, r2
 8103be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	4a2c      	ldr	r2, [pc, #176]	; (8103c98 <TIM_OC1_SetConfig+0x10c>)
 8103be8:	4293      	cmp	r3, r2
 8103bea:	d00f      	beq.n	8103c0c <TIM_OC1_SetConfig+0x80>
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	4a2b      	ldr	r2, [pc, #172]	; (8103c9c <TIM_OC1_SetConfig+0x110>)
 8103bf0:	4293      	cmp	r3, r2
 8103bf2:	d00b      	beq.n	8103c0c <TIM_OC1_SetConfig+0x80>
 8103bf4:	687b      	ldr	r3, [r7, #4]
 8103bf6:	4a2a      	ldr	r2, [pc, #168]	; (8103ca0 <TIM_OC1_SetConfig+0x114>)
 8103bf8:	4293      	cmp	r3, r2
 8103bfa:	d007      	beq.n	8103c0c <TIM_OC1_SetConfig+0x80>
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	4a29      	ldr	r2, [pc, #164]	; (8103ca4 <TIM_OC1_SetConfig+0x118>)
 8103c00:	4293      	cmp	r3, r2
 8103c02:	d003      	beq.n	8103c0c <TIM_OC1_SetConfig+0x80>
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	4a28      	ldr	r2, [pc, #160]	; (8103ca8 <TIM_OC1_SetConfig+0x11c>)
 8103c08:	4293      	cmp	r3, r2
 8103c0a:	d10c      	bne.n	8103c26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8103c0c:	697b      	ldr	r3, [r7, #20]
 8103c0e:	f023 0308 	bic.w	r3, r3, #8
 8103c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8103c14:	683b      	ldr	r3, [r7, #0]
 8103c16:	68db      	ldr	r3, [r3, #12]
 8103c18:	697a      	ldr	r2, [r7, #20]
 8103c1a:	4313      	orrs	r3, r2
 8103c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8103c1e:	697b      	ldr	r3, [r7, #20]
 8103c20:	f023 0304 	bic.w	r3, r3, #4
 8103c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	4a1b      	ldr	r2, [pc, #108]	; (8103c98 <TIM_OC1_SetConfig+0x10c>)
 8103c2a:	4293      	cmp	r3, r2
 8103c2c:	d00f      	beq.n	8103c4e <TIM_OC1_SetConfig+0xc2>
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	4a1a      	ldr	r2, [pc, #104]	; (8103c9c <TIM_OC1_SetConfig+0x110>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d00b      	beq.n	8103c4e <TIM_OC1_SetConfig+0xc2>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	4a19      	ldr	r2, [pc, #100]	; (8103ca0 <TIM_OC1_SetConfig+0x114>)
 8103c3a:	4293      	cmp	r3, r2
 8103c3c:	d007      	beq.n	8103c4e <TIM_OC1_SetConfig+0xc2>
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	4a18      	ldr	r2, [pc, #96]	; (8103ca4 <TIM_OC1_SetConfig+0x118>)
 8103c42:	4293      	cmp	r3, r2
 8103c44:	d003      	beq.n	8103c4e <TIM_OC1_SetConfig+0xc2>
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	4a17      	ldr	r2, [pc, #92]	; (8103ca8 <TIM_OC1_SetConfig+0x11c>)
 8103c4a:	4293      	cmp	r3, r2
 8103c4c:	d111      	bne.n	8103c72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8103c4e:	693b      	ldr	r3, [r7, #16]
 8103c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8103c56:	693b      	ldr	r3, [r7, #16]
 8103c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8103c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8103c5e:	683b      	ldr	r3, [r7, #0]
 8103c60:	695b      	ldr	r3, [r3, #20]
 8103c62:	693a      	ldr	r2, [r7, #16]
 8103c64:	4313      	orrs	r3, r2
 8103c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8103c68:	683b      	ldr	r3, [r7, #0]
 8103c6a:	699b      	ldr	r3, [r3, #24]
 8103c6c:	693a      	ldr	r2, [r7, #16]
 8103c6e:	4313      	orrs	r3, r2
 8103c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	693a      	ldr	r2, [r7, #16]
 8103c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	68fa      	ldr	r2, [r7, #12]
 8103c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8103c7e:	683b      	ldr	r3, [r7, #0]
 8103c80:	685a      	ldr	r2, [r3, #4]
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	697a      	ldr	r2, [r7, #20]
 8103c8a:	621a      	str	r2, [r3, #32]
}
 8103c8c:	bf00      	nop
 8103c8e:	371c      	adds	r7, #28
 8103c90:	46bd      	mov	sp, r7
 8103c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c96:	4770      	bx	lr
 8103c98:	40010000 	.word	0x40010000
 8103c9c:	40010400 	.word	0x40010400
 8103ca0:	40014000 	.word	0x40014000
 8103ca4:	40014400 	.word	0x40014400
 8103ca8:	40014800 	.word	0x40014800

08103cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103cac:	b480      	push	{r7}
 8103cae:	b087      	sub	sp, #28
 8103cb0:	af00      	add	r7, sp, #0
 8103cb2:	6078      	str	r0, [r7, #4]
 8103cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	6a1b      	ldr	r3, [r3, #32]
 8103cba:	f023 0210 	bic.w	r2, r3, #16
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	6a1b      	ldr	r3, [r3, #32]
 8103cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	685b      	ldr	r3, [r3, #4]
 8103ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	699b      	ldr	r3, [r3, #24]
 8103cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8103cd4:	68fb      	ldr	r3, [r7, #12]
 8103cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8103cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8103ce0:	68fb      	ldr	r3, [r7, #12]
 8103ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103ce8:	683b      	ldr	r3, [r7, #0]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	021b      	lsls	r3, r3, #8
 8103cee:	68fa      	ldr	r2, [r7, #12]
 8103cf0:	4313      	orrs	r3, r2
 8103cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8103cf4:	697b      	ldr	r3, [r7, #20]
 8103cf6:	f023 0320 	bic.w	r3, r3, #32
 8103cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8103cfc:	683b      	ldr	r3, [r7, #0]
 8103cfe:	689b      	ldr	r3, [r3, #8]
 8103d00:	011b      	lsls	r3, r3, #4
 8103d02:	697a      	ldr	r2, [r7, #20]
 8103d04:	4313      	orrs	r3, r2
 8103d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	4a28      	ldr	r2, [pc, #160]	; (8103dac <TIM_OC2_SetConfig+0x100>)
 8103d0c:	4293      	cmp	r3, r2
 8103d0e:	d003      	beq.n	8103d18 <TIM_OC2_SetConfig+0x6c>
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	4a27      	ldr	r2, [pc, #156]	; (8103db0 <TIM_OC2_SetConfig+0x104>)
 8103d14:	4293      	cmp	r3, r2
 8103d16:	d10d      	bne.n	8103d34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8103d18:	697b      	ldr	r3, [r7, #20]
 8103d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8103d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8103d20:	683b      	ldr	r3, [r7, #0]
 8103d22:	68db      	ldr	r3, [r3, #12]
 8103d24:	011b      	lsls	r3, r3, #4
 8103d26:	697a      	ldr	r2, [r7, #20]
 8103d28:	4313      	orrs	r3, r2
 8103d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8103d2c:	697b      	ldr	r3, [r7, #20]
 8103d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8103d32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	4a1d      	ldr	r2, [pc, #116]	; (8103dac <TIM_OC2_SetConfig+0x100>)
 8103d38:	4293      	cmp	r3, r2
 8103d3a:	d00f      	beq.n	8103d5c <TIM_OC2_SetConfig+0xb0>
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	4a1c      	ldr	r2, [pc, #112]	; (8103db0 <TIM_OC2_SetConfig+0x104>)
 8103d40:	4293      	cmp	r3, r2
 8103d42:	d00b      	beq.n	8103d5c <TIM_OC2_SetConfig+0xb0>
 8103d44:	687b      	ldr	r3, [r7, #4]
 8103d46:	4a1b      	ldr	r2, [pc, #108]	; (8103db4 <TIM_OC2_SetConfig+0x108>)
 8103d48:	4293      	cmp	r3, r2
 8103d4a:	d007      	beq.n	8103d5c <TIM_OC2_SetConfig+0xb0>
 8103d4c:	687b      	ldr	r3, [r7, #4]
 8103d4e:	4a1a      	ldr	r2, [pc, #104]	; (8103db8 <TIM_OC2_SetConfig+0x10c>)
 8103d50:	4293      	cmp	r3, r2
 8103d52:	d003      	beq.n	8103d5c <TIM_OC2_SetConfig+0xb0>
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	4a19      	ldr	r2, [pc, #100]	; (8103dbc <TIM_OC2_SetConfig+0x110>)
 8103d58:	4293      	cmp	r3, r2
 8103d5a:	d113      	bne.n	8103d84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8103d5c:	693b      	ldr	r3, [r7, #16]
 8103d5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8103d62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8103d64:	693b      	ldr	r3, [r7, #16]
 8103d66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8103d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8103d6c:	683b      	ldr	r3, [r7, #0]
 8103d6e:	695b      	ldr	r3, [r3, #20]
 8103d70:	009b      	lsls	r3, r3, #2
 8103d72:	693a      	ldr	r2, [r7, #16]
 8103d74:	4313      	orrs	r3, r2
 8103d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8103d78:	683b      	ldr	r3, [r7, #0]
 8103d7a:	699b      	ldr	r3, [r3, #24]
 8103d7c:	009b      	lsls	r3, r3, #2
 8103d7e:	693a      	ldr	r2, [r7, #16]
 8103d80:	4313      	orrs	r3, r2
 8103d82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	693a      	ldr	r2, [r7, #16]
 8103d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	68fa      	ldr	r2, [r7, #12]
 8103d8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8103d90:	683b      	ldr	r3, [r7, #0]
 8103d92:	685a      	ldr	r2, [r3, #4]
 8103d94:	687b      	ldr	r3, [r7, #4]
 8103d96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	697a      	ldr	r2, [r7, #20]
 8103d9c:	621a      	str	r2, [r3, #32]
}
 8103d9e:	bf00      	nop
 8103da0:	371c      	adds	r7, #28
 8103da2:	46bd      	mov	sp, r7
 8103da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103da8:	4770      	bx	lr
 8103daa:	bf00      	nop
 8103dac:	40010000 	.word	0x40010000
 8103db0:	40010400 	.word	0x40010400
 8103db4:	40014000 	.word	0x40014000
 8103db8:	40014400 	.word	0x40014400
 8103dbc:	40014800 	.word	0x40014800

08103dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103dc0:	b480      	push	{r7}
 8103dc2:	b087      	sub	sp, #28
 8103dc4:	af00      	add	r7, sp, #0
 8103dc6:	6078      	str	r0, [r7, #4]
 8103dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	6a1b      	ldr	r3, [r3, #32]
 8103dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	6a1b      	ldr	r3, [r3, #32]
 8103dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	685b      	ldr	r3, [r3, #4]
 8103de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8103de2:	687b      	ldr	r3, [r7, #4]
 8103de4:	69db      	ldr	r3, [r3, #28]
 8103de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8103de8:	68fb      	ldr	r3, [r7, #12]
 8103dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8103df0:	68fb      	ldr	r3, [r7, #12]
 8103df2:	f023 0303 	bic.w	r3, r3, #3
 8103df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103df8:	683b      	ldr	r3, [r7, #0]
 8103dfa:	681b      	ldr	r3, [r3, #0]
 8103dfc:	68fa      	ldr	r2, [r7, #12]
 8103dfe:	4313      	orrs	r3, r2
 8103e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8103e02:	697b      	ldr	r3, [r7, #20]
 8103e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8103e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8103e0a:	683b      	ldr	r3, [r7, #0]
 8103e0c:	689b      	ldr	r3, [r3, #8]
 8103e0e:	021b      	lsls	r3, r3, #8
 8103e10:	697a      	ldr	r2, [r7, #20]
 8103e12:	4313      	orrs	r3, r2
 8103e14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8103e16:	687b      	ldr	r3, [r7, #4]
 8103e18:	4a27      	ldr	r2, [pc, #156]	; (8103eb8 <TIM_OC3_SetConfig+0xf8>)
 8103e1a:	4293      	cmp	r3, r2
 8103e1c:	d003      	beq.n	8103e26 <TIM_OC3_SetConfig+0x66>
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	4a26      	ldr	r2, [pc, #152]	; (8103ebc <TIM_OC3_SetConfig+0xfc>)
 8103e22:	4293      	cmp	r3, r2
 8103e24:	d10d      	bne.n	8103e42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8103e26:	697b      	ldr	r3, [r7, #20]
 8103e28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8103e2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8103e2e:	683b      	ldr	r3, [r7, #0]
 8103e30:	68db      	ldr	r3, [r3, #12]
 8103e32:	021b      	lsls	r3, r3, #8
 8103e34:	697a      	ldr	r2, [r7, #20]
 8103e36:	4313      	orrs	r3, r2
 8103e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8103e3a:	697b      	ldr	r3, [r7, #20]
 8103e3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8103e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	4a1c      	ldr	r2, [pc, #112]	; (8103eb8 <TIM_OC3_SetConfig+0xf8>)
 8103e46:	4293      	cmp	r3, r2
 8103e48:	d00f      	beq.n	8103e6a <TIM_OC3_SetConfig+0xaa>
 8103e4a:	687b      	ldr	r3, [r7, #4]
 8103e4c:	4a1b      	ldr	r2, [pc, #108]	; (8103ebc <TIM_OC3_SetConfig+0xfc>)
 8103e4e:	4293      	cmp	r3, r2
 8103e50:	d00b      	beq.n	8103e6a <TIM_OC3_SetConfig+0xaa>
 8103e52:	687b      	ldr	r3, [r7, #4]
 8103e54:	4a1a      	ldr	r2, [pc, #104]	; (8103ec0 <TIM_OC3_SetConfig+0x100>)
 8103e56:	4293      	cmp	r3, r2
 8103e58:	d007      	beq.n	8103e6a <TIM_OC3_SetConfig+0xaa>
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	4a19      	ldr	r2, [pc, #100]	; (8103ec4 <TIM_OC3_SetConfig+0x104>)
 8103e5e:	4293      	cmp	r3, r2
 8103e60:	d003      	beq.n	8103e6a <TIM_OC3_SetConfig+0xaa>
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	4a18      	ldr	r2, [pc, #96]	; (8103ec8 <TIM_OC3_SetConfig+0x108>)
 8103e66:	4293      	cmp	r3, r2
 8103e68:	d113      	bne.n	8103e92 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8103e6a:	693b      	ldr	r3, [r7, #16]
 8103e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8103e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8103e72:	693b      	ldr	r3, [r7, #16]
 8103e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8103e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8103e7a:	683b      	ldr	r3, [r7, #0]
 8103e7c:	695b      	ldr	r3, [r3, #20]
 8103e7e:	011b      	lsls	r3, r3, #4
 8103e80:	693a      	ldr	r2, [r7, #16]
 8103e82:	4313      	orrs	r3, r2
 8103e84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8103e86:	683b      	ldr	r3, [r7, #0]
 8103e88:	699b      	ldr	r3, [r3, #24]
 8103e8a:	011b      	lsls	r3, r3, #4
 8103e8c:	693a      	ldr	r2, [r7, #16]
 8103e8e:	4313      	orrs	r3, r2
 8103e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103e92:	687b      	ldr	r3, [r7, #4]
 8103e94:	693a      	ldr	r2, [r7, #16]
 8103e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8103e98:	687b      	ldr	r3, [r7, #4]
 8103e9a:	68fa      	ldr	r2, [r7, #12]
 8103e9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8103e9e:	683b      	ldr	r3, [r7, #0]
 8103ea0:	685a      	ldr	r2, [r3, #4]
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	697a      	ldr	r2, [r7, #20]
 8103eaa:	621a      	str	r2, [r3, #32]
}
 8103eac:	bf00      	nop
 8103eae:	371c      	adds	r7, #28
 8103eb0:	46bd      	mov	sp, r7
 8103eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103eb6:	4770      	bx	lr
 8103eb8:	40010000 	.word	0x40010000
 8103ebc:	40010400 	.word	0x40010400
 8103ec0:	40014000 	.word	0x40014000
 8103ec4:	40014400 	.word	0x40014400
 8103ec8:	40014800 	.word	0x40014800

08103ecc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8103ecc:	b480      	push	{r7}
 8103ece:	b087      	sub	sp, #28
 8103ed0:	af00      	add	r7, sp, #0
 8103ed2:	6078      	str	r0, [r7, #4]
 8103ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	6a1b      	ldr	r3, [r3, #32]
 8103eda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8103ede:	687b      	ldr	r3, [r7, #4]
 8103ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	6a1b      	ldr	r3, [r3, #32]
 8103ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103ee8:	687b      	ldr	r3, [r7, #4]
 8103eea:	685b      	ldr	r3, [r3, #4]
 8103eec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	69db      	ldr	r3, [r3, #28]
 8103ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8103ef4:	68fb      	ldr	r3, [r7, #12]
 8103ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8103efc:	68fb      	ldr	r3, [r7, #12]
 8103efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103f04:	683b      	ldr	r3, [r7, #0]
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	021b      	lsls	r3, r3, #8
 8103f0a:	68fa      	ldr	r2, [r7, #12]
 8103f0c:	4313      	orrs	r3, r2
 8103f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8103f10:	693b      	ldr	r3, [r7, #16]
 8103f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8103f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8103f18:	683b      	ldr	r3, [r7, #0]
 8103f1a:	689b      	ldr	r3, [r3, #8]
 8103f1c:	031b      	lsls	r3, r3, #12
 8103f1e:	693a      	ldr	r2, [r7, #16]
 8103f20:	4313      	orrs	r3, r2
 8103f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	4a18      	ldr	r2, [pc, #96]	; (8103f88 <TIM_OC4_SetConfig+0xbc>)
 8103f28:	4293      	cmp	r3, r2
 8103f2a:	d00f      	beq.n	8103f4c <TIM_OC4_SetConfig+0x80>
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	4a17      	ldr	r2, [pc, #92]	; (8103f8c <TIM_OC4_SetConfig+0xc0>)
 8103f30:	4293      	cmp	r3, r2
 8103f32:	d00b      	beq.n	8103f4c <TIM_OC4_SetConfig+0x80>
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	4a16      	ldr	r2, [pc, #88]	; (8103f90 <TIM_OC4_SetConfig+0xc4>)
 8103f38:	4293      	cmp	r3, r2
 8103f3a:	d007      	beq.n	8103f4c <TIM_OC4_SetConfig+0x80>
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	4a15      	ldr	r2, [pc, #84]	; (8103f94 <TIM_OC4_SetConfig+0xc8>)
 8103f40:	4293      	cmp	r3, r2
 8103f42:	d003      	beq.n	8103f4c <TIM_OC4_SetConfig+0x80>
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	4a14      	ldr	r2, [pc, #80]	; (8103f98 <TIM_OC4_SetConfig+0xcc>)
 8103f48:	4293      	cmp	r3, r2
 8103f4a:	d109      	bne.n	8103f60 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8103f4c:	697b      	ldr	r3, [r7, #20]
 8103f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8103f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8103f54:	683b      	ldr	r3, [r7, #0]
 8103f56:	695b      	ldr	r3, [r3, #20]
 8103f58:	019b      	lsls	r3, r3, #6
 8103f5a:	697a      	ldr	r2, [r7, #20]
 8103f5c:	4313      	orrs	r3, r2
 8103f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103f60:	687b      	ldr	r3, [r7, #4]
 8103f62:	697a      	ldr	r2, [r7, #20]
 8103f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	68fa      	ldr	r2, [r7, #12]
 8103f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8103f6c:	683b      	ldr	r3, [r7, #0]
 8103f6e:	685a      	ldr	r2, [r3, #4]
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8103f74:	687b      	ldr	r3, [r7, #4]
 8103f76:	693a      	ldr	r2, [r7, #16]
 8103f78:	621a      	str	r2, [r3, #32]
}
 8103f7a:	bf00      	nop
 8103f7c:	371c      	adds	r7, #28
 8103f7e:	46bd      	mov	sp, r7
 8103f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f84:	4770      	bx	lr
 8103f86:	bf00      	nop
 8103f88:	40010000 	.word	0x40010000
 8103f8c:	40010400 	.word	0x40010400
 8103f90:	40014000 	.word	0x40014000
 8103f94:	40014400 	.word	0x40014400
 8103f98:	40014800 	.word	0x40014800

08103f9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8103f9c:	b480      	push	{r7}
 8103f9e:	b087      	sub	sp, #28
 8103fa0:	af00      	add	r7, sp, #0
 8103fa2:	6078      	str	r0, [r7, #4]
 8103fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8103fa6:	687b      	ldr	r3, [r7, #4]
 8103fa8:	6a1b      	ldr	r3, [r3, #32]
 8103faa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103fae:	687b      	ldr	r3, [r7, #4]
 8103fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	6a1b      	ldr	r3, [r3, #32]
 8103fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	685b      	ldr	r3, [r3, #4]
 8103fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103fbe:	687b      	ldr	r3, [r7, #4]
 8103fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8103fc4:	68fb      	ldr	r3, [r7, #12]
 8103fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103fcc:	683b      	ldr	r3, [r7, #0]
 8103fce:	681b      	ldr	r3, [r3, #0]
 8103fd0:	68fa      	ldr	r2, [r7, #12]
 8103fd2:	4313      	orrs	r3, r2
 8103fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8103fd6:	693b      	ldr	r3, [r7, #16]
 8103fd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8103fdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8103fde:	683b      	ldr	r3, [r7, #0]
 8103fe0:	689b      	ldr	r3, [r3, #8]
 8103fe2:	041b      	lsls	r3, r3, #16
 8103fe4:	693a      	ldr	r2, [r7, #16]
 8103fe6:	4313      	orrs	r3, r2
 8103fe8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103fea:	687b      	ldr	r3, [r7, #4]
 8103fec:	4a17      	ldr	r2, [pc, #92]	; (810404c <TIM_OC5_SetConfig+0xb0>)
 8103fee:	4293      	cmp	r3, r2
 8103ff0:	d00f      	beq.n	8104012 <TIM_OC5_SetConfig+0x76>
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	4a16      	ldr	r2, [pc, #88]	; (8104050 <TIM_OC5_SetConfig+0xb4>)
 8103ff6:	4293      	cmp	r3, r2
 8103ff8:	d00b      	beq.n	8104012 <TIM_OC5_SetConfig+0x76>
 8103ffa:	687b      	ldr	r3, [r7, #4]
 8103ffc:	4a15      	ldr	r2, [pc, #84]	; (8104054 <TIM_OC5_SetConfig+0xb8>)
 8103ffe:	4293      	cmp	r3, r2
 8104000:	d007      	beq.n	8104012 <TIM_OC5_SetConfig+0x76>
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	4a14      	ldr	r2, [pc, #80]	; (8104058 <TIM_OC5_SetConfig+0xbc>)
 8104006:	4293      	cmp	r3, r2
 8104008:	d003      	beq.n	8104012 <TIM_OC5_SetConfig+0x76>
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	4a13      	ldr	r2, [pc, #76]	; (810405c <TIM_OC5_SetConfig+0xc0>)
 810400e:	4293      	cmp	r3, r2
 8104010:	d109      	bne.n	8104026 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8104012:	697b      	ldr	r3, [r7, #20]
 8104014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8104018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810401a:	683b      	ldr	r3, [r7, #0]
 810401c:	695b      	ldr	r3, [r3, #20]
 810401e:	021b      	lsls	r3, r3, #8
 8104020:	697a      	ldr	r2, [r7, #20]
 8104022:	4313      	orrs	r3, r2
 8104024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	697a      	ldr	r2, [r7, #20]
 810402a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810402c:	687b      	ldr	r3, [r7, #4]
 810402e:	68fa      	ldr	r2, [r7, #12]
 8104030:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8104032:	683b      	ldr	r3, [r7, #0]
 8104034:	685a      	ldr	r2, [r3, #4]
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810403a:	687b      	ldr	r3, [r7, #4]
 810403c:	693a      	ldr	r2, [r7, #16]
 810403e:	621a      	str	r2, [r3, #32]
}
 8104040:	bf00      	nop
 8104042:	371c      	adds	r7, #28
 8104044:	46bd      	mov	sp, r7
 8104046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810404a:	4770      	bx	lr
 810404c:	40010000 	.word	0x40010000
 8104050:	40010400 	.word	0x40010400
 8104054:	40014000 	.word	0x40014000
 8104058:	40014400 	.word	0x40014400
 810405c:	40014800 	.word	0x40014800

08104060 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8104060:	b480      	push	{r7}
 8104062:	b087      	sub	sp, #28
 8104064:	af00      	add	r7, sp, #0
 8104066:	6078      	str	r0, [r7, #4]
 8104068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6a1b      	ldr	r3, [r3, #32]
 810406e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	6a1b      	ldr	r3, [r3, #32]
 810407a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810407c:	687b      	ldr	r3, [r7, #4]
 810407e:	685b      	ldr	r3, [r3, #4]
 8104080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8104082:	687b      	ldr	r3, [r7, #4]
 8104084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810408e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8104090:	683b      	ldr	r3, [r7, #0]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	021b      	lsls	r3, r3, #8
 8104096:	68fa      	ldr	r2, [r7, #12]
 8104098:	4313      	orrs	r3, r2
 810409a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810409c:	693b      	ldr	r3, [r7, #16]
 810409e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81040a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81040a4:	683b      	ldr	r3, [r7, #0]
 81040a6:	689b      	ldr	r3, [r3, #8]
 81040a8:	051b      	lsls	r3, r3, #20
 81040aa:	693a      	ldr	r2, [r7, #16]
 81040ac:	4313      	orrs	r3, r2
 81040ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	4a18      	ldr	r2, [pc, #96]	; (8104114 <TIM_OC6_SetConfig+0xb4>)
 81040b4:	4293      	cmp	r3, r2
 81040b6:	d00f      	beq.n	81040d8 <TIM_OC6_SetConfig+0x78>
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	4a17      	ldr	r2, [pc, #92]	; (8104118 <TIM_OC6_SetConfig+0xb8>)
 81040bc:	4293      	cmp	r3, r2
 81040be:	d00b      	beq.n	81040d8 <TIM_OC6_SetConfig+0x78>
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	4a16      	ldr	r2, [pc, #88]	; (810411c <TIM_OC6_SetConfig+0xbc>)
 81040c4:	4293      	cmp	r3, r2
 81040c6:	d007      	beq.n	81040d8 <TIM_OC6_SetConfig+0x78>
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	4a15      	ldr	r2, [pc, #84]	; (8104120 <TIM_OC6_SetConfig+0xc0>)
 81040cc:	4293      	cmp	r3, r2
 81040ce:	d003      	beq.n	81040d8 <TIM_OC6_SetConfig+0x78>
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	4a14      	ldr	r2, [pc, #80]	; (8104124 <TIM_OC6_SetConfig+0xc4>)
 81040d4:	4293      	cmp	r3, r2
 81040d6:	d109      	bne.n	81040ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81040d8:	697b      	ldr	r3, [r7, #20]
 81040da:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81040de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81040e0:	683b      	ldr	r3, [r7, #0]
 81040e2:	695b      	ldr	r3, [r3, #20]
 81040e4:	029b      	lsls	r3, r3, #10
 81040e6:	697a      	ldr	r2, [r7, #20]
 81040e8:	4313      	orrs	r3, r2
 81040ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81040ec:	687b      	ldr	r3, [r7, #4]
 81040ee:	697a      	ldr	r2, [r7, #20]
 81040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	68fa      	ldr	r2, [r7, #12]
 81040f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81040f8:	683b      	ldr	r3, [r7, #0]
 81040fa:	685a      	ldr	r2, [r3, #4]
 81040fc:	687b      	ldr	r3, [r7, #4]
 81040fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	693a      	ldr	r2, [r7, #16]
 8104104:	621a      	str	r2, [r3, #32]
}
 8104106:	bf00      	nop
 8104108:	371c      	adds	r7, #28
 810410a:	46bd      	mov	sp, r7
 810410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104110:	4770      	bx	lr
 8104112:	bf00      	nop
 8104114:	40010000 	.word	0x40010000
 8104118:	40010400 	.word	0x40010400
 810411c:	40014000 	.word	0x40014000
 8104120:	40014400 	.word	0x40014400
 8104124:	40014800 	.word	0x40014800

08104128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104128:	b480      	push	{r7}
 810412a:	b087      	sub	sp, #28
 810412c:	af00      	add	r7, sp, #0
 810412e:	60f8      	str	r0, [r7, #12]
 8104130:	60b9      	str	r1, [r7, #8]
 8104132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8104134:	68fb      	ldr	r3, [r7, #12]
 8104136:	6a1b      	ldr	r3, [r3, #32]
 8104138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810413a:	68fb      	ldr	r3, [r7, #12]
 810413c:	6a1b      	ldr	r3, [r3, #32]
 810413e:	f023 0201 	bic.w	r2, r3, #1
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8104146:	68fb      	ldr	r3, [r7, #12]
 8104148:	699b      	ldr	r3, [r3, #24]
 810414a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810414c:	693b      	ldr	r3, [r7, #16]
 810414e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8104152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	011b      	lsls	r3, r3, #4
 8104158:	693a      	ldr	r2, [r7, #16]
 810415a:	4313      	orrs	r3, r2
 810415c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810415e:	697b      	ldr	r3, [r7, #20]
 8104160:	f023 030a 	bic.w	r3, r3, #10
 8104164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8104166:	697a      	ldr	r2, [r7, #20]
 8104168:	68bb      	ldr	r3, [r7, #8]
 810416a:	4313      	orrs	r3, r2
 810416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810416e:	68fb      	ldr	r3, [r7, #12]
 8104170:	693a      	ldr	r2, [r7, #16]
 8104172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	697a      	ldr	r2, [r7, #20]
 8104178:	621a      	str	r2, [r3, #32]
}
 810417a:	bf00      	nop
 810417c:	371c      	adds	r7, #28
 810417e:	46bd      	mov	sp, r7
 8104180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104184:	4770      	bx	lr

08104186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8104186:	b480      	push	{r7}
 8104188:	b087      	sub	sp, #28
 810418a:	af00      	add	r7, sp, #0
 810418c:	60f8      	str	r0, [r7, #12]
 810418e:	60b9      	str	r1, [r7, #8]
 8104190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	6a1b      	ldr	r3, [r3, #32]
 8104196:	f023 0210 	bic.w	r2, r3, #16
 810419a:	68fb      	ldr	r3, [r7, #12]
 810419c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	699b      	ldr	r3, [r3, #24]
 81041a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	6a1b      	ldr	r3, [r3, #32]
 81041a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81041aa:	697b      	ldr	r3, [r7, #20]
 81041ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81041b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	031b      	lsls	r3, r3, #12
 81041b6:	697a      	ldr	r2, [r7, #20]
 81041b8:	4313      	orrs	r3, r2
 81041ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81041bc:	693b      	ldr	r3, [r7, #16]
 81041be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81041c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81041c4:	68bb      	ldr	r3, [r7, #8]
 81041c6:	011b      	lsls	r3, r3, #4
 81041c8:	693a      	ldr	r2, [r7, #16]
 81041ca:	4313      	orrs	r3, r2
 81041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81041ce:	68fb      	ldr	r3, [r7, #12]
 81041d0:	697a      	ldr	r2, [r7, #20]
 81041d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	693a      	ldr	r2, [r7, #16]
 81041d8:	621a      	str	r2, [r3, #32]
}
 81041da:	bf00      	nop
 81041dc:	371c      	adds	r7, #28
 81041de:	46bd      	mov	sp, r7
 81041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041e4:	4770      	bx	lr

081041e6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81041e6:	b480      	push	{r7}
 81041e8:	b085      	sub	sp, #20
 81041ea:	af00      	add	r7, sp, #0
 81041ec:	6078      	str	r0, [r7, #4]
 81041ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	689b      	ldr	r3, [r3, #8]
 81041f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81041f6:	68fb      	ldr	r3, [r7, #12]
 81041f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81041fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8104202:	683a      	ldr	r2, [r7, #0]
 8104204:	68fb      	ldr	r3, [r7, #12]
 8104206:	4313      	orrs	r3, r2
 8104208:	f043 0307 	orr.w	r3, r3, #7
 810420c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	68fa      	ldr	r2, [r7, #12]
 8104212:	609a      	str	r2, [r3, #8]
}
 8104214:	bf00      	nop
 8104216:	3714      	adds	r7, #20
 8104218:	46bd      	mov	sp, r7
 810421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810421e:	4770      	bx	lr

08104220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8104220:	b480      	push	{r7}
 8104222:	b087      	sub	sp, #28
 8104224:	af00      	add	r7, sp, #0
 8104226:	60f8      	str	r0, [r7, #12]
 8104228:	60b9      	str	r1, [r7, #8]
 810422a:	607a      	str	r2, [r7, #4]
 810422c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810422e:	68fb      	ldr	r3, [r7, #12]
 8104230:	689b      	ldr	r3, [r3, #8]
 8104232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8104234:	697b      	ldr	r3, [r7, #20]
 8104236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810423a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810423c:	683b      	ldr	r3, [r7, #0]
 810423e:	021a      	lsls	r2, r3, #8
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	431a      	orrs	r2, r3
 8104244:	68bb      	ldr	r3, [r7, #8]
 8104246:	4313      	orrs	r3, r2
 8104248:	697a      	ldr	r2, [r7, #20]
 810424a:	4313      	orrs	r3, r2
 810424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810424e:	68fb      	ldr	r3, [r7, #12]
 8104250:	697a      	ldr	r2, [r7, #20]
 8104252:	609a      	str	r2, [r3, #8]
}
 8104254:	bf00      	nop
 8104256:	371c      	adds	r7, #28
 8104258:	46bd      	mov	sp, r7
 810425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810425e:	4770      	bx	lr

08104260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8104260:	b480      	push	{r7}
 8104262:	b087      	sub	sp, #28
 8104264:	af00      	add	r7, sp, #0
 8104266:	60f8      	str	r0, [r7, #12]
 8104268:	60b9      	str	r1, [r7, #8]
 810426a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810426c:	68bb      	ldr	r3, [r7, #8]
 810426e:	f003 031f 	and.w	r3, r3, #31
 8104272:	2201      	movs	r2, #1
 8104274:	fa02 f303 	lsl.w	r3, r2, r3
 8104278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810427a:	68fb      	ldr	r3, [r7, #12]
 810427c:	6a1a      	ldr	r2, [r3, #32]
 810427e:	697b      	ldr	r3, [r7, #20]
 8104280:	43db      	mvns	r3, r3
 8104282:	401a      	ands	r2, r3
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8104288:	68fb      	ldr	r3, [r7, #12]
 810428a:	6a1a      	ldr	r2, [r3, #32]
 810428c:	68bb      	ldr	r3, [r7, #8]
 810428e:	f003 031f 	and.w	r3, r3, #31
 8104292:	6879      	ldr	r1, [r7, #4]
 8104294:	fa01 f303 	lsl.w	r3, r1, r3
 8104298:	431a      	orrs	r2, r3
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	621a      	str	r2, [r3, #32]
}
 810429e:	bf00      	nop
 81042a0:	371c      	adds	r7, #28
 81042a2:	46bd      	mov	sp, r7
 81042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042a8:	4770      	bx	lr
	...

081042ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81042ac:	b480      	push	{r7}
 81042ae:	b085      	sub	sp, #20
 81042b0:	af00      	add	r7, sp, #0
 81042b2:	6078      	str	r0, [r7, #4]
 81042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81042bc:	2b01      	cmp	r3, #1
 81042be:	d101      	bne.n	81042c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81042c0:	2302      	movs	r3, #2
 81042c2:	e068      	b.n	8104396 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	2201      	movs	r2, #1
 81042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	2202      	movs	r2, #2
 81042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	681b      	ldr	r3, [r3, #0]
 81042d8:	685b      	ldr	r3, [r3, #4]
 81042da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	689b      	ldr	r3, [r3, #8]
 81042e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81042e4:	687b      	ldr	r3, [r7, #4]
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	4a2e      	ldr	r2, [pc, #184]	; (81043a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 81042ea:	4293      	cmp	r3, r2
 81042ec:	d004      	beq.n	81042f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81042ee:	687b      	ldr	r3, [r7, #4]
 81042f0:	681b      	ldr	r3, [r3, #0]
 81042f2:	4a2d      	ldr	r2, [pc, #180]	; (81043a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 81042f4:	4293      	cmp	r3, r2
 81042f6:	d108      	bne.n	810430a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81042f8:	68fb      	ldr	r3, [r7, #12]
 81042fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81042fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8104300:	683b      	ldr	r3, [r7, #0]
 8104302:	685b      	ldr	r3, [r3, #4]
 8104304:	68fa      	ldr	r2, [r7, #12]
 8104306:	4313      	orrs	r3, r2
 8104308:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810430a:	68fb      	ldr	r3, [r7, #12]
 810430c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8104310:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8104312:	683b      	ldr	r3, [r7, #0]
 8104314:	681b      	ldr	r3, [r3, #0]
 8104316:	68fa      	ldr	r2, [r7, #12]
 8104318:	4313      	orrs	r3, r2
 810431a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	68fa      	ldr	r2, [r7, #12]
 8104322:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	4a1e      	ldr	r2, [pc, #120]	; (81043a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810432a:	4293      	cmp	r3, r2
 810432c:	d01d      	beq.n	810436a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104336:	d018      	beq.n	810436a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	4a1b      	ldr	r2, [pc, #108]	; (81043ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810433e:	4293      	cmp	r3, r2
 8104340:	d013      	beq.n	810436a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	4a1a      	ldr	r2, [pc, #104]	; (81043b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8104348:	4293      	cmp	r3, r2
 810434a:	d00e      	beq.n	810436a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	4a18      	ldr	r2, [pc, #96]	; (81043b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8104352:	4293      	cmp	r3, r2
 8104354:	d009      	beq.n	810436a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	4a13      	ldr	r2, [pc, #76]	; (81043a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 810435c:	4293      	cmp	r3, r2
 810435e:	d004      	beq.n	810436a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	4a14      	ldr	r2, [pc, #80]	; (81043b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8104366:	4293      	cmp	r3, r2
 8104368:	d10c      	bne.n	8104384 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810436a:	68bb      	ldr	r3, [r7, #8]
 810436c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8104370:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8104372:	683b      	ldr	r3, [r7, #0]
 8104374:	689b      	ldr	r3, [r3, #8]
 8104376:	68ba      	ldr	r2, [r7, #8]
 8104378:	4313      	orrs	r3, r2
 810437a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	681b      	ldr	r3, [r3, #0]
 8104380:	68ba      	ldr	r2, [r7, #8]
 8104382:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	2201      	movs	r2, #1
 8104388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	2200      	movs	r2, #0
 8104390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8104394:	2300      	movs	r3, #0
}
 8104396:	4618      	mov	r0, r3
 8104398:	3714      	adds	r7, #20
 810439a:	46bd      	mov	sp, r7
 810439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043a0:	4770      	bx	lr
 81043a2:	bf00      	nop
 81043a4:	40010000 	.word	0x40010000
 81043a8:	40010400 	.word	0x40010400
 81043ac:	40000400 	.word	0x40000400
 81043b0:	40000800 	.word	0x40000800
 81043b4:	40000c00 	.word	0x40000c00
 81043b8:	40001800 	.word	0x40001800

081043bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81043bc:	b480      	push	{r7}
 81043be:	b085      	sub	sp, #20
 81043c0:	af00      	add	r7, sp, #0
 81043c2:	6078      	str	r0, [r7, #4]
 81043c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81043c6:	2300      	movs	r3, #0
 81043c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81043d0:	2b01      	cmp	r3, #1
 81043d2:	d101      	bne.n	81043d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81043d4:	2302      	movs	r3, #2
 81043d6:	e065      	b.n	81044a4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81043d8:	687b      	ldr	r3, [r7, #4]
 81043da:	2201      	movs	r2, #1
 81043dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81043e6:	683b      	ldr	r3, [r7, #0]
 81043e8:	68db      	ldr	r3, [r3, #12]
 81043ea:	4313      	orrs	r3, r2
 81043ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 81043ee:	68fb      	ldr	r3, [r7, #12]
 81043f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81043f4:	683b      	ldr	r3, [r7, #0]
 81043f6:	689b      	ldr	r3, [r3, #8]
 81043f8:	4313      	orrs	r3, r2
 81043fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81043fc:	68fb      	ldr	r3, [r7, #12]
 81043fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8104402:	683b      	ldr	r3, [r7, #0]
 8104404:	685b      	ldr	r3, [r3, #4]
 8104406:	4313      	orrs	r3, r2
 8104408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810440a:	68fb      	ldr	r3, [r7, #12]
 810440c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8104410:	683b      	ldr	r3, [r7, #0]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	4313      	orrs	r3, r2
 8104416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8104418:	68fb      	ldr	r3, [r7, #12]
 810441a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810441e:	683b      	ldr	r3, [r7, #0]
 8104420:	691b      	ldr	r3, [r3, #16]
 8104422:	4313      	orrs	r3, r2
 8104424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810442c:	683b      	ldr	r3, [r7, #0]
 810442e:	695b      	ldr	r3, [r3, #20]
 8104430:	4313      	orrs	r3, r2
 8104432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810443a:	683b      	ldr	r3, [r7, #0]
 810443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810443e:	4313      	orrs	r3, r2
 8104440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8104442:	68fb      	ldr	r3, [r7, #12]
 8104444:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8104448:	683b      	ldr	r3, [r7, #0]
 810444a:	699b      	ldr	r3, [r3, #24]
 810444c:	041b      	lsls	r3, r3, #16
 810444e:	4313      	orrs	r3, r2
 8104450:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	681b      	ldr	r3, [r3, #0]
 8104456:	4a16      	ldr	r2, [pc, #88]	; (81044b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8104458:	4293      	cmp	r3, r2
 810445a:	d004      	beq.n	8104466 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	4a14      	ldr	r2, [pc, #80]	; (81044b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8104462:	4293      	cmp	r3, r2
 8104464:	d115      	bne.n	8104492 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8104466:	68fb      	ldr	r3, [r7, #12]
 8104468:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810446c:	683b      	ldr	r3, [r7, #0]
 810446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104470:	051b      	lsls	r3, r3, #20
 8104472:	4313      	orrs	r3, r2
 8104474:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8104476:	68fb      	ldr	r3, [r7, #12]
 8104478:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810447c:	683b      	ldr	r3, [r7, #0]
 810447e:	69db      	ldr	r3, [r3, #28]
 8104480:	4313      	orrs	r3, r2
 8104482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8104484:	68fb      	ldr	r3, [r7, #12]
 8104486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810448a:	683b      	ldr	r3, [r7, #0]
 810448c:	6a1b      	ldr	r3, [r3, #32]
 810448e:	4313      	orrs	r3, r2
 8104490:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	681b      	ldr	r3, [r3, #0]
 8104496:	68fa      	ldr	r2, [r7, #12]
 8104498:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810449a:	687b      	ldr	r3, [r7, #4]
 810449c:	2200      	movs	r2, #0
 810449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81044a2:	2300      	movs	r3, #0
}
 81044a4:	4618      	mov	r0, r3
 81044a6:	3714      	adds	r7, #20
 81044a8:	46bd      	mov	sp, r7
 81044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ae:	4770      	bx	lr
 81044b0:	40010000 	.word	0x40010000
 81044b4:	40010400 	.word	0x40010400

081044b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81044b8:	b480      	push	{r7}
 81044ba:	b083      	sub	sp, #12
 81044bc:	af00      	add	r7, sp, #0
 81044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81044c0:	bf00      	nop
 81044c2:	370c      	adds	r7, #12
 81044c4:	46bd      	mov	sp, r7
 81044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ca:	4770      	bx	lr

081044cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81044cc:	b480      	push	{r7}
 81044ce:	b083      	sub	sp, #12
 81044d0:	af00      	add	r7, sp, #0
 81044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81044d4:	bf00      	nop
 81044d6:	370c      	adds	r7, #12
 81044d8:	46bd      	mov	sp, r7
 81044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044de:	4770      	bx	lr

081044e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81044e0:	b480      	push	{r7}
 81044e2:	b083      	sub	sp, #12
 81044e4:	af00      	add	r7, sp, #0
 81044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81044e8:	bf00      	nop
 81044ea:	370c      	adds	r7, #12
 81044ec:	46bd      	mov	sp, r7
 81044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044f2:	4770      	bx	lr

081044f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81044f4:	b580      	push	{r7, lr}
 81044f6:	b082      	sub	sp, #8
 81044f8:	af00      	add	r7, sp, #0
 81044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	2b00      	cmp	r3, #0
 8104500:	d101      	bne.n	8104506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104502:	2301      	movs	r3, #1
 8104504:	e042      	b.n	810458c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104506:	687b      	ldr	r3, [r7, #4]
 8104508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810450c:	2b00      	cmp	r3, #0
 810450e:	d106      	bne.n	810451e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104510:	687b      	ldr	r3, [r7, #4]
 8104512:	2200      	movs	r2, #0
 8104514:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104518:	6878      	ldr	r0, [r7, #4]
 810451a:	f7fc fef5 	bl	8101308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	2224      	movs	r2, #36	; 0x24
 8104522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	681b      	ldr	r3, [r3, #0]
 810452a:	681a      	ldr	r2, [r3, #0]
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	f022 0201 	bic.w	r2, r2, #1
 8104534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104536:	6878      	ldr	r0, [r7, #4]
 8104538:	f000 f8c2 	bl	81046c0 <UART_SetConfig>
 810453c:	4603      	mov	r3, r0
 810453e:	2b01      	cmp	r3, #1
 8104540:	d101      	bne.n	8104546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104542:	2301      	movs	r3, #1
 8104544:	e022      	b.n	810458c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810454a:	2b00      	cmp	r3, #0
 810454c:	d002      	beq.n	8104554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810454e:	6878      	ldr	r0, [r7, #4]
 8104550:	f000 fe66 	bl	8105220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	681b      	ldr	r3, [r3, #0]
 8104558:	685a      	ldr	r2, [r3, #4]
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	681b      	ldr	r3, [r3, #0]
 810455e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	689a      	ldr	r2, [r3, #8]
 810456a:	687b      	ldr	r3, [r7, #4]
 810456c:	681b      	ldr	r3, [r3, #0]
 810456e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	681a      	ldr	r2, [r3, #0]
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	681b      	ldr	r3, [r3, #0]
 810457e:	f042 0201 	orr.w	r2, r2, #1
 8104582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104584:	6878      	ldr	r0, [r7, #4]
 8104586:	f000 feed 	bl	8105364 <UART_CheckIdleState>
 810458a:	4603      	mov	r3, r0
}
 810458c:	4618      	mov	r0, r3
 810458e:	3708      	adds	r7, #8
 8104590:	46bd      	mov	sp, r7
 8104592:	bd80      	pop	{r7, pc}

08104594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104594:	b580      	push	{r7, lr}
 8104596:	b08a      	sub	sp, #40	; 0x28
 8104598:	af02      	add	r7, sp, #8
 810459a:	60f8      	str	r0, [r7, #12]
 810459c:	60b9      	str	r1, [r7, #8]
 810459e:	603b      	str	r3, [r7, #0]
 81045a0:	4613      	mov	r3, r2
 81045a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81045aa:	2b20      	cmp	r3, #32
 81045ac:	f040 8083 	bne.w	81046b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81045b0:	68bb      	ldr	r3, [r7, #8]
 81045b2:	2b00      	cmp	r3, #0
 81045b4:	d002      	beq.n	81045bc <HAL_UART_Transmit+0x28>
 81045b6:	88fb      	ldrh	r3, [r7, #6]
 81045b8:	2b00      	cmp	r3, #0
 81045ba:	d101      	bne.n	81045c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81045bc:	2301      	movs	r3, #1
 81045be:	e07b      	b.n	81046b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81045c0:	68fb      	ldr	r3, [r7, #12]
 81045c2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81045c6:	2b01      	cmp	r3, #1
 81045c8:	d101      	bne.n	81045ce <HAL_UART_Transmit+0x3a>
 81045ca:	2302      	movs	r3, #2
 81045cc:	e074      	b.n	81046b8 <HAL_UART_Transmit+0x124>
 81045ce:	68fb      	ldr	r3, [r7, #12]
 81045d0:	2201      	movs	r2, #1
 81045d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81045d6:	68fb      	ldr	r3, [r7, #12]
 81045d8:	2200      	movs	r2, #0
 81045da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81045de:	68fb      	ldr	r3, [r7, #12]
 81045e0:	2221      	movs	r2, #33	; 0x21
 81045e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 81045e6:	f7fc ff75 	bl	81014d4 <HAL_GetTick>
 81045ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81045ec:	68fb      	ldr	r3, [r7, #12]
 81045ee:	88fa      	ldrh	r2, [r7, #6]
 81045f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81045f4:	68fb      	ldr	r3, [r7, #12]
 81045f6:	88fa      	ldrh	r2, [r7, #6]
 81045f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81045fc:	68fb      	ldr	r3, [r7, #12]
 81045fe:	689b      	ldr	r3, [r3, #8]
 8104600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104604:	d108      	bne.n	8104618 <HAL_UART_Transmit+0x84>
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	691b      	ldr	r3, [r3, #16]
 810460a:	2b00      	cmp	r3, #0
 810460c:	d104      	bne.n	8104618 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810460e:	2300      	movs	r3, #0
 8104610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8104612:	68bb      	ldr	r3, [r7, #8]
 8104614:	61bb      	str	r3, [r7, #24]
 8104616:	e003      	b.n	8104620 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104618:	68bb      	ldr	r3, [r7, #8]
 810461a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810461c:	2300      	movs	r3, #0
 810461e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8104620:	68fb      	ldr	r3, [r7, #12]
 8104622:	2200      	movs	r2, #0
 8104624:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8104628:	e02c      	b.n	8104684 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810462a:	683b      	ldr	r3, [r7, #0]
 810462c:	9300      	str	r3, [sp, #0]
 810462e:	697b      	ldr	r3, [r7, #20]
 8104630:	2200      	movs	r2, #0
 8104632:	2180      	movs	r1, #128	; 0x80
 8104634:	68f8      	ldr	r0, [r7, #12]
 8104636:	f000 fedd 	bl	81053f4 <UART_WaitOnFlagUntilTimeout>
 810463a:	4603      	mov	r3, r0
 810463c:	2b00      	cmp	r3, #0
 810463e:	d001      	beq.n	8104644 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104640:	2303      	movs	r3, #3
 8104642:	e039      	b.n	81046b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104644:	69fb      	ldr	r3, [r7, #28]
 8104646:	2b00      	cmp	r3, #0
 8104648:	d10b      	bne.n	8104662 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810464a:	69bb      	ldr	r3, [r7, #24]
 810464c:	881b      	ldrh	r3, [r3, #0]
 810464e:	461a      	mov	r2, r3
 8104650:	68fb      	ldr	r3, [r7, #12]
 8104652:	681b      	ldr	r3, [r3, #0]
 8104654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810465a:	69bb      	ldr	r3, [r7, #24]
 810465c:	3302      	adds	r3, #2
 810465e:	61bb      	str	r3, [r7, #24]
 8104660:	e007      	b.n	8104672 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104662:	69fb      	ldr	r3, [r7, #28]
 8104664:	781a      	ldrb	r2, [r3, #0]
 8104666:	68fb      	ldr	r3, [r7, #12]
 8104668:	681b      	ldr	r3, [r3, #0]
 810466a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810466c:	69fb      	ldr	r3, [r7, #28]
 810466e:	3301      	adds	r3, #1
 8104670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104672:	68fb      	ldr	r3, [r7, #12]
 8104674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104678:	b29b      	uxth	r3, r3
 810467a:	3b01      	subs	r3, #1
 810467c:	b29a      	uxth	r2, r3
 810467e:	68fb      	ldr	r3, [r7, #12]
 8104680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104684:	68fb      	ldr	r3, [r7, #12]
 8104686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810468a:	b29b      	uxth	r3, r3
 810468c:	2b00      	cmp	r3, #0
 810468e:	d1cc      	bne.n	810462a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104690:	683b      	ldr	r3, [r7, #0]
 8104692:	9300      	str	r3, [sp, #0]
 8104694:	697b      	ldr	r3, [r7, #20]
 8104696:	2200      	movs	r2, #0
 8104698:	2140      	movs	r1, #64	; 0x40
 810469a:	68f8      	ldr	r0, [r7, #12]
 810469c:	f000 feaa 	bl	81053f4 <UART_WaitOnFlagUntilTimeout>
 81046a0:	4603      	mov	r3, r0
 81046a2:	2b00      	cmp	r3, #0
 81046a4:	d001      	beq.n	81046aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81046a6:	2303      	movs	r3, #3
 81046a8:	e006      	b.n	81046b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81046aa:	68fb      	ldr	r3, [r7, #12]
 81046ac:	2220      	movs	r2, #32
 81046ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 81046b2:	2300      	movs	r3, #0
 81046b4:	e000      	b.n	81046b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81046b6:	2302      	movs	r3, #2
  }
}
 81046b8:	4618      	mov	r0, r3
 81046ba:	3720      	adds	r7, #32
 81046bc:	46bd      	mov	sp, r7
 81046be:	bd80      	pop	{r7, pc}

081046c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81046c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 81046c4:	b08e      	sub	sp, #56	; 0x38
 81046c6:	af00      	add	r7, sp, #0
 81046c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81046ca:	2300      	movs	r3, #0
 81046cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	689a      	ldr	r2, [r3, #8]
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	691b      	ldr	r3, [r3, #16]
 81046d8:	431a      	orrs	r2, r3
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	695b      	ldr	r3, [r3, #20]
 81046de:	431a      	orrs	r2, r3
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	69db      	ldr	r3, [r3, #28]
 81046e4:	4313      	orrs	r3, r2
 81046e6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81046ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81046ee:	4313      	orrs	r3, r2
 81046f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	681a      	ldr	r2, [r3, #0]
 81046f8:	4bc2      	ldr	r3, [pc, #776]	; (8104a04 <UART_SetConfig+0x344>)
 81046fa:	4013      	ands	r3, r2
 81046fc:	687a      	ldr	r2, [r7, #4]
 81046fe:	6812      	ldr	r2, [r2, #0]
 8104700:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104702:	430b      	orrs	r3, r1
 8104704:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	685b      	ldr	r3, [r3, #4]
 810470c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	68da      	ldr	r2, [r3, #12]
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	681b      	ldr	r3, [r3, #0]
 8104718:	430a      	orrs	r2, r1
 810471a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	699b      	ldr	r3, [r3, #24]
 8104720:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	4ab8      	ldr	r2, [pc, #736]	; (8104a08 <UART_SetConfig+0x348>)
 8104728:	4293      	cmp	r3, r2
 810472a:	d004      	beq.n	8104736 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810472c:	687b      	ldr	r3, [r7, #4]
 810472e:	6a1b      	ldr	r3, [r3, #32]
 8104730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104732:	4313      	orrs	r3, r2
 8104734:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104736:	687b      	ldr	r3, [r7, #4]
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	689b      	ldr	r3, [r3, #8]
 810473c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104740:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104744:	687a      	ldr	r2, [r7, #4]
 8104746:	6812      	ldr	r2, [r2, #0]
 8104748:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810474a:	430b      	orrs	r3, r1
 810474c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104754:	f023 010f 	bic.w	r1, r3, #15
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	430a      	orrs	r2, r1
 8104762:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	4aa8      	ldr	r2, [pc, #672]	; (8104a0c <UART_SetConfig+0x34c>)
 810476a:	4293      	cmp	r3, r2
 810476c:	d177      	bne.n	810485e <UART_SetConfig+0x19e>
 810476e:	4ba8      	ldr	r3, [pc, #672]	; (8104a10 <UART_SetConfig+0x350>)
 8104770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104776:	2b28      	cmp	r3, #40	; 0x28
 8104778:	d86c      	bhi.n	8104854 <UART_SetConfig+0x194>
 810477a:	a201      	add	r2, pc, #4	; (adr r2, 8104780 <UART_SetConfig+0xc0>)
 810477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104780:	08104825 	.word	0x08104825
 8104784:	08104855 	.word	0x08104855
 8104788:	08104855 	.word	0x08104855
 810478c:	08104855 	.word	0x08104855
 8104790:	08104855 	.word	0x08104855
 8104794:	08104855 	.word	0x08104855
 8104798:	08104855 	.word	0x08104855
 810479c:	08104855 	.word	0x08104855
 81047a0:	0810482d 	.word	0x0810482d
 81047a4:	08104855 	.word	0x08104855
 81047a8:	08104855 	.word	0x08104855
 81047ac:	08104855 	.word	0x08104855
 81047b0:	08104855 	.word	0x08104855
 81047b4:	08104855 	.word	0x08104855
 81047b8:	08104855 	.word	0x08104855
 81047bc:	08104855 	.word	0x08104855
 81047c0:	08104835 	.word	0x08104835
 81047c4:	08104855 	.word	0x08104855
 81047c8:	08104855 	.word	0x08104855
 81047cc:	08104855 	.word	0x08104855
 81047d0:	08104855 	.word	0x08104855
 81047d4:	08104855 	.word	0x08104855
 81047d8:	08104855 	.word	0x08104855
 81047dc:	08104855 	.word	0x08104855
 81047e0:	0810483d 	.word	0x0810483d
 81047e4:	08104855 	.word	0x08104855
 81047e8:	08104855 	.word	0x08104855
 81047ec:	08104855 	.word	0x08104855
 81047f0:	08104855 	.word	0x08104855
 81047f4:	08104855 	.word	0x08104855
 81047f8:	08104855 	.word	0x08104855
 81047fc:	08104855 	.word	0x08104855
 8104800:	08104845 	.word	0x08104845
 8104804:	08104855 	.word	0x08104855
 8104808:	08104855 	.word	0x08104855
 810480c:	08104855 	.word	0x08104855
 8104810:	08104855 	.word	0x08104855
 8104814:	08104855 	.word	0x08104855
 8104818:	08104855 	.word	0x08104855
 810481c:	08104855 	.word	0x08104855
 8104820:	0810484d 	.word	0x0810484d
 8104824:	2301      	movs	r3, #1
 8104826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810482a:	e231      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810482c:	2304      	movs	r3, #4
 810482e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104832:	e22d      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104834:	2308      	movs	r3, #8
 8104836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810483a:	e229      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810483c:	2310      	movs	r3, #16
 810483e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104842:	e225      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104844:	2320      	movs	r3, #32
 8104846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810484a:	e221      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810484c:	2340      	movs	r3, #64	; 0x40
 810484e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104852:	e21d      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104854:	2380      	movs	r3, #128	; 0x80
 8104856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810485a:	bf00      	nop
 810485c:	e218      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	4a6c      	ldr	r2, [pc, #432]	; (8104a14 <UART_SetConfig+0x354>)
 8104864:	4293      	cmp	r3, r2
 8104866:	d132      	bne.n	81048ce <UART_SetConfig+0x20e>
 8104868:	4b69      	ldr	r3, [pc, #420]	; (8104a10 <UART_SetConfig+0x350>)
 810486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810486c:	f003 0307 	and.w	r3, r3, #7
 8104870:	2b05      	cmp	r3, #5
 8104872:	d827      	bhi.n	81048c4 <UART_SetConfig+0x204>
 8104874:	a201      	add	r2, pc, #4	; (adr r2, 810487c <UART_SetConfig+0x1bc>)
 8104876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810487a:	bf00      	nop
 810487c:	08104895 	.word	0x08104895
 8104880:	0810489d 	.word	0x0810489d
 8104884:	081048a5 	.word	0x081048a5
 8104888:	081048ad 	.word	0x081048ad
 810488c:	081048b5 	.word	0x081048b5
 8104890:	081048bd 	.word	0x081048bd
 8104894:	2300      	movs	r3, #0
 8104896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810489a:	e1f9      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810489c:	2304      	movs	r3, #4
 810489e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048a2:	e1f5      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81048a4:	2308      	movs	r3, #8
 81048a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048aa:	e1f1      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81048ac:	2310      	movs	r3, #16
 81048ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048b2:	e1ed      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81048b4:	2320      	movs	r3, #32
 81048b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048ba:	e1e9      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81048bc:	2340      	movs	r3, #64	; 0x40
 81048be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048c2:	e1e5      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81048c4:	2380      	movs	r3, #128	; 0x80
 81048c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048ca:	bf00      	nop
 81048cc:	e1e0      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81048ce:	687b      	ldr	r3, [r7, #4]
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	4a51      	ldr	r2, [pc, #324]	; (8104a18 <UART_SetConfig+0x358>)
 81048d4:	4293      	cmp	r3, r2
 81048d6:	d132      	bne.n	810493e <UART_SetConfig+0x27e>
 81048d8:	4b4d      	ldr	r3, [pc, #308]	; (8104a10 <UART_SetConfig+0x350>)
 81048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048dc:	f003 0307 	and.w	r3, r3, #7
 81048e0:	2b05      	cmp	r3, #5
 81048e2:	d827      	bhi.n	8104934 <UART_SetConfig+0x274>
 81048e4:	a201      	add	r2, pc, #4	; (adr r2, 81048ec <UART_SetConfig+0x22c>)
 81048e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048ea:	bf00      	nop
 81048ec:	08104905 	.word	0x08104905
 81048f0:	0810490d 	.word	0x0810490d
 81048f4:	08104915 	.word	0x08104915
 81048f8:	0810491d 	.word	0x0810491d
 81048fc:	08104925 	.word	0x08104925
 8104900:	0810492d 	.word	0x0810492d
 8104904:	2300      	movs	r3, #0
 8104906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810490a:	e1c1      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810490c:	2304      	movs	r3, #4
 810490e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104912:	e1bd      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104914:	2308      	movs	r3, #8
 8104916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810491a:	e1b9      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810491c:	2310      	movs	r3, #16
 810491e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104922:	e1b5      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104924:	2320      	movs	r3, #32
 8104926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810492a:	e1b1      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810492c:	2340      	movs	r3, #64	; 0x40
 810492e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104932:	e1ad      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104934:	2380      	movs	r3, #128	; 0x80
 8104936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810493a:	bf00      	nop
 810493c:	e1a8      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810493e:	687b      	ldr	r3, [r7, #4]
 8104940:	681b      	ldr	r3, [r3, #0]
 8104942:	4a36      	ldr	r2, [pc, #216]	; (8104a1c <UART_SetConfig+0x35c>)
 8104944:	4293      	cmp	r3, r2
 8104946:	d132      	bne.n	81049ae <UART_SetConfig+0x2ee>
 8104948:	4b31      	ldr	r3, [pc, #196]	; (8104a10 <UART_SetConfig+0x350>)
 810494a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810494c:	f003 0307 	and.w	r3, r3, #7
 8104950:	2b05      	cmp	r3, #5
 8104952:	d827      	bhi.n	81049a4 <UART_SetConfig+0x2e4>
 8104954:	a201      	add	r2, pc, #4	; (adr r2, 810495c <UART_SetConfig+0x29c>)
 8104956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810495a:	bf00      	nop
 810495c:	08104975 	.word	0x08104975
 8104960:	0810497d 	.word	0x0810497d
 8104964:	08104985 	.word	0x08104985
 8104968:	0810498d 	.word	0x0810498d
 810496c:	08104995 	.word	0x08104995
 8104970:	0810499d 	.word	0x0810499d
 8104974:	2300      	movs	r3, #0
 8104976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810497a:	e189      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810497c:	2304      	movs	r3, #4
 810497e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104982:	e185      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104984:	2308      	movs	r3, #8
 8104986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810498a:	e181      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810498c:	2310      	movs	r3, #16
 810498e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104992:	e17d      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104994:	2320      	movs	r3, #32
 8104996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810499a:	e179      	b.n	8104c90 <UART_SetConfig+0x5d0>
 810499c:	2340      	movs	r3, #64	; 0x40
 810499e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049a2:	e175      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81049a4:	2380      	movs	r3, #128	; 0x80
 81049a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049aa:	bf00      	nop
 81049ac:	e170      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	681b      	ldr	r3, [r3, #0]
 81049b2:	4a1b      	ldr	r2, [pc, #108]	; (8104a20 <UART_SetConfig+0x360>)
 81049b4:	4293      	cmp	r3, r2
 81049b6:	d142      	bne.n	8104a3e <UART_SetConfig+0x37e>
 81049b8:	4b15      	ldr	r3, [pc, #84]	; (8104a10 <UART_SetConfig+0x350>)
 81049ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049bc:	f003 0307 	and.w	r3, r3, #7
 81049c0:	2b05      	cmp	r3, #5
 81049c2:	d837      	bhi.n	8104a34 <UART_SetConfig+0x374>
 81049c4:	a201      	add	r2, pc, #4	; (adr r2, 81049cc <UART_SetConfig+0x30c>)
 81049c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049ca:	bf00      	nop
 81049cc:	081049e5 	.word	0x081049e5
 81049d0:	081049ed 	.word	0x081049ed
 81049d4:	081049f5 	.word	0x081049f5
 81049d8:	081049fd 	.word	0x081049fd
 81049dc:	08104a25 	.word	0x08104a25
 81049e0:	08104a2d 	.word	0x08104a2d
 81049e4:	2300      	movs	r3, #0
 81049e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049ea:	e151      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81049ec:	2304      	movs	r3, #4
 81049ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049f2:	e14d      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81049f4:	2308      	movs	r3, #8
 81049f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049fa:	e149      	b.n	8104c90 <UART_SetConfig+0x5d0>
 81049fc:	2310      	movs	r3, #16
 81049fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104a02:	e145      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104a04:	cfff69f3 	.word	0xcfff69f3
 8104a08:	58000c00 	.word	0x58000c00
 8104a0c:	40011000 	.word	0x40011000
 8104a10:	58024400 	.word	0x58024400
 8104a14:	40004400 	.word	0x40004400
 8104a18:	40004800 	.word	0x40004800
 8104a1c:	40004c00 	.word	0x40004c00
 8104a20:	40005000 	.word	0x40005000
 8104a24:	2320      	movs	r3, #32
 8104a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104a2a:	e131      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104a2c:	2340      	movs	r3, #64	; 0x40
 8104a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104a32:	e12d      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104a34:	2380      	movs	r3, #128	; 0x80
 8104a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104a3a:	bf00      	nop
 8104a3c:	e128      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104a3e:	687b      	ldr	r3, [r7, #4]
 8104a40:	681b      	ldr	r3, [r3, #0]
 8104a42:	4ab6      	ldr	r2, [pc, #728]	; (8104d1c <UART_SetConfig+0x65c>)
 8104a44:	4293      	cmp	r3, r2
 8104a46:	d178      	bne.n	8104b3a <UART_SetConfig+0x47a>
 8104a48:	4bb5      	ldr	r3, [pc, #724]	; (8104d20 <UART_SetConfig+0x660>)
 8104a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104a50:	2b28      	cmp	r3, #40	; 0x28
 8104a52:	d86d      	bhi.n	8104b30 <UART_SetConfig+0x470>
 8104a54:	a201      	add	r2, pc, #4	; (adr r2, 8104a5c <UART_SetConfig+0x39c>)
 8104a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a5a:	bf00      	nop
 8104a5c:	08104b01 	.word	0x08104b01
 8104a60:	08104b31 	.word	0x08104b31
 8104a64:	08104b31 	.word	0x08104b31
 8104a68:	08104b31 	.word	0x08104b31
 8104a6c:	08104b31 	.word	0x08104b31
 8104a70:	08104b31 	.word	0x08104b31
 8104a74:	08104b31 	.word	0x08104b31
 8104a78:	08104b31 	.word	0x08104b31
 8104a7c:	08104b09 	.word	0x08104b09
 8104a80:	08104b31 	.word	0x08104b31
 8104a84:	08104b31 	.word	0x08104b31
 8104a88:	08104b31 	.word	0x08104b31
 8104a8c:	08104b31 	.word	0x08104b31
 8104a90:	08104b31 	.word	0x08104b31
 8104a94:	08104b31 	.word	0x08104b31
 8104a98:	08104b31 	.word	0x08104b31
 8104a9c:	08104b11 	.word	0x08104b11
 8104aa0:	08104b31 	.word	0x08104b31
 8104aa4:	08104b31 	.word	0x08104b31
 8104aa8:	08104b31 	.word	0x08104b31
 8104aac:	08104b31 	.word	0x08104b31
 8104ab0:	08104b31 	.word	0x08104b31
 8104ab4:	08104b31 	.word	0x08104b31
 8104ab8:	08104b31 	.word	0x08104b31
 8104abc:	08104b19 	.word	0x08104b19
 8104ac0:	08104b31 	.word	0x08104b31
 8104ac4:	08104b31 	.word	0x08104b31
 8104ac8:	08104b31 	.word	0x08104b31
 8104acc:	08104b31 	.word	0x08104b31
 8104ad0:	08104b31 	.word	0x08104b31
 8104ad4:	08104b31 	.word	0x08104b31
 8104ad8:	08104b31 	.word	0x08104b31
 8104adc:	08104b21 	.word	0x08104b21
 8104ae0:	08104b31 	.word	0x08104b31
 8104ae4:	08104b31 	.word	0x08104b31
 8104ae8:	08104b31 	.word	0x08104b31
 8104aec:	08104b31 	.word	0x08104b31
 8104af0:	08104b31 	.word	0x08104b31
 8104af4:	08104b31 	.word	0x08104b31
 8104af8:	08104b31 	.word	0x08104b31
 8104afc:	08104b29 	.word	0x08104b29
 8104b00:	2301      	movs	r3, #1
 8104b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b06:	e0c3      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b08:	2304      	movs	r3, #4
 8104b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b0e:	e0bf      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b10:	2308      	movs	r3, #8
 8104b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b16:	e0bb      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b18:	2310      	movs	r3, #16
 8104b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b1e:	e0b7      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b20:	2320      	movs	r3, #32
 8104b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b26:	e0b3      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b28:	2340      	movs	r3, #64	; 0x40
 8104b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b2e:	e0af      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b30:	2380      	movs	r3, #128	; 0x80
 8104b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b36:	bf00      	nop
 8104b38:	e0aa      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b3a:	687b      	ldr	r3, [r7, #4]
 8104b3c:	681b      	ldr	r3, [r3, #0]
 8104b3e:	4a79      	ldr	r2, [pc, #484]	; (8104d24 <UART_SetConfig+0x664>)
 8104b40:	4293      	cmp	r3, r2
 8104b42:	d132      	bne.n	8104baa <UART_SetConfig+0x4ea>
 8104b44:	4b76      	ldr	r3, [pc, #472]	; (8104d20 <UART_SetConfig+0x660>)
 8104b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b48:	f003 0307 	and.w	r3, r3, #7
 8104b4c:	2b05      	cmp	r3, #5
 8104b4e:	d827      	bhi.n	8104ba0 <UART_SetConfig+0x4e0>
 8104b50:	a201      	add	r2, pc, #4	; (adr r2, 8104b58 <UART_SetConfig+0x498>)
 8104b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b56:	bf00      	nop
 8104b58:	08104b71 	.word	0x08104b71
 8104b5c:	08104b79 	.word	0x08104b79
 8104b60:	08104b81 	.word	0x08104b81
 8104b64:	08104b89 	.word	0x08104b89
 8104b68:	08104b91 	.word	0x08104b91
 8104b6c:	08104b99 	.word	0x08104b99
 8104b70:	2300      	movs	r3, #0
 8104b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b76:	e08b      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b78:	2304      	movs	r3, #4
 8104b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b7e:	e087      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b80:	2308      	movs	r3, #8
 8104b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b86:	e083      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b88:	2310      	movs	r3, #16
 8104b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b8e:	e07f      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b90:	2320      	movs	r3, #32
 8104b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b96:	e07b      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104b98:	2340      	movs	r3, #64	; 0x40
 8104b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b9e:	e077      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104ba0:	2380      	movs	r3, #128	; 0x80
 8104ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ba6:	bf00      	nop
 8104ba8:	e072      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104baa:	687b      	ldr	r3, [r7, #4]
 8104bac:	681b      	ldr	r3, [r3, #0]
 8104bae:	4a5e      	ldr	r2, [pc, #376]	; (8104d28 <UART_SetConfig+0x668>)
 8104bb0:	4293      	cmp	r3, r2
 8104bb2:	d132      	bne.n	8104c1a <UART_SetConfig+0x55a>
 8104bb4:	4b5a      	ldr	r3, [pc, #360]	; (8104d20 <UART_SetConfig+0x660>)
 8104bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104bb8:	f003 0307 	and.w	r3, r3, #7
 8104bbc:	2b05      	cmp	r3, #5
 8104bbe:	d827      	bhi.n	8104c10 <UART_SetConfig+0x550>
 8104bc0:	a201      	add	r2, pc, #4	; (adr r2, 8104bc8 <UART_SetConfig+0x508>)
 8104bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104bc6:	bf00      	nop
 8104bc8:	08104be1 	.word	0x08104be1
 8104bcc:	08104be9 	.word	0x08104be9
 8104bd0:	08104bf1 	.word	0x08104bf1
 8104bd4:	08104bf9 	.word	0x08104bf9
 8104bd8:	08104c01 	.word	0x08104c01
 8104bdc:	08104c09 	.word	0x08104c09
 8104be0:	2300      	movs	r3, #0
 8104be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104be6:	e053      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104be8:	2304      	movs	r3, #4
 8104bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104bee:	e04f      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104bf0:	2308      	movs	r3, #8
 8104bf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104bf6:	e04b      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104bf8:	2310      	movs	r3, #16
 8104bfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104bfe:	e047      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c00:	2320      	movs	r3, #32
 8104c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c06:	e043      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c08:	2340      	movs	r3, #64	; 0x40
 8104c0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c0e:	e03f      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c10:	2380      	movs	r3, #128	; 0x80
 8104c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c16:	bf00      	nop
 8104c18:	e03a      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	681b      	ldr	r3, [r3, #0]
 8104c1e:	4a43      	ldr	r2, [pc, #268]	; (8104d2c <UART_SetConfig+0x66c>)
 8104c20:	4293      	cmp	r3, r2
 8104c22:	d132      	bne.n	8104c8a <UART_SetConfig+0x5ca>
 8104c24:	4b3e      	ldr	r3, [pc, #248]	; (8104d20 <UART_SetConfig+0x660>)
 8104c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104c28:	f003 0307 	and.w	r3, r3, #7
 8104c2c:	2b05      	cmp	r3, #5
 8104c2e:	d827      	bhi.n	8104c80 <UART_SetConfig+0x5c0>
 8104c30:	a201      	add	r2, pc, #4	; (adr r2, 8104c38 <UART_SetConfig+0x578>)
 8104c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c36:	bf00      	nop
 8104c38:	08104c51 	.word	0x08104c51
 8104c3c:	08104c59 	.word	0x08104c59
 8104c40:	08104c61 	.word	0x08104c61
 8104c44:	08104c69 	.word	0x08104c69
 8104c48:	08104c71 	.word	0x08104c71
 8104c4c:	08104c79 	.word	0x08104c79
 8104c50:	2302      	movs	r3, #2
 8104c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c56:	e01b      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c58:	2304      	movs	r3, #4
 8104c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c5e:	e017      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c60:	2308      	movs	r3, #8
 8104c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c66:	e013      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c68:	2310      	movs	r3, #16
 8104c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c6e:	e00f      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c70:	2320      	movs	r3, #32
 8104c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c76:	e00b      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c78:	2340      	movs	r3, #64	; 0x40
 8104c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c7e:	e007      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c80:	2380      	movs	r3, #128	; 0x80
 8104c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c86:	bf00      	nop
 8104c88:	e002      	b.n	8104c90 <UART_SetConfig+0x5d0>
 8104c8a:	2380      	movs	r3, #128	; 0x80
 8104c8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	4a25      	ldr	r2, [pc, #148]	; (8104d2c <UART_SetConfig+0x66c>)
 8104c96:	4293      	cmp	r3, r2
 8104c98:	f040 80b8 	bne.w	8104e0c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8104c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8104ca0:	2b08      	cmp	r3, #8
 8104ca2:	d019      	beq.n	8104cd8 <UART_SetConfig+0x618>
 8104ca4:	2b08      	cmp	r3, #8
 8104ca6:	dc04      	bgt.n	8104cb2 <UART_SetConfig+0x5f2>
 8104ca8:	2b02      	cmp	r3, #2
 8104caa:	d009      	beq.n	8104cc0 <UART_SetConfig+0x600>
 8104cac:	2b04      	cmp	r3, #4
 8104cae:	d00b      	beq.n	8104cc8 <UART_SetConfig+0x608>
 8104cb0:	e042      	b.n	8104d38 <UART_SetConfig+0x678>
 8104cb2:	2b20      	cmp	r3, #32
 8104cb4:	d02b      	beq.n	8104d0e <UART_SetConfig+0x64e>
 8104cb6:	2b40      	cmp	r3, #64	; 0x40
 8104cb8:	d02c      	beq.n	8104d14 <UART_SetConfig+0x654>
 8104cba:	2b10      	cmp	r3, #16
 8104cbc:	d014      	beq.n	8104ce8 <UART_SetConfig+0x628>
 8104cbe:	e03b      	b.n	8104d38 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8104cc0:	f7fd ff32 	bl	8102b28 <HAL_RCCEx_GetD3PCLK1Freq>
 8104cc4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8104cc6:	e03d      	b.n	8104d44 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104cc8:	f107 0314 	add.w	r3, r7, #20
 8104ccc:	4618      	mov	r0, r3
 8104cce:	f7fd ff41 	bl	8102b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104cd2:	69bb      	ldr	r3, [r7, #24]
 8104cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104cd6:	e035      	b.n	8104d44 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104cd8:	f107 0308 	add.w	r3, r7, #8
 8104cdc:	4618      	mov	r0, r3
 8104cde:	f7fe f885 	bl	8102dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104ce6:	e02d      	b.n	8104d44 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ce8:	4b0d      	ldr	r3, [pc, #52]	; (8104d20 <UART_SetConfig+0x660>)
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	f003 0320 	and.w	r3, r3, #32
 8104cf0:	2b00      	cmp	r3, #0
 8104cf2:	d009      	beq.n	8104d08 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104cf4:	4b0a      	ldr	r3, [pc, #40]	; (8104d20 <UART_SetConfig+0x660>)
 8104cf6:	681b      	ldr	r3, [r3, #0]
 8104cf8:	08db      	lsrs	r3, r3, #3
 8104cfa:	f003 0303 	and.w	r3, r3, #3
 8104cfe:	4a0c      	ldr	r2, [pc, #48]	; (8104d30 <UART_SetConfig+0x670>)
 8104d00:	fa22 f303 	lsr.w	r3, r2, r3
 8104d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104d06:	e01d      	b.n	8104d44 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8104d08:	4b09      	ldr	r3, [pc, #36]	; (8104d30 <UART_SetConfig+0x670>)
 8104d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104d0c:	e01a      	b.n	8104d44 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104d0e:	4b09      	ldr	r3, [pc, #36]	; (8104d34 <UART_SetConfig+0x674>)
 8104d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104d12:	e017      	b.n	8104d44 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104d1a:	e013      	b.n	8104d44 <UART_SetConfig+0x684>
 8104d1c:	40011400 	.word	0x40011400
 8104d20:	58024400 	.word	0x58024400
 8104d24:	40007800 	.word	0x40007800
 8104d28:	40007c00 	.word	0x40007c00
 8104d2c:	58000c00 	.word	0x58000c00
 8104d30:	03d09000 	.word	0x03d09000
 8104d34:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8104d38:	2300      	movs	r3, #0
 8104d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8104d3c:	2301      	movs	r3, #1
 8104d3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8104d42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8104d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104d46:	2b00      	cmp	r3, #0
 8104d48:	f000 824d 	beq.w	81051e6 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d50:	4aad      	ldr	r2, [pc, #692]	; (8105008 <UART_SetConfig+0x948>)
 8104d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104d56:	461a      	mov	r2, r3
 8104d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8104d5e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	685a      	ldr	r2, [r3, #4]
 8104d64:	4613      	mov	r3, r2
 8104d66:	005b      	lsls	r3, r3, #1
 8104d68:	4413      	add	r3, r2
 8104d6a:	6a3a      	ldr	r2, [r7, #32]
 8104d6c:	429a      	cmp	r2, r3
 8104d6e:	d305      	bcc.n	8104d7c <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8104d70:	687b      	ldr	r3, [r7, #4]
 8104d72:	685b      	ldr	r3, [r3, #4]
 8104d74:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104d76:	6a3a      	ldr	r2, [r7, #32]
 8104d78:	429a      	cmp	r2, r3
 8104d7a:	d903      	bls.n	8104d84 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8104d7c:	2301      	movs	r3, #1
 8104d7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8104d82:	e230      	b.n	81051e6 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104d86:	4618      	mov	r0, r3
 8104d88:	f04f 0100 	mov.w	r1, #0
 8104d8c:	687b      	ldr	r3, [r7, #4]
 8104d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d90:	4a9d      	ldr	r2, [pc, #628]	; (8105008 <UART_SetConfig+0x948>)
 8104d92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104d96:	b29b      	uxth	r3, r3
 8104d98:	f04f 0400 	mov.w	r4, #0
 8104d9c:	461a      	mov	r2, r3
 8104d9e:	4623      	mov	r3, r4
 8104da0:	f7fb faf6 	bl	8100390 <__aeabi_uldivmod>
 8104da4:	4603      	mov	r3, r0
 8104da6:	460c      	mov	r4, r1
 8104da8:	4619      	mov	r1, r3
 8104daa:	4622      	mov	r2, r4
 8104dac:	f04f 0300 	mov.w	r3, #0
 8104db0:	f04f 0400 	mov.w	r4, #0
 8104db4:	0214      	lsls	r4, r2, #8
 8104db6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8104dba:	020b      	lsls	r3, r1, #8
 8104dbc:	687a      	ldr	r2, [r7, #4]
 8104dbe:	6852      	ldr	r2, [r2, #4]
 8104dc0:	0852      	lsrs	r2, r2, #1
 8104dc2:	4611      	mov	r1, r2
 8104dc4:	f04f 0200 	mov.w	r2, #0
 8104dc8:	eb13 0b01 	adds.w	fp, r3, r1
 8104dcc:	eb44 0c02 	adc.w	ip, r4, r2
 8104dd0:	4658      	mov	r0, fp
 8104dd2:	4661      	mov	r1, ip
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	685b      	ldr	r3, [r3, #4]
 8104dd8:	f04f 0400 	mov.w	r4, #0
 8104ddc:	461a      	mov	r2, r3
 8104dde:	4623      	mov	r3, r4
 8104de0:	f7fb fad6 	bl	8100390 <__aeabi_uldivmod>
 8104de4:	4603      	mov	r3, r0
 8104de6:	460c      	mov	r4, r1
 8104de8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8104dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104df0:	d308      	bcc.n	8104e04 <UART_SetConfig+0x744>
 8104df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104df4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104df8:	d204      	bcs.n	8104e04 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104e00:	60da      	str	r2, [r3, #12]
 8104e02:	e1f0      	b.n	81051e6 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8104e04:	2301      	movs	r3, #1
 8104e06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8104e0a:	e1ec      	b.n	81051e6 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	69db      	ldr	r3, [r3, #28]
 8104e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104e14:	f040 8100 	bne.w	8105018 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8104e18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8104e1c:	2b40      	cmp	r3, #64	; 0x40
 8104e1e:	f200 80b7 	bhi.w	8104f90 <UART_SetConfig+0x8d0>
 8104e22:	a201      	add	r2, pc, #4	; (adr r2, 8104e28 <UART_SetConfig+0x768>)
 8104e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e28:	08104f2d 	.word	0x08104f2d
 8104e2c:	08104f35 	.word	0x08104f35
 8104e30:	08104f91 	.word	0x08104f91
 8104e34:	08104f91 	.word	0x08104f91
 8104e38:	08104f3d 	.word	0x08104f3d
 8104e3c:	08104f91 	.word	0x08104f91
 8104e40:	08104f91 	.word	0x08104f91
 8104e44:	08104f91 	.word	0x08104f91
 8104e48:	08104f4d 	.word	0x08104f4d
 8104e4c:	08104f91 	.word	0x08104f91
 8104e50:	08104f91 	.word	0x08104f91
 8104e54:	08104f91 	.word	0x08104f91
 8104e58:	08104f91 	.word	0x08104f91
 8104e5c:	08104f91 	.word	0x08104f91
 8104e60:	08104f91 	.word	0x08104f91
 8104e64:	08104f91 	.word	0x08104f91
 8104e68:	08104f5d 	.word	0x08104f5d
 8104e6c:	08104f91 	.word	0x08104f91
 8104e70:	08104f91 	.word	0x08104f91
 8104e74:	08104f91 	.word	0x08104f91
 8104e78:	08104f91 	.word	0x08104f91
 8104e7c:	08104f91 	.word	0x08104f91
 8104e80:	08104f91 	.word	0x08104f91
 8104e84:	08104f91 	.word	0x08104f91
 8104e88:	08104f91 	.word	0x08104f91
 8104e8c:	08104f91 	.word	0x08104f91
 8104e90:	08104f91 	.word	0x08104f91
 8104e94:	08104f91 	.word	0x08104f91
 8104e98:	08104f91 	.word	0x08104f91
 8104e9c:	08104f91 	.word	0x08104f91
 8104ea0:	08104f91 	.word	0x08104f91
 8104ea4:	08104f91 	.word	0x08104f91
 8104ea8:	08104f83 	.word	0x08104f83
 8104eac:	08104f91 	.word	0x08104f91
 8104eb0:	08104f91 	.word	0x08104f91
 8104eb4:	08104f91 	.word	0x08104f91
 8104eb8:	08104f91 	.word	0x08104f91
 8104ebc:	08104f91 	.word	0x08104f91
 8104ec0:	08104f91 	.word	0x08104f91
 8104ec4:	08104f91 	.word	0x08104f91
 8104ec8:	08104f91 	.word	0x08104f91
 8104ecc:	08104f91 	.word	0x08104f91
 8104ed0:	08104f91 	.word	0x08104f91
 8104ed4:	08104f91 	.word	0x08104f91
 8104ed8:	08104f91 	.word	0x08104f91
 8104edc:	08104f91 	.word	0x08104f91
 8104ee0:	08104f91 	.word	0x08104f91
 8104ee4:	08104f91 	.word	0x08104f91
 8104ee8:	08104f91 	.word	0x08104f91
 8104eec:	08104f91 	.word	0x08104f91
 8104ef0:	08104f91 	.word	0x08104f91
 8104ef4:	08104f91 	.word	0x08104f91
 8104ef8:	08104f91 	.word	0x08104f91
 8104efc:	08104f91 	.word	0x08104f91
 8104f00:	08104f91 	.word	0x08104f91
 8104f04:	08104f91 	.word	0x08104f91
 8104f08:	08104f91 	.word	0x08104f91
 8104f0c:	08104f91 	.word	0x08104f91
 8104f10:	08104f91 	.word	0x08104f91
 8104f14:	08104f91 	.word	0x08104f91
 8104f18:	08104f91 	.word	0x08104f91
 8104f1c:	08104f91 	.word	0x08104f91
 8104f20:	08104f91 	.word	0x08104f91
 8104f24:	08104f91 	.word	0x08104f91
 8104f28:	08104f89 	.word	0x08104f89
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8104f2c:	f7fd fd8e 	bl	8102a4c <HAL_RCC_GetPCLK1Freq>
 8104f30:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8104f32:	e033      	b.n	8104f9c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104f34:	f7fd fda0 	bl	8102a78 <HAL_RCC_GetPCLK2Freq>
 8104f38:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8104f3a:	e02f      	b.n	8104f9c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f3c:	f107 0314 	add.w	r3, r7, #20
 8104f40:	4618      	mov	r0, r3
 8104f42:	f7fd fe07 	bl	8102b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104f46:	69bb      	ldr	r3, [r7, #24]
 8104f48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f4a:	e027      	b.n	8104f9c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104f4c:	f107 0308 	add.w	r3, r7, #8
 8104f50:	4618      	mov	r0, r3
 8104f52:	f7fd ff4b 	bl	8102dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104f56:	68fb      	ldr	r3, [r7, #12]
 8104f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f5a:	e01f      	b.n	8104f9c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104f5c:	4b2b      	ldr	r3, [pc, #172]	; (810500c <UART_SetConfig+0x94c>)
 8104f5e:	681b      	ldr	r3, [r3, #0]
 8104f60:	f003 0320 	and.w	r3, r3, #32
 8104f64:	2b00      	cmp	r3, #0
 8104f66:	d009      	beq.n	8104f7c <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104f68:	4b28      	ldr	r3, [pc, #160]	; (810500c <UART_SetConfig+0x94c>)
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	08db      	lsrs	r3, r3, #3
 8104f6e:	f003 0303 	and.w	r3, r3, #3
 8104f72:	4a27      	ldr	r2, [pc, #156]	; (8105010 <UART_SetConfig+0x950>)
 8104f74:	fa22 f303 	lsr.w	r3, r2, r3
 8104f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104f7a:	e00f      	b.n	8104f9c <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8104f7c:	4b24      	ldr	r3, [pc, #144]	; (8105010 <UART_SetConfig+0x950>)
 8104f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f80:	e00c      	b.n	8104f9c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104f82:	4b24      	ldr	r3, [pc, #144]	; (8105014 <UART_SetConfig+0x954>)
 8104f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f86:	e009      	b.n	8104f9c <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f8e:	e005      	b.n	8104f9c <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8104f90:	2300      	movs	r3, #0
 8104f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8104f94:	2301      	movs	r3, #1
 8104f96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8104f9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8104f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104f9e:	2b00      	cmp	r3, #0
 8104fa0:	f000 8121 	beq.w	81051e6 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104fa4:	687b      	ldr	r3, [r7, #4]
 8104fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104fa8:	4a17      	ldr	r2, [pc, #92]	; (8105008 <UART_SetConfig+0x948>)
 8104faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104fae:	461a      	mov	r2, r3
 8104fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8104fb6:	005a      	lsls	r2, r3, #1
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	685b      	ldr	r3, [r3, #4]
 8104fbc:	085b      	lsrs	r3, r3, #1
 8104fbe:	441a      	add	r2, r3
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	685b      	ldr	r3, [r3, #4]
 8104fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8104fc8:	b29b      	uxth	r3, r3
 8104fca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104fce:	2b0f      	cmp	r3, #15
 8104fd0:	d916      	bls.n	8105000 <UART_SetConfig+0x940>
 8104fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104fd8:	d212      	bcs.n	8105000 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8104fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104fdc:	b29b      	uxth	r3, r3
 8104fde:	f023 030f 	bic.w	r3, r3, #15
 8104fe2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8104fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104fe6:	085b      	lsrs	r3, r3, #1
 8104fe8:	b29b      	uxth	r3, r3
 8104fea:	f003 0307 	and.w	r3, r3, #7
 8104fee:	b29a      	uxth	r2, r3
 8104ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8104ff2:	4313      	orrs	r3, r2
 8104ff4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8104ff6:	687b      	ldr	r3, [r7, #4]
 8104ff8:	681b      	ldr	r3, [r3, #0]
 8104ffa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8104ffc:	60da      	str	r2, [r3, #12]
 8104ffe:	e0f2      	b.n	81051e6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8105000:	2301      	movs	r3, #1
 8105002:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105006:	e0ee      	b.n	81051e6 <UART_SetConfig+0xb26>
 8105008:	08108ad0 	.word	0x08108ad0
 810500c:	58024400 	.word	0x58024400
 8105010:	03d09000 	.word	0x03d09000
 8105014:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8105018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810501c:	2b40      	cmp	r3, #64	; 0x40
 810501e:	f200 80b7 	bhi.w	8105190 <UART_SetConfig+0xad0>
 8105022:	a201      	add	r2, pc, #4	; (adr r2, 8105028 <UART_SetConfig+0x968>)
 8105024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105028:	0810512d 	.word	0x0810512d
 810502c:	08105135 	.word	0x08105135
 8105030:	08105191 	.word	0x08105191
 8105034:	08105191 	.word	0x08105191
 8105038:	0810513d 	.word	0x0810513d
 810503c:	08105191 	.word	0x08105191
 8105040:	08105191 	.word	0x08105191
 8105044:	08105191 	.word	0x08105191
 8105048:	0810514d 	.word	0x0810514d
 810504c:	08105191 	.word	0x08105191
 8105050:	08105191 	.word	0x08105191
 8105054:	08105191 	.word	0x08105191
 8105058:	08105191 	.word	0x08105191
 810505c:	08105191 	.word	0x08105191
 8105060:	08105191 	.word	0x08105191
 8105064:	08105191 	.word	0x08105191
 8105068:	0810515d 	.word	0x0810515d
 810506c:	08105191 	.word	0x08105191
 8105070:	08105191 	.word	0x08105191
 8105074:	08105191 	.word	0x08105191
 8105078:	08105191 	.word	0x08105191
 810507c:	08105191 	.word	0x08105191
 8105080:	08105191 	.word	0x08105191
 8105084:	08105191 	.word	0x08105191
 8105088:	08105191 	.word	0x08105191
 810508c:	08105191 	.word	0x08105191
 8105090:	08105191 	.word	0x08105191
 8105094:	08105191 	.word	0x08105191
 8105098:	08105191 	.word	0x08105191
 810509c:	08105191 	.word	0x08105191
 81050a0:	08105191 	.word	0x08105191
 81050a4:	08105191 	.word	0x08105191
 81050a8:	08105183 	.word	0x08105183
 81050ac:	08105191 	.word	0x08105191
 81050b0:	08105191 	.word	0x08105191
 81050b4:	08105191 	.word	0x08105191
 81050b8:	08105191 	.word	0x08105191
 81050bc:	08105191 	.word	0x08105191
 81050c0:	08105191 	.word	0x08105191
 81050c4:	08105191 	.word	0x08105191
 81050c8:	08105191 	.word	0x08105191
 81050cc:	08105191 	.word	0x08105191
 81050d0:	08105191 	.word	0x08105191
 81050d4:	08105191 	.word	0x08105191
 81050d8:	08105191 	.word	0x08105191
 81050dc:	08105191 	.word	0x08105191
 81050e0:	08105191 	.word	0x08105191
 81050e4:	08105191 	.word	0x08105191
 81050e8:	08105191 	.word	0x08105191
 81050ec:	08105191 	.word	0x08105191
 81050f0:	08105191 	.word	0x08105191
 81050f4:	08105191 	.word	0x08105191
 81050f8:	08105191 	.word	0x08105191
 81050fc:	08105191 	.word	0x08105191
 8105100:	08105191 	.word	0x08105191
 8105104:	08105191 	.word	0x08105191
 8105108:	08105191 	.word	0x08105191
 810510c:	08105191 	.word	0x08105191
 8105110:	08105191 	.word	0x08105191
 8105114:	08105191 	.word	0x08105191
 8105118:	08105191 	.word	0x08105191
 810511c:	08105191 	.word	0x08105191
 8105120:	08105191 	.word	0x08105191
 8105124:	08105191 	.word	0x08105191
 8105128:	08105189 	.word	0x08105189
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810512c:	f7fd fc8e 	bl	8102a4c <HAL_RCC_GetPCLK1Freq>
 8105130:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105132:	e033      	b.n	810519c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105134:	f7fd fca0 	bl	8102a78 <HAL_RCC_GetPCLK2Freq>
 8105138:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810513a:	e02f      	b.n	810519c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810513c:	f107 0314 	add.w	r3, r7, #20
 8105140:	4618      	mov	r0, r3
 8105142:	f7fd fd07 	bl	8102b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105146:	69bb      	ldr	r3, [r7, #24]
 8105148:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810514a:	e027      	b.n	810519c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810514c:	f107 0308 	add.w	r3, r7, #8
 8105150:	4618      	mov	r0, r3
 8105152:	f7fd fe4b 	bl	8102dec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105156:	68fb      	ldr	r3, [r7, #12]
 8105158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810515a:	e01f      	b.n	810519c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810515c:	4b2c      	ldr	r3, [pc, #176]	; (8105210 <UART_SetConfig+0xb50>)
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	f003 0320 	and.w	r3, r3, #32
 8105164:	2b00      	cmp	r3, #0
 8105166:	d009      	beq.n	810517c <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105168:	4b29      	ldr	r3, [pc, #164]	; (8105210 <UART_SetConfig+0xb50>)
 810516a:	681b      	ldr	r3, [r3, #0]
 810516c:	08db      	lsrs	r3, r3, #3
 810516e:	f003 0303 	and.w	r3, r3, #3
 8105172:	4a28      	ldr	r2, [pc, #160]	; (8105214 <UART_SetConfig+0xb54>)
 8105174:	fa22 f303 	lsr.w	r3, r2, r3
 8105178:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810517a:	e00f      	b.n	810519c <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 810517c:	4b25      	ldr	r3, [pc, #148]	; (8105214 <UART_SetConfig+0xb54>)
 810517e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105180:	e00c      	b.n	810519c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105182:	4b25      	ldr	r3, [pc, #148]	; (8105218 <UART_SetConfig+0xb58>)
 8105184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105186:	e009      	b.n	810519c <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810518c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810518e:	e005      	b.n	810519c <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8105190:	2300      	movs	r3, #0
 8105192:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105194:	2301      	movs	r3, #1
 8105196:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810519a:	bf00      	nop
    }

    if (pclk != 0U)
 810519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810519e:	2b00      	cmp	r3, #0
 81051a0:	d021      	beq.n	81051e6 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81051a2:	687b      	ldr	r3, [r7, #4]
 81051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051a6:	4a1d      	ldr	r2, [pc, #116]	; (810521c <UART_SetConfig+0xb5c>)
 81051a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81051ac:	461a      	mov	r2, r3
 81051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81051b0:	fbb3 f2f2 	udiv	r2, r3, r2
 81051b4:	687b      	ldr	r3, [r7, #4]
 81051b6:	685b      	ldr	r3, [r3, #4]
 81051b8:	085b      	lsrs	r3, r3, #1
 81051ba:	441a      	add	r2, r3
 81051bc:	687b      	ldr	r3, [r7, #4]
 81051be:	685b      	ldr	r3, [r3, #4]
 81051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 81051c4:	b29b      	uxth	r3, r3
 81051c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81051ca:	2b0f      	cmp	r3, #15
 81051cc:	d908      	bls.n	81051e0 <UART_SetConfig+0xb20>
 81051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81051d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81051d4:	d204      	bcs.n	81051e0 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81051dc:	60da      	str	r2, [r3, #12]
 81051de:	e002      	b.n	81051e6 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 81051e0:	2301      	movs	r3, #1
 81051e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	2201      	movs	r2, #1
 81051ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	2201      	movs	r2, #1
 81051f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81051f6:	687b      	ldr	r3, [r7, #4]
 81051f8:	2200      	movs	r2, #0
 81051fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 81051fc:	687b      	ldr	r3, [r7, #4]
 81051fe:	2200      	movs	r2, #0
 8105200:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8105202:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8105206:	4618      	mov	r0, r3
 8105208:	3738      	adds	r7, #56	; 0x38
 810520a:	46bd      	mov	sp, r7
 810520c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8105210:	58024400 	.word	0x58024400
 8105214:	03d09000 	.word	0x03d09000
 8105218:	003d0900 	.word	0x003d0900
 810521c:	08108ad0 	.word	0x08108ad0

08105220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105220:	b480      	push	{r7}
 8105222:	b083      	sub	sp, #12
 8105224:	af00      	add	r7, sp, #0
 8105226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810522c:	f003 0301 	and.w	r3, r3, #1
 8105230:	2b00      	cmp	r3, #0
 8105232:	d00a      	beq.n	810524a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105234:	687b      	ldr	r3, [r7, #4]
 8105236:	681b      	ldr	r3, [r3, #0]
 8105238:	685b      	ldr	r3, [r3, #4]
 810523a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105242:	687b      	ldr	r3, [r7, #4]
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	430a      	orrs	r2, r1
 8105248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810524e:	f003 0302 	and.w	r3, r3, #2
 8105252:	2b00      	cmp	r3, #0
 8105254:	d00a      	beq.n	810526c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	685b      	ldr	r3, [r3, #4]
 810525c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105264:	687b      	ldr	r3, [r7, #4]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	430a      	orrs	r2, r1
 810526a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105270:	f003 0304 	and.w	r3, r3, #4
 8105274:	2b00      	cmp	r3, #0
 8105276:	d00a      	beq.n	810528e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	685b      	ldr	r3, [r3, #4]
 810527e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105286:	687b      	ldr	r3, [r7, #4]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	430a      	orrs	r2, r1
 810528c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105292:	f003 0308 	and.w	r3, r3, #8
 8105296:	2b00      	cmp	r3, #0
 8105298:	d00a      	beq.n	81052b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810529a:	687b      	ldr	r3, [r7, #4]
 810529c:	681b      	ldr	r3, [r3, #0]
 810529e:	685b      	ldr	r3, [r3, #4]
 81052a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81052a4:	687b      	ldr	r3, [r7, #4]
 81052a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	681b      	ldr	r3, [r3, #0]
 81052ac:	430a      	orrs	r2, r1
 81052ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052b4:	f003 0310 	and.w	r3, r3, #16
 81052b8:	2b00      	cmp	r3, #0
 81052ba:	d00a      	beq.n	81052d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	681b      	ldr	r3, [r3, #0]
 81052c0:	689b      	ldr	r3, [r3, #8]
 81052c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81052c6:	687b      	ldr	r3, [r7, #4]
 81052c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81052ca:	687b      	ldr	r3, [r7, #4]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	430a      	orrs	r2, r1
 81052d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052d6:	f003 0320 	and.w	r3, r3, #32
 81052da:	2b00      	cmp	r3, #0
 81052dc:	d00a      	beq.n	81052f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	689b      	ldr	r3, [r3, #8]
 81052e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81052ec:	687b      	ldr	r3, [r7, #4]
 81052ee:	681b      	ldr	r3, [r3, #0]
 81052f0:	430a      	orrs	r2, r1
 81052f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81052fc:	2b00      	cmp	r3, #0
 81052fe:	d01a      	beq.n	8105336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	685b      	ldr	r3, [r3, #4]
 8105306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810530e:	687b      	ldr	r3, [r7, #4]
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	430a      	orrs	r2, r1
 8105314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810531a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810531e:	d10a      	bne.n	8105336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	681b      	ldr	r3, [r3, #0]
 8105324:	685b      	ldr	r3, [r3, #4]
 8105326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810532a:	687b      	ldr	r3, [r7, #4]
 810532c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	430a      	orrs	r2, r1
 8105334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810533e:	2b00      	cmp	r3, #0
 8105340:	d00a      	beq.n	8105358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	685b      	ldr	r3, [r3, #4]
 8105348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810534c:	687b      	ldr	r3, [r7, #4]
 810534e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	430a      	orrs	r2, r1
 8105356:	605a      	str	r2, [r3, #4]
  }
}
 8105358:	bf00      	nop
 810535a:	370c      	adds	r7, #12
 810535c:	46bd      	mov	sp, r7
 810535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105362:	4770      	bx	lr

08105364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105364:	b580      	push	{r7, lr}
 8105366:	b086      	sub	sp, #24
 8105368:	af02      	add	r7, sp, #8
 810536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	2200      	movs	r2, #0
 8105370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8105374:	f7fc f8ae 	bl	81014d4 <HAL_GetTick>
 8105378:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	f003 0308 	and.w	r3, r3, #8
 8105384:	2b08      	cmp	r3, #8
 8105386:	d10e      	bne.n	81053a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810538c:	9300      	str	r3, [sp, #0]
 810538e:	68fb      	ldr	r3, [r7, #12]
 8105390:	2200      	movs	r2, #0
 8105392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105396:	6878      	ldr	r0, [r7, #4]
 8105398:	f000 f82c 	bl	81053f4 <UART_WaitOnFlagUntilTimeout>
 810539c:	4603      	mov	r3, r0
 810539e:	2b00      	cmp	r3, #0
 81053a0:	d001      	beq.n	81053a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81053a2:	2303      	movs	r3, #3
 81053a4:	e022      	b.n	81053ec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	681b      	ldr	r3, [r3, #0]
 81053aa:	681b      	ldr	r3, [r3, #0]
 81053ac:	f003 0304 	and.w	r3, r3, #4
 81053b0:	2b04      	cmp	r3, #4
 81053b2:	d10e      	bne.n	81053d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81053b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81053b8:	9300      	str	r3, [sp, #0]
 81053ba:	68fb      	ldr	r3, [r7, #12]
 81053bc:	2200      	movs	r2, #0
 81053be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81053c2:	6878      	ldr	r0, [r7, #4]
 81053c4:	f000 f816 	bl	81053f4 <UART_WaitOnFlagUntilTimeout>
 81053c8:	4603      	mov	r3, r0
 81053ca:	2b00      	cmp	r3, #0
 81053cc:	d001      	beq.n	81053d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81053ce:	2303      	movs	r3, #3
 81053d0:	e00c      	b.n	81053ec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	2220      	movs	r2, #32
 81053d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 81053da:	687b      	ldr	r3, [r7, #4]
 81053dc:	2220      	movs	r2, #32
 81053de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 81053e2:	687b      	ldr	r3, [r7, #4]
 81053e4:	2200      	movs	r2, #0
 81053e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81053ea:	2300      	movs	r3, #0
}
 81053ec:	4618      	mov	r0, r3
 81053ee:	3710      	adds	r7, #16
 81053f0:	46bd      	mov	sp, r7
 81053f2:	bd80      	pop	{r7, pc}

081053f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81053f4:	b580      	push	{r7, lr}
 81053f6:	b084      	sub	sp, #16
 81053f8:	af00      	add	r7, sp, #0
 81053fa:	60f8      	str	r0, [r7, #12]
 81053fc:	60b9      	str	r1, [r7, #8]
 81053fe:	603b      	str	r3, [r7, #0]
 8105400:	4613      	mov	r3, r2
 8105402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105404:	e062      	b.n	81054cc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105406:	69bb      	ldr	r3, [r7, #24]
 8105408:	f1b3 3fff 	cmp.w	r3, #4294967295
 810540c:	d05e      	beq.n	81054cc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810540e:	f7fc f861 	bl	81014d4 <HAL_GetTick>
 8105412:	4602      	mov	r2, r0
 8105414:	683b      	ldr	r3, [r7, #0]
 8105416:	1ad3      	subs	r3, r2, r3
 8105418:	69ba      	ldr	r2, [r7, #24]
 810541a:	429a      	cmp	r2, r3
 810541c:	d302      	bcc.n	8105424 <UART_WaitOnFlagUntilTimeout+0x30>
 810541e:	69bb      	ldr	r3, [r7, #24]
 8105420:	2b00      	cmp	r3, #0
 8105422:	d11d      	bne.n	8105460 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8105424:	68fb      	ldr	r3, [r7, #12]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	681a      	ldr	r2, [r3, #0]
 810542a:	68fb      	ldr	r3, [r7, #12]
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8105432:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105434:	68fb      	ldr	r3, [r7, #12]
 8105436:	681b      	ldr	r3, [r3, #0]
 8105438:	689a      	ldr	r2, [r3, #8]
 810543a:	68fb      	ldr	r3, [r7, #12]
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	f022 0201 	bic.w	r2, r2, #1
 8105442:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8105444:	68fb      	ldr	r3, [r7, #12]
 8105446:	2220      	movs	r2, #32
 8105448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 810544c:	68fb      	ldr	r3, [r7, #12]
 810544e:	2220      	movs	r2, #32
 8105450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8105454:	68fb      	ldr	r3, [r7, #12]
 8105456:	2200      	movs	r2, #0
 8105458:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 810545c:	2303      	movs	r3, #3
 810545e:	e045      	b.n	81054ec <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105460:	68fb      	ldr	r3, [r7, #12]
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	f003 0304 	and.w	r3, r3, #4
 810546a:	2b00      	cmp	r3, #0
 810546c:	d02e      	beq.n	81054cc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810546e:	68fb      	ldr	r3, [r7, #12]
 8105470:	681b      	ldr	r3, [r3, #0]
 8105472:	69db      	ldr	r3, [r3, #28]
 8105474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810547c:	d126      	bne.n	81054cc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810547e:	68fb      	ldr	r3, [r7, #12]
 8105480:	681b      	ldr	r3, [r3, #0]
 8105482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105486:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8105488:	68fb      	ldr	r3, [r7, #12]
 810548a:	681b      	ldr	r3, [r3, #0]
 810548c:	681a      	ldr	r2, [r3, #0]
 810548e:	68fb      	ldr	r3, [r7, #12]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8105496:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105498:	68fb      	ldr	r3, [r7, #12]
 810549a:	681b      	ldr	r3, [r3, #0]
 810549c:	689a      	ldr	r2, [r3, #8]
 810549e:	68fb      	ldr	r3, [r7, #12]
 81054a0:	681b      	ldr	r3, [r3, #0]
 81054a2:	f022 0201 	bic.w	r2, r2, #1
 81054a6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 81054a8:	68fb      	ldr	r3, [r7, #12]
 81054aa:	2220      	movs	r2, #32
 81054ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 81054b0:	68fb      	ldr	r3, [r7, #12]
 81054b2:	2220      	movs	r2, #32
 81054b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81054b8:	68fb      	ldr	r3, [r7, #12]
 81054ba:	2220      	movs	r2, #32
 81054bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81054c0:	68fb      	ldr	r3, [r7, #12]
 81054c2:	2200      	movs	r2, #0
 81054c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 81054c8:	2303      	movs	r3, #3
 81054ca:	e00f      	b.n	81054ec <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81054cc:	68fb      	ldr	r3, [r7, #12]
 81054ce:	681b      	ldr	r3, [r3, #0]
 81054d0:	69da      	ldr	r2, [r3, #28]
 81054d2:	68bb      	ldr	r3, [r7, #8]
 81054d4:	4013      	ands	r3, r2
 81054d6:	68ba      	ldr	r2, [r7, #8]
 81054d8:	429a      	cmp	r2, r3
 81054da:	bf0c      	ite	eq
 81054dc:	2301      	moveq	r3, #1
 81054de:	2300      	movne	r3, #0
 81054e0:	b2db      	uxtb	r3, r3
 81054e2:	461a      	mov	r2, r3
 81054e4:	79fb      	ldrb	r3, [r7, #7]
 81054e6:	429a      	cmp	r2, r3
 81054e8:	d08d      	beq.n	8105406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81054ea:	2300      	movs	r3, #0
}
 81054ec:	4618      	mov	r0, r3
 81054ee:	3710      	adds	r7, #16
 81054f0:	46bd      	mov	sp, r7
 81054f2:	bd80      	pop	{r7, pc}

081054f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81054f4:	b480      	push	{r7}
 81054f6:	b085      	sub	sp, #20
 81054f8:	af00      	add	r7, sp, #0
 81054fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81054fc:	687b      	ldr	r3, [r7, #4]
 81054fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105502:	2b01      	cmp	r3, #1
 8105504:	d101      	bne.n	810550a <HAL_UARTEx_DisableFifoMode+0x16>
 8105506:	2302      	movs	r3, #2
 8105508:	e027      	b.n	810555a <HAL_UARTEx_DisableFifoMode+0x66>
 810550a:	687b      	ldr	r3, [r7, #4]
 810550c:	2201      	movs	r2, #1
 810550e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105512:	687b      	ldr	r3, [r7, #4]
 8105514:	2224      	movs	r2, #36	; 0x24
 8105516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	681b      	ldr	r3, [r3, #0]
 810551e:	681b      	ldr	r3, [r3, #0]
 8105520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105522:	687b      	ldr	r3, [r7, #4]
 8105524:	681b      	ldr	r3, [r3, #0]
 8105526:	681a      	ldr	r2, [r3, #0]
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	681b      	ldr	r3, [r3, #0]
 810552c:	f022 0201 	bic.w	r2, r2, #1
 8105530:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105532:	68fb      	ldr	r3, [r7, #12]
 8105534:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105538:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	2200      	movs	r2, #0
 810553e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105540:	687b      	ldr	r3, [r7, #4]
 8105542:	681b      	ldr	r3, [r3, #0]
 8105544:	68fa      	ldr	r2, [r7, #12]
 8105546:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	2220      	movs	r2, #32
 810554c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105550:	687b      	ldr	r3, [r7, #4]
 8105552:	2200      	movs	r2, #0
 8105554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105558:	2300      	movs	r3, #0
}
 810555a:	4618      	mov	r0, r3
 810555c:	3714      	adds	r7, #20
 810555e:	46bd      	mov	sp, r7
 8105560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105564:	4770      	bx	lr

08105566 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105566:	b580      	push	{r7, lr}
 8105568:	b084      	sub	sp, #16
 810556a:	af00      	add	r7, sp, #0
 810556c:	6078      	str	r0, [r7, #4]
 810556e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8105576:	2b01      	cmp	r3, #1
 8105578:	d101      	bne.n	810557e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810557a:	2302      	movs	r3, #2
 810557c:	e02d      	b.n	81055da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	2201      	movs	r2, #1
 8105582:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2224      	movs	r2, #36	; 0x24
 810558a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	681b      	ldr	r3, [r3, #0]
 8105592:	681b      	ldr	r3, [r3, #0]
 8105594:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105596:	687b      	ldr	r3, [r7, #4]
 8105598:	681b      	ldr	r3, [r3, #0]
 810559a:	681a      	ldr	r2, [r3, #0]
 810559c:	687b      	ldr	r3, [r7, #4]
 810559e:	681b      	ldr	r3, [r3, #0]
 81055a0:	f022 0201 	bic.w	r2, r2, #1
 81055a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81055a6:	687b      	ldr	r3, [r7, #4]
 81055a8:	681b      	ldr	r3, [r3, #0]
 81055aa:	689b      	ldr	r3, [r3, #8]
 81055ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	683a      	ldr	r2, [r7, #0]
 81055b6:	430a      	orrs	r2, r1
 81055b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81055ba:	6878      	ldr	r0, [r7, #4]
 81055bc:	f000 f850 	bl	8105660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	68fa      	ldr	r2, [r7, #12]
 81055c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	2220      	movs	r2, #32
 81055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	2200      	movs	r2, #0
 81055d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81055d8:	2300      	movs	r3, #0
}
 81055da:	4618      	mov	r0, r3
 81055dc:	3710      	adds	r7, #16
 81055de:	46bd      	mov	sp, r7
 81055e0:	bd80      	pop	{r7, pc}

081055e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81055e2:	b580      	push	{r7, lr}
 81055e4:	b084      	sub	sp, #16
 81055e6:	af00      	add	r7, sp, #0
 81055e8:	6078      	str	r0, [r7, #4]
 81055ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81055f2:	2b01      	cmp	r3, #1
 81055f4:	d101      	bne.n	81055fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81055f6:	2302      	movs	r3, #2
 81055f8:	e02d      	b.n	8105656 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	2201      	movs	r2, #1
 81055fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	2224      	movs	r2, #36	; 0x24
 8105606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	681b      	ldr	r3, [r3, #0]
 810560e:	681b      	ldr	r3, [r3, #0]
 8105610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105612:	687b      	ldr	r3, [r7, #4]
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	681a      	ldr	r2, [r3, #0]
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	681b      	ldr	r3, [r3, #0]
 810561c:	f022 0201 	bic.w	r2, r2, #1
 8105620:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105622:	687b      	ldr	r3, [r7, #4]
 8105624:	681b      	ldr	r3, [r3, #0]
 8105626:	689b      	ldr	r3, [r3, #8]
 8105628:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	681b      	ldr	r3, [r3, #0]
 8105630:	683a      	ldr	r2, [r7, #0]
 8105632:	430a      	orrs	r2, r1
 8105634:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105636:	6878      	ldr	r0, [r7, #4]
 8105638:	f000 f812 	bl	8105660 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	681b      	ldr	r3, [r3, #0]
 8105640:	68fa      	ldr	r2, [r7, #12]
 8105642:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105644:	687b      	ldr	r3, [r7, #4]
 8105646:	2220      	movs	r2, #32
 8105648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	2200      	movs	r2, #0
 8105650:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8105654:	2300      	movs	r3, #0
}
 8105656:	4618      	mov	r0, r3
 8105658:	3710      	adds	r7, #16
 810565a:	46bd      	mov	sp, r7
 810565c:	bd80      	pop	{r7, pc}
	...

08105660 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105660:	b480      	push	{r7}
 8105662:	b089      	sub	sp, #36	; 0x24
 8105664:	af00      	add	r7, sp, #0
 8105666:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8105668:	4a2f      	ldr	r2, [pc, #188]	; (8105728 <UARTEx_SetNbDataToProcess+0xc8>)
 810566a:	f107 0314 	add.w	r3, r7, #20
 810566e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105672:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8105676:	4a2d      	ldr	r2, [pc, #180]	; (810572c <UARTEx_SetNbDataToProcess+0xcc>)
 8105678:	f107 030c 	add.w	r3, r7, #12
 810567c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8105680:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105688:	2b00      	cmp	r3, #0
 810568a:	d108      	bne.n	810569e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	2201      	movs	r2, #1
 8105690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105694:	687b      	ldr	r3, [r7, #4]
 8105696:	2201      	movs	r2, #1
 8105698:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810569c:	e03d      	b.n	810571a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810569e:	2310      	movs	r3, #16
 81056a0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81056a2:	2310      	movs	r3, #16
 81056a4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	689b      	ldr	r3, [r3, #8]
 81056ac:	0e5b      	lsrs	r3, r3, #25
 81056ae:	b2db      	uxtb	r3, r3
 81056b0:	f003 0307 	and.w	r3, r3, #7
 81056b4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81056b6:	687b      	ldr	r3, [r7, #4]
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	689b      	ldr	r3, [r3, #8]
 81056bc:	0f5b      	lsrs	r3, r3, #29
 81056be:	b2db      	uxtb	r3, r3
 81056c0:	f003 0307 	and.w	r3, r3, #7
 81056c4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 81056c6:	7fbb      	ldrb	r3, [r7, #30]
 81056c8:	7f3a      	ldrb	r2, [r7, #28]
 81056ca:	f107 0120 	add.w	r1, r7, #32
 81056ce:	440a      	add	r2, r1
 81056d0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81056d4:	fb02 f303 	mul.w	r3, r2, r3
 81056d8:	7f3a      	ldrb	r2, [r7, #28]
 81056da:	f107 0120 	add.w	r1, r7, #32
 81056de:	440a      	add	r2, r1
 81056e0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81056e4:	fb93 f3f2 	sdiv	r3, r3, r2
 81056e8:	b29a      	uxth	r2, r3
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 81056f0:	7ffb      	ldrb	r3, [r7, #31]
 81056f2:	7f7a      	ldrb	r2, [r7, #29]
 81056f4:	f107 0120 	add.w	r1, r7, #32
 81056f8:	440a      	add	r2, r1
 81056fa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81056fe:	fb02 f303 	mul.w	r3, r2, r3
 8105702:	7f7a      	ldrb	r2, [r7, #29]
 8105704:	f107 0120 	add.w	r1, r7, #32
 8105708:	440a      	add	r2, r1
 810570a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810570e:	fb93 f3f2 	sdiv	r3, r3, r2
 8105712:	b29a      	uxth	r2, r3
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810571a:	bf00      	nop
 810571c:	3724      	adds	r7, #36	; 0x24
 810571e:	46bd      	mov	sp, r7
 8105720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105724:	4770      	bx	lr
 8105726:	bf00      	nop
 8105728:	08108a74 	.word	0x08108a74
 810572c:	08108a7c 	.word	0x08108a7c

08105730 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8105730:	b480      	push	{r7}
 8105732:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8105734:	bf00      	nop
 8105736:	46bd      	mov	sp, r7
 8105738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810573c:	4770      	bx	lr
	...

08105740 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8105740:	b480      	push	{r7}
 8105742:	b085      	sub	sp, #20
 8105744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105746:	f3ef 8305 	mrs	r3, IPSR
 810574a:	60bb      	str	r3, [r7, #8]
  return(result);
 810574c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810574e:	2b00      	cmp	r3, #0
 8105750:	d10f      	bne.n	8105772 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105752:	f3ef 8310 	mrs	r3, PRIMASK
 8105756:	607b      	str	r3, [r7, #4]
  return(result);
 8105758:	687b      	ldr	r3, [r7, #4]
 810575a:	2b00      	cmp	r3, #0
 810575c:	d105      	bne.n	810576a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810575e:	f3ef 8311 	mrs	r3, BASEPRI
 8105762:	603b      	str	r3, [r7, #0]
  return(result);
 8105764:	683b      	ldr	r3, [r7, #0]
 8105766:	2b00      	cmp	r3, #0
 8105768:	d007      	beq.n	810577a <osKernelInitialize+0x3a>
 810576a:	4b0e      	ldr	r3, [pc, #56]	; (81057a4 <osKernelInitialize+0x64>)
 810576c:	681b      	ldr	r3, [r3, #0]
 810576e:	2b02      	cmp	r3, #2
 8105770:	d103      	bne.n	810577a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8105772:	f06f 0305 	mvn.w	r3, #5
 8105776:	60fb      	str	r3, [r7, #12]
 8105778:	e00c      	b.n	8105794 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 810577a:	4b0a      	ldr	r3, [pc, #40]	; (81057a4 <osKernelInitialize+0x64>)
 810577c:	681b      	ldr	r3, [r3, #0]
 810577e:	2b00      	cmp	r3, #0
 8105780:	d105      	bne.n	810578e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8105782:	4b08      	ldr	r3, [pc, #32]	; (81057a4 <osKernelInitialize+0x64>)
 8105784:	2201      	movs	r2, #1
 8105786:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8105788:	2300      	movs	r3, #0
 810578a:	60fb      	str	r3, [r7, #12]
 810578c:	e002      	b.n	8105794 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 810578e:	f04f 33ff 	mov.w	r3, #4294967295
 8105792:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8105794:	68fb      	ldr	r3, [r7, #12]
}
 8105796:	4618      	mov	r0, r3
 8105798:	3714      	adds	r7, #20
 810579a:	46bd      	mov	sp, r7
 810579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057a0:	4770      	bx	lr
 81057a2:	bf00      	nop
 81057a4:	10000094 	.word	0x10000094

081057a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 81057a8:	b580      	push	{r7, lr}
 81057aa:	b084      	sub	sp, #16
 81057ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81057ae:	f3ef 8305 	mrs	r3, IPSR
 81057b2:	60bb      	str	r3, [r7, #8]
  return(result);
 81057b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81057b6:	2b00      	cmp	r3, #0
 81057b8:	d10f      	bne.n	81057da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81057ba:	f3ef 8310 	mrs	r3, PRIMASK
 81057be:	607b      	str	r3, [r7, #4]
  return(result);
 81057c0:	687b      	ldr	r3, [r7, #4]
 81057c2:	2b00      	cmp	r3, #0
 81057c4:	d105      	bne.n	81057d2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81057c6:	f3ef 8311 	mrs	r3, BASEPRI
 81057ca:	603b      	str	r3, [r7, #0]
  return(result);
 81057cc:	683b      	ldr	r3, [r7, #0]
 81057ce:	2b00      	cmp	r3, #0
 81057d0:	d007      	beq.n	81057e2 <osKernelStart+0x3a>
 81057d2:	4b0f      	ldr	r3, [pc, #60]	; (8105810 <osKernelStart+0x68>)
 81057d4:	681b      	ldr	r3, [r3, #0]
 81057d6:	2b02      	cmp	r3, #2
 81057d8:	d103      	bne.n	81057e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 81057da:	f06f 0305 	mvn.w	r3, #5
 81057de:	60fb      	str	r3, [r7, #12]
 81057e0:	e010      	b.n	8105804 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 81057e2:	4b0b      	ldr	r3, [pc, #44]	; (8105810 <osKernelStart+0x68>)
 81057e4:	681b      	ldr	r3, [r3, #0]
 81057e6:	2b01      	cmp	r3, #1
 81057e8:	d109      	bne.n	81057fe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81057ea:	f7ff ffa1 	bl	8105730 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81057ee:	4b08      	ldr	r3, [pc, #32]	; (8105810 <osKernelStart+0x68>)
 81057f0:	2202      	movs	r2, #2
 81057f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81057f4:	f001 fc8a 	bl	810710c <vTaskStartScheduler>
      stat = osOK;
 81057f8:	2300      	movs	r3, #0
 81057fa:	60fb      	str	r3, [r7, #12]
 81057fc:	e002      	b.n	8105804 <osKernelStart+0x5c>
    } else {
      stat = osError;
 81057fe:	f04f 33ff 	mov.w	r3, #4294967295
 8105802:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8105804:	68fb      	ldr	r3, [r7, #12]
}
 8105806:	4618      	mov	r0, r3
 8105808:	3710      	adds	r7, #16
 810580a:	46bd      	mov	sp, r7
 810580c:	bd80      	pop	{r7, pc}
 810580e:	bf00      	nop
 8105810:	10000094 	.word	0x10000094

08105814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8105814:	b580      	push	{r7, lr}
 8105816:	b090      	sub	sp, #64	; 0x40
 8105818:	af04      	add	r7, sp, #16
 810581a:	60f8      	str	r0, [r7, #12]
 810581c:	60b9      	str	r1, [r7, #8]
 810581e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8105820:	2300      	movs	r3, #0
 8105822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105824:	f3ef 8305 	mrs	r3, IPSR
 8105828:	61fb      	str	r3, [r7, #28]
  return(result);
 810582a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 810582c:	2b00      	cmp	r3, #0
 810582e:	f040 808f 	bne.w	8105950 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105832:	f3ef 8310 	mrs	r3, PRIMASK
 8105836:	61bb      	str	r3, [r7, #24]
  return(result);
 8105838:	69bb      	ldr	r3, [r7, #24]
 810583a:	2b00      	cmp	r3, #0
 810583c:	d105      	bne.n	810584a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810583e:	f3ef 8311 	mrs	r3, BASEPRI
 8105842:	617b      	str	r3, [r7, #20]
  return(result);
 8105844:	697b      	ldr	r3, [r7, #20]
 8105846:	2b00      	cmp	r3, #0
 8105848:	d003      	beq.n	8105852 <osThreadNew+0x3e>
 810584a:	4b44      	ldr	r3, [pc, #272]	; (810595c <osThreadNew+0x148>)
 810584c:	681b      	ldr	r3, [r3, #0]
 810584e:	2b02      	cmp	r3, #2
 8105850:	d07e      	beq.n	8105950 <osThreadNew+0x13c>
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	2b00      	cmp	r3, #0
 8105856:	d07b      	beq.n	8105950 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8105858:	2380      	movs	r3, #128	; 0x80
 810585a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 810585c:	2318      	movs	r3, #24
 810585e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8105860:	2300      	movs	r3, #0
 8105862:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8105864:	f04f 33ff 	mov.w	r3, #4294967295
 8105868:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	2b00      	cmp	r3, #0
 810586e:	d045      	beq.n	81058fc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8105870:	687b      	ldr	r3, [r7, #4]
 8105872:	681b      	ldr	r3, [r3, #0]
 8105874:	2b00      	cmp	r3, #0
 8105876:	d002      	beq.n	810587e <osThreadNew+0x6a>
        name = attr->name;
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	681b      	ldr	r3, [r3, #0]
 810587c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	699b      	ldr	r3, [r3, #24]
 8105882:	2b00      	cmp	r3, #0
 8105884:	d002      	beq.n	810588c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8105886:	687b      	ldr	r3, [r7, #4]
 8105888:	699b      	ldr	r3, [r3, #24]
 810588a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810588e:	2b00      	cmp	r3, #0
 8105890:	d008      	beq.n	81058a4 <osThreadNew+0x90>
 8105892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105894:	2b38      	cmp	r3, #56	; 0x38
 8105896:	d805      	bhi.n	81058a4 <osThreadNew+0x90>
 8105898:	687b      	ldr	r3, [r7, #4]
 810589a:	685b      	ldr	r3, [r3, #4]
 810589c:	f003 0301 	and.w	r3, r3, #1
 81058a0:	2b00      	cmp	r3, #0
 81058a2:	d001      	beq.n	81058a8 <osThreadNew+0x94>
        return (NULL);
 81058a4:	2300      	movs	r3, #0
 81058a6:	e054      	b.n	8105952 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	695b      	ldr	r3, [r3, #20]
 81058ac:	2b00      	cmp	r3, #0
 81058ae:	d003      	beq.n	81058b8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	695b      	ldr	r3, [r3, #20]
 81058b4:	089b      	lsrs	r3, r3, #2
 81058b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	689b      	ldr	r3, [r3, #8]
 81058bc:	2b00      	cmp	r3, #0
 81058be:	d00e      	beq.n	81058de <osThreadNew+0xca>
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	68db      	ldr	r3, [r3, #12]
 81058c4:	2b5b      	cmp	r3, #91	; 0x5b
 81058c6:	d90a      	bls.n	81058de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 81058cc:	2b00      	cmp	r3, #0
 81058ce:	d006      	beq.n	81058de <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	695b      	ldr	r3, [r3, #20]
 81058d4:	2b00      	cmp	r3, #0
 81058d6:	d002      	beq.n	81058de <osThreadNew+0xca>
        mem = 1;
 81058d8:	2301      	movs	r3, #1
 81058da:	623b      	str	r3, [r7, #32]
 81058dc:	e010      	b.n	8105900 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	689b      	ldr	r3, [r3, #8]
 81058e2:	2b00      	cmp	r3, #0
 81058e4:	d10c      	bne.n	8105900 <osThreadNew+0xec>
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	68db      	ldr	r3, [r3, #12]
 81058ea:	2b00      	cmp	r3, #0
 81058ec:	d108      	bne.n	8105900 <osThreadNew+0xec>
 81058ee:	687b      	ldr	r3, [r7, #4]
 81058f0:	691b      	ldr	r3, [r3, #16]
 81058f2:	2b00      	cmp	r3, #0
 81058f4:	d104      	bne.n	8105900 <osThreadNew+0xec>
          mem = 0;
 81058f6:	2300      	movs	r3, #0
 81058f8:	623b      	str	r3, [r7, #32]
 81058fa:	e001      	b.n	8105900 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 81058fc:	2300      	movs	r3, #0
 81058fe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8105900:	6a3b      	ldr	r3, [r7, #32]
 8105902:	2b01      	cmp	r3, #1
 8105904:	d110      	bne.n	8105928 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 810590a:	687a      	ldr	r2, [r7, #4]
 810590c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810590e:	9202      	str	r2, [sp, #8]
 8105910:	9301      	str	r3, [sp, #4]
 8105912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105914:	9300      	str	r3, [sp, #0]
 8105916:	68bb      	ldr	r3, [r7, #8]
 8105918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810591a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810591c:	68f8      	ldr	r0, [r7, #12]
 810591e:	f001 fa23 	bl	8106d68 <xTaskCreateStatic>
 8105922:	4603      	mov	r3, r0
 8105924:	613b      	str	r3, [r7, #16]
 8105926:	e013      	b.n	8105950 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8105928:	6a3b      	ldr	r3, [r7, #32]
 810592a:	2b00      	cmp	r3, #0
 810592c:	d110      	bne.n	8105950 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105930:	b29a      	uxth	r2, r3
 8105932:	f107 0310 	add.w	r3, r7, #16
 8105936:	9301      	str	r3, [sp, #4]
 8105938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810593a:	9300      	str	r3, [sp, #0]
 810593c:	68bb      	ldr	r3, [r7, #8]
 810593e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8105940:	68f8      	ldr	r0, [r7, #12]
 8105942:	f001 fa6b 	bl	8106e1c <xTaskCreate>
 8105946:	4603      	mov	r3, r0
 8105948:	2b01      	cmp	r3, #1
 810594a:	d001      	beq.n	8105950 <osThreadNew+0x13c>
          hTask = NULL;
 810594c:	2300      	movs	r3, #0
 810594e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8105950:	693b      	ldr	r3, [r7, #16]
}
 8105952:	4618      	mov	r0, r3
 8105954:	3730      	adds	r7, #48	; 0x30
 8105956:	46bd      	mov	sp, r7
 8105958:	bd80      	pop	{r7, pc}
 810595a:	bf00      	nop
 810595c:	10000094 	.word	0x10000094

08105960 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8105960:	b580      	push	{r7, lr}
 8105962:	b086      	sub	sp, #24
 8105964:	af00      	add	r7, sp, #0
 8105966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8105968:	f3ef 8305 	mrs	r3, IPSR
 810596c:	613b      	str	r3, [r7, #16]
  return(result);
 810596e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8105970:	2b00      	cmp	r3, #0
 8105972:	d10f      	bne.n	8105994 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8105974:	f3ef 8310 	mrs	r3, PRIMASK
 8105978:	60fb      	str	r3, [r7, #12]
  return(result);
 810597a:	68fb      	ldr	r3, [r7, #12]
 810597c:	2b00      	cmp	r3, #0
 810597e:	d105      	bne.n	810598c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8105980:	f3ef 8311 	mrs	r3, BASEPRI
 8105984:	60bb      	str	r3, [r7, #8]
  return(result);
 8105986:	68bb      	ldr	r3, [r7, #8]
 8105988:	2b00      	cmp	r3, #0
 810598a:	d007      	beq.n	810599c <osDelay+0x3c>
 810598c:	4b0a      	ldr	r3, [pc, #40]	; (81059b8 <osDelay+0x58>)
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	2b02      	cmp	r3, #2
 8105992:	d103      	bne.n	810599c <osDelay+0x3c>
    stat = osErrorISR;
 8105994:	f06f 0305 	mvn.w	r3, #5
 8105998:	617b      	str	r3, [r7, #20]
 810599a:	e007      	b.n	81059ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 810599c:	2300      	movs	r3, #0
 810599e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	2b00      	cmp	r3, #0
 81059a4:	d002      	beq.n	81059ac <osDelay+0x4c>
      vTaskDelay(ticks);
 81059a6:	6878      	ldr	r0, [r7, #4]
 81059a8:	f001 fb7c 	bl	81070a4 <vTaskDelay>
    }
  }

  return (stat);
 81059ac:	697b      	ldr	r3, [r7, #20]
}
 81059ae:	4618      	mov	r0, r3
 81059b0:	3718      	adds	r7, #24
 81059b2:	46bd      	mov	sp, r7
 81059b4:	bd80      	pop	{r7, pc}
 81059b6:	bf00      	nop
 81059b8:	10000094 	.word	0x10000094

081059bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 81059bc:	b480      	push	{r7}
 81059be:	b085      	sub	sp, #20
 81059c0:	af00      	add	r7, sp, #0
 81059c2:	60f8      	str	r0, [r7, #12]
 81059c4:	60b9      	str	r1, [r7, #8]
 81059c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 81059c8:	68fb      	ldr	r3, [r7, #12]
 81059ca:	4a07      	ldr	r2, [pc, #28]	; (81059e8 <vApplicationGetIdleTaskMemory+0x2c>)
 81059cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 81059ce:	68bb      	ldr	r3, [r7, #8]
 81059d0:	4a06      	ldr	r2, [pc, #24]	; (81059ec <vApplicationGetIdleTaskMemory+0x30>)
 81059d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 81059d4:	687b      	ldr	r3, [r7, #4]
 81059d6:	2280      	movs	r2, #128	; 0x80
 81059d8:	601a      	str	r2, [r3, #0]
}
 81059da:	bf00      	nop
 81059dc:	3714      	adds	r7, #20
 81059de:	46bd      	mov	sp, r7
 81059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059e4:	4770      	bx	lr
 81059e6:	bf00      	nop
 81059e8:	10000098 	.word	0x10000098
 81059ec:	100000f4 	.word	0x100000f4

081059f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81059f0:	b480      	push	{r7}
 81059f2:	b085      	sub	sp, #20
 81059f4:	af00      	add	r7, sp, #0
 81059f6:	60f8      	str	r0, [r7, #12]
 81059f8:	60b9      	str	r1, [r7, #8]
 81059fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81059fc:	68fb      	ldr	r3, [r7, #12]
 81059fe:	4a07      	ldr	r2, [pc, #28]	; (8105a1c <vApplicationGetTimerTaskMemory+0x2c>)
 8105a00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8105a02:	68bb      	ldr	r3, [r7, #8]
 8105a04:	4a06      	ldr	r2, [pc, #24]	; (8105a20 <vApplicationGetTimerTaskMemory+0x30>)
 8105a06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8105a0e:	601a      	str	r2, [r3, #0]
}
 8105a10:	bf00      	nop
 8105a12:	3714      	adds	r7, #20
 8105a14:	46bd      	mov	sp, r7
 8105a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a1a:	4770      	bx	lr
 8105a1c:	100002f4 	.word	0x100002f4
 8105a20:	10000350 	.word	0x10000350

08105a24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8105a24:	b580      	push	{r7, lr}
 8105a26:	b08a      	sub	sp, #40	; 0x28
 8105a28:	af00      	add	r7, sp, #0
 8105a2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8105a2c:	2300      	movs	r3, #0
 8105a2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8105a30:	f001 fbd0 	bl	81071d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8105a34:	4b57      	ldr	r3, [pc, #348]	; (8105b94 <pvPortMalloc+0x170>)
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	2b00      	cmp	r3, #0
 8105a3a:	d101      	bne.n	8105a40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8105a3c:	f000 f90c 	bl	8105c58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8105a40:	4b55      	ldr	r3, [pc, #340]	; (8105b98 <pvPortMalloc+0x174>)
 8105a42:	681a      	ldr	r2, [r3, #0]
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	4013      	ands	r3, r2
 8105a48:	2b00      	cmp	r3, #0
 8105a4a:	f040 808c 	bne.w	8105b66 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	2b00      	cmp	r3, #0
 8105a52:	d01c      	beq.n	8105a8e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8105a54:	2208      	movs	r2, #8
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	4413      	add	r3, r2
 8105a5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8105a5c:	687b      	ldr	r3, [r7, #4]
 8105a5e:	f003 0307 	and.w	r3, r3, #7
 8105a62:	2b00      	cmp	r3, #0
 8105a64:	d013      	beq.n	8105a8e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8105a66:	687b      	ldr	r3, [r7, #4]
 8105a68:	f023 0307 	bic.w	r3, r3, #7
 8105a6c:	3308      	adds	r3, #8
 8105a6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8105a70:	687b      	ldr	r3, [r7, #4]
 8105a72:	f003 0307 	and.w	r3, r3, #7
 8105a76:	2b00      	cmp	r3, #0
 8105a78:	d009      	beq.n	8105a8e <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8105a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105a7e:	f383 8811 	msr	BASEPRI, r3
 8105a82:	f3bf 8f6f 	isb	sy
 8105a86:	f3bf 8f4f 	dsb	sy
 8105a8a:	617b      	str	r3, [r7, #20]
 8105a8c:	e7fe      	b.n	8105a8c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	2b00      	cmp	r3, #0
 8105a92:	d068      	beq.n	8105b66 <pvPortMalloc+0x142>
 8105a94:	4b41      	ldr	r3, [pc, #260]	; (8105b9c <pvPortMalloc+0x178>)
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	687a      	ldr	r2, [r7, #4]
 8105a9a:	429a      	cmp	r2, r3
 8105a9c:	d863      	bhi.n	8105b66 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8105a9e:	4b40      	ldr	r3, [pc, #256]	; (8105ba0 <pvPortMalloc+0x17c>)
 8105aa0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8105aa2:	4b3f      	ldr	r3, [pc, #252]	; (8105ba0 <pvPortMalloc+0x17c>)
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8105aa8:	e004      	b.n	8105ab4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8105aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105aac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8105aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8105ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ab6:	685b      	ldr	r3, [r3, #4]
 8105ab8:	687a      	ldr	r2, [r7, #4]
 8105aba:	429a      	cmp	r2, r3
 8105abc:	d903      	bls.n	8105ac6 <pvPortMalloc+0xa2>
 8105abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ac0:	681b      	ldr	r3, [r3, #0]
 8105ac2:	2b00      	cmp	r3, #0
 8105ac4:	d1f1      	bne.n	8105aaa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8105ac6:	4b33      	ldr	r3, [pc, #204]	; (8105b94 <pvPortMalloc+0x170>)
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105acc:	429a      	cmp	r2, r3
 8105ace:	d04a      	beq.n	8105b66 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8105ad0:	6a3b      	ldr	r3, [r7, #32]
 8105ad2:	681b      	ldr	r3, [r3, #0]
 8105ad4:	2208      	movs	r2, #8
 8105ad6:	4413      	add	r3, r2
 8105ad8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8105ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105adc:	681a      	ldr	r2, [r3, #0]
 8105ade:	6a3b      	ldr	r3, [r7, #32]
 8105ae0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8105ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ae4:	685a      	ldr	r2, [r3, #4]
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	1ad2      	subs	r2, r2, r3
 8105aea:	2308      	movs	r3, #8
 8105aec:	005b      	lsls	r3, r3, #1
 8105aee:	429a      	cmp	r2, r3
 8105af0:	d91e      	bls.n	8105b30 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8105af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	4413      	add	r3, r2
 8105af8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8105afa:	69bb      	ldr	r3, [r7, #24]
 8105afc:	f003 0307 	and.w	r3, r3, #7
 8105b00:	2b00      	cmp	r3, #0
 8105b02:	d009      	beq.n	8105b18 <pvPortMalloc+0xf4>
 8105b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105b08:	f383 8811 	msr	BASEPRI, r3
 8105b0c:	f3bf 8f6f 	isb	sy
 8105b10:	f3bf 8f4f 	dsb	sy
 8105b14:	613b      	str	r3, [r7, #16]
 8105b16:	e7fe      	b.n	8105b16 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8105b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b1a:	685a      	ldr	r2, [r3, #4]
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	1ad2      	subs	r2, r2, r3
 8105b20:	69bb      	ldr	r3, [r7, #24]
 8105b22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8105b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b26:	687a      	ldr	r2, [r7, #4]
 8105b28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8105b2a:	69b8      	ldr	r0, [r7, #24]
 8105b2c:	f000 f8f6 	bl	8105d1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8105b30:	4b1a      	ldr	r3, [pc, #104]	; (8105b9c <pvPortMalloc+0x178>)
 8105b32:	681a      	ldr	r2, [r3, #0]
 8105b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b36:	685b      	ldr	r3, [r3, #4]
 8105b38:	1ad3      	subs	r3, r2, r3
 8105b3a:	4a18      	ldr	r2, [pc, #96]	; (8105b9c <pvPortMalloc+0x178>)
 8105b3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8105b3e:	4b17      	ldr	r3, [pc, #92]	; (8105b9c <pvPortMalloc+0x178>)
 8105b40:	681a      	ldr	r2, [r3, #0]
 8105b42:	4b18      	ldr	r3, [pc, #96]	; (8105ba4 <pvPortMalloc+0x180>)
 8105b44:	681b      	ldr	r3, [r3, #0]
 8105b46:	429a      	cmp	r2, r3
 8105b48:	d203      	bcs.n	8105b52 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8105b4a:	4b14      	ldr	r3, [pc, #80]	; (8105b9c <pvPortMalloc+0x178>)
 8105b4c:	681b      	ldr	r3, [r3, #0]
 8105b4e:	4a15      	ldr	r2, [pc, #84]	; (8105ba4 <pvPortMalloc+0x180>)
 8105b50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8105b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b54:	685a      	ldr	r2, [r3, #4]
 8105b56:	4b10      	ldr	r3, [pc, #64]	; (8105b98 <pvPortMalloc+0x174>)
 8105b58:	681b      	ldr	r3, [r3, #0]
 8105b5a:	431a      	orrs	r2, r3
 8105b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8105b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105b62:	2200      	movs	r2, #0
 8105b64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8105b66:	f001 fb43 	bl	81071f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8105b6a:	69fb      	ldr	r3, [r7, #28]
 8105b6c:	f003 0307 	and.w	r3, r3, #7
 8105b70:	2b00      	cmp	r3, #0
 8105b72:	d009      	beq.n	8105b88 <pvPortMalloc+0x164>
 8105b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105b78:	f383 8811 	msr	BASEPRI, r3
 8105b7c:	f3bf 8f6f 	isb	sy
 8105b80:	f3bf 8f4f 	dsb	sy
 8105b84:	60fb      	str	r3, [r7, #12]
 8105b86:	e7fe      	b.n	8105b86 <pvPortMalloc+0x162>
	return pvReturn;
 8105b88:	69fb      	ldr	r3, [r7, #28]
}
 8105b8a:	4618      	mov	r0, r3
 8105b8c:	3728      	adds	r7, #40	; 0x28
 8105b8e:	46bd      	mov	sp, r7
 8105b90:	bd80      	pop	{r7, pc}
 8105b92:	bf00      	nop
 8105b94:	10004358 	.word	0x10004358
 8105b98:	10004364 	.word	0x10004364
 8105b9c:	1000435c 	.word	0x1000435c
 8105ba0:	10004350 	.word	0x10004350
 8105ba4:	10004360 	.word	0x10004360

08105ba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8105ba8:	b580      	push	{r7, lr}
 8105baa:	b086      	sub	sp, #24
 8105bac:	af00      	add	r7, sp, #0
 8105bae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8105bb0:	687b      	ldr	r3, [r7, #4]
 8105bb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8105bb4:	687b      	ldr	r3, [r7, #4]
 8105bb6:	2b00      	cmp	r3, #0
 8105bb8:	d046      	beq.n	8105c48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8105bba:	2308      	movs	r3, #8
 8105bbc:	425b      	negs	r3, r3
 8105bbe:	697a      	ldr	r2, [r7, #20]
 8105bc0:	4413      	add	r3, r2
 8105bc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8105bc4:	697b      	ldr	r3, [r7, #20]
 8105bc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8105bc8:	693b      	ldr	r3, [r7, #16]
 8105bca:	685a      	ldr	r2, [r3, #4]
 8105bcc:	4b20      	ldr	r3, [pc, #128]	; (8105c50 <vPortFree+0xa8>)
 8105bce:	681b      	ldr	r3, [r3, #0]
 8105bd0:	4013      	ands	r3, r2
 8105bd2:	2b00      	cmp	r3, #0
 8105bd4:	d109      	bne.n	8105bea <vPortFree+0x42>
 8105bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105bda:	f383 8811 	msr	BASEPRI, r3
 8105bde:	f3bf 8f6f 	isb	sy
 8105be2:	f3bf 8f4f 	dsb	sy
 8105be6:	60fb      	str	r3, [r7, #12]
 8105be8:	e7fe      	b.n	8105be8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8105bea:	693b      	ldr	r3, [r7, #16]
 8105bec:	681b      	ldr	r3, [r3, #0]
 8105bee:	2b00      	cmp	r3, #0
 8105bf0:	d009      	beq.n	8105c06 <vPortFree+0x5e>
 8105bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105bf6:	f383 8811 	msr	BASEPRI, r3
 8105bfa:	f3bf 8f6f 	isb	sy
 8105bfe:	f3bf 8f4f 	dsb	sy
 8105c02:	60bb      	str	r3, [r7, #8]
 8105c04:	e7fe      	b.n	8105c04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8105c06:	693b      	ldr	r3, [r7, #16]
 8105c08:	685a      	ldr	r2, [r3, #4]
 8105c0a:	4b11      	ldr	r3, [pc, #68]	; (8105c50 <vPortFree+0xa8>)
 8105c0c:	681b      	ldr	r3, [r3, #0]
 8105c0e:	4013      	ands	r3, r2
 8105c10:	2b00      	cmp	r3, #0
 8105c12:	d019      	beq.n	8105c48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8105c14:	693b      	ldr	r3, [r7, #16]
 8105c16:	681b      	ldr	r3, [r3, #0]
 8105c18:	2b00      	cmp	r3, #0
 8105c1a:	d115      	bne.n	8105c48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8105c1c:	693b      	ldr	r3, [r7, #16]
 8105c1e:	685a      	ldr	r2, [r3, #4]
 8105c20:	4b0b      	ldr	r3, [pc, #44]	; (8105c50 <vPortFree+0xa8>)
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	43db      	mvns	r3, r3
 8105c26:	401a      	ands	r2, r3
 8105c28:	693b      	ldr	r3, [r7, #16]
 8105c2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8105c2c:	f001 fad2 	bl	81071d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8105c30:	693b      	ldr	r3, [r7, #16]
 8105c32:	685a      	ldr	r2, [r3, #4]
 8105c34:	4b07      	ldr	r3, [pc, #28]	; (8105c54 <vPortFree+0xac>)
 8105c36:	681b      	ldr	r3, [r3, #0]
 8105c38:	4413      	add	r3, r2
 8105c3a:	4a06      	ldr	r2, [pc, #24]	; (8105c54 <vPortFree+0xac>)
 8105c3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8105c3e:	6938      	ldr	r0, [r7, #16]
 8105c40:	f000 f86c 	bl	8105d1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8105c44:	f001 fad4 	bl	81071f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8105c48:	bf00      	nop
 8105c4a:	3718      	adds	r7, #24
 8105c4c:	46bd      	mov	sp, r7
 8105c4e:	bd80      	pop	{r7, pc}
 8105c50:	10004364 	.word	0x10004364
 8105c54:	1000435c 	.word	0x1000435c

08105c58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8105c58:	b480      	push	{r7}
 8105c5a:	b085      	sub	sp, #20
 8105c5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8105c5e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8105c62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8105c64:	4b27      	ldr	r3, [pc, #156]	; (8105d04 <prvHeapInit+0xac>)
 8105c66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8105c68:	68fb      	ldr	r3, [r7, #12]
 8105c6a:	f003 0307 	and.w	r3, r3, #7
 8105c6e:	2b00      	cmp	r3, #0
 8105c70:	d00c      	beq.n	8105c8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8105c72:	68fb      	ldr	r3, [r7, #12]
 8105c74:	3307      	adds	r3, #7
 8105c76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8105c78:	68fb      	ldr	r3, [r7, #12]
 8105c7a:	f023 0307 	bic.w	r3, r3, #7
 8105c7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8105c80:	68ba      	ldr	r2, [r7, #8]
 8105c82:	68fb      	ldr	r3, [r7, #12]
 8105c84:	1ad3      	subs	r3, r2, r3
 8105c86:	4a1f      	ldr	r2, [pc, #124]	; (8105d04 <prvHeapInit+0xac>)
 8105c88:	4413      	add	r3, r2
 8105c8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8105c8c:	68fb      	ldr	r3, [r7, #12]
 8105c8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8105c90:	4a1d      	ldr	r2, [pc, #116]	; (8105d08 <prvHeapInit+0xb0>)
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8105c96:	4b1c      	ldr	r3, [pc, #112]	; (8105d08 <prvHeapInit+0xb0>)
 8105c98:	2200      	movs	r2, #0
 8105c9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	68ba      	ldr	r2, [r7, #8]
 8105ca0:	4413      	add	r3, r2
 8105ca2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8105ca4:	2208      	movs	r2, #8
 8105ca6:	68fb      	ldr	r3, [r7, #12]
 8105ca8:	1a9b      	subs	r3, r3, r2
 8105caa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8105cac:	68fb      	ldr	r3, [r7, #12]
 8105cae:	f023 0307 	bic.w	r3, r3, #7
 8105cb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8105cb4:	68fb      	ldr	r3, [r7, #12]
 8105cb6:	4a15      	ldr	r2, [pc, #84]	; (8105d0c <prvHeapInit+0xb4>)
 8105cb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8105cba:	4b14      	ldr	r3, [pc, #80]	; (8105d0c <prvHeapInit+0xb4>)
 8105cbc:	681b      	ldr	r3, [r3, #0]
 8105cbe:	2200      	movs	r2, #0
 8105cc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8105cc2:	4b12      	ldr	r3, [pc, #72]	; (8105d0c <prvHeapInit+0xb4>)
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	2200      	movs	r2, #0
 8105cc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8105cce:	683b      	ldr	r3, [r7, #0]
 8105cd0:	68fa      	ldr	r2, [r7, #12]
 8105cd2:	1ad2      	subs	r2, r2, r3
 8105cd4:	683b      	ldr	r3, [r7, #0]
 8105cd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8105cd8:	4b0c      	ldr	r3, [pc, #48]	; (8105d0c <prvHeapInit+0xb4>)
 8105cda:	681a      	ldr	r2, [r3, #0]
 8105cdc:	683b      	ldr	r3, [r7, #0]
 8105cde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8105ce0:	683b      	ldr	r3, [r7, #0]
 8105ce2:	685b      	ldr	r3, [r3, #4]
 8105ce4:	4a0a      	ldr	r2, [pc, #40]	; (8105d10 <prvHeapInit+0xb8>)
 8105ce6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8105ce8:	683b      	ldr	r3, [r7, #0]
 8105cea:	685b      	ldr	r3, [r3, #4]
 8105cec:	4a09      	ldr	r2, [pc, #36]	; (8105d14 <prvHeapInit+0xbc>)
 8105cee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8105cf0:	4b09      	ldr	r3, [pc, #36]	; (8105d18 <prvHeapInit+0xc0>)
 8105cf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8105cf6:	601a      	str	r2, [r3, #0]
}
 8105cf8:	bf00      	nop
 8105cfa:	3714      	adds	r7, #20
 8105cfc:	46bd      	mov	sp, r7
 8105cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d02:	4770      	bx	lr
 8105d04:	10000750 	.word	0x10000750
 8105d08:	10004350 	.word	0x10004350
 8105d0c:	10004358 	.word	0x10004358
 8105d10:	10004360 	.word	0x10004360
 8105d14:	1000435c 	.word	0x1000435c
 8105d18:	10004364 	.word	0x10004364

08105d1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8105d1c:	b480      	push	{r7}
 8105d1e:	b085      	sub	sp, #20
 8105d20:	af00      	add	r7, sp, #0
 8105d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8105d24:	4b28      	ldr	r3, [pc, #160]	; (8105dc8 <prvInsertBlockIntoFreeList+0xac>)
 8105d26:	60fb      	str	r3, [r7, #12]
 8105d28:	e002      	b.n	8105d30 <prvInsertBlockIntoFreeList+0x14>
 8105d2a:	68fb      	ldr	r3, [r7, #12]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	60fb      	str	r3, [r7, #12]
 8105d30:	68fb      	ldr	r3, [r7, #12]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	687a      	ldr	r2, [r7, #4]
 8105d36:	429a      	cmp	r2, r3
 8105d38:	d8f7      	bhi.n	8105d2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8105d3a:	68fb      	ldr	r3, [r7, #12]
 8105d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8105d3e:	68fb      	ldr	r3, [r7, #12]
 8105d40:	685b      	ldr	r3, [r3, #4]
 8105d42:	68ba      	ldr	r2, [r7, #8]
 8105d44:	4413      	add	r3, r2
 8105d46:	687a      	ldr	r2, [r7, #4]
 8105d48:	429a      	cmp	r2, r3
 8105d4a:	d108      	bne.n	8105d5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8105d4c:	68fb      	ldr	r3, [r7, #12]
 8105d4e:	685a      	ldr	r2, [r3, #4]
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	685b      	ldr	r3, [r3, #4]
 8105d54:	441a      	add	r2, r3
 8105d56:	68fb      	ldr	r3, [r7, #12]
 8105d58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8105d5a:	68fb      	ldr	r3, [r7, #12]
 8105d5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8105d62:	687b      	ldr	r3, [r7, #4]
 8105d64:	685b      	ldr	r3, [r3, #4]
 8105d66:	68ba      	ldr	r2, [r7, #8]
 8105d68:	441a      	add	r2, r3
 8105d6a:	68fb      	ldr	r3, [r7, #12]
 8105d6c:	681b      	ldr	r3, [r3, #0]
 8105d6e:	429a      	cmp	r2, r3
 8105d70:	d118      	bne.n	8105da4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8105d72:	68fb      	ldr	r3, [r7, #12]
 8105d74:	681a      	ldr	r2, [r3, #0]
 8105d76:	4b15      	ldr	r3, [pc, #84]	; (8105dcc <prvInsertBlockIntoFreeList+0xb0>)
 8105d78:	681b      	ldr	r3, [r3, #0]
 8105d7a:	429a      	cmp	r2, r3
 8105d7c:	d00d      	beq.n	8105d9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	685a      	ldr	r2, [r3, #4]
 8105d82:	68fb      	ldr	r3, [r7, #12]
 8105d84:	681b      	ldr	r3, [r3, #0]
 8105d86:	685b      	ldr	r3, [r3, #4]
 8105d88:	441a      	add	r2, r3
 8105d8a:	687b      	ldr	r3, [r7, #4]
 8105d8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8105d8e:	68fb      	ldr	r3, [r7, #12]
 8105d90:	681b      	ldr	r3, [r3, #0]
 8105d92:	681a      	ldr	r2, [r3, #0]
 8105d94:	687b      	ldr	r3, [r7, #4]
 8105d96:	601a      	str	r2, [r3, #0]
 8105d98:	e008      	b.n	8105dac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8105d9a:	4b0c      	ldr	r3, [pc, #48]	; (8105dcc <prvInsertBlockIntoFreeList+0xb0>)
 8105d9c:	681a      	ldr	r2, [r3, #0]
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	601a      	str	r2, [r3, #0]
 8105da2:	e003      	b.n	8105dac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8105da4:	68fb      	ldr	r3, [r7, #12]
 8105da6:	681a      	ldr	r2, [r3, #0]
 8105da8:	687b      	ldr	r3, [r7, #4]
 8105daa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8105dac:	68fa      	ldr	r2, [r7, #12]
 8105dae:	687b      	ldr	r3, [r7, #4]
 8105db0:	429a      	cmp	r2, r3
 8105db2:	d002      	beq.n	8105dba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8105db4:	68fb      	ldr	r3, [r7, #12]
 8105db6:	687a      	ldr	r2, [r7, #4]
 8105db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8105dba:	bf00      	nop
 8105dbc:	3714      	adds	r7, #20
 8105dbe:	46bd      	mov	sp, r7
 8105dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc4:	4770      	bx	lr
 8105dc6:	bf00      	nop
 8105dc8:	10004350 	.word	0x10004350
 8105dcc:	10004358 	.word	0x10004358

08105dd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8105dd0:	b480      	push	{r7}
 8105dd2:	b083      	sub	sp, #12
 8105dd4:	af00      	add	r7, sp, #0
 8105dd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	f103 0208 	add.w	r2, r3, #8
 8105dde:	687b      	ldr	r3, [r7, #4]
 8105de0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8105de2:	687b      	ldr	r3, [r7, #4]
 8105de4:	f04f 32ff 	mov.w	r2, #4294967295
 8105de8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105dea:	687b      	ldr	r3, [r7, #4]
 8105dec:	f103 0208 	add.w	r2, r3, #8
 8105df0:	687b      	ldr	r3, [r7, #4]
 8105df2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8105df4:	687b      	ldr	r3, [r7, #4]
 8105df6:	f103 0208 	add.w	r2, r3, #8
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8105dfe:	687b      	ldr	r3, [r7, #4]
 8105e00:	2200      	movs	r2, #0
 8105e02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8105e04:	bf00      	nop
 8105e06:	370c      	adds	r7, #12
 8105e08:	46bd      	mov	sp, r7
 8105e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e0e:	4770      	bx	lr

08105e10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8105e10:	b480      	push	{r7}
 8105e12:	b083      	sub	sp, #12
 8105e14:	af00      	add	r7, sp, #0
 8105e16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8105e18:	687b      	ldr	r3, [r7, #4]
 8105e1a:	2200      	movs	r2, #0
 8105e1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8105e1e:	bf00      	nop
 8105e20:	370c      	adds	r7, #12
 8105e22:	46bd      	mov	sp, r7
 8105e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e28:	4770      	bx	lr

08105e2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8105e2a:	b480      	push	{r7}
 8105e2c:	b085      	sub	sp, #20
 8105e2e:	af00      	add	r7, sp, #0
 8105e30:	6078      	str	r0, [r7, #4]
 8105e32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	685b      	ldr	r3, [r3, #4]
 8105e38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8105e3a:	683b      	ldr	r3, [r7, #0]
 8105e3c:	68fa      	ldr	r2, [r7, #12]
 8105e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8105e40:	68fb      	ldr	r3, [r7, #12]
 8105e42:	689a      	ldr	r2, [r3, #8]
 8105e44:	683b      	ldr	r3, [r7, #0]
 8105e46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8105e48:	68fb      	ldr	r3, [r7, #12]
 8105e4a:	689b      	ldr	r3, [r3, #8]
 8105e4c:	683a      	ldr	r2, [r7, #0]
 8105e4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8105e50:	68fb      	ldr	r3, [r7, #12]
 8105e52:	683a      	ldr	r2, [r7, #0]
 8105e54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8105e56:	683b      	ldr	r3, [r7, #0]
 8105e58:	687a      	ldr	r2, [r7, #4]
 8105e5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8105e5c:	687b      	ldr	r3, [r7, #4]
 8105e5e:	681b      	ldr	r3, [r3, #0]
 8105e60:	1c5a      	adds	r2, r3, #1
 8105e62:	687b      	ldr	r3, [r7, #4]
 8105e64:	601a      	str	r2, [r3, #0]
}
 8105e66:	bf00      	nop
 8105e68:	3714      	adds	r7, #20
 8105e6a:	46bd      	mov	sp, r7
 8105e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e70:	4770      	bx	lr

08105e72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8105e72:	b480      	push	{r7}
 8105e74:	b085      	sub	sp, #20
 8105e76:	af00      	add	r7, sp, #0
 8105e78:	6078      	str	r0, [r7, #4]
 8105e7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8105e7c:	683b      	ldr	r3, [r7, #0]
 8105e7e:	681b      	ldr	r3, [r3, #0]
 8105e80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8105e82:	68bb      	ldr	r3, [r7, #8]
 8105e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105e88:	d103      	bne.n	8105e92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	691b      	ldr	r3, [r3, #16]
 8105e8e:	60fb      	str	r3, [r7, #12]
 8105e90:	e00c      	b.n	8105eac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8105e92:	687b      	ldr	r3, [r7, #4]
 8105e94:	3308      	adds	r3, #8
 8105e96:	60fb      	str	r3, [r7, #12]
 8105e98:	e002      	b.n	8105ea0 <vListInsert+0x2e>
 8105e9a:	68fb      	ldr	r3, [r7, #12]
 8105e9c:	685b      	ldr	r3, [r3, #4]
 8105e9e:	60fb      	str	r3, [r7, #12]
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	685b      	ldr	r3, [r3, #4]
 8105ea4:	681b      	ldr	r3, [r3, #0]
 8105ea6:	68ba      	ldr	r2, [r7, #8]
 8105ea8:	429a      	cmp	r2, r3
 8105eaa:	d2f6      	bcs.n	8105e9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8105eac:	68fb      	ldr	r3, [r7, #12]
 8105eae:	685a      	ldr	r2, [r3, #4]
 8105eb0:	683b      	ldr	r3, [r7, #0]
 8105eb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8105eb4:	683b      	ldr	r3, [r7, #0]
 8105eb6:	685b      	ldr	r3, [r3, #4]
 8105eb8:	683a      	ldr	r2, [r7, #0]
 8105eba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8105ebc:	683b      	ldr	r3, [r7, #0]
 8105ebe:	68fa      	ldr	r2, [r7, #12]
 8105ec0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8105ec2:	68fb      	ldr	r3, [r7, #12]
 8105ec4:	683a      	ldr	r2, [r7, #0]
 8105ec6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8105ec8:	683b      	ldr	r3, [r7, #0]
 8105eca:	687a      	ldr	r2, [r7, #4]
 8105ecc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8105ece:	687b      	ldr	r3, [r7, #4]
 8105ed0:	681b      	ldr	r3, [r3, #0]
 8105ed2:	1c5a      	adds	r2, r3, #1
 8105ed4:	687b      	ldr	r3, [r7, #4]
 8105ed6:	601a      	str	r2, [r3, #0]
}
 8105ed8:	bf00      	nop
 8105eda:	3714      	adds	r7, #20
 8105edc:	46bd      	mov	sp, r7
 8105ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ee2:	4770      	bx	lr

08105ee4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8105ee4:	b480      	push	{r7}
 8105ee6:	b085      	sub	sp, #20
 8105ee8:	af00      	add	r7, sp, #0
 8105eea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8105eec:	687b      	ldr	r3, [r7, #4]
 8105eee:	691b      	ldr	r3, [r3, #16]
 8105ef0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8105ef2:	687b      	ldr	r3, [r7, #4]
 8105ef4:	685b      	ldr	r3, [r3, #4]
 8105ef6:	687a      	ldr	r2, [r7, #4]
 8105ef8:	6892      	ldr	r2, [r2, #8]
 8105efa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8105efc:	687b      	ldr	r3, [r7, #4]
 8105efe:	689b      	ldr	r3, [r3, #8]
 8105f00:	687a      	ldr	r2, [r7, #4]
 8105f02:	6852      	ldr	r2, [r2, #4]
 8105f04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8105f06:	68fb      	ldr	r3, [r7, #12]
 8105f08:	685b      	ldr	r3, [r3, #4]
 8105f0a:	687a      	ldr	r2, [r7, #4]
 8105f0c:	429a      	cmp	r2, r3
 8105f0e:	d103      	bne.n	8105f18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	689a      	ldr	r2, [r3, #8]
 8105f14:	68fb      	ldr	r3, [r7, #12]
 8105f16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8105f18:	687b      	ldr	r3, [r7, #4]
 8105f1a:	2200      	movs	r2, #0
 8105f1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8105f1e:	68fb      	ldr	r3, [r7, #12]
 8105f20:	681b      	ldr	r3, [r3, #0]
 8105f22:	1e5a      	subs	r2, r3, #1
 8105f24:	68fb      	ldr	r3, [r7, #12]
 8105f26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8105f28:	68fb      	ldr	r3, [r7, #12]
 8105f2a:	681b      	ldr	r3, [r3, #0]
}
 8105f2c:	4618      	mov	r0, r3
 8105f2e:	3714      	adds	r7, #20
 8105f30:	46bd      	mov	sp, r7
 8105f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f36:	4770      	bx	lr

08105f38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8105f38:	b480      	push	{r7}
 8105f3a:	b085      	sub	sp, #20
 8105f3c:	af00      	add	r7, sp, #0
 8105f3e:	60f8      	str	r0, [r7, #12]
 8105f40:	60b9      	str	r1, [r7, #8]
 8105f42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8105f44:	68fb      	ldr	r3, [r7, #12]
 8105f46:	3b04      	subs	r3, #4
 8105f48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8105f4a:	68fb      	ldr	r3, [r7, #12]
 8105f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8105f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8105f52:	68fb      	ldr	r3, [r7, #12]
 8105f54:	3b04      	subs	r3, #4
 8105f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8105f58:	68bb      	ldr	r3, [r7, #8]
 8105f5a:	f023 0201 	bic.w	r2, r3, #1
 8105f5e:	68fb      	ldr	r3, [r7, #12]
 8105f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8105f62:	68fb      	ldr	r3, [r7, #12]
 8105f64:	3b04      	subs	r3, #4
 8105f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8105f68:	4a0c      	ldr	r2, [pc, #48]	; (8105f9c <pxPortInitialiseStack+0x64>)
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8105f6e:	68fb      	ldr	r3, [r7, #12]
 8105f70:	3b14      	subs	r3, #20
 8105f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8105f74:	687a      	ldr	r2, [r7, #4]
 8105f76:	68fb      	ldr	r3, [r7, #12]
 8105f78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8105f7a:	68fb      	ldr	r3, [r7, #12]
 8105f7c:	3b04      	subs	r3, #4
 8105f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8105f80:	68fb      	ldr	r3, [r7, #12]
 8105f82:	f06f 0202 	mvn.w	r2, #2
 8105f86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8105f88:	68fb      	ldr	r3, [r7, #12]
 8105f8a:	3b20      	subs	r3, #32
 8105f8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8105f8e:	68fb      	ldr	r3, [r7, #12]
}
 8105f90:	4618      	mov	r0, r3
 8105f92:	3714      	adds	r7, #20
 8105f94:	46bd      	mov	sp, r7
 8105f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105f9a:	4770      	bx	lr
 8105f9c:	08105fa1 	.word	0x08105fa1

08105fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8105fa0:	b480      	push	{r7}
 8105fa2:	b085      	sub	sp, #20
 8105fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8105fa6:	2300      	movs	r3, #0
 8105fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8105faa:	4b11      	ldr	r3, [pc, #68]	; (8105ff0 <prvTaskExitError+0x50>)
 8105fac:	681b      	ldr	r3, [r3, #0]
 8105fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105fb2:	d009      	beq.n	8105fc8 <prvTaskExitError+0x28>
 8105fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105fb8:	f383 8811 	msr	BASEPRI, r3
 8105fbc:	f3bf 8f6f 	isb	sy
 8105fc0:	f3bf 8f4f 	dsb	sy
 8105fc4:	60fb      	str	r3, [r7, #12]
 8105fc6:	e7fe      	b.n	8105fc6 <prvTaskExitError+0x26>
 8105fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105fcc:	f383 8811 	msr	BASEPRI, r3
 8105fd0:	f3bf 8f6f 	isb	sy
 8105fd4:	f3bf 8f4f 	dsb	sy
 8105fd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8105fda:	bf00      	nop
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	2b00      	cmp	r3, #0
 8105fe0:	d0fc      	beq.n	8105fdc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8105fe2:	bf00      	nop
 8105fe4:	3714      	adds	r7, #20
 8105fe6:	46bd      	mov	sp, r7
 8105fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fec:	4770      	bx	lr
 8105fee:	bf00      	nop
 8105ff0:	1000000c 	.word	0x1000000c
	...

08106000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8106000:	4b07      	ldr	r3, [pc, #28]	; (8106020 <pxCurrentTCBConst2>)
 8106002:	6819      	ldr	r1, [r3, #0]
 8106004:	6808      	ldr	r0, [r1, #0]
 8106006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810600a:	f380 8809 	msr	PSP, r0
 810600e:	f3bf 8f6f 	isb	sy
 8106012:	f04f 0000 	mov.w	r0, #0
 8106016:	f380 8811 	msr	BASEPRI, r0
 810601a:	4770      	bx	lr
 810601c:	f3af 8000 	nop.w

08106020 <pxCurrentTCBConst2>:
 8106020:	10004370 	.word	0x10004370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8106024:	bf00      	nop
 8106026:	bf00      	nop

08106028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8106028:	4808      	ldr	r0, [pc, #32]	; (810604c <prvPortStartFirstTask+0x24>)
 810602a:	6800      	ldr	r0, [r0, #0]
 810602c:	6800      	ldr	r0, [r0, #0]
 810602e:	f380 8808 	msr	MSP, r0
 8106032:	f04f 0000 	mov.w	r0, #0
 8106036:	f380 8814 	msr	CONTROL, r0
 810603a:	b662      	cpsie	i
 810603c:	b661      	cpsie	f
 810603e:	f3bf 8f4f 	dsb	sy
 8106042:	f3bf 8f6f 	isb	sy
 8106046:	df00      	svc	0
 8106048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810604a:	bf00      	nop
 810604c:	e000ed08 	.word	0xe000ed08

08106050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8106050:	b580      	push	{r7, lr}
 8106052:	b086      	sub	sp, #24
 8106054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8106056:	4b44      	ldr	r3, [pc, #272]	; (8106168 <xPortStartScheduler+0x118>)
 8106058:	681b      	ldr	r3, [r3, #0]
 810605a:	4a44      	ldr	r2, [pc, #272]	; (810616c <xPortStartScheduler+0x11c>)
 810605c:	4293      	cmp	r3, r2
 810605e:	d109      	bne.n	8106074 <xPortStartScheduler+0x24>
 8106060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106064:	f383 8811 	msr	BASEPRI, r3
 8106068:	f3bf 8f6f 	isb	sy
 810606c:	f3bf 8f4f 	dsb	sy
 8106070:	613b      	str	r3, [r7, #16]
 8106072:	e7fe      	b.n	8106072 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8106074:	4b3c      	ldr	r3, [pc, #240]	; (8106168 <xPortStartScheduler+0x118>)
 8106076:	681b      	ldr	r3, [r3, #0]
 8106078:	4a3d      	ldr	r2, [pc, #244]	; (8106170 <xPortStartScheduler+0x120>)
 810607a:	4293      	cmp	r3, r2
 810607c:	d109      	bne.n	8106092 <xPortStartScheduler+0x42>
 810607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106082:	f383 8811 	msr	BASEPRI, r3
 8106086:	f3bf 8f6f 	isb	sy
 810608a:	f3bf 8f4f 	dsb	sy
 810608e:	60fb      	str	r3, [r7, #12]
 8106090:	e7fe      	b.n	8106090 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8106092:	4b38      	ldr	r3, [pc, #224]	; (8106174 <xPortStartScheduler+0x124>)
 8106094:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8106096:	697b      	ldr	r3, [r7, #20]
 8106098:	781b      	ldrb	r3, [r3, #0]
 810609a:	b2db      	uxtb	r3, r3
 810609c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810609e:	697b      	ldr	r3, [r7, #20]
 81060a0:	22ff      	movs	r2, #255	; 0xff
 81060a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 81060a4:	697b      	ldr	r3, [r7, #20]
 81060a6:	781b      	ldrb	r3, [r3, #0]
 81060a8:	b2db      	uxtb	r3, r3
 81060aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 81060ac:	78fb      	ldrb	r3, [r7, #3]
 81060ae:	b2db      	uxtb	r3, r3
 81060b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 81060b4:	b2da      	uxtb	r2, r3
 81060b6:	4b30      	ldr	r3, [pc, #192]	; (8106178 <xPortStartScheduler+0x128>)
 81060b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 81060ba:	4b30      	ldr	r3, [pc, #192]	; (810617c <xPortStartScheduler+0x12c>)
 81060bc:	2207      	movs	r2, #7
 81060be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81060c0:	e009      	b.n	81060d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 81060c2:	4b2e      	ldr	r3, [pc, #184]	; (810617c <xPortStartScheduler+0x12c>)
 81060c4:	681b      	ldr	r3, [r3, #0]
 81060c6:	3b01      	subs	r3, #1
 81060c8:	4a2c      	ldr	r2, [pc, #176]	; (810617c <xPortStartScheduler+0x12c>)
 81060ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 81060cc:	78fb      	ldrb	r3, [r7, #3]
 81060ce:	b2db      	uxtb	r3, r3
 81060d0:	005b      	lsls	r3, r3, #1
 81060d2:	b2db      	uxtb	r3, r3
 81060d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 81060d6:	78fb      	ldrb	r3, [r7, #3]
 81060d8:	b2db      	uxtb	r3, r3
 81060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81060de:	2b80      	cmp	r3, #128	; 0x80
 81060e0:	d0ef      	beq.n	81060c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 81060e2:	4b26      	ldr	r3, [pc, #152]	; (810617c <xPortStartScheduler+0x12c>)
 81060e4:	681b      	ldr	r3, [r3, #0]
 81060e6:	f1c3 0307 	rsb	r3, r3, #7
 81060ea:	2b04      	cmp	r3, #4
 81060ec:	d009      	beq.n	8106102 <xPortStartScheduler+0xb2>
 81060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 81060f2:	f383 8811 	msr	BASEPRI, r3
 81060f6:	f3bf 8f6f 	isb	sy
 81060fa:	f3bf 8f4f 	dsb	sy
 81060fe:	60bb      	str	r3, [r7, #8]
 8106100:	e7fe      	b.n	8106100 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8106102:	4b1e      	ldr	r3, [pc, #120]	; (810617c <xPortStartScheduler+0x12c>)
 8106104:	681b      	ldr	r3, [r3, #0]
 8106106:	021b      	lsls	r3, r3, #8
 8106108:	4a1c      	ldr	r2, [pc, #112]	; (810617c <xPortStartScheduler+0x12c>)
 810610a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810610c:	4b1b      	ldr	r3, [pc, #108]	; (810617c <xPortStartScheduler+0x12c>)
 810610e:	681b      	ldr	r3, [r3, #0]
 8106110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8106114:	4a19      	ldr	r2, [pc, #100]	; (810617c <xPortStartScheduler+0x12c>)
 8106116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	b2da      	uxtb	r2, r3
 810611c:	697b      	ldr	r3, [r7, #20]
 810611e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8106120:	4b17      	ldr	r3, [pc, #92]	; (8106180 <xPortStartScheduler+0x130>)
 8106122:	681b      	ldr	r3, [r3, #0]
 8106124:	4a16      	ldr	r2, [pc, #88]	; (8106180 <xPortStartScheduler+0x130>)
 8106126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810612a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810612c:	4b14      	ldr	r3, [pc, #80]	; (8106180 <xPortStartScheduler+0x130>)
 810612e:	681b      	ldr	r3, [r3, #0]
 8106130:	4a13      	ldr	r2, [pc, #76]	; (8106180 <xPortStartScheduler+0x130>)
 8106132:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8106136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8106138:	f000 f8d6 	bl	81062e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810613c:	4b11      	ldr	r3, [pc, #68]	; (8106184 <xPortStartScheduler+0x134>)
 810613e:	2200      	movs	r2, #0
 8106140:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8106142:	f000 f8f5 	bl	8106330 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8106146:	4b10      	ldr	r3, [pc, #64]	; (8106188 <xPortStartScheduler+0x138>)
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	4a0f      	ldr	r2, [pc, #60]	; (8106188 <xPortStartScheduler+0x138>)
 810614c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8106150:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8106152:	f7ff ff69 	bl	8106028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8106156:	f001 f9af 	bl	81074b8 <vTaskSwitchContext>
	prvTaskExitError();
 810615a:	f7ff ff21 	bl	8105fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810615e:	2300      	movs	r3, #0
}
 8106160:	4618      	mov	r0, r3
 8106162:	3718      	adds	r7, #24
 8106164:	46bd      	mov	sp, r7
 8106166:	bd80      	pop	{r7, pc}
 8106168:	e000ed00 	.word	0xe000ed00
 810616c:	410fc271 	.word	0x410fc271
 8106170:	410fc270 	.word	0x410fc270
 8106174:	e000e400 	.word	0xe000e400
 8106178:	10004368 	.word	0x10004368
 810617c:	1000436c 	.word	0x1000436c
 8106180:	e000ed20 	.word	0xe000ed20
 8106184:	1000000c 	.word	0x1000000c
 8106188:	e000ef34 	.word	0xe000ef34

0810618c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810618c:	b480      	push	{r7}
 810618e:	b083      	sub	sp, #12
 8106190:	af00      	add	r7, sp, #0
 8106192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106196:	f383 8811 	msr	BASEPRI, r3
 810619a:	f3bf 8f6f 	isb	sy
 810619e:	f3bf 8f4f 	dsb	sy
 81061a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 81061a4:	4b0e      	ldr	r3, [pc, #56]	; (81061e0 <vPortEnterCritical+0x54>)
 81061a6:	681b      	ldr	r3, [r3, #0]
 81061a8:	3301      	adds	r3, #1
 81061aa:	4a0d      	ldr	r2, [pc, #52]	; (81061e0 <vPortEnterCritical+0x54>)
 81061ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 81061ae:	4b0c      	ldr	r3, [pc, #48]	; (81061e0 <vPortEnterCritical+0x54>)
 81061b0:	681b      	ldr	r3, [r3, #0]
 81061b2:	2b01      	cmp	r3, #1
 81061b4:	d10e      	bne.n	81061d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 81061b6:	4b0b      	ldr	r3, [pc, #44]	; (81061e4 <vPortEnterCritical+0x58>)
 81061b8:	681b      	ldr	r3, [r3, #0]
 81061ba:	b2db      	uxtb	r3, r3
 81061bc:	2b00      	cmp	r3, #0
 81061be:	d009      	beq.n	81061d4 <vPortEnterCritical+0x48>
 81061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81061c4:	f383 8811 	msr	BASEPRI, r3
 81061c8:	f3bf 8f6f 	isb	sy
 81061cc:	f3bf 8f4f 	dsb	sy
 81061d0:	603b      	str	r3, [r7, #0]
 81061d2:	e7fe      	b.n	81061d2 <vPortEnterCritical+0x46>
	}
}
 81061d4:	bf00      	nop
 81061d6:	370c      	adds	r7, #12
 81061d8:	46bd      	mov	sp, r7
 81061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061de:	4770      	bx	lr
 81061e0:	1000000c 	.word	0x1000000c
 81061e4:	e000ed04 	.word	0xe000ed04

081061e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 81061e8:	b480      	push	{r7}
 81061ea:	b083      	sub	sp, #12
 81061ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 81061ee:	4b11      	ldr	r3, [pc, #68]	; (8106234 <vPortExitCritical+0x4c>)
 81061f0:	681b      	ldr	r3, [r3, #0]
 81061f2:	2b00      	cmp	r3, #0
 81061f4:	d109      	bne.n	810620a <vPortExitCritical+0x22>
 81061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81061fa:	f383 8811 	msr	BASEPRI, r3
 81061fe:	f3bf 8f6f 	isb	sy
 8106202:	f3bf 8f4f 	dsb	sy
 8106206:	607b      	str	r3, [r7, #4]
 8106208:	e7fe      	b.n	8106208 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810620a:	4b0a      	ldr	r3, [pc, #40]	; (8106234 <vPortExitCritical+0x4c>)
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	3b01      	subs	r3, #1
 8106210:	4a08      	ldr	r2, [pc, #32]	; (8106234 <vPortExitCritical+0x4c>)
 8106212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8106214:	4b07      	ldr	r3, [pc, #28]	; (8106234 <vPortExitCritical+0x4c>)
 8106216:	681b      	ldr	r3, [r3, #0]
 8106218:	2b00      	cmp	r3, #0
 810621a:	d104      	bne.n	8106226 <vPortExitCritical+0x3e>
 810621c:	2300      	movs	r3, #0
 810621e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8106220:	683b      	ldr	r3, [r7, #0]
 8106222:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8106226:	bf00      	nop
 8106228:	370c      	adds	r7, #12
 810622a:	46bd      	mov	sp, r7
 810622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106230:	4770      	bx	lr
 8106232:	bf00      	nop
 8106234:	1000000c 	.word	0x1000000c
	...

08106240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8106240:	f3ef 8009 	mrs	r0, PSP
 8106244:	f3bf 8f6f 	isb	sy
 8106248:	4b15      	ldr	r3, [pc, #84]	; (81062a0 <pxCurrentTCBConst>)
 810624a:	681a      	ldr	r2, [r3, #0]
 810624c:	f01e 0f10 	tst.w	lr, #16
 8106250:	bf08      	it	eq
 8106252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8106256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810625a:	6010      	str	r0, [r2, #0]
 810625c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8106260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8106264:	f380 8811 	msr	BASEPRI, r0
 8106268:	f3bf 8f4f 	dsb	sy
 810626c:	f3bf 8f6f 	isb	sy
 8106270:	f001 f922 	bl	81074b8 <vTaskSwitchContext>
 8106274:	f04f 0000 	mov.w	r0, #0
 8106278:	f380 8811 	msr	BASEPRI, r0
 810627c:	bc09      	pop	{r0, r3}
 810627e:	6819      	ldr	r1, [r3, #0]
 8106280:	6808      	ldr	r0, [r1, #0]
 8106282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106286:	f01e 0f10 	tst.w	lr, #16
 810628a:	bf08      	it	eq
 810628c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8106290:	f380 8809 	msr	PSP, r0
 8106294:	f3bf 8f6f 	isb	sy
 8106298:	4770      	bx	lr
 810629a:	bf00      	nop
 810629c:	f3af 8000 	nop.w

081062a0 <pxCurrentTCBConst>:
 81062a0:	10004370 	.word	0x10004370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 81062a4:	bf00      	nop
 81062a6:	bf00      	nop

081062a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 81062a8:	b580      	push	{r7, lr}
 81062aa:	b082      	sub	sp, #8
 81062ac:	af00      	add	r7, sp, #0
	__asm volatile
 81062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 81062b2:	f383 8811 	msr	BASEPRI, r3
 81062b6:	f3bf 8f6f 	isb	sy
 81062ba:	f3bf 8f4f 	dsb	sy
 81062be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 81062c0:	f001 f842 	bl	8107348 <xTaskIncrementTick>
 81062c4:	4603      	mov	r3, r0
 81062c6:	2b00      	cmp	r3, #0
 81062c8:	d003      	beq.n	81062d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 81062ca:	4b06      	ldr	r3, [pc, #24]	; (81062e4 <SysTick_Handler+0x3c>)
 81062cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81062d0:	601a      	str	r2, [r3, #0]
 81062d2:	2300      	movs	r3, #0
 81062d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 81062d6:	683b      	ldr	r3, [r7, #0]
 81062d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 81062dc:	bf00      	nop
 81062de:	3708      	adds	r7, #8
 81062e0:	46bd      	mov	sp, r7
 81062e2:	bd80      	pop	{r7, pc}
 81062e4:	e000ed04 	.word	0xe000ed04

081062e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 81062e8:	b480      	push	{r7}
 81062ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 81062ec:	4b0b      	ldr	r3, [pc, #44]	; (810631c <vPortSetupTimerInterrupt+0x34>)
 81062ee:	2200      	movs	r2, #0
 81062f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 81062f2:	4b0b      	ldr	r3, [pc, #44]	; (8106320 <vPortSetupTimerInterrupt+0x38>)
 81062f4:	2200      	movs	r2, #0
 81062f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 81062f8:	4b0a      	ldr	r3, [pc, #40]	; (8106324 <vPortSetupTimerInterrupt+0x3c>)
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	4a0a      	ldr	r2, [pc, #40]	; (8106328 <vPortSetupTimerInterrupt+0x40>)
 81062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8106302:	099b      	lsrs	r3, r3, #6
 8106304:	4a09      	ldr	r2, [pc, #36]	; (810632c <vPortSetupTimerInterrupt+0x44>)
 8106306:	3b01      	subs	r3, #1
 8106308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810630a:	4b04      	ldr	r3, [pc, #16]	; (810631c <vPortSetupTimerInterrupt+0x34>)
 810630c:	2207      	movs	r2, #7
 810630e:	601a      	str	r2, [r3, #0]
}
 8106310:	bf00      	nop
 8106312:	46bd      	mov	sp, r7
 8106314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106318:	4770      	bx	lr
 810631a:	bf00      	nop
 810631c:	e000e010 	.word	0xe000e010
 8106320:	e000e018 	.word	0xe000e018
 8106324:	10000004 	.word	0x10000004
 8106328:	10624dd3 	.word	0x10624dd3
 810632c:	e000e014 	.word	0xe000e014

08106330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8106330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8106340 <vPortEnableVFP+0x10>
 8106334:	6801      	ldr	r1, [r0, #0]
 8106336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810633a:	6001      	str	r1, [r0, #0]
 810633c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810633e:	bf00      	nop
 8106340:	e000ed88 	.word	0xe000ed88

08106344 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8106344:	b480      	push	{r7}
 8106346:	b085      	sub	sp, #20
 8106348:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810634a:	f3ef 8305 	mrs	r3, IPSR
 810634e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8106350:	68fb      	ldr	r3, [r7, #12]
 8106352:	2b0f      	cmp	r3, #15
 8106354:	d913      	bls.n	810637e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8106356:	4a16      	ldr	r2, [pc, #88]	; (81063b0 <vPortValidateInterruptPriority+0x6c>)
 8106358:	68fb      	ldr	r3, [r7, #12]
 810635a:	4413      	add	r3, r2
 810635c:	781b      	ldrb	r3, [r3, #0]
 810635e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8106360:	4b14      	ldr	r3, [pc, #80]	; (81063b4 <vPortValidateInterruptPriority+0x70>)
 8106362:	781b      	ldrb	r3, [r3, #0]
 8106364:	7afa      	ldrb	r2, [r7, #11]
 8106366:	429a      	cmp	r2, r3
 8106368:	d209      	bcs.n	810637e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 810636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810636e:	f383 8811 	msr	BASEPRI, r3
 8106372:	f3bf 8f6f 	isb	sy
 8106376:	f3bf 8f4f 	dsb	sy
 810637a:	607b      	str	r3, [r7, #4]
 810637c:	e7fe      	b.n	810637c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810637e:	4b0e      	ldr	r3, [pc, #56]	; (81063b8 <vPortValidateInterruptPriority+0x74>)
 8106380:	681b      	ldr	r3, [r3, #0]
 8106382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8106386:	4b0d      	ldr	r3, [pc, #52]	; (81063bc <vPortValidateInterruptPriority+0x78>)
 8106388:	681b      	ldr	r3, [r3, #0]
 810638a:	429a      	cmp	r2, r3
 810638c:	d909      	bls.n	81063a2 <vPortValidateInterruptPriority+0x5e>
 810638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106392:	f383 8811 	msr	BASEPRI, r3
 8106396:	f3bf 8f6f 	isb	sy
 810639a:	f3bf 8f4f 	dsb	sy
 810639e:	603b      	str	r3, [r7, #0]
 81063a0:	e7fe      	b.n	81063a0 <vPortValidateInterruptPriority+0x5c>
	}
 81063a2:	bf00      	nop
 81063a4:	3714      	adds	r7, #20
 81063a6:	46bd      	mov	sp, r7
 81063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ac:	4770      	bx	lr
 81063ae:	bf00      	nop
 81063b0:	e000e3f0 	.word	0xe000e3f0
 81063b4:	10004368 	.word	0x10004368
 81063b8:	e000ed0c 	.word	0xe000ed0c
 81063bc:	1000436c 	.word	0x1000436c

081063c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 81063c0:	b580      	push	{r7, lr}
 81063c2:	b084      	sub	sp, #16
 81063c4:	af00      	add	r7, sp, #0
 81063c6:	6078      	str	r0, [r7, #4]
 81063c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 81063ca:	687b      	ldr	r3, [r7, #4]
 81063cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 81063ce:	68fb      	ldr	r3, [r7, #12]
 81063d0:	2b00      	cmp	r3, #0
 81063d2:	d109      	bne.n	81063e8 <xQueueGenericReset+0x28>
 81063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81063d8:	f383 8811 	msr	BASEPRI, r3
 81063dc:	f3bf 8f6f 	isb	sy
 81063e0:	f3bf 8f4f 	dsb	sy
 81063e4:	60bb      	str	r3, [r7, #8]
 81063e6:	e7fe      	b.n	81063e6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 81063e8:	f7ff fed0 	bl	810618c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81063ec:	68fb      	ldr	r3, [r7, #12]
 81063ee:	681a      	ldr	r2, [r3, #0]
 81063f0:	68fb      	ldr	r3, [r7, #12]
 81063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063f4:	68f9      	ldr	r1, [r7, #12]
 81063f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81063f8:	fb01 f303 	mul.w	r3, r1, r3
 81063fc:	441a      	add	r2, r3
 81063fe:	68fb      	ldr	r3, [r7, #12]
 8106400:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8106402:	68fb      	ldr	r3, [r7, #12]
 8106404:	2200      	movs	r2, #0
 8106406:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8106408:	68fb      	ldr	r3, [r7, #12]
 810640a:	681a      	ldr	r2, [r3, #0]
 810640c:	68fb      	ldr	r3, [r7, #12]
 810640e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8106410:	68fb      	ldr	r3, [r7, #12]
 8106412:	681a      	ldr	r2, [r3, #0]
 8106414:	68fb      	ldr	r3, [r7, #12]
 8106416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106418:	3b01      	subs	r3, #1
 810641a:	68f9      	ldr	r1, [r7, #12]
 810641c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810641e:	fb01 f303 	mul.w	r3, r1, r3
 8106422:	441a      	add	r2, r3
 8106424:	68fb      	ldr	r3, [r7, #12]
 8106426:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8106428:	68fb      	ldr	r3, [r7, #12]
 810642a:	22ff      	movs	r2, #255	; 0xff
 810642c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8106430:	68fb      	ldr	r3, [r7, #12]
 8106432:	22ff      	movs	r2, #255	; 0xff
 8106434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8106438:	683b      	ldr	r3, [r7, #0]
 810643a:	2b00      	cmp	r3, #0
 810643c:	d114      	bne.n	8106468 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810643e:	68fb      	ldr	r3, [r7, #12]
 8106440:	691b      	ldr	r3, [r3, #16]
 8106442:	2b00      	cmp	r3, #0
 8106444:	d01a      	beq.n	810647c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106446:	68fb      	ldr	r3, [r7, #12]
 8106448:	3310      	adds	r3, #16
 810644a:	4618      	mov	r0, r3
 810644c:	f001 f8de 	bl	810760c <xTaskRemoveFromEventList>
 8106450:	4603      	mov	r3, r0
 8106452:	2b00      	cmp	r3, #0
 8106454:	d012      	beq.n	810647c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8106456:	4b0d      	ldr	r3, [pc, #52]	; (810648c <xQueueGenericReset+0xcc>)
 8106458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810645c:	601a      	str	r2, [r3, #0]
 810645e:	f3bf 8f4f 	dsb	sy
 8106462:	f3bf 8f6f 	isb	sy
 8106466:	e009      	b.n	810647c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8106468:	68fb      	ldr	r3, [r7, #12]
 810646a:	3310      	adds	r3, #16
 810646c:	4618      	mov	r0, r3
 810646e:	f7ff fcaf 	bl	8105dd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8106472:	68fb      	ldr	r3, [r7, #12]
 8106474:	3324      	adds	r3, #36	; 0x24
 8106476:	4618      	mov	r0, r3
 8106478:	f7ff fcaa 	bl	8105dd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810647c:	f7ff feb4 	bl	81061e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8106480:	2301      	movs	r3, #1
}
 8106482:	4618      	mov	r0, r3
 8106484:	3710      	adds	r7, #16
 8106486:	46bd      	mov	sp, r7
 8106488:	bd80      	pop	{r7, pc}
 810648a:	bf00      	nop
 810648c:	e000ed04 	.word	0xe000ed04

08106490 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8106490:	b580      	push	{r7, lr}
 8106492:	b08e      	sub	sp, #56	; 0x38
 8106494:	af02      	add	r7, sp, #8
 8106496:	60f8      	str	r0, [r7, #12]
 8106498:	60b9      	str	r1, [r7, #8]
 810649a:	607a      	str	r2, [r7, #4]
 810649c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	2b00      	cmp	r3, #0
 81064a2:	d109      	bne.n	81064b8 <xQueueGenericCreateStatic+0x28>
 81064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81064a8:	f383 8811 	msr	BASEPRI, r3
 81064ac:	f3bf 8f6f 	isb	sy
 81064b0:	f3bf 8f4f 	dsb	sy
 81064b4:	62bb      	str	r3, [r7, #40]	; 0x28
 81064b6:	e7fe      	b.n	81064b6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 81064b8:	683b      	ldr	r3, [r7, #0]
 81064ba:	2b00      	cmp	r3, #0
 81064bc:	d109      	bne.n	81064d2 <xQueueGenericCreateStatic+0x42>
 81064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81064c2:	f383 8811 	msr	BASEPRI, r3
 81064c6:	f3bf 8f6f 	isb	sy
 81064ca:	f3bf 8f4f 	dsb	sy
 81064ce:	627b      	str	r3, [r7, #36]	; 0x24
 81064d0:	e7fe      	b.n	81064d0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	2b00      	cmp	r3, #0
 81064d6:	d002      	beq.n	81064de <xQueueGenericCreateStatic+0x4e>
 81064d8:	68bb      	ldr	r3, [r7, #8]
 81064da:	2b00      	cmp	r3, #0
 81064dc:	d001      	beq.n	81064e2 <xQueueGenericCreateStatic+0x52>
 81064de:	2301      	movs	r3, #1
 81064e0:	e000      	b.n	81064e4 <xQueueGenericCreateStatic+0x54>
 81064e2:	2300      	movs	r3, #0
 81064e4:	2b00      	cmp	r3, #0
 81064e6:	d109      	bne.n	81064fc <xQueueGenericCreateStatic+0x6c>
 81064e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81064ec:	f383 8811 	msr	BASEPRI, r3
 81064f0:	f3bf 8f6f 	isb	sy
 81064f4:	f3bf 8f4f 	dsb	sy
 81064f8:	623b      	str	r3, [r7, #32]
 81064fa:	e7fe      	b.n	81064fa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 81064fc:	687b      	ldr	r3, [r7, #4]
 81064fe:	2b00      	cmp	r3, #0
 8106500:	d102      	bne.n	8106508 <xQueueGenericCreateStatic+0x78>
 8106502:	68bb      	ldr	r3, [r7, #8]
 8106504:	2b00      	cmp	r3, #0
 8106506:	d101      	bne.n	810650c <xQueueGenericCreateStatic+0x7c>
 8106508:	2301      	movs	r3, #1
 810650a:	e000      	b.n	810650e <xQueueGenericCreateStatic+0x7e>
 810650c:	2300      	movs	r3, #0
 810650e:	2b00      	cmp	r3, #0
 8106510:	d109      	bne.n	8106526 <xQueueGenericCreateStatic+0x96>
 8106512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106516:	f383 8811 	msr	BASEPRI, r3
 810651a:	f3bf 8f6f 	isb	sy
 810651e:	f3bf 8f4f 	dsb	sy
 8106522:	61fb      	str	r3, [r7, #28]
 8106524:	e7fe      	b.n	8106524 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8106526:	2350      	movs	r3, #80	; 0x50
 8106528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810652a:	697b      	ldr	r3, [r7, #20]
 810652c:	2b50      	cmp	r3, #80	; 0x50
 810652e:	d009      	beq.n	8106544 <xQueueGenericCreateStatic+0xb4>
 8106530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106534:	f383 8811 	msr	BASEPRI, r3
 8106538:	f3bf 8f6f 	isb	sy
 810653c:	f3bf 8f4f 	dsb	sy
 8106540:	61bb      	str	r3, [r7, #24]
 8106542:	e7fe      	b.n	8106542 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8106544:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106546:	683b      	ldr	r3, [r7, #0]
 8106548:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810654c:	2b00      	cmp	r3, #0
 810654e:	d00d      	beq.n	810656c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8106550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106552:	2201      	movs	r2, #1
 8106554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8106558:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810655e:	9300      	str	r3, [sp, #0]
 8106560:	4613      	mov	r3, r2
 8106562:	687a      	ldr	r2, [r7, #4]
 8106564:	68b9      	ldr	r1, [r7, #8]
 8106566:	68f8      	ldr	r0, [r7, #12]
 8106568:	f000 f805 	bl	8106576 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810656e:	4618      	mov	r0, r3
 8106570:	3730      	adds	r7, #48	; 0x30
 8106572:	46bd      	mov	sp, r7
 8106574:	bd80      	pop	{r7, pc}

08106576 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8106576:	b580      	push	{r7, lr}
 8106578:	b084      	sub	sp, #16
 810657a:	af00      	add	r7, sp, #0
 810657c:	60f8      	str	r0, [r7, #12]
 810657e:	60b9      	str	r1, [r7, #8]
 8106580:	607a      	str	r2, [r7, #4]
 8106582:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8106584:	68bb      	ldr	r3, [r7, #8]
 8106586:	2b00      	cmp	r3, #0
 8106588:	d103      	bne.n	8106592 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810658a:	69bb      	ldr	r3, [r7, #24]
 810658c:	69ba      	ldr	r2, [r7, #24]
 810658e:	601a      	str	r2, [r3, #0]
 8106590:	e002      	b.n	8106598 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8106592:	69bb      	ldr	r3, [r7, #24]
 8106594:	687a      	ldr	r2, [r7, #4]
 8106596:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8106598:	69bb      	ldr	r3, [r7, #24]
 810659a:	68fa      	ldr	r2, [r7, #12]
 810659c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810659e:	69bb      	ldr	r3, [r7, #24]
 81065a0:	68ba      	ldr	r2, [r7, #8]
 81065a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 81065a4:	2101      	movs	r1, #1
 81065a6:	69b8      	ldr	r0, [r7, #24]
 81065a8:	f7ff ff0a 	bl	81063c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 81065ac:	69bb      	ldr	r3, [r7, #24]
 81065ae:	78fa      	ldrb	r2, [r7, #3]
 81065b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 81065b4:	bf00      	nop
 81065b6:	3710      	adds	r7, #16
 81065b8:	46bd      	mov	sp, r7
 81065ba:	bd80      	pop	{r7, pc}

081065bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 81065bc:	b580      	push	{r7, lr}
 81065be:	b08e      	sub	sp, #56	; 0x38
 81065c0:	af00      	add	r7, sp, #0
 81065c2:	60f8      	str	r0, [r7, #12]
 81065c4:	60b9      	str	r1, [r7, #8]
 81065c6:	607a      	str	r2, [r7, #4]
 81065c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 81065ca:	2300      	movs	r3, #0
 81065cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81065ce:	68fb      	ldr	r3, [r7, #12]
 81065d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81065d4:	2b00      	cmp	r3, #0
 81065d6:	d109      	bne.n	81065ec <xQueueGenericSend+0x30>
 81065d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81065dc:	f383 8811 	msr	BASEPRI, r3
 81065e0:	f3bf 8f6f 	isb	sy
 81065e4:	f3bf 8f4f 	dsb	sy
 81065e8:	62bb      	str	r3, [r7, #40]	; 0x28
 81065ea:	e7fe      	b.n	81065ea <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81065ec:	68bb      	ldr	r3, [r7, #8]
 81065ee:	2b00      	cmp	r3, #0
 81065f0:	d103      	bne.n	81065fa <xQueueGenericSend+0x3e>
 81065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065f6:	2b00      	cmp	r3, #0
 81065f8:	d101      	bne.n	81065fe <xQueueGenericSend+0x42>
 81065fa:	2301      	movs	r3, #1
 81065fc:	e000      	b.n	8106600 <xQueueGenericSend+0x44>
 81065fe:	2300      	movs	r3, #0
 8106600:	2b00      	cmp	r3, #0
 8106602:	d109      	bne.n	8106618 <xQueueGenericSend+0x5c>
 8106604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106608:	f383 8811 	msr	BASEPRI, r3
 810660c:	f3bf 8f6f 	isb	sy
 8106610:	f3bf 8f4f 	dsb	sy
 8106614:	627b      	str	r3, [r7, #36]	; 0x24
 8106616:	e7fe      	b.n	8106616 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106618:	683b      	ldr	r3, [r7, #0]
 810661a:	2b02      	cmp	r3, #2
 810661c:	d103      	bne.n	8106626 <xQueueGenericSend+0x6a>
 810661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106622:	2b01      	cmp	r3, #1
 8106624:	d101      	bne.n	810662a <xQueueGenericSend+0x6e>
 8106626:	2301      	movs	r3, #1
 8106628:	e000      	b.n	810662c <xQueueGenericSend+0x70>
 810662a:	2300      	movs	r3, #0
 810662c:	2b00      	cmp	r3, #0
 810662e:	d109      	bne.n	8106644 <xQueueGenericSend+0x88>
 8106630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106634:	f383 8811 	msr	BASEPRI, r3
 8106638:	f3bf 8f6f 	isb	sy
 810663c:	f3bf 8f4f 	dsb	sy
 8106640:	623b      	str	r3, [r7, #32]
 8106642:	e7fe      	b.n	8106642 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106644:	f001 f998 	bl	8107978 <xTaskGetSchedulerState>
 8106648:	4603      	mov	r3, r0
 810664a:	2b00      	cmp	r3, #0
 810664c:	d102      	bne.n	8106654 <xQueueGenericSend+0x98>
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	2b00      	cmp	r3, #0
 8106652:	d101      	bne.n	8106658 <xQueueGenericSend+0x9c>
 8106654:	2301      	movs	r3, #1
 8106656:	e000      	b.n	810665a <xQueueGenericSend+0x9e>
 8106658:	2300      	movs	r3, #0
 810665a:	2b00      	cmp	r3, #0
 810665c:	d109      	bne.n	8106672 <xQueueGenericSend+0xb6>
 810665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106662:	f383 8811 	msr	BASEPRI, r3
 8106666:	f3bf 8f6f 	isb	sy
 810666a:	f3bf 8f4f 	dsb	sy
 810666e:	61fb      	str	r3, [r7, #28]
 8106670:	e7fe      	b.n	8106670 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106672:	f7ff fd8b 	bl	810618c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810667c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810667e:	429a      	cmp	r2, r3
 8106680:	d302      	bcc.n	8106688 <xQueueGenericSend+0xcc>
 8106682:	683b      	ldr	r3, [r7, #0]
 8106684:	2b02      	cmp	r3, #2
 8106686:	d129      	bne.n	81066dc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106688:	683a      	ldr	r2, [r7, #0]
 810668a:	68b9      	ldr	r1, [r7, #8]
 810668c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810668e:	f000 f9ff 	bl	8106a90 <prvCopyDataToQueue>
 8106692:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106698:	2b00      	cmp	r3, #0
 810669a:	d010      	beq.n	81066be <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810669e:	3324      	adds	r3, #36	; 0x24
 81066a0:	4618      	mov	r0, r3
 81066a2:	f000 ffb3 	bl	810760c <xTaskRemoveFromEventList>
 81066a6:	4603      	mov	r3, r0
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	d013      	beq.n	81066d4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 81066ac:	4b3f      	ldr	r3, [pc, #252]	; (81067ac <xQueueGenericSend+0x1f0>)
 81066ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81066b2:	601a      	str	r2, [r3, #0]
 81066b4:	f3bf 8f4f 	dsb	sy
 81066b8:	f3bf 8f6f 	isb	sy
 81066bc:	e00a      	b.n	81066d4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 81066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81066c0:	2b00      	cmp	r3, #0
 81066c2:	d007      	beq.n	81066d4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 81066c4:	4b39      	ldr	r3, [pc, #228]	; (81067ac <xQueueGenericSend+0x1f0>)
 81066c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81066ca:	601a      	str	r2, [r3, #0]
 81066cc:	f3bf 8f4f 	dsb	sy
 81066d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 81066d4:	f7ff fd88 	bl	81061e8 <vPortExitCritical>
				return pdPASS;
 81066d8:	2301      	movs	r3, #1
 81066da:	e063      	b.n	81067a4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	2b00      	cmp	r3, #0
 81066e0:	d103      	bne.n	81066ea <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81066e2:	f7ff fd81 	bl	81061e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 81066e6:	2300      	movs	r3, #0
 81066e8:	e05c      	b.n	81067a4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 81066ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81066ec:	2b00      	cmp	r3, #0
 81066ee:	d106      	bne.n	81066fe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81066f0:	f107 0314 	add.w	r3, r7, #20
 81066f4:	4618      	mov	r0, r3
 81066f6:	f000 ffeb 	bl	81076d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81066fa:	2301      	movs	r3, #1
 81066fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81066fe:	f7ff fd73 	bl	81061e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8106702:	f000 fd67 	bl	81071d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8106706:	f7ff fd41 	bl	810618c <vPortEnterCritical>
 810670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810670c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106710:	b25b      	sxtb	r3, r3
 8106712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106716:	d103      	bne.n	8106720 <xQueueGenericSend+0x164>
 8106718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810671a:	2200      	movs	r2, #0
 810671c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106726:	b25b      	sxtb	r3, r3
 8106728:	f1b3 3fff 	cmp.w	r3, #4294967295
 810672c:	d103      	bne.n	8106736 <xQueueGenericSend+0x17a>
 810672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106730:	2200      	movs	r2, #0
 8106732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106736:	f7ff fd57 	bl	81061e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810673a:	1d3a      	adds	r2, r7, #4
 810673c:	f107 0314 	add.w	r3, r7, #20
 8106740:	4611      	mov	r1, r2
 8106742:	4618      	mov	r0, r3
 8106744:	f000 ffda 	bl	81076fc <xTaskCheckForTimeOut>
 8106748:	4603      	mov	r3, r0
 810674a:	2b00      	cmp	r3, #0
 810674c:	d124      	bne.n	8106798 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810674e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106750:	f000 fa96 	bl	8106c80 <prvIsQueueFull>
 8106754:	4603      	mov	r3, r0
 8106756:	2b00      	cmp	r3, #0
 8106758:	d018      	beq.n	810678c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810675c:	3310      	adds	r3, #16
 810675e:	687a      	ldr	r2, [r7, #4]
 8106760:	4611      	mov	r1, r2
 8106762:	4618      	mov	r0, r3
 8106764:	f000 ff04 	bl	8107570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8106768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810676a:	f000 fa21 	bl	8106bb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810676e:	f000 fd3f 	bl	81071f0 <xTaskResumeAll>
 8106772:	4603      	mov	r3, r0
 8106774:	2b00      	cmp	r3, #0
 8106776:	f47f af7c 	bne.w	8106672 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 810677a:	4b0c      	ldr	r3, [pc, #48]	; (81067ac <xQueueGenericSend+0x1f0>)
 810677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106780:	601a      	str	r2, [r3, #0]
 8106782:	f3bf 8f4f 	dsb	sy
 8106786:	f3bf 8f6f 	isb	sy
 810678a:	e772      	b.n	8106672 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810678c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810678e:	f000 fa0f 	bl	8106bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8106792:	f000 fd2d 	bl	81071f0 <xTaskResumeAll>
 8106796:	e76c      	b.n	8106672 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8106798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810679a:	f000 fa09 	bl	8106bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810679e:	f000 fd27 	bl	81071f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 81067a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 81067a4:	4618      	mov	r0, r3
 81067a6:	3738      	adds	r7, #56	; 0x38
 81067a8:	46bd      	mov	sp, r7
 81067aa:	bd80      	pop	{r7, pc}
 81067ac:	e000ed04 	.word	0xe000ed04

081067b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 81067b0:	b580      	push	{r7, lr}
 81067b2:	b08e      	sub	sp, #56	; 0x38
 81067b4:	af00      	add	r7, sp, #0
 81067b6:	60f8      	str	r0, [r7, #12]
 81067b8:	60b9      	str	r1, [r7, #8]
 81067ba:	607a      	str	r2, [r7, #4]
 81067bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 81067be:	68fb      	ldr	r3, [r7, #12]
 81067c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 81067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067c4:	2b00      	cmp	r3, #0
 81067c6:	d109      	bne.n	81067dc <xQueueGenericSendFromISR+0x2c>
 81067c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 81067cc:	f383 8811 	msr	BASEPRI, r3
 81067d0:	f3bf 8f6f 	isb	sy
 81067d4:	f3bf 8f4f 	dsb	sy
 81067d8:	627b      	str	r3, [r7, #36]	; 0x24
 81067da:	e7fe      	b.n	81067da <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81067dc:	68bb      	ldr	r3, [r7, #8]
 81067de:	2b00      	cmp	r3, #0
 81067e0:	d103      	bne.n	81067ea <xQueueGenericSendFromISR+0x3a>
 81067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067e6:	2b00      	cmp	r3, #0
 81067e8:	d101      	bne.n	81067ee <xQueueGenericSendFromISR+0x3e>
 81067ea:	2301      	movs	r3, #1
 81067ec:	e000      	b.n	81067f0 <xQueueGenericSendFromISR+0x40>
 81067ee:	2300      	movs	r3, #0
 81067f0:	2b00      	cmp	r3, #0
 81067f2:	d109      	bne.n	8106808 <xQueueGenericSendFromISR+0x58>
 81067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81067f8:	f383 8811 	msr	BASEPRI, r3
 81067fc:	f3bf 8f6f 	isb	sy
 8106800:	f3bf 8f4f 	dsb	sy
 8106804:	623b      	str	r3, [r7, #32]
 8106806:	e7fe      	b.n	8106806 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8106808:	683b      	ldr	r3, [r7, #0]
 810680a:	2b02      	cmp	r3, #2
 810680c:	d103      	bne.n	8106816 <xQueueGenericSendFromISR+0x66>
 810680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106812:	2b01      	cmp	r3, #1
 8106814:	d101      	bne.n	810681a <xQueueGenericSendFromISR+0x6a>
 8106816:	2301      	movs	r3, #1
 8106818:	e000      	b.n	810681c <xQueueGenericSendFromISR+0x6c>
 810681a:	2300      	movs	r3, #0
 810681c:	2b00      	cmp	r3, #0
 810681e:	d109      	bne.n	8106834 <xQueueGenericSendFromISR+0x84>
 8106820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106824:	f383 8811 	msr	BASEPRI, r3
 8106828:	f3bf 8f6f 	isb	sy
 810682c:	f3bf 8f4f 	dsb	sy
 8106830:	61fb      	str	r3, [r7, #28]
 8106832:	e7fe      	b.n	8106832 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8106834:	f7ff fd86 	bl	8106344 <vPortValidateInterruptPriority>
	__asm volatile
 8106838:	f3ef 8211 	mrs	r2, BASEPRI
 810683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106840:	f383 8811 	msr	BASEPRI, r3
 8106844:	f3bf 8f6f 	isb	sy
 8106848:	f3bf 8f4f 	dsb	sy
 810684c:	61ba      	str	r2, [r7, #24]
 810684e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8106850:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8106852:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8106854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810685a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810685c:	429a      	cmp	r2, r3
 810685e:	d302      	bcc.n	8106866 <xQueueGenericSendFromISR+0xb6>
 8106860:	683b      	ldr	r3, [r7, #0]
 8106862:	2b02      	cmp	r3, #2
 8106864:	d12c      	bne.n	81068c0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8106866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106868:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810686c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8106870:	683a      	ldr	r2, [r7, #0]
 8106872:	68b9      	ldr	r1, [r7, #8]
 8106874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8106876:	f000 f90b 	bl	8106a90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810687a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 810687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106882:	d112      	bne.n	81068aa <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106888:	2b00      	cmp	r3, #0
 810688a:	d016      	beq.n	81068ba <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810688e:	3324      	adds	r3, #36	; 0x24
 8106890:	4618      	mov	r0, r3
 8106892:	f000 febb 	bl	810760c <xTaskRemoveFromEventList>
 8106896:	4603      	mov	r3, r0
 8106898:	2b00      	cmp	r3, #0
 810689a:	d00e      	beq.n	81068ba <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	2b00      	cmp	r3, #0
 81068a0:	d00b      	beq.n	81068ba <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	2201      	movs	r2, #1
 81068a6:	601a      	str	r2, [r3, #0]
 81068a8:	e007      	b.n	81068ba <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 81068aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81068ae:	3301      	adds	r3, #1
 81068b0:	b2db      	uxtb	r3, r3
 81068b2:	b25a      	sxtb	r2, r3
 81068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81068b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 81068ba:	2301      	movs	r3, #1
 81068bc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 81068be:	e001      	b.n	81068c4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 81068c0:	2300      	movs	r3, #0
 81068c2:	637b      	str	r3, [r7, #52]	; 0x34
 81068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81068c6:	613b      	str	r3, [r7, #16]
	__asm volatile
 81068c8:	693b      	ldr	r3, [r7, #16]
 81068ca:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 81068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 81068d0:	4618      	mov	r0, r3
 81068d2:	3738      	adds	r7, #56	; 0x38
 81068d4:	46bd      	mov	sp, r7
 81068d6:	bd80      	pop	{r7, pc}

081068d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 81068d8:	b580      	push	{r7, lr}
 81068da:	b08c      	sub	sp, #48	; 0x30
 81068dc:	af00      	add	r7, sp, #0
 81068de:	60f8      	str	r0, [r7, #12]
 81068e0:	60b9      	str	r1, [r7, #8]
 81068e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 81068e4:	2300      	movs	r3, #0
 81068e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 81068e8:	68fb      	ldr	r3, [r7, #12]
 81068ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 81068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81068ee:	2b00      	cmp	r3, #0
 81068f0:	d109      	bne.n	8106906 <xQueueReceive+0x2e>
	__asm volatile
 81068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81068f6:	f383 8811 	msr	BASEPRI, r3
 81068fa:	f3bf 8f6f 	isb	sy
 81068fe:	f3bf 8f4f 	dsb	sy
 8106902:	623b      	str	r3, [r7, #32]
 8106904:	e7fe      	b.n	8106904 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8106906:	68bb      	ldr	r3, [r7, #8]
 8106908:	2b00      	cmp	r3, #0
 810690a:	d103      	bne.n	8106914 <xQueueReceive+0x3c>
 810690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106910:	2b00      	cmp	r3, #0
 8106912:	d101      	bne.n	8106918 <xQueueReceive+0x40>
 8106914:	2301      	movs	r3, #1
 8106916:	e000      	b.n	810691a <xQueueReceive+0x42>
 8106918:	2300      	movs	r3, #0
 810691a:	2b00      	cmp	r3, #0
 810691c:	d109      	bne.n	8106932 <xQueueReceive+0x5a>
 810691e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106922:	f383 8811 	msr	BASEPRI, r3
 8106926:	f3bf 8f6f 	isb	sy
 810692a:	f3bf 8f4f 	dsb	sy
 810692e:	61fb      	str	r3, [r7, #28]
 8106930:	e7fe      	b.n	8106930 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8106932:	f001 f821 	bl	8107978 <xTaskGetSchedulerState>
 8106936:	4603      	mov	r3, r0
 8106938:	2b00      	cmp	r3, #0
 810693a:	d102      	bne.n	8106942 <xQueueReceive+0x6a>
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	2b00      	cmp	r3, #0
 8106940:	d101      	bne.n	8106946 <xQueueReceive+0x6e>
 8106942:	2301      	movs	r3, #1
 8106944:	e000      	b.n	8106948 <xQueueReceive+0x70>
 8106946:	2300      	movs	r3, #0
 8106948:	2b00      	cmp	r3, #0
 810694a:	d109      	bne.n	8106960 <xQueueReceive+0x88>
 810694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106950:	f383 8811 	msr	BASEPRI, r3
 8106954:	f3bf 8f6f 	isb	sy
 8106958:	f3bf 8f4f 	dsb	sy
 810695c:	61bb      	str	r3, [r7, #24]
 810695e:	e7fe      	b.n	810695e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8106960:	f7ff fc14 	bl	810618c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106968:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810696c:	2b00      	cmp	r3, #0
 810696e:	d01f      	beq.n	81069b0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8106970:	68b9      	ldr	r1, [r7, #8]
 8106972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106974:	f000 f8f6 	bl	8106b64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8106978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810697a:	1e5a      	subs	r2, r3, #1
 810697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810697e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106982:	691b      	ldr	r3, [r3, #16]
 8106984:	2b00      	cmp	r3, #0
 8106986:	d00f      	beq.n	81069a8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810698a:	3310      	adds	r3, #16
 810698c:	4618      	mov	r0, r3
 810698e:	f000 fe3d 	bl	810760c <xTaskRemoveFromEventList>
 8106992:	4603      	mov	r3, r0
 8106994:	2b00      	cmp	r3, #0
 8106996:	d007      	beq.n	81069a8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8106998:	4b3c      	ldr	r3, [pc, #240]	; (8106a8c <xQueueReceive+0x1b4>)
 810699a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810699e:	601a      	str	r2, [r3, #0]
 81069a0:	f3bf 8f4f 	dsb	sy
 81069a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 81069a8:	f7ff fc1e 	bl	81061e8 <vPortExitCritical>
				return pdPASS;
 81069ac:	2301      	movs	r3, #1
 81069ae:	e069      	b.n	8106a84 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	2b00      	cmp	r3, #0
 81069b4:	d103      	bne.n	81069be <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 81069b6:	f7ff fc17 	bl	81061e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 81069ba:	2300      	movs	r3, #0
 81069bc:	e062      	b.n	8106a84 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 81069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81069c0:	2b00      	cmp	r3, #0
 81069c2:	d106      	bne.n	81069d2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 81069c4:	f107 0310 	add.w	r3, r7, #16
 81069c8:	4618      	mov	r0, r3
 81069ca:	f000 fe81 	bl	81076d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 81069ce:	2301      	movs	r3, #1
 81069d0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 81069d2:	f7ff fc09 	bl	81061e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81069d6:	f000 fbfd 	bl	81071d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81069da:	f7ff fbd7 	bl	810618c <vPortEnterCritical>
 81069de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81069e4:	b25b      	sxtb	r3, r3
 81069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81069ea:	d103      	bne.n	81069f4 <xQueueReceive+0x11c>
 81069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069ee:	2200      	movs	r2, #0
 81069f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81069fa:	b25b      	sxtb	r3, r3
 81069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a00:	d103      	bne.n	8106a0a <xQueueReceive+0x132>
 8106a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a04:	2200      	movs	r2, #0
 8106a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106a0a:	f7ff fbed 	bl	81061e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8106a0e:	1d3a      	adds	r2, r7, #4
 8106a10:	f107 0310 	add.w	r3, r7, #16
 8106a14:	4611      	mov	r1, r2
 8106a16:	4618      	mov	r0, r3
 8106a18:	f000 fe70 	bl	81076fc <xTaskCheckForTimeOut>
 8106a1c:	4603      	mov	r3, r0
 8106a1e:	2b00      	cmp	r3, #0
 8106a20:	d123      	bne.n	8106a6a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8106a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106a24:	f000 f916 	bl	8106c54 <prvIsQueueEmpty>
 8106a28:	4603      	mov	r3, r0
 8106a2a:	2b00      	cmp	r3, #0
 8106a2c:	d017      	beq.n	8106a5e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8106a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a30:	3324      	adds	r3, #36	; 0x24
 8106a32:	687a      	ldr	r2, [r7, #4]
 8106a34:	4611      	mov	r1, r2
 8106a36:	4618      	mov	r0, r3
 8106a38:	f000 fd9a 	bl	8107570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8106a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106a3e:	f000 f8b7 	bl	8106bb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8106a42:	f000 fbd5 	bl	81071f0 <xTaskResumeAll>
 8106a46:	4603      	mov	r3, r0
 8106a48:	2b00      	cmp	r3, #0
 8106a4a:	d189      	bne.n	8106960 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8106a4c:	4b0f      	ldr	r3, [pc, #60]	; (8106a8c <xQueueReceive+0x1b4>)
 8106a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106a52:	601a      	str	r2, [r3, #0]
 8106a54:	f3bf 8f4f 	dsb	sy
 8106a58:	f3bf 8f6f 	isb	sy
 8106a5c:	e780      	b.n	8106960 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8106a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106a60:	f000 f8a6 	bl	8106bb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8106a64:	f000 fbc4 	bl	81071f0 <xTaskResumeAll>
 8106a68:	e77a      	b.n	8106960 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8106a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106a6c:	f000 f8a0 	bl	8106bb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8106a70:	f000 fbbe 	bl	81071f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8106a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106a76:	f000 f8ed 	bl	8106c54 <prvIsQueueEmpty>
 8106a7a:	4603      	mov	r3, r0
 8106a7c:	2b00      	cmp	r3, #0
 8106a7e:	f43f af6f 	beq.w	8106960 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8106a82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8106a84:	4618      	mov	r0, r3
 8106a86:	3730      	adds	r7, #48	; 0x30
 8106a88:	46bd      	mov	sp, r7
 8106a8a:	bd80      	pop	{r7, pc}
 8106a8c:	e000ed04 	.word	0xe000ed04

08106a90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8106a90:	b580      	push	{r7, lr}
 8106a92:	b086      	sub	sp, #24
 8106a94:	af00      	add	r7, sp, #0
 8106a96:	60f8      	str	r0, [r7, #12]
 8106a98:	60b9      	str	r1, [r7, #8]
 8106a9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8106a9c:	2300      	movs	r3, #0
 8106a9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8106aa0:	68fb      	ldr	r3, [r7, #12]
 8106aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106aa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8106aa6:	68fb      	ldr	r3, [r7, #12]
 8106aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106aaa:	2b00      	cmp	r3, #0
 8106aac:	d10d      	bne.n	8106aca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8106aae:	68fb      	ldr	r3, [r7, #12]
 8106ab0:	681b      	ldr	r3, [r3, #0]
 8106ab2:	2b00      	cmp	r3, #0
 8106ab4:	d14d      	bne.n	8106b52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8106ab6:	68fb      	ldr	r3, [r7, #12]
 8106ab8:	689b      	ldr	r3, [r3, #8]
 8106aba:	4618      	mov	r0, r3
 8106abc:	f000 ff7a 	bl	81079b4 <xTaskPriorityDisinherit>
 8106ac0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8106ac2:	68fb      	ldr	r3, [r7, #12]
 8106ac4:	2200      	movs	r2, #0
 8106ac6:	609a      	str	r2, [r3, #8]
 8106ac8:	e043      	b.n	8106b52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8106aca:	687b      	ldr	r3, [r7, #4]
 8106acc:	2b00      	cmp	r3, #0
 8106ace:	d119      	bne.n	8106b04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8106ad0:	68fb      	ldr	r3, [r7, #12]
 8106ad2:	6858      	ldr	r0, [r3, #4]
 8106ad4:	68fb      	ldr	r3, [r7, #12]
 8106ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ad8:	461a      	mov	r2, r3
 8106ada:	68b9      	ldr	r1, [r7, #8]
 8106adc:	f001 fb9a 	bl	8108214 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8106ae0:	68fb      	ldr	r3, [r7, #12]
 8106ae2:	685a      	ldr	r2, [r3, #4]
 8106ae4:	68fb      	ldr	r3, [r7, #12]
 8106ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ae8:	441a      	add	r2, r3
 8106aea:	68fb      	ldr	r3, [r7, #12]
 8106aec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8106aee:	68fb      	ldr	r3, [r7, #12]
 8106af0:	685a      	ldr	r2, [r3, #4]
 8106af2:	68fb      	ldr	r3, [r7, #12]
 8106af4:	689b      	ldr	r3, [r3, #8]
 8106af6:	429a      	cmp	r2, r3
 8106af8:	d32b      	bcc.n	8106b52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8106afa:	68fb      	ldr	r3, [r7, #12]
 8106afc:	681a      	ldr	r2, [r3, #0]
 8106afe:	68fb      	ldr	r3, [r7, #12]
 8106b00:	605a      	str	r2, [r3, #4]
 8106b02:	e026      	b.n	8106b52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8106b04:	68fb      	ldr	r3, [r7, #12]
 8106b06:	68d8      	ldr	r0, [r3, #12]
 8106b08:	68fb      	ldr	r3, [r7, #12]
 8106b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b0c:	461a      	mov	r2, r3
 8106b0e:	68b9      	ldr	r1, [r7, #8]
 8106b10:	f001 fb80 	bl	8108214 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8106b14:	68fb      	ldr	r3, [r7, #12]
 8106b16:	68da      	ldr	r2, [r3, #12]
 8106b18:	68fb      	ldr	r3, [r7, #12]
 8106b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b1c:	425b      	negs	r3, r3
 8106b1e:	441a      	add	r2, r3
 8106b20:	68fb      	ldr	r3, [r7, #12]
 8106b22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	68da      	ldr	r2, [r3, #12]
 8106b28:	68fb      	ldr	r3, [r7, #12]
 8106b2a:	681b      	ldr	r3, [r3, #0]
 8106b2c:	429a      	cmp	r2, r3
 8106b2e:	d207      	bcs.n	8106b40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8106b30:	68fb      	ldr	r3, [r7, #12]
 8106b32:	689a      	ldr	r2, [r3, #8]
 8106b34:	68fb      	ldr	r3, [r7, #12]
 8106b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b38:	425b      	negs	r3, r3
 8106b3a:	441a      	add	r2, r3
 8106b3c:	68fb      	ldr	r3, [r7, #12]
 8106b3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	2b02      	cmp	r3, #2
 8106b44:	d105      	bne.n	8106b52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8106b46:	693b      	ldr	r3, [r7, #16]
 8106b48:	2b00      	cmp	r3, #0
 8106b4a:	d002      	beq.n	8106b52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8106b4c:	693b      	ldr	r3, [r7, #16]
 8106b4e:	3b01      	subs	r3, #1
 8106b50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8106b52:	693b      	ldr	r3, [r7, #16]
 8106b54:	1c5a      	adds	r2, r3, #1
 8106b56:	68fb      	ldr	r3, [r7, #12]
 8106b58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8106b5a:	697b      	ldr	r3, [r7, #20]
}
 8106b5c:	4618      	mov	r0, r3
 8106b5e:	3718      	adds	r7, #24
 8106b60:	46bd      	mov	sp, r7
 8106b62:	bd80      	pop	{r7, pc}

08106b64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8106b64:	b580      	push	{r7, lr}
 8106b66:	b082      	sub	sp, #8
 8106b68:	af00      	add	r7, sp, #0
 8106b6a:	6078      	str	r0, [r7, #4]
 8106b6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8106b6e:	687b      	ldr	r3, [r7, #4]
 8106b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b72:	2b00      	cmp	r3, #0
 8106b74:	d018      	beq.n	8106ba8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8106b76:	687b      	ldr	r3, [r7, #4]
 8106b78:	68da      	ldr	r2, [r3, #12]
 8106b7a:	687b      	ldr	r3, [r7, #4]
 8106b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b7e:	441a      	add	r2, r3
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	68da      	ldr	r2, [r3, #12]
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	689b      	ldr	r3, [r3, #8]
 8106b8c:	429a      	cmp	r2, r3
 8106b8e:	d303      	bcc.n	8106b98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	681a      	ldr	r2, [r3, #0]
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	68d9      	ldr	r1, [r3, #12]
 8106b9c:	687b      	ldr	r3, [r7, #4]
 8106b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106ba0:	461a      	mov	r2, r3
 8106ba2:	6838      	ldr	r0, [r7, #0]
 8106ba4:	f001 fb36 	bl	8108214 <memcpy>
	}
}
 8106ba8:	bf00      	nop
 8106baa:	3708      	adds	r7, #8
 8106bac:	46bd      	mov	sp, r7
 8106bae:	bd80      	pop	{r7, pc}

08106bb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8106bb0:	b580      	push	{r7, lr}
 8106bb2:	b084      	sub	sp, #16
 8106bb4:	af00      	add	r7, sp, #0
 8106bb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8106bb8:	f7ff fae8 	bl	810618c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106bc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8106bc4:	e011      	b.n	8106bea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8106bc6:	687b      	ldr	r3, [r7, #4]
 8106bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106bca:	2b00      	cmp	r3, #0
 8106bcc:	d012      	beq.n	8106bf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8106bce:	687b      	ldr	r3, [r7, #4]
 8106bd0:	3324      	adds	r3, #36	; 0x24
 8106bd2:	4618      	mov	r0, r3
 8106bd4:	f000 fd1a 	bl	810760c <xTaskRemoveFromEventList>
 8106bd8:	4603      	mov	r3, r0
 8106bda:	2b00      	cmp	r3, #0
 8106bdc:	d001      	beq.n	8106be2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8106bde:	f000 fded 	bl	81077bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8106be2:	7bfb      	ldrb	r3, [r7, #15]
 8106be4:	3b01      	subs	r3, #1
 8106be6:	b2db      	uxtb	r3, r3
 8106be8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8106bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8106bee:	2b00      	cmp	r3, #0
 8106bf0:	dce9      	bgt.n	8106bc6 <prvUnlockQueue+0x16>
 8106bf2:	e000      	b.n	8106bf6 <prvUnlockQueue+0x46>
					break;
 8106bf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	22ff      	movs	r2, #255	; 0xff
 8106bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8106bfe:	f7ff faf3 	bl	81061e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8106c02:	f7ff fac3 	bl	810618c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106c0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8106c0e:	e011      	b.n	8106c34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	691b      	ldr	r3, [r3, #16]
 8106c14:	2b00      	cmp	r3, #0
 8106c16:	d012      	beq.n	8106c3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	3310      	adds	r3, #16
 8106c1c:	4618      	mov	r0, r3
 8106c1e:	f000 fcf5 	bl	810760c <xTaskRemoveFromEventList>
 8106c22:	4603      	mov	r3, r0
 8106c24:	2b00      	cmp	r3, #0
 8106c26:	d001      	beq.n	8106c2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8106c28:	f000 fdc8 	bl	81077bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8106c2c:	7bbb      	ldrb	r3, [r7, #14]
 8106c2e:	3b01      	subs	r3, #1
 8106c30:	b2db      	uxtb	r3, r3
 8106c32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8106c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	dce9      	bgt.n	8106c10 <prvUnlockQueue+0x60>
 8106c3c:	e000      	b.n	8106c40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8106c3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	22ff      	movs	r2, #255	; 0xff
 8106c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8106c48:	f7ff face 	bl	81061e8 <vPortExitCritical>
}
 8106c4c:	bf00      	nop
 8106c4e:	3710      	adds	r7, #16
 8106c50:	46bd      	mov	sp, r7
 8106c52:	bd80      	pop	{r7, pc}

08106c54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8106c54:	b580      	push	{r7, lr}
 8106c56:	b084      	sub	sp, #16
 8106c58:	af00      	add	r7, sp, #0
 8106c5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8106c5c:	f7ff fa96 	bl	810618c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106c64:	2b00      	cmp	r3, #0
 8106c66:	d102      	bne.n	8106c6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8106c68:	2301      	movs	r3, #1
 8106c6a:	60fb      	str	r3, [r7, #12]
 8106c6c:	e001      	b.n	8106c72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8106c6e:	2300      	movs	r3, #0
 8106c70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8106c72:	f7ff fab9 	bl	81061e8 <vPortExitCritical>

	return xReturn;
 8106c76:	68fb      	ldr	r3, [r7, #12]
}
 8106c78:	4618      	mov	r0, r3
 8106c7a:	3710      	adds	r7, #16
 8106c7c:	46bd      	mov	sp, r7
 8106c7e:	bd80      	pop	{r7, pc}

08106c80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8106c80:	b580      	push	{r7, lr}
 8106c82:	b084      	sub	sp, #16
 8106c84:	af00      	add	r7, sp, #0
 8106c86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8106c88:	f7ff fa80 	bl	810618c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106c90:	687b      	ldr	r3, [r7, #4]
 8106c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106c94:	429a      	cmp	r2, r3
 8106c96:	d102      	bne.n	8106c9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8106c98:	2301      	movs	r3, #1
 8106c9a:	60fb      	str	r3, [r7, #12]
 8106c9c:	e001      	b.n	8106ca2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8106c9e:	2300      	movs	r3, #0
 8106ca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8106ca2:	f7ff faa1 	bl	81061e8 <vPortExitCritical>

	return xReturn;
 8106ca6:	68fb      	ldr	r3, [r7, #12]
}
 8106ca8:	4618      	mov	r0, r3
 8106caa:	3710      	adds	r7, #16
 8106cac:	46bd      	mov	sp, r7
 8106cae:	bd80      	pop	{r7, pc}

08106cb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8106cb0:	b480      	push	{r7}
 8106cb2:	b085      	sub	sp, #20
 8106cb4:	af00      	add	r7, sp, #0
 8106cb6:	6078      	str	r0, [r7, #4]
 8106cb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106cba:	2300      	movs	r3, #0
 8106cbc:	60fb      	str	r3, [r7, #12]
 8106cbe:	e014      	b.n	8106cea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8106cc0:	4a0e      	ldr	r2, [pc, #56]	; (8106cfc <vQueueAddToRegistry+0x4c>)
 8106cc2:	68fb      	ldr	r3, [r7, #12]
 8106cc4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8106cc8:	2b00      	cmp	r3, #0
 8106cca:	d10b      	bne.n	8106ce4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8106ccc:	490b      	ldr	r1, [pc, #44]	; (8106cfc <vQueueAddToRegistry+0x4c>)
 8106cce:	68fb      	ldr	r3, [r7, #12]
 8106cd0:	683a      	ldr	r2, [r7, #0]
 8106cd2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8106cd6:	4a09      	ldr	r2, [pc, #36]	; (8106cfc <vQueueAddToRegistry+0x4c>)
 8106cd8:	68fb      	ldr	r3, [r7, #12]
 8106cda:	00db      	lsls	r3, r3, #3
 8106cdc:	4413      	add	r3, r2
 8106cde:	687a      	ldr	r2, [r7, #4]
 8106ce0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8106ce2:	e005      	b.n	8106cf0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8106ce4:	68fb      	ldr	r3, [r7, #12]
 8106ce6:	3301      	adds	r3, #1
 8106ce8:	60fb      	str	r3, [r7, #12]
 8106cea:	68fb      	ldr	r3, [r7, #12]
 8106cec:	2b07      	cmp	r3, #7
 8106cee:	d9e7      	bls.n	8106cc0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8106cf0:	bf00      	nop
 8106cf2:	3714      	adds	r7, #20
 8106cf4:	46bd      	mov	sp, r7
 8106cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cfa:	4770      	bx	lr
 8106cfc:	10004b44 	.word	0x10004b44

08106d00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106d00:	b580      	push	{r7, lr}
 8106d02:	b086      	sub	sp, #24
 8106d04:	af00      	add	r7, sp, #0
 8106d06:	60f8      	str	r0, [r7, #12]
 8106d08:	60b9      	str	r1, [r7, #8]
 8106d0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8106d0c:	68fb      	ldr	r3, [r7, #12]
 8106d0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8106d10:	f7ff fa3c 	bl	810618c <vPortEnterCritical>
 8106d14:	697b      	ldr	r3, [r7, #20]
 8106d16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106d1a:	b25b      	sxtb	r3, r3
 8106d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106d20:	d103      	bne.n	8106d2a <vQueueWaitForMessageRestricted+0x2a>
 8106d22:	697b      	ldr	r3, [r7, #20]
 8106d24:	2200      	movs	r2, #0
 8106d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106d2a:	697b      	ldr	r3, [r7, #20]
 8106d2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106d30:	b25b      	sxtb	r3, r3
 8106d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106d36:	d103      	bne.n	8106d40 <vQueueWaitForMessageRestricted+0x40>
 8106d38:	697b      	ldr	r3, [r7, #20]
 8106d3a:	2200      	movs	r2, #0
 8106d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106d40:	f7ff fa52 	bl	81061e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8106d44:	697b      	ldr	r3, [r7, #20]
 8106d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106d48:	2b00      	cmp	r3, #0
 8106d4a:	d106      	bne.n	8106d5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8106d4c:	697b      	ldr	r3, [r7, #20]
 8106d4e:	3324      	adds	r3, #36	; 0x24
 8106d50:	687a      	ldr	r2, [r7, #4]
 8106d52:	68b9      	ldr	r1, [r7, #8]
 8106d54:	4618      	mov	r0, r3
 8106d56:	f000 fc2f 	bl	81075b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8106d5a:	6978      	ldr	r0, [r7, #20]
 8106d5c:	f7ff ff28 	bl	8106bb0 <prvUnlockQueue>
	}
 8106d60:	bf00      	nop
 8106d62:	3718      	adds	r7, #24
 8106d64:	46bd      	mov	sp, r7
 8106d66:	bd80      	pop	{r7, pc}

08106d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8106d68:	b580      	push	{r7, lr}
 8106d6a:	b08e      	sub	sp, #56	; 0x38
 8106d6c:	af04      	add	r7, sp, #16
 8106d6e:	60f8      	str	r0, [r7, #12]
 8106d70:	60b9      	str	r1, [r7, #8]
 8106d72:	607a      	str	r2, [r7, #4]
 8106d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8106d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106d78:	2b00      	cmp	r3, #0
 8106d7a:	d109      	bne.n	8106d90 <xTaskCreateStatic+0x28>
 8106d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d80:	f383 8811 	msr	BASEPRI, r3
 8106d84:	f3bf 8f6f 	isb	sy
 8106d88:	f3bf 8f4f 	dsb	sy
 8106d8c:	623b      	str	r3, [r7, #32]
 8106d8e:	e7fe      	b.n	8106d8e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8106d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106d92:	2b00      	cmp	r3, #0
 8106d94:	d109      	bne.n	8106daa <xTaskCreateStatic+0x42>
 8106d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106d9a:	f383 8811 	msr	BASEPRI, r3
 8106d9e:	f3bf 8f6f 	isb	sy
 8106da2:	f3bf 8f4f 	dsb	sy
 8106da6:	61fb      	str	r3, [r7, #28]
 8106da8:	e7fe      	b.n	8106da8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8106daa:	235c      	movs	r3, #92	; 0x5c
 8106dac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8106dae:	693b      	ldr	r3, [r7, #16]
 8106db0:	2b5c      	cmp	r3, #92	; 0x5c
 8106db2:	d009      	beq.n	8106dc8 <xTaskCreateStatic+0x60>
 8106db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106db8:	f383 8811 	msr	BASEPRI, r3
 8106dbc:	f3bf 8f6f 	isb	sy
 8106dc0:	f3bf 8f4f 	dsb	sy
 8106dc4:	61bb      	str	r3, [r7, #24]
 8106dc6:	e7fe      	b.n	8106dc6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8106dc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8106dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dcc:	2b00      	cmp	r3, #0
 8106dce:	d01e      	beq.n	8106e0e <xTaskCreateStatic+0xa6>
 8106dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106dd2:	2b00      	cmp	r3, #0
 8106dd4:	d01b      	beq.n	8106e0e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8106dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106dd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8106dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106dde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8106de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106de2:	2202      	movs	r2, #2
 8106de4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8106de8:	2300      	movs	r3, #0
 8106dea:	9303      	str	r3, [sp, #12]
 8106dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106dee:	9302      	str	r3, [sp, #8]
 8106df0:	f107 0314 	add.w	r3, r7, #20
 8106df4:	9301      	str	r3, [sp, #4]
 8106df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106df8:	9300      	str	r3, [sp, #0]
 8106dfa:	683b      	ldr	r3, [r7, #0]
 8106dfc:	687a      	ldr	r2, [r7, #4]
 8106dfe:	68b9      	ldr	r1, [r7, #8]
 8106e00:	68f8      	ldr	r0, [r7, #12]
 8106e02:	f000 f850 	bl	8106ea6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8106e06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8106e08:	f000 f8dc 	bl	8106fc4 <prvAddNewTaskToReadyList>
 8106e0c:	e001      	b.n	8106e12 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8106e0e:	2300      	movs	r3, #0
 8106e10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8106e12:	697b      	ldr	r3, [r7, #20]
	}
 8106e14:	4618      	mov	r0, r3
 8106e16:	3728      	adds	r7, #40	; 0x28
 8106e18:	46bd      	mov	sp, r7
 8106e1a:	bd80      	pop	{r7, pc}

08106e1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8106e1c:	b580      	push	{r7, lr}
 8106e1e:	b08c      	sub	sp, #48	; 0x30
 8106e20:	af04      	add	r7, sp, #16
 8106e22:	60f8      	str	r0, [r7, #12]
 8106e24:	60b9      	str	r1, [r7, #8]
 8106e26:	603b      	str	r3, [r7, #0]
 8106e28:	4613      	mov	r3, r2
 8106e2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8106e2c:	88fb      	ldrh	r3, [r7, #6]
 8106e2e:	009b      	lsls	r3, r3, #2
 8106e30:	4618      	mov	r0, r3
 8106e32:	f7fe fdf7 	bl	8105a24 <pvPortMalloc>
 8106e36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8106e38:	697b      	ldr	r3, [r7, #20]
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d00e      	beq.n	8106e5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8106e3e:	205c      	movs	r0, #92	; 0x5c
 8106e40:	f7fe fdf0 	bl	8105a24 <pvPortMalloc>
 8106e44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8106e46:	69fb      	ldr	r3, [r7, #28]
 8106e48:	2b00      	cmp	r3, #0
 8106e4a:	d003      	beq.n	8106e54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8106e4c:	69fb      	ldr	r3, [r7, #28]
 8106e4e:	697a      	ldr	r2, [r7, #20]
 8106e50:	631a      	str	r2, [r3, #48]	; 0x30
 8106e52:	e005      	b.n	8106e60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8106e54:	6978      	ldr	r0, [r7, #20]
 8106e56:	f7fe fea7 	bl	8105ba8 <vPortFree>
 8106e5a:	e001      	b.n	8106e60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8106e5c:	2300      	movs	r3, #0
 8106e5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8106e60:	69fb      	ldr	r3, [r7, #28]
 8106e62:	2b00      	cmp	r3, #0
 8106e64:	d017      	beq.n	8106e96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8106e66:	69fb      	ldr	r3, [r7, #28]
 8106e68:	2200      	movs	r2, #0
 8106e6a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8106e6e:	88fa      	ldrh	r2, [r7, #6]
 8106e70:	2300      	movs	r3, #0
 8106e72:	9303      	str	r3, [sp, #12]
 8106e74:	69fb      	ldr	r3, [r7, #28]
 8106e76:	9302      	str	r3, [sp, #8]
 8106e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e7a:	9301      	str	r3, [sp, #4]
 8106e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e7e:	9300      	str	r3, [sp, #0]
 8106e80:	683b      	ldr	r3, [r7, #0]
 8106e82:	68b9      	ldr	r1, [r7, #8]
 8106e84:	68f8      	ldr	r0, [r7, #12]
 8106e86:	f000 f80e 	bl	8106ea6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8106e8a:	69f8      	ldr	r0, [r7, #28]
 8106e8c:	f000 f89a 	bl	8106fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8106e90:	2301      	movs	r3, #1
 8106e92:	61bb      	str	r3, [r7, #24]
 8106e94:	e002      	b.n	8106e9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8106e96:	f04f 33ff 	mov.w	r3, #4294967295
 8106e9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8106e9c:	69bb      	ldr	r3, [r7, #24]
	}
 8106e9e:	4618      	mov	r0, r3
 8106ea0:	3720      	adds	r7, #32
 8106ea2:	46bd      	mov	sp, r7
 8106ea4:	bd80      	pop	{r7, pc}

08106ea6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8106ea6:	b580      	push	{r7, lr}
 8106ea8:	b088      	sub	sp, #32
 8106eaa:	af00      	add	r7, sp, #0
 8106eac:	60f8      	str	r0, [r7, #12]
 8106eae:	60b9      	str	r1, [r7, #8]
 8106eb0:	607a      	str	r2, [r7, #4]
 8106eb2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8106eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106eb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8106eb8:	687b      	ldr	r3, [r7, #4]
 8106eba:	009b      	lsls	r3, r3, #2
 8106ebc:	461a      	mov	r2, r3
 8106ebe:	21a5      	movs	r1, #165	; 0xa5
 8106ec0:	f001 f9b3 	bl	810822a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8106ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8106ece:	3b01      	subs	r3, #1
 8106ed0:	009b      	lsls	r3, r3, #2
 8106ed2:	4413      	add	r3, r2
 8106ed4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8106ed6:	69bb      	ldr	r3, [r7, #24]
 8106ed8:	f023 0307 	bic.w	r3, r3, #7
 8106edc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8106ede:	69bb      	ldr	r3, [r7, #24]
 8106ee0:	f003 0307 	and.w	r3, r3, #7
 8106ee4:	2b00      	cmp	r3, #0
 8106ee6:	d009      	beq.n	8106efc <prvInitialiseNewTask+0x56>
 8106ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106eec:	f383 8811 	msr	BASEPRI, r3
 8106ef0:	f3bf 8f6f 	isb	sy
 8106ef4:	f3bf 8f4f 	dsb	sy
 8106ef8:	617b      	str	r3, [r7, #20]
 8106efa:	e7fe      	b.n	8106efa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8106efc:	68bb      	ldr	r3, [r7, #8]
 8106efe:	2b00      	cmp	r3, #0
 8106f00:	d01f      	beq.n	8106f42 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8106f02:	2300      	movs	r3, #0
 8106f04:	61fb      	str	r3, [r7, #28]
 8106f06:	e012      	b.n	8106f2e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8106f08:	68ba      	ldr	r2, [r7, #8]
 8106f0a:	69fb      	ldr	r3, [r7, #28]
 8106f0c:	4413      	add	r3, r2
 8106f0e:	7819      	ldrb	r1, [r3, #0]
 8106f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106f12:	69fb      	ldr	r3, [r7, #28]
 8106f14:	4413      	add	r3, r2
 8106f16:	3334      	adds	r3, #52	; 0x34
 8106f18:	460a      	mov	r2, r1
 8106f1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8106f1c:	68ba      	ldr	r2, [r7, #8]
 8106f1e:	69fb      	ldr	r3, [r7, #28]
 8106f20:	4413      	add	r3, r2
 8106f22:	781b      	ldrb	r3, [r3, #0]
 8106f24:	2b00      	cmp	r3, #0
 8106f26:	d006      	beq.n	8106f36 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8106f28:	69fb      	ldr	r3, [r7, #28]
 8106f2a:	3301      	adds	r3, #1
 8106f2c:	61fb      	str	r3, [r7, #28]
 8106f2e:	69fb      	ldr	r3, [r7, #28]
 8106f30:	2b0f      	cmp	r3, #15
 8106f32:	d9e9      	bls.n	8106f08 <prvInitialiseNewTask+0x62>
 8106f34:	e000      	b.n	8106f38 <prvInitialiseNewTask+0x92>
			{
				break;
 8106f36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8106f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f3a:	2200      	movs	r2, #0
 8106f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8106f40:	e003      	b.n	8106f4a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8106f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f44:	2200      	movs	r2, #0
 8106f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8106f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f4c:	2b37      	cmp	r3, #55	; 0x37
 8106f4e:	d901      	bls.n	8106f54 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8106f50:	2337      	movs	r3, #55	; 0x37
 8106f52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8106f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106f58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8106f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106f5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8106f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f62:	2200      	movs	r2, #0
 8106f64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8106f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f68:	3304      	adds	r3, #4
 8106f6a:	4618      	mov	r0, r3
 8106f6c:	f7fe ff50 	bl	8105e10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8106f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f72:	3318      	adds	r3, #24
 8106f74:	4618      	mov	r0, r3
 8106f76:	f7fe ff4b 	bl	8105e10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8106f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106f7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8106f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8106f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106f8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8106f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f92:	2200      	movs	r2, #0
 8106f94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8106f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106f98:	2200      	movs	r2, #0
 8106f9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8106f9e:	683a      	ldr	r2, [r7, #0]
 8106fa0:	68f9      	ldr	r1, [r7, #12]
 8106fa2:	69b8      	ldr	r0, [r7, #24]
 8106fa4:	f7fe ffc8 	bl	8105f38 <pxPortInitialiseStack>
 8106fa8:	4602      	mov	r2, r0
 8106faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106fac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8106fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106fb0:	2b00      	cmp	r3, #0
 8106fb2:	d002      	beq.n	8106fba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8106fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8106fba:	bf00      	nop
 8106fbc:	3720      	adds	r7, #32
 8106fbe:	46bd      	mov	sp, r7
 8106fc0:	bd80      	pop	{r7, pc}
	...

08106fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8106fc4:	b580      	push	{r7, lr}
 8106fc6:	b082      	sub	sp, #8
 8106fc8:	af00      	add	r7, sp, #0
 8106fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8106fcc:	f7ff f8de 	bl	810618c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8106fd0:	4b2d      	ldr	r3, [pc, #180]	; (8107088 <prvAddNewTaskToReadyList+0xc4>)
 8106fd2:	681b      	ldr	r3, [r3, #0]
 8106fd4:	3301      	adds	r3, #1
 8106fd6:	4a2c      	ldr	r2, [pc, #176]	; (8107088 <prvAddNewTaskToReadyList+0xc4>)
 8106fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8106fda:	4b2c      	ldr	r3, [pc, #176]	; (810708c <prvAddNewTaskToReadyList+0xc8>)
 8106fdc:	681b      	ldr	r3, [r3, #0]
 8106fde:	2b00      	cmp	r3, #0
 8106fe0:	d109      	bne.n	8106ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8106fe2:	4a2a      	ldr	r2, [pc, #168]	; (810708c <prvAddNewTaskToReadyList+0xc8>)
 8106fe4:	687b      	ldr	r3, [r7, #4]
 8106fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8106fe8:	4b27      	ldr	r3, [pc, #156]	; (8107088 <prvAddNewTaskToReadyList+0xc4>)
 8106fea:	681b      	ldr	r3, [r3, #0]
 8106fec:	2b01      	cmp	r3, #1
 8106fee:	d110      	bne.n	8107012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8106ff0:	f000 fc08 	bl	8107804 <prvInitialiseTaskLists>
 8106ff4:	e00d      	b.n	8107012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8106ff6:	4b26      	ldr	r3, [pc, #152]	; (8107090 <prvAddNewTaskToReadyList+0xcc>)
 8106ff8:	681b      	ldr	r3, [r3, #0]
 8106ffa:	2b00      	cmp	r3, #0
 8106ffc:	d109      	bne.n	8107012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8106ffe:	4b23      	ldr	r3, [pc, #140]	; (810708c <prvAddNewTaskToReadyList+0xc8>)
 8107000:	681b      	ldr	r3, [r3, #0]
 8107002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107008:	429a      	cmp	r2, r3
 810700a:	d802      	bhi.n	8107012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810700c:	4a1f      	ldr	r2, [pc, #124]	; (810708c <prvAddNewTaskToReadyList+0xc8>)
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8107012:	4b20      	ldr	r3, [pc, #128]	; (8107094 <prvAddNewTaskToReadyList+0xd0>)
 8107014:	681b      	ldr	r3, [r3, #0]
 8107016:	3301      	adds	r3, #1
 8107018:	4a1e      	ldr	r2, [pc, #120]	; (8107094 <prvAddNewTaskToReadyList+0xd0>)
 810701a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810701c:	4b1d      	ldr	r3, [pc, #116]	; (8107094 <prvAddNewTaskToReadyList+0xd0>)
 810701e:	681a      	ldr	r2, [r3, #0]
 8107020:	687b      	ldr	r3, [r7, #4]
 8107022:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8107024:	687b      	ldr	r3, [r7, #4]
 8107026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107028:	4b1b      	ldr	r3, [pc, #108]	; (8107098 <prvAddNewTaskToReadyList+0xd4>)
 810702a:	681b      	ldr	r3, [r3, #0]
 810702c:	429a      	cmp	r2, r3
 810702e:	d903      	bls.n	8107038 <prvAddNewTaskToReadyList+0x74>
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107034:	4a18      	ldr	r2, [pc, #96]	; (8107098 <prvAddNewTaskToReadyList+0xd4>)
 8107036:	6013      	str	r3, [r2, #0]
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810703c:	4613      	mov	r3, r2
 810703e:	009b      	lsls	r3, r3, #2
 8107040:	4413      	add	r3, r2
 8107042:	009b      	lsls	r3, r3, #2
 8107044:	4a15      	ldr	r2, [pc, #84]	; (810709c <prvAddNewTaskToReadyList+0xd8>)
 8107046:	441a      	add	r2, r3
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	3304      	adds	r3, #4
 810704c:	4619      	mov	r1, r3
 810704e:	4610      	mov	r0, r2
 8107050:	f7fe feeb 	bl	8105e2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8107054:	f7ff f8c8 	bl	81061e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8107058:	4b0d      	ldr	r3, [pc, #52]	; (8107090 <prvAddNewTaskToReadyList+0xcc>)
 810705a:	681b      	ldr	r3, [r3, #0]
 810705c:	2b00      	cmp	r3, #0
 810705e:	d00e      	beq.n	810707e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8107060:	4b0a      	ldr	r3, [pc, #40]	; (810708c <prvAddNewTaskToReadyList+0xc8>)
 8107062:	681b      	ldr	r3, [r3, #0]
 8107064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810706a:	429a      	cmp	r2, r3
 810706c:	d207      	bcs.n	810707e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810706e:	4b0c      	ldr	r3, [pc, #48]	; (81070a0 <prvAddNewTaskToReadyList+0xdc>)
 8107070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107074:	601a      	str	r2, [r3, #0]
 8107076:	f3bf 8f4f 	dsb	sy
 810707a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810707e:	bf00      	nop
 8107080:	3708      	adds	r7, #8
 8107082:	46bd      	mov	sp, r7
 8107084:	bd80      	pop	{r7, pc}
 8107086:	bf00      	nop
 8107088:	10004844 	.word	0x10004844
 810708c:	10004370 	.word	0x10004370
 8107090:	10004850 	.word	0x10004850
 8107094:	10004860 	.word	0x10004860
 8107098:	1000484c 	.word	0x1000484c
 810709c:	10004374 	.word	0x10004374
 81070a0:	e000ed04 	.word	0xe000ed04

081070a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 81070a4:	b580      	push	{r7, lr}
 81070a6:	b084      	sub	sp, #16
 81070a8:	af00      	add	r7, sp, #0
 81070aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 81070ac:	2300      	movs	r3, #0
 81070ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 81070b0:	687b      	ldr	r3, [r7, #4]
 81070b2:	2b00      	cmp	r3, #0
 81070b4:	d016      	beq.n	81070e4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 81070b6:	4b13      	ldr	r3, [pc, #76]	; (8107104 <vTaskDelay+0x60>)
 81070b8:	681b      	ldr	r3, [r3, #0]
 81070ba:	2b00      	cmp	r3, #0
 81070bc:	d009      	beq.n	81070d2 <vTaskDelay+0x2e>
 81070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81070c2:	f383 8811 	msr	BASEPRI, r3
 81070c6:	f3bf 8f6f 	isb	sy
 81070ca:	f3bf 8f4f 	dsb	sy
 81070ce:	60bb      	str	r3, [r7, #8]
 81070d0:	e7fe      	b.n	81070d0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 81070d2:	f000 f87f 	bl	81071d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 81070d6:	2100      	movs	r1, #0
 81070d8:	6878      	ldr	r0, [r7, #4]
 81070da:	f000 fcd7 	bl	8107a8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 81070de:	f000 f887 	bl	81071f0 <xTaskResumeAll>
 81070e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 81070e4:	68fb      	ldr	r3, [r7, #12]
 81070e6:	2b00      	cmp	r3, #0
 81070e8:	d107      	bne.n	81070fa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 81070ea:	4b07      	ldr	r3, [pc, #28]	; (8107108 <vTaskDelay+0x64>)
 81070ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81070f0:	601a      	str	r2, [r3, #0]
 81070f2:	f3bf 8f4f 	dsb	sy
 81070f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 81070fa:	bf00      	nop
 81070fc:	3710      	adds	r7, #16
 81070fe:	46bd      	mov	sp, r7
 8107100:	bd80      	pop	{r7, pc}
 8107102:	bf00      	nop
 8107104:	1000486c 	.word	0x1000486c
 8107108:	e000ed04 	.word	0xe000ed04

0810710c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810710c:	b580      	push	{r7, lr}
 810710e:	b08a      	sub	sp, #40	; 0x28
 8107110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8107112:	2300      	movs	r3, #0
 8107114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8107116:	2300      	movs	r3, #0
 8107118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810711a:	463a      	mov	r2, r7
 810711c:	1d39      	adds	r1, r7, #4
 810711e:	f107 0308 	add.w	r3, r7, #8
 8107122:	4618      	mov	r0, r3
 8107124:	f7fe fc4a 	bl	81059bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8107128:	6839      	ldr	r1, [r7, #0]
 810712a:	687b      	ldr	r3, [r7, #4]
 810712c:	68ba      	ldr	r2, [r7, #8]
 810712e:	9202      	str	r2, [sp, #8]
 8107130:	9301      	str	r3, [sp, #4]
 8107132:	2300      	movs	r3, #0
 8107134:	9300      	str	r3, [sp, #0]
 8107136:	2300      	movs	r3, #0
 8107138:	460a      	mov	r2, r1
 810713a:	4920      	ldr	r1, [pc, #128]	; (81071bc <vTaskStartScheduler+0xb0>)
 810713c:	4820      	ldr	r0, [pc, #128]	; (81071c0 <vTaskStartScheduler+0xb4>)
 810713e:	f7ff fe13 	bl	8106d68 <xTaskCreateStatic>
 8107142:	4602      	mov	r2, r0
 8107144:	4b1f      	ldr	r3, [pc, #124]	; (81071c4 <vTaskStartScheduler+0xb8>)
 8107146:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8107148:	4b1e      	ldr	r3, [pc, #120]	; (81071c4 <vTaskStartScheduler+0xb8>)
 810714a:	681b      	ldr	r3, [r3, #0]
 810714c:	2b00      	cmp	r3, #0
 810714e:	d002      	beq.n	8107156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8107150:	2301      	movs	r3, #1
 8107152:	617b      	str	r3, [r7, #20]
 8107154:	e001      	b.n	810715a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8107156:	2300      	movs	r3, #0
 8107158:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810715a:	697b      	ldr	r3, [r7, #20]
 810715c:	2b01      	cmp	r3, #1
 810715e:	d102      	bne.n	8107166 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8107160:	f000 fce8 	bl	8107b34 <xTimerCreateTimerTask>
 8107164:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8107166:	697b      	ldr	r3, [r7, #20]
 8107168:	2b01      	cmp	r3, #1
 810716a:	d115      	bne.n	8107198 <vTaskStartScheduler+0x8c>
 810716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107170:	f383 8811 	msr	BASEPRI, r3
 8107174:	f3bf 8f6f 	isb	sy
 8107178:	f3bf 8f4f 	dsb	sy
 810717c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810717e:	4b12      	ldr	r3, [pc, #72]	; (81071c8 <vTaskStartScheduler+0xbc>)
 8107180:	f04f 32ff 	mov.w	r2, #4294967295
 8107184:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8107186:	4b11      	ldr	r3, [pc, #68]	; (81071cc <vTaskStartScheduler+0xc0>)
 8107188:	2201      	movs	r2, #1
 810718a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810718c:	4b10      	ldr	r3, [pc, #64]	; (81071d0 <vTaskStartScheduler+0xc4>)
 810718e:	2200      	movs	r2, #0
 8107190:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8107192:	f7fe ff5d 	bl	8106050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8107196:	e00d      	b.n	81071b4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8107198:	697b      	ldr	r3, [r7, #20]
 810719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810719e:	d109      	bne.n	81071b4 <vTaskStartScheduler+0xa8>
 81071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81071a4:	f383 8811 	msr	BASEPRI, r3
 81071a8:	f3bf 8f6f 	isb	sy
 81071ac:	f3bf 8f4f 	dsb	sy
 81071b0:	60fb      	str	r3, [r7, #12]
 81071b2:	e7fe      	b.n	81071b2 <vTaskStartScheduler+0xa6>
}
 81071b4:	bf00      	nop
 81071b6:	3718      	adds	r7, #24
 81071b8:	46bd      	mov	sp, r7
 81071ba:	bd80      	pop	{r7, pc}
 81071bc:	08108a84 	.word	0x08108a84
 81071c0:	081077d5 	.word	0x081077d5
 81071c4:	10004868 	.word	0x10004868
 81071c8:	10004864 	.word	0x10004864
 81071cc:	10004850 	.word	0x10004850
 81071d0:	10004848 	.word	0x10004848

081071d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 81071d4:	b480      	push	{r7}
 81071d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 81071d8:	4b04      	ldr	r3, [pc, #16]	; (81071ec <vTaskSuspendAll+0x18>)
 81071da:	681b      	ldr	r3, [r3, #0]
 81071dc:	3301      	adds	r3, #1
 81071de:	4a03      	ldr	r2, [pc, #12]	; (81071ec <vTaskSuspendAll+0x18>)
 81071e0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 81071e2:	bf00      	nop
 81071e4:	46bd      	mov	sp, r7
 81071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071ea:	4770      	bx	lr
 81071ec:	1000486c 	.word	0x1000486c

081071f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 81071f0:	b580      	push	{r7, lr}
 81071f2:	b084      	sub	sp, #16
 81071f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 81071f6:	2300      	movs	r3, #0
 81071f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 81071fa:	2300      	movs	r3, #0
 81071fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 81071fe:	4b41      	ldr	r3, [pc, #260]	; (8107304 <xTaskResumeAll+0x114>)
 8107200:	681b      	ldr	r3, [r3, #0]
 8107202:	2b00      	cmp	r3, #0
 8107204:	d109      	bne.n	810721a <xTaskResumeAll+0x2a>
 8107206:	f04f 0350 	mov.w	r3, #80	; 0x50
 810720a:	f383 8811 	msr	BASEPRI, r3
 810720e:	f3bf 8f6f 	isb	sy
 8107212:	f3bf 8f4f 	dsb	sy
 8107216:	603b      	str	r3, [r7, #0]
 8107218:	e7fe      	b.n	8107218 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810721a:	f7fe ffb7 	bl	810618c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810721e:	4b39      	ldr	r3, [pc, #228]	; (8107304 <xTaskResumeAll+0x114>)
 8107220:	681b      	ldr	r3, [r3, #0]
 8107222:	3b01      	subs	r3, #1
 8107224:	4a37      	ldr	r2, [pc, #220]	; (8107304 <xTaskResumeAll+0x114>)
 8107226:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107228:	4b36      	ldr	r3, [pc, #216]	; (8107304 <xTaskResumeAll+0x114>)
 810722a:	681b      	ldr	r3, [r3, #0]
 810722c:	2b00      	cmp	r3, #0
 810722e:	d162      	bne.n	81072f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8107230:	4b35      	ldr	r3, [pc, #212]	; (8107308 <xTaskResumeAll+0x118>)
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	2b00      	cmp	r3, #0
 8107236:	d05e      	beq.n	81072f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8107238:	e02f      	b.n	810729a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810723a:	4b34      	ldr	r3, [pc, #208]	; (810730c <xTaskResumeAll+0x11c>)
 810723c:	68db      	ldr	r3, [r3, #12]
 810723e:	68db      	ldr	r3, [r3, #12]
 8107240:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107242:	68fb      	ldr	r3, [r7, #12]
 8107244:	3318      	adds	r3, #24
 8107246:	4618      	mov	r0, r3
 8107248:	f7fe fe4c 	bl	8105ee4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810724c:	68fb      	ldr	r3, [r7, #12]
 810724e:	3304      	adds	r3, #4
 8107250:	4618      	mov	r0, r3
 8107252:	f7fe fe47 	bl	8105ee4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8107256:	68fb      	ldr	r3, [r7, #12]
 8107258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810725a:	4b2d      	ldr	r3, [pc, #180]	; (8107310 <xTaskResumeAll+0x120>)
 810725c:	681b      	ldr	r3, [r3, #0]
 810725e:	429a      	cmp	r2, r3
 8107260:	d903      	bls.n	810726a <xTaskResumeAll+0x7a>
 8107262:	68fb      	ldr	r3, [r7, #12]
 8107264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107266:	4a2a      	ldr	r2, [pc, #168]	; (8107310 <xTaskResumeAll+0x120>)
 8107268:	6013      	str	r3, [r2, #0]
 810726a:	68fb      	ldr	r3, [r7, #12]
 810726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810726e:	4613      	mov	r3, r2
 8107270:	009b      	lsls	r3, r3, #2
 8107272:	4413      	add	r3, r2
 8107274:	009b      	lsls	r3, r3, #2
 8107276:	4a27      	ldr	r2, [pc, #156]	; (8107314 <xTaskResumeAll+0x124>)
 8107278:	441a      	add	r2, r3
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	3304      	adds	r3, #4
 810727e:	4619      	mov	r1, r3
 8107280:	4610      	mov	r0, r2
 8107282:	f7fe fdd2 	bl	8105e2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810728a:	4b23      	ldr	r3, [pc, #140]	; (8107318 <xTaskResumeAll+0x128>)
 810728c:	681b      	ldr	r3, [r3, #0]
 810728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107290:	429a      	cmp	r2, r3
 8107292:	d302      	bcc.n	810729a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8107294:	4b21      	ldr	r3, [pc, #132]	; (810731c <xTaskResumeAll+0x12c>)
 8107296:	2201      	movs	r2, #1
 8107298:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810729a:	4b1c      	ldr	r3, [pc, #112]	; (810730c <xTaskResumeAll+0x11c>)
 810729c:	681b      	ldr	r3, [r3, #0]
 810729e:	2b00      	cmp	r3, #0
 81072a0:	d1cb      	bne.n	810723a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 81072a2:	68fb      	ldr	r3, [r7, #12]
 81072a4:	2b00      	cmp	r3, #0
 81072a6:	d001      	beq.n	81072ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 81072a8:	f000 fb46 	bl	8107938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 81072ac:	4b1c      	ldr	r3, [pc, #112]	; (8107320 <xTaskResumeAll+0x130>)
 81072ae:	681b      	ldr	r3, [r3, #0]
 81072b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 81072b2:	687b      	ldr	r3, [r7, #4]
 81072b4:	2b00      	cmp	r3, #0
 81072b6:	d010      	beq.n	81072da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 81072b8:	f000 f846 	bl	8107348 <xTaskIncrementTick>
 81072bc:	4603      	mov	r3, r0
 81072be:	2b00      	cmp	r3, #0
 81072c0:	d002      	beq.n	81072c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 81072c2:	4b16      	ldr	r3, [pc, #88]	; (810731c <xTaskResumeAll+0x12c>)
 81072c4:	2201      	movs	r2, #1
 81072c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 81072c8:	687b      	ldr	r3, [r7, #4]
 81072ca:	3b01      	subs	r3, #1
 81072cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	2b00      	cmp	r3, #0
 81072d2:	d1f1      	bne.n	81072b8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 81072d4:	4b12      	ldr	r3, [pc, #72]	; (8107320 <xTaskResumeAll+0x130>)
 81072d6:	2200      	movs	r2, #0
 81072d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 81072da:	4b10      	ldr	r3, [pc, #64]	; (810731c <xTaskResumeAll+0x12c>)
 81072dc:	681b      	ldr	r3, [r3, #0]
 81072de:	2b00      	cmp	r3, #0
 81072e0:	d009      	beq.n	81072f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 81072e2:	2301      	movs	r3, #1
 81072e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 81072e6:	4b0f      	ldr	r3, [pc, #60]	; (8107324 <xTaskResumeAll+0x134>)
 81072e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81072ec:	601a      	str	r2, [r3, #0]
 81072ee:	f3bf 8f4f 	dsb	sy
 81072f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 81072f6:	f7fe ff77 	bl	81061e8 <vPortExitCritical>

	return xAlreadyYielded;
 81072fa:	68bb      	ldr	r3, [r7, #8]
}
 81072fc:	4618      	mov	r0, r3
 81072fe:	3710      	adds	r7, #16
 8107300:	46bd      	mov	sp, r7
 8107302:	bd80      	pop	{r7, pc}
 8107304:	1000486c 	.word	0x1000486c
 8107308:	10004844 	.word	0x10004844
 810730c:	10004804 	.word	0x10004804
 8107310:	1000484c 	.word	0x1000484c
 8107314:	10004374 	.word	0x10004374
 8107318:	10004370 	.word	0x10004370
 810731c:	10004858 	.word	0x10004858
 8107320:	10004854 	.word	0x10004854
 8107324:	e000ed04 	.word	0xe000ed04

08107328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8107328:	b480      	push	{r7}
 810732a:	b083      	sub	sp, #12
 810732c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810732e:	4b05      	ldr	r3, [pc, #20]	; (8107344 <xTaskGetTickCount+0x1c>)
 8107330:	681b      	ldr	r3, [r3, #0]
 8107332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8107334:	687b      	ldr	r3, [r7, #4]
}
 8107336:	4618      	mov	r0, r3
 8107338:	370c      	adds	r7, #12
 810733a:	46bd      	mov	sp, r7
 810733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107340:	4770      	bx	lr
 8107342:	bf00      	nop
 8107344:	10004848 	.word	0x10004848

08107348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8107348:	b580      	push	{r7, lr}
 810734a:	b086      	sub	sp, #24
 810734c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810734e:	2300      	movs	r3, #0
 8107350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107352:	4b4e      	ldr	r3, [pc, #312]	; (810748c <xTaskIncrementTick+0x144>)
 8107354:	681b      	ldr	r3, [r3, #0]
 8107356:	2b00      	cmp	r3, #0
 8107358:	f040 8088 	bne.w	810746c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810735c:	4b4c      	ldr	r3, [pc, #304]	; (8107490 <xTaskIncrementTick+0x148>)
 810735e:	681b      	ldr	r3, [r3, #0]
 8107360:	3301      	adds	r3, #1
 8107362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8107364:	4a4a      	ldr	r2, [pc, #296]	; (8107490 <xTaskIncrementTick+0x148>)
 8107366:	693b      	ldr	r3, [r7, #16]
 8107368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810736a:	693b      	ldr	r3, [r7, #16]
 810736c:	2b00      	cmp	r3, #0
 810736e:	d11f      	bne.n	81073b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8107370:	4b48      	ldr	r3, [pc, #288]	; (8107494 <xTaskIncrementTick+0x14c>)
 8107372:	681b      	ldr	r3, [r3, #0]
 8107374:	681b      	ldr	r3, [r3, #0]
 8107376:	2b00      	cmp	r3, #0
 8107378:	d009      	beq.n	810738e <xTaskIncrementTick+0x46>
 810737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810737e:	f383 8811 	msr	BASEPRI, r3
 8107382:	f3bf 8f6f 	isb	sy
 8107386:	f3bf 8f4f 	dsb	sy
 810738a:	603b      	str	r3, [r7, #0]
 810738c:	e7fe      	b.n	810738c <xTaskIncrementTick+0x44>
 810738e:	4b41      	ldr	r3, [pc, #260]	; (8107494 <xTaskIncrementTick+0x14c>)
 8107390:	681b      	ldr	r3, [r3, #0]
 8107392:	60fb      	str	r3, [r7, #12]
 8107394:	4b40      	ldr	r3, [pc, #256]	; (8107498 <xTaskIncrementTick+0x150>)
 8107396:	681b      	ldr	r3, [r3, #0]
 8107398:	4a3e      	ldr	r2, [pc, #248]	; (8107494 <xTaskIncrementTick+0x14c>)
 810739a:	6013      	str	r3, [r2, #0]
 810739c:	4a3e      	ldr	r2, [pc, #248]	; (8107498 <xTaskIncrementTick+0x150>)
 810739e:	68fb      	ldr	r3, [r7, #12]
 81073a0:	6013      	str	r3, [r2, #0]
 81073a2:	4b3e      	ldr	r3, [pc, #248]	; (810749c <xTaskIncrementTick+0x154>)
 81073a4:	681b      	ldr	r3, [r3, #0]
 81073a6:	3301      	adds	r3, #1
 81073a8:	4a3c      	ldr	r2, [pc, #240]	; (810749c <xTaskIncrementTick+0x154>)
 81073aa:	6013      	str	r3, [r2, #0]
 81073ac:	f000 fac4 	bl	8107938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 81073b0:	4b3b      	ldr	r3, [pc, #236]	; (81074a0 <xTaskIncrementTick+0x158>)
 81073b2:	681b      	ldr	r3, [r3, #0]
 81073b4:	693a      	ldr	r2, [r7, #16]
 81073b6:	429a      	cmp	r2, r3
 81073b8:	d349      	bcc.n	810744e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81073ba:	4b36      	ldr	r3, [pc, #216]	; (8107494 <xTaskIncrementTick+0x14c>)
 81073bc:	681b      	ldr	r3, [r3, #0]
 81073be:	681b      	ldr	r3, [r3, #0]
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d104      	bne.n	81073ce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81073c4:	4b36      	ldr	r3, [pc, #216]	; (81074a0 <xTaskIncrementTick+0x158>)
 81073c6:	f04f 32ff 	mov.w	r2, #4294967295
 81073ca:	601a      	str	r2, [r3, #0]
					break;
 81073cc:	e03f      	b.n	810744e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81073ce:	4b31      	ldr	r3, [pc, #196]	; (8107494 <xTaskIncrementTick+0x14c>)
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	68db      	ldr	r3, [r3, #12]
 81073d4:	68db      	ldr	r3, [r3, #12]
 81073d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 81073d8:	68bb      	ldr	r3, [r7, #8]
 81073da:	685b      	ldr	r3, [r3, #4]
 81073dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 81073de:	693a      	ldr	r2, [r7, #16]
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	429a      	cmp	r2, r3
 81073e4:	d203      	bcs.n	81073ee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 81073e6:	4a2e      	ldr	r2, [pc, #184]	; (81074a0 <xTaskIncrementTick+0x158>)
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 81073ec:	e02f      	b.n	810744e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81073ee:	68bb      	ldr	r3, [r7, #8]
 81073f0:	3304      	adds	r3, #4
 81073f2:	4618      	mov	r0, r3
 81073f4:	f7fe fd76 	bl	8105ee4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 81073f8:	68bb      	ldr	r3, [r7, #8]
 81073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81073fc:	2b00      	cmp	r3, #0
 81073fe:	d004      	beq.n	810740a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8107400:	68bb      	ldr	r3, [r7, #8]
 8107402:	3318      	adds	r3, #24
 8107404:	4618      	mov	r0, r3
 8107406:	f7fe fd6d 	bl	8105ee4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810740a:	68bb      	ldr	r3, [r7, #8]
 810740c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810740e:	4b25      	ldr	r3, [pc, #148]	; (81074a4 <xTaskIncrementTick+0x15c>)
 8107410:	681b      	ldr	r3, [r3, #0]
 8107412:	429a      	cmp	r2, r3
 8107414:	d903      	bls.n	810741e <xTaskIncrementTick+0xd6>
 8107416:	68bb      	ldr	r3, [r7, #8]
 8107418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810741a:	4a22      	ldr	r2, [pc, #136]	; (81074a4 <xTaskIncrementTick+0x15c>)
 810741c:	6013      	str	r3, [r2, #0]
 810741e:	68bb      	ldr	r3, [r7, #8]
 8107420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107422:	4613      	mov	r3, r2
 8107424:	009b      	lsls	r3, r3, #2
 8107426:	4413      	add	r3, r2
 8107428:	009b      	lsls	r3, r3, #2
 810742a:	4a1f      	ldr	r2, [pc, #124]	; (81074a8 <xTaskIncrementTick+0x160>)
 810742c:	441a      	add	r2, r3
 810742e:	68bb      	ldr	r3, [r7, #8]
 8107430:	3304      	adds	r3, #4
 8107432:	4619      	mov	r1, r3
 8107434:	4610      	mov	r0, r2
 8107436:	f7fe fcf8 	bl	8105e2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810743a:	68bb      	ldr	r3, [r7, #8]
 810743c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810743e:	4b1b      	ldr	r3, [pc, #108]	; (81074ac <xTaskIncrementTick+0x164>)
 8107440:	681b      	ldr	r3, [r3, #0]
 8107442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107444:	429a      	cmp	r2, r3
 8107446:	d3b8      	bcc.n	81073ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8107448:	2301      	movs	r3, #1
 810744a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810744c:	e7b5      	b.n	81073ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810744e:	4b17      	ldr	r3, [pc, #92]	; (81074ac <xTaskIncrementTick+0x164>)
 8107450:	681b      	ldr	r3, [r3, #0]
 8107452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107454:	4914      	ldr	r1, [pc, #80]	; (81074a8 <xTaskIncrementTick+0x160>)
 8107456:	4613      	mov	r3, r2
 8107458:	009b      	lsls	r3, r3, #2
 810745a:	4413      	add	r3, r2
 810745c:	009b      	lsls	r3, r3, #2
 810745e:	440b      	add	r3, r1
 8107460:	681b      	ldr	r3, [r3, #0]
 8107462:	2b01      	cmp	r3, #1
 8107464:	d907      	bls.n	8107476 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8107466:	2301      	movs	r3, #1
 8107468:	617b      	str	r3, [r7, #20]
 810746a:	e004      	b.n	8107476 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810746c:	4b10      	ldr	r3, [pc, #64]	; (81074b0 <xTaskIncrementTick+0x168>)
 810746e:	681b      	ldr	r3, [r3, #0]
 8107470:	3301      	adds	r3, #1
 8107472:	4a0f      	ldr	r2, [pc, #60]	; (81074b0 <xTaskIncrementTick+0x168>)
 8107474:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8107476:	4b0f      	ldr	r3, [pc, #60]	; (81074b4 <xTaskIncrementTick+0x16c>)
 8107478:	681b      	ldr	r3, [r3, #0]
 810747a:	2b00      	cmp	r3, #0
 810747c:	d001      	beq.n	8107482 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 810747e:	2301      	movs	r3, #1
 8107480:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8107482:	697b      	ldr	r3, [r7, #20]
}
 8107484:	4618      	mov	r0, r3
 8107486:	3718      	adds	r7, #24
 8107488:	46bd      	mov	sp, r7
 810748a:	bd80      	pop	{r7, pc}
 810748c:	1000486c 	.word	0x1000486c
 8107490:	10004848 	.word	0x10004848
 8107494:	100047fc 	.word	0x100047fc
 8107498:	10004800 	.word	0x10004800
 810749c:	1000485c 	.word	0x1000485c
 81074a0:	10004864 	.word	0x10004864
 81074a4:	1000484c 	.word	0x1000484c
 81074a8:	10004374 	.word	0x10004374
 81074ac:	10004370 	.word	0x10004370
 81074b0:	10004854 	.word	0x10004854
 81074b4:	10004858 	.word	0x10004858

081074b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 81074b8:	b480      	push	{r7}
 81074ba:	b085      	sub	sp, #20
 81074bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 81074be:	4b27      	ldr	r3, [pc, #156]	; (810755c <vTaskSwitchContext+0xa4>)
 81074c0:	681b      	ldr	r3, [r3, #0]
 81074c2:	2b00      	cmp	r3, #0
 81074c4:	d003      	beq.n	81074ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 81074c6:	4b26      	ldr	r3, [pc, #152]	; (8107560 <vTaskSwitchContext+0xa8>)
 81074c8:	2201      	movs	r2, #1
 81074ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 81074cc:	e040      	b.n	8107550 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 81074ce:	4b24      	ldr	r3, [pc, #144]	; (8107560 <vTaskSwitchContext+0xa8>)
 81074d0:	2200      	movs	r2, #0
 81074d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81074d4:	4b23      	ldr	r3, [pc, #140]	; (8107564 <vTaskSwitchContext+0xac>)
 81074d6:	681b      	ldr	r3, [r3, #0]
 81074d8:	60fb      	str	r3, [r7, #12]
 81074da:	e00f      	b.n	81074fc <vTaskSwitchContext+0x44>
 81074dc:	68fb      	ldr	r3, [r7, #12]
 81074de:	2b00      	cmp	r3, #0
 81074e0:	d109      	bne.n	81074f6 <vTaskSwitchContext+0x3e>
 81074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81074e6:	f383 8811 	msr	BASEPRI, r3
 81074ea:	f3bf 8f6f 	isb	sy
 81074ee:	f3bf 8f4f 	dsb	sy
 81074f2:	607b      	str	r3, [r7, #4]
 81074f4:	e7fe      	b.n	81074f4 <vTaskSwitchContext+0x3c>
 81074f6:	68fb      	ldr	r3, [r7, #12]
 81074f8:	3b01      	subs	r3, #1
 81074fa:	60fb      	str	r3, [r7, #12]
 81074fc:	491a      	ldr	r1, [pc, #104]	; (8107568 <vTaskSwitchContext+0xb0>)
 81074fe:	68fa      	ldr	r2, [r7, #12]
 8107500:	4613      	mov	r3, r2
 8107502:	009b      	lsls	r3, r3, #2
 8107504:	4413      	add	r3, r2
 8107506:	009b      	lsls	r3, r3, #2
 8107508:	440b      	add	r3, r1
 810750a:	681b      	ldr	r3, [r3, #0]
 810750c:	2b00      	cmp	r3, #0
 810750e:	d0e5      	beq.n	81074dc <vTaskSwitchContext+0x24>
 8107510:	68fa      	ldr	r2, [r7, #12]
 8107512:	4613      	mov	r3, r2
 8107514:	009b      	lsls	r3, r3, #2
 8107516:	4413      	add	r3, r2
 8107518:	009b      	lsls	r3, r3, #2
 810751a:	4a13      	ldr	r2, [pc, #76]	; (8107568 <vTaskSwitchContext+0xb0>)
 810751c:	4413      	add	r3, r2
 810751e:	60bb      	str	r3, [r7, #8]
 8107520:	68bb      	ldr	r3, [r7, #8]
 8107522:	685b      	ldr	r3, [r3, #4]
 8107524:	685a      	ldr	r2, [r3, #4]
 8107526:	68bb      	ldr	r3, [r7, #8]
 8107528:	605a      	str	r2, [r3, #4]
 810752a:	68bb      	ldr	r3, [r7, #8]
 810752c:	685a      	ldr	r2, [r3, #4]
 810752e:	68bb      	ldr	r3, [r7, #8]
 8107530:	3308      	adds	r3, #8
 8107532:	429a      	cmp	r2, r3
 8107534:	d104      	bne.n	8107540 <vTaskSwitchContext+0x88>
 8107536:	68bb      	ldr	r3, [r7, #8]
 8107538:	685b      	ldr	r3, [r3, #4]
 810753a:	685a      	ldr	r2, [r3, #4]
 810753c:	68bb      	ldr	r3, [r7, #8]
 810753e:	605a      	str	r2, [r3, #4]
 8107540:	68bb      	ldr	r3, [r7, #8]
 8107542:	685b      	ldr	r3, [r3, #4]
 8107544:	68db      	ldr	r3, [r3, #12]
 8107546:	4a09      	ldr	r2, [pc, #36]	; (810756c <vTaskSwitchContext+0xb4>)
 8107548:	6013      	str	r3, [r2, #0]
 810754a:	4a06      	ldr	r2, [pc, #24]	; (8107564 <vTaskSwitchContext+0xac>)
 810754c:	68fb      	ldr	r3, [r7, #12]
 810754e:	6013      	str	r3, [r2, #0]
}
 8107550:	bf00      	nop
 8107552:	3714      	adds	r7, #20
 8107554:	46bd      	mov	sp, r7
 8107556:	f85d 7b04 	ldr.w	r7, [sp], #4
 810755a:	4770      	bx	lr
 810755c:	1000486c 	.word	0x1000486c
 8107560:	10004858 	.word	0x10004858
 8107564:	1000484c 	.word	0x1000484c
 8107568:	10004374 	.word	0x10004374
 810756c:	10004370 	.word	0x10004370

08107570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8107570:	b580      	push	{r7, lr}
 8107572:	b084      	sub	sp, #16
 8107574:	af00      	add	r7, sp, #0
 8107576:	6078      	str	r0, [r7, #4]
 8107578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	2b00      	cmp	r3, #0
 810757e:	d109      	bne.n	8107594 <vTaskPlaceOnEventList+0x24>
 8107580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107584:	f383 8811 	msr	BASEPRI, r3
 8107588:	f3bf 8f6f 	isb	sy
 810758c:	f3bf 8f4f 	dsb	sy
 8107590:	60fb      	str	r3, [r7, #12]
 8107592:	e7fe      	b.n	8107592 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8107594:	4b07      	ldr	r3, [pc, #28]	; (81075b4 <vTaskPlaceOnEventList+0x44>)
 8107596:	681b      	ldr	r3, [r3, #0]
 8107598:	3318      	adds	r3, #24
 810759a:	4619      	mov	r1, r3
 810759c:	6878      	ldr	r0, [r7, #4]
 810759e:	f7fe fc68 	bl	8105e72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 81075a2:	2101      	movs	r1, #1
 81075a4:	6838      	ldr	r0, [r7, #0]
 81075a6:	f000 fa71 	bl	8107a8c <prvAddCurrentTaskToDelayedList>
}
 81075aa:	bf00      	nop
 81075ac:	3710      	adds	r7, #16
 81075ae:	46bd      	mov	sp, r7
 81075b0:	bd80      	pop	{r7, pc}
 81075b2:	bf00      	nop
 81075b4:	10004370 	.word	0x10004370

081075b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 81075b8:	b580      	push	{r7, lr}
 81075ba:	b086      	sub	sp, #24
 81075bc:	af00      	add	r7, sp, #0
 81075be:	60f8      	str	r0, [r7, #12]
 81075c0:	60b9      	str	r1, [r7, #8]
 81075c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 81075c4:	68fb      	ldr	r3, [r7, #12]
 81075c6:	2b00      	cmp	r3, #0
 81075c8:	d109      	bne.n	81075de <vTaskPlaceOnEventListRestricted+0x26>
 81075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 81075ce:	f383 8811 	msr	BASEPRI, r3
 81075d2:	f3bf 8f6f 	isb	sy
 81075d6:	f3bf 8f4f 	dsb	sy
 81075da:	617b      	str	r3, [r7, #20]
 81075dc:	e7fe      	b.n	81075dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 81075de:	4b0a      	ldr	r3, [pc, #40]	; (8107608 <vTaskPlaceOnEventListRestricted+0x50>)
 81075e0:	681b      	ldr	r3, [r3, #0]
 81075e2:	3318      	adds	r3, #24
 81075e4:	4619      	mov	r1, r3
 81075e6:	68f8      	ldr	r0, [r7, #12]
 81075e8:	f7fe fc1f 	bl	8105e2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	2b00      	cmp	r3, #0
 81075f0:	d002      	beq.n	81075f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 81075f2:	f04f 33ff 	mov.w	r3, #4294967295
 81075f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 81075f8:	6879      	ldr	r1, [r7, #4]
 81075fa:	68b8      	ldr	r0, [r7, #8]
 81075fc:	f000 fa46 	bl	8107a8c <prvAddCurrentTaskToDelayedList>
	}
 8107600:	bf00      	nop
 8107602:	3718      	adds	r7, #24
 8107604:	46bd      	mov	sp, r7
 8107606:	bd80      	pop	{r7, pc}
 8107608:	10004370 	.word	0x10004370

0810760c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810760c:	b580      	push	{r7, lr}
 810760e:	b086      	sub	sp, #24
 8107610:	af00      	add	r7, sp, #0
 8107612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107614:	687b      	ldr	r3, [r7, #4]
 8107616:	68db      	ldr	r3, [r3, #12]
 8107618:	68db      	ldr	r3, [r3, #12]
 810761a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810761c:	693b      	ldr	r3, [r7, #16]
 810761e:	2b00      	cmp	r3, #0
 8107620:	d109      	bne.n	8107636 <xTaskRemoveFromEventList+0x2a>
 8107622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107626:	f383 8811 	msr	BASEPRI, r3
 810762a:	f3bf 8f6f 	isb	sy
 810762e:	f3bf 8f4f 	dsb	sy
 8107632:	60fb      	str	r3, [r7, #12]
 8107634:	e7fe      	b.n	8107634 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8107636:	693b      	ldr	r3, [r7, #16]
 8107638:	3318      	adds	r3, #24
 810763a:	4618      	mov	r0, r3
 810763c:	f7fe fc52 	bl	8105ee4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8107640:	4b1d      	ldr	r3, [pc, #116]	; (81076b8 <xTaskRemoveFromEventList+0xac>)
 8107642:	681b      	ldr	r3, [r3, #0]
 8107644:	2b00      	cmp	r3, #0
 8107646:	d11d      	bne.n	8107684 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8107648:	693b      	ldr	r3, [r7, #16]
 810764a:	3304      	adds	r3, #4
 810764c:	4618      	mov	r0, r3
 810764e:	f7fe fc49 	bl	8105ee4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8107652:	693b      	ldr	r3, [r7, #16]
 8107654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107656:	4b19      	ldr	r3, [pc, #100]	; (81076bc <xTaskRemoveFromEventList+0xb0>)
 8107658:	681b      	ldr	r3, [r3, #0]
 810765a:	429a      	cmp	r2, r3
 810765c:	d903      	bls.n	8107666 <xTaskRemoveFromEventList+0x5a>
 810765e:	693b      	ldr	r3, [r7, #16]
 8107660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107662:	4a16      	ldr	r2, [pc, #88]	; (81076bc <xTaskRemoveFromEventList+0xb0>)
 8107664:	6013      	str	r3, [r2, #0]
 8107666:	693b      	ldr	r3, [r7, #16]
 8107668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810766a:	4613      	mov	r3, r2
 810766c:	009b      	lsls	r3, r3, #2
 810766e:	4413      	add	r3, r2
 8107670:	009b      	lsls	r3, r3, #2
 8107672:	4a13      	ldr	r2, [pc, #76]	; (81076c0 <xTaskRemoveFromEventList+0xb4>)
 8107674:	441a      	add	r2, r3
 8107676:	693b      	ldr	r3, [r7, #16]
 8107678:	3304      	adds	r3, #4
 810767a:	4619      	mov	r1, r3
 810767c:	4610      	mov	r0, r2
 810767e:	f7fe fbd4 	bl	8105e2a <vListInsertEnd>
 8107682:	e005      	b.n	8107690 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8107684:	693b      	ldr	r3, [r7, #16]
 8107686:	3318      	adds	r3, #24
 8107688:	4619      	mov	r1, r3
 810768a:	480e      	ldr	r0, [pc, #56]	; (81076c4 <xTaskRemoveFromEventList+0xb8>)
 810768c:	f7fe fbcd 	bl	8105e2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8107690:	693b      	ldr	r3, [r7, #16]
 8107692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107694:	4b0c      	ldr	r3, [pc, #48]	; (81076c8 <xTaskRemoveFromEventList+0xbc>)
 8107696:	681b      	ldr	r3, [r3, #0]
 8107698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810769a:	429a      	cmp	r2, r3
 810769c:	d905      	bls.n	81076aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810769e:	2301      	movs	r3, #1
 81076a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 81076a2:	4b0a      	ldr	r3, [pc, #40]	; (81076cc <xTaskRemoveFromEventList+0xc0>)
 81076a4:	2201      	movs	r2, #1
 81076a6:	601a      	str	r2, [r3, #0]
 81076a8:	e001      	b.n	81076ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 81076aa:	2300      	movs	r3, #0
 81076ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 81076ae:	697b      	ldr	r3, [r7, #20]
}
 81076b0:	4618      	mov	r0, r3
 81076b2:	3718      	adds	r7, #24
 81076b4:	46bd      	mov	sp, r7
 81076b6:	bd80      	pop	{r7, pc}
 81076b8:	1000486c 	.word	0x1000486c
 81076bc:	1000484c 	.word	0x1000484c
 81076c0:	10004374 	.word	0x10004374
 81076c4:	10004804 	.word	0x10004804
 81076c8:	10004370 	.word	0x10004370
 81076cc:	10004858 	.word	0x10004858

081076d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 81076d0:	b480      	push	{r7}
 81076d2:	b083      	sub	sp, #12
 81076d4:	af00      	add	r7, sp, #0
 81076d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 81076d8:	4b06      	ldr	r3, [pc, #24]	; (81076f4 <vTaskInternalSetTimeOutState+0x24>)
 81076da:	681a      	ldr	r2, [r3, #0]
 81076dc:	687b      	ldr	r3, [r7, #4]
 81076de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 81076e0:	4b05      	ldr	r3, [pc, #20]	; (81076f8 <vTaskInternalSetTimeOutState+0x28>)
 81076e2:	681a      	ldr	r2, [r3, #0]
 81076e4:	687b      	ldr	r3, [r7, #4]
 81076e6:	605a      	str	r2, [r3, #4]
}
 81076e8:	bf00      	nop
 81076ea:	370c      	adds	r7, #12
 81076ec:	46bd      	mov	sp, r7
 81076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076f2:	4770      	bx	lr
 81076f4:	1000485c 	.word	0x1000485c
 81076f8:	10004848 	.word	0x10004848

081076fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 81076fc:	b580      	push	{r7, lr}
 81076fe:	b088      	sub	sp, #32
 8107700:	af00      	add	r7, sp, #0
 8107702:	6078      	str	r0, [r7, #4]
 8107704:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8107706:	687b      	ldr	r3, [r7, #4]
 8107708:	2b00      	cmp	r3, #0
 810770a:	d109      	bne.n	8107720 <xTaskCheckForTimeOut+0x24>
 810770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107710:	f383 8811 	msr	BASEPRI, r3
 8107714:	f3bf 8f6f 	isb	sy
 8107718:	f3bf 8f4f 	dsb	sy
 810771c:	613b      	str	r3, [r7, #16]
 810771e:	e7fe      	b.n	810771e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8107720:	683b      	ldr	r3, [r7, #0]
 8107722:	2b00      	cmp	r3, #0
 8107724:	d109      	bne.n	810773a <xTaskCheckForTimeOut+0x3e>
 8107726:	f04f 0350 	mov.w	r3, #80	; 0x50
 810772a:	f383 8811 	msr	BASEPRI, r3
 810772e:	f3bf 8f6f 	isb	sy
 8107732:	f3bf 8f4f 	dsb	sy
 8107736:	60fb      	str	r3, [r7, #12]
 8107738:	e7fe      	b.n	8107738 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810773a:	f7fe fd27 	bl	810618c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810773e:	4b1d      	ldr	r3, [pc, #116]	; (81077b4 <xTaskCheckForTimeOut+0xb8>)
 8107740:	681b      	ldr	r3, [r3, #0]
 8107742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	685b      	ldr	r3, [r3, #4]
 8107748:	69ba      	ldr	r2, [r7, #24]
 810774a:	1ad3      	subs	r3, r2, r3
 810774c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810774e:	683b      	ldr	r3, [r7, #0]
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107756:	d102      	bne.n	810775e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8107758:	2300      	movs	r3, #0
 810775a:	61fb      	str	r3, [r7, #28]
 810775c:	e023      	b.n	81077a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810775e:	687b      	ldr	r3, [r7, #4]
 8107760:	681a      	ldr	r2, [r3, #0]
 8107762:	4b15      	ldr	r3, [pc, #84]	; (81077b8 <xTaskCheckForTimeOut+0xbc>)
 8107764:	681b      	ldr	r3, [r3, #0]
 8107766:	429a      	cmp	r2, r3
 8107768:	d007      	beq.n	810777a <xTaskCheckForTimeOut+0x7e>
 810776a:	687b      	ldr	r3, [r7, #4]
 810776c:	685b      	ldr	r3, [r3, #4]
 810776e:	69ba      	ldr	r2, [r7, #24]
 8107770:	429a      	cmp	r2, r3
 8107772:	d302      	bcc.n	810777a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8107774:	2301      	movs	r3, #1
 8107776:	61fb      	str	r3, [r7, #28]
 8107778:	e015      	b.n	81077a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810777a:	683b      	ldr	r3, [r7, #0]
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	697a      	ldr	r2, [r7, #20]
 8107780:	429a      	cmp	r2, r3
 8107782:	d20b      	bcs.n	810779c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8107784:	683b      	ldr	r3, [r7, #0]
 8107786:	681a      	ldr	r2, [r3, #0]
 8107788:	697b      	ldr	r3, [r7, #20]
 810778a:	1ad2      	subs	r2, r2, r3
 810778c:	683b      	ldr	r3, [r7, #0]
 810778e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8107790:	6878      	ldr	r0, [r7, #4]
 8107792:	f7ff ff9d 	bl	81076d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8107796:	2300      	movs	r3, #0
 8107798:	61fb      	str	r3, [r7, #28]
 810779a:	e004      	b.n	81077a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810779c:	683b      	ldr	r3, [r7, #0]
 810779e:	2200      	movs	r2, #0
 81077a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 81077a2:	2301      	movs	r3, #1
 81077a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 81077a6:	f7fe fd1f 	bl	81061e8 <vPortExitCritical>

	return xReturn;
 81077aa:	69fb      	ldr	r3, [r7, #28]
}
 81077ac:	4618      	mov	r0, r3
 81077ae:	3720      	adds	r7, #32
 81077b0:	46bd      	mov	sp, r7
 81077b2:	bd80      	pop	{r7, pc}
 81077b4:	10004848 	.word	0x10004848
 81077b8:	1000485c 	.word	0x1000485c

081077bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 81077bc:	b480      	push	{r7}
 81077be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 81077c0:	4b03      	ldr	r3, [pc, #12]	; (81077d0 <vTaskMissedYield+0x14>)
 81077c2:	2201      	movs	r2, #1
 81077c4:	601a      	str	r2, [r3, #0]
}
 81077c6:	bf00      	nop
 81077c8:	46bd      	mov	sp, r7
 81077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077ce:	4770      	bx	lr
 81077d0:	10004858 	.word	0x10004858

081077d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 81077d4:	b580      	push	{r7, lr}
 81077d6:	b082      	sub	sp, #8
 81077d8:	af00      	add	r7, sp, #0
 81077da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 81077dc:	f000 f852 	bl	8107884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 81077e0:	4b06      	ldr	r3, [pc, #24]	; (81077fc <prvIdleTask+0x28>)
 81077e2:	681b      	ldr	r3, [r3, #0]
 81077e4:	2b01      	cmp	r3, #1
 81077e6:	d9f9      	bls.n	81077dc <prvIdleTask+0x8>
			{
				taskYIELD();
 81077e8:	4b05      	ldr	r3, [pc, #20]	; (8107800 <prvIdleTask+0x2c>)
 81077ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81077ee:	601a      	str	r2, [r3, #0]
 81077f0:	f3bf 8f4f 	dsb	sy
 81077f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 81077f8:	e7f0      	b.n	81077dc <prvIdleTask+0x8>
 81077fa:	bf00      	nop
 81077fc:	10004374 	.word	0x10004374
 8107800:	e000ed04 	.word	0xe000ed04

08107804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8107804:	b580      	push	{r7, lr}
 8107806:	b082      	sub	sp, #8
 8107808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810780a:	2300      	movs	r3, #0
 810780c:	607b      	str	r3, [r7, #4]
 810780e:	e00c      	b.n	810782a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8107810:	687a      	ldr	r2, [r7, #4]
 8107812:	4613      	mov	r3, r2
 8107814:	009b      	lsls	r3, r3, #2
 8107816:	4413      	add	r3, r2
 8107818:	009b      	lsls	r3, r3, #2
 810781a:	4a12      	ldr	r2, [pc, #72]	; (8107864 <prvInitialiseTaskLists+0x60>)
 810781c:	4413      	add	r3, r2
 810781e:	4618      	mov	r0, r3
 8107820:	f7fe fad6 	bl	8105dd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8107824:	687b      	ldr	r3, [r7, #4]
 8107826:	3301      	adds	r3, #1
 8107828:	607b      	str	r3, [r7, #4]
 810782a:	687b      	ldr	r3, [r7, #4]
 810782c:	2b37      	cmp	r3, #55	; 0x37
 810782e:	d9ef      	bls.n	8107810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8107830:	480d      	ldr	r0, [pc, #52]	; (8107868 <prvInitialiseTaskLists+0x64>)
 8107832:	f7fe facd 	bl	8105dd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8107836:	480d      	ldr	r0, [pc, #52]	; (810786c <prvInitialiseTaskLists+0x68>)
 8107838:	f7fe faca 	bl	8105dd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810783c:	480c      	ldr	r0, [pc, #48]	; (8107870 <prvInitialiseTaskLists+0x6c>)
 810783e:	f7fe fac7 	bl	8105dd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8107842:	480c      	ldr	r0, [pc, #48]	; (8107874 <prvInitialiseTaskLists+0x70>)
 8107844:	f7fe fac4 	bl	8105dd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8107848:	480b      	ldr	r0, [pc, #44]	; (8107878 <prvInitialiseTaskLists+0x74>)
 810784a:	f7fe fac1 	bl	8105dd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810784e:	4b0b      	ldr	r3, [pc, #44]	; (810787c <prvInitialiseTaskLists+0x78>)
 8107850:	4a05      	ldr	r2, [pc, #20]	; (8107868 <prvInitialiseTaskLists+0x64>)
 8107852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8107854:	4b0a      	ldr	r3, [pc, #40]	; (8107880 <prvInitialiseTaskLists+0x7c>)
 8107856:	4a05      	ldr	r2, [pc, #20]	; (810786c <prvInitialiseTaskLists+0x68>)
 8107858:	601a      	str	r2, [r3, #0]
}
 810785a:	bf00      	nop
 810785c:	3708      	adds	r7, #8
 810785e:	46bd      	mov	sp, r7
 8107860:	bd80      	pop	{r7, pc}
 8107862:	bf00      	nop
 8107864:	10004374 	.word	0x10004374
 8107868:	100047d4 	.word	0x100047d4
 810786c:	100047e8 	.word	0x100047e8
 8107870:	10004804 	.word	0x10004804
 8107874:	10004818 	.word	0x10004818
 8107878:	10004830 	.word	0x10004830
 810787c:	100047fc 	.word	0x100047fc
 8107880:	10004800 	.word	0x10004800

08107884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8107884:	b580      	push	{r7, lr}
 8107886:	b082      	sub	sp, #8
 8107888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810788a:	e019      	b.n	81078c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810788c:	f7fe fc7e 	bl	810618c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107890:	4b0f      	ldr	r3, [pc, #60]	; (81078d0 <prvCheckTasksWaitingTermination+0x4c>)
 8107892:	68db      	ldr	r3, [r3, #12]
 8107894:	68db      	ldr	r3, [r3, #12]
 8107896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8107898:	687b      	ldr	r3, [r7, #4]
 810789a:	3304      	adds	r3, #4
 810789c:	4618      	mov	r0, r3
 810789e:	f7fe fb21 	bl	8105ee4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 81078a2:	4b0c      	ldr	r3, [pc, #48]	; (81078d4 <prvCheckTasksWaitingTermination+0x50>)
 81078a4:	681b      	ldr	r3, [r3, #0]
 81078a6:	3b01      	subs	r3, #1
 81078a8:	4a0a      	ldr	r2, [pc, #40]	; (81078d4 <prvCheckTasksWaitingTermination+0x50>)
 81078aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 81078ac:	4b0a      	ldr	r3, [pc, #40]	; (81078d8 <prvCheckTasksWaitingTermination+0x54>)
 81078ae:	681b      	ldr	r3, [r3, #0]
 81078b0:	3b01      	subs	r3, #1
 81078b2:	4a09      	ldr	r2, [pc, #36]	; (81078d8 <prvCheckTasksWaitingTermination+0x54>)
 81078b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 81078b6:	f7fe fc97 	bl	81061e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 81078ba:	6878      	ldr	r0, [r7, #4]
 81078bc:	f000 f80e 	bl	81078dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 81078c0:	4b05      	ldr	r3, [pc, #20]	; (81078d8 <prvCheckTasksWaitingTermination+0x54>)
 81078c2:	681b      	ldr	r3, [r3, #0]
 81078c4:	2b00      	cmp	r3, #0
 81078c6:	d1e1      	bne.n	810788c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 81078c8:	bf00      	nop
 81078ca:	3708      	adds	r7, #8
 81078cc:	46bd      	mov	sp, r7
 81078ce:	bd80      	pop	{r7, pc}
 81078d0:	10004818 	.word	0x10004818
 81078d4:	10004844 	.word	0x10004844
 81078d8:	1000482c 	.word	0x1000482c

081078dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 81078dc:	b580      	push	{r7, lr}
 81078de:	b084      	sub	sp, #16
 81078e0:	af00      	add	r7, sp, #0
 81078e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 81078e4:	687b      	ldr	r3, [r7, #4]
 81078e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 81078ea:	2b00      	cmp	r3, #0
 81078ec:	d108      	bne.n	8107900 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 81078ee:	687b      	ldr	r3, [r7, #4]
 81078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81078f2:	4618      	mov	r0, r3
 81078f4:	f7fe f958 	bl	8105ba8 <vPortFree>
				vPortFree( pxTCB );
 81078f8:	6878      	ldr	r0, [r7, #4]
 81078fa:	f7fe f955 	bl	8105ba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 81078fe:	e017      	b.n	8107930 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8107900:	687b      	ldr	r3, [r7, #4]
 8107902:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8107906:	2b01      	cmp	r3, #1
 8107908:	d103      	bne.n	8107912 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810790a:	6878      	ldr	r0, [r7, #4]
 810790c:	f7fe f94c 	bl	8105ba8 <vPortFree>
	}
 8107910:	e00e      	b.n	8107930 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8107912:	687b      	ldr	r3, [r7, #4]
 8107914:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8107918:	2b02      	cmp	r3, #2
 810791a:	d009      	beq.n	8107930 <prvDeleteTCB+0x54>
 810791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107920:	f383 8811 	msr	BASEPRI, r3
 8107924:	f3bf 8f6f 	isb	sy
 8107928:	f3bf 8f4f 	dsb	sy
 810792c:	60fb      	str	r3, [r7, #12]
 810792e:	e7fe      	b.n	810792e <prvDeleteTCB+0x52>
	}
 8107930:	bf00      	nop
 8107932:	3710      	adds	r7, #16
 8107934:	46bd      	mov	sp, r7
 8107936:	bd80      	pop	{r7, pc}

08107938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8107938:	b480      	push	{r7}
 810793a:	b083      	sub	sp, #12
 810793c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810793e:	4b0c      	ldr	r3, [pc, #48]	; (8107970 <prvResetNextTaskUnblockTime+0x38>)
 8107940:	681b      	ldr	r3, [r3, #0]
 8107942:	681b      	ldr	r3, [r3, #0]
 8107944:	2b00      	cmp	r3, #0
 8107946:	d104      	bne.n	8107952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8107948:	4b0a      	ldr	r3, [pc, #40]	; (8107974 <prvResetNextTaskUnblockTime+0x3c>)
 810794a:	f04f 32ff 	mov.w	r2, #4294967295
 810794e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8107950:	e008      	b.n	8107964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107952:	4b07      	ldr	r3, [pc, #28]	; (8107970 <prvResetNextTaskUnblockTime+0x38>)
 8107954:	681b      	ldr	r3, [r3, #0]
 8107956:	68db      	ldr	r3, [r3, #12]
 8107958:	68db      	ldr	r3, [r3, #12]
 810795a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810795c:	687b      	ldr	r3, [r7, #4]
 810795e:	685b      	ldr	r3, [r3, #4]
 8107960:	4a04      	ldr	r2, [pc, #16]	; (8107974 <prvResetNextTaskUnblockTime+0x3c>)
 8107962:	6013      	str	r3, [r2, #0]
}
 8107964:	bf00      	nop
 8107966:	370c      	adds	r7, #12
 8107968:	46bd      	mov	sp, r7
 810796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810796e:	4770      	bx	lr
 8107970:	100047fc 	.word	0x100047fc
 8107974:	10004864 	.word	0x10004864

08107978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8107978:	b480      	push	{r7}
 810797a:	b083      	sub	sp, #12
 810797c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810797e:	4b0b      	ldr	r3, [pc, #44]	; (81079ac <xTaskGetSchedulerState+0x34>)
 8107980:	681b      	ldr	r3, [r3, #0]
 8107982:	2b00      	cmp	r3, #0
 8107984:	d102      	bne.n	810798c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8107986:	2301      	movs	r3, #1
 8107988:	607b      	str	r3, [r7, #4]
 810798a:	e008      	b.n	810799e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810798c:	4b08      	ldr	r3, [pc, #32]	; (81079b0 <xTaskGetSchedulerState+0x38>)
 810798e:	681b      	ldr	r3, [r3, #0]
 8107990:	2b00      	cmp	r3, #0
 8107992:	d102      	bne.n	810799a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8107994:	2302      	movs	r3, #2
 8107996:	607b      	str	r3, [r7, #4]
 8107998:	e001      	b.n	810799e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810799a:	2300      	movs	r3, #0
 810799c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810799e:	687b      	ldr	r3, [r7, #4]
	}
 81079a0:	4618      	mov	r0, r3
 81079a2:	370c      	adds	r7, #12
 81079a4:	46bd      	mov	sp, r7
 81079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079aa:	4770      	bx	lr
 81079ac:	10004850 	.word	0x10004850
 81079b0:	1000486c 	.word	0x1000486c

081079b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 81079b4:	b580      	push	{r7, lr}
 81079b6:	b086      	sub	sp, #24
 81079b8:	af00      	add	r7, sp, #0
 81079ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 81079bc:	687b      	ldr	r3, [r7, #4]
 81079be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 81079c0:	2300      	movs	r3, #0
 81079c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 81079c4:	687b      	ldr	r3, [r7, #4]
 81079c6:	2b00      	cmp	r3, #0
 81079c8:	d054      	beq.n	8107a74 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 81079ca:	4b2d      	ldr	r3, [pc, #180]	; (8107a80 <xTaskPriorityDisinherit+0xcc>)
 81079cc:	681b      	ldr	r3, [r3, #0]
 81079ce:	693a      	ldr	r2, [r7, #16]
 81079d0:	429a      	cmp	r2, r3
 81079d2:	d009      	beq.n	81079e8 <xTaskPriorityDisinherit+0x34>
 81079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81079d8:	f383 8811 	msr	BASEPRI, r3
 81079dc:	f3bf 8f6f 	isb	sy
 81079e0:	f3bf 8f4f 	dsb	sy
 81079e4:	60fb      	str	r3, [r7, #12]
 81079e6:	e7fe      	b.n	81079e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 81079e8:	693b      	ldr	r3, [r7, #16]
 81079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81079ec:	2b00      	cmp	r3, #0
 81079ee:	d109      	bne.n	8107a04 <xTaskPriorityDisinherit+0x50>
 81079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81079f4:	f383 8811 	msr	BASEPRI, r3
 81079f8:	f3bf 8f6f 	isb	sy
 81079fc:	f3bf 8f4f 	dsb	sy
 8107a00:	60bb      	str	r3, [r7, #8]
 8107a02:	e7fe      	b.n	8107a02 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8107a04:	693b      	ldr	r3, [r7, #16]
 8107a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107a08:	1e5a      	subs	r2, r3, #1
 8107a0a:	693b      	ldr	r3, [r7, #16]
 8107a0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8107a0e:	693b      	ldr	r3, [r7, #16]
 8107a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a12:	693b      	ldr	r3, [r7, #16]
 8107a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8107a16:	429a      	cmp	r2, r3
 8107a18:	d02c      	beq.n	8107a74 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8107a1a:	693b      	ldr	r3, [r7, #16]
 8107a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107a1e:	2b00      	cmp	r3, #0
 8107a20:	d128      	bne.n	8107a74 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107a22:	693b      	ldr	r3, [r7, #16]
 8107a24:	3304      	adds	r3, #4
 8107a26:	4618      	mov	r0, r3
 8107a28:	f7fe fa5c 	bl	8105ee4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8107a2c:	693b      	ldr	r3, [r7, #16]
 8107a2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107a30:	693b      	ldr	r3, [r7, #16]
 8107a32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107a34:	693b      	ldr	r3, [r7, #16]
 8107a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8107a3c:	693b      	ldr	r3, [r7, #16]
 8107a3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8107a40:	693b      	ldr	r3, [r7, #16]
 8107a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a44:	4b0f      	ldr	r3, [pc, #60]	; (8107a84 <xTaskPriorityDisinherit+0xd0>)
 8107a46:	681b      	ldr	r3, [r3, #0]
 8107a48:	429a      	cmp	r2, r3
 8107a4a:	d903      	bls.n	8107a54 <xTaskPriorityDisinherit+0xa0>
 8107a4c:	693b      	ldr	r3, [r7, #16]
 8107a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107a50:	4a0c      	ldr	r2, [pc, #48]	; (8107a84 <xTaskPriorityDisinherit+0xd0>)
 8107a52:	6013      	str	r3, [r2, #0]
 8107a54:	693b      	ldr	r3, [r7, #16]
 8107a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107a58:	4613      	mov	r3, r2
 8107a5a:	009b      	lsls	r3, r3, #2
 8107a5c:	4413      	add	r3, r2
 8107a5e:	009b      	lsls	r3, r3, #2
 8107a60:	4a09      	ldr	r2, [pc, #36]	; (8107a88 <xTaskPriorityDisinherit+0xd4>)
 8107a62:	441a      	add	r2, r3
 8107a64:	693b      	ldr	r3, [r7, #16]
 8107a66:	3304      	adds	r3, #4
 8107a68:	4619      	mov	r1, r3
 8107a6a:	4610      	mov	r0, r2
 8107a6c:	f7fe f9dd 	bl	8105e2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8107a70:	2301      	movs	r3, #1
 8107a72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8107a74:	697b      	ldr	r3, [r7, #20]
	}
 8107a76:	4618      	mov	r0, r3
 8107a78:	3718      	adds	r7, #24
 8107a7a:	46bd      	mov	sp, r7
 8107a7c:	bd80      	pop	{r7, pc}
 8107a7e:	bf00      	nop
 8107a80:	10004370 	.word	0x10004370
 8107a84:	1000484c 	.word	0x1000484c
 8107a88:	10004374 	.word	0x10004374

08107a8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8107a8c:	b580      	push	{r7, lr}
 8107a8e:	b084      	sub	sp, #16
 8107a90:	af00      	add	r7, sp, #0
 8107a92:	6078      	str	r0, [r7, #4]
 8107a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8107a96:	4b21      	ldr	r3, [pc, #132]	; (8107b1c <prvAddCurrentTaskToDelayedList+0x90>)
 8107a98:	681b      	ldr	r3, [r3, #0]
 8107a9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8107a9c:	4b20      	ldr	r3, [pc, #128]	; (8107b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8107a9e:	681b      	ldr	r3, [r3, #0]
 8107aa0:	3304      	adds	r3, #4
 8107aa2:	4618      	mov	r0, r3
 8107aa4:	f7fe fa1e 	bl	8105ee4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107aae:	d10a      	bne.n	8107ac6 <prvAddCurrentTaskToDelayedList+0x3a>
 8107ab0:	683b      	ldr	r3, [r7, #0]
 8107ab2:	2b00      	cmp	r3, #0
 8107ab4:	d007      	beq.n	8107ac6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8107ab6:	4b1a      	ldr	r3, [pc, #104]	; (8107b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8107ab8:	681b      	ldr	r3, [r3, #0]
 8107aba:	3304      	adds	r3, #4
 8107abc:	4619      	mov	r1, r3
 8107abe:	4819      	ldr	r0, [pc, #100]	; (8107b24 <prvAddCurrentTaskToDelayedList+0x98>)
 8107ac0:	f7fe f9b3 	bl	8105e2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8107ac4:	e026      	b.n	8107b14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8107ac6:	68fa      	ldr	r2, [r7, #12]
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	4413      	add	r3, r2
 8107acc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8107ace:	4b14      	ldr	r3, [pc, #80]	; (8107b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8107ad0:	681b      	ldr	r3, [r3, #0]
 8107ad2:	68ba      	ldr	r2, [r7, #8]
 8107ad4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8107ad6:	68ba      	ldr	r2, [r7, #8]
 8107ad8:	68fb      	ldr	r3, [r7, #12]
 8107ada:	429a      	cmp	r2, r3
 8107adc:	d209      	bcs.n	8107af2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8107ade:	4b12      	ldr	r3, [pc, #72]	; (8107b28 <prvAddCurrentTaskToDelayedList+0x9c>)
 8107ae0:	681a      	ldr	r2, [r3, #0]
 8107ae2:	4b0f      	ldr	r3, [pc, #60]	; (8107b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	3304      	adds	r3, #4
 8107ae8:	4619      	mov	r1, r3
 8107aea:	4610      	mov	r0, r2
 8107aec:	f7fe f9c1 	bl	8105e72 <vListInsert>
}
 8107af0:	e010      	b.n	8107b14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8107af2:	4b0e      	ldr	r3, [pc, #56]	; (8107b2c <prvAddCurrentTaskToDelayedList+0xa0>)
 8107af4:	681a      	ldr	r2, [r3, #0]
 8107af6:	4b0a      	ldr	r3, [pc, #40]	; (8107b20 <prvAddCurrentTaskToDelayedList+0x94>)
 8107af8:	681b      	ldr	r3, [r3, #0]
 8107afa:	3304      	adds	r3, #4
 8107afc:	4619      	mov	r1, r3
 8107afe:	4610      	mov	r0, r2
 8107b00:	f7fe f9b7 	bl	8105e72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8107b04:	4b0a      	ldr	r3, [pc, #40]	; (8107b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8107b06:	681b      	ldr	r3, [r3, #0]
 8107b08:	68ba      	ldr	r2, [r7, #8]
 8107b0a:	429a      	cmp	r2, r3
 8107b0c:	d202      	bcs.n	8107b14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8107b0e:	4a08      	ldr	r2, [pc, #32]	; (8107b30 <prvAddCurrentTaskToDelayedList+0xa4>)
 8107b10:	68bb      	ldr	r3, [r7, #8]
 8107b12:	6013      	str	r3, [r2, #0]
}
 8107b14:	bf00      	nop
 8107b16:	3710      	adds	r7, #16
 8107b18:	46bd      	mov	sp, r7
 8107b1a:	bd80      	pop	{r7, pc}
 8107b1c:	10004848 	.word	0x10004848
 8107b20:	10004370 	.word	0x10004370
 8107b24:	10004830 	.word	0x10004830
 8107b28:	10004800 	.word	0x10004800
 8107b2c:	100047fc 	.word	0x100047fc
 8107b30:	10004864 	.word	0x10004864

08107b34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8107b34:	b580      	push	{r7, lr}
 8107b36:	b08a      	sub	sp, #40	; 0x28
 8107b38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8107b3a:	2300      	movs	r3, #0
 8107b3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8107b3e:	f000 faff 	bl	8108140 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8107b42:	4b1c      	ldr	r3, [pc, #112]	; (8107bb4 <xTimerCreateTimerTask+0x80>)
 8107b44:	681b      	ldr	r3, [r3, #0]
 8107b46:	2b00      	cmp	r3, #0
 8107b48:	d021      	beq.n	8107b8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8107b4a:	2300      	movs	r3, #0
 8107b4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8107b4e:	2300      	movs	r3, #0
 8107b50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8107b52:	1d3a      	adds	r2, r7, #4
 8107b54:	f107 0108 	add.w	r1, r7, #8
 8107b58:	f107 030c 	add.w	r3, r7, #12
 8107b5c:	4618      	mov	r0, r3
 8107b5e:	f7fd ff47 	bl	81059f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8107b62:	6879      	ldr	r1, [r7, #4]
 8107b64:	68bb      	ldr	r3, [r7, #8]
 8107b66:	68fa      	ldr	r2, [r7, #12]
 8107b68:	9202      	str	r2, [sp, #8]
 8107b6a:	9301      	str	r3, [sp, #4]
 8107b6c:	2302      	movs	r3, #2
 8107b6e:	9300      	str	r3, [sp, #0]
 8107b70:	2300      	movs	r3, #0
 8107b72:	460a      	mov	r2, r1
 8107b74:	4910      	ldr	r1, [pc, #64]	; (8107bb8 <xTimerCreateTimerTask+0x84>)
 8107b76:	4811      	ldr	r0, [pc, #68]	; (8107bbc <xTimerCreateTimerTask+0x88>)
 8107b78:	f7ff f8f6 	bl	8106d68 <xTaskCreateStatic>
 8107b7c:	4602      	mov	r2, r0
 8107b7e:	4b10      	ldr	r3, [pc, #64]	; (8107bc0 <xTimerCreateTimerTask+0x8c>)
 8107b80:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8107b82:	4b0f      	ldr	r3, [pc, #60]	; (8107bc0 <xTimerCreateTimerTask+0x8c>)
 8107b84:	681b      	ldr	r3, [r3, #0]
 8107b86:	2b00      	cmp	r3, #0
 8107b88:	d001      	beq.n	8107b8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8107b8a:	2301      	movs	r3, #1
 8107b8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8107b8e:	697b      	ldr	r3, [r7, #20]
 8107b90:	2b00      	cmp	r3, #0
 8107b92:	d109      	bne.n	8107ba8 <xTimerCreateTimerTask+0x74>
 8107b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107b98:	f383 8811 	msr	BASEPRI, r3
 8107b9c:	f3bf 8f6f 	isb	sy
 8107ba0:	f3bf 8f4f 	dsb	sy
 8107ba4:	613b      	str	r3, [r7, #16]
 8107ba6:	e7fe      	b.n	8107ba6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8107ba8:	697b      	ldr	r3, [r7, #20]
}
 8107baa:	4618      	mov	r0, r3
 8107bac:	3718      	adds	r7, #24
 8107bae:	46bd      	mov	sp, r7
 8107bb0:	bd80      	pop	{r7, pc}
 8107bb2:	bf00      	nop
 8107bb4:	100048a0 	.word	0x100048a0
 8107bb8:	08108a8c 	.word	0x08108a8c
 8107bbc:	08107cf5 	.word	0x08107cf5
 8107bc0:	100048a4 	.word	0x100048a4

08107bc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8107bc4:	b580      	push	{r7, lr}
 8107bc6:	b08a      	sub	sp, #40	; 0x28
 8107bc8:	af00      	add	r7, sp, #0
 8107bca:	60f8      	str	r0, [r7, #12]
 8107bcc:	60b9      	str	r1, [r7, #8]
 8107bce:	607a      	str	r2, [r7, #4]
 8107bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8107bd2:	2300      	movs	r3, #0
 8107bd4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8107bd6:	68fb      	ldr	r3, [r7, #12]
 8107bd8:	2b00      	cmp	r3, #0
 8107bda:	d109      	bne.n	8107bf0 <xTimerGenericCommand+0x2c>
 8107bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107be0:	f383 8811 	msr	BASEPRI, r3
 8107be4:	f3bf 8f6f 	isb	sy
 8107be8:	f3bf 8f4f 	dsb	sy
 8107bec:	623b      	str	r3, [r7, #32]
 8107bee:	e7fe      	b.n	8107bee <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8107bf0:	4b19      	ldr	r3, [pc, #100]	; (8107c58 <xTimerGenericCommand+0x94>)
 8107bf2:	681b      	ldr	r3, [r3, #0]
 8107bf4:	2b00      	cmp	r3, #0
 8107bf6:	d02a      	beq.n	8107c4e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8107bf8:	68bb      	ldr	r3, [r7, #8]
 8107bfa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8107c00:	68fb      	ldr	r3, [r7, #12]
 8107c02:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8107c04:	68bb      	ldr	r3, [r7, #8]
 8107c06:	2b05      	cmp	r3, #5
 8107c08:	dc18      	bgt.n	8107c3c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8107c0a:	f7ff feb5 	bl	8107978 <xTaskGetSchedulerState>
 8107c0e:	4603      	mov	r3, r0
 8107c10:	2b02      	cmp	r3, #2
 8107c12:	d109      	bne.n	8107c28 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8107c14:	4b10      	ldr	r3, [pc, #64]	; (8107c58 <xTimerGenericCommand+0x94>)
 8107c16:	6818      	ldr	r0, [r3, #0]
 8107c18:	f107 0110 	add.w	r1, r7, #16
 8107c1c:	2300      	movs	r3, #0
 8107c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8107c20:	f7fe fccc 	bl	81065bc <xQueueGenericSend>
 8107c24:	6278      	str	r0, [r7, #36]	; 0x24
 8107c26:	e012      	b.n	8107c4e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8107c28:	4b0b      	ldr	r3, [pc, #44]	; (8107c58 <xTimerGenericCommand+0x94>)
 8107c2a:	6818      	ldr	r0, [r3, #0]
 8107c2c:	f107 0110 	add.w	r1, r7, #16
 8107c30:	2300      	movs	r3, #0
 8107c32:	2200      	movs	r2, #0
 8107c34:	f7fe fcc2 	bl	81065bc <xQueueGenericSend>
 8107c38:	6278      	str	r0, [r7, #36]	; 0x24
 8107c3a:	e008      	b.n	8107c4e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8107c3c:	4b06      	ldr	r3, [pc, #24]	; (8107c58 <xTimerGenericCommand+0x94>)
 8107c3e:	6818      	ldr	r0, [r3, #0]
 8107c40:	f107 0110 	add.w	r1, r7, #16
 8107c44:	2300      	movs	r3, #0
 8107c46:	683a      	ldr	r2, [r7, #0]
 8107c48:	f7fe fdb2 	bl	81067b0 <xQueueGenericSendFromISR>
 8107c4c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8107c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8107c50:	4618      	mov	r0, r3
 8107c52:	3728      	adds	r7, #40	; 0x28
 8107c54:	46bd      	mov	sp, r7
 8107c56:	bd80      	pop	{r7, pc}
 8107c58:	100048a0 	.word	0x100048a0

08107c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8107c5c:	b580      	push	{r7, lr}
 8107c5e:	b088      	sub	sp, #32
 8107c60:	af02      	add	r7, sp, #8
 8107c62:	6078      	str	r0, [r7, #4]
 8107c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8107c66:	4b22      	ldr	r3, [pc, #136]	; (8107cf0 <prvProcessExpiredTimer+0x94>)
 8107c68:	681b      	ldr	r3, [r3, #0]
 8107c6a:	68db      	ldr	r3, [r3, #12]
 8107c6c:	68db      	ldr	r3, [r3, #12]
 8107c6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8107c70:	697b      	ldr	r3, [r7, #20]
 8107c72:	3304      	adds	r3, #4
 8107c74:	4618      	mov	r0, r3
 8107c76:	f7fe f935 	bl	8105ee4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107c7a:	697b      	ldr	r3, [r7, #20]
 8107c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107c80:	f003 0304 	and.w	r3, r3, #4
 8107c84:	2b00      	cmp	r3, #0
 8107c86:	d021      	beq.n	8107ccc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8107c88:	697b      	ldr	r3, [r7, #20]
 8107c8a:	699a      	ldr	r2, [r3, #24]
 8107c8c:	687b      	ldr	r3, [r7, #4]
 8107c8e:	18d1      	adds	r1, r2, r3
 8107c90:	687b      	ldr	r3, [r7, #4]
 8107c92:	683a      	ldr	r2, [r7, #0]
 8107c94:	6978      	ldr	r0, [r7, #20]
 8107c96:	f000 f8d1 	bl	8107e3c <prvInsertTimerInActiveList>
 8107c9a:	4603      	mov	r3, r0
 8107c9c:	2b00      	cmp	r3, #0
 8107c9e:	d01e      	beq.n	8107cde <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8107ca0:	2300      	movs	r3, #0
 8107ca2:	9300      	str	r3, [sp, #0]
 8107ca4:	2300      	movs	r3, #0
 8107ca6:	687a      	ldr	r2, [r7, #4]
 8107ca8:	2100      	movs	r1, #0
 8107caa:	6978      	ldr	r0, [r7, #20]
 8107cac:	f7ff ff8a 	bl	8107bc4 <xTimerGenericCommand>
 8107cb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8107cb2:	693b      	ldr	r3, [r7, #16]
 8107cb4:	2b00      	cmp	r3, #0
 8107cb6:	d112      	bne.n	8107cde <prvProcessExpiredTimer+0x82>
 8107cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107cbc:	f383 8811 	msr	BASEPRI, r3
 8107cc0:	f3bf 8f6f 	isb	sy
 8107cc4:	f3bf 8f4f 	dsb	sy
 8107cc8:	60fb      	str	r3, [r7, #12]
 8107cca:	e7fe      	b.n	8107cca <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107ccc:	697b      	ldr	r3, [r7, #20]
 8107cce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107cd2:	f023 0301 	bic.w	r3, r3, #1
 8107cd6:	b2da      	uxtb	r2, r3
 8107cd8:	697b      	ldr	r3, [r7, #20]
 8107cda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8107cde:	697b      	ldr	r3, [r7, #20]
 8107ce0:	6a1b      	ldr	r3, [r3, #32]
 8107ce2:	6978      	ldr	r0, [r7, #20]
 8107ce4:	4798      	blx	r3
}
 8107ce6:	bf00      	nop
 8107ce8:	3718      	adds	r7, #24
 8107cea:	46bd      	mov	sp, r7
 8107cec:	bd80      	pop	{r7, pc}
 8107cee:	bf00      	nop
 8107cf0:	10004898 	.word	0x10004898

08107cf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8107cf4:	b580      	push	{r7, lr}
 8107cf6:	b084      	sub	sp, #16
 8107cf8:	af00      	add	r7, sp, #0
 8107cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8107cfc:	f107 0308 	add.w	r3, r7, #8
 8107d00:	4618      	mov	r0, r3
 8107d02:	f000 f857 	bl	8107db4 <prvGetNextExpireTime>
 8107d06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8107d08:	68bb      	ldr	r3, [r7, #8]
 8107d0a:	4619      	mov	r1, r3
 8107d0c:	68f8      	ldr	r0, [r7, #12]
 8107d0e:	f000 f803 	bl	8107d18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8107d12:	f000 f8d5 	bl	8107ec0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8107d16:	e7f1      	b.n	8107cfc <prvTimerTask+0x8>

08107d18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8107d18:	b580      	push	{r7, lr}
 8107d1a:	b084      	sub	sp, #16
 8107d1c:	af00      	add	r7, sp, #0
 8107d1e:	6078      	str	r0, [r7, #4]
 8107d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8107d22:	f7ff fa57 	bl	81071d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8107d26:	f107 0308 	add.w	r3, r7, #8
 8107d2a:	4618      	mov	r0, r3
 8107d2c:	f000 f866 	bl	8107dfc <prvSampleTimeNow>
 8107d30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8107d32:	68bb      	ldr	r3, [r7, #8]
 8107d34:	2b00      	cmp	r3, #0
 8107d36:	d130      	bne.n	8107d9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8107d38:	683b      	ldr	r3, [r7, #0]
 8107d3a:	2b00      	cmp	r3, #0
 8107d3c:	d10a      	bne.n	8107d54 <prvProcessTimerOrBlockTask+0x3c>
 8107d3e:	687a      	ldr	r2, [r7, #4]
 8107d40:	68fb      	ldr	r3, [r7, #12]
 8107d42:	429a      	cmp	r2, r3
 8107d44:	d806      	bhi.n	8107d54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8107d46:	f7ff fa53 	bl	81071f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8107d4a:	68f9      	ldr	r1, [r7, #12]
 8107d4c:	6878      	ldr	r0, [r7, #4]
 8107d4e:	f7ff ff85 	bl	8107c5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8107d52:	e024      	b.n	8107d9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8107d54:	683b      	ldr	r3, [r7, #0]
 8107d56:	2b00      	cmp	r3, #0
 8107d58:	d008      	beq.n	8107d6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8107d5a:	4b13      	ldr	r3, [pc, #76]	; (8107da8 <prvProcessTimerOrBlockTask+0x90>)
 8107d5c:	681b      	ldr	r3, [r3, #0]
 8107d5e:	681b      	ldr	r3, [r3, #0]
 8107d60:	2b00      	cmp	r3, #0
 8107d62:	d101      	bne.n	8107d68 <prvProcessTimerOrBlockTask+0x50>
 8107d64:	2301      	movs	r3, #1
 8107d66:	e000      	b.n	8107d6a <prvProcessTimerOrBlockTask+0x52>
 8107d68:	2300      	movs	r3, #0
 8107d6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8107d6c:	4b0f      	ldr	r3, [pc, #60]	; (8107dac <prvProcessTimerOrBlockTask+0x94>)
 8107d6e:	6818      	ldr	r0, [r3, #0]
 8107d70:	687a      	ldr	r2, [r7, #4]
 8107d72:	68fb      	ldr	r3, [r7, #12]
 8107d74:	1ad3      	subs	r3, r2, r3
 8107d76:	683a      	ldr	r2, [r7, #0]
 8107d78:	4619      	mov	r1, r3
 8107d7a:	f7fe ffc1 	bl	8106d00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8107d7e:	f7ff fa37 	bl	81071f0 <xTaskResumeAll>
 8107d82:	4603      	mov	r3, r0
 8107d84:	2b00      	cmp	r3, #0
 8107d86:	d10a      	bne.n	8107d9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8107d88:	4b09      	ldr	r3, [pc, #36]	; (8107db0 <prvProcessTimerOrBlockTask+0x98>)
 8107d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8107d8e:	601a      	str	r2, [r3, #0]
 8107d90:	f3bf 8f4f 	dsb	sy
 8107d94:	f3bf 8f6f 	isb	sy
}
 8107d98:	e001      	b.n	8107d9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8107d9a:	f7ff fa29 	bl	81071f0 <xTaskResumeAll>
}
 8107d9e:	bf00      	nop
 8107da0:	3710      	adds	r7, #16
 8107da2:	46bd      	mov	sp, r7
 8107da4:	bd80      	pop	{r7, pc}
 8107da6:	bf00      	nop
 8107da8:	1000489c 	.word	0x1000489c
 8107dac:	100048a0 	.word	0x100048a0
 8107db0:	e000ed04 	.word	0xe000ed04

08107db4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8107db4:	b480      	push	{r7}
 8107db6:	b085      	sub	sp, #20
 8107db8:	af00      	add	r7, sp, #0
 8107dba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8107dbc:	4b0e      	ldr	r3, [pc, #56]	; (8107df8 <prvGetNextExpireTime+0x44>)
 8107dbe:	681b      	ldr	r3, [r3, #0]
 8107dc0:	681b      	ldr	r3, [r3, #0]
 8107dc2:	2b00      	cmp	r3, #0
 8107dc4:	d101      	bne.n	8107dca <prvGetNextExpireTime+0x16>
 8107dc6:	2201      	movs	r2, #1
 8107dc8:	e000      	b.n	8107dcc <prvGetNextExpireTime+0x18>
 8107dca:	2200      	movs	r2, #0
 8107dcc:	687b      	ldr	r3, [r7, #4]
 8107dce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	681b      	ldr	r3, [r3, #0]
 8107dd4:	2b00      	cmp	r3, #0
 8107dd6:	d105      	bne.n	8107de4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8107dd8:	4b07      	ldr	r3, [pc, #28]	; (8107df8 <prvGetNextExpireTime+0x44>)
 8107dda:	681b      	ldr	r3, [r3, #0]
 8107ddc:	68db      	ldr	r3, [r3, #12]
 8107dde:	681b      	ldr	r3, [r3, #0]
 8107de0:	60fb      	str	r3, [r7, #12]
 8107de2:	e001      	b.n	8107de8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8107de4:	2300      	movs	r3, #0
 8107de6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8107de8:	68fb      	ldr	r3, [r7, #12]
}
 8107dea:	4618      	mov	r0, r3
 8107dec:	3714      	adds	r7, #20
 8107dee:	46bd      	mov	sp, r7
 8107df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107df4:	4770      	bx	lr
 8107df6:	bf00      	nop
 8107df8:	10004898 	.word	0x10004898

08107dfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8107dfc:	b580      	push	{r7, lr}
 8107dfe:	b084      	sub	sp, #16
 8107e00:	af00      	add	r7, sp, #0
 8107e02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8107e04:	f7ff fa90 	bl	8107328 <xTaskGetTickCount>
 8107e08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8107e0a:	4b0b      	ldr	r3, [pc, #44]	; (8107e38 <prvSampleTimeNow+0x3c>)
 8107e0c:	681b      	ldr	r3, [r3, #0]
 8107e0e:	68fa      	ldr	r2, [r7, #12]
 8107e10:	429a      	cmp	r2, r3
 8107e12:	d205      	bcs.n	8107e20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8107e14:	f000 f930 	bl	8108078 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8107e18:	687b      	ldr	r3, [r7, #4]
 8107e1a:	2201      	movs	r2, #1
 8107e1c:	601a      	str	r2, [r3, #0]
 8107e1e:	e002      	b.n	8107e26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8107e20:	687b      	ldr	r3, [r7, #4]
 8107e22:	2200      	movs	r2, #0
 8107e24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8107e26:	4a04      	ldr	r2, [pc, #16]	; (8107e38 <prvSampleTimeNow+0x3c>)
 8107e28:	68fb      	ldr	r3, [r7, #12]
 8107e2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8107e2c:	68fb      	ldr	r3, [r7, #12]
}
 8107e2e:	4618      	mov	r0, r3
 8107e30:	3710      	adds	r7, #16
 8107e32:	46bd      	mov	sp, r7
 8107e34:	bd80      	pop	{r7, pc}
 8107e36:	bf00      	nop
 8107e38:	100048a8 	.word	0x100048a8

08107e3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8107e3c:	b580      	push	{r7, lr}
 8107e3e:	b086      	sub	sp, #24
 8107e40:	af00      	add	r7, sp, #0
 8107e42:	60f8      	str	r0, [r7, #12]
 8107e44:	60b9      	str	r1, [r7, #8]
 8107e46:	607a      	str	r2, [r7, #4]
 8107e48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8107e4a:	2300      	movs	r3, #0
 8107e4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8107e4e:	68fb      	ldr	r3, [r7, #12]
 8107e50:	68ba      	ldr	r2, [r7, #8]
 8107e52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8107e54:	68fb      	ldr	r3, [r7, #12]
 8107e56:	68fa      	ldr	r2, [r7, #12]
 8107e58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8107e5a:	68ba      	ldr	r2, [r7, #8]
 8107e5c:	687b      	ldr	r3, [r7, #4]
 8107e5e:	429a      	cmp	r2, r3
 8107e60:	d812      	bhi.n	8107e88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8107e62:	687a      	ldr	r2, [r7, #4]
 8107e64:	683b      	ldr	r3, [r7, #0]
 8107e66:	1ad2      	subs	r2, r2, r3
 8107e68:	68fb      	ldr	r3, [r7, #12]
 8107e6a:	699b      	ldr	r3, [r3, #24]
 8107e6c:	429a      	cmp	r2, r3
 8107e6e:	d302      	bcc.n	8107e76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8107e70:	2301      	movs	r3, #1
 8107e72:	617b      	str	r3, [r7, #20]
 8107e74:	e01b      	b.n	8107eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8107e76:	4b10      	ldr	r3, [pc, #64]	; (8107eb8 <prvInsertTimerInActiveList+0x7c>)
 8107e78:	681a      	ldr	r2, [r3, #0]
 8107e7a:	68fb      	ldr	r3, [r7, #12]
 8107e7c:	3304      	adds	r3, #4
 8107e7e:	4619      	mov	r1, r3
 8107e80:	4610      	mov	r0, r2
 8107e82:	f7fd fff6 	bl	8105e72 <vListInsert>
 8107e86:	e012      	b.n	8107eae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8107e88:	687a      	ldr	r2, [r7, #4]
 8107e8a:	683b      	ldr	r3, [r7, #0]
 8107e8c:	429a      	cmp	r2, r3
 8107e8e:	d206      	bcs.n	8107e9e <prvInsertTimerInActiveList+0x62>
 8107e90:	68ba      	ldr	r2, [r7, #8]
 8107e92:	683b      	ldr	r3, [r7, #0]
 8107e94:	429a      	cmp	r2, r3
 8107e96:	d302      	bcc.n	8107e9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8107e98:	2301      	movs	r3, #1
 8107e9a:	617b      	str	r3, [r7, #20]
 8107e9c:	e007      	b.n	8107eae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8107e9e:	4b07      	ldr	r3, [pc, #28]	; (8107ebc <prvInsertTimerInActiveList+0x80>)
 8107ea0:	681a      	ldr	r2, [r3, #0]
 8107ea2:	68fb      	ldr	r3, [r7, #12]
 8107ea4:	3304      	adds	r3, #4
 8107ea6:	4619      	mov	r1, r3
 8107ea8:	4610      	mov	r0, r2
 8107eaa:	f7fd ffe2 	bl	8105e72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8107eae:	697b      	ldr	r3, [r7, #20]
}
 8107eb0:	4618      	mov	r0, r3
 8107eb2:	3718      	adds	r7, #24
 8107eb4:	46bd      	mov	sp, r7
 8107eb6:	bd80      	pop	{r7, pc}
 8107eb8:	1000489c 	.word	0x1000489c
 8107ebc:	10004898 	.word	0x10004898

08107ec0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8107ec0:	b580      	push	{r7, lr}
 8107ec2:	b08e      	sub	sp, #56	; 0x38
 8107ec4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8107ec6:	e0c6      	b.n	8108056 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8107ec8:	687b      	ldr	r3, [r7, #4]
 8107eca:	2b00      	cmp	r3, #0
 8107ecc:	da17      	bge.n	8107efe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8107ece:	1d3b      	adds	r3, r7, #4
 8107ed0:	3304      	adds	r3, #4
 8107ed2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8107ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107ed6:	2b00      	cmp	r3, #0
 8107ed8:	d109      	bne.n	8107eee <prvProcessReceivedCommands+0x2e>
 8107eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107ede:	f383 8811 	msr	BASEPRI, r3
 8107ee2:	f3bf 8f6f 	isb	sy
 8107ee6:	f3bf 8f4f 	dsb	sy
 8107eea:	61fb      	str	r3, [r7, #28]
 8107eec:	e7fe      	b.n	8107eec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8107eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107ef0:	681b      	ldr	r3, [r3, #0]
 8107ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8107ef4:	6850      	ldr	r0, [r2, #4]
 8107ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8107ef8:	6892      	ldr	r2, [r2, #8]
 8107efa:	4611      	mov	r1, r2
 8107efc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	2b00      	cmp	r3, #0
 8107f02:	f2c0 80a7 	blt.w	8108054 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8107f06:	68fb      	ldr	r3, [r7, #12]
 8107f08:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8107f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f0c:	695b      	ldr	r3, [r3, #20]
 8107f0e:	2b00      	cmp	r3, #0
 8107f10:	d004      	beq.n	8107f1c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8107f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f14:	3304      	adds	r3, #4
 8107f16:	4618      	mov	r0, r3
 8107f18:	f7fd ffe4 	bl	8105ee4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8107f1c:	463b      	mov	r3, r7
 8107f1e:	4618      	mov	r0, r3
 8107f20:	f7ff ff6c 	bl	8107dfc <prvSampleTimeNow>
 8107f24:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8107f26:	687b      	ldr	r3, [r7, #4]
 8107f28:	2b09      	cmp	r3, #9
 8107f2a:	f200 8094 	bhi.w	8108056 <prvProcessReceivedCommands+0x196>
 8107f2e:	a201      	add	r2, pc, #4	; (adr r2, 8107f34 <prvProcessReceivedCommands+0x74>)
 8107f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107f34:	08107f5d 	.word	0x08107f5d
 8107f38:	08107f5d 	.word	0x08107f5d
 8107f3c:	08107f5d 	.word	0x08107f5d
 8107f40:	08107fcf 	.word	0x08107fcf
 8107f44:	08107fe3 	.word	0x08107fe3
 8107f48:	0810802b 	.word	0x0810802b
 8107f4c:	08107f5d 	.word	0x08107f5d
 8107f50:	08107f5d 	.word	0x08107f5d
 8107f54:	08107fcf 	.word	0x08107fcf
 8107f58:	08107fe3 	.word	0x08107fe3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8107f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107f62:	f043 0301 	orr.w	r3, r3, #1
 8107f66:	b2da      	uxtb	r2, r3
 8107f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8107f6e:	68ba      	ldr	r2, [r7, #8]
 8107f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f72:	699b      	ldr	r3, [r3, #24]
 8107f74:	18d1      	adds	r1, r2, r3
 8107f76:	68bb      	ldr	r3, [r7, #8]
 8107f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107f7c:	f7ff ff5e 	bl	8107e3c <prvInsertTimerInActiveList>
 8107f80:	4603      	mov	r3, r0
 8107f82:	2b00      	cmp	r3, #0
 8107f84:	d067      	beq.n	8108056 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8107f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f88:	6a1b      	ldr	r3, [r3, #32]
 8107f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107f8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107f94:	f003 0304 	and.w	r3, r3, #4
 8107f98:	2b00      	cmp	r3, #0
 8107f9a:	d05c      	beq.n	8108056 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8107f9c:	68ba      	ldr	r2, [r7, #8]
 8107f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fa0:	699b      	ldr	r3, [r3, #24]
 8107fa2:	441a      	add	r2, r3
 8107fa4:	2300      	movs	r3, #0
 8107fa6:	9300      	str	r3, [sp, #0]
 8107fa8:	2300      	movs	r3, #0
 8107faa:	2100      	movs	r1, #0
 8107fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8107fae:	f7ff fe09 	bl	8107bc4 <xTimerGenericCommand>
 8107fb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8107fb4:	6a3b      	ldr	r3, [r7, #32]
 8107fb6:	2b00      	cmp	r3, #0
 8107fb8:	d14d      	bne.n	8108056 <prvProcessReceivedCommands+0x196>
 8107fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107fbe:	f383 8811 	msr	BASEPRI, r3
 8107fc2:	f3bf 8f6f 	isb	sy
 8107fc6:	f3bf 8f4f 	dsb	sy
 8107fca:	61bb      	str	r3, [r7, #24]
 8107fcc:	e7fe      	b.n	8107fcc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8107fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107fd4:	f023 0301 	bic.w	r3, r3, #1
 8107fd8:	b2da      	uxtb	r2, r3
 8107fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8107fe0:	e039      	b.n	8108056 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8107fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8107fe8:	f043 0301 	orr.w	r3, r3, #1
 8107fec:	b2da      	uxtb	r2, r3
 8107fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8107ff4:	68ba      	ldr	r2, [r7, #8]
 8107ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ff8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8107ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107ffc:	699b      	ldr	r3, [r3, #24]
 8107ffe:	2b00      	cmp	r3, #0
 8108000:	d109      	bne.n	8108016 <prvProcessReceivedCommands+0x156>
 8108002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108006:	f383 8811 	msr	BASEPRI, r3
 810800a:	f3bf 8f6f 	isb	sy
 810800e:	f3bf 8f4f 	dsb	sy
 8108012:	617b      	str	r3, [r7, #20]
 8108014:	e7fe      	b.n	8108014 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8108016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108018:	699a      	ldr	r2, [r3, #24]
 810801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810801c:	18d1      	adds	r1, r2, r3
 810801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8108024:	f7ff ff0a 	bl	8107e3c <prvInsertTimerInActiveList>
					break;
 8108028:	e015      	b.n	8108056 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810802c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108030:	f003 0302 	and.w	r3, r3, #2
 8108034:	2b00      	cmp	r3, #0
 8108036:	d103      	bne.n	8108040 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8108038:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810803a:	f7fd fdb5 	bl	8105ba8 <vPortFree>
 810803e:	e00a      	b.n	8108056 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8108040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8108046:	f023 0301 	bic.w	r3, r3, #1
 810804a:	b2da      	uxtb	r2, r3
 810804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810804e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8108052:	e000      	b.n	8108056 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8108054:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8108056:	4b07      	ldr	r3, [pc, #28]	; (8108074 <prvProcessReceivedCommands+0x1b4>)
 8108058:	681b      	ldr	r3, [r3, #0]
 810805a:	1d39      	adds	r1, r7, #4
 810805c:	2200      	movs	r2, #0
 810805e:	4618      	mov	r0, r3
 8108060:	f7fe fc3a 	bl	81068d8 <xQueueReceive>
 8108064:	4603      	mov	r3, r0
 8108066:	2b00      	cmp	r3, #0
 8108068:	f47f af2e 	bne.w	8107ec8 <prvProcessReceivedCommands+0x8>
	}
}
 810806c:	bf00      	nop
 810806e:	3730      	adds	r7, #48	; 0x30
 8108070:	46bd      	mov	sp, r7
 8108072:	bd80      	pop	{r7, pc}
 8108074:	100048a0 	.word	0x100048a0

08108078 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8108078:	b580      	push	{r7, lr}
 810807a:	b088      	sub	sp, #32
 810807c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810807e:	e047      	b.n	8108110 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8108080:	4b2d      	ldr	r3, [pc, #180]	; (8108138 <prvSwitchTimerLists+0xc0>)
 8108082:	681b      	ldr	r3, [r3, #0]
 8108084:	68db      	ldr	r3, [r3, #12]
 8108086:	681b      	ldr	r3, [r3, #0]
 8108088:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810808a:	4b2b      	ldr	r3, [pc, #172]	; (8108138 <prvSwitchTimerLists+0xc0>)
 810808c:	681b      	ldr	r3, [r3, #0]
 810808e:	68db      	ldr	r3, [r3, #12]
 8108090:	68db      	ldr	r3, [r3, #12]
 8108092:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8108094:	68fb      	ldr	r3, [r7, #12]
 8108096:	3304      	adds	r3, #4
 8108098:	4618      	mov	r0, r3
 810809a:	f7fd ff23 	bl	8105ee4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810809e:	68fb      	ldr	r3, [r7, #12]
 81080a0:	6a1b      	ldr	r3, [r3, #32]
 81080a2:	68f8      	ldr	r0, [r7, #12]
 81080a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 81080a6:	68fb      	ldr	r3, [r7, #12]
 81080a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 81080ac:	f003 0304 	and.w	r3, r3, #4
 81080b0:	2b00      	cmp	r3, #0
 81080b2:	d02d      	beq.n	8108110 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 81080b4:	68fb      	ldr	r3, [r7, #12]
 81080b6:	699b      	ldr	r3, [r3, #24]
 81080b8:	693a      	ldr	r2, [r7, #16]
 81080ba:	4413      	add	r3, r2
 81080bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 81080be:	68ba      	ldr	r2, [r7, #8]
 81080c0:	693b      	ldr	r3, [r7, #16]
 81080c2:	429a      	cmp	r2, r3
 81080c4:	d90e      	bls.n	81080e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 81080c6:	68fb      	ldr	r3, [r7, #12]
 81080c8:	68ba      	ldr	r2, [r7, #8]
 81080ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 81080cc:	68fb      	ldr	r3, [r7, #12]
 81080ce:	68fa      	ldr	r2, [r7, #12]
 81080d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 81080d2:	4b19      	ldr	r3, [pc, #100]	; (8108138 <prvSwitchTimerLists+0xc0>)
 81080d4:	681a      	ldr	r2, [r3, #0]
 81080d6:	68fb      	ldr	r3, [r7, #12]
 81080d8:	3304      	adds	r3, #4
 81080da:	4619      	mov	r1, r3
 81080dc:	4610      	mov	r0, r2
 81080de:	f7fd fec8 	bl	8105e72 <vListInsert>
 81080e2:	e015      	b.n	8108110 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 81080e4:	2300      	movs	r3, #0
 81080e6:	9300      	str	r3, [sp, #0]
 81080e8:	2300      	movs	r3, #0
 81080ea:	693a      	ldr	r2, [r7, #16]
 81080ec:	2100      	movs	r1, #0
 81080ee:	68f8      	ldr	r0, [r7, #12]
 81080f0:	f7ff fd68 	bl	8107bc4 <xTimerGenericCommand>
 81080f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 81080f6:	687b      	ldr	r3, [r7, #4]
 81080f8:	2b00      	cmp	r3, #0
 81080fa:	d109      	bne.n	8108110 <prvSwitchTimerLists+0x98>
 81080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108100:	f383 8811 	msr	BASEPRI, r3
 8108104:	f3bf 8f6f 	isb	sy
 8108108:	f3bf 8f4f 	dsb	sy
 810810c:	603b      	str	r3, [r7, #0]
 810810e:	e7fe      	b.n	810810e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8108110:	4b09      	ldr	r3, [pc, #36]	; (8108138 <prvSwitchTimerLists+0xc0>)
 8108112:	681b      	ldr	r3, [r3, #0]
 8108114:	681b      	ldr	r3, [r3, #0]
 8108116:	2b00      	cmp	r3, #0
 8108118:	d1b2      	bne.n	8108080 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810811a:	4b07      	ldr	r3, [pc, #28]	; (8108138 <prvSwitchTimerLists+0xc0>)
 810811c:	681b      	ldr	r3, [r3, #0]
 810811e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8108120:	4b06      	ldr	r3, [pc, #24]	; (810813c <prvSwitchTimerLists+0xc4>)
 8108122:	681b      	ldr	r3, [r3, #0]
 8108124:	4a04      	ldr	r2, [pc, #16]	; (8108138 <prvSwitchTimerLists+0xc0>)
 8108126:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8108128:	4a04      	ldr	r2, [pc, #16]	; (810813c <prvSwitchTimerLists+0xc4>)
 810812a:	697b      	ldr	r3, [r7, #20]
 810812c:	6013      	str	r3, [r2, #0]
}
 810812e:	bf00      	nop
 8108130:	3718      	adds	r7, #24
 8108132:	46bd      	mov	sp, r7
 8108134:	bd80      	pop	{r7, pc}
 8108136:	bf00      	nop
 8108138:	10004898 	.word	0x10004898
 810813c:	1000489c 	.word	0x1000489c

08108140 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8108140:	b580      	push	{r7, lr}
 8108142:	b082      	sub	sp, #8
 8108144:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8108146:	f7fe f821 	bl	810618c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810814a:	4b15      	ldr	r3, [pc, #84]	; (81081a0 <prvCheckForValidListAndQueue+0x60>)
 810814c:	681b      	ldr	r3, [r3, #0]
 810814e:	2b00      	cmp	r3, #0
 8108150:	d120      	bne.n	8108194 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8108152:	4814      	ldr	r0, [pc, #80]	; (81081a4 <prvCheckForValidListAndQueue+0x64>)
 8108154:	f7fd fe3c 	bl	8105dd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8108158:	4813      	ldr	r0, [pc, #76]	; (81081a8 <prvCheckForValidListAndQueue+0x68>)
 810815a:	f7fd fe39 	bl	8105dd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810815e:	4b13      	ldr	r3, [pc, #76]	; (81081ac <prvCheckForValidListAndQueue+0x6c>)
 8108160:	4a10      	ldr	r2, [pc, #64]	; (81081a4 <prvCheckForValidListAndQueue+0x64>)
 8108162:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8108164:	4b12      	ldr	r3, [pc, #72]	; (81081b0 <prvCheckForValidListAndQueue+0x70>)
 8108166:	4a10      	ldr	r2, [pc, #64]	; (81081a8 <prvCheckForValidListAndQueue+0x68>)
 8108168:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810816a:	2300      	movs	r3, #0
 810816c:	9300      	str	r3, [sp, #0]
 810816e:	4b11      	ldr	r3, [pc, #68]	; (81081b4 <prvCheckForValidListAndQueue+0x74>)
 8108170:	4a11      	ldr	r2, [pc, #68]	; (81081b8 <prvCheckForValidListAndQueue+0x78>)
 8108172:	2110      	movs	r1, #16
 8108174:	200a      	movs	r0, #10
 8108176:	f7fe f98b 	bl	8106490 <xQueueGenericCreateStatic>
 810817a:	4602      	mov	r2, r0
 810817c:	4b08      	ldr	r3, [pc, #32]	; (81081a0 <prvCheckForValidListAndQueue+0x60>)
 810817e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8108180:	4b07      	ldr	r3, [pc, #28]	; (81081a0 <prvCheckForValidListAndQueue+0x60>)
 8108182:	681b      	ldr	r3, [r3, #0]
 8108184:	2b00      	cmp	r3, #0
 8108186:	d005      	beq.n	8108194 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8108188:	4b05      	ldr	r3, [pc, #20]	; (81081a0 <prvCheckForValidListAndQueue+0x60>)
 810818a:	681b      	ldr	r3, [r3, #0]
 810818c:	490b      	ldr	r1, [pc, #44]	; (81081bc <prvCheckForValidListAndQueue+0x7c>)
 810818e:	4618      	mov	r0, r3
 8108190:	f7fe fd8e 	bl	8106cb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8108194:	f7fe f828 	bl	81061e8 <vPortExitCritical>
}
 8108198:	bf00      	nop
 810819a:	46bd      	mov	sp, r7
 810819c:	bd80      	pop	{r7, pc}
 810819e:	bf00      	nop
 81081a0:	100048a0 	.word	0x100048a0
 81081a4:	10004870 	.word	0x10004870
 81081a8:	10004884 	.word	0x10004884
 81081ac:	10004898 	.word	0x10004898
 81081b0:	1000489c 	.word	0x1000489c
 81081b4:	1000494c 	.word	0x1000494c
 81081b8:	100048ac 	.word	0x100048ac
 81081bc:	08108a94 	.word	0x08108a94

081081c0 <__errno>:
 81081c0:	4b01      	ldr	r3, [pc, #4]	; (81081c8 <__errno+0x8>)
 81081c2:	6818      	ldr	r0, [r3, #0]
 81081c4:	4770      	bx	lr
 81081c6:	bf00      	nop
 81081c8:	10000010 	.word	0x10000010

081081cc <__libc_init_array>:
 81081cc:	b570      	push	{r4, r5, r6, lr}
 81081ce:	4e0d      	ldr	r6, [pc, #52]	; (8108204 <__libc_init_array+0x38>)
 81081d0:	4c0d      	ldr	r4, [pc, #52]	; (8108208 <__libc_init_array+0x3c>)
 81081d2:	1ba4      	subs	r4, r4, r6
 81081d4:	10a4      	asrs	r4, r4, #2
 81081d6:	2500      	movs	r5, #0
 81081d8:	42a5      	cmp	r5, r4
 81081da:	d109      	bne.n	81081f0 <__libc_init_array+0x24>
 81081dc:	4e0b      	ldr	r6, [pc, #44]	; (810820c <__libc_init_array+0x40>)
 81081de:	4c0c      	ldr	r4, [pc, #48]	; (8108210 <__libc_init_array+0x44>)
 81081e0:	f000 fc28 	bl	8108a34 <_init>
 81081e4:	1ba4      	subs	r4, r4, r6
 81081e6:	10a4      	asrs	r4, r4, #2
 81081e8:	2500      	movs	r5, #0
 81081ea:	42a5      	cmp	r5, r4
 81081ec:	d105      	bne.n	81081fa <__libc_init_array+0x2e>
 81081ee:	bd70      	pop	{r4, r5, r6, pc}
 81081f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81081f4:	4798      	blx	r3
 81081f6:	3501      	adds	r5, #1
 81081f8:	e7ee      	b.n	81081d8 <__libc_init_array+0xc>
 81081fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 81081fe:	4798      	blx	r3
 8108200:	3501      	adds	r5, #1
 8108202:	e7f2      	b.n	81081ea <__libc_init_array+0x1e>
 8108204:	08108b24 	.word	0x08108b24
 8108208:	08108b24 	.word	0x08108b24
 810820c:	08108b24 	.word	0x08108b24
 8108210:	08108b28 	.word	0x08108b28

08108214 <memcpy>:
 8108214:	b510      	push	{r4, lr}
 8108216:	1e43      	subs	r3, r0, #1
 8108218:	440a      	add	r2, r1
 810821a:	4291      	cmp	r1, r2
 810821c:	d100      	bne.n	8108220 <memcpy+0xc>
 810821e:	bd10      	pop	{r4, pc}
 8108220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108228:	e7f7      	b.n	810821a <memcpy+0x6>

0810822a <memset>:
 810822a:	4402      	add	r2, r0
 810822c:	4603      	mov	r3, r0
 810822e:	4293      	cmp	r3, r2
 8108230:	d100      	bne.n	8108234 <memset+0xa>
 8108232:	4770      	bx	lr
 8108234:	f803 1b01 	strb.w	r1, [r3], #1
 8108238:	e7f9      	b.n	810822e <memset+0x4>
	...

0810823c <siprintf>:
 810823c:	b40e      	push	{r1, r2, r3}
 810823e:	b500      	push	{lr}
 8108240:	b09c      	sub	sp, #112	; 0x70
 8108242:	ab1d      	add	r3, sp, #116	; 0x74
 8108244:	9002      	str	r0, [sp, #8]
 8108246:	9006      	str	r0, [sp, #24]
 8108248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810824c:	4809      	ldr	r0, [pc, #36]	; (8108274 <siprintf+0x38>)
 810824e:	9107      	str	r1, [sp, #28]
 8108250:	9104      	str	r1, [sp, #16]
 8108252:	4909      	ldr	r1, [pc, #36]	; (8108278 <siprintf+0x3c>)
 8108254:	f853 2b04 	ldr.w	r2, [r3], #4
 8108258:	9105      	str	r1, [sp, #20]
 810825a:	6800      	ldr	r0, [r0, #0]
 810825c:	9301      	str	r3, [sp, #4]
 810825e:	a902      	add	r1, sp, #8
 8108260:	f000 f866 	bl	8108330 <_svfiprintf_r>
 8108264:	9b02      	ldr	r3, [sp, #8]
 8108266:	2200      	movs	r2, #0
 8108268:	701a      	strb	r2, [r3, #0]
 810826a:	b01c      	add	sp, #112	; 0x70
 810826c:	f85d eb04 	ldr.w	lr, [sp], #4
 8108270:	b003      	add	sp, #12
 8108272:	4770      	bx	lr
 8108274:	10000010 	.word	0x10000010
 8108278:	ffff0208 	.word	0xffff0208

0810827c <__ssputs_r>:
 810827c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108280:	688e      	ldr	r6, [r1, #8]
 8108282:	429e      	cmp	r6, r3
 8108284:	4682      	mov	sl, r0
 8108286:	460c      	mov	r4, r1
 8108288:	4690      	mov	r8, r2
 810828a:	4699      	mov	r9, r3
 810828c:	d837      	bhi.n	81082fe <__ssputs_r+0x82>
 810828e:	898a      	ldrh	r2, [r1, #12]
 8108290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8108294:	d031      	beq.n	81082fa <__ssputs_r+0x7e>
 8108296:	6825      	ldr	r5, [r4, #0]
 8108298:	6909      	ldr	r1, [r1, #16]
 810829a:	1a6f      	subs	r7, r5, r1
 810829c:	6965      	ldr	r5, [r4, #20]
 810829e:	2302      	movs	r3, #2
 81082a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81082a4:	fb95 f5f3 	sdiv	r5, r5, r3
 81082a8:	f109 0301 	add.w	r3, r9, #1
 81082ac:	443b      	add	r3, r7
 81082ae:	429d      	cmp	r5, r3
 81082b0:	bf38      	it	cc
 81082b2:	461d      	movcc	r5, r3
 81082b4:	0553      	lsls	r3, r2, #21
 81082b6:	d530      	bpl.n	810831a <__ssputs_r+0x9e>
 81082b8:	4629      	mov	r1, r5
 81082ba:	f000 fb21 	bl	8108900 <_malloc_r>
 81082be:	4606      	mov	r6, r0
 81082c0:	b950      	cbnz	r0, 81082d8 <__ssputs_r+0x5c>
 81082c2:	230c      	movs	r3, #12
 81082c4:	f8ca 3000 	str.w	r3, [sl]
 81082c8:	89a3      	ldrh	r3, [r4, #12]
 81082ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81082ce:	81a3      	strh	r3, [r4, #12]
 81082d0:	f04f 30ff 	mov.w	r0, #4294967295
 81082d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81082d8:	463a      	mov	r2, r7
 81082da:	6921      	ldr	r1, [r4, #16]
 81082dc:	f7ff ff9a 	bl	8108214 <memcpy>
 81082e0:	89a3      	ldrh	r3, [r4, #12]
 81082e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81082e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81082ea:	81a3      	strh	r3, [r4, #12]
 81082ec:	6126      	str	r6, [r4, #16]
 81082ee:	6165      	str	r5, [r4, #20]
 81082f0:	443e      	add	r6, r7
 81082f2:	1bed      	subs	r5, r5, r7
 81082f4:	6026      	str	r6, [r4, #0]
 81082f6:	60a5      	str	r5, [r4, #8]
 81082f8:	464e      	mov	r6, r9
 81082fa:	454e      	cmp	r6, r9
 81082fc:	d900      	bls.n	8108300 <__ssputs_r+0x84>
 81082fe:	464e      	mov	r6, r9
 8108300:	4632      	mov	r2, r6
 8108302:	4641      	mov	r1, r8
 8108304:	6820      	ldr	r0, [r4, #0]
 8108306:	f000 fa93 	bl	8108830 <memmove>
 810830a:	68a3      	ldr	r3, [r4, #8]
 810830c:	1b9b      	subs	r3, r3, r6
 810830e:	60a3      	str	r3, [r4, #8]
 8108310:	6823      	ldr	r3, [r4, #0]
 8108312:	441e      	add	r6, r3
 8108314:	6026      	str	r6, [r4, #0]
 8108316:	2000      	movs	r0, #0
 8108318:	e7dc      	b.n	81082d4 <__ssputs_r+0x58>
 810831a:	462a      	mov	r2, r5
 810831c:	f000 fb4a 	bl	81089b4 <_realloc_r>
 8108320:	4606      	mov	r6, r0
 8108322:	2800      	cmp	r0, #0
 8108324:	d1e2      	bne.n	81082ec <__ssputs_r+0x70>
 8108326:	6921      	ldr	r1, [r4, #16]
 8108328:	4650      	mov	r0, sl
 810832a:	f000 fa9b 	bl	8108864 <_free_r>
 810832e:	e7c8      	b.n	81082c2 <__ssputs_r+0x46>

08108330 <_svfiprintf_r>:
 8108330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108334:	461d      	mov	r5, r3
 8108336:	898b      	ldrh	r3, [r1, #12]
 8108338:	061f      	lsls	r7, r3, #24
 810833a:	b09d      	sub	sp, #116	; 0x74
 810833c:	4680      	mov	r8, r0
 810833e:	460c      	mov	r4, r1
 8108340:	4616      	mov	r6, r2
 8108342:	d50f      	bpl.n	8108364 <_svfiprintf_r+0x34>
 8108344:	690b      	ldr	r3, [r1, #16]
 8108346:	b96b      	cbnz	r3, 8108364 <_svfiprintf_r+0x34>
 8108348:	2140      	movs	r1, #64	; 0x40
 810834a:	f000 fad9 	bl	8108900 <_malloc_r>
 810834e:	6020      	str	r0, [r4, #0]
 8108350:	6120      	str	r0, [r4, #16]
 8108352:	b928      	cbnz	r0, 8108360 <_svfiprintf_r+0x30>
 8108354:	230c      	movs	r3, #12
 8108356:	f8c8 3000 	str.w	r3, [r8]
 810835a:	f04f 30ff 	mov.w	r0, #4294967295
 810835e:	e0c8      	b.n	81084f2 <_svfiprintf_r+0x1c2>
 8108360:	2340      	movs	r3, #64	; 0x40
 8108362:	6163      	str	r3, [r4, #20]
 8108364:	2300      	movs	r3, #0
 8108366:	9309      	str	r3, [sp, #36]	; 0x24
 8108368:	2320      	movs	r3, #32
 810836a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810836e:	2330      	movs	r3, #48	; 0x30
 8108370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8108374:	9503      	str	r5, [sp, #12]
 8108376:	f04f 0b01 	mov.w	fp, #1
 810837a:	4637      	mov	r7, r6
 810837c:	463d      	mov	r5, r7
 810837e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8108382:	b10b      	cbz	r3, 8108388 <_svfiprintf_r+0x58>
 8108384:	2b25      	cmp	r3, #37	; 0x25
 8108386:	d13e      	bne.n	8108406 <_svfiprintf_r+0xd6>
 8108388:	ebb7 0a06 	subs.w	sl, r7, r6
 810838c:	d00b      	beq.n	81083a6 <_svfiprintf_r+0x76>
 810838e:	4653      	mov	r3, sl
 8108390:	4632      	mov	r2, r6
 8108392:	4621      	mov	r1, r4
 8108394:	4640      	mov	r0, r8
 8108396:	f7ff ff71 	bl	810827c <__ssputs_r>
 810839a:	3001      	adds	r0, #1
 810839c:	f000 80a4 	beq.w	81084e8 <_svfiprintf_r+0x1b8>
 81083a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81083a2:	4453      	add	r3, sl
 81083a4:	9309      	str	r3, [sp, #36]	; 0x24
 81083a6:	783b      	ldrb	r3, [r7, #0]
 81083a8:	2b00      	cmp	r3, #0
 81083aa:	f000 809d 	beq.w	81084e8 <_svfiprintf_r+0x1b8>
 81083ae:	2300      	movs	r3, #0
 81083b0:	f04f 32ff 	mov.w	r2, #4294967295
 81083b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81083b8:	9304      	str	r3, [sp, #16]
 81083ba:	9307      	str	r3, [sp, #28]
 81083bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81083c0:	931a      	str	r3, [sp, #104]	; 0x68
 81083c2:	462f      	mov	r7, r5
 81083c4:	2205      	movs	r2, #5
 81083c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 81083ca:	4850      	ldr	r0, [pc, #320]	; (810850c <_svfiprintf_r+0x1dc>)
 81083cc:	f7f7 ff90 	bl	81002f0 <memchr>
 81083d0:	9b04      	ldr	r3, [sp, #16]
 81083d2:	b9d0      	cbnz	r0, 810840a <_svfiprintf_r+0xda>
 81083d4:	06d9      	lsls	r1, r3, #27
 81083d6:	bf44      	itt	mi
 81083d8:	2220      	movmi	r2, #32
 81083da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81083de:	071a      	lsls	r2, r3, #28
 81083e0:	bf44      	itt	mi
 81083e2:	222b      	movmi	r2, #43	; 0x2b
 81083e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 81083e8:	782a      	ldrb	r2, [r5, #0]
 81083ea:	2a2a      	cmp	r2, #42	; 0x2a
 81083ec:	d015      	beq.n	810841a <_svfiprintf_r+0xea>
 81083ee:	9a07      	ldr	r2, [sp, #28]
 81083f0:	462f      	mov	r7, r5
 81083f2:	2000      	movs	r0, #0
 81083f4:	250a      	movs	r5, #10
 81083f6:	4639      	mov	r1, r7
 81083f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 81083fc:	3b30      	subs	r3, #48	; 0x30
 81083fe:	2b09      	cmp	r3, #9
 8108400:	d94d      	bls.n	810849e <_svfiprintf_r+0x16e>
 8108402:	b1b8      	cbz	r0, 8108434 <_svfiprintf_r+0x104>
 8108404:	e00f      	b.n	8108426 <_svfiprintf_r+0xf6>
 8108406:	462f      	mov	r7, r5
 8108408:	e7b8      	b.n	810837c <_svfiprintf_r+0x4c>
 810840a:	4a40      	ldr	r2, [pc, #256]	; (810850c <_svfiprintf_r+0x1dc>)
 810840c:	1a80      	subs	r0, r0, r2
 810840e:	fa0b f000 	lsl.w	r0, fp, r0
 8108412:	4318      	orrs	r0, r3
 8108414:	9004      	str	r0, [sp, #16]
 8108416:	463d      	mov	r5, r7
 8108418:	e7d3      	b.n	81083c2 <_svfiprintf_r+0x92>
 810841a:	9a03      	ldr	r2, [sp, #12]
 810841c:	1d11      	adds	r1, r2, #4
 810841e:	6812      	ldr	r2, [r2, #0]
 8108420:	9103      	str	r1, [sp, #12]
 8108422:	2a00      	cmp	r2, #0
 8108424:	db01      	blt.n	810842a <_svfiprintf_r+0xfa>
 8108426:	9207      	str	r2, [sp, #28]
 8108428:	e004      	b.n	8108434 <_svfiprintf_r+0x104>
 810842a:	4252      	negs	r2, r2
 810842c:	f043 0302 	orr.w	r3, r3, #2
 8108430:	9207      	str	r2, [sp, #28]
 8108432:	9304      	str	r3, [sp, #16]
 8108434:	783b      	ldrb	r3, [r7, #0]
 8108436:	2b2e      	cmp	r3, #46	; 0x2e
 8108438:	d10c      	bne.n	8108454 <_svfiprintf_r+0x124>
 810843a:	787b      	ldrb	r3, [r7, #1]
 810843c:	2b2a      	cmp	r3, #42	; 0x2a
 810843e:	d133      	bne.n	81084a8 <_svfiprintf_r+0x178>
 8108440:	9b03      	ldr	r3, [sp, #12]
 8108442:	1d1a      	adds	r2, r3, #4
 8108444:	681b      	ldr	r3, [r3, #0]
 8108446:	9203      	str	r2, [sp, #12]
 8108448:	2b00      	cmp	r3, #0
 810844a:	bfb8      	it	lt
 810844c:	f04f 33ff 	movlt.w	r3, #4294967295
 8108450:	3702      	adds	r7, #2
 8108452:	9305      	str	r3, [sp, #20]
 8108454:	4d2e      	ldr	r5, [pc, #184]	; (8108510 <_svfiprintf_r+0x1e0>)
 8108456:	7839      	ldrb	r1, [r7, #0]
 8108458:	2203      	movs	r2, #3
 810845a:	4628      	mov	r0, r5
 810845c:	f7f7 ff48 	bl	81002f0 <memchr>
 8108460:	b138      	cbz	r0, 8108472 <_svfiprintf_r+0x142>
 8108462:	2340      	movs	r3, #64	; 0x40
 8108464:	1b40      	subs	r0, r0, r5
 8108466:	fa03 f000 	lsl.w	r0, r3, r0
 810846a:	9b04      	ldr	r3, [sp, #16]
 810846c:	4303      	orrs	r3, r0
 810846e:	3701      	adds	r7, #1
 8108470:	9304      	str	r3, [sp, #16]
 8108472:	7839      	ldrb	r1, [r7, #0]
 8108474:	4827      	ldr	r0, [pc, #156]	; (8108514 <_svfiprintf_r+0x1e4>)
 8108476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810847a:	2206      	movs	r2, #6
 810847c:	1c7e      	adds	r6, r7, #1
 810847e:	f7f7 ff37 	bl	81002f0 <memchr>
 8108482:	2800      	cmp	r0, #0
 8108484:	d038      	beq.n	81084f8 <_svfiprintf_r+0x1c8>
 8108486:	4b24      	ldr	r3, [pc, #144]	; (8108518 <_svfiprintf_r+0x1e8>)
 8108488:	bb13      	cbnz	r3, 81084d0 <_svfiprintf_r+0x1a0>
 810848a:	9b03      	ldr	r3, [sp, #12]
 810848c:	3307      	adds	r3, #7
 810848e:	f023 0307 	bic.w	r3, r3, #7
 8108492:	3308      	adds	r3, #8
 8108494:	9303      	str	r3, [sp, #12]
 8108496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108498:	444b      	add	r3, r9
 810849a:	9309      	str	r3, [sp, #36]	; 0x24
 810849c:	e76d      	b.n	810837a <_svfiprintf_r+0x4a>
 810849e:	fb05 3202 	mla	r2, r5, r2, r3
 81084a2:	2001      	movs	r0, #1
 81084a4:	460f      	mov	r7, r1
 81084a6:	e7a6      	b.n	81083f6 <_svfiprintf_r+0xc6>
 81084a8:	2300      	movs	r3, #0
 81084aa:	3701      	adds	r7, #1
 81084ac:	9305      	str	r3, [sp, #20]
 81084ae:	4619      	mov	r1, r3
 81084b0:	250a      	movs	r5, #10
 81084b2:	4638      	mov	r0, r7
 81084b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81084b8:	3a30      	subs	r2, #48	; 0x30
 81084ba:	2a09      	cmp	r2, #9
 81084bc:	d903      	bls.n	81084c6 <_svfiprintf_r+0x196>
 81084be:	2b00      	cmp	r3, #0
 81084c0:	d0c8      	beq.n	8108454 <_svfiprintf_r+0x124>
 81084c2:	9105      	str	r1, [sp, #20]
 81084c4:	e7c6      	b.n	8108454 <_svfiprintf_r+0x124>
 81084c6:	fb05 2101 	mla	r1, r5, r1, r2
 81084ca:	2301      	movs	r3, #1
 81084cc:	4607      	mov	r7, r0
 81084ce:	e7f0      	b.n	81084b2 <_svfiprintf_r+0x182>
 81084d0:	ab03      	add	r3, sp, #12
 81084d2:	9300      	str	r3, [sp, #0]
 81084d4:	4622      	mov	r2, r4
 81084d6:	4b11      	ldr	r3, [pc, #68]	; (810851c <_svfiprintf_r+0x1ec>)
 81084d8:	a904      	add	r1, sp, #16
 81084da:	4640      	mov	r0, r8
 81084dc:	f3af 8000 	nop.w
 81084e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 81084e4:	4681      	mov	r9, r0
 81084e6:	d1d6      	bne.n	8108496 <_svfiprintf_r+0x166>
 81084e8:	89a3      	ldrh	r3, [r4, #12]
 81084ea:	065b      	lsls	r3, r3, #25
 81084ec:	f53f af35 	bmi.w	810835a <_svfiprintf_r+0x2a>
 81084f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 81084f2:	b01d      	add	sp, #116	; 0x74
 81084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81084f8:	ab03      	add	r3, sp, #12
 81084fa:	9300      	str	r3, [sp, #0]
 81084fc:	4622      	mov	r2, r4
 81084fe:	4b07      	ldr	r3, [pc, #28]	; (810851c <_svfiprintf_r+0x1ec>)
 8108500:	a904      	add	r1, sp, #16
 8108502:	4640      	mov	r0, r8
 8108504:	f000 f882 	bl	810860c <_printf_i>
 8108508:	e7ea      	b.n	81084e0 <_svfiprintf_r+0x1b0>
 810850a:	bf00      	nop
 810850c:	08108ae8 	.word	0x08108ae8
 8108510:	08108aee 	.word	0x08108aee
 8108514:	08108af2 	.word	0x08108af2
 8108518:	00000000 	.word	0x00000000
 810851c:	0810827d 	.word	0x0810827d

08108520 <_printf_common>:
 8108520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108524:	4691      	mov	r9, r2
 8108526:	461f      	mov	r7, r3
 8108528:	688a      	ldr	r2, [r1, #8]
 810852a:	690b      	ldr	r3, [r1, #16]
 810852c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108530:	4293      	cmp	r3, r2
 8108532:	bfb8      	it	lt
 8108534:	4613      	movlt	r3, r2
 8108536:	f8c9 3000 	str.w	r3, [r9]
 810853a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810853e:	4606      	mov	r6, r0
 8108540:	460c      	mov	r4, r1
 8108542:	b112      	cbz	r2, 810854a <_printf_common+0x2a>
 8108544:	3301      	adds	r3, #1
 8108546:	f8c9 3000 	str.w	r3, [r9]
 810854a:	6823      	ldr	r3, [r4, #0]
 810854c:	0699      	lsls	r1, r3, #26
 810854e:	bf42      	ittt	mi
 8108550:	f8d9 3000 	ldrmi.w	r3, [r9]
 8108554:	3302      	addmi	r3, #2
 8108556:	f8c9 3000 	strmi.w	r3, [r9]
 810855a:	6825      	ldr	r5, [r4, #0]
 810855c:	f015 0506 	ands.w	r5, r5, #6
 8108560:	d107      	bne.n	8108572 <_printf_common+0x52>
 8108562:	f104 0a19 	add.w	sl, r4, #25
 8108566:	68e3      	ldr	r3, [r4, #12]
 8108568:	f8d9 2000 	ldr.w	r2, [r9]
 810856c:	1a9b      	subs	r3, r3, r2
 810856e:	42ab      	cmp	r3, r5
 8108570:	dc28      	bgt.n	81085c4 <_printf_common+0xa4>
 8108572:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8108576:	6822      	ldr	r2, [r4, #0]
 8108578:	3300      	adds	r3, #0
 810857a:	bf18      	it	ne
 810857c:	2301      	movne	r3, #1
 810857e:	0692      	lsls	r2, r2, #26
 8108580:	d42d      	bmi.n	81085de <_printf_common+0xbe>
 8108582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108586:	4639      	mov	r1, r7
 8108588:	4630      	mov	r0, r6
 810858a:	47c0      	blx	r8
 810858c:	3001      	adds	r0, #1
 810858e:	d020      	beq.n	81085d2 <_printf_common+0xb2>
 8108590:	6823      	ldr	r3, [r4, #0]
 8108592:	68e5      	ldr	r5, [r4, #12]
 8108594:	f8d9 2000 	ldr.w	r2, [r9]
 8108598:	f003 0306 	and.w	r3, r3, #6
 810859c:	2b04      	cmp	r3, #4
 810859e:	bf08      	it	eq
 81085a0:	1aad      	subeq	r5, r5, r2
 81085a2:	68a3      	ldr	r3, [r4, #8]
 81085a4:	6922      	ldr	r2, [r4, #16]
 81085a6:	bf0c      	ite	eq
 81085a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81085ac:	2500      	movne	r5, #0
 81085ae:	4293      	cmp	r3, r2
 81085b0:	bfc4      	itt	gt
 81085b2:	1a9b      	subgt	r3, r3, r2
 81085b4:	18ed      	addgt	r5, r5, r3
 81085b6:	f04f 0900 	mov.w	r9, #0
 81085ba:	341a      	adds	r4, #26
 81085bc:	454d      	cmp	r5, r9
 81085be:	d11a      	bne.n	81085f6 <_printf_common+0xd6>
 81085c0:	2000      	movs	r0, #0
 81085c2:	e008      	b.n	81085d6 <_printf_common+0xb6>
 81085c4:	2301      	movs	r3, #1
 81085c6:	4652      	mov	r2, sl
 81085c8:	4639      	mov	r1, r7
 81085ca:	4630      	mov	r0, r6
 81085cc:	47c0      	blx	r8
 81085ce:	3001      	adds	r0, #1
 81085d0:	d103      	bne.n	81085da <_printf_common+0xba>
 81085d2:	f04f 30ff 	mov.w	r0, #4294967295
 81085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81085da:	3501      	adds	r5, #1
 81085dc:	e7c3      	b.n	8108566 <_printf_common+0x46>
 81085de:	18e1      	adds	r1, r4, r3
 81085e0:	1c5a      	adds	r2, r3, #1
 81085e2:	2030      	movs	r0, #48	; 0x30
 81085e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81085e8:	4422      	add	r2, r4
 81085ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81085ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81085f2:	3302      	adds	r3, #2
 81085f4:	e7c5      	b.n	8108582 <_printf_common+0x62>
 81085f6:	2301      	movs	r3, #1
 81085f8:	4622      	mov	r2, r4
 81085fa:	4639      	mov	r1, r7
 81085fc:	4630      	mov	r0, r6
 81085fe:	47c0      	blx	r8
 8108600:	3001      	adds	r0, #1
 8108602:	d0e6      	beq.n	81085d2 <_printf_common+0xb2>
 8108604:	f109 0901 	add.w	r9, r9, #1
 8108608:	e7d8      	b.n	81085bc <_printf_common+0x9c>
	...

0810860c <_printf_i>:
 810860c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108610:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8108614:	460c      	mov	r4, r1
 8108616:	7e09      	ldrb	r1, [r1, #24]
 8108618:	b085      	sub	sp, #20
 810861a:	296e      	cmp	r1, #110	; 0x6e
 810861c:	4617      	mov	r7, r2
 810861e:	4606      	mov	r6, r0
 8108620:	4698      	mov	r8, r3
 8108622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8108624:	f000 80b3 	beq.w	810878e <_printf_i+0x182>
 8108628:	d822      	bhi.n	8108670 <_printf_i+0x64>
 810862a:	2963      	cmp	r1, #99	; 0x63
 810862c:	d036      	beq.n	810869c <_printf_i+0x90>
 810862e:	d80a      	bhi.n	8108646 <_printf_i+0x3a>
 8108630:	2900      	cmp	r1, #0
 8108632:	f000 80b9 	beq.w	81087a8 <_printf_i+0x19c>
 8108636:	2958      	cmp	r1, #88	; 0x58
 8108638:	f000 8083 	beq.w	8108742 <_printf_i+0x136>
 810863c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108640:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8108644:	e032      	b.n	81086ac <_printf_i+0xa0>
 8108646:	2964      	cmp	r1, #100	; 0x64
 8108648:	d001      	beq.n	810864e <_printf_i+0x42>
 810864a:	2969      	cmp	r1, #105	; 0x69
 810864c:	d1f6      	bne.n	810863c <_printf_i+0x30>
 810864e:	6820      	ldr	r0, [r4, #0]
 8108650:	6813      	ldr	r3, [r2, #0]
 8108652:	0605      	lsls	r5, r0, #24
 8108654:	f103 0104 	add.w	r1, r3, #4
 8108658:	d52a      	bpl.n	81086b0 <_printf_i+0xa4>
 810865a:	681b      	ldr	r3, [r3, #0]
 810865c:	6011      	str	r1, [r2, #0]
 810865e:	2b00      	cmp	r3, #0
 8108660:	da03      	bge.n	810866a <_printf_i+0x5e>
 8108662:	222d      	movs	r2, #45	; 0x2d
 8108664:	425b      	negs	r3, r3
 8108666:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 810866a:	486f      	ldr	r0, [pc, #444]	; (8108828 <_printf_i+0x21c>)
 810866c:	220a      	movs	r2, #10
 810866e:	e039      	b.n	81086e4 <_printf_i+0xd8>
 8108670:	2973      	cmp	r1, #115	; 0x73
 8108672:	f000 809d 	beq.w	81087b0 <_printf_i+0x1a4>
 8108676:	d808      	bhi.n	810868a <_printf_i+0x7e>
 8108678:	296f      	cmp	r1, #111	; 0x6f
 810867a:	d020      	beq.n	81086be <_printf_i+0xb2>
 810867c:	2970      	cmp	r1, #112	; 0x70
 810867e:	d1dd      	bne.n	810863c <_printf_i+0x30>
 8108680:	6823      	ldr	r3, [r4, #0]
 8108682:	f043 0320 	orr.w	r3, r3, #32
 8108686:	6023      	str	r3, [r4, #0]
 8108688:	e003      	b.n	8108692 <_printf_i+0x86>
 810868a:	2975      	cmp	r1, #117	; 0x75
 810868c:	d017      	beq.n	81086be <_printf_i+0xb2>
 810868e:	2978      	cmp	r1, #120	; 0x78
 8108690:	d1d4      	bne.n	810863c <_printf_i+0x30>
 8108692:	2378      	movs	r3, #120	; 0x78
 8108694:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8108698:	4864      	ldr	r0, [pc, #400]	; (810882c <_printf_i+0x220>)
 810869a:	e055      	b.n	8108748 <_printf_i+0x13c>
 810869c:	6813      	ldr	r3, [r2, #0]
 810869e:	1d19      	adds	r1, r3, #4
 81086a0:	681b      	ldr	r3, [r3, #0]
 81086a2:	6011      	str	r1, [r2, #0]
 81086a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81086a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81086ac:	2301      	movs	r3, #1
 81086ae:	e08c      	b.n	81087ca <_printf_i+0x1be>
 81086b0:	681b      	ldr	r3, [r3, #0]
 81086b2:	6011      	str	r1, [r2, #0]
 81086b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 81086b8:	bf18      	it	ne
 81086ba:	b21b      	sxthne	r3, r3
 81086bc:	e7cf      	b.n	810865e <_printf_i+0x52>
 81086be:	6813      	ldr	r3, [r2, #0]
 81086c0:	6825      	ldr	r5, [r4, #0]
 81086c2:	1d18      	adds	r0, r3, #4
 81086c4:	6010      	str	r0, [r2, #0]
 81086c6:	0628      	lsls	r0, r5, #24
 81086c8:	d501      	bpl.n	81086ce <_printf_i+0xc2>
 81086ca:	681b      	ldr	r3, [r3, #0]
 81086cc:	e002      	b.n	81086d4 <_printf_i+0xc8>
 81086ce:	0668      	lsls	r0, r5, #25
 81086d0:	d5fb      	bpl.n	81086ca <_printf_i+0xbe>
 81086d2:	881b      	ldrh	r3, [r3, #0]
 81086d4:	4854      	ldr	r0, [pc, #336]	; (8108828 <_printf_i+0x21c>)
 81086d6:	296f      	cmp	r1, #111	; 0x6f
 81086d8:	bf14      	ite	ne
 81086da:	220a      	movne	r2, #10
 81086dc:	2208      	moveq	r2, #8
 81086de:	2100      	movs	r1, #0
 81086e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81086e4:	6865      	ldr	r5, [r4, #4]
 81086e6:	60a5      	str	r5, [r4, #8]
 81086e8:	2d00      	cmp	r5, #0
 81086ea:	f2c0 8095 	blt.w	8108818 <_printf_i+0x20c>
 81086ee:	6821      	ldr	r1, [r4, #0]
 81086f0:	f021 0104 	bic.w	r1, r1, #4
 81086f4:	6021      	str	r1, [r4, #0]
 81086f6:	2b00      	cmp	r3, #0
 81086f8:	d13d      	bne.n	8108776 <_printf_i+0x16a>
 81086fa:	2d00      	cmp	r5, #0
 81086fc:	f040 808e 	bne.w	810881c <_printf_i+0x210>
 8108700:	4665      	mov	r5, ip
 8108702:	2a08      	cmp	r2, #8
 8108704:	d10b      	bne.n	810871e <_printf_i+0x112>
 8108706:	6823      	ldr	r3, [r4, #0]
 8108708:	07db      	lsls	r3, r3, #31
 810870a:	d508      	bpl.n	810871e <_printf_i+0x112>
 810870c:	6923      	ldr	r3, [r4, #16]
 810870e:	6862      	ldr	r2, [r4, #4]
 8108710:	429a      	cmp	r2, r3
 8108712:	bfde      	ittt	le
 8108714:	2330      	movle	r3, #48	; 0x30
 8108716:	f805 3c01 	strble.w	r3, [r5, #-1]
 810871a:	f105 35ff 	addle.w	r5, r5, #4294967295
 810871e:	ebac 0305 	sub.w	r3, ip, r5
 8108722:	6123      	str	r3, [r4, #16]
 8108724:	f8cd 8000 	str.w	r8, [sp]
 8108728:	463b      	mov	r3, r7
 810872a:	aa03      	add	r2, sp, #12
 810872c:	4621      	mov	r1, r4
 810872e:	4630      	mov	r0, r6
 8108730:	f7ff fef6 	bl	8108520 <_printf_common>
 8108734:	3001      	adds	r0, #1
 8108736:	d14d      	bne.n	81087d4 <_printf_i+0x1c8>
 8108738:	f04f 30ff 	mov.w	r0, #4294967295
 810873c:	b005      	add	sp, #20
 810873e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108742:	4839      	ldr	r0, [pc, #228]	; (8108828 <_printf_i+0x21c>)
 8108744:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8108748:	6813      	ldr	r3, [r2, #0]
 810874a:	6821      	ldr	r1, [r4, #0]
 810874c:	1d1d      	adds	r5, r3, #4
 810874e:	681b      	ldr	r3, [r3, #0]
 8108750:	6015      	str	r5, [r2, #0]
 8108752:	060a      	lsls	r2, r1, #24
 8108754:	d50b      	bpl.n	810876e <_printf_i+0x162>
 8108756:	07ca      	lsls	r2, r1, #31
 8108758:	bf44      	itt	mi
 810875a:	f041 0120 	orrmi.w	r1, r1, #32
 810875e:	6021      	strmi	r1, [r4, #0]
 8108760:	b91b      	cbnz	r3, 810876a <_printf_i+0x15e>
 8108762:	6822      	ldr	r2, [r4, #0]
 8108764:	f022 0220 	bic.w	r2, r2, #32
 8108768:	6022      	str	r2, [r4, #0]
 810876a:	2210      	movs	r2, #16
 810876c:	e7b7      	b.n	81086de <_printf_i+0xd2>
 810876e:	064d      	lsls	r5, r1, #25
 8108770:	bf48      	it	mi
 8108772:	b29b      	uxthmi	r3, r3
 8108774:	e7ef      	b.n	8108756 <_printf_i+0x14a>
 8108776:	4665      	mov	r5, ip
 8108778:	fbb3 f1f2 	udiv	r1, r3, r2
 810877c:	fb02 3311 	mls	r3, r2, r1, r3
 8108780:	5cc3      	ldrb	r3, [r0, r3]
 8108782:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8108786:	460b      	mov	r3, r1
 8108788:	2900      	cmp	r1, #0
 810878a:	d1f5      	bne.n	8108778 <_printf_i+0x16c>
 810878c:	e7b9      	b.n	8108702 <_printf_i+0xf6>
 810878e:	6813      	ldr	r3, [r2, #0]
 8108790:	6825      	ldr	r5, [r4, #0]
 8108792:	6961      	ldr	r1, [r4, #20]
 8108794:	1d18      	adds	r0, r3, #4
 8108796:	6010      	str	r0, [r2, #0]
 8108798:	0628      	lsls	r0, r5, #24
 810879a:	681b      	ldr	r3, [r3, #0]
 810879c:	d501      	bpl.n	81087a2 <_printf_i+0x196>
 810879e:	6019      	str	r1, [r3, #0]
 81087a0:	e002      	b.n	81087a8 <_printf_i+0x19c>
 81087a2:	066a      	lsls	r2, r5, #25
 81087a4:	d5fb      	bpl.n	810879e <_printf_i+0x192>
 81087a6:	8019      	strh	r1, [r3, #0]
 81087a8:	2300      	movs	r3, #0
 81087aa:	6123      	str	r3, [r4, #16]
 81087ac:	4665      	mov	r5, ip
 81087ae:	e7b9      	b.n	8108724 <_printf_i+0x118>
 81087b0:	6813      	ldr	r3, [r2, #0]
 81087b2:	1d19      	adds	r1, r3, #4
 81087b4:	6011      	str	r1, [r2, #0]
 81087b6:	681d      	ldr	r5, [r3, #0]
 81087b8:	6862      	ldr	r2, [r4, #4]
 81087ba:	2100      	movs	r1, #0
 81087bc:	4628      	mov	r0, r5
 81087be:	f7f7 fd97 	bl	81002f0 <memchr>
 81087c2:	b108      	cbz	r0, 81087c8 <_printf_i+0x1bc>
 81087c4:	1b40      	subs	r0, r0, r5
 81087c6:	6060      	str	r0, [r4, #4]
 81087c8:	6863      	ldr	r3, [r4, #4]
 81087ca:	6123      	str	r3, [r4, #16]
 81087cc:	2300      	movs	r3, #0
 81087ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81087d2:	e7a7      	b.n	8108724 <_printf_i+0x118>
 81087d4:	6923      	ldr	r3, [r4, #16]
 81087d6:	462a      	mov	r2, r5
 81087d8:	4639      	mov	r1, r7
 81087da:	4630      	mov	r0, r6
 81087dc:	47c0      	blx	r8
 81087de:	3001      	adds	r0, #1
 81087e0:	d0aa      	beq.n	8108738 <_printf_i+0x12c>
 81087e2:	6823      	ldr	r3, [r4, #0]
 81087e4:	079b      	lsls	r3, r3, #30
 81087e6:	d413      	bmi.n	8108810 <_printf_i+0x204>
 81087e8:	68e0      	ldr	r0, [r4, #12]
 81087ea:	9b03      	ldr	r3, [sp, #12]
 81087ec:	4298      	cmp	r0, r3
 81087ee:	bfb8      	it	lt
 81087f0:	4618      	movlt	r0, r3
 81087f2:	e7a3      	b.n	810873c <_printf_i+0x130>
 81087f4:	2301      	movs	r3, #1
 81087f6:	464a      	mov	r2, r9
 81087f8:	4639      	mov	r1, r7
 81087fa:	4630      	mov	r0, r6
 81087fc:	47c0      	blx	r8
 81087fe:	3001      	adds	r0, #1
 8108800:	d09a      	beq.n	8108738 <_printf_i+0x12c>
 8108802:	3501      	adds	r5, #1
 8108804:	68e3      	ldr	r3, [r4, #12]
 8108806:	9a03      	ldr	r2, [sp, #12]
 8108808:	1a9b      	subs	r3, r3, r2
 810880a:	42ab      	cmp	r3, r5
 810880c:	dcf2      	bgt.n	81087f4 <_printf_i+0x1e8>
 810880e:	e7eb      	b.n	81087e8 <_printf_i+0x1dc>
 8108810:	2500      	movs	r5, #0
 8108812:	f104 0919 	add.w	r9, r4, #25
 8108816:	e7f5      	b.n	8108804 <_printf_i+0x1f8>
 8108818:	2b00      	cmp	r3, #0
 810881a:	d1ac      	bne.n	8108776 <_printf_i+0x16a>
 810881c:	7803      	ldrb	r3, [r0, #0]
 810881e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108822:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8108826:	e76c      	b.n	8108702 <_printf_i+0xf6>
 8108828:	08108af9 	.word	0x08108af9
 810882c:	08108b0a 	.word	0x08108b0a

08108830 <memmove>:
 8108830:	4288      	cmp	r0, r1
 8108832:	b510      	push	{r4, lr}
 8108834:	eb01 0302 	add.w	r3, r1, r2
 8108838:	d807      	bhi.n	810884a <memmove+0x1a>
 810883a:	1e42      	subs	r2, r0, #1
 810883c:	4299      	cmp	r1, r3
 810883e:	d00a      	beq.n	8108856 <memmove+0x26>
 8108840:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108844:	f802 4f01 	strb.w	r4, [r2, #1]!
 8108848:	e7f8      	b.n	810883c <memmove+0xc>
 810884a:	4283      	cmp	r3, r0
 810884c:	d9f5      	bls.n	810883a <memmove+0xa>
 810884e:	1881      	adds	r1, r0, r2
 8108850:	1ad2      	subs	r2, r2, r3
 8108852:	42d3      	cmn	r3, r2
 8108854:	d100      	bne.n	8108858 <memmove+0x28>
 8108856:	bd10      	pop	{r4, pc}
 8108858:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810885c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8108860:	e7f7      	b.n	8108852 <memmove+0x22>
	...

08108864 <_free_r>:
 8108864:	b538      	push	{r3, r4, r5, lr}
 8108866:	4605      	mov	r5, r0
 8108868:	2900      	cmp	r1, #0
 810886a:	d045      	beq.n	81088f8 <_free_r+0x94>
 810886c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108870:	1f0c      	subs	r4, r1, #4
 8108872:	2b00      	cmp	r3, #0
 8108874:	bfb8      	it	lt
 8108876:	18e4      	addlt	r4, r4, r3
 8108878:	f000 f8d2 	bl	8108a20 <__malloc_lock>
 810887c:	4a1f      	ldr	r2, [pc, #124]	; (81088fc <_free_r+0x98>)
 810887e:	6813      	ldr	r3, [r2, #0]
 8108880:	4610      	mov	r0, r2
 8108882:	b933      	cbnz	r3, 8108892 <_free_r+0x2e>
 8108884:	6063      	str	r3, [r4, #4]
 8108886:	6014      	str	r4, [r2, #0]
 8108888:	4628      	mov	r0, r5
 810888a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810888e:	f000 b8c8 	b.w	8108a22 <__malloc_unlock>
 8108892:	42a3      	cmp	r3, r4
 8108894:	d90c      	bls.n	81088b0 <_free_r+0x4c>
 8108896:	6821      	ldr	r1, [r4, #0]
 8108898:	1862      	adds	r2, r4, r1
 810889a:	4293      	cmp	r3, r2
 810889c:	bf04      	itt	eq
 810889e:	681a      	ldreq	r2, [r3, #0]
 81088a0:	685b      	ldreq	r3, [r3, #4]
 81088a2:	6063      	str	r3, [r4, #4]
 81088a4:	bf04      	itt	eq
 81088a6:	1852      	addeq	r2, r2, r1
 81088a8:	6022      	streq	r2, [r4, #0]
 81088aa:	6004      	str	r4, [r0, #0]
 81088ac:	e7ec      	b.n	8108888 <_free_r+0x24>
 81088ae:	4613      	mov	r3, r2
 81088b0:	685a      	ldr	r2, [r3, #4]
 81088b2:	b10a      	cbz	r2, 81088b8 <_free_r+0x54>
 81088b4:	42a2      	cmp	r2, r4
 81088b6:	d9fa      	bls.n	81088ae <_free_r+0x4a>
 81088b8:	6819      	ldr	r1, [r3, #0]
 81088ba:	1858      	adds	r0, r3, r1
 81088bc:	42a0      	cmp	r0, r4
 81088be:	d10b      	bne.n	81088d8 <_free_r+0x74>
 81088c0:	6820      	ldr	r0, [r4, #0]
 81088c2:	4401      	add	r1, r0
 81088c4:	1858      	adds	r0, r3, r1
 81088c6:	4282      	cmp	r2, r0
 81088c8:	6019      	str	r1, [r3, #0]
 81088ca:	d1dd      	bne.n	8108888 <_free_r+0x24>
 81088cc:	6810      	ldr	r0, [r2, #0]
 81088ce:	6852      	ldr	r2, [r2, #4]
 81088d0:	605a      	str	r2, [r3, #4]
 81088d2:	4401      	add	r1, r0
 81088d4:	6019      	str	r1, [r3, #0]
 81088d6:	e7d7      	b.n	8108888 <_free_r+0x24>
 81088d8:	d902      	bls.n	81088e0 <_free_r+0x7c>
 81088da:	230c      	movs	r3, #12
 81088dc:	602b      	str	r3, [r5, #0]
 81088de:	e7d3      	b.n	8108888 <_free_r+0x24>
 81088e0:	6820      	ldr	r0, [r4, #0]
 81088e2:	1821      	adds	r1, r4, r0
 81088e4:	428a      	cmp	r2, r1
 81088e6:	bf04      	itt	eq
 81088e8:	6811      	ldreq	r1, [r2, #0]
 81088ea:	6852      	ldreq	r2, [r2, #4]
 81088ec:	6062      	str	r2, [r4, #4]
 81088ee:	bf04      	itt	eq
 81088f0:	1809      	addeq	r1, r1, r0
 81088f2:	6021      	streq	r1, [r4, #0]
 81088f4:	605c      	str	r4, [r3, #4]
 81088f6:	e7c7      	b.n	8108888 <_free_r+0x24>
 81088f8:	bd38      	pop	{r3, r4, r5, pc}
 81088fa:	bf00      	nop
 81088fc:	1000499c 	.word	0x1000499c

08108900 <_malloc_r>:
 8108900:	b570      	push	{r4, r5, r6, lr}
 8108902:	1ccd      	adds	r5, r1, #3
 8108904:	f025 0503 	bic.w	r5, r5, #3
 8108908:	3508      	adds	r5, #8
 810890a:	2d0c      	cmp	r5, #12
 810890c:	bf38      	it	cc
 810890e:	250c      	movcc	r5, #12
 8108910:	2d00      	cmp	r5, #0
 8108912:	4606      	mov	r6, r0
 8108914:	db01      	blt.n	810891a <_malloc_r+0x1a>
 8108916:	42a9      	cmp	r1, r5
 8108918:	d903      	bls.n	8108922 <_malloc_r+0x22>
 810891a:	230c      	movs	r3, #12
 810891c:	6033      	str	r3, [r6, #0]
 810891e:	2000      	movs	r0, #0
 8108920:	bd70      	pop	{r4, r5, r6, pc}
 8108922:	f000 f87d 	bl	8108a20 <__malloc_lock>
 8108926:	4a21      	ldr	r2, [pc, #132]	; (81089ac <_malloc_r+0xac>)
 8108928:	6814      	ldr	r4, [r2, #0]
 810892a:	4621      	mov	r1, r4
 810892c:	b991      	cbnz	r1, 8108954 <_malloc_r+0x54>
 810892e:	4c20      	ldr	r4, [pc, #128]	; (81089b0 <_malloc_r+0xb0>)
 8108930:	6823      	ldr	r3, [r4, #0]
 8108932:	b91b      	cbnz	r3, 810893c <_malloc_r+0x3c>
 8108934:	4630      	mov	r0, r6
 8108936:	f000 f863 	bl	8108a00 <_sbrk_r>
 810893a:	6020      	str	r0, [r4, #0]
 810893c:	4629      	mov	r1, r5
 810893e:	4630      	mov	r0, r6
 8108940:	f000 f85e 	bl	8108a00 <_sbrk_r>
 8108944:	1c43      	adds	r3, r0, #1
 8108946:	d124      	bne.n	8108992 <_malloc_r+0x92>
 8108948:	230c      	movs	r3, #12
 810894a:	6033      	str	r3, [r6, #0]
 810894c:	4630      	mov	r0, r6
 810894e:	f000 f868 	bl	8108a22 <__malloc_unlock>
 8108952:	e7e4      	b.n	810891e <_malloc_r+0x1e>
 8108954:	680b      	ldr	r3, [r1, #0]
 8108956:	1b5b      	subs	r3, r3, r5
 8108958:	d418      	bmi.n	810898c <_malloc_r+0x8c>
 810895a:	2b0b      	cmp	r3, #11
 810895c:	d90f      	bls.n	810897e <_malloc_r+0x7e>
 810895e:	600b      	str	r3, [r1, #0]
 8108960:	50cd      	str	r5, [r1, r3]
 8108962:	18cc      	adds	r4, r1, r3
 8108964:	4630      	mov	r0, r6
 8108966:	f000 f85c 	bl	8108a22 <__malloc_unlock>
 810896a:	f104 000b 	add.w	r0, r4, #11
 810896e:	1d23      	adds	r3, r4, #4
 8108970:	f020 0007 	bic.w	r0, r0, #7
 8108974:	1ac3      	subs	r3, r0, r3
 8108976:	d0d3      	beq.n	8108920 <_malloc_r+0x20>
 8108978:	425a      	negs	r2, r3
 810897a:	50e2      	str	r2, [r4, r3]
 810897c:	e7d0      	b.n	8108920 <_malloc_r+0x20>
 810897e:	428c      	cmp	r4, r1
 8108980:	684b      	ldr	r3, [r1, #4]
 8108982:	bf16      	itet	ne
 8108984:	6063      	strne	r3, [r4, #4]
 8108986:	6013      	streq	r3, [r2, #0]
 8108988:	460c      	movne	r4, r1
 810898a:	e7eb      	b.n	8108964 <_malloc_r+0x64>
 810898c:	460c      	mov	r4, r1
 810898e:	6849      	ldr	r1, [r1, #4]
 8108990:	e7cc      	b.n	810892c <_malloc_r+0x2c>
 8108992:	1cc4      	adds	r4, r0, #3
 8108994:	f024 0403 	bic.w	r4, r4, #3
 8108998:	42a0      	cmp	r0, r4
 810899a:	d005      	beq.n	81089a8 <_malloc_r+0xa8>
 810899c:	1a21      	subs	r1, r4, r0
 810899e:	4630      	mov	r0, r6
 81089a0:	f000 f82e 	bl	8108a00 <_sbrk_r>
 81089a4:	3001      	adds	r0, #1
 81089a6:	d0cf      	beq.n	8108948 <_malloc_r+0x48>
 81089a8:	6025      	str	r5, [r4, #0]
 81089aa:	e7db      	b.n	8108964 <_malloc_r+0x64>
 81089ac:	1000499c 	.word	0x1000499c
 81089b0:	100049a0 	.word	0x100049a0

081089b4 <_realloc_r>:
 81089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81089b6:	4607      	mov	r7, r0
 81089b8:	4614      	mov	r4, r2
 81089ba:	460e      	mov	r6, r1
 81089bc:	b921      	cbnz	r1, 81089c8 <_realloc_r+0x14>
 81089be:	4611      	mov	r1, r2
 81089c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 81089c4:	f7ff bf9c 	b.w	8108900 <_malloc_r>
 81089c8:	b922      	cbnz	r2, 81089d4 <_realloc_r+0x20>
 81089ca:	f7ff ff4b 	bl	8108864 <_free_r>
 81089ce:	4625      	mov	r5, r4
 81089d0:	4628      	mov	r0, r5
 81089d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81089d4:	f000 f826 	bl	8108a24 <_malloc_usable_size_r>
 81089d8:	42a0      	cmp	r0, r4
 81089da:	d20f      	bcs.n	81089fc <_realloc_r+0x48>
 81089dc:	4621      	mov	r1, r4
 81089de:	4638      	mov	r0, r7
 81089e0:	f7ff ff8e 	bl	8108900 <_malloc_r>
 81089e4:	4605      	mov	r5, r0
 81089e6:	2800      	cmp	r0, #0
 81089e8:	d0f2      	beq.n	81089d0 <_realloc_r+0x1c>
 81089ea:	4631      	mov	r1, r6
 81089ec:	4622      	mov	r2, r4
 81089ee:	f7ff fc11 	bl	8108214 <memcpy>
 81089f2:	4631      	mov	r1, r6
 81089f4:	4638      	mov	r0, r7
 81089f6:	f7ff ff35 	bl	8108864 <_free_r>
 81089fa:	e7e9      	b.n	81089d0 <_realloc_r+0x1c>
 81089fc:	4635      	mov	r5, r6
 81089fe:	e7e7      	b.n	81089d0 <_realloc_r+0x1c>

08108a00 <_sbrk_r>:
 8108a00:	b538      	push	{r3, r4, r5, lr}
 8108a02:	4c06      	ldr	r4, [pc, #24]	; (8108a1c <_sbrk_r+0x1c>)
 8108a04:	2300      	movs	r3, #0
 8108a06:	4605      	mov	r5, r0
 8108a08:	4608      	mov	r0, r1
 8108a0a:	6023      	str	r3, [r4, #0]
 8108a0c:	f7f8 fab4 	bl	8100f78 <_sbrk>
 8108a10:	1c43      	adds	r3, r0, #1
 8108a12:	d102      	bne.n	8108a1a <_sbrk_r+0x1a>
 8108a14:	6823      	ldr	r3, [r4, #0]
 8108a16:	b103      	cbz	r3, 8108a1a <_sbrk_r+0x1a>
 8108a18:	602b      	str	r3, [r5, #0]
 8108a1a:	bd38      	pop	{r3, r4, r5, pc}
 8108a1c:	10004b84 	.word	0x10004b84

08108a20 <__malloc_lock>:
 8108a20:	4770      	bx	lr

08108a22 <__malloc_unlock>:
 8108a22:	4770      	bx	lr

08108a24 <_malloc_usable_size_r>:
 8108a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108a28:	1f18      	subs	r0, r3, #4
 8108a2a:	2b00      	cmp	r3, #0
 8108a2c:	bfbc      	itt	lt
 8108a2e:	580b      	ldrlt	r3, [r1, r0]
 8108a30:	18c0      	addlt	r0, r0, r3
 8108a32:	4770      	bx	lr

08108a34 <_init>:
 8108a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108a36:	bf00      	nop
 8108a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108a3a:	bc08      	pop	{r3}
 8108a3c:	469e      	mov	lr, r3
 8108a3e:	4770      	bx	lr

08108a40 <_fini>:
 8108a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108a42:	bf00      	nop
 8108a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8108a46:	bc08      	pop	{r3}
 8108a48:	469e      	mov	lr, r3
 8108a4a:	4770      	bx	lr
