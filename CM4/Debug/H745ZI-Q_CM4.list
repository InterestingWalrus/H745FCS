
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d898  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0810db38  0810db38  0001db38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ded8  0810ded8  0001ded8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810dee0  0810dee0  0001dee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810dee4  0810dee4  0001dee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  10000000  0810dee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cec  100001e0  0810e0c8  000201e0  2**2
                  ALLOC
  8 .RAM_D3       00000000  38000000  38000000  000201e0  2**0
                  CONTENTS
  9 ._user_heap_stack 00000604  10004ecc  10004ecc  00024ecc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00038f45  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005938  00000000  00000000  00059155  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001d70  00000000  00000000  0005ea90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001b38  00000000  00000000  00060800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003d4b1  00000000  00000000  00062338  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001d822  00000000  00000000  0009f7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0018de07  00000000  00000000  000bd00b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0024ae12  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000082d8  00000000  00000000  0024ae90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e0 	.word	0x100001e0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810db20 	.word	0x0810db20

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e4 	.word	0x100001e4
 81002dc:	0810db20 	.word	0x0810db20

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <__aeabi_drsub>:
 81002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002f4:	e002      	b.n	81002fc <__adddf3>
 81002f6:	bf00      	nop

081002f8 <__aeabi_dsub>:
 81002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002fc <__adddf3>:
 81002fc:	b530      	push	{r4, r5, lr}
 81002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100306:	ea94 0f05 	teq	r4, r5
 810030a:	bf08      	it	eq
 810030c:	ea90 0f02 	teqeq	r0, r2
 8100310:	bf1f      	itttt	ne
 8100312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100316:	ea55 0c02 	orrsne.w	ip, r5, r2
 810031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100322:	f000 80e2 	beq.w	81004ea <__adddf3+0x1ee>
 8100326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 810032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810032e:	bfb8      	it	lt
 8100330:	426d      	neglt	r5, r5
 8100332:	dd0c      	ble.n	810034e <__adddf3+0x52>
 8100334:	442c      	add	r4, r5
 8100336:	ea80 0202 	eor.w	r2, r0, r2
 810033a:	ea81 0303 	eor.w	r3, r1, r3
 810033e:	ea82 0000 	eor.w	r0, r2, r0
 8100342:	ea83 0101 	eor.w	r1, r3, r1
 8100346:	ea80 0202 	eor.w	r2, r0, r2
 810034a:	ea81 0303 	eor.w	r3, r1, r3
 810034e:	2d36      	cmp	r5, #54	; 0x36
 8100350:	bf88      	it	hi
 8100352:	bd30      	pophi	{r4, r5, pc}
 8100354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100364:	d002      	beq.n	810036c <__adddf3+0x70>
 8100366:	4240      	negs	r0, r0
 8100368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100378:	d002      	beq.n	8100380 <__adddf3+0x84>
 810037a:	4252      	negs	r2, r2
 810037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100380:	ea94 0f05 	teq	r4, r5
 8100384:	f000 80a7 	beq.w	81004d6 <__adddf3+0x1da>
 8100388:	f1a4 0401 	sub.w	r4, r4, #1
 810038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100390:	db0d      	blt.n	81003ae <__adddf3+0xb2>
 8100392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100396:	fa22 f205 	lsr.w	r2, r2, r5
 810039a:	1880      	adds	r0, r0, r2
 810039c:	f141 0100 	adc.w	r1, r1, #0
 81003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 81003a4:	1880      	adds	r0, r0, r2
 81003a6:	fa43 f305 	asr.w	r3, r3, r5
 81003aa:	4159      	adcs	r1, r3
 81003ac:	e00e      	b.n	81003cc <__adddf3+0xd0>
 81003ae:	f1a5 0520 	sub.w	r5, r5, #32
 81003b2:	f10e 0e20 	add.w	lr, lr, #32
 81003b6:	2a01      	cmp	r2, #1
 81003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003bc:	bf28      	it	cs
 81003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003c2:	fa43 f305 	asr.w	r3, r3, r5
 81003c6:	18c0      	adds	r0, r0, r3
 81003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003d0:	d507      	bpl.n	81003e2 <__adddf3+0xe6>
 81003d2:	f04f 0e00 	mov.w	lr, #0
 81003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 81003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003de:	eb6e 0101 	sbc.w	r1, lr, r1
 81003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003e6:	d31b      	bcc.n	8100420 <__adddf3+0x124>
 81003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003ec:	d30c      	bcc.n	8100408 <__adddf3+0x10c>
 81003ee:	0849      	lsrs	r1, r1, #1
 81003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 81003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003f8:	f104 0401 	add.w	r4, r4, #1
 81003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100404:	f080 809a 	bcs.w	810053c <__adddf3+0x240>
 8100408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810040c:	bf08      	it	eq
 810040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100412:	f150 0000 	adcs.w	r0, r0, #0
 8100416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810041a:	ea41 0105 	orr.w	r1, r1, r5
 810041e:	bd30      	pop	{r4, r5, pc}
 8100420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100424:	4140      	adcs	r0, r0
 8100426:	eb41 0101 	adc.w	r1, r1, r1
 810042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 810042e:	f1a4 0401 	sub.w	r4, r4, #1
 8100432:	d1e9      	bne.n	8100408 <__adddf3+0x10c>
 8100434:	f091 0f00 	teq	r1, #0
 8100438:	bf04      	itt	eq
 810043a:	4601      	moveq	r1, r0
 810043c:	2000      	moveq	r0, #0
 810043e:	fab1 f381 	clz	r3, r1
 8100442:	bf08      	it	eq
 8100444:	3320      	addeq	r3, #32
 8100446:	f1a3 030b 	sub.w	r3, r3, #11
 810044a:	f1b3 0220 	subs.w	r2, r3, #32
 810044e:	da0c      	bge.n	810046a <__adddf3+0x16e>
 8100450:	320c      	adds	r2, #12
 8100452:	dd08      	ble.n	8100466 <__adddf3+0x16a>
 8100454:	f102 0c14 	add.w	ip, r2, #20
 8100458:	f1c2 020c 	rsb	r2, r2, #12
 810045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100460:	fa21 f102 	lsr.w	r1, r1, r2
 8100464:	e00c      	b.n	8100480 <__adddf3+0x184>
 8100466:	f102 0214 	add.w	r2, r2, #20
 810046a:	bfd8      	it	le
 810046c:	f1c2 0c20 	rsble	ip, r2, #32
 8100470:	fa01 f102 	lsl.w	r1, r1, r2
 8100474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100478:	bfdc      	itt	le
 810047a:	ea41 010c 	orrle.w	r1, r1, ip
 810047e:	4090      	lslle	r0, r2
 8100480:	1ae4      	subs	r4, r4, r3
 8100482:	bfa2      	ittt	ge
 8100484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100488:	4329      	orrge	r1, r5
 810048a:	bd30      	popge	{r4, r5, pc}
 810048c:	ea6f 0404 	mvn.w	r4, r4
 8100490:	3c1f      	subs	r4, #31
 8100492:	da1c      	bge.n	81004ce <__adddf3+0x1d2>
 8100494:	340c      	adds	r4, #12
 8100496:	dc0e      	bgt.n	81004b6 <__adddf3+0x1ba>
 8100498:	f104 0414 	add.w	r4, r4, #20
 810049c:	f1c4 0220 	rsb	r2, r4, #32
 81004a0:	fa20 f004 	lsr.w	r0, r0, r4
 81004a4:	fa01 f302 	lsl.w	r3, r1, r2
 81004a8:	ea40 0003 	orr.w	r0, r0, r3
 81004ac:	fa21 f304 	lsr.w	r3, r1, r4
 81004b0:	ea45 0103 	orr.w	r1, r5, r3
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	f1c4 040c 	rsb	r4, r4, #12
 81004ba:	f1c4 0220 	rsb	r2, r4, #32
 81004be:	fa20 f002 	lsr.w	r0, r0, r2
 81004c2:	fa01 f304 	lsl.w	r3, r1, r4
 81004c6:	ea40 0003 	orr.w	r0, r0, r3
 81004ca:	4629      	mov	r1, r5
 81004cc:	bd30      	pop	{r4, r5, pc}
 81004ce:	fa21 f004 	lsr.w	r0, r1, r4
 81004d2:	4629      	mov	r1, r5
 81004d4:	bd30      	pop	{r4, r5, pc}
 81004d6:	f094 0f00 	teq	r4, #0
 81004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004de:	bf06      	itte	eq
 81004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004e4:	3401      	addeq	r4, #1
 81004e6:	3d01      	subne	r5, #1
 81004e8:	e74e      	b.n	8100388 <__adddf3+0x8c>
 81004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004ee:	bf18      	it	ne
 81004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004f4:	d029      	beq.n	810054a <__adddf3+0x24e>
 81004f6:	ea94 0f05 	teq	r4, r5
 81004fa:	bf08      	it	eq
 81004fc:	ea90 0f02 	teqeq	r0, r2
 8100500:	d005      	beq.n	810050e <__adddf3+0x212>
 8100502:	ea54 0c00 	orrs.w	ip, r4, r0
 8100506:	bf04      	itt	eq
 8100508:	4619      	moveq	r1, r3
 810050a:	4610      	moveq	r0, r2
 810050c:	bd30      	pop	{r4, r5, pc}
 810050e:	ea91 0f03 	teq	r1, r3
 8100512:	bf1e      	ittt	ne
 8100514:	2100      	movne	r1, #0
 8100516:	2000      	movne	r0, #0
 8100518:	bd30      	popne	{r4, r5, pc}
 810051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810051e:	d105      	bne.n	810052c <__adddf3+0x230>
 8100520:	0040      	lsls	r0, r0, #1
 8100522:	4149      	adcs	r1, r1
 8100524:	bf28      	it	cs
 8100526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 810052a:	bd30      	pop	{r4, r5, pc}
 810052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100530:	bf3c      	itt	cc
 8100532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8100536:	bd30      	popcc	{r4, r5, pc}
 8100538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 810053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100544:	f04f 0000 	mov.w	r0, #0
 8100548:	bd30      	pop	{r4, r5, pc}
 810054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810054e:	bf1a      	itte	ne
 8100550:	4619      	movne	r1, r3
 8100552:	4610      	movne	r0, r2
 8100554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100558:	bf1c      	itt	ne
 810055a:	460b      	movne	r3, r1
 810055c:	4602      	movne	r2, r0
 810055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100562:	bf06      	itte	eq
 8100564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100568:	ea91 0f03 	teqeq	r1, r3
 810056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100570:	bd30      	pop	{r4, r5, pc}
 8100572:	bf00      	nop

08100574 <__aeabi_ui2d>:
 8100574:	f090 0f00 	teq	r0, #0
 8100578:	bf04      	itt	eq
 810057a:	2100      	moveq	r1, #0
 810057c:	4770      	bxeq	lr
 810057e:	b530      	push	{r4, r5, lr}
 8100580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100588:	f04f 0500 	mov.w	r5, #0
 810058c:	f04f 0100 	mov.w	r1, #0
 8100590:	e750      	b.n	8100434 <__adddf3+0x138>
 8100592:	bf00      	nop

08100594 <__aeabi_i2d>:
 8100594:	f090 0f00 	teq	r0, #0
 8100598:	bf04      	itt	eq
 810059a:	2100      	moveq	r1, #0
 810059c:	4770      	bxeq	lr
 810059e:	b530      	push	{r4, r5, lr}
 81005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 81005ac:	bf48      	it	mi
 81005ae:	4240      	negmi	r0, r0
 81005b0:	f04f 0100 	mov.w	r1, #0
 81005b4:	e73e      	b.n	8100434 <__adddf3+0x138>
 81005b6:	bf00      	nop

081005b8 <__aeabi_f2d>:
 81005b8:	0042      	lsls	r2, r0, #1
 81005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005be:	ea4f 0131 	mov.w	r1, r1, rrx
 81005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005c6:	bf1f      	itttt	ne
 81005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005d4:	4770      	bxne	lr
 81005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005da:	bf08      	it	eq
 81005dc:	4770      	bxeq	lr
 81005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005e2:	bf04      	itt	eq
 81005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005e8:	4770      	bxeq	lr
 81005ea:	b530      	push	{r4, r5, lr}
 81005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005f8:	e71c      	b.n	8100434 <__adddf3+0x138>
 81005fa:	bf00      	nop

081005fc <__aeabi_ul2d>:
 81005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8100600:	bf08      	it	eq
 8100602:	4770      	bxeq	lr
 8100604:	b530      	push	{r4, r5, lr}
 8100606:	f04f 0500 	mov.w	r5, #0
 810060a:	e00a      	b.n	8100622 <__aeabi_l2d+0x16>

0810060c <__aeabi_l2d>:
 810060c:	ea50 0201 	orrs.w	r2, r0, r1
 8100610:	bf08      	it	eq
 8100612:	4770      	bxeq	lr
 8100614:	b530      	push	{r4, r5, lr}
 8100616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 810061a:	d502      	bpl.n	8100622 <__aeabi_l2d+0x16>
 810061c:	4240      	negs	r0, r0
 810061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 810062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810062e:	f43f aed8 	beq.w	81003e2 <__adddf3+0xe6>
 8100632:	f04f 0203 	mov.w	r2, #3
 8100636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810063a:	bf18      	it	ne
 810063c:	3203      	addne	r2, #3
 810063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100642:	bf18      	it	ne
 8100644:	3203      	addne	r2, #3
 8100646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810064a:	f1c2 0320 	rsb	r3, r2, #32
 810064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100652:	fa20 f002 	lsr.w	r0, r0, r2
 8100656:	fa01 fe03 	lsl.w	lr, r1, r3
 810065a:	ea40 000e 	orr.w	r0, r0, lr
 810065e:	fa21 f102 	lsr.w	r1, r1, r2
 8100662:	4414      	add	r4, r2
 8100664:	e6bd      	b.n	81003e2 <__adddf3+0xe6>
 8100666:	bf00      	nop

08100668 <__aeabi_dmul>:
 8100668:	b570      	push	{r4, r5, r6, lr}
 810066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100676:	bf1d      	ittte	ne
 8100678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810067c:	ea94 0f0c 	teqne	r4, ip
 8100680:	ea95 0f0c 	teqne	r5, ip
 8100684:	f000 f8de 	bleq	8100844 <__aeabi_dmul+0x1dc>
 8100688:	442c      	add	r4, r5
 810068a:	ea81 0603 	eor.w	r6, r1, r3
 810068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810069a:	bf18      	it	ne
 810069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 81006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81006a8:	d038      	beq.n	810071c <__aeabi_dmul+0xb4>
 81006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 81006ae:	f04f 0500 	mov.w	r5, #0
 81006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 81006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006be:	f04f 0600 	mov.w	r6, #0
 81006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006c6:	f09c 0f00 	teq	ip, #0
 81006ca:	bf18      	it	ne
 81006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 81006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006dc:	d204      	bcs.n	81006e8 <__aeabi_dmul+0x80>
 81006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006e2:	416d      	adcs	r5, r5
 81006e4:	eb46 0606 	adc.w	r6, r6, r6
 81006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100700:	bf88      	it	hi
 8100702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100706:	d81e      	bhi.n	8100746 <__aeabi_dmul+0xde>
 8100708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 810070c:	bf08      	it	eq
 810070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100712:	f150 0000 	adcs.w	r0, r0, #0
 8100716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810071a:	bd70      	pop	{r4, r5, r6, pc}
 810071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100720:	ea46 0101 	orr.w	r1, r6, r1
 8100724:	ea40 0002 	orr.w	r0, r0, r2
 8100728:	ea81 0103 	eor.w	r1, r1, r3
 810072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100730:	bfc2      	ittt	gt
 8100732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 810073a:	bd70      	popgt	{r4, r5, r6, pc}
 810073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100740:	f04f 0e00 	mov.w	lr, #0
 8100744:	3c01      	subs	r4, #1
 8100746:	f300 80ab 	bgt.w	81008a0 <__aeabi_dmul+0x238>
 810074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810074e:	bfde      	ittt	le
 8100750:	2000      	movle	r0, #0
 8100752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100756:	bd70      	pople	{r4, r5, r6, pc}
 8100758:	f1c4 0400 	rsb	r4, r4, #0
 810075c:	3c20      	subs	r4, #32
 810075e:	da35      	bge.n	81007cc <__aeabi_dmul+0x164>
 8100760:	340c      	adds	r4, #12
 8100762:	dc1b      	bgt.n	810079c <__aeabi_dmul+0x134>
 8100764:	f104 0414 	add.w	r4, r4, #20
 8100768:	f1c4 0520 	rsb	r5, r4, #32
 810076c:	fa00 f305 	lsl.w	r3, r0, r5
 8100770:	fa20 f004 	lsr.w	r0, r0, r4
 8100774:	fa01 f205 	lsl.w	r2, r1, r5
 8100778:	ea40 0002 	orr.w	r0, r0, r2
 810077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100788:	fa21 f604 	lsr.w	r6, r1, r4
 810078c:	eb42 0106 	adc.w	r1, r2, r6
 8100790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100794:	bf08      	it	eq
 8100796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810079a:	bd70      	pop	{r4, r5, r6, pc}
 810079c:	f1c4 040c 	rsb	r4, r4, #12
 81007a0:	f1c4 0520 	rsb	r5, r4, #32
 81007a4:	fa00 f304 	lsl.w	r3, r0, r4
 81007a8:	fa20 f005 	lsr.w	r0, r0, r5
 81007ac:	fa01 f204 	lsl.w	r2, r1, r4
 81007b0:	ea40 0002 	orr.w	r0, r0, r2
 81007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007bc:	f141 0100 	adc.w	r1, r1, #0
 81007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007c4:	bf08      	it	eq
 81007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ca:	bd70      	pop	{r4, r5, r6, pc}
 81007cc:	f1c4 0520 	rsb	r5, r4, #32
 81007d0:	fa00 f205 	lsl.w	r2, r0, r5
 81007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 81007d8:	fa20 f304 	lsr.w	r3, r0, r4
 81007dc:	fa01 f205 	lsl.w	r2, r1, r5
 81007e0:	ea43 0302 	orr.w	r3, r3, r2
 81007e4:	fa21 f004 	lsr.w	r0, r1, r4
 81007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007ec:	fa21 f204 	lsr.w	r2, r1, r4
 81007f0:	ea20 0002 	bic.w	r0, r0, r2
 81007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007fc:	bf08      	it	eq
 81007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100802:	bd70      	pop	{r4, r5, r6, pc}
 8100804:	f094 0f00 	teq	r4, #0
 8100808:	d10f      	bne.n	810082a <__aeabi_dmul+0x1c2>
 810080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 810080e:	0040      	lsls	r0, r0, #1
 8100810:	eb41 0101 	adc.w	r1, r1, r1
 8100814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100818:	bf08      	it	eq
 810081a:	3c01      	subeq	r4, #1
 810081c:	d0f7      	beq.n	810080e <__aeabi_dmul+0x1a6>
 810081e:	ea41 0106 	orr.w	r1, r1, r6
 8100822:	f095 0f00 	teq	r5, #0
 8100826:	bf18      	it	ne
 8100828:	4770      	bxne	lr
 810082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 810082e:	0052      	lsls	r2, r2, #1
 8100830:	eb43 0303 	adc.w	r3, r3, r3
 8100834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100838:	bf08      	it	eq
 810083a:	3d01      	subeq	r5, #1
 810083c:	d0f7      	beq.n	810082e <__aeabi_dmul+0x1c6>
 810083e:	ea43 0306 	orr.w	r3, r3, r6
 8100842:	4770      	bx	lr
 8100844:	ea94 0f0c 	teq	r4, ip
 8100848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810084c:	bf18      	it	ne
 810084e:	ea95 0f0c 	teqne	r5, ip
 8100852:	d00c      	beq.n	810086e <__aeabi_dmul+0x206>
 8100854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100858:	bf18      	it	ne
 810085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810085e:	d1d1      	bne.n	8100804 <__aeabi_dmul+0x19c>
 8100860:	ea81 0103 	eor.w	r1, r1, r3
 8100864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100868:	f04f 0000 	mov.w	r0, #0
 810086c:	bd70      	pop	{r4, r5, r6, pc}
 810086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100872:	bf06      	itte	eq
 8100874:	4610      	moveq	r0, r2
 8100876:	4619      	moveq	r1, r3
 8100878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810087c:	d019      	beq.n	81008b2 <__aeabi_dmul+0x24a>
 810087e:	ea94 0f0c 	teq	r4, ip
 8100882:	d102      	bne.n	810088a <__aeabi_dmul+0x222>
 8100884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100888:	d113      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810088a:	ea95 0f0c 	teq	r5, ip
 810088e:	d105      	bne.n	810089c <__aeabi_dmul+0x234>
 8100890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100894:	bf1c      	itt	ne
 8100896:	4610      	movne	r0, r2
 8100898:	4619      	movne	r1, r3
 810089a:	d10a      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810089c:	ea81 0103 	eor.w	r1, r1, r3
 81008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81008ac:	f04f 0000 	mov.w	r0, #0
 81008b0:	bd70      	pop	{r4, r5, r6, pc}
 81008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008ba:	bd70      	pop	{r4, r5, r6, pc}

081008bc <__aeabi_ddiv>:
 81008bc:	b570      	push	{r4, r5, r6, lr}
 81008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008ca:	bf1d      	ittte	ne
 81008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008d0:	ea94 0f0c 	teqne	r4, ip
 81008d4:	ea95 0f0c 	teqne	r5, ip
 81008d8:	f000 f8a7 	bleq	8100a2a <__aeabi_ddiv+0x16e>
 81008dc:	eba4 0405 	sub.w	r4, r4, r5
 81008e0:	ea81 0e03 	eor.w	lr, r1, r3
 81008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008ec:	f000 8088 	beq.w	8100a00 <__aeabi_ddiv+0x144>
 81008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8100900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8100904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 810090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8100910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8100914:	429d      	cmp	r5, r3
 8100916:	bf08      	it	eq
 8100918:	4296      	cmpeq	r6, r2
 810091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 810091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8100922:	d202      	bcs.n	810092a <__aeabi_ddiv+0x6e>
 8100924:	085b      	lsrs	r3, r3, #1
 8100926:	ea4f 0232 	mov.w	r2, r2, rrx
 810092a:	1ab6      	subs	r6, r6, r2
 810092c:	eb65 0503 	sbc.w	r5, r5, r3
 8100930:	085b      	lsrs	r3, r3, #1
 8100932:	ea4f 0232 	mov.w	r2, r2, rrx
 8100936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 810093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100980:	085b      	lsrs	r3, r3, #1
 8100982:	ea4f 0232 	mov.w	r2, r2, rrx
 8100986:	ebb6 0e02 	subs.w	lr, r6, r2
 810098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810098e:	bf22      	ittt	cs
 8100990:	1ab6      	subcs	r6, r6, r2
 8100992:	4675      	movcs	r5, lr
 8100994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100998:	ea55 0e06 	orrs.w	lr, r5, r6
 810099c:	d018      	beq.n	81009d0 <__aeabi_ddiv+0x114>
 810099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 81009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 81009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 81009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 81009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 81009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 81009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009ba:	d1c0      	bne.n	810093e <__aeabi_ddiv+0x82>
 81009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009c0:	d10b      	bne.n	81009da <__aeabi_ddiv+0x11e>
 81009c2:	ea41 0100 	orr.w	r1, r1, r0
 81009c6:	f04f 0000 	mov.w	r0, #0
 81009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009ce:	e7b6      	b.n	810093e <__aeabi_ddiv+0x82>
 81009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009d4:	bf04      	itt	eq
 81009d6:	4301      	orreq	r1, r0
 81009d8:	2000      	moveq	r0, #0
 81009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009de:	bf88      	it	hi
 81009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009e4:	f63f aeaf 	bhi.w	8100746 <__aeabi_dmul+0xde>
 81009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 81009ec:	bf04      	itt	eq
 81009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009f6:	f150 0000 	adcs.w	r0, r0, #0
 81009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	pop	{r4, r5, r6, pc}
 8100a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a0c:	bfc2      	ittt	gt
 8100a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100a16:	bd70      	popgt	{r4, r5, r6, pc}
 8100a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a1c:	f04f 0e00 	mov.w	lr, #0
 8100a20:	3c01      	subs	r4, #1
 8100a22:	e690      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a24:	ea45 0e06 	orr.w	lr, r5, r6
 8100a28:	e68d      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a2e:	ea94 0f0c 	teq	r4, ip
 8100a32:	bf08      	it	eq
 8100a34:	ea95 0f0c 	teqeq	r5, ip
 8100a38:	f43f af3b 	beq.w	81008b2 <__aeabi_dmul+0x24a>
 8100a3c:	ea94 0f0c 	teq	r4, ip
 8100a40:	d10a      	bne.n	8100a58 <__aeabi_ddiv+0x19c>
 8100a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a46:	f47f af34 	bne.w	81008b2 <__aeabi_dmul+0x24a>
 8100a4a:	ea95 0f0c 	teq	r5, ip
 8100a4e:	f47f af25 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a52:	4610      	mov	r0, r2
 8100a54:	4619      	mov	r1, r3
 8100a56:	e72c      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a58:	ea95 0f0c 	teq	r5, ip
 8100a5c:	d106      	bne.n	8100a6c <__aeabi_ddiv+0x1b0>
 8100a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a62:	f43f aefd 	beq.w	8100860 <__aeabi_dmul+0x1f8>
 8100a66:	4610      	mov	r0, r2
 8100a68:	4619      	mov	r1, r3
 8100a6a:	e722      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a70:	bf18      	it	ne
 8100a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a76:	f47f aec5 	bne.w	8100804 <__aeabi_dmul+0x19c>
 8100a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a7e:	f47f af0d 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a86:	f47f aeeb 	bne.w	8100860 <__aeabi_dmul+0x1f8>
 8100a8a:	e712      	b.n	81008b2 <__aeabi_dmul+0x24a>

08100a8c <__gedf2>:
 8100a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8100a90:	e006      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a92:	bf00      	nop

08100a94 <__ledf2>:
 8100a94:	f04f 0c01 	mov.w	ip, #1
 8100a98:	e002      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a9a:	bf00      	nop

08100a9c <__cmpdf2>:
 8100a9c:	f04f 0c01 	mov.w	ip, #1
 8100aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ab0:	bf18      	it	ne
 8100ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100ab6:	d01b      	beq.n	8100af0 <__cmpdf2+0x54>
 8100ab8:	b001      	add	sp, #4
 8100aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100abe:	bf0c      	ite	eq
 8100ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100ac4:	ea91 0f03 	teqne	r1, r3
 8100ac8:	bf02      	ittt	eq
 8100aca:	ea90 0f02 	teqeq	r0, r2
 8100ace:	2000      	moveq	r0, #0
 8100ad0:	4770      	bxeq	lr
 8100ad2:	f110 0f00 	cmn.w	r0, #0
 8100ad6:	ea91 0f03 	teq	r1, r3
 8100ada:	bf58      	it	pl
 8100adc:	4299      	cmppl	r1, r3
 8100ade:	bf08      	it	eq
 8100ae0:	4290      	cmpeq	r0, r2
 8100ae2:	bf2c      	ite	cs
 8100ae4:	17d8      	asrcs	r0, r3, #31
 8100ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100aea:	f040 0001 	orr.w	r0, r0, #1
 8100aee:	4770      	bx	lr
 8100af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af8:	d102      	bne.n	8100b00 <__cmpdf2+0x64>
 8100afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100afe:	d107      	bne.n	8100b10 <__cmpdf2+0x74>
 8100b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b08:	d1d6      	bne.n	8100ab8 <__cmpdf2+0x1c>
 8100b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b0e:	d0d3      	beq.n	8100ab8 <__cmpdf2+0x1c>
 8100b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100b14:	4770      	bx	lr
 8100b16:	bf00      	nop

08100b18 <__aeabi_cdrcmple>:
 8100b18:	4684      	mov	ip, r0
 8100b1a:	4610      	mov	r0, r2
 8100b1c:	4662      	mov	r2, ip
 8100b1e:	468c      	mov	ip, r1
 8100b20:	4619      	mov	r1, r3
 8100b22:	4663      	mov	r3, ip
 8100b24:	e000      	b.n	8100b28 <__aeabi_cdcmpeq>
 8100b26:	bf00      	nop

08100b28 <__aeabi_cdcmpeq>:
 8100b28:	b501      	push	{r0, lr}
 8100b2a:	f7ff ffb7 	bl	8100a9c <__cmpdf2>
 8100b2e:	2800      	cmp	r0, #0
 8100b30:	bf48      	it	mi
 8100b32:	f110 0f00 	cmnmi.w	r0, #0
 8100b36:	bd01      	pop	{r0, pc}

08100b38 <__aeabi_dcmpeq>:
 8100b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b3c:	f7ff fff4 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b40:	bf0c      	ite	eq
 8100b42:	2001      	moveq	r0, #1
 8100b44:	2000      	movne	r0, #0
 8100b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b4a:	bf00      	nop

08100b4c <__aeabi_dcmplt>:
 8100b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b50:	f7ff ffea 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b54:	bf34      	ite	cc
 8100b56:	2001      	movcc	r0, #1
 8100b58:	2000      	movcs	r0, #0
 8100b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5e:	bf00      	nop

08100b60 <__aeabi_dcmple>:
 8100b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b64:	f7ff ffe0 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b68:	bf94      	ite	ls
 8100b6a:	2001      	movls	r0, #1
 8100b6c:	2000      	movhi	r0, #0
 8100b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b72:	bf00      	nop

08100b74 <__aeabi_dcmpge>:
 8100b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b78:	f7ff ffce 	bl	8100b18 <__aeabi_cdrcmple>
 8100b7c:	bf94      	ite	ls
 8100b7e:	2001      	movls	r0, #1
 8100b80:	2000      	movhi	r0, #0
 8100b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b86:	bf00      	nop

08100b88 <__aeabi_dcmpgt>:
 8100b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b8c:	f7ff ffc4 	bl	8100b18 <__aeabi_cdrcmple>
 8100b90:	bf34      	ite	cc
 8100b92:	2001      	movcc	r0, #1
 8100b94:	2000      	movcs	r0, #0
 8100b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b9a:	bf00      	nop

08100b9c <__aeabi_dcmpun>:
 8100b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba4:	d102      	bne.n	8100bac <__aeabi_dcmpun+0x10>
 8100ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100baa:	d10a      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb4:	d102      	bne.n	8100bbc <__aeabi_dcmpun+0x20>
 8100bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bba:	d102      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bbc:	f04f 0000 	mov.w	r0, #0
 8100bc0:	4770      	bx	lr
 8100bc2:	f04f 0001 	mov.w	r0, #1
 8100bc6:	4770      	bx	lr

08100bc8 <__aeabi_d2iz>:
 8100bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100bd0:	d215      	bcs.n	8100bfe <__aeabi_d2iz+0x36>
 8100bd2:	d511      	bpl.n	8100bf8 <__aeabi_d2iz+0x30>
 8100bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100bdc:	d912      	bls.n	8100c04 <__aeabi_d2iz+0x3c>
 8100bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100bee:	fa23 f002 	lsr.w	r0, r3, r2
 8100bf2:	bf18      	it	ne
 8100bf4:	4240      	negne	r0, r0
 8100bf6:	4770      	bx	lr
 8100bf8:	f04f 0000 	mov.w	r0, #0
 8100bfc:	4770      	bx	lr
 8100bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c02:	d105      	bne.n	8100c10 <__aeabi_d2iz+0x48>
 8100c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100c08:	bf08      	it	eq
 8100c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100c0e:	4770      	bx	lr
 8100c10:	f04f 0000 	mov.w	r0, #0
 8100c14:	4770      	bx	lr
 8100c16:	bf00      	nop

08100c18 <__aeabi_d2f>:
 8100c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100c20:	bf24      	itt	cs
 8100c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100c2a:	d90d      	bls.n	8100c48 <__aeabi_d2f+0x30>
 8100c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100c40:	bf08      	it	eq
 8100c42:	f020 0001 	biceq.w	r0, r0, #1
 8100c46:	4770      	bx	lr
 8100c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100c4c:	d121      	bne.n	8100c92 <__aeabi_d2f+0x7a>
 8100c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100c52:	bfbc      	itt	lt
 8100c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100c58:	4770      	bxlt	lr
 8100c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100c62:	f1c2 0218 	rsb	r2, r2, #24
 8100c66:	f1c2 0c20 	rsb	ip, r2, #32
 8100c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8100c72:	bf18      	it	ne
 8100c74:	f040 0001 	orrne.w	r0, r0, #1
 8100c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100c84:	ea40 000c 	orr.w	r0, r0, ip
 8100c88:	fa23 f302 	lsr.w	r3, r3, r2
 8100c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100c90:	e7cc      	b.n	8100c2c <__aeabi_d2f+0x14>
 8100c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100c96:	d107      	bne.n	8100ca8 <__aeabi_d2f+0x90>
 8100c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100c9c:	bf1e      	ittt	ne
 8100c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100ca6:	4770      	bxne	lr
 8100ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_uldivmod>:
 8100cb8:	b953      	cbnz	r3, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cba:	b94a      	cbnz	r2, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bf08      	it	eq
 8100cc0:	2800      	cmpeq	r0, #0
 8100cc2:	bf1c      	itt	ne
 8100cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100ccc:	f000 b972 	b.w	8100fb4 <__aeabi_idiv0>
 8100cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100cd8:	f000 f806 	bl	8100ce8 <__udivmoddi4>
 8100cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ce4:	b004      	add	sp, #16
 8100ce6:	4770      	bx	lr

08100ce8 <__udivmoddi4>:
 8100ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cec:	9e08      	ldr	r6, [sp, #32]
 8100cee:	4604      	mov	r4, r0
 8100cf0:	4688      	mov	r8, r1
 8100cf2:	2b00      	cmp	r3, #0
 8100cf4:	d14b      	bne.n	8100d8e <__udivmoddi4+0xa6>
 8100cf6:	428a      	cmp	r2, r1
 8100cf8:	4615      	mov	r5, r2
 8100cfa:	d967      	bls.n	8100dcc <__udivmoddi4+0xe4>
 8100cfc:	fab2 f282 	clz	r2, r2
 8100d00:	b14a      	cbz	r2, 8100d16 <__udivmoddi4+0x2e>
 8100d02:	f1c2 0720 	rsb	r7, r2, #32
 8100d06:	fa01 f302 	lsl.w	r3, r1, r2
 8100d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8100d0e:	4095      	lsls	r5, r2
 8100d10:	ea47 0803 	orr.w	r8, r7, r3
 8100d14:	4094      	lsls	r4, r2
 8100d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100d1a:	0c23      	lsrs	r3, r4, #16
 8100d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100d20:	fa1f fc85 	uxth.w	ip, r5
 8100d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8100d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8100d30:	4299      	cmp	r1, r3
 8100d32:	d909      	bls.n	8100d48 <__udivmoddi4+0x60>
 8100d34:	18eb      	adds	r3, r5, r3
 8100d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8100d3a:	f080 811b 	bcs.w	8100f74 <__udivmoddi4+0x28c>
 8100d3e:	4299      	cmp	r1, r3
 8100d40:	f240 8118 	bls.w	8100f74 <__udivmoddi4+0x28c>
 8100d44:	3f02      	subs	r7, #2
 8100d46:	442b      	add	r3, r5
 8100d48:	1a5b      	subs	r3, r3, r1
 8100d4a:	b2a4      	uxth	r4, r4
 8100d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8100d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8100d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8100d5c:	45a4      	cmp	ip, r4
 8100d5e:	d909      	bls.n	8100d74 <__udivmoddi4+0x8c>
 8100d60:	192c      	adds	r4, r5, r4
 8100d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8100d66:	f080 8107 	bcs.w	8100f78 <__udivmoddi4+0x290>
 8100d6a:	45a4      	cmp	ip, r4
 8100d6c:	f240 8104 	bls.w	8100f78 <__udivmoddi4+0x290>
 8100d70:	3802      	subs	r0, #2
 8100d72:	442c      	add	r4, r5
 8100d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100d78:	eba4 040c 	sub.w	r4, r4, ip
 8100d7c:	2700      	movs	r7, #0
 8100d7e:	b11e      	cbz	r6, 8100d88 <__udivmoddi4+0xa0>
 8100d80:	40d4      	lsrs	r4, r2
 8100d82:	2300      	movs	r3, #0
 8100d84:	e9c6 4300 	strd	r4, r3, [r6]
 8100d88:	4639      	mov	r1, r7
 8100d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d8e:	428b      	cmp	r3, r1
 8100d90:	d909      	bls.n	8100da6 <__udivmoddi4+0xbe>
 8100d92:	2e00      	cmp	r6, #0
 8100d94:	f000 80eb 	beq.w	8100f6e <__udivmoddi4+0x286>
 8100d98:	2700      	movs	r7, #0
 8100d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8100d9e:	4638      	mov	r0, r7
 8100da0:	4639      	mov	r1, r7
 8100da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100da6:	fab3 f783 	clz	r7, r3
 8100daa:	2f00      	cmp	r7, #0
 8100dac:	d147      	bne.n	8100e3e <__udivmoddi4+0x156>
 8100dae:	428b      	cmp	r3, r1
 8100db0:	d302      	bcc.n	8100db8 <__udivmoddi4+0xd0>
 8100db2:	4282      	cmp	r2, r0
 8100db4:	f200 80fa 	bhi.w	8100fac <__udivmoddi4+0x2c4>
 8100db8:	1a84      	subs	r4, r0, r2
 8100dba:	eb61 0303 	sbc.w	r3, r1, r3
 8100dbe:	2001      	movs	r0, #1
 8100dc0:	4698      	mov	r8, r3
 8100dc2:	2e00      	cmp	r6, #0
 8100dc4:	d0e0      	beq.n	8100d88 <__udivmoddi4+0xa0>
 8100dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8100dca:	e7dd      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100dcc:	b902      	cbnz	r2, 8100dd0 <__udivmoddi4+0xe8>
 8100dce:	deff      	udf	#255	; 0xff
 8100dd0:	fab2 f282 	clz	r2, r2
 8100dd4:	2a00      	cmp	r2, #0
 8100dd6:	f040 808f 	bne.w	8100ef8 <__udivmoddi4+0x210>
 8100dda:	1b49      	subs	r1, r1, r5
 8100ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100de0:	fa1f f885 	uxth.w	r8, r5
 8100de4:	2701      	movs	r7, #1
 8100de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8100dea:	0c23      	lsrs	r3, r4, #16
 8100dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8100df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100df4:	fb08 f10c 	mul.w	r1, r8, ip
 8100df8:	4299      	cmp	r1, r3
 8100dfa:	d907      	bls.n	8100e0c <__udivmoddi4+0x124>
 8100dfc:	18eb      	adds	r3, r5, r3
 8100dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100e02:	d202      	bcs.n	8100e0a <__udivmoddi4+0x122>
 8100e04:	4299      	cmp	r1, r3
 8100e06:	f200 80cd 	bhi.w	8100fa4 <__udivmoddi4+0x2bc>
 8100e0a:	4684      	mov	ip, r0
 8100e0c:	1a59      	subs	r1, r3, r1
 8100e0e:	b2a3      	uxth	r3, r4
 8100e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8100e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8100e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100e1c:	fb08 f800 	mul.w	r8, r8, r0
 8100e20:	45a0      	cmp	r8, r4
 8100e22:	d907      	bls.n	8100e34 <__udivmoddi4+0x14c>
 8100e24:	192c      	adds	r4, r5, r4
 8100e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e2a:	d202      	bcs.n	8100e32 <__udivmoddi4+0x14a>
 8100e2c:	45a0      	cmp	r8, r4
 8100e2e:	f200 80b6 	bhi.w	8100f9e <__udivmoddi4+0x2b6>
 8100e32:	4618      	mov	r0, r3
 8100e34:	eba4 0408 	sub.w	r4, r4, r8
 8100e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100e3c:	e79f      	b.n	8100d7e <__udivmoddi4+0x96>
 8100e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8100e42:	40bb      	lsls	r3, r7
 8100e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8100e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8100e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8100e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8100e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100e5c:	4325      	orrs	r5, r4
 8100e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8100e62:	0c2c      	lsrs	r4, r5, #16
 8100e64:	fb08 3319 	mls	r3, r8, r9, r3
 8100e68:	fa1f fa8e 	uxth.w	sl, lr
 8100e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100e70:	fb09 f40a 	mul.w	r4, r9, sl
 8100e74:	429c      	cmp	r4, r3
 8100e76:	fa02 f207 	lsl.w	r2, r2, r7
 8100e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8100e7e:	d90b      	bls.n	8100e98 <__udivmoddi4+0x1b0>
 8100e80:	eb1e 0303 	adds.w	r3, lr, r3
 8100e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8100e88:	f080 8087 	bcs.w	8100f9a <__udivmoddi4+0x2b2>
 8100e8c:	429c      	cmp	r4, r3
 8100e8e:	f240 8084 	bls.w	8100f9a <__udivmoddi4+0x2b2>
 8100e92:	f1a9 0902 	sub.w	r9, r9, #2
 8100e96:	4473      	add	r3, lr
 8100e98:	1b1b      	subs	r3, r3, r4
 8100e9a:	b2ad      	uxth	r5, r5
 8100e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8100eac:	45a2      	cmp	sl, r4
 8100eae:	d908      	bls.n	8100ec2 <__udivmoddi4+0x1da>
 8100eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8100eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb8:	d26b      	bcs.n	8100f92 <__udivmoddi4+0x2aa>
 8100eba:	45a2      	cmp	sl, r4
 8100ebc:	d969      	bls.n	8100f92 <__udivmoddi4+0x2aa>
 8100ebe:	3802      	subs	r0, #2
 8100ec0:	4474      	add	r4, lr
 8100ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8100eca:	eba4 040a 	sub.w	r4, r4, sl
 8100ece:	454c      	cmp	r4, r9
 8100ed0:	46c2      	mov	sl, r8
 8100ed2:	464b      	mov	r3, r9
 8100ed4:	d354      	bcc.n	8100f80 <__udivmoddi4+0x298>
 8100ed6:	d051      	beq.n	8100f7c <__udivmoddi4+0x294>
 8100ed8:	2e00      	cmp	r6, #0
 8100eda:	d069      	beq.n	8100fb0 <__udivmoddi4+0x2c8>
 8100edc:	ebb1 050a 	subs.w	r5, r1, sl
 8100ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8100ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100ee8:	40fd      	lsrs	r5, r7
 8100eea:	40fc      	lsrs	r4, r7
 8100eec:	ea4c 0505 	orr.w	r5, ip, r5
 8100ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8100ef4:	2700      	movs	r7, #0
 8100ef6:	e747      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100ef8:	f1c2 0320 	rsb	r3, r2, #32
 8100efc:	fa20 f703 	lsr.w	r7, r0, r3
 8100f00:	4095      	lsls	r5, r2
 8100f02:	fa01 f002 	lsl.w	r0, r1, r2
 8100f06:	fa21 f303 	lsr.w	r3, r1, r3
 8100f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100f0e:	4338      	orrs	r0, r7
 8100f10:	0c01      	lsrs	r1, r0, #16
 8100f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8100f16:	fa1f f885 	uxth.w	r8, r5
 8100f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8100f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f22:	fb07 f308 	mul.w	r3, r7, r8
 8100f26:	428b      	cmp	r3, r1
 8100f28:	fa04 f402 	lsl.w	r4, r4, r2
 8100f2c:	d907      	bls.n	8100f3e <__udivmoddi4+0x256>
 8100f2e:	1869      	adds	r1, r5, r1
 8100f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8100f34:	d22f      	bcs.n	8100f96 <__udivmoddi4+0x2ae>
 8100f36:	428b      	cmp	r3, r1
 8100f38:	d92d      	bls.n	8100f96 <__udivmoddi4+0x2ae>
 8100f3a:	3f02      	subs	r7, #2
 8100f3c:	4429      	add	r1, r5
 8100f3e:	1acb      	subs	r3, r1, r3
 8100f40:	b281      	uxth	r1, r0
 8100f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8100f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8100f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f4e:	fb00 f308 	mul.w	r3, r0, r8
 8100f52:	428b      	cmp	r3, r1
 8100f54:	d907      	bls.n	8100f66 <__udivmoddi4+0x27e>
 8100f56:	1869      	adds	r1, r5, r1
 8100f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8100f5c:	d217      	bcs.n	8100f8e <__udivmoddi4+0x2a6>
 8100f5e:	428b      	cmp	r3, r1
 8100f60:	d915      	bls.n	8100f8e <__udivmoddi4+0x2a6>
 8100f62:	3802      	subs	r0, #2
 8100f64:	4429      	add	r1, r5
 8100f66:	1ac9      	subs	r1, r1, r3
 8100f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8100f6c:	e73b      	b.n	8100de6 <__udivmoddi4+0xfe>
 8100f6e:	4637      	mov	r7, r6
 8100f70:	4630      	mov	r0, r6
 8100f72:	e709      	b.n	8100d88 <__udivmoddi4+0xa0>
 8100f74:	4607      	mov	r7, r0
 8100f76:	e6e7      	b.n	8100d48 <__udivmoddi4+0x60>
 8100f78:	4618      	mov	r0, r3
 8100f7a:	e6fb      	b.n	8100d74 <__udivmoddi4+0x8c>
 8100f7c:	4541      	cmp	r1, r8
 8100f7e:	d2ab      	bcs.n	8100ed8 <__udivmoddi4+0x1f0>
 8100f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8100f84:	eb69 020e 	sbc.w	r2, r9, lr
 8100f88:	3801      	subs	r0, #1
 8100f8a:	4613      	mov	r3, r2
 8100f8c:	e7a4      	b.n	8100ed8 <__udivmoddi4+0x1f0>
 8100f8e:	4660      	mov	r0, ip
 8100f90:	e7e9      	b.n	8100f66 <__udivmoddi4+0x27e>
 8100f92:	4618      	mov	r0, r3
 8100f94:	e795      	b.n	8100ec2 <__udivmoddi4+0x1da>
 8100f96:	4667      	mov	r7, ip
 8100f98:	e7d1      	b.n	8100f3e <__udivmoddi4+0x256>
 8100f9a:	4681      	mov	r9, r0
 8100f9c:	e77c      	b.n	8100e98 <__udivmoddi4+0x1b0>
 8100f9e:	3802      	subs	r0, #2
 8100fa0:	442c      	add	r4, r5
 8100fa2:	e747      	b.n	8100e34 <__udivmoddi4+0x14c>
 8100fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8100fa8:	442b      	add	r3, r5
 8100faa:	e72f      	b.n	8100e0c <__udivmoddi4+0x124>
 8100fac:	4638      	mov	r0, r7
 8100fae:	e708      	b.n	8100dc2 <__udivmoddi4+0xda>
 8100fb0:	4637      	mov	r7, r6
 8100fb2:	e6e9      	b.n	8100d88 <__udivmoddi4+0xa0>

08100fb4 <__aeabi_idiv0>:
 8100fb4:	4770      	bx	lr
 8100fb6:	bf00      	nop

08100fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fb8:	b480      	push	{r7}
 8100fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fbc:	4b0b      	ldr	r3, [pc, #44]	; (8100fec <SystemInit+0x34>)
 8100fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100fc2:	4a0a      	ldr	r2, [pc, #40]	; (8100fec <SystemInit+0x34>)
 8100fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8100fcc:	4b07      	ldr	r3, [pc, #28]	; (8100fec <SystemInit+0x34>)
 8100fce:	691b      	ldr	r3, [r3, #16]
 8100fd0:	4a06      	ldr	r2, [pc, #24]	; (8100fec <SystemInit+0x34>)
 8100fd2:	f043 0304 	orr.w	r3, r3, #4
 8100fd6:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100fd8:	4b04      	ldr	r3, [pc, #16]	; (8100fec <SystemInit+0x34>)
 8100fda:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100fde:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100fe0:	bf00      	nop
 8100fe2:	46bd      	mov	sp, r7
 8100fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fe8:	4770      	bx	lr
 8100fea:	bf00      	nop
 8100fec:	e000ed00 	.word	0xe000ed00

08100ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100ff0:	b580      	push	{r7, lr}
 8100ff2:	b082      	sub	sp, #8
 8100ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100ff6:	4b11      	ldr	r3, [pc, #68]	; (810103c <MX_DMA_Init+0x4c>)
 8100ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100ffc:	4a0f      	ldr	r2, [pc, #60]	; (810103c <MX_DMA_Init+0x4c>)
 8100ffe:	f043 0301 	orr.w	r3, r3, #1
 8101002:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101006:	4b0d      	ldr	r3, [pc, #52]	; (810103c <MX_DMA_Init+0x4c>)
 8101008:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810100c:	f003 0301 	and.w	r3, r3, #1
 8101010:	607b      	str	r3, [r7, #4]
 8101012:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8101014:	2200      	movs	r2, #0
 8101016:	2100      	movs	r1, #0
 8101018:	200b      	movs	r0, #11
 810101a:	f001 fc39 	bl	8102890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 810101e:	200b      	movs	r0, #11
 8101020:	f001 fc50 	bl	81028c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8101024:	2200      	movs	r2, #0
 8101026:	2100      	movs	r1, #0
 8101028:	200c      	movs	r0, #12
 810102a:	f001 fc31 	bl	8102890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 810102e:	200c      	movs	r0, #12
 8101030:	f001 fc48 	bl	81028c4 <HAL_NVIC_EnableIRQ>

}
 8101034:	bf00      	nop
 8101036:	3708      	adds	r7, #8
 8101038:	46bd      	mov	sp, r7
 810103a:	bd80      	pop	{r7, pc}
 810103c:	58024400 	.word	0x58024400

08101040 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8101040:	b580      	push	{r7, lr}
 8101042:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8101044:	4a0c      	ldr	r2, [pc, #48]	; (8101078 <MX_FREERTOS_Init+0x38>)
 8101046:	2100      	movs	r1, #0
 8101048:	480c      	ldr	r0, [pc, #48]	; (810107c <MX_FREERTOS_Init+0x3c>)
 810104a:	f008 fb41 	bl	81096d0 <osThreadNew>
 810104e:	4602      	mov	r2, r0
 8101050:	4b0b      	ldr	r3, [pc, #44]	; (8101080 <MX_FREERTOS_Init+0x40>)
 8101052:	601a      	str	r2, [r3, #0]
  accTaskHandle = osThreadNew(StartAccTask, NULL, &accTask_attributes);
 8101054:	4a0b      	ldr	r2, [pc, #44]	; (8101084 <MX_FREERTOS_Init+0x44>)
 8101056:	2100      	movs	r1, #0
 8101058:	480b      	ldr	r0, [pc, #44]	; (8101088 <MX_FREERTOS_Init+0x48>)
 810105a:	f008 fb39 	bl	81096d0 <osThreadNew>
 810105e:	4602      	mov	r2, r0
 8101060:	4b0a      	ldr	r3, [pc, #40]	; (810108c <MX_FREERTOS_Init+0x4c>)
 8101062:	601a      	str	r2, [r3, #0]
  magTaskHandle = osThreadNew(StartMagTask, NULL, &magTask_attributes);
 8101064:	4a0a      	ldr	r2, [pc, #40]	; (8101090 <MX_FREERTOS_Init+0x50>)
 8101066:	2100      	movs	r1, #0
 8101068:	480a      	ldr	r0, [pc, #40]	; (8101094 <MX_FREERTOS_Init+0x54>)
 810106a:	f008 fb31 	bl	81096d0 <osThreadNew>
 810106e:	4602      	mov	r2, r0
 8101070:	4b09      	ldr	r3, [pc, #36]	; (8101098 <MX_FREERTOS_Init+0x58>)
 8101072:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8101074:	bf00      	nop
 8101076:	bd80      	pop	{r7, pc}
 8101078:	0810dc20 	.word	0x0810dc20
 810107c:	0810109d 	.word	0x0810109d
 8101080:	10004b24 	.word	0x10004b24
 8101084:	0810dc68 	.word	0x0810dc68
 8101088:	081010d1 	.word	0x081010d1
 810108c:	10004b28 	.word	0x10004b28
 8101090:	0810dc44 	.word	0x0810dc44
 8101094:	081010b1 	.word	0x081010b1
 8101098:	10004b20 	.word	0x10004b20

0810109c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810109c:	b580      	push	{r7, lr}
 810109e:	b082      	sub	sp, #8
 81010a0:	af00      	add	r7, sp, #0
 81010a2:	6078      	str	r0, [r7, #4]
      //sprintf ((char*)buf, ":%u.%02u \r\n", (unsigned int) temp/100, (unsigned int)temp % 100);
//
      //HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  	//LED2_ON();

    osDelay(1000);
 81010a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81010a8:	f008 fbb8 	bl	810981c <osDelay>
 81010ac:	e7fa      	b.n	81010a4 <StartDefaultTask+0x8>
	...

081010b0 <StartMagTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartMagTask(void *argument)
{
 81010b0:	b580      	push	{r7, lr}
 81010b2:	b082      	sub	sp, #8
 81010b4:	af00      	add	r7, sp, #0
 81010b6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		LSM303GetGauss(magData);
 81010b8:	4b04      	ldr	r3, [pc, #16]	; (81010cc <StartMagTask+0x1c>)
 81010ba:	681b      	ldr	r3, [r3, #0]
 81010bc:	4618      	mov	r0, r3
 81010be:	f000 fbbd 	bl	810183c <LSM303GetGauss>
		osDelay(MAG_DT_MS);
 81010c2:	2305      	movs	r3, #5
 81010c4:	4618      	mov	r0, r3
 81010c6:	f008 fba9 	bl	810981c <osDelay>
		LSM303GetGauss(magData);
 81010ca:	e7f5      	b.n	81010b8 <StartMagTask+0x8>
 81010cc:	10004b2c 	.word	0x10004b2c

081010d0 <StartAccTask>:
	}
}

void StartAccTask(void *argument)
{
 81010d0:	b580      	push	{r7, lr}
 81010d2:	b082      	sub	sp, #8
 81010d4:	af00      	add	r7, sp, #0
 81010d6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		LSM303GetGs(accData);
 81010d8:	4b04      	ldr	r3, [pc, #16]	; (81010ec <StartAccTask+0x1c>)
 81010da:	681b      	ldr	r3, [r3, #0]
 81010dc:	4618      	mov	r0, r3
 81010de:	f000 fad3 	bl	8101688 <LSM303GetGs>
		osDelay(ACC_DT_MS);
 81010e2:	2303      	movs	r3, #3
 81010e4:	4618      	mov	r0, r3
 81010e6:	f008 fb99 	bl	810981c <osDelay>
		LSM303GetGs(accData);
 81010ea:	e7f5      	b.n	81010d8 <StartAccTask+0x8>
 81010ec:	10004b34 	.word	0x10004b34

081010f0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 81010f0:	b580      	push	{r7, lr}
 81010f2:	b08a      	sub	sp, #40	; 0x28
 81010f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010f6:	f107 0314 	add.w	r3, r7, #20
 81010fa:	2200      	movs	r2, #0
 81010fc:	601a      	str	r2, [r3, #0]
 81010fe:	605a      	str	r2, [r3, #4]
 8101100:	609a      	str	r2, [r3, #8]
 8101102:	60da      	str	r2, [r3, #12]
 8101104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101106:	4b29      	ldr	r3, [pc, #164]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810110c:	4a27      	ldr	r2, [pc, #156]	; (81011ac <MX_GPIO_Init+0xbc>)
 810110e:	f043 0310 	orr.w	r3, r3, #16
 8101112:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101116:	4b25      	ldr	r3, [pc, #148]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810111c:	f003 0310 	and.w	r3, r3, #16
 8101120:	613b      	str	r3, [r7, #16]
 8101122:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101124:	4b21      	ldr	r3, [pc, #132]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810112a:	4a20      	ldr	r2, [pc, #128]	; (81011ac <MX_GPIO_Init+0xbc>)
 810112c:	f043 0308 	orr.w	r3, r3, #8
 8101130:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101134:	4b1d      	ldr	r3, [pc, #116]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810113a:	f003 0308 	and.w	r3, r3, #8
 810113e:	60fb      	str	r3, [r7, #12]
 8101140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101142:	4b1a      	ldr	r3, [pc, #104]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101148:	4a18      	ldr	r2, [pc, #96]	; (81011ac <MX_GPIO_Init+0xbc>)
 810114a:	f043 0301 	orr.w	r3, r3, #1
 810114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101152:	4b16      	ldr	r3, [pc, #88]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101158:	f003 0301 	and.w	r3, r3, #1
 810115c:	60bb      	str	r3, [r7, #8]
 810115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101160:	4b12      	ldr	r3, [pc, #72]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101166:	4a11      	ldr	r2, [pc, #68]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101168:	f043 0302 	orr.w	r3, r3, #2
 810116c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101170:	4b0e      	ldr	r3, [pc, #56]	; (81011ac <MX_GPIO_Init+0xbc>)
 8101172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101176:	f003 0302 	and.w	r3, r3, #2
 810117a:	607b      	str	r3, [r7, #4]
 810117c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810117e:	2200      	movs	r2, #0
 8101180:	2102      	movs	r1, #2
 8101182:	480b      	ldr	r0, [pc, #44]	; (81011b0 <MX_GPIO_Init+0xc0>)
 8101184:	f004 f88a 	bl	810529c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8101188:	2302      	movs	r3, #2
 810118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810118c:	2301      	movs	r3, #1
 810118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101190:	2300      	movs	r3, #0
 8101192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101194:	2300      	movs	r3, #0
 8101196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101198:	f107 0314 	add.w	r3, r7, #20
 810119c:	4619      	mov	r1, r3
 810119e:	4804      	ldr	r0, [pc, #16]	; (81011b0 <MX_GPIO_Init+0xc0>)
 81011a0:	f003 fecc 	bl	8104f3c <HAL_GPIO_Init>

}
 81011a4:	bf00      	nop
 81011a6:	3728      	adds	r7, #40	; 0x28
 81011a8:	46bd      	mov	sp, r7
 81011aa:	bd80      	pop	{r7, pc}
 81011ac:	58024400 	.word	0x58024400
 81011b0:	58021000 	.word	0x58021000

081011b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 81011b4:	b580      	push	{r7, lr}
 81011b6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 81011b8:	4b1b      	ldr	r3, [pc, #108]	; (8101228 <MX_I2C1_Init+0x74>)
 81011ba:	4a1c      	ldr	r2, [pc, #112]	; (810122c <MX_I2C1_Init+0x78>)
 81011bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 81011be:	4b1a      	ldr	r3, [pc, #104]	; (8101228 <MX_I2C1_Init+0x74>)
 81011c0:	4a1b      	ldr	r2, [pc, #108]	; (8101230 <MX_I2C1_Init+0x7c>)
 81011c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81011c4:	4b18      	ldr	r3, [pc, #96]	; (8101228 <MX_I2C1_Init+0x74>)
 81011c6:	2200      	movs	r2, #0
 81011c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81011ca:	4b17      	ldr	r3, [pc, #92]	; (8101228 <MX_I2C1_Init+0x74>)
 81011cc:	2201      	movs	r2, #1
 81011ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81011d0:	4b15      	ldr	r3, [pc, #84]	; (8101228 <MX_I2C1_Init+0x74>)
 81011d2:	2200      	movs	r2, #0
 81011d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81011d6:	4b14      	ldr	r3, [pc, #80]	; (8101228 <MX_I2C1_Init+0x74>)
 81011d8:	2200      	movs	r2, #0
 81011da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81011dc:	4b12      	ldr	r3, [pc, #72]	; (8101228 <MX_I2C1_Init+0x74>)
 81011de:	2200      	movs	r2, #0
 81011e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81011e2:	4b11      	ldr	r3, [pc, #68]	; (8101228 <MX_I2C1_Init+0x74>)
 81011e4:	2200      	movs	r2, #0
 81011e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81011e8:	4b0f      	ldr	r3, [pc, #60]	; (8101228 <MX_I2C1_Init+0x74>)
 81011ea:	2200      	movs	r2, #0
 81011ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81011ee:	480e      	ldr	r0, [pc, #56]	; (8101228 <MX_I2C1_Init+0x74>)
 81011f0:	f004 f8a4 	bl	810533c <HAL_I2C_Init>
 81011f4:	4603      	mov	r3, r0
 81011f6:	2b00      	cmp	r3, #0
 81011f8:	d001      	beq.n	81011fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81011fa:	f000 fdb5 	bl	8101d68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81011fe:	2100      	movs	r1, #0
 8101200:	4809      	ldr	r0, [pc, #36]	; (8101228 <MX_I2C1_Init+0x74>)
 8101202:	f004 fd75 	bl	8105cf0 <HAL_I2CEx_ConfigAnalogFilter>
 8101206:	4603      	mov	r3, r0
 8101208:	2b00      	cmp	r3, #0
 810120a:	d001      	beq.n	8101210 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 810120c:	f000 fdac 	bl	8101d68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101210:	2100      	movs	r1, #0
 8101212:	4805      	ldr	r0, [pc, #20]	; (8101228 <MX_I2C1_Init+0x74>)
 8101214:	f004 fdb7 	bl	8105d86 <HAL_I2CEx_ConfigDigitalFilter>
 8101218:	4603      	mov	r3, r0
 810121a:	2b00      	cmp	r3, #0
 810121c:	d001      	beq.n	8101222 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 810121e:	f000 fda3 	bl	8101d68 <Error_Handler>
  }

}
 8101222:	bf00      	nop
 8101224:	bd80      	pop	{r7, pc}
 8101226:	bf00      	nop
 8101228:	10004b38 	.word	0x10004b38
 810122c:	40005400 	.word	0x40005400
 8101230:	307075b1 	.word	0x307075b1

08101234 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8101234:	b580      	push	{r7, lr}
 8101236:	b08a      	sub	sp, #40	; 0x28
 8101238:	af00      	add	r7, sp, #0
 810123a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810123c:	f107 0314 	add.w	r3, r7, #20
 8101240:	2200      	movs	r2, #0
 8101242:	601a      	str	r2, [r3, #0]
 8101244:	605a      	str	r2, [r3, #4]
 8101246:	609a      	str	r2, [r3, #8]
 8101248:	60da      	str	r2, [r3, #12]
 810124a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	681b      	ldr	r3, [r3, #0]
 8101250:	4a1a      	ldr	r2, [pc, #104]	; (81012bc <HAL_I2C_MspInit+0x88>)
 8101252:	4293      	cmp	r3, r2
 8101254:	d12e      	bne.n	81012b4 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101256:	4b1a      	ldr	r3, [pc, #104]	; (81012c0 <HAL_I2C_MspInit+0x8c>)
 8101258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810125c:	4a18      	ldr	r2, [pc, #96]	; (81012c0 <HAL_I2C_MspInit+0x8c>)
 810125e:	f043 0302 	orr.w	r3, r3, #2
 8101262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101266:	4b16      	ldr	r3, [pc, #88]	; (81012c0 <HAL_I2C_MspInit+0x8c>)
 8101268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126c:	f003 0302 	and.w	r3, r3, #2
 8101270:	613b      	str	r3, [r7, #16]
 8101272:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101274:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 810127a:	2312      	movs	r3, #18
 810127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810127e:	2300      	movs	r3, #0
 8101280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101282:	2300      	movs	r3, #0
 8101284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101286:	2304      	movs	r3, #4
 8101288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810128a:	f107 0314 	add.w	r3, r7, #20
 810128e:	4619      	mov	r1, r3
 8101290:	480c      	ldr	r0, [pc, #48]	; (81012c4 <HAL_I2C_MspInit+0x90>)
 8101292:	f003 fe53 	bl	8104f3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101296:	4b0a      	ldr	r3, [pc, #40]	; (81012c0 <HAL_I2C_MspInit+0x8c>)
 8101298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810129c:	4a08      	ldr	r2, [pc, #32]	; (81012c0 <HAL_I2C_MspInit+0x8c>)
 810129e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81012a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81012a6:	4b06      	ldr	r3, [pc, #24]	; (81012c0 <HAL_I2C_MspInit+0x8c>)
 81012a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81012ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81012b0:	60fb      	str	r3, [r7, #12]
 81012b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 81012b4:	bf00      	nop
 81012b6:	3728      	adds	r7, #40	; 0x28
 81012b8:	46bd      	mov	sp, r7
 81012ba:	bd80      	pop	{r7, pc}
 81012bc:	40005400 	.word	0x40005400
 81012c0:	58024400 	.word	0x58024400
 81012c4:	58020400 	.word	0x58020400

081012c8 <I2CRead>:
  }
}

/* USER CODE BEGIN 1 */
uint8_t I2CRead(uint16_t Address, uint8_t reg)
{
 81012c8:	b580      	push	{r7, lr}
 81012ca:	b088      	sub	sp, #32
 81012cc:	af04      	add	r7, sp, #16
 81012ce:	4603      	mov	r3, r0
 81012d0:	460a      	mov	r2, r1
 81012d2:	80fb      	strh	r3, [r7, #6]
 81012d4:	4613      	mov	r3, r2
 81012d6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;
	uint8_t value = 0x00;
 81012d8:	2300      	movs	r3, #0
 81012da:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(&hi2c1, Address, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 81012dc:	797b      	ldrb	r3, [r7, #5]
 81012de:	b29a      	uxth	r2, r3
 81012e0:	88f9      	ldrh	r1, [r7, #6]
 81012e2:	2332      	movs	r3, #50	; 0x32
 81012e4:	9302      	str	r3, [sp, #8]
 81012e6:	2301      	movs	r3, #1
 81012e8:	9301      	str	r3, [sp, #4]
 81012ea:	f107 030e 	add.w	r3, r7, #14
 81012ee:	9300      	str	r3, [sp, #0]
 81012f0:	2301      	movs	r3, #1
 81012f2:	4807      	ldr	r0, [pc, #28]	; (8101310 <I2CRead+0x48>)
 81012f4:	f004 f9c6 	bl	8105684 <HAL_I2C_Mem_Read>
 81012f8:	4603      	mov	r3, r0
 81012fa:	73fb      	strb	r3, [r7, #15]

	if(status !=HAL_OK)
 81012fc:	7bfb      	ldrb	r3, [r7, #15]
 81012fe:	2b00      	cmp	r3, #0
 8101300:	d001      	beq.n	8101306 <I2CRead+0x3e>
	{
		ErrorHandler();
 8101302:	f000 f82b 	bl	810135c <ErrorHandler>
//	else
//	{
//		LED1_ON();
//	}

	return value;
 8101306:	7bbb      	ldrb	r3, [r7, #14]
}
 8101308:	4618      	mov	r0, r3
 810130a:	3710      	adds	r7, #16
 810130c:	46bd      	mov	sp, r7
 810130e:	bd80      	pop	{r7, pc}
 8101310:	10004b38 	.word	0x10004b38

08101314 <I2CWrite>:

void I2CWrite(uint16_t Address, uint8_t reg, uint8_t value)
{
 8101314:	b580      	push	{r7, lr}
 8101316:	b088      	sub	sp, #32
 8101318:	af04      	add	r7, sp, #16
 810131a:	4603      	mov	r3, r0
 810131c:	80fb      	strh	r3, [r7, #6]
 810131e:	460b      	mov	r3, r1
 8101320:	717b      	strb	r3, [r7, #5]
 8101322:	4613      	mov	r3, r2
 8101324:	713b      	strb	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, Address, (uint16_t) reg, I2C_MEMADD_SIZE_8BIT, &value, 1, 50);
 8101326:	797b      	ldrb	r3, [r7, #5]
 8101328:	b29a      	uxth	r2, r3
 810132a:	88f9      	ldrh	r1, [r7, #6]
 810132c:	2332      	movs	r3, #50	; 0x32
 810132e:	9302      	str	r3, [sp, #8]
 8101330:	2301      	movs	r3, #1
 8101332:	9301      	str	r3, [sp, #4]
 8101334:	1d3b      	adds	r3, r7, #4
 8101336:	9300      	str	r3, [sp, #0]
 8101338:	2301      	movs	r3, #1
 810133a:	4807      	ldr	r0, [pc, #28]	; (8101358 <I2CWrite+0x44>)
 810133c:	f004 f88e 	bl	810545c <HAL_I2C_Mem_Write>
 8101340:	4603      	mov	r3, r0
 8101342:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK)
 8101344:	7bfb      	ldrb	r3, [r7, #15]
 8101346:	2b00      	cmp	r3, #0
 8101348:	d001      	beq.n	810134e <I2CWrite+0x3a>
	{
		ErrorHandler();
 810134a:	f000 f807 	bl	810135c <ErrorHandler>
	else
	{
		//LED1_ON();
	}

}
 810134e:	bf00      	nop
 8101350:	3710      	adds	r7, #16
 8101352:	46bd      	mov	sp, r7
 8101354:	bd80      	pop	{r7, pc}
 8101356:	bf00      	nop
 8101358:	10004b38 	.word	0x10004b38

0810135c <ErrorHandler>:

void ErrorHandler(void)
{
 810135c:	b580      	push	{r7, lr}
 810135e:	af00      	add	r7, sp, #0
	LED3_ON();
 8101360:	2201      	movs	r2, #1
 8101362:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101366:	4802      	ldr	r0, [pc, #8]	; (8101370 <ErrorHandler+0x14>)
 8101368:	f003 ff98 	bl	810529c <HAL_GPIO_WritePin>
}
 810136c:	bf00      	nop
 810136e:	bd80      	pop	{r7, pc}
 8101370:	58020400 	.word	0x58020400

08101374 <ReadSensorID>:

uint8_t ReadSensorID (uint16_t DeviceAddr, uint8_t reg)
{
 8101374:	b580      	push	{r7, lr}
 8101376:	b082      	sub	sp, #8
 8101378:	af00      	add	r7, sp, #0
 810137a:	4603      	mov	r3, r0
 810137c:	460a      	mov	r2, r1
 810137e:	80fb      	strh	r3, [r7, #6]
 8101380:	4613      	mov	r3, r2
 8101382:	717b      	strb	r3, [r7, #5]
	return I2CRead(DeviceAddr, reg);
 8101384:	797a      	ldrb	r2, [r7, #5]
 8101386:	88fb      	ldrh	r3, [r7, #6]
 8101388:	4611      	mov	r1, r2
 810138a:	4618      	mov	r0, r3
 810138c:	f7ff ff9c 	bl	81012c8 <I2CRead>
 8101390:	4603      	mov	r3, r0
}
 8101392:	4618      	mov	r0, r3
 8101394:	3708      	adds	r7, #8
 8101396:	46bd      	mov	sp, r7
 8101398:	bd80      	pop	{r7, pc}

0810139a <LSM303StartUp>:




void LSM303StartUp(void)
{
 810139a:	b580      	push	{r7, lr}
 810139c:	af00      	add	r7, sp, #0
	// Wait for sensor to initialise
	HAL_Delay(100);
 810139e:	2064      	movs	r0, #100	; 0x64
 81013a0:	f001 f99c 	bl	81026dc <HAL_Delay>

	// check Sensor is present
	if(ReadSensorID(LSM303_ACC_ADDR, LSM303_REG_WHO_AM_I) == 0x33)
 81013a4:	210f      	movs	r1, #15
 81013a6:	2032      	movs	r0, #50	; 0x32
 81013a8:	f7ff ffe4 	bl	8101374 <ReadSensorID>
 81013ac:	4603      	mov	r3, r0
 81013ae:	2b33      	cmp	r3, #51	; 0x33
 81013b0:	d001      	beq.n	81013b6 <LSM303StartUp+0x1c>
		//LED1_ON();
	}

	else
	{
		ErrorHandler();
 81013b2:	f7ff ffd3 	bl	810135c <ErrorHandler>
	}

}
 81013b6:	bf00      	nop
 81013b8:	bd80      	pop	{r7, pc}

081013ba <LSM303AccInit>:

void LSM303AccInit ()
{
 81013ba:	b580      	push	{r7, lr}
 81013bc:	b082      	sub	sp, #8
 81013be:	af00      	add	r7, sp, #0
	LSM303StartUp();
 81013c0:	f7ff ffeb 	bl	810139a <LSM303StartUp>
	uint16_t InitStruct = 0x00;
 81013c4:	2300      	movs	r3, #0
 81013c6:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 81013c8:	2300      	movs	r3, #0
 81013ca:	717b      	strb	r3, [r7, #5]

	InitStruct |= (NORMAL_MODE | ODR_400HZ | X_EN | Y_EN | Z_EN) ;
 81013cc:	88fb      	ldrh	r3, [r7, #6]
 81013ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81013d2:	80fb      	strh	r3, [r7, #6]
	InitStruct |= ((BDU_CONTINUOUS | BLE_LSB | FS_2G | HR_EN) << 8);
 81013d4:	88fb      	ldrh	r3, [r7, #6]
 81013d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 81013da:	80fb      	strh	r3, [r7, #6]

	ctrl = (uint8_t)InitStruct;
 81013dc:	88fb      	ldrh	r3, [r7, #6]
 81013de:	717b      	strb	r3, [r7, #5]
    LSM303Write(LSM303_ACC_ADDR, CTRL_REG1_A, ctrl);
 81013e0:	797b      	ldrb	r3, [r7, #5]
 81013e2:	461a      	mov	r2, r3
 81013e4:	2120      	movs	r1, #32
 81013e6:	2032      	movs	r0, #50	; 0x32
 81013e8:	f000 f85b 	bl	81014a2 <LSM303Write>
    ctrl = (uint8_t)(InitStruct << 8);
 81013ec:	2300      	movs	r3, #0
 81013ee:	717b      	strb	r3, [r7, #5]
    LSM303Write(LSM303_ACC_ADDR, CTRL_REG4_A, ctrl);
 81013f0:	797b      	ldrb	r3, [r7, #5]
 81013f2:	461a      	mov	r2, r3
 81013f4:	2123      	movs	r1, #35	; 0x23
 81013f6:	2032      	movs	r0, #50	; 0x32
 81013f8:	f000 f853 	bl	81014a2 <LSM303Write>

    // Configure Filter structure for the accelerometer
    InitStruct = (uint8_t) (HPM_NORMAL | HPCF_16 | HPF_AO1_DISABLE | HPF_AO2_DISABLE);
 81013fc:	2390      	movs	r3, #144	; 0x90
 81013fe:	80fb      	strh	r3, [r7, #6]
    FilterConfig(InitStruct);
 8101400:	88fb      	ldrh	r3, [r7, #6]
 8101402:	b2db      	uxtb	r3, r3
 8101404:	4618      	mov	r0, r3
 8101406:	f000 f804 	bl	8101412 <FilterConfig>


}
 810140a:	bf00      	nop
 810140c:	3708      	adds	r7, #8
 810140e:	46bd      	mov	sp, r7
 8101410:	bd80      	pop	{r7, pc}

08101412 <FilterConfig>:

// configure filter for the Sensor
void FilterConfig(uint8_t FilterStruct)
{
 8101412:	b580      	push	{r7, lr}
 8101414:	b084      	sub	sp, #16
 8101416:	af00      	add	r7, sp, #0
 8101418:	4603      	mov	r3, r0
 810141a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_tmp;

	reg_tmp = LSM303Read(LSM303_ACC_ADDR, CTRL_REG2_A);
 810141c:	2121      	movs	r1, #33	; 0x21
 810141e:	2032      	movs	r0, #50	; 0x32
 8101420:	f000 f852 	bl	81014c8 <LSM303Read>
 8101424:	4603      	mov	r3, r0
 8101426:	73fb      	strb	r3, [r7, #15]

	reg_tmp &= 0x0C;
 8101428:	7bfb      	ldrb	r3, [r7, #15]
 810142a:	f003 030c 	and.w	r3, r3, #12
 810142e:	73fb      	strb	r3, [r7, #15]
	reg_tmp |= FilterStruct;
 8101430:	7bfa      	ldrb	r2, [r7, #15]
 8101432:	79fb      	ldrb	r3, [r7, #7]
 8101434:	4313      	orrs	r3, r2
 8101436:	73fb      	strb	r3, [r7, #15]

	// Write value to the Register
	LSM303Write(LSM303_ACC_ADDR, CTRL_REG2_A, reg_tmp);
 8101438:	7bfb      	ldrb	r3, [r7, #15]
 810143a:	461a      	mov	r2, r3
 810143c:	2121      	movs	r1, #33	; 0x21
 810143e:	2032      	movs	r0, #50	; 0x32
 8101440:	f000 f82f 	bl	81014a2 <LSM303Write>
}
 8101444:	bf00      	nop
 8101446:	3710      	adds	r7, #16
 8101448:	46bd      	mov	sp, r7
 810144a:	bd80      	pop	{r7, pc}

0810144c <LSM303MagInit>:

void LSM303MagInit()
{
 810144c:	b580      	push	{r7, lr}
 810144e:	b082      	sub	sp, #8
 8101450:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8101452:	2300      	movs	r3, #0
 8101454:	71fb      	strb	r3, [r7, #7]
	uint32_t InitStruct = 0x00;
 8101456:	2300      	movs	r3, #0
 8101458:	603b      	str	r3, [r7, #0]

	InitStruct |= (TEMP_DISABLE | ODR_220HZ );
 810145a:	683b      	ldr	r3, [r7, #0]
 810145c:	f043 031c 	orr.w	r3, r3, #28
 8101460:	603b      	str	r3, [r7, #0]
	InitStruct |= (LSM303_MAGGAIN_4_0) << 8;
 8101462:	683b      	ldr	r3, [r7, #0]
 8101464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101468:	603b      	str	r3, [r7, #0]
	InitStruct |=  (CONTINUOUS_CONVERSION) << 16;

	ctrl = (uint8_t)InitStruct;
 810146a:	683b      	ldr	r3, [r7, #0]
 810146c:	71fb      	strb	r3, [r7, #7]
	LSM303Write(LSM303_MAG_ADDR, CRA_REG_M, ctrl);
 810146e:	79fb      	ldrb	r3, [r7, #7]
 8101470:	461a      	mov	r2, r3
 8101472:	2100      	movs	r1, #0
 8101474:	203c      	movs	r0, #60	; 0x3c
 8101476:	f000 f814 	bl	81014a2 <LSM303Write>
	ctrl = (uint8_t) (InitStruct << 8);
 810147a:	2300      	movs	r3, #0
 810147c:	71fb      	strb	r3, [r7, #7]
	LSM303Write(LSM303_MAG_ADDR, CRB_REG_M, ctrl);
 810147e:	79fb      	ldrb	r3, [r7, #7]
 8101480:	461a      	mov	r2, r3
 8101482:	2101      	movs	r1, #1
 8101484:	203c      	movs	r0, #60	; 0x3c
 8101486:	f000 f80c 	bl	81014a2 <LSM303Write>
	ctrl = (uint8_t) (InitStruct << 16);
 810148a:	2300      	movs	r3, #0
 810148c:	71fb      	strb	r3, [r7, #7]
	LSM303Write(LSM303_MAG_ADDR, MR_REG_M, ctrl);
 810148e:	79fb      	ldrb	r3, [r7, #7]
 8101490:	461a      	mov	r2, r3
 8101492:	2102      	movs	r1, #2
 8101494:	203c      	movs	r0, #60	; 0x3c
 8101496:	f000 f804 	bl	81014a2 <LSM303Write>

}
 810149a:	bf00      	nop
 810149c:	3708      	adds	r7, #8
 810149e:	46bd      	mov	sp, r7
 81014a0:	bd80      	pop	{r7, pc}

081014a2 <LSM303Write>:

void LSM303Write(uint16_t DeviceAddr, uint8_t reg, uint8_t value)
{
 81014a2:	b580      	push	{r7, lr}
 81014a4:	b082      	sub	sp, #8
 81014a6:	af00      	add	r7, sp, #0
 81014a8:	4603      	mov	r3, r0
 81014aa:	80fb      	strh	r3, [r7, #6]
 81014ac:	460b      	mov	r3, r1
 81014ae:	717b      	strb	r3, [r7, #5]
 81014b0:	4613      	mov	r3, r2
 81014b2:	713b      	strb	r3, [r7, #4]
	I2CWrite(DeviceAddr, reg, value);
 81014b4:	793a      	ldrb	r2, [r7, #4]
 81014b6:	7979      	ldrb	r1, [r7, #5]
 81014b8:	88fb      	ldrh	r3, [r7, #6]
 81014ba:	4618      	mov	r0, r3
 81014bc:	f7ff ff2a 	bl	8101314 <I2CWrite>
}
 81014c0:	bf00      	nop
 81014c2:	3708      	adds	r7, #8
 81014c4:	46bd      	mov	sp, r7
 81014c6:	bd80      	pop	{r7, pc}

081014c8 <LSM303Read>:


uint8_t LSM303Read(uint16_t DeviceAddr, uint8_t reg)
{
 81014c8:	b580      	push	{r7, lr}
 81014ca:	b082      	sub	sp, #8
 81014cc:	af00      	add	r7, sp, #0
 81014ce:	4603      	mov	r3, r0
 81014d0:	460a      	mov	r2, r1
 81014d2:	80fb      	strh	r3, [r7, #6]
 81014d4:	4613      	mov	r3, r2
 81014d6:	717b      	strb	r3, [r7, #5]
	return I2CRead(DeviceAddr, reg);
 81014d8:	797a      	ldrb	r2, [r7, #5]
 81014da:	88fb      	ldrh	r3, [r7, #6]
 81014dc:	4611      	mov	r1, r2
 81014de:	4618      	mov	r0, r3
 81014e0:	f7ff fef2 	bl	81012c8 <I2CRead>
 81014e4:	4603      	mov	r3, r0
}
 81014e6:	4618      	mov	r0, r3
 81014e8:	3708      	adds	r7, #8
 81014ea:	46bd      	mov	sp, r7
 81014ec:	bd80      	pop	{r7, pc}

081014ee <AccGetXYZ>:

void AccGetXYZ(int16_t* pData)
{
 81014ee:	b580      	push	{r7, lr}
 81014f0:	b088      	sub	sp, #32
 81014f2:	af00      	add	r7, sp, #0
 81014f4:	6078      	str	r0, [r7, #4]
	int16_t raw_Data [3];
	uint8_t ctrlx[2] = {0,0};
 81014f6:	2300      	movs	r3, #0
 81014f8:	753b      	strb	r3, [r7, #20]
 81014fa:	2300      	movs	r3, #0
 81014fc:	757b      	strb	r3, [r7, #21]
	int8_t buffer [6];
	uint8_t i = 0;
 81014fe:	2300      	movs	r3, #0
 8101500:	77fb      	strb	r3, [r7, #31]
	uint8_t sensitivity = SENS_2G;
 8101502:	2301      	movs	r3, #1
 8101504:	77bb      	strb	r3, [r7, #30]

	// read acceleration control content
	ctrlx[0] = LSM303Read(LSM303_ACC_ADDR, CTRL_REG4_A);
 8101506:	2123      	movs	r1, #35	; 0x23
 8101508:	2032      	movs	r0, #50	; 0x32
 810150a:	f7ff ffdd 	bl	81014c8 <LSM303Read>
 810150e:	4603      	mov	r3, r0
 8101510:	753b      	strb	r3, [r7, #20]
	ctrlx[1] = LSM303Read(LSM303_ACC_ADDR, CTRL_REG5_A);
 8101512:	2124      	movs	r1, #36	; 0x24
 8101514:	2032      	movs	r0, #50	; 0x32
 8101516:	f7ff ffd7 	bl	81014c8 <LSM303Read>
 810151a:	4603      	mov	r3, r0
 810151c:	757b      	strb	r3, [r7, #21]

	// Read Output Register
	buffer[0] = LSM303Read(LSM303_ACC_ADDR, OUT_X_L_A);
 810151e:	2128      	movs	r1, #40	; 0x28
 8101520:	2032      	movs	r0, #50	; 0x32
 8101522:	f7ff ffd1 	bl	81014c8 <LSM303Read>
 8101526:	4603      	mov	r3, r0
 8101528:	b25b      	sxtb	r3, r3
 810152a:	733b      	strb	r3, [r7, #12]
	buffer[1] = LSM303Read(LSM303_ACC_ADDR, OUT_X_H_A);
 810152c:	2129      	movs	r1, #41	; 0x29
 810152e:	2032      	movs	r0, #50	; 0x32
 8101530:	f7ff ffca 	bl	81014c8 <LSM303Read>
 8101534:	4603      	mov	r3, r0
 8101536:	b25b      	sxtb	r3, r3
 8101538:	737b      	strb	r3, [r7, #13]
	buffer[2] = LSM303Read(LSM303_ACC_ADDR, OUT_Y_L_A);
 810153a:	212a      	movs	r1, #42	; 0x2a
 810153c:	2032      	movs	r0, #50	; 0x32
 810153e:	f7ff ffc3 	bl	81014c8 <LSM303Read>
 8101542:	4603      	mov	r3, r0
 8101544:	b25b      	sxtb	r3, r3
 8101546:	73bb      	strb	r3, [r7, #14]
	buffer[3] = LSM303Read(LSM303_ACC_ADDR, OUT_Y_H_A);
 8101548:	212b      	movs	r1, #43	; 0x2b
 810154a:	2032      	movs	r0, #50	; 0x32
 810154c:	f7ff ffbc 	bl	81014c8 <LSM303Read>
 8101550:	4603      	mov	r3, r0
 8101552:	b25b      	sxtb	r3, r3
 8101554:	73fb      	strb	r3, [r7, #15]
	buffer[4] = LSM303Read(LSM303_ACC_ADDR, OUT_Z_L_A);
 8101556:	212c      	movs	r1, #44	; 0x2c
 8101558:	2032      	movs	r0, #50	; 0x32
 810155a:	f7ff ffb5 	bl	81014c8 <LSM303Read>
 810155e:	4603      	mov	r3, r0
 8101560:	b25b      	sxtb	r3, r3
 8101562:	743b      	strb	r3, [r7, #16]
	buffer[5] = LSM303Read(LSM303_ACC_ADDR, OUT_Z_H_A);
 8101564:	212d      	movs	r1, #45	; 0x2d
 8101566:	2032      	movs	r0, #50	; 0x32
 8101568:	f7ff ffae 	bl	81014c8 <LSM303Read>
 810156c:	4603      	mov	r3, r0
 810156e:	b25b      	sxtb	r3, r3
 8101570:	747b      	strb	r3, [r7, #17]

	// check REG4 alignment
	if(!(ctrlx[0] && BLE_MSB))
 8101572:	7d3b      	ldrb	r3, [r7, #20]
 8101574:	2b00      	cmp	r3, #0
 8101576:	d126      	bne.n	81015c6 <AccGetXYZ+0xd8>
	{
		for (i = 0; i < 3; i++)
 8101578:	2300      	movs	r3, #0
 810157a:	77fb      	strb	r3, [r7, #31]
 810157c:	e01f      	b.n	81015be <AccGetXYZ+0xd0>
		{
			raw_Data[i] = ((int16_t) ((uint16_t)buffer[2*i+1] << 8) + buffer[2*i] );
 810157e:	7ffb      	ldrb	r3, [r7, #31]
 8101580:	005b      	lsls	r3, r3, #1
 8101582:	3301      	adds	r3, #1
 8101584:	f107 0220 	add.w	r2, r7, #32
 8101588:	4413      	add	r3, r2
 810158a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 810158e:	b29b      	uxth	r3, r3
 8101590:	021b      	lsls	r3, r3, #8
 8101592:	b29a      	uxth	r2, r3
 8101594:	7ffb      	ldrb	r3, [r7, #31]
 8101596:	005b      	lsls	r3, r3, #1
 8101598:	f107 0120 	add.w	r1, r7, #32
 810159c:	440b      	add	r3, r1
 810159e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 81015a2:	b29b      	uxth	r3, r3
 81015a4:	4413      	add	r3, r2
 81015a6:	b29a      	uxth	r2, r3
 81015a8:	7ffb      	ldrb	r3, [r7, #31]
 81015aa:	b212      	sxth	r2, r2
 81015ac:	005b      	lsls	r3, r3, #1
 81015ae:	f107 0120 	add.w	r1, r7, #32
 81015b2:	440b      	add	r3, r1
 81015b4:	f823 2c08 	strh.w	r2, [r3, #-8]
		for (i = 0; i < 3; i++)
 81015b8:	7ffb      	ldrb	r3, [r7, #31]
 81015ba:	3301      	adds	r3, #1
 81015bc:	77fb      	strb	r3, [r7, #31]
 81015be:	7ffb      	ldrb	r3, [r7, #31]
 81015c0:	2b02      	cmp	r3, #2
 81015c2:	d9dc      	bls.n	810157e <AccGetXYZ+0x90>
 81015c4:	e025      	b.n	8101612 <AccGetXYZ+0x124>
		}
	}

	else // Big Endian Mode
	{
		for (i = 0; i < 3; i++)
 81015c6:	2300      	movs	r3, #0
 81015c8:	77fb      	strb	r3, [r7, #31]
 81015ca:	e01f      	b.n	810160c <AccGetXYZ+0x11e>
		{
			raw_Data[i] = ((int16_t) ((uint16_t)buffer[2*i] << 8) + buffer[2*i+1] );
 81015cc:	7ffb      	ldrb	r3, [r7, #31]
 81015ce:	005b      	lsls	r3, r3, #1
 81015d0:	f107 0220 	add.w	r2, r7, #32
 81015d4:	4413      	add	r3, r2
 81015d6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 81015da:	b29b      	uxth	r3, r3
 81015dc:	021b      	lsls	r3, r3, #8
 81015de:	b29a      	uxth	r2, r3
 81015e0:	7ffb      	ldrb	r3, [r7, #31]
 81015e2:	005b      	lsls	r3, r3, #1
 81015e4:	3301      	adds	r3, #1
 81015e6:	f107 0120 	add.w	r1, r7, #32
 81015ea:	440b      	add	r3, r1
 81015ec:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 81015f0:	b29b      	uxth	r3, r3
 81015f2:	4413      	add	r3, r2
 81015f4:	b29a      	uxth	r2, r3
 81015f6:	7ffb      	ldrb	r3, [r7, #31]
 81015f8:	b212      	sxth	r2, r2
 81015fa:	005b      	lsls	r3, r3, #1
 81015fc:	f107 0120 	add.w	r1, r7, #32
 8101600:	440b      	add	r3, r1
 8101602:	f823 2c08 	strh.w	r2, [r3, #-8]
		for (i = 0; i < 3; i++)
 8101606:	7ffb      	ldrb	r3, [r7, #31]
 8101608:	3301      	adds	r3, #1
 810160a:	77fb      	strb	r3, [r7, #31]
 810160c:	7ffb      	ldrb	r3, [r7, #31]
 810160e:	2b02      	cmp	r3, #2
 8101610:	d9dc      	bls.n	81015cc <AccGetXYZ+0xde>
		}
	}

	// Switch sensitvity value in CTRL4
	switch(ctrlx[0] & FS_16G)
 8101612:	7d3b      	ldrb	r3, [r7, #20]
 8101614:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8101618:	2b10      	cmp	r3, #16
 810161a:	d00c      	beq.n	8101636 <AccGetXYZ+0x148>
 810161c:	2b10      	cmp	r3, #16
 810161e:	dc02      	bgt.n	8101626 <AccGetXYZ+0x138>
 8101620:	2b00      	cmp	r3, #0
 8101622:	d005      	beq.n	8101630 <AccGetXYZ+0x142>
 8101624:	e010      	b.n	8101648 <AccGetXYZ+0x15a>
 8101626:	2b20      	cmp	r3, #32
 8101628:	d008      	beq.n	810163c <AccGetXYZ+0x14e>
 810162a:	2b30      	cmp	r3, #48	; 0x30
 810162c:	d009      	beq.n	8101642 <AccGetXYZ+0x154>
 810162e:	e00b      	b.n	8101648 <AccGetXYZ+0x15a>
	{
		case FS_2G:
			sensitivity = SENS_2G;
 8101630:	2301      	movs	r3, #1
 8101632:	77bb      	strb	r3, [r7, #30]
		break;
 8101634:	e008      	b.n	8101648 <AccGetXYZ+0x15a>

		case FS_4G:
			sensitivity = SENS_4G;
 8101636:	2302      	movs	r3, #2
 8101638:	77bb      	strb	r3, [r7, #30]
		break;
 810163a:	e005      	b.n	8101648 <AccGetXYZ+0x15a>

		case FS_8G:
			sensitivity = SENS_8G;
 810163c:	2304      	movs	r3, #4
 810163e:	77bb      	strb	r3, [r7, #30]
		break;
 8101640:	e002      	b.n	8101648 <AccGetXYZ+0x15a>

		case FS_16G:
			sensitivity = SENS_16G;
 8101642:	230c      	movs	r3, #12
 8101644:	77bb      	strb	r3, [r7, #30]
		break;
 8101646:	bf00      	nop
	}

	// Obtain value in mg for each axis
	for(i = 0; i < 3; i++)
 8101648:	2300      	movs	r3, #0
 810164a:	77fb      	strb	r3, [r7, #31]
 810164c:	e015      	b.n	810167a <AccGetXYZ+0x18c>
	{
		pData[i] = (raw_Data[i] * sensitivity);
 810164e:	7ffb      	ldrb	r3, [r7, #31]
 8101650:	005b      	lsls	r3, r3, #1
 8101652:	f107 0220 	add.w	r2, r7, #32
 8101656:	4413      	add	r3, r2
 8101658:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 810165c:	b29a      	uxth	r2, r3
 810165e:	7fbb      	ldrb	r3, [r7, #30]
 8101660:	b29b      	uxth	r3, r3
 8101662:	fb12 f303 	smulbb	r3, r2, r3
 8101666:	b299      	uxth	r1, r3
 8101668:	7ffb      	ldrb	r3, [r7, #31]
 810166a:	005b      	lsls	r3, r3, #1
 810166c:	687a      	ldr	r2, [r7, #4]
 810166e:	4413      	add	r3, r2
 8101670:	b20a      	sxth	r2, r1
 8101672:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < 3; i++)
 8101674:	7ffb      	ldrb	r3, [r7, #31]
 8101676:	3301      	adds	r3, #1
 8101678:	77fb      	strb	r3, [r7, #31]
 810167a:	7ffb      	ldrb	r3, [r7, #31]
 810167c:	2b02      	cmp	r3, #2
 810167e:	d9e6      	bls.n	810164e <AccGetXYZ+0x160>
	}

}
 8101680:	bf00      	nop
 8101682:	3720      	adds	r7, #32
 8101684:	46bd      	mov	sp, r7
 8101686:	bd80      	pop	{r7, pc}

08101688 <LSM303GetGs>:
	// convert accelerometer values to g

}

void LSM303GetGs(Acceleration* data)
{
 8101688:	b590      	push	{r4, r7, lr}
 810168a:	b085      	sub	sp, #20
 810168c:	af00      	add	r7, sp, #0
 810168e:	6078      	str	r0, [r7, #4]
	int16_t buffer[3] = {0};
 8101690:	f107 0308 	add.w	r3, r7, #8
 8101694:	2200      	movs	r2, #0
 8101696:	601a      	str	r2, [r3, #0]
 8101698:	809a      	strh	r2, [r3, #4]
	AccGetXYZ(buffer);
 810169a:	f107 0308 	add.w	r3, r7, #8
 810169e:	4618      	mov	r0, r3
 81016a0:	f7ff ff25 	bl	81014ee <AccGetXYZ>

	data->x = (float_t)(buffer[0] >> 4)  / 1000.0;
 81016a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 81016a8:	111b      	asrs	r3, r3, #4
 81016aa:	b21b      	sxth	r3, r3
 81016ac:	ee07 3a90 	vmov	s15, r3
 81016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81016b4:	eddf 6a32 	vldr	s13, [pc, #200]	; 8101780 <LSM303GetGs+0xf8>
 81016b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	edc3 7a00 	vstr	s15, [r3]
	data->y = (float_t)(buffer[0] >> 4)  / 1000.0;
 81016c2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 81016c6:	111b      	asrs	r3, r3, #4
 81016c8:	b21b      	sxth	r3, r3
 81016ca:	ee07 3a90 	vmov	s15, r3
 81016ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81016d2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8101780 <LSM303GetGs+0xf8>
 81016d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (float_t)(buffer[0] >> 4)  / 1000.0;
 81016e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 81016e4:	111b      	asrs	r3, r3, #4
 81016e6:	b21b      	sxth	r3, r3
 81016e8:	ee07 3a90 	vmov	s15, r3
 81016ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81016f0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8101780 <LSM303GetGs+0xf8>
 81016f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 81016f8:	687b      	ldr	r3, [r7, #4]
 81016fa:	edc3 7a02 	vstr	s15, [r3, #8]

	// convert to m/s^2
	data->x *=G_TO_MS2;
 81016fe:	687b      	ldr	r3, [r7, #4]
 8101700:	681b      	ldr	r3, [r3, #0]
 8101702:	4618      	mov	r0, r3
 8101704:	f7fe ff58 	bl	81005b8 <__aeabi_f2d>
 8101708:	a31b      	add	r3, pc, #108	; (adr r3, 8101778 <LSM303GetGs+0xf0>)
 810170a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810170e:	f7fe ffab 	bl	8100668 <__aeabi_dmul>
 8101712:	4603      	mov	r3, r0
 8101714:	460c      	mov	r4, r1
 8101716:	4618      	mov	r0, r3
 8101718:	4621      	mov	r1, r4
 810171a:	f7ff fa7d 	bl	8100c18 <__aeabi_d2f>
 810171e:	4602      	mov	r2, r0
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	601a      	str	r2, [r3, #0]
	data->x *=G_TO_MS2;
 8101724:	687b      	ldr	r3, [r7, #4]
 8101726:	681b      	ldr	r3, [r3, #0]
 8101728:	4618      	mov	r0, r3
 810172a:	f7fe ff45 	bl	81005b8 <__aeabi_f2d>
 810172e:	a312      	add	r3, pc, #72	; (adr r3, 8101778 <LSM303GetGs+0xf0>)
 8101730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101734:	f7fe ff98 	bl	8100668 <__aeabi_dmul>
 8101738:	4603      	mov	r3, r0
 810173a:	460c      	mov	r4, r1
 810173c:	4618      	mov	r0, r3
 810173e:	4621      	mov	r1, r4
 8101740:	f7ff fa6a 	bl	8100c18 <__aeabi_d2f>
 8101744:	4602      	mov	r2, r0
 8101746:	687b      	ldr	r3, [r7, #4]
 8101748:	601a      	str	r2, [r3, #0]
	data->x *=G_TO_MS2;
 810174a:	687b      	ldr	r3, [r7, #4]
 810174c:	681b      	ldr	r3, [r3, #0]
 810174e:	4618      	mov	r0, r3
 8101750:	f7fe ff32 	bl	81005b8 <__aeabi_f2d>
 8101754:	a308      	add	r3, pc, #32	; (adr r3, 8101778 <LSM303GetGs+0xf0>)
 8101756:	e9d3 2300 	ldrd	r2, r3, [r3]
 810175a:	f7fe ff85 	bl	8100668 <__aeabi_dmul>
 810175e:	4603      	mov	r3, r0
 8101760:	460c      	mov	r4, r1
 8101762:	4618      	mov	r0, r3
 8101764:	4621      	mov	r1, r4
 8101766:	f7ff fa57 	bl	8100c18 <__aeabi_d2f>
 810176a:	4602      	mov	r2, r0
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	601a      	str	r2, [r3, #0]
}
 8101770:	bf00      	nop
 8101772:	3714      	adds	r7, #20
 8101774:	46bd      	mov	sp, r7
 8101776:	bd90      	pop	{r4, r7, pc}
 8101778:	3a92a305 	.word	0x3a92a305
 810177c:	40239d01 	.word	0x40239d01
 8101780:	447a0000 	.word	0x447a0000

08101784 <MagGetXYZ>:

}


void MagGetXYZ(int16_t* pData)
{
 8101784:	b580      	push	{r7, lr}
 8101786:	b084      	sub	sp, #16
 8101788:	af00      	add	r7, sp, #0
 810178a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[6];
	uint8_t i = 0;
 810178c:	2300      	movs	r3, #0
 810178e:	73fb      	strb	r3, [r7, #15]

	buffer[0] = LSM303Read(LSM303_MAG_ADDR, OUT_X_H_M);
 8101790:	2103      	movs	r1, #3
 8101792:	203c      	movs	r0, #60	; 0x3c
 8101794:	f7ff fe98 	bl	81014c8 <LSM303Read>
 8101798:	4603      	mov	r3, r0
 810179a:	723b      	strb	r3, [r7, #8]
	buffer[1] = LSM303Read(LSM303_MAG_ADDR, OUT_X_L_M);
 810179c:	2104      	movs	r1, #4
 810179e:	203c      	movs	r0, #60	; 0x3c
 81017a0:	f7ff fe92 	bl	81014c8 <LSM303Read>
 81017a4:	4603      	mov	r3, r0
 81017a6:	727b      	strb	r3, [r7, #9]
	buffer[2] = LSM303Read(LSM303_MAG_ADDR, OUT_Y_H_M);
 81017a8:	2107      	movs	r1, #7
 81017aa:	203c      	movs	r0, #60	; 0x3c
 81017ac:	f7ff fe8c 	bl	81014c8 <LSM303Read>
 81017b0:	4603      	mov	r3, r0
 81017b2:	72bb      	strb	r3, [r7, #10]
	buffer[3] = LSM303Read(LSM303_MAG_ADDR, OUT_Y_L_M);
 81017b4:	2108      	movs	r1, #8
 81017b6:	203c      	movs	r0, #60	; 0x3c
 81017b8:	f7ff fe86 	bl	81014c8 <LSM303Read>
 81017bc:	4603      	mov	r3, r0
 81017be:	72fb      	strb	r3, [r7, #11]
	buffer[4] = LSM303Read(LSM303_MAG_ADDR, OUT_Z_H_M);
 81017c0:	2105      	movs	r1, #5
 81017c2:	203c      	movs	r0, #60	; 0x3c
 81017c4:	f7ff fe80 	bl	81014c8 <LSM303Read>
 81017c8:	4603      	mov	r3, r0
 81017ca:	733b      	strb	r3, [r7, #12]
	buffer[5] = LSM303Read(LSM303_MAG_ADDR, OUT_Z_L_M);
 81017cc:	2106      	movs	r1, #6
 81017ce:	203c      	movs	r0, #60	; 0x3c
 81017d0:	f7ff fe7a 	bl	81014c8 <LSM303Read>
 81017d4:	4603      	mov	r3, r0
 81017d6:	737b      	strb	r3, [r7, #13]

	for(i = 0; i < 3; i++)
 81017d8:	2300      	movs	r3, #0
 81017da:	73fb      	strb	r3, [r7, #15]
 81017dc:	e026      	b.n	810182c <MagGetXYZ+0xa8>
	{
		if(pData[i] != -4096 )
 81017de:	7bfb      	ldrb	r3, [r7, #15]
 81017e0:	005b      	lsls	r3, r3, #1
 81017e2:	687a      	ldr	r2, [r7, #4]
 81017e4:	4413      	add	r3, r2
 81017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 81017ea:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 81017ee:	d01a      	beq.n	8101826 <MagGetXYZ+0xa2>
		{
			pData[i] = ((uint16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i + 1]);
 81017f0:	7bfb      	ldrb	r3, [r7, #15]
 81017f2:	005b      	lsls	r3, r3, #1
 81017f4:	f107 0210 	add.w	r2, r7, #16
 81017f8:	4413      	add	r3, r2
 81017fa:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 81017fe:	b29b      	uxth	r3, r3
 8101800:	021b      	lsls	r3, r3, #8
 8101802:	b29a      	uxth	r2, r3
 8101804:	7bfb      	ldrb	r3, [r7, #15]
 8101806:	005b      	lsls	r3, r3, #1
 8101808:	3301      	adds	r3, #1
 810180a:	f107 0110 	add.w	r1, r7, #16
 810180e:	440b      	add	r3, r1
 8101810:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8101814:	b29b      	uxth	r3, r3
 8101816:	4413      	add	r3, r2
 8101818:	b299      	uxth	r1, r3
 810181a:	7bfb      	ldrb	r3, [r7, #15]
 810181c:	005b      	lsls	r3, r3, #1
 810181e:	687a      	ldr	r2, [r7, #4]
 8101820:	4413      	add	r3, r2
 8101822:	b20a      	sxth	r2, r1
 8101824:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < 3; i++)
 8101826:	7bfb      	ldrb	r3, [r7, #15]
 8101828:	3301      	adds	r3, #1
 810182a:	73fb      	strb	r3, [r7, #15]
 810182c:	7bfb      	ldrb	r3, [r7, #15]
 810182e:	2b02      	cmp	r3, #2
 8101830:	d9d5      	bls.n	81017de <MagGetXYZ+0x5a>
		}
	}
}
 8101832:	bf00      	nop
 8101834:	3710      	adds	r7, #16
 8101836:	46bd      	mov	sp, r7
 8101838:	bd80      	pop	{r7, pc}
	...

0810183c <LSM303GetGauss>:

void LSM303GetGauss(Gauss* data)
{
 810183c:	b580      	push	{r7, lr}
 810183e:	b086      	sub	sp, #24
 8101840:	af00      	add	r7, sp, #0
 8101842:	6078      	str	r0, [r7, #4]
	int16_t buffer[3] = {0};
 8101844:	f107 030c 	add.w	r3, r7, #12
 8101848:	2200      	movs	r2, #0
 810184a:	601a      	str	r2, [r3, #0]
 810184c:	809a      	strh	r2, [r3, #4]
	static int16_t tmp16;
	MagGetXYZ(buffer);
 810184e:	f107 030c 	add.w	r3, r7, #12
 8101852:	4618      	mov	r0, r3
 8101854:	f7ff ff96 	bl	8101784 <MagGetXYZ>
	uint16_t xy_sensitivity = M_SENSITIVITY_XY_4Ga;
 8101858:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 810185c:	82fb      	strh	r3, [r7, #22]
	uint16_t z_sensitivity = M_SENSITIVITY_Z_4Ga;
 810185e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8101862:	82bb      	strh	r3, [r7, #20]

	// correct for overflow
	tmp16 = buffer[0];
 8101864:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8101868:	4b2d      	ldr	r3, [pc, #180]	; (8101920 <LSM303GetGauss+0xe4>)
 810186a:	801a      	strh	r2, [r3, #0]
	if(tmp16 != -4096)
 810186c:	4b2c      	ldr	r3, [pc, #176]	; (8101920 <LSM303GetGauss+0xe4>)
 810186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101872:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8101876:	d003      	beq.n	8101880 <LSM303GetGauss+0x44>
	{
		buffer[0] = tmp16;
 8101878:	4b29      	ldr	r3, [pc, #164]	; (8101920 <LSM303GetGauss+0xe4>)
 810187a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810187e:	81bb      	strh	r3, [r7, #12]
	}

	tmp16 = buffer[1];
 8101880:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8101884:	4b26      	ldr	r3, [pc, #152]	; (8101920 <LSM303GetGauss+0xe4>)
 8101886:	801a      	strh	r2, [r3, #0]
	if(tmp16 != -4096)
 8101888:	4b25      	ldr	r3, [pc, #148]	; (8101920 <LSM303GetGauss+0xe4>)
 810188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 810188e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8101892:	d003      	beq.n	810189c <LSM303GetGauss+0x60>
	{
		buffer[1] = tmp16;
 8101894:	4b22      	ldr	r3, [pc, #136]	; (8101920 <LSM303GetGauss+0xe4>)
 8101896:	f9b3 3000 	ldrsh.w	r3, [r3]
 810189a:	81fb      	strh	r3, [r7, #14]
	}

	tmp16 = buffer[2];
 810189c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 81018a0:	4b1f      	ldr	r3, [pc, #124]	; (8101920 <LSM303GetGauss+0xe4>)
 81018a2:	801a      	strh	r2, [r3, #0]
	if(tmp16 != -4096)
 81018a4:	4b1e      	ldr	r3, [pc, #120]	; (8101920 <LSM303GetGauss+0xe4>)
 81018a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 81018aa:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 81018ae:	d003      	beq.n	81018b8 <LSM303GetGauss+0x7c>
	{
		buffer[2] = tmp16;
 81018b0:	4b1b      	ldr	r3, [pc, #108]	; (8101920 <LSM303GetGauss+0xe4>)
 81018b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 81018b6:	823b      	strh	r3, [r7, #16]
	}

	// using a MAGGain of 4.0
	data->x = (float_t) (buffer[0]) / (xy_sensitivity * 1.0f);
 81018b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 81018bc:	ee07 3a90 	vmov	s15, r3
 81018c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81018c4:	8afb      	ldrh	r3, [r7, #22]
 81018c6:	ee07 3a90 	vmov	s15, r3
 81018ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81018ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	edc3 7a00 	vstr	s15, [r3]
	data->y = (float_t) (buffer[1]) / (xy_sensitivity * 1.0f);
 81018d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81018dc:	ee07 3a90 	vmov	s15, r3
 81018e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81018e4:	8afb      	ldrh	r3, [r7, #22]
 81018e6:	ee07 3a90 	vmov	s15, r3
 81018ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 81018ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81018f2:	687b      	ldr	r3, [r7, #4]
 81018f4:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (float_t) (buffer[2]) / (z_sensitivity * 1.0f);
 81018f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 81018fc:	ee07 3a90 	vmov	s15, r3
 8101900:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101904:	8abb      	ldrh	r3, [r7, #20]
 8101906:	ee07 3a90 	vmov	s15, r3
 810190a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 810190e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101912:	687b      	ldr	r3, [r7, #4]
 8101914:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8101918:	bf00      	nop
 810191a:	3718      	adds	r7, #24
 810191c:	46bd      	mov	sp, r7
 810191e:	bd80      	pop	{r7, pc}
 8101920:	100001fc 	.word	0x100001fc

08101924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101924:	b580      	push	{r7, lr}
 8101926:	b082      	sub	sp, #8
 8101928:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810192a:	4b2d      	ldr	r3, [pc, #180]	; (81019e0 <main+0xbc>)
 810192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101930:	4a2b      	ldr	r2, [pc, #172]	; (81019e0 <main+0xbc>)
 8101932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810193a:	4b29      	ldr	r3, [pc, #164]	; (81019e0 <main+0xbc>)
 810193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101944:	607b      	str	r3, [r7, #4]
 8101946:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101948:	2001      	movs	r0, #1
 810194a:	f003 fcc1 	bl	81052d0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810194e:	f004 fadd 	bl	8105f0c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101952:	2201      	movs	r2, #1
 8101954:	2102      	movs	r1, #2
 8101956:	2000      	movs	r0, #0
 8101958:	f004 fa62 	bl	8105e20 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810195c:	4b21      	ldr	r3, [pc, #132]	; (81019e4 <main+0xc0>)
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	091b      	lsrs	r3, r3, #4
 8101962:	f003 030f 	and.w	r3, r3, #15
 8101966:	2b07      	cmp	r3, #7
 8101968:	d108      	bne.n	810197c <main+0x58>
 810196a:	4b1f      	ldr	r3, [pc, #124]	; (81019e8 <main+0xc4>)
 810196c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101970:	4a1d      	ldr	r2, [pc, #116]	; (81019e8 <main+0xc4>)
 8101972:	f043 0301 	orr.w	r3, r3, #1
 8101976:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810197a:	e007      	b.n	810198c <main+0x68>
 810197c:	4b1a      	ldr	r3, [pc, #104]	; (81019e8 <main+0xc4>)
 810197e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101982:	4a19      	ldr	r2, [pc, #100]	; (81019e8 <main+0xc4>)
 8101984:	f043 0301 	orr.w	r3, r3, #1
 8101988:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810198c:	f000 fe28 	bl	81025e0 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  LSM303AccInit();
 8101990:	f7ff fd13 	bl	81013ba <LSM303AccInit>
  LSM303MagInit();
 8101994:	f7ff fd5a 	bl	810144c <LSM303MagInit>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101998:	f7ff fbaa 	bl	81010f0 <MX_GPIO_Init>
  MX_DMA_Init();
 810199c:	f7ff fb28 	bl	8100ff0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 81019a0:	f000 fcb8 	bl	8102314 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 81019a4:	f000 faee 	bl	8101f84 <MX_TIM1_Init>
  MX_I2C1_Init();
 81019a8:	f7ff fc04 	bl	81011b4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 81019ac:	f000 fc66 	bl	810227c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ConfigGPS();
 81019b0:	f000 f822 	bl	81019f8 <ConfigGPS>
  ConfigPWMChannels();
 81019b4:	f000 f8fe 	bl	8101bb4 <ConfigPWMChannels>

  if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)data_byte, 1)== HAL_OK)
 81019b8:	2201      	movs	r2, #1
 81019ba:	490c      	ldr	r1, [pc, #48]	; (81019ec <main+0xc8>)
 81019bc:	480c      	ldr	r0, [pc, #48]	; (81019f0 <main+0xcc>)
 81019be:	f006 fa7b 	bl	8107eb8 <HAL_UART_Receive_DMA>
 81019c2:	4603      	mov	r3, r0
 81019c4:	2b00      	cmp	r3, #0
 81019c6:	d104      	bne.n	81019d2 <main+0xae>
  {
	  	LED2_ON();
 81019c8:	2201      	movs	r2, #1
 81019ca:	2102      	movs	r1, #2
 81019cc:	4809      	ldr	r0, [pc, #36]	; (81019f4 <main+0xd0>)
 81019ce:	f003 fc65 	bl	810529c <HAL_GPIO_WritePin>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81019d2:	f007 fe13 	bl	81095fc <osKernelInitialize>
  MX_FREERTOS_Init();
 81019d6:	f7ff fb33 	bl	8101040 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81019da:	f007 fe43 	bl	8109664 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81019de:	e7fe      	b.n	81019de <main+0xba>
 81019e0:	58024400 	.word	0x58024400
 81019e4:	e000ed00 	.word	0xe000ed00
 81019e8:	58026400 	.word	0x58026400
 81019ec:	10000200 	.word	0x10000200
 81019f0:	10004df8 	.word	0x10004df8
 81019f4:	58021000 	.word	0x58021000

081019f8 <ConfigGPS>:
  }
  /* USER CODE END 3 */
}

void ConfigGPS(void)
{
 81019f8:	b590      	push	{r4, r7, lr}
 81019fa:	b0a1      	sub	sp, #132	; 0x84
 81019fc:	af00      	add	r7, sp, #0
		if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE)) == HAL_OK)
 81019fe:	4b63      	ldr	r3, [pc, #396]	; (8101b8c <ConfigGPS+0x194>)
 8101a00:	463c      	mov	r4, r7
 8101a02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101a04:	c407      	stmia	r4!, {r0, r1, r2}
 8101a06:	8023      	strh	r3, [r4, #0]
 8101a08:	463b      	mov	r3, r7
 8101a0a:	220e      	movs	r2, #14
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	4860      	ldr	r0, [pc, #384]	; (8101b90 <ConfigGPS+0x198>)
 8101a10:	f006 f9d2 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101a14:	4603      	mov	r3, r0
 8101a16:	2b00      	cmp	r3, #0
 8101a18:	d105      	bne.n	8101a26 <ConfigGPS+0x2e>
		{
		  LED3_ON();
 8101a1a:	2201      	movs	r2, #1
 8101a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101a20:	485c      	ldr	r0, [pc, #368]	; (8101b94 <ConfigGPS+0x19c>)
 8101a22:	f003 fc3b 	bl	810529c <HAL_GPIO_WritePin>
		}
		HAL_Delay(100);
 8101a26:	2064      	movs	r0, #100	; 0x64
 8101a28:	f000 fe58 	bl	81026dc <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF)) == HAL_OK)
 8101a2c:	4b5a      	ldr	r3, [pc, #360]	; (8101b98 <ConfigGPS+0x1a0>)
 8101a2e:	f107 0410 	add.w	r4, r7, #16
 8101a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101a38:	f107 0310 	add.w	r3, r7, #16
 8101a3c:	2210      	movs	r2, #16
 8101a3e:	4619      	mov	r1, r3
 8101a40:	4853      	ldr	r0, [pc, #332]	; (8101b90 <ConfigGPS+0x198>)
 8101a42:	f006 f9b9 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101a46:	4603      	mov	r3, r0
 8101a48:	2b00      	cmp	r3, #0
 8101a4a:	d105      	bne.n	8101a58 <ConfigGPS+0x60>
	    {
	  	  LED3_ON();
 8101a4c:	2201      	movs	r2, #1
 8101a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101a52:	4850      	ldr	r0, [pc, #320]	; (8101b94 <ConfigGPS+0x19c>)
 8101a54:	f003 fc22 	bl	810529c <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101a58:	2064      	movs	r0, #100	; 0x64
 8101a5a:	f000 fe3f 	bl	81026dc <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF)) == HAL_OK)
 8101a5e:	4b4f      	ldr	r3, [pc, #316]	; (8101b9c <ConfigGPS+0x1a4>)
 8101a60:	f107 0420 	add.w	r4, r7, #32
 8101a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101a66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101a6a:	f107 0320 	add.w	r3, r7, #32
 8101a6e:	2210      	movs	r2, #16
 8101a70:	4619      	mov	r1, r3
 8101a72:	4847      	ldr	r0, [pc, #284]	; (8101b90 <ConfigGPS+0x198>)
 8101a74:	f006 f9a0 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101a78:	4603      	mov	r3, r0
 8101a7a:	2b00      	cmp	r3, #0
 8101a7c:	d105      	bne.n	8101a8a <ConfigGPS+0x92>
	    {
	  	  LED3_ON();
 8101a7e:	2201      	movs	r2, #1
 8101a80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101a84:	4843      	ldr	r0, [pc, #268]	; (8101b94 <ConfigGPS+0x19c>)
 8101a86:	f003 fc09 	bl	810529c <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101a8a:	2064      	movs	r0, #100	; 0x64
 8101a8c:	f000 fe26 	bl	81026dc <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF)) == HAL_OK)
 8101a90:	4b43      	ldr	r3, [pc, #268]	; (8101ba0 <ConfigGPS+0x1a8>)
 8101a92:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8101a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101a9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101aa0:	2210      	movs	r2, #16
 8101aa2:	4619      	mov	r1, r3
 8101aa4:	483a      	ldr	r0, [pc, #232]	; (8101b90 <ConfigGPS+0x198>)
 8101aa6:	f006 f987 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101aaa:	4603      	mov	r3, r0
 8101aac:	2b00      	cmp	r3, #0
 8101aae:	d105      	bne.n	8101abc <ConfigGPS+0xc4>
	    {
	  	  LED3_ON();
 8101ab0:	2201      	movs	r2, #1
 8101ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101ab6:	4837      	ldr	r0, [pc, #220]	; (8101b94 <ConfigGPS+0x19c>)
 8101ab8:	f003 fbf0 	bl	810529c <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101abc:	2064      	movs	r0, #100	; 0x64
 8101abe:	f000 fe0d 	bl	81026dc <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF)) == HAL_OK)
 8101ac2:	4b38      	ldr	r3, [pc, #224]	; (8101ba4 <ConfigGPS+0x1ac>)
 8101ac4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8101ac8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101aca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8101ad2:	2210      	movs	r2, #16
 8101ad4:	4619      	mov	r1, r3
 8101ad6:	482e      	ldr	r0, [pc, #184]	; (8101b90 <ConfigGPS+0x198>)
 8101ad8:	f006 f96e 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101adc:	4603      	mov	r3, r0
 8101ade:	2b00      	cmp	r3, #0
 8101ae0:	d105      	bne.n	8101aee <ConfigGPS+0xf6>
	    {
	  	  LED3_ON();
 8101ae2:	2201      	movs	r2, #1
 8101ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101ae8:	482a      	ldr	r0, [pc, #168]	; (8101b94 <ConfigGPS+0x19c>)
 8101aea:	f003 fbd7 	bl	810529c <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101aee:	2064      	movs	r0, #100	; 0x64
 8101af0:	f000 fdf4 	bl	81026dc <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF)) == HAL_OK)
 8101af4:	4b2c      	ldr	r3, [pc, #176]	; (8101ba8 <ConfigGPS+0x1b0>)
 8101af6:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101b00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8101b04:	2210      	movs	r2, #16
 8101b06:	4619      	mov	r1, r3
 8101b08:	4821      	ldr	r0, [pc, #132]	; (8101b90 <ConfigGPS+0x198>)
 8101b0a:	f006 f955 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101b0e:	4603      	mov	r3, r0
 8101b10:	2b00      	cmp	r3, #0
 8101b12:	d105      	bne.n	8101b20 <ConfigGPS+0x128>
	    {
	  	  LED3_ON();
 8101b14:	2201      	movs	r2, #1
 8101b16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101b1a:	481e      	ldr	r0, [pc, #120]	; (8101b94 <ConfigGPS+0x19c>)
 8101b1c:	f003 fbbe 	bl	810529c <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101b20:	2064      	movs	r0, #100	; 0x64
 8101b22:	f000 fddb 	bl	81026dc <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF)) == HAL_OK)
 8101b26:	4b21      	ldr	r3, [pc, #132]	; (8101bac <ConfigGPS+0x1b4>)
 8101b28:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8101b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101b32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8101b36:	2210      	movs	r2, #16
 8101b38:	4619      	mov	r1, r3
 8101b3a:	4815      	ldr	r0, [pc, #84]	; (8101b90 <ConfigGPS+0x198>)
 8101b3c:	f006 f93c 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101b40:	4603      	mov	r3, r0
 8101b42:	2b00      	cmp	r3, #0
 8101b44:	d105      	bne.n	8101b52 <ConfigGPS+0x15a>
	    {
	  	  LED3_ON();
 8101b46:	2201      	movs	r2, #1
 8101b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101b4c:	4811      	ldr	r0, [pc, #68]	; (8101b94 <ConfigGPS+0x19c>)
 8101b4e:	f003 fba5 	bl	810529c <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101b52:	2064      	movs	r0, #100	; 0x64
 8101b54:	f000 fdc2 	bl	81026dc <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON)) == HAL_OK)
 8101b58:	4b15      	ldr	r3, [pc, #84]	; (8101bb0 <ConfigGPS+0x1b8>)
 8101b5a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8101b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101b64:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8101b68:	2210      	movs	r2, #16
 8101b6a:	4619      	mov	r1, r3
 8101b6c:	4808      	ldr	r0, [pc, #32]	; (8101b90 <ConfigGPS+0x198>)
 8101b6e:	f006 f923 	bl	8107db8 <HAL_UART_Transmit_DMA>
 8101b72:	4603      	mov	r3, r0
 8101b74:	2b00      	cmp	r3, #0
 8101b76:	d105      	bne.n	8101b84 <ConfigGPS+0x18c>
	    {
	  	  LED3_ON();
 8101b78:	2201      	movs	r2, #1
 8101b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101b7e:	4805      	ldr	r0, [pc, #20]	; (8101b94 <ConfigGPS+0x19c>)
 8101b80:	f003 fb8c 	bl	810529c <HAL_GPIO_WritePin>
	    }
}
 8101b84:	bf00      	nop
 8101b86:	3784      	adds	r7, #132	; 0x84
 8101b88:	46bd      	mov	sp, r7
 8101b8a:	bd90      	pop	{r4, r7, pc}
 8101b8c:	0810db64 	.word	0x0810db64
 8101b90:	10004df8 	.word	0x10004df8
 8101b94:	58020400 	.word	0x58020400
 8101b98:	0810db74 	.word	0x0810db74
 8101b9c:	0810db84 	.word	0x0810db84
 8101ba0:	0810db94 	.word	0x0810db94
 8101ba4:	0810dba4 	.word	0x0810dba4
 8101ba8:	0810dbb4 	.word	0x0810dbb4
 8101bac:	0810dbc4 	.word	0x0810dbc4
 8101bb0:	0810dbd4 	.word	0x0810dbd4

08101bb4 <ConfigPWMChannels>:

void ConfigPWMChannels(void)
{
 8101bb4:	b580      	push	{r7, lr}
 8101bb6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8101bb8:	2100      	movs	r1, #0
 8101bba:	4808      	ldr	r0, [pc, #32]	; (8101bdc <ConfigPWMChannels+0x28>)
 8101bbc:	f004 ff64 	bl	8106a88 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101bc0:	2104      	movs	r1, #4
 8101bc2:	4806      	ldr	r0, [pc, #24]	; (8101bdc <ConfigPWMChannels+0x28>)
 8101bc4:	f004 ff60 	bl	8106a88 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8101bc8:	2108      	movs	r1, #8
 8101bca:	4804      	ldr	r0, [pc, #16]	; (8101bdc <ConfigPWMChannels+0x28>)
 8101bcc:	f004 ff5c 	bl	8106a88 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8101bd0:	210c      	movs	r1, #12
 8101bd2:	4802      	ldr	r0, [pc, #8]	; (8101bdc <ConfigPWMChannels+0x28>)
 8101bd4:	f004 ff58 	bl	8106a88 <HAL_TIM_PWM_Start>
}
 8101bd8:	bf00      	nop
 8101bda:	bd80      	pop	{r7, pc}
 8101bdc:	10004c30 	.word	0x10004c30

08101be0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8101be0:	b580      	push	{r7, lr}
 8101be2:	b084      	sub	sp, #16
 8101be4:	af00      	add	r7, sp, #0
 8101be6:	6078      	str	r0, [r7, #4]
	static int byte_pos = 0;
	static unsigned char checksum[2];
	const int data_size = sizeof(pvt);
 8101be8:	2360      	movs	r3, #96	; 0x60
 8101bea:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART1)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	4a36      	ldr	r2, [pc, #216]	; (8101ccc <HAL_UART_RxCpltCallback+0xec>)
 8101bf2:	4293      	cmp	r3, r2
 8101bf4:	d166      	bne.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
	{
		if(byte_pos < 2)
 8101bf6:	4b36      	ldr	r3, [pc, #216]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101bf8:	681b      	ldr	r3, [r3, #0]
 8101bfa:	2b01      	cmp	r3, #1
 8101bfc:	dc17      	bgt.n	8101c2e <HAL_UART_RxCpltCallback+0x4e>
		{
			if(data_byte[0] == UBX_HEADER[byte_pos])
 8101bfe:	4b35      	ldr	r3, [pc, #212]	; (8101cd4 <HAL_UART_RxCpltCallback+0xf4>)
 8101c00:	781a      	ldrb	r2, [r3, #0]
 8101c02:	4b35      	ldr	r3, [pc, #212]	; (8101cd8 <HAL_UART_RxCpltCallback+0xf8>)
 8101c04:	881b      	ldrh	r3, [r3, #0]
 8101c06:	813b      	strh	r3, [r7, #8]
 8101c08:	4b31      	ldr	r3, [pc, #196]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c0a:	681b      	ldr	r3, [r3, #0]
 8101c0c:	f107 0110 	add.w	r1, r7, #16
 8101c10:	440b      	add	r3, r1
 8101c12:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8101c16:	429a      	cmp	r2, r3
 8101c18:	d105      	bne.n	8101c26 <HAL_UART_RxCpltCallback+0x46>
			{
				byte_pos++;
 8101c1a:	4b2d      	ldr	r3, [pc, #180]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c1c:	681b      	ldr	r3, [r3, #0]
 8101c1e:	3301      	adds	r3, #1
 8101c20:	4a2b      	ldr	r2, [pc, #172]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c22:	6013      	str	r3, [r2, #0]
		    	  byte_pos = 0;
		      }
		}
	}

}
 8101c24:	e04e      	b.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
				byte_pos = 0;
 8101c26:	4b2a      	ldr	r3, [pc, #168]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c28:	2200      	movs	r2, #0
 8101c2a:	601a      	str	r2, [r3, #0]
}
 8101c2c:	e04a      	b.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
			if( (byte_pos-2) < data_size)
 8101c2e:	4b28      	ldr	r3, [pc, #160]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	3b02      	subs	r3, #2
 8101c34:	68fa      	ldr	r2, [r7, #12]
 8101c36:	429a      	cmp	r2, r3
 8101c38:	dd07      	ble.n	8101c4a <HAL_UART_RxCpltCallback+0x6a>
				((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 8101c3a:	4b25      	ldr	r3, [pc, #148]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c3c:	681b      	ldr	r3, [r3, #0]
 8101c3e:	3b02      	subs	r3, #2
 8101c40:	4a26      	ldr	r2, [pc, #152]	; (8101cdc <HAL_UART_RxCpltCallback+0xfc>)
 8101c42:	4413      	add	r3, r2
 8101c44:	4a23      	ldr	r2, [pc, #140]	; (8101cd4 <HAL_UART_RxCpltCallback+0xf4>)
 8101c46:	7812      	ldrb	r2, [r2, #0]
 8101c48:	701a      	strb	r2, [r3, #0]
			byte_pos++;
 8101c4a:	4b21      	ldr	r3, [pc, #132]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c4c:	681b      	ldr	r3, [r3, #0]
 8101c4e:	3301      	adds	r3, #1
 8101c50:	4a1f      	ldr	r2, [pc, #124]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c52:	6013      	str	r3, [r2, #0]
			if ( byte_pos == (data_size+2) )
 8101c54:	68fb      	ldr	r3, [r7, #12]
 8101c56:	1c9a      	adds	r2, r3, #2
 8101c58:	4b1d      	ldr	r3, [pc, #116]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c5a:	681b      	ldr	r3, [r3, #0]
 8101c5c:	429a      	cmp	r2, r3
 8101c5e:	d103      	bne.n	8101c68 <HAL_UART_RxCpltCallback+0x88>
			        calcChecksum(checksum);
 8101c60:	481f      	ldr	r0, [pc, #124]	; (8101ce0 <HAL_UART_RxCpltCallback+0x100>)
 8101c62:	f000 fadf 	bl	8102224 <calcChecksum>
}
 8101c66:	e02d      	b.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
			else if ( byte_pos == (data_size+3) )
 8101c68:	68fb      	ldr	r3, [r7, #12]
 8101c6a:	1cda      	adds	r2, r3, #3
 8101c6c:	4b18      	ldr	r3, [pc, #96]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c6e:	681b      	ldr	r3, [r3, #0]
 8101c70:	429a      	cmp	r2, r3
 8101c72:	d109      	bne.n	8101c88 <HAL_UART_RxCpltCallback+0xa8>
				if ( data_byte[0] != checksum[0] )
 8101c74:	4b17      	ldr	r3, [pc, #92]	; (8101cd4 <HAL_UART_RxCpltCallback+0xf4>)
 8101c76:	781a      	ldrb	r2, [r3, #0]
 8101c78:	4b19      	ldr	r3, [pc, #100]	; (8101ce0 <HAL_UART_RxCpltCallback+0x100>)
 8101c7a:	781b      	ldrb	r3, [r3, #0]
 8101c7c:	429a      	cmp	r2, r3
 8101c7e:	d021      	beq.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
					byte_pos = 0;
 8101c80:	4b13      	ldr	r3, [pc, #76]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c82:	2200      	movs	r2, #0
 8101c84:	601a      	str	r2, [r3, #0]
}
 8101c86:	e01d      	b.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
		      else if ( byte_pos == (data_size+4) ) {
 8101c88:	68fb      	ldr	r3, [r7, #12]
 8101c8a:	1d1a      	adds	r2, r3, #4
 8101c8c:	4b10      	ldr	r3, [pc, #64]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	429a      	cmp	r2, r3
 8101c92:	d10e      	bne.n	8101cb2 <HAL_UART_RxCpltCallback+0xd2>
		    	  byte_pos = 0;
 8101c94:	4b0e      	ldr	r3, [pc, #56]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101c96:	2200      	movs	r2, #0
 8101c98:	601a      	str	r2, [r3, #0]
		        if ( data_byte[0] == checksum[1] ) {
 8101c9a:	4b0e      	ldr	r3, [pc, #56]	; (8101cd4 <HAL_UART_RxCpltCallback+0xf4>)
 8101c9c:	781a      	ldrb	r2, [r3, #0]
 8101c9e:	4b10      	ldr	r3, [pc, #64]	; (8101ce0 <HAL_UART_RxCpltCallback+0x100>)
 8101ca0:	785b      	ldrb	r3, [r3, #1]
 8101ca2:	429a      	cmp	r2, r3
 8101ca4:	d10e      	bne.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
		        	LED2_ON();
 8101ca6:	2201      	movs	r2, #1
 8101ca8:	2102      	movs	r1, #2
 8101caa:	480e      	ldr	r0, [pc, #56]	; (8101ce4 <HAL_UART_RxCpltCallback+0x104>)
 8101cac:	f003 faf6 	bl	810529c <HAL_GPIO_WritePin>
}
 8101cb0:	e008      	b.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
		      else if ( byte_pos > (data_size+4) ) {
 8101cb2:	68fb      	ldr	r3, [r7, #12]
 8101cb4:	1d1a      	adds	r2, r3, #4
 8101cb6:	4b06      	ldr	r3, [pc, #24]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	429a      	cmp	r2, r3
 8101cbc:	da02      	bge.n	8101cc4 <HAL_UART_RxCpltCallback+0xe4>
		    	  byte_pos = 0;
 8101cbe:	4b04      	ldr	r3, [pc, #16]	; (8101cd0 <HAL_UART_RxCpltCallback+0xf0>)
 8101cc0:	2200      	movs	r2, #0
 8101cc2:	601a      	str	r2, [r3, #0]
}
 8101cc4:	bf00      	nop
 8101cc6:	3710      	adds	r7, #16
 8101cc8:	46bd      	mov	sp, r7
 8101cca:	bd80      	pop	{r7, pc}
 8101ccc:	40011000 	.word	0x40011000
 8101cd0:	10000204 	.word	0x10000204
 8101cd4:	10000200 	.word	0x10000200
 8101cd8:	0810dbe4 	.word	0x0810dbe4
 8101cdc:	10004b84 	.word	0x10004b84
 8101ce0:	10000208 	.word	0x10000208
 8101ce4:	58021000 	.word	0x58021000

08101ce8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8101ce8:	b580      	push	{r7, lr}
 8101cea:	b082      	sub	sp, #8
 8101cec:	af00      	add	r7, sp, #0
 8101cee:	6078      	str	r0, [r7, #4]
   if(huart->Instance == USART1)
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	4a05      	ldr	r2, [pc, #20]	; (8101d0c <HAL_UART_TxCpltCallback+0x24>)
 8101cf6:	4293      	cmp	r3, r2
 8101cf8:	d104      	bne.n	8101d04 <HAL_UART_TxCpltCallback+0x1c>
	 {
	   LED2_ON();
 8101cfa:	2201      	movs	r2, #1
 8101cfc:	2102      	movs	r1, #2
 8101cfe:	4804      	ldr	r0, [pc, #16]	; (8101d10 <HAL_UART_TxCpltCallback+0x28>)
 8101d00:	f003 facc 	bl	810529c <HAL_GPIO_WritePin>
	 }
}
 8101d04:	bf00      	nop
 8101d06:	3708      	adds	r7, #8
 8101d08:	46bd      	mov	sp, r7
 8101d0a:	bd80      	pop	{r7, pc}
 8101d0c:	40011000 	.word	0x40011000
 8101d10:	58021000 	.word	0x58021000

08101d14 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8101d14:	b580      	push	{r7, lr}
 8101d16:	b082      	sub	sp, #8
 8101d18:	af00      	add	r7, sp, #0
 8101d1a:	6078      	str	r0, [r7, #4]
  /* Initialization Error */
  LED1_ON();
 8101d1c:	2201      	movs	r2, #1
 8101d1e:	2101      	movs	r1, #1
 8101d20:	4806      	ldr	r0, [pc, #24]	; (8101d3c <HAL_UART_ErrorCallback+0x28>)
 8101d22:	f003 fabb 	bl	810529c <HAL_GPIO_WritePin>
  error_code = huart->ErrorCode;
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101d2c:	b2da      	uxtb	r2, r3
 8101d2e:	4b04      	ldr	r3, [pc, #16]	; (8101d40 <HAL_UART_ErrorCallback+0x2c>)
 8101d30:	701a      	strb	r2, [r3, #0]

}
 8101d32:	bf00      	nop
 8101d34:	3708      	adds	r7, #8
 8101d36:	46bd      	mov	sp, r7
 8101d38:	bd80      	pop	{r7, pc}
 8101d3a:	bf00      	nop
 8101d3c:	58020400 	.word	0x58020400
 8101d40:	10000201 	.word	0x10000201

08101d44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8101d44:	b580      	push	{r7, lr}
 8101d46:	b082      	sub	sp, #8
 8101d48:	af00      	add	r7, sp, #0
 8101d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	681b      	ldr	r3, [r3, #0]
 8101d50:	4a04      	ldr	r2, [pc, #16]	; (8101d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8101d52:	4293      	cmp	r3, r2
 8101d54:	d101      	bne.n	8101d5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8101d56:	f000 fca1 	bl	810269c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8101d5a:	bf00      	nop
 8101d5c:	3708      	adds	r7, #8
 8101d5e:	46bd      	mov	sp, r7
 8101d60:	bd80      	pop	{r7, pc}
 8101d62:	bf00      	nop
 8101d64:	40001400 	.word	0x40001400

08101d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101d68:	b480      	push	{r7}
 8101d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8101d6c:	bf00      	nop
 8101d6e:	46bd      	mov	sp, r7
 8101d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d74:	4770      	bx	lr
	...

08101d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101d78:	b580      	push	{r7, lr}
 8101d7a:	b082      	sub	sp, #8
 8101d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101d7e:	4b14      	ldr	r3, [pc, #80]	; (8101dd0 <HAL_MspInit+0x58>)
 8101d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d84:	4a12      	ldr	r2, [pc, #72]	; (8101dd0 <HAL_MspInit+0x58>)
 8101d86:	f043 0302 	orr.w	r3, r3, #2
 8101d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101d8e:	4b10      	ldr	r3, [pc, #64]	; (8101dd0 <HAL_MspInit+0x58>)
 8101d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101d94:	f003 0302 	and.w	r3, r3, #2
 8101d98:	607b      	str	r3, [r7, #4]
 8101d9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101d9c:	2200      	movs	r2, #0
 8101d9e:	210f      	movs	r1, #15
 8101da0:	f06f 0001 	mvn.w	r0, #1
 8101da4:	f000 fd74 	bl	8102890 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 8101da8:	2200      	movs	r2, #0
 8101daa:	2100      	movs	r1, #0
 8101dac:	2040      	movs	r0, #64	; 0x40
 8101dae:	f000 fd6f 	bl	8102890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101db2:	2040      	movs	r0, #64	; 0x40
 8101db4:	f000 fd86 	bl	81028c4 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8101db8:	2200      	movs	r2, #0
 8101dba:	2105      	movs	r1, #5
 8101dbc:	207e      	movs	r0, #126	; 0x7e
 8101dbe:	f000 fd67 	bl	8102890 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101dc2:	207e      	movs	r0, #126	; 0x7e
 8101dc4:	f000 fd7e 	bl	81028c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101dc8:	bf00      	nop
 8101dca:	3708      	adds	r7, #8
 8101dcc:	46bd      	mov	sp, r7
 8101dce:	bd80      	pop	{r7, pc}
 8101dd0:	58024400 	.word	0x58024400

08101dd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101dd4:	b580      	push	{r7, lr}
 8101dd6:	b08e      	sub	sp, #56	; 0x38
 8101dd8:	af00      	add	r7, sp, #0
 8101dda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8101ddc:	2300      	movs	r3, #0
 8101dde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8101de0:	2300      	movs	r3, #0
 8101de2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8101de4:	2200      	movs	r2, #0
 8101de6:	6879      	ldr	r1, [r7, #4]
 8101de8:	2037      	movs	r0, #55	; 0x37
 8101dea:	f000 fd51 	bl	8102890 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8101dee:	2037      	movs	r0, #55	; 0x37
 8101df0:	f000 fd68 	bl	81028c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8101df4:	4b21      	ldr	r3, [pc, #132]	; (8101e7c <HAL_InitTick+0xa8>)
 8101df6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101dfa:	4a20      	ldr	r2, [pc, #128]	; (8101e7c <HAL_InitTick+0xa8>)
 8101dfc:	f043 0320 	orr.w	r3, r3, #32
 8101e00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e04:	4b1d      	ldr	r3, [pc, #116]	; (8101e7c <HAL_InitTick+0xa8>)
 8101e06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e0a:	f003 0320 	and.w	r3, r3, #32
 8101e0e:	60bb      	str	r3, [r7, #8]
 8101e10:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101e12:	f107 020c 	add.w	r2, r7, #12
 8101e16:	f107 0310 	add.w	r3, r7, #16
 8101e1a:	4611      	mov	r1, r2
 8101e1c:	4618      	mov	r0, r3
 8101e1e:	f004 fa53 	bl	81062c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8101e22:	f004 fa25 	bl	8106270 <HAL_RCC_GetPCLK1Freq>
 8101e26:	4603      	mov	r3, r0
 8101e28:	005b      	lsls	r3, r3, #1
 8101e2a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8101e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101e2e:	4a14      	ldr	r2, [pc, #80]	; (8101e80 <HAL_InitTick+0xac>)
 8101e30:	fba2 2303 	umull	r2, r3, r2, r3
 8101e34:	0c9b      	lsrs	r3, r3, #18
 8101e36:	3b01      	subs	r3, #1
 8101e38:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8101e3a:	4b12      	ldr	r3, [pc, #72]	; (8101e84 <HAL_InitTick+0xb0>)
 8101e3c:	4a12      	ldr	r2, [pc, #72]	; (8101e88 <HAL_InitTick+0xb4>)
 8101e3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8101e40:	4b10      	ldr	r3, [pc, #64]	; (8101e84 <HAL_InitTick+0xb0>)
 8101e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8101e46:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8101e48:	4a0e      	ldr	r2, [pc, #56]	; (8101e84 <HAL_InitTick+0xb0>)
 8101e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101e4c:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8101e4e:	4b0d      	ldr	r3, [pc, #52]	; (8101e84 <HAL_InitTick+0xb0>)
 8101e50:	2200      	movs	r2, #0
 8101e52:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101e54:	4b0b      	ldr	r3, [pc, #44]	; (8101e84 <HAL_InitTick+0xb0>)
 8101e56:	2200      	movs	r2, #0
 8101e58:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8101e5a:	480a      	ldr	r0, [pc, #40]	; (8101e84 <HAL_InitTick+0xb0>)
 8101e5c:	f004 fd24 	bl	81068a8 <HAL_TIM_Base_Init>
 8101e60:	4603      	mov	r3, r0
 8101e62:	2b00      	cmp	r3, #0
 8101e64:	d104      	bne.n	8101e70 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8101e66:	4807      	ldr	r0, [pc, #28]	; (8101e84 <HAL_InitTick+0xb0>)
 8101e68:	f004 fd76 	bl	8106958 <HAL_TIM_Base_Start_IT>
 8101e6c:	4603      	mov	r3, r0
 8101e6e:	e000      	b.n	8101e72 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8101e70:	2301      	movs	r3, #1
}
 8101e72:	4618      	mov	r0, r3
 8101e74:	3738      	adds	r7, #56	; 0x38
 8101e76:	46bd      	mov	sp, r7
 8101e78:	bd80      	pop	{r7, pc}
 8101e7a:	bf00      	nop
 8101e7c:	58024400 	.word	0x58024400
 8101e80:	431bde83 	.word	0x431bde83
 8101e84:	10004be4 	.word	0x10004be4
 8101e88:	40001400 	.word	0x40001400

08101e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101e8c:	b480      	push	{r7}
 8101e8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8101e90:	bf00      	nop
 8101e92:	46bd      	mov	sp, r7
 8101e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e98:	4770      	bx	lr

08101e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101e9a:	b480      	push	{r7}
 8101e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101e9e:	e7fe      	b.n	8101e9e <HardFault_Handler+0x4>

08101ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101ea0:	b480      	push	{r7}
 8101ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101ea4:	e7fe      	b.n	8101ea4 <MemManage_Handler+0x4>

08101ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101ea6:	b480      	push	{r7}
 8101ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101eaa:	e7fe      	b.n	8101eaa <BusFault_Handler+0x4>

08101eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101eac:	b480      	push	{r7}
 8101eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101eb0:	e7fe      	b.n	8101eb0 <UsageFault_Handler+0x4>

08101eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101eb2:	b480      	push	{r7}
 8101eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101eb6:	bf00      	nop
 8101eb8:	46bd      	mov	sp, r7
 8101eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ebe:	4770      	bx	lr

08101ec0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101ec0:	b580      	push	{r7, lr}
 8101ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8101ec4:	4802      	ldr	r0, [pc, #8]	; (8101ed0 <DMA1_Stream0_IRQHandler+0x10>)
 8101ec6:	f001 fd27 	bl	8103918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8101eca:	bf00      	nop
 8101ecc:	bd80      	pop	{r7, pc}
 8101ece:	bf00      	nop
 8101ed0:	10004d80 	.word	0x10004d80

08101ed4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101ed4:	b580      	push	{r7, lr}
 8101ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8101ed8:	4802      	ldr	r0, [pc, #8]	; (8101ee4 <DMA1_Stream1_IRQHandler+0x10>)
 8101eda:	f001 fd1d 	bl	8103918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101ede:	bf00      	nop
 8101ee0:	bd80      	pop	{r7, pc}
 8101ee2:	bf00      	nop
 8101ee4:	10004d08 	.word	0x10004d08

08101ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8101ee8:	b580      	push	{r7, lr}
 8101eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8101eec:	4802      	ldr	r0, [pc, #8]	; (8101ef8 <USART1_IRQHandler+0x10>)
 8101eee:	f006 f86b 	bl	8107fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8101ef2:	bf00      	nop
 8101ef4:	bd80      	pop	{r7, pc}
 8101ef6:	bf00      	nop
 8101ef8:	10004df8 	.word	0x10004df8

08101efc <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101efc:	b480      	push	{r7}
 8101efe:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8101f00:	bf00      	nop
 8101f02:	46bd      	mov	sp, r7
 8101f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f08:	4770      	bx	lr

08101f0a <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8101f0a:	b580      	push	{r7, lr}
 8101f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101f0e:	f003 f9f1 	bl	81052f4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101f12:	bf00      	nop
 8101f14:	bd80      	pop	{r7, pc}
	...

08101f18 <TIM7_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8101f1c:	4802      	ldr	r0, [pc, #8]	; (8101f28 <TIM7_IRQHandler+0x10>)
 8101f1e:	f004 fe85 	bl	8106c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8101f22:	bf00      	nop
 8101f24:	bd80      	pop	{r7, pc}
 8101f26:	bf00      	nop
 8101f28:	10004be4 	.word	0x10004be4

08101f2c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8101f2c:	b580      	push	{r7, lr}
 8101f2e:	b084      	sub	sp, #16
 8101f30:	af00      	add	r7, sp, #0
 8101f32:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8101f34:	4b11      	ldr	r3, [pc, #68]	; (8101f7c <_sbrk+0x50>)
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	2b00      	cmp	r3, #0
 8101f3a:	d102      	bne.n	8101f42 <_sbrk+0x16>
		heap_end = &end;
 8101f3c:	4b0f      	ldr	r3, [pc, #60]	; (8101f7c <_sbrk+0x50>)
 8101f3e:	4a10      	ldr	r2, [pc, #64]	; (8101f80 <_sbrk+0x54>)
 8101f40:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8101f42:	4b0e      	ldr	r3, [pc, #56]	; (8101f7c <_sbrk+0x50>)
 8101f44:	681b      	ldr	r3, [r3, #0]
 8101f46:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8101f48:	4b0c      	ldr	r3, [pc, #48]	; (8101f7c <_sbrk+0x50>)
 8101f4a:	681a      	ldr	r2, [r3, #0]
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	4413      	add	r3, r2
 8101f50:	466a      	mov	r2, sp
 8101f52:	4293      	cmp	r3, r2
 8101f54:	d907      	bls.n	8101f66 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8101f56:	f00a f88b 	bl	810c070 <__errno>
 8101f5a:	4602      	mov	r2, r0
 8101f5c:	230c      	movs	r3, #12
 8101f5e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8101f60:	f04f 33ff 	mov.w	r3, #4294967295
 8101f64:	e006      	b.n	8101f74 <_sbrk+0x48>
	}

	heap_end += incr;
 8101f66:	4b05      	ldr	r3, [pc, #20]	; (8101f7c <_sbrk+0x50>)
 8101f68:	681a      	ldr	r2, [r3, #0]
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	4413      	add	r3, r2
 8101f6e:	4a03      	ldr	r2, [pc, #12]	; (8101f7c <_sbrk+0x50>)
 8101f70:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8101f72:	68fb      	ldr	r3, [r7, #12]
}
 8101f74:	4618      	mov	r0, r3
 8101f76:	3710      	adds	r7, #16
 8101f78:	46bd      	mov	sp, r7
 8101f7a:	bd80      	pop	{r7, pc}
 8101f7c:	1000020c 	.word	0x1000020c
 8101f80:	10004ed0 	.word	0x10004ed0

08101f84 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8101f84:	b580      	push	{r7, lr}
 8101f86:	b09a      	sub	sp, #104	; 0x68
 8101f88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101f8e:	2200      	movs	r2, #0
 8101f90:	601a      	str	r2, [r3, #0]
 8101f92:	605a      	str	r2, [r3, #4]
 8101f94:	609a      	str	r2, [r3, #8]
 8101f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101f98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101f9c:	2200      	movs	r2, #0
 8101f9e:	601a      	str	r2, [r3, #0]
 8101fa0:	605a      	str	r2, [r3, #4]
 8101fa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101fa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101fa8:	2200      	movs	r2, #0
 8101faa:	601a      	str	r2, [r3, #0]
 8101fac:	605a      	str	r2, [r3, #4]
 8101fae:	609a      	str	r2, [r3, #8]
 8101fb0:	60da      	str	r2, [r3, #12]
 8101fb2:	611a      	str	r2, [r3, #16]
 8101fb4:	615a      	str	r2, [r3, #20]
 8101fb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101fb8:	1d3b      	adds	r3, r7, #4
 8101fba:	222c      	movs	r2, #44	; 0x2c
 8101fbc:	2100      	movs	r1, #0
 8101fbe:	4618      	mov	r0, r3
 8101fc0:	f00a f88b 	bl	810c0da <memset>

  htim1.Instance = TIM1;
 8101fc4:	4b55      	ldr	r3, [pc, #340]	; (810211c <MX_TIM1_Init+0x198>)
 8101fc6:	4a56      	ldr	r2, [pc, #344]	; (8102120 <MX_TIM1_Init+0x19c>)
 8101fc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 8101fca:	4b54      	ldr	r3, [pc, #336]	; (810211c <MX_TIM1_Init+0x198>)
 8101fcc:	2236      	movs	r2, #54	; 0x36
 8101fce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101fd0:	4b52      	ldr	r3, [pc, #328]	; (810211c <MX_TIM1_Init+0x198>)
 8101fd2:	2200      	movs	r2, #0
 8101fd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 8101fd6:	4b51      	ldr	r3, [pc, #324]	; (810211c <MX_TIM1_Init+0x198>)
 8101fd8:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8101fdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101fde:	4b4f      	ldr	r3, [pc, #316]	; (810211c <MX_TIM1_Init+0x198>)
 8101fe0:	2200      	movs	r2, #0
 8101fe2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101fe4:	4b4d      	ldr	r3, [pc, #308]	; (810211c <MX_TIM1_Init+0x198>)
 8101fe6:	2200      	movs	r2, #0
 8101fe8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101fea:	4b4c      	ldr	r3, [pc, #304]	; (810211c <MX_TIM1_Init+0x198>)
 8101fec:	2200      	movs	r2, #0
 8101fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101ff0:	484a      	ldr	r0, [pc, #296]	; (810211c <MX_TIM1_Init+0x198>)
 8101ff2:	f004 fc59 	bl	81068a8 <HAL_TIM_Base_Init>
 8101ff6:	4603      	mov	r3, r0
 8101ff8:	2b00      	cmp	r3, #0
 8101ffa:	d001      	beq.n	8102000 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101ffc:	f7ff feb4 	bl	8101d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102004:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102006:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810200a:	4619      	mov	r1, r3
 810200c:	4843      	ldr	r0, [pc, #268]	; (810211c <MX_TIM1_Init+0x198>)
 810200e:	f005 f83d 	bl	810708c <HAL_TIM_ConfigClockSource>
 8102012:	4603      	mov	r3, r0
 8102014:	2b00      	cmp	r3, #0
 8102016:	d001      	beq.n	810201c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8102018:	f7ff fea6 	bl	8101d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 810201c:	483f      	ldr	r0, [pc, #252]	; (810211c <MX_TIM1_Init+0x198>)
 810201e:	f004 fcd1 	bl	81069c4 <HAL_TIM_PWM_Init>
 8102022:	4603      	mov	r3, r0
 8102024:	2b00      	cmp	r3, #0
 8102026:	d001      	beq.n	810202c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8102028:	f7ff fe9e 	bl	8101d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810202c:	2300      	movs	r3, #0
 810202e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8102030:	2300      	movs	r3, #0
 8102032:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8102034:	2300      	movs	r3, #0
 8102036:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102038:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 810203c:	4619      	mov	r1, r3
 810203e:	4837      	ldr	r0, [pc, #220]	; (810211c <MX_TIM1_Init+0x198>)
 8102040:	f005 fd46 	bl	8107ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8102044:	4603      	mov	r3, r0
 8102046:	2b00      	cmp	r3, #0
 8102048:	d001      	beq.n	810204e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 810204a:	f7ff fe8d 	bl	8101d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 810204e:	2360      	movs	r3, #96	; 0x60
 8102050:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 8102052:	2332      	movs	r3, #50	; 0x32
 8102054:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8102056:	2300      	movs	r3, #0
 8102058:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810205a:	2300      	movs	r3, #0
 810205c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810205e:	2300      	movs	r3, #0
 8102060:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8102062:	2300      	movs	r3, #0
 8102064:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8102066:	2300      	movs	r3, #0
 8102068:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810206a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810206e:	2200      	movs	r2, #0
 8102070:	4619      	mov	r1, r3
 8102072:	482a      	ldr	r0, [pc, #168]	; (810211c <MX_TIM1_Init+0x198>)
 8102074:	f004 fefa 	bl	8106e6c <HAL_TIM_PWM_ConfigChannel>
 8102078:	4603      	mov	r3, r0
 810207a:	2b00      	cmp	r3, #0
 810207c:	d001      	beq.n	8102082 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 810207e:	f7ff fe73 	bl	8101d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8102082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102086:	2204      	movs	r2, #4
 8102088:	4619      	mov	r1, r3
 810208a:	4824      	ldr	r0, [pc, #144]	; (810211c <MX_TIM1_Init+0x198>)
 810208c:	f004 feee 	bl	8106e6c <HAL_TIM_PWM_ConfigChannel>
 8102090:	4603      	mov	r3, r0
 8102092:	2b00      	cmp	r3, #0
 8102094:	d001      	beq.n	810209a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8102096:	f7ff fe67 	bl	8101d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810209a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810209e:	2208      	movs	r2, #8
 81020a0:	4619      	mov	r1, r3
 81020a2:	481e      	ldr	r0, [pc, #120]	; (810211c <MX_TIM1_Init+0x198>)
 81020a4:	f004 fee2 	bl	8106e6c <HAL_TIM_PWM_ConfigChannel>
 81020a8:	4603      	mov	r3, r0
 81020aa:	2b00      	cmp	r3, #0
 81020ac:	d001      	beq.n	81020b2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 81020ae:	f7ff fe5b 	bl	8101d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81020b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81020b6:	220c      	movs	r2, #12
 81020b8:	4619      	mov	r1, r3
 81020ba:	4818      	ldr	r0, [pc, #96]	; (810211c <MX_TIM1_Init+0x198>)
 81020bc:	f004 fed6 	bl	8106e6c <HAL_TIM_PWM_ConfigChannel>
 81020c0:	4603      	mov	r3, r0
 81020c2:	2b00      	cmp	r3, #0
 81020c4:	d001      	beq.n	81020ca <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 81020c6:	f7ff fe4f 	bl	8101d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 81020ca:	2300      	movs	r3, #0
 81020cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 81020ce:	2300      	movs	r3, #0
 81020d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 81020d2:	2300      	movs	r3, #0
 81020d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 81020d6:	2300      	movs	r3, #0
 81020d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 81020da:	2300      	movs	r3, #0
 81020dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 81020de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81020e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 81020e4:	2300      	movs	r3, #0
 81020e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 81020e8:	2300      	movs	r3, #0
 81020ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 81020ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 81020f0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 81020f2:	2300      	movs	r3, #0
 81020f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 81020f6:	2300      	movs	r3, #0
 81020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 81020fa:	1d3b      	adds	r3, r7, #4
 81020fc:	4619      	mov	r1, r3
 81020fe:	4807      	ldr	r0, [pc, #28]	; (810211c <MX_TIM1_Init+0x198>)
 8102100:	f005 fd6e 	bl	8107be0 <HAL_TIMEx_ConfigBreakDeadTime>
 8102104:	4603      	mov	r3, r0
 8102106:	2b00      	cmp	r3, #0
 8102108:	d001      	beq.n	810210e <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 810210a:	f7ff fe2d 	bl	8101d68 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 810210e:	4803      	ldr	r0, [pc, #12]	; (810211c <MX_TIM1_Init+0x198>)
 8102110:	f000 f82a 	bl	8102168 <HAL_TIM_MspPostInit>

}
 8102114:	bf00      	nop
 8102116:	3768      	adds	r7, #104	; 0x68
 8102118:	46bd      	mov	sp, r7
 810211a:	bd80      	pop	{r7, pc}
 810211c:	10004c30 	.word	0x10004c30
 8102120:	40010000 	.word	0x40010000

08102124 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8102124:	b480      	push	{r7}
 8102126:	b085      	sub	sp, #20
 8102128:	af00      	add	r7, sp, #0
 810212a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	4a0b      	ldr	r2, [pc, #44]	; (8102160 <HAL_TIM_Base_MspInit+0x3c>)
 8102132:	4293      	cmp	r3, r2
 8102134:	d10e      	bne.n	8102154 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102136:	4b0b      	ldr	r3, [pc, #44]	; (8102164 <HAL_TIM_Base_MspInit+0x40>)
 8102138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810213c:	4a09      	ldr	r2, [pc, #36]	; (8102164 <HAL_TIM_Base_MspInit+0x40>)
 810213e:	f043 0301 	orr.w	r3, r3, #1
 8102142:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102146:	4b07      	ldr	r3, [pc, #28]	; (8102164 <HAL_TIM_Base_MspInit+0x40>)
 8102148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810214c:	f003 0301 	and.w	r3, r3, #1
 8102150:	60fb      	str	r3, [r7, #12]
 8102152:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8102154:	bf00      	nop
 8102156:	3714      	adds	r7, #20
 8102158:	46bd      	mov	sp, r7
 810215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810215e:	4770      	bx	lr
 8102160:	40010000 	.word	0x40010000
 8102164:	58024400 	.word	0x58024400

08102168 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8102168:	b580      	push	{r7, lr}
 810216a:	b08a      	sub	sp, #40	; 0x28
 810216c:	af00      	add	r7, sp, #0
 810216e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102170:	f107 0314 	add.w	r3, r7, #20
 8102174:	2200      	movs	r2, #0
 8102176:	601a      	str	r2, [r3, #0]
 8102178:	605a      	str	r2, [r3, #4]
 810217a:	609a      	str	r2, [r3, #8]
 810217c:	60da      	str	r2, [r3, #12]
 810217e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	681b      	ldr	r3, [r3, #0]
 8102184:	4a23      	ldr	r2, [pc, #140]	; (8102214 <HAL_TIM_MspPostInit+0xac>)
 8102186:	4293      	cmp	r3, r2
 8102188:	d13f      	bne.n	810220a <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 810218a:	4b23      	ldr	r3, [pc, #140]	; (8102218 <HAL_TIM_MspPostInit+0xb0>)
 810218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102190:	4a21      	ldr	r2, [pc, #132]	; (8102218 <HAL_TIM_MspPostInit+0xb0>)
 8102192:	f043 0310 	orr.w	r3, r3, #16
 8102196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810219a:	4b1f      	ldr	r3, [pc, #124]	; (8102218 <HAL_TIM_MspPostInit+0xb0>)
 810219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021a0:	f003 0310 	and.w	r3, r3, #16
 81021a4:	613b      	str	r3, [r7, #16]
 81021a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81021a8:	4b1b      	ldr	r3, [pc, #108]	; (8102218 <HAL_TIM_MspPostInit+0xb0>)
 81021aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021ae:	4a1a      	ldr	r2, [pc, #104]	; (8102218 <HAL_TIM_MspPostInit+0xb0>)
 81021b0:	f043 0301 	orr.w	r3, r3, #1
 81021b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81021b8:	4b17      	ldr	r3, [pc, #92]	; (8102218 <HAL_TIM_MspPostInit+0xb0>)
 81021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81021be:	f003 0301 	and.w	r3, r3, #1
 81021c2:	60fb      	str	r3, [r7, #12]
 81021c4:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 81021c6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 81021ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021cc:	2302      	movs	r3, #2
 81021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021d0:	2300      	movs	r3, #0
 81021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021d4:	2300      	movs	r3, #0
 81021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81021d8:	2301      	movs	r3, #1
 81021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81021dc:	f107 0314 	add.w	r3, r7, #20
 81021e0:	4619      	mov	r1, r3
 81021e2:	480e      	ldr	r0, [pc, #56]	; (810221c <HAL_TIM_MspPostInit+0xb4>)
 81021e4:	f002 feaa 	bl	8104f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 81021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81021ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021ee:	2302      	movs	r3, #2
 81021f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021f2:	2300      	movs	r3, #0
 81021f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021f6:	2300      	movs	r3, #0
 81021f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81021fa:	2301      	movs	r3, #1
 81021fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81021fe:	f107 0314 	add.w	r3, r7, #20
 8102202:	4619      	mov	r1, r3
 8102204:	4806      	ldr	r0, [pc, #24]	; (8102220 <HAL_TIM_MspPostInit+0xb8>)
 8102206:	f002 fe99 	bl	8104f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 810220a:	bf00      	nop
 810220c:	3728      	adds	r7, #40	; 0x28
 810220e:	46bd      	mov	sp, r7
 8102210:	bd80      	pop	{r7, pc}
 8102212:	bf00      	nop
 8102214:	40010000 	.word	0x40010000
 8102218:	58024400 	.word	0x58024400
 810221c:	58021000 	.word	0x58021000
 8102220:	58020000 	.word	0x58020000

08102224 <calcChecksum>:

GPS gps;
struct NAV_PVT pvt;

void calcChecksum(unsigned char* CK)
{
 8102224:	b580      	push	{r7, lr}
 8102226:	b084      	sub	sp, #16
 8102228:	af00      	add	r7, sp, #0
 810222a:	6078      	str	r0, [r7, #4]
	memset(CK, 0, 2);
 810222c:	2202      	movs	r2, #2
 810222e:	2100      	movs	r1, #0
 8102230:	6878      	ldr	r0, [r7, #4]
 8102232:	f009 ff52 	bl	810c0da <memset>
	for (int i = 0; i < (int)sizeof(pvt); i++)
 8102236:	2300      	movs	r3, #0
 8102238:	60fb      	str	r3, [r7, #12]
 810223a:	e016      	b.n	810226a <calcChecksum+0x46>
	{
		CK[0] = CK[0] + ((unsigned char*)(&pvt))[i];
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	781a      	ldrb	r2, [r3, #0]
 8102240:	68fb      	ldr	r3, [r7, #12]
 8102242:	490d      	ldr	r1, [pc, #52]	; (8102278 <calcChecksum+0x54>)
 8102244:	440b      	add	r3, r1
 8102246:	781b      	ldrb	r3, [r3, #0]
 8102248:	4413      	add	r3, r2
 810224a:	b2da      	uxtb	r2, r3
 810224c:	687b      	ldr	r3, [r7, #4]
 810224e:	701a      	strb	r2, [r3, #0]
		CK[1] = CK[1] + CK[0];
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	3301      	adds	r3, #1
 8102254:	7819      	ldrb	r1, [r3, #0]
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	781a      	ldrb	r2, [r3, #0]
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	3301      	adds	r3, #1
 810225e:	440a      	add	r2, r1
 8102260:	b2d2      	uxtb	r2, r2
 8102262:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < (int)sizeof(pvt); i++)
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	3301      	adds	r3, #1
 8102268:	60fb      	str	r3, [r7, #12]
 810226a:	68fb      	ldr	r3, [r7, #12]
 810226c:	2b5f      	cmp	r3, #95	; 0x5f
 810226e:	dde5      	ble.n	810223c <calcChecksum+0x18>
	}

}
 8102270:	bf00      	nop
 8102272:	3710      	adds	r7, #16
 8102274:	46bd      	mov	sp, r7
 8102276:	bd80      	pop	{r7, pc}
 8102278:	10004b84 	.word	0x10004b84

0810227c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 810227c:	b580      	push	{r7, lr}
 810227e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8102280:	4b22      	ldr	r3, [pc, #136]	; (810230c <MX_USART1_UART_Init+0x90>)
 8102282:	4a23      	ldr	r2, [pc, #140]	; (8102310 <MX_USART1_UART_Init+0x94>)
 8102284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8102286:	4b21      	ldr	r3, [pc, #132]	; (810230c <MX_USART1_UART_Init+0x90>)
 8102288:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 810228c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 810228e:	4b1f      	ldr	r3, [pc, #124]	; (810230c <MX_USART1_UART_Init+0x90>)
 8102290:	2200      	movs	r2, #0
 8102292:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8102294:	4b1d      	ldr	r3, [pc, #116]	; (810230c <MX_USART1_UART_Init+0x90>)
 8102296:	2200      	movs	r2, #0
 8102298:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 810229a:	4b1c      	ldr	r3, [pc, #112]	; (810230c <MX_USART1_UART_Init+0x90>)
 810229c:	2200      	movs	r2, #0
 810229e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 81022a0:	4b1a      	ldr	r3, [pc, #104]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022a2:	220c      	movs	r2, #12
 81022a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81022a6:	4b19      	ldr	r3, [pc, #100]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022a8:	2200      	movs	r2, #0
 81022aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 81022ac:	4b17      	ldr	r3, [pc, #92]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022ae:	2200      	movs	r2, #0
 81022b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81022b2:	4b16      	ldr	r3, [pc, #88]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022b4:	2200      	movs	r2, #0
 81022b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81022b8:	4b14      	ldr	r3, [pc, #80]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022ba:	2200      	movs	r2, #0
 81022bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81022be:	4b13      	ldr	r3, [pc, #76]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022c0:	2200      	movs	r2, #0
 81022c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 81022c4:	4811      	ldr	r0, [pc, #68]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022c6:	f005 fd27 	bl	8107d18 <HAL_UART_Init>
 81022ca:	4603      	mov	r3, r0
 81022cc:	2b00      	cmp	r3, #0
 81022ce:	d001      	beq.n	81022d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 81022d0:	f7ff fd4a 	bl	8101d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81022d4:	2100      	movs	r1, #0
 81022d6:	480d      	ldr	r0, [pc, #52]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022d8:	f007 f8a3 	bl	8109422 <HAL_UARTEx_SetTxFifoThreshold>
 81022dc:	4603      	mov	r3, r0
 81022de:	2b00      	cmp	r3, #0
 81022e0:	d001      	beq.n	81022e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 81022e2:	f7ff fd41 	bl	8101d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81022e6:	2100      	movs	r1, #0
 81022e8:	4808      	ldr	r0, [pc, #32]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022ea:	f007 f8d8 	bl	810949e <HAL_UARTEx_SetRxFifoThreshold>
 81022ee:	4603      	mov	r3, r0
 81022f0:	2b00      	cmp	r3, #0
 81022f2:	d001      	beq.n	81022f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 81022f4:	f7ff fd38 	bl	8101d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 81022f8:	4804      	ldr	r0, [pc, #16]	; (810230c <MX_USART1_UART_Init+0x90>)
 81022fa:	f007 f859 	bl	81093b0 <HAL_UARTEx_DisableFifoMode>
 81022fe:	4603      	mov	r3, r0
 8102300:	2b00      	cmp	r3, #0
 8102302:	d001      	beq.n	8102308 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8102304:	f7ff fd30 	bl	8101d68 <Error_Handler>
  }

}
 8102308:	bf00      	nop
 810230a:	bd80      	pop	{r7, pc}
 810230c:	10004df8 	.word	0x10004df8
 8102310:	40011000 	.word	0x40011000

08102314 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8102314:	b580      	push	{r7, lr}
 8102316:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8102318:	4b22      	ldr	r3, [pc, #136]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 810231a:	4a23      	ldr	r2, [pc, #140]	; (81023a8 <MX_USART3_UART_Init+0x94>)
 810231c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810231e:	4b21      	ldr	r3, [pc, #132]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102324:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102326:	4b1f      	ldr	r3, [pc, #124]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102328:	2200      	movs	r2, #0
 810232a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810232c:	4b1d      	ldr	r3, [pc, #116]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 810232e:	2200      	movs	r2, #0
 8102330:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102332:	4b1c      	ldr	r3, [pc, #112]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102334:	2200      	movs	r2, #0
 8102336:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102338:	4b1a      	ldr	r3, [pc, #104]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 810233a:	220c      	movs	r2, #12
 810233c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810233e:	4b19      	ldr	r3, [pc, #100]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102340:	2200      	movs	r2, #0
 8102342:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102344:	4b17      	ldr	r3, [pc, #92]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102346:	2200      	movs	r2, #0
 8102348:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810234a:	4b16      	ldr	r3, [pc, #88]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 810234c:	2200      	movs	r2, #0
 810234e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102350:	4b14      	ldr	r3, [pc, #80]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102352:	2200      	movs	r2, #0
 8102354:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102356:	4b13      	ldr	r3, [pc, #76]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102358:	2200      	movs	r2, #0
 810235a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 810235c:	4811      	ldr	r0, [pc, #68]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 810235e:	f005 fcdb 	bl	8107d18 <HAL_UART_Init>
 8102362:	4603      	mov	r3, r0
 8102364:	2b00      	cmp	r3, #0
 8102366:	d001      	beq.n	810236c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102368:	f7ff fcfe 	bl	8101d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 810236c:	2100      	movs	r1, #0
 810236e:	480d      	ldr	r0, [pc, #52]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102370:	f007 f857 	bl	8109422 <HAL_UARTEx_SetTxFifoThreshold>
 8102374:	4603      	mov	r3, r0
 8102376:	2b00      	cmp	r3, #0
 8102378:	d001      	beq.n	810237e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810237a:	f7ff fcf5 	bl	8101d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810237e:	2100      	movs	r1, #0
 8102380:	4808      	ldr	r0, [pc, #32]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102382:	f007 f88c 	bl	810949e <HAL_UARTEx_SetRxFifoThreshold>
 8102386:	4603      	mov	r3, r0
 8102388:	2b00      	cmp	r3, #0
 810238a:	d001      	beq.n	8102390 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 810238c:	f7ff fcec 	bl	8101d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8102390:	4804      	ldr	r0, [pc, #16]	; (81023a4 <MX_USART3_UART_Init+0x90>)
 8102392:	f007 f80d 	bl	81093b0 <HAL_UARTEx_DisableFifoMode>
 8102396:	4603      	mov	r3, r0
 8102398:	2b00      	cmp	r3, #0
 810239a:	d001      	beq.n	81023a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 810239c:	f7ff fce4 	bl	8101d68 <Error_Handler>
  }

}
 81023a0:	bf00      	nop
 81023a2:	bd80      	pop	{r7, pc}
 81023a4:	10004c7c 	.word	0x10004c7c
 81023a8:	40004800 	.word	0x40004800

081023ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 81023ac:	b580      	push	{r7, lr}
 81023ae:	b08c      	sub	sp, #48	; 0x30
 81023b0:	af00      	add	r7, sp, #0
 81023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81023b4:	f107 031c 	add.w	r3, r7, #28
 81023b8:	2200      	movs	r2, #0
 81023ba:	601a      	str	r2, [r3, #0]
 81023bc:	605a      	str	r2, [r3, #4]
 81023be:	609a      	str	r2, [r3, #8]
 81023c0:	60da      	str	r2, [r3, #12]
 81023c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 81023c4:	687b      	ldr	r3, [r7, #4]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	4a67      	ldr	r2, [pc, #412]	; (8102568 <HAL_UART_MspInit+0x1bc>)
 81023ca:	4293      	cmp	r3, r2
 81023cc:	f040 8093 	bne.w	81024f6 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 81023d0:	4b66      	ldr	r3, [pc, #408]	; (810256c <HAL_UART_MspInit+0x1c0>)
 81023d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81023d6:	4a65      	ldr	r2, [pc, #404]	; (810256c <HAL_UART_MspInit+0x1c0>)
 81023d8:	f043 0310 	orr.w	r3, r3, #16
 81023dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81023e0:	4b62      	ldr	r3, [pc, #392]	; (810256c <HAL_UART_MspInit+0x1c0>)
 81023e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81023e6:	f003 0310 	and.w	r3, r3, #16
 81023ea:	61bb      	str	r3, [r7, #24]
 81023ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81023ee:	4b5f      	ldr	r3, [pc, #380]	; (810256c <HAL_UART_MspInit+0x1c0>)
 81023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81023f4:	4a5d      	ldr	r2, [pc, #372]	; (810256c <HAL_UART_MspInit+0x1c0>)
 81023f6:	f043 0302 	orr.w	r3, r3, #2
 81023fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81023fe:	4b5b      	ldr	r3, [pc, #364]	; (810256c <HAL_UART_MspInit+0x1c0>)
 8102400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102404:	f003 0302 	and.w	r3, r3, #2
 8102408:	617b      	str	r3, [r7, #20]
 810240a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810240c:	23c0      	movs	r3, #192	; 0xc0
 810240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102410:	2302      	movs	r3, #2
 8102412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102414:	2300      	movs	r3, #0
 8102416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102418:	2300      	movs	r3, #0
 810241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 810241c:	2307      	movs	r3, #7
 810241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102420:	f107 031c 	add.w	r3, r7, #28
 8102424:	4619      	mov	r1, r3
 8102426:	4852      	ldr	r0, [pc, #328]	; (8102570 <HAL_UART_MspInit+0x1c4>)
 8102428:	f002 fd88 	bl	8104f3c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 810242c:	4b51      	ldr	r3, [pc, #324]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 810242e:	4a52      	ldr	r2, [pc, #328]	; (8102578 <HAL_UART_MspInit+0x1cc>)
 8102430:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8102432:	4b50      	ldr	r3, [pc, #320]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102434:	2229      	movs	r2, #41	; 0x29
 8102436:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102438:	4b4e      	ldr	r3, [pc, #312]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 810243a:	2200      	movs	r2, #0
 810243c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 810243e:	4b4d      	ldr	r3, [pc, #308]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102440:	2200      	movs	r2, #0
 8102442:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8102444:	4b4b      	ldr	r3, [pc, #300]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810244a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 810244c:	4b49      	ldr	r3, [pc, #292]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 810244e:	2200      	movs	r2, #0
 8102450:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8102452:	4b48      	ldr	r3, [pc, #288]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102454:	2200      	movs	r2, #0
 8102456:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8102458:	4b46      	ldr	r3, [pc, #280]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 810245a:	f44f 7280 	mov.w	r2, #256	; 0x100
 810245e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8102460:	4b44      	ldr	r3, [pc, #272]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102462:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8102466:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8102468:	4b42      	ldr	r3, [pc, #264]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 810246a:	2200      	movs	r2, #0
 810246c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 810246e:	4841      	ldr	r0, [pc, #260]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102470:	f000 fa4a 	bl	8102908 <HAL_DMA_Init>
 8102474:	4603      	mov	r3, r0
 8102476:	2b00      	cmp	r3, #0
 8102478:	d001      	beq.n	810247e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 810247a:	f7ff fc75 	bl	8101d68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 810247e:	687b      	ldr	r3, [r7, #4]
 8102480:	4a3c      	ldr	r2, [pc, #240]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102482:	679a      	str	r2, [r3, #120]	; 0x78
 8102484:	4a3b      	ldr	r2, [pc, #236]	; (8102574 <HAL_UART_MspInit+0x1c8>)
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 810248a:	4b3c      	ldr	r3, [pc, #240]	; (810257c <HAL_UART_MspInit+0x1d0>)
 810248c:	4a3c      	ldr	r2, [pc, #240]	; (8102580 <HAL_UART_MspInit+0x1d4>)
 810248e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8102490:	4b3a      	ldr	r3, [pc, #232]	; (810257c <HAL_UART_MspInit+0x1d0>)
 8102492:	222a      	movs	r2, #42	; 0x2a
 8102494:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8102496:	4b39      	ldr	r3, [pc, #228]	; (810257c <HAL_UART_MspInit+0x1d0>)
 8102498:	2240      	movs	r2, #64	; 0x40
 810249a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 810249c:	4b37      	ldr	r3, [pc, #220]	; (810257c <HAL_UART_MspInit+0x1d0>)
 810249e:	2200      	movs	r2, #0
 81024a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 81024a2:	4b36      	ldr	r3, [pc, #216]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81024a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81024aa:	4b34      	ldr	r3, [pc, #208]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024ac:	2200      	movs	r2, #0
 81024ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81024b0:	4b32      	ldr	r3, [pc, #200]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024b2:	2200      	movs	r2, #0
 81024b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 81024b6:	4b31      	ldr	r3, [pc, #196]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024b8:	2200      	movs	r2, #0
 81024ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 81024bc:	4b2f      	ldr	r3, [pc, #188]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024be:	2200      	movs	r2, #0
 81024c0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81024c2:	4b2e      	ldr	r3, [pc, #184]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024c4:	2200      	movs	r2, #0
 81024c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 81024c8:	482c      	ldr	r0, [pc, #176]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024ca:	f000 fa1d 	bl	8102908 <HAL_DMA_Init>
 81024ce:	4603      	mov	r3, r0
 81024d0:	2b00      	cmp	r3, #0
 81024d2:	d001      	beq.n	81024d8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 81024d4:	f7ff fc48 	bl	8101d68 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	4a28      	ldr	r2, [pc, #160]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024dc:	675a      	str	r2, [r3, #116]	; 0x74
 81024de:	4a27      	ldr	r2, [pc, #156]	; (810257c <HAL_UART_MspInit+0x1d0>)
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 81024e4:	2200      	movs	r2, #0
 81024e6:	2100      	movs	r1, #0
 81024e8:	2025      	movs	r0, #37	; 0x25
 81024ea:	f000 f9d1 	bl	8102890 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 81024ee:	2025      	movs	r0, #37	; 0x25
 81024f0:	f000 f9e8 	bl	81028c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 81024f4:	e033      	b.n	810255e <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	4a22      	ldr	r2, [pc, #136]	; (8102584 <HAL_UART_MspInit+0x1d8>)
 81024fc:	4293      	cmp	r3, r2
 81024fe:	d12e      	bne.n	810255e <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8102500:	4b1a      	ldr	r3, [pc, #104]	; (810256c <HAL_UART_MspInit+0x1c0>)
 8102502:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102506:	4a19      	ldr	r2, [pc, #100]	; (810256c <HAL_UART_MspInit+0x1c0>)
 8102508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810250c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102510:	4b16      	ldr	r3, [pc, #88]	; (810256c <HAL_UART_MspInit+0x1c0>)
 8102512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810251a:	613b      	str	r3, [r7, #16]
 810251c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 810251e:	4b13      	ldr	r3, [pc, #76]	; (810256c <HAL_UART_MspInit+0x1c0>)
 8102520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102524:	4a11      	ldr	r2, [pc, #68]	; (810256c <HAL_UART_MspInit+0x1c0>)
 8102526:	f043 0308 	orr.w	r3, r3, #8
 810252a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810252e:	4b0f      	ldr	r3, [pc, #60]	; (810256c <HAL_UART_MspInit+0x1c0>)
 8102530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102534:	f003 0308 	and.w	r3, r3, #8
 8102538:	60fb      	str	r3, [r7, #12]
 810253a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810253c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102542:	2302      	movs	r3, #2
 8102544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102546:	2300      	movs	r3, #0
 8102548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810254a:	2300      	movs	r3, #0
 810254c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810254e:	2307      	movs	r3, #7
 8102550:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102552:	f107 031c 	add.w	r3, r7, #28
 8102556:	4619      	mov	r1, r3
 8102558:	480b      	ldr	r0, [pc, #44]	; (8102588 <HAL_UART_MspInit+0x1dc>)
 810255a:	f002 fcef 	bl	8104f3c <HAL_GPIO_Init>
}
 810255e:	bf00      	nop
 8102560:	3730      	adds	r7, #48	; 0x30
 8102562:	46bd      	mov	sp, r7
 8102564:	bd80      	pop	{r7, pc}
 8102566:	bf00      	nop
 8102568:	40011000 	.word	0x40011000
 810256c:	58024400 	.word	0x58024400
 8102570:	58020400 	.word	0x58020400
 8102574:	10004d80 	.word	0x10004d80
 8102578:	40020010 	.word	0x40020010
 810257c:	10004d08 	.word	0x10004d08
 8102580:	40020028 	.word	0x40020028
 8102584:	40004800 	.word	0x40004800
 8102588:	58020c00 	.word	0x58020c00

0810258c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 810258c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81025c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102590:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8102592:	e003      	b.n	810259c <LoopCopyDataInit>

08102594 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102594:	4b0c      	ldr	r3, [pc, #48]	; (81025c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8102596:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8102598:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810259a:	3104      	adds	r1, #4

0810259c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 810259c:	480b      	ldr	r0, [pc, #44]	; (81025cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 810259e:	4b0c      	ldr	r3, [pc, #48]	; (81025d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 81025a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81025a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81025a4:	d3f6      	bcc.n	8102594 <CopyDataInit>
  ldr  r2, =_sbss
 81025a6:	4a0b      	ldr	r2, [pc, #44]	; (81025d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 81025a8:	e002      	b.n	81025b0 <LoopFillZerobss>

081025aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 81025aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 81025ac:	f842 3b04 	str.w	r3, [r2], #4

081025b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 81025b0:	4b09      	ldr	r3, [pc, #36]	; (81025d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 81025b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 81025b4:	d3f9      	bcc.n	81025aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 81025b6:	f7fe fcff 	bl	8100fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 81025ba:	f009 fd5f 	bl	810c07c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81025be:	f7ff f9b1 	bl	8101924 <main>
  bx  lr    
 81025c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81025c4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 81025c8:	0810dee8 	.word	0x0810dee8
  ldr  r0, =_sdata
 81025cc:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 81025d0:	100001e0 	.word	0x100001e0
  ldr  r2, =_sbss
 81025d4:	100001e0 	.word	0x100001e0
  ldr  r3, = _ebss
 81025d8:	10004ecc 	.word	0x10004ecc

081025dc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81025dc:	e7fe      	b.n	81025dc <ADC3_IRQHandler>
	...

081025e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81025e0:	b580      	push	{r7, lr}
 81025e2:	b082      	sub	sp, #8
 81025e4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81025e6:	4b28      	ldr	r3, [pc, #160]	; (8102688 <HAL_Init+0xa8>)
 81025e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025ec:	4a26      	ldr	r2, [pc, #152]	; (8102688 <HAL_Init+0xa8>)
 81025ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81025f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81025f6:	4b24      	ldr	r3, [pc, #144]	; (8102688 <HAL_Init+0xa8>)
 81025f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81025fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102600:	603b      	str	r3, [r7, #0]
 8102602:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102604:	4b21      	ldr	r3, [pc, #132]	; (810268c <HAL_Init+0xac>)
 8102606:	681b      	ldr	r3, [r3, #0]
 8102608:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810260c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102610:	4a1e      	ldr	r2, [pc, #120]	; (810268c <HAL_Init+0xac>)
 8102612:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102616:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102618:	4b1c      	ldr	r3, [pc, #112]	; (810268c <HAL_Init+0xac>)
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	4a1b      	ldr	r2, [pc, #108]	; (810268c <HAL_Init+0xac>)
 810261e:	f043 0301 	orr.w	r3, r3, #1
 8102622:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102624:	2003      	movs	r0, #3
 8102626:	f000 f928 	bl	810287a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810262a:	f003 fc7d 	bl	8105f28 <HAL_RCC_GetSysClockFreq>
 810262e:	4601      	mov	r1, r0
 8102630:	4b15      	ldr	r3, [pc, #84]	; (8102688 <HAL_Init+0xa8>)
 8102632:	699b      	ldr	r3, [r3, #24]
 8102634:	0a1b      	lsrs	r3, r3, #8
 8102636:	f003 030f 	and.w	r3, r3, #15
 810263a:	4a15      	ldr	r2, [pc, #84]	; (8102690 <HAL_Init+0xb0>)
 810263c:	5cd3      	ldrb	r3, [r2, r3]
 810263e:	f003 031f 	and.w	r3, r3, #31
 8102642:	fa21 f303 	lsr.w	r3, r1, r3
 8102646:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102648:	4b0f      	ldr	r3, [pc, #60]	; (8102688 <HAL_Init+0xa8>)
 810264a:	699b      	ldr	r3, [r3, #24]
 810264c:	f003 030f 	and.w	r3, r3, #15
 8102650:	4a0f      	ldr	r2, [pc, #60]	; (8102690 <HAL_Init+0xb0>)
 8102652:	5cd3      	ldrb	r3, [r2, r3]
 8102654:	f003 031f 	and.w	r3, r3, #31
 8102658:	687a      	ldr	r2, [r7, #4]
 810265a:	fa22 f303 	lsr.w	r3, r2, r3
 810265e:	4a0d      	ldr	r2, [pc, #52]	; (8102694 <HAL_Init+0xb4>)
 8102660:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102662:	4b0c      	ldr	r3, [pc, #48]	; (8102694 <HAL_Init+0xb4>)
 8102664:	681b      	ldr	r3, [r3, #0]
 8102666:	4a0c      	ldr	r2, [pc, #48]	; (8102698 <HAL_Init+0xb8>)
 8102668:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810266a:	2000      	movs	r0, #0
 810266c:	f7ff fbb2 	bl	8101dd4 <HAL_InitTick>
 8102670:	4603      	mov	r3, r0
 8102672:	2b00      	cmp	r3, #0
 8102674:	d001      	beq.n	810267a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102676:	2301      	movs	r3, #1
 8102678:	e002      	b.n	8102680 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810267a:	f7ff fb7d 	bl	8101d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810267e:	2300      	movs	r3, #0
}
 8102680:	4618      	mov	r0, r3
 8102682:	3708      	adds	r7, #8
 8102684:	46bd      	mov	sp, r7
 8102686:	bd80      	pop	{r7, pc}
 8102688:	58024400 	.word	0x58024400
 810268c:	40024400 	.word	0x40024400
 8102690:	0810dc10 	.word	0x0810dc10
 8102694:	10000004 	.word	0x10000004
 8102698:	10000000 	.word	0x10000000

0810269c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810269c:	b480      	push	{r7}
 810269e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81026a0:	4b06      	ldr	r3, [pc, #24]	; (81026bc <HAL_IncTick+0x20>)
 81026a2:	781b      	ldrb	r3, [r3, #0]
 81026a4:	461a      	mov	r2, r3
 81026a6:	4b06      	ldr	r3, [pc, #24]	; (81026c0 <HAL_IncTick+0x24>)
 81026a8:	681b      	ldr	r3, [r3, #0]
 81026aa:	4413      	add	r3, r2
 81026ac:	4a04      	ldr	r2, [pc, #16]	; (81026c0 <HAL_IncTick+0x24>)
 81026ae:	6013      	str	r3, [r2, #0]
}
 81026b0:	bf00      	nop
 81026b2:	46bd      	mov	sp, r7
 81026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026b8:	4770      	bx	lr
 81026ba:	bf00      	nop
 81026bc:	10000008 	.word	0x10000008
 81026c0:	10004e84 	.word	0x10004e84

081026c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81026c4:	b480      	push	{r7}
 81026c6:	af00      	add	r7, sp, #0
  return uwTick;
 81026c8:	4b03      	ldr	r3, [pc, #12]	; (81026d8 <HAL_GetTick+0x14>)
 81026ca:	681b      	ldr	r3, [r3, #0]
}
 81026cc:	4618      	mov	r0, r3
 81026ce:	46bd      	mov	sp, r7
 81026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026d4:	4770      	bx	lr
 81026d6:	bf00      	nop
 81026d8:	10004e84 	.word	0x10004e84

081026dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81026dc:	b580      	push	{r7, lr}
 81026de:	b084      	sub	sp, #16
 81026e0:	af00      	add	r7, sp, #0
 81026e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81026e4:	f7ff ffee 	bl	81026c4 <HAL_GetTick>
 81026e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81026ee:	68fb      	ldr	r3, [r7, #12]
 81026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81026f4:	d005      	beq.n	8102702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81026f6:	4b09      	ldr	r3, [pc, #36]	; (810271c <HAL_Delay+0x40>)
 81026f8:	781b      	ldrb	r3, [r3, #0]
 81026fa:	461a      	mov	r2, r3
 81026fc:	68fb      	ldr	r3, [r7, #12]
 81026fe:	4413      	add	r3, r2
 8102700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102702:	bf00      	nop
 8102704:	f7ff ffde 	bl	81026c4 <HAL_GetTick>
 8102708:	4602      	mov	r2, r0
 810270a:	68bb      	ldr	r3, [r7, #8]
 810270c:	1ad3      	subs	r3, r2, r3
 810270e:	68fa      	ldr	r2, [r7, #12]
 8102710:	429a      	cmp	r2, r3
 8102712:	d8f7      	bhi.n	8102704 <HAL_Delay+0x28>
  {
  }
}
 8102714:	bf00      	nop
 8102716:	3710      	adds	r7, #16
 8102718:	46bd      	mov	sp, r7
 810271a:	bd80      	pop	{r7, pc}
 810271c:	10000008 	.word	0x10000008

08102720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102720:	b480      	push	{r7}
 8102722:	b085      	sub	sp, #20
 8102724:	af00      	add	r7, sp, #0
 8102726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102728:	687b      	ldr	r3, [r7, #4]
 810272a:	f003 0307 	and.w	r3, r3, #7
 810272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102730:	4b0c      	ldr	r3, [pc, #48]	; (8102764 <__NVIC_SetPriorityGrouping+0x44>)
 8102732:	68db      	ldr	r3, [r3, #12]
 8102734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102736:	68ba      	ldr	r2, [r7, #8]
 8102738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810273c:	4013      	ands	r3, r2
 810273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102740:	68fb      	ldr	r3, [r7, #12]
 8102742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102744:	68bb      	ldr	r3, [r7, #8]
 8102746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810274c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102752:	4a04      	ldr	r2, [pc, #16]	; (8102764 <__NVIC_SetPriorityGrouping+0x44>)
 8102754:	68bb      	ldr	r3, [r7, #8]
 8102756:	60d3      	str	r3, [r2, #12]
}
 8102758:	bf00      	nop
 810275a:	3714      	adds	r7, #20
 810275c:	46bd      	mov	sp, r7
 810275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102762:	4770      	bx	lr
 8102764:	e000ed00 	.word	0xe000ed00

08102768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102768:	b480      	push	{r7}
 810276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810276c:	4b04      	ldr	r3, [pc, #16]	; (8102780 <__NVIC_GetPriorityGrouping+0x18>)
 810276e:	68db      	ldr	r3, [r3, #12]
 8102770:	0a1b      	lsrs	r3, r3, #8
 8102772:	f003 0307 	and.w	r3, r3, #7
}
 8102776:	4618      	mov	r0, r3
 8102778:	46bd      	mov	sp, r7
 810277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810277e:	4770      	bx	lr
 8102780:	e000ed00 	.word	0xe000ed00

08102784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102784:	b480      	push	{r7}
 8102786:	b083      	sub	sp, #12
 8102788:	af00      	add	r7, sp, #0
 810278a:	4603      	mov	r3, r0
 810278c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810278e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102792:	2b00      	cmp	r3, #0
 8102794:	db0b      	blt.n	81027ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102796:	88fb      	ldrh	r3, [r7, #6]
 8102798:	f003 021f 	and.w	r2, r3, #31
 810279c:	4907      	ldr	r1, [pc, #28]	; (81027bc <__NVIC_EnableIRQ+0x38>)
 810279e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027a2:	095b      	lsrs	r3, r3, #5
 81027a4:	2001      	movs	r0, #1
 81027a6:	fa00 f202 	lsl.w	r2, r0, r2
 81027aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 81027ae:	bf00      	nop
 81027b0:	370c      	adds	r7, #12
 81027b2:	46bd      	mov	sp, r7
 81027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027b8:	4770      	bx	lr
 81027ba:	bf00      	nop
 81027bc:	e000e100 	.word	0xe000e100

081027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81027c0:	b480      	push	{r7}
 81027c2:	b083      	sub	sp, #12
 81027c4:	af00      	add	r7, sp, #0
 81027c6:	4603      	mov	r3, r0
 81027c8:	6039      	str	r1, [r7, #0]
 81027ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81027cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027d0:	2b00      	cmp	r3, #0
 81027d2:	db0a      	blt.n	81027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81027d4:	683b      	ldr	r3, [r7, #0]
 81027d6:	b2da      	uxtb	r2, r3
 81027d8:	490c      	ldr	r1, [pc, #48]	; (810280c <__NVIC_SetPriority+0x4c>)
 81027da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027de:	0112      	lsls	r2, r2, #4
 81027e0:	b2d2      	uxtb	r2, r2
 81027e2:	440b      	add	r3, r1
 81027e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81027e8:	e00a      	b.n	8102800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81027ea:	683b      	ldr	r3, [r7, #0]
 81027ec:	b2da      	uxtb	r2, r3
 81027ee:	4908      	ldr	r1, [pc, #32]	; (8102810 <__NVIC_SetPriority+0x50>)
 81027f0:	88fb      	ldrh	r3, [r7, #6]
 81027f2:	f003 030f 	and.w	r3, r3, #15
 81027f6:	3b04      	subs	r3, #4
 81027f8:	0112      	lsls	r2, r2, #4
 81027fa:	b2d2      	uxtb	r2, r2
 81027fc:	440b      	add	r3, r1
 81027fe:	761a      	strb	r2, [r3, #24]
}
 8102800:	bf00      	nop
 8102802:	370c      	adds	r7, #12
 8102804:	46bd      	mov	sp, r7
 8102806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280a:	4770      	bx	lr
 810280c:	e000e100 	.word	0xe000e100
 8102810:	e000ed00 	.word	0xe000ed00

08102814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102814:	b480      	push	{r7}
 8102816:	b089      	sub	sp, #36	; 0x24
 8102818:	af00      	add	r7, sp, #0
 810281a:	60f8      	str	r0, [r7, #12]
 810281c:	60b9      	str	r1, [r7, #8]
 810281e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102820:	68fb      	ldr	r3, [r7, #12]
 8102822:	f003 0307 	and.w	r3, r3, #7
 8102826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102828:	69fb      	ldr	r3, [r7, #28]
 810282a:	f1c3 0307 	rsb	r3, r3, #7
 810282e:	2b04      	cmp	r3, #4
 8102830:	bf28      	it	cs
 8102832:	2304      	movcs	r3, #4
 8102834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102836:	69fb      	ldr	r3, [r7, #28]
 8102838:	3304      	adds	r3, #4
 810283a:	2b06      	cmp	r3, #6
 810283c:	d902      	bls.n	8102844 <NVIC_EncodePriority+0x30>
 810283e:	69fb      	ldr	r3, [r7, #28]
 8102840:	3b03      	subs	r3, #3
 8102842:	e000      	b.n	8102846 <NVIC_EncodePriority+0x32>
 8102844:	2300      	movs	r3, #0
 8102846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102848:	f04f 32ff 	mov.w	r2, #4294967295
 810284c:	69bb      	ldr	r3, [r7, #24]
 810284e:	fa02 f303 	lsl.w	r3, r2, r3
 8102852:	43da      	mvns	r2, r3
 8102854:	68bb      	ldr	r3, [r7, #8]
 8102856:	401a      	ands	r2, r3
 8102858:	697b      	ldr	r3, [r7, #20]
 810285a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810285c:	f04f 31ff 	mov.w	r1, #4294967295
 8102860:	697b      	ldr	r3, [r7, #20]
 8102862:	fa01 f303 	lsl.w	r3, r1, r3
 8102866:	43d9      	mvns	r1, r3
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810286c:	4313      	orrs	r3, r2
         );
}
 810286e:	4618      	mov	r0, r3
 8102870:	3724      	adds	r7, #36	; 0x24
 8102872:	46bd      	mov	sp, r7
 8102874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102878:	4770      	bx	lr

0810287a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810287a:	b580      	push	{r7, lr}
 810287c:	b082      	sub	sp, #8
 810287e:	af00      	add	r7, sp, #0
 8102880:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102882:	6878      	ldr	r0, [r7, #4]
 8102884:	f7ff ff4c 	bl	8102720 <__NVIC_SetPriorityGrouping>
}
 8102888:	bf00      	nop
 810288a:	3708      	adds	r7, #8
 810288c:	46bd      	mov	sp, r7
 810288e:	bd80      	pop	{r7, pc}

08102890 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102890:	b580      	push	{r7, lr}
 8102892:	b086      	sub	sp, #24
 8102894:	af00      	add	r7, sp, #0
 8102896:	4603      	mov	r3, r0
 8102898:	60b9      	str	r1, [r7, #8]
 810289a:	607a      	str	r2, [r7, #4]
 810289c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810289e:	f7ff ff63 	bl	8102768 <__NVIC_GetPriorityGrouping>
 81028a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81028a4:	687a      	ldr	r2, [r7, #4]
 81028a6:	68b9      	ldr	r1, [r7, #8]
 81028a8:	6978      	ldr	r0, [r7, #20]
 81028aa:	f7ff ffb3 	bl	8102814 <NVIC_EncodePriority>
 81028ae:	4602      	mov	r2, r0
 81028b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81028b4:	4611      	mov	r1, r2
 81028b6:	4618      	mov	r0, r3
 81028b8:	f7ff ff82 	bl	81027c0 <__NVIC_SetPriority>
}
 81028bc:	bf00      	nop
 81028be:	3718      	adds	r7, #24
 81028c0:	46bd      	mov	sp, r7
 81028c2:	bd80      	pop	{r7, pc}

081028c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81028c4:	b580      	push	{r7, lr}
 81028c6:	b082      	sub	sp, #8
 81028c8:	af00      	add	r7, sp, #0
 81028ca:	4603      	mov	r3, r0
 81028cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81028ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81028d2:	4618      	mov	r0, r3
 81028d4:	f7ff ff56 	bl	8102784 <__NVIC_EnableIRQ>
}
 81028d8:	bf00      	nop
 81028da:	3708      	adds	r7, #8
 81028dc:	46bd      	mov	sp, r7
 81028de:	bd80      	pop	{r7, pc}

081028e0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81028e0:	b480      	push	{r7}
 81028e2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81028e4:	4b07      	ldr	r3, [pc, #28]	; (8102904 <HAL_GetCurrentCPUID+0x24>)
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	091b      	lsrs	r3, r3, #4
 81028ea:	f003 030f 	and.w	r3, r3, #15
 81028ee:	2b07      	cmp	r3, #7
 81028f0:	d101      	bne.n	81028f6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81028f2:	2303      	movs	r3, #3
 81028f4:	e000      	b.n	81028f8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81028f6:	2301      	movs	r3, #1
  }
}
 81028f8:	4618      	mov	r0, r3
 81028fa:	46bd      	mov	sp, r7
 81028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102900:	4770      	bx	lr
 8102902:	bf00      	nop
 8102904:	e000ed00 	.word	0xe000ed00

08102908 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8102908:	b580      	push	{r7, lr}
 810290a:	b086      	sub	sp, #24
 810290c:	af00      	add	r7, sp, #0
 810290e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102910:	f7ff fed8 	bl	81026c4 <HAL_GetTick>
 8102914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102916:	687b      	ldr	r3, [r7, #4]
 8102918:	2b00      	cmp	r3, #0
 810291a:	d101      	bne.n	8102920 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 810291c:	2301      	movs	r3, #1
 810291e:	e314      	b.n	8102f4a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	681b      	ldr	r3, [r3, #0]
 8102924:	4a66      	ldr	r2, [pc, #408]	; (8102ac0 <HAL_DMA_Init+0x1b8>)
 8102926:	4293      	cmp	r3, r2
 8102928:	d04a      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	4a65      	ldr	r2, [pc, #404]	; (8102ac4 <HAL_DMA_Init+0x1bc>)
 8102930:	4293      	cmp	r3, r2
 8102932:	d045      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	4a63      	ldr	r2, [pc, #396]	; (8102ac8 <HAL_DMA_Init+0x1c0>)
 810293a:	4293      	cmp	r3, r2
 810293c:	d040      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	681b      	ldr	r3, [r3, #0]
 8102942:	4a62      	ldr	r2, [pc, #392]	; (8102acc <HAL_DMA_Init+0x1c4>)
 8102944:	4293      	cmp	r3, r2
 8102946:	d03b      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	4a60      	ldr	r2, [pc, #384]	; (8102ad0 <HAL_DMA_Init+0x1c8>)
 810294e:	4293      	cmp	r3, r2
 8102950:	d036      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	681b      	ldr	r3, [r3, #0]
 8102956:	4a5f      	ldr	r2, [pc, #380]	; (8102ad4 <HAL_DMA_Init+0x1cc>)
 8102958:	4293      	cmp	r3, r2
 810295a:	d031      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	4a5d      	ldr	r2, [pc, #372]	; (8102ad8 <HAL_DMA_Init+0x1d0>)
 8102962:	4293      	cmp	r3, r2
 8102964:	d02c      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	4a5c      	ldr	r2, [pc, #368]	; (8102adc <HAL_DMA_Init+0x1d4>)
 810296c:	4293      	cmp	r3, r2
 810296e:	d027      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	4a5a      	ldr	r2, [pc, #360]	; (8102ae0 <HAL_DMA_Init+0x1d8>)
 8102976:	4293      	cmp	r3, r2
 8102978:	d022      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	4a59      	ldr	r2, [pc, #356]	; (8102ae4 <HAL_DMA_Init+0x1dc>)
 8102980:	4293      	cmp	r3, r2
 8102982:	d01d      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4a57      	ldr	r2, [pc, #348]	; (8102ae8 <HAL_DMA_Init+0x1e0>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d018      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	4a56      	ldr	r2, [pc, #344]	; (8102aec <HAL_DMA_Init+0x1e4>)
 8102994:	4293      	cmp	r3, r2
 8102996:	d013      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 8102998:	687b      	ldr	r3, [r7, #4]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	4a54      	ldr	r2, [pc, #336]	; (8102af0 <HAL_DMA_Init+0x1e8>)
 810299e:	4293      	cmp	r3, r2
 81029a0:	d00e      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a53      	ldr	r2, [pc, #332]	; (8102af4 <HAL_DMA_Init+0x1ec>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d009      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4a51      	ldr	r2, [pc, #324]	; (8102af8 <HAL_DMA_Init+0x1f0>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d004      	beq.n	81029c0 <HAL_DMA_Init+0xb8>
 81029b6:	687b      	ldr	r3, [r7, #4]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4a50      	ldr	r2, [pc, #320]	; (8102afc <HAL_DMA_Init+0x1f4>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d101      	bne.n	81029c4 <HAL_DMA_Init+0xbc>
 81029c0:	2301      	movs	r3, #1
 81029c2:	e000      	b.n	81029c6 <HAL_DMA_Init+0xbe>
 81029c4:	2300      	movs	r3, #0
 81029c6:	2b00      	cmp	r3, #0
 81029c8:	f000 813b 	beq.w	8102c42 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 81029cc:	687b      	ldr	r3, [r7, #4]
 81029ce:	2200      	movs	r2, #0
 81029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	2202      	movs	r2, #2
 81029d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	4a37      	ldr	r2, [pc, #220]	; (8102ac0 <HAL_DMA_Init+0x1b8>)
 81029e2:	4293      	cmp	r3, r2
 81029e4:	d04a      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	4a36      	ldr	r2, [pc, #216]	; (8102ac4 <HAL_DMA_Init+0x1bc>)
 81029ec:	4293      	cmp	r3, r2
 81029ee:	d045      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	4a34      	ldr	r2, [pc, #208]	; (8102ac8 <HAL_DMA_Init+0x1c0>)
 81029f6:	4293      	cmp	r3, r2
 81029f8:	d040      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	4a33      	ldr	r2, [pc, #204]	; (8102acc <HAL_DMA_Init+0x1c4>)
 8102a00:	4293      	cmp	r3, r2
 8102a02:	d03b      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	4a31      	ldr	r2, [pc, #196]	; (8102ad0 <HAL_DMA_Init+0x1c8>)
 8102a0a:	4293      	cmp	r3, r2
 8102a0c:	d036      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	681b      	ldr	r3, [r3, #0]
 8102a12:	4a30      	ldr	r2, [pc, #192]	; (8102ad4 <HAL_DMA_Init+0x1cc>)
 8102a14:	4293      	cmp	r3, r2
 8102a16:	d031      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	681b      	ldr	r3, [r3, #0]
 8102a1c:	4a2e      	ldr	r2, [pc, #184]	; (8102ad8 <HAL_DMA_Init+0x1d0>)
 8102a1e:	4293      	cmp	r3, r2
 8102a20:	d02c      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a22:	687b      	ldr	r3, [r7, #4]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	4a2d      	ldr	r2, [pc, #180]	; (8102adc <HAL_DMA_Init+0x1d4>)
 8102a28:	4293      	cmp	r3, r2
 8102a2a:	d027      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	4a2b      	ldr	r2, [pc, #172]	; (8102ae0 <HAL_DMA_Init+0x1d8>)
 8102a32:	4293      	cmp	r3, r2
 8102a34:	d022      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	4a2a      	ldr	r2, [pc, #168]	; (8102ae4 <HAL_DMA_Init+0x1dc>)
 8102a3c:	4293      	cmp	r3, r2
 8102a3e:	d01d      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	4a28      	ldr	r2, [pc, #160]	; (8102ae8 <HAL_DMA_Init+0x1e0>)
 8102a46:	4293      	cmp	r3, r2
 8102a48:	d018      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	681b      	ldr	r3, [r3, #0]
 8102a4e:	4a27      	ldr	r2, [pc, #156]	; (8102aec <HAL_DMA_Init+0x1e4>)
 8102a50:	4293      	cmp	r3, r2
 8102a52:	d013      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	4a25      	ldr	r2, [pc, #148]	; (8102af0 <HAL_DMA_Init+0x1e8>)
 8102a5a:	4293      	cmp	r3, r2
 8102a5c:	d00e      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	681b      	ldr	r3, [r3, #0]
 8102a62:	4a24      	ldr	r2, [pc, #144]	; (8102af4 <HAL_DMA_Init+0x1ec>)
 8102a64:	4293      	cmp	r3, r2
 8102a66:	d009      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	681b      	ldr	r3, [r3, #0]
 8102a6c:	4a22      	ldr	r2, [pc, #136]	; (8102af8 <HAL_DMA_Init+0x1f0>)
 8102a6e:	4293      	cmp	r3, r2
 8102a70:	d004      	beq.n	8102a7c <HAL_DMA_Init+0x174>
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	681b      	ldr	r3, [r3, #0]
 8102a76:	4a21      	ldr	r2, [pc, #132]	; (8102afc <HAL_DMA_Init+0x1f4>)
 8102a78:	4293      	cmp	r3, r2
 8102a7a:	d108      	bne.n	8102a8e <HAL_DMA_Init+0x186>
 8102a7c:	687b      	ldr	r3, [r7, #4]
 8102a7e:	681b      	ldr	r3, [r3, #0]
 8102a80:	681a      	ldr	r2, [r3, #0]
 8102a82:	687b      	ldr	r3, [r7, #4]
 8102a84:	681b      	ldr	r3, [r3, #0]
 8102a86:	f022 0201 	bic.w	r2, r2, #1
 8102a8a:	601a      	str	r2, [r3, #0]
 8102a8c:	e007      	b.n	8102a9e <HAL_DMA_Init+0x196>
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	681b      	ldr	r3, [r3, #0]
 8102a92:	681a      	ldr	r2, [r3, #0]
 8102a94:	687b      	ldr	r3, [r7, #4]
 8102a96:	681b      	ldr	r3, [r3, #0]
 8102a98:	f022 0201 	bic.w	r2, r2, #1
 8102a9c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102a9e:	e02f      	b.n	8102b00 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102aa0:	f7ff fe10 	bl	81026c4 <HAL_GetTick>
 8102aa4:	4602      	mov	r2, r0
 8102aa6:	693b      	ldr	r3, [r7, #16]
 8102aa8:	1ad3      	subs	r3, r2, r3
 8102aaa:	2b05      	cmp	r3, #5
 8102aac:	d928      	bls.n	8102b00 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	2220      	movs	r2, #32
 8102ab2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	2203      	movs	r2, #3
 8102ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102abc:	2301      	movs	r3, #1
 8102abe:	e244      	b.n	8102f4a <HAL_DMA_Init+0x642>
 8102ac0:	40020010 	.word	0x40020010
 8102ac4:	40020028 	.word	0x40020028
 8102ac8:	40020040 	.word	0x40020040
 8102acc:	40020058 	.word	0x40020058
 8102ad0:	40020070 	.word	0x40020070
 8102ad4:	40020088 	.word	0x40020088
 8102ad8:	400200a0 	.word	0x400200a0
 8102adc:	400200b8 	.word	0x400200b8
 8102ae0:	40020410 	.word	0x40020410
 8102ae4:	40020428 	.word	0x40020428
 8102ae8:	40020440 	.word	0x40020440
 8102aec:	40020458 	.word	0x40020458
 8102af0:	40020470 	.word	0x40020470
 8102af4:	40020488 	.word	0x40020488
 8102af8:	400204a0 	.word	0x400204a0
 8102afc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	681b      	ldr	r3, [r3, #0]
 8102b06:	f003 0301 	and.w	r3, r3, #1
 8102b0a:	2b00      	cmp	r3, #0
 8102b0c:	d1c8      	bne.n	8102aa0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	681b      	ldr	r3, [r3, #0]
 8102b14:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102b16:	697a      	ldr	r2, [r7, #20]
 8102b18:	4b84      	ldr	r3, [pc, #528]	; (8102d2c <HAL_DMA_Init+0x424>)
 8102b1a:	4013      	ands	r3, r2
 8102b1c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102b1e:	687b      	ldr	r3, [r7, #4]
 8102b20:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102b26:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	691b      	ldr	r3, [r3, #16]
 8102b2c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102b32:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102b34:	687b      	ldr	r3, [r7, #4]
 8102b36:	699b      	ldr	r3, [r3, #24]
 8102b38:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102b3a:	687b      	ldr	r3, [r7, #4]
 8102b3c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102b3e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	6a1b      	ldr	r3, [r3, #32]
 8102b44:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102b46:	697a      	ldr	r2, [r7, #20]
 8102b48:	4313      	orrs	r3, r2
 8102b4a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102b50:	2b04      	cmp	r3, #4
 8102b52:	d107      	bne.n	8102b64 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102b54:	687b      	ldr	r3, [r7, #4]
 8102b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8102b58:	687b      	ldr	r3, [r7, #4]
 8102b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b5c:	4313      	orrs	r3, r2
 8102b5e:	697a      	ldr	r2, [r7, #20]
 8102b60:	4313      	orrs	r3, r2
 8102b62:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102b64:	4b72      	ldr	r3, [pc, #456]	; (8102d30 <HAL_DMA_Init+0x428>)
 8102b66:	681b      	ldr	r3, [r3, #0]
 8102b68:	0c1b      	lsrs	r3, r3, #16
 8102b6a:	041b      	lsls	r3, r3, #16
 8102b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102b70:	d328      	bcc.n	8102bc4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	685b      	ldr	r3, [r3, #4]
 8102b76:	2b28      	cmp	r3, #40	; 0x28
 8102b78:	d903      	bls.n	8102b82 <HAL_DMA_Init+0x27a>
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	685b      	ldr	r3, [r3, #4]
 8102b7e:	2b2e      	cmp	r3, #46	; 0x2e
 8102b80:	d917      	bls.n	8102bb2 <HAL_DMA_Init+0x2aa>
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	685b      	ldr	r3, [r3, #4]
 8102b86:	2b3e      	cmp	r3, #62	; 0x3e
 8102b88:	d903      	bls.n	8102b92 <HAL_DMA_Init+0x28a>
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	685b      	ldr	r3, [r3, #4]
 8102b8e:	2b42      	cmp	r3, #66	; 0x42
 8102b90:	d90f      	bls.n	8102bb2 <HAL_DMA_Init+0x2aa>
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	685b      	ldr	r3, [r3, #4]
 8102b96:	2b46      	cmp	r3, #70	; 0x46
 8102b98:	d903      	bls.n	8102ba2 <HAL_DMA_Init+0x29a>
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	685b      	ldr	r3, [r3, #4]
 8102b9e:	2b48      	cmp	r3, #72	; 0x48
 8102ba0:	d907      	bls.n	8102bb2 <HAL_DMA_Init+0x2aa>
 8102ba2:	687b      	ldr	r3, [r7, #4]
 8102ba4:	685b      	ldr	r3, [r3, #4]
 8102ba6:	2b4e      	cmp	r3, #78	; 0x4e
 8102ba8:	d905      	bls.n	8102bb6 <HAL_DMA_Init+0x2ae>
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	685b      	ldr	r3, [r3, #4]
 8102bae:	2b52      	cmp	r3, #82	; 0x52
 8102bb0:	d801      	bhi.n	8102bb6 <HAL_DMA_Init+0x2ae>
 8102bb2:	2301      	movs	r3, #1
 8102bb4:	e000      	b.n	8102bb8 <HAL_DMA_Init+0x2b0>
 8102bb6:	2300      	movs	r3, #0
 8102bb8:	2b00      	cmp	r3, #0
 8102bba:	d003      	beq.n	8102bc4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102bbc:	697b      	ldr	r3, [r7, #20]
 8102bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102bc2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102bc4:	687b      	ldr	r3, [r7, #4]
 8102bc6:	681b      	ldr	r3, [r3, #0]
 8102bc8:	697a      	ldr	r2, [r7, #20]
 8102bca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	681b      	ldr	r3, [r3, #0]
 8102bd0:	695b      	ldr	r3, [r3, #20]
 8102bd2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102bd4:	697b      	ldr	r3, [r7, #20]
 8102bd6:	f023 0307 	bic.w	r3, r3, #7
 8102bda:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102be0:	697a      	ldr	r2, [r7, #20]
 8102be2:	4313      	orrs	r3, r2
 8102be4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102bea:	2b04      	cmp	r3, #4
 8102bec:	d117      	bne.n	8102c1e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102bf2:	697a      	ldr	r2, [r7, #20]
 8102bf4:	4313      	orrs	r3, r2
 8102bf6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102bf8:	687b      	ldr	r3, [r7, #4]
 8102bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bfc:	2b00      	cmp	r3, #0
 8102bfe:	d00e      	beq.n	8102c1e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102c00:	6878      	ldr	r0, [r7, #4]
 8102c02:	f002 f811 	bl	8104c28 <DMA_CheckFifoParam>
 8102c06:	4603      	mov	r3, r0
 8102c08:	2b00      	cmp	r3, #0
 8102c0a:	d008      	beq.n	8102c1e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	2240      	movs	r2, #64	; 0x40
 8102c10:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	2201      	movs	r2, #1
 8102c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8102c1a:	2301      	movs	r3, #1
 8102c1c:	e195      	b.n	8102f4a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	681b      	ldr	r3, [r3, #0]
 8102c22:	697a      	ldr	r2, [r7, #20]
 8102c24:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102c26:	6878      	ldr	r0, [r7, #4]
 8102c28:	f001 ff4c 	bl	8104ac4 <DMA_CalcBaseAndBitshift>
 8102c2c:	4603      	mov	r3, r0
 8102c2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c34:	f003 031f 	and.w	r3, r3, #31
 8102c38:	223f      	movs	r2, #63	; 0x3f
 8102c3a:	409a      	lsls	r2, r3
 8102c3c:	68bb      	ldr	r3, [r7, #8]
 8102c3e:	609a      	str	r2, [r3, #8]
 8102c40:	e0cb      	b.n	8102dda <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	681b      	ldr	r3, [r3, #0]
 8102c46:	4a3b      	ldr	r2, [pc, #236]	; (8102d34 <HAL_DMA_Init+0x42c>)
 8102c48:	4293      	cmp	r3, r2
 8102c4a:	d022      	beq.n	8102c92 <HAL_DMA_Init+0x38a>
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	681b      	ldr	r3, [r3, #0]
 8102c50:	4a39      	ldr	r2, [pc, #228]	; (8102d38 <HAL_DMA_Init+0x430>)
 8102c52:	4293      	cmp	r3, r2
 8102c54:	d01d      	beq.n	8102c92 <HAL_DMA_Init+0x38a>
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	681b      	ldr	r3, [r3, #0]
 8102c5a:	4a38      	ldr	r2, [pc, #224]	; (8102d3c <HAL_DMA_Init+0x434>)
 8102c5c:	4293      	cmp	r3, r2
 8102c5e:	d018      	beq.n	8102c92 <HAL_DMA_Init+0x38a>
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	681b      	ldr	r3, [r3, #0]
 8102c64:	4a36      	ldr	r2, [pc, #216]	; (8102d40 <HAL_DMA_Init+0x438>)
 8102c66:	4293      	cmp	r3, r2
 8102c68:	d013      	beq.n	8102c92 <HAL_DMA_Init+0x38a>
 8102c6a:	687b      	ldr	r3, [r7, #4]
 8102c6c:	681b      	ldr	r3, [r3, #0]
 8102c6e:	4a35      	ldr	r2, [pc, #212]	; (8102d44 <HAL_DMA_Init+0x43c>)
 8102c70:	4293      	cmp	r3, r2
 8102c72:	d00e      	beq.n	8102c92 <HAL_DMA_Init+0x38a>
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	4a33      	ldr	r2, [pc, #204]	; (8102d48 <HAL_DMA_Init+0x440>)
 8102c7a:	4293      	cmp	r3, r2
 8102c7c:	d009      	beq.n	8102c92 <HAL_DMA_Init+0x38a>
 8102c7e:	687b      	ldr	r3, [r7, #4]
 8102c80:	681b      	ldr	r3, [r3, #0]
 8102c82:	4a32      	ldr	r2, [pc, #200]	; (8102d4c <HAL_DMA_Init+0x444>)
 8102c84:	4293      	cmp	r3, r2
 8102c86:	d004      	beq.n	8102c92 <HAL_DMA_Init+0x38a>
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	4a30      	ldr	r2, [pc, #192]	; (8102d50 <HAL_DMA_Init+0x448>)
 8102c8e:	4293      	cmp	r3, r2
 8102c90:	d101      	bne.n	8102c96 <HAL_DMA_Init+0x38e>
 8102c92:	2301      	movs	r3, #1
 8102c94:	e000      	b.n	8102c98 <HAL_DMA_Init+0x390>
 8102c96:	2300      	movs	r3, #0
 8102c98:	2b00      	cmp	r3, #0
 8102c9a:	f000 8095 	beq.w	8102dc8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102c9e:	687b      	ldr	r3, [r7, #4]
 8102ca0:	681b      	ldr	r3, [r3, #0]
 8102ca2:	4a24      	ldr	r2, [pc, #144]	; (8102d34 <HAL_DMA_Init+0x42c>)
 8102ca4:	4293      	cmp	r3, r2
 8102ca6:	d021      	beq.n	8102cec <HAL_DMA_Init+0x3e4>
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	4a22      	ldr	r2, [pc, #136]	; (8102d38 <HAL_DMA_Init+0x430>)
 8102cae:	4293      	cmp	r3, r2
 8102cb0:	d01c      	beq.n	8102cec <HAL_DMA_Init+0x3e4>
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	4a21      	ldr	r2, [pc, #132]	; (8102d3c <HAL_DMA_Init+0x434>)
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d017      	beq.n	8102cec <HAL_DMA_Init+0x3e4>
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	4a1f      	ldr	r2, [pc, #124]	; (8102d40 <HAL_DMA_Init+0x438>)
 8102cc2:	4293      	cmp	r3, r2
 8102cc4:	d012      	beq.n	8102cec <HAL_DMA_Init+0x3e4>
 8102cc6:	687b      	ldr	r3, [r7, #4]
 8102cc8:	681b      	ldr	r3, [r3, #0]
 8102cca:	4a1e      	ldr	r2, [pc, #120]	; (8102d44 <HAL_DMA_Init+0x43c>)
 8102ccc:	4293      	cmp	r3, r2
 8102cce:	d00d      	beq.n	8102cec <HAL_DMA_Init+0x3e4>
 8102cd0:	687b      	ldr	r3, [r7, #4]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	4a1c      	ldr	r2, [pc, #112]	; (8102d48 <HAL_DMA_Init+0x440>)
 8102cd6:	4293      	cmp	r3, r2
 8102cd8:	d008      	beq.n	8102cec <HAL_DMA_Init+0x3e4>
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	681b      	ldr	r3, [r3, #0]
 8102cde:	4a1b      	ldr	r2, [pc, #108]	; (8102d4c <HAL_DMA_Init+0x444>)
 8102ce0:	4293      	cmp	r3, r2
 8102ce2:	d003      	beq.n	8102cec <HAL_DMA_Init+0x3e4>
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	681b      	ldr	r3, [r3, #0]
 8102ce8:	4a19      	ldr	r2, [pc, #100]	; (8102d50 <HAL_DMA_Init+0x448>)
 8102cea:	4293      	cmp	r3, r2
 8102cec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	2200      	movs	r2, #0
 8102cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	2202      	movs	r2, #2
 8102cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	681b      	ldr	r3, [r3, #0]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102d06:	697b      	ldr	r3, [r7, #20]
 8102d08:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102d0c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102d10:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	689b      	ldr	r3, [r3, #8]
 8102d16:	2b40      	cmp	r3, #64	; 0x40
 8102d18:	d01c      	beq.n	8102d54 <HAL_DMA_Init+0x44c>
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	689b      	ldr	r3, [r3, #8]
 8102d1e:	2b80      	cmp	r3, #128	; 0x80
 8102d20:	d102      	bne.n	8102d28 <HAL_DMA_Init+0x420>
 8102d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102d26:	e016      	b.n	8102d56 <HAL_DMA_Init+0x44e>
 8102d28:	2300      	movs	r3, #0
 8102d2a:	e014      	b.n	8102d56 <HAL_DMA_Init+0x44e>
 8102d2c:	fe10803f 	.word	0xfe10803f
 8102d30:	5c001000 	.word	0x5c001000
 8102d34:	58025408 	.word	0x58025408
 8102d38:	5802541c 	.word	0x5802541c
 8102d3c:	58025430 	.word	0x58025430
 8102d40:	58025444 	.word	0x58025444
 8102d44:	58025458 	.word	0x58025458
 8102d48:	5802546c 	.word	0x5802546c
 8102d4c:	58025480 	.word	0x58025480
 8102d50:	58025494 	.word	0x58025494
 8102d54:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102d56:	687a      	ldr	r2, [r7, #4]
 8102d58:	68d2      	ldr	r2, [r2, #12]
 8102d5a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	691b      	ldr	r3, [r3, #16]
 8102d62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	695b      	ldr	r3, [r3, #20]
 8102d6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102d6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	699b      	ldr	r3, [r3, #24]
 8102d72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102d74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	69db      	ldr	r3, [r3, #28]
 8102d7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102d7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	6a1b      	ldr	r3, [r3, #32]
 8102d82:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102d84:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102d86:	697a      	ldr	r2, [r7, #20]
 8102d88:	4313      	orrs	r3, r2
 8102d8a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	697a      	ldr	r2, [r7, #20]
 8102d92:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	461a      	mov	r2, r3
 8102d9a:	4b6e      	ldr	r3, [pc, #440]	; (8102f54 <HAL_DMA_Init+0x64c>)
 8102d9c:	4413      	add	r3, r2
 8102d9e:	4a6e      	ldr	r2, [pc, #440]	; (8102f58 <HAL_DMA_Init+0x650>)
 8102da0:	fba2 2303 	umull	r2, r3, r2, r3
 8102da4:	091b      	lsrs	r3, r3, #4
 8102da6:	009a      	lsls	r2, r3, #2
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102dac:	6878      	ldr	r0, [r7, #4]
 8102dae:	f001 fe89 	bl	8104ac4 <DMA_CalcBaseAndBitshift>
 8102db2:	4603      	mov	r3, r0
 8102db4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102dba:	f003 031f 	and.w	r3, r3, #31
 8102dbe:	2201      	movs	r2, #1
 8102dc0:	409a      	lsls	r2, r3
 8102dc2:	68fb      	ldr	r3, [r7, #12]
 8102dc4:	605a      	str	r2, [r3, #4]
 8102dc6:	e008      	b.n	8102dda <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	2240      	movs	r2, #64	; 0x40
 8102dcc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102dce:	687b      	ldr	r3, [r7, #4]
 8102dd0:	2203      	movs	r2, #3
 8102dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8102dd6:	2301      	movs	r3, #1
 8102dd8:	e0b7      	b.n	8102f4a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	4a5f      	ldr	r2, [pc, #380]	; (8102f5c <HAL_DMA_Init+0x654>)
 8102de0:	4293      	cmp	r3, r2
 8102de2:	d072      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102de4:	687b      	ldr	r3, [r7, #4]
 8102de6:	681b      	ldr	r3, [r3, #0]
 8102de8:	4a5d      	ldr	r2, [pc, #372]	; (8102f60 <HAL_DMA_Init+0x658>)
 8102dea:	4293      	cmp	r3, r2
 8102dec:	d06d      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	4a5c      	ldr	r2, [pc, #368]	; (8102f64 <HAL_DMA_Init+0x65c>)
 8102df4:	4293      	cmp	r3, r2
 8102df6:	d068      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	4a5a      	ldr	r2, [pc, #360]	; (8102f68 <HAL_DMA_Init+0x660>)
 8102dfe:	4293      	cmp	r3, r2
 8102e00:	d063      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	4a59      	ldr	r2, [pc, #356]	; (8102f6c <HAL_DMA_Init+0x664>)
 8102e08:	4293      	cmp	r3, r2
 8102e0a:	d05e      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	4a57      	ldr	r2, [pc, #348]	; (8102f70 <HAL_DMA_Init+0x668>)
 8102e12:	4293      	cmp	r3, r2
 8102e14:	d059      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	4a56      	ldr	r2, [pc, #344]	; (8102f74 <HAL_DMA_Init+0x66c>)
 8102e1c:	4293      	cmp	r3, r2
 8102e1e:	d054      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	4a54      	ldr	r2, [pc, #336]	; (8102f78 <HAL_DMA_Init+0x670>)
 8102e26:	4293      	cmp	r3, r2
 8102e28:	d04f      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	4a53      	ldr	r2, [pc, #332]	; (8102f7c <HAL_DMA_Init+0x674>)
 8102e30:	4293      	cmp	r3, r2
 8102e32:	d04a      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	4a51      	ldr	r2, [pc, #324]	; (8102f80 <HAL_DMA_Init+0x678>)
 8102e3a:	4293      	cmp	r3, r2
 8102e3c:	d045      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	4a50      	ldr	r2, [pc, #320]	; (8102f84 <HAL_DMA_Init+0x67c>)
 8102e44:	4293      	cmp	r3, r2
 8102e46:	d040      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	4a4e      	ldr	r2, [pc, #312]	; (8102f88 <HAL_DMA_Init+0x680>)
 8102e4e:	4293      	cmp	r3, r2
 8102e50:	d03b      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	4a4d      	ldr	r2, [pc, #308]	; (8102f8c <HAL_DMA_Init+0x684>)
 8102e58:	4293      	cmp	r3, r2
 8102e5a:	d036      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	4a4b      	ldr	r2, [pc, #300]	; (8102f90 <HAL_DMA_Init+0x688>)
 8102e62:	4293      	cmp	r3, r2
 8102e64:	d031      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	4a4a      	ldr	r2, [pc, #296]	; (8102f94 <HAL_DMA_Init+0x68c>)
 8102e6c:	4293      	cmp	r3, r2
 8102e6e:	d02c      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a48      	ldr	r2, [pc, #288]	; (8102f98 <HAL_DMA_Init+0x690>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d027      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	4a47      	ldr	r2, [pc, #284]	; (8102f9c <HAL_DMA_Init+0x694>)
 8102e80:	4293      	cmp	r3, r2
 8102e82:	d022      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	4a45      	ldr	r2, [pc, #276]	; (8102fa0 <HAL_DMA_Init+0x698>)
 8102e8a:	4293      	cmp	r3, r2
 8102e8c:	d01d      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	4a44      	ldr	r2, [pc, #272]	; (8102fa4 <HAL_DMA_Init+0x69c>)
 8102e94:	4293      	cmp	r3, r2
 8102e96:	d018      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	681b      	ldr	r3, [r3, #0]
 8102e9c:	4a42      	ldr	r2, [pc, #264]	; (8102fa8 <HAL_DMA_Init+0x6a0>)
 8102e9e:	4293      	cmp	r3, r2
 8102ea0:	d013      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	681b      	ldr	r3, [r3, #0]
 8102ea6:	4a41      	ldr	r2, [pc, #260]	; (8102fac <HAL_DMA_Init+0x6a4>)
 8102ea8:	4293      	cmp	r3, r2
 8102eaa:	d00e      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	681b      	ldr	r3, [r3, #0]
 8102eb0:	4a3f      	ldr	r2, [pc, #252]	; (8102fb0 <HAL_DMA_Init+0x6a8>)
 8102eb2:	4293      	cmp	r3, r2
 8102eb4:	d009      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	4a3e      	ldr	r2, [pc, #248]	; (8102fb4 <HAL_DMA_Init+0x6ac>)
 8102ebc:	4293      	cmp	r3, r2
 8102ebe:	d004      	beq.n	8102eca <HAL_DMA_Init+0x5c2>
 8102ec0:	687b      	ldr	r3, [r7, #4]
 8102ec2:	681b      	ldr	r3, [r3, #0]
 8102ec4:	4a3c      	ldr	r2, [pc, #240]	; (8102fb8 <HAL_DMA_Init+0x6b0>)
 8102ec6:	4293      	cmp	r3, r2
 8102ec8:	d101      	bne.n	8102ece <HAL_DMA_Init+0x5c6>
 8102eca:	2301      	movs	r3, #1
 8102ecc:	e000      	b.n	8102ed0 <HAL_DMA_Init+0x5c8>
 8102ece:	2300      	movs	r3, #0
 8102ed0:	2b00      	cmp	r3, #0
 8102ed2:	d032      	beq.n	8102f3a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102ed4:	6878      	ldr	r0, [r7, #4]
 8102ed6:	f001 ff23 	bl	8104d20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	689b      	ldr	r3, [r3, #8]
 8102ede:	2b80      	cmp	r3, #128	; 0x80
 8102ee0:	d102      	bne.n	8102ee8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	2200      	movs	r2, #0
 8102ee6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102ee8:	687b      	ldr	r3, [r7, #4]
 8102eea:	685a      	ldr	r2, [r3, #4]
 8102eec:	687b      	ldr	r3, [r7, #4]
 8102eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102ef0:	b2d2      	uxtb	r2, r2
 8102ef2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102ef8:	687a      	ldr	r2, [r7, #4]
 8102efa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102efc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	685b      	ldr	r3, [r3, #4]
 8102f02:	2b00      	cmp	r3, #0
 8102f04:	d010      	beq.n	8102f28 <HAL_DMA_Init+0x620>
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	685b      	ldr	r3, [r3, #4]
 8102f0a:	2b08      	cmp	r3, #8
 8102f0c:	d80c      	bhi.n	8102f28 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102f0e:	6878      	ldr	r0, [r7, #4]
 8102f10:	f001 ffa0 	bl	8104e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102f18:	2200      	movs	r2, #0
 8102f1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102f20:	687a      	ldr	r2, [r7, #4]
 8102f22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8102f24:	605a      	str	r2, [r3, #4]
 8102f26:	e008      	b.n	8102f3a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	2200      	movs	r2, #0
 8102f2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	2200      	movs	r2, #0
 8102f32:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	2200      	movs	r2, #0
 8102f38:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	2200      	movs	r2, #0
 8102f3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	2201      	movs	r2, #1
 8102f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8102f48:	2300      	movs	r3, #0
}
 8102f4a:	4618      	mov	r0, r3
 8102f4c:	3718      	adds	r7, #24
 8102f4e:	46bd      	mov	sp, r7
 8102f50:	bd80      	pop	{r7, pc}
 8102f52:	bf00      	nop
 8102f54:	a7fdabf8 	.word	0xa7fdabf8
 8102f58:	cccccccd 	.word	0xcccccccd
 8102f5c:	40020010 	.word	0x40020010
 8102f60:	40020028 	.word	0x40020028
 8102f64:	40020040 	.word	0x40020040
 8102f68:	40020058 	.word	0x40020058
 8102f6c:	40020070 	.word	0x40020070
 8102f70:	40020088 	.word	0x40020088
 8102f74:	400200a0 	.word	0x400200a0
 8102f78:	400200b8 	.word	0x400200b8
 8102f7c:	40020410 	.word	0x40020410
 8102f80:	40020428 	.word	0x40020428
 8102f84:	40020440 	.word	0x40020440
 8102f88:	40020458 	.word	0x40020458
 8102f8c:	40020470 	.word	0x40020470
 8102f90:	40020488 	.word	0x40020488
 8102f94:	400204a0 	.word	0x400204a0
 8102f98:	400204b8 	.word	0x400204b8
 8102f9c:	58025408 	.word	0x58025408
 8102fa0:	5802541c 	.word	0x5802541c
 8102fa4:	58025430 	.word	0x58025430
 8102fa8:	58025444 	.word	0x58025444
 8102fac:	58025458 	.word	0x58025458
 8102fb0:	5802546c 	.word	0x5802546c
 8102fb4:	58025480 	.word	0x58025480
 8102fb8:	58025494 	.word	0x58025494

08102fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102fbc:	b580      	push	{r7, lr}
 8102fbe:	b086      	sub	sp, #24
 8102fc0:	af00      	add	r7, sp, #0
 8102fc2:	60f8      	str	r0, [r7, #12]
 8102fc4:	60b9      	str	r1, [r7, #8]
 8102fc6:	607a      	str	r2, [r7, #4]
 8102fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8102fca:	2300      	movs	r3, #0
 8102fcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102fce:	68fb      	ldr	r3, [r7, #12]
 8102fd0:	2b00      	cmp	r3, #0
 8102fd2:	d101      	bne.n	8102fd8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102fd4:	2301      	movs	r3, #1
 8102fd6:	e226      	b.n	8103426 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8102fd8:	68fb      	ldr	r3, [r7, #12]
 8102fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102fde:	2b01      	cmp	r3, #1
 8102fe0:	d101      	bne.n	8102fe6 <HAL_DMA_Start_IT+0x2a>
 8102fe2:	2302      	movs	r3, #2
 8102fe4:	e21f      	b.n	8103426 <HAL_DMA_Start_IT+0x46a>
 8102fe6:	68fb      	ldr	r3, [r7, #12]
 8102fe8:	2201      	movs	r2, #1
 8102fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102fee:	68fb      	ldr	r3, [r7, #12]
 8102ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102ff4:	b2db      	uxtb	r3, r3
 8102ff6:	2b01      	cmp	r3, #1
 8102ff8:	f040 820a 	bne.w	8103410 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102ffc:	68fb      	ldr	r3, [r7, #12]
 8102ffe:	2202      	movs	r2, #2
 8103000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103004:	68fb      	ldr	r3, [r7, #12]
 8103006:	2200      	movs	r2, #0
 8103008:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810300a:	68fb      	ldr	r3, [r7, #12]
 810300c:	681b      	ldr	r3, [r3, #0]
 810300e:	4a68      	ldr	r2, [pc, #416]	; (81031b0 <HAL_DMA_Start_IT+0x1f4>)
 8103010:	4293      	cmp	r3, r2
 8103012:	d04a      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	4a66      	ldr	r2, [pc, #408]	; (81031b4 <HAL_DMA_Start_IT+0x1f8>)
 810301a:	4293      	cmp	r3, r2
 810301c:	d045      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 810301e:	68fb      	ldr	r3, [r7, #12]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4a65      	ldr	r2, [pc, #404]	; (81031b8 <HAL_DMA_Start_IT+0x1fc>)
 8103024:	4293      	cmp	r3, r2
 8103026:	d040      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103028:	68fb      	ldr	r3, [r7, #12]
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	4a63      	ldr	r2, [pc, #396]	; (81031bc <HAL_DMA_Start_IT+0x200>)
 810302e:	4293      	cmp	r3, r2
 8103030:	d03b      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103032:	68fb      	ldr	r3, [r7, #12]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	4a62      	ldr	r2, [pc, #392]	; (81031c0 <HAL_DMA_Start_IT+0x204>)
 8103038:	4293      	cmp	r3, r2
 810303a:	d036      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 810303c:	68fb      	ldr	r3, [r7, #12]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	4a60      	ldr	r2, [pc, #384]	; (81031c4 <HAL_DMA_Start_IT+0x208>)
 8103042:	4293      	cmp	r3, r2
 8103044:	d031      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103046:	68fb      	ldr	r3, [r7, #12]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	4a5f      	ldr	r2, [pc, #380]	; (81031c8 <HAL_DMA_Start_IT+0x20c>)
 810304c:	4293      	cmp	r3, r2
 810304e:	d02c      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103050:	68fb      	ldr	r3, [r7, #12]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	4a5d      	ldr	r2, [pc, #372]	; (81031cc <HAL_DMA_Start_IT+0x210>)
 8103056:	4293      	cmp	r3, r2
 8103058:	d027      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 810305a:	68fb      	ldr	r3, [r7, #12]
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	4a5c      	ldr	r2, [pc, #368]	; (81031d0 <HAL_DMA_Start_IT+0x214>)
 8103060:	4293      	cmp	r3, r2
 8103062:	d022      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103064:	68fb      	ldr	r3, [r7, #12]
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	4a5a      	ldr	r2, [pc, #360]	; (81031d4 <HAL_DMA_Start_IT+0x218>)
 810306a:	4293      	cmp	r3, r2
 810306c:	d01d      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 810306e:	68fb      	ldr	r3, [r7, #12]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	4a59      	ldr	r2, [pc, #356]	; (81031d8 <HAL_DMA_Start_IT+0x21c>)
 8103074:	4293      	cmp	r3, r2
 8103076:	d018      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103078:	68fb      	ldr	r3, [r7, #12]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	4a57      	ldr	r2, [pc, #348]	; (81031dc <HAL_DMA_Start_IT+0x220>)
 810307e:	4293      	cmp	r3, r2
 8103080:	d013      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103082:	68fb      	ldr	r3, [r7, #12]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	4a56      	ldr	r2, [pc, #344]	; (81031e0 <HAL_DMA_Start_IT+0x224>)
 8103088:	4293      	cmp	r3, r2
 810308a:	d00e      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 810308c:	68fb      	ldr	r3, [r7, #12]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	4a54      	ldr	r2, [pc, #336]	; (81031e4 <HAL_DMA_Start_IT+0x228>)
 8103092:	4293      	cmp	r3, r2
 8103094:	d009      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 8103096:	68fb      	ldr	r3, [r7, #12]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	4a53      	ldr	r2, [pc, #332]	; (81031e8 <HAL_DMA_Start_IT+0x22c>)
 810309c:	4293      	cmp	r3, r2
 810309e:	d004      	beq.n	81030aa <HAL_DMA_Start_IT+0xee>
 81030a0:	68fb      	ldr	r3, [r7, #12]
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	4a51      	ldr	r2, [pc, #324]	; (81031ec <HAL_DMA_Start_IT+0x230>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d108      	bne.n	81030bc <HAL_DMA_Start_IT+0x100>
 81030aa:	68fb      	ldr	r3, [r7, #12]
 81030ac:	681b      	ldr	r3, [r3, #0]
 81030ae:	681a      	ldr	r2, [r3, #0]
 81030b0:	68fb      	ldr	r3, [r7, #12]
 81030b2:	681b      	ldr	r3, [r3, #0]
 81030b4:	f022 0201 	bic.w	r2, r2, #1
 81030b8:	601a      	str	r2, [r3, #0]
 81030ba:	e007      	b.n	81030cc <HAL_DMA_Start_IT+0x110>
 81030bc:	68fb      	ldr	r3, [r7, #12]
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	681a      	ldr	r2, [r3, #0]
 81030c2:	68fb      	ldr	r3, [r7, #12]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	f022 0201 	bic.w	r2, r2, #1
 81030ca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 81030cc:	683b      	ldr	r3, [r7, #0]
 81030ce:	687a      	ldr	r2, [r7, #4]
 81030d0:	68b9      	ldr	r1, [r7, #8]
 81030d2:	68f8      	ldr	r0, [r7, #12]
 81030d4:	f001 fb4a 	bl	810476c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81030d8:	68fb      	ldr	r3, [r7, #12]
 81030da:	681b      	ldr	r3, [r3, #0]
 81030dc:	4a34      	ldr	r2, [pc, #208]	; (81031b0 <HAL_DMA_Start_IT+0x1f4>)
 81030de:	4293      	cmp	r3, r2
 81030e0:	d04a      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 81030e2:	68fb      	ldr	r3, [r7, #12]
 81030e4:	681b      	ldr	r3, [r3, #0]
 81030e6:	4a33      	ldr	r2, [pc, #204]	; (81031b4 <HAL_DMA_Start_IT+0x1f8>)
 81030e8:	4293      	cmp	r3, r2
 81030ea:	d045      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 81030ec:	68fb      	ldr	r3, [r7, #12]
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	4a31      	ldr	r2, [pc, #196]	; (81031b8 <HAL_DMA_Start_IT+0x1fc>)
 81030f2:	4293      	cmp	r3, r2
 81030f4:	d040      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 81030f6:	68fb      	ldr	r3, [r7, #12]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	4a30      	ldr	r2, [pc, #192]	; (81031bc <HAL_DMA_Start_IT+0x200>)
 81030fc:	4293      	cmp	r3, r2
 81030fe:	d03b      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 8103100:	68fb      	ldr	r3, [r7, #12]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	4a2e      	ldr	r2, [pc, #184]	; (81031c0 <HAL_DMA_Start_IT+0x204>)
 8103106:	4293      	cmp	r3, r2
 8103108:	d036      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 810310a:	68fb      	ldr	r3, [r7, #12]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	4a2d      	ldr	r2, [pc, #180]	; (81031c4 <HAL_DMA_Start_IT+0x208>)
 8103110:	4293      	cmp	r3, r2
 8103112:	d031      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 8103114:	68fb      	ldr	r3, [r7, #12]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	4a2b      	ldr	r2, [pc, #172]	; (81031c8 <HAL_DMA_Start_IT+0x20c>)
 810311a:	4293      	cmp	r3, r2
 810311c:	d02c      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 810311e:	68fb      	ldr	r3, [r7, #12]
 8103120:	681b      	ldr	r3, [r3, #0]
 8103122:	4a2a      	ldr	r2, [pc, #168]	; (81031cc <HAL_DMA_Start_IT+0x210>)
 8103124:	4293      	cmp	r3, r2
 8103126:	d027      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 8103128:	68fb      	ldr	r3, [r7, #12]
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	4a28      	ldr	r2, [pc, #160]	; (81031d0 <HAL_DMA_Start_IT+0x214>)
 810312e:	4293      	cmp	r3, r2
 8103130:	d022      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 8103132:	68fb      	ldr	r3, [r7, #12]
 8103134:	681b      	ldr	r3, [r3, #0]
 8103136:	4a27      	ldr	r2, [pc, #156]	; (81031d4 <HAL_DMA_Start_IT+0x218>)
 8103138:	4293      	cmp	r3, r2
 810313a:	d01d      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	4a25      	ldr	r2, [pc, #148]	; (81031d8 <HAL_DMA_Start_IT+0x21c>)
 8103142:	4293      	cmp	r3, r2
 8103144:	d018      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 8103146:	68fb      	ldr	r3, [r7, #12]
 8103148:	681b      	ldr	r3, [r3, #0]
 810314a:	4a24      	ldr	r2, [pc, #144]	; (81031dc <HAL_DMA_Start_IT+0x220>)
 810314c:	4293      	cmp	r3, r2
 810314e:	d013      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 8103150:	68fb      	ldr	r3, [r7, #12]
 8103152:	681b      	ldr	r3, [r3, #0]
 8103154:	4a22      	ldr	r2, [pc, #136]	; (81031e0 <HAL_DMA_Start_IT+0x224>)
 8103156:	4293      	cmp	r3, r2
 8103158:	d00e      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 810315a:	68fb      	ldr	r3, [r7, #12]
 810315c:	681b      	ldr	r3, [r3, #0]
 810315e:	4a21      	ldr	r2, [pc, #132]	; (81031e4 <HAL_DMA_Start_IT+0x228>)
 8103160:	4293      	cmp	r3, r2
 8103162:	d009      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 8103164:	68fb      	ldr	r3, [r7, #12]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	4a1f      	ldr	r2, [pc, #124]	; (81031e8 <HAL_DMA_Start_IT+0x22c>)
 810316a:	4293      	cmp	r3, r2
 810316c:	d004      	beq.n	8103178 <HAL_DMA_Start_IT+0x1bc>
 810316e:	68fb      	ldr	r3, [r7, #12]
 8103170:	681b      	ldr	r3, [r3, #0]
 8103172:	4a1e      	ldr	r2, [pc, #120]	; (81031ec <HAL_DMA_Start_IT+0x230>)
 8103174:	4293      	cmp	r3, r2
 8103176:	d101      	bne.n	810317c <HAL_DMA_Start_IT+0x1c0>
 8103178:	2301      	movs	r3, #1
 810317a:	e000      	b.n	810317e <HAL_DMA_Start_IT+0x1c2>
 810317c:	2300      	movs	r3, #0
 810317e:	2b00      	cmp	r3, #0
 8103180:	d036      	beq.n	81031f0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8103182:	68fb      	ldr	r3, [r7, #12]
 8103184:	681b      	ldr	r3, [r3, #0]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	f023 021e 	bic.w	r2, r3, #30
 810318c:	68fb      	ldr	r3, [r7, #12]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	f042 0216 	orr.w	r2, r2, #22
 8103194:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103196:	68fb      	ldr	r3, [r7, #12]
 8103198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810319a:	2b00      	cmp	r3, #0
 810319c:	d03e      	beq.n	810321c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 810319e:	68fb      	ldr	r3, [r7, #12]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	681a      	ldr	r2, [r3, #0]
 81031a4:	68fb      	ldr	r3, [r7, #12]
 81031a6:	681b      	ldr	r3, [r3, #0]
 81031a8:	f042 0208 	orr.w	r2, r2, #8
 81031ac:	601a      	str	r2, [r3, #0]
 81031ae:	e035      	b.n	810321c <HAL_DMA_Start_IT+0x260>
 81031b0:	40020010 	.word	0x40020010
 81031b4:	40020028 	.word	0x40020028
 81031b8:	40020040 	.word	0x40020040
 81031bc:	40020058 	.word	0x40020058
 81031c0:	40020070 	.word	0x40020070
 81031c4:	40020088 	.word	0x40020088
 81031c8:	400200a0 	.word	0x400200a0
 81031cc:	400200b8 	.word	0x400200b8
 81031d0:	40020410 	.word	0x40020410
 81031d4:	40020428 	.word	0x40020428
 81031d8:	40020440 	.word	0x40020440
 81031dc:	40020458 	.word	0x40020458
 81031e0:	40020470 	.word	0x40020470
 81031e4:	40020488 	.word	0x40020488
 81031e8:	400204a0 	.word	0x400204a0
 81031ec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 81031f0:	68fb      	ldr	r3, [r7, #12]
 81031f2:	681b      	ldr	r3, [r3, #0]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	f023 020e 	bic.w	r2, r3, #14
 81031fa:	68fb      	ldr	r3, [r7, #12]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	f042 020a 	orr.w	r2, r2, #10
 8103202:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103204:	68fb      	ldr	r3, [r7, #12]
 8103206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103208:	2b00      	cmp	r3, #0
 810320a:	d007      	beq.n	810321c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 810320c:	68fb      	ldr	r3, [r7, #12]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	681a      	ldr	r2, [r3, #0]
 8103212:	68fb      	ldr	r3, [r7, #12]
 8103214:	681b      	ldr	r3, [r3, #0]
 8103216:	f042 0204 	orr.w	r2, r2, #4
 810321a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810321c:	68fb      	ldr	r3, [r7, #12]
 810321e:	681b      	ldr	r3, [r3, #0]
 8103220:	4a83      	ldr	r2, [pc, #524]	; (8103430 <HAL_DMA_Start_IT+0x474>)
 8103222:	4293      	cmp	r3, r2
 8103224:	d072      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103226:	68fb      	ldr	r3, [r7, #12]
 8103228:	681b      	ldr	r3, [r3, #0]
 810322a:	4a82      	ldr	r2, [pc, #520]	; (8103434 <HAL_DMA_Start_IT+0x478>)
 810322c:	4293      	cmp	r3, r2
 810322e:	d06d      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103230:	68fb      	ldr	r3, [r7, #12]
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	4a80      	ldr	r2, [pc, #512]	; (8103438 <HAL_DMA_Start_IT+0x47c>)
 8103236:	4293      	cmp	r3, r2
 8103238:	d068      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 810323a:	68fb      	ldr	r3, [r7, #12]
 810323c:	681b      	ldr	r3, [r3, #0]
 810323e:	4a7f      	ldr	r2, [pc, #508]	; (810343c <HAL_DMA_Start_IT+0x480>)
 8103240:	4293      	cmp	r3, r2
 8103242:	d063      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103244:	68fb      	ldr	r3, [r7, #12]
 8103246:	681b      	ldr	r3, [r3, #0]
 8103248:	4a7d      	ldr	r2, [pc, #500]	; (8103440 <HAL_DMA_Start_IT+0x484>)
 810324a:	4293      	cmp	r3, r2
 810324c:	d05e      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 810324e:	68fb      	ldr	r3, [r7, #12]
 8103250:	681b      	ldr	r3, [r3, #0]
 8103252:	4a7c      	ldr	r2, [pc, #496]	; (8103444 <HAL_DMA_Start_IT+0x488>)
 8103254:	4293      	cmp	r3, r2
 8103256:	d059      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103258:	68fb      	ldr	r3, [r7, #12]
 810325a:	681b      	ldr	r3, [r3, #0]
 810325c:	4a7a      	ldr	r2, [pc, #488]	; (8103448 <HAL_DMA_Start_IT+0x48c>)
 810325e:	4293      	cmp	r3, r2
 8103260:	d054      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103262:	68fb      	ldr	r3, [r7, #12]
 8103264:	681b      	ldr	r3, [r3, #0]
 8103266:	4a79      	ldr	r2, [pc, #484]	; (810344c <HAL_DMA_Start_IT+0x490>)
 8103268:	4293      	cmp	r3, r2
 810326a:	d04f      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 810326c:	68fb      	ldr	r3, [r7, #12]
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	4a77      	ldr	r2, [pc, #476]	; (8103450 <HAL_DMA_Start_IT+0x494>)
 8103272:	4293      	cmp	r3, r2
 8103274:	d04a      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103276:	68fb      	ldr	r3, [r7, #12]
 8103278:	681b      	ldr	r3, [r3, #0]
 810327a:	4a76      	ldr	r2, [pc, #472]	; (8103454 <HAL_DMA_Start_IT+0x498>)
 810327c:	4293      	cmp	r3, r2
 810327e:	d045      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103280:	68fb      	ldr	r3, [r7, #12]
 8103282:	681b      	ldr	r3, [r3, #0]
 8103284:	4a74      	ldr	r2, [pc, #464]	; (8103458 <HAL_DMA_Start_IT+0x49c>)
 8103286:	4293      	cmp	r3, r2
 8103288:	d040      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 810328a:	68fb      	ldr	r3, [r7, #12]
 810328c:	681b      	ldr	r3, [r3, #0]
 810328e:	4a73      	ldr	r2, [pc, #460]	; (810345c <HAL_DMA_Start_IT+0x4a0>)
 8103290:	4293      	cmp	r3, r2
 8103292:	d03b      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	681b      	ldr	r3, [r3, #0]
 8103298:	4a71      	ldr	r2, [pc, #452]	; (8103460 <HAL_DMA_Start_IT+0x4a4>)
 810329a:	4293      	cmp	r3, r2
 810329c:	d036      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 810329e:	68fb      	ldr	r3, [r7, #12]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	4a70      	ldr	r2, [pc, #448]	; (8103464 <HAL_DMA_Start_IT+0x4a8>)
 81032a4:	4293      	cmp	r3, r2
 81032a6:	d031      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032a8:	68fb      	ldr	r3, [r7, #12]
 81032aa:	681b      	ldr	r3, [r3, #0]
 81032ac:	4a6e      	ldr	r2, [pc, #440]	; (8103468 <HAL_DMA_Start_IT+0x4ac>)
 81032ae:	4293      	cmp	r3, r2
 81032b0:	d02c      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032b2:	68fb      	ldr	r3, [r7, #12]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	4a6d      	ldr	r2, [pc, #436]	; (810346c <HAL_DMA_Start_IT+0x4b0>)
 81032b8:	4293      	cmp	r3, r2
 81032ba:	d027      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032bc:	68fb      	ldr	r3, [r7, #12]
 81032be:	681b      	ldr	r3, [r3, #0]
 81032c0:	4a6b      	ldr	r2, [pc, #428]	; (8103470 <HAL_DMA_Start_IT+0x4b4>)
 81032c2:	4293      	cmp	r3, r2
 81032c4:	d022      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032c6:	68fb      	ldr	r3, [r7, #12]
 81032c8:	681b      	ldr	r3, [r3, #0]
 81032ca:	4a6a      	ldr	r2, [pc, #424]	; (8103474 <HAL_DMA_Start_IT+0x4b8>)
 81032cc:	4293      	cmp	r3, r2
 81032ce:	d01d      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032d0:	68fb      	ldr	r3, [r7, #12]
 81032d2:	681b      	ldr	r3, [r3, #0]
 81032d4:	4a68      	ldr	r2, [pc, #416]	; (8103478 <HAL_DMA_Start_IT+0x4bc>)
 81032d6:	4293      	cmp	r3, r2
 81032d8:	d018      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032da:	68fb      	ldr	r3, [r7, #12]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	4a67      	ldr	r2, [pc, #412]	; (810347c <HAL_DMA_Start_IT+0x4c0>)
 81032e0:	4293      	cmp	r3, r2
 81032e2:	d013      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032e4:	68fb      	ldr	r3, [r7, #12]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	4a65      	ldr	r2, [pc, #404]	; (8103480 <HAL_DMA_Start_IT+0x4c4>)
 81032ea:	4293      	cmp	r3, r2
 81032ec:	d00e      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032ee:	68fb      	ldr	r3, [r7, #12]
 81032f0:	681b      	ldr	r3, [r3, #0]
 81032f2:	4a64      	ldr	r2, [pc, #400]	; (8103484 <HAL_DMA_Start_IT+0x4c8>)
 81032f4:	4293      	cmp	r3, r2
 81032f6:	d009      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 81032f8:	68fb      	ldr	r3, [r7, #12]
 81032fa:	681b      	ldr	r3, [r3, #0]
 81032fc:	4a62      	ldr	r2, [pc, #392]	; (8103488 <HAL_DMA_Start_IT+0x4cc>)
 81032fe:	4293      	cmp	r3, r2
 8103300:	d004      	beq.n	810330c <HAL_DMA_Start_IT+0x350>
 8103302:	68fb      	ldr	r3, [r7, #12]
 8103304:	681b      	ldr	r3, [r3, #0]
 8103306:	4a61      	ldr	r2, [pc, #388]	; (810348c <HAL_DMA_Start_IT+0x4d0>)
 8103308:	4293      	cmp	r3, r2
 810330a:	d101      	bne.n	8103310 <HAL_DMA_Start_IT+0x354>
 810330c:	2301      	movs	r3, #1
 810330e:	e000      	b.n	8103312 <HAL_DMA_Start_IT+0x356>
 8103310:	2300      	movs	r3, #0
 8103312:	2b00      	cmp	r3, #0
 8103314:	d01a      	beq.n	810334c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8103316:	68fb      	ldr	r3, [r7, #12]
 8103318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103320:	2b00      	cmp	r3, #0
 8103322:	d007      	beq.n	8103334 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8103324:	68fb      	ldr	r3, [r7, #12]
 8103326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103328:	681a      	ldr	r2, [r3, #0]
 810332a:	68fb      	ldr	r3, [r7, #12]
 810332c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810332e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8103332:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8103334:	68fb      	ldr	r3, [r7, #12]
 8103336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103338:	2b00      	cmp	r3, #0
 810333a:	d007      	beq.n	810334c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 810333c:	68fb      	ldr	r3, [r7, #12]
 810333e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103340:	681a      	ldr	r2, [r3, #0]
 8103342:	68fb      	ldr	r3, [r7, #12]
 8103344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810334a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 810334c:	68fb      	ldr	r3, [r7, #12]
 810334e:	681b      	ldr	r3, [r3, #0]
 8103350:	4a37      	ldr	r2, [pc, #220]	; (8103430 <HAL_DMA_Start_IT+0x474>)
 8103352:	4293      	cmp	r3, r2
 8103354:	d04a      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 8103356:	68fb      	ldr	r3, [r7, #12]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	4a36      	ldr	r2, [pc, #216]	; (8103434 <HAL_DMA_Start_IT+0x478>)
 810335c:	4293      	cmp	r3, r2
 810335e:	d045      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 8103360:	68fb      	ldr	r3, [r7, #12]
 8103362:	681b      	ldr	r3, [r3, #0]
 8103364:	4a34      	ldr	r2, [pc, #208]	; (8103438 <HAL_DMA_Start_IT+0x47c>)
 8103366:	4293      	cmp	r3, r2
 8103368:	d040      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 810336a:	68fb      	ldr	r3, [r7, #12]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	4a33      	ldr	r2, [pc, #204]	; (810343c <HAL_DMA_Start_IT+0x480>)
 8103370:	4293      	cmp	r3, r2
 8103372:	d03b      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 8103374:	68fb      	ldr	r3, [r7, #12]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	4a31      	ldr	r2, [pc, #196]	; (8103440 <HAL_DMA_Start_IT+0x484>)
 810337a:	4293      	cmp	r3, r2
 810337c:	d036      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 810337e:	68fb      	ldr	r3, [r7, #12]
 8103380:	681b      	ldr	r3, [r3, #0]
 8103382:	4a30      	ldr	r2, [pc, #192]	; (8103444 <HAL_DMA_Start_IT+0x488>)
 8103384:	4293      	cmp	r3, r2
 8103386:	d031      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 8103388:	68fb      	ldr	r3, [r7, #12]
 810338a:	681b      	ldr	r3, [r3, #0]
 810338c:	4a2e      	ldr	r2, [pc, #184]	; (8103448 <HAL_DMA_Start_IT+0x48c>)
 810338e:	4293      	cmp	r3, r2
 8103390:	d02c      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 8103392:	68fb      	ldr	r3, [r7, #12]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	4a2d      	ldr	r2, [pc, #180]	; (810344c <HAL_DMA_Start_IT+0x490>)
 8103398:	4293      	cmp	r3, r2
 810339a:	d027      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 810339c:	68fb      	ldr	r3, [r7, #12]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	4a2b      	ldr	r2, [pc, #172]	; (8103450 <HAL_DMA_Start_IT+0x494>)
 81033a2:	4293      	cmp	r3, r2
 81033a4:	d022      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 81033a6:	68fb      	ldr	r3, [r7, #12]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	4a2a      	ldr	r2, [pc, #168]	; (8103454 <HAL_DMA_Start_IT+0x498>)
 81033ac:	4293      	cmp	r3, r2
 81033ae:	d01d      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 81033b0:	68fb      	ldr	r3, [r7, #12]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	4a28      	ldr	r2, [pc, #160]	; (8103458 <HAL_DMA_Start_IT+0x49c>)
 81033b6:	4293      	cmp	r3, r2
 81033b8:	d018      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 81033ba:	68fb      	ldr	r3, [r7, #12]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	4a27      	ldr	r2, [pc, #156]	; (810345c <HAL_DMA_Start_IT+0x4a0>)
 81033c0:	4293      	cmp	r3, r2
 81033c2:	d013      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 81033c4:	68fb      	ldr	r3, [r7, #12]
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	4a25      	ldr	r2, [pc, #148]	; (8103460 <HAL_DMA_Start_IT+0x4a4>)
 81033ca:	4293      	cmp	r3, r2
 81033cc:	d00e      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 81033ce:	68fb      	ldr	r3, [r7, #12]
 81033d0:	681b      	ldr	r3, [r3, #0]
 81033d2:	4a24      	ldr	r2, [pc, #144]	; (8103464 <HAL_DMA_Start_IT+0x4a8>)
 81033d4:	4293      	cmp	r3, r2
 81033d6:	d009      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 81033d8:	68fb      	ldr	r3, [r7, #12]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	4a22      	ldr	r2, [pc, #136]	; (8103468 <HAL_DMA_Start_IT+0x4ac>)
 81033de:	4293      	cmp	r3, r2
 81033e0:	d004      	beq.n	81033ec <HAL_DMA_Start_IT+0x430>
 81033e2:	68fb      	ldr	r3, [r7, #12]
 81033e4:	681b      	ldr	r3, [r3, #0]
 81033e6:	4a21      	ldr	r2, [pc, #132]	; (810346c <HAL_DMA_Start_IT+0x4b0>)
 81033e8:	4293      	cmp	r3, r2
 81033ea:	d108      	bne.n	81033fe <HAL_DMA_Start_IT+0x442>
 81033ec:	68fb      	ldr	r3, [r7, #12]
 81033ee:	681b      	ldr	r3, [r3, #0]
 81033f0:	681a      	ldr	r2, [r3, #0]
 81033f2:	68fb      	ldr	r3, [r7, #12]
 81033f4:	681b      	ldr	r3, [r3, #0]
 81033f6:	f042 0201 	orr.w	r2, r2, #1
 81033fa:	601a      	str	r2, [r3, #0]
 81033fc:	e012      	b.n	8103424 <HAL_DMA_Start_IT+0x468>
 81033fe:	68fb      	ldr	r3, [r7, #12]
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	681a      	ldr	r2, [r3, #0]
 8103404:	68fb      	ldr	r3, [r7, #12]
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	f042 0201 	orr.w	r2, r2, #1
 810340c:	601a      	str	r2, [r3, #0]
 810340e:	e009      	b.n	8103424 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8103410:	68fb      	ldr	r3, [r7, #12]
 8103412:	2200      	movs	r2, #0
 8103414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8103418:	68fb      	ldr	r3, [r7, #12]
 810341a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810341e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8103420:	2301      	movs	r3, #1
 8103422:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8103424:	7dfb      	ldrb	r3, [r7, #23]
}
 8103426:	4618      	mov	r0, r3
 8103428:	3718      	adds	r7, #24
 810342a:	46bd      	mov	sp, r7
 810342c:	bd80      	pop	{r7, pc}
 810342e:	bf00      	nop
 8103430:	40020010 	.word	0x40020010
 8103434:	40020028 	.word	0x40020028
 8103438:	40020040 	.word	0x40020040
 810343c:	40020058 	.word	0x40020058
 8103440:	40020070 	.word	0x40020070
 8103444:	40020088 	.word	0x40020088
 8103448:	400200a0 	.word	0x400200a0
 810344c:	400200b8 	.word	0x400200b8
 8103450:	40020410 	.word	0x40020410
 8103454:	40020428 	.word	0x40020428
 8103458:	40020440 	.word	0x40020440
 810345c:	40020458 	.word	0x40020458
 8103460:	40020470 	.word	0x40020470
 8103464:	40020488 	.word	0x40020488
 8103468:	400204a0 	.word	0x400204a0
 810346c:	400204b8 	.word	0x400204b8
 8103470:	58025408 	.word	0x58025408
 8103474:	5802541c 	.word	0x5802541c
 8103478:	58025430 	.word	0x58025430
 810347c:	58025444 	.word	0x58025444
 8103480:	58025458 	.word	0x58025458
 8103484:	5802546c 	.word	0x5802546c
 8103488:	58025480 	.word	0x58025480
 810348c:	58025494 	.word	0x58025494

08103490 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103490:	b580      	push	{r7, lr}
 8103492:	b084      	sub	sp, #16
 8103494:	af00      	add	r7, sp, #0
 8103496:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103498:	687b      	ldr	r3, [r7, #4]
 810349a:	2b00      	cmp	r3, #0
 810349c:	d101      	bne.n	81034a2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810349e:	2301      	movs	r3, #1
 81034a0:	e205      	b.n	81038ae <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 81034a8:	b2db      	uxtb	r3, r3
 81034aa:	2b02      	cmp	r3, #2
 81034ac:	d004      	beq.n	81034b8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81034ae:	687b      	ldr	r3, [r7, #4]
 81034b0:	2280      	movs	r2, #128	; 0x80
 81034b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81034b4:	2301      	movs	r3, #1
 81034b6:	e1fa      	b.n	81038ae <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	681b      	ldr	r3, [r3, #0]
 81034bc:	4a8c      	ldr	r2, [pc, #560]	; (81036f0 <HAL_DMA_Abort_IT+0x260>)
 81034be:	4293      	cmp	r3, r2
 81034c0:	d04a      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	681b      	ldr	r3, [r3, #0]
 81034c6:	4a8b      	ldr	r2, [pc, #556]	; (81036f4 <HAL_DMA_Abort_IT+0x264>)
 81034c8:	4293      	cmp	r3, r2
 81034ca:	d045      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 81034cc:	687b      	ldr	r3, [r7, #4]
 81034ce:	681b      	ldr	r3, [r3, #0]
 81034d0:	4a89      	ldr	r2, [pc, #548]	; (81036f8 <HAL_DMA_Abort_IT+0x268>)
 81034d2:	4293      	cmp	r3, r2
 81034d4:	d040      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 81034d6:	687b      	ldr	r3, [r7, #4]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	4a88      	ldr	r2, [pc, #544]	; (81036fc <HAL_DMA_Abort_IT+0x26c>)
 81034dc:	4293      	cmp	r3, r2
 81034de:	d03b      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 81034e0:	687b      	ldr	r3, [r7, #4]
 81034e2:	681b      	ldr	r3, [r3, #0]
 81034e4:	4a86      	ldr	r2, [pc, #536]	; (8103700 <HAL_DMA_Abort_IT+0x270>)
 81034e6:	4293      	cmp	r3, r2
 81034e8:	d036      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	681b      	ldr	r3, [r3, #0]
 81034ee:	4a85      	ldr	r2, [pc, #532]	; (8103704 <HAL_DMA_Abort_IT+0x274>)
 81034f0:	4293      	cmp	r3, r2
 81034f2:	d031      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	4a83      	ldr	r2, [pc, #524]	; (8103708 <HAL_DMA_Abort_IT+0x278>)
 81034fa:	4293      	cmp	r3, r2
 81034fc:	d02c      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	681b      	ldr	r3, [r3, #0]
 8103502:	4a82      	ldr	r2, [pc, #520]	; (810370c <HAL_DMA_Abort_IT+0x27c>)
 8103504:	4293      	cmp	r3, r2
 8103506:	d027      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	4a80      	ldr	r2, [pc, #512]	; (8103710 <HAL_DMA_Abort_IT+0x280>)
 810350e:	4293      	cmp	r3, r2
 8103510:	d022      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	681b      	ldr	r3, [r3, #0]
 8103516:	4a7f      	ldr	r2, [pc, #508]	; (8103714 <HAL_DMA_Abort_IT+0x284>)
 8103518:	4293      	cmp	r3, r2
 810351a:	d01d      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 810351c:	687b      	ldr	r3, [r7, #4]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a7d      	ldr	r2, [pc, #500]	; (8103718 <HAL_DMA_Abort_IT+0x288>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d018      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 8103526:	687b      	ldr	r3, [r7, #4]
 8103528:	681b      	ldr	r3, [r3, #0]
 810352a:	4a7c      	ldr	r2, [pc, #496]	; (810371c <HAL_DMA_Abort_IT+0x28c>)
 810352c:	4293      	cmp	r3, r2
 810352e:	d013      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	681b      	ldr	r3, [r3, #0]
 8103534:	4a7a      	ldr	r2, [pc, #488]	; (8103720 <HAL_DMA_Abort_IT+0x290>)
 8103536:	4293      	cmp	r3, r2
 8103538:	d00e      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 810353a:	687b      	ldr	r3, [r7, #4]
 810353c:	681b      	ldr	r3, [r3, #0]
 810353e:	4a79      	ldr	r2, [pc, #484]	; (8103724 <HAL_DMA_Abort_IT+0x294>)
 8103540:	4293      	cmp	r3, r2
 8103542:	d009      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 8103544:	687b      	ldr	r3, [r7, #4]
 8103546:	681b      	ldr	r3, [r3, #0]
 8103548:	4a77      	ldr	r2, [pc, #476]	; (8103728 <HAL_DMA_Abort_IT+0x298>)
 810354a:	4293      	cmp	r3, r2
 810354c:	d004      	beq.n	8103558 <HAL_DMA_Abort_IT+0xc8>
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	681b      	ldr	r3, [r3, #0]
 8103552:	4a76      	ldr	r2, [pc, #472]	; (810372c <HAL_DMA_Abort_IT+0x29c>)
 8103554:	4293      	cmp	r3, r2
 8103556:	d101      	bne.n	810355c <HAL_DMA_Abort_IT+0xcc>
 8103558:	2301      	movs	r3, #1
 810355a:	e000      	b.n	810355e <HAL_DMA_Abort_IT+0xce>
 810355c:	2300      	movs	r3, #0
 810355e:	2b00      	cmp	r3, #0
 8103560:	d065      	beq.n	810362e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	2204      	movs	r2, #4
 8103566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	681b      	ldr	r3, [r3, #0]
 810356e:	4a60      	ldr	r2, [pc, #384]	; (81036f0 <HAL_DMA_Abort_IT+0x260>)
 8103570:	4293      	cmp	r3, r2
 8103572:	d04a      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	681b      	ldr	r3, [r3, #0]
 8103578:	4a5e      	ldr	r2, [pc, #376]	; (81036f4 <HAL_DMA_Abort_IT+0x264>)
 810357a:	4293      	cmp	r3, r2
 810357c:	d045      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	4a5d      	ldr	r2, [pc, #372]	; (81036f8 <HAL_DMA_Abort_IT+0x268>)
 8103584:	4293      	cmp	r3, r2
 8103586:	d040      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 8103588:	687b      	ldr	r3, [r7, #4]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	4a5b      	ldr	r2, [pc, #364]	; (81036fc <HAL_DMA_Abort_IT+0x26c>)
 810358e:	4293      	cmp	r3, r2
 8103590:	d03b      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	681b      	ldr	r3, [r3, #0]
 8103596:	4a5a      	ldr	r2, [pc, #360]	; (8103700 <HAL_DMA_Abort_IT+0x270>)
 8103598:	4293      	cmp	r3, r2
 810359a:	d036      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 810359c:	687b      	ldr	r3, [r7, #4]
 810359e:	681b      	ldr	r3, [r3, #0]
 81035a0:	4a58      	ldr	r2, [pc, #352]	; (8103704 <HAL_DMA_Abort_IT+0x274>)
 81035a2:	4293      	cmp	r3, r2
 81035a4:	d031      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	681b      	ldr	r3, [r3, #0]
 81035aa:	4a57      	ldr	r2, [pc, #348]	; (8103708 <HAL_DMA_Abort_IT+0x278>)
 81035ac:	4293      	cmp	r3, r2
 81035ae:	d02c      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035b0:	687b      	ldr	r3, [r7, #4]
 81035b2:	681b      	ldr	r3, [r3, #0]
 81035b4:	4a55      	ldr	r2, [pc, #340]	; (810370c <HAL_DMA_Abort_IT+0x27c>)
 81035b6:	4293      	cmp	r3, r2
 81035b8:	d027      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	4a54      	ldr	r2, [pc, #336]	; (8103710 <HAL_DMA_Abort_IT+0x280>)
 81035c0:	4293      	cmp	r3, r2
 81035c2:	d022      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	4a52      	ldr	r2, [pc, #328]	; (8103714 <HAL_DMA_Abort_IT+0x284>)
 81035ca:	4293      	cmp	r3, r2
 81035cc:	d01d      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	681b      	ldr	r3, [r3, #0]
 81035d2:	4a51      	ldr	r2, [pc, #324]	; (8103718 <HAL_DMA_Abort_IT+0x288>)
 81035d4:	4293      	cmp	r3, r2
 81035d6:	d018      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035d8:	687b      	ldr	r3, [r7, #4]
 81035da:	681b      	ldr	r3, [r3, #0]
 81035dc:	4a4f      	ldr	r2, [pc, #316]	; (810371c <HAL_DMA_Abort_IT+0x28c>)
 81035de:	4293      	cmp	r3, r2
 81035e0:	d013      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	4a4e      	ldr	r2, [pc, #312]	; (8103720 <HAL_DMA_Abort_IT+0x290>)
 81035e8:	4293      	cmp	r3, r2
 81035ea:	d00e      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	4a4c      	ldr	r2, [pc, #304]	; (8103724 <HAL_DMA_Abort_IT+0x294>)
 81035f2:	4293      	cmp	r3, r2
 81035f4:	d009      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 81035f6:	687b      	ldr	r3, [r7, #4]
 81035f8:	681b      	ldr	r3, [r3, #0]
 81035fa:	4a4b      	ldr	r2, [pc, #300]	; (8103728 <HAL_DMA_Abort_IT+0x298>)
 81035fc:	4293      	cmp	r3, r2
 81035fe:	d004      	beq.n	810360a <HAL_DMA_Abort_IT+0x17a>
 8103600:	687b      	ldr	r3, [r7, #4]
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	4a49      	ldr	r2, [pc, #292]	; (810372c <HAL_DMA_Abort_IT+0x29c>)
 8103606:	4293      	cmp	r3, r2
 8103608:	d108      	bne.n	810361c <HAL_DMA_Abort_IT+0x18c>
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	681a      	ldr	r2, [r3, #0]
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	f022 0201 	bic.w	r2, r2, #1
 8103618:	601a      	str	r2, [r3, #0]
 810361a:	e147      	b.n	81038ac <HAL_DMA_Abort_IT+0x41c>
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	681a      	ldr	r2, [r3, #0]
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	f022 0201 	bic.w	r2, r2, #1
 810362a:	601a      	str	r2, [r3, #0]
 810362c:	e13e      	b.n	81038ac <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	681a      	ldr	r2, [r3, #0]
 8103634:	687b      	ldr	r3, [r7, #4]
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	f022 020e 	bic.w	r2, r2, #14
 810363c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	681b      	ldr	r3, [r3, #0]
 8103642:	4a2b      	ldr	r2, [pc, #172]	; (81036f0 <HAL_DMA_Abort_IT+0x260>)
 8103644:	4293      	cmp	r3, r2
 8103646:	d04a      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 8103648:	687b      	ldr	r3, [r7, #4]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	4a29      	ldr	r2, [pc, #164]	; (81036f4 <HAL_DMA_Abort_IT+0x264>)
 810364e:	4293      	cmp	r3, r2
 8103650:	d045      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	681b      	ldr	r3, [r3, #0]
 8103656:	4a28      	ldr	r2, [pc, #160]	; (81036f8 <HAL_DMA_Abort_IT+0x268>)
 8103658:	4293      	cmp	r3, r2
 810365a:	d040      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	4a26      	ldr	r2, [pc, #152]	; (81036fc <HAL_DMA_Abort_IT+0x26c>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d03b      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	4a25      	ldr	r2, [pc, #148]	; (8103700 <HAL_DMA_Abort_IT+0x270>)
 810366c:	4293      	cmp	r3, r2
 810366e:	d036      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 8103670:	687b      	ldr	r3, [r7, #4]
 8103672:	681b      	ldr	r3, [r3, #0]
 8103674:	4a23      	ldr	r2, [pc, #140]	; (8103704 <HAL_DMA_Abort_IT+0x274>)
 8103676:	4293      	cmp	r3, r2
 8103678:	d031      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	681b      	ldr	r3, [r3, #0]
 810367e:	4a22      	ldr	r2, [pc, #136]	; (8103708 <HAL_DMA_Abort_IT+0x278>)
 8103680:	4293      	cmp	r3, r2
 8103682:	d02c      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	4a20      	ldr	r2, [pc, #128]	; (810370c <HAL_DMA_Abort_IT+0x27c>)
 810368a:	4293      	cmp	r3, r2
 810368c:	d027      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	4a1f      	ldr	r2, [pc, #124]	; (8103710 <HAL_DMA_Abort_IT+0x280>)
 8103694:	4293      	cmp	r3, r2
 8103696:	d022      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	681b      	ldr	r3, [r3, #0]
 810369c:	4a1d      	ldr	r2, [pc, #116]	; (8103714 <HAL_DMA_Abort_IT+0x284>)
 810369e:	4293      	cmp	r3, r2
 81036a0:	d01d      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a1c      	ldr	r2, [pc, #112]	; (8103718 <HAL_DMA_Abort_IT+0x288>)
 81036a8:	4293      	cmp	r3, r2
 81036aa:	d018      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	681b      	ldr	r3, [r3, #0]
 81036b0:	4a1a      	ldr	r2, [pc, #104]	; (810371c <HAL_DMA_Abort_IT+0x28c>)
 81036b2:	4293      	cmp	r3, r2
 81036b4:	d013      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 81036b6:	687b      	ldr	r3, [r7, #4]
 81036b8:	681b      	ldr	r3, [r3, #0]
 81036ba:	4a19      	ldr	r2, [pc, #100]	; (8103720 <HAL_DMA_Abort_IT+0x290>)
 81036bc:	4293      	cmp	r3, r2
 81036be:	d00e      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	4a17      	ldr	r2, [pc, #92]	; (8103724 <HAL_DMA_Abort_IT+0x294>)
 81036c6:	4293      	cmp	r3, r2
 81036c8:	d009      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	4a16      	ldr	r2, [pc, #88]	; (8103728 <HAL_DMA_Abort_IT+0x298>)
 81036d0:	4293      	cmp	r3, r2
 81036d2:	d004      	beq.n	81036de <HAL_DMA_Abort_IT+0x24e>
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	681b      	ldr	r3, [r3, #0]
 81036d8:	4a14      	ldr	r2, [pc, #80]	; (810372c <HAL_DMA_Abort_IT+0x29c>)
 81036da:	4293      	cmp	r3, r2
 81036dc:	d128      	bne.n	8103730 <HAL_DMA_Abort_IT+0x2a0>
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	681b      	ldr	r3, [r3, #0]
 81036e2:	681a      	ldr	r2, [r3, #0]
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	681b      	ldr	r3, [r3, #0]
 81036e8:	f022 0201 	bic.w	r2, r2, #1
 81036ec:	601a      	str	r2, [r3, #0]
 81036ee:	e027      	b.n	8103740 <HAL_DMA_Abort_IT+0x2b0>
 81036f0:	40020010 	.word	0x40020010
 81036f4:	40020028 	.word	0x40020028
 81036f8:	40020040 	.word	0x40020040
 81036fc:	40020058 	.word	0x40020058
 8103700:	40020070 	.word	0x40020070
 8103704:	40020088 	.word	0x40020088
 8103708:	400200a0 	.word	0x400200a0
 810370c:	400200b8 	.word	0x400200b8
 8103710:	40020410 	.word	0x40020410
 8103714:	40020428 	.word	0x40020428
 8103718:	40020440 	.word	0x40020440
 810371c:	40020458 	.word	0x40020458
 8103720:	40020470 	.word	0x40020470
 8103724:	40020488 	.word	0x40020488
 8103728:	400204a0 	.word	0x400204a0
 810372c:	400204b8 	.word	0x400204b8
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	681a      	ldr	r2, [r3, #0]
 8103736:	687b      	ldr	r3, [r7, #4]
 8103738:	681b      	ldr	r3, [r3, #0]
 810373a:	f022 0201 	bic.w	r2, r2, #1
 810373e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	681b      	ldr	r3, [r3, #0]
 8103744:	4a5c      	ldr	r2, [pc, #368]	; (81038b8 <HAL_DMA_Abort_IT+0x428>)
 8103746:	4293      	cmp	r3, r2
 8103748:	d072      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 810374a:	687b      	ldr	r3, [r7, #4]
 810374c:	681b      	ldr	r3, [r3, #0]
 810374e:	4a5b      	ldr	r2, [pc, #364]	; (81038bc <HAL_DMA_Abort_IT+0x42c>)
 8103750:	4293      	cmp	r3, r2
 8103752:	d06d      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	681b      	ldr	r3, [r3, #0]
 8103758:	4a59      	ldr	r2, [pc, #356]	; (81038c0 <HAL_DMA_Abort_IT+0x430>)
 810375a:	4293      	cmp	r3, r2
 810375c:	d068      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	4a58      	ldr	r2, [pc, #352]	; (81038c4 <HAL_DMA_Abort_IT+0x434>)
 8103764:	4293      	cmp	r3, r2
 8103766:	d063      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	681b      	ldr	r3, [r3, #0]
 810376c:	4a56      	ldr	r2, [pc, #344]	; (81038c8 <HAL_DMA_Abort_IT+0x438>)
 810376e:	4293      	cmp	r3, r2
 8103770:	d05e      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	4a55      	ldr	r2, [pc, #340]	; (81038cc <HAL_DMA_Abort_IT+0x43c>)
 8103778:	4293      	cmp	r3, r2
 810377a:	d059      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	4a53      	ldr	r2, [pc, #332]	; (81038d0 <HAL_DMA_Abort_IT+0x440>)
 8103782:	4293      	cmp	r3, r2
 8103784:	d054      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	4a52      	ldr	r2, [pc, #328]	; (81038d4 <HAL_DMA_Abort_IT+0x444>)
 810378c:	4293      	cmp	r3, r2
 810378e:	d04f      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	4a50      	ldr	r2, [pc, #320]	; (81038d8 <HAL_DMA_Abort_IT+0x448>)
 8103796:	4293      	cmp	r3, r2
 8103798:	d04a      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	4a4f      	ldr	r2, [pc, #316]	; (81038dc <HAL_DMA_Abort_IT+0x44c>)
 81037a0:	4293      	cmp	r3, r2
 81037a2:	d045      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	681b      	ldr	r3, [r3, #0]
 81037a8:	4a4d      	ldr	r2, [pc, #308]	; (81038e0 <HAL_DMA_Abort_IT+0x450>)
 81037aa:	4293      	cmp	r3, r2
 81037ac:	d040      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	4a4c      	ldr	r2, [pc, #304]	; (81038e4 <HAL_DMA_Abort_IT+0x454>)
 81037b4:	4293      	cmp	r3, r2
 81037b6:	d03b      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037b8:	687b      	ldr	r3, [r7, #4]
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	4a4a      	ldr	r2, [pc, #296]	; (81038e8 <HAL_DMA_Abort_IT+0x458>)
 81037be:	4293      	cmp	r3, r2
 81037c0:	d036      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4a49      	ldr	r2, [pc, #292]	; (81038ec <HAL_DMA_Abort_IT+0x45c>)
 81037c8:	4293      	cmp	r3, r2
 81037ca:	d031      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a47      	ldr	r2, [pc, #284]	; (81038f0 <HAL_DMA_Abort_IT+0x460>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d02c      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a46      	ldr	r2, [pc, #280]	; (81038f4 <HAL_DMA_Abort_IT+0x464>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d027      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a44      	ldr	r2, [pc, #272]	; (81038f8 <HAL_DMA_Abort_IT+0x468>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d022      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a43      	ldr	r2, [pc, #268]	; (81038fc <HAL_DMA_Abort_IT+0x46c>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d01d      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	4a41      	ldr	r2, [pc, #260]	; (8103900 <HAL_DMA_Abort_IT+0x470>)
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d018      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	4a40      	ldr	r2, [pc, #256]	; (8103904 <HAL_DMA_Abort_IT+0x474>)
 8103804:	4293      	cmp	r3, r2
 8103806:	d013      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	681b      	ldr	r3, [r3, #0]
 810380c:	4a3e      	ldr	r2, [pc, #248]	; (8103908 <HAL_DMA_Abort_IT+0x478>)
 810380e:	4293      	cmp	r3, r2
 8103810:	d00e      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	4a3d      	ldr	r2, [pc, #244]	; (810390c <HAL_DMA_Abort_IT+0x47c>)
 8103818:	4293      	cmp	r3, r2
 810381a:	d009      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	4a3b      	ldr	r2, [pc, #236]	; (8103910 <HAL_DMA_Abort_IT+0x480>)
 8103822:	4293      	cmp	r3, r2
 8103824:	d004      	beq.n	8103830 <HAL_DMA_Abort_IT+0x3a0>
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	4a3a      	ldr	r2, [pc, #232]	; (8103914 <HAL_DMA_Abort_IT+0x484>)
 810382c:	4293      	cmp	r3, r2
 810382e:	d101      	bne.n	8103834 <HAL_DMA_Abort_IT+0x3a4>
 8103830:	2301      	movs	r3, #1
 8103832:	e000      	b.n	8103836 <HAL_DMA_Abort_IT+0x3a6>
 8103834:	2300      	movs	r3, #0
 8103836:	2b00      	cmp	r3, #0
 8103838:	d028      	beq.n	810388c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810383e:	681a      	ldr	r2, [r3, #0]
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103844:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103848:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810384a:	687b      	ldr	r3, [r7, #4]
 810384c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810384e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103854:	f003 031f 	and.w	r3, r3, #31
 8103858:	2201      	movs	r2, #1
 810385a:	409a      	lsls	r2, r3
 810385c:	68fb      	ldr	r3, [r7, #12]
 810385e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103864:	687a      	ldr	r2, [r7, #4]
 8103866:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8103868:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810386e:	2b00      	cmp	r3, #0
 8103870:	d00c      	beq.n	810388c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103876:	681a      	ldr	r2, [r3, #0]
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810387c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103880:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103882:	687b      	ldr	r3, [r7, #4]
 8103884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103886:	687a      	ldr	r2, [r7, #4]
 8103888:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810388a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	2200      	movs	r2, #0
 8103890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	2201      	movs	r2, #1
 8103898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038a0:	2b00      	cmp	r3, #0
 81038a2:	d003      	beq.n	81038ac <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038a8:	6878      	ldr	r0, [r7, #4]
 81038aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 81038ac:	2300      	movs	r3, #0
}
 81038ae:	4618      	mov	r0, r3
 81038b0:	3710      	adds	r7, #16
 81038b2:	46bd      	mov	sp, r7
 81038b4:	bd80      	pop	{r7, pc}
 81038b6:	bf00      	nop
 81038b8:	40020010 	.word	0x40020010
 81038bc:	40020028 	.word	0x40020028
 81038c0:	40020040 	.word	0x40020040
 81038c4:	40020058 	.word	0x40020058
 81038c8:	40020070 	.word	0x40020070
 81038cc:	40020088 	.word	0x40020088
 81038d0:	400200a0 	.word	0x400200a0
 81038d4:	400200b8 	.word	0x400200b8
 81038d8:	40020410 	.word	0x40020410
 81038dc:	40020428 	.word	0x40020428
 81038e0:	40020440 	.word	0x40020440
 81038e4:	40020458 	.word	0x40020458
 81038e8:	40020470 	.word	0x40020470
 81038ec:	40020488 	.word	0x40020488
 81038f0:	400204a0 	.word	0x400204a0
 81038f4:	400204b8 	.word	0x400204b8
 81038f8:	58025408 	.word	0x58025408
 81038fc:	5802541c 	.word	0x5802541c
 8103900:	58025430 	.word	0x58025430
 8103904:	58025444 	.word	0x58025444
 8103908:	58025458 	.word	0x58025458
 810390c:	5802546c 	.word	0x5802546c
 8103910:	58025480 	.word	0x58025480
 8103914:	58025494 	.word	0x58025494

08103918 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8103918:	b580      	push	{r7, lr}
 810391a:	b08a      	sub	sp, #40	; 0x28
 810391c:	af00      	add	r7, sp, #0
 810391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103920:	2300      	movs	r3, #0
 8103922:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103924:	4b67      	ldr	r3, [pc, #412]	; (8103ac4 <HAL_DMA_IRQHandler+0x1ac>)
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	4a67      	ldr	r2, [pc, #412]	; (8103ac8 <HAL_DMA_IRQHandler+0x1b0>)
 810392a:	fba2 2303 	umull	r2, r3, r2, r3
 810392e:	0a9b      	lsrs	r3, r3, #10
 8103930:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103936:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810393c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 810393e:	6a3b      	ldr	r3, [r7, #32]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103944:	69fb      	ldr	r3, [r7, #28]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	4a5f      	ldr	r2, [pc, #380]	; (8103acc <HAL_DMA_IRQHandler+0x1b4>)
 8103950:	4293      	cmp	r3, r2
 8103952:	d04a      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	4a5d      	ldr	r2, [pc, #372]	; (8103ad0 <HAL_DMA_IRQHandler+0x1b8>)
 810395a:	4293      	cmp	r3, r2
 810395c:	d045      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	681b      	ldr	r3, [r3, #0]
 8103962:	4a5c      	ldr	r2, [pc, #368]	; (8103ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8103964:	4293      	cmp	r3, r2
 8103966:	d040      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	4a5a      	ldr	r2, [pc, #360]	; (8103ad8 <HAL_DMA_IRQHandler+0x1c0>)
 810396e:	4293      	cmp	r3, r2
 8103970:	d03b      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	4a59      	ldr	r2, [pc, #356]	; (8103adc <HAL_DMA_IRQHandler+0x1c4>)
 8103978:	4293      	cmp	r3, r2
 810397a:	d036      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	681b      	ldr	r3, [r3, #0]
 8103980:	4a57      	ldr	r2, [pc, #348]	; (8103ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8103982:	4293      	cmp	r3, r2
 8103984:	d031      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	681b      	ldr	r3, [r3, #0]
 810398a:	4a56      	ldr	r2, [pc, #344]	; (8103ae4 <HAL_DMA_IRQHandler+0x1cc>)
 810398c:	4293      	cmp	r3, r2
 810398e:	d02c      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	4a54      	ldr	r2, [pc, #336]	; (8103ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8103996:	4293      	cmp	r3, r2
 8103998:	d027      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	4a53      	ldr	r2, [pc, #332]	; (8103aec <HAL_DMA_IRQHandler+0x1d4>)
 81039a0:	4293      	cmp	r3, r2
 81039a2:	d022      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 81039a4:	687b      	ldr	r3, [r7, #4]
 81039a6:	681b      	ldr	r3, [r3, #0]
 81039a8:	4a51      	ldr	r2, [pc, #324]	; (8103af0 <HAL_DMA_IRQHandler+0x1d8>)
 81039aa:	4293      	cmp	r3, r2
 81039ac:	d01d      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	4a50      	ldr	r2, [pc, #320]	; (8103af4 <HAL_DMA_IRQHandler+0x1dc>)
 81039b4:	4293      	cmp	r3, r2
 81039b6:	d018      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	4a4e      	ldr	r2, [pc, #312]	; (8103af8 <HAL_DMA_IRQHandler+0x1e0>)
 81039be:	4293      	cmp	r3, r2
 81039c0:	d013      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 81039c2:	687b      	ldr	r3, [r7, #4]
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	4a4d      	ldr	r2, [pc, #308]	; (8103afc <HAL_DMA_IRQHandler+0x1e4>)
 81039c8:	4293      	cmp	r3, r2
 81039ca:	d00e      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	681b      	ldr	r3, [r3, #0]
 81039d0:	4a4b      	ldr	r2, [pc, #300]	; (8103b00 <HAL_DMA_IRQHandler+0x1e8>)
 81039d2:	4293      	cmp	r3, r2
 81039d4:	d009      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	4a4a      	ldr	r2, [pc, #296]	; (8103b04 <HAL_DMA_IRQHandler+0x1ec>)
 81039dc:	4293      	cmp	r3, r2
 81039de:	d004      	beq.n	81039ea <HAL_DMA_IRQHandler+0xd2>
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	4a48      	ldr	r2, [pc, #288]	; (8103b08 <HAL_DMA_IRQHandler+0x1f0>)
 81039e6:	4293      	cmp	r3, r2
 81039e8:	d101      	bne.n	81039ee <HAL_DMA_IRQHandler+0xd6>
 81039ea:	2301      	movs	r3, #1
 81039ec:	e000      	b.n	81039f0 <HAL_DMA_IRQHandler+0xd8>
 81039ee:	2300      	movs	r3, #0
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	f000 842b 	beq.w	810424c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81039fa:	f003 031f 	and.w	r3, r3, #31
 81039fe:	2208      	movs	r2, #8
 8103a00:	409a      	lsls	r2, r3
 8103a02:	69bb      	ldr	r3, [r7, #24]
 8103a04:	4013      	ands	r3, r2
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	f000 80a2 	beq.w	8103b50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	681b      	ldr	r3, [r3, #0]
 8103a10:	4a2e      	ldr	r2, [pc, #184]	; (8103acc <HAL_DMA_IRQHandler+0x1b4>)
 8103a12:	4293      	cmp	r3, r2
 8103a14:	d04a      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	4a2d      	ldr	r2, [pc, #180]	; (8103ad0 <HAL_DMA_IRQHandler+0x1b8>)
 8103a1c:	4293      	cmp	r3, r2
 8103a1e:	d045      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	4a2b      	ldr	r2, [pc, #172]	; (8103ad4 <HAL_DMA_IRQHandler+0x1bc>)
 8103a26:	4293      	cmp	r3, r2
 8103a28:	d040      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	4a2a      	ldr	r2, [pc, #168]	; (8103ad8 <HAL_DMA_IRQHandler+0x1c0>)
 8103a30:	4293      	cmp	r3, r2
 8103a32:	d03b      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	4a28      	ldr	r2, [pc, #160]	; (8103adc <HAL_DMA_IRQHandler+0x1c4>)
 8103a3a:	4293      	cmp	r3, r2
 8103a3c:	d036      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	4a27      	ldr	r2, [pc, #156]	; (8103ae0 <HAL_DMA_IRQHandler+0x1c8>)
 8103a44:	4293      	cmp	r3, r2
 8103a46:	d031      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a48:	687b      	ldr	r3, [r7, #4]
 8103a4a:	681b      	ldr	r3, [r3, #0]
 8103a4c:	4a25      	ldr	r2, [pc, #148]	; (8103ae4 <HAL_DMA_IRQHandler+0x1cc>)
 8103a4e:	4293      	cmp	r3, r2
 8103a50:	d02c      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a52:	687b      	ldr	r3, [r7, #4]
 8103a54:	681b      	ldr	r3, [r3, #0]
 8103a56:	4a24      	ldr	r2, [pc, #144]	; (8103ae8 <HAL_DMA_IRQHandler+0x1d0>)
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	d027      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	4a22      	ldr	r2, [pc, #136]	; (8103aec <HAL_DMA_IRQHandler+0x1d4>)
 8103a62:	4293      	cmp	r3, r2
 8103a64:	d022      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	681b      	ldr	r3, [r3, #0]
 8103a6a:	4a21      	ldr	r2, [pc, #132]	; (8103af0 <HAL_DMA_IRQHandler+0x1d8>)
 8103a6c:	4293      	cmp	r3, r2
 8103a6e:	d01d      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	681b      	ldr	r3, [r3, #0]
 8103a74:	4a1f      	ldr	r2, [pc, #124]	; (8103af4 <HAL_DMA_IRQHandler+0x1dc>)
 8103a76:	4293      	cmp	r3, r2
 8103a78:	d018      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	681b      	ldr	r3, [r3, #0]
 8103a7e:	4a1e      	ldr	r2, [pc, #120]	; (8103af8 <HAL_DMA_IRQHandler+0x1e0>)
 8103a80:	4293      	cmp	r3, r2
 8103a82:	d013      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a84:	687b      	ldr	r3, [r7, #4]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	4a1c      	ldr	r2, [pc, #112]	; (8103afc <HAL_DMA_IRQHandler+0x1e4>)
 8103a8a:	4293      	cmp	r3, r2
 8103a8c:	d00e      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	681b      	ldr	r3, [r3, #0]
 8103a92:	4a1b      	ldr	r2, [pc, #108]	; (8103b00 <HAL_DMA_IRQHandler+0x1e8>)
 8103a94:	4293      	cmp	r3, r2
 8103a96:	d009      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103a98:	687b      	ldr	r3, [r7, #4]
 8103a9a:	681b      	ldr	r3, [r3, #0]
 8103a9c:	4a19      	ldr	r2, [pc, #100]	; (8103b04 <HAL_DMA_IRQHandler+0x1ec>)
 8103a9e:	4293      	cmp	r3, r2
 8103aa0:	d004      	beq.n	8103aac <HAL_DMA_IRQHandler+0x194>
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	4a18      	ldr	r2, [pc, #96]	; (8103b08 <HAL_DMA_IRQHandler+0x1f0>)
 8103aa8:	4293      	cmp	r3, r2
 8103aaa:	d12f      	bne.n	8103b0c <HAL_DMA_IRQHandler+0x1f4>
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	f003 0304 	and.w	r3, r3, #4
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	bf14      	ite	ne
 8103aba:	2301      	movne	r3, #1
 8103abc:	2300      	moveq	r3, #0
 8103abe:	b2db      	uxtb	r3, r3
 8103ac0:	e02e      	b.n	8103b20 <HAL_DMA_IRQHandler+0x208>
 8103ac2:	bf00      	nop
 8103ac4:	10000000 	.word	0x10000000
 8103ac8:	1b4e81b5 	.word	0x1b4e81b5
 8103acc:	40020010 	.word	0x40020010
 8103ad0:	40020028 	.word	0x40020028
 8103ad4:	40020040 	.word	0x40020040
 8103ad8:	40020058 	.word	0x40020058
 8103adc:	40020070 	.word	0x40020070
 8103ae0:	40020088 	.word	0x40020088
 8103ae4:	400200a0 	.word	0x400200a0
 8103ae8:	400200b8 	.word	0x400200b8
 8103aec:	40020410 	.word	0x40020410
 8103af0:	40020428 	.word	0x40020428
 8103af4:	40020440 	.word	0x40020440
 8103af8:	40020458 	.word	0x40020458
 8103afc:	40020470 	.word	0x40020470
 8103b00:	40020488 	.word	0x40020488
 8103b04:	400204a0 	.word	0x400204a0
 8103b08:	400204b8 	.word	0x400204b8
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	681b      	ldr	r3, [r3, #0]
 8103b12:	f003 0308 	and.w	r3, r3, #8
 8103b16:	2b00      	cmp	r3, #0
 8103b18:	bf14      	ite	ne
 8103b1a:	2301      	movne	r3, #1
 8103b1c:	2300      	moveq	r3, #0
 8103b1e:	b2db      	uxtb	r3, r3
 8103b20:	2b00      	cmp	r3, #0
 8103b22:	d015      	beq.n	8103b50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	681a      	ldr	r2, [r3, #0]
 8103b2a:	687b      	ldr	r3, [r7, #4]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	f022 0204 	bic.w	r2, r2, #4
 8103b32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b38:	f003 031f 	and.w	r3, r3, #31
 8103b3c:	2208      	movs	r2, #8
 8103b3e:	409a      	lsls	r2, r3
 8103b40:	6a3b      	ldr	r3, [r7, #32]
 8103b42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8103b44:	687b      	ldr	r3, [r7, #4]
 8103b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b48:	f043 0201 	orr.w	r2, r3, #1
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103b50:	687b      	ldr	r3, [r7, #4]
 8103b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b54:	f003 031f 	and.w	r3, r3, #31
 8103b58:	69ba      	ldr	r2, [r7, #24]
 8103b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8103b5e:	f003 0301 	and.w	r3, r3, #1
 8103b62:	2b00      	cmp	r3, #0
 8103b64:	d06e      	beq.n	8103c44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	681b      	ldr	r3, [r3, #0]
 8103b6a:	4a69      	ldr	r2, [pc, #420]	; (8103d10 <HAL_DMA_IRQHandler+0x3f8>)
 8103b6c:	4293      	cmp	r3, r2
 8103b6e:	d04a      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103b70:	687b      	ldr	r3, [r7, #4]
 8103b72:	681b      	ldr	r3, [r3, #0]
 8103b74:	4a67      	ldr	r2, [pc, #412]	; (8103d14 <HAL_DMA_IRQHandler+0x3fc>)
 8103b76:	4293      	cmp	r3, r2
 8103b78:	d045      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	681b      	ldr	r3, [r3, #0]
 8103b7e:	4a66      	ldr	r2, [pc, #408]	; (8103d18 <HAL_DMA_IRQHandler+0x400>)
 8103b80:	4293      	cmp	r3, r2
 8103b82:	d040      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	4a64      	ldr	r2, [pc, #400]	; (8103d1c <HAL_DMA_IRQHandler+0x404>)
 8103b8a:	4293      	cmp	r3, r2
 8103b8c:	d03b      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	4a63      	ldr	r2, [pc, #396]	; (8103d20 <HAL_DMA_IRQHandler+0x408>)
 8103b94:	4293      	cmp	r3, r2
 8103b96:	d036      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	4a61      	ldr	r2, [pc, #388]	; (8103d24 <HAL_DMA_IRQHandler+0x40c>)
 8103b9e:	4293      	cmp	r3, r2
 8103ba0:	d031      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	681b      	ldr	r3, [r3, #0]
 8103ba6:	4a60      	ldr	r2, [pc, #384]	; (8103d28 <HAL_DMA_IRQHandler+0x410>)
 8103ba8:	4293      	cmp	r3, r2
 8103baa:	d02c      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	4a5e      	ldr	r2, [pc, #376]	; (8103d2c <HAL_DMA_IRQHandler+0x414>)
 8103bb2:	4293      	cmp	r3, r2
 8103bb4:	d027      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	4a5d      	ldr	r2, [pc, #372]	; (8103d30 <HAL_DMA_IRQHandler+0x418>)
 8103bbc:	4293      	cmp	r3, r2
 8103bbe:	d022      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bc0:	687b      	ldr	r3, [r7, #4]
 8103bc2:	681b      	ldr	r3, [r3, #0]
 8103bc4:	4a5b      	ldr	r2, [pc, #364]	; (8103d34 <HAL_DMA_IRQHandler+0x41c>)
 8103bc6:	4293      	cmp	r3, r2
 8103bc8:	d01d      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	4a5a      	ldr	r2, [pc, #360]	; (8103d38 <HAL_DMA_IRQHandler+0x420>)
 8103bd0:	4293      	cmp	r3, r2
 8103bd2:	d018      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	681b      	ldr	r3, [r3, #0]
 8103bd8:	4a58      	ldr	r2, [pc, #352]	; (8103d3c <HAL_DMA_IRQHandler+0x424>)
 8103bda:	4293      	cmp	r3, r2
 8103bdc:	d013      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bde:	687b      	ldr	r3, [r7, #4]
 8103be0:	681b      	ldr	r3, [r3, #0]
 8103be2:	4a57      	ldr	r2, [pc, #348]	; (8103d40 <HAL_DMA_IRQHandler+0x428>)
 8103be4:	4293      	cmp	r3, r2
 8103be6:	d00e      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	681b      	ldr	r3, [r3, #0]
 8103bec:	4a55      	ldr	r2, [pc, #340]	; (8103d44 <HAL_DMA_IRQHandler+0x42c>)
 8103bee:	4293      	cmp	r3, r2
 8103bf0:	d009      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	4a54      	ldr	r2, [pc, #336]	; (8103d48 <HAL_DMA_IRQHandler+0x430>)
 8103bf8:	4293      	cmp	r3, r2
 8103bfa:	d004      	beq.n	8103c06 <HAL_DMA_IRQHandler+0x2ee>
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	681b      	ldr	r3, [r3, #0]
 8103c00:	4a52      	ldr	r2, [pc, #328]	; (8103d4c <HAL_DMA_IRQHandler+0x434>)
 8103c02:	4293      	cmp	r3, r2
 8103c04:	d10a      	bne.n	8103c1c <HAL_DMA_IRQHandler+0x304>
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	695b      	ldr	r3, [r3, #20]
 8103c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	bf14      	ite	ne
 8103c14:	2301      	movne	r3, #1
 8103c16:	2300      	moveq	r3, #0
 8103c18:	b2db      	uxtb	r3, r3
 8103c1a:	e003      	b.n	8103c24 <HAL_DMA_IRQHandler+0x30c>
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	2300      	movs	r3, #0
 8103c24:	2b00      	cmp	r3, #0
 8103c26:	d00d      	beq.n	8103c44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c2c:	f003 031f 	and.w	r3, r3, #31
 8103c30:	2201      	movs	r2, #1
 8103c32:	409a      	lsls	r2, r3
 8103c34:	6a3b      	ldr	r3, [r7, #32]
 8103c36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c3c:	f043 0202 	orr.w	r2, r3, #2
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c48:	f003 031f 	and.w	r3, r3, #31
 8103c4c:	2204      	movs	r2, #4
 8103c4e:	409a      	lsls	r2, r3
 8103c50:	69bb      	ldr	r3, [r7, #24]
 8103c52:	4013      	ands	r3, r2
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	f000 808f 	beq.w	8103d78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	4a2c      	ldr	r2, [pc, #176]	; (8103d10 <HAL_DMA_IRQHandler+0x3f8>)
 8103c60:	4293      	cmp	r3, r2
 8103c62:	d04a      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	4a2a      	ldr	r2, [pc, #168]	; (8103d14 <HAL_DMA_IRQHandler+0x3fc>)
 8103c6a:	4293      	cmp	r3, r2
 8103c6c:	d045      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	681b      	ldr	r3, [r3, #0]
 8103c72:	4a29      	ldr	r2, [pc, #164]	; (8103d18 <HAL_DMA_IRQHandler+0x400>)
 8103c74:	4293      	cmp	r3, r2
 8103c76:	d040      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	4a27      	ldr	r2, [pc, #156]	; (8103d1c <HAL_DMA_IRQHandler+0x404>)
 8103c7e:	4293      	cmp	r3, r2
 8103c80:	d03b      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	4a26      	ldr	r2, [pc, #152]	; (8103d20 <HAL_DMA_IRQHandler+0x408>)
 8103c88:	4293      	cmp	r3, r2
 8103c8a:	d036      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	4a24      	ldr	r2, [pc, #144]	; (8103d24 <HAL_DMA_IRQHandler+0x40c>)
 8103c92:	4293      	cmp	r3, r2
 8103c94:	d031      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103c96:	687b      	ldr	r3, [r7, #4]
 8103c98:	681b      	ldr	r3, [r3, #0]
 8103c9a:	4a23      	ldr	r2, [pc, #140]	; (8103d28 <HAL_DMA_IRQHandler+0x410>)
 8103c9c:	4293      	cmp	r3, r2
 8103c9e:	d02c      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	4a21      	ldr	r2, [pc, #132]	; (8103d2c <HAL_DMA_IRQHandler+0x414>)
 8103ca6:	4293      	cmp	r3, r2
 8103ca8:	d027      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103caa:	687b      	ldr	r3, [r7, #4]
 8103cac:	681b      	ldr	r3, [r3, #0]
 8103cae:	4a20      	ldr	r2, [pc, #128]	; (8103d30 <HAL_DMA_IRQHandler+0x418>)
 8103cb0:	4293      	cmp	r3, r2
 8103cb2:	d022      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	4a1e      	ldr	r2, [pc, #120]	; (8103d34 <HAL_DMA_IRQHandler+0x41c>)
 8103cba:	4293      	cmp	r3, r2
 8103cbc:	d01d      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	681b      	ldr	r3, [r3, #0]
 8103cc2:	4a1d      	ldr	r2, [pc, #116]	; (8103d38 <HAL_DMA_IRQHandler+0x420>)
 8103cc4:	4293      	cmp	r3, r2
 8103cc6:	d018      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	681b      	ldr	r3, [r3, #0]
 8103ccc:	4a1b      	ldr	r2, [pc, #108]	; (8103d3c <HAL_DMA_IRQHandler+0x424>)
 8103cce:	4293      	cmp	r3, r2
 8103cd0:	d013      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103cd2:	687b      	ldr	r3, [r7, #4]
 8103cd4:	681b      	ldr	r3, [r3, #0]
 8103cd6:	4a1a      	ldr	r2, [pc, #104]	; (8103d40 <HAL_DMA_IRQHandler+0x428>)
 8103cd8:	4293      	cmp	r3, r2
 8103cda:	d00e      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	4a18      	ldr	r2, [pc, #96]	; (8103d44 <HAL_DMA_IRQHandler+0x42c>)
 8103ce2:	4293      	cmp	r3, r2
 8103ce4:	d009      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	681b      	ldr	r3, [r3, #0]
 8103cea:	4a17      	ldr	r2, [pc, #92]	; (8103d48 <HAL_DMA_IRQHandler+0x430>)
 8103cec:	4293      	cmp	r3, r2
 8103cee:	d004      	beq.n	8103cfa <HAL_DMA_IRQHandler+0x3e2>
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	4a15      	ldr	r2, [pc, #84]	; (8103d4c <HAL_DMA_IRQHandler+0x434>)
 8103cf6:	4293      	cmp	r3, r2
 8103cf8:	d12a      	bne.n	8103d50 <HAL_DMA_IRQHandler+0x438>
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	681b      	ldr	r3, [r3, #0]
 8103cfe:	681b      	ldr	r3, [r3, #0]
 8103d00:	f003 0302 	and.w	r3, r3, #2
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	bf14      	ite	ne
 8103d08:	2301      	movne	r3, #1
 8103d0a:	2300      	moveq	r3, #0
 8103d0c:	b2db      	uxtb	r3, r3
 8103d0e:	e023      	b.n	8103d58 <HAL_DMA_IRQHandler+0x440>
 8103d10:	40020010 	.word	0x40020010
 8103d14:	40020028 	.word	0x40020028
 8103d18:	40020040 	.word	0x40020040
 8103d1c:	40020058 	.word	0x40020058
 8103d20:	40020070 	.word	0x40020070
 8103d24:	40020088 	.word	0x40020088
 8103d28:	400200a0 	.word	0x400200a0
 8103d2c:	400200b8 	.word	0x400200b8
 8103d30:	40020410 	.word	0x40020410
 8103d34:	40020428 	.word	0x40020428
 8103d38:	40020440 	.word	0x40020440
 8103d3c:	40020458 	.word	0x40020458
 8103d40:	40020470 	.word	0x40020470
 8103d44:	40020488 	.word	0x40020488
 8103d48:	400204a0 	.word	0x400204a0
 8103d4c:	400204b8 	.word	0x400204b8
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	681b      	ldr	r3, [r3, #0]
 8103d56:	2300      	movs	r3, #0
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d00d      	beq.n	8103d78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d60:	f003 031f 	and.w	r3, r3, #31
 8103d64:	2204      	movs	r2, #4
 8103d66:	409a      	lsls	r2, r3
 8103d68:	6a3b      	ldr	r3, [r7, #32]
 8103d6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d70:	f043 0204 	orr.w	r2, r3, #4
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d7c:	f003 031f 	and.w	r3, r3, #31
 8103d80:	2210      	movs	r2, #16
 8103d82:	409a      	lsls	r2, r3
 8103d84:	69bb      	ldr	r3, [r7, #24]
 8103d86:	4013      	ands	r3, r2
 8103d88:	2b00      	cmp	r3, #0
 8103d8a:	f000 80a6 	beq.w	8103eda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	4a85      	ldr	r2, [pc, #532]	; (8103fa8 <HAL_DMA_IRQHandler+0x690>)
 8103d94:	4293      	cmp	r3, r2
 8103d96:	d04a      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	4a83      	ldr	r2, [pc, #524]	; (8103fac <HAL_DMA_IRQHandler+0x694>)
 8103d9e:	4293      	cmp	r3, r2
 8103da0:	d045      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103da2:	687b      	ldr	r3, [r7, #4]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	4a82      	ldr	r2, [pc, #520]	; (8103fb0 <HAL_DMA_IRQHandler+0x698>)
 8103da8:	4293      	cmp	r3, r2
 8103daa:	d040      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	4a80      	ldr	r2, [pc, #512]	; (8103fb4 <HAL_DMA_IRQHandler+0x69c>)
 8103db2:	4293      	cmp	r3, r2
 8103db4:	d03b      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	4a7f      	ldr	r2, [pc, #508]	; (8103fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8103dbc:	4293      	cmp	r3, r2
 8103dbe:	d036      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	4a7d      	ldr	r2, [pc, #500]	; (8103fbc <HAL_DMA_IRQHandler+0x6a4>)
 8103dc6:	4293      	cmp	r3, r2
 8103dc8:	d031      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	4a7c      	ldr	r2, [pc, #496]	; (8103fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8103dd0:	4293      	cmp	r3, r2
 8103dd2:	d02c      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	4a7a      	ldr	r2, [pc, #488]	; (8103fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8103dda:	4293      	cmp	r3, r2
 8103ddc:	d027      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	4a79      	ldr	r2, [pc, #484]	; (8103fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8103de4:	4293      	cmp	r3, r2
 8103de6:	d022      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	4a77      	ldr	r2, [pc, #476]	; (8103fcc <HAL_DMA_IRQHandler+0x6b4>)
 8103dee:	4293      	cmp	r3, r2
 8103df0:	d01d      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	681b      	ldr	r3, [r3, #0]
 8103df6:	4a76      	ldr	r2, [pc, #472]	; (8103fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8103df8:	4293      	cmp	r3, r2
 8103dfa:	d018      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	4a74      	ldr	r2, [pc, #464]	; (8103fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8103e02:	4293      	cmp	r3, r2
 8103e04:	d013      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	681b      	ldr	r3, [r3, #0]
 8103e0a:	4a73      	ldr	r2, [pc, #460]	; (8103fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8103e0c:	4293      	cmp	r3, r2
 8103e0e:	d00e      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	4a71      	ldr	r2, [pc, #452]	; (8103fdc <HAL_DMA_IRQHandler+0x6c4>)
 8103e16:	4293      	cmp	r3, r2
 8103e18:	d009      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	681b      	ldr	r3, [r3, #0]
 8103e1e:	4a70      	ldr	r2, [pc, #448]	; (8103fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8103e20:	4293      	cmp	r3, r2
 8103e22:	d004      	beq.n	8103e2e <HAL_DMA_IRQHandler+0x516>
 8103e24:	687b      	ldr	r3, [r7, #4]
 8103e26:	681b      	ldr	r3, [r3, #0]
 8103e28:	4a6e      	ldr	r2, [pc, #440]	; (8103fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8103e2a:	4293      	cmp	r3, r2
 8103e2c:	d10a      	bne.n	8103e44 <HAL_DMA_IRQHandler+0x52c>
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	f003 0308 	and.w	r3, r3, #8
 8103e38:	2b00      	cmp	r3, #0
 8103e3a:	bf14      	ite	ne
 8103e3c:	2301      	movne	r3, #1
 8103e3e:	2300      	moveq	r3, #0
 8103e40:	b2db      	uxtb	r3, r3
 8103e42:	e009      	b.n	8103e58 <HAL_DMA_IRQHandler+0x540>
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	f003 0304 	and.w	r3, r3, #4
 8103e4e:	2b00      	cmp	r3, #0
 8103e50:	bf14      	ite	ne
 8103e52:	2301      	movne	r3, #1
 8103e54:	2300      	moveq	r3, #0
 8103e56:	b2db      	uxtb	r3, r3
 8103e58:	2b00      	cmp	r3, #0
 8103e5a:	d03e      	beq.n	8103eda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e60:	f003 031f 	and.w	r3, r3, #31
 8103e64:	2210      	movs	r2, #16
 8103e66:	409a      	lsls	r2, r3
 8103e68:	6a3b      	ldr	r3, [r7, #32]
 8103e6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	681b      	ldr	r3, [r3, #0]
 8103e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103e76:	2b00      	cmp	r3, #0
 8103e78:	d018      	beq.n	8103eac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d108      	bne.n	8103e9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8103e88:	687b      	ldr	r3, [r7, #4]
 8103e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	d024      	beq.n	8103eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e94:	6878      	ldr	r0, [r7, #4]
 8103e96:	4798      	blx	r3
 8103e98:	e01f      	b.n	8103eda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	d01b      	beq.n	8103eda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103ea2:	687b      	ldr	r3, [r7, #4]
 8103ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ea6:	6878      	ldr	r0, [r7, #4]
 8103ea8:	4798      	blx	r3
 8103eaa:	e016      	b.n	8103eda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	681b      	ldr	r3, [r3, #0]
 8103eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d107      	bne.n	8103eca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	681a      	ldr	r2, [r3, #0]
 8103ec0:	687b      	ldr	r3, [r7, #4]
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	f022 0208 	bic.w	r2, r2, #8
 8103ec8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ece:	2b00      	cmp	r3, #0
 8103ed0:	d003      	beq.n	8103eda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103ed2:	687b      	ldr	r3, [r7, #4]
 8103ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ed6:	6878      	ldr	r0, [r7, #4]
 8103ed8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8103eda:	687b      	ldr	r3, [r7, #4]
 8103edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ede:	f003 031f 	and.w	r3, r3, #31
 8103ee2:	2220      	movs	r2, #32
 8103ee4:	409a      	lsls	r2, r3
 8103ee6:	69bb      	ldr	r3, [r7, #24]
 8103ee8:	4013      	ands	r3, r2
 8103eea:	2b00      	cmp	r3, #0
 8103eec:	f000 8110 	beq.w	8104110 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103ef0:	687b      	ldr	r3, [r7, #4]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	4a2c      	ldr	r2, [pc, #176]	; (8103fa8 <HAL_DMA_IRQHandler+0x690>)
 8103ef6:	4293      	cmp	r3, r2
 8103ef8:	d04a      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	4a2b      	ldr	r2, [pc, #172]	; (8103fac <HAL_DMA_IRQHandler+0x694>)
 8103f00:	4293      	cmp	r3, r2
 8103f02:	d045      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	4a29      	ldr	r2, [pc, #164]	; (8103fb0 <HAL_DMA_IRQHandler+0x698>)
 8103f0a:	4293      	cmp	r3, r2
 8103f0c:	d040      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	4a28      	ldr	r2, [pc, #160]	; (8103fb4 <HAL_DMA_IRQHandler+0x69c>)
 8103f14:	4293      	cmp	r3, r2
 8103f16:	d03b      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	681b      	ldr	r3, [r3, #0]
 8103f1c:	4a26      	ldr	r2, [pc, #152]	; (8103fb8 <HAL_DMA_IRQHandler+0x6a0>)
 8103f1e:	4293      	cmp	r3, r2
 8103f20:	d036      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	4a25      	ldr	r2, [pc, #148]	; (8103fbc <HAL_DMA_IRQHandler+0x6a4>)
 8103f28:	4293      	cmp	r3, r2
 8103f2a:	d031      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f2c:	687b      	ldr	r3, [r7, #4]
 8103f2e:	681b      	ldr	r3, [r3, #0]
 8103f30:	4a23      	ldr	r2, [pc, #140]	; (8103fc0 <HAL_DMA_IRQHandler+0x6a8>)
 8103f32:	4293      	cmp	r3, r2
 8103f34:	d02c      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	4a22      	ldr	r2, [pc, #136]	; (8103fc4 <HAL_DMA_IRQHandler+0x6ac>)
 8103f3c:	4293      	cmp	r3, r2
 8103f3e:	d027      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	4a20      	ldr	r2, [pc, #128]	; (8103fc8 <HAL_DMA_IRQHandler+0x6b0>)
 8103f46:	4293      	cmp	r3, r2
 8103f48:	d022      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	681b      	ldr	r3, [r3, #0]
 8103f4e:	4a1f      	ldr	r2, [pc, #124]	; (8103fcc <HAL_DMA_IRQHandler+0x6b4>)
 8103f50:	4293      	cmp	r3, r2
 8103f52:	d01d      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	681b      	ldr	r3, [r3, #0]
 8103f58:	4a1d      	ldr	r2, [pc, #116]	; (8103fd0 <HAL_DMA_IRQHandler+0x6b8>)
 8103f5a:	4293      	cmp	r3, r2
 8103f5c:	d018      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	4a1c      	ldr	r2, [pc, #112]	; (8103fd4 <HAL_DMA_IRQHandler+0x6bc>)
 8103f64:	4293      	cmp	r3, r2
 8103f66:	d013      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	4a1a      	ldr	r2, [pc, #104]	; (8103fd8 <HAL_DMA_IRQHandler+0x6c0>)
 8103f6e:	4293      	cmp	r3, r2
 8103f70:	d00e      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	4a19      	ldr	r2, [pc, #100]	; (8103fdc <HAL_DMA_IRQHandler+0x6c4>)
 8103f78:	4293      	cmp	r3, r2
 8103f7a:	d009      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	681b      	ldr	r3, [r3, #0]
 8103f80:	4a17      	ldr	r2, [pc, #92]	; (8103fe0 <HAL_DMA_IRQHandler+0x6c8>)
 8103f82:	4293      	cmp	r3, r2
 8103f84:	d004      	beq.n	8103f90 <HAL_DMA_IRQHandler+0x678>
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	681b      	ldr	r3, [r3, #0]
 8103f8a:	4a16      	ldr	r2, [pc, #88]	; (8103fe4 <HAL_DMA_IRQHandler+0x6cc>)
 8103f8c:	4293      	cmp	r3, r2
 8103f8e:	d12b      	bne.n	8103fe8 <HAL_DMA_IRQHandler+0x6d0>
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	681b      	ldr	r3, [r3, #0]
 8103f96:	f003 0310 	and.w	r3, r3, #16
 8103f9a:	2b00      	cmp	r3, #0
 8103f9c:	bf14      	ite	ne
 8103f9e:	2301      	movne	r3, #1
 8103fa0:	2300      	moveq	r3, #0
 8103fa2:	b2db      	uxtb	r3, r3
 8103fa4:	e02a      	b.n	8103ffc <HAL_DMA_IRQHandler+0x6e4>
 8103fa6:	bf00      	nop
 8103fa8:	40020010 	.word	0x40020010
 8103fac:	40020028 	.word	0x40020028
 8103fb0:	40020040 	.word	0x40020040
 8103fb4:	40020058 	.word	0x40020058
 8103fb8:	40020070 	.word	0x40020070
 8103fbc:	40020088 	.word	0x40020088
 8103fc0:	400200a0 	.word	0x400200a0
 8103fc4:	400200b8 	.word	0x400200b8
 8103fc8:	40020410 	.word	0x40020410
 8103fcc:	40020428 	.word	0x40020428
 8103fd0:	40020440 	.word	0x40020440
 8103fd4:	40020458 	.word	0x40020458
 8103fd8:	40020470 	.word	0x40020470
 8103fdc:	40020488 	.word	0x40020488
 8103fe0:	400204a0 	.word	0x400204a0
 8103fe4:	400204b8 	.word	0x400204b8
 8103fe8:	687b      	ldr	r3, [r7, #4]
 8103fea:	681b      	ldr	r3, [r3, #0]
 8103fec:	681b      	ldr	r3, [r3, #0]
 8103fee:	f003 0302 	and.w	r3, r3, #2
 8103ff2:	2b00      	cmp	r3, #0
 8103ff4:	bf14      	ite	ne
 8103ff6:	2301      	movne	r3, #1
 8103ff8:	2300      	moveq	r3, #0
 8103ffa:	b2db      	uxtb	r3, r3
 8103ffc:	2b00      	cmp	r3, #0
 8103ffe:	f000 8087 	beq.w	8104110 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104002:	687b      	ldr	r3, [r7, #4]
 8104004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104006:	f003 031f 	and.w	r3, r3, #31
 810400a:	2220      	movs	r2, #32
 810400c:	409a      	lsls	r2, r3
 810400e:	6a3b      	ldr	r3, [r7, #32]
 8104010:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8104018:	b2db      	uxtb	r3, r3
 810401a:	2b04      	cmp	r3, #4
 810401c:	d139      	bne.n	8104092 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	681a      	ldr	r2, [r3, #0]
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	f022 0216 	bic.w	r2, r2, #22
 810402c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	681b      	ldr	r3, [r3, #0]
 8104032:	695a      	ldr	r2, [r3, #20]
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	681b      	ldr	r3, [r3, #0]
 8104038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810403c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104042:	2b00      	cmp	r3, #0
 8104044:	d103      	bne.n	810404e <HAL_DMA_IRQHandler+0x736>
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810404a:	2b00      	cmp	r3, #0
 810404c:	d007      	beq.n	810405e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	681b      	ldr	r3, [r3, #0]
 8104052:	681a      	ldr	r2, [r3, #0]
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	681b      	ldr	r3, [r3, #0]
 8104058:	f022 0208 	bic.w	r2, r2, #8
 810405c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810405e:	687b      	ldr	r3, [r7, #4]
 8104060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104062:	f003 031f 	and.w	r3, r3, #31
 8104066:	223f      	movs	r2, #63	; 0x3f
 8104068:	409a      	lsls	r2, r3
 810406a:	6a3b      	ldr	r3, [r7, #32]
 810406c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810406e:	687b      	ldr	r3, [r7, #4]
 8104070:	2200      	movs	r2, #0
 8104072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104076:	687b      	ldr	r3, [r7, #4]
 8104078:	2201      	movs	r2, #1
 810407a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104082:	2b00      	cmp	r3, #0
 8104084:	f000 834a 	beq.w	810471c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810408c:	6878      	ldr	r0, [r7, #4]
 810408e:	4798      	blx	r3
          }
          return;
 8104090:	e344      	b.n	810471c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	681b      	ldr	r3, [r3, #0]
 8104096:	681b      	ldr	r3, [r3, #0]
 8104098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810409c:	2b00      	cmp	r3, #0
 810409e:	d018      	beq.n	81040d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	681b      	ldr	r3, [r3, #0]
 81040a4:	681b      	ldr	r3, [r3, #0]
 81040a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81040aa:	2b00      	cmp	r3, #0
 81040ac:	d108      	bne.n	81040c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	d02c      	beq.n	8104110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 81040b6:	687b      	ldr	r3, [r7, #4]
 81040b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81040ba:	6878      	ldr	r0, [r7, #4]
 81040bc:	4798      	blx	r3
 81040be:	e027      	b.n	8104110 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040c4:	2b00      	cmp	r3, #0
 81040c6:	d023      	beq.n	8104110 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040cc:	6878      	ldr	r0, [r7, #4]
 81040ce:	4798      	blx	r3
 81040d0:	e01e      	b.n	8104110 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 81040d2:	687b      	ldr	r3, [r7, #4]
 81040d4:	681b      	ldr	r3, [r3, #0]
 81040d6:	681b      	ldr	r3, [r3, #0]
 81040d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81040dc:	2b00      	cmp	r3, #0
 81040de:	d10f      	bne.n	8104100 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	681a      	ldr	r2, [r3, #0]
 81040e6:	687b      	ldr	r3, [r7, #4]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	f022 0210 	bic.w	r2, r2, #16
 81040ee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	2200      	movs	r2, #0
 81040f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	2201      	movs	r2, #1
 81040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104104:	2b00      	cmp	r3, #0
 8104106:	d003      	beq.n	8104110 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810410c:	6878      	ldr	r0, [r7, #4]
 810410e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104114:	2b00      	cmp	r3, #0
 8104116:	f000 8306 	beq.w	8104726 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810411a:	687b      	ldr	r3, [r7, #4]
 810411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810411e:	f003 0301 	and.w	r3, r3, #1
 8104122:	2b00      	cmp	r3, #0
 8104124:	f000 8088 	beq.w	8104238 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8104128:	687b      	ldr	r3, [r7, #4]
 810412a:	2204      	movs	r2, #4
 810412c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	681b      	ldr	r3, [r3, #0]
 8104134:	4a7a      	ldr	r2, [pc, #488]	; (8104320 <HAL_DMA_IRQHandler+0xa08>)
 8104136:	4293      	cmp	r3, r2
 8104138:	d04a      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	681b      	ldr	r3, [r3, #0]
 810413e:	4a79      	ldr	r2, [pc, #484]	; (8104324 <HAL_DMA_IRQHandler+0xa0c>)
 8104140:	4293      	cmp	r3, r2
 8104142:	d045      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 8104144:	687b      	ldr	r3, [r7, #4]
 8104146:	681b      	ldr	r3, [r3, #0]
 8104148:	4a77      	ldr	r2, [pc, #476]	; (8104328 <HAL_DMA_IRQHandler+0xa10>)
 810414a:	4293      	cmp	r3, r2
 810414c:	d040      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	4a76      	ldr	r2, [pc, #472]	; (810432c <HAL_DMA_IRQHandler+0xa14>)
 8104154:	4293      	cmp	r3, r2
 8104156:	d03b      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 8104158:	687b      	ldr	r3, [r7, #4]
 810415a:	681b      	ldr	r3, [r3, #0]
 810415c:	4a74      	ldr	r2, [pc, #464]	; (8104330 <HAL_DMA_IRQHandler+0xa18>)
 810415e:	4293      	cmp	r3, r2
 8104160:	d036      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	4a73      	ldr	r2, [pc, #460]	; (8104334 <HAL_DMA_IRQHandler+0xa1c>)
 8104168:	4293      	cmp	r3, r2
 810416a:	d031      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	681b      	ldr	r3, [r3, #0]
 8104170:	4a71      	ldr	r2, [pc, #452]	; (8104338 <HAL_DMA_IRQHandler+0xa20>)
 8104172:	4293      	cmp	r3, r2
 8104174:	d02c      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 8104176:	687b      	ldr	r3, [r7, #4]
 8104178:	681b      	ldr	r3, [r3, #0]
 810417a:	4a70      	ldr	r2, [pc, #448]	; (810433c <HAL_DMA_IRQHandler+0xa24>)
 810417c:	4293      	cmp	r3, r2
 810417e:	d027      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	4a6e      	ldr	r2, [pc, #440]	; (8104340 <HAL_DMA_IRQHandler+0xa28>)
 8104186:	4293      	cmp	r3, r2
 8104188:	d022      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 810418a:	687b      	ldr	r3, [r7, #4]
 810418c:	681b      	ldr	r3, [r3, #0]
 810418e:	4a6d      	ldr	r2, [pc, #436]	; (8104344 <HAL_DMA_IRQHandler+0xa2c>)
 8104190:	4293      	cmp	r3, r2
 8104192:	d01d      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 8104194:	687b      	ldr	r3, [r7, #4]
 8104196:	681b      	ldr	r3, [r3, #0]
 8104198:	4a6b      	ldr	r2, [pc, #428]	; (8104348 <HAL_DMA_IRQHandler+0xa30>)
 810419a:	4293      	cmp	r3, r2
 810419c:	d018      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	4a6a      	ldr	r2, [pc, #424]	; (810434c <HAL_DMA_IRQHandler+0xa34>)
 81041a4:	4293      	cmp	r3, r2
 81041a6:	d013      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	4a68      	ldr	r2, [pc, #416]	; (8104350 <HAL_DMA_IRQHandler+0xa38>)
 81041ae:	4293      	cmp	r3, r2
 81041b0:	d00e      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 81041b2:	687b      	ldr	r3, [r7, #4]
 81041b4:	681b      	ldr	r3, [r3, #0]
 81041b6:	4a67      	ldr	r2, [pc, #412]	; (8104354 <HAL_DMA_IRQHandler+0xa3c>)
 81041b8:	4293      	cmp	r3, r2
 81041ba:	d009      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	4a65      	ldr	r2, [pc, #404]	; (8104358 <HAL_DMA_IRQHandler+0xa40>)
 81041c2:	4293      	cmp	r3, r2
 81041c4:	d004      	beq.n	81041d0 <HAL_DMA_IRQHandler+0x8b8>
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	681b      	ldr	r3, [r3, #0]
 81041ca:	4a64      	ldr	r2, [pc, #400]	; (810435c <HAL_DMA_IRQHandler+0xa44>)
 81041cc:	4293      	cmp	r3, r2
 81041ce:	d108      	bne.n	81041e2 <HAL_DMA_IRQHandler+0x8ca>
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	681a      	ldr	r2, [r3, #0]
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	f022 0201 	bic.w	r2, r2, #1
 81041de:	601a      	str	r2, [r3, #0]
 81041e0:	e007      	b.n	81041f2 <HAL_DMA_IRQHandler+0x8da>
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	681a      	ldr	r2, [r3, #0]
 81041e8:	687b      	ldr	r3, [r7, #4]
 81041ea:	681b      	ldr	r3, [r3, #0]
 81041ec:	f022 0201 	bic.w	r2, r2, #1
 81041f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 81041f2:	68fb      	ldr	r3, [r7, #12]
 81041f4:	3301      	adds	r3, #1
 81041f6:	60fb      	str	r3, [r7, #12]
 81041f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81041fa:	429a      	cmp	r2, r3
 81041fc:	d307      	bcc.n	810420e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	681b      	ldr	r3, [r3, #0]
 8104204:	f003 0301 	and.w	r3, r3, #1
 8104208:	2b00      	cmp	r3, #0
 810420a:	d1f2      	bne.n	81041f2 <HAL_DMA_IRQHandler+0x8da>
 810420c:	e000      	b.n	8104210 <HAL_DMA_IRQHandler+0x8f8>
            break;
 810420e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8104210:	687b      	ldr	r3, [r7, #4]
 8104212:	2200      	movs	r2, #0
 8104214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	681b      	ldr	r3, [r3, #0]
 810421c:	681b      	ldr	r3, [r3, #0]
 810421e:	f003 0301 	and.w	r3, r3, #1
 8104222:	2b00      	cmp	r3, #0
 8104224:	d004      	beq.n	8104230 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	2203      	movs	r2, #3
 810422a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 810422e:	e003      	b.n	8104238 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	2201      	movs	r2, #1
 8104234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8104238:	687b      	ldr	r3, [r7, #4]
 810423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810423c:	2b00      	cmp	r3, #0
 810423e:	f000 8272 	beq.w	8104726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104242:	687b      	ldr	r3, [r7, #4]
 8104244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104246:	6878      	ldr	r0, [r7, #4]
 8104248:	4798      	blx	r3
 810424a:	e26c      	b.n	8104726 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	681b      	ldr	r3, [r3, #0]
 8104250:	4a43      	ldr	r2, [pc, #268]	; (8104360 <HAL_DMA_IRQHandler+0xa48>)
 8104252:	4293      	cmp	r3, r2
 8104254:	d022      	beq.n	810429c <HAL_DMA_IRQHandler+0x984>
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	4a42      	ldr	r2, [pc, #264]	; (8104364 <HAL_DMA_IRQHandler+0xa4c>)
 810425c:	4293      	cmp	r3, r2
 810425e:	d01d      	beq.n	810429c <HAL_DMA_IRQHandler+0x984>
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	681b      	ldr	r3, [r3, #0]
 8104264:	4a40      	ldr	r2, [pc, #256]	; (8104368 <HAL_DMA_IRQHandler+0xa50>)
 8104266:	4293      	cmp	r3, r2
 8104268:	d018      	beq.n	810429c <HAL_DMA_IRQHandler+0x984>
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	4a3f      	ldr	r2, [pc, #252]	; (810436c <HAL_DMA_IRQHandler+0xa54>)
 8104270:	4293      	cmp	r3, r2
 8104272:	d013      	beq.n	810429c <HAL_DMA_IRQHandler+0x984>
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	681b      	ldr	r3, [r3, #0]
 8104278:	4a3d      	ldr	r2, [pc, #244]	; (8104370 <HAL_DMA_IRQHandler+0xa58>)
 810427a:	4293      	cmp	r3, r2
 810427c:	d00e      	beq.n	810429c <HAL_DMA_IRQHandler+0x984>
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	4a3c      	ldr	r2, [pc, #240]	; (8104374 <HAL_DMA_IRQHandler+0xa5c>)
 8104284:	4293      	cmp	r3, r2
 8104286:	d009      	beq.n	810429c <HAL_DMA_IRQHandler+0x984>
 8104288:	687b      	ldr	r3, [r7, #4]
 810428a:	681b      	ldr	r3, [r3, #0]
 810428c:	4a3a      	ldr	r2, [pc, #232]	; (8104378 <HAL_DMA_IRQHandler+0xa60>)
 810428e:	4293      	cmp	r3, r2
 8104290:	d004      	beq.n	810429c <HAL_DMA_IRQHandler+0x984>
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	681b      	ldr	r3, [r3, #0]
 8104296:	4a39      	ldr	r2, [pc, #228]	; (810437c <HAL_DMA_IRQHandler+0xa64>)
 8104298:	4293      	cmp	r3, r2
 810429a:	d101      	bne.n	81042a0 <HAL_DMA_IRQHandler+0x988>
 810429c:	2301      	movs	r3, #1
 810429e:	e000      	b.n	81042a2 <HAL_DMA_IRQHandler+0x98a>
 81042a0:	2300      	movs	r3, #0
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	f000 823f 	beq.w	8104726 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	681b      	ldr	r3, [r3, #0]
 81042ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 81042b0:	687b      	ldr	r3, [r7, #4]
 81042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81042b4:	f003 031f 	and.w	r3, r3, #31
 81042b8:	2204      	movs	r2, #4
 81042ba:	409a      	lsls	r2, r3
 81042bc:	697b      	ldr	r3, [r7, #20]
 81042be:	4013      	ands	r3, r2
 81042c0:	2b00      	cmp	r3, #0
 81042c2:	f000 80cd 	beq.w	8104460 <HAL_DMA_IRQHandler+0xb48>
 81042c6:	693b      	ldr	r3, [r7, #16]
 81042c8:	f003 0304 	and.w	r3, r3, #4
 81042cc:	2b00      	cmp	r3, #0
 81042ce:	f000 80c7 	beq.w	8104460 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 81042d2:	687b      	ldr	r3, [r7, #4]
 81042d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81042d6:	f003 031f 	and.w	r3, r3, #31
 81042da:	2204      	movs	r2, #4
 81042dc:	409a      	lsls	r2, r3
 81042de:	69fb      	ldr	r3, [r7, #28]
 81042e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81042e2:	693b      	ldr	r3, [r7, #16]
 81042e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81042e8:	2b00      	cmp	r3, #0
 81042ea:	d049      	beq.n	8104380 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 81042ec:	693b      	ldr	r3, [r7, #16]
 81042ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81042f2:	2b00      	cmp	r3, #0
 81042f4:	d109      	bne.n	810430a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81042fa:	2b00      	cmp	r3, #0
 81042fc:	f000 8210 	beq.w	8104720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104304:	6878      	ldr	r0, [r7, #4]
 8104306:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104308:	e20a      	b.n	8104720 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810430e:	2b00      	cmp	r3, #0
 8104310:	f000 8206 	beq.w	8104720 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8104314:	687b      	ldr	r3, [r7, #4]
 8104316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104318:	6878      	ldr	r0, [r7, #4]
 810431a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810431c:	e200      	b.n	8104720 <HAL_DMA_IRQHandler+0xe08>
 810431e:	bf00      	nop
 8104320:	40020010 	.word	0x40020010
 8104324:	40020028 	.word	0x40020028
 8104328:	40020040 	.word	0x40020040
 810432c:	40020058 	.word	0x40020058
 8104330:	40020070 	.word	0x40020070
 8104334:	40020088 	.word	0x40020088
 8104338:	400200a0 	.word	0x400200a0
 810433c:	400200b8 	.word	0x400200b8
 8104340:	40020410 	.word	0x40020410
 8104344:	40020428 	.word	0x40020428
 8104348:	40020440 	.word	0x40020440
 810434c:	40020458 	.word	0x40020458
 8104350:	40020470 	.word	0x40020470
 8104354:	40020488 	.word	0x40020488
 8104358:	400204a0 	.word	0x400204a0
 810435c:	400204b8 	.word	0x400204b8
 8104360:	58025408 	.word	0x58025408
 8104364:	5802541c 	.word	0x5802541c
 8104368:	58025430 	.word	0x58025430
 810436c:	58025444 	.word	0x58025444
 8104370:	58025458 	.word	0x58025458
 8104374:	5802546c 	.word	0x5802546c
 8104378:	58025480 	.word	0x58025480
 810437c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104380:	693b      	ldr	r3, [r7, #16]
 8104382:	f003 0320 	and.w	r3, r3, #32
 8104386:	2b00      	cmp	r3, #0
 8104388:	d160      	bne.n	810444c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 810438a:	687b      	ldr	r3, [r7, #4]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	4a8c      	ldr	r2, [pc, #560]	; (81045c0 <HAL_DMA_IRQHandler+0xca8>)
 8104390:	4293      	cmp	r3, r2
 8104392:	d04a      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 8104394:	687b      	ldr	r3, [r7, #4]
 8104396:	681b      	ldr	r3, [r3, #0]
 8104398:	4a8a      	ldr	r2, [pc, #552]	; (81045c4 <HAL_DMA_IRQHandler+0xcac>)
 810439a:	4293      	cmp	r3, r2
 810439c:	d045      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	681b      	ldr	r3, [r3, #0]
 81043a2:	4a89      	ldr	r2, [pc, #548]	; (81045c8 <HAL_DMA_IRQHandler+0xcb0>)
 81043a4:	4293      	cmp	r3, r2
 81043a6:	d040      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	681b      	ldr	r3, [r3, #0]
 81043ac:	4a87      	ldr	r2, [pc, #540]	; (81045cc <HAL_DMA_IRQHandler+0xcb4>)
 81043ae:	4293      	cmp	r3, r2
 81043b0:	d03b      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043b2:	687b      	ldr	r3, [r7, #4]
 81043b4:	681b      	ldr	r3, [r3, #0]
 81043b6:	4a86      	ldr	r2, [pc, #536]	; (81045d0 <HAL_DMA_IRQHandler+0xcb8>)
 81043b8:	4293      	cmp	r3, r2
 81043ba:	d036      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	4a84      	ldr	r2, [pc, #528]	; (81045d4 <HAL_DMA_IRQHandler+0xcbc>)
 81043c2:	4293      	cmp	r3, r2
 81043c4:	d031      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	681b      	ldr	r3, [r3, #0]
 81043ca:	4a83      	ldr	r2, [pc, #524]	; (81045d8 <HAL_DMA_IRQHandler+0xcc0>)
 81043cc:	4293      	cmp	r3, r2
 81043ce:	d02c      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043d0:	687b      	ldr	r3, [r7, #4]
 81043d2:	681b      	ldr	r3, [r3, #0]
 81043d4:	4a81      	ldr	r2, [pc, #516]	; (81045dc <HAL_DMA_IRQHandler+0xcc4>)
 81043d6:	4293      	cmp	r3, r2
 81043d8:	d027      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	4a80      	ldr	r2, [pc, #512]	; (81045e0 <HAL_DMA_IRQHandler+0xcc8>)
 81043e0:	4293      	cmp	r3, r2
 81043e2:	d022      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	4a7e      	ldr	r2, [pc, #504]	; (81045e4 <HAL_DMA_IRQHandler+0xccc>)
 81043ea:	4293      	cmp	r3, r2
 81043ec:	d01d      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	4a7d      	ldr	r2, [pc, #500]	; (81045e8 <HAL_DMA_IRQHandler+0xcd0>)
 81043f4:	4293      	cmp	r3, r2
 81043f6:	d018      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	681b      	ldr	r3, [r3, #0]
 81043fc:	4a7b      	ldr	r2, [pc, #492]	; (81045ec <HAL_DMA_IRQHandler+0xcd4>)
 81043fe:	4293      	cmp	r3, r2
 8104400:	d013      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	681b      	ldr	r3, [r3, #0]
 8104406:	4a7a      	ldr	r2, [pc, #488]	; (81045f0 <HAL_DMA_IRQHandler+0xcd8>)
 8104408:	4293      	cmp	r3, r2
 810440a:	d00e      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	681b      	ldr	r3, [r3, #0]
 8104410:	4a78      	ldr	r2, [pc, #480]	; (81045f4 <HAL_DMA_IRQHandler+0xcdc>)
 8104412:	4293      	cmp	r3, r2
 8104414:	d009      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	681b      	ldr	r3, [r3, #0]
 810441a:	4a77      	ldr	r2, [pc, #476]	; (81045f8 <HAL_DMA_IRQHandler+0xce0>)
 810441c:	4293      	cmp	r3, r2
 810441e:	d004      	beq.n	810442a <HAL_DMA_IRQHandler+0xb12>
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	681b      	ldr	r3, [r3, #0]
 8104424:	4a75      	ldr	r2, [pc, #468]	; (81045fc <HAL_DMA_IRQHandler+0xce4>)
 8104426:	4293      	cmp	r3, r2
 8104428:	d108      	bne.n	810443c <HAL_DMA_IRQHandler+0xb24>
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	681a      	ldr	r2, [r3, #0]
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	f022 0208 	bic.w	r2, r2, #8
 8104438:	601a      	str	r2, [r3, #0]
 810443a:	e007      	b.n	810444c <HAL_DMA_IRQHandler+0xb34>
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	681a      	ldr	r2, [r3, #0]
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	681b      	ldr	r3, [r3, #0]
 8104446:	f022 0204 	bic.w	r2, r2, #4
 810444a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 810444c:	687b      	ldr	r3, [r7, #4]
 810444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104450:	2b00      	cmp	r3, #0
 8104452:	f000 8165 	beq.w	8104720 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8104456:	687b      	ldr	r3, [r7, #4]
 8104458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810445a:	6878      	ldr	r0, [r7, #4]
 810445c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810445e:	e15f      	b.n	8104720 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104460:	687b      	ldr	r3, [r7, #4]
 8104462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104464:	f003 031f 	and.w	r3, r3, #31
 8104468:	2202      	movs	r2, #2
 810446a:	409a      	lsls	r2, r3
 810446c:	697b      	ldr	r3, [r7, #20]
 810446e:	4013      	ands	r3, r2
 8104470:	2b00      	cmp	r3, #0
 8104472:	f000 80c5 	beq.w	8104600 <HAL_DMA_IRQHandler+0xce8>
 8104476:	693b      	ldr	r3, [r7, #16]
 8104478:	f003 0302 	and.w	r3, r3, #2
 810447c:	2b00      	cmp	r3, #0
 810447e:	f000 80bf 	beq.w	8104600 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104482:	687b      	ldr	r3, [r7, #4]
 8104484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104486:	f003 031f 	and.w	r3, r3, #31
 810448a:	2202      	movs	r2, #2
 810448c:	409a      	lsls	r2, r3
 810448e:	69fb      	ldr	r3, [r7, #28]
 8104490:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104492:	693b      	ldr	r3, [r7, #16]
 8104494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104498:	2b00      	cmp	r3, #0
 810449a:	d018      	beq.n	81044ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 810449c:	693b      	ldr	r3, [r7, #16]
 810449e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81044a2:	2b00      	cmp	r3, #0
 81044a4:	d109      	bne.n	81044ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81044aa:	2b00      	cmp	r3, #0
 81044ac:	f000 813a 	beq.w	8104724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81044b4:	6878      	ldr	r0, [r7, #4]
 81044b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81044b8:	e134      	b.n	8104724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044be:	2b00      	cmp	r3, #0
 81044c0:	f000 8130 	beq.w	8104724 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044c8:	6878      	ldr	r0, [r7, #4]
 81044ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81044cc:	e12a      	b.n	8104724 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 81044ce:	693b      	ldr	r3, [r7, #16]
 81044d0:	f003 0320 	and.w	r3, r3, #32
 81044d4:	2b00      	cmp	r3, #0
 81044d6:	d168      	bne.n	81045aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	681b      	ldr	r3, [r3, #0]
 81044dc:	4a38      	ldr	r2, [pc, #224]	; (81045c0 <HAL_DMA_IRQHandler+0xca8>)
 81044de:	4293      	cmp	r3, r2
 81044e0:	d04a      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	4a37      	ldr	r2, [pc, #220]	; (81045c4 <HAL_DMA_IRQHandler+0xcac>)
 81044e8:	4293      	cmp	r3, r2
 81044ea:	d045      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	681b      	ldr	r3, [r3, #0]
 81044f0:	4a35      	ldr	r2, [pc, #212]	; (81045c8 <HAL_DMA_IRQHandler+0xcb0>)
 81044f2:	4293      	cmp	r3, r2
 81044f4:	d040      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	681b      	ldr	r3, [r3, #0]
 81044fa:	4a34      	ldr	r2, [pc, #208]	; (81045cc <HAL_DMA_IRQHandler+0xcb4>)
 81044fc:	4293      	cmp	r3, r2
 81044fe:	d03b      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	4a32      	ldr	r2, [pc, #200]	; (81045d0 <HAL_DMA_IRQHandler+0xcb8>)
 8104506:	4293      	cmp	r3, r2
 8104508:	d036      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	4a31      	ldr	r2, [pc, #196]	; (81045d4 <HAL_DMA_IRQHandler+0xcbc>)
 8104510:	4293      	cmp	r3, r2
 8104512:	d031      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	4a2f      	ldr	r2, [pc, #188]	; (81045d8 <HAL_DMA_IRQHandler+0xcc0>)
 810451a:	4293      	cmp	r3, r2
 810451c:	d02c      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	4a2e      	ldr	r2, [pc, #184]	; (81045dc <HAL_DMA_IRQHandler+0xcc4>)
 8104524:	4293      	cmp	r3, r2
 8104526:	d027      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	4a2c      	ldr	r2, [pc, #176]	; (81045e0 <HAL_DMA_IRQHandler+0xcc8>)
 810452e:	4293      	cmp	r3, r2
 8104530:	d022      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	4a2b      	ldr	r2, [pc, #172]	; (81045e4 <HAL_DMA_IRQHandler+0xccc>)
 8104538:	4293      	cmp	r3, r2
 810453a:	d01d      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	4a29      	ldr	r2, [pc, #164]	; (81045e8 <HAL_DMA_IRQHandler+0xcd0>)
 8104542:	4293      	cmp	r3, r2
 8104544:	d018      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	681b      	ldr	r3, [r3, #0]
 810454a:	4a28      	ldr	r2, [pc, #160]	; (81045ec <HAL_DMA_IRQHandler+0xcd4>)
 810454c:	4293      	cmp	r3, r2
 810454e:	d013      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 8104550:	687b      	ldr	r3, [r7, #4]
 8104552:	681b      	ldr	r3, [r3, #0]
 8104554:	4a26      	ldr	r2, [pc, #152]	; (81045f0 <HAL_DMA_IRQHandler+0xcd8>)
 8104556:	4293      	cmp	r3, r2
 8104558:	d00e      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 810455a:	687b      	ldr	r3, [r7, #4]
 810455c:	681b      	ldr	r3, [r3, #0]
 810455e:	4a25      	ldr	r2, [pc, #148]	; (81045f4 <HAL_DMA_IRQHandler+0xcdc>)
 8104560:	4293      	cmp	r3, r2
 8104562:	d009      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 8104564:	687b      	ldr	r3, [r7, #4]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	4a23      	ldr	r2, [pc, #140]	; (81045f8 <HAL_DMA_IRQHandler+0xce0>)
 810456a:	4293      	cmp	r3, r2
 810456c:	d004      	beq.n	8104578 <HAL_DMA_IRQHandler+0xc60>
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	4a22      	ldr	r2, [pc, #136]	; (81045fc <HAL_DMA_IRQHandler+0xce4>)
 8104574:	4293      	cmp	r3, r2
 8104576:	d108      	bne.n	810458a <HAL_DMA_IRQHandler+0xc72>
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	681b      	ldr	r3, [r3, #0]
 810457c:	681a      	ldr	r2, [r3, #0]
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	681b      	ldr	r3, [r3, #0]
 8104582:	f022 0214 	bic.w	r2, r2, #20
 8104586:	601a      	str	r2, [r3, #0]
 8104588:	e007      	b.n	810459a <HAL_DMA_IRQHandler+0xc82>
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	681a      	ldr	r2, [r3, #0]
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	f022 020a 	bic.w	r2, r2, #10
 8104598:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 810459a:	687b      	ldr	r3, [r7, #4]
 810459c:	2200      	movs	r2, #0
 810459e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81045a2:	687b      	ldr	r3, [r7, #4]
 81045a4:	2201      	movs	r2, #1
 81045a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045ae:	2b00      	cmp	r3, #0
 81045b0:	f000 80b8 	beq.w	8104724 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045b8:	6878      	ldr	r0, [r7, #4]
 81045ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81045bc:	e0b2      	b.n	8104724 <HAL_DMA_IRQHandler+0xe0c>
 81045be:	bf00      	nop
 81045c0:	40020010 	.word	0x40020010
 81045c4:	40020028 	.word	0x40020028
 81045c8:	40020040 	.word	0x40020040
 81045cc:	40020058 	.word	0x40020058
 81045d0:	40020070 	.word	0x40020070
 81045d4:	40020088 	.word	0x40020088
 81045d8:	400200a0 	.word	0x400200a0
 81045dc:	400200b8 	.word	0x400200b8
 81045e0:	40020410 	.word	0x40020410
 81045e4:	40020428 	.word	0x40020428
 81045e8:	40020440 	.word	0x40020440
 81045ec:	40020458 	.word	0x40020458
 81045f0:	40020470 	.word	0x40020470
 81045f4:	40020488 	.word	0x40020488
 81045f8:	400204a0 	.word	0x400204a0
 81045fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104604:	f003 031f 	and.w	r3, r3, #31
 8104608:	2208      	movs	r2, #8
 810460a:	409a      	lsls	r2, r3
 810460c:	697b      	ldr	r3, [r7, #20]
 810460e:	4013      	ands	r3, r2
 8104610:	2b00      	cmp	r3, #0
 8104612:	f000 8088 	beq.w	8104726 <HAL_DMA_IRQHandler+0xe0e>
 8104616:	693b      	ldr	r3, [r7, #16]
 8104618:	f003 0308 	and.w	r3, r3, #8
 810461c:	2b00      	cmp	r3, #0
 810461e:	f000 8082 	beq.w	8104726 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104622:	687b      	ldr	r3, [r7, #4]
 8104624:	681b      	ldr	r3, [r3, #0]
 8104626:	4a41      	ldr	r2, [pc, #260]	; (810472c <HAL_DMA_IRQHandler+0xe14>)
 8104628:	4293      	cmp	r3, r2
 810462a:	d04a      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	4a3f      	ldr	r2, [pc, #252]	; (8104730 <HAL_DMA_IRQHandler+0xe18>)
 8104632:	4293      	cmp	r3, r2
 8104634:	d045      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 8104636:	687b      	ldr	r3, [r7, #4]
 8104638:	681b      	ldr	r3, [r3, #0]
 810463a:	4a3e      	ldr	r2, [pc, #248]	; (8104734 <HAL_DMA_IRQHandler+0xe1c>)
 810463c:	4293      	cmp	r3, r2
 810463e:	d040      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	681b      	ldr	r3, [r3, #0]
 8104644:	4a3c      	ldr	r2, [pc, #240]	; (8104738 <HAL_DMA_IRQHandler+0xe20>)
 8104646:	4293      	cmp	r3, r2
 8104648:	d03b      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	4a3b      	ldr	r2, [pc, #236]	; (810473c <HAL_DMA_IRQHandler+0xe24>)
 8104650:	4293      	cmp	r3, r2
 8104652:	d036      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 8104654:	687b      	ldr	r3, [r7, #4]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	4a39      	ldr	r2, [pc, #228]	; (8104740 <HAL_DMA_IRQHandler+0xe28>)
 810465a:	4293      	cmp	r3, r2
 810465c:	d031      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 810465e:	687b      	ldr	r3, [r7, #4]
 8104660:	681b      	ldr	r3, [r3, #0]
 8104662:	4a38      	ldr	r2, [pc, #224]	; (8104744 <HAL_DMA_IRQHandler+0xe2c>)
 8104664:	4293      	cmp	r3, r2
 8104666:	d02c      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	681b      	ldr	r3, [r3, #0]
 810466c:	4a36      	ldr	r2, [pc, #216]	; (8104748 <HAL_DMA_IRQHandler+0xe30>)
 810466e:	4293      	cmp	r3, r2
 8104670:	d027      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	681b      	ldr	r3, [r3, #0]
 8104676:	4a35      	ldr	r2, [pc, #212]	; (810474c <HAL_DMA_IRQHandler+0xe34>)
 8104678:	4293      	cmp	r3, r2
 810467a:	d022      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	681b      	ldr	r3, [r3, #0]
 8104680:	4a33      	ldr	r2, [pc, #204]	; (8104750 <HAL_DMA_IRQHandler+0xe38>)
 8104682:	4293      	cmp	r3, r2
 8104684:	d01d      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	4a32      	ldr	r2, [pc, #200]	; (8104754 <HAL_DMA_IRQHandler+0xe3c>)
 810468c:	4293      	cmp	r3, r2
 810468e:	d018      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	4a30      	ldr	r2, [pc, #192]	; (8104758 <HAL_DMA_IRQHandler+0xe40>)
 8104696:	4293      	cmp	r3, r2
 8104698:	d013      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	4a2f      	ldr	r2, [pc, #188]	; (810475c <HAL_DMA_IRQHandler+0xe44>)
 81046a0:	4293      	cmp	r3, r2
 81046a2:	d00e      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	4a2d      	ldr	r2, [pc, #180]	; (8104760 <HAL_DMA_IRQHandler+0xe48>)
 81046aa:	4293      	cmp	r3, r2
 81046ac:	d009      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	4a2c      	ldr	r2, [pc, #176]	; (8104764 <HAL_DMA_IRQHandler+0xe4c>)
 81046b4:	4293      	cmp	r3, r2
 81046b6:	d004      	beq.n	81046c2 <HAL_DMA_IRQHandler+0xdaa>
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	4a2a      	ldr	r2, [pc, #168]	; (8104768 <HAL_DMA_IRQHandler+0xe50>)
 81046be:	4293      	cmp	r3, r2
 81046c0:	d108      	bne.n	81046d4 <HAL_DMA_IRQHandler+0xdbc>
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	681a      	ldr	r2, [r3, #0]
 81046c8:	687b      	ldr	r3, [r7, #4]
 81046ca:	681b      	ldr	r3, [r3, #0]
 81046cc:	f022 021c 	bic.w	r2, r2, #28
 81046d0:	601a      	str	r2, [r3, #0]
 81046d2:	e007      	b.n	81046e4 <HAL_DMA_IRQHandler+0xdcc>
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	681b      	ldr	r3, [r3, #0]
 81046d8:	681a      	ldr	r2, [r3, #0]
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	681b      	ldr	r3, [r3, #0]
 81046de:	f022 020e 	bic.w	r2, r2, #14
 81046e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046e8:	f003 031f 	and.w	r3, r3, #31
 81046ec:	2201      	movs	r2, #1
 81046ee:	409a      	lsls	r2, r3
 81046f0:	69fb      	ldr	r3, [r7, #28]
 81046f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	2201      	movs	r2, #1
 81046f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	2200      	movs	r2, #0
 81046fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	2201      	movs	r2, #1
 8104706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810470e:	2b00      	cmp	r3, #0
 8104710:	d009      	beq.n	8104726 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104716:	6878      	ldr	r0, [r7, #4]
 8104718:	4798      	blx	r3
 810471a:	e004      	b.n	8104726 <HAL_DMA_IRQHandler+0xe0e>
          return;
 810471c:	bf00      	nop
 810471e:	e002      	b.n	8104726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104720:	bf00      	nop
 8104722:	e000      	b.n	8104726 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104724:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104726:	3728      	adds	r7, #40	; 0x28
 8104728:	46bd      	mov	sp, r7
 810472a:	bd80      	pop	{r7, pc}
 810472c:	40020010 	.word	0x40020010
 8104730:	40020028 	.word	0x40020028
 8104734:	40020040 	.word	0x40020040
 8104738:	40020058 	.word	0x40020058
 810473c:	40020070 	.word	0x40020070
 8104740:	40020088 	.word	0x40020088
 8104744:	400200a0 	.word	0x400200a0
 8104748:	400200b8 	.word	0x400200b8
 810474c:	40020410 	.word	0x40020410
 8104750:	40020428 	.word	0x40020428
 8104754:	40020440 	.word	0x40020440
 8104758:	40020458 	.word	0x40020458
 810475c:	40020470 	.word	0x40020470
 8104760:	40020488 	.word	0x40020488
 8104764:	400204a0 	.word	0x400204a0
 8104768:	400204b8 	.word	0x400204b8

0810476c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810476c:	b480      	push	{r7}
 810476e:	b087      	sub	sp, #28
 8104770:	af00      	add	r7, sp, #0
 8104772:	60f8      	str	r0, [r7, #12]
 8104774:	60b9      	str	r1, [r7, #8]
 8104776:	607a      	str	r2, [r7, #4]
 8104778:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810477a:	68fb      	ldr	r3, [r7, #12]
 810477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810477e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104780:	68fb      	ldr	r3, [r7, #12]
 8104782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104784:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104786:	68fb      	ldr	r3, [r7, #12]
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	4a84      	ldr	r2, [pc, #528]	; (810499c <DMA_SetConfig+0x230>)
 810478c:	4293      	cmp	r3, r2
 810478e:	d072      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104790:	68fb      	ldr	r3, [r7, #12]
 8104792:	681b      	ldr	r3, [r3, #0]
 8104794:	4a82      	ldr	r2, [pc, #520]	; (81049a0 <DMA_SetConfig+0x234>)
 8104796:	4293      	cmp	r3, r2
 8104798:	d06d      	beq.n	8104876 <DMA_SetConfig+0x10a>
 810479a:	68fb      	ldr	r3, [r7, #12]
 810479c:	681b      	ldr	r3, [r3, #0]
 810479e:	4a81      	ldr	r2, [pc, #516]	; (81049a4 <DMA_SetConfig+0x238>)
 81047a0:	4293      	cmp	r3, r2
 81047a2:	d068      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047a4:	68fb      	ldr	r3, [r7, #12]
 81047a6:	681b      	ldr	r3, [r3, #0]
 81047a8:	4a7f      	ldr	r2, [pc, #508]	; (81049a8 <DMA_SetConfig+0x23c>)
 81047aa:	4293      	cmp	r3, r2
 81047ac:	d063      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047ae:	68fb      	ldr	r3, [r7, #12]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	4a7e      	ldr	r2, [pc, #504]	; (81049ac <DMA_SetConfig+0x240>)
 81047b4:	4293      	cmp	r3, r2
 81047b6:	d05e      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047b8:	68fb      	ldr	r3, [r7, #12]
 81047ba:	681b      	ldr	r3, [r3, #0]
 81047bc:	4a7c      	ldr	r2, [pc, #496]	; (81049b0 <DMA_SetConfig+0x244>)
 81047be:	4293      	cmp	r3, r2
 81047c0:	d059      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047c2:	68fb      	ldr	r3, [r7, #12]
 81047c4:	681b      	ldr	r3, [r3, #0]
 81047c6:	4a7b      	ldr	r2, [pc, #492]	; (81049b4 <DMA_SetConfig+0x248>)
 81047c8:	4293      	cmp	r3, r2
 81047ca:	d054      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047cc:	68fb      	ldr	r3, [r7, #12]
 81047ce:	681b      	ldr	r3, [r3, #0]
 81047d0:	4a79      	ldr	r2, [pc, #484]	; (81049b8 <DMA_SetConfig+0x24c>)
 81047d2:	4293      	cmp	r3, r2
 81047d4:	d04f      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047d6:	68fb      	ldr	r3, [r7, #12]
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	4a78      	ldr	r2, [pc, #480]	; (81049bc <DMA_SetConfig+0x250>)
 81047dc:	4293      	cmp	r3, r2
 81047de:	d04a      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	681b      	ldr	r3, [r3, #0]
 81047e4:	4a76      	ldr	r2, [pc, #472]	; (81049c0 <DMA_SetConfig+0x254>)
 81047e6:	4293      	cmp	r3, r2
 81047e8:	d045      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047ea:	68fb      	ldr	r3, [r7, #12]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	4a75      	ldr	r2, [pc, #468]	; (81049c4 <DMA_SetConfig+0x258>)
 81047f0:	4293      	cmp	r3, r2
 81047f2:	d040      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047f4:	68fb      	ldr	r3, [r7, #12]
 81047f6:	681b      	ldr	r3, [r3, #0]
 81047f8:	4a73      	ldr	r2, [pc, #460]	; (81049c8 <DMA_SetConfig+0x25c>)
 81047fa:	4293      	cmp	r3, r2
 81047fc:	d03b      	beq.n	8104876 <DMA_SetConfig+0x10a>
 81047fe:	68fb      	ldr	r3, [r7, #12]
 8104800:	681b      	ldr	r3, [r3, #0]
 8104802:	4a72      	ldr	r2, [pc, #456]	; (81049cc <DMA_SetConfig+0x260>)
 8104804:	4293      	cmp	r3, r2
 8104806:	d036      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104808:	68fb      	ldr	r3, [r7, #12]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	4a70      	ldr	r2, [pc, #448]	; (81049d0 <DMA_SetConfig+0x264>)
 810480e:	4293      	cmp	r3, r2
 8104810:	d031      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104812:	68fb      	ldr	r3, [r7, #12]
 8104814:	681b      	ldr	r3, [r3, #0]
 8104816:	4a6f      	ldr	r2, [pc, #444]	; (81049d4 <DMA_SetConfig+0x268>)
 8104818:	4293      	cmp	r3, r2
 810481a:	d02c      	beq.n	8104876 <DMA_SetConfig+0x10a>
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	681b      	ldr	r3, [r3, #0]
 8104820:	4a6d      	ldr	r2, [pc, #436]	; (81049d8 <DMA_SetConfig+0x26c>)
 8104822:	4293      	cmp	r3, r2
 8104824:	d027      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104826:	68fb      	ldr	r3, [r7, #12]
 8104828:	681b      	ldr	r3, [r3, #0]
 810482a:	4a6c      	ldr	r2, [pc, #432]	; (81049dc <DMA_SetConfig+0x270>)
 810482c:	4293      	cmp	r3, r2
 810482e:	d022      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	681b      	ldr	r3, [r3, #0]
 8104834:	4a6a      	ldr	r2, [pc, #424]	; (81049e0 <DMA_SetConfig+0x274>)
 8104836:	4293      	cmp	r3, r2
 8104838:	d01d      	beq.n	8104876 <DMA_SetConfig+0x10a>
 810483a:	68fb      	ldr	r3, [r7, #12]
 810483c:	681b      	ldr	r3, [r3, #0]
 810483e:	4a69      	ldr	r2, [pc, #420]	; (81049e4 <DMA_SetConfig+0x278>)
 8104840:	4293      	cmp	r3, r2
 8104842:	d018      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104844:	68fb      	ldr	r3, [r7, #12]
 8104846:	681b      	ldr	r3, [r3, #0]
 8104848:	4a67      	ldr	r2, [pc, #412]	; (81049e8 <DMA_SetConfig+0x27c>)
 810484a:	4293      	cmp	r3, r2
 810484c:	d013      	beq.n	8104876 <DMA_SetConfig+0x10a>
 810484e:	68fb      	ldr	r3, [r7, #12]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	4a66      	ldr	r2, [pc, #408]	; (81049ec <DMA_SetConfig+0x280>)
 8104854:	4293      	cmp	r3, r2
 8104856:	d00e      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	681b      	ldr	r3, [r3, #0]
 810485c:	4a64      	ldr	r2, [pc, #400]	; (81049f0 <DMA_SetConfig+0x284>)
 810485e:	4293      	cmp	r3, r2
 8104860:	d009      	beq.n	8104876 <DMA_SetConfig+0x10a>
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	681b      	ldr	r3, [r3, #0]
 8104866:	4a63      	ldr	r2, [pc, #396]	; (81049f4 <DMA_SetConfig+0x288>)
 8104868:	4293      	cmp	r3, r2
 810486a:	d004      	beq.n	8104876 <DMA_SetConfig+0x10a>
 810486c:	68fb      	ldr	r3, [r7, #12]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	4a61      	ldr	r2, [pc, #388]	; (81049f8 <DMA_SetConfig+0x28c>)
 8104872:	4293      	cmp	r3, r2
 8104874:	d101      	bne.n	810487a <DMA_SetConfig+0x10e>
 8104876:	2301      	movs	r3, #1
 8104878:	e000      	b.n	810487c <DMA_SetConfig+0x110>
 810487a:	2300      	movs	r3, #0
 810487c:	2b00      	cmp	r3, #0
 810487e:	d00d      	beq.n	810489c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104880:	68fb      	ldr	r3, [r7, #12]
 8104882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104884:	68fa      	ldr	r2, [r7, #12]
 8104886:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8104888:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810488a:	68fb      	ldr	r3, [r7, #12]
 810488c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810488e:	2b00      	cmp	r3, #0
 8104890:	d004      	beq.n	810489c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104892:	68fb      	ldr	r3, [r7, #12]
 8104894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104896:	68fa      	ldr	r2, [r7, #12]
 8104898:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810489a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810489c:	68fb      	ldr	r3, [r7, #12]
 810489e:	681b      	ldr	r3, [r3, #0]
 81048a0:	4a3e      	ldr	r2, [pc, #248]	; (810499c <DMA_SetConfig+0x230>)
 81048a2:	4293      	cmp	r3, r2
 81048a4:	d04a      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048a6:	68fb      	ldr	r3, [r7, #12]
 81048a8:	681b      	ldr	r3, [r3, #0]
 81048aa:	4a3d      	ldr	r2, [pc, #244]	; (81049a0 <DMA_SetConfig+0x234>)
 81048ac:	4293      	cmp	r3, r2
 81048ae:	d045      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048b0:	68fb      	ldr	r3, [r7, #12]
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	4a3b      	ldr	r2, [pc, #236]	; (81049a4 <DMA_SetConfig+0x238>)
 81048b6:	4293      	cmp	r3, r2
 81048b8:	d040      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048ba:	68fb      	ldr	r3, [r7, #12]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	4a3a      	ldr	r2, [pc, #232]	; (81049a8 <DMA_SetConfig+0x23c>)
 81048c0:	4293      	cmp	r3, r2
 81048c2:	d03b      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048c4:	68fb      	ldr	r3, [r7, #12]
 81048c6:	681b      	ldr	r3, [r3, #0]
 81048c8:	4a38      	ldr	r2, [pc, #224]	; (81049ac <DMA_SetConfig+0x240>)
 81048ca:	4293      	cmp	r3, r2
 81048cc:	d036      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048ce:	68fb      	ldr	r3, [r7, #12]
 81048d0:	681b      	ldr	r3, [r3, #0]
 81048d2:	4a37      	ldr	r2, [pc, #220]	; (81049b0 <DMA_SetConfig+0x244>)
 81048d4:	4293      	cmp	r3, r2
 81048d6:	d031      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048d8:	68fb      	ldr	r3, [r7, #12]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	4a35      	ldr	r2, [pc, #212]	; (81049b4 <DMA_SetConfig+0x248>)
 81048de:	4293      	cmp	r3, r2
 81048e0:	d02c      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048e2:	68fb      	ldr	r3, [r7, #12]
 81048e4:	681b      	ldr	r3, [r3, #0]
 81048e6:	4a34      	ldr	r2, [pc, #208]	; (81049b8 <DMA_SetConfig+0x24c>)
 81048e8:	4293      	cmp	r3, r2
 81048ea:	d027      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048ec:	68fb      	ldr	r3, [r7, #12]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	4a32      	ldr	r2, [pc, #200]	; (81049bc <DMA_SetConfig+0x250>)
 81048f2:	4293      	cmp	r3, r2
 81048f4:	d022      	beq.n	810493c <DMA_SetConfig+0x1d0>
 81048f6:	68fb      	ldr	r3, [r7, #12]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	4a31      	ldr	r2, [pc, #196]	; (81049c0 <DMA_SetConfig+0x254>)
 81048fc:	4293      	cmp	r3, r2
 81048fe:	d01d      	beq.n	810493c <DMA_SetConfig+0x1d0>
 8104900:	68fb      	ldr	r3, [r7, #12]
 8104902:	681b      	ldr	r3, [r3, #0]
 8104904:	4a2f      	ldr	r2, [pc, #188]	; (81049c4 <DMA_SetConfig+0x258>)
 8104906:	4293      	cmp	r3, r2
 8104908:	d018      	beq.n	810493c <DMA_SetConfig+0x1d0>
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	4a2e      	ldr	r2, [pc, #184]	; (81049c8 <DMA_SetConfig+0x25c>)
 8104910:	4293      	cmp	r3, r2
 8104912:	d013      	beq.n	810493c <DMA_SetConfig+0x1d0>
 8104914:	68fb      	ldr	r3, [r7, #12]
 8104916:	681b      	ldr	r3, [r3, #0]
 8104918:	4a2c      	ldr	r2, [pc, #176]	; (81049cc <DMA_SetConfig+0x260>)
 810491a:	4293      	cmp	r3, r2
 810491c:	d00e      	beq.n	810493c <DMA_SetConfig+0x1d0>
 810491e:	68fb      	ldr	r3, [r7, #12]
 8104920:	681b      	ldr	r3, [r3, #0]
 8104922:	4a2b      	ldr	r2, [pc, #172]	; (81049d0 <DMA_SetConfig+0x264>)
 8104924:	4293      	cmp	r3, r2
 8104926:	d009      	beq.n	810493c <DMA_SetConfig+0x1d0>
 8104928:	68fb      	ldr	r3, [r7, #12]
 810492a:	681b      	ldr	r3, [r3, #0]
 810492c:	4a29      	ldr	r2, [pc, #164]	; (81049d4 <DMA_SetConfig+0x268>)
 810492e:	4293      	cmp	r3, r2
 8104930:	d004      	beq.n	810493c <DMA_SetConfig+0x1d0>
 8104932:	68fb      	ldr	r3, [r7, #12]
 8104934:	681b      	ldr	r3, [r3, #0]
 8104936:	4a28      	ldr	r2, [pc, #160]	; (81049d8 <DMA_SetConfig+0x26c>)
 8104938:	4293      	cmp	r3, r2
 810493a:	d101      	bne.n	8104940 <DMA_SetConfig+0x1d4>
 810493c:	2301      	movs	r3, #1
 810493e:	e000      	b.n	8104942 <DMA_SetConfig+0x1d6>
 8104940:	2300      	movs	r3, #0
 8104942:	2b00      	cmp	r3, #0
 8104944:	d05a      	beq.n	81049fc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104946:	68fb      	ldr	r3, [r7, #12]
 8104948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810494a:	f003 031f 	and.w	r3, r3, #31
 810494e:	223f      	movs	r2, #63	; 0x3f
 8104950:	409a      	lsls	r2, r3
 8104952:	697b      	ldr	r3, [r7, #20]
 8104954:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104956:	68fb      	ldr	r3, [r7, #12]
 8104958:	681b      	ldr	r3, [r3, #0]
 810495a:	681a      	ldr	r2, [r3, #0]
 810495c:	68fb      	ldr	r3, [r7, #12]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8104964:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8104966:	68fb      	ldr	r3, [r7, #12]
 8104968:	681b      	ldr	r3, [r3, #0]
 810496a:	683a      	ldr	r2, [r7, #0]
 810496c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810496e:	68fb      	ldr	r3, [r7, #12]
 8104970:	689b      	ldr	r3, [r3, #8]
 8104972:	2b40      	cmp	r3, #64	; 0x40
 8104974:	d108      	bne.n	8104988 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8104976:	68fb      	ldr	r3, [r7, #12]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	687a      	ldr	r2, [r7, #4]
 810497c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810497e:	68fb      	ldr	r3, [r7, #12]
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	68ba      	ldr	r2, [r7, #8]
 8104984:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104986:	e087      	b.n	8104a98 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8104988:	68fb      	ldr	r3, [r7, #12]
 810498a:	681b      	ldr	r3, [r3, #0]
 810498c:	68ba      	ldr	r2, [r7, #8]
 810498e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104990:	68fb      	ldr	r3, [r7, #12]
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	687a      	ldr	r2, [r7, #4]
 8104996:	60da      	str	r2, [r3, #12]
}
 8104998:	e07e      	b.n	8104a98 <DMA_SetConfig+0x32c>
 810499a:	bf00      	nop
 810499c:	40020010 	.word	0x40020010
 81049a0:	40020028 	.word	0x40020028
 81049a4:	40020040 	.word	0x40020040
 81049a8:	40020058 	.word	0x40020058
 81049ac:	40020070 	.word	0x40020070
 81049b0:	40020088 	.word	0x40020088
 81049b4:	400200a0 	.word	0x400200a0
 81049b8:	400200b8 	.word	0x400200b8
 81049bc:	40020410 	.word	0x40020410
 81049c0:	40020428 	.word	0x40020428
 81049c4:	40020440 	.word	0x40020440
 81049c8:	40020458 	.word	0x40020458
 81049cc:	40020470 	.word	0x40020470
 81049d0:	40020488 	.word	0x40020488
 81049d4:	400204a0 	.word	0x400204a0
 81049d8:	400204b8 	.word	0x400204b8
 81049dc:	58025408 	.word	0x58025408
 81049e0:	5802541c 	.word	0x5802541c
 81049e4:	58025430 	.word	0x58025430
 81049e8:	58025444 	.word	0x58025444
 81049ec:	58025458 	.word	0x58025458
 81049f0:	5802546c 	.word	0x5802546c
 81049f4:	58025480 	.word	0x58025480
 81049f8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81049fc:	68fb      	ldr	r3, [r7, #12]
 81049fe:	681b      	ldr	r3, [r3, #0]
 8104a00:	4a28      	ldr	r2, [pc, #160]	; (8104aa4 <DMA_SetConfig+0x338>)
 8104a02:	4293      	cmp	r3, r2
 8104a04:	d022      	beq.n	8104a4c <DMA_SetConfig+0x2e0>
 8104a06:	68fb      	ldr	r3, [r7, #12]
 8104a08:	681b      	ldr	r3, [r3, #0]
 8104a0a:	4a27      	ldr	r2, [pc, #156]	; (8104aa8 <DMA_SetConfig+0x33c>)
 8104a0c:	4293      	cmp	r3, r2
 8104a0e:	d01d      	beq.n	8104a4c <DMA_SetConfig+0x2e0>
 8104a10:	68fb      	ldr	r3, [r7, #12]
 8104a12:	681b      	ldr	r3, [r3, #0]
 8104a14:	4a25      	ldr	r2, [pc, #148]	; (8104aac <DMA_SetConfig+0x340>)
 8104a16:	4293      	cmp	r3, r2
 8104a18:	d018      	beq.n	8104a4c <DMA_SetConfig+0x2e0>
 8104a1a:	68fb      	ldr	r3, [r7, #12]
 8104a1c:	681b      	ldr	r3, [r3, #0]
 8104a1e:	4a24      	ldr	r2, [pc, #144]	; (8104ab0 <DMA_SetConfig+0x344>)
 8104a20:	4293      	cmp	r3, r2
 8104a22:	d013      	beq.n	8104a4c <DMA_SetConfig+0x2e0>
 8104a24:	68fb      	ldr	r3, [r7, #12]
 8104a26:	681b      	ldr	r3, [r3, #0]
 8104a28:	4a22      	ldr	r2, [pc, #136]	; (8104ab4 <DMA_SetConfig+0x348>)
 8104a2a:	4293      	cmp	r3, r2
 8104a2c:	d00e      	beq.n	8104a4c <DMA_SetConfig+0x2e0>
 8104a2e:	68fb      	ldr	r3, [r7, #12]
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	4a21      	ldr	r2, [pc, #132]	; (8104ab8 <DMA_SetConfig+0x34c>)
 8104a34:	4293      	cmp	r3, r2
 8104a36:	d009      	beq.n	8104a4c <DMA_SetConfig+0x2e0>
 8104a38:	68fb      	ldr	r3, [r7, #12]
 8104a3a:	681b      	ldr	r3, [r3, #0]
 8104a3c:	4a1f      	ldr	r2, [pc, #124]	; (8104abc <DMA_SetConfig+0x350>)
 8104a3e:	4293      	cmp	r3, r2
 8104a40:	d004      	beq.n	8104a4c <DMA_SetConfig+0x2e0>
 8104a42:	68fb      	ldr	r3, [r7, #12]
 8104a44:	681b      	ldr	r3, [r3, #0]
 8104a46:	4a1e      	ldr	r2, [pc, #120]	; (8104ac0 <DMA_SetConfig+0x354>)
 8104a48:	4293      	cmp	r3, r2
 8104a4a:	d101      	bne.n	8104a50 <DMA_SetConfig+0x2e4>
 8104a4c:	2301      	movs	r3, #1
 8104a4e:	e000      	b.n	8104a52 <DMA_SetConfig+0x2e6>
 8104a50:	2300      	movs	r3, #0
 8104a52:	2b00      	cmp	r3, #0
 8104a54:	d020      	beq.n	8104a98 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104a5a:	f003 031f 	and.w	r3, r3, #31
 8104a5e:	2201      	movs	r2, #1
 8104a60:	409a      	lsls	r2, r3
 8104a62:	693b      	ldr	r3, [r7, #16]
 8104a64:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	683a      	ldr	r2, [r7, #0]
 8104a6c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8104a6e:	68fb      	ldr	r3, [r7, #12]
 8104a70:	689b      	ldr	r3, [r3, #8]
 8104a72:	2b40      	cmp	r3, #64	; 0x40
 8104a74:	d108      	bne.n	8104a88 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8104a76:	68fb      	ldr	r3, [r7, #12]
 8104a78:	681b      	ldr	r3, [r3, #0]
 8104a7a:	687a      	ldr	r2, [r7, #4]
 8104a7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104a7e:	68fb      	ldr	r3, [r7, #12]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	68ba      	ldr	r2, [r7, #8]
 8104a84:	60da      	str	r2, [r3, #12]
}
 8104a86:	e007      	b.n	8104a98 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8104a88:	68fb      	ldr	r3, [r7, #12]
 8104a8a:	681b      	ldr	r3, [r3, #0]
 8104a8c:	68ba      	ldr	r2, [r7, #8]
 8104a8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104a90:	68fb      	ldr	r3, [r7, #12]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	687a      	ldr	r2, [r7, #4]
 8104a96:	60da      	str	r2, [r3, #12]
}
 8104a98:	bf00      	nop
 8104a9a:	371c      	adds	r7, #28
 8104a9c:	46bd      	mov	sp, r7
 8104a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104aa2:	4770      	bx	lr
 8104aa4:	58025408 	.word	0x58025408
 8104aa8:	5802541c 	.word	0x5802541c
 8104aac:	58025430 	.word	0x58025430
 8104ab0:	58025444 	.word	0x58025444
 8104ab4:	58025458 	.word	0x58025458
 8104ab8:	5802546c 	.word	0x5802546c
 8104abc:	58025480 	.word	0x58025480
 8104ac0:	58025494 	.word	0x58025494

08104ac4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104ac4:	b480      	push	{r7}
 8104ac6:	b085      	sub	sp, #20
 8104ac8:	af00      	add	r7, sp, #0
 8104aca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104acc:	687b      	ldr	r3, [r7, #4]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	4a43      	ldr	r2, [pc, #268]	; (8104be0 <DMA_CalcBaseAndBitshift+0x11c>)
 8104ad2:	4293      	cmp	r3, r2
 8104ad4:	d04a      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	4a42      	ldr	r2, [pc, #264]	; (8104be4 <DMA_CalcBaseAndBitshift+0x120>)
 8104adc:	4293      	cmp	r3, r2
 8104ade:	d045      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	681b      	ldr	r3, [r3, #0]
 8104ae4:	4a40      	ldr	r2, [pc, #256]	; (8104be8 <DMA_CalcBaseAndBitshift+0x124>)
 8104ae6:	4293      	cmp	r3, r2
 8104ae8:	d040      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	681b      	ldr	r3, [r3, #0]
 8104aee:	4a3f      	ldr	r2, [pc, #252]	; (8104bec <DMA_CalcBaseAndBitshift+0x128>)
 8104af0:	4293      	cmp	r3, r2
 8104af2:	d03b      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	681b      	ldr	r3, [r3, #0]
 8104af8:	4a3d      	ldr	r2, [pc, #244]	; (8104bf0 <DMA_CalcBaseAndBitshift+0x12c>)
 8104afa:	4293      	cmp	r3, r2
 8104afc:	d036      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104afe:	687b      	ldr	r3, [r7, #4]
 8104b00:	681b      	ldr	r3, [r3, #0]
 8104b02:	4a3c      	ldr	r2, [pc, #240]	; (8104bf4 <DMA_CalcBaseAndBitshift+0x130>)
 8104b04:	4293      	cmp	r3, r2
 8104b06:	d031      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b08:	687b      	ldr	r3, [r7, #4]
 8104b0a:	681b      	ldr	r3, [r3, #0]
 8104b0c:	4a3a      	ldr	r2, [pc, #232]	; (8104bf8 <DMA_CalcBaseAndBitshift+0x134>)
 8104b0e:	4293      	cmp	r3, r2
 8104b10:	d02c      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b12:	687b      	ldr	r3, [r7, #4]
 8104b14:	681b      	ldr	r3, [r3, #0]
 8104b16:	4a39      	ldr	r2, [pc, #228]	; (8104bfc <DMA_CalcBaseAndBitshift+0x138>)
 8104b18:	4293      	cmp	r3, r2
 8104b1a:	d027      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b1c:	687b      	ldr	r3, [r7, #4]
 8104b1e:	681b      	ldr	r3, [r3, #0]
 8104b20:	4a37      	ldr	r2, [pc, #220]	; (8104c00 <DMA_CalcBaseAndBitshift+0x13c>)
 8104b22:	4293      	cmp	r3, r2
 8104b24:	d022      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b26:	687b      	ldr	r3, [r7, #4]
 8104b28:	681b      	ldr	r3, [r3, #0]
 8104b2a:	4a36      	ldr	r2, [pc, #216]	; (8104c04 <DMA_CalcBaseAndBitshift+0x140>)
 8104b2c:	4293      	cmp	r3, r2
 8104b2e:	d01d      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b30:	687b      	ldr	r3, [r7, #4]
 8104b32:	681b      	ldr	r3, [r3, #0]
 8104b34:	4a34      	ldr	r2, [pc, #208]	; (8104c08 <DMA_CalcBaseAndBitshift+0x144>)
 8104b36:	4293      	cmp	r3, r2
 8104b38:	d018      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b3a:	687b      	ldr	r3, [r7, #4]
 8104b3c:	681b      	ldr	r3, [r3, #0]
 8104b3e:	4a33      	ldr	r2, [pc, #204]	; (8104c0c <DMA_CalcBaseAndBitshift+0x148>)
 8104b40:	4293      	cmp	r3, r2
 8104b42:	d013      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b44:	687b      	ldr	r3, [r7, #4]
 8104b46:	681b      	ldr	r3, [r3, #0]
 8104b48:	4a31      	ldr	r2, [pc, #196]	; (8104c10 <DMA_CalcBaseAndBitshift+0x14c>)
 8104b4a:	4293      	cmp	r3, r2
 8104b4c:	d00e      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	681b      	ldr	r3, [r3, #0]
 8104b52:	4a30      	ldr	r2, [pc, #192]	; (8104c14 <DMA_CalcBaseAndBitshift+0x150>)
 8104b54:	4293      	cmp	r3, r2
 8104b56:	d009      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b58:	687b      	ldr	r3, [r7, #4]
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	4a2e      	ldr	r2, [pc, #184]	; (8104c18 <DMA_CalcBaseAndBitshift+0x154>)
 8104b5e:	4293      	cmp	r3, r2
 8104b60:	d004      	beq.n	8104b6c <DMA_CalcBaseAndBitshift+0xa8>
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	4a2d      	ldr	r2, [pc, #180]	; (8104c1c <DMA_CalcBaseAndBitshift+0x158>)
 8104b68:	4293      	cmp	r3, r2
 8104b6a:	d101      	bne.n	8104b70 <DMA_CalcBaseAndBitshift+0xac>
 8104b6c:	2301      	movs	r3, #1
 8104b6e:	e000      	b.n	8104b72 <DMA_CalcBaseAndBitshift+0xae>
 8104b70:	2300      	movs	r3, #0
 8104b72:	2b00      	cmp	r3, #0
 8104b74:	d026      	beq.n	8104bc4 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	b2db      	uxtb	r3, r3
 8104b7c:	3b10      	subs	r3, #16
 8104b7e:	4a28      	ldr	r2, [pc, #160]	; (8104c20 <DMA_CalcBaseAndBitshift+0x15c>)
 8104b80:	fba2 2303 	umull	r2, r3, r2, r3
 8104b84:	091b      	lsrs	r3, r3, #4
 8104b86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8104b88:	68fb      	ldr	r3, [r7, #12]
 8104b8a:	f003 0307 	and.w	r3, r3, #7
 8104b8e:	4a25      	ldr	r2, [pc, #148]	; (8104c24 <DMA_CalcBaseAndBitshift+0x160>)
 8104b90:	5cd3      	ldrb	r3, [r2, r3]
 8104b92:	461a      	mov	r2, r3
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8104b98:	68fb      	ldr	r3, [r7, #12]
 8104b9a:	2b03      	cmp	r3, #3
 8104b9c:	d909      	bls.n	8104bb2 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104ba6:	f023 0303 	bic.w	r3, r3, #3
 8104baa:	1d1a      	adds	r2, r3, #4
 8104bac:	687b      	ldr	r3, [r7, #4]
 8104bae:	659a      	str	r2, [r3, #88]	; 0x58
 8104bb0:	e00e      	b.n	8104bd0 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104bb2:	687b      	ldr	r3, [r7, #4]
 8104bb4:	681b      	ldr	r3, [r3, #0]
 8104bb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8104bba:	f023 0303 	bic.w	r3, r3, #3
 8104bbe:	687a      	ldr	r2, [r7, #4]
 8104bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8104bc2:	e005      	b.n	8104bd0 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104bc4:	687b      	ldr	r3, [r7, #4]
 8104bc6:	681b      	ldr	r3, [r3, #0]
 8104bc8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104bd0:	687b      	ldr	r3, [r7, #4]
 8104bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104bd4:	4618      	mov	r0, r3
 8104bd6:	3714      	adds	r7, #20
 8104bd8:	46bd      	mov	sp, r7
 8104bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bde:	4770      	bx	lr
 8104be0:	40020010 	.word	0x40020010
 8104be4:	40020028 	.word	0x40020028
 8104be8:	40020040 	.word	0x40020040
 8104bec:	40020058 	.word	0x40020058
 8104bf0:	40020070 	.word	0x40020070
 8104bf4:	40020088 	.word	0x40020088
 8104bf8:	400200a0 	.word	0x400200a0
 8104bfc:	400200b8 	.word	0x400200b8
 8104c00:	40020410 	.word	0x40020410
 8104c04:	40020428 	.word	0x40020428
 8104c08:	40020440 	.word	0x40020440
 8104c0c:	40020458 	.word	0x40020458
 8104c10:	40020470 	.word	0x40020470
 8104c14:	40020488 	.word	0x40020488
 8104c18:	400204a0 	.word	0x400204a0
 8104c1c:	400204b8 	.word	0x400204b8
 8104c20:	aaaaaaab 	.word	0xaaaaaaab
 8104c24:	0810dc8c 	.word	0x0810dc8c

08104c28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8104c28:	b480      	push	{r7}
 8104c2a:	b085      	sub	sp, #20
 8104c2c:	af00      	add	r7, sp, #0
 8104c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8104c30:	2300      	movs	r3, #0
 8104c32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8104c34:	687b      	ldr	r3, [r7, #4]
 8104c36:	699b      	ldr	r3, [r3, #24]
 8104c38:	2b00      	cmp	r3, #0
 8104c3a:	d120      	bne.n	8104c7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104c40:	2b03      	cmp	r3, #3
 8104c42:	d858      	bhi.n	8104cf6 <DMA_CheckFifoParam+0xce>
 8104c44:	a201      	add	r2, pc, #4	; (adr r2, 8104c4c <DMA_CheckFifoParam+0x24>)
 8104c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c4a:	bf00      	nop
 8104c4c:	08104c5d 	.word	0x08104c5d
 8104c50:	08104c6f 	.word	0x08104c6f
 8104c54:	08104c5d 	.word	0x08104c5d
 8104c58:	08104cf7 	.word	0x08104cf7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104c64:	2b00      	cmp	r3, #0
 8104c66:	d048      	beq.n	8104cfa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8104c68:	2301      	movs	r3, #1
 8104c6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104c6c:	e045      	b.n	8104cfa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104c76:	d142      	bne.n	8104cfe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8104c78:	2301      	movs	r3, #1
 8104c7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104c7c:	e03f      	b.n	8104cfe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	699b      	ldr	r3, [r3, #24]
 8104c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c86:	d123      	bne.n	8104cd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8104c88:	687b      	ldr	r3, [r7, #4]
 8104c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104c8c:	2b03      	cmp	r3, #3
 8104c8e:	d838      	bhi.n	8104d02 <DMA_CheckFifoParam+0xda>
 8104c90:	a201      	add	r2, pc, #4	; (adr r2, 8104c98 <DMA_CheckFifoParam+0x70>)
 8104c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c96:	bf00      	nop
 8104c98:	08104ca9 	.word	0x08104ca9
 8104c9c:	08104caf 	.word	0x08104caf
 8104ca0:	08104ca9 	.word	0x08104ca9
 8104ca4:	08104cc1 	.word	0x08104cc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8104ca8:	2301      	movs	r3, #1
 8104caa:	73fb      	strb	r3, [r7, #15]
        break;
 8104cac:	e030      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104cb6:	2b00      	cmp	r3, #0
 8104cb8:	d025      	beq.n	8104d06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8104cba:	2301      	movs	r3, #1
 8104cbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104cbe:	e022      	b.n	8104d06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104cc0:	687b      	ldr	r3, [r7, #4]
 8104cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104cc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8104cc8:	d11f      	bne.n	8104d0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8104cca:	2301      	movs	r3, #1
 8104ccc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104cce:	e01c      	b.n	8104d0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104cd4:	2b02      	cmp	r3, #2
 8104cd6:	d902      	bls.n	8104cde <DMA_CheckFifoParam+0xb6>
 8104cd8:	2b03      	cmp	r3, #3
 8104cda:	d003      	beq.n	8104ce4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104cdc:	e018      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104cde:	2301      	movs	r3, #1
 8104ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8104ce2:	e015      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104ce4:	687b      	ldr	r3, [r7, #4]
 8104ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ce8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104cec:	2b00      	cmp	r3, #0
 8104cee:	d00e      	beq.n	8104d0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104cf0:	2301      	movs	r3, #1
 8104cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8104cf4:	e00b      	b.n	8104d0e <DMA_CheckFifoParam+0xe6>
        break;
 8104cf6:	bf00      	nop
 8104cf8:	e00a      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
        break;
 8104cfa:	bf00      	nop
 8104cfc:	e008      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
        break;
 8104cfe:	bf00      	nop
 8104d00:	e006      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
        break;
 8104d02:	bf00      	nop
 8104d04:	e004      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
        break;
 8104d06:	bf00      	nop
 8104d08:	e002      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
        break;
 8104d0a:	bf00      	nop
 8104d0c:	e000      	b.n	8104d10 <DMA_CheckFifoParam+0xe8>
    break;
 8104d0e:	bf00      	nop
    }
  }

  return status;
 8104d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8104d12:	4618      	mov	r0, r3
 8104d14:	3714      	adds	r7, #20
 8104d16:	46bd      	mov	sp, r7
 8104d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d1c:	4770      	bx	lr
 8104d1e:	bf00      	nop

08104d20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104d20:	b480      	push	{r7}
 8104d22:	b085      	sub	sp, #20
 8104d24:	af00      	add	r7, sp, #0
 8104d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	681b      	ldr	r3, [r3, #0]
 8104d32:	4a3a      	ldr	r2, [pc, #232]	; (8104e1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8104d34:	4293      	cmp	r3, r2
 8104d36:	d022      	beq.n	8104d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	681b      	ldr	r3, [r3, #0]
 8104d3c:	4a38      	ldr	r2, [pc, #224]	; (8104e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8104d3e:	4293      	cmp	r3, r2
 8104d40:	d01d      	beq.n	8104d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	4a37      	ldr	r2, [pc, #220]	; (8104e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8104d48:	4293      	cmp	r3, r2
 8104d4a:	d018      	beq.n	8104d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	681b      	ldr	r3, [r3, #0]
 8104d50:	4a35      	ldr	r2, [pc, #212]	; (8104e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8104d52:	4293      	cmp	r3, r2
 8104d54:	d013      	beq.n	8104d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	681b      	ldr	r3, [r3, #0]
 8104d5a:	4a34      	ldr	r2, [pc, #208]	; (8104e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8104d5c:	4293      	cmp	r3, r2
 8104d5e:	d00e      	beq.n	8104d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104d60:	687b      	ldr	r3, [r7, #4]
 8104d62:	681b      	ldr	r3, [r3, #0]
 8104d64:	4a32      	ldr	r2, [pc, #200]	; (8104e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8104d66:	4293      	cmp	r3, r2
 8104d68:	d009      	beq.n	8104d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	4a31      	ldr	r2, [pc, #196]	; (8104e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8104d70:	4293      	cmp	r3, r2
 8104d72:	d004      	beq.n	8104d7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	681b      	ldr	r3, [r3, #0]
 8104d78:	4a2f      	ldr	r2, [pc, #188]	; (8104e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8104d7a:	4293      	cmp	r3, r2
 8104d7c:	d101      	bne.n	8104d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104d7e:	2301      	movs	r3, #1
 8104d80:	e000      	b.n	8104d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104d82:	2300      	movs	r3, #0
 8104d84:	2b00      	cmp	r3, #0
 8104d86:	d01c      	beq.n	8104dc2 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8104d88:	687b      	ldr	r3, [r7, #4]
 8104d8a:	681b      	ldr	r3, [r3, #0]
 8104d8c:	b2db      	uxtb	r3, r3
 8104d8e:	3b08      	subs	r3, #8
 8104d90:	4a2a      	ldr	r2, [pc, #168]	; (8104e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104d92:	fba2 2303 	umull	r2, r3, r2, r3
 8104d96:	091b      	lsrs	r3, r3, #4
 8104d98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104da0:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104da4:	009b      	lsls	r3, r3, #2
 8104da6:	461a      	mov	r2, r3
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	4a24      	ldr	r2, [pc, #144]	; (8104e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104db0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104db2:	68fb      	ldr	r3, [r7, #12]
 8104db4:	f003 031f 	and.w	r3, r3, #31
 8104db8:	2201      	movs	r2, #1
 8104dba:	409a      	lsls	r2, r3
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104dc0:	e026      	b.n	8104e10 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104dc2:	687b      	ldr	r3, [r7, #4]
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	b2db      	uxtb	r3, r3
 8104dc8:	3b10      	subs	r3, #16
 8104dca:	4a1e      	ldr	r2, [pc, #120]	; (8104e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8104dd0:	091b      	lsrs	r3, r3, #4
 8104dd2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104dd4:	68bb      	ldr	r3, [r7, #8]
 8104dd6:	4a1c      	ldr	r2, [pc, #112]	; (8104e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8104dd8:	4293      	cmp	r3, r2
 8104dda:	d806      	bhi.n	8104dea <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104ddc:	68bb      	ldr	r3, [r7, #8]
 8104dde:	4a1b      	ldr	r2, [pc, #108]	; (8104e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104de0:	4293      	cmp	r3, r2
 8104de2:	d902      	bls.n	8104dea <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104de4:	68fb      	ldr	r3, [r7, #12]
 8104de6:	3308      	adds	r3, #8
 8104de8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8104dea:	68fb      	ldr	r3, [r7, #12]
 8104dec:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104df0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104df4:	009b      	lsls	r3, r3, #2
 8104df6:	461a      	mov	r2, r3
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	4a14      	ldr	r2, [pc, #80]	; (8104e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104e00:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104e02:	68fb      	ldr	r3, [r7, #12]
 8104e04:	f003 031f 	and.w	r3, r3, #31
 8104e08:	2201      	movs	r2, #1
 8104e0a:	409a      	lsls	r2, r3
 8104e0c:	687b      	ldr	r3, [r7, #4]
 8104e0e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8104e10:	bf00      	nop
 8104e12:	3714      	adds	r7, #20
 8104e14:	46bd      	mov	sp, r7
 8104e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e1a:	4770      	bx	lr
 8104e1c:	58025408 	.word	0x58025408
 8104e20:	5802541c 	.word	0x5802541c
 8104e24:	58025430 	.word	0x58025430
 8104e28:	58025444 	.word	0x58025444
 8104e2c:	58025458 	.word	0x58025458
 8104e30:	5802546c 	.word	0x5802546c
 8104e34:	58025480 	.word	0x58025480
 8104e38:	58025494 	.word	0x58025494
 8104e3c:	cccccccd 	.word	0xcccccccd
 8104e40:	58025880 	.word	0x58025880
 8104e44:	aaaaaaab 	.word	0xaaaaaaab
 8104e48:	400204b8 	.word	0x400204b8
 8104e4c:	4002040f 	.word	0x4002040f
 8104e50:	40020880 	.word	0x40020880

08104e54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8104e54:	b480      	push	{r7}
 8104e56:	b085      	sub	sp, #20
 8104e58:	af00      	add	r7, sp, #0
 8104e5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8104e5c:	687b      	ldr	r3, [r7, #4]
 8104e5e:	685b      	ldr	r3, [r3, #4]
 8104e60:	b2db      	uxtb	r3, r3
 8104e62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8104e64:	68fb      	ldr	r3, [r7, #12]
 8104e66:	2b00      	cmp	r3, #0
 8104e68:	d04a      	beq.n	8104f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8104e6a:	68fb      	ldr	r3, [r7, #12]
 8104e6c:	2b08      	cmp	r3, #8
 8104e6e:	d847      	bhi.n	8104f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	4a25      	ldr	r2, [pc, #148]	; (8104f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8104e76:	4293      	cmp	r3, r2
 8104e78:	d022      	beq.n	8104ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	4a24      	ldr	r2, [pc, #144]	; (8104f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104e80:	4293      	cmp	r3, r2
 8104e82:	d01d      	beq.n	8104ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104e84:	687b      	ldr	r3, [r7, #4]
 8104e86:	681b      	ldr	r3, [r3, #0]
 8104e88:	4a22      	ldr	r2, [pc, #136]	; (8104f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8104e8a:	4293      	cmp	r3, r2
 8104e8c:	d018      	beq.n	8104ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	681b      	ldr	r3, [r3, #0]
 8104e92:	4a21      	ldr	r2, [pc, #132]	; (8104f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104e94:	4293      	cmp	r3, r2
 8104e96:	d013      	beq.n	8104ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	4a1f      	ldr	r2, [pc, #124]	; (8104f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104e9e:	4293      	cmp	r3, r2
 8104ea0:	d00e      	beq.n	8104ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104ea2:	687b      	ldr	r3, [r7, #4]
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	4a1e      	ldr	r2, [pc, #120]	; (8104f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8104ea8:	4293      	cmp	r3, r2
 8104eaa:	d009      	beq.n	8104ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	4a1c      	ldr	r2, [pc, #112]	; (8104f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104eb2:	4293      	cmp	r3, r2
 8104eb4:	d004      	beq.n	8104ec0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104eb6:	687b      	ldr	r3, [r7, #4]
 8104eb8:	681b      	ldr	r3, [r3, #0]
 8104eba:	4a1b      	ldr	r2, [pc, #108]	; (8104f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104ebc:	4293      	cmp	r3, r2
 8104ebe:	d101      	bne.n	8104ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104ec0:	2301      	movs	r3, #1
 8104ec2:	e000      	b.n	8104ec6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104ec4:	2300      	movs	r3, #0
 8104ec6:	2b00      	cmp	r3, #0
 8104ec8:	d00a      	beq.n	8104ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8104eca:	68fa      	ldr	r2, [r7, #12]
 8104ecc:	4b17      	ldr	r3, [pc, #92]	; (8104f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104ece:	4413      	add	r3, r2
 8104ed0:	009b      	lsls	r3, r3, #2
 8104ed2:	461a      	mov	r2, r3
 8104ed4:	687b      	ldr	r3, [r7, #4]
 8104ed6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	4a15      	ldr	r2, [pc, #84]	; (8104f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104edc:	671a      	str	r2, [r3, #112]	; 0x70
 8104ede:	e009      	b.n	8104ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104ee0:	68fa      	ldr	r2, [r7, #12]
 8104ee2:	4b14      	ldr	r3, [pc, #80]	; (8104f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104ee4:	4413      	add	r3, r2
 8104ee6:	009b      	lsls	r3, r3, #2
 8104ee8:	461a      	mov	r2, r3
 8104eea:	687b      	ldr	r3, [r7, #4]
 8104eec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104eee:	687b      	ldr	r3, [r7, #4]
 8104ef0:	4a11      	ldr	r2, [pc, #68]	; (8104f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104ef2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	3b01      	subs	r3, #1
 8104ef8:	2201      	movs	r2, #1
 8104efa:	409a      	lsls	r2, r3
 8104efc:	687b      	ldr	r3, [r7, #4]
 8104efe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104f00:	bf00      	nop
 8104f02:	3714      	adds	r7, #20
 8104f04:	46bd      	mov	sp, r7
 8104f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f0a:	4770      	bx	lr
 8104f0c:	58025408 	.word	0x58025408
 8104f10:	5802541c 	.word	0x5802541c
 8104f14:	58025430 	.word	0x58025430
 8104f18:	58025444 	.word	0x58025444
 8104f1c:	58025458 	.word	0x58025458
 8104f20:	5802546c 	.word	0x5802546c
 8104f24:	58025480 	.word	0x58025480
 8104f28:	58025494 	.word	0x58025494
 8104f2c:	1600963f 	.word	0x1600963f
 8104f30:	58025940 	.word	0x58025940
 8104f34:	1000823f 	.word	0x1000823f
 8104f38:	40020940 	.word	0x40020940

08104f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8104f3c:	b480      	push	{r7}
 8104f3e:	b089      	sub	sp, #36	; 0x24
 8104f40:	af00      	add	r7, sp, #0
 8104f42:	6078      	str	r0, [r7, #4]
 8104f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104f46:	2300      	movs	r3, #0
 8104f48:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104f4a:	4b89      	ldr	r3, [pc, #548]	; (8105170 <HAL_GPIO_Init+0x234>)
 8104f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104f4e:	e194      	b.n	810527a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104f50:	683b      	ldr	r3, [r7, #0]
 8104f52:	681a      	ldr	r2, [r3, #0]
 8104f54:	2101      	movs	r1, #1
 8104f56:	69fb      	ldr	r3, [r7, #28]
 8104f58:	fa01 f303 	lsl.w	r3, r1, r3
 8104f5c:	4013      	ands	r3, r2
 8104f5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104f60:	693b      	ldr	r3, [r7, #16]
 8104f62:	2b00      	cmp	r3, #0
 8104f64:	f000 8186 	beq.w	8105274 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104f68:	683b      	ldr	r3, [r7, #0]
 8104f6a:	685b      	ldr	r3, [r3, #4]
 8104f6c:	2b01      	cmp	r3, #1
 8104f6e:	d00b      	beq.n	8104f88 <HAL_GPIO_Init+0x4c>
 8104f70:	683b      	ldr	r3, [r7, #0]
 8104f72:	685b      	ldr	r3, [r3, #4]
 8104f74:	2b02      	cmp	r3, #2
 8104f76:	d007      	beq.n	8104f88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104f78:	683b      	ldr	r3, [r7, #0]
 8104f7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104f7c:	2b11      	cmp	r3, #17
 8104f7e:	d003      	beq.n	8104f88 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104f80:	683b      	ldr	r3, [r7, #0]
 8104f82:	685b      	ldr	r3, [r3, #4]
 8104f84:	2b12      	cmp	r3, #18
 8104f86:	d130      	bne.n	8104fea <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104f88:	687b      	ldr	r3, [r7, #4]
 8104f8a:	689b      	ldr	r3, [r3, #8]
 8104f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104f8e:	69fb      	ldr	r3, [r7, #28]
 8104f90:	005b      	lsls	r3, r3, #1
 8104f92:	2203      	movs	r2, #3
 8104f94:	fa02 f303 	lsl.w	r3, r2, r3
 8104f98:	43db      	mvns	r3, r3
 8104f9a:	69ba      	ldr	r2, [r7, #24]
 8104f9c:	4013      	ands	r3, r2
 8104f9e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104fa0:	683b      	ldr	r3, [r7, #0]
 8104fa2:	68da      	ldr	r2, [r3, #12]
 8104fa4:	69fb      	ldr	r3, [r7, #28]
 8104fa6:	005b      	lsls	r3, r3, #1
 8104fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8104fac:	69ba      	ldr	r2, [r7, #24]
 8104fae:	4313      	orrs	r3, r2
 8104fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104fb2:	687b      	ldr	r3, [r7, #4]
 8104fb4:	69ba      	ldr	r2, [r7, #24]
 8104fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104fb8:	687b      	ldr	r3, [r7, #4]
 8104fba:	685b      	ldr	r3, [r3, #4]
 8104fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104fbe:	2201      	movs	r2, #1
 8104fc0:	69fb      	ldr	r3, [r7, #28]
 8104fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8104fc6:	43db      	mvns	r3, r3
 8104fc8:	69ba      	ldr	r2, [r7, #24]
 8104fca:	4013      	ands	r3, r2
 8104fcc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104fce:	683b      	ldr	r3, [r7, #0]
 8104fd0:	685b      	ldr	r3, [r3, #4]
 8104fd2:	091b      	lsrs	r3, r3, #4
 8104fd4:	f003 0201 	and.w	r2, r3, #1
 8104fd8:	69fb      	ldr	r3, [r7, #28]
 8104fda:	fa02 f303 	lsl.w	r3, r2, r3
 8104fde:	69ba      	ldr	r2, [r7, #24]
 8104fe0:	4313      	orrs	r3, r2
 8104fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	69ba      	ldr	r2, [r7, #24]
 8104fe8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104fea:	687b      	ldr	r3, [r7, #4]
 8104fec:	68db      	ldr	r3, [r3, #12]
 8104fee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104ff0:	69fb      	ldr	r3, [r7, #28]
 8104ff2:	005b      	lsls	r3, r3, #1
 8104ff4:	2203      	movs	r2, #3
 8104ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8104ffa:	43db      	mvns	r3, r3
 8104ffc:	69ba      	ldr	r2, [r7, #24]
 8104ffe:	4013      	ands	r3, r2
 8105000:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105002:	683b      	ldr	r3, [r7, #0]
 8105004:	689a      	ldr	r2, [r3, #8]
 8105006:	69fb      	ldr	r3, [r7, #28]
 8105008:	005b      	lsls	r3, r3, #1
 810500a:	fa02 f303 	lsl.w	r3, r2, r3
 810500e:	69ba      	ldr	r2, [r7, #24]
 8105010:	4313      	orrs	r3, r2
 8105012:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	69ba      	ldr	r2, [r7, #24]
 8105018:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810501a:	683b      	ldr	r3, [r7, #0]
 810501c:	685b      	ldr	r3, [r3, #4]
 810501e:	2b02      	cmp	r3, #2
 8105020:	d003      	beq.n	810502a <HAL_GPIO_Init+0xee>
 8105022:	683b      	ldr	r3, [r7, #0]
 8105024:	685b      	ldr	r3, [r3, #4]
 8105026:	2b12      	cmp	r3, #18
 8105028:	d123      	bne.n	8105072 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810502a:	69fb      	ldr	r3, [r7, #28]
 810502c:	08da      	lsrs	r2, r3, #3
 810502e:	687b      	ldr	r3, [r7, #4]
 8105030:	3208      	adds	r2, #8
 8105032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105038:	69fb      	ldr	r3, [r7, #28]
 810503a:	f003 0307 	and.w	r3, r3, #7
 810503e:	009b      	lsls	r3, r3, #2
 8105040:	220f      	movs	r2, #15
 8105042:	fa02 f303 	lsl.w	r3, r2, r3
 8105046:	43db      	mvns	r3, r3
 8105048:	69ba      	ldr	r2, [r7, #24]
 810504a:	4013      	ands	r3, r2
 810504c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810504e:	683b      	ldr	r3, [r7, #0]
 8105050:	691a      	ldr	r2, [r3, #16]
 8105052:	69fb      	ldr	r3, [r7, #28]
 8105054:	f003 0307 	and.w	r3, r3, #7
 8105058:	009b      	lsls	r3, r3, #2
 810505a:	fa02 f303 	lsl.w	r3, r2, r3
 810505e:	69ba      	ldr	r2, [r7, #24]
 8105060:	4313      	orrs	r3, r2
 8105062:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105064:	69fb      	ldr	r3, [r7, #28]
 8105066:	08da      	lsrs	r2, r3, #3
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	3208      	adds	r2, #8
 810506c:	69b9      	ldr	r1, [r7, #24]
 810506e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105078:	69fb      	ldr	r3, [r7, #28]
 810507a:	005b      	lsls	r3, r3, #1
 810507c:	2203      	movs	r2, #3
 810507e:	fa02 f303 	lsl.w	r3, r2, r3
 8105082:	43db      	mvns	r3, r3
 8105084:	69ba      	ldr	r2, [r7, #24]
 8105086:	4013      	ands	r3, r2
 8105088:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810508a:	683b      	ldr	r3, [r7, #0]
 810508c:	685b      	ldr	r3, [r3, #4]
 810508e:	f003 0203 	and.w	r2, r3, #3
 8105092:	69fb      	ldr	r3, [r7, #28]
 8105094:	005b      	lsls	r3, r3, #1
 8105096:	fa02 f303 	lsl.w	r3, r2, r3
 810509a:	69ba      	ldr	r2, [r7, #24]
 810509c:	4313      	orrs	r3, r2
 810509e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	69ba      	ldr	r2, [r7, #24]
 81050a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 81050a6:	683b      	ldr	r3, [r7, #0]
 81050a8:	685b      	ldr	r3, [r3, #4]
 81050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81050ae:	2b00      	cmp	r3, #0
 81050b0:	f000 80e0 	beq.w	8105274 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81050b4:	4b2f      	ldr	r3, [pc, #188]	; (8105174 <HAL_GPIO_Init+0x238>)
 81050b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81050ba:	4a2e      	ldr	r2, [pc, #184]	; (8105174 <HAL_GPIO_Init+0x238>)
 81050bc:	f043 0302 	orr.w	r3, r3, #2
 81050c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81050c4:	4b2b      	ldr	r3, [pc, #172]	; (8105174 <HAL_GPIO_Init+0x238>)
 81050c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81050ca:	f003 0302 	and.w	r3, r3, #2
 81050ce:	60fb      	str	r3, [r7, #12]
 81050d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81050d2:	4a29      	ldr	r2, [pc, #164]	; (8105178 <HAL_GPIO_Init+0x23c>)
 81050d4:	69fb      	ldr	r3, [r7, #28]
 81050d6:	089b      	lsrs	r3, r3, #2
 81050d8:	3302      	adds	r3, #2
 81050da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81050de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81050e0:	69fb      	ldr	r3, [r7, #28]
 81050e2:	f003 0303 	and.w	r3, r3, #3
 81050e6:	009b      	lsls	r3, r3, #2
 81050e8:	220f      	movs	r2, #15
 81050ea:	fa02 f303 	lsl.w	r3, r2, r3
 81050ee:	43db      	mvns	r3, r3
 81050f0:	69ba      	ldr	r2, [r7, #24]
 81050f2:	4013      	ands	r3, r2
 81050f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	4a20      	ldr	r2, [pc, #128]	; (810517c <HAL_GPIO_Init+0x240>)
 81050fa:	4293      	cmp	r3, r2
 81050fc:	d052      	beq.n	81051a4 <HAL_GPIO_Init+0x268>
 81050fe:	687b      	ldr	r3, [r7, #4]
 8105100:	4a1f      	ldr	r2, [pc, #124]	; (8105180 <HAL_GPIO_Init+0x244>)
 8105102:	4293      	cmp	r3, r2
 8105104:	d031      	beq.n	810516a <HAL_GPIO_Init+0x22e>
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	4a1e      	ldr	r2, [pc, #120]	; (8105184 <HAL_GPIO_Init+0x248>)
 810510a:	4293      	cmp	r3, r2
 810510c:	d02b      	beq.n	8105166 <HAL_GPIO_Init+0x22a>
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	4a1d      	ldr	r2, [pc, #116]	; (8105188 <HAL_GPIO_Init+0x24c>)
 8105112:	4293      	cmp	r3, r2
 8105114:	d025      	beq.n	8105162 <HAL_GPIO_Init+0x226>
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	4a1c      	ldr	r2, [pc, #112]	; (810518c <HAL_GPIO_Init+0x250>)
 810511a:	4293      	cmp	r3, r2
 810511c:	d01f      	beq.n	810515e <HAL_GPIO_Init+0x222>
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	4a1b      	ldr	r2, [pc, #108]	; (8105190 <HAL_GPIO_Init+0x254>)
 8105122:	4293      	cmp	r3, r2
 8105124:	d019      	beq.n	810515a <HAL_GPIO_Init+0x21e>
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	4a1a      	ldr	r2, [pc, #104]	; (8105194 <HAL_GPIO_Init+0x258>)
 810512a:	4293      	cmp	r3, r2
 810512c:	d013      	beq.n	8105156 <HAL_GPIO_Init+0x21a>
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	4a19      	ldr	r2, [pc, #100]	; (8105198 <HAL_GPIO_Init+0x25c>)
 8105132:	4293      	cmp	r3, r2
 8105134:	d00d      	beq.n	8105152 <HAL_GPIO_Init+0x216>
 8105136:	687b      	ldr	r3, [r7, #4]
 8105138:	4a18      	ldr	r2, [pc, #96]	; (810519c <HAL_GPIO_Init+0x260>)
 810513a:	4293      	cmp	r3, r2
 810513c:	d007      	beq.n	810514e <HAL_GPIO_Init+0x212>
 810513e:	687b      	ldr	r3, [r7, #4]
 8105140:	4a17      	ldr	r2, [pc, #92]	; (81051a0 <HAL_GPIO_Init+0x264>)
 8105142:	4293      	cmp	r3, r2
 8105144:	d101      	bne.n	810514a <HAL_GPIO_Init+0x20e>
 8105146:	2309      	movs	r3, #9
 8105148:	e02d      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 810514a:	230a      	movs	r3, #10
 810514c:	e02b      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 810514e:	2308      	movs	r3, #8
 8105150:	e029      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 8105152:	2307      	movs	r3, #7
 8105154:	e027      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 8105156:	2306      	movs	r3, #6
 8105158:	e025      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 810515a:	2305      	movs	r3, #5
 810515c:	e023      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 810515e:	2304      	movs	r3, #4
 8105160:	e021      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 8105162:	2303      	movs	r3, #3
 8105164:	e01f      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 8105166:	2302      	movs	r3, #2
 8105168:	e01d      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 810516a:	2301      	movs	r3, #1
 810516c:	e01b      	b.n	81051a6 <HAL_GPIO_Init+0x26a>
 810516e:	bf00      	nop
 8105170:	580000c0 	.word	0x580000c0
 8105174:	58024400 	.word	0x58024400
 8105178:	58000400 	.word	0x58000400
 810517c:	58020000 	.word	0x58020000
 8105180:	58020400 	.word	0x58020400
 8105184:	58020800 	.word	0x58020800
 8105188:	58020c00 	.word	0x58020c00
 810518c:	58021000 	.word	0x58021000
 8105190:	58021400 	.word	0x58021400
 8105194:	58021800 	.word	0x58021800
 8105198:	58021c00 	.word	0x58021c00
 810519c:	58022000 	.word	0x58022000
 81051a0:	58022400 	.word	0x58022400
 81051a4:	2300      	movs	r3, #0
 81051a6:	69fa      	ldr	r2, [r7, #28]
 81051a8:	f002 0203 	and.w	r2, r2, #3
 81051ac:	0092      	lsls	r2, r2, #2
 81051ae:	4093      	lsls	r3, r2
 81051b0:	69ba      	ldr	r2, [r7, #24]
 81051b2:	4313      	orrs	r3, r2
 81051b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81051b6:	4938      	ldr	r1, [pc, #224]	; (8105298 <HAL_GPIO_Init+0x35c>)
 81051b8:	69fb      	ldr	r3, [r7, #28]
 81051ba:	089b      	lsrs	r3, r3, #2
 81051bc:	3302      	adds	r3, #2
 81051be:	69ba      	ldr	r2, [r7, #24]
 81051c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81051c4:	697b      	ldr	r3, [r7, #20]
 81051c6:	681b      	ldr	r3, [r3, #0]
 81051c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81051ca:	693b      	ldr	r3, [r7, #16]
 81051cc:	43db      	mvns	r3, r3
 81051ce:	69ba      	ldr	r2, [r7, #24]
 81051d0:	4013      	ands	r3, r2
 81051d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81051d4:	683b      	ldr	r3, [r7, #0]
 81051d6:	685b      	ldr	r3, [r3, #4]
 81051d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81051dc:	2b00      	cmp	r3, #0
 81051de:	d003      	beq.n	81051e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81051e0:	69ba      	ldr	r2, [r7, #24]
 81051e2:	693b      	ldr	r3, [r7, #16]
 81051e4:	4313      	orrs	r3, r2
 81051e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81051e8:	697b      	ldr	r3, [r7, #20]
 81051ea:	69ba      	ldr	r2, [r7, #24]
 81051ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81051ee:	697b      	ldr	r3, [r7, #20]
 81051f0:	685b      	ldr	r3, [r3, #4]
 81051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81051f4:	693b      	ldr	r3, [r7, #16]
 81051f6:	43db      	mvns	r3, r3
 81051f8:	69ba      	ldr	r2, [r7, #24]
 81051fa:	4013      	ands	r3, r2
 81051fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81051fe:	683b      	ldr	r3, [r7, #0]
 8105200:	685b      	ldr	r3, [r3, #4]
 8105202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105206:	2b00      	cmp	r3, #0
 8105208:	d003      	beq.n	8105212 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810520a:	69ba      	ldr	r2, [r7, #24]
 810520c:	693b      	ldr	r3, [r7, #16]
 810520e:	4313      	orrs	r3, r2
 8105210:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105212:	697b      	ldr	r3, [r7, #20]
 8105214:	69ba      	ldr	r2, [r7, #24]
 8105216:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810521c:	681b      	ldr	r3, [r3, #0]
 810521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105220:	693b      	ldr	r3, [r7, #16]
 8105222:	43db      	mvns	r3, r3
 8105224:	69ba      	ldr	r2, [r7, #24]
 8105226:	4013      	ands	r3, r2
 8105228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810522a:	683b      	ldr	r3, [r7, #0]
 810522c:	685b      	ldr	r3, [r3, #4]
 810522e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105232:	2b00      	cmp	r3, #0
 8105234:	d003      	beq.n	810523e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8105236:	69ba      	ldr	r2, [r7, #24]
 8105238:	693b      	ldr	r3, [r7, #16]
 810523a:	4313      	orrs	r3, r2
 810523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810523e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105242:	69bb      	ldr	r3, [r7, #24]
 8105244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810524a:	685b      	ldr	r3, [r3, #4]
 810524c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810524e:	693b      	ldr	r3, [r7, #16]
 8105250:	43db      	mvns	r3, r3
 8105252:	69ba      	ldr	r2, [r7, #24]
 8105254:	4013      	ands	r3, r2
 8105256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8105258:	683b      	ldr	r3, [r7, #0]
 810525a:	685b      	ldr	r3, [r3, #4]
 810525c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105260:	2b00      	cmp	r3, #0
 8105262:	d003      	beq.n	810526c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8105264:	69ba      	ldr	r2, [r7, #24]
 8105266:	693b      	ldr	r3, [r7, #16]
 8105268:	4313      	orrs	r3, r2
 810526a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810526c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105270:	69bb      	ldr	r3, [r7, #24]
 8105272:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8105274:	69fb      	ldr	r3, [r7, #28]
 8105276:	3301      	adds	r3, #1
 8105278:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810527a:	683b      	ldr	r3, [r7, #0]
 810527c:	681a      	ldr	r2, [r3, #0]
 810527e:	69fb      	ldr	r3, [r7, #28]
 8105280:	fa22 f303 	lsr.w	r3, r2, r3
 8105284:	2b00      	cmp	r3, #0
 8105286:	f47f ae63 	bne.w	8104f50 <HAL_GPIO_Init+0x14>
  }
}
 810528a:	bf00      	nop
 810528c:	3724      	adds	r7, #36	; 0x24
 810528e:	46bd      	mov	sp, r7
 8105290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105294:	4770      	bx	lr
 8105296:	bf00      	nop
 8105298:	58000400 	.word	0x58000400

0810529c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810529c:	b480      	push	{r7}
 810529e:	b083      	sub	sp, #12
 81052a0:	af00      	add	r7, sp, #0
 81052a2:	6078      	str	r0, [r7, #4]
 81052a4:	460b      	mov	r3, r1
 81052a6:	807b      	strh	r3, [r7, #2]
 81052a8:	4613      	mov	r3, r2
 81052aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81052ac:	787b      	ldrb	r3, [r7, #1]
 81052ae:	2b00      	cmp	r3, #0
 81052b0:	d003      	beq.n	81052ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81052b2:	887a      	ldrh	r2, [r7, #2]
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81052b8:	e003      	b.n	81052c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81052ba:	887b      	ldrh	r3, [r7, #2]
 81052bc:	041a      	lsls	r2, r3, #16
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	619a      	str	r2, [r3, #24]
}
 81052c2:	bf00      	nop
 81052c4:	370c      	adds	r7, #12
 81052c6:	46bd      	mov	sp, r7
 81052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052cc:	4770      	bx	lr
	...

081052d0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81052d0:	b480      	push	{r7}
 81052d2:	b083      	sub	sp, #12
 81052d4:	af00      	add	r7, sp, #0
 81052d6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81052d8:	4b05      	ldr	r3, [pc, #20]	; (81052f0 <HAL_HSEM_ActivateNotification+0x20>)
 81052da:	681a      	ldr	r2, [r3, #0]
 81052dc:	4904      	ldr	r1, [pc, #16]	; (81052f0 <HAL_HSEM_ActivateNotification+0x20>)
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	4313      	orrs	r3, r2
 81052e2:	600b      	str	r3, [r1, #0]
#endif
}
 81052e4:	bf00      	nop
 81052e6:	370c      	adds	r7, #12
 81052e8:	46bd      	mov	sp, r7
 81052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81052ee:	4770      	bx	lr
 81052f0:	58026510 	.word	0x58026510

081052f4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 81052f4:	b580      	push	{r7, lr}
 81052f6:	b082      	sub	sp, #8
 81052f8:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 81052fa:	4b0a      	ldr	r3, [pc, #40]	; (8105324 <HAL_HSEM_IRQHandler+0x30>)
 81052fc:	68db      	ldr	r3, [r3, #12]
 81052fe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8105300:	4b08      	ldr	r3, [pc, #32]	; (8105324 <HAL_HSEM_IRQHandler+0x30>)
 8105302:	681a      	ldr	r2, [r3, #0]
 8105304:	687b      	ldr	r3, [r7, #4]
 8105306:	43db      	mvns	r3, r3
 8105308:	4906      	ldr	r1, [pc, #24]	; (8105324 <HAL_HSEM_IRQHandler+0x30>)
 810530a:	4013      	ands	r3, r2
 810530c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810530e:	4a05      	ldr	r2, [pc, #20]	; (8105324 <HAL_HSEM_IRQHandler+0x30>)
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8105314:	6878      	ldr	r0, [r7, #4]
 8105316:	f000 f807 	bl	8105328 <HAL_HSEM_FreeCallback>
}
 810531a:	bf00      	nop
 810531c:	3708      	adds	r7, #8
 810531e:	46bd      	mov	sp, r7
 8105320:	bd80      	pop	{r7, pc}
 8105322:	bf00      	nop
 8105324:	58026510 	.word	0x58026510

08105328 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8105328:	b480      	push	{r7}
 810532a:	b083      	sub	sp, #12
 810532c:	af00      	add	r7, sp, #0
 810532e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8105330:	bf00      	nop
 8105332:	370c      	adds	r7, #12
 8105334:	46bd      	mov	sp, r7
 8105336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810533a:	4770      	bx	lr

0810533c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 810533c:	b580      	push	{r7, lr}
 810533e:	b082      	sub	sp, #8
 8105340:	af00      	add	r7, sp, #0
 8105342:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	2b00      	cmp	r3, #0
 8105348:	d101      	bne.n	810534e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 810534a:	2301      	movs	r3, #1
 810534c:	e081      	b.n	8105452 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 810534e:	687b      	ldr	r3, [r7, #4]
 8105350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105354:	b2db      	uxtb	r3, r3
 8105356:	2b00      	cmp	r3, #0
 8105358:	d106      	bne.n	8105368 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	2200      	movs	r2, #0
 810535e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8105362:	6878      	ldr	r0, [r7, #4]
 8105364:	f7fb ff66 	bl	8101234 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8105368:	687b      	ldr	r3, [r7, #4]
 810536a:	2224      	movs	r2, #36	; 0x24
 810536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	681a      	ldr	r2, [r3, #0]
 8105376:	687b      	ldr	r3, [r7, #4]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	f022 0201 	bic.w	r2, r2, #1
 810537e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	685a      	ldr	r2, [r3, #4]
 8105384:	687b      	ldr	r3, [r7, #4]
 8105386:	681b      	ldr	r3, [r3, #0]
 8105388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 810538c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	681b      	ldr	r3, [r3, #0]
 8105392:	689a      	ldr	r2, [r3, #8]
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	681b      	ldr	r3, [r3, #0]
 8105398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 810539c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	68db      	ldr	r3, [r3, #12]
 81053a2:	2b01      	cmp	r3, #1
 81053a4:	d107      	bne.n	81053b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 81053a6:	687b      	ldr	r3, [r7, #4]
 81053a8:	689a      	ldr	r2, [r3, #8]
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81053b2:	609a      	str	r2, [r3, #8]
 81053b4:	e006      	b.n	81053c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81053b6:	687b      	ldr	r3, [r7, #4]
 81053b8:	689a      	ldr	r2, [r3, #8]
 81053ba:	687b      	ldr	r3, [r7, #4]
 81053bc:	681b      	ldr	r3, [r3, #0]
 81053be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81053c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	68db      	ldr	r3, [r3, #12]
 81053c8:	2b02      	cmp	r3, #2
 81053ca:	d104      	bne.n	81053d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81053d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81053d6:	687b      	ldr	r3, [r7, #4]
 81053d8:	681b      	ldr	r3, [r3, #0]
 81053da:	685b      	ldr	r3, [r3, #4]
 81053dc:	687a      	ldr	r2, [r7, #4]
 81053de:	6812      	ldr	r2, [r2, #0]
 81053e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81053e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81053e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	681b      	ldr	r3, [r3, #0]
 81053ee:	68da      	ldr	r2, [r3, #12]
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	681b      	ldr	r3, [r3, #0]
 81053f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81053f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	691a      	ldr	r2, [r3, #16]
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	695b      	ldr	r3, [r3, #20]
 8105402:	ea42 0103 	orr.w	r1, r2, r3
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	699b      	ldr	r3, [r3, #24]
 810540a:	021a      	lsls	r2, r3, #8
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	681b      	ldr	r3, [r3, #0]
 8105410:	430a      	orrs	r2, r1
 8105412:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	69d9      	ldr	r1, [r3, #28]
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	6a1a      	ldr	r2, [r3, #32]
 810541c:	687b      	ldr	r3, [r7, #4]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	430a      	orrs	r2, r1
 8105422:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	681a      	ldr	r2, [r3, #0]
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	f042 0201 	orr.w	r2, r2, #1
 8105432:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	2200      	movs	r2, #0
 8105438:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	2220      	movs	r2, #32
 810543e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8105442:	687b      	ldr	r3, [r7, #4]
 8105444:	2200      	movs	r2, #0
 8105446:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	2200      	movs	r2, #0
 810544c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8105450:	2300      	movs	r3, #0
}
 8105452:	4618      	mov	r0, r3
 8105454:	3708      	adds	r7, #8
 8105456:	46bd      	mov	sp, r7
 8105458:	bd80      	pop	{r7, pc}
	...

0810545c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810545c:	b580      	push	{r7, lr}
 810545e:	b088      	sub	sp, #32
 8105460:	af02      	add	r7, sp, #8
 8105462:	60f8      	str	r0, [r7, #12]
 8105464:	4608      	mov	r0, r1
 8105466:	4611      	mov	r1, r2
 8105468:	461a      	mov	r2, r3
 810546a:	4603      	mov	r3, r0
 810546c:	817b      	strh	r3, [r7, #10]
 810546e:	460b      	mov	r3, r1
 8105470:	813b      	strh	r3, [r7, #8]
 8105472:	4613      	mov	r3, r2
 8105474:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105476:	68fb      	ldr	r3, [r7, #12]
 8105478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810547c:	b2db      	uxtb	r3, r3
 810547e:	2b20      	cmp	r3, #32
 8105480:	f040 80f9 	bne.w	8105676 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8105484:	6a3b      	ldr	r3, [r7, #32]
 8105486:	2b00      	cmp	r3, #0
 8105488:	d002      	beq.n	8105490 <HAL_I2C_Mem_Write+0x34>
 810548a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810548c:	2b00      	cmp	r3, #0
 810548e:	d105      	bne.n	810549c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8105490:	68fb      	ldr	r3, [r7, #12]
 8105492:	f44f 7200 	mov.w	r2, #512	; 0x200
 8105496:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8105498:	2301      	movs	r3, #1
 810549a:	e0ed      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810549c:	68fb      	ldr	r3, [r7, #12]
 810549e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81054a2:	2b01      	cmp	r3, #1
 81054a4:	d101      	bne.n	81054aa <HAL_I2C_Mem_Write+0x4e>
 81054a6:	2302      	movs	r3, #2
 81054a8:	e0e6      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
 81054aa:	68fb      	ldr	r3, [r7, #12]
 81054ac:	2201      	movs	r2, #1
 81054ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81054b2:	f7fd f907 	bl	81026c4 <HAL_GetTick>
 81054b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81054b8:	697b      	ldr	r3, [r7, #20]
 81054ba:	9300      	str	r3, [sp, #0]
 81054bc:	2319      	movs	r3, #25
 81054be:	2201      	movs	r2, #1
 81054c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81054c4:	68f8      	ldr	r0, [r7, #12]
 81054c6:	f000 fac3 	bl	8105a50 <I2C_WaitOnFlagUntilTimeout>
 81054ca:	4603      	mov	r3, r0
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d001      	beq.n	81054d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81054d0:	2301      	movs	r3, #1
 81054d2:	e0d1      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81054d4:	68fb      	ldr	r3, [r7, #12]
 81054d6:	2221      	movs	r2, #33	; 0x21
 81054d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81054dc:	68fb      	ldr	r3, [r7, #12]
 81054de:	2240      	movs	r2, #64	; 0x40
 81054e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81054e4:	68fb      	ldr	r3, [r7, #12]
 81054e6:	2200      	movs	r2, #0
 81054e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81054ea:	68fb      	ldr	r3, [r7, #12]
 81054ec:	6a3a      	ldr	r2, [r7, #32]
 81054ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81054f0:	68fb      	ldr	r3, [r7, #12]
 81054f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81054f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81054f6:	68fb      	ldr	r3, [r7, #12]
 81054f8:	2200      	movs	r2, #0
 81054fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81054fc:	88f8      	ldrh	r0, [r7, #6]
 81054fe:	893a      	ldrh	r2, [r7, #8]
 8105500:	8979      	ldrh	r1, [r7, #10]
 8105502:	697b      	ldr	r3, [r7, #20]
 8105504:	9301      	str	r3, [sp, #4]
 8105506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105508:	9300      	str	r3, [sp, #0]
 810550a:	4603      	mov	r3, r0
 810550c:	68f8      	ldr	r0, [r7, #12]
 810550e:	f000 f9d3 	bl	81058b8 <I2C_RequestMemoryWrite>
 8105512:	4603      	mov	r3, r0
 8105514:	2b00      	cmp	r3, #0
 8105516:	d005      	beq.n	8105524 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	2200      	movs	r2, #0
 810551c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105520:	2301      	movs	r3, #1
 8105522:	e0a9      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8105524:	68fb      	ldr	r3, [r7, #12]
 8105526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105528:	b29b      	uxth	r3, r3
 810552a:	2bff      	cmp	r3, #255	; 0xff
 810552c:	d90e      	bls.n	810554c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810552e:	68fb      	ldr	r3, [r7, #12]
 8105530:	22ff      	movs	r2, #255	; 0xff
 8105532:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8105534:	68fb      	ldr	r3, [r7, #12]
 8105536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105538:	b2da      	uxtb	r2, r3
 810553a:	8979      	ldrh	r1, [r7, #10]
 810553c:	2300      	movs	r3, #0
 810553e:	9300      	str	r3, [sp, #0]
 8105540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8105544:	68f8      	ldr	r0, [r7, #12]
 8105546:	f000 fba5 	bl	8105c94 <I2C_TransferConfig>
 810554a:	e00f      	b.n	810556c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810554c:	68fb      	ldr	r3, [r7, #12]
 810554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105550:	b29a      	uxth	r2, r3
 8105552:	68fb      	ldr	r3, [r7, #12]
 8105554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8105556:	68fb      	ldr	r3, [r7, #12]
 8105558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810555a:	b2da      	uxtb	r2, r3
 810555c:	8979      	ldrh	r1, [r7, #10]
 810555e:	2300      	movs	r3, #0
 8105560:	9300      	str	r3, [sp, #0]
 8105562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8105566:	68f8      	ldr	r0, [r7, #12]
 8105568:	f000 fb94 	bl	8105c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810556c:	697a      	ldr	r2, [r7, #20]
 810556e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105570:	68f8      	ldr	r0, [r7, #12]
 8105572:	f000 faad 	bl	8105ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 8105576:	4603      	mov	r3, r0
 8105578:	2b00      	cmp	r3, #0
 810557a:	d001      	beq.n	8105580 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 810557c:	2301      	movs	r3, #1
 810557e:	e07b      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8105580:	68fb      	ldr	r3, [r7, #12]
 8105582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105584:	781a      	ldrb	r2, [r3, #0]
 8105586:	68fb      	ldr	r3, [r7, #12]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810558c:	68fb      	ldr	r3, [r7, #12]
 810558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105590:	1c5a      	adds	r2, r3, #1
 8105592:	68fb      	ldr	r3, [r7, #12]
 8105594:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8105596:	68fb      	ldr	r3, [r7, #12]
 8105598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810559a:	b29b      	uxth	r3, r3
 810559c:	3b01      	subs	r3, #1
 810559e:	b29a      	uxth	r2, r3
 81055a0:	68fb      	ldr	r3, [r7, #12]
 81055a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 81055a4:	68fb      	ldr	r3, [r7, #12]
 81055a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055a8:	3b01      	subs	r3, #1
 81055aa:	b29a      	uxth	r2, r3
 81055ac:	68fb      	ldr	r3, [r7, #12]
 81055ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81055b0:	68fb      	ldr	r3, [r7, #12]
 81055b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055b4:	b29b      	uxth	r3, r3
 81055b6:	2b00      	cmp	r3, #0
 81055b8:	d034      	beq.n	8105624 <HAL_I2C_Mem_Write+0x1c8>
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055be:	2b00      	cmp	r3, #0
 81055c0:	d130      	bne.n	8105624 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81055c2:	697b      	ldr	r3, [r7, #20]
 81055c4:	9300      	str	r3, [sp, #0]
 81055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055c8:	2200      	movs	r2, #0
 81055ca:	2180      	movs	r1, #128	; 0x80
 81055cc:	68f8      	ldr	r0, [r7, #12]
 81055ce:	f000 fa3f 	bl	8105a50 <I2C_WaitOnFlagUntilTimeout>
 81055d2:	4603      	mov	r3, r0
 81055d4:	2b00      	cmp	r3, #0
 81055d6:	d001      	beq.n	81055dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81055d8:	2301      	movs	r3, #1
 81055da:	e04d      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81055e0:	b29b      	uxth	r3, r3
 81055e2:	2bff      	cmp	r3, #255	; 0xff
 81055e4:	d90e      	bls.n	8105604 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81055e6:	68fb      	ldr	r3, [r7, #12]
 81055e8:	22ff      	movs	r2, #255	; 0xff
 81055ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81055ec:	68fb      	ldr	r3, [r7, #12]
 81055ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81055f0:	b2da      	uxtb	r2, r3
 81055f2:	8979      	ldrh	r1, [r7, #10]
 81055f4:	2300      	movs	r3, #0
 81055f6:	9300      	str	r3, [sp, #0]
 81055f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81055fc:	68f8      	ldr	r0, [r7, #12]
 81055fe:	f000 fb49 	bl	8105c94 <I2C_TransferConfig>
 8105602:	e00f      	b.n	8105624 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105608:	b29a      	uxth	r2, r3
 810560a:	68fb      	ldr	r3, [r7, #12]
 810560c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810560e:	68fb      	ldr	r3, [r7, #12]
 8105610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105612:	b2da      	uxtb	r2, r3
 8105614:	8979      	ldrh	r1, [r7, #10]
 8105616:	2300      	movs	r3, #0
 8105618:	9300      	str	r3, [sp, #0]
 810561a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810561e:	68f8      	ldr	r0, [r7, #12]
 8105620:	f000 fb38 	bl	8105c94 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8105624:	68fb      	ldr	r3, [r7, #12]
 8105626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105628:	b29b      	uxth	r3, r3
 810562a:	2b00      	cmp	r3, #0
 810562c:	d19e      	bne.n	810556c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810562e:	697a      	ldr	r2, [r7, #20]
 8105630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105632:	68f8      	ldr	r0, [r7, #12]
 8105634:	f000 fa8c 	bl	8105b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105638:	4603      	mov	r3, r0
 810563a:	2b00      	cmp	r3, #0
 810563c:	d001      	beq.n	8105642 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 810563e:	2301      	movs	r3, #1
 8105640:	e01a      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105642:	68fb      	ldr	r3, [r7, #12]
 8105644:	681b      	ldr	r3, [r3, #0]
 8105646:	2220      	movs	r2, #32
 8105648:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810564a:	68fb      	ldr	r3, [r7, #12]
 810564c:	681b      	ldr	r3, [r3, #0]
 810564e:	6859      	ldr	r1, [r3, #4]
 8105650:	68fb      	ldr	r3, [r7, #12]
 8105652:	681a      	ldr	r2, [r3, #0]
 8105654:	4b0a      	ldr	r3, [pc, #40]	; (8105680 <HAL_I2C_Mem_Write+0x224>)
 8105656:	400b      	ands	r3, r1
 8105658:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810565a:	68fb      	ldr	r3, [r7, #12]
 810565c:	2220      	movs	r2, #32
 810565e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105662:	68fb      	ldr	r3, [r7, #12]
 8105664:	2200      	movs	r2, #0
 8105666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810566a:	68fb      	ldr	r3, [r7, #12]
 810566c:	2200      	movs	r2, #0
 810566e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105672:	2300      	movs	r3, #0
 8105674:	e000      	b.n	8105678 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8105676:	2302      	movs	r3, #2
  }
}
 8105678:	4618      	mov	r0, r3
 810567a:	3718      	adds	r7, #24
 810567c:	46bd      	mov	sp, r7
 810567e:	bd80      	pop	{r7, pc}
 8105680:	fe00e800 	.word	0xfe00e800

08105684 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105684:	b580      	push	{r7, lr}
 8105686:	b088      	sub	sp, #32
 8105688:	af02      	add	r7, sp, #8
 810568a:	60f8      	str	r0, [r7, #12]
 810568c:	4608      	mov	r0, r1
 810568e:	4611      	mov	r1, r2
 8105690:	461a      	mov	r2, r3
 8105692:	4603      	mov	r3, r0
 8105694:	817b      	strh	r3, [r7, #10]
 8105696:	460b      	mov	r3, r1
 8105698:	813b      	strh	r3, [r7, #8]
 810569a:	4613      	mov	r3, r2
 810569c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810569e:	68fb      	ldr	r3, [r7, #12]
 81056a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81056a4:	b2db      	uxtb	r3, r3
 81056a6:	2b20      	cmp	r3, #32
 81056a8:	f040 80fd 	bne.w	81058a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81056ac:	6a3b      	ldr	r3, [r7, #32]
 81056ae:	2b00      	cmp	r3, #0
 81056b0:	d002      	beq.n	81056b8 <HAL_I2C_Mem_Read+0x34>
 81056b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81056b4:	2b00      	cmp	r3, #0
 81056b6:	d105      	bne.n	81056c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81056b8:	68fb      	ldr	r3, [r7, #12]
 81056ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 81056be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81056c0:	2301      	movs	r3, #1
 81056c2:	e0f1      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81056c4:	68fb      	ldr	r3, [r7, #12]
 81056c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81056ca:	2b01      	cmp	r3, #1
 81056cc:	d101      	bne.n	81056d2 <HAL_I2C_Mem_Read+0x4e>
 81056ce:	2302      	movs	r3, #2
 81056d0:	e0ea      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
 81056d2:	68fb      	ldr	r3, [r7, #12]
 81056d4:	2201      	movs	r2, #1
 81056d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81056da:	f7fc fff3 	bl	81026c4 <HAL_GetTick>
 81056de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81056e0:	697b      	ldr	r3, [r7, #20]
 81056e2:	9300      	str	r3, [sp, #0]
 81056e4:	2319      	movs	r3, #25
 81056e6:	2201      	movs	r2, #1
 81056e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81056ec:	68f8      	ldr	r0, [r7, #12]
 81056ee:	f000 f9af 	bl	8105a50 <I2C_WaitOnFlagUntilTimeout>
 81056f2:	4603      	mov	r3, r0
 81056f4:	2b00      	cmp	r3, #0
 81056f6:	d001      	beq.n	81056fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81056f8:	2301      	movs	r3, #1
 81056fa:	e0d5      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81056fc:	68fb      	ldr	r3, [r7, #12]
 81056fe:	2222      	movs	r2, #34	; 0x22
 8105700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	2240      	movs	r2, #64	; 0x40
 8105708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810570c:	68fb      	ldr	r3, [r7, #12]
 810570e:	2200      	movs	r2, #0
 8105710:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8105712:	68fb      	ldr	r3, [r7, #12]
 8105714:	6a3a      	ldr	r2, [r7, #32]
 8105716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8105718:	68fb      	ldr	r3, [r7, #12]
 810571a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 810571c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 810571e:	68fb      	ldr	r3, [r7, #12]
 8105720:	2200      	movs	r2, #0
 8105722:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8105724:	88f8      	ldrh	r0, [r7, #6]
 8105726:	893a      	ldrh	r2, [r7, #8]
 8105728:	8979      	ldrh	r1, [r7, #10]
 810572a:	697b      	ldr	r3, [r7, #20]
 810572c:	9301      	str	r3, [sp, #4]
 810572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105730:	9300      	str	r3, [sp, #0]
 8105732:	4603      	mov	r3, r0
 8105734:	68f8      	ldr	r0, [r7, #12]
 8105736:	f000 f913 	bl	8105960 <I2C_RequestMemoryRead>
 810573a:	4603      	mov	r3, r0
 810573c:	2b00      	cmp	r3, #0
 810573e:	d005      	beq.n	810574c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105740:	68fb      	ldr	r3, [r7, #12]
 8105742:	2200      	movs	r2, #0
 8105744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8105748:	2301      	movs	r3, #1
 810574a:	e0ad      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810574c:	68fb      	ldr	r3, [r7, #12]
 810574e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105750:	b29b      	uxth	r3, r3
 8105752:	2bff      	cmp	r3, #255	; 0xff
 8105754:	d90e      	bls.n	8105774 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8105756:	68fb      	ldr	r3, [r7, #12]
 8105758:	22ff      	movs	r2, #255	; 0xff
 810575a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 810575c:	68fb      	ldr	r3, [r7, #12]
 810575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105760:	b2da      	uxtb	r2, r3
 8105762:	8979      	ldrh	r1, [r7, #10]
 8105764:	4b52      	ldr	r3, [pc, #328]	; (81058b0 <HAL_I2C_Mem_Read+0x22c>)
 8105766:	9300      	str	r3, [sp, #0]
 8105768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810576c:	68f8      	ldr	r0, [r7, #12]
 810576e:	f000 fa91 	bl	8105c94 <I2C_TransferConfig>
 8105772:	e00f      	b.n	8105794 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8105774:	68fb      	ldr	r3, [r7, #12]
 8105776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105778:	b29a      	uxth	r2, r3
 810577a:	68fb      	ldr	r3, [r7, #12]
 810577c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105782:	b2da      	uxtb	r2, r3
 8105784:	8979      	ldrh	r1, [r7, #10]
 8105786:	4b4a      	ldr	r3, [pc, #296]	; (81058b0 <HAL_I2C_Mem_Read+0x22c>)
 8105788:	9300      	str	r3, [sp, #0]
 810578a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810578e:	68f8      	ldr	r0, [r7, #12]
 8105790:	f000 fa80 	bl	8105c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8105794:	697b      	ldr	r3, [r7, #20]
 8105796:	9300      	str	r3, [sp, #0]
 8105798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810579a:	2200      	movs	r2, #0
 810579c:	2104      	movs	r1, #4
 810579e:	68f8      	ldr	r0, [r7, #12]
 81057a0:	f000 f956 	bl	8105a50 <I2C_WaitOnFlagUntilTimeout>
 81057a4:	4603      	mov	r3, r0
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d001      	beq.n	81057ae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81057aa:	2301      	movs	r3, #1
 81057ac:	e07c      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81057ae:	68fb      	ldr	r3, [r7, #12]
 81057b0:	681b      	ldr	r3, [r3, #0]
 81057b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81057b4:	68fb      	ldr	r3, [r7, #12]
 81057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81057b8:	b2d2      	uxtb	r2, r2
 81057ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81057bc:	68fb      	ldr	r3, [r7, #12]
 81057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81057c0:	1c5a      	adds	r2, r3, #1
 81057c2:	68fb      	ldr	r3, [r7, #12]
 81057c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81057c6:	68fb      	ldr	r3, [r7, #12]
 81057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057ca:	3b01      	subs	r3, #1
 81057cc:	b29a      	uxth	r2, r3
 81057ce:	68fb      	ldr	r3, [r7, #12]
 81057d0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81057d2:	68fb      	ldr	r3, [r7, #12]
 81057d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81057d6:	b29b      	uxth	r3, r3
 81057d8:	3b01      	subs	r3, #1
 81057da:	b29a      	uxth	r2, r3
 81057dc:	68fb      	ldr	r3, [r7, #12]
 81057de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81057e0:	68fb      	ldr	r3, [r7, #12]
 81057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81057e4:	b29b      	uxth	r3, r3
 81057e6:	2b00      	cmp	r3, #0
 81057e8:	d034      	beq.n	8105854 <HAL_I2C_Mem_Read+0x1d0>
 81057ea:	68fb      	ldr	r3, [r7, #12]
 81057ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81057ee:	2b00      	cmp	r3, #0
 81057f0:	d130      	bne.n	8105854 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81057f2:	697b      	ldr	r3, [r7, #20]
 81057f4:	9300      	str	r3, [sp, #0]
 81057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057f8:	2200      	movs	r2, #0
 81057fa:	2180      	movs	r1, #128	; 0x80
 81057fc:	68f8      	ldr	r0, [r7, #12]
 81057fe:	f000 f927 	bl	8105a50 <I2C_WaitOnFlagUntilTimeout>
 8105802:	4603      	mov	r3, r0
 8105804:	2b00      	cmp	r3, #0
 8105806:	d001      	beq.n	810580c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8105808:	2301      	movs	r3, #1
 810580a:	e04d      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810580c:	68fb      	ldr	r3, [r7, #12]
 810580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105810:	b29b      	uxth	r3, r3
 8105812:	2bff      	cmp	r3, #255	; 0xff
 8105814:	d90e      	bls.n	8105834 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8105816:	68fb      	ldr	r3, [r7, #12]
 8105818:	22ff      	movs	r2, #255	; 0xff
 810581a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810581c:	68fb      	ldr	r3, [r7, #12]
 810581e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105820:	b2da      	uxtb	r2, r3
 8105822:	8979      	ldrh	r1, [r7, #10]
 8105824:	2300      	movs	r3, #0
 8105826:	9300      	str	r3, [sp, #0]
 8105828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810582c:	68f8      	ldr	r0, [r7, #12]
 810582e:	f000 fa31 	bl	8105c94 <I2C_TransferConfig>
 8105832:	e00f      	b.n	8105854 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8105834:	68fb      	ldr	r3, [r7, #12]
 8105836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105838:	b29a      	uxth	r2, r3
 810583a:	68fb      	ldr	r3, [r7, #12]
 810583c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810583e:	68fb      	ldr	r3, [r7, #12]
 8105840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8105842:	b2da      	uxtb	r2, r3
 8105844:	8979      	ldrh	r1, [r7, #10]
 8105846:	2300      	movs	r3, #0
 8105848:	9300      	str	r3, [sp, #0]
 810584a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810584e:	68f8      	ldr	r0, [r7, #12]
 8105850:	f000 fa20 	bl	8105c94 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8105858:	b29b      	uxth	r3, r3
 810585a:	2b00      	cmp	r3, #0
 810585c:	d19a      	bne.n	8105794 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810585e:	697a      	ldr	r2, [r7, #20]
 8105860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105862:	68f8      	ldr	r0, [r7, #12]
 8105864:	f000 f974 	bl	8105b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8105868:	4603      	mov	r3, r0
 810586a:	2b00      	cmp	r3, #0
 810586c:	d001      	beq.n	8105872 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 810586e:	2301      	movs	r3, #1
 8105870:	e01a      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105872:	68fb      	ldr	r3, [r7, #12]
 8105874:	681b      	ldr	r3, [r3, #0]
 8105876:	2220      	movs	r2, #32
 8105878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	681b      	ldr	r3, [r3, #0]
 810587e:	6859      	ldr	r1, [r3, #4]
 8105880:	68fb      	ldr	r3, [r7, #12]
 8105882:	681a      	ldr	r2, [r3, #0]
 8105884:	4b0b      	ldr	r3, [pc, #44]	; (81058b4 <HAL_I2C_Mem_Read+0x230>)
 8105886:	400b      	ands	r3, r1
 8105888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	2220      	movs	r2, #32
 810588e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8105892:	68fb      	ldr	r3, [r7, #12]
 8105894:	2200      	movs	r2, #0
 8105896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810589a:	68fb      	ldr	r3, [r7, #12]
 810589c:	2200      	movs	r2, #0
 810589e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81058a2:	2300      	movs	r3, #0
 81058a4:	e000      	b.n	81058a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 81058a6:	2302      	movs	r3, #2
  }
}
 81058a8:	4618      	mov	r0, r3
 81058aa:	3718      	adds	r7, #24
 81058ac:	46bd      	mov	sp, r7
 81058ae:	bd80      	pop	{r7, pc}
 81058b0:	80002400 	.word	0x80002400
 81058b4:	fe00e800 	.word	0xfe00e800

081058b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 81058b8:	b580      	push	{r7, lr}
 81058ba:	b086      	sub	sp, #24
 81058bc:	af02      	add	r7, sp, #8
 81058be:	60f8      	str	r0, [r7, #12]
 81058c0:	4608      	mov	r0, r1
 81058c2:	4611      	mov	r1, r2
 81058c4:	461a      	mov	r2, r3
 81058c6:	4603      	mov	r3, r0
 81058c8:	817b      	strh	r3, [r7, #10]
 81058ca:	460b      	mov	r3, r1
 81058cc:	813b      	strh	r3, [r7, #8]
 81058ce:	4613      	mov	r3, r2
 81058d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 81058d2:	88fb      	ldrh	r3, [r7, #6]
 81058d4:	b2da      	uxtb	r2, r3
 81058d6:	8979      	ldrh	r1, [r7, #10]
 81058d8:	4b20      	ldr	r3, [pc, #128]	; (810595c <I2C_RequestMemoryWrite+0xa4>)
 81058da:	9300      	str	r3, [sp, #0]
 81058dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81058e0:	68f8      	ldr	r0, [r7, #12]
 81058e2:	f000 f9d7 	bl	8105c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81058e6:	69fa      	ldr	r2, [r7, #28]
 81058e8:	69b9      	ldr	r1, [r7, #24]
 81058ea:	68f8      	ldr	r0, [r7, #12]
 81058ec:	f000 f8f0 	bl	8105ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 81058f0:	4603      	mov	r3, r0
 81058f2:	2b00      	cmp	r3, #0
 81058f4:	d001      	beq.n	81058fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81058f6:	2301      	movs	r3, #1
 81058f8:	e02c      	b.n	8105954 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81058fa:	88fb      	ldrh	r3, [r7, #6]
 81058fc:	2b01      	cmp	r3, #1
 81058fe:	d105      	bne.n	810590c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8105900:	893b      	ldrh	r3, [r7, #8]
 8105902:	b2da      	uxtb	r2, r3
 8105904:	68fb      	ldr	r3, [r7, #12]
 8105906:	681b      	ldr	r3, [r3, #0]
 8105908:	629a      	str	r2, [r3, #40]	; 0x28
 810590a:	e015      	b.n	8105938 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810590c:	893b      	ldrh	r3, [r7, #8]
 810590e:	0a1b      	lsrs	r3, r3, #8
 8105910:	b29b      	uxth	r3, r3
 8105912:	b2da      	uxtb	r2, r3
 8105914:	68fb      	ldr	r3, [r7, #12]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810591a:	69fa      	ldr	r2, [r7, #28]
 810591c:	69b9      	ldr	r1, [r7, #24]
 810591e:	68f8      	ldr	r0, [r7, #12]
 8105920:	f000 f8d6 	bl	8105ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 8105924:	4603      	mov	r3, r0
 8105926:	2b00      	cmp	r3, #0
 8105928:	d001      	beq.n	810592e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 810592a:	2301      	movs	r3, #1
 810592c:	e012      	b.n	8105954 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810592e:	893b      	ldrh	r3, [r7, #8]
 8105930:	b2da      	uxtb	r2, r3
 8105932:	68fb      	ldr	r3, [r7, #12]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8105938:	69fb      	ldr	r3, [r7, #28]
 810593a:	9300      	str	r3, [sp, #0]
 810593c:	69bb      	ldr	r3, [r7, #24]
 810593e:	2200      	movs	r2, #0
 8105940:	2180      	movs	r1, #128	; 0x80
 8105942:	68f8      	ldr	r0, [r7, #12]
 8105944:	f000 f884 	bl	8105a50 <I2C_WaitOnFlagUntilTimeout>
 8105948:	4603      	mov	r3, r0
 810594a:	2b00      	cmp	r3, #0
 810594c:	d001      	beq.n	8105952 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 810594e:	2301      	movs	r3, #1
 8105950:	e000      	b.n	8105954 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8105952:	2300      	movs	r3, #0
}
 8105954:	4618      	mov	r0, r3
 8105956:	3710      	adds	r7, #16
 8105958:	46bd      	mov	sp, r7
 810595a:	bd80      	pop	{r7, pc}
 810595c:	80002000 	.word	0x80002000

08105960 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8105960:	b580      	push	{r7, lr}
 8105962:	b086      	sub	sp, #24
 8105964:	af02      	add	r7, sp, #8
 8105966:	60f8      	str	r0, [r7, #12]
 8105968:	4608      	mov	r0, r1
 810596a:	4611      	mov	r1, r2
 810596c:	461a      	mov	r2, r3
 810596e:	4603      	mov	r3, r0
 8105970:	817b      	strh	r3, [r7, #10]
 8105972:	460b      	mov	r3, r1
 8105974:	813b      	strh	r3, [r7, #8]
 8105976:	4613      	mov	r3, r2
 8105978:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 810597a:	88fb      	ldrh	r3, [r7, #6]
 810597c:	b2da      	uxtb	r2, r3
 810597e:	8979      	ldrh	r1, [r7, #10]
 8105980:	4b20      	ldr	r3, [pc, #128]	; (8105a04 <I2C_RequestMemoryRead+0xa4>)
 8105982:	9300      	str	r3, [sp, #0]
 8105984:	2300      	movs	r3, #0
 8105986:	68f8      	ldr	r0, [r7, #12]
 8105988:	f000 f984 	bl	8105c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810598c:	69fa      	ldr	r2, [r7, #28]
 810598e:	69b9      	ldr	r1, [r7, #24]
 8105990:	68f8      	ldr	r0, [r7, #12]
 8105992:	f000 f89d 	bl	8105ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 8105996:	4603      	mov	r3, r0
 8105998:	2b00      	cmp	r3, #0
 810599a:	d001      	beq.n	81059a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 810599c:	2301      	movs	r3, #1
 810599e:	e02c      	b.n	81059fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81059a0:	88fb      	ldrh	r3, [r7, #6]
 81059a2:	2b01      	cmp	r3, #1
 81059a4:	d105      	bne.n	81059b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81059a6:	893b      	ldrh	r3, [r7, #8]
 81059a8:	b2da      	uxtb	r2, r3
 81059aa:	68fb      	ldr	r3, [r7, #12]
 81059ac:	681b      	ldr	r3, [r3, #0]
 81059ae:	629a      	str	r2, [r3, #40]	; 0x28
 81059b0:	e015      	b.n	81059de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81059b2:	893b      	ldrh	r3, [r7, #8]
 81059b4:	0a1b      	lsrs	r3, r3, #8
 81059b6:	b29b      	uxth	r3, r3
 81059b8:	b2da      	uxtb	r2, r3
 81059ba:	68fb      	ldr	r3, [r7, #12]
 81059bc:	681b      	ldr	r3, [r3, #0]
 81059be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81059c0:	69fa      	ldr	r2, [r7, #28]
 81059c2:	69b9      	ldr	r1, [r7, #24]
 81059c4:	68f8      	ldr	r0, [r7, #12]
 81059c6:	f000 f883 	bl	8105ad0 <I2C_WaitOnTXISFlagUntilTimeout>
 81059ca:	4603      	mov	r3, r0
 81059cc:	2b00      	cmp	r3, #0
 81059ce:	d001      	beq.n	81059d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 81059d0:	2301      	movs	r3, #1
 81059d2:	e012      	b.n	81059fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81059d4:	893b      	ldrh	r3, [r7, #8]
 81059d6:	b2da      	uxtb	r2, r3
 81059d8:	68fb      	ldr	r3, [r7, #12]
 81059da:	681b      	ldr	r3, [r3, #0]
 81059dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 81059de:	69fb      	ldr	r3, [r7, #28]
 81059e0:	9300      	str	r3, [sp, #0]
 81059e2:	69bb      	ldr	r3, [r7, #24]
 81059e4:	2200      	movs	r2, #0
 81059e6:	2140      	movs	r1, #64	; 0x40
 81059e8:	68f8      	ldr	r0, [r7, #12]
 81059ea:	f000 f831 	bl	8105a50 <I2C_WaitOnFlagUntilTimeout>
 81059ee:	4603      	mov	r3, r0
 81059f0:	2b00      	cmp	r3, #0
 81059f2:	d001      	beq.n	81059f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81059f4:	2301      	movs	r3, #1
 81059f6:	e000      	b.n	81059fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81059f8:	2300      	movs	r3, #0
}
 81059fa:	4618      	mov	r0, r3
 81059fc:	3710      	adds	r7, #16
 81059fe:	46bd      	mov	sp, r7
 8105a00:	bd80      	pop	{r7, pc}
 8105a02:	bf00      	nop
 8105a04:	80002000 	.word	0x80002000

08105a08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8105a08:	b480      	push	{r7}
 8105a0a:	b083      	sub	sp, #12
 8105a0c:	af00      	add	r7, sp, #0
 8105a0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	681b      	ldr	r3, [r3, #0]
 8105a14:	699b      	ldr	r3, [r3, #24]
 8105a16:	f003 0302 	and.w	r3, r3, #2
 8105a1a:	2b02      	cmp	r3, #2
 8105a1c:	d103      	bne.n	8105a26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	681b      	ldr	r3, [r3, #0]
 8105a22:	2200      	movs	r2, #0
 8105a24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	681b      	ldr	r3, [r3, #0]
 8105a2a:	699b      	ldr	r3, [r3, #24]
 8105a2c:	f003 0301 	and.w	r3, r3, #1
 8105a30:	2b01      	cmp	r3, #1
 8105a32:	d007      	beq.n	8105a44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	699a      	ldr	r2, [r3, #24]
 8105a3a:	687b      	ldr	r3, [r7, #4]
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	f042 0201 	orr.w	r2, r2, #1
 8105a42:	619a      	str	r2, [r3, #24]
  }
}
 8105a44:	bf00      	nop
 8105a46:	370c      	adds	r7, #12
 8105a48:	46bd      	mov	sp, r7
 8105a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a4e:	4770      	bx	lr

08105a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8105a50:	b580      	push	{r7, lr}
 8105a52:	b084      	sub	sp, #16
 8105a54:	af00      	add	r7, sp, #0
 8105a56:	60f8      	str	r0, [r7, #12]
 8105a58:	60b9      	str	r1, [r7, #8]
 8105a5a:	603b      	str	r3, [r7, #0]
 8105a5c:	4613      	mov	r3, r2
 8105a5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105a60:	e022      	b.n	8105aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105a62:	683b      	ldr	r3, [r7, #0]
 8105a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105a68:	d01e      	beq.n	8105aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105a6a:	f7fc fe2b 	bl	81026c4 <HAL_GetTick>
 8105a6e:	4602      	mov	r2, r0
 8105a70:	69bb      	ldr	r3, [r7, #24]
 8105a72:	1ad3      	subs	r3, r2, r3
 8105a74:	683a      	ldr	r2, [r7, #0]
 8105a76:	429a      	cmp	r2, r3
 8105a78:	d302      	bcc.n	8105a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8105a7a:	683b      	ldr	r3, [r7, #0]
 8105a7c:	2b00      	cmp	r3, #0
 8105a7e:	d113      	bne.n	8105aa8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105a80:	68fb      	ldr	r3, [r7, #12]
 8105a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105a84:	f043 0220 	orr.w	r2, r3, #32
 8105a88:	68fb      	ldr	r3, [r7, #12]
 8105a8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105a8c:	68fb      	ldr	r3, [r7, #12]
 8105a8e:	2220      	movs	r2, #32
 8105a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	2200      	movs	r2, #0
 8105a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105a9c:	68fb      	ldr	r3, [r7, #12]
 8105a9e:	2200      	movs	r2, #0
 8105aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8105aa4:	2301      	movs	r3, #1
 8105aa6:	e00f      	b.n	8105ac8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8105aa8:	68fb      	ldr	r3, [r7, #12]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	699a      	ldr	r2, [r3, #24]
 8105aae:	68bb      	ldr	r3, [r7, #8]
 8105ab0:	4013      	ands	r3, r2
 8105ab2:	68ba      	ldr	r2, [r7, #8]
 8105ab4:	429a      	cmp	r2, r3
 8105ab6:	bf0c      	ite	eq
 8105ab8:	2301      	moveq	r3, #1
 8105aba:	2300      	movne	r3, #0
 8105abc:	b2db      	uxtb	r3, r3
 8105abe:	461a      	mov	r2, r3
 8105ac0:	79fb      	ldrb	r3, [r7, #7]
 8105ac2:	429a      	cmp	r2, r3
 8105ac4:	d0cd      	beq.n	8105a62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105ac6:	2300      	movs	r3, #0
}
 8105ac8:	4618      	mov	r0, r3
 8105aca:	3710      	adds	r7, #16
 8105acc:	46bd      	mov	sp, r7
 8105ace:	bd80      	pop	{r7, pc}

08105ad0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105ad0:	b580      	push	{r7, lr}
 8105ad2:	b084      	sub	sp, #16
 8105ad4:	af00      	add	r7, sp, #0
 8105ad6:	60f8      	str	r0, [r7, #12]
 8105ad8:	60b9      	str	r1, [r7, #8]
 8105ada:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105adc:	e02c      	b.n	8105b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105ade:	687a      	ldr	r2, [r7, #4]
 8105ae0:	68b9      	ldr	r1, [r7, #8]
 8105ae2:	68f8      	ldr	r0, [r7, #12]
 8105ae4:	f000 f870 	bl	8105bc8 <I2C_IsAcknowledgeFailed>
 8105ae8:	4603      	mov	r3, r0
 8105aea:	2b00      	cmp	r3, #0
 8105aec:	d001      	beq.n	8105af2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105aee:	2301      	movs	r3, #1
 8105af0:	e02a      	b.n	8105b48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105af2:	68bb      	ldr	r3, [r7, #8]
 8105af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105af8:	d01e      	beq.n	8105b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105afa:	f7fc fde3 	bl	81026c4 <HAL_GetTick>
 8105afe:	4602      	mov	r2, r0
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	1ad3      	subs	r3, r2, r3
 8105b04:	68ba      	ldr	r2, [r7, #8]
 8105b06:	429a      	cmp	r2, r3
 8105b08:	d302      	bcc.n	8105b10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8105b0a:	68bb      	ldr	r3, [r7, #8]
 8105b0c:	2b00      	cmp	r3, #0
 8105b0e:	d113      	bne.n	8105b38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105b10:	68fb      	ldr	r3, [r7, #12]
 8105b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b14:	f043 0220 	orr.w	r2, r3, #32
 8105b18:	68fb      	ldr	r3, [r7, #12]
 8105b1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8105b1c:	68fb      	ldr	r3, [r7, #12]
 8105b1e:	2220      	movs	r2, #32
 8105b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b24:	68fb      	ldr	r3, [r7, #12]
 8105b26:	2200      	movs	r2, #0
 8105b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8105b2c:	68fb      	ldr	r3, [r7, #12]
 8105b2e:	2200      	movs	r2, #0
 8105b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8105b34:	2301      	movs	r3, #1
 8105b36:	e007      	b.n	8105b48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8105b38:	68fb      	ldr	r3, [r7, #12]
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	699b      	ldr	r3, [r3, #24]
 8105b3e:	f003 0302 	and.w	r3, r3, #2
 8105b42:	2b02      	cmp	r3, #2
 8105b44:	d1cb      	bne.n	8105ade <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8105b46:	2300      	movs	r3, #0
}
 8105b48:	4618      	mov	r0, r3
 8105b4a:	3710      	adds	r7, #16
 8105b4c:	46bd      	mov	sp, r7
 8105b4e:	bd80      	pop	{r7, pc}

08105b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105b50:	b580      	push	{r7, lr}
 8105b52:	b084      	sub	sp, #16
 8105b54:	af00      	add	r7, sp, #0
 8105b56:	60f8      	str	r0, [r7, #12]
 8105b58:	60b9      	str	r1, [r7, #8]
 8105b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105b5c:	e028      	b.n	8105bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8105b5e:	687a      	ldr	r2, [r7, #4]
 8105b60:	68b9      	ldr	r1, [r7, #8]
 8105b62:	68f8      	ldr	r0, [r7, #12]
 8105b64:	f000 f830 	bl	8105bc8 <I2C_IsAcknowledgeFailed>
 8105b68:	4603      	mov	r3, r0
 8105b6a:	2b00      	cmp	r3, #0
 8105b6c:	d001      	beq.n	8105b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8105b6e:	2301      	movs	r3, #1
 8105b70:	e026      	b.n	8105bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105b72:	f7fc fda7 	bl	81026c4 <HAL_GetTick>
 8105b76:	4602      	mov	r2, r0
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	1ad3      	subs	r3, r2, r3
 8105b7c:	68ba      	ldr	r2, [r7, #8]
 8105b7e:	429a      	cmp	r2, r3
 8105b80:	d302      	bcc.n	8105b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8105b82:	68bb      	ldr	r3, [r7, #8]
 8105b84:	2b00      	cmp	r3, #0
 8105b86:	d113      	bne.n	8105bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105b88:	68fb      	ldr	r3, [r7, #12]
 8105b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105b8c:	f043 0220 	orr.w	r2, r3, #32
 8105b90:	68fb      	ldr	r3, [r7, #12]
 8105b92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8105b94:	68fb      	ldr	r3, [r7, #12]
 8105b96:	2220      	movs	r2, #32
 8105b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8105b9c:	68fb      	ldr	r3, [r7, #12]
 8105b9e:	2200      	movs	r2, #0
 8105ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8105ba4:	68fb      	ldr	r3, [r7, #12]
 8105ba6:	2200      	movs	r2, #0
 8105ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8105bac:	2301      	movs	r3, #1
 8105bae:	e007      	b.n	8105bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105bb0:	68fb      	ldr	r3, [r7, #12]
 8105bb2:	681b      	ldr	r3, [r3, #0]
 8105bb4:	699b      	ldr	r3, [r3, #24]
 8105bb6:	f003 0320 	and.w	r3, r3, #32
 8105bba:	2b20      	cmp	r3, #32
 8105bbc:	d1cf      	bne.n	8105b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8105bbe:	2300      	movs	r3, #0
}
 8105bc0:	4618      	mov	r0, r3
 8105bc2:	3710      	adds	r7, #16
 8105bc4:	46bd      	mov	sp, r7
 8105bc6:	bd80      	pop	{r7, pc}

08105bc8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8105bc8:	b580      	push	{r7, lr}
 8105bca:	b084      	sub	sp, #16
 8105bcc:	af00      	add	r7, sp, #0
 8105bce:	60f8      	str	r0, [r7, #12]
 8105bd0:	60b9      	str	r1, [r7, #8]
 8105bd2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8105bd4:	68fb      	ldr	r3, [r7, #12]
 8105bd6:	681b      	ldr	r3, [r3, #0]
 8105bd8:	699b      	ldr	r3, [r3, #24]
 8105bda:	f003 0310 	and.w	r3, r3, #16
 8105bde:	2b10      	cmp	r3, #16
 8105be0:	d151      	bne.n	8105c86 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105be2:	e022      	b.n	8105c2a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8105be4:	68bb      	ldr	r3, [r7, #8]
 8105be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105bea:	d01e      	beq.n	8105c2a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105bec:	f7fc fd6a 	bl	81026c4 <HAL_GetTick>
 8105bf0:	4602      	mov	r2, r0
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	1ad3      	subs	r3, r2, r3
 8105bf6:	68ba      	ldr	r2, [r7, #8]
 8105bf8:	429a      	cmp	r2, r3
 8105bfa:	d302      	bcc.n	8105c02 <I2C_IsAcknowledgeFailed+0x3a>
 8105bfc:	68bb      	ldr	r3, [r7, #8]
 8105bfe:	2b00      	cmp	r3, #0
 8105c00:	d113      	bne.n	8105c2a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8105c02:	68fb      	ldr	r3, [r7, #12]
 8105c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c06:	f043 0220 	orr.w	r2, r3, #32
 8105c0a:	68fb      	ldr	r3, [r7, #12]
 8105c0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8105c0e:	68fb      	ldr	r3, [r7, #12]
 8105c10:	2220      	movs	r2, #32
 8105c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	2200      	movs	r2, #0
 8105c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8105c1e:	68fb      	ldr	r3, [r7, #12]
 8105c20:	2200      	movs	r2, #0
 8105c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8105c26:	2301      	movs	r3, #1
 8105c28:	e02e      	b.n	8105c88 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8105c2a:	68fb      	ldr	r3, [r7, #12]
 8105c2c:	681b      	ldr	r3, [r3, #0]
 8105c2e:	699b      	ldr	r3, [r3, #24]
 8105c30:	f003 0320 	and.w	r3, r3, #32
 8105c34:	2b20      	cmp	r3, #32
 8105c36:	d1d5      	bne.n	8105be4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8105c38:	68fb      	ldr	r3, [r7, #12]
 8105c3a:	681b      	ldr	r3, [r3, #0]
 8105c3c:	2210      	movs	r2, #16
 8105c3e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8105c40:	68fb      	ldr	r3, [r7, #12]
 8105c42:	681b      	ldr	r3, [r3, #0]
 8105c44:	2220      	movs	r2, #32
 8105c46:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8105c48:	68f8      	ldr	r0, [r7, #12]
 8105c4a:	f7ff fedd 	bl	8105a08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	681b      	ldr	r3, [r3, #0]
 8105c52:	6859      	ldr	r1, [r3, #4]
 8105c54:	68fb      	ldr	r3, [r7, #12]
 8105c56:	681a      	ldr	r2, [r3, #0]
 8105c58:	4b0d      	ldr	r3, [pc, #52]	; (8105c90 <I2C_IsAcknowledgeFailed+0xc8>)
 8105c5a:	400b      	ands	r3, r1
 8105c5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8105c5e:	68fb      	ldr	r3, [r7, #12]
 8105c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105c62:	f043 0204 	orr.w	r2, r3, #4
 8105c66:	68fb      	ldr	r3, [r7, #12]
 8105c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	2220      	movs	r2, #32
 8105c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8105c72:	68fb      	ldr	r3, [r7, #12]
 8105c74:	2200      	movs	r2, #0
 8105c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105c7a:	68fb      	ldr	r3, [r7, #12]
 8105c7c:	2200      	movs	r2, #0
 8105c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8105c82:	2301      	movs	r3, #1
 8105c84:	e000      	b.n	8105c88 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8105c86:	2300      	movs	r3, #0
}
 8105c88:	4618      	mov	r0, r3
 8105c8a:	3710      	adds	r7, #16
 8105c8c:	46bd      	mov	sp, r7
 8105c8e:	bd80      	pop	{r7, pc}
 8105c90:	fe00e800 	.word	0xfe00e800

08105c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8105c94:	b480      	push	{r7}
 8105c96:	b085      	sub	sp, #20
 8105c98:	af00      	add	r7, sp, #0
 8105c9a:	60f8      	str	r0, [r7, #12]
 8105c9c:	607b      	str	r3, [r7, #4]
 8105c9e:	460b      	mov	r3, r1
 8105ca0:	817b      	strh	r3, [r7, #10]
 8105ca2:	4613      	mov	r3, r2
 8105ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8105ca6:	68fb      	ldr	r3, [r7, #12]
 8105ca8:	681b      	ldr	r3, [r3, #0]
 8105caa:	685a      	ldr	r2, [r3, #4]
 8105cac:	69bb      	ldr	r3, [r7, #24]
 8105cae:	0d5b      	lsrs	r3, r3, #21
 8105cb0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8105cb4:	4b0d      	ldr	r3, [pc, #52]	; (8105cec <I2C_TransferConfig+0x58>)
 8105cb6:	430b      	orrs	r3, r1
 8105cb8:	43db      	mvns	r3, r3
 8105cba:	ea02 0103 	and.w	r1, r2, r3
 8105cbe:	897b      	ldrh	r3, [r7, #10]
 8105cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8105cc4:	7a7b      	ldrb	r3, [r7, #9]
 8105cc6:	041b      	lsls	r3, r3, #16
 8105cc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8105ccc:	431a      	orrs	r2, r3
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	431a      	orrs	r2, r3
 8105cd2:	69bb      	ldr	r3, [r7, #24]
 8105cd4:	431a      	orrs	r2, r3
 8105cd6:	68fb      	ldr	r3, [r7, #12]
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	430a      	orrs	r2, r1
 8105cdc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8105cde:	bf00      	nop
 8105ce0:	3714      	adds	r7, #20
 8105ce2:	46bd      	mov	sp, r7
 8105ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105ce8:	4770      	bx	lr
 8105cea:	bf00      	nop
 8105cec:	03ff63ff 	.word	0x03ff63ff

08105cf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8105cf0:	b480      	push	{r7}
 8105cf2:	b083      	sub	sp, #12
 8105cf4:	af00      	add	r7, sp, #0
 8105cf6:	6078      	str	r0, [r7, #4]
 8105cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105d00:	b2db      	uxtb	r3, r3
 8105d02:	2b20      	cmp	r3, #32
 8105d04:	d138      	bne.n	8105d78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105d0c:	2b01      	cmp	r3, #1
 8105d0e:	d101      	bne.n	8105d14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8105d10:	2302      	movs	r3, #2
 8105d12:	e032      	b.n	8105d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	2201      	movs	r2, #1
 8105d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	2224      	movs	r2, #36	; 0x24
 8105d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	681b      	ldr	r3, [r3, #0]
 8105d28:	681a      	ldr	r2, [r3, #0]
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	f022 0201 	bic.w	r2, r2, #1
 8105d32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	681b      	ldr	r3, [r3, #0]
 8105d38:	681a      	ldr	r2, [r3, #0]
 8105d3a:	687b      	ldr	r3, [r7, #4]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8105d42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	6819      	ldr	r1, [r3, #0]
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	681b      	ldr	r3, [r3, #0]
 8105d4e:	683a      	ldr	r2, [r7, #0]
 8105d50:	430a      	orrs	r2, r1
 8105d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105d54:	687b      	ldr	r3, [r7, #4]
 8105d56:	681b      	ldr	r3, [r3, #0]
 8105d58:	681a      	ldr	r2, [r3, #0]
 8105d5a:	687b      	ldr	r3, [r7, #4]
 8105d5c:	681b      	ldr	r3, [r3, #0]
 8105d5e:	f042 0201 	orr.w	r2, r2, #1
 8105d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	2220      	movs	r2, #32
 8105d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	2200      	movs	r2, #0
 8105d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105d74:	2300      	movs	r3, #0
 8105d76:	e000      	b.n	8105d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8105d78:	2302      	movs	r3, #2
  }
}
 8105d7a:	4618      	mov	r0, r3
 8105d7c:	370c      	adds	r7, #12
 8105d7e:	46bd      	mov	sp, r7
 8105d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d84:	4770      	bx	lr

08105d86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8105d86:	b480      	push	{r7}
 8105d88:	b085      	sub	sp, #20
 8105d8a:	af00      	add	r7, sp, #0
 8105d8c:	6078      	str	r0, [r7, #4]
 8105d8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8105d90:	687b      	ldr	r3, [r7, #4]
 8105d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105d96:	b2db      	uxtb	r3, r3
 8105d98:	2b20      	cmp	r3, #32
 8105d9a:	d139      	bne.n	8105e10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105da2:	2b01      	cmp	r3, #1
 8105da4:	d101      	bne.n	8105daa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8105da6:	2302      	movs	r3, #2
 8105da8:	e033      	b.n	8105e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	2201      	movs	r2, #1
 8105dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	2224      	movs	r2, #36	; 0x24
 8105db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8105dba:	687b      	ldr	r3, [r7, #4]
 8105dbc:	681b      	ldr	r3, [r3, #0]
 8105dbe:	681a      	ldr	r2, [r3, #0]
 8105dc0:	687b      	ldr	r3, [r7, #4]
 8105dc2:	681b      	ldr	r3, [r3, #0]
 8105dc4:	f022 0201 	bic.w	r2, r2, #1
 8105dc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8105dd2:	68fb      	ldr	r3, [r7, #12]
 8105dd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8105dd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8105dda:	683b      	ldr	r3, [r7, #0]
 8105ddc:	021b      	lsls	r3, r3, #8
 8105dde:	68fa      	ldr	r2, [r7, #12]
 8105de0:	4313      	orrs	r3, r2
 8105de2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8105de4:	687b      	ldr	r3, [r7, #4]
 8105de6:	681b      	ldr	r3, [r3, #0]
 8105de8:	68fa      	ldr	r2, [r7, #12]
 8105dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	681a      	ldr	r2, [r3, #0]
 8105df2:	687b      	ldr	r3, [r7, #4]
 8105df4:	681b      	ldr	r3, [r3, #0]
 8105df6:	f042 0201 	orr.w	r2, r2, #1
 8105dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8105dfc:	687b      	ldr	r3, [r7, #4]
 8105dfe:	2220      	movs	r2, #32
 8105e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	2200      	movs	r2, #0
 8105e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8105e0c:	2300      	movs	r3, #0
 8105e0e:	e000      	b.n	8105e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8105e10:	2302      	movs	r3, #2
  }
}
 8105e12:	4618      	mov	r0, r3
 8105e14:	3714      	adds	r7, #20
 8105e16:	46bd      	mov	sp, r7
 8105e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e1c:	4770      	bx	lr
	...

08105e20 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105e20:	b580      	push	{r7, lr}
 8105e22:	b084      	sub	sp, #16
 8105e24:	af00      	add	r7, sp, #0
 8105e26:	60f8      	str	r0, [r7, #12]
 8105e28:	460b      	mov	r3, r1
 8105e2a:	607a      	str	r2, [r7, #4]
 8105e2c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105e2e:	4b35      	ldr	r3, [pc, #212]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105e30:	681b      	ldr	r3, [r3, #0]
 8105e32:	f023 0201 	bic.w	r2, r3, #1
 8105e36:	4933      	ldr	r1, [pc, #204]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105e38:	68fb      	ldr	r3, [r7, #12]
 8105e3a:	4313      	orrs	r3, r2
 8105e3c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	2b00      	cmp	r3, #0
 8105e42:	d121      	bne.n	8105e88 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105e44:	f7fc fd4c 	bl	81028e0 <HAL_GetCurrentCPUID>
 8105e48:	4603      	mov	r3, r0
 8105e4a:	2b03      	cmp	r3, #3
 8105e4c:	d154      	bne.n	8105ef8 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105e4e:	4b2d      	ldr	r3, [pc, #180]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105e50:	691b      	ldr	r3, [r3, #16]
 8105e52:	4a2c      	ldr	r2, [pc, #176]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105e54:	f023 0301 	bic.w	r3, r3, #1
 8105e58:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e5a:	4b2b      	ldr	r3, [pc, #172]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105e5c:	691b      	ldr	r3, [r3, #16]
 8105e5e:	4a2a      	ldr	r2, [pc, #168]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105e60:	f043 0304 	orr.w	r3, r3, #4
 8105e64:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8105e66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8105e6a:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105e6e:	7afb      	ldrb	r3, [r7, #11]
 8105e70:	2b01      	cmp	r3, #1
 8105e72:	d101      	bne.n	8105e78 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105e74:	bf30      	wfi
 8105e76:	e000      	b.n	8105e7a <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105e78:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105e7a:	4b23      	ldr	r3, [pc, #140]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105e7c:	691b      	ldr	r3, [r3, #16]
 8105e7e:	4a22      	ldr	r2, [pc, #136]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105e80:	f023 0304 	bic.w	r3, r3, #4
 8105e84:	6113      	str	r3, [r2, #16]
 8105e86:	e03a      	b.n	8105efe <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	2b01      	cmp	r3, #1
 8105e8c:	d121      	bne.n	8105ed2 <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105e8e:	f7fc fd27 	bl	81028e0 <HAL_GetCurrentCPUID>
 8105e92:	4603      	mov	r3, r0
 8105e94:	2b01      	cmp	r3, #1
 8105e96:	d131      	bne.n	8105efc <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105e98:	4b1a      	ldr	r3, [pc, #104]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105e9a:	695b      	ldr	r3, [r3, #20]
 8105e9c:	4a19      	ldr	r2, [pc, #100]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105e9e:	f023 0302 	bic.w	r3, r3, #2
 8105ea2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105ea4:	4b18      	ldr	r3, [pc, #96]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105ea6:	691b      	ldr	r3, [r3, #16]
 8105ea8:	4a17      	ldr	r2, [pc, #92]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105eaa:	f043 0304 	orr.w	r3, r3, #4
 8105eae:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105eb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8105eb4:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105eb8:	7afb      	ldrb	r3, [r7, #11]
 8105eba:	2b01      	cmp	r3, #1
 8105ebc:	d101      	bne.n	8105ec2 <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105ebe:	bf30      	wfi
 8105ec0:	e000      	b.n	8105ec4 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105ec2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105ec4:	4b10      	ldr	r3, [pc, #64]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105ec6:	691b      	ldr	r3, [r3, #16]
 8105ec8:	4a0f      	ldr	r2, [pc, #60]	; (8105f08 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8105eca:	f023 0304 	bic.w	r3, r3, #4
 8105ece:	6113      	str	r3, [r2, #16]
 8105ed0:	e015      	b.n	8105efe <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105ed2:	f7fc fd05 	bl	81028e0 <HAL_GetCurrentCPUID>
 8105ed6:	4603      	mov	r3, r0
 8105ed8:	2b03      	cmp	r3, #3
 8105eda:	d106      	bne.n	8105eea <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105edc:	4b09      	ldr	r3, [pc, #36]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105ede:	691b      	ldr	r3, [r3, #16]
 8105ee0:	4a08      	ldr	r2, [pc, #32]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105ee2:	f023 0304 	bic.w	r3, r3, #4
 8105ee6:	6113      	str	r3, [r2, #16]
 8105ee8:	e009      	b.n	8105efe <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105eea:	4b06      	ldr	r3, [pc, #24]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105eec:	695b      	ldr	r3, [r3, #20]
 8105eee:	4a05      	ldr	r2, [pc, #20]	; (8105f04 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8105ef0:	f023 0304 	bic.w	r3, r3, #4
 8105ef4:	6153      	str	r3, [r2, #20]
 8105ef6:	e002      	b.n	8105efe <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8105ef8:	bf00      	nop
 8105efa:	e000      	b.n	8105efe <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8105efc:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105efe:	3710      	adds	r7, #16
 8105f00:	46bd      	mov	sp, r7
 8105f02:	bd80      	pop	{r7, pc}
 8105f04:	58024800 	.word	0x58024800
 8105f08:	e000ed00 	.word	0xe000ed00

08105f0c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105f0c:	b580      	push	{r7, lr}
 8105f0e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105f10:	f7fc fce6 	bl	81028e0 <HAL_GetCurrentCPUID>
 8105f14:	4603      	mov	r3, r0
 8105f16:	2b03      	cmp	r3, #3
 8105f18:	d101      	bne.n	8105f1e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105f1a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105f1c:	e001      	b.n	8105f22 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105f1e:	bf40      	sev
    __WFE ();
 8105f20:	bf20      	wfe
}
 8105f22:	bf00      	nop
 8105f24:	bd80      	pop	{r7, pc}
	...

08105f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105f28:	b480      	push	{r7}
 8105f2a:	b089      	sub	sp, #36	; 0x24
 8105f2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105f2e:	4baf      	ldr	r3, [pc, #700]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105f30:	691b      	ldr	r3, [r3, #16]
 8105f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105f36:	2b18      	cmp	r3, #24
 8105f38:	f200 814e 	bhi.w	81061d8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8105f3c:	a201      	add	r2, pc, #4	; (adr r2, 8105f44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f42:	bf00      	nop
 8105f44:	08105fa9 	.word	0x08105fa9
 8105f48:	081061d9 	.word	0x081061d9
 8105f4c:	081061d9 	.word	0x081061d9
 8105f50:	081061d9 	.word	0x081061d9
 8105f54:	081061d9 	.word	0x081061d9
 8105f58:	081061d9 	.word	0x081061d9
 8105f5c:	081061d9 	.word	0x081061d9
 8105f60:	081061d9 	.word	0x081061d9
 8105f64:	08105fcf 	.word	0x08105fcf
 8105f68:	081061d9 	.word	0x081061d9
 8105f6c:	081061d9 	.word	0x081061d9
 8105f70:	081061d9 	.word	0x081061d9
 8105f74:	081061d9 	.word	0x081061d9
 8105f78:	081061d9 	.word	0x081061d9
 8105f7c:	081061d9 	.word	0x081061d9
 8105f80:	081061d9 	.word	0x081061d9
 8105f84:	08105fd5 	.word	0x08105fd5
 8105f88:	081061d9 	.word	0x081061d9
 8105f8c:	081061d9 	.word	0x081061d9
 8105f90:	081061d9 	.word	0x081061d9
 8105f94:	081061d9 	.word	0x081061d9
 8105f98:	081061d9 	.word	0x081061d9
 8105f9c:	081061d9 	.word	0x081061d9
 8105fa0:	081061d9 	.word	0x081061d9
 8105fa4:	08105fdb 	.word	0x08105fdb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105fa8:	4b90      	ldr	r3, [pc, #576]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	f003 0320 	and.w	r3, r3, #32
 8105fb0:	2b00      	cmp	r3, #0
 8105fb2:	d009      	beq.n	8105fc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105fb4:	4b8d      	ldr	r3, [pc, #564]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	08db      	lsrs	r3, r3, #3
 8105fba:	f003 0303 	and.w	r3, r3, #3
 8105fbe:	4a8c      	ldr	r2, [pc, #560]	; (81061f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8105fc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8105fc6:	e10a      	b.n	81061de <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105fc8:	4b89      	ldr	r3, [pc, #548]	; (81061f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105fca:	61bb      	str	r3, [r7, #24]
    break;
 8105fcc:	e107      	b.n	81061de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8105fce:	4b89      	ldr	r3, [pc, #548]	; (81061f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8105fd0:	61bb      	str	r3, [r7, #24]
    break;
 8105fd2:	e104      	b.n	81061de <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8105fd4:	4b88      	ldr	r3, [pc, #544]	; (81061f8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8105fd6:	61bb      	str	r3, [r7, #24]
    break;
 8105fd8:	e101      	b.n	81061de <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105fda:	4b84      	ldr	r3, [pc, #528]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fde:	f003 0303 	and.w	r3, r3, #3
 8105fe2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8105fe4:	4b81      	ldr	r3, [pc, #516]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105fe8:	091b      	lsrs	r3, r3, #4
 8105fea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105fee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105ff0:	4b7e      	ldr	r3, [pc, #504]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ff4:	f003 0301 	and.w	r3, r3, #1
 8105ff8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105ffa:	4b7c      	ldr	r3, [pc, #496]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105ffe:	08db      	lsrs	r3, r3, #3
 8106000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106004:	68fa      	ldr	r2, [r7, #12]
 8106006:	fb02 f303 	mul.w	r3, r2, r3
 810600a:	ee07 3a90 	vmov	s15, r3
 810600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106012:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8106016:	693b      	ldr	r3, [r7, #16]
 8106018:	2b00      	cmp	r3, #0
 810601a:	f000 80da 	beq.w	81061d2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 810601e:	697b      	ldr	r3, [r7, #20]
 8106020:	2b01      	cmp	r3, #1
 8106022:	d05a      	beq.n	81060da <HAL_RCC_GetSysClockFreq+0x1b2>
 8106024:	2b01      	cmp	r3, #1
 8106026:	d302      	bcc.n	810602e <HAL_RCC_GetSysClockFreq+0x106>
 8106028:	2b02      	cmp	r3, #2
 810602a:	d078      	beq.n	810611e <HAL_RCC_GetSysClockFreq+0x1f6>
 810602c:	e099      	b.n	8106162 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810602e:	4b6f      	ldr	r3, [pc, #444]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	f003 0320 	and.w	r3, r3, #32
 8106036:	2b00      	cmp	r3, #0
 8106038:	d02d      	beq.n	8106096 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810603a:	4b6c      	ldr	r3, [pc, #432]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 810603c:	681b      	ldr	r3, [r3, #0]
 810603e:	08db      	lsrs	r3, r3, #3
 8106040:	f003 0303 	and.w	r3, r3, #3
 8106044:	4a6a      	ldr	r2, [pc, #424]	; (81061f0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8106046:	fa22 f303 	lsr.w	r3, r2, r3
 810604a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	ee07 3a90 	vmov	s15, r3
 8106052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106056:	693b      	ldr	r3, [r7, #16]
 8106058:	ee07 3a90 	vmov	s15, r3
 810605c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106064:	4b61      	ldr	r3, [pc, #388]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810606c:	ee07 3a90 	vmov	s15, r3
 8106070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106074:	ed97 6a02 	vldr	s12, [r7, #8]
 8106078:	eddf 5a60 	vldr	s11, [pc, #384]	; 81061fc <HAL_RCC_GetSysClockFreq+0x2d4>
 810607c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106084:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810608c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106090:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8106094:	e087      	b.n	81061a6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106096:	693b      	ldr	r3, [r7, #16]
 8106098:	ee07 3a90 	vmov	s15, r3
 810609c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060a0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8106200 <HAL_RCC_GetSysClockFreq+0x2d8>
 81060a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060a8:	4b50      	ldr	r3, [pc, #320]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 81060aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81060ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060b0:	ee07 3a90 	vmov	s15, r3
 81060b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060b8:	ed97 6a02 	vldr	s12, [r7, #8]
 81060bc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81061fc <HAL_RCC_GetSysClockFreq+0x2d4>
 81060c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81060cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81060d8:	e065      	b.n	81061a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81060da:	693b      	ldr	r3, [r7, #16]
 81060dc:	ee07 3a90 	vmov	s15, r3
 81060e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060e4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8106204 <HAL_RCC_GetSysClockFreq+0x2dc>
 81060e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060ec:	4b3f      	ldr	r3, [pc, #252]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 81060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81060f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060f4:	ee07 3a90 	vmov	s15, r3
 81060f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8106100:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81061fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8106104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810610c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106118:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810611c:	e043      	b.n	81061a6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810611e:	693b      	ldr	r3, [r7, #16]
 8106120:	ee07 3a90 	vmov	s15, r3
 8106124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106128:	eddf 6a37 	vldr	s13, [pc, #220]	; 8106208 <HAL_RCC_GetSysClockFreq+0x2e0>
 810612c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106130:	4b2e      	ldr	r3, [pc, #184]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106138:	ee07 3a90 	vmov	s15, r3
 810613c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106140:	ed97 6a02 	vldr	s12, [r7, #8]
 8106144:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81061fc <HAL_RCC_GetSysClockFreq+0x2d4>
 8106148:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810614c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106150:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106154:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106158:	ee67 7a27 	vmul.f32	s15, s14, s15
 810615c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106160:	e021      	b.n	81061a6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106162:	693b      	ldr	r3, [r7, #16]
 8106164:	ee07 3a90 	vmov	s15, r3
 8106168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810616c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8106204 <HAL_RCC_GetSysClockFreq+0x2dc>
 8106170:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106174:	4b1d      	ldr	r3, [pc, #116]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8106176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810617c:	ee07 3a90 	vmov	s15, r3
 8106180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106184:	ed97 6a02 	vldr	s12, [r7, #8]
 8106188:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81061fc <HAL_RCC_GetSysClockFreq+0x2d4>
 810618c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106198:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810619c:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81061a4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81061a6:	4b11      	ldr	r3, [pc, #68]	; (81061ec <HAL_RCC_GetSysClockFreq+0x2c4>)
 81061a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81061aa:	0a5b      	lsrs	r3, r3, #9
 81061ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81061b0:	3301      	adds	r3, #1
 81061b2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81061b4:	683b      	ldr	r3, [r7, #0]
 81061b6:	ee07 3a90 	vmov	s15, r3
 81061ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81061be:	edd7 6a07 	vldr	s13, [r7, #28]
 81061c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81061c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81061ca:	ee17 3a90 	vmov	r3, s15
 81061ce:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81061d0:	e005      	b.n	81061de <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 81061d2:	2300      	movs	r3, #0
 81061d4:	61bb      	str	r3, [r7, #24]
    break;
 81061d6:	e002      	b.n	81061de <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81061d8:	4b06      	ldr	r3, [pc, #24]	; (81061f4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81061da:	61bb      	str	r3, [r7, #24]
    break;
 81061dc:	bf00      	nop
  }

  return sysclockfreq;
 81061de:	69bb      	ldr	r3, [r7, #24]
}
 81061e0:	4618      	mov	r0, r3
 81061e2:	3724      	adds	r7, #36	; 0x24
 81061e4:	46bd      	mov	sp, r7
 81061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ea:	4770      	bx	lr
 81061ec:	58024400 	.word	0x58024400
 81061f0:	03d09000 	.word	0x03d09000
 81061f4:	003d0900 	.word	0x003d0900
 81061f8:	007a1200 	.word	0x007a1200
 81061fc:	46000000 	.word	0x46000000
 8106200:	4c742400 	.word	0x4c742400
 8106204:	4a742400 	.word	0x4a742400
 8106208:	4af42400 	.word	0x4af42400

0810620c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810620c:	b580      	push	{r7, lr}
 810620e:	b082      	sub	sp, #8
 8106210:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8106212:	f7ff fe89 	bl	8105f28 <HAL_RCC_GetSysClockFreq>
 8106216:	4601      	mov	r1, r0
 8106218:	4b11      	ldr	r3, [pc, #68]	; (8106260 <HAL_RCC_GetHCLKFreq+0x54>)
 810621a:	699b      	ldr	r3, [r3, #24]
 810621c:	0a1b      	lsrs	r3, r3, #8
 810621e:	f003 030f 	and.w	r3, r3, #15
 8106222:	4a10      	ldr	r2, [pc, #64]	; (8106264 <HAL_RCC_GetHCLKFreq+0x58>)
 8106224:	5cd3      	ldrb	r3, [r2, r3]
 8106226:	f003 031f 	and.w	r3, r3, #31
 810622a:	fa21 f303 	lsr.w	r3, r1, r3
 810622e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106230:	4b0b      	ldr	r3, [pc, #44]	; (8106260 <HAL_RCC_GetHCLKFreq+0x54>)
 8106232:	699b      	ldr	r3, [r3, #24]
 8106234:	f003 030f 	and.w	r3, r3, #15
 8106238:	4a0a      	ldr	r2, [pc, #40]	; (8106264 <HAL_RCC_GetHCLKFreq+0x58>)
 810623a:	5cd3      	ldrb	r3, [r2, r3]
 810623c:	f003 031f 	and.w	r3, r3, #31
 8106240:	687a      	ldr	r2, [r7, #4]
 8106242:	fa22 f303 	lsr.w	r3, r2, r3
 8106246:	4a08      	ldr	r2, [pc, #32]	; (8106268 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106248:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810624a:	4b07      	ldr	r3, [pc, #28]	; (8106268 <HAL_RCC_GetHCLKFreq+0x5c>)
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	4a07      	ldr	r2, [pc, #28]	; (810626c <HAL_RCC_GetHCLKFreq+0x60>)
 8106250:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106252:	4b05      	ldr	r3, [pc, #20]	; (8106268 <HAL_RCC_GetHCLKFreq+0x5c>)
 8106254:	681b      	ldr	r3, [r3, #0]
}
 8106256:	4618      	mov	r0, r3
 8106258:	3708      	adds	r7, #8
 810625a:	46bd      	mov	sp, r7
 810625c:	bd80      	pop	{r7, pc}
 810625e:	bf00      	nop
 8106260:	58024400 	.word	0x58024400
 8106264:	0810dc10 	.word	0x0810dc10
 8106268:	10000004 	.word	0x10000004
 810626c:	10000000 	.word	0x10000000

08106270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106270:	b580      	push	{r7, lr}
 8106272:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106274:	f7ff ffca 	bl	810620c <HAL_RCC_GetHCLKFreq>
 8106278:	4601      	mov	r1, r0
 810627a:	4b06      	ldr	r3, [pc, #24]	; (8106294 <HAL_RCC_GetPCLK1Freq+0x24>)
 810627c:	69db      	ldr	r3, [r3, #28]
 810627e:	091b      	lsrs	r3, r3, #4
 8106280:	f003 0307 	and.w	r3, r3, #7
 8106284:	4a04      	ldr	r2, [pc, #16]	; (8106298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8106286:	5cd3      	ldrb	r3, [r2, r3]
 8106288:	f003 031f 	and.w	r3, r3, #31
 810628c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106290:	4618      	mov	r0, r3
 8106292:	bd80      	pop	{r7, pc}
 8106294:	58024400 	.word	0x58024400
 8106298:	0810dc10 	.word	0x0810dc10

0810629c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810629c:	b580      	push	{r7, lr}
 810629e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81062a0:	f7ff ffb4 	bl	810620c <HAL_RCC_GetHCLKFreq>
 81062a4:	4601      	mov	r1, r0
 81062a6:	4b06      	ldr	r3, [pc, #24]	; (81062c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 81062a8:	69db      	ldr	r3, [r3, #28]
 81062aa:	0a1b      	lsrs	r3, r3, #8
 81062ac:	f003 0307 	and.w	r3, r3, #7
 81062b0:	4a04      	ldr	r2, [pc, #16]	; (81062c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81062b2:	5cd3      	ldrb	r3, [r2, r3]
 81062b4:	f003 031f 	and.w	r3, r3, #31
 81062b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81062bc:	4618      	mov	r0, r3
 81062be:	bd80      	pop	{r7, pc}
 81062c0:	58024400 	.word	0x58024400
 81062c4:	0810dc10 	.word	0x0810dc10

081062c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81062c8:	b480      	push	{r7}
 81062ca:	b083      	sub	sp, #12
 81062cc:	af00      	add	r7, sp, #0
 81062ce:	6078      	str	r0, [r7, #4]
 81062d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	223f      	movs	r2, #63	; 0x3f
 81062d6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81062d8:	4b1a      	ldr	r3, [pc, #104]	; (8106344 <HAL_RCC_GetClockConfig+0x7c>)
 81062da:	691b      	ldr	r3, [r3, #16]
 81062dc:	f003 0207 	and.w	r2, r3, #7
 81062e0:	687b      	ldr	r3, [r7, #4]
 81062e2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81062e4:	4b17      	ldr	r3, [pc, #92]	; (8106344 <HAL_RCC_GetClockConfig+0x7c>)
 81062e6:	699b      	ldr	r3, [r3, #24]
 81062e8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81062f0:	4b14      	ldr	r3, [pc, #80]	; (8106344 <HAL_RCC_GetClockConfig+0x7c>)
 81062f2:	699b      	ldr	r3, [r3, #24]
 81062f4:	f003 020f 	and.w	r2, r3, #15
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81062fc:	4b11      	ldr	r3, [pc, #68]	; (8106344 <HAL_RCC_GetClockConfig+0x7c>)
 81062fe:	699b      	ldr	r3, [r3, #24]
 8106300:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106304:	687b      	ldr	r3, [r7, #4]
 8106306:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8106308:	4b0e      	ldr	r3, [pc, #56]	; (8106344 <HAL_RCC_GetClockConfig+0x7c>)
 810630a:	69db      	ldr	r3, [r3, #28]
 810630c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106310:	687b      	ldr	r3, [r7, #4]
 8106312:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8106314:	4b0b      	ldr	r3, [pc, #44]	; (8106344 <HAL_RCC_GetClockConfig+0x7c>)
 8106316:	69db      	ldr	r3, [r3, #28]
 8106318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8106320:	4b08      	ldr	r3, [pc, #32]	; (8106344 <HAL_RCC_GetClockConfig+0x7c>)
 8106322:	6a1b      	ldr	r3, [r3, #32]
 8106324:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810632c:	4b06      	ldr	r3, [pc, #24]	; (8106348 <HAL_RCC_GetClockConfig+0x80>)
 810632e:	681b      	ldr	r3, [r3, #0]
 8106330:	f003 020f 	and.w	r2, r3, #15
 8106334:	683b      	ldr	r3, [r7, #0]
 8106336:	601a      	str	r2, [r3, #0]
}
 8106338:	bf00      	nop
 810633a:	370c      	adds	r7, #12
 810633c:	46bd      	mov	sp, r7
 810633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106342:	4770      	bx	lr
 8106344:	58024400 	.word	0x58024400
 8106348:	52002000 	.word	0x52002000

0810634c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810634c:	b580      	push	{r7, lr}
 810634e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8106350:	f7ff ff5c 	bl	810620c <HAL_RCC_GetHCLKFreq>
 8106354:	4601      	mov	r1, r0
 8106356:	4b06      	ldr	r3, [pc, #24]	; (8106370 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106358:	6a1b      	ldr	r3, [r3, #32]
 810635a:	091b      	lsrs	r3, r3, #4
 810635c:	f003 0307 	and.w	r3, r3, #7
 8106360:	4a04      	ldr	r2, [pc, #16]	; (8106374 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8106362:	5cd3      	ldrb	r3, [r2, r3]
 8106364:	f003 031f 	and.w	r3, r3, #31
 8106368:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810636c:	4618      	mov	r0, r3
 810636e:	bd80      	pop	{r7, pc}
 8106370:	58024400 	.word	0x58024400
 8106374:	0810dc10 	.word	0x0810dc10

08106378 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8106378:	b480      	push	{r7}
 810637a:	b089      	sub	sp, #36	; 0x24
 810637c:	af00      	add	r7, sp, #0
 810637e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106380:	4b9d      	ldr	r3, [pc, #628]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106384:	f003 0303 	and.w	r3, r3, #3
 8106388:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810638a:	4b9b      	ldr	r3, [pc, #620]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810638c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810638e:	0b1b      	lsrs	r3, r3, #12
 8106390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106394:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106396:	4b98      	ldr	r3, [pc, #608]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810639a:	091b      	lsrs	r3, r3, #4
 810639c:	f003 0301 	and.w	r3, r3, #1
 81063a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81063a2:	4b95      	ldr	r3, [pc, #596]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81063a6:	08db      	lsrs	r3, r3, #3
 81063a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81063ac:	693a      	ldr	r2, [r7, #16]
 81063ae:	fb02 f303 	mul.w	r3, r2, r3
 81063b2:	ee07 3a90 	vmov	s15, r3
 81063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81063ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81063be:	697b      	ldr	r3, [r7, #20]
 81063c0:	2b00      	cmp	r3, #0
 81063c2:	f000 810a 	beq.w	81065da <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81063c6:	69bb      	ldr	r3, [r7, #24]
 81063c8:	2b01      	cmp	r3, #1
 81063ca:	d05a      	beq.n	8106482 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81063cc:	2b01      	cmp	r3, #1
 81063ce:	d302      	bcc.n	81063d6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81063d0:	2b02      	cmp	r3, #2
 81063d2:	d078      	beq.n	81064c6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81063d4:	e099      	b.n	810650a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81063d6:	4b88      	ldr	r3, [pc, #544]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81063d8:	681b      	ldr	r3, [r3, #0]
 81063da:	f003 0320 	and.w	r3, r3, #32
 81063de:	2b00      	cmp	r3, #0
 81063e0:	d02d      	beq.n	810643e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81063e2:	4b85      	ldr	r3, [pc, #532]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81063e4:	681b      	ldr	r3, [r3, #0]
 81063e6:	08db      	lsrs	r3, r3, #3
 81063e8:	f003 0303 	and.w	r3, r3, #3
 81063ec:	4a83      	ldr	r2, [pc, #524]	; (81065fc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 81063ee:	fa22 f303 	lsr.w	r3, r2, r3
 81063f2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81063f4:	68bb      	ldr	r3, [r7, #8]
 81063f6:	ee07 3a90 	vmov	s15, r3
 81063fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81063fe:	697b      	ldr	r3, [r7, #20]
 8106400:	ee07 3a90 	vmov	s15, r3
 8106404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810640c:	4b7a      	ldr	r3, [pc, #488]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106414:	ee07 3a90 	vmov	s15, r3
 8106418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810641c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106420:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106600 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106424:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106428:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810642c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106438:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810643c:	e087      	b.n	810654e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810643e:	697b      	ldr	r3, [r7, #20]
 8106440:	ee07 3a90 	vmov	s15, r3
 8106444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106448:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106604 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 810644c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106450:	4b69      	ldr	r3, [pc, #420]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106458:	ee07 3a90 	vmov	s15, r3
 810645c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106460:	ed97 6a03 	vldr	s12, [r7, #12]
 8106464:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106600 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106468:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810646c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106474:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106478:	ee67 7a27 	vmul.f32	s15, s14, s15
 810647c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106480:	e065      	b.n	810654e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8106482:	697b      	ldr	r3, [r7, #20]
 8106484:	ee07 3a90 	vmov	s15, r3
 8106488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810648c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106494:	4b58      	ldr	r3, [pc, #352]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810649c:	ee07 3a90 	vmov	s15, r3
 81064a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064a4:	ed97 6a03 	vldr	s12, [r7, #12]
 81064a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106600 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81064ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81064c4:	e043      	b.n	810654e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81064c6:	697b      	ldr	r3, [r7, #20]
 81064c8:	ee07 3a90 	vmov	s15, r3
 81064cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810660c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81064d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064d8:	4b47      	ldr	r3, [pc, #284]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81064dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064e0:	ee07 3a90 	vmov	s15, r3
 81064e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064e8:	ed97 6a03 	vldr	s12, [r7, #12]
 81064ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106600 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81064f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106508:	e021      	b.n	810654e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810650a:	697b      	ldr	r3, [r7, #20]
 810650c:	ee07 3a90 	vmov	s15, r3
 8106510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106514:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8106608 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8106518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810651c:	4b36      	ldr	r3, [pc, #216]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106524:	ee07 3a90 	vmov	s15, r3
 8106528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810652c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106530:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106600 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8106534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810653c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810654c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810654e:	4b2a      	ldr	r3, [pc, #168]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8106550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106552:	0a5b      	lsrs	r3, r3, #9
 8106554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106558:	ee07 3a90 	vmov	s15, r3
 810655c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106568:	edd7 6a07 	vldr	s13, [r7, #28]
 810656c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106574:	ee17 2a90 	vmov	r2, s15
 8106578:	687b      	ldr	r3, [r7, #4]
 810657a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 810657c:	4b1e      	ldr	r3, [pc, #120]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106580:	0c1b      	lsrs	r3, r3, #16
 8106582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106586:	ee07 3a90 	vmov	s15, r3
 810658a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810658e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106596:	edd7 6a07 	vldr	s13, [r7, #28]
 810659a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810659e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065a2:	ee17 2a90 	vmov	r2, s15
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81065aa:	4b13      	ldr	r3, [pc, #76]	; (81065f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81065ae:	0e1b      	lsrs	r3, r3, #24
 81065b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81065b4:	ee07 3a90 	vmov	s15, r3
 81065b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81065c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81065c4:	edd7 6a07 	vldr	s13, [r7, #28]
 81065c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065d0:	ee17 2a90 	vmov	r2, s15
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81065d8:	e008      	b.n	81065ec <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	2200      	movs	r2, #0
 81065de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	2200      	movs	r2, #0
 81065e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	2200      	movs	r2, #0
 81065ea:	609a      	str	r2, [r3, #8]
}
 81065ec:	bf00      	nop
 81065ee:	3724      	adds	r7, #36	; 0x24
 81065f0:	46bd      	mov	sp, r7
 81065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065f6:	4770      	bx	lr
 81065f8:	58024400 	.word	0x58024400
 81065fc:	03d09000 	.word	0x03d09000
 8106600:	46000000 	.word	0x46000000
 8106604:	4c742400 	.word	0x4c742400
 8106608:	4a742400 	.word	0x4a742400
 810660c:	4af42400 	.word	0x4af42400

08106610 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8106610:	b480      	push	{r7}
 8106612:	b089      	sub	sp, #36	; 0x24
 8106614:	af00      	add	r7, sp, #0
 8106616:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106618:	4b9d      	ldr	r3, [pc, #628]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810661c:	f003 0303 	and.w	r3, r3, #3
 8106620:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8106622:	4b9b      	ldr	r3, [pc, #620]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106626:	0d1b      	lsrs	r3, r3, #20
 8106628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810662c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810662e:	4b98      	ldr	r3, [pc, #608]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106632:	0a1b      	lsrs	r3, r3, #8
 8106634:	f003 0301 	and.w	r3, r3, #1
 8106638:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 810663a:	4b95      	ldr	r3, [pc, #596]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810663c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810663e:	08db      	lsrs	r3, r3, #3
 8106640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106644:	693a      	ldr	r2, [r7, #16]
 8106646:	fb02 f303 	mul.w	r3, r2, r3
 810664a:	ee07 3a90 	vmov	s15, r3
 810664e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106656:	697b      	ldr	r3, [r7, #20]
 8106658:	2b00      	cmp	r3, #0
 810665a:	f000 810a 	beq.w	8106872 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 810665e:	69bb      	ldr	r3, [r7, #24]
 8106660:	2b01      	cmp	r3, #1
 8106662:	d05a      	beq.n	810671a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8106664:	2b01      	cmp	r3, #1
 8106666:	d302      	bcc.n	810666e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8106668:	2b02      	cmp	r3, #2
 810666a:	d078      	beq.n	810675e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 810666c:	e099      	b.n	81067a2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810666e:	4b88      	ldr	r3, [pc, #544]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106670:	681b      	ldr	r3, [r3, #0]
 8106672:	f003 0320 	and.w	r3, r3, #32
 8106676:	2b00      	cmp	r3, #0
 8106678:	d02d      	beq.n	81066d6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810667a:	4b85      	ldr	r3, [pc, #532]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810667c:	681b      	ldr	r3, [r3, #0]
 810667e:	08db      	lsrs	r3, r3, #3
 8106680:	f003 0303 	and.w	r3, r3, #3
 8106684:	4a83      	ldr	r2, [pc, #524]	; (8106894 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8106686:	fa22 f303 	lsr.w	r3, r2, r3
 810668a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810668c:	68bb      	ldr	r3, [r7, #8]
 810668e:	ee07 3a90 	vmov	s15, r3
 8106692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106696:	697b      	ldr	r3, [r7, #20]
 8106698:	ee07 3a90 	vmov	s15, r3
 810669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066a4:	4b7a      	ldr	r3, [pc, #488]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066ac:	ee07 3a90 	vmov	s15, r3
 81066b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066b4:	ed97 6a03 	vldr	s12, [r7, #12]
 81066b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106898 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81066bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81066c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81066c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81066c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81066cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81066d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81066d4:	e087      	b.n	81067e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81066d6:	697b      	ldr	r3, [r7, #20]
 81066d8:	ee07 3a90 	vmov	s15, r3
 81066dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81066e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810689c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 81066e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81066e8:	4b69      	ldr	r3, [pc, #420]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81066ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81066f0:	ee07 3a90 	vmov	s15, r3
 81066f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81066f8:	ed97 6a03 	vldr	s12, [r7, #12]
 81066fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106898 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106700:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106704:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106708:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810670c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106714:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8106718:	e065      	b.n	81067e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810671a:	697b      	ldr	r3, [r7, #20]
 810671c:	ee07 3a90 	vmov	s15, r3
 8106720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106724:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81068a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8106728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810672c:	4b58      	ldr	r3, [pc, #352]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106734:	ee07 3a90 	vmov	s15, r3
 8106738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810673c:	ed97 6a03 	vldr	s12, [r7, #12]
 8106740:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106898 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810674c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106758:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810675c:	e043      	b.n	81067e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810675e:	697b      	ldr	r3, [r7, #20]
 8106760:	ee07 3a90 	vmov	s15, r3
 8106764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106768:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81068a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 810676c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106770:	4b47      	ldr	r3, [pc, #284]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106778:	ee07 3a90 	vmov	s15, r3
 810677c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106780:	ed97 6a03 	vldr	s12, [r7, #12]
 8106784:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106898 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8106788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810678c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106798:	ee67 7a27 	vmul.f32	s15, s14, s15
 810679c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81067a0:	e021      	b.n	81067e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81067a2:	697b      	ldr	r3, [r7, #20]
 81067a4:	ee07 3a90 	vmov	s15, r3
 81067a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81068a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 81067b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81067b4:	4b36      	ldr	r3, [pc, #216]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81067bc:	ee07 3a90 	vmov	s15, r3
 81067c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81067c4:	ed97 6a03 	vldr	s12, [r7, #12]
 81067c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106898 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81067cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81067d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81067d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81067d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81067dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81067e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81067e4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81067e6:	4b2a      	ldr	r3, [pc, #168]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067ea:	0a5b      	lsrs	r3, r3, #9
 81067ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81067f0:	ee07 3a90 	vmov	s15, r3
 81067f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81067f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81067fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106800:	edd7 6a07 	vldr	s13, [r7, #28]
 8106804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810680c:	ee17 2a90 	vmov	r2, s15
 8106810:	687b      	ldr	r3, [r7, #4]
 8106812:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8106814:	4b1e      	ldr	r3, [pc, #120]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106818:	0c1b      	lsrs	r3, r3, #16
 810681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810681e:	ee07 3a90 	vmov	s15, r3
 8106822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810682a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810682e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810683a:	ee17 2a90 	vmov	r2, s15
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8106842:	4b13      	ldr	r3, [pc, #76]	; (8106890 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8106844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106846:	0e1b      	lsrs	r3, r3, #24
 8106848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810684c:	ee07 3a90 	vmov	s15, r3
 8106850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106858:	ee37 7a87 	vadd.f32	s14, s15, s14
 810685c:	edd7 6a07 	vldr	s13, [r7, #28]
 8106860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106868:	ee17 2a90 	vmov	r2, s15
 810686c:	687b      	ldr	r3, [r7, #4]
 810686e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8106870:	e008      	b.n	8106884 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	2200      	movs	r2, #0
 8106876:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	2200      	movs	r2, #0
 810687c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810687e:	687b      	ldr	r3, [r7, #4]
 8106880:	2200      	movs	r2, #0
 8106882:	609a      	str	r2, [r3, #8]
}
 8106884:	bf00      	nop
 8106886:	3724      	adds	r7, #36	; 0x24
 8106888:	46bd      	mov	sp, r7
 810688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810688e:	4770      	bx	lr
 8106890:	58024400 	.word	0x58024400
 8106894:	03d09000 	.word	0x03d09000
 8106898:	46000000 	.word	0x46000000
 810689c:	4c742400 	.word	0x4c742400
 81068a0:	4a742400 	.word	0x4a742400
 81068a4:	4af42400 	.word	0x4af42400

081068a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81068a8:	b580      	push	{r7, lr}
 81068aa:	b082      	sub	sp, #8
 81068ac:	af00      	add	r7, sp, #0
 81068ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	2b00      	cmp	r3, #0
 81068b4:	d101      	bne.n	81068ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81068b6:	2301      	movs	r3, #1
 81068b8:	e049      	b.n	810694e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81068ba:	687b      	ldr	r3, [r7, #4]
 81068bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81068c0:	b2db      	uxtb	r3, r3
 81068c2:	2b00      	cmp	r3, #0
 81068c4:	d106      	bne.n	81068d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81068c6:	687b      	ldr	r3, [r7, #4]
 81068c8:	2200      	movs	r2, #0
 81068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81068ce:	6878      	ldr	r0, [r7, #4]
 81068d0:	f7fb fc28 	bl	8102124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	2202      	movs	r2, #2
 81068d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	681a      	ldr	r2, [r3, #0]
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	3304      	adds	r3, #4
 81068e4:	4619      	mov	r1, r3
 81068e6:	4610      	mov	r0, r2
 81068e8:	f000 fcc8 	bl	810727c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	2201      	movs	r2, #1
 81068f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81068f4:	687b      	ldr	r3, [r7, #4]
 81068f6:	2201      	movs	r2, #1
 81068f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	2201      	movs	r2, #1
 8106900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	2201      	movs	r2, #1
 8106908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	2201      	movs	r2, #1
 8106910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106914:	687b      	ldr	r3, [r7, #4]
 8106916:	2201      	movs	r2, #1
 8106918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810691c:	687b      	ldr	r3, [r7, #4]
 810691e:	2201      	movs	r2, #1
 8106920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106924:	687b      	ldr	r3, [r7, #4]
 8106926:	2201      	movs	r2, #1
 8106928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810692c:	687b      	ldr	r3, [r7, #4]
 810692e:	2201      	movs	r2, #1
 8106930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106934:	687b      	ldr	r3, [r7, #4]
 8106936:	2201      	movs	r2, #1
 8106938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	2201      	movs	r2, #1
 8106940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106944:	687b      	ldr	r3, [r7, #4]
 8106946:	2201      	movs	r2, #1
 8106948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810694c:	2300      	movs	r3, #0
}
 810694e:	4618      	mov	r0, r3
 8106950:	3708      	adds	r7, #8
 8106952:	46bd      	mov	sp, r7
 8106954:	bd80      	pop	{r7, pc}
	...

08106958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106958:	b480      	push	{r7}
 810695a:	b085      	sub	sp, #20
 810695c:	af00      	add	r7, sp, #0
 810695e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106966:	b2db      	uxtb	r3, r3
 8106968:	2b01      	cmp	r3, #1
 810696a:	d001      	beq.n	8106970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810696c:	2301      	movs	r3, #1
 810696e:	e021      	b.n	81069b4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	2202      	movs	r2, #2
 8106974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	681b      	ldr	r3, [r3, #0]
 810697c:	68da      	ldr	r2, [r3, #12]
 810697e:	687b      	ldr	r3, [r7, #4]
 8106980:	681b      	ldr	r3, [r3, #0]
 8106982:	f042 0201 	orr.w	r2, r2, #1
 8106986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	681b      	ldr	r3, [r3, #0]
 810698c:	689a      	ldr	r2, [r3, #8]
 810698e:	4b0c      	ldr	r3, [pc, #48]	; (81069c0 <HAL_TIM_Base_Start_IT+0x68>)
 8106990:	4013      	ands	r3, r2
 8106992:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106994:	68fb      	ldr	r3, [r7, #12]
 8106996:	2b06      	cmp	r3, #6
 8106998:	d00b      	beq.n	81069b2 <HAL_TIM_Base_Start_IT+0x5a>
 810699a:	68fb      	ldr	r3, [r7, #12]
 810699c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81069a0:	d007      	beq.n	81069b2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 81069a2:	687b      	ldr	r3, [r7, #4]
 81069a4:	681b      	ldr	r3, [r3, #0]
 81069a6:	681a      	ldr	r2, [r3, #0]
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	681b      	ldr	r3, [r3, #0]
 81069ac:	f042 0201 	orr.w	r2, r2, #1
 81069b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81069b2:	2300      	movs	r3, #0
}
 81069b4:	4618      	mov	r0, r3
 81069b6:	3714      	adds	r7, #20
 81069b8:	46bd      	mov	sp, r7
 81069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069be:	4770      	bx	lr
 81069c0:	00010007 	.word	0x00010007

081069c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81069c4:	b580      	push	{r7, lr}
 81069c6:	b082      	sub	sp, #8
 81069c8:	af00      	add	r7, sp, #0
 81069ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81069cc:	687b      	ldr	r3, [r7, #4]
 81069ce:	2b00      	cmp	r3, #0
 81069d0:	d101      	bne.n	81069d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81069d2:	2301      	movs	r3, #1
 81069d4:	e049      	b.n	8106a6a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81069d6:	687b      	ldr	r3, [r7, #4]
 81069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81069dc:	b2db      	uxtb	r3, r3
 81069de:	2b00      	cmp	r3, #0
 81069e0:	d106      	bne.n	81069f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81069e2:	687b      	ldr	r3, [r7, #4]
 81069e4:	2200      	movs	r2, #0
 81069e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81069ea:	6878      	ldr	r0, [r7, #4]
 81069ec:	f000 f841 	bl	8106a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81069f0:	687b      	ldr	r3, [r7, #4]
 81069f2:	2202      	movs	r2, #2
 81069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	681a      	ldr	r2, [r3, #0]
 81069fc:	687b      	ldr	r3, [r7, #4]
 81069fe:	3304      	adds	r3, #4
 8106a00:	4619      	mov	r1, r3
 8106a02:	4610      	mov	r0, r2
 8106a04:	f000 fc3a 	bl	810727c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106a08:	687b      	ldr	r3, [r7, #4]
 8106a0a:	2201      	movs	r2, #1
 8106a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106a10:	687b      	ldr	r3, [r7, #4]
 8106a12:	2201      	movs	r2, #1
 8106a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	2201      	movs	r2, #1
 8106a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106a20:	687b      	ldr	r3, [r7, #4]
 8106a22:	2201      	movs	r2, #1
 8106a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	2201      	movs	r2, #1
 8106a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	2201      	movs	r2, #1
 8106a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106a38:	687b      	ldr	r3, [r7, #4]
 8106a3a:	2201      	movs	r2, #1
 8106a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106a40:	687b      	ldr	r3, [r7, #4]
 8106a42:	2201      	movs	r2, #1
 8106a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	2201      	movs	r2, #1
 8106a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	2201      	movs	r2, #1
 8106a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	2201      	movs	r2, #1
 8106a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106a60:	687b      	ldr	r3, [r7, #4]
 8106a62:	2201      	movs	r2, #1
 8106a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106a68:	2300      	movs	r3, #0
}
 8106a6a:	4618      	mov	r0, r3
 8106a6c:	3708      	adds	r7, #8
 8106a6e:	46bd      	mov	sp, r7
 8106a70:	bd80      	pop	{r7, pc}

08106a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8106a72:	b480      	push	{r7}
 8106a74:	b083      	sub	sp, #12
 8106a76:	af00      	add	r7, sp, #0
 8106a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106a7a:	bf00      	nop
 8106a7c:	370c      	adds	r7, #12
 8106a7e:	46bd      	mov	sp, r7
 8106a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a84:	4770      	bx	lr
	...

08106a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106a88:	b580      	push	{r7, lr}
 8106a8a:	b084      	sub	sp, #16
 8106a8c:	af00      	add	r7, sp, #0
 8106a8e:	6078      	str	r0, [r7, #4]
 8106a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106a92:	683b      	ldr	r3, [r7, #0]
 8106a94:	2b00      	cmp	r3, #0
 8106a96:	d109      	bne.n	8106aac <HAL_TIM_PWM_Start+0x24>
 8106a98:	687b      	ldr	r3, [r7, #4]
 8106a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106a9e:	b2db      	uxtb	r3, r3
 8106aa0:	2b01      	cmp	r3, #1
 8106aa2:	bf14      	ite	ne
 8106aa4:	2301      	movne	r3, #1
 8106aa6:	2300      	moveq	r3, #0
 8106aa8:	b2db      	uxtb	r3, r3
 8106aaa:	e03c      	b.n	8106b26 <HAL_TIM_PWM_Start+0x9e>
 8106aac:	683b      	ldr	r3, [r7, #0]
 8106aae:	2b04      	cmp	r3, #4
 8106ab0:	d109      	bne.n	8106ac6 <HAL_TIM_PWM_Start+0x3e>
 8106ab2:	687b      	ldr	r3, [r7, #4]
 8106ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106ab8:	b2db      	uxtb	r3, r3
 8106aba:	2b01      	cmp	r3, #1
 8106abc:	bf14      	ite	ne
 8106abe:	2301      	movne	r3, #1
 8106ac0:	2300      	moveq	r3, #0
 8106ac2:	b2db      	uxtb	r3, r3
 8106ac4:	e02f      	b.n	8106b26 <HAL_TIM_PWM_Start+0x9e>
 8106ac6:	683b      	ldr	r3, [r7, #0]
 8106ac8:	2b08      	cmp	r3, #8
 8106aca:	d109      	bne.n	8106ae0 <HAL_TIM_PWM_Start+0x58>
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106ad2:	b2db      	uxtb	r3, r3
 8106ad4:	2b01      	cmp	r3, #1
 8106ad6:	bf14      	ite	ne
 8106ad8:	2301      	movne	r3, #1
 8106ada:	2300      	moveq	r3, #0
 8106adc:	b2db      	uxtb	r3, r3
 8106ade:	e022      	b.n	8106b26 <HAL_TIM_PWM_Start+0x9e>
 8106ae0:	683b      	ldr	r3, [r7, #0]
 8106ae2:	2b0c      	cmp	r3, #12
 8106ae4:	d109      	bne.n	8106afa <HAL_TIM_PWM_Start+0x72>
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106aec:	b2db      	uxtb	r3, r3
 8106aee:	2b01      	cmp	r3, #1
 8106af0:	bf14      	ite	ne
 8106af2:	2301      	movne	r3, #1
 8106af4:	2300      	moveq	r3, #0
 8106af6:	b2db      	uxtb	r3, r3
 8106af8:	e015      	b.n	8106b26 <HAL_TIM_PWM_Start+0x9e>
 8106afa:	683b      	ldr	r3, [r7, #0]
 8106afc:	2b10      	cmp	r3, #16
 8106afe:	d109      	bne.n	8106b14 <HAL_TIM_PWM_Start+0x8c>
 8106b00:	687b      	ldr	r3, [r7, #4]
 8106b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106b06:	b2db      	uxtb	r3, r3
 8106b08:	2b01      	cmp	r3, #1
 8106b0a:	bf14      	ite	ne
 8106b0c:	2301      	movne	r3, #1
 8106b0e:	2300      	moveq	r3, #0
 8106b10:	b2db      	uxtb	r3, r3
 8106b12:	e008      	b.n	8106b26 <HAL_TIM_PWM_Start+0x9e>
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106b1a:	b2db      	uxtb	r3, r3
 8106b1c:	2b01      	cmp	r3, #1
 8106b1e:	bf14      	ite	ne
 8106b20:	2301      	movne	r3, #1
 8106b22:	2300      	moveq	r3, #0
 8106b24:	b2db      	uxtb	r3, r3
 8106b26:	2b00      	cmp	r3, #0
 8106b28:	d001      	beq.n	8106b2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8106b2a:	2301      	movs	r3, #1
 8106b2c:	e06e      	b.n	8106c0c <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106b2e:	683b      	ldr	r3, [r7, #0]
 8106b30:	2b00      	cmp	r3, #0
 8106b32:	d104      	bne.n	8106b3e <HAL_TIM_PWM_Start+0xb6>
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	2202      	movs	r2, #2
 8106b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106b3c:	e023      	b.n	8106b86 <HAL_TIM_PWM_Start+0xfe>
 8106b3e:	683b      	ldr	r3, [r7, #0]
 8106b40:	2b04      	cmp	r3, #4
 8106b42:	d104      	bne.n	8106b4e <HAL_TIM_PWM_Start+0xc6>
 8106b44:	687b      	ldr	r3, [r7, #4]
 8106b46:	2202      	movs	r2, #2
 8106b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106b4c:	e01b      	b.n	8106b86 <HAL_TIM_PWM_Start+0xfe>
 8106b4e:	683b      	ldr	r3, [r7, #0]
 8106b50:	2b08      	cmp	r3, #8
 8106b52:	d104      	bne.n	8106b5e <HAL_TIM_PWM_Start+0xd6>
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	2202      	movs	r2, #2
 8106b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106b5c:	e013      	b.n	8106b86 <HAL_TIM_PWM_Start+0xfe>
 8106b5e:	683b      	ldr	r3, [r7, #0]
 8106b60:	2b0c      	cmp	r3, #12
 8106b62:	d104      	bne.n	8106b6e <HAL_TIM_PWM_Start+0xe6>
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	2202      	movs	r2, #2
 8106b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106b6c:	e00b      	b.n	8106b86 <HAL_TIM_PWM_Start+0xfe>
 8106b6e:	683b      	ldr	r3, [r7, #0]
 8106b70:	2b10      	cmp	r3, #16
 8106b72:	d104      	bne.n	8106b7e <HAL_TIM_PWM_Start+0xf6>
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	2202      	movs	r2, #2
 8106b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106b7c:	e003      	b.n	8106b86 <HAL_TIM_PWM_Start+0xfe>
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	2202      	movs	r2, #2
 8106b82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106b86:	687b      	ldr	r3, [r7, #4]
 8106b88:	681b      	ldr	r3, [r3, #0]
 8106b8a:	2201      	movs	r2, #1
 8106b8c:	6839      	ldr	r1, [r7, #0]
 8106b8e:	4618      	mov	r0, r3
 8106b90:	f000 ff78 	bl	8107a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	681b      	ldr	r3, [r3, #0]
 8106b98:	4a1e      	ldr	r2, [pc, #120]	; (8106c14 <HAL_TIM_PWM_Start+0x18c>)
 8106b9a:	4293      	cmp	r3, r2
 8106b9c:	d013      	beq.n	8106bc6 <HAL_TIM_PWM_Start+0x13e>
 8106b9e:	687b      	ldr	r3, [r7, #4]
 8106ba0:	681b      	ldr	r3, [r3, #0]
 8106ba2:	4a1d      	ldr	r2, [pc, #116]	; (8106c18 <HAL_TIM_PWM_Start+0x190>)
 8106ba4:	4293      	cmp	r3, r2
 8106ba6:	d00e      	beq.n	8106bc6 <HAL_TIM_PWM_Start+0x13e>
 8106ba8:	687b      	ldr	r3, [r7, #4]
 8106baa:	681b      	ldr	r3, [r3, #0]
 8106bac:	4a1b      	ldr	r2, [pc, #108]	; (8106c1c <HAL_TIM_PWM_Start+0x194>)
 8106bae:	4293      	cmp	r3, r2
 8106bb0:	d009      	beq.n	8106bc6 <HAL_TIM_PWM_Start+0x13e>
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	681b      	ldr	r3, [r3, #0]
 8106bb6:	4a1a      	ldr	r2, [pc, #104]	; (8106c20 <HAL_TIM_PWM_Start+0x198>)
 8106bb8:	4293      	cmp	r3, r2
 8106bba:	d004      	beq.n	8106bc6 <HAL_TIM_PWM_Start+0x13e>
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	681b      	ldr	r3, [r3, #0]
 8106bc0:	4a18      	ldr	r2, [pc, #96]	; (8106c24 <HAL_TIM_PWM_Start+0x19c>)
 8106bc2:	4293      	cmp	r3, r2
 8106bc4:	d101      	bne.n	8106bca <HAL_TIM_PWM_Start+0x142>
 8106bc6:	2301      	movs	r3, #1
 8106bc8:	e000      	b.n	8106bcc <HAL_TIM_PWM_Start+0x144>
 8106bca:	2300      	movs	r3, #0
 8106bcc:	2b00      	cmp	r3, #0
 8106bce:	d007      	beq.n	8106be0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106bd0:	687b      	ldr	r3, [r7, #4]
 8106bd2:	681b      	ldr	r3, [r3, #0]
 8106bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106bd6:	687b      	ldr	r3, [r7, #4]
 8106bd8:	681b      	ldr	r3, [r3, #0]
 8106bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106bde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106be0:	687b      	ldr	r3, [r7, #4]
 8106be2:	681b      	ldr	r3, [r3, #0]
 8106be4:	689a      	ldr	r2, [r3, #8]
 8106be6:	4b10      	ldr	r3, [pc, #64]	; (8106c28 <HAL_TIM_PWM_Start+0x1a0>)
 8106be8:	4013      	ands	r3, r2
 8106bea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106bec:	68fb      	ldr	r3, [r7, #12]
 8106bee:	2b06      	cmp	r3, #6
 8106bf0:	d00b      	beq.n	8106c0a <HAL_TIM_PWM_Start+0x182>
 8106bf2:	68fb      	ldr	r3, [r7, #12]
 8106bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106bf8:	d007      	beq.n	8106c0a <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8106bfa:	687b      	ldr	r3, [r7, #4]
 8106bfc:	681b      	ldr	r3, [r3, #0]
 8106bfe:	681a      	ldr	r2, [r3, #0]
 8106c00:	687b      	ldr	r3, [r7, #4]
 8106c02:	681b      	ldr	r3, [r3, #0]
 8106c04:	f042 0201 	orr.w	r2, r2, #1
 8106c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8106c0a:	2300      	movs	r3, #0
}
 8106c0c:	4618      	mov	r0, r3
 8106c0e:	3710      	adds	r7, #16
 8106c10:	46bd      	mov	sp, r7
 8106c12:	bd80      	pop	{r7, pc}
 8106c14:	40010000 	.word	0x40010000
 8106c18:	40010400 	.word	0x40010400
 8106c1c:	40014000 	.word	0x40014000
 8106c20:	40014400 	.word	0x40014400
 8106c24:	40014800 	.word	0x40014800
 8106c28:	00010007 	.word	0x00010007

08106c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106c2c:	b580      	push	{r7, lr}
 8106c2e:	b082      	sub	sp, #8
 8106c30:	af00      	add	r7, sp, #0
 8106c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	691b      	ldr	r3, [r3, #16]
 8106c3a:	f003 0302 	and.w	r3, r3, #2
 8106c3e:	2b02      	cmp	r3, #2
 8106c40:	d122      	bne.n	8106c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	681b      	ldr	r3, [r3, #0]
 8106c46:	68db      	ldr	r3, [r3, #12]
 8106c48:	f003 0302 	and.w	r3, r3, #2
 8106c4c:	2b02      	cmp	r3, #2
 8106c4e:	d11b      	bne.n	8106c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106c50:	687b      	ldr	r3, [r7, #4]
 8106c52:	681b      	ldr	r3, [r3, #0]
 8106c54:	f06f 0202 	mvn.w	r2, #2
 8106c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	2201      	movs	r2, #1
 8106c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	681b      	ldr	r3, [r3, #0]
 8106c64:	699b      	ldr	r3, [r3, #24]
 8106c66:	f003 0303 	and.w	r3, r3, #3
 8106c6a:	2b00      	cmp	r3, #0
 8106c6c:	d003      	beq.n	8106c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106c6e:	6878      	ldr	r0, [r7, #4]
 8106c70:	f000 fae6 	bl	8107240 <HAL_TIM_IC_CaptureCallback>
 8106c74:	e005      	b.n	8106c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8106c76:	6878      	ldr	r0, [r7, #4]
 8106c78:	f000 fad8 	bl	810722c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106c7c:	6878      	ldr	r0, [r7, #4]
 8106c7e:	f000 fae9 	bl	8107254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	2200      	movs	r2, #0
 8106c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	681b      	ldr	r3, [r3, #0]
 8106c8c:	691b      	ldr	r3, [r3, #16]
 8106c8e:	f003 0304 	and.w	r3, r3, #4
 8106c92:	2b04      	cmp	r3, #4
 8106c94:	d122      	bne.n	8106cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	681b      	ldr	r3, [r3, #0]
 8106c9a:	68db      	ldr	r3, [r3, #12]
 8106c9c:	f003 0304 	and.w	r3, r3, #4
 8106ca0:	2b04      	cmp	r3, #4
 8106ca2:	d11b      	bne.n	8106cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8106ca4:	687b      	ldr	r3, [r7, #4]
 8106ca6:	681b      	ldr	r3, [r3, #0]
 8106ca8:	f06f 0204 	mvn.w	r2, #4
 8106cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106cae:	687b      	ldr	r3, [r7, #4]
 8106cb0:	2202      	movs	r2, #2
 8106cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	681b      	ldr	r3, [r3, #0]
 8106cb8:	699b      	ldr	r3, [r3, #24]
 8106cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106cbe:	2b00      	cmp	r3, #0
 8106cc0:	d003      	beq.n	8106cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106cc2:	6878      	ldr	r0, [r7, #4]
 8106cc4:	f000 fabc 	bl	8107240 <HAL_TIM_IC_CaptureCallback>
 8106cc8:	e005      	b.n	8106cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106cca:	6878      	ldr	r0, [r7, #4]
 8106ccc:	f000 faae 	bl	810722c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106cd0:	6878      	ldr	r0, [r7, #4]
 8106cd2:	f000 fabf 	bl	8107254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	2200      	movs	r2, #0
 8106cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	681b      	ldr	r3, [r3, #0]
 8106ce0:	691b      	ldr	r3, [r3, #16]
 8106ce2:	f003 0308 	and.w	r3, r3, #8
 8106ce6:	2b08      	cmp	r3, #8
 8106ce8:	d122      	bne.n	8106d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8106cea:	687b      	ldr	r3, [r7, #4]
 8106cec:	681b      	ldr	r3, [r3, #0]
 8106cee:	68db      	ldr	r3, [r3, #12]
 8106cf0:	f003 0308 	and.w	r3, r3, #8
 8106cf4:	2b08      	cmp	r3, #8
 8106cf6:	d11b      	bne.n	8106d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	681b      	ldr	r3, [r3, #0]
 8106cfc:	f06f 0208 	mvn.w	r2, #8
 8106d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	2204      	movs	r2, #4
 8106d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	681b      	ldr	r3, [r3, #0]
 8106d0c:	69db      	ldr	r3, [r3, #28]
 8106d0e:	f003 0303 	and.w	r3, r3, #3
 8106d12:	2b00      	cmp	r3, #0
 8106d14:	d003      	beq.n	8106d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106d16:	6878      	ldr	r0, [r7, #4]
 8106d18:	f000 fa92 	bl	8107240 <HAL_TIM_IC_CaptureCallback>
 8106d1c:	e005      	b.n	8106d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106d1e:	6878      	ldr	r0, [r7, #4]
 8106d20:	f000 fa84 	bl	810722c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106d24:	6878      	ldr	r0, [r7, #4]
 8106d26:	f000 fa95 	bl	8107254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	2200      	movs	r2, #0
 8106d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	681b      	ldr	r3, [r3, #0]
 8106d34:	691b      	ldr	r3, [r3, #16]
 8106d36:	f003 0310 	and.w	r3, r3, #16
 8106d3a:	2b10      	cmp	r3, #16
 8106d3c:	d122      	bne.n	8106d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	68db      	ldr	r3, [r3, #12]
 8106d44:	f003 0310 	and.w	r3, r3, #16
 8106d48:	2b10      	cmp	r3, #16
 8106d4a:	d11b      	bne.n	8106d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	681b      	ldr	r3, [r3, #0]
 8106d50:	f06f 0210 	mvn.w	r2, #16
 8106d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	2208      	movs	r2, #8
 8106d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106d5c:	687b      	ldr	r3, [r7, #4]
 8106d5e:	681b      	ldr	r3, [r3, #0]
 8106d60:	69db      	ldr	r3, [r3, #28]
 8106d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106d66:	2b00      	cmp	r3, #0
 8106d68:	d003      	beq.n	8106d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106d6a:	6878      	ldr	r0, [r7, #4]
 8106d6c:	f000 fa68 	bl	8107240 <HAL_TIM_IC_CaptureCallback>
 8106d70:	e005      	b.n	8106d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106d72:	6878      	ldr	r0, [r7, #4]
 8106d74:	f000 fa5a 	bl	810722c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106d78:	6878      	ldr	r0, [r7, #4]
 8106d7a:	f000 fa6b 	bl	8107254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106d7e:	687b      	ldr	r3, [r7, #4]
 8106d80:	2200      	movs	r2, #0
 8106d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	681b      	ldr	r3, [r3, #0]
 8106d88:	691b      	ldr	r3, [r3, #16]
 8106d8a:	f003 0301 	and.w	r3, r3, #1
 8106d8e:	2b01      	cmp	r3, #1
 8106d90:	d10e      	bne.n	8106db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8106d92:	687b      	ldr	r3, [r7, #4]
 8106d94:	681b      	ldr	r3, [r3, #0]
 8106d96:	68db      	ldr	r3, [r3, #12]
 8106d98:	f003 0301 	and.w	r3, r3, #1
 8106d9c:	2b01      	cmp	r3, #1
 8106d9e:	d107      	bne.n	8106db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	681b      	ldr	r3, [r3, #0]
 8106da4:	f06f 0201 	mvn.w	r2, #1
 8106da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106daa:	6878      	ldr	r0, [r7, #4]
 8106dac:	f7fa ffca 	bl	8101d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	681b      	ldr	r3, [r3, #0]
 8106db4:	691b      	ldr	r3, [r3, #16]
 8106db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106dba:	2b80      	cmp	r3, #128	; 0x80
 8106dbc:	d10e      	bne.n	8106ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	681b      	ldr	r3, [r3, #0]
 8106dc2:	68db      	ldr	r3, [r3, #12]
 8106dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106dc8:	2b80      	cmp	r3, #128	; 0x80
 8106dca:	d107      	bne.n	8106ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8106dcc:	687b      	ldr	r3, [r7, #4]
 8106dce:	681b      	ldr	r3, [r3, #0]
 8106dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8106dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8106dd6:	6878      	ldr	r0, [r7, #4]
 8106dd8:	f000 ff8a 	bl	8107cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	681b      	ldr	r3, [r3, #0]
 8106de0:	691b      	ldr	r3, [r3, #16]
 8106de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8106dea:	d10e      	bne.n	8106e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106dec:	687b      	ldr	r3, [r7, #4]
 8106dee:	681b      	ldr	r3, [r3, #0]
 8106df0:	68db      	ldr	r3, [r3, #12]
 8106df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106df6:	2b80      	cmp	r3, #128	; 0x80
 8106df8:	d107      	bne.n	8106e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	681b      	ldr	r3, [r3, #0]
 8106dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8106e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8106e04:	6878      	ldr	r0, [r7, #4]
 8106e06:	f000 ff7d 	bl	8107d04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8106e0a:	687b      	ldr	r3, [r7, #4]
 8106e0c:	681b      	ldr	r3, [r3, #0]
 8106e0e:	691b      	ldr	r3, [r3, #16]
 8106e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106e14:	2b40      	cmp	r3, #64	; 0x40
 8106e16:	d10e      	bne.n	8106e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	681b      	ldr	r3, [r3, #0]
 8106e1c:	68db      	ldr	r3, [r3, #12]
 8106e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106e22:	2b40      	cmp	r3, #64	; 0x40
 8106e24:	d107      	bne.n	8106e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8106e26:	687b      	ldr	r3, [r7, #4]
 8106e28:	681b      	ldr	r3, [r3, #0]
 8106e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8106e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106e30:	6878      	ldr	r0, [r7, #4]
 8106e32:	f000 fa19 	bl	8107268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8106e36:	687b      	ldr	r3, [r7, #4]
 8106e38:	681b      	ldr	r3, [r3, #0]
 8106e3a:	691b      	ldr	r3, [r3, #16]
 8106e3c:	f003 0320 	and.w	r3, r3, #32
 8106e40:	2b20      	cmp	r3, #32
 8106e42:	d10e      	bne.n	8106e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	681b      	ldr	r3, [r3, #0]
 8106e48:	68db      	ldr	r3, [r3, #12]
 8106e4a:	f003 0320 	and.w	r3, r3, #32
 8106e4e:	2b20      	cmp	r3, #32
 8106e50:	d107      	bne.n	8106e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8106e52:	687b      	ldr	r3, [r7, #4]
 8106e54:	681b      	ldr	r3, [r3, #0]
 8106e56:	f06f 0220 	mvn.w	r2, #32
 8106e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106e5c:	6878      	ldr	r0, [r7, #4]
 8106e5e:	f000 ff3d 	bl	8107cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8106e62:	bf00      	nop
 8106e64:	3708      	adds	r7, #8
 8106e66:	46bd      	mov	sp, r7
 8106e68:	bd80      	pop	{r7, pc}
	...

08106e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8106e6c:	b580      	push	{r7, lr}
 8106e6e:	b084      	sub	sp, #16
 8106e70:	af00      	add	r7, sp, #0
 8106e72:	60f8      	str	r0, [r7, #12]
 8106e74:	60b9      	str	r1, [r7, #8]
 8106e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106e78:	68fb      	ldr	r3, [r7, #12]
 8106e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106e7e:	2b01      	cmp	r3, #1
 8106e80:	d101      	bne.n	8106e86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8106e82:	2302      	movs	r3, #2
 8106e84:	e0fd      	b.n	8107082 <HAL_TIM_PWM_ConfigChannel+0x216>
 8106e86:	68fb      	ldr	r3, [r7, #12]
 8106e88:	2201      	movs	r2, #1
 8106e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8106e8e:	687b      	ldr	r3, [r7, #4]
 8106e90:	2b14      	cmp	r3, #20
 8106e92:	f200 80f0 	bhi.w	8107076 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8106e96:	a201      	add	r2, pc, #4	; (adr r2, 8106e9c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8106e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e9c:	08106ef1 	.word	0x08106ef1
 8106ea0:	08107077 	.word	0x08107077
 8106ea4:	08107077 	.word	0x08107077
 8106ea8:	08107077 	.word	0x08107077
 8106eac:	08106f31 	.word	0x08106f31
 8106eb0:	08107077 	.word	0x08107077
 8106eb4:	08107077 	.word	0x08107077
 8106eb8:	08107077 	.word	0x08107077
 8106ebc:	08106f73 	.word	0x08106f73
 8106ec0:	08107077 	.word	0x08107077
 8106ec4:	08107077 	.word	0x08107077
 8106ec8:	08107077 	.word	0x08107077
 8106ecc:	08106fb3 	.word	0x08106fb3
 8106ed0:	08107077 	.word	0x08107077
 8106ed4:	08107077 	.word	0x08107077
 8106ed8:	08107077 	.word	0x08107077
 8106edc:	08106ff5 	.word	0x08106ff5
 8106ee0:	08107077 	.word	0x08107077
 8106ee4:	08107077 	.word	0x08107077
 8106ee8:	08107077 	.word	0x08107077
 8106eec:	08107035 	.word	0x08107035
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8106ef0:	68fb      	ldr	r3, [r7, #12]
 8106ef2:	681b      	ldr	r3, [r3, #0]
 8106ef4:	68b9      	ldr	r1, [r7, #8]
 8106ef6:	4618      	mov	r0, r3
 8106ef8:	f000 fa5a 	bl	81073b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	681b      	ldr	r3, [r3, #0]
 8106f00:	699a      	ldr	r2, [r3, #24]
 8106f02:	68fb      	ldr	r3, [r7, #12]
 8106f04:	681b      	ldr	r3, [r3, #0]
 8106f06:	f042 0208 	orr.w	r2, r2, #8
 8106f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8106f0c:	68fb      	ldr	r3, [r7, #12]
 8106f0e:	681b      	ldr	r3, [r3, #0]
 8106f10:	699a      	ldr	r2, [r3, #24]
 8106f12:	68fb      	ldr	r3, [r7, #12]
 8106f14:	681b      	ldr	r3, [r3, #0]
 8106f16:	f022 0204 	bic.w	r2, r2, #4
 8106f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8106f1c:	68fb      	ldr	r3, [r7, #12]
 8106f1e:	681b      	ldr	r3, [r3, #0]
 8106f20:	6999      	ldr	r1, [r3, #24]
 8106f22:	68bb      	ldr	r3, [r7, #8]
 8106f24:	691a      	ldr	r2, [r3, #16]
 8106f26:	68fb      	ldr	r3, [r7, #12]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	430a      	orrs	r2, r1
 8106f2c:	619a      	str	r2, [r3, #24]
      break;
 8106f2e:	e0a3      	b.n	8107078 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106f30:	68fb      	ldr	r3, [r7, #12]
 8106f32:	681b      	ldr	r3, [r3, #0]
 8106f34:	68b9      	ldr	r1, [r7, #8]
 8106f36:	4618      	mov	r0, r3
 8106f38:	f000 faca 	bl	81074d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106f3c:	68fb      	ldr	r3, [r7, #12]
 8106f3e:	681b      	ldr	r3, [r3, #0]
 8106f40:	699a      	ldr	r2, [r3, #24]
 8106f42:	68fb      	ldr	r3, [r7, #12]
 8106f44:	681b      	ldr	r3, [r3, #0]
 8106f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106f4c:	68fb      	ldr	r3, [r7, #12]
 8106f4e:	681b      	ldr	r3, [r3, #0]
 8106f50:	699a      	ldr	r2, [r3, #24]
 8106f52:	68fb      	ldr	r3, [r7, #12]
 8106f54:	681b      	ldr	r3, [r3, #0]
 8106f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106f5c:	68fb      	ldr	r3, [r7, #12]
 8106f5e:	681b      	ldr	r3, [r3, #0]
 8106f60:	6999      	ldr	r1, [r3, #24]
 8106f62:	68bb      	ldr	r3, [r7, #8]
 8106f64:	691b      	ldr	r3, [r3, #16]
 8106f66:	021a      	lsls	r2, r3, #8
 8106f68:	68fb      	ldr	r3, [r7, #12]
 8106f6a:	681b      	ldr	r3, [r3, #0]
 8106f6c:	430a      	orrs	r2, r1
 8106f6e:	619a      	str	r2, [r3, #24]
      break;
 8106f70:	e082      	b.n	8107078 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8106f72:	68fb      	ldr	r3, [r7, #12]
 8106f74:	681b      	ldr	r3, [r3, #0]
 8106f76:	68b9      	ldr	r1, [r7, #8]
 8106f78:	4618      	mov	r0, r3
 8106f7a:	f000 fb33 	bl	81075e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106f7e:	68fb      	ldr	r3, [r7, #12]
 8106f80:	681b      	ldr	r3, [r3, #0]
 8106f82:	69da      	ldr	r2, [r3, #28]
 8106f84:	68fb      	ldr	r3, [r7, #12]
 8106f86:	681b      	ldr	r3, [r3, #0]
 8106f88:	f042 0208 	orr.w	r2, r2, #8
 8106f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106f8e:	68fb      	ldr	r3, [r7, #12]
 8106f90:	681b      	ldr	r3, [r3, #0]
 8106f92:	69da      	ldr	r2, [r3, #28]
 8106f94:	68fb      	ldr	r3, [r7, #12]
 8106f96:	681b      	ldr	r3, [r3, #0]
 8106f98:	f022 0204 	bic.w	r2, r2, #4
 8106f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106f9e:	68fb      	ldr	r3, [r7, #12]
 8106fa0:	681b      	ldr	r3, [r3, #0]
 8106fa2:	69d9      	ldr	r1, [r3, #28]
 8106fa4:	68bb      	ldr	r3, [r7, #8]
 8106fa6:	691a      	ldr	r2, [r3, #16]
 8106fa8:	68fb      	ldr	r3, [r7, #12]
 8106faa:	681b      	ldr	r3, [r3, #0]
 8106fac:	430a      	orrs	r2, r1
 8106fae:	61da      	str	r2, [r3, #28]
      break;
 8106fb0:	e062      	b.n	8107078 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8106fb2:	68fb      	ldr	r3, [r7, #12]
 8106fb4:	681b      	ldr	r3, [r3, #0]
 8106fb6:	68b9      	ldr	r1, [r7, #8]
 8106fb8:	4618      	mov	r0, r3
 8106fba:	f000 fb99 	bl	81076f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106fbe:	68fb      	ldr	r3, [r7, #12]
 8106fc0:	681b      	ldr	r3, [r3, #0]
 8106fc2:	69da      	ldr	r2, [r3, #28]
 8106fc4:	68fb      	ldr	r3, [r7, #12]
 8106fc6:	681b      	ldr	r3, [r3, #0]
 8106fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8106fce:	68fb      	ldr	r3, [r7, #12]
 8106fd0:	681b      	ldr	r3, [r3, #0]
 8106fd2:	69da      	ldr	r2, [r3, #28]
 8106fd4:	68fb      	ldr	r3, [r7, #12]
 8106fd6:	681b      	ldr	r3, [r3, #0]
 8106fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8106fde:	68fb      	ldr	r3, [r7, #12]
 8106fe0:	681b      	ldr	r3, [r3, #0]
 8106fe2:	69d9      	ldr	r1, [r3, #28]
 8106fe4:	68bb      	ldr	r3, [r7, #8]
 8106fe6:	691b      	ldr	r3, [r3, #16]
 8106fe8:	021a      	lsls	r2, r3, #8
 8106fea:	68fb      	ldr	r3, [r7, #12]
 8106fec:	681b      	ldr	r3, [r3, #0]
 8106fee:	430a      	orrs	r2, r1
 8106ff0:	61da      	str	r2, [r3, #28]
      break;
 8106ff2:	e041      	b.n	8107078 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106ff4:	68fb      	ldr	r3, [r7, #12]
 8106ff6:	681b      	ldr	r3, [r3, #0]
 8106ff8:	68b9      	ldr	r1, [r7, #8]
 8106ffa:	4618      	mov	r0, r3
 8106ffc:	f000 fbe0 	bl	81077c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107000:	68fb      	ldr	r3, [r7, #12]
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107006:	68fb      	ldr	r3, [r7, #12]
 8107008:	681b      	ldr	r3, [r3, #0]
 810700a:	f042 0208 	orr.w	r2, r2, #8
 810700e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107010:	68fb      	ldr	r3, [r7, #12]
 8107012:	681b      	ldr	r3, [r3, #0]
 8107014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107016:	68fb      	ldr	r3, [r7, #12]
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	f022 0204 	bic.w	r2, r2, #4
 810701e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107020:	68fb      	ldr	r3, [r7, #12]
 8107022:	681b      	ldr	r3, [r3, #0]
 8107024:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107026:	68bb      	ldr	r3, [r7, #8]
 8107028:	691a      	ldr	r2, [r3, #16]
 810702a:	68fb      	ldr	r3, [r7, #12]
 810702c:	681b      	ldr	r3, [r3, #0]
 810702e:	430a      	orrs	r2, r1
 8107030:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107032:	e021      	b.n	8107078 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8107034:	68fb      	ldr	r3, [r7, #12]
 8107036:	681b      	ldr	r3, [r3, #0]
 8107038:	68b9      	ldr	r1, [r7, #8]
 810703a:	4618      	mov	r0, r3
 810703c:	f000 fc22 	bl	8107884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107040:	68fb      	ldr	r3, [r7, #12]
 8107042:	681b      	ldr	r3, [r3, #0]
 8107044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107046:	68fb      	ldr	r3, [r7, #12]
 8107048:	681b      	ldr	r3, [r3, #0]
 810704a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810704e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107050:	68fb      	ldr	r3, [r7, #12]
 8107052:	681b      	ldr	r3, [r3, #0]
 8107054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8107056:	68fb      	ldr	r3, [r7, #12]
 8107058:	681b      	ldr	r3, [r3, #0]
 810705a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810705e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107060:	68fb      	ldr	r3, [r7, #12]
 8107062:	681b      	ldr	r3, [r3, #0]
 8107064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8107066:	68bb      	ldr	r3, [r7, #8]
 8107068:	691b      	ldr	r3, [r3, #16]
 810706a:	021a      	lsls	r2, r3, #8
 810706c:	68fb      	ldr	r3, [r7, #12]
 810706e:	681b      	ldr	r3, [r3, #0]
 8107070:	430a      	orrs	r2, r1
 8107072:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8107074:	e000      	b.n	8107078 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8107076:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107078:	68fb      	ldr	r3, [r7, #12]
 810707a:	2200      	movs	r2, #0
 810707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107080:	2300      	movs	r3, #0
}
 8107082:	4618      	mov	r0, r3
 8107084:	3710      	adds	r7, #16
 8107086:	46bd      	mov	sp, r7
 8107088:	bd80      	pop	{r7, pc}
 810708a:	bf00      	nop

0810708c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 810708c:	b580      	push	{r7, lr}
 810708e:	b084      	sub	sp, #16
 8107090:	af00      	add	r7, sp, #0
 8107092:	6078      	str	r0, [r7, #4]
 8107094:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8107096:	687b      	ldr	r3, [r7, #4]
 8107098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810709c:	2b01      	cmp	r3, #1
 810709e:	d101      	bne.n	81070a4 <HAL_TIM_ConfigClockSource+0x18>
 81070a0:	2302      	movs	r3, #2
 81070a2:	e0b9      	b.n	8107218 <HAL_TIM_ConfigClockSource+0x18c>
 81070a4:	687b      	ldr	r3, [r7, #4]
 81070a6:	2201      	movs	r2, #1
 81070a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	2202      	movs	r2, #2
 81070b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81070b4:	687b      	ldr	r3, [r7, #4]
 81070b6:	681b      	ldr	r3, [r3, #0]
 81070b8:	689b      	ldr	r3, [r3, #8]
 81070ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81070bc:	68fb      	ldr	r3, [r7, #12]
 81070be:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81070c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81070c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81070c8:	68fb      	ldr	r3, [r7, #12]
 81070ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81070ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 81070d0:	687b      	ldr	r3, [r7, #4]
 81070d2:	681b      	ldr	r3, [r3, #0]
 81070d4:	68fa      	ldr	r2, [r7, #12]
 81070d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81070d8:	683b      	ldr	r3, [r7, #0]
 81070da:	681b      	ldr	r3, [r3, #0]
 81070dc:	2b70      	cmp	r3, #112	; 0x70
 81070de:	d02e      	beq.n	810713e <HAL_TIM_ConfigClockSource+0xb2>
 81070e0:	2b70      	cmp	r3, #112	; 0x70
 81070e2:	d812      	bhi.n	810710a <HAL_TIM_ConfigClockSource+0x7e>
 81070e4:	2b30      	cmp	r3, #48	; 0x30
 81070e6:	f000 8084 	beq.w	81071f2 <HAL_TIM_ConfigClockSource+0x166>
 81070ea:	2b30      	cmp	r3, #48	; 0x30
 81070ec:	d806      	bhi.n	81070fc <HAL_TIM_ConfigClockSource+0x70>
 81070ee:	2b10      	cmp	r3, #16
 81070f0:	d07f      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
 81070f2:	2b20      	cmp	r3, #32
 81070f4:	d07d      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
 81070f6:	2b00      	cmp	r3, #0
 81070f8:	d07b      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 81070fa:	e084      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81070fc:	2b50      	cmp	r3, #80	; 0x50
 81070fe:	d048      	beq.n	8107192 <HAL_TIM_ConfigClockSource+0x106>
 8107100:	2b60      	cmp	r3, #96	; 0x60
 8107102:	d056      	beq.n	81071b2 <HAL_TIM_ConfigClockSource+0x126>
 8107104:	2b40      	cmp	r3, #64	; 0x40
 8107106:	d064      	beq.n	81071d2 <HAL_TIM_ConfigClockSource+0x146>
      break;
 8107108:	e07d      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 810710a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 810710e:	d070      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
 8107110:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107114:	d809      	bhi.n	810712a <HAL_TIM_ConfigClockSource+0x9e>
 8107116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810711a:	d027      	beq.n	810716c <HAL_TIM_ConfigClockSource+0xe0>
 810711c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107120:	d067      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
 8107122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107126:	d06d      	beq.n	8107204 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8107128:	e06d      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 810712a:	4a3d      	ldr	r2, [pc, #244]	; (8107220 <HAL_TIM_ConfigClockSource+0x194>)
 810712c:	4293      	cmp	r3, r2
 810712e:	d060      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
 8107130:	4a3c      	ldr	r2, [pc, #240]	; (8107224 <HAL_TIM_ConfigClockSource+0x198>)
 8107132:	4293      	cmp	r3, r2
 8107134:	d05d      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
 8107136:	4a3c      	ldr	r2, [pc, #240]	; (8107228 <HAL_TIM_ConfigClockSource+0x19c>)
 8107138:	4293      	cmp	r3, r2
 810713a:	d05a      	beq.n	81071f2 <HAL_TIM_ConfigClockSource+0x166>
      break;
 810713c:	e063      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	6818      	ldr	r0, [r3, #0]
 8107142:	683b      	ldr	r3, [r7, #0]
 8107144:	6899      	ldr	r1, [r3, #8]
 8107146:	683b      	ldr	r3, [r7, #0]
 8107148:	685a      	ldr	r2, [r3, #4]
 810714a:	683b      	ldr	r3, [r7, #0]
 810714c:	68db      	ldr	r3, [r3, #12]
 810714e:	f000 fc79 	bl	8107a44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	681b      	ldr	r3, [r3, #0]
 8107156:	689b      	ldr	r3, [r3, #8]
 8107158:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 810715a:	68fb      	ldr	r3, [r7, #12]
 810715c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8107160:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	681b      	ldr	r3, [r3, #0]
 8107166:	68fa      	ldr	r2, [r7, #12]
 8107168:	609a      	str	r2, [r3, #8]
      break;
 810716a:	e04c      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 810716c:	687b      	ldr	r3, [r7, #4]
 810716e:	6818      	ldr	r0, [r3, #0]
 8107170:	683b      	ldr	r3, [r7, #0]
 8107172:	6899      	ldr	r1, [r3, #8]
 8107174:	683b      	ldr	r3, [r7, #0]
 8107176:	685a      	ldr	r2, [r3, #4]
 8107178:	683b      	ldr	r3, [r7, #0]
 810717a:	68db      	ldr	r3, [r3, #12]
 810717c:	f000 fc62 	bl	8107a44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8107180:	687b      	ldr	r3, [r7, #4]
 8107182:	681b      	ldr	r3, [r3, #0]
 8107184:	689a      	ldr	r2, [r3, #8]
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	681b      	ldr	r3, [r3, #0]
 810718a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810718e:	609a      	str	r2, [r3, #8]
      break;
 8107190:	e039      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8107192:	687b      	ldr	r3, [r7, #4]
 8107194:	6818      	ldr	r0, [r3, #0]
 8107196:	683b      	ldr	r3, [r7, #0]
 8107198:	6859      	ldr	r1, [r3, #4]
 810719a:	683b      	ldr	r3, [r7, #0]
 810719c:	68db      	ldr	r3, [r3, #12]
 810719e:	461a      	mov	r2, r3
 81071a0:	f000 fbd4 	bl	810794c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81071a4:	687b      	ldr	r3, [r7, #4]
 81071a6:	681b      	ldr	r3, [r3, #0]
 81071a8:	2150      	movs	r1, #80	; 0x50
 81071aa:	4618      	mov	r0, r3
 81071ac:	f000 fc2d 	bl	8107a0a <TIM_ITRx_SetConfig>
      break;
 81071b0:	e029      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	6818      	ldr	r0, [r3, #0]
 81071b6:	683b      	ldr	r3, [r7, #0]
 81071b8:	6859      	ldr	r1, [r3, #4]
 81071ba:	683b      	ldr	r3, [r7, #0]
 81071bc:	68db      	ldr	r3, [r3, #12]
 81071be:	461a      	mov	r2, r3
 81071c0:	f000 fbf3 	bl	81079aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81071c4:	687b      	ldr	r3, [r7, #4]
 81071c6:	681b      	ldr	r3, [r3, #0]
 81071c8:	2160      	movs	r1, #96	; 0x60
 81071ca:	4618      	mov	r0, r3
 81071cc:	f000 fc1d 	bl	8107a0a <TIM_ITRx_SetConfig>
      break;
 81071d0:	e019      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 81071d2:	687b      	ldr	r3, [r7, #4]
 81071d4:	6818      	ldr	r0, [r3, #0]
 81071d6:	683b      	ldr	r3, [r7, #0]
 81071d8:	6859      	ldr	r1, [r3, #4]
 81071da:	683b      	ldr	r3, [r7, #0]
 81071dc:	68db      	ldr	r3, [r3, #12]
 81071de:	461a      	mov	r2, r3
 81071e0:	f000 fbb4 	bl	810794c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	681b      	ldr	r3, [r3, #0]
 81071e8:	2140      	movs	r1, #64	; 0x40
 81071ea:	4618      	mov	r0, r3
 81071ec:	f000 fc0d 	bl	8107a0a <TIM_ITRx_SetConfig>
      break;
 81071f0:	e009      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81071f2:	687b      	ldr	r3, [r7, #4]
 81071f4:	681a      	ldr	r2, [r3, #0]
 81071f6:	683b      	ldr	r3, [r7, #0]
 81071f8:	681b      	ldr	r3, [r3, #0]
 81071fa:	4619      	mov	r1, r3
 81071fc:	4610      	mov	r0, r2
 81071fe:	f000 fc04 	bl	8107a0a <TIM_ITRx_SetConfig>
      break;
 8107202:	e000      	b.n	8107206 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8107204:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8107206:	687b      	ldr	r3, [r7, #4]
 8107208:	2201      	movs	r2, #1
 810720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810720e:	687b      	ldr	r3, [r7, #4]
 8107210:	2200      	movs	r2, #0
 8107212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107216:	2300      	movs	r3, #0
}
 8107218:	4618      	mov	r0, r3
 810721a:	3710      	adds	r7, #16
 810721c:	46bd      	mov	sp, r7
 810721e:	bd80      	pop	{r7, pc}
 8107220:	00100030 	.word	0x00100030
 8107224:	00100040 	.word	0x00100040
 8107228:	00100020 	.word	0x00100020

0810722c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810722c:	b480      	push	{r7}
 810722e:	b083      	sub	sp, #12
 8107230:	af00      	add	r7, sp, #0
 8107232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107234:	bf00      	nop
 8107236:	370c      	adds	r7, #12
 8107238:	46bd      	mov	sp, r7
 810723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810723e:	4770      	bx	lr

08107240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8107240:	b480      	push	{r7}
 8107242:	b083      	sub	sp, #12
 8107244:	af00      	add	r7, sp, #0
 8107246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8107248:	bf00      	nop
 810724a:	370c      	adds	r7, #12
 810724c:	46bd      	mov	sp, r7
 810724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107252:	4770      	bx	lr

08107254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107254:	b480      	push	{r7}
 8107256:	b083      	sub	sp, #12
 8107258:	af00      	add	r7, sp, #0
 810725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810725c:	bf00      	nop
 810725e:	370c      	adds	r7, #12
 8107260:	46bd      	mov	sp, r7
 8107262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107266:	4770      	bx	lr

08107268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107268:	b480      	push	{r7}
 810726a:	b083      	sub	sp, #12
 810726c:	af00      	add	r7, sp, #0
 810726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107270:	bf00      	nop
 8107272:	370c      	adds	r7, #12
 8107274:	46bd      	mov	sp, r7
 8107276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810727a:	4770      	bx	lr

0810727c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810727c:	b480      	push	{r7}
 810727e:	b085      	sub	sp, #20
 8107280:	af00      	add	r7, sp, #0
 8107282:	6078      	str	r0, [r7, #4]
 8107284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107286:	687b      	ldr	r3, [r7, #4]
 8107288:	681b      	ldr	r3, [r3, #0]
 810728a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810728c:	687b      	ldr	r3, [r7, #4]
 810728e:	4a40      	ldr	r2, [pc, #256]	; (8107390 <TIM_Base_SetConfig+0x114>)
 8107290:	4293      	cmp	r3, r2
 8107292:	d013      	beq.n	81072bc <TIM_Base_SetConfig+0x40>
 8107294:	687b      	ldr	r3, [r7, #4]
 8107296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810729a:	d00f      	beq.n	81072bc <TIM_Base_SetConfig+0x40>
 810729c:	687b      	ldr	r3, [r7, #4]
 810729e:	4a3d      	ldr	r2, [pc, #244]	; (8107394 <TIM_Base_SetConfig+0x118>)
 81072a0:	4293      	cmp	r3, r2
 81072a2:	d00b      	beq.n	81072bc <TIM_Base_SetConfig+0x40>
 81072a4:	687b      	ldr	r3, [r7, #4]
 81072a6:	4a3c      	ldr	r2, [pc, #240]	; (8107398 <TIM_Base_SetConfig+0x11c>)
 81072a8:	4293      	cmp	r3, r2
 81072aa:	d007      	beq.n	81072bc <TIM_Base_SetConfig+0x40>
 81072ac:	687b      	ldr	r3, [r7, #4]
 81072ae:	4a3b      	ldr	r2, [pc, #236]	; (810739c <TIM_Base_SetConfig+0x120>)
 81072b0:	4293      	cmp	r3, r2
 81072b2:	d003      	beq.n	81072bc <TIM_Base_SetConfig+0x40>
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	4a3a      	ldr	r2, [pc, #232]	; (81073a0 <TIM_Base_SetConfig+0x124>)
 81072b8:	4293      	cmp	r3, r2
 81072ba:	d108      	bne.n	81072ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81072bc:	68fb      	ldr	r3, [r7, #12]
 81072be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81072c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81072c4:	683b      	ldr	r3, [r7, #0]
 81072c6:	685b      	ldr	r3, [r3, #4]
 81072c8:	68fa      	ldr	r2, [r7, #12]
 81072ca:	4313      	orrs	r3, r2
 81072cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81072ce:	687b      	ldr	r3, [r7, #4]
 81072d0:	4a2f      	ldr	r2, [pc, #188]	; (8107390 <TIM_Base_SetConfig+0x114>)
 81072d2:	4293      	cmp	r3, r2
 81072d4:	d01f      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 81072d6:	687b      	ldr	r3, [r7, #4]
 81072d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81072dc:	d01b      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	4a2c      	ldr	r2, [pc, #176]	; (8107394 <TIM_Base_SetConfig+0x118>)
 81072e2:	4293      	cmp	r3, r2
 81072e4:	d017      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 81072e6:	687b      	ldr	r3, [r7, #4]
 81072e8:	4a2b      	ldr	r2, [pc, #172]	; (8107398 <TIM_Base_SetConfig+0x11c>)
 81072ea:	4293      	cmp	r3, r2
 81072ec:	d013      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 81072ee:	687b      	ldr	r3, [r7, #4]
 81072f0:	4a2a      	ldr	r2, [pc, #168]	; (810739c <TIM_Base_SetConfig+0x120>)
 81072f2:	4293      	cmp	r3, r2
 81072f4:	d00f      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	4a29      	ldr	r2, [pc, #164]	; (81073a0 <TIM_Base_SetConfig+0x124>)
 81072fa:	4293      	cmp	r3, r2
 81072fc:	d00b      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 81072fe:	687b      	ldr	r3, [r7, #4]
 8107300:	4a28      	ldr	r2, [pc, #160]	; (81073a4 <TIM_Base_SetConfig+0x128>)
 8107302:	4293      	cmp	r3, r2
 8107304:	d007      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	4a27      	ldr	r2, [pc, #156]	; (81073a8 <TIM_Base_SetConfig+0x12c>)
 810730a:	4293      	cmp	r3, r2
 810730c:	d003      	beq.n	8107316 <TIM_Base_SetConfig+0x9a>
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	4a26      	ldr	r2, [pc, #152]	; (81073ac <TIM_Base_SetConfig+0x130>)
 8107312:	4293      	cmp	r3, r2
 8107314:	d108      	bne.n	8107328 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107316:	68fb      	ldr	r3, [r7, #12]
 8107318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810731c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810731e:	683b      	ldr	r3, [r7, #0]
 8107320:	68db      	ldr	r3, [r3, #12]
 8107322:	68fa      	ldr	r2, [r7, #12]
 8107324:	4313      	orrs	r3, r2
 8107326:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107328:	68fb      	ldr	r3, [r7, #12]
 810732a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810732e:	683b      	ldr	r3, [r7, #0]
 8107330:	695b      	ldr	r3, [r3, #20]
 8107332:	4313      	orrs	r3, r2
 8107334:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107336:	687b      	ldr	r3, [r7, #4]
 8107338:	68fa      	ldr	r2, [r7, #12]
 810733a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810733c:	683b      	ldr	r3, [r7, #0]
 810733e:	689a      	ldr	r2, [r3, #8]
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107344:	683b      	ldr	r3, [r7, #0]
 8107346:	681a      	ldr	r2, [r3, #0]
 8107348:	687b      	ldr	r3, [r7, #4]
 810734a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	4a10      	ldr	r2, [pc, #64]	; (8107390 <TIM_Base_SetConfig+0x114>)
 8107350:	4293      	cmp	r3, r2
 8107352:	d00f      	beq.n	8107374 <TIM_Base_SetConfig+0xf8>
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	4a12      	ldr	r2, [pc, #72]	; (81073a0 <TIM_Base_SetConfig+0x124>)
 8107358:	4293      	cmp	r3, r2
 810735a:	d00b      	beq.n	8107374 <TIM_Base_SetConfig+0xf8>
 810735c:	687b      	ldr	r3, [r7, #4]
 810735e:	4a11      	ldr	r2, [pc, #68]	; (81073a4 <TIM_Base_SetConfig+0x128>)
 8107360:	4293      	cmp	r3, r2
 8107362:	d007      	beq.n	8107374 <TIM_Base_SetConfig+0xf8>
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	4a10      	ldr	r2, [pc, #64]	; (81073a8 <TIM_Base_SetConfig+0x12c>)
 8107368:	4293      	cmp	r3, r2
 810736a:	d003      	beq.n	8107374 <TIM_Base_SetConfig+0xf8>
 810736c:	687b      	ldr	r3, [r7, #4]
 810736e:	4a0f      	ldr	r2, [pc, #60]	; (81073ac <TIM_Base_SetConfig+0x130>)
 8107370:	4293      	cmp	r3, r2
 8107372:	d103      	bne.n	810737c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107374:	683b      	ldr	r3, [r7, #0]
 8107376:	691a      	ldr	r2, [r3, #16]
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810737c:	687b      	ldr	r3, [r7, #4]
 810737e:	2201      	movs	r2, #1
 8107380:	615a      	str	r2, [r3, #20]
}
 8107382:	bf00      	nop
 8107384:	3714      	adds	r7, #20
 8107386:	46bd      	mov	sp, r7
 8107388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810738c:	4770      	bx	lr
 810738e:	bf00      	nop
 8107390:	40010000 	.word	0x40010000
 8107394:	40000400 	.word	0x40000400
 8107398:	40000800 	.word	0x40000800
 810739c:	40000c00 	.word	0x40000c00
 81073a0:	40010400 	.word	0x40010400
 81073a4:	40014000 	.word	0x40014000
 81073a8:	40014400 	.word	0x40014400
 81073ac:	40014800 	.word	0x40014800

081073b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81073b0:	b480      	push	{r7}
 81073b2:	b087      	sub	sp, #28
 81073b4:	af00      	add	r7, sp, #0
 81073b6:	6078      	str	r0, [r7, #4]
 81073b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81073ba:	687b      	ldr	r3, [r7, #4]
 81073bc:	6a1b      	ldr	r3, [r3, #32]
 81073be:	f023 0201 	bic.w	r2, r3, #1
 81073c2:	687b      	ldr	r3, [r7, #4]
 81073c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81073c6:	687b      	ldr	r3, [r7, #4]
 81073c8:	6a1b      	ldr	r3, [r3, #32]
 81073ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81073cc:	687b      	ldr	r3, [r7, #4]
 81073ce:	685b      	ldr	r3, [r3, #4]
 81073d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	699b      	ldr	r3, [r3, #24]
 81073d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81073d8:	68fb      	ldr	r3, [r7, #12]
 81073da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81073e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81073e4:	68fb      	ldr	r3, [r7, #12]
 81073e6:	f023 0303 	bic.w	r3, r3, #3
 81073ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81073ec:	683b      	ldr	r3, [r7, #0]
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	68fa      	ldr	r2, [r7, #12]
 81073f2:	4313      	orrs	r3, r2
 81073f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81073f6:	697b      	ldr	r3, [r7, #20]
 81073f8:	f023 0302 	bic.w	r3, r3, #2
 81073fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81073fe:	683b      	ldr	r3, [r7, #0]
 8107400:	689b      	ldr	r3, [r3, #8]
 8107402:	697a      	ldr	r2, [r7, #20]
 8107404:	4313      	orrs	r3, r2
 8107406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	4a2c      	ldr	r2, [pc, #176]	; (81074bc <TIM_OC1_SetConfig+0x10c>)
 810740c:	4293      	cmp	r3, r2
 810740e:	d00f      	beq.n	8107430 <TIM_OC1_SetConfig+0x80>
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	4a2b      	ldr	r2, [pc, #172]	; (81074c0 <TIM_OC1_SetConfig+0x110>)
 8107414:	4293      	cmp	r3, r2
 8107416:	d00b      	beq.n	8107430 <TIM_OC1_SetConfig+0x80>
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	4a2a      	ldr	r2, [pc, #168]	; (81074c4 <TIM_OC1_SetConfig+0x114>)
 810741c:	4293      	cmp	r3, r2
 810741e:	d007      	beq.n	8107430 <TIM_OC1_SetConfig+0x80>
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	4a29      	ldr	r2, [pc, #164]	; (81074c8 <TIM_OC1_SetConfig+0x118>)
 8107424:	4293      	cmp	r3, r2
 8107426:	d003      	beq.n	8107430 <TIM_OC1_SetConfig+0x80>
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	4a28      	ldr	r2, [pc, #160]	; (81074cc <TIM_OC1_SetConfig+0x11c>)
 810742c:	4293      	cmp	r3, r2
 810742e:	d10c      	bne.n	810744a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107430:	697b      	ldr	r3, [r7, #20]
 8107432:	f023 0308 	bic.w	r3, r3, #8
 8107436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107438:	683b      	ldr	r3, [r7, #0]
 810743a:	68db      	ldr	r3, [r3, #12]
 810743c:	697a      	ldr	r2, [r7, #20]
 810743e:	4313      	orrs	r3, r2
 8107440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107442:	697b      	ldr	r3, [r7, #20]
 8107444:	f023 0304 	bic.w	r3, r3, #4
 8107448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	4a1b      	ldr	r2, [pc, #108]	; (81074bc <TIM_OC1_SetConfig+0x10c>)
 810744e:	4293      	cmp	r3, r2
 8107450:	d00f      	beq.n	8107472 <TIM_OC1_SetConfig+0xc2>
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	4a1a      	ldr	r2, [pc, #104]	; (81074c0 <TIM_OC1_SetConfig+0x110>)
 8107456:	4293      	cmp	r3, r2
 8107458:	d00b      	beq.n	8107472 <TIM_OC1_SetConfig+0xc2>
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	4a19      	ldr	r2, [pc, #100]	; (81074c4 <TIM_OC1_SetConfig+0x114>)
 810745e:	4293      	cmp	r3, r2
 8107460:	d007      	beq.n	8107472 <TIM_OC1_SetConfig+0xc2>
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	4a18      	ldr	r2, [pc, #96]	; (81074c8 <TIM_OC1_SetConfig+0x118>)
 8107466:	4293      	cmp	r3, r2
 8107468:	d003      	beq.n	8107472 <TIM_OC1_SetConfig+0xc2>
 810746a:	687b      	ldr	r3, [r7, #4]
 810746c:	4a17      	ldr	r2, [pc, #92]	; (81074cc <TIM_OC1_SetConfig+0x11c>)
 810746e:	4293      	cmp	r3, r2
 8107470:	d111      	bne.n	8107496 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107472:	693b      	ldr	r3, [r7, #16]
 8107474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810747a:	693b      	ldr	r3, [r7, #16]
 810747c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107482:	683b      	ldr	r3, [r7, #0]
 8107484:	695b      	ldr	r3, [r3, #20]
 8107486:	693a      	ldr	r2, [r7, #16]
 8107488:	4313      	orrs	r3, r2
 810748a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810748c:	683b      	ldr	r3, [r7, #0]
 810748e:	699b      	ldr	r3, [r3, #24]
 8107490:	693a      	ldr	r2, [r7, #16]
 8107492:	4313      	orrs	r3, r2
 8107494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107496:	687b      	ldr	r3, [r7, #4]
 8107498:	693a      	ldr	r2, [r7, #16]
 810749a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810749c:	687b      	ldr	r3, [r7, #4]
 810749e:	68fa      	ldr	r2, [r7, #12]
 81074a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81074a2:	683b      	ldr	r3, [r7, #0]
 81074a4:	685a      	ldr	r2, [r3, #4]
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	697a      	ldr	r2, [r7, #20]
 81074ae:	621a      	str	r2, [r3, #32]
}
 81074b0:	bf00      	nop
 81074b2:	371c      	adds	r7, #28
 81074b4:	46bd      	mov	sp, r7
 81074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074ba:	4770      	bx	lr
 81074bc:	40010000 	.word	0x40010000
 81074c0:	40010400 	.word	0x40010400
 81074c4:	40014000 	.word	0x40014000
 81074c8:	40014400 	.word	0x40014400
 81074cc:	40014800 	.word	0x40014800

081074d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81074d0:	b480      	push	{r7}
 81074d2:	b087      	sub	sp, #28
 81074d4:	af00      	add	r7, sp, #0
 81074d6:	6078      	str	r0, [r7, #4]
 81074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	6a1b      	ldr	r3, [r3, #32]
 81074de:	f023 0210 	bic.w	r2, r3, #16
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	6a1b      	ldr	r3, [r3, #32]
 81074ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	685b      	ldr	r3, [r3, #4]
 81074f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	699b      	ldr	r3, [r3, #24]
 81074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81074f8:	68fb      	ldr	r3, [r7, #12]
 81074fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81074fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107504:	68fb      	ldr	r3, [r7, #12]
 8107506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810750a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810750c:	683b      	ldr	r3, [r7, #0]
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	021b      	lsls	r3, r3, #8
 8107512:	68fa      	ldr	r2, [r7, #12]
 8107514:	4313      	orrs	r3, r2
 8107516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107518:	697b      	ldr	r3, [r7, #20]
 810751a:	f023 0320 	bic.w	r3, r3, #32
 810751e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107520:	683b      	ldr	r3, [r7, #0]
 8107522:	689b      	ldr	r3, [r3, #8]
 8107524:	011b      	lsls	r3, r3, #4
 8107526:	697a      	ldr	r2, [r7, #20]
 8107528:	4313      	orrs	r3, r2
 810752a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810752c:	687b      	ldr	r3, [r7, #4]
 810752e:	4a28      	ldr	r2, [pc, #160]	; (81075d0 <TIM_OC2_SetConfig+0x100>)
 8107530:	4293      	cmp	r3, r2
 8107532:	d003      	beq.n	810753c <TIM_OC2_SetConfig+0x6c>
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	4a27      	ldr	r2, [pc, #156]	; (81075d4 <TIM_OC2_SetConfig+0x104>)
 8107538:	4293      	cmp	r3, r2
 810753a:	d10d      	bne.n	8107558 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810753c:	697b      	ldr	r3, [r7, #20]
 810753e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107544:	683b      	ldr	r3, [r7, #0]
 8107546:	68db      	ldr	r3, [r3, #12]
 8107548:	011b      	lsls	r3, r3, #4
 810754a:	697a      	ldr	r2, [r7, #20]
 810754c:	4313      	orrs	r3, r2
 810754e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107550:	697b      	ldr	r3, [r7, #20]
 8107552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107558:	687b      	ldr	r3, [r7, #4]
 810755a:	4a1d      	ldr	r2, [pc, #116]	; (81075d0 <TIM_OC2_SetConfig+0x100>)
 810755c:	4293      	cmp	r3, r2
 810755e:	d00f      	beq.n	8107580 <TIM_OC2_SetConfig+0xb0>
 8107560:	687b      	ldr	r3, [r7, #4]
 8107562:	4a1c      	ldr	r2, [pc, #112]	; (81075d4 <TIM_OC2_SetConfig+0x104>)
 8107564:	4293      	cmp	r3, r2
 8107566:	d00b      	beq.n	8107580 <TIM_OC2_SetConfig+0xb0>
 8107568:	687b      	ldr	r3, [r7, #4]
 810756a:	4a1b      	ldr	r2, [pc, #108]	; (81075d8 <TIM_OC2_SetConfig+0x108>)
 810756c:	4293      	cmp	r3, r2
 810756e:	d007      	beq.n	8107580 <TIM_OC2_SetConfig+0xb0>
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	4a1a      	ldr	r2, [pc, #104]	; (81075dc <TIM_OC2_SetConfig+0x10c>)
 8107574:	4293      	cmp	r3, r2
 8107576:	d003      	beq.n	8107580 <TIM_OC2_SetConfig+0xb0>
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	4a19      	ldr	r2, [pc, #100]	; (81075e0 <TIM_OC2_SetConfig+0x110>)
 810757c:	4293      	cmp	r3, r2
 810757e:	d113      	bne.n	81075a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107580:	693b      	ldr	r3, [r7, #16]
 8107582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107586:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107588:	693b      	ldr	r3, [r7, #16]
 810758a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810758e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107590:	683b      	ldr	r3, [r7, #0]
 8107592:	695b      	ldr	r3, [r3, #20]
 8107594:	009b      	lsls	r3, r3, #2
 8107596:	693a      	ldr	r2, [r7, #16]
 8107598:	4313      	orrs	r3, r2
 810759a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810759c:	683b      	ldr	r3, [r7, #0]
 810759e:	699b      	ldr	r3, [r3, #24]
 81075a0:	009b      	lsls	r3, r3, #2
 81075a2:	693a      	ldr	r2, [r7, #16]
 81075a4:	4313      	orrs	r3, r2
 81075a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81075a8:	687b      	ldr	r3, [r7, #4]
 81075aa:	693a      	ldr	r2, [r7, #16]
 81075ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	68fa      	ldr	r2, [r7, #12]
 81075b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81075b4:	683b      	ldr	r3, [r7, #0]
 81075b6:	685a      	ldr	r2, [r3, #4]
 81075b8:	687b      	ldr	r3, [r7, #4]
 81075ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81075bc:	687b      	ldr	r3, [r7, #4]
 81075be:	697a      	ldr	r2, [r7, #20]
 81075c0:	621a      	str	r2, [r3, #32]
}
 81075c2:	bf00      	nop
 81075c4:	371c      	adds	r7, #28
 81075c6:	46bd      	mov	sp, r7
 81075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075cc:	4770      	bx	lr
 81075ce:	bf00      	nop
 81075d0:	40010000 	.word	0x40010000
 81075d4:	40010400 	.word	0x40010400
 81075d8:	40014000 	.word	0x40014000
 81075dc:	40014400 	.word	0x40014400
 81075e0:	40014800 	.word	0x40014800

081075e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81075e4:	b480      	push	{r7}
 81075e6:	b087      	sub	sp, #28
 81075e8:	af00      	add	r7, sp, #0
 81075ea:	6078      	str	r0, [r7, #4]
 81075ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81075ee:	687b      	ldr	r3, [r7, #4]
 81075f0:	6a1b      	ldr	r3, [r3, #32]
 81075f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81075f6:	687b      	ldr	r3, [r7, #4]
 81075f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81075fa:	687b      	ldr	r3, [r7, #4]
 81075fc:	6a1b      	ldr	r3, [r3, #32]
 81075fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107600:	687b      	ldr	r3, [r7, #4]
 8107602:	685b      	ldr	r3, [r3, #4]
 8107604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107606:	687b      	ldr	r3, [r7, #4]
 8107608:	69db      	ldr	r3, [r3, #28]
 810760a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810760c:	68fb      	ldr	r3, [r7, #12]
 810760e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107614:	68fb      	ldr	r3, [r7, #12]
 8107616:	f023 0303 	bic.w	r3, r3, #3
 810761a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810761c:	683b      	ldr	r3, [r7, #0]
 810761e:	681b      	ldr	r3, [r3, #0]
 8107620:	68fa      	ldr	r2, [r7, #12]
 8107622:	4313      	orrs	r3, r2
 8107624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107626:	697b      	ldr	r3, [r7, #20]
 8107628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810762c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810762e:	683b      	ldr	r3, [r7, #0]
 8107630:	689b      	ldr	r3, [r3, #8]
 8107632:	021b      	lsls	r3, r3, #8
 8107634:	697a      	ldr	r2, [r7, #20]
 8107636:	4313      	orrs	r3, r2
 8107638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	4a27      	ldr	r2, [pc, #156]	; (81076dc <TIM_OC3_SetConfig+0xf8>)
 810763e:	4293      	cmp	r3, r2
 8107640:	d003      	beq.n	810764a <TIM_OC3_SetConfig+0x66>
 8107642:	687b      	ldr	r3, [r7, #4]
 8107644:	4a26      	ldr	r2, [pc, #152]	; (81076e0 <TIM_OC3_SetConfig+0xfc>)
 8107646:	4293      	cmp	r3, r2
 8107648:	d10d      	bne.n	8107666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810764a:	697b      	ldr	r3, [r7, #20]
 810764c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107652:	683b      	ldr	r3, [r7, #0]
 8107654:	68db      	ldr	r3, [r3, #12]
 8107656:	021b      	lsls	r3, r3, #8
 8107658:	697a      	ldr	r2, [r7, #20]
 810765a:	4313      	orrs	r3, r2
 810765c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810765e:	697b      	ldr	r3, [r7, #20]
 8107660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	4a1c      	ldr	r2, [pc, #112]	; (81076dc <TIM_OC3_SetConfig+0xf8>)
 810766a:	4293      	cmp	r3, r2
 810766c:	d00f      	beq.n	810768e <TIM_OC3_SetConfig+0xaa>
 810766e:	687b      	ldr	r3, [r7, #4]
 8107670:	4a1b      	ldr	r2, [pc, #108]	; (81076e0 <TIM_OC3_SetConfig+0xfc>)
 8107672:	4293      	cmp	r3, r2
 8107674:	d00b      	beq.n	810768e <TIM_OC3_SetConfig+0xaa>
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	4a1a      	ldr	r2, [pc, #104]	; (81076e4 <TIM_OC3_SetConfig+0x100>)
 810767a:	4293      	cmp	r3, r2
 810767c:	d007      	beq.n	810768e <TIM_OC3_SetConfig+0xaa>
 810767e:	687b      	ldr	r3, [r7, #4]
 8107680:	4a19      	ldr	r2, [pc, #100]	; (81076e8 <TIM_OC3_SetConfig+0x104>)
 8107682:	4293      	cmp	r3, r2
 8107684:	d003      	beq.n	810768e <TIM_OC3_SetConfig+0xaa>
 8107686:	687b      	ldr	r3, [r7, #4]
 8107688:	4a18      	ldr	r2, [pc, #96]	; (81076ec <TIM_OC3_SetConfig+0x108>)
 810768a:	4293      	cmp	r3, r2
 810768c:	d113      	bne.n	81076b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810768e:	693b      	ldr	r3, [r7, #16]
 8107690:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107696:	693b      	ldr	r3, [r7, #16]
 8107698:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810769c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810769e:	683b      	ldr	r3, [r7, #0]
 81076a0:	695b      	ldr	r3, [r3, #20]
 81076a2:	011b      	lsls	r3, r3, #4
 81076a4:	693a      	ldr	r2, [r7, #16]
 81076a6:	4313      	orrs	r3, r2
 81076a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81076aa:	683b      	ldr	r3, [r7, #0]
 81076ac:	699b      	ldr	r3, [r3, #24]
 81076ae:	011b      	lsls	r3, r3, #4
 81076b0:	693a      	ldr	r2, [r7, #16]
 81076b2:	4313      	orrs	r3, r2
 81076b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81076b6:	687b      	ldr	r3, [r7, #4]
 81076b8:	693a      	ldr	r2, [r7, #16]
 81076ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81076bc:	687b      	ldr	r3, [r7, #4]
 81076be:	68fa      	ldr	r2, [r7, #12]
 81076c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81076c2:	683b      	ldr	r3, [r7, #0]
 81076c4:	685a      	ldr	r2, [r3, #4]
 81076c6:	687b      	ldr	r3, [r7, #4]
 81076c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	697a      	ldr	r2, [r7, #20]
 81076ce:	621a      	str	r2, [r3, #32]
}
 81076d0:	bf00      	nop
 81076d2:	371c      	adds	r7, #28
 81076d4:	46bd      	mov	sp, r7
 81076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076da:	4770      	bx	lr
 81076dc:	40010000 	.word	0x40010000
 81076e0:	40010400 	.word	0x40010400
 81076e4:	40014000 	.word	0x40014000
 81076e8:	40014400 	.word	0x40014400
 81076ec:	40014800 	.word	0x40014800

081076f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81076f0:	b480      	push	{r7}
 81076f2:	b087      	sub	sp, #28
 81076f4:	af00      	add	r7, sp, #0
 81076f6:	6078      	str	r0, [r7, #4]
 81076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81076fa:	687b      	ldr	r3, [r7, #4]
 81076fc:	6a1b      	ldr	r3, [r3, #32]
 81076fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107702:	687b      	ldr	r3, [r7, #4]
 8107704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107706:	687b      	ldr	r3, [r7, #4]
 8107708:	6a1b      	ldr	r3, [r3, #32]
 810770a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810770c:	687b      	ldr	r3, [r7, #4]
 810770e:	685b      	ldr	r3, [r3, #4]
 8107710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	69db      	ldr	r3, [r3, #28]
 8107716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107718:	68fb      	ldr	r3, [r7, #12]
 810771a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810771e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107720:	68fb      	ldr	r3, [r7, #12]
 8107722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107728:	683b      	ldr	r3, [r7, #0]
 810772a:	681b      	ldr	r3, [r3, #0]
 810772c:	021b      	lsls	r3, r3, #8
 810772e:	68fa      	ldr	r2, [r7, #12]
 8107730:	4313      	orrs	r3, r2
 8107732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107734:	693b      	ldr	r3, [r7, #16]
 8107736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810773a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810773c:	683b      	ldr	r3, [r7, #0]
 810773e:	689b      	ldr	r3, [r3, #8]
 8107740:	031b      	lsls	r3, r3, #12
 8107742:	693a      	ldr	r2, [r7, #16]
 8107744:	4313      	orrs	r3, r2
 8107746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107748:	687b      	ldr	r3, [r7, #4]
 810774a:	4a18      	ldr	r2, [pc, #96]	; (81077ac <TIM_OC4_SetConfig+0xbc>)
 810774c:	4293      	cmp	r3, r2
 810774e:	d00f      	beq.n	8107770 <TIM_OC4_SetConfig+0x80>
 8107750:	687b      	ldr	r3, [r7, #4]
 8107752:	4a17      	ldr	r2, [pc, #92]	; (81077b0 <TIM_OC4_SetConfig+0xc0>)
 8107754:	4293      	cmp	r3, r2
 8107756:	d00b      	beq.n	8107770 <TIM_OC4_SetConfig+0x80>
 8107758:	687b      	ldr	r3, [r7, #4]
 810775a:	4a16      	ldr	r2, [pc, #88]	; (81077b4 <TIM_OC4_SetConfig+0xc4>)
 810775c:	4293      	cmp	r3, r2
 810775e:	d007      	beq.n	8107770 <TIM_OC4_SetConfig+0x80>
 8107760:	687b      	ldr	r3, [r7, #4]
 8107762:	4a15      	ldr	r2, [pc, #84]	; (81077b8 <TIM_OC4_SetConfig+0xc8>)
 8107764:	4293      	cmp	r3, r2
 8107766:	d003      	beq.n	8107770 <TIM_OC4_SetConfig+0x80>
 8107768:	687b      	ldr	r3, [r7, #4]
 810776a:	4a14      	ldr	r2, [pc, #80]	; (81077bc <TIM_OC4_SetConfig+0xcc>)
 810776c:	4293      	cmp	r3, r2
 810776e:	d109      	bne.n	8107784 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107770:	697b      	ldr	r3, [r7, #20]
 8107772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107778:	683b      	ldr	r3, [r7, #0]
 810777a:	695b      	ldr	r3, [r3, #20]
 810777c:	019b      	lsls	r3, r3, #6
 810777e:	697a      	ldr	r2, [r7, #20]
 8107780:	4313      	orrs	r3, r2
 8107782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107784:	687b      	ldr	r3, [r7, #4]
 8107786:	697a      	ldr	r2, [r7, #20]
 8107788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810778a:	687b      	ldr	r3, [r7, #4]
 810778c:	68fa      	ldr	r2, [r7, #12]
 810778e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107790:	683b      	ldr	r3, [r7, #0]
 8107792:	685a      	ldr	r2, [r3, #4]
 8107794:	687b      	ldr	r3, [r7, #4]
 8107796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107798:	687b      	ldr	r3, [r7, #4]
 810779a:	693a      	ldr	r2, [r7, #16]
 810779c:	621a      	str	r2, [r3, #32]
}
 810779e:	bf00      	nop
 81077a0:	371c      	adds	r7, #28
 81077a2:	46bd      	mov	sp, r7
 81077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077a8:	4770      	bx	lr
 81077aa:	bf00      	nop
 81077ac:	40010000 	.word	0x40010000
 81077b0:	40010400 	.word	0x40010400
 81077b4:	40014000 	.word	0x40014000
 81077b8:	40014400 	.word	0x40014400
 81077bc:	40014800 	.word	0x40014800

081077c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81077c0:	b480      	push	{r7}
 81077c2:	b087      	sub	sp, #28
 81077c4:	af00      	add	r7, sp, #0
 81077c6:	6078      	str	r0, [r7, #4]
 81077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81077ca:	687b      	ldr	r3, [r7, #4]
 81077cc:	6a1b      	ldr	r3, [r3, #32]
 81077ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81077d2:	687b      	ldr	r3, [r7, #4]
 81077d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81077d6:	687b      	ldr	r3, [r7, #4]
 81077d8:	6a1b      	ldr	r3, [r3, #32]
 81077da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81077dc:	687b      	ldr	r3, [r7, #4]
 81077de:	685b      	ldr	r3, [r3, #4]
 81077e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81077e2:	687b      	ldr	r3, [r7, #4]
 81077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81077e8:	68fb      	ldr	r3, [r7, #12]
 81077ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81077ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81077f0:	683b      	ldr	r3, [r7, #0]
 81077f2:	681b      	ldr	r3, [r3, #0]
 81077f4:	68fa      	ldr	r2, [r7, #12]
 81077f6:	4313      	orrs	r3, r2
 81077f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81077fa:	693b      	ldr	r3, [r7, #16]
 81077fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107800:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107802:	683b      	ldr	r3, [r7, #0]
 8107804:	689b      	ldr	r3, [r3, #8]
 8107806:	041b      	lsls	r3, r3, #16
 8107808:	693a      	ldr	r2, [r7, #16]
 810780a:	4313      	orrs	r3, r2
 810780c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810780e:	687b      	ldr	r3, [r7, #4]
 8107810:	4a17      	ldr	r2, [pc, #92]	; (8107870 <TIM_OC5_SetConfig+0xb0>)
 8107812:	4293      	cmp	r3, r2
 8107814:	d00f      	beq.n	8107836 <TIM_OC5_SetConfig+0x76>
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	4a16      	ldr	r2, [pc, #88]	; (8107874 <TIM_OC5_SetConfig+0xb4>)
 810781a:	4293      	cmp	r3, r2
 810781c:	d00b      	beq.n	8107836 <TIM_OC5_SetConfig+0x76>
 810781e:	687b      	ldr	r3, [r7, #4]
 8107820:	4a15      	ldr	r2, [pc, #84]	; (8107878 <TIM_OC5_SetConfig+0xb8>)
 8107822:	4293      	cmp	r3, r2
 8107824:	d007      	beq.n	8107836 <TIM_OC5_SetConfig+0x76>
 8107826:	687b      	ldr	r3, [r7, #4]
 8107828:	4a14      	ldr	r2, [pc, #80]	; (810787c <TIM_OC5_SetConfig+0xbc>)
 810782a:	4293      	cmp	r3, r2
 810782c:	d003      	beq.n	8107836 <TIM_OC5_SetConfig+0x76>
 810782e:	687b      	ldr	r3, [r7, #4]
 8107830:	4a13      	ldr	r2, [pc, #76]	; (8107880 <TIM_OC5_SetConfig+0xc0>)
 8107832:	4293      	cmp	r3, r2
 8107834:	d109      	bne.n	810784a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107836:	697b      	ldr	r3, [r7, #20]
 8107838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810783c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810783e:	683b      	ldr	r3, [r7, #0]
 8107840:	695b      	ldr	r3, [r3, #20]
 8107842:	021b      	lsls	r3, r3, #8
 8107844:	697a      	ldr	r2, [r7, #20]
 8107846:	4313      	orrs	r3, r2
 8107848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810784a:	687b      	ldr	r3, [r7, #4]
 810784c:	697a      	ldr	r2, [r7, #20]
 810784e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	68fa      	ldr	r2, [r7, #12]
 8107854:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107856:	683b      	ldr	r3, [r7, #0]
 8107858:	685a      	ldr	r2, [r3, #4]
 810785a:	687b      	ldr	r3, [r7, #4]
 810785c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810785e:	687b      	ldr	r3, [r7, #4]
 8107860:	693a      	ldr	r2, [r7, #16]
 8107862:	621a      	str	r2, [r3, #32]
}
 8107864:	bf00      	nop
 8107866:	371c      	adds	r7, #28
 8107868:	46bd      	mov	sp, r7
 810786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810786e:	4770      	bx	lr
 8107870:	40010000 	.word	0x40010000
 8107874:	40010400 	.word	0x40010400
 8107878:	40014000 	.word	0x40014000
 810787c:	40014400 	.word	0x40014400
 8107880:	40014800 	.word	0x40014800

08107884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8107884:	b480      	push	{r7}
 8107886:	b087      	sub	sp, #28
 8107888:	af00      	add	r7, sp, #0
 810788a:	6078      	str	r0, [r7, #4]
 810788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810788e:	687b      	ldr	r3, [r7, #4]
 8107890:	6a1b      	ldr	r3, [r3, #32]
 8107892:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8107896:	687b      	ldr	r3, [r7, #4]
 8107898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	6a1b      	ldr	r3, [r3, #32]
 810789e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81078a0:	687b      	ldr	r3, [r7, #4]
 81078a2:	685b      	ldr	r3, [r3, #4]
 81078a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81078ac:	68fb      	ldr	r3, [r7, #12]
 81078ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81078b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81078b4:	683b      	ldr	r3, [r7, #0]
 81078b6:	681b      	ldr	r3, [r3, #0]
 81078b8:	021b      	lsls	r3, r3, #8
 81078ba:	68fa      	ldr	r2, [r7, #12]
 81078bc:	4313      	orrs	r3, r2
 81078be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81078c0:	693b      	ldr	r3, [r7, #16]
 81078c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81078c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81078c8:	683b      	ldr	r3, [r7, #0]
 81078ca:	689b      	ldr	r3, [r3, #8]
 81078cc:	051b      	lsls	r3, r3, #20
 81078ce:	693a      	ldr	r2, [r7, #16]
 81078d0:	4313      	orrs	r3, r2
 81078d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81078d4:	687b      	ldr	r3, [r7, #4]
 81078d6:	4a18      	ldr	r2, [pc, #96]	; (8107938 <TIM_OC6_SetConfig+0xb4>)
 81078d8:	4293      	cmp	r3, r2
 81078da:	d00f      	beq.n	81078fc <TIM_OC6_SetConfig+0x78>
 81078dc:	687b      	ldr	r3, [r7, #4]
 81078de:	4a17      	ldr	r2, [pc, #92]	; (810793c <TIM_OC6_SetConfig+0xb8>)
 81078e0:	4293      	cmp	r3, r2
 81078e2:	d00b      	beq.n	81078fc <TIM_OC6_SetConfig+0x78>
 81078e4:	687b      	ldr	r3, [r7, #4]
 81078e6:	4a16      	ldr	r2, [pc, #88]	; (8107940 <TIM_OC6_SetConfig+0xbc>)
 81078e8:	4293      	cmp	r3, r2
 81078ea:	d007      	beq.n	81078fc <TIM_OC6_SetConfig+0x78>
 81078ec:	687b      	ldr	r3, [r7, #4]
 81078ee:	4a15      	ldr	r2, [pc, #84]	; (8107944 <TIM_OC6_SetConfig+0xc0>)
 81078f0:	4293      	cmp	r3, r2
 81078f2:	d003      	beq.n	81078fc <TIM_OC6_SetConfig+0x78>
 81078f4:	687b      	ldr	r3, [r7, #4]
 81078f6:	4a14      	ldr	r2, [pc, #80]	; (8107948 <TIM_OC6_SetConfig+0xc4>)
 81078f8:	4293      	cmp	r3, r2
 81078fa:	d109      	bne.n	8107910 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81078fc:	697b      	ldr	r3, [r7, #20]
 81078fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107902:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107904:	683b      	ldr	r3, [r7, #0]
 8107906:	695b      	ldr	r3, [r3, #20]
 8107908:	029b      	lsls	r3, r3, #10
 810790a:	697a      	ldr	r2, [r7, #20]
 810790c:	4313      	orrs	r3, r2
 810790e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107910:	687b      	ldr	r3, [r7, #4]
 8107912:	697a      	ldr	r2, [r7, #20]
 8107914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107916:	687b      	ldr	r3, [r7, #4]
 8107918:	68fa      	ldr	r2, [r7, #12]
 810791a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810791c:	683b      	ldr	r3, [r7, #0]
 810791e:	685a      	ldr	r2, [r3, #4]
 8107920:	687b      	ldr	r3, [r7, #4]
 8107922:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	693a      	ldr	r2, [r7, #16]
 8107928:	621a      	str	r2, [r3, #32]
}
 810792a:	bf00      	nop
 810792c:	371c      	adds	r7, #28
 810792e:	46bd      	mov	sp, r7
 8107930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107934:	4770      	bx	lr
 8107936:	bf00      	nop
 8107938:	40010000 	.word	0x40010000
 810793c:	40010400 	.word	0x40010400
 8107940:	40014000 	.word	0x40014000
 8107944:	40014400 	.word	0x40014400
 8107948:	40014800 	.word	0x40014800

0810794c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810794c:	b480      	push	{r7}
 810794e:	b087      	sub	sp, #28
 8107950:	af00      	add	r7, sp, #0
 8107952:	60f8      	str	r0, [r7, #12]
 8107954:	60b9      	str	r1, [r7, #8]
 8107956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8107958:	68fb      	ldr	r3, [r7, #12]
 810795a:	6a1b      	ldr	r3, [r3, #32]
 810795c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810795e:	68fb      	ldr	r3, [r7, #12]
 8107960:	6a1b      	ldr	r3, [r3, #32]
 8107962:	f023 0201 	bic.w	r2, r3, #1
 8107966:	68fb      	ldr	r3, [r7, #12]
 8107968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810796a:	68fb      	ldr	r3, [r7, #12]
 810796c:	699b      	ldr	r3, [r3, #24]
 810796e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8107970:	693b      	ldr	r3, [r7, #16]
 8107972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8107978:	687b      	ldr	r3, [r7, #4]
 810797a:	011b      	lsls	r3, r3, #4
 810797c:	693a      	ldr	r2, [r7, #16]
 810797e:	4313      	orrs	r3, r2
 8107980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8107982:	697b      	ldr	r3, [r7, #20]
 8107984:	f023 030a 	bic.w	r3, r3, #10
 8107988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810798a:	697a      	ldr	r2, [r7, #20]
 810798c:	68bb      	ldr	r3, [r7, #8]
 810798e:	4313      	orrs	r3, r2
 8107990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8107992:	68fb      	ldr	r3, [r7, #12]
 8107994:	693a      	ldr	r2, [r7, #16]
 8107996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107998:	68fb      	ldr	r3, [r7, #12]
 810799a:	697a      	ldr	r2, [r7, #20]
 810799c:	621a      	str	r2, [r3, #32]
}
 810799e:	bf00      	nop
 81079a0:	371c      	adds	r7, #28
 81079a2:	46bd      	mov	sp, r7
 81079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079a8:	4770      	bx	lr

081079aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81079aa:	b480      	push	{r7}
 81079ac:	b087      	sub	sp, #28
 81079ae:	af00      	add	r7, sp, #0
 81079b0:	60f8      	str	r0, [r7, #12]
 81079b2:	60b9      	str	r1, [r7, #8]
 81079b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81079b6:	68fb      	ldr	r3, [r7, #12]
 81079b8:	6a1b      	ldr	r3, [r3, #32]
 81079ba:	f023 0210 	bic.w	r2, r3, #16
 81079be:	68fb      	ldr	r3, [r7, #12]
 81079c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81079c2:	68fb      	ldr	r3, [r7, #12]
 81079c4:	699b      	ldr	r3, [r3, #24]
 81079c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81079c8:	68fb      	ldr	r3, [r7, #12]
 81079ca:	6a1b      	ldr	r3, [r3, #32]
 81079cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81079ce:	697b      	ldr	r3, [r7, #20]
 81079d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81079d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81079d6:	687b      	ldr	r3, [r7, #4]
 81079d8:	031b      	lsls	r3, r3, #12
 81079da:	697a      	ldr	r2, [r7, #20]
 81079dc:	4313      	orrs	r3, r2
 81079de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81079e0:	693b      	ldr	r3, [r7, #16]
 81079e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81079e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81079e8:	68bb      	ldr	r3, [r7, #8]
 81079ea:	011b      	lsls	r3, r3, #4
 81079ec:	693a      	ldr	r2, [r7, #16]
 81079ee:	4313      	orrs	r3, r2
 81079f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81079f2:	68fb      	ldr	r3, [r7, #12]
 81079f4:	697a      	ldr	r2, [r7, #20]
 81079f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81079f8:	68fb      	ldr	r3, [r7, #12]
 81079fa:	693a      	ldr	r2, [r7, #16]
 81079fc:	621a      	str	r2, [r3, #32]
}
 81079fe:	bf00      	nop
 8107a00:	371c      	adds	r7, #28
 8107a02:	46bd      	mov	sp, r7
 8107a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a08:	4770      	bx	lr

08107a0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8107a0a:	b480      	push	{r7}
 8107a0c:	b085      	sub	sp, #20
 8107a0e:	af00      	add	r7, sp, #0
 8107a10:	6078      	str	r0, [r7, #4]
 8107a12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8107a14:	687b      	ldr	r3, [r7, #4]
 8107a16:	689b      	ldr	r3, [r3, #8]
 8107a18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8107a1a:	68fb      	ldr	r3, [r7, #12]
 8107a1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8107a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8107a26:	683a      	ldr	r2, [r7, #0]
 8107a28:	68fb      	ldr	r3, [r7, #12]
 8107a2a:	4313      	orrs	r3, r2
 8107a2c:	f043 0307 	orr.w	r3, r3, #7
 8107a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107a32:	687b      	ldr	r3, [r7, #4]
 8107a34:	68fa      	ldr	r2, [r7, #12]
 8107a36:	609a      	str	r2, [r3, #8]
}
 8107a38:	bf00      	nop
 8107a3a:	3714      	adds	r7, #20
 8107a3c:	46bd      	mov	sp, r7
 8107a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a42:	4770      	bx	lr

08107a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8107a44:	b480      	push	{r7}
 8107a46:	b087      	sub	sp, #28
 8107a48:	af00      	add	r7, sp, #0
 8107a4a:	60f8      	str	r0, [r7, #12]
 8107a4c:	60b9      	str	r1, [r7, #8]
 8107a4e:	607a      	str	r2, [r7, #4]
 8107a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8107a52:	68fb      	ldr	r3, [r7, #12]
 8107a54:	689b      	ldr	r3, [r3, #8]
 8107a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107a58:	697b      	ldr	r3, [r7, #20]
 8107a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8107a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8107a60:	683b      	ldr	r3, [r7, #0]
 8107a62:	021a      	lsls	r2, r3, #8
 8107a64:	687b      	ldr	r3, [r7, #4]
 8107a66:	431a      	orrs	r2, r3
 8107a68:	68bb      	ldr	r3, [r7, #8]
 8107a6a:	4313      	orrs	r3, r2
 8107a6c:	697a      	ldr	r2, [r7, #20]
 8107a6e:	4313      	orrs	r3, r2
 8107a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107a72:	68fb      	ldr	r3, [r7, #12]
 8107a74:	697a      	ldr	r2, [r7, #20]
 8107a76:	609a      	str	r2, [r3, #8]
}
 8107a78:	bf00      	nop
 8107a7a:	371c      	adds	r7, #28
 8107a7c:	46bd      	mov	sp, r7
 8107a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a82:	4770      	bx	lr

08107a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8107a84:	b480      	push	{r7}
 8107a86:	b087      	sub	sp, #28
 8107a88:	af00      	add	r7, sp, #0
 8107a8a:	60f8      	str	r0, [r7, #12]
 8107a8c:	60b9      	str	r1, [r7, #8]
 8107a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8107a90:	68bb      	ldr	r3, [r7, #8]
 8107a92:	f003 031f 	and.w	r3, r3, #31
 8107a96:	2201      	movs	r2, #1
 8107a98:	fa02 f303 	lsl.w	r3, r2, r3
 8107a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8107a9e:	68fb      	ldr	r3, [r7, #12]
 8107aa0:	6a1a      	ldr	r2, [r3, #32]
 8107aa2:	697b      	ldr	r3, [r7, #20]
 8107aa4:	43db      	mvns	r3, r3
 8107aa6:	401a      	ands	r2, r3
 8107aa8:	68fb      	ldr	r3, [r7, #12]
 8107aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8107aac:	68fb      	ldr	r3, [r7, #12]
 8107aae:	6a1a      	ldr	r2, [r3, #32]
 8107ab0:	68bb      	ldr	r3, [r7, #8]
 8107ab2:	f003 031f 	and.w	r3, r3, #31
 8107ab6:	6879      	ldr	r1, [r7, #4]
 8107ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8107abc:	431a      	orrs	r2, r3
 8107abe:	68fb      	ldr	r3, [r7, #12]
 8107ac0:	621a      	str	r2, [r3, #32]
}
 8107ac2:	bf00      	nop
 8107ac4:	371c      	adds	r7, #28
 8107ac6:	46bd      	mov	sp, r7
 8107ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107acc:	4770      	bx	lr
	...

08107ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107ad0:	b480      	push	{r7}
 8107ad2:	b085      	sub	sp, #20
 8107ad4:	af00      	add	r7, sp, #0
 8107ad6:	6078      	str	r0, [r7, #4]
 8107ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107ada:	687b      	ldr	r3, [r7, #4]
 8107adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107ae0:	2b01      	cmp	r3, #1
 8107ae2:	d101      	bne.n	8107ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107ae4:	2302      	movs	r3, #2
 8107ae6:	e068      	b.n	8107bba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	2201      	movs	r2, #1
 8107aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107af0:	687b      	ldr	r3, [r7, #4]
 8107af2:	2202      	movs	r2, #2
 8107af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107af8:	687b      	ldr	r3, [r7, #4]
 8107afa:	681b      	ldr	r3, [r3, #0]
 8107afc:	685b      	ldr	r3, [r3, #4]
 8107afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	681b      	ldr	r3, [r3, #0]
 8107b04:	689b      	ldr	r3, [r3, #8]
 8107b06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	4a2e      	ldr	r2, [pc, #184]	; (8107bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8107b0e:	4293      	cmp	r3, r2
 8107b10:	d004      	beq.n	8107b1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107b12:	687b      	ldr	r3, [r7, #4]
 8107b14:	681b      	ldr	r3, [r3, #0]
 8107b16:	4a2d      	ldr	r2, [pc, #180]	; (8107bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8107b18:	4293      	cmp	r3, r2
 8107b1a:	d108      	bne.n	8107b2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107b1c:	68fb      	ldr	r3, [r7, #12]
 8107b1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107b22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107b24:	683b      	ldr	r3, [r7, #0]
 8107b26:	685b      	ldr	r3, [r3, #4]
 8107b28:	68fa      	ldr	r2, [r7, #12]
 8107b2a:	4313      	orrs	r3, r2
 8107b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107b2e:	68fb      	ldr	r3, [r7, #12]
 8107b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107b34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107b36:	683b      	ldr	r3, [r7, #0]
 8107b38:	681b      	ldr	r3, [r3, #0]
 8107b3a:	68fa      	ldr	r2, [r7, #12]
 8107b3c:	4313      	orrs	r3, r2
 8107b3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107b40:	687b      	ldr	r3, [r7, #4]
 8107b42:	681b      	ldr	r3, [r3, #0]
 8107b44:	68fa      	ldr	r2, [r7, #12]
 8107b46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	4a1e      	ldr	r2, [pc, #120]	; (8107bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8107b4e:	4293      	cmp	r3, r2
 8107b50:	d01d      	beq.n	8107b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	681b      	ldr	r3, [r3, #0]
 8107b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b5a:	d018      	beq.n	8107b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	4a1b      	ldr	r2, [pc, #108]	; (8107bd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107b62:	4293      	cmp	r3, r2
 8107b64:	d013      	beq.n	8107b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	681b      	ldr	r3, [r3, #0]
 8107b6a:	4a1a      	ldr	r2, [pc, #104]	; (8107bd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107b6c:	4293      	cmp	r3, r2
 8107b6e:	d00e      	beq.n	8107b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	4a18      	ldr	r2, [pc, #96]	; (8107bd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107b76:	4293      	cmp	r3, r2
 8107b78:	d009      	beq.n	8107b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	4a13      	ldr	r2, [pc, #76]	; (8107bcc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8107b80:	4293      	cmp	r3, r2
 8107b82:	d004      	beq.n	8107b8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107b84:	687b      	ldr	r3, [r7, #4]
 8107b86:	681b      	ldr	r3, [r3, #0]
 8107b88:	4a14      	ldr	r2, [pc, #80]	; (8107bdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107b8a:	4293      	cmp	r3, r2
 8107b8c:	d10c      	bne.n	8107ba8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107b8e:	68bb      	ldr	r3, [r7, #8]
 8107b90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107b94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107b96:	683b      	ldr	r3, [r7, #0]
 8107b98:	689b      	ldr	r3, [r3, #8]
 8107b9a:	68ba      	ldr	r2, [r7, #8]
 8107b9c:	4313      	orrs	r3, r2
 8107b9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107ba0:	687b      	ldr	r3, [r7, #4]
 8107ba2:	681b      	ldr	r3, [r3, #0]
 8107ba4:	68ba      	ldr	r2, [r7, #8]
 8107ba6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107ba8:	687b      	ldr	r3, [r7, #4]
 8107baa:	2201      	movs	r2, #1
 8107bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	2200      	movs	r2, #0
 8107bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107bb8:	2300      	movs	r3, #0
}
 8107bba:	4618      	mov	r0, r3
 8107bbc:	3714      	adds	r7, #20
 8107bbe:	46bd      	mov	sp, r7
 8107bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bc4:	4770      	bx	lr
 8107bc6:	bf00      	nop
 8107bc8:	40010000 	.word	0x40010000
 8107bcc:	40010400 	.word	0x40010400
 8107bd0:	40000400 	.word	0x40000400
 8107bd4:	40000800 	.word	0x40000800
 8107bd8:	40000c00 	.word	0x40000c00
 8107bdc:	40001800 	.word	0x40001800

08107be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107be0:	b480      	push	{r7}
 8107be2:	b085      	sub	sp, #20
 8107be4:	af00      	add	r7, sp, #0
 8107be6:	6078      	str	r0, [r7, #4]
 8107be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8107bea:	2300      	movs	r3, #0
 8107bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107bf4:	2b01      	cmp	r3, #1
 8107bf6:	d101      	bne.n	8107bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8107bf8:	2302      	movs	r3, #2
 8107bfa:	e065      	b.n	8107cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	2201      	movs	r2, #1
 8107c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107c04:	68fb      	ldr	r3, [r7, #12]
 8107c06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8107c0a:	683b      	ldr	r3, [r7, #0]
 8107c0c:	68db      	ldr	r3, [r3, #12]
 8107c0e:	4313      	orrs	r3, r2
 8107c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107c12:	68fb      	ldr	r3, [r7, #12]
 8107c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107c18:	683b      	ldr	r3, [r7, #0]
 8107c1a:	689b      	ldr	r3, [r3, #8]
 8107c1c:	4313      	orrs	r3, r2
 8107c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107c20:	68fb      	ldr	r3, [r7, #12]
 8107c22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107c26:	683b      	ldr	r3, [r7, #0]
 8107c28:	685b      	ldr	r3, [r3, #4]
 8107c2a:	4313      	orrs	r3, r2
 8107c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107c2e:	68fb      	ldr	r3, [r7, #12]
 8107c30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107c34:	683b      	ldr	r3, [r7, #0]
 8107c36:	681b      	ldr	r3, [r3, #0]
 8107c38:	4313      	orrs	r3, r2
 8107c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107c3c:	68fb      	ldr	r3, [r7, #12]
 8107c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107c42:	683b      	ldr	r3, [r7, #0]
 8107c44:	691b      	ldr	r3, [r3, #16]
 8107c46:	4313      	orrs	r3, r2
 8107c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107c4a:	68fb      	ldr	r3, [r7, #12]
 8107c4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107c50:	683b      	ldr	r3, [r7, #0]
 8107c52:	695b      	ldr	r3, [r3, #20]
 8107c54:	4313      	orrs	r3, r2
 8107c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107c58:	68fb      	ldr	r3, [r7, #12]
 8107c5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107c5e:	683b      	ldr	r3, [r7, #0]
 8107c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107c62:	4313      	orrs	r3, r2
 8107c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107c66:	68fb      	ldr	r3, [r7, #12]
 8107c68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107c6c:	683b      	ldr	r3, [r7, #0]
 8107c6e:	699b      	ldr	r3, [r3, #24]
 8107c70:	041b      	lsls	r3, r3, #16
 8107c72:	4313      	orrs	r3, r2
 8107c74:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107c76:	687b      	ldr	r3, [r7, #4]
 8107c78:	681b      	ldr	r3, [r3, #0]
 8107c7a:	4a16      	ldr	r2, [pc, #88]	; (8107cd4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107c7c:	4293      	cmp	r3, r2
 8107c7e:	d004      	beq.n	8107c8a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	681b      	ldr	r3, [r3, #0]
 8107c84:	4a14      	ldr	r2, [pc, #80]	; (8107cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107c86:	4293      	cmp	r3, r2
 8107c88:	d115      	bne.n	8107cb6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107c8a:	68fb      	ldr	r3, [r7, #12]
 8107c8c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107c90:	683b      	ldr	r3, [r7, #0]
 8107c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107c94:	051b      	lsls	r3, r3, #20
 8107c96:	4313      	orrs	r3, r2
 8107c98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107c9a:	68fb      	ldr	r3, [r7, #12]
 8107c9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107ca0:	683b      	ldr	r3, [r7, #0]
 8107ca2:	69db      	ldr	r3, [r3, #28]
 8107ca4:	4313      	orrs	r3, r2
 8107ca6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107ca8:	68fb      	ldr	r3, [r7, #12]
 8107caa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8107cae:	683b      	ldr	r3, [r7, #0]
 8107cb0:	6a1b      	ldr	r3, [r3, #32]
 8107cb2:	4313      	orrs	r3, r2
 8107cb4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107cb6:	687b      	ldr	r3, [r7, #4]
 8107cb8:	681b      	ldr	r3, [r3, #0]
 8107cba:	68fa      	ldr	r2, [r7, #12]
 8107cbc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8107cbe:	687b      	ldr	r3, [r7, #4]
 8107cc0:	2200      	movs	r2, #0
 8107cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107cc6:	2300      	movs	r3, #0
}
 8107cc8:	4618      	mov	r0, r3
 8107cca:	3714      	adds	r7, #20
 8107ccc:	46bd      	mov	sp, r7
 8107cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cd2:	4770      	bx	lr
 8107cd4:	40010000 	.word	0x40010000
 8107cd8:	40010400 	.word	0x40010400

08107cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8107cdc:	b480      	push	{r7}
 8107cde:	b083      	sub	sp, #12
 8107ce0:	af00      	add	r7, sp, #0
 8107ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107ce4:	bf00      	nop
 8107ce6:	370c      	adds	r7, #12
 8107ce8:	46bd      	mov	sp, r7
 8107cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cee:	4770      	bx	lr

08107cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107cf0:	b480      	push	{r7}
 8107cf2:	b083      	sub	sp, #12
 8107cf4:	af00      	add	r7, sp, #0
 8107cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107cf8:	bf00      	nop
 8107cfa:	370c      	adds	r7, #12
 8107cfc:	46bd      	mov	sp, r7
 8107cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d02:	4770      	bx	lr

08107d04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107d04:	b480      	push	{r7}
 8107d06:	b083      	sub	sp, #12
 8107d08:	af00      	add	r7, sp, #0
 8107d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107d0c:	bf00      	nop
 8107d0e:	370c      	adds	r7, #12
 8107d10:	46bd      	mov	sp, r7
 8107d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d16:	4770      	bx	lr

08107d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107d18:	b580      	push	{r7, lr}
 8107d1a:	b082      	sub	sp, #8
 8107d1c:	af00      	add	r7, sp, #0
 8107d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107d20:	687b      	ldr	r3, [r7, #4]
 8107d22:	2b00      	cmp	r3, #0
 8107d24:	d101      	bne.n	8107d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107d26:	2301      	movs	r3, #1
 8107d28:	e042      	b.n	8107db0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107d30:	2b00      	cmp	r3, #0
 8107d32:	d106      	bne.n	8107d42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	2200      	movs	r2, #0
 8107d38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107d3c:	6878      	ldr	r0, [r7, #4]
 8107d3e:	f7fa fb35 	bl	81023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107d42:	687b      	ldr	r3, [r7, #4]
 8107d44:	2224      	movs	r2, #36	; 0x24
 8107d46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8107d4a:	687b      	ldr	r3, [r7, #4]
 8107d4c:	681b      	ldr	r3, [r3, #0]
 8107d4e:	681a      	ldr	r2, [r3, #0]
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	681b      	ldr	r3, [r3, #0]
 8107d54:	f022 0201 	bic.w	r2, r2, #1
 8107d58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107d5a:	6878      	ldr	r0, [r7, #4]
 8107d5c:	f000 fac8 	bl	81082f0 <UART_SetConfig>
 8107d60:	4603      	mov	r3, r0
 8107d62:	2b01      	cmp	r3, #1
 8107d64:	d101      	bne.n	8107d6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107d66:	2301      	movs	r3, #1
 8107d68:	e022      	b.n	8107db0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107d6a:	687b      	ldr	r3, [r7, #4]
 8107d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107d6e:	2b00      	cmp	r3, #0
 8107d70:	d002      	beq.n	8107d78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107d72:	6878      	ldr	r0, [r7, #4]
 8107d74:	f001 f86c 	bl	8108e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107d78:	687b      	ldr	r3, [r7, #4]
 8107d7a:	681b      	ldr	r3, [r3, #0]
 8107d7c:	685a      	ldr	r2, [r3, #4]
 8107d7e:	687b      	ldr	r3, [r7, #4]
 8107d80:	681b      	ldr	r3, [r3, #0]
 8107d82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8107d86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107d88:	687b      	ldr	r3, [r7, #4]
 8107d8a:	681b      	ldr	r3, [r3, #0]
 8107d8c:	689a      	ldr	r2, [r3, #8]
 8107d8e:	687b      	ldr	r3, [r7, #4]
 8107d90:	681b      	ldr	r3, [r3, #0]
 8107d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8107d96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107d98:	687b      	ldr	r3, [r7, #4]
 8107d9a:	681b      	ldr	r3, [r3, #0]
 8107d9c:	681a      	ldr	r2, [r3, #0]
 8107d9e:	687b      	ldr	r3, [r7, #4]
 8107da0:	681b      	ldr	r3, [r3, #0]
 8107da2:	f042 0201 	orr.w	r2, r2, #1
 8107da6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107da8:	6878      	ldr	r0, [r7, #4]
 8107daa:	f001 f8f3 	bl	8108f94 <UART_CheckIdleState>
 8107dae:	4603      	mov	r3, r0
}
 8107db0:	4618      	mov	r0, r3
 8107db2:	3708      	adds	r7, #8
 8107db4:	46bd      	mov	sp, r7
 8107db6:	bd80      	pop	{r7, pc}

08107db8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107db8:	b580      	push	{r7, lr}
 8107dba:	b084      	sub	sp, #16
 8107dbc:	af00      	add	r7, sp, #0
 8107dbe:	60f8      	str	r0, [r7, #12]
 8107dc0:	60b9      	str	r1, [r7, #8]
 8107dc2:	4613      	mov	r3, r2
 8107dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107dc6:	68fb      	ldr	r3, [r7, #12]
 8107dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8107dcc:	2b20      	cmp	r3, #32
 8107dce:	d168      	bne.n	8107ea2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8107dd0:	68bb      	ldr	r3, [r7, #8]
 8107dd2:	2b00      	cmp	r3, #0
 8107dd4:	d002      	beq.n	8107ddc <HAL_UART_Transmit_DMA+0x24>
 8107dd6:	88fb      	ldrh	r3, [r7, #6]
 8107dd8:	2b00      	cmp	r3, #0
 8107dda:	d101      	bne.n	8107de0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8107ddc:	2301      	movs	r3, #1
 8107dde:	e061      	b.n	8107ea4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8107de0:	68fb      	ldr	r3, [r7, #12]
 8107de2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107de6:	2b01      	cmp	r3, #1
 8107de8:	d101      	bne.n	8107dee <HAL_UART_Transmit_DMA+0x36>
 8107dea:	2302      	movs	r3, #2
 8107dec:	e05a      	b.n	8107ea4 <HAL_UART_Transmit_DMA+0xec>
 8107dee:	68fb      	ldr	r3, [r7, #12]
 8107df0:	2201      	movs	r2, #1
 8107df2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8107df6:	68fb      	ldr	r3, [r7, #12]
 8107df8:	68ba      	ldr	r2, [r7, #8]
 8107dfa:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8107dfc:	68fb      	ldr	r3, [r7, #12]
 8107dfe:	88fa      	ldrh	r2, [r7, #6]
 8107e00:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8107e04:	68fb      	ldr	r3, [r7, #12]
 8107e06:	88fa      	ldrh	r2, [r7, #6]
 8107e08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107e0c:	68fb      	ldr	r3, [r7, #12]
 8107e0e:	2200      	movs	r2, #0
 8107e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107e14:	68fb      	ldr	r3, [r7, #12]
 8107e16:	2221      	movs	r2, #33	; 0x21
 8107e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8107e1c:	68fb      	ldr	r3, [r7, #12]
 8107e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107e20:	2b00      	cmp	r3, #0
 8107e22:	d02c      	beq.n	8107e7e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8107e24:	68fb      	ldr	r3, [r7, #12]
 8107e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107e28:	4a20      	ldr	r2, [pc, #128]	; (8107eac <HAL_UART_Transmit_DMA+0xf4>)
 8107e2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8107e2c:	68fb      	ldr	r3, [r7, #12]
 8107e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107e30:	4a1f      	ldr	r2, [pc, #124]	; (8107eb0 <HAL_UART_Transmit_DMA+0xf8>)
 8107e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8107e34:	68fb      	ldr	r3, [r7, #12]
 8107e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107e38:	4a1e      	ldr	r2, [pc, #120]	; (8107eb4 <HAL_UART_Transmit_DMA+0xfc>)
 8107e3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8107e3c:	68fb      	ldr	r3, [r7, #12]
 8107e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8107e40:	2200      	movs	r2, #0
 8107e42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8107e44:	68fb      	ldr	r3, [r7, #12]
 8107e46:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8107e48:	68fb      	ldr	r3, [r7, #12]
 8107e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8107e4c:	4619      	mov	r1, r3
 8107e4e:	68fb      	ldr	r3, [r7, #12]
 8107e50:	681b      	ldr	r3, [r3, #0]
 8107e52:	3328      	adds	r3, #40	; 0x28
 8107e54:	461a      	mov	r2, r3
 8107e56:	88fb      	ldrh	r3, [r7, #6]
 8107e58:	f7fb f8b0 	bl	8102fbc <HAL_DMA_Start_IT>
 8107e5c:	4603      	mov	r3, r0
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	d00d      	beq.n	8107e7e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8107e62:	68fb      	ldr	r3, [r7, #12]
 8107e64:	2210      	movs	r2, #16
 8107e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107e6a:	68fb      	ldr	r3, [r7, #12]
 8107e6c:	2200      	movs	r2, #0
 8107e6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8107e72:	68fb      	ldr	r3, [r7, #12]
 8107e74:	2220      	movs	r2, #32
 8107e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8107e7a:	2301      	movs	r3, #1
 8107e7c:	e012      	b.n	8107ea4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8107e7e:	68fb      	ldr	r3, [r7, #12]
 8107e80:	681b      	ldr	r3, [r3, #0]
 8107e82:	2240      	movs	r2, #64	; 0x40
 8107e84:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8107e86:	68fb      	ldr	r3, [r7, #12]
 8107e88:	2200      	movs	r2, #0
 8107e8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8107e8e:	68fb      	ldr	r3, [r7, #12]
 8107e90:	681b      	ldr	r3, [r3, #0]
 8107e92:	689a      	ldr	r2, [r3, #8]
 8107e94:	68fb      	ldr	r3, [r7, #12]
 8107e96:	681b      	ldr	r3, [r3, #0]
 8107e98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8107e9c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8107e9e:	2300      	movs	r3, #0
 8107ea0:	e000      	b.n	8107ea4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8107ea2:	2302      	movs	r3, #2
  }
}
 8107ea4:	4618      	mov	r0, r3
 8107ea6:	3710      	adds	r7, #16
 8107ea8:	46bd      	mov	sp, r7
 8107eaa:	bd80      	pop	{r7, pc}
 8107eac:	081091a7 	.word	0x081091a7
 8107eb0:	081091f7 	.word	0x081091f7
 8107eb4:	08109295 	.word	0x08109295

08107eb8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8107eb8:	b580      	push	{r7, lr}
 8107eba:	b084      	sub	sp, #16
 8107ebc:	af00      	add	r7, sp, #0
 8107ebe:	60f8      	str	r0, [r7, #12]
 8107ec0:	60b9      	str	r1, [r7, #8]
 8107ec2:	4613      	mov	r3, r2
 8107ec4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8107ec6:	68fb      	ldr	r3, [r7, #12]
 8107ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8107ecc:	2b20      	cmp	r3, #32
 8107ece:	d170      	bne.n	8107fb2 <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8107ed0:	68bb      	ldr	r3, [r7, #8]
 8107ed2:	2b00      	cmp	r3, #0
 8107ed4:	d002      	beq.n	8107edc <HAL_UART_Receive_DMA+0x24>
 8107ed6:	88fb      	ldrh	r3, [r7, #6]
 8107ed8:	2b00      	cmp	r3, #0
 8107eda:	d101      	bne.n	8107ee0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8107edc:	2301      	movs	r3, #1
 8107ede:	e069      	b.n	8107fb4 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8107ee0:	68fb      	ldr	r3, [r7, #12]
 8107ee2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8107ee6:	2b01      	cmp	r3, #1
 8107ee8:	d101      	bne.n	8107eee <HAL_UART_Receive_DMA+0x36>
 8107eea:	2302      	movs	r3, #2
 8107eec:	e062      	b.n	8107fb4 <HAL_UART_Receive_DMA+0xfc>
 8107eee:	68fb      	ldr	r3, [r7, #12]
 8107ef0:	2201      	movs	r2, #1
 8107ef2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8107ef6:	68fb      	ldr	r3, [r7, #12]
 8107ef8:	68ba      	ldr	r2, [r7, #8]
 8107efa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8107efc:	68fb      	ldr	r3, [r7, #12]
 8107efe:	88fa      	ldrh	r2, [r7, #6]
 8107f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107f04:	68fb      	ldr	r3, [r7, #12]
 8107f06:	2200      	movs	r2, #0
 8107f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8107f0c:	68fb      	ldr	r3, [r7, #12]
 8107f0e:	2222      	movs	r2, #34	; 0x22
 8107f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8107f14:	68fb      	ldr	r3, [r7, #12]
 8107f16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107f18:	2b00      	cmp	r3, #0
 8107f1a:	d02c      	beq.n	8107f76 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8107f1c:	68fb      	ldr	r3, [r7, #12]
 8107f1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107f20:	4a26      	ldr	r2, [pc, #152]	; (8107fbc <HAL_UART_Receive_DMA+0x104>)
 8107f22:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8107f24:	68fb      	ldr	r3, [r7, #12]
 8107f26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107f28:	4a25      	ldr	r2, [pc, #148]	; (8107fc0 <HAL_UART_Receive_DMA+0x108>)
 8107f2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8107f2c:	68fb      	ldr	r3, [r7, #12]
 8107f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107f30:	4a24      	ldr	r2, [pc, #144]	; (8107fc4 <HAL_UART_Receive_DMA+0x10c>)
 8107f32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8107f34:	68fb      	ldr	r3, [r7, #12]
 8107f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8107f38:	2200      	movs	r2, #0
 8107f3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8107f3c:	68fb      	ldr	r3, [r7, #12]
 8107f3e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8107f40:	68fb      	ldr	r3, [r7, #12]
 8107f42:	681b      	ldr	r3, [r3, #0]
 8107f44:	3324      	adds	r3, #36	; 0x24
 8107f46:	4619      	mov	r1, r3
 8107f48:	68fb      	ldr	r3, [r7, #12]
 8107f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107f4c:	461a      	mov	r2, r3
 8107f4e:	88fb      	ldrh	r3, [r7, #6]
 8107f50:	f7fb f834 	bl	8102fbc <HAL_DMA_Start_IT>
 8107f54:	4603      	mov	r3, r0
 8107f56:	2b00      	cmp	r3, #0
 8107f58:	d00d      	beq.n	8107f76 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8107f5a:	68fb      	ldr	r3, [r7, #12]
 8107f5c:	2210      	movs	r2, #16
 8107f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8107f62:	68fb      	ldr	r3, [r7, #12]
 8107f64:	2200      	movs	r2, #0
 8107f66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8107f6a:	68fb      	ldr	r3, [r7, #12]
 8107f6c:	2220      	movs	r2, #32
 8107f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8107f72:	2301      	movs	r3, #1
 8107f74:	e01e      	b.n	8107fb4 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8107f76:	68fb      	ldr	r3, [r7, #12]
 8107f78:	2200      	movs	r2, #0
 8107f7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8107f7e:	68fb      	ldr	r3, [r7, #12]
 8107f80:	681b      	ldr	r3, [r3, #0]
 8107f82:	681a      	ldr	r2, [r3, #0]
 8107f84:	68fb      	ldr	r3, [r7, #12]
 8107f86:	681b      	ldr	r3, [r3, #0]
 8107f88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8107f8c:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107f8e:	68fb      	ldr	r3, [r7, #12]
 8107f90:	681b      	ldr	r3, [r3, #0]
 8107f92:	689a      	ldr	r2, [r3, #8]
 8107f94:	68fb      	ldr	r3, [r7, #12]
 8107f96:	681b      	ldr	r3, [r3, #0]
 8107f98:	f042 0201 	orr.w	r2, r2, #1
 8107f9c:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8107f9e:	68fb      	ldr	r3, [r7, #12]
 8107fa0:	681b      	ldr	r3, [r3, #0]
 8107fa2:	689a      	ldr	r2, [r3, #8]
 8107fa4:	68fb      	ldr	r3, [r7, #12]
 8107fa6:	681b      	ldr	r3, [r3, #0]
 8107fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8107fac:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8107fae:	2300      	movs	r3, #0
 8107fb0:	e000      	b.n	8107fb4 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8107fb2:	2302      	movs	r3, #2
  }
}
 8107fb4:	4618      	mov	r0, r3
 8107fb6:	3710      	adds	r7, #16
 8107fb8:	46bd      	mov	sp, r7
 8107fba:	bd80      	pop	{r7, pc}
 8107fbc:	08109213 	.word	0x08109213
 8107fc0:	08109279 	.word	0x08109279
 8107fc4:	08109295 	.word	0x08109295

08107fc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8107fc8:	b580      	push	{r7, lr}
 8107fca:	b088      	sub	sp, #32
 8107fcc:	af00      	add	r7, sp, #0
 8107fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	681b      	ldr	r3, [r3, #0]
 8107fd4:	69db      	ldr	r3, [r3, #28]
 8107fd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8107fd8:	687b      	ldr	r3, [r7, #4]
 8107fda:	681b      	ldr	r3, [r3, #0]
 8107fdc:	681b      	ldr	r3, [r3, #0]
 8107fde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8107fe0:	687b      	ldr	r3, [r7, #4]
 8107fe2:	681b      	ldr	r3, [r3, #0]
 8107fe4:	689b      	ldr	r3, [r3, #8]
 8107fe6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8107fe8:	69fa      	ldr	r2, [r7, #28]
 8107fea:	f640 030f 	movw	r3, #2063	; 0x80f
 8107fee:	4013      	ands	r3, r2
 8107ff0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8107ff2:	693b      	ldr	r3, [r7, #16]
 8107ff4:	2b00      	cmp	r3, #0
 8107ff6:	d118      	bne.n	810802a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8107ff8:	69fb      	ldr	r3, [r7, #28]
 8107ffa:	f003 0320 	and.w	r3, r3, #32
 8107ffe:	2b00      	cmp	r3, #0
 8108000:	d013      	beq.n	810802a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8108002:	69bb      	ldr	r3, [r7, #24]
 8108004:	f003 0320 	and.w	r3, r3, #32
 8108008:	2b00      	cmp	r3, #0
 810800a:	d104      	bne.n	8108016 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810800c:	697b      	ldr	r3, [r7, #20]
 810800e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108012:	2b00      	cmp	r3, #0
 8108014:	d009      	beq.n	810802a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8108016:	687b      	ldr	r3, [r7, #4]
 8108018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810801a:	2b00      	cmp	r3, #0
 810801c:	f000 8145 	beq.w	81082aa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8108020:	687b      	ldr	r3, [r7, #4]
 8108022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108024:	6878      	ldr	r0, [r7, #4]
 8108026:	4798      	blx	r3
      }
      return;
 8108028:	e13f      	b.n	81082aa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 810802a:	693b      	ldr	r3, [r7, #16]
 810802c:	2b00      	cmp	r3, #0
 810802e:	f000 80e8 	beq.w	8108202 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8108032:	697a      	ldr	r2, [r7, #20]
 8108034:	4ba1      	ldr	r3, [pc, #644]	; (81082bc <HAL_UART_IRQHandler+0x2f4>)
 8108036:	4013      	ands	r3, r2
 8108038:	2b00      	cmp	r3, #0
 810803a:	d105      	bne.n	8108048 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810803c:	69ba      	ldr	r2, [r7, #24]
 810803e:	4ba0      	ldr	r3, [pc, #640]	; (81082c0 <HAL_UART_IRQHandler+0x2f8>)
 8108040:	4013      	ands	r3, r2
 8108042:	2b00      	cmp	r3, #0
 8108044:	f000 80dd 	beq.w	8108202 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8108048:	69fb      	ldr	r3, [r7, #28]
 810804a:	f003 0301 	and.w	r3, r3, #1
 810804e:	2b00      	cmp	r3, #0
 8108050:	d010      	beq.n	8108074 <HAL_UART_IRQHandler+0xac>
 8108052:	69bb      	ldr	r3, [r7, #24]
 8108054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108058:	2b00      	cmp	r3, #0
 810805a:	d00b      	beq.n	8108074 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 810805c:	687b      	ldr	r3, [r7, #4]
 810805e:	681b      	ldr	r3, [r3, #0]
 8108060:	2201      	movs	r2, #1
 8108062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810806a:	f043 0201 	orr.w	r2, r3, #1
 810806e:	687b      	ldr	r3, [r7, #4]
 8108070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8108074:	69fb      	ldr	r3, [r7, #28]
 8108076:	f003 0302 	and.w	r3, r3, #2
 810807a:	2b00      	cmp	r3, #0
 810807c:	d010      	beq.n	81080a0 <HAL_UART_IRQHandler+0xd8>
 810807e:	697b      	ldr	r3, [r7, #20]
 8108080:	f003 0301 	and.w	r3, r3, #1
 8108084:	2b00      	cmp	r3, #0
 8108086:	d00b      	beq.n	81080a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	681b      	ldr	r3, [r3, #0]
 810808c:	2202      	movs	r2, #2
 810808e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8108090:	687b      	ldr	r3, [r7, #4]
 8108092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108096:	f043 0204 	orr.w	r2, r3, #4
 810809a:	687b      	ldr	r3, [r7, #4]
 810809c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81080a0:	69fb      	ldr	r3, [r7, #28]
 81080a2:	f003 0304 	and.w	r3, r3, #4
 81080a6:	2b00      	cmp	r3, #0
 81080a8:	d010      	beq.n	81080cc <HAL_UART_IRQHandler+0x104>
 81080aa:	697b      	ldr	r3, [r7, #20]
 81080ac:	f003 0301 	and.w	r3, r3, #1
 81080b0:	2b00      	cmp	r3, #0
 81080b2:	d00b      	beq.n	81080cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81080b4:	687b      	ldr	r3, [r7, #4]
 81080b6:	681b      	ldr	r3, [r3, #0]
 81080b8:	2204      	movs	r2, #4
 81080ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81080c2:	f043 0202 	orr.w	r2, r3, #2
 81080c6:	687b      	ldr	r3, [r7, #4]
 81080c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 81080cc:	69fb      	ldr	r3, [r7, #28]
 81080ce:	f003 0308 	and.w	r3, r3, #8
 81080d2:	2b00      	cmp	r3, #0
 81080d4:	d015      	beq.n	8108102 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81080d6:	69bb      	ldr	r3, [r7, #24]
 81080d8:	f003 0320 	and.w	r3, r3, #32
 81080dc:	2b00      	cmp	r3, #0
 81080de:	d104      	bne.n	81080ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81080e0:	697a      	ldr	r2, [r7, #20]
 81080e2:	4b76      	ldr	r3, [pc, #472]	; (81082bc <HAL_UART_IRQHandler+0x2f4>)
 81080e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d00b      	beq.n	8108102 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81080ea:	687b      	ldr	r3, [r7, #4]
 81080ec:	681b      	ldr	r3, [r3, #0]
 81080ee:	2208      	movs	r2, #8
 81080f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81080f2:	687b      	ldr	r3, [r7, #4]
 81080f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81080f8:	f043 0208 	orr.w	r2, r3, #8
 81080fc:	687b      	ldr	r3, [r7, #4]
 81080fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8108102:	69fb      	ldr	r3, [r7, #28]
 8108104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108108:	2b00      	cmp	r3, #0
 810810a:	d011      	beq.n	8108130 <HAL_UART_IRQHandler+0x168>
 810810c:	69bb      	ldr	r3, [r7, #24]
 810810e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8108112:	2b00      	cmp	r3, #0
 8108114:	d00c      	beq.n	8108130 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108116:	687b      	ldr	r3, [r7, #4]
 8108118:	681b      	ldr	r3, [r3, #0]
 810811a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810811e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8108120:	687b      	ldr	r3, [r7, #4]
 8108122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108126:	f043 0220 	orr.w	r2, r3, #32
 810812a:	687b      	ldr	r3, [r7, #4]
 810812c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8108130:	687b      	ldr	r3, [r7, #4]
 8108132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108136:	2b00      	cmp	r3, #0
 8108138:	f000 80b9 	beq.w	81082ae <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810813c:	69fb      	ldr	r3, [r7, #28]
 810813e:	f003 0320 	and.w	r3, r3, #32
 8108142:	2b00      	cmp	r3, #0
 8108144:	d011      	beq.n	810816a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8108146:	69bb      	ldr	r3, [r7, #24]
 8108148:	f003 0320 	and.w	r3, r3, #32
 810814c:	2b00      	cmp	r3, #0
 810814e:	d104      	bne.n	810815a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8108150:	697b      	ldr	r3, [r7, #20]
 8108152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8108156:	2b00      	cmp	r3, #0
 8108158:	d007      	beq.n	810816a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810815e:	2b00      	cmp	r3, #0
 8108160:	d003      	beq.n	810816a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108166:	6878      	ldr	r0, [r7, #4]
 8108168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 810816a:	687b      	ldr	r3, [r7, #4]
 810816c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108170:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	681b      	ldr	r3, [r3, #0]
 8108176:	689b      	ldr	r3, [r3, #8]
 8108178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810817c:	2b40      	cmp	r3, #64	; 0x40
 810817e:	d004      	beq.n	810818a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8108180:	68fb      	ldr	r3, [r7, #12]
 8108182:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8108186:	2b00      	cmp	r3, #0
 8108188:	d031      	beq.n	81081ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 810818a:	6878      	ldr	r0, [r7, #4]
 810818c:	f000 ffe8 	bl	8109160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8108190:	687b      	ldr	r3, [r7, #4]
 8108192:	681b      	ldr	r3, [r3, #0]
 8108194:	689b      	ldr	r3, [r3, #8]
 8108196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810819a:	2b40      	cmp	r3, #64	; 0x40
 810819c:	d123      	bne.n	81081e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810819e:	687b      	ldr	r3, [r7, #4]
 81081a0:	681b      	ldr	r3, [r3, #0]
 81081a2:	689a      	ldr	r2, [r3, #8]
 81081a4:	687b      	ldr	r3, [r7, #4]
 81081a6:	681b      	ldr	r3, [r3, #0]
 81081a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 81081ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81081b2:	2b00      	cmp	r3, #0
 81081b4:	d013      	beq.n	81081de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81081b6:	687b      	ldr	r3, [r7, #4]
 81081b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81081ba:	4a42      	ldr	r2, [pc, #264]	; (81082c4 <HAL_UART_IRQHandler+0x2fc>)
 81081bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81081be:	687b      	ldr	r3, [r7, #4]
 81081c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81081c2:	4618      	mov	r0, r3
 81081c4:	f7fb f964 	bl	8103490 <HAL_DMA_Abort_IT>
 81081c8:	4603      	mov	r3, r0
 81081ca:	2b00      	cmp	r3, #0
 81081cc:	d017      	beq.n	81081fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81081ce:	687b      	ldr	r3, [r7, #4]
 81081d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81081d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81081d4:	687a      	ldr	r2, [r7, #4]
 81081d6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 81081d8:	4610      	mov	r0, r2
 81081da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81081dc:	e00f      	b.n	81081fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 81081de:	6878      	ldr	r0, [r7, #4]
 81081e0:	f7f9 fd98 	bl	8101d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81081e4:	e00b      	b.n	81081fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81081e6:	6878      	ldr	r0, [r7, #4]
 81081e8:	f7f9 fd94 	bl	8101d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81081ec:	e007      	b.n	81081fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 81081ee:	6878      	ldr	r0, [r7, #4]
 81081f0:	f7f9 fd90 	bl	8101d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81081f4:	687b      	ldr	r3, [r7, #4]
 81081f6:	2200      	movs	r2, #0
 81081f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 81081fc:	e057      	b.n	81082ae <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81081fe:	bf00      	nop
    return;
 8108200:	e055      	b.n	81082ae <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8108202:	69fb      	ldr	r3, [r7, #28]
 8108204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8108208:	2b00      	cmp	r3, #0
 810820a:	d00d      	beq.n	8108228 <HAL_UART_IRQHandler+0x260>
 810820c:	697b      	ldr	r3, [r7, #20]
 810820e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8108212:	2b00      	cmp	r3, #0
 8108214:	d008      	beq.n	8108228 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	681b      	ldr	r3, [r3, #0]
 810821a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810821e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8108220:	6878      	ldr	r0, [r7, #4]
 8108222:	f001 f8a7 	bl	8109374 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8108226:	e045      	b.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8108228:	69fb      	ldr	r3, [r7, #28]
 810822a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810822e:	2b00      	cmp	r3, #0
 8108230:	d012      	beq.n	8108258 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8108232:	69bb      	ldr	r3, [r7, #24]
 8108234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108238:	2b00      	cmp	r3, #0
 810823a:	d104      	bne.n	8108246 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810823c:	697b      	ldr	r3, [r7, #20]
 810823e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8108242:	2b00      	cmp	r3, #0
 8108244:	d008      	beq.n	8108258 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810824a:	2b00      	cmp	r3, #0
 810824c:	d031      	beq.n	81082b2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 810824e:	687b      	ldr	r3, [r7, #4]
 8108250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8108252:	6878      	ldr	r0, [r7, #4]
 8108254:	4798      	blx	r3
    }
    return;
 8108256:	e02c      	b.n	81082b2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8108258:	69fb      	ldr	r3, [r7, #28]
 810825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810825e:	2b00      	cmp	r3, #0
 8108260:	d008      	beq.n	8108274 <HAL_UART_IRQHandler+0x2ac>
 8108262:	69bb      	ldr	r3, [r7, #24]
 8108264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108268:	2b00      	cmp	r3, #0
 810826a:	d003      	beq.n	8108274 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 810826c:	6878      	ldr	r0, [r7, #4]
 810826e:	f001 f867 	bl	8109340 <UART_EndTransmit_IT>
    return;
 8108272:	e01f      	b.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8108274:	69fb      	ldr	r3, [r7, #28]
 8108276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810827a:	2b00      	cmp	r3, #0
 810827c:	d008      	beq.n	8108290 <HAL_UART_IRQHandler+0x2c8>
 810827e:	69bb      	ldr	r3, [r7, #24]
 8108280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8108284:	2b00      	cmp	r3, #0
 8108286:	d003      	beq.n	8108290 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8108288:	6878      	ldr	r0, [r7, #4]
 810828a:	f001 f887 	bl	810939c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810828e:	e011      	b.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8108290:	69fb      	ldr	r3, [r7, #28]
 8108292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108296:	2b00      	cmp	r3, #0
 8108298:	d00c      	beq.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
 810829a:	69bb      	ldr	r3, [r7, #24]
 810829c:	2b00      	cmp	r3, #0
 810829e:	da09      	bge.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 81082a0:	6878      	ldr	r0, [r7, #4]
 81082a2:	f001 f871 	bl	8109388 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81082a6:	bf00      	nop
 81082a8:	e004      	b.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
      return;
 81082aa:	bf00      	nop
 81082ac:	e002      	b.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
    return;
 81082ae:	bf00      	nop
 81082b0:	e000      	b.n	81082b4 <HAL_UART_IRQHandler+0x2ec>
    return;
 81082b2:	bf00      	nop
  }
}
 81082b4:	3720      	adds	r7, #32
 81082b6:	46bd      	mov	sp, r7
 81082b8:	bd80      	pop	{r7, pc}
 81082ba:	bf00      	nop
 81082bc:	10000001 	.word	0x10000001
 81082c0:	04000120 	.word	0x04000120
 81082c4:	08109315 	.word	0x08109315

081082c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 81082c8:	b480      	push	{r7}
 81082ca:	b083      	sub	sp, #12
 81082cc:	af00      	add	r7, sp, #0
 81082ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 81082d0:	bf00      	nop
 81082d2:	370c      	adds	r7, #12
 81082d4:	46bd      	mov	sp, r7
 81082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082da:	4770      	bx	lr

081082dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 81082dc:	b480      	push	{r7}
 81082de:	b083      	sub	sp, #12
 81082e0:	af00      	add	r7, sp, #0
 81082e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 81082e4:	bf00      	nop
 81082e6:	370c      	adds	r7, #12
 81082e8:	46bd      	mov	sp, r7
 81082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082ee:	4770      	bx	lr

081082f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81082f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 81082f4:	b08e      	sub	sp, #56	; 0x38
 81082f6:	af00      	add	r7, sp, #0
 81082f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81082fa:	2300      	movs	r3, #0
 81082fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108300:	687b      	ldr	r3, [r7, #4]
 8108302:	689a      	ldr	r2, [r3, #8]
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	691b      	ldr	r3, [r3, #16]
 8108308:	431a      	orrs	r2, r3
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	695b      	ldr	r3, [r3, #20]
 810830e:	431a      	orrs	r2, r3
 8108310:	687b      	ldr	r3, [r7, #4]
 8108312:	69db      	ldr	r3, [r3, #28]
 8108314:	4313      	orrs	r3, r2
 8108316:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8108318:	687b      	ldr	r3, [r7, #4]
 810831a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810831c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810831e:	4313      	orrs	r3, r2
 8108320:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	681b      	ldr	r3, [r3, #0]
 8108326:	681a      	ldr	r2, [r3, #0]
 8108328:	4bc2      	ldr	r3, [pc, #776]	; (8108634 <UART_SetConfig+0x344>)
 810832a:	4013      	ands	r3, r2
 810832c:	687a      	ldr	r2, [r7, #4]
 810832e:	6812      	ldr	r2, [r2, #0]
 8108330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8108332:	430b      	orrs	r3, r1
 8108334:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108336:	687b      	ldr	r3, [r7, #4]
 8108338:	681b      	ldr	r3, [r3, #0]
 810833a:	685b      	ldr	r3, [r3, #4]
 810833c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8108340:	687b      	ldr	r3, [r7, #4]
 8108342:	68da      	ldr	r2, [r3, #12]
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	681b      	ldr	r3, [r3, #0]
 8108348:	430a      	orrs	r2, r1
 810834a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	699b      	ldr	r3, [r3, #24]
 8108350:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	681b      	ldr	r3, [r3, #0]
 8108356:	4ab8      	ldr	r2, [pc, #736]	; (8108638 <UART_SetConfig+0x348>)
 8108358:	4293      	cmp	r3, r2
 810835a:	d004      	beq.n	8108366 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810835c:	687b      	ldr	r3, [r7, #4]
 810835e:	6a1b      	ldr	r3, [r3, #32]
 8108360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108362:	4313      	orrs	r3, r2
 8108364:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108366:	687b      	ldr	r3, [r7, #4]
 8108368:	681b      	ldr	r3, [r3, #0]
 810836a:	689b      	ldr	r3, [r3, #8]
 810836c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8108370:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108374:	687a      	ldr	r2, [r7, #4]
 8108376:	6812      	ldr	r2, [r2, #0]
 8108378:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810837a:	430b      	orrs	r3, r1
 810837c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810837e:	687b      	ldr	r3, [r7, #4]
 8108380:	681b      	ldr	r3, [r3, #0]
 8108382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108384:	f023 010f 	bic.w	r1, r3, #15
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	681b      	ldr	r3, [r3, #0]
 8108390:	430a      	orrs	r2, r1
 8108392:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108394:	687b      	ldr	r3, [r7, #4]
 8108396:	681b      	ldr	r3, [r3, #0]
 8108398:	4aa8      	ldr	r2, [pc, #672]	; (810863c <UART_SetConfig+0x34c>)
 810839a:	4293      	cmp	r3, r2
 810839c:	d177      	bne.n	810848e <UART_SetConfig+0x19e>
 810839e:	4ba8      	ldr	r3, [pc, #672]	; (8108640 <UART_SetConfig+0x350>)
 81083a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81083a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81083a6:	2b28      	cmp	r3, #40	; 0x28
 81083a8:	d86c      	bhi.n	8108484 <UART_SetConfig+0x194>
 81083aa:	a201      	add	r2, pc, #4	; (adr r2, 81083b0 <UART_SetConfig+0xc0>)
 81083ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083b0:	08108455 	.word	0x08108455
 81083b4:	08108485 	.word	0x08108485
 81083b8:	08108485 	.word	0x08108485
 81083bc:	08108485 	.word	0x08108485
 81083c0:	08108485 	.word	0x08108485
 81083c4:	08108485 	.word	0x08108485
 81083c8:	08108485 	.word	0x08108485
 81083cc:	08108485 	.word	0x08108485
 81083d0:	0810845d 	.word	0x0810845d
 81083d4:	08108485 	.word	0x08108485
 81083d8:	08108485 	.word	0x08108485
 81083dc:	08108485 	.word	0x08108485
 81083e0:	08108485 	.word	0x08108485
 81083e4:	08108485 	.word	0x08108485
 81083e8:	08108485 	.word	0x08108485
 81083ec:	08108485 	.word	0x08108485
 81083f0:	08108465 	.word	0x08108465
 81083f4:	08108485 	.word	0x08108485
 81083f8:	08108485 	.word	0x08108485
 81083fc:	08108485 	.word	0x08108485
 8108400:	08108485 	.word	0x08108485
 8108404:	08108485 	.word	0x08108485
 8108408:	08108485 	.word	0x08108485
 810840c:	08108485 	.word	0x08108485
 8108410:	0810846d 	.word	0x0810846d
 8108414:	08108485 	.word	0x08108485
 8108418:	08108485 	.word	0x08108485
 810841c:	08108485 	.word	0x08108485
 8108420:	08108485 	.word	0x08108485
 8108424:	08108485 	.word	0x08108485
 8108428:	08108485 	.word	0x08108485
 810842c:	08108485 	.word	0x08108485
 8108430:	08108475 	.word	0x08108475
 8108434:	08108485 	.word	0x08108485
 8108438:	08108485 	.word	0x08108485
 810843c:	08108485 	.word	0x08108485
 8108440:	08108485 	.word	0x08108485
 8108444:	08108485 	.word	0x08108485
 8108448:	08108485 	.word	0x08108485
 810844c:	08108485 	.word	0x08108485
 8108450:	0810847d 	.word	0x0810847d
 8108454:	2301      	movs	r3, #1
 8108456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810845a:	e231      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810845c:	2304      	movs	r3, #4
 810845e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108462:	e22d      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108464:	2308      	movs	r3, #8
 8108466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810846a:	e229      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810846c:	2310      	movs	r3, #16
 810846e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108472:	e225      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108474:	2320      	movs	r3, #32
 8108476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810847a:	e221      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810847c:	2340      	movs	r3, #64	; 0x40
 810847e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108482:	e21d      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108484:	2380      	movs	r3, #128	; 0x80
 8108486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810848a:	bf00      	nop
 810848c:	e218      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810848e:	687b      	ldr	r3, [r7, #4]
 8108490:	681b      	ldr	r3, [r3, #0]
 8108492:	4a6c      	ldr	r2, [pc, #432]	; (8108644 <UART_SetConfig+0x354>)
 8108494:	4293      	cmp	r3, r2
 8108496:	d132      	bne.n	81084fe <UART_SetConfig+0x20e>
 8108498:	4b69      	ldr	r3, [pc, #420]	; (8108640 <UART_SetConfig+0x350>)
 810849a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810849c:	f003 0307 	and.w	r3, r3, #7
 81084a0:	2b05      	cmp	r3, #5
 81084a2:	d827      	bhi.n	81084f4 <UART_SetConfig+0x204>
 81084a4:	a201      	add	r2, pc, #4	; (adr r2, 81084ac <UART_SetConfig+0x1bc>)
 81084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084aa:	bf00      	nop
 81084ac:	081084c5 	.word	0x081084c5
 81084b0:	081084cd 	.word	0x081084cd
 81084b4:	081084d5 	.word	0x081084d5
 81084b8:	081084dd 	.word	0x081084dd
 81084bc:	081084e5 	.word	0x081084e5
 81084c0:	081084ed 	.word	0x081084ed
 81084c4:	2300      	movs	r3, #0
 81084c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ca:	e1f9      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81084cc:	2304      	movs	r3, #4
 81084ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084d2:	e1f5      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81084d4:	2308      	movs	r3, #8
 81084d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084da:	e1f1      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81084dc:	2310      	movs	r3, #16
 81084de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084e2:	e1ed      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81084e4:	2320      	movs	r3, #32
 81084e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084ea:	e1e9      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81084ec:	2340      	movs	r3, #64	; 0x40
 81084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084f2:	e1e5      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81084f4:	2380      	movs	r3, #128	; 0x80
 81084f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81084fa:	bf00      	nop
 81084fc:	e1e0      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81084fe:	687b      	ldr	r3, [r7, #4]
 8108500:	681b      	ldr	r3, [r3, #0]
 8108502:	4a51      	ldr	r2, [pc, #324]	; (8108648 <UART_SetConfig+0x358>)
 8108504:	4293      	cmp	r3, r2
 8108506:	d132      	bne.n	810856e <UART_SetConfig+0x27e>
 8108508:	4b4d      	ldr	r3, [pc, #308]	; (8108640 <UART_SetConfig+0x350>)
 810850a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810850c:	f003 0307 	and.w	r3, r3, #7
 8108510:	2b05      	cmp	r3, #5
 8108512:	d827      	bhi.n	8108564 <UART_SetConfig+0x274>
 8108514:	a201      	add	r2, pc, #4	; (adr r2, 810851c <UART_SetConfig+0x22c>)
 8108516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810851a:	bf00      	nop
 810851c:	08108535 	.word	0x08108535
 8108520:	0810853d 	.word	0x0810853d
 8108524:	08108545 	.word	0x08108545
 8108528:	0810854d 	.word	0x0810854d
 810852c:	08108555 	.word	0x08108555
 8108530:	0810855d 	.word	0x0810855d
 8108534:	2300      	movs	r3, #0
 8108536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810853a:	e1c1      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810853c:	2304      	movs	r3, #4
 810853e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108542:	e1bd      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108544:	2308      	movs	r3, #8
 8108546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810854a:	e1b9      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810854c:	2310      	movs	r3, #16
 810854e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108552:	e1b5      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108554:	2320      	movs	r3, #32
 8108556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810855a:	e1b1      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810855c:	2340      	movs	r3, #64	; 0x40
 810855e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108562:	e1ad      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108564:	2380      	movs	r3, #128	; 0x80
 8108566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810856a:	bf00      	nop
 810856c:	e1a8      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810856e:	687b      	ldr	r3, [r7, #4]
 8108570:	681b      	ldr	r3, [r3, #0]
 8108572:	4a36      	ldr	r2, [pc, #216]	; (810864c <UART_SetConfig+0x35c>)
 8108574:	4293      	cmp	r3, r2
 8108576:	d132      	bne.n	81085de <UART_SetConfig+0x2ee>
 8108578:	4b31      	ldr	r3, [pc, #196]	; (8108640 <UART_SetConfig+0x350>)
 810857a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810857c:	f003 0307 	and.w	r3, r3, #7
 8108580:	2b05      	cmp	r3, #5
 8108582:	d827      	bhi.n	81085d4 <UART_SetConfig+0x2e4>
 8108584:	a201      	add	r2, pc, #4	; (adr r2, 810858c <UART_SetConfig+0x29c>)
 8108586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810858a:	bf00      	nop
 810858c:	081085a5 	.word	0x081085a5
 8108590:	081085ad 	.word	0x081085ad
 8108594:	081085b5 	.word	0x081085b5
 8108598:	081085bd 	.word	0x081085bd
 810859c:	081085c5 	.word	0x081085c5
 81085a0:	081085cd 	.word	0x081085cd
 81085a4:	2300      	movs	r3, #0
 81085a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81085aa:	e189      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81085ac:	2304      	movs	r3, #4
 81085ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81085b2:	e185      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81085b4:	2308      	movs	r3, #8
 81085b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81085ba:	e181      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81085bc:	2310      	movs	r3, #16
 81085be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81085c2:	e17d      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81085c4:	2320      	movs	r3, #32
 81085c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81085ca:	e179      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81085cc:	2340      	movs	r3, #64	; 0x40
 81085ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81085d2:	e175      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81085d4:	2380      	movs	r3, #128	; 0x80
 81085d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81085da:	bf00      	nop
 81085dc:	e170      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81085de:	687b      	ldr	r3, [r7, #4]
 81085e0:	681b      	ldr	r3, [r3, #0]
 81085e2:	4a1b      	ldr	r2, [pc, #108]	; (8108650 <UART_SetConfig+0x360>)
 81085e4:	4293      	cmp	r3, r2
 81085e6:	d142      	bne.n	810866e <UART_SetConfig+0x37e>
 81085e8:	4b15      	ldr	r3, [pc, #84]	; (8108640 <UART_SetConfig+0x350>)
 81085ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81085ec:	f003 0307 	and.w	r3, r3, #7
 81085f0:	2b05      	cmp	r3, #5
 81085f2:	d837      	bhi.n	8108664 <UART_SetConfig+0x374>
 81085f4:	a201      	add	r2, pc, #4	; (adr r2, 81085fc <UART_SetConfig+0x30c>)
 81085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81085fa:	bf00      	nop
 81085fc:	08108615 	.word	0x08108615
 8108600:	0810861d 	.word	0x0810861d
 8108604:	08108625 	.word	0x08108625
 8108608:	0810862d 	.word	0x0810862d
 810860c:	08108655 	.word	0x08108655
 8108610:	0810865d 	.word	0x0810865d
 8108614:	2300      	movs	r3, #0
 8108616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810861a:	e151      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810861c:	2304      	movs	r3, #4
 810861e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108622:	e14d      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108624:	2308      	movs	r3, #8
 8108626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810862a:	e149      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810862c:	2310      	movs	r3, #16
 810862e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108632:	e145      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108634:	cfff69f3 	.word	0xcfff69f3
 8108638:	58000c00 	.word	0x58000c00
 810863c:	40011000 	.word	0x40011000
 8108640:	58024400 	.word	0x58024400
 8108644:	40004400 	.word	0x40004400
 8108648:	40004800 	.word	0x40004800
 810864c:	40004c00 	.word	0x40004c00
 8108650:	40005000 	.word	0x40005000
 8108654:	2320      	movs	r3, #32
 8108656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810865a:	e131      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810865c:	2340      	movs	r3, #64	; 0x40
 810865e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108662:	e12d      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108664:	2380      	movs	r3, #128	; 0x80
 8108666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810866a:	bf00      	nop
 810866c:	e128      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810866e:	687b      	ldr	r3, [r7, #4]
 8108670:	681b      	ldr	r3, [r3, #0]
 8108672:	4ab6      	ldr	r2, [pc, #728]	; (810894c <UART_SetConfig+0x65c>)
 8108674:	4293      	cmp	r3, r2
 8108676:	d178      	bne.n	810876a <UART_SetConfig+0x47a>
 8108678:	4bb5      	ldr	r3, [pc, #724]	; (8108950 <UART_SetConfig+0x660>)
 810867a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810867c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108680:	2b28      	cmp	r3, #40	; 0x28
 8108682:	d86d      	bhi.n	8108760 <UART_SetConfig+0x470>
 8108684:	a201      	add	r2, pc, #4	; (adr r2, 810868c <UART_SetConfig+0x39c>)
 8108686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810868a:	bf00      	nop
 810868c:	08108731 	.word	0x08108731
 8108690:	08108761 	.word	0x08108761
 8108694:	08108761 	.word	0x08108761
 8108698:	08108761 	.word	0x08108761
 810869c:	08108761 	.word	0x08108761
 81086a0:	08108761 	.word	0x08108761
 81086a4:	08108761 	.word	0x08108761
 81086a8:	08108761 	.word	0x08108761
 81086ac:	08108739 	.word	0x08108739
 81086b0:	08108761 	.word	0x08108761
 81086b4:	08108761 	.word	0x08108761
 81086b8:	08108761 	.word	0x08108761
 81086bc:	08108761 	.word	0x08108761
 81086c0:	08108761 	.word	0x08108761
 81086c4:	08108761 	.word	0x08108761
 81086c8:	08108761 	.word	0x08108761
 81086cc:	08108741 	.word	0x08108741
 81086d0:	08108761 	.word	0x08108761
 81086d4:	08108761 	.word	0x08108761
 81086d8:	08108761 	.word	0x08108761
 81086dc:	08108761 	.word	0x08108761
 81086e0:	08108761 	.word	0x08108761
 81086e4:	08108761 	.word	0x08108761
 81086e8:	08108761 	.word	0x08108761
 81086ec:	08108749 	.word	0x08108749
 81086f0:	08108761 	.word	0x08108761
 81086f4:	08108761 	.word	0x08108761
 81086f8:	08108761 	.word	0x08108761
 81086fc:	08108761 	.word	0x08108761
 8108700:	08108761 	.word	0x08108761
 8108704:	08108761 	.word	0x08108761
 8108708:	08108761 	.word	0x08108761
 810870c:	08108751 	.word	0x08108751
 8108710:	08108761 	.word	0x08108761
 8108714:	08108761 	.word	0x08108761
 8108718:	08108761 	.word	0x08108761
 810871c:	08108761 	.word	0x08108761
 8108720:	08108761 	.word	0x08108761
 8108724:	08108761 	.word	0x08108761
 8108728:	08108761 	.word	0x08108761
 810872c:	08108759 	.word	0x08108759
 8108730:	2301      	movs	r3, #1
 8108732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108736:	e0c3      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108738:	2304      	movs	r3, #4
 810873a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810873e:	e0bf      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108740:	2308      	movs	r3, #8
 8108742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108746:	e0bb      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108748:	2310      	movs	r3, #16
 810874a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810874e:	e0b7      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108750:	2320      	movs	r3, #32
 8108752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108756:	e0b3      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108758:	2340      	movs	r3, #64	; 0x40
 810875a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810875e:	e0af      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108760:	2380      	movs	r3, #128	; 0x80
 8108762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108766:	bf00      	nop
 8108768:	e0aa      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810876a:	687b      	ldr	r3, [r7, #4]
 810876c:	681b      	ldr	r3, [r3, #0]
 810876e:	4a79      	ldr	r2, [pc, #484]	; (8108954 <UART_SetConfig+0x664>)
 8108770:	4293      	cmp	r3, r2
 8108772:	d132      	bne.n	81087da <UART_SetConfig+0x4ea>
 8108774:	4b76      	ldr	r3, [pc, #472]	; (8108950 <UART_SetConfig+0x660>)
 8108776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108778:	f003 0307 	and.w	r3, r3, #7
 810877c:	2b05      	cmp	r3, #5
 810877e:	d827      	bhi.n	81087d0 <UART_SetConfig+0x4e0>
 8108780:	a201      	add	r2, pc, #4	; (adr r2, 8108788 <UART_SetConfig+0x498>)
 8108782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108786:	bf00      	nop
 8108788:	081087a1 	.word	0x081087a1
 810878c:	081087a9 	.word	0x081087a9
 8108790:	081087b1 	.word	0x081087b1
 8108794:	081087b9 	.word	0x081087b9
 8108798:	081087c1 	.word	0x081087c1
 810879c:	081087c9 	.word	0x081087c9
 81087a0:	2300      	movs	r3, #0
 81087a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81087a6:	e08b      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81087a8:	2304      	movs	r3, #4
 81087aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81087ae:	e087      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81087b0:	2308      	movs	r3, #8
 81087b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81087b6:	e083      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81087b8:	2310      	movs	r3, #16
 81087ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81087be:	e07f      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81087c0:	2320      	movs	r3, #32
 81087c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81087c6:	e07b      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81087c8:	2340      	movs	r3, #64	; 0x40
 81087ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81087ce:	e077      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81087d0:	2380      	movs	r3, #128	; 0x80
 81087d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81087d6:	bf00      	nop
 81087d8:	e072      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81087da:	687b      	ldr	r3, [r7, #4]
 81087dc:	681b      	ldr	r3, [r3, #0]
 81087de:	4a5e      	ldr	r2, [pc, #376]	; (8108958 <UART_SetConfig+0x668>)
 81087e0:	4293      	cmp	r3, r2
 81087e2:	d132      	bne.n	810884a <UART_SetConfig+0x55a>
 81087e4:	4b5a      	ldr	r3, [pc, #360]	; (8108950 <UART_SetConfig+0x660>)
 81087e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81087e8:	f003 0307 	and.w	r3, r3, #7
 81087ec:	2b05      	cmp	r3, #5
 81087ee:	d827      	bhi.n	8108840 <UART_SetConfig+0x550>
 81087f0:	a201      	add	r2, pc, #4	; (adr r2, 81087f8 <UART_SetConfig+0x508>)
 81087f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087f6:	bf00      	nop
 81087f8:	08108811 	.word	0x08108811
 81087fc:	08108819 	.word	0x08108819
 8108800:	08108821 	.word	0x08108821
 8108804:	08108829 	.word	0x08108829
 8108808:	08108831 	.word	0x08108831
 810880c:	08108839 	.word	0x08108839
 8108810:	2300      	movs	r3, #0
 8108812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108816:	e053      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108818:	2304      	movs	r3, #4
 810881a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810881e:	e04f      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108820:	2308      	movs	r3, #8
 8108822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108826:	e04b      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108828:	2310      	movs	r3, #16
 810882a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810882e:	e047      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108830:	2320      	movs	r3, #32
 8108832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108836:	e043      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108838:	2340      	movs	r3, #64	; 0x40
 810883a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810883e:	e03f      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108840:	2380      	movs	r3, #128	; 0x80
 8108842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108846:	bf00      	nop
 8108848:	e03a      	b.n	81088c0 <UART_SetConfig+0x5d0>
 810884a:	687b      	ldr	r3, [r7, #4]
 810884c:	681b      	ldr	r3, [r3, #0]
 810884e:	4a43      	ldr	r2, [pc, #268]	; (810895c <UART_SetConfig+0x66c>)
 8108850:	4293      	cmp	r3, r2
 8108852:	d132      	bne.n	81088ba <UART_SetConfig+0x5ca>
 8108854:	4b3e      	ldr	r3, [pc, #248]	; (8108950 <UART_SetConfig+0x660>)
 8108856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108858:	f003 0307 	and.w	r3, r3, #7
 810885c:	2b05      	cmp	r3, #5
 810885e:	d827      	bhi.n	81088b0 <UART_SetConfig+0x5c0>
 8108860:	a201      	add	r2, pc, #4	; (adr r2, 8108868 <UART_SetConfig+0x578>)
 8108862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108866:	bf00      	nop
 8108868:	08108881 	.word	0x08108881
 810886c:	08108889 	.word	0x08108889
 8108870:	08108891 	.word	0x08108891
 8108874:	08108899 	.word	0x08108899
 8108878:	081088a1 	.word	0x081088a1
 810887c:	081088a9 	.word	0x081088a9
 8108880:	2302      	movs	r3, #2
 8108882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108886:	e01b      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108888:	2304      	movs	r3, #4
 810888a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810888e:	e017      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108890:	2308      	movs	r3, #8
 8108892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8108896:	e013      	b.n	81088c0 <UART_SetConfig+0x5d0>
 8108898:	2310      	movs	r3, #16
 810889a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810889e:	e00f      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81088a0:	2320      	movs	r3, #32
 81088a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81088a6:	e00b      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81088a8:	2340      	movs	r3, #64	; 0x40
 81088aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81088ae:	e007      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81088b0:	2380      	movs	r3, #128	; 0x80
 81088b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81088b6:	bf00      	nop
 81088b8:	e002      	b.n	81088c0 <UART_SetConfig+0x5d0>
 81088ba:	2380      	movs	r3, #128	; 0x80
 81088bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81088c0:	687b      	ldr	r3, [r7, #4]
 81088c2:	681b      	ldr	r3, [r3, #0]
 81088c4:	4a25      	ldr	r2, [pc, #148]	; (810895c <UART_SetConfig+0x66c>)
 81088c6:	4293      	cmp	r3, r2
 81088c8:	f040 80b8 	bne.w	8108a3c <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81088cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81088d0:	2b08      	cmp	r3, #8
 81088d2:	d019      	beq.n	8108908 <UART_SetConfig+0x618>
 81088d4:	2b08      	cmp	r3, #8
 81088d6:	dc04      	bgt.n	81088e2 <UART_SetConfig+0x5f2>
 81088d8:	2b02      	cmp	r3, #2
 81088da:	d009      	beq.n	81088f0 <UART_SetConfig+0x600>
 81088dc:	2b04      	cmp	r3, #4
 81088de:	d00b      	beq.n	81088f8 <UART_SetConfig+0x608>
 81088e0:	e042      	b.n	8108968 <UART_SetConfig+0x678>
 81088e2:	2b20      	cmp	r3, #32
 81088e4:	d02b      	beq.n	810893e <UART_SetConfig+0x64e>
 81088e6:	2b40      	cmp	r3, #64	; 0x40
 81088e8:	d02c      	beq.n	8108944 <UART_SetConfig+0x654>
 81088ea:	2b10      	cmp	r3, #16
 81088ec:	d014      	beq.n	8108918 <UART_SetConfig+0x628>
 81088ee:	e03b      	b.n	8108968 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81088f0:	f7fd fd2c 	bl	810634c <HAL_RCCEx_GetD3PCLK1Freq>
 81088f4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81088f6:	e03d      	b.n	8108974 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81088f8:	f107 0314 	add.w	r3, r7, #20
 81088fc:	4618      	mov	r0, r3
 81088fe:	f7fd fd3b 	bl	8106378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108902:	69bb      	ldr	r3, [r7, #24]
 8108904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108906:	e035      	b.n	8108974 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108908:	f107 0308 	add.w	r3, r7, #8
 810890c:	4618      	mov	r0, r3
 810890e:	f7fd fe7f 	bl	8106610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108912:	68fb      	ldr	r3, [r7, #12]
 8108914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108916:	e02d      	b.n	8108974 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108918:	4b0d      	ldr	r3, [pc, #52]	; (8108950 <UART_SetConfig+0x660>)
 810891a:	681b      	ldr	r3, [r3, #0]
 810891c:	f003 0320 	and.w	r3, r3, #32
 8108920:	2b00      	cmp	r3, #0
 8108922:	d009      	beq.n	8108938 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108924:	4b0a      	ldr	r3, [pc, #40]	; (8108950 <UART_SetConfig+0x660>)
 8108926:	681b      	ldr	r3, [r3, #0]
 8108928:	08db      	lsrs	r3, r3, #3
 810892a:	f003 0303 	and.w	r3, r3, #3
 810892e:	4a0c      	ldr	r2, [pc, #48]	; (8108960 <UART_SetConfig+0x670>)
 8108930:	fa22 f303 	lsr.w	r3, r2, r3
 8108934:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108936:	e01d      	b.n	8108974 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8108938:	4b09      	ldr	r3, [pc, #36]	; (8108960 <UART_SetConfig+0x670>)
 810893a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810893c:	e01a      	b.n	8108974 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810893e:	4b09      	ldr	r3, [pc, #36]	; (8108964 <UART_SetConfig+0x674>)
 8108940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108942:	e017      	b.n	8108974 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810894a:	e013      	b.n	8108974 <UART_SetConfig+0x684>
 810894c:	40011400 	.word	0x40011400
 8108950:	58024400 	.word	0x58024400
 8108954:	40007800 	.word	0x40007800
 8108958:	40007c00 	.word	0x40007c00
 810895c:	58000c00 	.word	0x58000c00
 8108960:	03d09000 	.word	0x03d09000
 8108964:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8108968:	2300      	movs	r3, #0
 810896a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810896c:	2301      	movs	r3, #1
 810896e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108972:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108976:	2b00      	cmp	r3, #0
 8108978:	f000 824d 	beq.w	8108e16 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810897c:	687b      	ldr	r3, [r7, #4]
 810897e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108980:	4aad      	ldr	r2, [pc, #692]	; (8108c38 <UART_SetConfig+0x948>)
 8108982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108986:	461a      	mov	r2, r3
 8108988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810898a:	fbb3 f3f2 	udiv	r3, r3, r2
 810898e:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108990:	687b      	ldr	r3, [r7, #4]
 8108992:	685a      	ldr	r2, [r3, #4]
 8108994:	4613      	mov	r3, r2
 8108996:	005b      	lsls	r3, r3, #1
 8108998:	4413      	add	r3, r2
 810899a:	6a3a      	ldr	r2, [r7, #32]
 810899c:	429a      	cmp	r2, r3
 810899e:	d305      	bcc.n	81089ac <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81089a0:	687b      	ldr	r3, [r7, #4]
 81089a2:	685b      	ldr	r3, [r3, #4]
 81089a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81089a6:	6a3a      	ldr	r2, [r7, #32]
 81089a8:	429a      	cmp	r2, r3
 81089aa:	d903      	bls.n	81089b4 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 81089ac:	2301      	movs	r3, #1
 81089ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81089b2:	e230      	b.n	8108e16 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81089b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81089b6:	4618      	mov	r0, r3
 81089b8:	f04f 0100 	mov.w	r1, #0
 81089bc:	687b      	ldr	r3, [r7, #4]
 81089be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81089c0:	4a9d      	ldr	r2, [pc, #628]	; (8108c38 <UART_SetConfig+0x948>)
 81089c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81089c6:	b29b      	uxth	r3, r3
 81089c8:	f04f 0400 	mov.w	r4, #0
 81089cc:	461a      	mov	r2, r3
 81089ce:	4623      	mov	r3, r4
 81089d0:	f7f8 f972 	bl	8100cb8 <__aeabi_uldivmod>
 81089d4:	4603      	mov	r3, r0
 81089d6:	460c      	mov	r4, r1
 81089d8:	4619      	mov	r1, r3
 81089da:	4622      	mov	r2, r4
 81089dc:	f04f 0300 	mov.w	r3, #0
 81089e0:	f04f 0400 	mov.w	r4, #0
 81089e4:	0214      	lsls	r4, r2, #8
 81089e6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81089ea:	020b      	lsls	r3, r1, #8
 81089ec:	687a      	ldr	r2, [r7, #4]
 81089ee:	6852      	ldr	r2, [r2, #4]
 81089f0:	0852      	lsrs	r2, r2, #1
 81089f2:	4611      	mov	r1, r2
 81089f4:	f04f 0200 	mov.w	r2, #0
 81089f8:	eb13 0b01 	adds.w	fp, r3, r1
 81089fc:	eb44 0c02 	adc.w	ip, r4, r2
 8108a00:	4658      	mov	r0, fp
 8108a02:	4661      	mov	r1, ip
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	685b      	ldr	r3, [r3, #4]
 8108a08:	f04f 0400 	mov.w	r4, #0
 8108a0c:	461a      	mov	r2, r3
 8108a0e:	4623      	mov	r3, r4
 8108a10:	f7f8 f952 	bl	8100cb8 <__aeabi_uldivmod>
 8108a14:	4603      	mov	r3, r0
 8108a16:	460c      	mov	r4, r1
 8108a18:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8108a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8108a20:	d308      	bcc.n	8108a34 <UART_SetConfig+0x744>
 8108a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108a28:	d204      	bcs.n	8108a34 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8108a2a:	687b      	ldr	r3, [r7, #4]
 8108a2c:	681b      	ldr	r3, [r3, #0]
 8108a2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108a30:	60da      	str	r2, [r3, #12]
 8108a32:	e1f0      	b.n	8108e16 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8108a34:	2301      	movs	r3, #1
 8108a36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108a3a:	e1ec      	b.n	8108e16 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	69db      	ldr	r3, [r3, #28]
 8108a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8108a44:	f040 8100 	bne.w	8108c48 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8108a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108a4c:	2b40      	cmp	r3, #64	; 0x40
 8108a4e:	f200 80b7 	bhi.w	8108bc0 <UART_SetConfig+0x8d0>
 8108a52:	a201      	add	r2, pc, #4	; (adr r2, 8108a58 <UART_SetConfig+0x768>)
 8108a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108a58:	08108b5d 	.word	0x08108b5d
 8108a5c:	08108b65 	.word	0x08108b65
 8108a60:	08108bc1 	.word	0x08108bc1
 8108a64:	08108bc1 	.word	0x08108bc1
 8108a68:	08108b6d 	.word	0x08108b6d
 8108a6c:	08108bc1 	.word	0x08108bc1
 8108a70:	08108bc1 	.word	0x08108bc1
 8108a74:	08108bc1 	.word	0x08108bc1
 8108a78:	08108b7d 	.word	0x08108b7d
 8108a7c:	08108bc1 	.word	0x08108bc1
 8108a80:	08108bc1 	.word	0x08108bc1
 8108a84:	08108bc1 	.word	0x08108bc1
 8108a88:	08108bc1 	.word	0x08108bc1
 8108a8c:	08108bc1 	.word	0x08108bc1
 8108a90:	08108bc1 	.word	0x08108bc1
 8108a94:	08108bc1 	.word	0x08108bc1
 8108a98:	08108b8d 	.word	0x08108b8d
 8108a9c:	08108bc1 	.word	0x08108bc1
 8108aa0:	08108bc1 	.word	0x08108bc1
 8108aa4:	08108bc1 	.word	0x08108bc1
 8108aa8:	08108bc1 	.word	0x08108bc1
 8108aac:	08108bc1 	.word	0x08108bc1
 8108ab0:	08108bc1 	.word	0x08108bc1
 8108ab4:	08108bc1 	.word	0x08108bc1
 8108ab8:	08108bc1 	.word	0x08108bc1
 8108abc:	08108bc1 	.word	0x08108bc1
 8108ac0:	08108bc1 	.word	0x08108bc1
 8108ac4:	08108bc1 	.word	0x08108bc1
 8108ac8:	08108bc1 	.word	0x08108bc1
 8108acc:	08108bc1 	.word	0x08108bc1
 8108ad0:	08108bc1 	.word	0x08108bc1
 8108ad4:	08108bc1 	.word	0x08108bc1
 8108ad8:	08108bb3 	.word	0x08108bb3
 8108adc:	08108bc1 	.word	0x08108bc1
 8108ae0:	08108bc1 	.word	0x08108bc1
 8108ae4:	08108bc1 	.word	0x08108bc1
 8108ae8:	08108bc1 	.word	0x08108bc1
 8108aec:	08108bc1 	.word	0x08108bc1
 8108af0:	08108bc1 	.word	0x08108bc1
 8108af4:	08108bc1 	.word	0x08108bc1
 8108af8:	08108bc1 	.word	0x08108bc1
 8108afc:	08108bc1 	.word	0x08108bc1
 8108b00:	08108bc1 	.word	0x08108bc1
 8108b04:	08108bc1 	.word	0x08108bc1
 8108b08:	08108bc1 	.word	0x08108bc1
 8108b0c:	08108bc1 	.word	0x08108bc1
 8108b10:	08108bc1 	.word	0x08108bc1
 8108b14:	08108bc1 	.word	0x08108bc1
 8108b18:	08108bc1 	.word	0x08108bc1
 8108b1c:	08108bc1 	.word	0x08108bc1
 8108b20:	08108bc1 	.word	0x08108bc1
 8108b24:	08108bc1 	.word	0x08108bc1
 8108b28:	08108bc1 	.word	0x08108bc1
 8108b2c:	08108bc1 	.word	0x08108bc1
 8108b30:	08108bc1 	.word	0x08108bc1
 8108b34:	08108bc1 	.word	0x08108bc1
 8108b38:	08108bc1 	.word	0x08108bc1
 8108b3c:	08108bc1 	.word	0x08108bc1
 8108b40:	08108bc1 	.word	0x08108bc1
 8108b44:	08108bc1 	.word	0x08108bc1
 8108b48:	08108bc1 	.word	0x08108bc1
 8108b4c:	08108bc1 	.word	0x08108bc1
 8108b50:	08108bc1 	.word	0x08108bc1
 8108b54:	08108bc1 	.word	0x08108bc1
 8108b58:	08108bb9 	.word	0x08108bb9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108b5c:	f7fd fb88 	bl	8106270 <HAL_RCC_GetPCLK1Freq>
 8108b60:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108b62:	e033      	b.n	8108bcc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108b64:	f7fd fb9a 	bl	810629c <HAL_RCC_GetPCLK2Freq>
 8108b68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108b6a:	e02f      	b.n	8108bcc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108b6c:	f107 0314 	add.w	r3, r7, #20
 8108b70:	4618      	mov	r0, r3
 8108b72:	f7fd fc01 	bl	8106378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108b76:	69bb      	ldr	r3, [r7, #24]
 8108b78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108b7a:	e027      	b.n	8108bcc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108b7c:	f107 0308 	add.w	r3, r7, #8
 8108b80:	4618      	mov	r0, r3
 8108b82:	f7fd fd45 	bl	8106610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108b86:	68fb      	ldr	r3, [r7, #12]
 8108b88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108b8a:	e01f      	b.n	8108bcc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108b8c:	4b2b      	ldr	r3, [pc, #172]	; (8108c3c <UART_SetConfig+0x94c>)
 8108b8e:	681b      	ldr	r3, [r3, #0]
 8108b90:	f003 0320 	and.w	r3, r3, #32
 8108b94:	2b00      	cmp	r3, #0
 8108b96:	d009      	beq.n	8108bac <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108b98:	4b28      	ldr	r3, [pc, #160]	; (8108c3c <UART_SetConfig+0x94c>)
 8108b9a:	681b      	ldr	r3, [r3, #0]
 8108b9c:	08db      	lsrs	r3, r3, #3
 8108b9e:	f003 0303 	and.w	r3, r3, #3
 8108ba2:	4a27      	ldr	r2, [pc, #156]	; (8108c40 <UART_SetConfig+0x950>)
 8108ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8108ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108baa:	e00f      	b.n	8108bcc <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8108bac:	4b24      	ldr	r3, [pc, #144]	; (8108c40 <UART_SetConfig+0x950>)
 8108bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108bb0:	e00c      	b.n	8108bcc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108bb2:	4b24      	ldr	r3, [pc, #144]	; (8108c44 <UART_SetConfig+0x954>)
 8108bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108bb6:	e009      	b.n	8108bcc <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108bbe:	e005      	b.n	8108bcc <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8108bc0:	2300      	movs	r3, #0
 8108bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108bc4:	2301      	movs	r3, #1
 8108bc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108bca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8108bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108bce:	2b00      	cmp	r3, #0
 8108bd0:	f000 8121 	beq.w	8108e16 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108bd4:	687b      	ldr	r3, [r7, #4]
 8108bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108bd8:	4a17      	ldr	r2, [pc, #92]	; (8108c38 <UART_SetConfig+0x948>)
 8108bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108bde:	461a      	mov	r2, r3
 8108be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8108be6:	005a      	lsls	r2, r3, #1
 8108be8:	687b      	ldr	r3, [r7, #4]
 8108bea:	685b      	ldr	r3, [r3, #4]
 8108bec:	085b      	lsrs	r3, r3, #1
 8108bee:	441a      	add	r2, r3
 8108bf0:	687b      	ldr	r3, [r7, #4]
 8108bf2:	685b      	ldr	r3, [r3, #4]
 8108bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8108bf8:	b29b      	uxth	r3, r3
 8108bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108bfe:	2b0f      	cmp	r3, #15
 8108c00:	d916      	bls.n	8108c30 <UART_SetConfig+0x940>
 8108c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108c08:	d212      	bcs.n	8108c30 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8108c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c0c:	b29b      	uxth	r3, r3
 8108c0e:	f023 030f 	bic.w	r3, r3, #15
 8108c12:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c16:	085b      	lsrs	r3, r3, #1
 8108c18:	b29b      	uxth	r3, r3
 8108c1a:	f003 0307 	and.w	r3, r3, #7
 8108c1e:	b29a      	uxth	r2, r3
 8108c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8108c22:	4313      	orrs	r3, r2
 8108c24:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	681b      	ldr	r3, [r3, #0]
 8108c2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8108c2c:	60da      	str	r2, [r3, #12]
 8108c2e:	e0f2      	b.n	8108e16 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8108c30:	2301      	movs	r3, #1
 8108c32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8108c36:	e0ee      	b.n	8108e16 <UART_SetConfig+0xb26>
 8108c38:	0810dc94 	.word	0x0810dc94
 8108c3c:	58024400 	.word	0x58024400
 8108c40:	03d09000 	.word	0x03d09000
 8108c44:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8108c48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8108c4c:	2b40      	cmp	r3, #64	; 0x40
 8108c4e:	f200 80b7 	bhi.w	8108dc0 <UART_SetConfig+0xad0>
 8108c52:	a201      	add	r2, pc, #4	; (adr r2, 8108c58 <UART_SetConfig+0x968>)
 8108c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c58:	08108d5d 	.word	0x08108d5d
 8108c5c:	08108d65 	.word	0x08108d65
 8108c60:	08108dc1 	.word	0x08108dc1
 8108c64:	08108dc1 	.word	0x08108dc1
 8108c68:	08108d6d 	.word	0x08108d6d
 8108c6c:	08108dc1 	.word	0x08108dc1
 8108c70:	08108dc1 	.word	0x08108dc1
 8108c74:	08108dc1 	.word	0x08108dc1
 8108c78:	08108d7d 	.word	0x08108d7d
 8108c7c:	08108dc1 	.word	0x08108dc1
 8108c80:	08108dc1 	.word	0x08108dc1
 8108c84:	08108dc1 	.word	0x08108dc1
 8108c88:	08108dc1 	.word	0x08108dc1
 8108c8c:	08108dc1 	.word	0x08108dc1
 8108c90:	08108dc1 	.word	0x08108dc1
 8108c94:	08108dc1 	.word	0x08108dc1
 8108c98:	08108d8d 	.word	0x08108d8d
 8108c9c:	08108dc1 	.word	0x08108dc1
 8108ca0:	08108dc1 	.word	0x08108dc1
 8108ca4:	08108dc1 	.word	0x08108dc1
 8108ca8:	08108dc1 	.word	0x08108dc1
 8108cac:	08108dc1 	.word	0x08108dc1
 8108cb0:	08108dc1 	.word	0x08108dc1
 8108cb4:	08108dc1 	.word	0x08108dc1
 8108cb8:	08108dc1 	.word	0x08108dc1
 8108cbc:	08108dc1 	.word	0x08108dc1
 8108cc0:	08108dc1 	.word	0x08108dc1
 8108cc4:	08108dc1 	.word	0x08108dc1
 8108cc8:	08108dc1 	.word	0x08108dc1
 8108ccc:	08108dc1 	.word	0x08108dc1
 8108cd0:	08108dc1 	.word	0x08108dc1
 8108cd4:	08108dc1 	.word	0x08108dc1
 8108cd8:	08108db3 	.word	0x08108db3
 8108cdc:	08108dc1 	.word	0x08108dc1
 8108ce0:	08108dc1 	.word	0x08108dc1
 8108ce4:	08108dc1 	.word	0x08108dc1
 8108ce8:	08108dc1 	.word	0x08108dc1
 8108cec:	08108dc1 	.word	0x08108dc1
 8108cf0:	08108dc1 	.word	0x08108dc1
 8108cf4:	08108dc1 	.word	0x08108dc1
 8108cf8:	08108dc1 	.word	0x08108dc1
 8108cfc:	08108dc1 	.word	0x08108dc1
 8108d00:	08108dc1 	.word	0x08108dc1
 8108d04:	08108dc1 	.word	0x08108dc1
 8108d08:	08108dc1 	.word	0x08108dc1
 8108d0c:	08108dc1 	.word	0x08108dc1
 8108d10:	08108dc1 	.word	0x08108dc1
 8108d14:	08108dc1 	.word	0x08108dc1
 8108d18:	08108dc1 	.word	0x08108dc1
 8108d1c:	08108dc1 	.word	0x08108dc1
 8108d20:	08108dc1 	.word	0x08108dc1
 8108d24:	08108dc1 	.word	0x08108dc1
 8108d28:	08108dc1 	.word	0x08108dc1
 8108d2c:	08108dc1 	.word	0x08108dc1
 8108d30:	08108dc1 	.word	0x08108dc1
 8108d34:	08108dc1 	.word	0x08108dc1
 8108d38:	08108dc1 	.word	0x08108dc1
 8108d3c:	08108dc1 	.word	0x08108dc1
 8108d40:	08108dc1 	.word	0x08108dc1
 8108d44:	08108dc1 	.word	0x08108dc1
 8108d48:	08108dc1 	.word	0x08108dc1
 8108d4c:	08108dc1 	.word	0x08108dc1
 8108d50:	08108dc1 	.word	0x08108dc1
 8108d54:	08108dc1 	.word	0x08108dc1
 8108d58:	08108db9 	.word	0x08108db9
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108d5c:	f7fd fa88 	bl	8106270 <HAL_RCC_GetPCLK1Freq>
 8108d60:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108d62:	e033      	b.n	8108dcc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108d64:	f7fd fa9a 	bl	810629c <HAL_RCC_GetPCLK2Freq>
 8108d68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8108d6a:	e02f      	b.n	8108dcc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108d6c:	f107 0314 	add.w	r3, r7, #20
 8108d70:	4618      	mov	r0, r3
 8108d72:	f7fd fb01 	bl	8106378 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108d76:	69bb      	ldr	r3, [r7, #24]
 8108d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108d7a:	e027      	b.n	8108dcc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108d7c:	f107 0308 	add.w	r3, r7, #8
 8108d80:	4618      	mov	r0, r3
 8108d82:	f7fd fc45 	bl	8106610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108d86:	68fb      	ldr	r3, [r7, #12]
 8108d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108d8a:	e01f      	b.n	8108dcc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108d8c:	4b2c      	ldr	r3, [pc, #176]	; (8108e40 <UART_SetConfig+0xb50>)
 8108d8e:	681b      	ldr	r3, [r3, #0]
 8108d90:	f003 0320 	and.w	r3, r3, #32
 8108d94:	2b00      	cmp	r3, #0
 8108d96:	d009      	beq.n	8108dac <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108d98:	4b29      	ldr	r3, [pc, #164]	; (8108e40 <UART_SetConfig+0xb50>)
 8108d9a:	681b      	ldr	r3, [r3, #0]
 8108d9c:	08db      	lsrs	r3, r3, #3
 8108d9e:	f003 0303 	and.w	r3, r3, #3
 8108da2:	4a28      	ldr	r2, [pc, #160]	; (8108e44 <UART_SetConfig+0xb54>)
 8108da4:	fa22 f303 	lsr.w	r3, r2, r3
 8108da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108daa:	e00f      	b.n	8108dcc <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8108dac:	4b25      	ldr	r3, [pc, #148]	; (8108e44 <UART_SetConfig+0xb54>)
 8108dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108db0:	e00c      	b.n	8108dcc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108db2:	4b25      	ldr	r3, [pc, #148]	; (8108e48 <UART_SetConfig+0xb58>)
 8108db4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108db6:	e009      	b.n	8108dcc <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108db8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8108dbe:	e005      	b.n	8108dcc <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8108dc0:	2300      	movs	r3, #0
 8108dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8108dc4:	2301      	movs	r3, #1
 8108dc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8108dca:	bf00      	nop
    }

    if (pclk != 0U)
 8108dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108dce:	2b00      	cmp	r3, #0
 8108dd0:	d021      	beq.n	8108e16 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108dd2:	687b      	ldr	r3, [r7, #4]
 8108dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108dd6:	4a1d      	ldr	r2, [pc, #116]	; (8108e4c <UART_SetConfig+0xb5c>)
 8108dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108ddc:	461a      	mov	r2, r3
 8108dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108de0:	fbb3 f2f2 	udiv	r2, r3, r2
 8108de4:	687b      	ldr	r3, [r7, #4]
 8108de6:	685b      	ldr	r3, [r3, #4]
 8108de8:	085b      	lsrs	r3, r3, #1
 8108dea:	441a      	add	r2, r3
 8108dec:	687b      	ldr	r3, [r7, #4]
 8108dee:	685b      	ldr	r3, [r3, #4]
 8108df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8108df4:	b29b      	uxth	r3, r3
 8108df6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108dfa:	2b0f      	cmp	r3, #15
 8108dfc:	d908      	bls.n	8108e10 <UART_SetConfig+0xb20>
 8108dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108e04:	d204      	bcs.n	8108e10 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8108e06:	687b      	ldr	r3, [r7, #4]
 8108e08:	681b      	ldr	r3, [r3, #0]
 8108e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108e0c:	60da      	str	r2, [r3, #12]
 8108e0e:	e002      	b.n	8108e16 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8108e10:	2301      	movs	r3, #1
 8108e12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108e16:	687b      	ldr	r3, [r7, #4]
 8108e18:	2201      	movs	r2, #1
 8108e1a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	2201      	movs	r2, #1
 8108e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108e26:	687b      	ldr	r3, [r7, #4]
 8108e28:	2200      	movs	r2, #0
 8108e2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8108e2c:	687b      	ldr	r3, [r7, #4]
 8108e2e:	2200      	movs	r2, #0
 8108e30:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8108e32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8108e36:	4618      	mov	r0, r3
 8108e38:	3738      	adds	r7, #56	; 0x38
 8108e3a:	46bd      	mov	sp, r7
 8108e3c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8108e40:	58024400 	.word	0x58024400
 8108e44:	03d09000 	.word	0x03d09000
 8108e48:	003d0900 	.word	0x003d0900
 8108e4c:	0810dc94 	.word	0x0810dc94

08108e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108e50:	b480      	push	{r7}
 8108e52:	b083      	sub	sp, #12
 8108e54:	af00      	add	r7, sp, #0
 8108e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e5c:	f003 0301 	and.w	r3, r3, #1
 8108e60:	2b00      	cmp	r3, #0
 8108e62:	d00a      	beq.n	8108e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108e64:	687b      	ldr	r3, [r7, #4]
 8108e66:	681b      	ldr	r3, [r3, #0]
 8108e68:	685b      	ldr	r3, [r3, #4]
 8108e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108e6e:	687b      	ldr	r3, [r7, #4]
 8108e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	681b      	ldr	r3, [r3, #0]
 8108e76:	430a      	orrs	r2, r1
 8108e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108e7a:	687b      	ldr	r3, [r7, #4]
 8108e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e7e:	f003 0302 	and.w	r3, r3, #2
 8108e82:	2b00      	cmp	r3, #0
 8108e84:	d00a      	beq.n	8108e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108e86:	687b      	ldr	r3, [r7, #4]
 8108e88:	681b      	ldr	r3, [r3, #0]
 8108e8a:	685b      	ldr	r3, [r3, #4]
 8108e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108e90:	687b      	ldr	r3, [r7, #4]
 8108e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108e94:	687b      	ldr	r3, [r7, #4]
 8108e96:	681b      	ldr	r3, [r3, #0]
 8108e98:	430a      	orrs	r2, r1
 8108e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108e9c:	687b      	ldr	r3, [r7, #4]
 8108e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ea0:	f003 0304 	and.w	r3, r3, #4
 8108ea4:	2b00      	cmp	r3, #0
 8108ea6:	d00a      	beq.n	8108ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108ea8:	687b      	ldr	r3, [r7, #4]
 8108eaa:	681b      	ldr	r3, [r3, #0]
 8108eac:	685b      	ldr	r3, [r3, #4]
 8108eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108eb2:	687b      	ldr	r3, [r7, #4]
 8108eb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108eb6:	687b      	ldr	r3, [r7, #4]
 8108eb8:	681b      	ldr	r3, [r3, #0]
 8108eba:	430a      	orrs	r2, r1
 8108ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108ebe:	687b      	ldr	r3, [r7, #4]
 8108ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ec2:	f003 0308 	and.w	r3, r3, #8
 8108ec6:	2b00      	cmp	r3, #0
 8108ec8:	d00a      	beq.n	8108ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108eca:	687b      	ldr	r3, [r7, #4]
 8108ecc:	681b      	ldr	r3, [r3, #0]
 8108ece:	685b      	ldr	r3, [r3, #4]
 8108ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108ed4:	687b      	ldr	r3, [r7, #4]
 8108ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108ed8:	687b      	ldr	r3, [r7, #4]
 8108eda:	681b      	ldr	r3, [r3, #0]
 8108edc:	430a      	orrs	r2, r1
 8108ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108ee0:	687b      	ldr	r3, [r7, #4]
 8108ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108ee4:	f003 0310 	and.w	r3, r3, #16
 8108ee8:	2b00      	cmp	r3, #0
 8108eea:	d00a      	beq.n	8108f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108eec:	687b      	ldr	r3, [r7, #4]
 8108eee:	681b      	ldr	r3, [r3, #0]
 8108ef0:	689b      	ldr	r3, [r3, #8]
 8108ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108ef6:	687b      	ldr	r3, [r7, #4]
 8108ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108efa:	687b      	ldr	r3, [r7, #4]
 8108efc:	681b      	ldr	r3, [r3, #0]
 8108efe:	430a      	orrs	r2, r1
 8108f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108f02:	687b      	ldr	r3, [r7, #4]
 8108f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f06:	f003 0320 	and.w	r3, r3, #32
 8108f0a:	2b00      	cmp	r3, #0
 8108f0c:	d00a      	beq.n	8108f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108f0e:	687b      	ldr	r3, [r7, #4]
 8108f10:	681b      	ldr	r3, [r3, #0]
 8108f12:	689b      	ldr	r3, [r3, #8]
 8108f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108f18:	687b      	ldr	r3, [r7, #4]
 8108f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108f1c:	687b      	ldr	r3, [r7, #4]
 8108f1e:	681b      	ldr	r3, [r3, #0]
 8108f20:	430a      	orrs	r2, r1
 8108f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108f2c:	2b00      	cmp	r3, #0
 8108f2e:	d01a      	beq.n	8108f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	681b      	ldr	r3, [r3, #0]
 8108f34:	685b      	ldr	r3, [r3, #4]
 8108f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108f3a:	687b      	ldr	r3, [r7, #4]
 8108f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	681b      	ldr	r3, [r3, #0]
 8108f42:	430a      	orrs	r2, r1
 8108f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108f46:	687b      	ldr	r3, [r7, #4]
 8108f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108f4e:	d10a      	bne.n	8108f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108f50:	687b      	ldr	r3, [r7, #4]
 8108f52:	681b      	ldr	r3, [r3, #0]
 8108f54:	685b      	ldr	r3, [r3, #4]
 8108f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108f5a:	687b      	ldr	r3, [r7, #4]
 8108f5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108f5e:	687b      	ldr	r3, [r7, #4]
 8108f60:	681b      	ldr	r3, [r3, #0]
 8108f62:	430a      	orrs	r2, r1
 8108f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108f66:	687b      	ldr	r3, [r7, #4]
 8108f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108f6e:	2b00      	cmp	r3, #0
 8108f70:	d00a      	beq.n	8108f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108f72:	687b      	ldr	r3, [r7, #4]
 8108f74:	681b      	ldr	r3, [r3, #0]
 8108f76:	685b      	ldr	r3, [r3, #4]
 8108f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108f7c:	687b      	ldr	r3, [r7, #4]
 8108f7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108f80:	687b      	ldr	r3, [r7, #4]
 8108f82:	681b      	ldr	r3, [r3, #0]
 8108f84:	430a      	orrs	r2, r1
 8108f86:	605a      	str	r2, [r3, #4]
  }
}
 8108f88:	bf00      	nop
 8108f8a:	370c      	adds	r7, #12
 8108f8c:	46bd      	mov	sp, r7
 8108f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f92:	4770      	bx	lr

08108f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108f94:	b580      	push	{r7, lr}
 8108f96:	b086      	sub	sp, #24
 8108f98:	af02      	add	r7, sp, #8
 8108f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	2200      	movs	r2, #0
 8108fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8108fa4:	f7f9 fb8e 	bl	81026c4 <HAL_GetTick>
 8108fa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108faa:	687b      	ldr	r3, [r7, #4]
 8108fac:	681b      	ldr	r3, [r3, #0]
 8108fae:	681b      	ldr	r3, [r3, #0]
 8108fb0:	f003 0308 	and.w	r3, r3, #8
 8108fb4:	2b08      	cmp	r3, #8
 8108fb6:	d10e      	bne.n	8108fd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108fbc:	9300      	str	r3, [sp, #0]
 8108fbe:	68fb      	ldr	r3, [r7, #12]
 8108fc0:	2200      	movs	r2, #0
 8108fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108fc6:	6878      	ldr	r0, [r7, #4]
 8108fc8:	f000 f82c 	bl	8109024 <UART_WaitOnFlagUntilTimeout>
 8108fcc:	4603      	mov	r3, r0
 8108fce:	2b00      	cmp	r3, #0
 8108fd0:	d001      	beq.n	8108fd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108fd2:	2303      	movs	r3, #3
 8108fd4:	e022      	b.n	810901c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	681b      	ldr	r3, [r3, #0]
 8108fda:	681b      	ldr	r3, [r3, #0]
 8108fdc:	f003 0304 	and.w	r3, r3, #4
 8108fe0:	2b04      	cmp	r3, #4
 8108fe2:	d10e      	bne.n	8109002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108fe8:	9300      	str	r3, [sp, #0]
 8108fea:	68fb      	ldr	r3, [r7, #12]
 8108fec:	2200      	movs	r2, #0
 8108fee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108ff2:	6878      	ldr	r0, [r7, #4]
 8108ff4:	f000 f816 	bl	8109024 <UART_WaitOnFlagUntilTimeout>
 8108ff8:	4603      	mov	r3, r0
 8108ffa:	2b00      	cmp	r3, #0
 8108ffc:	d001      	beq.n	8109002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108ffe:	2303      	movs	r3, #3
 8109000:	e00c      	b.n	810901c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	2220      	movs	r2, #32
 8109006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 810900a:	687b      	ldr	r3, [r7, #4]
 810900c:	2220      	movs	r2, #32
 810900e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	2200      	movs	r2, #0
 8109016:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 810901a:	2300      	movs	r3, #0
}
 810901c:	4618      	mov	r0, r3
 810901e:	3710      	adds	r7, #16
 8109020:	46bd      	mov	sp, r7
 8109022:	bd80      	pop	{r7, pc}

08109024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8109024:	b580      	push	{r7, lr}
 8109026:	b084      	sub	sp, #16
 8109028:	af00      	add	r7, sp, #0
 810902a:	60f8      	str	r0, [r7, #12]
 810902c:	60b9      	str	r1, [r7, #8]
 810902e:	603b      	str	r3, [r7, #0]
 8109030:	4613      	mov	r3, r2
 8109032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109034:	e062      	b.n	81090fc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109036:	69bb      	ldr	r3, [r7, #24]
 8109038:	f1b3 3fff 	cmp.w	r3, #4294967295
 810903c:	d05e      	beq.n	81090fc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810903e:	f7f9 fb41 	bl	81026c4 <HAL_GetTick>
 8109042:	4602      	mov	r2, r0
 8109044:	683b      	ldr	r3, [r7, #0]
 8109046:	1ad3      	subs	r3, r2, r3
 8109048:	69ba      	ldr	r2, [r7, #24]
 810904a:	429a      	cmp	r2, r3
 810904c:	d302      	bcc.n	8109054 <UART_WaitOnFlagUntilTimeout+0x30>
 810904e:	69bb      	ldr	r3, [r7, #24]
 8109050:	2b00      	cmp	r3, #0
 8109052:	d11d      	bne.n	8109090 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8109054:	68fb      	ldr	r3, [r7, #12]
 8109056:	681b      	ldr	r3, [r3, #0]
 8109058:	681a      	ldr	r2, [r3, #0]
 810905a:	68fb      	ldr	r3, [r7, #12]
 810905c:	681b      	ldr	r3, [r3, #0]
 810905e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8109062:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109064:	68fb      	ldr	r3, [r7, #12]
 8109066:	681b      	ldr	r3, [r3, #0]
 8109068:	689a      	ldr	r2, [r3, #8]
 810906a:	68fb      	ldr	r3, [r7, #12]
 810906c:	681b      	ldr	r3, [r3, #0]
 810906e:	f022 0201 	bic.w	r2, r2, #1
 8109072:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8109074:	68fb      	ldr	r3, [r7, #12]
 8109076:	2220      	movs	r2, #32
 8109078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 810907c:	68fb      	ldr	r3, [r7, #12]
 810907e:	2220      	movs	r2, #32
 8109080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8109084:	68fb      	ldr	r3, [r7, #12]
 8109086:	2200      	movs	r2, #0
 8109088:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 810908c:	2303      	movs	r3, #3
 810908e:	e045      	b.n	810911c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8109090:	68fb      	ldr	r3, [r7, #12]
 8109092:	681b      	ldr	r3, [r3, #0]
 8109094:	681b      	ldr	r3, [r3, #0]
 8109096:	f003 0304 	and.w	r3, r3, #4
 810909a:	2b00      	cmp	r3, #0
 810909c:	d02e      	beq.n	81090fc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810909e:	68fb      	ldr	r3, [r7, #12]
 81090a0:	681b      	ldr	r3, [r3, #0]
 81090a2:	69db      	ldr	r3, [r3, #28]
 81090a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81090a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81090ac:	d126      	bne.n	81090fc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81090ae:	68fb      	ldr	r3, [r7, #12]
 81090b0:	681b      	ldr	r3, [r3, #0]
 81090b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81090b6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81090b8:	68fb      	ldr	r3, [r7, #12]
 81090ba:	681b      	ldr	r3, [r3, #0]
 81090bc:	681a      	ldr	r2, [r3, #0]
 81090be:	68fb      	ldr	r3, [r7, #12]
 81090c0:	681b      	ldr	r3, [r3, #0]
 81090c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81090c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81090c8:	68fb      	ldr	r3, [r7, #12]
 81090ca:	681b      	ldr	r3, [r3, #0]
 81090cc:	689a      	ldr	r2, [r3, #8]
 81090ce:	68fb      	ldr	r3, [r7, #12]
 81090d0:	681b      	ldr	r3, [r3, #0]
 81090d2:	f022 0201 	bic.w	r2, r2, #1
 81090d6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 81090d8:	68fb      	ldr	r3, [r7, #12]
 81090da:	2220      	movs	r2, #32
 81090dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 81090e0:	68fb      	ldr	r3, [r7, #12]
 81090e2:	2220      	movs	r2, #32
 81090e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81090e8:	68fb      	ldr	r3, [r7, #12]
 81090ea:	2220      	movs	r2, #32
 81090ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81090f0:	68fb      	ldr	r3, [r7, #12]
 81090f2:	2200      	movs	r2, #0
 81090f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 81090f8:	2303      	movs	r3, #3
 81090fa:	e00f      	b.n	810911c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81090fc:	68fb      	ldr	r3, [r7, #12]
 81090fe:	681b      	ldr	r3, [r3, #0]
 8109100:	69da      	ldr	r2, [r3, #28]
 8109102:	68bb      	ldr	r3, [r7, #8]
 8109104:	4013      	ands	r3, r2
 8109106:	68ba      	ldr	r2, [r7, #8]
 8109108:	429a      	cmp	r2, r3
 810910a:	bf0c      	ite	eq
 810910c:	2301      	moveq	r3, #1
 810910e:	2300      	movne	r3, #0
 8109110:	b2db      	uxtb	r3, r3
 8109112:	461a      	mov	r2, r3
 8109114:	79fb      	ldrb	r3, [r7, #7]
 8109116:	429a      	cmp	r2, r3
 8109118:	d08d      	beq.n	8109036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810911a:	2300      	movs	r3, #0
}
 810911c:	4618      	mov	r0, r3
 810911e:	3710      	adds	r7, #16
 8109120:	46bd      	mov	sp, r7
 8109122:	bd80      	pop	{r7, pc}

08109124 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8109124:	b480      	push	{r7}
 8109126:	b083      	sub	sp, #12
 8109128:	af00      	add	r7, sp, #0
 810912a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810912c:	687b      	ldr	r3, [r7, #4]
 810912e:	681b      	ldr	r3, [r3, #0]
 8109130:	681a      	ldr	r2, [r3, #0]
 8109132:	687b      	ldr	r3, [r7, #4]
 8109134:	681b      	ldr	r3, [r3, #0]
 8109136:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810913a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810913c:	687b      	ldr	r3, [r7, #4]
 810913e:	681b      	ldr	r3, [r3, #0]
 8109140:	689a      	ldr	r2, [r3, #8]
 8109142:	687b      	ldr	r3, [r7, #4]
 8109144:	681b      	ldr	r3, [r3, #0]
 8109146:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810914a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810914c:	687b      	ldr	r3, [r7, #4]
 810914e:	2220      	movs	r2, #32
 8109150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8109154:	bf00      	nop
 8109156:	370c      	adds	r7, #12
 8109158:	46bd      	mov	sp, r7
 810915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810915e:	4770      	bx	lr

08109160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8109160:	b480      	push	{r7}
 8109162:	b083      	sub	sp, #12
 8109164:	af00      	add	r7, sp, #0
 8109166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109168:	687b      	ldr	r3, [r7, #4]
 810916a:	681b      	ldr	r3, [r3, #0]
 810916c:	681a      	ldr	r2, [r3, #0]
 810916e:	687b      	ldr	r3, [r7, #4]
 8109170:	681b      	ldr	r3, [r3, #0]
 8109172:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8109176:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109178:	687b      	ldr	r3, [r7, #4]
 810917a:	681b      	ldr	r3, [r3, #0]
 810917c:	689b      	ldr	r3, [r3, #8]
 810917e:	687a      	ldr	r2, [r7, #4]
 8109180:	6812      	ldr	r2, [r2, #0]
 8109182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109186:	f023 0301 	bic.w	r3, r3, #1
 810918a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810918c:	687b      	ldr	r3, [r7, #4]
 810918e:	2220      	movs	r2, #32
 8109190:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109194:	687b      	ldr	r3, [r7, #4]
 8109196:	2200      	movs	r2, #0
 8109198:	66da      	str	r2, [r3, #108]	; 0x6c
}
 810919a:	bf00      	nop
 810919c:	370c      	adds	r7, #12
 810919e:	46bd      	mov	sp, r7
 81091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091a4:	4770      	bx	lr

081091a6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 81091a6:	b580      	push	{r7, lr}
 81091a8:	b084      	sub	sp, #16
 81091aa:	af00      	add	r7, sp, #0
 81091ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81091ae:	687b      	ldr	r3, [r7, #4]
 81091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81091b2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	69db      	ldr	r3, [r3, #28]
 81091b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81091bc:	d014      	beq.n	81091e8 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 81091be:	68fb      	ldr	r3, [r7, #12]
 81091c0:	2200      	movs	r2, #0
 81091c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81091c6:	68fb      	ldr	r3, [r7, #12]
 81091c8:	681b      	ldr	r3, [r3, #0]
 81091ca:	689a      	ldr	r2, [r3, #8]
 81091cc:	68fb      	ldr	r3, [r7, #12]
 81091ce:	681b      	ldr	r3, [r3, #0]
 81091d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81091d4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81091d6:	68fb      	ldr	r3, [r7, #12]
 81091d8:	681b      	ldr	r3, [r3, #0]
 81091da:	681a      	ldr	r2, [r3, #0]
 81091dc:	68fb      	ldr	r3, [r7, #12]
 81091de:	681b      	ldr	r3, [r3, #0]
 81091e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81091e4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 81091e6:	e002      	b.n	81091ee <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 81091e8:	68f8      	ldr	r0, [r7, #12]
 81091ea:	f7f8 fd7d 	bl	8101ce8 <HAL_UART_TxCpltCallback>
}
 81091ee:	bf00      	nop
 81091f0:	3710      	adds	r7, #16
 81091f2:	46bd      	mov	sp, r7
 81091f4:	bd80      	pop	{r7, pc}

081091f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81091f6:	b580      	push	{r7, lr}
 81091f8:	b084      	sub	sp, #16
 81091fa:	af00      	add	r7, sp, #0
 81091fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81091fe:	687b      	ldr	r3, [r7, #4]
 8109200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109202:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8109204:	68f8      	ldr	r0, [r7, #12]
 8109206:	f7ff f85f 	bl	81082c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810920a:	bf00      	nop
 810920c:	3710      	adds	r7, #16
 810920e:	46bd      	mov	sp, r7
 8109210:	bd80      	pop	{r7, pc}

08109212 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8109212:	b580      	push	{r7, lr}
 8109214:	b084      	sub	sp, #16
 8109216:	af00      	add	r7, sp, #0
 8109218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810921a:	687b      	ldr	r3, [r7, #4]
 810921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810921e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	69db      	ldr	r3, [r3, #28]
 8109224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8109228:	d01f      	beq.n	810926a <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 810922a:	68fb      	ldr	r3, [r7, #12]
 810922c:	2200      	movs	r2, #0
 810922e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109232:	68fb      	ldr	r3, [r7, #12]
 8109234:	681b      	ldr	r3, [r3, #0]
 8109236:	681a      	ldr	r2, [r3, #0]
 8109238:	68fb      	ldr	r3, [r7, #12]
 810923a:	681b      	ldr	r3, [r3, #0]
 810923c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8109240:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109242:	68fb      	ldr	r3, [r7, #12]
 8109244:	681b      	ldr	r3, [r3, #0]
 8109246:	689a      	ldr	r2, [r3, #8]
 8109248:	68fb      	ldr	r3, [r7, #12]
 810924a:	681b      	ldr	r3, [r3, #0]
 810924c:	f022 0201 	bic.w	r2, r2, #1
 8109250:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109252:	68fb      	ldr	r3, [r7, #12]
 8109254:	681b      	ldr	r3, [r3, #0]
 8109256:	689a      	ldr	r2, [r3, #8]
 8109258:	68fb      	ldr	r3, [r7, #12]
 810925a:	681b      	ldr	r3, [r3, #0]
 810925c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8109260:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8109262:	68fb      	ldr	r3, [r7, #12]
 8109264:	2220      	movs	r2, #32
 8109266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 810926a:	68f8      	ldr	r0, [r7, #12]
 810926c:	f7f8 fcb8 	bl	8101be0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109270:	bf00      	nop
 8109272:	3710      	adds	r7, #16
 8109274:	46bd      	mov	sp, r7
 8109276:	bd80      	pop	{r7, pc}

08109278 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8109278:	b580      	push	{r7, lr}
 810927a:	b084      	sub	sp, #16
 810927c:	af00      	add	r7, sp, #0
 810927e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8109280:	687b      	ldr	r3, [r7, #4]
 8109282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109284:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8109286:	68f8      	ldr	r0, [r7, #12]
 8109288:	f7ff f828 	bl	81082dc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810928c:	bf00      	nop
 810928e:	3710      	adds	r7, #16
 8109290:	46bd      	mov	sp, r7
 8109292:	bd80      	pop	{r7, pc}

08109294 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8109294:	b580      	push	{r7, lr}
 8109296:	b086      	sub	sp, #24
 8109298:	af00      	add	r7, sp, #0
 810929a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810929c:	687b      	ldr	r3, [r7, #4]
 810929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81092a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 81092a2:	697b      	ldr	r3, [r7, #20]
 81092a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81092a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 81092aa:	697b      	ldr	r3, [r7, #20]
 81092ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81092b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 81092b2:	697b      	ldr	r3, [r7, #20]
 81092b4:	681b      	ldr	r3, [r3, #0]
 81092b6:	689b      	ldr	r3, [r3, #8]
 81092b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81092bc:	2b80      	cmp	r3, #128	; 0x80
 81092be:	d109      	bne.n	81092d4 <UART_DMAError+0x40>
 81092c0:	693b      	ldr	r3, [r7, #16]
 81092c2:	2b21      	cmp	r3, #33	; 0x21
 81092c4:	d106      	bne.n	81092d4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 81092c6:	697b      	ldr	r3, [r7, #20]
 81092c8:	2200      	movs	r2, #0
 81092ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 81092ce:	6978      	ldr	r0, [r7, #20]
 81092d0:	f7ff ff28 	bl	8109124 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 81092d4:	697b      	ldr	r3, [r7, #20]
 81092d6:	681b      	ldr	r3, [r3, #0]
 81092d8:	689b      	ldr	r3, [r3, #8]
 81092da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81092de:	2b40      	cmp	r3, #64	; 0x40
 81092e0:	d109      	bne.n	81092f6 <UART_DMAError+0x62>
 81092e2:	68fb      	ldr	r3, [r7, #12]
 81092e4:	2b22      	cmp	r3, #34	; 0x22
 81092e6:	d106      	bne.n	81092f6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 81092e8:	697b      	ldr	r3, [r7, #20]
 81092ea:	2200      	movs	r2, #0
 81092ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 81092f0:	6978      	ldr	r0, [r7, #20]
 81092f2:	f7ff ff35 	bl	8109160 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 81092f6:	697b      	ldr	r3, [r7, #20]
 81092f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81092fc:	f043 0210 	orr.w	r2, r3, #16
 8109300:	697b      	ldr	r3, [r7, #20]
 8109302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8109306:	6978      	ldr	r0, [r7, #20]
 8109308:	f7f8 fd04 	bl	8101d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810930c:	bf00      	nop
 810930e:	3718      	adds	r7, #24
 8109310:	46bd      	mov	sp, r7
 8109312:	bd80      	pop	{r7, pc}

08109314 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8109314:	b580      	push	{r7, lr}
 8109316:	b084      	sub	sp, #16
 8109318:	af00      	add	r7, sp, #0
 810931a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810931c:	687b      	ldr	r3, [r7, #4]
 810931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109320:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8109322:	68fb      	ldr	r3, [r7, #12]
 8109324:	2200      	movs	r2, #0
 8109326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810932a:	68fb      	ldr	r3, [r7, #12]
 810932c:	2200      	movs	r2, #0
 810932e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8109332:	68f8      	ldr	r0, [r7, #12]
 8109334:	f7f8 fcee 	bl	8101d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8109338:	bf00      	nop
 810933a:	3710      	adds	r7, #16
 810933c:	46bd      	mov	sp, r7
 810933e:	bd80      	pop	{r7, pc}

08109340 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8109340:	b580      	push	{r7, lr}
 8109342:	b082      	sub	sp, #8
 8109344:	af00      	add	r7, sp, #0
 8109346:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8109348:	687b      	ldr	r3, [r7, #4]
 810934a:	681b      	ldr	r3, [r3, #0]
 810934c:	681a      	ldr	r2, [r3, #0]
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	681b      	ldr	r3, [r3, #0]
 8109352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8109356:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8109358:	687b      	ldr	r3, [r7, #4]
 810935a:	2220      	movs	r2, #32
 810935c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8109360:	687b      	ldr	r3, [r7, #4]
 8109362:	2200      	movs	r2, #0
 8109364:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8109366:	6878      	ldr	r0, [r7, #4]
 8109368:	f7f8 fcbe 	bl	8101ce8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810936c:	bf00      	nop
 810936e:	3708      	adds	r7, #8
 8109370:	46bd      	mov	sp, r7
 8109372:	bd80      	pop	{r7, pc}

08109374 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8109374:	b480      	push	{r7}
 8109376:	b083      	sub	sp, #12
 8109378:	af00      	add	r7, sp, #0
 810937a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810937c:	bf00      	nop
 810937e:	370c      	adds	r7, #12
 8109380:	46bd      	mov	sp, r7
 8109382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109386:	4770      	bx	lr

08109388 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8109388:	b480      	push	{r7}
 810938a:	b083      	sub	sp, #12
 810938c:	af00      	add	r7, sp, #0
 810938e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8109390:	bf00      	nop
 8109392:	370c      	adds	r7, #12
 8109394:	46bd      	mov	sp, r7
 8109396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810939a:	4770      	bx	lr

0810939c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810939c:	b480      	push	{r7}
 810939e:	b083      	sub	sp, #12
 81093a0:	af00      	add	r7, sp, #0
 81093a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 81093a4:	bf00      	nop
 81093a6:	370c      	adds	r7, #12
 81093a8:	46bd      	mov	sp, r7
 81093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093ae:	4770      	bx	lr

081093b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81093b0:	b480      	push	{r7}
 81093b2:	b085      	sub	sp, #20
 81093b4:	af00      	add	r7, sp, #0
 81093b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81093be:	2b01      	cmp	r3, #1
 81093c0:	d101      	bne.n	81093c6 <HAL_UARTEx_DisableFifoMode+0x16>
 81093c2:	2302      	movs	r3, #2
 81093c4:	e027      	b.n	8109416 <HAL_UARTEx_DisableFifoMode+0x66>
 81093c6:	687b      	ldr	r3, [r7, #4]
 81093c8:	2201      	movs	r2, #1
 81093ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81093ce:	687b      	ldr	r3, [r7, #4]
 81093d0:	2224      	movs	r2, #36	; 0x24
 81093d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81093d6:	687b      	ldr	r3, [r7, #4]
 81093d8:	681b      	ldr	r3, [r3, #0]
 81093da:	681b      	ldr	r3, [r3, #0]
 81093dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81093de:	687b      	ldr	r3, [r7, #4]
 81093e0:	681b      	ldr	r3, [r3, #0]
 81093e2:	681a      	ldr	r2, [r3, #0]
 81093e4:	687b      	ldr	r3, [r7, #4]
 81093e6:	681b      	ldr	r3, [r3, #0]
 81093e8:	f022 0201 	bic.w	r2, r2, #1
 81093ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81093ee:	68fb      	ldr	r3, [r7, #12]
 81093f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81093f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81093f6:	687b      	ldr	r3, [r7, #4]
 81093f8:	2200      	movs	r2, #0
 81093fa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81093fc:	687b      	ldr	r3, [r7, #4]
 81093fe:	681b      	ldr	r3, [r3, #0]
 8109400:	68fa      	ldr	r2, [r7, #12]
 8109402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109404:	687b      	ldr	r3, [r7, #4]
 8109406:	2220      	movs	r2, #32
 8109408:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810940c:	687b      	ldr	r3, [r7, #4]
 810940e:	2200      	movs	r2, #0
 8109410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8109414:	2300      	movs	r3, #0
}
 8109416:	4618      	mov	r0, r3
 8109418:	3714      	adds	r7, #20
 810941a:	46bd      	mov	sp, r7
 810941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109420:	4770      	bx	lr

08109422 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109422:	b580      	push	{r7, lr}
 8109424:	b084      	sub	sp, #16
 8109426:	af00      	add	r7, sp, #0
 8109428:	6078      	str	r0, [r7, #4]
 810942a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8109432:	2b01      	cmp	r3, #1
 8109434:	d101      	bne.n	810943a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109436:	2302      	movs	r3, #2
 8109438:	e02d      	b.n	8109496 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810943a:	687b      	ldr	r3, [r7, #4]
 810943c:	2201      	movs	r2, #1
 810943e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8109442:	687b      	ldr	r3, [r7, #4]
 8109444:	2224      	movs	r2, #36	; 0x24
 8109446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810944a:	687b      	ldr	r3, [r7, #4]
 810944c:	681b      	ldr	r3, [r3, #0]
 810944e:	681b      	ldr	r3, [r3, #0]
 8109450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109452:	687b      	ldr	r3, [r7, #4]
 8109454:	681b      	ldr	r3, [r3, #0]
 8109456:	681a      	ldr	r2, [r3, #0]
 8109458:	687b      	ldr	r3, [r7, #4]
 810945a:	681b      	ldr	r3, [r3, #0]
 810945c:	f022 0201 	bic.w	r2, r2, #1
 8109460:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109462:	687b      	ldr	r3, [r7, #4]
 8109464:	681b      	ldr	r3, [r3, #0]
 8109466:	689b      	ldr	r3, [r3, #8]
 8109468:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810946c:	687b      	ldr	r3, [r7, #4]
 810946e:	681b      	ldr	r3, [r3, #0]
 8109470:	683a      	ldr	r2, [r7, #0]
 8109472:	430a      	orrs	r2, r1
 8109474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109476:	6878      	ldr	r0, [r7, #4]
 8109478:	f000 f850 	bl	810951c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810947c:	687b      	ldr	r3, [r7, #4]
 810947e:	681b      	ldr	r3, [r3, #0]
 8109480:	68fa      	ldr	r2, [r7, #12]
 8109482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109484:	687b      	ldr	r3, [r7, #4]
 8109486:	2220      	movs	r2, #32
 8109488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810948c:	687b      	ldr	r3, [r7, #4]
 810948e:	2200      	movs	r2, #0
 8109490:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8109494:	2300      	movs	r3, #0
}
 8109496:	4618      	mov	r0, r3
 8109498:	3710      	adds	r7, #16
 810949a:	46bd      	mov	sp, r7
 810949c:	bd80      	pop	{r7, pc}

0810949e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810949e:	b580      	push	{r7, lr}
 81094a0:	b084      	sub	sp, #16
 81094a2:	af00      	add	r7, sp, #0
 81094a4:	6078      	str	r0, [r7, #4]
 81094a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81094a8:	687b      	ldr	r3, [r7, #4]
 81094aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81094ae:	2b01      	cmp	r3, #1
 81094b0:	d101      	bne.n	81094b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81094b2:	2302      	movs	r3, #2
 81094b4:	e02d      	b.n	8109512 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	2201      	movs	r2, #1
 81094ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81094be:	687b      	ldr	r3, [r7, #4]
 81094c0:	2224      	movs	r2, #36	; 0x24
 81094c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81094c6:	687b      	ldr	r3, [r7, #4]
 81094c8:	681b      	ldr	r3, [r3, #0]
 81094ca:	681b      	ldr	r3, [r3, #0]
 81094cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81094ce:	687b      	ldr	r3, [r7, #4]
 81094d0:	681b      	ldr	r3, [r3, #0]
 81094d2:	681a      	ldr	r2, [r3, #0]
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	681b      	ldr	r3, [r3, #0]
 81094d8:	f022 0201 	bic.w	r2, r2, #1
 81094dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81094de:	687b      	ldr	r3, [r7, #4]
 81094e0:	681b      	ldr	r3, [r3, #0]
 81094e2:	689b      	ldr	r3, [r3, #8]
 81094e4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81094e8:	687b      	ldr	r3, [r7, #4]
 81094ea:	681b      	ldr	r3, [r3, #0]
 81094ec:	683a      	ldr	r2, [r7, #0]
 81094ee:	430a      	orrs	r2, r1
 81094f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81094f2:	6878      	ldr	r0, [r7, #4]
 81094f4:	f000 f812 	bl	810951c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81094f8:	687b      	ldr	r3, [r7, #4]
 81094fa:	681b      	ldr	r3, [r3, #0]
 81094fc:	68fa      	ldr	r2, [r7, #12]
 81094fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109500:	687b      	ldr	r3, [r7, #4]
 8109502:	2220      	movs	r2, #32
 8109504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	2200      	movs	r2, #0
 810950c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8109510:	2300      	movs	r3, #0
}
 8109512:	4618      	mov	r0, r3
 8109514:	3710      	adds	r7, #16
 8109516:	46bd      	mov	sp, r7
 8109518:	bd80      	pop	{r7, pc}
	...

0810951c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810951c:	b480      	push	{r7}
 810951e:	b089      	sub	sp, #36	; 0x24
 8109520:	af00      	add	r7, sp, #0
 8109522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8109524:	4a2f      	ldr	r2, [pc, #188]	; (81095e4 <UARTEx_SetNbDataToProcess+0xc8>)
 8109526:	f107 0314 	add.w	r3, r7, #20
 810952a:	e892 0003 	ldmia.w	r2, {r0, r1}
 810952e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8109532:	4a2d      	ldr	r2, [pc, #180]	; (81095e8 <UARTEx_SetNbDataToProcess+0xcc>)
 8109534:	f107 030c 	add.w	r3, r7, #12
 8109538:	e892 0003 	ldmia.w	r2, {r0, r1}
 810953c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109540:	687b      	ldr	r3, [r7, #4]
 8109542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109544:	2b00      	cmp	r3, #0
 8109546:	d108      	bne.n	810955a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8109548:	687b      	ldr	r3, [r7, #4]
 810954a:	2201      	movs	r2, #1
 810954c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109550:	687b      	ldr	r3, [r7, #4]
 8109552:	2201      	movs	r2, #1
 8109554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109558:	e03d      	b.n	81095d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810955a:	2310      	movs	r3, #16
 810955c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810955e:	2310      	movs	r3, #16
 8109560:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	681b      	ldr	r3, [r3, #0]
 8109566:	689b      	ldr	r3, [r3, #8]
 8109568:	0e5b      	lsrs	r3, r3, #25
 810956a:	b2db      	uxtb	r3, r3
 810956c:	f003 0307 	and.w	r3, r3, #7
 8109570:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109572:	687b      	ldr	r3, [r7, #4]
 8109574:	681b      	ldr	r3, [r3, #0]
 8109576:	689b      	ldr	r3, [r3, #8]
 8109578:	0f5b      	lsrs	r3, r3, #29
 810957a:	b2db      	uxtb	r3, r3
 810957c:	f003 0307 	and.w	r3, r3, #7
 8109580:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8109582:	7fbb      	ldrb	r3, [r7, #30]
 8109584:	7f3a      	ldrb	r2, [r7, #28]
 8109586:	f107 0120 	add.w	r1, r7, #32
 810958a:	440a      	add	r2, r1
 810958c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8109590:	fb02 f303 	mul.w	r3, r2, r3
 8109594:	7f3a      	ldrb	r2, [r7, #28]
 8109596:	f107 0120 	add.w	r1, r7, #32
 810959a:	440a      	add	r2, r1
 810959c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81095a0:	fb93 f3f2 	sdiv	r3, r3, r2
 81095a4:	b29a      	uxth	r2, r3
 81095a6:	687b      	ldr	r3, [r7, #4]
 81095a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 81095ac:	7ffb      	ldrb	r3, [r7, #31]
 81095ae:	7f7a      	ldrb	r2, [r7, #29]
 81095b0:	f107 0120 	add.w	r1, r7, #32
 81095b4:	440a      	add	r2, r1
 81095b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81095ba:	fb02 f303 	mul.w	r3, r2, r3
 81095be:	7f7a      	ldrb	r2, [r7, #29]
 81095c0:	f107 0120 	add.w	r1, r7, #32
 81095c4:	440a      	add	r2, r1
 81095c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81095ca:	fb93 f3f2 	sdiv	r3, r3, r2
 81095ce:	b29a      	uxth	r2, r3
 81095d0:	687b      	ldr	r3, [r7, #4]
 81095d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81095d6:	bf00      	nop
 81095d8:	3724      	adds	r7, #36	; 0x24
 81095da:	46bd      	mov	sp, r7
 81095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095e0:	4770      	bx	lr
 81095e2:	bf00      	nop
 81095e4:	0810dbe8 	.word	0x0810dbe8
 81095e8:	0810dbf0 	.word	0x0810dbf0

081095ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81095ec:	b480      	push	{r7}
 81095ee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81095f0:	bf00      	nop
 81095f2:	46bd      	mov	sp, r7
 81095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095f8:	4770      	bx	lr
	...

081095fc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81095fc:	b480      	push	{r7}
 81095fe:	b085      	sub	sp, #20
 8109600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8109602:	f3ef 8305 	mrs	r3, IPSR
 8109606:	60bb      	str	r3, [r7, #8]
  return(result);
 8109608:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810960a:	2b00      	cmp	r3, #0
 810960c:	d10f      	bne.n	810962e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810960e:	f3ef 8310 	mrs	r3, PRIMASK
 8109612:	607b      	str	r3, [r7, #4]
  return(result);
 8109614:	687b      	ldr	r3, [r7, #4]
 8109616:	2b00      	cmp	r3, #0
 8109618:	d105      	bne.n	8109626 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810961a:	f3ef 8311 	mrs	r3, BASEPRI
 810961e:	603b      	str	r3, [r7, #0]
  return(result);
 8109620:	683b      	ldr	r3, [r7, #0]
 8109622:	2b00      	cmp	r3, #0
 8109624:	d007      	beq.n	8109636 <osKernelInitialize+0x3a>
 8109626:	4b0e      	ldr	r3, [pc, #56]	; (8109660 <osKernelInitialize+0x64>)
 8109628:	681b      	ldr	r3, [r3, #0]
 810962a:	2b02      	cmp	r3, #2
 810962c:	d103      	bne.n	8109636 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 810962e:	f06f 0305 	mvn.w	r3, #5
 8109632:	60fb      	str	r3, [r7, #12]
 8109634:	e00c      	b.n	8109650 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8109636:	4b0a      	ldr	r3, [pc, #40]	; (8109660 <osKernelInitialize+0x64>)
 8109638:	681b      	ldr	r3, [r3, #0]
 810963a:	2b00      	cmp	r3, #0
 810963c:	d105      	bne.n	810964a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810963e:	4b08      	ldr	r3, [pc, #32]	; (8109660 <osKernelInitialize+0x64>)
 8109640:	2201      	movs	r2, #1
 8109642:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8109644:	2300      	movs	r3, #0
 8109646:	60fb      	str	r3, [r7, #12]
 8109648:	e002      	b.n	8109650 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 810964a:	f04f 33ff 	mov.w	r3, #4294967295
 810964e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8109650:	68fb      	ldr	r3, [r7, #12]
}
 8109652:	4618      	mov	r0, r3
 8109654:	3714      	adds	r7, #20
 8109656:	46bd      	mov	sp, r7
 8109658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810965c:	4770      	bx	lr
 810965e:	bf00      	nop
 8109660:	10000210 	.word	0x10000210

08109664 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8109664:	b580      	push	{r7, lr}
 8109666:	b084      	sub	sp, #16
 8109668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810966a:	f3ef 8305 	mrs	r3, IPSR
 810966e:	60bb      	str	r3, [r7, #8]
  return(result);
 8109670:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8109672:	2b00      	cmp	r3, #0
 8109674:	d10f      	bne.n	8109696 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8109676:	f3ef 8310 	mrs	r3, PRIMASK
 810967a:	607b      	str	r3, [r7, #4]
  return(result);
 810967c:	687b      	ldr	r3, [r7, #4]
 810967e:	2b00      	cmp	r3, #0
 8109680:	d105      	bne.n	810968e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8109682:	f3ef 8311 	mrs	r3, BASEPRI
 8109686:	603b      	str	r3, [r7, #0]
  return(result);
 8109688:	683b      	ldr	r3, [r7, #0]
 810968a:	2b00      	cmp	r3, #0
 810968c:	d007      	beq.n	810969e <osKernelStart+0x3a>
 810968e:	4b0f      	ldr	r3, [pc, #60]	; (81096cc <osKernelStart+0x68>)
 8109690:	681b      	ldr	r3, [r3, #0]
 8109692:	2b02      	cmp	r3, #2
 8109694:	d103      	bne.n	810969e <osKernelStart+0x3a>
    stat = osErrorISR;
 8109696:	f06f 0305 	mvn.w	r3, #5
 810969a:	60fb      	str	r3, [r7, #12]
 810969c:	e010      	b.n	81096c0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 810969e:	4b0b      	ldr	r3, [pc, #44]	; (81096cc <osKernelStart+0x68>)
 81096a0:	681b      	ldr	r3, [r3, #0]
 81096a2:	2b01      	cmp	r3, #1
 81096a4:	d109      	bne.n	81096ba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 81096a6:	f7ff ffa1 	bl	81095ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 81096aa:	4b08      	ldr	r3, [pc, #32]	; (81096cc <osKernelStart+0x68>)
 81096ac:	2202      	movs	r2, #2
 81096ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 81096b0:	f001 fc84 	bl	810afbc <vTaskStartScheduler>
      stat = osOK;
 81096b4:	2300      	movs	r3, #0
 81096b6:	60fb      	str	r3, [r7, #12]
 81096b8:	e002      	b.n	81096c0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 81096ba:	f04f 33ff 	mov.w	r3, #4294967295
 81096be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 81096c0:	68fb      	ldr	r3, [r7, #12]
}
 81096c2:	4618      	mov	r0, r3
 81096c4:	3710      	adds	r7, #16
 81096c6:	46bd      	mov	sp, r7
 81096c8:	bd80      	pop	{r7, pc}
 81096ca:	bf00      	nop
 81096cc:	10000210 	.word	0x10000210

081096d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81096d0:	b580      	push	{r7, lr}
 81096d2:	b090      	sub	sp, #64	; 0x40
 81096d4:	af04      	add	r7, sp, #16
 81096d6:	60f8      	str	r0, [r7, #12]
 81096d8:	60b9      	str	r1, [r7, #8]
 81096da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81096dc:	2300      	movs	r3, #0
 81096de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81096e0:	f3ef 8305 	mrs	r3, IPSR
 81096e4:	61fb      	str	r3, [r7, #28]
  return(result);
 81096e6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 81096e8:	2b00      	cmp	r3, #0
 81096ea:	f040 808f 	bne.w	810980c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81096ee:	f3ef 8310 	mrs	r3, PRIMASK
 81096f2:	61bb      	str	r3, [r7, #24]
  return(result);
 81096f4:	69bb      	ldr	r3, [r7, #24]
 81096f6:	2b00      	cmp	r3, #0
 81096f8:	d105      	bne.n	8109706 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81096fa:	f3ef 8311 	mrs	r3, BASEPRI
 81096fe:	617b      	str	r3, [r7, #20]
  return(result);
 8109700:	697b      	ldr	r3, [r7, #20]
 8109702:	2b00      	cmp	r3, #0
 8109704:	d003      	beq.n	810970e <osThreadNew+0x3e>
 8109706:	4b44      	ldr	r3, [pc, #272]	; (8109818 <osThreadNew+0x148>)
 8109708:	681b      	ldr	r3, [r3, #0]
 810970a:	2b02      	cmp	r3, #2
 810970c:	d07e      	beq.n	810980c <osThreadNew+0x13c>
 810970e:	68fb      	ldr	r3, [r7, #12]
 8109710:	2b00      	cmp	r3, #0
 8109712:	d07b      	beq.n	810980c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8109714:	2380      	movs	r3, #128	; 0x80
 8109716:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8109718:	2318      	movs	r3, #24
 810971a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 810971c:	2300      	movs	r3, #0
 810971e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8109720:	f04f 33ff 	mov.w	r3, #4294967295
 8109724:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8109726:	687b      	ldr	r3, [r7, #4]
 8109728:	2b00      	cmp	r3, #0
 810972a:	d045      	beq.n	81097b8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 810972c:	687b      	ldr	r3, [r7, #4]
 810972e:	681b      	ldr	r3, [r3, #0]
 8109730:	2b00      	cmp	r3, #0
 8109732:	d002      	beq.n	810973a <osThreadNew+0x6a>
        name = attr->name;
 8109734:	687b      	ldr	r3, [r7, #4]
 8109736:	681b      	ldr	r3, [r3, #0]
 8109738:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 810973a:	687b      	ldr	r3, [r7, #4]
 810973c:	699b      	ldr	r3, [r3, #24]
 810973e:	2b00      	cmp	r3, #0
 8109740:	d002      	beq.n	8109748 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	699b      	ldr	r3, [r3, #24]
 8109746:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8109748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810974a:	2b00      	cmp	r3, #0
 810974c:	d008      	beq.n	8109760 <osThreadNew+0x90>
 810974e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109750:	2b38      	cmp	r3, #56	; 0x38
 8109752:	d805      	bhi.n	8109760 <osThreadNew+0x90>
 8109754:	687b      	ldr	r3, [r7, #4]
 8109756:	685b      	ldr	r3, [r3, #4]
 8109758:	f003 0301 	and.w	r3, r3, #1
 810975c:	2b00      	cmp	r3, #0
 810975e:	d001      	beq.n	8109764 <osThreadNew+0x94>
        return (NULL);
 8109760:	2300      	movs	r3, #0
 8109762:	e054      	b.n	810980e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8109764:	687b      	ldr	r3, [r7, #4]
 8109766:	695b      	ldr	r3, [r3, #20]
 8109768:	2b00      	cmp	r3, #0
 810976a:	d003      	beq.n	8109774 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	695b      	ldr	r3, [r3, #20]
 8109770:	089b      	lsrs	r3, r3, #2
 8109772:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8109774:	687b      	ldr	r3, [r7, #4]
 8109776:	689b      	ldr	r3, [r3, #8]
 8109778:	2b00      	cmp	r3, #0
 810977a:	d00e      	beq.n	810979a <osThreadNew+0xca>
 810977c:	687b      	ldr	r3, [r7, #4]
 810977e:	68db      	ldr	r3, [r3, #12]
 8109780:	2b5b      	cmp	r3, #91	; 0x5b
 8109782:	d90a      	bls.n	810979a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8109788:	2b00      	cmp	r3, #0
 810978a:	d006      	beq.n	810979a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	695b      	ldr	r3, [r3, #20]
 8109790:	2b00      	cmp	r3, #0
 8109792:	d002      	beq.n	810979a <osThreadNew+0xca>
        mem = 1;
 8109794:	2301      	movs	r3, #1
 8109796:	623b      	str	r3, [r7, #32]
 8109798:	e010      	b.n	81097bc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810979a:	687b      	ldr	r3, [r7, #4]
 810979c:	689b      	ldr	r3, [r3, #8]
 810979e:	2b00      	cmp	r3, #0
 81097a0:	d10c      	bne.n	81097bc <osThreadNew+0xec>
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	68db      	ldr	r3, [r3, #12]
 81097a6:	2b00      	cmp	r3, #0
 81097a8:	d108      	bne.n	81097bc <osThreadNew+0xec>
 81097aa:	687b      	ldr	r3, [r7, #4]
 81097ac:	691b      	ldr	r3, [r3, #16]
 81097ae:	2b00      	cmp	r3, #0
 81097b0:	d104      	bne.n	81097bc <osThreadNew+0xec>
          mem = 0;
 81097b2:	2300      	movs	r3, #0
 81097b4:	623b      	str	r3, [r7, #32]
 81097b6:	e001      	b.n	81097bc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 81097b8:	2300      	movs	r3, #0
 81097ba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 81097bc:	6a3b      	ldr	r3, [r7, #32]
 81097be:	2b01      	cmp	r3, #1
 81097c0:	d110      	bne.n	81097e4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81097c2:	687b      	ldr	r3, [r7, #4]
 81097c4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 81097c6:	687a      	ldr	r2, [r7, #4]
 81097c8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81097ca:	9202      	str	r2, [sp, #8]
 81097cc:	9301      	str	r3, [sp, #4]
 81097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097d0:	9300      	str	r3, [sp, #0]
 81097d2:	68bb      	ldr	r3, [r7, #8]
 81097d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81097d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81097d8:	68f8      	ldr	r0, [r7, #12]
 81097da:	f001 fa1d 	bl	810ac18 <xTaskCreateStatic>
 81097de:	4603      	mov	r3, r0
 81097e0:	613b      	str	r3, [r7, #16]
 81097e2:	e013      	b.n	810980c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 81097e4:	6a3b      	ldr	r3, [r7, #32]
 81097e6:	2b00      	cmp	r3, #0
 81097e8:	d110      	bne.n	810980c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81097ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81097ec:	b29a      	uxth	r2, r3
 81097ee:	f107 0310 	add.w	r3, r7, #16
 81097f2:	9301      	str	r3, [sp, #4]
 81097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097f6:	9300      	str	r3, [sp, #0]
 81097f8:	68bb      	ldr	r3, [r7, #8]
 81097fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81097fc:	68f8      	ldr	r0, [r7, #12]
 81097fe:	f001 fa65 	bl	810accc <xTaskCreate>
 8109802:	4603      	mov	r3, r0
 8109804:	2b01      	cmp	r3, #1
 8109806:	d001      	beq.n	810980c <osThreadNew+0x13c>
          hTask = NULL;
 8109808:	2300      	movs	r3, #0
 810980a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 810980c:	693b      	ldr	r3, [r7, #16]
}
 810980e:	4618      	mov	r0, r3
 8109810:	3730      	adds	r7, #48	; 0x30
 8109812:	46bd      	mov	sp, r7
 8109814:	bd80      	pop	{r7, pc}
 8109816:	bf00      	nop
 8109818:	10000210 	.word	0x10000210

0810981c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 810981c:	b580      	push	{r7, lr}
 810981e:	b086      	sub	sp, #24
 8109820:	af00      	add	r7, sp, #0
 8109822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8109824:	f3ef 8305 	mrs	r3, IPSR
 8109828:	613b      	str	r3, [r7, #16]
  return(result);
 810982a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 810982c:	2b00      	cmp	r3, #0
 810982e:	d10f      	bne.n	8109850 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8109830:	f3ef 8310 	mrs	r3, PRIMASK
 8109834:	60fb      	str	r3, [r7, #12]
  return(result);
 8109836:	68fb      	ldr	r3, [r7, #12]
 8109838:	2b00      	cmp	r3, #0
 810983a:	d105      	bne.n	8109848 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810983c:	f3ef 8311 	mrs	r3, BASEPRI
 8109840:	60bb      	str	r3, [r7, #8]
  return(result);
 8109842:	68bb      	ldr	r3, [r7, #8]
 8109844:	2b00      	cmp	r3, #0
 8109846:	d007      	beq.n	8109858 <osDelay+0x3c>
 8109848:	4b0a      	ldr	r3, [pc, #40]	; (8109874 <osDelay+0x58>)
 810984a:	681b      	ldr	r3, [r3, #0]
 810984c:	2b02      	cmp	r3, #2
 810984e:	d103      	bne.n	8109858 <osDelay+0x3c>
    stat = osErrorISR;
 8109850:	f06f 0305 	mvn.w	r3, #5
 8109854:	617b      	str	r3, [r7, #20]
 8109856:	e007      	b.n	8109868 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8109858:	2300      	movs	r3, #0
 810985a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	2b00      	cmp	r3, #0
 8109860:	d002      	beq.n	8109868 <osDelay+0x4c>
      vTaskDelay(ticks);
 8109862:	6878      	ldr	r0, [r7, #4]
 8109864:	f001 fb76 	bl	810af54 <vTaskDelay>
    }
  }

  return (stat);
 8109868:	697b      	ldr	r3, [r7, #20]
}
 810986a:	4618      	mov	r0, r3
 810986c:	3718      	adds	r7, #24
 810986e:	46bd      	mov	sp, r7
 8109870:	bd80      	pop	{r7, pc}
 8109872:	bf00      	nop
 8109874:	10000210 	.word	0x10000210

08109878 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8109878:	b480      	push	{r7}
 810987a:	b085      	sub	sp, #20
 810987c:	af00      	add	r7, sp, #0
 810987e:	60f8      	str	r0, [r7, #12]
 8109880:	60b9      	str	r1, [r7, #8]
 8109882:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8109884:	68fb      	ldr	r3, [r7, #12]
 8109886:	4a07      	ldr	r2, [pc, #28]	; (81098a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8109888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810988a:	68bb      	ldr	r3, [r7, #8]
 810988c:	4a06      	ldr	r2, [pc, #24]	; (81098a8 <vApplicationGetIdleTaskMemory+0x30>)
 810988e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8109890:	687b      	ldr	r3, [r7, #4]
 8109892:	2280      	movs	r2, #128	; 0x80
 8109894:	601a      	str	r2, [r3, #0]
}
 8109896:	bf00      	nop
 8109898:	3714      	adds	r7, #20
 810989a:	46bd      	mov	sp, r7
 810989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098a0:	4770      	bx	lr
 81098a2:	bf00      	nop
 81098a4:	10000214 	.word	0x10000214
 81098a8:	10000270 	.word	0x10000270

081098ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 81098ac:	b480      	push	{r7}
 81098ae:	b085      	sub	sp, #20
 81098b0:	af00      	add	r7, sp, #0
 81098b2:	60f8      	str	r0, [r7, #12]
 81098b4:	60b9      	str	r1, [r7, #8]
 81098b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81098b8:	68fb      	ldr	r3, [r7, #12]
 81098ba:	4a07      	ldr	r2, [pc, #28]	; (81098d8 <vApplicationGetTimerTaskMemory+0x2c>)
 81098bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 81098be:	68bb      	ldr	r3, [r7, #8]
 81098c0:	4a06      	ldr	r2, [pc, #24]	; (81098dc <vApplicationGetTimerTaskMemory+0x30>)
 81098c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 81098c4:	687b      	ldr	r3, [r7, #4]
 81098c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 81098ca:	601a      	str	r2, [r3, #0]
}
 81098cc:	bf00      	nop
 81098ce:	3714      	adds	r7, #20
 81098d0:	46bd      	mov	sp, r7
 81098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098d6:	4770      	bx	lr
 81098d8:	10000470 	.word	0x10000470
 81098dc:	100004cc 	.word	0x100004cc

081098e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81098e0:	b580      	push	{r7, lr}
 81098e2:	b08a      	sub	sp, #40	; 0x28
 81098e4:	af00      	add	r7, sp, #0
 81098e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81098e8:	2300      	movs	r3, #0
 81098ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81098ec:	f001 fbca 	bl	810b084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81098f0:	4b57      	ldr	r3, [pc, #348]	; (8109a50 <pvPortMalloc+0x170>)
 81098f2:	681b      	ldr	r3, [r3, #0]
 81098f4:	2b00      	cmp	r3, #0
 81098f6:	d101      	bne.n	81098fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81098f8:	f000 f90c 	bl	8109b14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81098fc:	4b55      	ldr	r3, [pc, #340]	; (8109a54 <pvPortMalloc+0x174>)
 81098fe:	681a      	ldr	r2, [r3, #0]
 8109900:	687b      	ldr	r3, [r7, #4]
 8109902:	4013      	ands	r3, r2
 8109904:	2b00      	cmp	r3, #0
 8109906:	f040 808c 	bne.w	8109a22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810990a:	687b      	ldr	r3, [r7, #4]
 810990c:	2b00      	cmp	r3, #0
 810990e:	d01c      	beq.n	810994a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8109910:	2208      	movs	r2, #8
 8109912:	687b      	ldr	r3, [r7, #4]
 8109914:	4413      	add	r3, r2
 8109916:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8109918:	687b      	ldr	r3, [r7, #4]
 810991a:	f003 0307 	and.w	r3, r3, #7
 810991e:	2b00      	cmp	r3, #0
 8109920:	d013      	beq.n	810994a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	f023 0307 	bic.w	r3, r3, #7
 8109928:	3308      	adds	r3, #8
 810992a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810992c:	687b      	ldr	r3, [r7, #4]
 810992e:	f003 0307 	and.w	r3, r3, #7
 8109932:	2b00      	cmp	r3, #0
 8109934:	d009      	beq.n	810994a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8109936:	f04f 0350 	mov.w	r3, #80	; 0x50
 810993a:	f383 8811 	msr	BASEPRI, r3
 810993e:	f3bf 8f6f 	isb	sy
 8109942:	f3bf 8f4f 	dsb	sy
 8109946:	617b      	str	r3, [r7, #20]
 8109948:	e7fe      	b.n	8109948 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810994a:	687b      	ldr	r3, [r7, #4]
 810994c:	2b00      	cmp	r3, #0
 810994e:	d068      	beq.n	8109a22 <pvPortMalloc+0x142>
 8109950:	4b41      	ldr	r3, [pc, #260]	; (8109a58 <pvPortMalloc+0x178>)
 8109952:	681b      	ldr	r3, [r3, #0]
 8109954:	687a      	ldr	r2, [r7, #4]
 8109956:	429a      	cmp	r2, r3
 8109958:	d863      	bhi.n	8109a22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810995a:	4b40      	ldr	r3, [pc, #256]	; (8109a5c <pvPortMalloc+0x17c>)
 810995c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810995e:	4b3f      	ldr	r3, [pc, #252]	; (8109a5c <pvPortMalloc+0x17c>)
 8109960:	681b      	ldr	r3, [r3, #0]
 8109962:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109964:	e004      	b.n	8109970 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8109966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109968:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810996c:	681b      	ldr	r3, [r3, #0]
 810996e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8109970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109972:	685b      	ldr	r3, [r3, #4]
 8109974:	687a      	ldr	r2, [r7, #4]
 8109976:	429a      	cmp	r2, r3
 8109978:	d903      	bls.n	8109982 <pvPortMalloc+0xa2>
 810997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810997c:	681b      	ldr	r3, [r3, #0]
 810997e:	2b00      	cmp	r3, #0
 8109980:	d1f1      	bne.n	8109966 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8109982:	4b33      	ldr	r3, [pc, #204]	; (8109a50 <pvPortMalloc+0x170>)
 8109984:	681b      	ldr	r3, [r3, #0]
 8109986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109988:	429a      	cmp	r2, r3
 810998a:	d04a      	beq.n	8109a22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810998c:	6a3b      	ldr	r3, [r7, #32]
 810998e:	681b      	ldr	r3, [r3, #0]
 8109990:	2208      	movs	r2, #8
 8109992:	4413      	add	r3, r2
 8109994:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8109996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109998:	681a      	ldr	r2, [r3, #0]
 810999a:	6a3b      	ldr	r3, [r7, #32]
 810999c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810999e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81099a0:	685a      	ldr	r2, [r3, #4]
 81099a2:	687b      	ldr	r3, [r7, #4]
 81099a4:	1ad2      	subs	r2, r2, r3
 81099a6:	2308      	movs	r3, #8
 81099a8:	005b      	lsls	r3, r3, #1
 81099aa:	429a      	cmp	r2, r3
 81099ac:	d91e      	bls.n	81099ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 81099ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81099b0:	687b      	ldr	r3, [r7, #4]
 81099b2:	4413      	add	r3, r2
 81099b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81099b6:	69bb      	ldr	r3, [r7, #24]
 81099b8:	f003 0307 	and.w	r3, r3, #7
 81099bc:	2b00      	cmp	r3, #0
 81099be:	d009      	beq.n	81099d4 <pvPortMalloc+0xf4>
 81099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81099c4:	f383 8811 	msr	BASEPRI, r3
 81099c8:	f3bf 8f6f 	isb	sy
 81099cc:	f3bf 8f4f 	dsb	sy
 81099d0:	613b      	str	r3, [r7, #16]
 81099d2:	e7fe      	b.n	81099d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81099d6:	685a      	ldr	r2, [r3, #4]
 81099d8:	687b      	ldr	r3, [r7, #4]
 81099da:	1ad2      	subs	r2, r2, r3
 81099dc:	69bb      	ldr	r3, [r7, #24]
 81099de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81099e2:	687a      	ldr	r2, [r7, #4]
 81099e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81099e6:	69b8      	ldr	r0, [r7, #24]
 81099e8:	f000 f8f6 	bl	8109bd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81099ec:	4b1a      	ldr	r3, [pc, #104]	; (8109a58 <pvPortMalloc+0x178>)
 81099ee:	681a      	ldr	r2, [r3, #0]
 81099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81099f2:	685b      	ldr	r3, [r3, #4]
 81099f4:	1ad3      	subs	r3, r2, r3
 81099f6:	4a18      	ldr	r2, [pc, #96]	; (8109a58 <pvPortMalloc+0x178>)
 81099f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81099fa:	4b17      	ldr	r3, [pc, #92]	; (8109a58 <pvPortMalloc+0x178>)
 81099fc:	681a      	ldr	r2, [r3, #0]
 81099fe:	4b18      	ldr	r3, [pc, #96]	; (8109a60 <pvPortMalloc+0x180>)
 8109a00:	681b      	ldr	r3, [r3, #0]
 8109a02:	429a      	cmp	r2, r3
 8109a04:	d203      	bcs.n	8109a0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8109a06:	4b14      	ldr	r3, [pc, #80]	; (8109a58 <pvPortMalloc+0x178>)
 8109a08:	681b      	ldr	r3, [r3, #0]
 8109a0a:	4a15      	ldr	r2, [pc, #84]	; (8109a60 <pvPortMalloc+0x180>)
 8109a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8109a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109a10:	685a      	ldr	r2, [r3, #4]
 8109a12:	4b10      	ldr	r3, [pc, #64]	; (8109a54 <pvPortMalloc+0x174>)
 8109a14:	681b      	ldr	r3, [r3, #0]
 8109a16:	431a      	orrs	r2, r3
 8109a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8109a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109a1e:	2200      	movs	r2, #0
 8109a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8109a22:	f001 fb3d 	bl	810b0a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8109a26:	69fb      	ldr	r3, [r7, #28]
 8109a28:	f003 0307 	and.w	r3, r3, #7
 8109a2c:	2b00      	cmp	r3, #0
 8109a2e:	d009      	beq.n	8109a44 <pvPortMalloc+0x164>
 8109a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a34:	f383 8811 	msr	BASEPRI, r3
 8109a38:	f3bf 8f6f 	isb	sy
 8109a3c:	f3bf 8f4f 	dsb	sy
 8109a40:	60fb      	str	r3, [r7, #12]
 8109a42:	e7fe      	b.n	8109a42 <pvPortMalloc+0x162>
	return pvReturn;
 8109a44:	69fb      	ldr	r3, [r7, #28]
}
 8109a46:	4618      	mov	r0, r3
 8109a48:	3728      	adds	r7, #40	; 0x28
 8109a4a:	46bd      	mov	sp, r7
 8109a4c:	bd80      	pop	{r7, pc}
 8109a4e:	bf00      	nop
 8109a50:	100044d4 	.word	0x100044d4
 8109a54:	100044e0 	.word	0x100044e0
 8109a58:	100044d8 	.word	0x100044d8
 8109a5c:	100044cc 	.word	0x100044cc
 8109a60:	100044dc 	.word	0x100044dc

08109a64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8109a64:	b580      	push	{r7, lr}
 8109a66:	b086      	sub	sp, #24
 8109a68:	af00      	add	r7, sp, #0
 8109a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8109a6c:	687b      	ldr	r3, [r7, #4]
 8109a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8109a70:	687b      	ldr	r3, [r7, #4]
 8109a72:	2b00      	cmp	r3, #0
 8109a74:	d046      	beq.n	8109b04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8109a76:	2308      	movs	r3, #8
 8109a78:	425b      	negs	r3, r3
 8109a7a:	697a      	ldr	r2, [r7, #20]
 8109a7c:	4413      	add	r3, r2
 8109a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8109a80:	697b      	ldr	r3, [r7, #20]
 8109a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8109a84:	693b      	ldr	r3, [r7, #16]
 8109a86:	685a      	ldr	r2, [r3, #4]
 8109a88:	4b20      	ldr	r3, [pc, #128]	; (8109b0c <vPortFree+0xa8>)
 8109a8a:	681b      	ldr	r3, [r3, #0]
 8109a8c:	4013      	ands	r3, r2
 8109a8e:	2b00      	cmp	r3, #0
 8109a90:	d109      	bne.n	8109aa6 <vPortFree+0x42>
 8109a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109a96:	f383 8811 	msr	BASEPRI, r3
 8109a9a:	f3bf 8f6f 	isb	sy
 8109a9e:	f3bf 8f4f 	dsb	sy
 8109aa2:	60fb      	str	r3, [r7, #12]
 8109aa4:	e7fe      	b.n	8109aa4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8109aa6:	693b      	ldr	r3, [r7, #16]
 8109aa8:	681b      	ldr	r3, [r3, #0]
 8109aaa:	2b00      	cmp	r3, #0
 8109aac:	d009      	beq.n	8109ac2 <vPortFree+0x5e>
 8109aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109ab2:	f383 8811 	msr	BASEPRI, r3
 8109ab6:	f3bf 8f6f 	isb	sy
 8109aba:	f3bf 8f4f 	dsb	sy
 8109abe:	60bb      	str	r3, [r7, #8]
 8109ac0:	e7fe      	b.n	8109ac0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8109ac2:	693b      	ldr	r3, [r7, #16]
 8109ac4:	685a      	ldr	r2, [r3, #4]
 8109ac6:	4b11      	ldr	r3, [pc, #68]	; (8109b0c <vPortFree+0xa8>)
 8109ac8:	681b      	ldr	r3, [r3, #0]
 8109aca:	4013      	ands	r3, r2
 8109acc:	2b00      	cmp	r3, #0
 8109ace:	d019      	beq.n	8109b04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8109ad0:	693b      	ldr	r3, [r7, #16]
 8109ad2:	681b      	ldr	r3, [r3, #0]
 8109ad4:	2b00      	cmp	r3, #0
 8109ad6:	d115      	bne.n	8109b04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8109ad8:	693b      	ldr	r3, [r7, #16]
 8109ada:	685a      	ldr	r2, [r3, #4]
 8109adc:	4b0b      	ldr	r3, [pc, #44]	; (8109b0c <vPortFree+0xa8>)
 8109ade:	681b      	ldr	r3, [r3, #0]
 8109ae0:	43db      	mvns	r3, r3
 8109ae2:	401a      	ands	r2, r3
 8109ae4:	693b      	ldr	r3, [r7, #16]
 8109ae6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8109ae8:	f001 facc 	bl	810b084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8109aec:	693b      	ldr	r3, [r7, #16]
 8109aee:	685a      	ldr	r2, [r3, #4]
 8109af0:	4b07      	ldr	r3, [pc, #28]	; (8109b10 <vPortFree+0xac>)
 8109af2:	681b      	ldr	r3, [r3, #0]
 8109af4:	4413      	add	r3, r2
 8109af6:	4a06      	ldr	r2, [pc, #24]	; (8109b10 <vPortFree+0xac>)
 8109af8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8109afa:	6938      	ldr	r0, [r7, #16]
 8109afc:	f000 f86c 	bl	8109bd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8109b00:	f001 face 	bl	810b0a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8109b04:	bf00      	nop
 8109b06:	3718      	adds	r7, #24
 8109b08:	46bd      	mov	sp, r7
 8109b0a:	bd80      	pop	{r7, pc}
 8109b0c:	100044e0 	.word	0x100044e0
 8109b10:	100044d8 	.word	0x100044d8

08109b14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8109b14:	b480      	push	{r7}
 8109b16:	b085      	sub	sp, #20
 8109b18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8109b1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8109b1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8109b20:	4b27      	ldr	r3, [pc, #156]	; (8109bc0 <prvHeapInit+0xac>)
 8109b22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8109b24:	68fb      	ldr	r3, [r7, #12]
 8109b26:	f003 0307 	and.w	r3, r3, #7
 8109b2a:	2b00      	cmp	r3, #0
 8109b2c:	d00c      	beq.n	8109b48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8109b2e:	68fb      	ldr	r3, [r7, #12]
 8109b30:	3307      	adds	r3, #7
 8109b32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109b34:	68fb      	ldr	r3, [r7, #12]
 8109b36:	f023 0307 	bic.w	r3, r3, #7
 8109b3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8109b3c:	68ba      	ldr	r2, [r7, #8]
 8109b3e:	68fb      	ldr	r3, [r7, #12]
 8109b40:	1ad3      	subs	r3, r2, r3
 8109b42:	4a1f      	ldr	r2, [pc, #124]	; (8109bc0 <prvHeapInit+0xac>)
 8109b44:	4413      	add	r3, r2
 8109b46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8109b48:	68fb      	ldr	r3, [r7, #12]
 8109b4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8109b4c:	4a1d      	ldr	r2, [pc, #116]	; (8109bc4 <prvHeapInit+0xb0>)
 8109b4e:	687b      	ldr	r3, [r7, #4]
 8109b50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8109b52:	4b1c      	ldr	r3, [pc, #112]	; (8109bc4 <prvHeapInit+0xb0>)
 8109b54:	2200      	movs	r2, #0
 8109b56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8109b58:	687b      	ldr	r3, [r7, #4]
 8109b5a:	68ba      	ldr	r2, [r7, #8]
 8109b5c:	4413      	add	r3, r2
 8109b5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8109b60:	2208      	movs	r2, #8
 8109b62:	68fb      	ldr	r3, [r7, #12]
 8109b64:	1a9b      	subs	r3, r3, r2
 8109b66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8109b68:	68fb      	ldr	r3, [r7, #12]
 8109b6a:	f023 0307 	bic.w	r3, r3, #7
 8109b6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8109b70:	68fb      	ldr	r3, [r7, #12]
 8109b72:	4a15      	ldr	r2, [pc, #84]	; (8109bc8 <prvHeapInit+0xb4>)
 8109b74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8109b76:	4b14      	ldr	r3, [pc, #80]	; (8109bc8 <prvHeapInit+0xb4>)
 8109b78:	681b      	ldr	r3, [r3, #0]
 8109b7a:	2200      	movs	r2, #0
 8109b7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8109b7e:	4b12      	ldr	r3, [pc, #72]	; (8109bc8 <prvHeapInit+0xb4>)
 8109b80:	681b      	ldr	r3, [r3, #0]
 8109b82:	2200      	movs	r2, #0
 8109b84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8109b86:	687b      	ldr	r3, [r7, #4]
 8109b88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8109b8a:	683b      	ldr	r3, [r7, #0]
 8109b8c:	68fa      	ldr	r2, [r7, #12]
 8109b8e:	1ad2      	subs	r2, r2, r3
 8109b90:	683b      	ldr	r3, [r7, #0]
 8109b92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8109b94:	4b0c      	ldr	r3, [pc, #48]	; (8109bc8 <prvHeapInit+0xb4>)
 8109b96:	681a      	ldr	r2, [r3, #0]
 8109b98:	683b      	ldr	r3, [r7, #0]
 8109b9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109b9c:	683b      	ldr	r3, [r7, #0]
 8109b9e:	685b      	ldr	r3, [r3, #4]
 8109ba0:	4a0a      	ldr	r2, [pc, #40]	; (8109bcc <prvHeapInit+0xb8>)
 8109ba2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8109ba4:	683b      	ldr	r3, [r7, #0]
 8109ba6:	685b      	ldr	r3, [r3, #4]
 8109ba8:	4a09      	ldr	r2, [pc, #36]	; (8109bd0 <prvHeapInit+0xbc>)
 8109baa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8109bac:	4b09      	ldr	r3, [pc, #36]	; (8109bd4 <prvHeapInit+0xc0>)
 8109bae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8109bb2:	601a      	str	r2, [r3, #0]
}
 8109bb4:	bf00      	nop
 8109bb6:	3714      	adds	r7, #20
 8109bb8:	46bd      	mov	sp, r7
 8109bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109bbe:	4770      	bx	lr
 8109bc0:	100008cc 	.word	0x100008cc
 8109bc4:	100044cc 	.word	0x100044cc
 8109bc8:	100044d4 	.word	0x100044d4
 8109bcc:	100044dc 	.word	0x100044dc
 8109bd0:	100044d8 	.word	0x100044d8
 8109bd4:	100044e0 	.word	0x100044e0

08109bd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8109bd8:	b480      	push	{r7}
 8109bda:	b085      	sub	sp, #20
 8109bdc:	af00      	add	r7, sp, #0
 8109bde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8109be0:	4b28      	ldr	r3, [pc, #160]	; (8109c84 <prvInsertBlockIntoFreeList+0xac>)
 8109be2:	60fb      	str	r3, [r7, #12]
 8109be4:	e002      	b.n	8109bec <prvInsertBlockIntoFreeList+0x14>
 8109be6:	68fb      	ldr	r3, [r7, #12]
 8109be8:	681b      	ldr	r3, [r3, #0]
 8109bea:	60fb      	str	r3, [r7, #12]
 8109bec:	68fb      	ldr	r3, [r7, #12]
 8109bee:	681b      	ldr	r3, [r3, #0]
 8109bf0:	687a      	ldr	r2, [r7, #4]
 8109bf2:	429a      	cmp	r2, r3
 8109bf4:	d8f7      	bhi.n	8109be6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8109bf6:	68fb      	ldr	r3, [r7, #12]
 8109bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8109bfa:	68fb      	ldr	r3, [r7, #12]
 8109bfc:	685b      	ldr	r3, [r3, #4]
 8109bfe:	68ba      	ldr	r2, [r7, #8]
 8109c00:	4413      	add	r3, r2
 8109c02:	687a      	ldr	r2, [r7, #4]
 8109c04:	429a      	cmp	r2, r3
 8109c06:	d108      	bne.n	8109c1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8109c08:	68fb      	ldr	r3, [r7, #12]
 8109c0a:	685a      	ldr	r2, [r3, #4]
 8109c0c:	687b      	ldr	r3, [r7, #4]
 8109c0e:	685b      	ldr	r3, [r3, #4]
 8109c10:	441a      	add	r2, r3
 8109c12:	68fb      	ldr	r3, [r7, #12]
 8109c14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8109c16:	68fb      	ldr	r3, [r7, #12]
 8109c18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8109c1a:	687b      	ldr	r3, [r7, #4]
 8109c1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8109c1e:	687b      	ldr	r3, [r7, #4]
 8109c20:	685b      	ldr	r3, [r3, #4]
 8109c22:	68ba      	ldr	r2, [r7, #8]
 8109c24:	441a      	add	r2, r3
 8109c26:	68fb      	ldr	r3, [r7, #12]
 8109c28:	681b      	ldr	r3, [r3, #0]
 8109c2a:	429a      	cmp	r2, r3
 8109c2c:	d118      	bne.n	8109c60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8109c2e:	68fb      	ldr	r3, [r7, #12]
 8109c30:	681a      	ldr	r2, [r3, #0]
 8109c32:	4b15      	ldr	r3, [pc, #84]	; (8109c88 <prvInsertBlockIntoFreeList+0xb0>)
 8109c34:	681b      	ldr	r3, [r3, #0]
 8109c36:	429a      	cmp	r2, r3
 8109c38:	d00d      	beq.n	8109c56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8109c3a:	687b      	ldr	r3, [r7, #4]
 8109c3c:	685a      	ldr	r2, [r3, #4]
 8109c3e:	68fb      	ldr	r3, [r7, #12]
 8109c40:	681b      	ldr	r3, [r3, #0]
 8109c42:	685b      	ldr	r3, [r3, #4]
 8109c44:	441a      	add	r2, r3
 8109c46:	687b      	ldr	r3, [r7, #4]
 8109c48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8109c4a:	68fb      	ldr	r3, [r7, #12]
 8109c4c:	681b      	ldr	r3, [r3, #0]
 8109c4e:	681a      	ldr	r2, [r3, #0]
 8109c50:	687b      	ldr	r3, [r7, #4]
 8109c52:	601a      	str	r2, [r3, #0]
 8109c54:	e008      	b.n	8109c68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8109c56:	4b0c      	ldr	r3, [pc, #48]	; (8109c88 <prvInsertBlockIntoFreeList+0xb0>)
 8109c58:	681a      	ldr	r2, [r3, #0]
 8109c5a:	687b      	ldr	r3, [r7, #4]
 8109c5c:	601a      	str	r2, [r3, #0]
 8109c5e:	e003      	b.n	8109c68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8109c60:	68fb      	ldr	r3, [r7, #12]
 8109c62:	681a      	ldr	r2, [r3, #0]
 8109c64:	687b      	ldr	r3, [r7, #4]
 8109c66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8109c68:	68fa      	ldr	r2, [r7, #12]
 8109c6a:	687b      	ldr	r3, [r7, #4]
 8109c6c:	429a      	cmp	r2, r3
 8109c6e:	d002      	beq.n	8109c76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8109c70:	68fb      	ldr	r3, [r7, #12]
 8109c72:	687a      	ldr	r2, [r7, #4]
 8109c74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109c76:	bf00      	nop
 8109c78:	3714      	adds	r7, #20
 8109c7a:	46bd      	mov	sp, r7
 8109c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c80:	4770      	bx	lr
 8109c82:	bf00      	nop
 8109c84:	100044cc 	.word	0x100044cc
 8109c88:	100044d4 	.word	0x100044d4

08109c8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8109c8c:	b480      	push	{r7}
 8109c8e:	b083      	sub	sp, #12
 8109c90:	af00      	add	r7, sp, #0
 8109c92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109c94:	687b      	ldr	r3, [r7, #4]
 8109c96:	f103 0208 	add.w	r2, r3, #8
 8109c9a:	687b      	ldr	r3, [r7, #4]
 8109c9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8109c9e:	687b      	ldr	r3, [r7, #4]
 8109ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8109ca4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109ca6:	687b      	ldr	r3, [r7, #4]
 8109ca8:	f103 0208 	add.w	r2, r3, #8
 8109cac:	687b      	ldr	r3, [r7, #4]
 8109cae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8109cb0:	687b      	ldr	r3, [r7, #4]
 8109cb2:	f103 0208 	add.w	r2, r3, #8
 8109cb6:	687b      	ldr	r3, [r7, #4]
 8109cb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8109cba:	687b      	ldr	r3, [r7, #4]
 8109cbc:	2200      	movs	r2, #0
 8109cbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8109cc0:	bf00      	nop
 8109cc2:	370c      	adds	r7, #12
 8109cc4:	46bd      	mov	sp, r7
 8109cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cca:	4770      	bx	lr

08109ccc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8109ccc:	b480      	push	{r7}
 8109cce:	b083      	sub	sp, #12
 8109cd0:	af00      	add	r7, sp, #0
 8109cd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8109cd4:	687b      	ldr	r3, [r7, #4]
 8109cd6:	2200      	movs	r2, #0
 8109cd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8109cda:	bf00      	nop
 8109cdc:	370c      	adds	r7, #12
 8109cde:	46bd      	mov	sp, r7
 8109ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ce4:	4770      	bx	lr

08109ce6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109ce6:	b480      	push	{r7}
 8109ce8:	b085      	sub	sp, #20
 8109cea:	af00      	add	r7, sp, #0
 8109cec:	6078      	str	r0, [r7, #4]
 8109cee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8109cf0:	687b      	ldr	r3, [r7, #4]
 8109cf2:	685b      	ldr	r3, [r3, #4]
 8109cf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8109cf6:	683b      	ldr	r3, [r7, #0]
 8109cf8:	68fa      	ldr	r2, [r7, #12]
 8109cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8109cfc:	68fb      	ldr	r3, [r7, #12]
 8109cfe:	689a      	ldr	r2, [r3, #8]
 8109d00:	683b      	ldr	r3, [r7, #0]
 8109d02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8109d04:	68fb      	ldr	r3, [r7, #12]
 8109d06:	689b      	ldr	r3, [r3, #8]
 8109d08:	683a      	ldr	r2, [r7, #0]
 8109d0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8109d0c:	68fb      	ldr	r3, [r7, #12]
 8109d0e:	683a      	ldr	r2, [r7, #0]
 8109d10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8109d12:	683b      	ldr	r3, [r7, #0]
 8109d14:	687a      	ldr	r2, [r7, #4]
 8109d16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109d18:	687b      	ldr	r3, [r7, #4]
 8109d1a:	681b      	ldr	r3, [r3, #0]
 8109d1c:	1c5a      	adds	r2, r3, #1
 8109d1e:	687b      	ldr	r3, [r7, #4]
 8109d20:	601a      	str	r2, [r3, #0]
}
 8109d22:	bf00      	nop
 8109d24:	3714      	adds	r7, #20
 8109d26:	46bd      	mov	sp, r7
 8109d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d2c:	4770      	bx	lr

08109d2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8109d2e:	b480      	push	{r7}
 8109d30:	b085      	sub	sp, #20
 8109d32:	af00      	add	r7, sp, #0
 8109d34:	6078      	str	r0, [r7, #4]
 8109d36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8109d38:	683b      	ldr	r3, [r7, #0]
 8109d3a:	681b      	ldr	r3, [r3, #0]
 8109d3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8109d3e:	68bb      	ldr	r3, [r7, #8]
 8109d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109d44:	d103      	bne.n	8109d4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8109d46:	687b      	ldr	r3, [r7, #4]
 8109d48:	691b      	ldr	r3, [r3, #16]
 8109d4a:	60fb      	str	r3, [r7, #12]
 8109d4c:	e00c      	b.n	8109d68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8109d4e:	687b      	ldr	r3, [r7, #4]
 8109d50:	3308      	adds	r3, #8
 8109d52:	60fb      	str	r3, [r7, #12]
 8109d54:	e002      	b.n	8109d5c <vListInsert+0x2e>
 8109d56:	68fb      	ldr	r3, [r7, #12]
 8109d58:	685b      	ldr	r3, [r3, #4]
 8109d5a:	60fb      	str	r3, [r7, #12]
 8109d5c:	68fb      	ldr	r3, [r7, #12]
 8109d5e:	685b      	ldr	r3, [r3, #4]
 8109d60:	681b      	ldr	r3, [r3, #0]
 8109d62:	68ba      	ldr	r2, [r7, #8]
 8109d64:	429a      	cmp	r2, r3
 8109d66:	d2f6      	bcs.n	8109d56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8109d68:	68fb      	ldr	r3, [r7, #12]
 8109d6a:	685a      	ldr	r2, [r3, #4]
 8109d6c:	683b      	ldr	r3, [r7, #0]
 8109d6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8109d70:	683b      	ldr	r3, [r7, #0]
 8109d72:	685b      	ldr	r3, [r3, #4]
 8109d74:	683a      	ldr	r2, [r7, #0]
 8109d76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8109d78:	683b      	ldr	r3, [r7, #0]
 8109d7a:	68fa      	ldr	r2, [r7, #12]
 8109d7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8109d7e:	68fb      	ldr	r3, [r7, #12]
 8109d80:	683a      	ldr	r2, [r7, #0]
 8109d82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8109d84:	683b      	ldr	r3, [r7, #0]
 8109d86:	687a      	ldr	r2, [r7, #4]
 8109d88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8109d8a:	687b      	ldr	r3, [r7, #4]
 8109d8c:	681b      	ldr	r3, [r3, #0]
 8109d8e:	1c5a      	adds	r2, r3, #1
 8109d90:	687b      	ldr	r3, [r7, #4]
 8109d92:	601a      	str	r2, [r3, #0]
}
 8109d94:	bf00      	nop
 8109d96:	3714      	adds	r7, #20
 8109d98:	46bd      	mov	sp, r7
 8109d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d9e:	4770      	bx	lr

08109da0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8109da0:	b480      	push	{r7}
 8109da2:	b085      	sub	sp, #20
 8109da4:	af00      	add	r7, sp, #0
 8109da6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8109da8:	687b      	ldr	r3, [r7, #4]
 8109daa:	691b      	ldr	r3, [r3, #16]
 8109dac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8109dae:	687b      	ldr	r3, [r7, #4]
 8109db0:	685b      	ldr	r3, [r3, #4]
 8109db2:	687a      	ldr	r2, [r7, #4]
 8109db4:	6892      	ldr	r2, [r2, #8]
 8109db6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8109db8:	687b      	ldr	r3, [r7, #4]
 8109dba:	689b      	ldr	r3, [r3, #8]
 8109dbc:	687a      	ldr	r2, [r7, #4]
 8109dbe:	6852      	ldr	r2, [r2, #4]
 8109dc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8109dc2:	68fb      	ldr	r3, [r7, #12]
 8109dc4:	685b      	ldr	r3, [r3, #4]
 8109dc6:	687a      	ldr	r2, [r7, #4]
 8109dc8:	429a      	cmp	r2, r3
 8109dca:	d103      	bne.n	8109dd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8109dcc:	687b      	ldr	r3, [r7, #4]
 8109dce:	689a      	ldr	r2, [r3, #8]
 8109dd0:	68fb      	ldr	r3, [r7, #12]
 8109dd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	2200      	movs	r2, #0
 8109dd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8109dda:	68fb      	ldr	r3, [r7, #12]
 8109ddc:	681b      	ldr	r3, [r3, #0]
 8109dde:	1e5a      	subs	r2, r3, #1
 8109de0:	68fb      	ldr	r3, [r7, #12]
 8109de2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8109de4:	68fb      	ldr	r3, [r7, #12]
 8109de6:	681b      	ldr	r3, [r3, #0]
}
 8109de8:	4618      	mov	r0, r3
 8109dea:	3714      	adds	r7, #20
 8109dec:	46bd      	mov	sp, r7
 8109dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109df2:	4770      	bx	lr

08109df4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8109df4:	b480      	push	{r7}
 8109df6:	b085      	sub	sp, #20
 8109df8:	af00      	add	r7, sp, #0
 8109dfa:	60f8      	str	r0, [r7, #12]
 8109dfc:	60b9      	str	r1, [r7, #8]
 8109dfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8109e00:	68fb      	ldr	r3, [r7, #12]
 8109e02:	3b04      	subs	r3, #4
 8109e04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8109e06:	68fb      	ldr	r3, [r7, #12]
 8109e08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8109e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8109e0e:	68fb      	ldr	r3, [r7, #12]
 8109e10:	3b04      	subs	r3, #4
 8109e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8109e14:	68bb      	ldr	r3, [r7, #8]
 8109e16:	f023 0201 	bic.w	r2, r3, #1
 8109e1a:	68fb      	ldr	r3, [r7, #12]
 8109e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8109e1e:	68fb      	ldr	r3, [r7, #12]
 8109e20:	3b04      	subs	r3, #4
 8109e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8109e24:	4a0c      	ldr	r2, [pc, #48]	; (8109e58 <pxPortInitialiseStack+0x64>)
 8109e26:	68fb      	ldr	r3, [r7, #12]
 8109e28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8109e2a:	68fb      	ldr	r3, [r7, #12]
 8109e2c:	3b14      	subs	r3, #20
 8109e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8109e30:	687a      	ldr	r2, [r7, #4]
 8109e32:	68fb      	ldr	r3, [r7, #12]
 8109e34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8109e36:	68fb      	ldr	r3, [r7, #12]
 8109e38:	3b04      	subs	r3, #4
 8109e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8109e3c:	68fb      	ldr	r3, [r7, #12]
 8109e3e:	f06f 0202 	mvn.w	r2, #2
 8109e42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8109e44:	68fb      	ldr	r3, [r7, #12]
 8109e46:	3b20      	subs	r3, #32
 8109e48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8109e4a:	68fb      	ldr	r3, [r7, #12]
}
 8109e4c:	4618      	mov	r0, r3
 8109e4e:	3714      	adds	r7, #20
 8109e50:	46bd      	mov	sp, r7
 8109e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e56:	4770      	bx	lr
 8109e58:	08109e5d 	.word	0x08109e5d

08109e5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8109e5c:	b480      	push	{r7}
 8109e5e:	b085      	sub	sp, #20
 8109e60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8109e62:	2300      	movs	r3, #0
 8109e64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8109e66:	4b11      	ldr	r3, [pc, #68]	; (8109eac <prvTaskExitError+0x50>)
 8109e68:	681b      	ldr	r3, [r3, #0]
 8109e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109e6e:	d009      	beq.n	8109e84 <prvTaskExitError+0x28>
 8109e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e74:	f383 8811 	msr	BASEPRI, r3
 8109e78:	f3bf 8f6f 	isb	sy
 8109e7c:	f3bf 8f4f 	dsb	sy
 8109e80:	60fb      	str	r3, [r7, #12]
 8109e82:	e7fe      	b.n	8109e82 <prvTaskExitError+0x26>
 8109e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109e88:	f383 8811 	msr	BASEPRI, r3
 8109e8c:	f3bf 8f6f 	isb	sy
 8109e90:	f3bf 8f4f 	dsb	sy
 8109e94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8109e96:	bf00      	nop
 8109e98:	687b      	ldr	r3, [r7, #4]
 8109e9a:	2b00      	cmp	r3, #0
 8109e9c:	d0fc      	beq.n	8109e98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8109e9e:	bf00      	nop
 8109ea0:	3714      	adds	r7, #20
 8109ea2:	46bd      	mov	sp, r7
 8109ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ea8:	4770      	bx	lr
 8109eaa:	bf00      	nop
 8109eac:	1000000c 	.word	0x1000000c

08109eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8109eb0:	4b07      	ldr	r3, [pc, #28]	; (8109ed0 <pxCurrentTCBConst2>)
 8109eb2:	6819      	ldr	r1, [r3, #0]
 8109eb4:	6808      	ldr	r0, [r1, #0]
 8109eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109eba:	f380 8809 	msr	PSP, r0
 8109ebe:	f3bf 8f6f 	isb	sy
 8109ec2:	f04f 0000 	mov.w	r0, #0
 8109ec6:	f380 8811 	msr	BASEPRI, r0
 8109eca:	4770      	bx	lr
 8109ecc:	f3af 8000 	nop.w

08109ed0 <pxCurrentTCBConst2>:
 8109ed0:	100044ec 	.word	0x100044ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8109ed4:	bf00      	nop
 8109ed6:	bf00      	nop

08109ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8109ed8:	4808      	ldr	r0, [pc, #32]	; (8109efc <prvPortStartFirstTask+0x24>)
 8109eda:	6800      	ldr	r0, [r0, #0]
 8109edc:	6800      	ldr	r0, [r0, #0]
 8109ede:	f380 8808 	msr	MSP, r0
 8109ee2:	f04f 0000 	mov.w	r0, #0
 8109ee6:	f380 8814 	msr	CONTROL, r0
 8109eea:	b662      	cpsie	i
 8109eec:	b661      	cpsie	f
 8109eee:	f3bf 8f4f 	dsb	sy
 8109ef2:	f3bf 8f6f 	isb	sy
 8109ef6:	df00      	svc	0
 8109ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8109efa:	bf00      	nop
 8109efc:	e000ed08 	.word	0xe000ed08

08109f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8109f00:	b580      	push	{r7, lr}
 8109f02:	b086      	sub	sp, #24
 8109f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8109f06:	4b44      	ldr	r3, [pc, #272]	; (810a018 <xPortStartScheduler+0x118>)
 8109f08:	681b      	ldr	r3, [r3, #0]
 8109f0a:	4a44      	ldr	r2, [pc, #272]	; (810a01c <xPortStartScheduler+0x11c>)
 8109f0c:	4293      	cmp	r3, r2
 8109f0e:	d109      	bne.n	8109f24 <xPortStartScheduler+0x24>
 8109f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f14:	f383 8811 	msr	BASEPRI, r3
 8109f18:	f3bf 8f6f 	isb	sy
 8109f1c:	f3bf 8f4f 	dsb	sy
 8109f20:	613b      	str	r3, [r7, #16]
 8109f22:	e7fe      	b.n	8109f22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8109f24:	4b3c      	ldr	r3, [pc, #240]	; (810a018 <xPortStartScheduler+0x118>)
 8109f26:	681b      	ldr	r3, [r3, #0]
 8109f28:	4a3d      	ldr	r2, [pc, #244]	; (810a020 <xPortStartScheduler+0x120>)
 8109f2a:	4293      	cmp	r3, r2
 8109f2c:	d109      	bne.n	8109f42 <xPortStartScheduler+0x42>
 8109f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f32:	f383 8811 	msr	BASEPRI, r3
 8109f36:	f3bf 8f6f 	isb	sy
 8109f3a:	f3bf 8f4f 	dsb	sy
 8109f3e:	60fb      	str	r3, [r7, #12]
 8109f40:	e7fe      	b.n	8109f40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8109f42:	4b38      	ldr	r3, [pc, #224]	; (810a024 <xPortStartScheduler+0x124>)
 8109f44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8109f46:	697b      	ldr	r3, [r7, #20]
 8109f48:	781b      	ldrb	r3, [r3, #0]
 8109f4a:	b2db      	uxtb	r3, r3
 8109f4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8109f4e:	697b      	ldr	r3, [r7, #20]
 8109f50:	22ff      	movs	r2, #255	; 0xff
 8109f52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8109f54:	697b      	ldr	r3, [r7, #20]
 8109f56:	781b      	ldrb	r3, [r3, #0]
 8109f58:	b2db      	uxtb	r3, r3
 8109f5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8109f5c:	78fb      	ldrb	r3, [r7, #3]
 8109f5e:	b2db      	uxtb	r3, r3
 8109f60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8109f64:	b2da      	uxtb	r2, r3
 8109f66:	4b30      	ldr	r3, [pc, #192]	; (810a028 <xPortStartScheduler+0x128>)
 8109f68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8109f6a:	4b30      	ldr	r3, [pc, #192]	; (810a02c <xPortStartScheduler+0x12c>)
 8109f6c:	2207      	movs	r2, #7
 8109f6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109f70:	e009      	b.n	8109f86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8109f72:	4b2e      	ldr	r3, [pc, #184]	; (810a02c <xPortStartScheduler+0x12c>)
 8109f74:	681b      	ldr	r3, [r3, #0]
 8109f76:	3b01      	subs	r3, #1
 8109f78:	4a2c      	ldr	r2, [pc, #176]	; (810a02c <xPortStartScheduler+0x12c>)
 8109f7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8109f7c:	78fb      	ldrb	r3, [r7, #3]
 8109f7e:	b2db      	uxtb	r3, r3
 8109f80:	005b      	lsls	r3, r3, #1
 8109f82:	b2db      	uxtb	r3, r3
 8109f84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8109f86:	78fb      	ldrb	r3, [r7, #3]
 8109f88:	b2db      	uxtb	r3, r3
 8109f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109f8e:	2b80      	cmp	r3, #128	; 0x80
 8109f90:	d0ef      	beq.n	8109f72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8109f92:	4b26      	ldr	r3, [pc, #152]	; (810a02c <xPortStartScheduler+0x12c>)
 8109f94:	681b      	ldr	r3, [r3, #0]
 8109f96:	f1c3 0307 	rsb	r3, r3, #7
 8109f9a:	2b04      	cmp	r3, #4
 8109f9c:	d009      	beq.n	8109fb2 <xPortStartScheduler+0xb2>
 8109f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109fa2:	f383 8811 	msr	BASEPRI, r3
 8109fa6:	f3bf 8f6f 	isb	sy
 8109faa:	f3bf 8f4f 	dsb	sy
 8109fae:	60bb      	str	r3, [r7, #8]
 8109fb0:	e7fe      	b.n	8109fb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8109fb2:	4b1e      	ldr	r3, [pc, #120]	; (810a02c <xPortStartScheduler+0x12c>)
 8109fb4:	681b      	ldr	r3, [r3, #0]
 8109fb6:	021b      	lsls	r3, r3, #8
 8109fb8:	4a1c      	ldr	r2, [pc, #112]	; (810a02c <xPortStartScheduler+0x12c>)
 8109fba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8109fbc:	4b1b      	ldr	r3, [pc, #108]	; (810a02c <xPortStartScheduler+0x12c>)
 8109fbe:	681b      	ldr	r3, [r3, #0]
 8109fc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8109fc4:	4a19      	ldr	r2, [pc, #100]	; (810a02c <xPortStartScheduler+0x12c>)
 8109fc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8109fc8:	687b      	ldr	r3, [r7, #4]
 8109fca:	b2da      	uxtb	r2, r3
 8109fcc:	697b      	ldr	r3, [r7, #20]
 8109fce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8109fd0:	4b17      	ldr	r3, [pc, #92]	; (810a030 <xPortStartScheduler+0x130>)
 8109fd2:	681b      	ldr	r3, [r3, #0]
 8109fd4:	4a16      	ldr	r2, [pc, #88]	; (810a030 <xPortStartScheduler+0x130>)
 8109fd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8109fda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8109fdc:	4b14      	ldr	r3, [pc, #80]	; (810a030 <xPortStartScheduler+0x130>)
 8109fde:	681b      	ldr	r3, [r3, #0]
 8109fe0:	4a13      	ldr	r2, [pc, #76]	; (810a030 <xPortStartScheduler+0x130>)
 8109fe2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8109fe6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8109fe8:	f000 f8d6 	bl	810a198 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8109fec:	4b11      	ldr	r3, [pc, #68]	; (810a034 <xPortStartScheduler+0x134>)
 8109fee:	2200      	movs	r2, #0
 8109ff0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8109ff2:	f000 f8f5 	bl	810a1e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8109ff6:	4b10      	ldr	r3, [pc, #64]	; (810a038 <xPortStartScheduler+0x138>)
 8109ff8:	681b      	ldr	r3, [r3, #0]
 8109ffa:	4a0f      	ldr	r2, [pc, #60]	; (810a038 <xPortStartScheduler+0x138>)
 8109ffc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 810a000:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810a002:	f7ff ff69 	bl	8109ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810a006:	f001 f9af 	bl	810b368 <vTaskSwitchContext>
	prvTaskExitError();
 810a00a:	f7ff ff27 	bl	8109e5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810a00e:	2300      	movs	r3, #0
}
 810a010:	4618      	mov	r0, r3
 810a012:	3718      	adds	r7, #24
 810a014:	46bd      	mov	sp, r7
 810a016:	bd80      	pop	{r7, pc}
 810a018:	e000ed00 	.word	0xe000ed00
 810a01c:	410fc271 	.word	0x410fc271
 810a020:	410fc270 	.word	0x410fc270
 810a024:	e000e400 	.word	0xe000e400
 810a028:	100044e4 	.word	0x100044e4
 810a02c:	100044e8 	.word	0x100044e8
 810a030:	e000ed20 	.word	0xe000ed20
 810a034:	1000000c 	.word	0x1000000c
 810a038:	e000ef34 	.word	0xe000ef34

0810a03c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810a03c:	b480      	push	{r7}
 810a03e:	b083      	sub	sp, #12
 810a040:	af00      	add	r7, sp, #0
 810a042:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a046:	f383 8811 	msr	BASEPRI, r3
 810a04a:	f3bf 8f6f 	isb	sy
 810a04e:	f3bf 8f4f 	dsb	sy
 810a052:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810a054:	4b0e      	ldr	r3, [pc, #56]	; (810a090 <vPortEnterCritical+0x54>)
 810a056:	681b      	ldr	r3, [r3, #0]
 810a058:	3301      	adds	r3, #1
 810a05a:	4a0d      	ldr	r2, [pc, #52]	; (810a090 <vPortEnterCritical+0x54>)
 810a05c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810a05e:	4b0c      	ldr	r3, [pc, #48]	; (810a090 <vPortEnterCritical+0x54>)
 810a060:	681b      	ldr	r3, [r3, #0]
 810a062:	2b01      	cmp	r3, #1
 810a064:	d10e      	bne.n	810a084 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810a066:	4b0b      	ldr	r3, [pc, #44]	; (810a094 <vPortEnterCritical+0x58>)
 810a068:	681b      	ldr	r3, [r3, #0]
 810a06a:	b2db      	uxtb	r3, r3
 810a06c:	2b00      	cmp	r3, #0
 810a06e:	d009      	beq.n	810a084 <vPortEnterCritical+0x48>
 810a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a074:	f383 8811 	msr	BASEPRI, r3
 810a078:	f3bf 8f6f 	isb	sy
 810a07c:	f3bf 8f4f 	dsb	sy
 810a080:	603b      	str	r3, [r7, #0]
 810a082:	e7fe      	b.n	810a082 <vPortEnterCritical+0x46>
	}
}
 810a084:	bf00      	nop
 810a086:	370c      	adds	r7, #12
 810a088:	46bd      	mov	sp, r7
 810a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a08e:	4770      	bx	lr
 810a090:	1000000c 	.word	0x1000000c
 810a094:	e000ed04 	.word	0xe000ed04

0810a098 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810a098:	b480      	push	{r7}
 810a09a:	b083      	sub	sp, #12
 810a09c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810a09e:	4b11      	ldr	r3, [pc, #68]	; (810a0e4 <vPortExitCritical+0x4c>)
 810a0a0:	681b      	ldr	r3, [r3, #0]
 810a0a2:	2b00      	cmp	r3, #0
 810a0a4:	d109      	bne.n	810a0ba <vPortExitCritical+0x22>
 810a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0aa:	f383 8811 	msr	BASEPRI, r3
 810a0ae:	f3bf 8f6f 	isb	sy
 810a0b2:	f3bf 8f4f 	dsb	sy
 810a0b6:	607b      	str	r3, [r7, #4]
 810a0b8:	e7fe      	b.n	810a0b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810a0ba:	4b0a      	ldr	r3, [pc, #40]	; (810a0e4 <vPortExitCritical+0x4c>)
 810a0bc:	681b      	ldr	r3, [r3, #0]
 810a0be:	3b01      	subs	r3, #1
 810a0c0:	4a08      	ldr	r2, [pc, #32]	; (810a0e4 <vPortExitCritical+0x4c>)
 810a0c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810a0c4:	4b07      	ldr	r3, [pc, #28]	; (810a0e4 <vPortExitCritical+0x4c>)
 810a0c6:	681b      	ldr	r3, [r3, #0]
 810a0c8:	2b00      	cmp	r3, #0
 810a0ca:	d104      	bne.n	810a0d6 <vPortExitCritical+0x3e>
 810a0cc:	2300      	movs	r3, #0
 810a0ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810a0d0:	683b      	ldr	r3, [r7, #0]
 810a0d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 810a0d6:	bf00      	nop
 810a0d8:	370c      	adds	r7, #12
 810a0da:	46bd      	mov	sp, r7
 810a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0e0:	4770      	bx	lr
 810a0e2:	bf00      	nop
 810a0e4:	1000000c 	.word	0x1000000c
	...

0810a0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810a0f0:	f3ef 8009 	mrs	r0, PSP
 810a0f4:	f3bf 8f6f 	isb	sy
 810a0f8:	4b15      	ldr	r3, [pc, #84]	; (810a150 <pxCurrentTCBConst>)
 810a0fa:	681a      	ldr	r2, [r3, #0]
 810a0fc:	f01e 0f10 	tst.w	lr, #16
 810a100:	bf08      	it	eq
 810a102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810a106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a10a:	6010      	str	r0, [r2, #0]
 810a10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810a110:	f04f 0050 	mov.w	r0, #80	; 0x50
 810a114:	f380 8811 	msr	BASEPRI, r0
 810a118:	f3bf 8f4f 	dsb	sy
 810a11c:	f3bf 8f6f 	isb	sy
 810a120:	f001 f922 	bl	810b368 <vTaskSwitchContext>
 810a124:	f04f 0000 	mov.w	r0, #0
 810a128:	f380 8811 	msr	BASEPRI, r0
 810a12c:	bc09      	pop	{r0, r3}
 810a12e:	6819      	ldr	r1, [r3, #0]
 810a130:	6808      	ldr	r0, [r1, #0]
 810a132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a136:	f01e 0f10 	tst.w	lr, #16
 810a13a:	bf08      	it	eq
 810a13c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810a140:	f380 8809 	msr	PSP, r0
 810a144:	f3bf 8f6f 	isb	sy
 810a148:	4770      	bx	lr
 810a14a:	bf00      	nop
 810a14c:	f3af 8000 	nop.w

0810a150 <pxCurrentTCBConst>:
 810a150:	100044ec 	.word	0x100044ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810a154:	bf00      	nop
 810a156:	bf00      	nop

0810a158 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810a158:	b580      	push	{r7, lr}
 810a15a:	b082      	sub	sp, #8
 810a15c:	af00      	add	r7, sp, #0
	__asm volatile
 810a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a162:	f383 8811 	msr	BASEPRI, r3
 810a166:	f3bf 8f6f 	isb	sy
 810a16a:	f3bf 8f4f 	dsb	sy
 810a16e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810a170:	f001 f842 	bl	810b1f8 <xTaskIncrementTick>
 810a174:	4603      	mov	r3, r0
 810a176:	2b00      	cmp	r3, #0
 810a178:	d003      	beq.n	810a182 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810a17a:	4b06      	ldr	r3, [pc, #24]	; (810a194 <SysTick_Handler+0x3c>)
 810a17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a180:	601a      	str	r2, [r3, #0]
 810a182:	2300      	movs	r3, #0
 810a184:	603b      	str	r3, [r7, #0]
	__asm volatile
 810a186:	683b      	ldr	r3, [r7, #0]
 810a188:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 810a18c:	bf00      	nop
 810a18e:	3708      	adds	r7, #8
 810a190:	46bd      	mov	sp, r7
 810a192:	bd80      	pop	{r7, pc}
 810a194:	e000ed04 	.word	0xe000ed04

0810a198 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810a198:	b480      	push	{r7}
 810a19a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810a19c:	4b0b      	ldr	r3, [pc, #44]	; (810a1cc <vPortSetupTimerInterrupt+0x34>)
 810a19e:	2200      	movs	r2, #0
 810a1a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810a1a2:	4b0b      	ldr	r3, [pc, #44]	; (810a1d0 <vPortSetupTimerInterrupt+0x38>)
 810a1a4:	2200      	movs	r2, #0
 810a1a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810a1a8:	4b0a      	ldr	r3, [pc, #40]	; (810a1d4 <vPortSetupTimerInterrupt+0x3c>)
 810a1aa:	681b      	ldr	r3, [r3, #0]
 810a1ac:	4a0a      	ldr	r2, [pc, #40]	; (810a1d8 <vPortSetupTimerInterrupt+0x40>)
 810a1ae:	fba2 2303 	umull	r2, r3, r2, r3
 810a1b2:	099b      	lsrs	r3, r3, #6
 810a1b4:	4a09      	ldr	r2, [pc, #36]	; (810a1dc <vPortSetupTimerInterrupt+0x44>)
 810a1b6:	3b01      	subs	r3, #1
 810a1b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810a1ba:	4b04      	ldr	r3, [pc, #16]	; (810a1cc <vPortSetupTimerInterrupt+0x34>)
 810a1bc:	2207      	movs	r2, #7
 810a1be:	601a      	str	r2, [r3, #0]
}
 810a1c0:	bf00      	nop
 810a1c2:	46bd      	mov	sp, r7
 810a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1c8:	4770      	bx	lr
 810a1ca:	bf00      	nop
 810a1cc:	e000e010 	.word	0xe000e010
 810a1d0:	e000e018 	.word	0xe000e018
 810a1d4:	10000004 	.word	0x10000004
 810a1d8:	10624dd3 	.word	0x10624dd3
 810a1dc:	e000e014 	.word	0xe000e014

0810a1e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810a1e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 810a1f0 <vPortEnableVFP+0x10>
 810a1e4:	6801      	ldr	r1, [r0, #0]
 810a1e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810a1ea:	6001      	str	r1, [r0, #0]
 810a1ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810a1ee:	bf00      	nop
 810a1f0:	e000ed88 	.word	0xe000ed88

0810a1f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810a1f4:	b480      	push	{r7}
 810a1f6:	b085      	sub	sp, #20
 810a1f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810a1fa:	f3ef 8305 	mrs	r3, IPSR
 810a1fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810a200:	68fb      	ldr	r3, [r7, #12]
 810a202:	2b0f      	cmp	r3, #15
 810a204:	d913      	bls.n	810a22e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810a206:	4a16      	ldr	r2, [pc, #88]	; (810a260 <vPortValidateInterruptPriority+0x6c>)
 810a208:	68fb      	ldr	r3, [r7, #12]
 810a20a:	4413      	add	r3, r2
 810a20c:	781b      	ldrb	r3, [r3, #0]
 810a20e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810a210:	4b14      	ldr	r3, [pc, #80]	; (810a264 <vPortValidateInterruptPriority+0x70>)
 810a212:	781b      	ldrb	r3, [r3, #0]
 810a214:	7afa      	ldrb	r2, [r7, #11]
 810a216:	429a      	cmp	r2, r3
 810a218:	d209      	bcs.n	810a22e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 810a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a21e:	f383 8811 	msr	BASEPRI, r3
 810a222:	f3bf 8f6f 	isb	sy
 810a226:	f3bf 8f4f 	dsb	sy
 810a22a:	607b      	str	r3, [r7, #4]
 810a22c:	e7fe      	b.n	810a22c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810a22e:	4b0e      	ldr	r3, [pc, #56]	; (810a268 <vPortValidateInterruptPriority+0x74>)
 810a230:	681b      	ldr	r3, [r3, #0]
 810a232:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810a236:	4b0d      	ldr	r3, [pc, #52]	; (810a26c <vPortValidateInterruptPriority+0x78>)
 810a238:	681b      	ldr	r3, [r3, #0]
 810a23a:	429a      	cmp	r2, r3
 810a23c:	d909      	bls.n	810a252 <vPortValidateInterruptPriority+0x5e>
 810a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a242:	f383 8811 	msr	BASEPRI, r3
 810a246:	f3bf 8f6f 	isb	sy
 810a24a:	f3bf 8f4f 	dsb	sy
 810a24e:	603b      	str	r3, [r7, #0]
 810a250:	e7fe      	b.n	810a250 <vPortValidateInterruptPriority+0x5c>
	}
 810a252:	bf00      	nop
 810a254:	3714      	adds	r7, #20
 810a256:	46bd      	mov	sp, r7
 810a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a25c:	4770      	bx	lr
 810a25e:	bf00      	nop
 810a260:	e000e3f0 	.word	0xe000e3f0
 810a264:	100044e4 	.word	0x100044e4
 810a268:	e000ed0c 	.word	0xe000ed0c
 810a26c:	100044e8 	.word	0x100044e8

0810a270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810a270:	b580      	push	{r7, lr}
 810a272:	b084      	sub	sp, #16
 810a274:	af00      	add	r7, sp, #0
 810a276:	6078      	str	r0, [r7, #4]
 810a278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810a27a:	687b      	ldr	r3, [r7, #4]
 810a27c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810a27e:	68fb      	ldr	r3, [r7, #12]
 810a280:	2b00      	cmp	r3, #0
 810a282:	d109      	bne.n	810a298 <xQueueGenericReset+0x28>
 810a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a288:	f383 8811 	msr	BASEPRI, r3
 810a28c:	f3bf 8f6f 	isb	sy
 810a290:	f3bf 8f4f 	dsb	sy
 810a294:	60bb      	str	r3, [r7, #8]
 810a296:	e7fe      	b.n	810a296 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 810a298:	f7ff fed0 	bl	810a03c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810a29c:	68fb      	ldr	r3, [r7, #12]
 810a29e:	681a      	ldr	r2, [r3, #0]
 810a2a0:	68fb      	ldr	r3, [r7, #12]
 810a2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a2a4:	68f9      	ldr	r1, [r7, #12]
 810a2a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810a2a8:	fb01 f303 	mul.w	r3, r1, r3
 810a2ac:	441a      	add	r2, r3
 810a2ae:	68fb      	ldr	r3, [r7, #12]
 810a2b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810a2b2:	68fb      	ldr	r3, [r7, #12]
 810a2b4:	2200      	movs	r2, #0
 810a2b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810a2b8:	68fb      	ldr	r3, [r7, #12]
 810a2ba:	681a      	ldr	r2, [r3, #0]
 810a2bc:	68fb      	ldr	r3, [r7, #12]
 810a2be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810a2c0:	68fb      	ldr	r3, [r7, #12]
 810a2c2:	681a      	ldr	r2, [r3, #0]
 810a2c4:	68fb      	ldr	r3, [r7, #12]
 810a2c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a2c8:	3b01      	subs	r3, #1
 810a2ca:	68f9      	ldr	r1, [r7, #12]
 810a2cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810a2ce:	fb01 f303 	mul.w	r3, r1, r3
 810a2d2:	441a      	add	r2, r3
 810a2d4:	68fb      	ldr	r3, [r7, #12]
 810a2d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810a2d8:	68fb      	ldr	r3, [r7, #12]
 810a2da:	22ff      	movs	r2, #255	; 0xff
 810a2dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810a2e0:	68fb      	ldr	r3, [r7, #12]
 810a2e2:	22ff      	movs	r2, #255	; 0xff
 810a2e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 810a2e8:	683b      	ldr	r3, [r7, #0]
 810a2ea:	2b00      	cmp	r3, #0
 810a2ec:	d114      	bne.n	810a318 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a2ee:	68fb      	ldr	r3, [r7, #12]
 810a2f0:	691b      	ldr	r3, [r3, #16]
 810a2f2:	2b00      	cmp	r3, #0
 810a2f4:	d01a      	beq.n	810a32c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a2f6:	68fb      	ldr	r3, [r7, #12]
 810a2f8:	3310      	adds	r3, #16
 810a2fa:	4618      	mov	r0, r3
 810a2fc:	f001 f8de 	bl	810b4bc <xTaskRemoveFromEventList>
 810a300:	4603      	mov	r3, r0
 810a302:	2b00      	cmp	r3, #0
 810a304:	d012      	beq.n	810a32c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810a306:	4b0d      	ldr	r3, [pc, #52]	; (810a33c <xQueueGenericReset+0xcc>)
 810a308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a30c:	601a      	str	r2, [r3, #0]
 810a30e:	f3bf 8f4f 	dsb	sy
 810a312:	f3bf 8f6f 	isb	sy
 810a316:	e009      	b.n	810a32c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810a318:	68fb      	ldr	r3, [r7, #12]
 810a31a:	3310      	adds	r3, #16
 810a31c:	4618      	mov	r0, r3
 810a31e:	f7ff fcb5 	bl	8109c8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810a322:	68fb      	ldr	r3, [r7, #12]
 810a324:	3324      	adds	r3, #36	; 0x24
 810a326:	4618      	mov	r0, r3
 810a328:	f7ff fcb0 	bl	8109c8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810a32c:	f7ff feb4 	bl	810a098 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810a330:	2301      	movs	r3, #1
}
 810a332:	4618      	mov	r0, r3
 810a334:	3710      	adds	r7, #16
 810a336:	46bd      	mov	sp, r7
 810a338:	bd80      	pop	{r7, pc}
 810a33a:	bf00      	nop
 810a33c:	e000ed04 	.word	0xe000ed04

0810a340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810a340:	b580      	push	{r7, lr}
 810a342:	b08e      	sub	sp, #56	; 0x38
 810a344:	af02      	add	r7, sp, #8
 810a346:	60f8      	str	r0, [r7, #12]
 810a348:	60b9      	str	r1, [r7, #8]
 810a34a:	607a      	str	r2, [r7, #4]
 810a34c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810a34e:	68fb      	ldr	r3, [r7, #12]
 810a350:	2b00      	cmp	r3, #0
 810a352:	d109      	bne.n	810a368 <xQueueGenericCreateStatic+0x28>
 810a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a358:	f383 8811 	msr	BASEPRI, r3
 810a35c:	f3bf 8f6f 	isb	sy
 810a360:	f3bf 8f4f 	dsb	sy
 810a364:	62bb      	str	r3, [r7, #40]	; 0x28
 810a366:	e7fe      	b.n	810a366 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810a368:	683b      	ldr	r3, [r7, #0]
 810a36a:	2b00      	cmp	r3, #0
 810a36c:	d109      	bne.n	810a382 <xQueueGenericCreateStatic+0x42>
 810a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a372:	f383 8811 	msr	BASEPRI, r3
 810a376:	f3bf 8f6f 	isb	sy
 810a37a:	f3bf 8f4f 	dsb	sy
 810a37e:	627b      	str	r3, [r7, #36]	; 0x24
 810a380:	e7fe      	b.n	810a380 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810a382:	687b      	ldr	r3, [r7, #4]
 810a384:	2b00      	cmp	r3, #0
 810a386:	d002      	beq.n	810a38e <xQueueGenericCreateStatic+0x4e>
 810a388:	68bb      	ldr	r3, [r7, #8]
 810a38a:	2b00      	cmp	r3, #0
 810a38c:	d001      	beq.n	810a392 <xQueueGenericCreateStatic+0x52>
 810a38e:	2301      	movs	r3, #1
 810a390:	e000      	b.n	810a394 <xQueueGenericCreateStatic+0x54>
 810a392:	2300      	movs	r3, #0
 810a394:	2b00      	cmp	r3, #0
 810a396:	d109      	bne.n	810a3ac <xQueueGenericCreateStatic+0x6c>
 810a398:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a39c:	f383 8811 	msr	BASEPRI, r3
 810a3a0:	f3bf 8f6f 	isb	sy
 810a3a4:	f3bf 8f4f 	dsb	sy
 810a3a8:	623b      	str	r3, [r7, #32]
 810a3aa:	e7fe      	b.n	810a3aa <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810a3ac:	687b      	ldr	r3, [r7, #4]
 810a3ae:	2b00      	cmp	r3, #0
 810a3b0:	d102      	bne.n	810a3b8 <xQueueGenericCreateStatic+0x78>
 810a3b2:	68bb      	ldr	r3, [r7, #8]
 810a3b4:	2b00      	cmp	r3, #0
 810a3b6:	d101      	bne.n	810a3bc <xQueueGenericCreateStatic+0x7c>
 810a3b8:	2301      	movs	r3, #1
 810a3ba:	e000      	b.n	810a3be <xQueueGenericCreateStatic+0x7e>
 810a3bc:	2300      	movs	r3, #0
 810a3be:	2b00      	cmp	r3, #0
 810a3c0:	d109      	bne.n	810a3d6 <xQueueGenericCreateStatic+0x96>
 810a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a3c6:	f383 8811 	msr	BASEPRI, r3
 810a3ca:	f3bf 8f6f 	isb	sy
 810a3ce:	f3bf 8f4f 	dsb	sy
 810a3d2:	61fb      	str	r3, [r7, #28]
 810a3d4:	e7fe      	b.n	810a3d4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810a3d6:	2350      	movs	r3, #80	; 0x50
 810a3d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810a3da:	697b      	ldr	r3, [r7, #20]
 810a3dc:	2b50      	cmp	r3, #80	; 0x50
 810a3de:	d009      	beq.n	810a3f4 <xQueueGenericCreateStatic+0xb4>
 810a3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a3e4:	f383 8811 	msr	BASEPRI, r3
 810a3e8:	f3bf 8f6f 	isb	sy
 810a3ec:	f3bf 8f4f 	dsb	sy
 810a3f0:	61bb      	str	r3, [r7, #24]
 810a3f2:	e7fe      	b.n	810a3f2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810a3f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810a3f6:	683b      	ldr	r3, [r7, #0]
 810a3f8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 810a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a3fc:	2b00      	cmp	r3, #0
 810a3fe:	d00d      	beq.n	810a41c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a402:	2201      	movs	r2, #1
 810a404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810a408:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 810a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a40e:	9300      	str	r3, [sp, #0]
 810a410:	4613      	mov	r3, r2
 810a412:	687a      	ldr	r2, [r7, #4]
 810a414:	68b9      	ldr	r1, [r7, #8]
 810a416:	68f8      	ldr	r0, [r7, #12]
 810a418:	f000 f805 	bl	810a426 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810a41e:	4618      	mov	r0, r3
 810a420:	3730      	adds	r7, #48	; 0x30
 810a422:	46bd      	mov	sp, r7
 810a424:	bd80      	pop	{r7, pc}

0810a426 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810a426:	b580      	push	{r7, lr}
 810a428:	b084      	sub	sp, #16
 810a42a:	af00      	add	r7, sp, #0
 810a42c:	60f8      	str	r0, [r7, #12]
 810a42e:	60b9      	str	r1, [r7, #8]
 810a430:	607a      	str	r2, [r7, #4]
 810a432:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810a434:	68bb      	ldr	r3, [r7, #8]
 810a436:	2b00      	cmp	r3, #0
 810a438:	d103      	bne.n	810a442 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810a43a:	69bb      	ldr	r3, [r7, #24]
 810a43c:	69ba      	ldr	r2, [r7, #24]
 810a43e:	601a      	str	r2, [r3, #0]
 810a440:	e002      	b.n	810a448 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810a442:	69bb      	ldr	r3, [r7, #24]
 810a444:	687a      	ldr	r2, [r7, #4]
 810a446:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810a448:	69bb      	ldr	r3, [r7, #24]
 810a44a:	68fa      	ldr	r2, [r7, #12]
 810a44c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810a44e:	69bb      	ldr	r3, [r7, #24]
 810a450:	68ba      	ldr	r2, [r7, #8]
 810a452:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810a454:	2101      	movs	r1, #1
 810a456:	69b8      	ldr	r0, [r7, #24]
 810a458:	f7ff ff0a 	bl	810a270 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810a45c:	69bb      	ldr	r3, [r7, #24]
 810a45e:	78fa      	ldrb	r2, [r7, #3]
 810a460:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810a464:	bf00      	nop
 810a466:	3710      	adds	r7, #16
 810a468:	46bd      	mov	sp, r7
 810a46a:	bd80      	pop	{r7, pc}

0810a46c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810a46c:	b580      	push	{r7, lr}
 810a46e:	b08e      	sub	sp, #56	; 0x38
 810a470:	af00      	add	r7, sp, #0
 810a472:	60f8      	str	r0, [r7, #12]
 810a474:	60b9      	str	r1, [r7, #8]
 810a476:	607a      	str	r2, [r7, #4]
 810a478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810a47a:	2300      	movs	r3, #0
 810a47c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810a47e:	68fb      	ldr	r3, [r7, #12]
 810a480:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810a482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a484:	2b00      	cmp	r3, #0
 810a486:	d109      	bne.n	810a49c <xQueueGenericSend+0x30>
 810a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a48c:	f383 8811 	msr	BASEPRI, r3
 810a490:	f3bf 8f6f 	isb	sy
 810a494:	f3bf 8f4f 	dsb	sy
 810a498:	62bb      	str	r3, [r7, #40]	; 0x28
 810a49a:	e7fe      	b.n	810a49a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a49c:	68bb      	ldr	r3, [r7, #8]
 810a49e:	2b00      	cmp	r3, #0
 810a4a0:	d103      	bne.n	810a4aa <xQueueGenericSend+0x3e>
 810a4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a4a6:	2b00      	cmp	r3, #0
 810a4a8:	d101      	bne.n	810a4ae <xQueueGenericSend+0x42>
 810a4aa:	2301      	movs	r3, #1
 810a4ac:	e000      	b.n	810a4b0 <xQueueGenericSend+0x44>
 810a4ae:	2300      	movs	r3, #0
 810a4b0:	2b00      	cmp	r3, #0
 810a4b2:	d109      	bne.n	810a4c8 <xQueueGenericSend+0x5c>
 810a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a4b8:	f383 8811 	msr	BASEPRI, r3
 810a4bc:	f3bf 8f6f 	isb	sy
 810a4c0:	f3bf 8f4f 	dsb	sy
 810a4c4:	627b      	str	r3, [r7, #36]	; 0x24
 810a4c6:	e7fe      	b.n	810a4c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810a4c8:	683b      	ldr	r3, [r7, #0]
 810a4ca:	2b02      	cmp	r3, #2
 810a4cc:	d103      	bne.n	810a4d6 <xQueueGenericSend+0x6a>
 810a4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a4d2:	2b01      	cmp	r3, #1
 810a4d4:	d101      	bne.n	810a4da <xQueueGenericSend+0x6e>
 810a4d6:	2301      	movs	r3, #1
 810a4d8:	e000      	b.n	810a4dc <xQueueGenericSend+0x70>
 810a4da:	2300      	movs	r3, #0
 810a4dc:	2b00      	cmp	r3, #0
 810a4de:	d109      	bne.n	810a4f4 <xQueueGenericSend+0x88>
 810a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a4e4:	f383 8811 	msr	BASEPRI, r3
 810a4e8:	f3bf 8f6f 	isb	sy
 810a4ec:	f3bf 8f4f 	dsb	sy
 810a4f0:	623b      	str	r3, [r7, #32]
 810a4f2:	e7fe      	b.n	810a4f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810a4f4:	f001 f998 	bl	810b828 <xTaskGetSchedulerState>
 810a4f8:	4603      	mov	r3, r0
 810a4fa:	2b00      	cmp	r3, #0
 810a4fc:	d102      	bne.n	810a504 <xQueueGenericSend+0x98>
 810a4fe:	687b      	ldr	r3, [r7, #4]
 810a500:	2b00      	cmp	r3, #0
 810a502:	d101      	bne.n	810a508 <xQueueGenericSend+0x9c>
 810a504:	2301      	movs	r3, #1
 810a506:	e000      	b.n	810a50a <xQueueGenericSend+0x9e>
 810a508:	2300      	movs	r3, #0
 810a50a:	2b00      	cmp	r3, #0
 810a50c:	d109      	bne.n	810a522 <xQueueGenericSend+0xb6>
 810a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a512:	f383 8811 	msr	BASEPRI, r3
 810a516:	f3bf 8f6f 	isb	sy
 810a51a:	f3bf 8f4f 	dsb	sy
 810a51e:	61fb      	str	r3, [r7, #28]
 810a520:	e7fe      	b.n	810a520 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810a522:	f7ff fd8b 	bl	810a03c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a52e:	429a      	cmp	r2, r3
 810a530:	d302      	bcc.n	810a538 <xQueueGenericSend+0xcc>
 810a532:	683b      	ldr	r3, [r7, #0]
 810a534:	2b02      	cmp	r3, #2
 810a536:	d129      	bne.n	810a58c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810a538:	683a      	ldr	r2, [r7, #0]
 810a53a:	68b9      	ldr	r1, [r7, #8]
 810a53c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a53e:	f000 f9ff 	bl	810a940 <prvCopyDataToQueue>
 810a542:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a548:	2b00      	cmp	r3, #0
 810a54a:	d010      	beq.n	810a56e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a54e:	3324      	adds	r3, #36	; 0x24
 810a550:	4618      	mov	r0, r3
 810a552:	f000 ffb3 	bl	810b4bc <xTaskRemoveFromEventList>
 810a556:	4603      	mov	r3, r0
 810a558:	2b00      	cmp	r3, #0
 810a55a:	d013      	beq.n	810a584 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810a55c:	4b3f      	ldr	r3, [pc, #252]	; (810a65c <xQueueGenericSend+0x1f0>)
 810a55e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a562:	601a      	str	r2, [r3, #0]
 810a564:	f3bf 8f4f 	dsb	sy
 810a568:	f3bf 8f6f 	isb	sy
 810a56c:	e00a      	b.n	810a584 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810a56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a570:	2b00      	cmp	r3, #0
 810a572:	d007      	beq.n	810a584 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810a574:	4b39      	ldr	r3, [pc, #228]	; (810a65c <xQueueGenericSend+0x1f0>)
 810a576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a57a:	601a      	str	r2, [r3, #0]
 810a57c:	f3bf 8f4f 	dsb	sy
 810a580:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810a584:	f7ff fd88 	bl	810a098 <vPortExitCritical>
				return pdPASS;
 810a588:	2301      	movs	r3, #1
 810a58a:	e063      	b.n	810a654 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a58c:	687b      	ldr	r3, [r7, #4]
 810a58e:	2b00      	cmp	r3, #0
 810a590:	d103      	bne.n	810a59a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810a592:	f7ff fd81 	bl	810a098 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810a596:	2300      	movs	r3, #0
 810a598:	e05c      	b.n	810a654 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a59a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810a59c:	2b00      	cmp	r3, #0
 810a59e:	d106      	bne.n	810a5ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a5a0:	f107 0314 	add.w	r3, r7, #20
 810a5a4:	4618      	mov	r0, r3
 810a5a6:	f000 ffeb 	bl	810b580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a5aa:	2301      	movs	r3, #1
 810a5ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a5ae:	f7ff fd73 	bl	810a098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a5b2:	f000 fd67 	bl	810b084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a5b6:	f7ff fd41 	bl	810a03c <vPortEnterCritical>
 810a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a5bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a5c0:	b25b      	sxtb	r3, r3
 810a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a5c6:	d103      	bne.n	810a5d0 <xQueueGenericSend+0x164>
 810a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a5ca:	2200      	movs	r2, #0
 810a5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a5d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a5d6:	b25b      	sxtb	r3, r3
 810a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a5dc:	d103      	bne.n	810a5e6 <xQueueGenericSend+0x17a>
 810a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a5e0:	2200      	movs	r2, #0
 810a5e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a5e6:	f7ff fd57 	bl	810a098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a5ea:	1d3a      	adds	r2, r7, #4
 810a5ec:	f107 0314 	add.w	r3, r7, #20
 810a5f0:	4611      	mov	r1, r2
 810a5f2:	4618      	mov	r0, r3
 810a5f4:	f000 ffda 	bl	810b5ac <xTaskCheckForTimeOut>
 810a5f8:	4603      	mov	r3, r0
 810a5fa:	2b00      	cmp	r3, #0
 810a5fc:	d124      	bne.n	810a648 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810a5fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a600:	f000 fa96 	bl	810ab30 <prvIsQueueFull>
 810a604:	4603      	mov	r3, r0
 810a606:	2b00      	cmp	r3, #0
 810a608:	d018      	beq.n	810a63c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810a60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a60c:	3310      	adds	r3, #16
 810a60e:	687a      	ldr	r2, [r7, #4]
 810a610:	4611      	mov	r1, r2
 810a612:	4618      	mov	r0, r3
 810a614:	f000 ff04 	bl	810b420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810a618:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a61a:	f000 fa21 	bl	810aa60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810a61e:	f000 fd3f 	bl	810b0a0 <xTaskResumeAll>
 810a622:	4603      	mov	r3, r0
 810a624:	2b00      	cmp	r3, #0
 810a626:	f47f af7c 	bne.w	810a522 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 810a62a:	4b0c      	ldr	r3, [pc, #48]	; (810a65c <xQueueGenericSend+0x1f0>)
 810a62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a630:	601a      	str	r2, [r3, #0]
 810a632:	f3bf 8f4f 	dsb	sy
 810a636:	f3bf 8f6f 	isb	sy
 810a63a:	e772      	b.n	810a522 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810a63c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a63e:	f000 fa0f 	bl	810aa60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a642:	f000 fd2d 	bl	810b0a0 <xTaskResumeAll>
 810a646:	e76c      	b.n	810a522 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810a648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a64a:	f000 fa09 	bl	810aa60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a64e:	f000 fd27 	bl	810b0a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810a652:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810a654:	4618      	mov	r0, r3
 810a656:	3738      	adds	r7, #56	; 0x38
 810a658:	46bd      	mov	sp, r7
 810a65a:	bd80      	pop	{r7, pc}
 810a65c:	e000ed04 	.word	0xe000ed04

0810a660 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810a660:	b580      	push	{r7, lr}
 810a662:	b08e      	sub	sp, #56	; 0x38
 810a664:	af00      	add	r7, sp, #0
 810a666:	60f8      	str	r0, [r7, #12]
 810a668:	60b9      	str	r1, [r7, #8]
 810a66a:	607a      	str	r2, [r7, #4]
 810a66c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810a66e:	68fb      	ldr	r3, [r7, #12]
 810a670:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 810a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a674:	2b00      	cmp	r3, #0
 810a676:	d109      	bne.n	810a68c <xQueueGenericSendFromISR+0x2c>
 810a678:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a67c:	f383 8811 	msr	BASEPRI, r3
 810a680:	f3bf 8f6f 	isb	sy
 810a684:	f3bf 8f4f 	dsb	sy
 810a688:	627b      	str	r3, [r7, #36]	; 0x24
 810a68a:	e7fe      	b.n	810a68a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a68c:	68bb      	ldr	r3, [r7, #8]
 810a68e:	2b00      	cmp	r3, #0
 810a690:	d103      	bne.n	810a69a <xQueueGenericSendFromISR+0x3a>
 810a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a696:	2b00      	cmp	r3, #0
 810a698:	d101      	bne.n	810a69e <xQueueGenericSendFromISR+0x3e>
 810a69a:	2301      	movs	r3, #1
 810a69c:	e000      	b.n	810a6a0 <xQueueGenericSendFromISR+0x40>
 810a69e:	2300      	movs	r3, #0
 810a6a0:	2b00      	cmp	r3, #0
 810a6a2:	d109      	bne.n	810a6b8 <xQueueGenericSendFromISR+0x58>
 810a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a6a8:	f383 8811 	msr	BASEPRI, r3
 810a6ac:	f3bf 8f6f 	isb	sy
 810a6b0:	f3bf 8f4f 	dsb	sy
 810a6b4:	623b      	str	r3, [r7, #32]
 810a6b6:	e7fe      	b.n	810a6b6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810a6b8:	683b      	ldr	r3, [r7, #0]
 810a6ba:	2b02      	cmp	r3, #2
 810a6bc:	d103      	bne.n	810a6c6 <xQueueGenericSendFromISR+0x66>
 810a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a6c2:	2b01      	cmp	r3, #1
 810a6c4:	d101      	bne.n	810a6ca <xQueueGenericSendFromISR+0x6a>
 810a6c6:	2301      	movs	r3, #1
 810a6c8:	e000      	b.n	810a6cc <xQueueGenericSendFromISR+0x6c>
 810a6ca:	2300      	movs	r3, #0
 810a6cc:	2b00      	cmp	r3, #0
 810a6ce:	d109      	bne.n	810a6e4 <xQueueGenericSendFromISR+0x84>
 810a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a6d4:	f383 8811 	msr	BASEPRI, r3
 810a6d8:	f3bf 8f6f 	isb	sy
 810a6dc:	f3bf 8f4f 	dsb	sy
 810a6e0:	61fb      	str	r3, [r7, #28]
 810a6e2:	e7fe      	b.n	810a6e2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810a6e4:	f7ff fd86 	bl	810a1f4 <vPortValidateInterruptPriority>
	__asm volatile
 810a6e8:	f3ef 8211 	mrs	r2, BASEPRI
 810a6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a6f0:	f383 8811 	msr	BASEPRI, r3
 810a6f4:	f3bf 8f6f 	isb	sy
 810a6f8:	f3bf 8f4f 	dsb	sy
 810a6fc:	61ba      	str	r2, [r7, #24]
 810a6fe:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 810a700:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810a702:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810a704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810a70c:	429a      	cmp	r2, r3
 810a70e:	d302      	bcc.n	810a716 <xQueueGenericSendFromISR+0xb6>
 810a710:	683b      	ldr	r3, [r7, #0]
 810a712:	2b02      	cmp	r3, #2
 810a714:	d12c      	bne.n	810a770 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a71c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810a720:	683a      	ldr	r2, [r7, #0]
 810a722:	68b9      	ldr	r1, [r7, #8]
 810a724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810a726:	f000 f90b 	bl	810a940 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810a72a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 810a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a732:	d112      	bne.n	810a75a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810a738:	2b00      	cmp	r3, #0
 810a73a:	d016      	beq.n	810a76a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a73e:	3324      	adds	r3, #36	; 0x24
 810a740:	4618      	mov	r0, r3
 810a742:	f000 febb 	bl	810b4bc <xTaskRemoveFromEventList>
 810a746:	4603      	mov	r3, r0
 810a748:	2b00      	cmp	r3, #0
 810a74a:	d00e      	beq.n	810a76a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810a74c:	687b      	ldr	r3, [r7, #4]
 810a74e:	2b00      	cmp	r3, #0
 810a750:	d00b      	beq.n	810a76a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810a752:	687b      	ldr	r3, [r7, #4]
 810a754:	2201      	movs	r2, #1
 810a756:	601a      	str	r2, [r3, #0]
 810a758:	e007      	b.n	810a76a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810a75a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810a75e:	3301      	adds	r3, #1
 810a760:	b2db      	uxtb	r3, r3
 810a762:	b25a      	sxtb	r2, r3
 810a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810a766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810a76a:	2301      	movs	r3, #1
 810a76c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 810a76e:	e001      	b.n	810a774 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810a770:	2300      	movs	r3, #0
 810a772:	637b      	str	r3, [r7, #52]	; 0x34
 810a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a776:	613b      	str	r3, [r7, #16]
	__asm volatile
 810a778:	693b      	ldr	r3, [r7, #16]
 810a77a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810a77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 810a780:	4618      	mov	r0, r3
 810a782:	3738      	adds	r7, #56	; 0x38
 810a784:	46bd      	mov	sp, r7
 810a786:	bd80      	pop	{r7, pc}

0810a788 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810a788:	b580      	push	{r7, lr}
 810a78a:	b08c      	sub	sp, #48	; 0x30
 810a78c:	af00      	add	r7, sp, #0
 810a78e:	60f8      	str	r0, [r7, #12]
 810a790:	60b9      	str	r1, [r7, #8]
 810a792:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810a794:	2300      	movs	r3, #0
 810a796:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810a798:	68fb      	ldr	r3, [r7, #12]
 810a79a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a79e:	2b00      	cmp	r3, #0
 810a7a0:	d109      	bne.n	810a7b6 <xQueueReceive+0x2e>
	__asm volatile
 810a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a7a6:	f383 8811 	msr	BASEPRI, r3
 810a7aa:	f3bf 8f6f 	isb	sy
 810a7ae:	f3bf 8f4f 	dsb	sy
 810a7b2:	623b      	str	r3, [r7, #32]
 810a7b4:	e7fe      	b.n	810a7b4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810a7b6:	68bb      	ldr	r3, [r7, #8]
 810a7b8:	2b00      	cmp	r3, #0
 810a7ba:	d103      	bne.n	810a7c4 <xQueueReceive+0x3c>
 810a7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a7be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a7c0:	2b00      	cmp	r3, #0
 810a7c2:	d101      	bne.n	810a7c8 <xQueueReceive+0x40>
 810a7c4:	2301      	movs	r3, #1
 810a7c6:	e000      	b.n	810a7ca <xQueueReceive+0x42>
 810a7c8:	2300      	movs	r3, #0
 810a7ca:	2b00      	cmp	r3, #0
 810a7cc:	d109      	bne.n	810a7e2 <xQueueReceive+0x5a>
 810a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a7d2:	f383 8811 	msr	BASEPRI, r3
 810a7d6:	f3bf 8f6f 	isb	sy
 810a7da:	f3bf 8f4f 	dsb	sy
 810a7de:	61fb      	str	r3, [r7, #28]
 810a7e0:	e7fe      	b.n	810a7e0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810a7e2:	f001 f821 	bl	810b828 <xTaskGetSchedulerState>
 810a7e6:	4603      	mov	r3, r0
 810a7e8:	2b00      	cmp	r3, #0
 810a7ea:	d102      	bne.n	810a7f2 <xQueueReceive+0x6a>
 810a7ec:	687b      	ldr	r3, [r7, #4]
 810a7ee:	2b00      	cmp	r3, #0
 810a7f0:	d101      	bne.n	810a7f6 <xQueueReceive+0x6e>
 810a7f2:	2301      	movs	r3, #1
 810a7f4:	e000      	b.n	810a7f8 <xQueueReceive+0x70>
 810a7f6:	2300      	movs	r3, #0
 810a7f8:	2b00      	cmp	r3, #0
 810a7fa:	d109      	bne.n	810a810 <xQueueReceive+0x88>
 810a7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a800:	f383 8811 	msr	BASEPRI, r3
 810a804:	f3bf 8f6f 	isb	sy
 810a808:	f3bf 8f4f 	dsb	sy
 810a80c:	61bb      	str	r3, [r7, #24]
 810a80e:	e7fe      	b.n	810a80e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810a810:	f7ff fc14 	bl	810a03c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a818:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a81c:	2b00      	cmp	r3, #0
 810a81e:	d01f      	beq.n	810a860 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810a820:	68b9      	ldr	r1, [r7, #8]
 810a822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a824:	f000 f8f6 	bl	810aa14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810a828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810a82a:	1e5a      	subs	r2, r3, #1
 810a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a82e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810a830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a832:	691b      	ldr	r3, [r3, #16]
 810a834:	2b00      	cmp	r3, #0
 810a836:	d00f      	beq.n	810a858 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a83a:	3310      	adds	r3, #16
 810a83c:	4618      	mov	r0, r3
 810a83e:	f000 fe3d 	bl	810b4bc <xTaskRemoveFromEventList>
 810a842:	4603      	mov	r3, r0
 810a844:	2b00      	cmp	r3, #0
 810a846:	d007      	beq.n	810a858 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810a848:	4b3c      	ldr	r3, [pc, #240]	; (810a93c <xQueueReceive+0x1b4>)
 810a84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a84e:	601a      	str	r2, [r3, #0]
 810a850:	f3bf 8f4f 	dsb	sy
 810a854:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810a858:	f7ff fc1e 	bl	810a098 <vPortExitCritical>
				return pdPASS;
 810a85c:	2301      	movs	r3, #1
 810a85e:	e069      	b.n	810a934 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810a860:	687b      	ldr	r3, [r7, #4]
 810a862:	2b00      	cmp	r3, #0
 810a864:	d103      	bne.n	810a86e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810a866:	f7ff fc17 	bl	810a098 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810a86a:	2300      	movs	r3, #0
 810a86c:	e062      	b.n	810a934 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 810a86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810a870:	2b00      	cmp	r3, #0
 810a872:	d106      	bne.n	810a882 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810a874:	f107 0310 	add.w	r3, r7, #16
 810a878:	4618      	mov	r0, r3
 810a87a:	f000 fe81 	bl	810b580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810a87e:	2301      	movs	r3, #1
 810a880:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810a882:	f7ff fc09 	bl	810a098 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810a886:	f000 fbfd 	bl	810b084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810a88a:	f7ff fbd7 	bl	810a03c <vPortEnterCritical>
 810a88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810a894:	b25b      	sxtb	r3, r3
 810a896:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a89a:	d103      	bne.n	810a8a4 <xQueueReceive+0x11c>
 810a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a89e:	2200      	movs	r2, #0
 810a8a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810a8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a8a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810a8aa:	b25b      	sxtb	r3, r3
 810a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a8b0:	d103      	bne.n	810a8ba <xQueueReceive+0x132>
 810a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a8b4:	2200      	movs	r2, #0
 810a8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810a8ba:	f7ff fbed 	bl	810a098 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810a8be:	1d3a      	adds	r2, r7, #4
 810a8c0:	f107 0310 	add.w	r3, r7, #16
 810a8c4:	4611      	mov	r1, r2
 810a8c6:	4618      	mov	r0, r3
 810a8c8:	f000 fe70 	bl	810b5ac <xTaskCheckForTimeOut>
 810a8cc:	4603      	mov	r3, r0
 810a8ce:	2b00      	cmp	r3, #0
 810a8d0:	d123      	bne.n	810a91a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a8d4:	f000 f916 	bl	810ab04 <prvIsQueueEmpty>
 810a8d8:	4603      	mov	r3, r0
 810a8da:	2b00      	cmp	r3, #0
 810a8dc:	d017      	beq.n	810a90e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810a8e0:	3324      	adds	r3, #36	; 0x24
 810a8e2:	687a      	ldr	r2, [r7, #4]
 810a8e4:	4611      	mov	r1, r2
 810a8e6:	4618      	mov	r0, r3
 810a8e8:	f000 fd9a 	bl	810b420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810a8ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a8ee:	f000 f8b7 	bl	810aa60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810a8f2:	f000 fbd5 	bl	810b0a0 <xTaskResumeAll>
 810a8f6:	4603      	mov	r3, r0
 810a8f8:	2b00      	cmp	r3, #0
 810a8fa:	d189      	bne.n	810a810 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 810a8fc:	4b0f      	ldr	r3, [pc, #60]	; (810a93c <xQueueReceive+0x1b4>)
 810a8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a902:	601a      	str	r2, [r3, #0]
 810a904:	f3bf 8f4f 	dsb	sy
 810a908:	f3bf 8f6f 	isb	sy
 810a90c:	e780      	b.n	810a810 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810a90e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a910:	f000 f8a6 	bl	810aa60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810a914:	f000 fbc4 	bl	810b0a0 <xTaskResumeAll>
 810a918:	e77a      	b.n	810a810 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810a91a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a91c:	f000 f8a0 	bl	810aa60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810a920:	f000 fbbe 	bl	810b0a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810a924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810a926:	f000 f8ed 	bl	810ab04 <prvIsQueueEmpty>
 810a92a:	4603      	mov	r3, r0
 810a92c:	2b00      	cmp	r3, #0
 810a92e:	f43f af6f 	beq.w	810a810 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810a932:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810a934:	4618      	mov	r0, r3
 810a936:	3730      	adds	r7, #48	; 0x30
 810a938:	46bd      	mov	sp, r7
 810a93a:	bd80      	pop	{r7, pc}
 810a93c:	e000ed04 	.word	0xe000ed04

0810a940 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810a940:	b580      	push	{r7, lr}
 810a942:	b086      	sub	sp, #24
 810a944:	af00      	add	r7, sp, #0
 810a946:	60f8      	str	r0, [r7, #12]
 810a948:	60b9      	str	r1, [r7, #8]
 810a94a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810a94c:	2300      	movs	r3, #0
 810a94e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810a950:	68fb      	ldr	r3, [r7, #12]
 810a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810a954:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810a956:	68fb      	ldr	r3, [r7, #12]
 810a958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a95a:	2b00      	cmp	r3, #0
 810a95c:	d10d      	bne.n	810a97a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810a95e:	68fb      	ldr	r3, [r7, #12]
 810a960:	681b      	ldr	r3, [r3, #0]
 810a962:	2b00      	cmp	r3, #0
 810a964:	d14d      	bne.n	810aa02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810a966:	68fb      	ldr	r3, [r7, #12]
 810a968:	689b      	ldr	r3, [r3, #8]
 810a96a:	4618      	mov	r0, r3
 810a96c:	f000 ff7a 	bl	810b864 <xTaskPriorityDisinherit>
 810a970:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810a972:	68fb      	ldr	r3, [r7, #12]
 810a974:	2200      	movs	r2, #0
 810a976:	609a      	str	r2, [r3, #8]
 810a978:	e043      	b.n	810aa02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810a97a:	687b      	ldr	r3, [r7, #4]
 810a97c:	2b00      	cmp	r3, #0
 810a97e:	d119      	bne.n	810a9b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810a980:	68fb      	ldr	r3, [r7, #12]
 810a982:	6858      	ldr	r0, [r3, #4]
 810a984:	68fb      	ldr	r3, [r7, #12]
 810a986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a988:	461a      	mov	r2, r3
 810a98a:	68b9      	ldr	r1, [r7, #8]
 810a98c:	f001 fb9a 	bl	810c0c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810a990:	68fb      	ldr	r3, [r7, #12]
 810a992:	685a      	ldr	r2, [r3, #4]
 810a994:	68fb      	ldr	r3, [r7, #12]
 810a996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a998:	441a      	add	r2, r3
 810a99a:	68fb      	ldr	r3, [r7, #12]
 810a99c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a99e:	68fb      	ldr	r3, [r7, #12]
 810a9a0:	685a      	ldr	r2, [r3, #4]
 810a9a2:	68fb      	ldr	r3, [r7, #12]
 810a9a4:	689b      	ldr	r3, [r3, #8]
 810a9a6:	429a      	cmp	r2, r3
 810a9a8:	d32b      	bcc.n	810aa02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810a9aa:	68fb      	ldr	r3, [r7, #12]
 810a9ac:	681a      	ldr	r2, [r3, #0]
 810a9ae:	68fb      	ldr	r3, [r7, #12]
 810a9b0:	605a      	str	r2, [r3, #4]
 810a9b2:	e026      	b.n	810aa02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810a9b4:	68fb      	ldr	r3, [r7, #12]
 810a9b6:	68d8      	ldr	r0, [r3, #12]
 810a9b8:	68fb      	ldr	r3, [r7, #12]
 810a9ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a9bc:	461a      	mov	r2, r3
 810a9be:	68b9      	ldr	r1, [r7, #8]
 810a9c0:	f001 fb80 	bl	810c0c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810a9c4:	68fb      	ldr	r3, [r7, #12]
 810a9c6:	68da      	ldr	r2, [r3, #12]
 810a9c8:	68fb      	ldr	r3, [r7, #12]
 810a9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a9cc:	425b      	negs	r3, r3
 810a9ce:	441a      	add	r2, r3
 810a9d0:	68fb      	ldr	r3, [r7, #12]
 810a9d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810a9d4:	68fb      	ldr	r3, [r7, #12]
 810a9d6:	68da      	ldr	r2, [r3, #12]
 810a9d8:	68fb      	ldr	r3, [r7, #12]
 810a9da:	681b      	ldr	r3, [r3, #0]
 810a9dc:	429a      	cmp	r2, r3
 810a9de:	d207      	bcs.n	810a9f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810a9e0:	68fb      	ldr	r3, [r7, #12]
 810a9e2:	689a      	ldr	r2, [r3, #8]
 810a9e4:	68fb      	ldr	r3, [r7, #12]
 810a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810a9e8:	425b      	negs	r3, r3
 810a9ea:	441a      	add	r2, r3
 810a9ec:	68fb      	ldr	r3, [r7, #12]
 810a9ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810a9f0:	687b      	ldr	r3, [r7, #4]
 810a9f2:	2b02      	cmp	r3, #2
 810a9f4:	d105      	bne.n	810aa02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810a9f6:	693b      	ldr	r3, [r7, #16]
 810a9f8:	2b00      	cmp	r3, #0
 810a9fa:	d002      	beq.n	810aa02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810a9fc:	693b      	ldr	r3, [r7, #16]
 810a9fe:	3b01      	subs	r3, #1
 810aa00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810aa02:	693b      	ldr	r3, [r7, #16]
 810aa04:	1c5a      	adds	r2, r3, #1
 810aa06:	68fb      	ldr	r3, [r7, #12]
 810aa08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 810aa0a:	697b      	ldr	r3, [r7, #20]
}
 810aa0c:	4618      	mov	r0, r3
 810aa0e:	3718      	adds	r7, #24
 810aa10:	46bd      	mov	sp, r7
 810aa12:	bd80      	pop	{r7, pc}

0810aa14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810aa14:	b580      	push	{r7, lr}
 810aa16:	b082      	sub	sp, #8
 810aa18:	af00      	add	r7, sp, #0
 810aa1a:	6078      	str	r0, [r7, #4]
 810aa1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810aa1e:	687b      	ldr	r3, [r7, #4]
 810aa20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810aa22:	2b00      	cmp	r3, #0
 810aa24:	d018      	beq.n	810aa58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810aa26:	687b      	ldr	r3, [r7, #4]
 810aa28:	68da      	ldr	r2, [r3, #12]
 810aa2a:	687b      	ldr	r3, [r7, #4]
 810aa2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810aa2e:	441a      	add	r2, r3
 810aa30:	687b      	ldr	r3, [r7, #4]
 810aa32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	68da      	ldr	r2, [r3, #12]
 810aa38:	687b      	ldr	r3, [r7, #4]
 810aa3a:	689b      	ldr	r3, [r3, #8]
 810aa3c:	429a      	cmp	r2, r3
 810aa3e:	d303      	bcc.n	810aa48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810aa40:	687b      	ldr	r3, [r7, #4]
 810aa42:	681a      	ldr	r2, [r3, #0]
 810aa44:	687b      	ldr	r3, [r7, #4]
 810aa46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810aa48:	687b      	ldr	r3, [r7, #4]
 810aa4a:	68d9      	ldr	r1, [r3, #12]
 810aa4c:	687b      	ldr	r3, [r7, #4]
 810aa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810aa50:	461a      	mov	r2, r3
 810aa52:	6838      	ldr	r0, [r7, #0]
 810aa54:	f001 fb36 	bl	810c0c4 <memcpy>
	}
}
 810aa58:	bf00      	nop
 810aa5a:	3708      	adds	r7, #8
 810aa5c:	46bd      	mov	sp, r7
 810aa5e:	bd80      	pop	{r7, pc}

0810aa60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810aa60:	b580      	push	{r7, lr}
 810aa62:	b084      	sub	sp, #16
 810aa64:	af00      	add	r7, sp, #0
 810aa66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810aa68:	f7ff fae8 	bl	810a03c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810aa6c:	687b      	ldr	r3, [r7, #4]
 810aa6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810aa72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810aa74:	e011      	b.n	810aa9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810aa76:	687b      	ldr	r3, [r7, #4]
 810aa78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810aa7a:	2b00      	cmp	r3, #0
 810aa7c:	d012      	beq.n	810aaa4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810aa7e:	687b      	ldr	r3, [r7, #4]
 810aa80:	3324      	adds	r3, #36	; 0x24
 810aa82:	4618      	mov	r0, r3
 810aa84:	f000 fd1a 	bl	810b4bc <xTaskRemoveFromEventList>
 810aa88:	4603      	mov	r3, r0
 810aa8a:	2b00      	cmp	r3, #0
 810aa8c:	d001      	beq.n	810aa92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810aa8e:	f000 fded 	bl	810b66c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810aa92:	7bfb      	ldrb	r3, [r7, #15]
 810aa94:	3b01      	subs	r3, #1
 810aa96:	b2db      	uxtb	r3, r3
 810aa98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810aa9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810aa9e:	2b00      	cmp	r3, #0
 810aaa0:	dce9      	bgt.n	810aa76 <prvUnlockQueue+0x16>
 810aaa2:	e000      	b.n	810aaa6 <prvUnlockQueue+0x46>
					break;
 810aaa4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810aaa6:	687b      	ldr	r3, [r7, #4]
 810aaa8:	22ff      	movs	r2, #255	; 0xff
 810aaaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 810aaae:	f7ff faf3 	bl	810a098 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810aab2:	f7ff fac3 	bl	810a03c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810aab6:	687b      	ldr	r3, [r7, #4]
 810aab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810aabc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810aabe:	e011      	b.n	810aae4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810aac0:	687b      	ldr	r3, [r7, #4]
 810aac2:	691b      	ldr	r3, [r3, #16]
 810aac4:	2b00      	cmp	r3, #0
 810aac6:	d012      	beq.n	810aaee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810aac8:	687b      	ldr	r3, [r7, #4]
 810aaca:	3310      	adds	r3, #16
 810aacc:	4618      	mov	r0, r3
 810aace:	f000 fcf5 	bl	810b4bc <xTaskRemoveFromEventList>
 810aad2:	4603      	mov	r3, r0
 810aad4:	2b00      	cmp	r3, #0
 810aad6:	d001      	beq.n	810aadc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810aad8:	f000 fdc8 	bl	810b66c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810aadc:	7bbb      	ldrb	r3, [r7, #14]
 810aade:	3b01      	subs	r3, #1
 810aae0:	b2db      	uxtb	r3, r3
 810aae2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810aae4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810aae8:	2b00      	cmp	r3, #0
 810aaea:	dce9      	bgt.n	810aac0 <prvUnlockQueue+0x60>
 810aaec:	e000      	b.n	810aaf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810aaee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810aaf0:	687b      	ldr	r3, [r7, #4]
 810aaf2:	22ff      	movs	r2, #255	; 0xff
 810aaf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 810aaf8:	f7ff face 	bl	810a098 <vPortExitCritical>
}
 810aafc:	bf00      	nop
 810aafe:	3710      	adds	r7, #16
 810ab00:	46bd      	mov	sp, r7
 810ab02:	bd80      	pop	{r7, pc}

0810ab04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810ab04:	b580      	push	{r7, lr}
 810ab06:	b084      	sub	sp, #16
 810ab08:	af00      	add	r7, sp, #0
 810ab0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810ab0c:	f7ff fa96 	bl	810a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810ab10:	687b      	ldr	r3, [r7, #4]
 810ab12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810ab14:	2b00      	cmp	r3, #0
 810ab16:	d102      	bne.n	810ab1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810ab18:	2301      	movs	r3, #1
 810ab1a:	60fb      	str	r3, [r7, #12]
 810ab1c:	e001      	b.n	810ab22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810ab1e:	2300      	movs	r3, #0
 810ab20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810ab22:	f7ff fab9 	bl	810a098 <vPortExitCritical>

	return xReturn;
 810ab26:	68fb      	ldr	r3, [r7, #12]
}
 810ab28:	4618      	mov	r0, r3
 810ab2a:	3710      	adds	r7, #16
 810ab2c:	46bd      	mov	sp, r7
 810ab2e:	bd80      	pop	{r7, pc}

0810ab30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810ab30:	b580      	push	{r7, lr}
 810ab32:	b084      	sub	sp, #16
 810ab34:	af00      	add	r7, sp, #0
 810ab36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810ab38:	f7ff fa80 	bl	810a03c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810ab3c:	687b      	ldr	r3, [r7, #4]
 810ab3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810ab40:	687b      	ldr	r3, [r7, #4]
 810ab42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ab44:	429a      	cmp	r2, r3
 810ab46:	d102      	bne.n	810ab4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810ab48:	2301      	movs	r3, #1
 810ab4a:	60fb      	str	r3, [r7, #12]
 810ab4c:	e001      	b.n	810ab52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810ab4e:	2300      	movs	r3, #0
 810ab50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810ab52:	f7ff faa1 	bl	810a098 <vPortExitCritical>

	return xReturn;
 810ab56:	68fb      	ldr	r3, [r7, #12]
}
 810ab58:	4618      	mov	r0, r3
 810ab5a:	3710      	adds	r7, #16
 810ab5c:	46bd      	mov	sp, r7
 810ab5e:	bd80      	pop	{r7, pc}

0810ab60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810ab60:	b480      	push	{r7}
 810ab62:	b085      	sub	sp, #20
 810ab64:	af00      	add	r7, sp, #0
 810ab66:	6078      	str	r0, [r7, #4]
 810ab68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810ab6a:	2300      	movs	r3, #0
 810ab6c:	60fb      	str	r3, [r7, #12]
 810ab6e:	e014      	b.n	810ab9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810ab70:	4a0e      	ldr	r2, [pc, #56]	; (810abac <vQueueAddToRegistry+0x4c>)
 810ab72:	68fb      	ldr	r3, [r7, #12]
 810ab74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810ab78:	2b00      	cmp	r3, #0
 810ab7a:	d10b      	bne.n	810ab94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810ab7c:	490b      	ldr	r1, [pc, #44]	; (810abac <vQueueAddToRegistry+0x4c>)
 810ab7e:	68fb      	ldr	r3, [r7, #12]
 810ab80:	683a      	ldr	r2, [r7, #0]
 810ab82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810ab86:	4a09      	ldr	r2, [pc, #36]	; (810abac <vQueueAddToRegistry+0x4c>)
 810ab88:	68fb      	ldr	r3, [r7, #12]
 810ab8a:	00db      	lsls	r3, r3, #3
 810ab8c:	4413      	add	r3, r2
 810ab8e:	687a      	ldr	r2, [r7, #4]
 810ab90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810ab92:	e005      	b.n	810aba0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810ab94:	68fb      	ldr	r3, [r7, #12]
 810ab96:	3301      	adds	r3, #1
 810ab98:	60fb      	str	r3, [r7, #12]
 810ab9a:	68fb      	ldr	r3, [r7, #12]
 810ab9c:	2b07      	cmp	r3, #7
 810ab9e:	d9e7      	bls.n	810ab70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810aba0:	bf00      	nop
 810aba2:	3714      	adds	r7, #20
 810aba4:	46bd      	mov	sp, r7
 810aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abaa:	4770      	bx	lr
 810abac:	10004e88 	.word	0x10004e88

0810abb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810abb0:	b580      	push	{r7, lr}
 810abb2:	b086      	sub	sp, #24
 810abb4:	af00      	add	r7, sp, #0
 810abb6:	60f8      	str	r0, [r7, #12]
 810abb8:	60b9      	str	r1, [r7, #8]
 810abba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810abbc:	68fb      	ldr	r3, [r7, #12]
 810abbe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810abc0:	f7ff fa3c 	bl	810a03c <vPortEnterCritical>
 810abc4:	697b      	ldr	r3, [r7, #20]
 810abc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 810abca:	b25b      	sxtb	r3, r3
 810abcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810abd0:	d103      	bne.n	810abda <vQueueWaitForMessageRestricted+0x2a>
 810abd2:	697b      	ldr	r3, [r7, #20]
 810abd4:	2200      	movs	r2, #0
 810abd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810abda:	697b      	ldr	r3, [r7, #20]
 810abdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810abe0:	b25b      	sxtb	r3, r3
 810abe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810abe6:	d103      	bne.n	810abf0 <vQueueWaitForMessageRestricted+0x40>
 810abe8:	697b      	ldr	r3, [r7, #20]
 810abea:	2200      	movs	r2, #0
 810abec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810abf0:	f7ff fa52 	bl	810a098 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810abf4:	697b      	ldr	r3, [r7, #20]
 810abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810abf8:	2b00      	cmp	r3, #0
 810abfa:	d106      	bne.n	810ac0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810abfc:	697b      	ldr	r3, [r7, #20]
 810abfe:	3324      	adds	r3, #36	; 0x24
 810ac00:	687a      	ldr	r2, [r7, #4]
 810ac02:	68b9      	ldr	r1, [r7, #8]
 810ac04:	4618      	mov	r0, r3
 810ac06:	f000 fc2f 	bl	810b468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810ac0a:	6978      	ldr	r0, [r7, #20]
 810ac0c:	f7ff ff28 	bl	810aa60 <prvUnlockQueue>
	}
 810ac10:	bf00      	nop
 810ac12:	3718      	adds	r7, #24
 810ac14:	46bd      	mov	sp, r7
 810ac16:	bd80      	pop	{r7, pc}

0810ac18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810ac18:	b580      	push	{r7, lr}
 810ac1a:	b08e      	sub	sp, #56	; 0x38
 810ac1c:	af04      	add	r7, sp, #16
 810ac1e:	60f8      	str	r0, [r7, #12]
 810ac20:	60b9      	str	r1, [r7, #8]
 810ac22:	607a      	str	r2, [r7, #4]
 810ac24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810ac26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac28:	2b00      	cmp	r3, #0
 810ac2a:	d109      	bne.n	810ac40 <xTaskCreateStatic+0x28>
 810ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac30:	f383 8811 	msr	BASEPRI, r3
 810ac34:	f3bf 8f6f 	isb	sy
 810ac38:	f3bf 8f4f 	dsb	sy
 810ac3c:	623b      	str	r3, [r7, #32]
 810ac3e:	e7fe      	b.n	810ac3e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 810ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ac42:	2b00      	cmp	r3, #0
 810ac44:	d109      	bne.n	810ac5a <xTaskCreateStatic+0x42>
 810ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac4a:	f383 8811 	msr	BASEPRI, r3
 810ac4e:	f3bf 8f6f 	isb	sy
 810ac52:	f3bf 8f4f 	dsb	sy
 810ac56:	61fb      	str	r3, [r7, #28]
 810ac58:	e7fe      	b.n	810ac58 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810ac5a:	235c      	movs	r3, #92	; 0x5c
 810ac5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810ac5e:	693b      	ldr	r3, [r7, #16]
 810ac60:	2b5c      	cmp	r3, #92	; 0x5c
 810ac62:	d009      	beq.n	810ac78 <xTaskCreateStatic+0x60>
 810ac64:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ac68:	f383 8811 	msr	BASEPRI, r3
 810ac6c:	f3bf 8f6f 	isb	sy
 810ac70:	f3bf 8f4f 	dsb	sy
 810ac74:	61bb      	str	r3, [r7, #24]
 810ac76:	e7fe      	b.n	810ac76 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810ac78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ac7c:	2b00      	cmp	r3, #0
 810ac7e:	d01e      	beq.n	810acbe <xTaskCreateStatic+0xa6>
 810ac80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ac82:	2b00      	cmp	r3, #0
 810ac84:	d01b      	beq.n	810acbe <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810ac88:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810ac8e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac92:	2202      	movs	r2, #2
 810ac94:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810ac98:	2300      	movs	r3, #0
 810ac9a:	9303      	str	r3, [sp, #12]
 810ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810ac9e:	9302      	str	r3, [sp, #8]
 810aca0:	f107 0314 	add.w	r3, r7, #20
 810aca4:	9301      	str	r3, [sp, #4]
 810aca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810aca8:	9300      	str	r3, [sp, #0]
 810acaa:	683b      	ldr	r3, [r7, #0]
 810acac:	687a      	ldr	r2, [r7, #4]
 810acae:	68b9      	ldr	r1, [r7, #8]
 810acb0:	68f8      	ldr	r0, [r7, #12]
 810acb2:	f000 f850 	bl	810ad56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810acb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810acb8:	f000 f8dc 	bl	810ae74 <prvAddNewTaskToReadyList>
 810acbc:	e001      	b.n	810acc2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 810acbe:	2300      	movs	r3, #0
 810acc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810acc2:	697b      	ldr	r3, [r7, #20]
	}
 810acc4:	4618      	mov	r0, r3
 810acc6:	3728      	adds	r7, #40	; 0x28
 810acc8:	46bd      	mov	sp, r7
 810acca:	bd80      	pop	{r7, pc}

0810accc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810accc:	b580      	push	{r7, lr}
 810acce:	b08c      	sub	sp, #48	; 0x30
 810acd0:	af04      	add	r7, sp, #16
 810acd2:	60f8      	str	r0, [r7, #12]
 810acd4:	60b9      	str	r1, [r7, #8]
 810acd6:	603b      	str	r3, [r7, #0]
 810acd8:	4613      	mov	r3, r2
 810acda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810acdc:	88fb      	ldrh	r3, [r7, #6]
 810acde:	009b      	lsls	r3, r3, #2
 810ace0:	4618      	mov	r0, r3
 810ace2:	f7fe fdfd 	bl	81098e0 <pvPortMalloc>
 810ace6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810ace8:	697b      	ldr	r3, [r7, #20]
 810acea:	2b00      	cmp	r3, #0
 810acec:	d00e      	beq.n	810ad0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810acee:	205c      	movs	r0, #92	; 0x5c
 810acf0:	f7fe fdf6 	bl	81098e0 <pvPortMalloc>
 810acf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810acf6:	69fb      	ldr	r3, [r7, #28]
 810acf8:	2b00      	cmp	r3, #0
 810acfa:	d003      	beq.n	810ad04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810acfc:	69fb      	ldr	r3, [r7, #28]
 810acfe:	697a      	ldr	r2, [r7, #20]
 810ad00:	631a      	str	r2, [r3, #48]	; 0x30
 810ad02:	e005      	b.n	810ad10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810ad04:	6978      	ldr	r0, [r7, #20]
 810ad06:	f7fe fead 	bl	8109a64 <vPortFree>
 810ad0a:	e001      	b.n	810ad10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810ad0c:	2300      	movs	r3, #0
 810ad0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810ad10:	69fb      	ldr	r3, [r7, #28]
 810ad12:	2b00      	cmp	r3, #0
 810ad14:	d017      	beq.n	810ad46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810ad16:	69fb      	ldr	r3, [r7, #28]
 810ad18:	2200      	movs	r2, #0
 810ad1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810ad1e:	88fa      	ldrh	r2, [r7, #6]
 810ad20:	2300      	movs	r3, #0
 810ad22:	9303      	str	r3, [sp, #12]
 810ad24:	69fb      	ldr	r3, [r7, #28]
 810ad26:	9302      	str	r3, [sp, #8]
 810ad28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ad2a:	9301      	str	r3, [sp, #4]
 810ad2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ad2e:	9300      	str	r3, [sp, #0]
 810ad30:	683b      	ldr	r3, [r7, #0]
 810ad32:	68b9      	ldr	r1, [r7, #8]
 810ad34:	68f8      	ldr	r0, [r7, #12]
 810ad36:	f000 f80e 	bl	810ad56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810ad3a:	69f8      	ldr	r0, [r7, #28]
 810ad3c:	f000 f89a 	bl	810ae74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810ad40:	2301      	movs	r3, #1
 810ad42:	61bb      	str	r3, [r7, #24]
 810ad44:	e002      	b.n	810ad4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810ad46:	f04f 33ff 	mov.w	r3, #4294967295
 810ad4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810ad4c:	69bb      	ldr	r3, [r7, #24]
	}
 810ad4e:	4618      	mov	r0, r3
 810ad50:	3720      	adds	r7, #32
 810ad52:	46bd      	mov	sp, r7
 810ad54:	bd80      	pop	{r7, pc}

0810ad56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810ad56:	b580      	push	{r7, lr}
 810ad58:	b088      	sub	sp, #32
 810ad5a:	af00      	add	r7, sp, #0
 810ad5c:	60f8      	str	r0, [r7, #12]
 810ad5e:	60b9      	str	r1, [r7, #8]
 810ad60:	607a      	str	r2, [r7, #4]
 810ad62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810ad64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	009b      	lsls	r3, r3, #2
 810ad6c:	461a      	mov	r2, r3
 810ad6e:	21a5      	movs	r1, #165	; 0xa5
 810ad70:	f001 f9b3 	bl	810c0da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810ad74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ad76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810ad78:	687b      	ldr	r3, [r7, #4]
 810ad7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 810ad7e:	3b01      	subs	r3, #1
 810ad80:	009b      	lsls	r3, r3, #2
 810ad82:	4413      	add	r3, r2
 810ad84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810ad86:	69bb      	ldr	r3, [r7, #24]
 810ad88:	f023 0307 	bic.w	r3, r3, #7
 810ad8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810ad8e:	69bb      	ldr	r3, [r7, #24]
 810ad90:	f003 0307 	and.w	r3, r3, #7
 810ad94:	2b00      	cmp	r3, #0
 810ad96:	d009      	beq.n	810adac <prvInitialiseNewTask+0x56>
 810ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad9c:	f383 8811 	msr	BASEPRI, r3
 810ada0:	f3bf 8f6f 	isb	sy
 810ada4:	f3bf 8f4f 	dsb	sy
 810ada8:	617b      	str	r3, [r7, #20]
 810adaa:	e7fe      	b.n	810adaa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810adac:	68bb      	ldr	r3, [r7, #8]
 810adae:	2b00      	cmp	r3, #0
 810adb0:	d01f      	beq.n	810adf2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810adb2:	2300      	movs	r3, #0
 810adb4:	61fb      	str	r3, [r7, #28]
 810adb6:	e012      	b.n	810adde <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810adb8:	68ba      	ldr	r2, [r7, #8]
 810adba:	69fb      	ldr	r3, [r7, #28]
 810adbc:	4413      	add	r3, r2
 810adbe:	7819      	ldrb	r1, [r3, #0]
 810adc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810adc2:	69fb      	ldr	r3, [r7, #28]
 810adc4:	4413      	add	r3, r2
 810adc6:	3334      	adds	r3, #52	; 0x34
 810adc8:	460a      	mov	r2, r1
 810adca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810adcc:	68ba      	ldr	r2, [r7, #8]
 810adce:	69fb      	ldr	r3, [r7, #28]
 810add0:	4413      	add	r3, r2
 810add2:	781b      	ldrb	r3, [r3, #0]
 810add4:	2b00      	cmp	r3, #0
 810add6:	d006      	beq.n	810ade6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810add8:	69fb      	ldr	r3, [r7, #28]
 810adda:	3301      	adds	r3, #1
 810addc:	61fb      	str	r3, [r7, #28]
 810adde:	69fb      	ldr	r3, [r7, #28]
 810ade0:	2b0f      	cmp	r3, #15
 810ade2:	d9e9      	bls.n	810adb8 <prvInitialiseNewTask+0x62>
 810ade4:	e000      	b.n	810ade8 <prvInitialiseNewTask+0x92>
			{
				break;
 810ade6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810adea:	2200      	movs	r2, #0
 810adec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 810adf0:	e003      	b.n	810adfa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810adf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810adf4:	2200      	movs	r2, #0
 810adf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810adfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810adfc:	2b37      	cmp	r3, #55	; 0x37
 810adfe:	d901      	bls.n	810ae04 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810ae00:	2337      	movs	r3, #55	; 0x37
 810ae02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810ae04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810ae08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810ae0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae12:	2200      	movs	r2, #0
 810ae14:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810ae16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae18:	3304      	adds	r3, #4
 810ae1a:	4618      	mov	r0, r3
 810ae1c:	f7fe ff56 	bl	8109ccc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae22:	3318      	adds	r3, #24
 810ae24:	4618      	mov	r0, r3
 810ae26:	f7fe ff51 	bl	8109ccc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ae2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ae3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810ae40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae42:	2200      	movs	r2, #0
 810ae44:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae48:	2200      	movs	r2, #0
 810ae4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810ae4e:	683a      	ldr	r2, [r7, #0]
 810ae50:	68f9      	ldr	r1, [r7, #12]
 810ae52:	69b8      	ldr	r0, [r7, #24]
 810ae54:	f7fe ffce 	bl	8109df4 <pxPortInitialiseStack>
 810ae58:	4602      	mov	r2, r0
 810ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ae5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ae60:	2b00      	cmp	r3, #0
 810ae62:	d002      	beq.n	810ae6a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ae66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810ae68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810ae6a:	bf00      	nop
 810ae6c:	3720      	adds	r7, #32
 810ae6e:	46bd      	mov	sp, r7
 810ae70:	bd80      	pop	{r7, pc}
	...

0810ae74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810ae74:	b580      	push	{r7, lr}
 810ae76:	b082      	sub	sp, #8
 810ae78:	af00      	add	r7, sp, #0
 810ae7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810ae7c:	f7ff f8de 	bl	810a03c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810ae80:	4b2d      	ldr	r3, [pc, #180]	; (810af38 <prvAddNewTaskToReadyList+0xc4>)
 810ae82:	681b      	ldr	r3, [r3, #0]
 810ae84:	3301      	adds	r3, #1
 810ae86:	4a2c      	ldr	r2, [pc, #176]	; (810af38 <prvAddNewTaskToReadyList+0xc4>)
 810ae88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810ae8a:	4b2c      	ldr	r3, [pc, #176]	; (810af3c <prvAddNewTaskToReadyList+0xc8>)
 810ae8c:	681b      	ldr	r3, [r3, #0]
 810ae8e:	2b00      	cmp	r3, #0
 810ae90:	d109      	bne.n	810aea6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810ae92:	4a2a      	ldr	r2, [pc, #168]	; (810af3c <prvAddNewTaskToReadyList+0xc8>)
 810ae94:	687b      	ldr	r3, [r7, #4]
 810ae96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810ae98:	4b27      	ldr	r3, [pc, #156]	; (810af38 <prvAddNewTaskToReadyList+0xc4>)
 810ae9a:	681b      	ldr	r3, [r3, #0]
 810ae9c:	2b01      	cmp	r3, #1
 810ae9e:	d110      	bne.n	810aec2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810aea0:	f000 fc08 	bl	810b6b4 <prvInitialiseTaskLists>
 810aea4:	e00d      	b.n	810aec2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810aea6:	4b26      	ldr	r3, [pc, #152]	; (810af40 <prvAddNewTaskToReadyList+0xcc>)
 810aea8:	681b      	ldr	r3, [r3, #0]
 810aeaa:	2b00      	cmp	r3, #0
 810aeac:	d109      	bne.n	810aec2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810aeae:	4b23      	ldr	r3, [pc, #140]	; (810af3c <prvAddNewTaskToReadyList+0xc8>)
 810aeb0:	681b      	ldr	r3, [r3, #0]
 810aeb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aeb4:	687b      	ldr	r3, [r7, #4]
 810aeb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aeb8:	429a      	cmp	r2, r3
 810aeba:	d802      	bhi.n	810aec2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810aebc:	4a1f      	ldr	r2, [pc, #124]	; (810af3c <prvAddNewTaskToReadyList+0xc8>)
 810aebe:	687b      	ldr	r3, [r7, #4]
 810aec0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810aec2:	4b20      	ldr	r3, [pc, #128]	; (810af44 <prvAddNewTaskToReadyList+0xd0>)
 810aec4:	681b      	ldr	r3, [r3, #0]
 810aec6:	3301      	adds	r3, #1
 810aec8:	4a1e      	ldr	r2, [pc, #120]	; (810af44 <prvAddNewTaskToReadyList+0xd0>)
 810aeca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810aecc:	4b1d      	ldr	r3, [pc, #116]	; (810af44 <prvAddNewTaskToReadyList+0xd0>)
 810aece:	681a      	ldr	r2, [r3, #0]
 810aed0:	687b      	ldr	r3, [r7, #4]
 810aed2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810aed4:	687b      	ldr	r3, [r7, #4]
 810aed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aed8:	4b1b      	ldr	r3, [pc, #108]	; (810af48 <prvAddNewTaskToReadyList+0xd4>)
 810aeda:	681b      	ldr	r3, [r3, #0]
 810aedc:	429a      	cmp	r2, r3
 810aede:	d903      	bls.n	810aee8 <prvAddNewTaskToReadyList+0x74>
 810aee0:	687b      	ldr	r3, [r7, #4]
 810aee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aee4:	4a18      	ldr	r2, [pc, #96]	; (810af48 <prvAddNewTaskToReadyList+0xd4>)
 810aee6:	6013      	str	r3, [r2, #0]
 810aee8:	687b      	ldr	r3, [r7, #4]
 810aeea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810aeec:	4613      	mov	r3, r2
 810aeee:	009b      	lsls	r3, r3, #2
 810aef0:	4413      	add	r3, r2
 810aef2:	009b      	lsls	r3, r3, #2
 810aef4:	4a15      	ldr	r2, [pc, #84]	; (810af4c <prvAddNewTaskToReadyList+0xd8>)
 810aef6:	441a      	add	r2, r3
 810aef8:	687b      	ldr	r3, [r7, #4]
 810aefa:	3304      	adds	r3, #4
 810aefc:	4619      	mov	r1, r3
 810aefe:	4610      	mov	r0, r2
 810af00:	f7fe fef1 	bl	8109ce6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810af04:	f7ff f8c8 	bl	810a098 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810af08:	4b0d      	ldr	r3, [pc, #52]	; (810af40 <prvAddNewTaskToReadyList+0xcc>)
 810af0a:	681b      	ldr	r3, [r3, #0]
 810af0c:	2b00      	cmp	r3, #0
 810af0e:	d00e      	beq.n	810af2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810af10:	4b0a      	ldr	r3, [pc, #40]	; (810af3c <prvAddNewTaskToReadyList+0xc8>)
 810af12:	681b      	ldr	r3, [r3, #0]
 810af14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810af16:	687b      	ldr	r3, [r7, #4]
 810af18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810af1a:	429a      	cmp	r2, r3
 810af1c:	d207      	bcs.n	810af2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810af1e:	4b0c      	ldr	r3, [pc, #48]	; (810af50 <prvAddNewTaskToReadyList+0xdc>)
 810af20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810af24:	601a      	str	r2, [r3, #0]
 810af26:	f3bf 8f4f 	dsb	sy
 810af2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810af2e:	bf00      	nop
 810af30:	3708      	adds	r7, #8
 810af32:	46bd      	mov	sp, r7
 810af34:	bd80      	pop	{r7, pc}
 810af36:	bf00      	nop
 810af38:	100049c0 	.word	0x100049c0
 810af3c:	100044ec 	.word	0x100044ec
 810af40:	100049cc 	.word	0x100049cc
 810af44:	100049dc 	.word	0x100049dc
 810af48:	100049c8 	.word	0x100049c8
 810af4c:	100044f0 	.word	0x100044f0
 810af50:	e000ed04 	.word	0xe000ed04

0810af54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810af54:	b580      	push	{r7, lr}
 810af56:	b084      	sub	sp, #16
 810af58:	af00      	add	r7, sp, #0
 810af5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810af5c:	2300      	movs	r3, #0
 810af5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810af60:	687b      	ldr	r3, [r7, #4]
 810af62:	2b00      	cmp	r3, #0
 810af64:	d016      	beq.n	810af94 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810af66:	4b13      	ldr	r3, [pc, #76]	; (810afb4 <vTaskDelay+0x60>)
 810af68:	681b      	ldr	r3, [r3, #0]
 810af6a:	2b00      	cmp	r3, #0
 810af6c:	d009      	beq.n	810af82 <vTaskDelay+0x2e>
 810af6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 810af72:	f383 8811 	msr	BASEPRI, r3
 810af76:	f3bf 8f6f 	isb	sy
 810af7a:	f3bf 8f4f 	dsb	sy
 810af7e:	60bb      	str	r3, [r7, #8]
 810af80:	e7fe      	b.n	810af80 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 810af82:	f000 f87f 	bl	810b084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810af86:	2100      	movs	r1, #0
 810af88:	6878      	ldr	r0, [r7, #4]
 810af8a:	f000 fcd7 	bl	810b93c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810af8e:	f000 f887 	bl	810b0a0 <xTaskResumeAll>
 810af92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810af94:	68fb      	ldr	r3, [r7, #12]
 810af96:	2b00      	cmp	r3, #0
 810af98:	d107      	bne.n	810afaa <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810af9a:	4b07      	ldr	r3, [pc, #28]	; (810afb8 <vTaskDelay+0x64>)
 810af9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810afa0:	601a      	str	r2, [r3, #0]
 810afa2:	f3bf 8f4f 	dsb	sy
 810afa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810afaa:	bf00      	nop
 810afac:	3710      	adds	r7, #16
 810afae:	46bd      	mov	sp, r7
 810afb0:	bd80      	pop	{r7, pc}
 810afb2:	bf00      	nop
 810afb4:	100049e8 	.word	0x100049e8
 810afb8:	e000ed04 	.word	0xe000ed04

0810afbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810afbc:	b580      	push	{r7, lr}
 810afbe:	b08a      	sub	sp, #40	; 0x28
 810afc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810afc2:	2300      	movs	r3, #0
 810afc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810afc6:	2300      	movs	r3, #0
 810afc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810afca:	463a      	mov	r2, r7
 810afcc:	1d39      	adds	r1, r7, #4
 810afce:	f107 0308 	add.w	r3, r7, #8
 810afd2:	4618      	mov	r0, r3
 810afd4:	f7fe fc50 	bl	8109878 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810afd8:	6839      	ldr	r1, [r7, #0]
 810afda:	687b      	ldr	r3, [r7, #4]
 810afdc:	68ba      	ldr	r2, [r7, #8]
 810afde:	9202      	str	r2, [sp, #8]
 810afe0:	9301      	str	r3, [sp, #4]
 810afe2:	2300      	movs	r3, #0
 810afe4:	9300      	str	r3, [sp, #0]
 810afe6:	2300      	movs	r3, #0
 810afe8:	460a      	mov	r2, r1
 810afea:	4920      	ldr	r1, [pc, #128]	; (810b06c <vTaskStartScheduler+0xb0>)
 810afec:	4820      	ldr	r0, [pc, #128]	; (810b070 <vTaskStartScheduler+0xb4>)
 810afee:	f7ff fe13 	bl	810ac18 <xTaskCreateStatic>
 810aff2:	4602      	mov	r2, r0
 810aff4:	4b1f      	ldr	r3, [pc, #124]	; (810b074 <vTaskStartScheduler+0xb8>)
 810aff6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810aff8:	4b1e      	ldr	r3, [pc, #120]	; (810b074 <vTaskStartScheduler+0xb8>)
 810affa:	681b      	ldr	r3, [r3, #0]
 810affc:	2b00      	cmp	r3, #0
 810affe:	d002      	beq.n	810b006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810b000:	2301      	movs	r3, #1
 810b002:	617b      	str	r3, [r7, #20]
 810b004:	e001      	b.n	810b00a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810b006:	2300      	movs	r3, #0
 810b008:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810b00a:	697b      	ldr	r3, [r7, #20]
 810b00c:	2b01      	cmp	r3, #1
 810b00e:	d102      	bne.n	810b016 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810b010:	f000 fce8 	bl	810b9e4 <xTimerCreateTimerTask>
 810b014:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810b016:	697b      	ldr	r3, [r7, #20]
 810b018:	2b01      	cmp	r3, #1
 810b01a:	d115      	bne.n	810b048 <vTaskStartScheduler+0x8c>
 810b01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b020:	f383 8811 	msr	BASEPRI, r3
 810b024:	f3bf 8f6f 	isb	sy
 810b028:	f3bf 8f4f 	dsb	sy
 810b02c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810b02e:	4b12      	ldr	r3, [pc, #72]	; (810b078 <vTaskStartScheduler+0xbc>)
 810b030:	f04f 32ff 	mov.w	r2, #4294967295
 810b034:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810b036:	4b11      	ldr	r3, [pc, #68]	; (810b07c <vTaskStartScheduler+0xc0>)
 810b038:	2201      	movs	r2, #1
 810b03a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810b03c:	4b10      	ldr	r3, [pc, #64]	; (810b080 <vTaskStartScheduler+0xc4>)
 810b03e:	2200      	movs	r2, #0
 810b040:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810b042:	f7fe ff5d 	bl	8109f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810b046:	e00d      	b.n	810b064 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810b048:	697b      	ldr	r3, [r7, #20]
 810b04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b04e:	d109      	bne.n	810b064 <vTaskStartScheduler+0xa8>
 810b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b054:	f383 8811 	msr	BASEPRI, r3
 810b058:	f3bf 8f6f 	isb	sy
 810b05c:	f3bf 8f4f 	dsb	sy
 810b060:	60fb      	str	r3, [r7, #12]
 810b062:	e7fe      	b.n	810b062 <vTaskStartScheduler+0xa6>
}
 810b064:	bf00      	nop
 810b066:	3718      	adds	r7, #24
 810b068:	46bd      	mov	sp, r7
 810b06a:	bd80      	pop	{r7, pc}
 810b06c:	0810dbf8 	.word	0x0810dbf8
 810b070:	0810b685 	.word	0x0810b685
 810b074:	100049e4 	.word	0x100049e4
 810b078:	100049e0 	.word	0x100049e0
 810b07c:	100049cc 	.word	0x100049cc
 810b080:	100049c4 	.word	0x100049c4

0810b084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810b084:	b480      	push	{r7}
 810b086:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810b088:	4b04      	ldr	r3, [pc, #16]	; (810b09c <vTaskSuspendAll+0x18>)
 810b08a:	681b      	ldr	r3, [r3, #0]
 810b08c:	3301      	adds	r3, #1
 810b08e:	4a03      	ldr	r2, [pc, #12]	; (810b09c <vTaskSuspendAll+0x18>)
 810b090:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810b092:	bf00      	nop
 810b094:	46bd      	mov	sp, r7
 810b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b09a:	4770      	bx	lr
 810b09c:	100049e8 	.word	0x100049e8

0810b0a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810b0a0:	b580      	push	{r7, lr}
 810b0a2:	b084      	sub	sp, #16
 810b0a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810b0a6:	2300      	movs	r3, #0
 810b0a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810b0aa:	2300      	movs	r3, #0
 810b0ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810b0ae:	4b41      	ldr	r3, [pc, #260]	; (810b1b4 <xTaskResumeAll+0x114>)
 810b0b0:	681b      	ldr	r3, [r3, #0]
 810b0b2:	2b00      	cmp	r3, #0
 810b0b4:	d109      	bne.n	810b0ca <xTaskResumeAll+0x2a>
 810b0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b0ba:	f383 8811 	msr	BASEPRI, r3
 810b0be:	f3bf 8f6f 	isb	sy
 810b0c2:	f3bf 8f4f 	dsb	sy
 810b0c6:	603b      	str	r3, [r7, #0]
 810b0c8:	e7fe      	b.n	810b0c8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810b0ca:	f7fe ffb7 	bl	810a03c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810b0ce:	4b39      	ldr	r3, [pc, #228]	; (810b1b4 <xTaskResumeAll+0x114>)
 810b0d0:	681b      	ldr	r3, [r3, #0]
 810b0d2:	3b01      	subs	r3, #1
 810b0d4:	4a37      	ldr	r2, [pc, #220]	; (810b1b4 <xTaskResumeAll+0x114>)
 810b0d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b0d8:	4b36      	ldr	r3, [pc, #216]	; (810b1b4 <xTaskResumeAll+0x114>)
 810b0da:	681b      	ldr	r3, [r3, #0]
 810b0dc:	2b00      	cmp	r3, #0
 810b0de:	d162      	bne.n	810b1a6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810b0e0:	4b35      	ldr	r3, [pc, #212]	; (810b1b8 <xTaskResumeAll+0x118>)
 810b0e2:	681b      	ldr	r3, [r3, #0]
 810b0e4:	2b00      	cmp	r3, #0
 810b0e6:	d05e      	beq.n	810b1a6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810b0e8:	e02f      	b.n	810b14a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b0ea:	4b34      	ldr	r3, [pc, #208]	; (810b1bc <xTaskResumeAll+0x11c>)
 810b0ec:	68db      	ldr	r3, [r3, #12]
 810b0ee:	68db      	ldr	r3, [r3, #12]
 810b0f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810b0f2:	68fb      	ldr	r3, [r7, #12]
 810b0f4:	3318      	adds	r3, #24
 810b0f6:	4618      	mov	r0, r3
 810b0f8:	f7fe fe52 	bl	8109da0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b0fc:	68fb      	ldr	r3, [r7, #12]
 810b0fe:	3304      	adds	r3, #4
 810b100:	4618      	mov	r0, r3
 810b102:	f7fe fe4d 	bl	8109da0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810b106:	68fb      	ldr	r3, [r7, #12]
 810b108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b10a:	4b2d      	ldr	r3, [pc, #180]	; (810b1c0 <xTaskResumeAll+0x120>)
 810b10c:	681b      	ldr	r3, [r3, #0]
 810b10e:	429a      	cmp	r2, r3
 810b110:	d903      	bls.n	810b11a <xTaskResumeAll+0x7a>
 810b112:	68fb      	ldr	r3, [r7, #12]
 810b114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b116:	4a2a      	ldr	r2, [pc, #168]	; (810b1c0 <xTaskResumeAll+0x120>)
 810b118:	6013      	str	r3, [r2, #0]
 810b11a:	68fb      	ldr	r3, [r7, #12]
 810b11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b11e:	4613      	mov	r3, r2
 810b120:	009b      	lsls	r3, r3, #2
 810b122:	4413      	add	r3, r2
 810b124:	009b      	lsls	r3, r3, #2
 810b126:	4a27      	ldr	r2, [pc, #156]	; (810b1c4 <xTaskResumeAll+0x124>)
 810b128:	441a      	add	r2, r3
 810b12a:	68fb      	ldr	r3, [r7, #12]
 810b12c:	3304      	adds	r3, #4
 810b12e:	4619      	mov	r1, r3
 810b130:	4610      	mov	r0, r2
 810b132:	f7fe fdd8 	bl	8109ce6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810b136:	68fb      	ldr	r3, [r7, #12]
 810b138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b13a:	4b23      	ldr	r3, [pc, #140]	; (810b1c8 <xTaskResumeAll+0x128>)
 810b13c:	681b      	ldr	r3, [r3, #0]
 810b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b140:	429a      	cmp	r2, r3
 810b142:	d302      	bcc.n	810b14a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 810b144:	4b21      	ldr	r3, [pc, #132]	; (810b1cc <xTaskResumeAll+0x12c>)
 810b146:	2201      	movs	r2, #1
 810b148:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810b14a:	4b1c      	ldr	r3, [pc, #112]	; (810b1bc <xTaskResumeAll+0x11c>)
 810b14c:	681b      	ldr	r3, [r3, #0]
 810b14e:	2b00      	cmp	r3, #0
 810b150:	d1cb      	bne.n	810b0ea <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810b152:	68fb      	ldr	r3, [r7, #12]
 810b154:	2b00      	cmp	r3, #0
 810b156:	d001      	beq.n	810b15c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810b158:	f000 fb46 	bl	810b7e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810b15c:	4b1c      	ldr	r3, [pc, #112]	; (810b1d0 <xTaskResumeAll+0x130>)
 810b15e:	681b      	ldr	r3, [r3, #0]
 810b160:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810b162:	687b      	ldr	r3, [r7, #4]
 810b164:	2b00      	cmp	r3, #0
 810b166:	d010      	beq.n	810b18a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810b168:	f000 f846 	bl	810b1f8 <xTaskIncrementTick>
 810b16c:	4603      	mov	r3, r0
 810b16e:	2b00      	cmp	r3, #0
 810b170:	d002      	beq.n	810b178 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 810b172:	4b16      	ldr	r3, [pc, #88]	; (810b1cc <xTaskResumeAll+0x12c>)
 810b174:	2201      	movs	r2, #1
 810b176:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810b178:	687b      	ldr	r3, [r7, #4]
 810b17a:	3b01      	subs	r3, #1
 810b17c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810b17e:	687b      	ldr	r3, [r7, #4]
 810b180:	2b00      	cmp	r3, #0
 810b182:	d1f1      	bne.n	810b168 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 810b184:	4b12      	ldr	r3, [pc, #72]	; (810b1d0 <xTaskResumeAll+0x130>)
 810b186:	2200      	movs	r2, #0
 810b188:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810b18a:	4b10      	ldr	r3, [pc, #64]	; (810b1cc <xTaskResumeAll+0x12c>)
 810b18c:	681b      	ldr	r3, [r3, #0]
 810b18e:	2b00      	cmp	r3, #0
 810b190:	d009      	beq.n	810b1a6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810b192:	2301      	movs	r3, #1
 810b194:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810b196:	4b0f      	ldr	r3, [pc, #60]	; (810b1d4 <xTaskResumeAll+0x134>)
 810b198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b19c:	601a      	str	r2, [r3, #0]
 810b19e:	f3bf 8f4f 	dsb	sy
 810b1a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810b1a6:	f7fe ff77 	bl	810a098 <vPortExitCritical>

	return xAlreadyYielded;
 810b1aa:	68bb      	ldr	r3, [r7, #8]
}
 810b1ac:	4618      	mov	r0, r3
 810b1ae:	3710      	adds	r7, #16
 810b1b0:	46bd      	mov	sp, r7
 810b1b2:	bd80      	pop	{r7, pc}
 810b1b4:	100049e8 	.word	0x100049e8
 810b1b8:	100049c0 	.word	0x100049c0
 810b1bc:	10004980 	.word	0x10004980
 810b1c0:	100049c8 	.word	0x100049c8
 810b1c4:	100044f0 	.word	0x100044f0
 810b1c8:	100044ec 	.word	0x100044ec
 810b1cc:	100049d4 	.word	0x100049d4
 810b1d0:	100049d0 	.word	0x100049d0
 810b1d4:	e000ed04 	.word	0xe000ed04

0810b1d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810b1d8:	b480      	push	{r7}
 810b1da:	b083      	sub	sp, #12
 810b1dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810b1de:	4b05      	ldr	r3, [pc, #20]	; (810b1f4 <xTaskGetTickCount+0x1c>)
 810b1e0:	681b      	ldr	r3, [r3, #0]
 810b1e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810b1e4:	687b      	ldr	r3, [r7, #4]
}
 810b1e6:	4618      	mov	r0, r3
 810b1e8:	370c      	adds	r7, #12
 810b1ea:	46bd      	mov	sp, r7
 810b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1f0:	4770      	bx	lr
 810b1f2:	bf00      	nop
 810b1f4:	100049c4 	.word	0x100049c4

0810b1f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810b1f8:	b580      	push	{r7, lr}
 810b1fa:	b086      	sub	sp, #24
 810b1fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810b1fe:	2300      	movs	r3, #0
 810b200:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b202:	4b4e      	ldr	r3, [pc, #312]	; (810b33c <xTaskIncrementTick+0x144>)
 810b204:	681b      	ldr	r3, [r3, #0]
 810b206:	2b00      	cmp	r3, #0
 810b208:	f040 8088 	bne.w	810b31c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810b20c:	4b4c      	ldr	r3, [pc, #304]	; (810b340 <xTaskIncrementTick+0x148>)
 810b20e:	681b      	ldr	r3, [r3, #0]
 810b210:	3301      	adds	r3, #1
 810b212:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810b214:	4a4a      	ldr	r2, [pc, #296]	; (810b340 <xTaskIncrementTick+0x148>)
 810b216:	693b      	ldr	r3, [r7, #16]
 810b218:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810b21a:	693b      	ldr	r3, [r7, #16]
 810b21c:	2b00      	cmp	r3, #0
 810b21e:	d11f      	bne.n	810b260 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 810b220:	4b48      	ldr	r3, [pc, #288]	; (810b344 <xTaskIncrementTick+0x14c>)
 810b222:	681b      	ldr	r3, [r3, #0]
 810b224:	681b      	ldr	r3, [r3, #0]
 810b226:	2b00      	cmp	r3, #0
 810b228:	d009      	beq.n	810b23e <xTaskIncrementTick+0x46>
 810b22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b22e:	f383 8811 	msr	BASEPRI, r3
 810b232:	f3bf 8f6f 	isb	sy
 810b236:	f3bf 8f4f 	dsb	sy
 810b23a:	603b      	str	r3, [r7, #0]
 810b23c:	e7fe      	b.n	810b23c <xTaskIncrementTick+0x44>
 810b23e:	4b41      	ldr	r3, [pc, #260]	; (810b344 <xTaskIncrementTick+0x14c>)
 810b240:	681b      	ldr	r3, [r3, #0]
 810b242:	60fb      	str	r3, [r7, #12]
 810b244:	4b40      	ldr	r3, [pc, #256]	; (810b348 <xTaskIncrementTick+0x150>)
 810b246:	681b      	ldr	r3, [r3, #0]
 810b248:	4a3e      	ldr	r2, [pc, #248]	; (810b344 <xTaskIncrementTick+0x14c>)
 810b24a:	6013      	str	r3, [r2, #0]
 810b24c:	4a3e      	ldr	r2, [pc, #248]	; (810b348 <xTaskIncrementTick+0x150>)
 810b24e:	68fb      	ldr	r3, [r7, #12]
 810b250:	6013      	str	r3, [r2, #0]
 810b252:	4b3e      	ldr	r3, [pc, #248]	; (810b34c <xTaskIncrementTick+0x154>)
 810b254:	681b      	ldr	r3, [r3, #0]
 810b256:	3301      	adds	r3, #1
 810b258:	4a3c      	ldr	r2, [pc, #240]	; (810b34c <xTaskIncrementTick+0x154>)
 810b25a:	6013      	str	r3, [r2, #0]
 810b25c:	f000 fac4 	bl	810b7e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810b260:	4b3b      	ldr	r3, [pc, #236]	; (810b350 <xTaskIncrementTick+0x158>)
 810b262:	681b      	ldr	r3, [r3, #0]
 810b264:	693a      	ldr	r2, [r7, #16]
 810b266:	429a      	cmp	r2, r3
 810b268:	d349      	bcc.n	810b2fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b26a:	4b36      	ldr	r3, [pc, #216]	; (810b344 <xTaskIncrementTick+0x14c>)
 810b26c:	681b      	ldr	r3, [r3, #0]
 810b26e:	681b      	ldr	r3, [r3, #0]
 810b270:	2b00      	cmp	r3, #0
 810b272:	d104      	bne.n	810b27e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b274:	4b36      	ldr	r3, [pc, #216]	; (810b350 <xTaskIncrementTick+0x158>)
 810b276:	f04f 32ff 	mov.w	r2, #4294967295
 810b27a:	601a      	str	r2, [r3, #0]
					break;
 810b27c:	e03f      	b.n	810b2fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b27e:	4b31      	ldr	r3, [pc, #196]	; (810b344 <xTaskIncrementTick+0x14c>)
 810b280:	681b      	ldr	r3, [r3, #0]
 810b282:	68db      	ldr	r3, [r3, #12]
 810b284:	68db      	ldr	r3, [r3, #12]
 810b286:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810b288:	68bb      	ldr	r3, [r7, #8]
 810b28a:	685b      	ldr	r3, [r3, #4]
 810b28c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810b28e:	693a      	ldr	r2, [r7, #16]
 810b290:	687b      	ldr	r3, [r7, #4]
 810b292:	429a      	cmp	r2, r3
 810b294:	d203      	bcs.n	810b29e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810b296:	4a2e      	ldr	r2, [pc, #184]	; (810b350 <xTaskIncrementTick+0x158>)
 810b298:	687b      	ldr	r3, [r7, #4]
 810b29a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810b29c:	e02f      	b.n	810b2fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b29e:	68bb      	ldr	r3, [r7, #8]
 810b2a0:	3304      	adds	r3, #4
 810b2a2:	4618      	mov	r0, r3
 810b2a4:	f7fe fd7c 	bl	8109da0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810b2a8:	68bb      	ldr	r3, [r7, #8]
 810b2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810b2ac:	2b00      	cmp	r3, #0
 810b2ae:	d004      	beq.n	810b2ba <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810b2b0:	68bb      	ldr	r3, [r7, #8]
 810b2b2:	3318      	adds	r3, #24
 810b2b4:	4618      	mov	r0, r3
 810b2b6:	f7fe fd73 	bl	8109da0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810b2ba:	68bb      	ldr	r3, [r7, #8]
 810b2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b2be:	4b25      	ldr	r3, [pc, #148]	; (810b354 <xTaskIncrementTick+0x15c>)
 810b2c0:	681b      	ldr	r3, [r3, #0]
 810b2c2:	429a      	cmp	r2, r3
 810b2c4:	d903      	bls.n	810b2ce <xTaskIncrementTick+0xd6>
 810b2c6:	68bb      	ldr	r3, [r7, #8]
 810b2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b2ca:	4a22      	ldr	r2, [pc, #136]	; (810b354 <xTaskIncrementTick+0x15c>)
 810b2cc:	6013      	str	r3, [r2, #0]
 810b2ce:	68bb      	ldr	r3, [r7, #8]
 810b2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b2d2:	4613      	mov	r3, r2
 810b2d4:	009b      	lsls	r3, r3, #2
 810b2d6:	4413      	add	r3, r2
 810b2d8:	009b      	lsls	r3, r3, #2
 810b2da:	4a1f      	ldr	r2, [pc, #124]	; (810b358 <xTaskIncrementTick+0x160>)
 810b2dc:	441a      	add	r2, r3
 810b2de:	68bb      	ldr	r3, [r7, #8]
 810b2e0:	3304      	adds	r3, #4
 810b2e2:	4619      	mov	r1, r3
 810b2e4:	4610      	mov	r0, r2
 810b2e6:	f7fe fcfe 	bl	8109ce6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810b2ea:	68bb      	ldr	r3, [r7, #8]
 810b2ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b2ee:	4b1b      	ldr	r3, [pc, #108]	; (810b35c <xTaskIncrementTick+0x164>)
 810b2f0:	681b      	ldr	r3, [r3, #0]
 810b2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b2f4:	429a      	cmp	r2, r3
 810b2f6:	d3b8      	bcc.n	810b26a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 810b2f8:	2301      	movs	r3, #1
 810b2fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b2fc:	e7b5      	b.n	810b26a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810b2fe:	4b17      	ldr	r3, [pc, #92]	; (810b35c <xTaskIncrementTick+0x164>)
 810b300:	681b      	ldr	r3, [r3, #0]
 810b302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b304:	4914      	ldr	r1, [pc, #80]	; (810b358 <xTaskIncrementTick+0x160>)
 810b306:	4613      	mov	r3, r2
 810b308:	009b      	lsls	r3, r3, #2
 810b30a:	4413      	add	r3, r2
 810b30c:	009b      	lsls	r3, r3, #2
 810b30e:	440b      	add	r3, r1
 810b310:	681b      	ldr	r3, [r3, #0]
 810b312:	2b01      	cmp	r3, #1
 810b314:	d907      	bls.n	810b326 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 810b316:	2301      	movs	r3, #1
 810b318:	617b      	str	r3, [r7, #20]
 810b31a:	e004      	b.n	810b326 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810b31c:	4b10      	ldr	r3, [pc, #64]	; (810b360 <xTaskIncrementTick+0x168>)
 810b31e:	681b      	ldr	r3, [r3, #0]
 810b320:	3301      	adds	r3, #1
 810b322:	4a0f      	ldr	r2, [pc, #60]	; (810b360 <xTaskIncrementTick+0x168>)
 810b324:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 810b326:	4b0f      	ldr	r3, [pc, #60]	; (810b364 <xTaskIncrementTick+0x16c>)
 810b328:	681b      	ldr	r3, [r3, #0]
 810b32a:	2b00      	cmp	r3, #0
 810b32c:	d001      	beq.n	810b332 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 810b32e:	2301      	movs	r3, #1
 810b330:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810b332:	697b      	ldr	r3, [r7, #20]
}
 810b334:	4618      	mov	r0, r3
 810b336:	3718      	adds	r7, #24
 810b338:	46bd      	mov	sp, r7
 810b33a:	bd80      	pop	{r7, pc}
 810b33c:	100049e8 	.word	0x100049e8
 810b340:	100049c4 	.word	0x100049c4
 810b344:	10004978 	.word	0x10004978
 810b348:	1000497c 	.word	0x1000497c
 810b34c:	100049d8 	.word	0x100049d8
 810b350:	100049e0 	.word	0x100049e0
 810b354:	100049c8 	.word	0x100049c8
 810b358:	100044f0 	.word	0x100044f0
 810b35c:	100044ec 	.word	0x100044ec
 810b360:	100049d0 	.word	0x100049d0
 810b364:	100049d4 	.word	0x100049d4

0810b368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810b368:	b480      	push	{r7}
 810b36a:	b085      	sub	sp, #20
 810b36c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810b36e:	4b27      	ldr	r3, [pc, #156]	; (810b40c <vTaskSwitchContext+0xa4>)
 810b370:	681b      	ldr	r3, [r3, #0]
 810b372:	2b00      	cmp	r3, #0
 810b374:	d003      	beq.n	810b37e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810b376:	4b26      	ldr	r3, [pc, #152]	; (810b410 <vTaskSwitchContext+0xa8>)
 810b378:	2201      	movs	r2, #1
 810b37a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810b37c:	e040      	b.n	810b400 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 810b37e:	4b24      	ldr	r3, [pc, #144]	; (810b410 <vTaskSwitchContext+0xa8>)
 810b380:	2200      	movs	r2, #0
 810b382:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b384:	4b23      	ldr	r3, [pc, #140]	; (810b414 <vTaskSwitchContext+0xac>)
 810b386:	681b      	ldr	r3, [r3, #0]
 810b388:	60fb      	str	r3, [r7, #12]
 810b38a:	e00f      	b.n	810b3ac <vTaskSwitchContext+0x44>
 810b38c:	68fb      	ldr	r3, [r7, #12]
 810b38e:	2b00      	cmp	r3, #0
 810b390:	d109      	bne.n	810b3a6 <vTaskSwitchContext+0x3e>
 810b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b396:	f383 8811 	msr	BASEPRI, r3
 810b39a:	f3bf 8f6f 	isb	sy
 810b39e:	f3bf 8f4f 	dsb	sy
 810b3a2:	607b      	str	r3, [r7, #4]
 810b3a4:	e7fe      	b.n	810b3a4 <vTaskSwitchContext+0x3c>
 810b3a6:	68fb      	ldr	r3, [r7, #12]
 810b3a8:	3b01      	subs	r3, #1
 810b3aa:	60fb      	str	r3, [r7, #12]
 810b3ac:	491a      	ldr	r1, [pc, #104]	; (810b418 <vTaskSwitchContext+0xb0>)
 810b3ae:	68fa      	ldr	r2, [r7, #12]
 810b3b0:	4613      	mov	r3, r2
 810b3b2:	009b      	lsls	r3, r3, #2
 810b3b4:	4413      	add	r3, r2
 810b3b6:	009b      	lsls	r3, r3, #2
 810b3b8:	440b      	add	r3, r1
 810b3ba:	681b      	ldr	r3, [r3, #0]
 810b3bc:	2b00      	cmp	r3, #0
 810b3be:	d0e5      	beq.n	810b38c <vTaskSwitchContext+0x24>
 810b3c0:	68fa      	ldr	r2, [r7, #12]
 810b3c2:	4613      	mov	r3, r2
 810b3c4:	009b      	lsls	r3, r3, #2
 810b3c6:	4413      	add	r3, r2
 810b3c8:	009b      	lsls	r3, r3, #2
 810b3ca:	4a13      	ldr	r2, [pc, #76]	; (810b418 <vTaskSwitchContext+0xb0>)
 810b3cc:	4413      	add	r3, r2
 810b3ce:	60bb      	str	r3, [r7, #8]
 810b3d0:	68bb      	ldr	r3, [r7, #8]
 810b3d2:	685b      	ldr	r3, [r3, #4]
 810b3d4:	685a      	ldr	r2, [r3, #4]
 810b3d6:	68bb      	ldr	r3, [r7, #8]
 810b3d8:	605a      	str	r2, [r3, #4]
 810b3da:	68bb      	ldr	r3, [r7, #8]
 810b3dc:	685a      	ldr	r2, [r3, #4]
 810b3de:	68bb      	ldr	r3, [r7, #8]
 810b3e0:	3308      	adds	r3, #8
 810b3e2:	429a      	cmp	r2, r3
 810b3e4:	d104      	bne.n	810b3f0 <vTaskSwitchContext+0x88>
 810b3e6:	68bb      	ldr	r3, [r7, #8]
 810b3e8:	685b      	ldr	r3, [r3, #4]
 810b3ea:	685a      	ldr	r2, [r3, #4]
 810b3ec:	68bb      	ldr	r3, [r7, #8]
 810b3ee:	605a      	str	r2, [r3, #4]
 810b3f0:	68bb      	ldr	r3, [r7, #8]
 810b3f2:	685b      	ldr	r3, [r3, #4]
 810b3f4:	68db      	ldr	r3, [r3, #12]
 810b3f6:	4a09      	ldr	r2, [pc, #36]	; (810b41c <vTaskSwitchContext+0xb4>)
 810b3f8:	6013      	str	r3, [r2, #0]
 810b3fa:	4a06      	ldr	r2, [pc, #24]	; (810b414 <vTaskSwitchContext+0xac>)
 810b3fc:	68fb      	ldr	r3, [r7, #12]
 810b3fe:	6013      	str	r3, [r2, #0]
}
 810b400:	bf00      	nop
 810b402:	3714      	adds	r7, #20
 810b404:	46bd      	mov	sp, r7
 810b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b40a:	4770      	bx	lr
 810b40c:	100049e8 	.word	0x100049e8
 810b410:	100049d4 	.word	0x100049d4
 810b414:	100049c8 	.word	0x100049c8
 810b418:	100044f0 	.word	0x100044f0
 810b41c:	100044ec 	.word	0x100044ec

0810b420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810b420:	b580      	push	{r7, lr}
 810b422:	b084      	sub	sp, #16
 810b424:	af00      	add	r7, sp, #0
 810b426:	6078      	str	r0, [r7, #4]
 810b428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810b42a:	687b      	ldr	r3, [r7, #4]
 810b42c:	2b00      	cmp	r3, #0
 810b42e:	d109      	bne.n	810b444 <vTaskPlaceOnEventList+0x24>
 810b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b434:	f383 8811 	msr	BASEPRI, r3
 810b438:	f3bf 8f6f 	isb	sy
 810b43c:	f3bf 8f4f 	dsb	sy
 810b440:	60fb      	str	r3, [r7, #12]
 810b442:	e7fe      	b.n	810b442 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810b444:	4b07      	ldr	r3, [pc, #28]	; (810b464 <vTaskPlaceOnEventList+0x44>)
 810b446:	681b      	ldr	r3, [r3, #0]
 810b448:	3318      	adds	r3, #24
 810b44a:	4619      	mov	r1, r3
 810b44c:	6878      	ldr	r0, [r7, #4]
 810b44e:	f7fe fc6e 	bl	8109d2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810b452:	2101      	movs	r1, #1
 810b454:	6838      	ldr	r0, [r7, #0]
 810b456:	f000 fa71 	bl	810b93c <prvAddCurrentTaskToDelayedList>
}
 810b45a:	bf00      	nop
 810b45c:	3710      	adds	r7, #16
 810b45e:	46bd      	mov	sp, r7
 810b460:	bd80      	pop	{r7, pc}
 810b462:	bf00      	nop
 810b464:	100044ec 	.word	0x100044ec

0810b468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810b468:	b580      	push	{r7, lr}
 810b46a:	b086      	sub	sp, #24
 810b46c:	af00      	add	r7, sp, #0
 810b46e:	60f8      	str	r0, [r7, #12]
 810b470:	60b9      	str	r1, [r7, #8]
 810b472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810b474:	68fb      	ldr	r3, [r7, #12]
 810b476:	2b00      	cmp	r3, #0
 810b478:	d109      	bne.n	810b48e <vTaskPlaceOnEventListRestricted+0x26>
 810b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b47e:	f383 8811 	msr	BASEPRI, r3
 810b482:	f3bf 8f6f 	isb	sy
 810b486:	f3bf 8f4f 	dsb	sy
 810b48a:	617b      	str	r3, [r7, #20]
 810b48c:	e7fe      	b.n	810b48c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810b48e:	4b0a      	ldr	r3, [pc, #40]	; (810b4b8 <vTaskPlaceOnEventListRestricted+0x50>)
 810b490:	681b      	ldr	r3, [r3, #0]
 810b492:	3318      	adds	r3, #24
 810b494:	4619      	mov	r1, r3
 810b496:	68f8      	ldr	r0, [r7, #12]
 810b498:	f7fe fc25 	bl	8109ce6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810b49c:	687b      	ldr	r3, [r7, #4]
 810b49e:	2b00      	cmp	r3, #0
 810b4a0:	d002      	beq.n	810b4a8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 810b4a2:	f04f 33ff 	mov.w	r3, #4294967295
 810b4a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810b4a8:	6879      	ldr	r1, [r7, #4]
 810b4aa:	68b8      	ldr	r0, [r7, #8]
 810b4ac:	f000 fa46 	bl	810b93c <prvAddCurrentTaskToDelayedList>
	}
 810b4b0:	bf00      	nop
 810b4b2:	3718      	adds	r7, #24
 810b4b4:	46bd      	mov	sp, r7
 810b4b6:	bd80      	pop	{r7, pc}
 810b4b8:	100044ec 	.word	0x100044ec

0810b4bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810b4bc:	b580      	push	{r7, lr}
 810b4be:	b086      	sub	sp, #24
 810b4c0:	af00      	add	r7, sp, #0
 810b4c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b4c4:	687b      	ldr	r3, [r7, #4]
 810b4c6:	68db      	ldr	r3, [r3, #12]
 810b4c8:	68db      	ldr	r3, [r3, #12]
 810b4ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810b4cc:	693b      	ldr	r3, [r7, #16]
 810b4ce:	2b00      	cmp	r3, #0
 810b4d0:	d109      	bne.n	810b4e6 <xTaskRemoveFromEventList+0x2a>
 810b4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b4d6:	f383 8811 	msr	BASEPRI, r3
 810b4da:	f3bf 8f6f 	isb	sy
 810b4de:	f3bf 8f4f 	dsb	sy
 810b4e2:	60fb      	str	r3, [r7, #12]
 810b4e4:	e7fe      	b.n	810b4e4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810b4e6:	693b      	ldr	r3, [r7, #16]
 810b4e8:	3318      	adds	r3, #24
 810b4ea:	4618      	mov	r0, r3
 810b4ec:	f7fe fc58 	bl	8109da0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b4f0:	4b1d      	ldr	r3, [pc, #116]	; (810b568 <xTaskRemoveFromEventList+0xac>)
 810b4f2:	681b      	ldr	r3, [r3, #0]
 810b4f4:	2b00      	cmp	r3, #0
 810b4f6:	d11d      	bne.n	810b534 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810b4f8:	693b      	ldr	r3, [r7, #16]
 810b4fa:	3304      	adds	r3, #4
 810b4fc:	4618      	mov	r0, r3
 810b4fe:	f7fe fc4f 	bl	8109da0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810b502:	693b      	ldr	r3, [r7, #16]
 810b504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b506:	4b19      	ldr	r3, [pc, #100]	; (810b56c <xTaskRemoveFromEventList+0xb0>)
 810b508:	681b      	ldr	r3, [r3, #0]
 810b50a:	429a      	cmp	r2, r3
 810b50c:	d903      	bls.n	810b516 <xTaskRemoveFromEventList+0x5a>
 810b50e:	693b      	ldr	r3, [r7, #16]
 810b510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b512:	4a16      	ldr	r2, [pc, #88]	; (810b56c <xTaskRemoveFromEventList+0xb0>)
 810b514:	6013      	str	r3, [r2, #0]
 810b516:	693b      	ldr	r3, [r7, #16]
 810b518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b51a:	4613      	mov	r3, r2
 810b51c:	009b      	lsls	r3, r3, #2
 810b51e:	4413      	add	r3, r2
 810b520:	009b      	lsls	r3, r3, #2
 810b522:	4a13      	ldr	r2, [pc, #76]	; (810b570 <xTaskRemoveFromEventList+0xb4>)
 810b524:	441a      	add	r2, r3
 810b526:	693b      	ldr	r3, [r7, #16]
 810b528:	3304      	adds	r3, #4
 810b52a:	4619      	mov	r1, r3
 810b52c:	4610      	mov	r0, r2
 810b52e:	f7fe fbda 	bl	8109ce6 <vListInsertEnd>
 810b532:	e005      	b.n	810b540 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810b534:	693b      	ldr	r3, [r7, #16]
 810b536:	3318      	adds	r3, #24
 810b538:	4619      	mov	r1, r3
 810b53a:	480e      	ldr	r0, [pc, #56]	; (810b574 <xTaskRemoveFromEventList+0xb8>)
 810b53c:	f7fe fbd3 	bl	8109ce6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810b540:	693b      	ldr	r3, [r7, #16]
 810b542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b544:	4b0c      	ldr	r3, [pc, #48]	; (810b578 <xTaskRemoveFromEventList+0xbc>)
 810b546:	681b      	ldr	r3, [r3, #0]
 810b548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b54a:	429a      	cmp	r2, r3
 810b54c:	d905      	bls.n	810b55a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810b54e:	2301      	movs	r3, #1
 810b550:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810b552:	4b0a      	ldr	r3, [pc, #40]	; (810b57c <xTaskRemoveFromEventList+0xc0>)
 810b554:	2201      	movs	r2, #1
 810b556:	601a      	str	r2, [r3, #0]
 810b558:	e001      	b.n	810b55e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810b55a:	2300      	movs	r3, #0
 810b55c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810b55e:	697b      	ldr	r3, [r7, #20]
}
 810b560:	4618      	mov	r0, r3
 810b562:	3718      	adds	r7, #24
 810b564:	46bd      	mov	sp, r7
 810b566:	bd80      	pop	{r7, pc}
 810b568:	100049e8 	.word	0x100049e8
 810b56c:	100049c8 	.word	0x100049c8
 810b570:	100044f0 	.word	0x100044f0
 810b574:	10004980 	.word	0x10004980
 810b578:	100044ec 	.word	0x100044ec
 810b57c:	100049d4 	.word	0x100049d4

0810b580 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810b580:	b480      	push	{r7}
 810b582:	b083      	sub	sp, #12
 810b584:	af00      	add	r7, sp, #0
 810b586:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810b588:	4b06      	ldr	r3, [pc, #24]	; (810b5a4 <vTaskInternalSetTimeOutState+0x24>)
 810b58a:	681a      	ldr	r2, [r3, #0]
 810b58c:	687b      	ldr	r3, [r7, #4]
 810b58e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810b590:	4b05      	ldr	r3, [pc, #20]	; (810b5a8 <vTaskInternalSetTimeOutState+0x28>)
 810b592:	681a      	ldr	r2, [r3, #0]
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	605a      	str	r2, [r3, #4]
}
 810b598:	bf00      	nop
 810b59a:	370c      	adds	r7, #12
 810b59c:	46bd      	mov	sp, r7
 810b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5a2:	4770      	bx	lr
 810b5a4:	100049d8 	.word	0x100049d8
 810b5a8:	100049c4 	.word	0x100049c4

0810b5ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810b5ac:	b580      	push	{r7, lr}
 810b5ae:	b088      	sub	sp, #32
 810b5b0:	af00      	add	r7, sp, #0
 810b5b2:	6078      	str	r0, [r7, #4]
 810b5b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810b5b6:	687b      	ldr	r3, [r7, #4]
 810b5b8:	2b00      	cmp	r3, #0
 810b5ba:	d109      	bne.n	810b5d0 <xTaskCheckForTimeOut+0x24>
 810b5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b5c0:	f383 8811 	msr	BASEPRI, r3
 810b5c4:	f3bf 8f6f 	isb	sy
 810b5c8:	f3bf 8f4f 	dsb	sy
 810b5cc:	613b      	str	r3, [r7, #16]
 810b5ce:	e7fe      	b.n	810b5ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 810b5d0:	683b      	ldr	r3, [r7, #0]
 810b5d2:	2b00      	cmp	r3, #0
 810b5d4:	d109      	bne.n	810b5ea <xTaskCheckForTimeOut+0x3e>
 810b5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b5da:	f383 8811 	msr	BASEPRI, r3
 810b5de:	f3bf 8f6f 	isb	sy
 810b5e2:	f3bf 8f4f 	dsb	sy
 810b5e6:	60fb      	str	r3, [r7, #12]
 810b5e8:	e7fe      	b.n	810b5e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810b5ea:	f7fe fd27 	bl	810a03c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810b5ee:	4b1d      	ldr	r3, [pc, #116]	; (810b664 <xTaskCheckForTimeOut+0xb8>)
 810b5f0:	681b      	ldr	r3, [r3, #0]
 810b5f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810b5f4:	687b      	ldr	r3, [r7, #4]
 810b5f6:	685b      	ldr	r3, [r3, #4]
 810b5f8:	69ba      	ldr	r2, [r7, #24]
 810b5fa:	1ad3      	subs	r3, r2, r3
 810b5fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810b5fe:	683b      	ldr	r3, [r7, #0]
 810b600:	681b      	ldr	r3, [r3, #0]
 810b602:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b606:	d102      	bne.n	810b60e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810b608:	2300      	movs	r3, #0
 810b60a:	61fb      	str	r3, [r7, #28]
 810b60c:	e023      	b.n	810b656 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810b60e:	687b      	ldr	r3, [r7, #4]
 810b610:	681a      	ldr	r2, [r3, #0]
 810b612:	4b15      	ldr	r3, [pc, #84]	; (810b668 <xTaskCheckForTimeOut+0xbc>)
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	429a      	cmp	r2, r3
 810b618:	d007      	beq.n	810b62a <xTaskCheckForTimeOut+0x7e>
 810b61a:	687b      	ldr	r3, [r7, #4]
 810b61c:	685b      	ldr	r3, [r3, #4]
 810b61e:	69ba      	ldr	r2, [r7, #24]
 810b620:	429a      	cmp	r2, r3
 810b622:	d302      	bcc.n	810b62a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810b624:	2301      	movs	r3, #1
 810b626:	61fb      	str	r3, [r7, #28]
 810b628:	e015      	b.n	810b656 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810b62a:	683b      	ldr	r3, [r7, #0]
 810b62c:	681b      	ldr	r3, [r3, #0]
 810b62e:	697a      	ldr	r2, [r7, #20]
 810b630:	429a      	cmp	r2, r3
 810b632:	d20b      	bcs.n	810b64c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810b634:	683b      	ldr	r3, [r7, #0]
 810b636:	681a      	ldr	r2, [r3, #0]
 810b638:	697b      	ldr	r3, [r7, #20]
 810b63a:	1ad2      	subs	r2, r2, r3
 810b63c:	683b      	ldr	r3, [r7, #0]
 810b63e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810b640:	6878      	ldr	r0, [r7, #4]
 810b642:	f7ff ff9d 	bl	810b580 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810b646:	2300      	movs	r3, #0
 810b648:	61fb      	str	r3, [r7, #28]
 810b64a:	e004      	b.n	810b656 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810b64c:	683b      	ldr	r3, [r7, #0]
 810b64e:	2200      	movs	r2, #0
 810b650:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810b652:	2301      	movs	r3, #1
 810b654:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810b656:	f7fe fd1f 	bl	810a098 <vPortExitCritical>

	return xReturn;
 810b65a:	69fb      	ldr	r3, [r7, #28]
}
 810b65c:	4618      	mov	r0, r3
 810b65e:	3720      	adds	r7, #32
 810b660:	46bd      	mov	sp, r7
 810b662:	bd80      	pop	{r7, pc}
 810b664:	100049c4 	.word	0x100049c4
 810b668:	100049d8 	.word	0x100049d8

0810b66c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810b66c:	b480      	push	{r7}
 810b66e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810b670:	4b03      	ldr	r3, [pc, #12]	; (810b680 <vTaskMissedYield+0x14>)
 810b672:	2201      	movs	r2, #1
 810b674:	601a      	str	r2, [r3, #0]
}
 810b676:	bf00      	nop
 810b678:	46bd      	mov	sp, r7
 810b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b67e:	4770      	bx	lr
 810b680:	100049d4 	.word	0x100049d4

0810b684 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810b684:	b580      	push	{r7, lr}
 810b686:	b082      	sub	sp, #8
 810b688:	af00      	add	r7, sp, #0
 810b68a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810b68c:	f000 f852 	bl	810b734 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810b690:	4b06      	ldr	r3, [pc, #24]	; (810b6ac <prvIdleTask+0x28>)
 810b692:	681b      	ldr	r3, [r3, #0]
 810b694:	2b01      	cmp	r3, #1
 810b696:	d9f9      	bls.n	810b68c <prvIdleTask+0x8>
			{
				taskYIELD();
 810b698:	4b05      	ldr	r3, [pc, #20]	; (810b6b0 <prvIdleTask+0x2c>)
 810b69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810b69e:	601a      	str	r2, [r3, #0]
 810b6a0:	f3bf 8f4f 	dsb	sy
 810b6a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810b6a8:	e7f0      	b.n	810b68c <prvIdleTask+0x8>
 810b6aa:	bf00      	nop
 810b6ac:	100044f0 	.word	0x100044f0
 810b6b0:	e000ed04 	.word	0xe000ed04

0810b6b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810b6b4:	b580      	push	{r7, lr}
 810b6b6:	b082      	sub	sp, #8
 810b6b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b6ba:	2300      	movs	r3, #0
 810b6bc:	607b      	str	r3, [r7, #4]
 810b6be:	e00c      	b.n	810b6da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810b6c0:	687a      	ldr	r2, [r7, #4]
 810b6c2:	4613      	mov	r3, r2
 810b6c4:	009b      	lsls	r3, r3, #2
 810b6c6:	4413      	add	r3, r2
 810b6c8:	009b      	lsls	r3, r3, #2
 810b6ca:	4a12      	ldr	r2, [pc, #72]	; (810b714 <prvInitialiseTaskLists+0x60>)
 810b6cc:	4413      	add	r3, r2
 810b6ce:	4618      	mov	r0, r3
 810b6d0:	f7fe fadc 	bl	8109c8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810b6d4:	687b      	ldr	r3, [r7, #4]
 810b6d6:	3301      	adds	r3, #1
 810b6d8:	607b      	str	r3, [r7, #4]
 810b6da:	687b      	ldr	r3, [r7, #4]
 810b6dc:	2b37      	cmp	r3, #55	; 0x37
 810b6de:	d9ef      	bls.n	810b6c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810b6e0:	480d      	ldr	r0, [pc, #52]	; (810b718 <prvInitialiseTaskLists+0x64>)
 810b6e2:	f7fe fad3 	bl	8109c8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810b6e6:	480d      	ldr	r0, [pc, #52]	; (810b71c <prvInitialiseTaskLists+0x68>)
 810b6e8:	f7fe fad0 	bl	8109c8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810b6ec:	480c      	ldr	r0, [pc, #48]	; (810b720 <prvInitialiseTaskLists+0x6c>)
 810b6ee:	f7fe facd 	bl	8109c8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810b6f2:	480c      	ldr	r0, [pc, #48]	; (810b724 <prvInitialiseTaskLists+0x70>)
 810b6f4:	f7fe faca 	bl	8109c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810b6f8:	480b      	ldr	r0, [pc, #44]	; (810b728 <prvInitialiseTaskLists+0x74>)
 810b6fa:	f7fe fac7 	bl	8109c8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810b6fe:	4b0b      	ldr	r3, [pc, #44]	; (810b72c <prvInitialiseTaskLists+0x78>)
 810b700:	4a05      	ldr	r2, [pc, #20]	; (810b718 <prvInitialiseTaskLists+0x64>)
 810b702:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810b704:	4b0a      	ldr	r3, [pc, #40]	; (810b730 <prvInitialiseTaskLists+0x7c>)
 810b706:	4a05      	ldr	r2, [pc, #20]	; (810b71c <prvInitialiseTaskLists+0x68>)
 810b708:	601a      	str	r2, [r3, #0]
}
 810b70a:	bf00      	nop
 810b70c:	3708      	adds	r7, #8
 810b70e:	46bd      	mov	sp, r7
 810b710:	bd80      	pop	{r7, pc}
 810b712:	bf00      	nop
 810b714:	100044f0 	.word	0x100044f0
 810b718:	10004950 	.word	0x10004950
 810b71c:	10004964 	.word	0x10004964
 810b720:	10004980 	.word	0x10004980
 810b724:	10004994 	.word	0x10004994
 810b728:	100049ac 	.word	0x100049ac
 810b72c:	10004978 	.word	0x10004978
 810b730:	1000497c 	.word	0x1000497c

0810b734 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810b734:	b580      	push	{r7, lr}
 810b736:	b082      	sub	sp, #8
 810b738:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b73a:	e019      	b.n	810b770 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810b73c:	f7fe fc7e 	bl	810a03c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b740:	4b0f      	ldr	r3, [pc, #60]	; (810b780 <prvCheckTasksWaitingTermination+0x4c>)
 810b742:	68db      	ldr	r3, [r3, #12]
 810b744:	68db      	ldr	r3, [r3, #12]
 810b746:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810b748:	687b      	ldr	r3, [r7, #4]
 810b74a:	3304      	adds	r3, #4
 810b74c:	4618      	mov	r0, r3
 810b74e:	f7fe fb27 	bl	8109da0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810b752:	4b0c      	ldr	r3, [pc, #48]	; (810b784 <prvCheckTasksWaitingTermination+0x50>)
 810b754:	681b      	ldr	r3, [r3, #0]
 810b756:	3b01      	subs	r3, #1
 810b758:	4a0a      	ldr	r2, [pc, #40]	; (810b784 <prvCheckTasksWaitingTermination+0x50>)
 810b75a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810b75c:	4b0a      	ldr	r3, [pc, #40]	; (810b788 <prvCheckTasksWaitingTermination+0x54>)
 810b75e:	681b      	ldr	r3, [r3, #0]
 810b760:	3b01      	subs	r3, #1
 810b762:	4a09      	ldr	r2, [pc, #36]	; (810b788 <prvCheckTasksWaitingTermination+0x54>)
 810b764:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810b766:	f7fe fc97 	bl	810a098 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810b76a:	6878      	ldr	r0, [r7, #4]
 810b76c:	f000 f80e 	bl	810b78c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810b770:	4b05      	ldr	r3, [pc, #20]	; (810b788 <prvCheckTasksWaitingTermination+0x54>)
 810b772:	681b      	ldr	r3, [r3, #0]
 810b774:	2b00      	cmp	r3, #0
 810b776:	d1e1      	bne.n	810b73c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810b778:	bf00      	nop
 810b77a:	3708      	adds	r7, #8
 810b77c:	46bd      	mov	sp, r7
 810b77e:	bd80      	pop	{r7, pc}
 810b780:	10004994 	.word	0x10004994
 810b784:	100049c0 	.word	0x100049c0
 810b788:	100049a8 	.word	0x100049a8

0810b78c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810b78c:	b580      	push	{r7, lr}
 810b78e:	b084      	sub	sp, #16
 810b790:	af00      	add	r7, sp, #0
 810b792:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810b794:	687b      	ldr	r3, [r7, #4]
 810b796:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810b79a:	2b00      	cmp	r3, #0
 810b79c:	d108      	bne.n	810b7b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810b79e:	687b      	ldr	r3, [r7, #4]
 810b7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810b7a2:	4618      	mov	r0, r3
 810b7a4:	f7fe f95e 	bl	8109a64 <vPortFree>
				vPortFree( pxTCB );
 810b7a8:	6878      	ldr	r0, [r7, #4]
 810b7aa:	f7fe f95b 	bl	8109a64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810b7ae:	e017      	b.n	810b7e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810b7b0:	687b      	ldr	r3, [r7, #4]
 810b7b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810b7b6:	2b01      	cmp	r3, #1
 810b7b8:	d103      	bne.n	810b7c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810b7ba:	6878      	ldr	r0, [r7, #4]
 810b7bc:	f7fe f952 	bl	8109a64 <vPortFree>
	}
 810b7c0:	e00e      	b.n	810b7e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810b7c2:	687b      	ldr	r3, [r7, #4]
 810b7c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810b7c8:	2b02      	cmp	r3, #2
 810b7ca:	d009      	beq.n	810b7e0 <prvDeleteTCB+0x54>
 810b7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b7d0:	f383 8811 	msr	BASEPRI, r3
 810b7d4:	f3bf 8f6f 	isb	sy
 810b7d8:	f3bf 8f4f 	dsb	sy
 810b7dc:	60fb      	str	r3, [r7, #12]
 810b7de:	e7fe      	b.n	810b7de <prvDeleteTCB+0x52>
	}
 810b7e0:	bf00      	nop
 810b7e2:	3710      	adds	r7, #16
 810b7e4:	46bd      	mov	sp, r7
 810b7e6:	bd80      	pop	{r7, pc}

0810b7e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810b7e8:	b480      	push	{r7}
 810b7ea:	b083      	sub	sp, #12
 810b7ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810b7ee:	4b0c      	ldr	r3, [pc, #48]	; (810b820 <prvResetNextTaskUnblockTime+0x38>)
 810b7f0:	681b      	ldr	r3, [r3, #0]
 810b7f2:	681b      	ldr	r3, [r3, #0]
 810b7f4:	2b00      	cmp	r3, #0
 810b7f6:	d104      	bne.n	810b802 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810b7f8:	4b0a      	ldr	r3, [pc, #40]	; (810b824 <prvResetNextTaskUnblockTime+0x3c>)
 810b7fa:	f04f 32ff 	mov.w	r2, #4294967295
 810b7fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810b800:	e008      	b.n	810b814 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810b802:	4b07      	ldr	r3, [pc, #28]	; (810b820 <prvResetNextTaskUnblockTime+0x38>)
 810b804:	681b      	ldr	r3, [r3, #0]
 810b806:	68db      	ldr	r3, [r3, #12]
 810b808:	68db      	ldr	r3, [r3, #12]
 810b80a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810b80c:	687b      	ldr	r3, [r7, #4]
 810b80e:	685b      	ldr	r3, [r3, #4]
 810b810:	4a04      	ldr	r2, [pc, #16]	; (810b824 <prvResetNextTaskUnblockTime+0x3c>)
 810b812:	6013      	str	r3, [r2, #0]
}
 810b814:	bf00      	nop
 810b816:	370c      	adds	r7, #12
 810b818:	46bd      	mov	sp, r7
 810b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b81e:	4770      	bx	lr
 810b820:	10004978 	.word	0x10004978
 810b824:	100049e0 	.word	0x100049e0

0810b828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810b828:	b480      	push	{r7}
 810b82a:	b083      	sub	sp, #12
 810b82c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810b82e:	4b0b      	ldr	r3, [pc, #44]	; (810b85c <xTaskGetSchedulerState+0x34>)
 810b830:	681b      	ldr	r3, [r3, #0]
 810b832:	2b00      	cmp	r3, #0
 810b834:	d102      	bne.n	810b83c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810b836:	2301      	movs	r3, #1
 810b838:	607b      	str	r3, [r7, #4]
 810b83a:	e008      	b.n	810b84e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810b83c:	4b08      	ldr	r3, [pc, #32]	; (810b860 <xTaskGetSchedulerState+0x38>)
 810b83e:	681b      	ldr	r3, [r3, #0]
 810b840:	2b00      	cmp	r3, #0
 810b842:	d102      	bne.n	810b84a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810b844:	2302      	movs	r3, #2
 810b846:	607b      	str	r3, [r7, #4]
 810b848:	e001      	b.n	810b84e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810b84a:	2300      	movs	r3, #0
 810b84c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810b84e:	687b      	ldr	r3, [r7, #4]
	}
 810b850:	4618      	mov	r0, r3
 810b852:	370c      	adds	r7, #12
 810b854:	46bd      	mov	sp, r7
 810b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b85a:	4770      	bx	lr
 810b85c:	100049cc 	.word	0x100049cc
 810b860:	100049e8 	.word	0x100049e8

0810b864 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810b864:	b580      	push	{r7, lr}
 810b866:	b086      	sub	sp, #24
 810b868:	af00      	add	r7, sp, #0
 810b86a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810b86c:	687b      	ldr	r3, [r7, #4]
 810b86e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810b870:	2300      	movs	r3, #0
 810b872:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810b874:	687b      	ldr	r3, [r7, #4]
 810b876:	2b00      	cmp	r3, #0
 810b878:	d054      	beq.n	810b924 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810b87a:	4b2d      	ldr	r3, [pc, #180]	; (810b930 <xTaskPriorityDisinherit+0xcc>)
 810b87c:	681b      	ldr	r3, [r3, #0]
 810b87e:	693a      	ldr	r2, [r7, #16]
 810b880:	429a      	cmp	r2, r3
 810b882:	d009      	beq.n	810b898 <xTaskPriorityDisinherit+0x34>
 810b884:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b888:	f383 8811 	msr	BASEPRI, r3
 810b88c:	f3bf 8f6f 	isb	sy
 810b890:	f3bf 8f4f 	dsb	sy
 810b894:	60fb      	str	r3, [r7, #12]
 810b896:	e7fe      	b.n	810b896 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810b898:	693b      	ldr	r3, [r7, #16]
 810b89a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b89c:	2b00      	cmp	r3, #0
 810b89e:	d109      	bne.n	810b8b4 <xTaskPriorityDisinherit+0x50>
 810b8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 810b8a4:	f383 8811 	msr	BASEPRI, r3
 810b8a8:	f3bf 8f6f 	isb	sy
 810b8ac:	f3bf 8f4f 	dsb	sy
 810b8b0:	60bb      	str	r3, [r7, #8]
 810b8b2:	e7fe      	b.n	810b8b2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810b8b4:	693b      	ldr	r3, [r7, #16]
 810b8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b8b8:	1e5a      	subs	r2, r3, #1
 810b8ba:	693b      	ldr	r3, [r7, #16]
 810b8bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810b8be:	693b      	ldr	r3, [r7, #16]
 810b8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b8c2:	693b      	ldr	r3, [r7, #16]
 810b8c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b8c6:	429a      	cmp	r2, r3
 810b8c8:	d02c      	beq.n	810b924 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810b8ca:	693b      	ldr	r3, [r7, #16]
 810b8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b8ce:	2b00      	cmp	r3, #0
 810b8d0:	d128      	bne.n	810b924 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b8d2:	693b      	ldr	r3, [r7, #16]
 810b8d4:	3304      	adds	r3, #4
 810b8d6:	4618      	mov	r0, r3
 810b8d8:	f7fe fa62 	bl	8109da0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810b8dc:	693b      	ldr	r3, [r7, #16]
 810b8de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810b8e0:	693b      	ldr	r3, [r7, #16]
 810b8e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810b8e4:	693b      	ldr	r3, [r7, #16]
 810b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b8e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810b8ec:	693b      	ldr	r3, [r7, #16]
 810b8ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810b8f0:	693b      	ldr	r3, [r7, #16]
 810b8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b8f4:	4b0f      	ldr	r3, [pc, #60]	; (810b934 <xTaskPriorityDisinherit+0xd0>)
 810b8f6:	681b      	ldr	r3, [r3, #0]
 810b8f8:	429a      	cmp	r2, r3
 810b8fa:	d903      	bls.n	810b904 <xTaskPriorityDisinherit+0xa0>
 810b8fc:	693b      	ldr	r3, [r7, #16]
 810b8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b900:	4a0c      	ldr	r2, [pc, #48]	; (810b934 <xTaskPriorityDisinherit+0xd0>)
 810b902:	6013      	str	r3, [r2, #0]
 810b904:	693b      	ldr	r3, [r7, #16]
 810b906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810b908:	4613      	mov	r3, r2
 810b90a:	009b      	lsls	r3, r3, #2
 810b90c:	4413      	add	r3, r2
 810b90e:	009b      	lsls	r3, r3, #2
 810b910:	4a09      	ldr	r2, [pc, #36]	; (810b938 <xTaskPriorityDisinherit+0xd4>)
 810b912:	441a      	add	r2, r3
 810b914:	693b      	ldr	r3, [r7, #16]
 810b916:	3304      	adds	r3, #4
 810b918:	4619      	mov	r1, r3
 810b91a:	4610      	mov	r0, r2
 810b91c:	f7fe f9e3 	bl	8109ce6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810b920:	2301      	movs	r3, #1
 810b922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810b924:	697b      	ldr	r3, [r7, #20]
	}
 810b926:	4618      	mov	r0, r3
 810b928:	3718      	adds	r7, #24
 810b92a:	46bd      	mov	sp, r7
 810b92c:	bd80      	pop	{r7, pc}
 810b92e:	bf00      	nop
 810b930:	100044ec 	.word	0x100044ec
 810b934:	100049c8 	.word	0x100049c8
 810b938:	100044f0 	.word	0x100044f0

0810b93c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810b93c:	b580      	push	{r7, lr}
 810b93e:	b084      	sub	sp, #16
 810b940:	af00      	add	r7, sp, #0
 810b942:	6078      	str	r0, [r7, #4]
 810b944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810b946:	4b21      	ldr	r3, [pc, #132]	; (810b9cc <prvAddCurrentTaskToDelayedList+0x90>)
 810b948:	681b      	ldr	r3, [r3, #0]
 810b94a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810b94c:	4b20      	ldr	r3, [pc, #128]	; (810b9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 810b94e:	681b      	ldr	r3, [r3, #0]
 810b950:	3304      	adds	r3, #4
 810b952:	4618      	mov	r0, r3
 810b954:	f7fe fa24 	bl	8109da0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810b958:	687b      	ldr	r3, [r7, #4]
 810b95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b95e:	d10a      	bne.n	810b976 <prvAddCurrentTaskToDelayedList+0x3a>
 810b960:	683b      	ldr	r3, [r7, #0]
 810b962:	2b00      	cmp	r3, #0
 810b964:	d007      	beq.n	810b976 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b966:	4b1a      	ldr	r3, [pc, #104]	; (810b9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 810b968:	681b      	ldr	r3, [r3, #0]
 810b96a:	3304      	adds	r3, #4
 810b96c:	4619      	mov	r1, r3
 810b96e:	4819      	ldr	r0, [pc, #100]	; (810b9d4 <prvAddCurrentTaskToDelayedList+0x98>)
 810b970:	f7fe f9b9 	bl	8109ce6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810b974:	e026      	b.n	810b9c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810b976:	68fa      	ldr	r2, [r7, #12]
 810b978:	687b      	ldr	r3, [r7, #4]
 810b97a:	4413      	add	r3, r2
 810b97c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810b97e:	4b14      	ldr	r3, [pc, #80]	; (810b9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 810b980:	681b      	ldr	r3, [r3, #0]
 810b982:	68ba      	ldr	r2, [r7, #8]
 810b984:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810b986:	68ba      	ldr	r2, [r7, #8]
 810b988:	68fb      	ldr	r3, [r7, #12]
 810b98a:	429a      	cmp	r2, r3
 810b98c:	d209      	bcs.n	810b9a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b98e:	4b12      	ldr	r3, [pc, #72]	; (810b9d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 810b990:	681a      	ldr	r2, [r3, #0]
 810b992:	4b0f      	ldr	r3, [pc, #60]	; (810b9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 810b994:	681b      	ldr	r3, [r3, #0]
 810b996:	3304      	adds	r3, #4
 810b998:	4619      	mov	r1, r3
 810b99a:	4610      	mov	r0, r2
 810b99c:	f7fe f9c7 	bl	8109d2e <vListInsert>
}
 810b9a0:	e010      	b.n	810b9c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810b9a2:	4b0e      	ldr	r3, [pc, #56]	; (810b9dc <prvAddCurrentTaskToDelayedList+0xa0>)
 810b9a4:	681a      	ldr	r2, [r3, #0]
 810b9a6:	4b0a      	ldr	r3, [pc, #40]	; (810b9d0 <prvAddCurrentTaskToDelayedList+0x94>)
 810b9a8:	681b      	ldr	r3, [r3, #0]
 810b9aa:	3304      	adds	r3, #4
 810b9ac:	4619      	mov	r1, r3
 810b9ae:	4610      	mov	r0, r2
 810b9b0:	f7fe f9bd 	bl	8109d2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810b9b4:	4b0a      	ldr	r3, [pc, #40]	; (810b9e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b9b6:	681b      	ldr	r3, [r3, #0]
 810b9b8:	68ba      	ldr	r2, [r7, #8]
 810b9ba:	429a      	cmp	r2, r3
 810b9bc:	d202      	bcs.n	810b9c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810b9be:	4a08      	ldr	r2, [pc, #32]	; (810b9e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810b9c0:	68bb      	ldr	r3, [r7, #8]
 810b9c2:	6013      	str	r3, [r2, #0]
}
 810b9c4:	bf00      	nop
 810b9c6:	3710      	adds	r7, #16
 810b9c8:	46bd      	mov	sp, r7
 810b9ca:	bd80      	pop	{r7, pc}
 810b9cc:	100049c4 	.word	0x100049c4
 810b9d0:	100044ec 	.word	0x100044ec
 810b9d4:	100049ac 	.word	0x100049ac
 810b9d8:	1000497c 	.word	0x1000497c
 810b9dc:	10004978 	.word	0x10004978
 810b9e0:	100049e0 	.word	0x100049e0

0810b9e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810b9e4:	b580      	push	{r7, lr}
 810b9e6:	b08a      	sub	sp, #40	; 0x28
 810b9e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810b9ea:	2300      	movs	r3, #0
 810b9ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810b9ee:	f000 faff 	bl	810bff0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810b9f2:	4b1c      	ldr	r3, [pc, #112]	; (810ba64 <xTimerCreateTimerTask+0x80>)
 810b9f4:	681b      	ldr	r3, [r3, #0]
 810b9f6:	2b00      	cmp	r3, #0
 810b9f8:	d021      	beq.n	810ba3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810b9fa:	2300      	movs	r3, #0
 810b9fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810b9fe:	2300      	movs	r3, #0
 810ba00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810ba02:	1d3a      	adds	r2, r7, #4
 810ba04:	f107 0108 	add.w	r1, r7, #8
 810ba08:	f107 030c 	add.w	r3, r7, #12
 810ba0c:	4618      	mov	r0, r3
 810ba0e:	f7fd ff4d 	bl	81098ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810ba12:	6879      	ldr	r1, [r7, #4]
 810ba14:	68bb      	ldr	r3, [r7, #8]
 810ba16:	68fa      	ldr	r2, [r7, #12]
 810ba18:	9202      	str	r2, [sp, #8]
 810ba1a:	9301      	str	r3, [sp, #4]
 810ba1c:	2302      	movs	r3, #2
 810ba1e:	9300      	str	r3, [sp, #0]
 810ba20:	2300      	movs	r3, #0
 810ba22:	460a      	mov	r2, r1
 810ba24:	4910      	ldr	r1, [pc, #64]	; (810ba68 <xTimerCreateTimerTask+0x84>)
 810ba26:	4811      	ldr	r0, [pc, #68]	; (810ba6c <xTimerCreateTimerTask+0x88>)
 810ba28:	f7ff f8f6 	bl	810ac18 <xTaskCreateStatic>
 810ba2c:	4602      	mov	r2, r0
 810ba2e:	4b10      	ldr	r3, [pc, #64]	; (810ba70 <xTimerCreateTimerTask+0x8c>)
 810ba30:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810ba32:	4b0f      	ldr	r3, [pc, #60]	; (810ba70 <xTimerCreateTimerTask+0x8c>)
 810ba34:	681b      	ldr	r3, [r3, #0]
 810ba36:	2b00      	cmp	r3, #0
 810ba38:	d001      	beq.n	810ba3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810ba3a:	2301      	movs	r3, #1
 810ba3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810ba3e:	697b      	ldr	r3, [r7, #20]
 810ba40:	2b00      	cmp	r3, #0
 810ba42:	d109      	bne.n	810ba58 <xTimerCreateTimerTask+0x74>
 810ba44:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ba48:	f383 8811 	msr	BASEPRI, r3
 810ba4c:	f3bf 8f6f 	isb	sy
 810ba50:	f3bf 8f4f 	dsb	sy
 810ba54:	613b      	str	r3, [r7, #16]
 810ba56:	e7fe      	b.n	810ba56 <xTimerCreateTimerTask+0x72>
	return xReturn;
 810ba58:	697b      	ldr	r3, [r7, #20]
}
 810ba5a:	4618      	mov	r0, r3
 810ba5c:	3718      	adds	r7, #24
 810ba5e:	46bd      	mov	sp, r7
 810ba60:	bd80      	pop	{r7, pc}
 810ba62:	bf00      	nop
 810ba64:	10004a1c 	.word	0x10004a1c
 810ba68:	0810dc00 	.word	0x0810dc00
 810ba6c:	0810bba5 	.word	0x0810bba5
 810ba70:	10004a20 	.word	0x10004a20

0810ba74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810ba74:	b580      	push	{r7, lr}
 810ba76:	b08a      	sub	sp, #40	; 0x28
 810ba78:	af00      	add	r7, sp, #0
 810ba7a:	60f8      	str	r0, [r7, #12]
 810ba7c:	60b9      	str	r1, [r7, #8]
 810ba7e:	607a      	str	r2, [r7, #4]
 810ba80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810ba82:	2300      	movs	r3, #0
 810ba84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810ba86:	68fb      	ldr	r3, [r7, #12]
 810ba88:	2b00      	cmp	r3, #0
 810ba8a:	d109      	bne.n	810baa0 <xTimerGenericCommand+0x2c>
 810ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ba90:	f383 8811 	msr	BASEPRI, r3
 810ba94:	f3bf 8f6f 	isb	sy
 810ba98:	f3bf 8f4f 	dsb	sy
 810ba9c:	623b      	str	r3, [r7, #32]
 810ba9e:	e7fe      	b.n	810ba9e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810baa0:	4b19      	ldr	r3, [pc, #100]	; (810bb08 <xTimerGenericCommand+0x94>)
 810baa2:	681b      	ldr	r3, [r3, #0]
 810baa4:	2b00      	cmp	r3, #0
 810baa6:	d02a      	beq.n	810bafe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810baa8:	68bb      	ldr	r3, [r7, #8]
 810baaa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810baac:	687b      	ldr	r3, [r7, #4]
 810baae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810bab0:	68fb      	ldr	r3, [r7, #12]
 810bab2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810bab4:	68bb      	ldr	r3, [r7, #8]
 810bab6:	2b05      	cmp	r3, #5
 810bab8:	dc18      	bgt.n	810baec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810baba:	f7ff feb5 	bl	810b828 <xTaskGetSchedulerState>
 810babe:	4603      	mov	r3, r0
 810bac0:	2b02      	cmp	r3, #2
 810bac2:	d109      	bne.n	810bad8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810bac4:	4b10      	ldr	r3, [pc, #64]	; (810bb08 <xTimerGenericCommand+0x94>)
 810bac6:	6818      	ldr	r0, [r3, #0]
 810bac8:	f107 0110 	add.w	r1, r7, #16
 810bacc:	2300      	movs	r3, #0
 810bace:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810bad0:	f7fe fccc 	bl	810a46c <xQueueGenericSend>
 810bad4:	6278      	str	r0, [r7, #36]	; 0x24
 810bad6:	e012      	b.n	810bafe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810bad8:	4b0b      	ldr	r3, [pc, #44]	; (810bb08 <xTimerGenericCommand+0x94>)
 810bada:	6818      	ldr	r0, [r3, #0]
 810badc:	f107 0110 	add.w	r1, r7, #16
 810bae0:	2300      	movs	r3, #0
 810bae2:	2200      	movs	r2, #0
 810bae4:	f7fe fcc2 	bl	810a46c <xQueueGenericSend>
 810bae8:	6278      	str	r0, [r7, #36]	; 0x24
 810baea:	e008      	b.n	810bafe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810baec:	4b06      	ldr	r3, [pc, #24]	; (810bb08 <xTimerGenericCommand+0x94>)
 810baee:	6818      	ldr	r0, [r3, #0]
 810baf0:	f107 0110 	add.w	r1, r7, #16
 810baf4:	2300      	movs	r3, #0
 810baf6:	683a      	ldr	r2, [r7, #0]
 810baf8:	f7fe fdb2 	bl	810a660 <xQueueGenericSendFromISR>
 810bafc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810bb00:	4618      	mov	r0, r3
 810bb02:	3728      	adds	r7, #40	; 0x28
 810bb04:	46bd      	mov	sp, r7
 810bb06:	bd80      	pop	{r7, pc}
 810bb08:	10004a1c 	.word	0x10004a1c

0810bb0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810bb0c:	b580      	push	{r7, lr}
 810bb0e:	b088      	sub	sp, #32
 810bb10:	af02      	add	r7, sp, #8
 810bb12:	6078      	str	r0, [r7, #4]
 810bb14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bb16:	4b22      	ldr	r3, [pc, #136]	; (810bba0 <prvProcessExpiredTimer+0x94>)
 810bb18:	681b      	ldr	r3, [r3, #0]
 810bb1a:	68db      	ldr	r3, [r3, #12]
 810bb1c:	68db      	ldr	r3, [r3, #12]
 810bb1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810bb20:	697b      	ldr	r3, [r7, #20]
 810bb22:	3304      	adds	r3, #4
 810bb24:	4618      	mov	r0, r3
 810bb26:	f7fe f93b 	bl	8109da0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810bb2a:	697b      	ldr	r3, [r7, #20]
 810bb2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bb30:	f003 0304 	and.w	r3, r3, #4
 810bb34:	2b00      	cmp	r3, #0
 810bb36:	d021      	beq.n	810bb7c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810bb38:	697b      	ldr	r3, [r7, #20]
 810bb3a:	699a      	ldr	r2, [r3, #24]
 810bb3c:	687b      	ldr	r3, [r7, #4]
 810bb3e:	18d1      	adds	r1, r2, r3
 810bb40:	687b      	ldr	r3, [r7, #4]
 810bb42:	683a      	ldr	r2, [r7, #0]
 810bb44:	6978      	ldr	r0, [r7, #20]
 810bb46:	f000 f8d1 	bl	810bcec <prvInsertTimerInActiveList>
 810bb4a:	4603      	mov	r3, r0
 810bb4c:	2b00      	cmp	r3, #0
 810bb4e:	d01e      	beq.n	810bb8e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810bb50:	2300      	movs	r3, #0
 810bb52:	9300      	str	r3, [sp, #0]
 810bb54:	2300      	movs	r3, #0
 810bb56:	687a      	ldr	r2, [r7, #4]
 810bb58:	2100      	movs	r1, #0
 810bb5a:	6978      	ldr	r0, [r7, #20]
 810bb5c:	f7ff ff8a 	bl	810ba74 <xTimerGenericCommand>
 810bb60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810bb62:	693b      	ldr	r3, [r7, #16]
 810bb64:	2b00      	cmp	r3, #0
 810bb66:	d112      	bne.n	810bb8e <prvProcessExpiredTimer+0x82>
 810bb68:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bb6c:	f383 8811 	msr	BASEPRI, r3
 810bb70:	f3bf 8f6f 	isb	sy
 810bb74:	f3bf 8f4f 	dsb	sy
 810bb78:	60fb      	str	r3, [r7, #12]
 810bb7a:	e7fe      	b.n	810bb7a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810bb7c:	697b      	ldr	r3, [r7, #20]
 810bb7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bb82:	f023 0301 	bic.w	r3, r3, #1
 810bb86:	b2da      	uxtb	r2, r3
 810bb88:	697b      	ldr	r3, [r7, #20]
 810bb8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810bb8e:	697b      	ldr	r3, [r7, #20]
 810bb90:	6a1b      	ldr	r3, [r3, #32]
 810bb92:	6978      	ldr	r0, [r7, #20]
 810bb94:	4798      	blx	r3
}
 810bb96:	bf00      	nop
 810bb98:	3718      	adds	r7, #24
 810bb9a:	46bd      	mov	sp, r7
 810bb9c:	bd80      	pop	{r7, pc}
 810bb9e:	bf00      	nop
 810bba0:	10004a14 	.word	0x10004a14

0810bba4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810bba4:	b580      	push	{r7, lr}
 810bba6:	b084      	sub	sp, #16
 810bba8:	af00      	add	r7, sp, #0
 810bbaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810bbac:	f107 0308 	add.w	r3, r7, #8
 810bbb0:	4618      	mov	r0, r3
 810bbb2:	f000 f857 	bl	810bc64 <prvGetNextExpireTime>
 810bbb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810bbb8:	68bb      	ldr	r3, [r7, #8]
 810bbba:	4619      	mov	r1, r3
 810bbbc:	68f8      	ldr	r0, [r7, #12]
 810bbbe:	f000 f803 	bl	810bbc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810bbc2:	f000 f8d5 	bl	810bd70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810bbc6:	e7f1      	b.n	810bbac <prvTimerTask+0x8>

0810bbc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810bbc8:	b580      	push	{r7, lr}
 810bbca:	b084      	sub	sp, #16
 810bbcc:	af00      	add	r7, sp, #0
 810bbce:	6078      	str	r0, [r7, #4]
 810bbd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810bbd2:	f7ff fa57 	bl	810b084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810bbd6:	f107 0308 	add.w	r3, r7, #8
 810bbda:	4618      	mov	r0, r3
 810bbdc:	f000 f866 	bl	810bcac <prvSampleTimeNow>
 810bbe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810bbe2:	68bb      	ldr	r3, [r7, #8]
 810bbe4:	2b00      	cmp	r3, #0
 810bbe6:	d130      	bne.n	810bc4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810bbe8:	683b      	ldr	r3, [r7, #0]
 810bbea:	2b00      	cmp	r3, #0
 810bbec:	d10a      	bne.n	810bc04 <prvProcessTimerOrBlockTask+0x3c>
 810bbee:	687a      	ldr	r2, [r7, #4]
 810bbf0:	68fb      	ldr	r3, [r7, #12]
 810bbf2:	429a      	cmp	r2, r3
 810bbf4:	d806      	bhi.n	810bc04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810bbf6:	f7ff fa53 	bl	810b0a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810bbfa:	68f9      	ldr	r1, [r7, #12]
 810bbfc:	6878      	ldr	r0, [r7, #4]
 810bbfe:	f7ff ff85 	bl	810bb0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810bc02:	e024      	b.n	810bc4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810bc04:	683b      	ldr	r3, [r7, #0]
 810bc06:	2b00      	cmp	r3, #0
 810bc08:	d008      	beq.n	810bc1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810bc0a:	4b13      	ldr	r3, [pc, #76]	; (810bc58 <prvProcessTimerOrBlockTask+0x90>)
 810bc0c:	681b      	ldr	r3, [r3, #0]
 810bc0e:	681b      	ldr	r3, [r3, #0]
 810bc10:	2b00      	cmp	r3, #0
 810bc12:	d101      	bne.n	810bc18 <prvProcessTimerOrBlockTask+0x50>
 810bc14:	2301      	movs	r3, #1
 810bc16:	e000      	b.n	810bc1a <prvProcessTimerOrBlockTask+0x52>
 810bc18:	2300      	movs	r3, #0
 810bc1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810bc1c:	4b0f      	ldr	r3, [pc, #60]	; (810bc5c <prvProcessTimerOrBlockTask+0x94>)
 810bc1e:	6818      	ldr	r0, [r3, #0]
 810bc20:	687a      	ldr	r2, [r7, #4]
 810bc22:	68fb      	ldr	r3, [r7, #12]
 810bc24:	1ad3      	subs	r3, r2, r3
 810bc26:	683a      	ldr	r2, [r7, #0]
 810bc28:	4619      	mov	r1, r3
 810bc2a:	f7fe ffc1 	bl	810abb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810bc2e:	f7ff fa37 	bl	810b0a0 <xTaskResumeAll>
 810bc32:	4603      	mov	r3, r0
 810bc34:	2b00      	cmp	r3, #0
 810bc36:	d10a      	bne.n	810bc4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810bc38:	4b09      	ldr	r3, [pc, #36]	; (810bc60 <prvProcessTimerOrBlockTask+0x98>)
 810bc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810bc3e:	601a      	str	r2, [r3, #0]
 810bc40:	f3bf 8f4f 	dsb	sy
 810bc44:	f3bf 8f6f 	isb	sy
}
 810bc48:	e001      	b.n	810bc4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810bc4a:	f7ff fa29 	bl	810b0a0 <xTaskResumeAll>
}
 810bc4e:	bf00      	nop
 810bc50:	3710      	adds	r7, #16
 810bc52:	46bd      	mov	sp, r7
 810bc54:	bd80      	pop	{r7, pc}
 810bc56:	bf00      	nop
 810bc58:	10004a18 	.word	0x10004a18
 810bc5c:	10004a1c 	.word	0x10004a1c
 810bc60:	e000ed04 	.word	0xe000ed04

0810bc64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810bc64:	b480      	push	{r7}
 810bc66:	b085      	sub	sp, #20
 810bc68:	af00      	add	r7, sp, #0
 810bc6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810bc6c:	4b0e      	ldr	r3, [pc, #56]	; (810bca8 <prvGetNextExpireTime+0x44>)
 810bc6e:	681b      	ldr	r3, [r3, #0]
 810bc70:	681b      	ldr	r3, [r3, #0]
 810bc72:	2b00      	cmp	r3, #0
 810bc74:	d101      	bne.n	810bc7a <prvGetNextExpireTime+0x16>
 810bc76:	2201      	movs	r2, #1
 810bc78:	e000      	b.n	810bc7c <prvGetNextExpireTime+0x18>
 810bc7a:	2200      	movs	r2, #0
 810bc7c:	687b      	ldr	r3, [r7, #4]
 810bc7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810bc80:	687b      	ldr	r3, [r7, #4]
 810bc82:	681b      	ldr	r3, [r3, #0]
 810bc84:	2b00      	cmp	r3, #0
 810bc86:	d105      	bne.n	810bc94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810bc88:	4b07      	ldr	r3, [pc, #28]	; (810bca8 <prvGetNextExpireTime+0x44>)
 810bc8a:	681b      	ldr	r3, [r3, #0]
 810bc8c:	68db      	ldr	r3, [r3, #12]
 810bc8e:	681b      	ldr	r3, [r3, #0]
 810bc90:	60fb      	str	r3, [r7, #12]
 810bc92:	e001      	b.n	810bc98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810bc94:	2300      	movs	r3, #0
 810bc96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810bc98:	68fb      	ldr	r3, [r7, #12]
}
 810bc9a:	4618      	mov	r0, r3
 810bc9c:	3714      	adds	r7, #20
 810bc9e:	46bd      	mov	sp, r7
 810bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bca4:	4770      	bx	lr
 810bca6:	bf00      	nop
 810bca8:	10004a14 	.word	0x10004a14

0810bcac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810bcac:	b580      	push	{r7, lr}
 810bcae:	b084      	sub	sp, #16
 810bcb0:	af00      	add	r7, sp, #0
 810bcb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810bcb4:	f7ff fa90 	bl	810b1d8 <xTaskGetTickCount>
 810bcb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810bcba:	4b0b      	ldr	r3, [pc, #44]	; (810bce8 <prvSampleTimeNow+0x3c>)
 810bcbc:	681b      	ldr	r3, [r3, #0]
 810bcbe:	68fa      	ldr	r2, [r7, #12]
 810bcc0:	429a      	cmp	r2, r3
 810bcc2:	d205      	bcs.n	810bcd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810bcc4:	f000 f930 	bl	810bf28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810bcc8:	687b      	ldr	r3, [r7, #4]
 810bcca:	2201      	movs	r2, #1
 810bccc:	601a      	str	r2, [r3, #0]
 810bcce:	e002      	b.n	810bcd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810bcd0:	687b      	ldr	r3, [r7, #4]
 810bcd2:	2200      	movs	r2, #0
 810bcd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810bcd6:	4a04      	ldr	r2, [pc, #16]	; (810bce8 <prvSampleTimeNow+0x3c>)
 810bcd8:	68fb      	ldr	r3, [r7, #12]
 810bcda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810bcdc:	68fb      	ldr	r3, [r7, #12]
}
 810bcde:	4618      	mov	r0, r3
 810bce0:	3710      	adds	r7, #16
 810bce2:	46bd      	mov	sp, r7
 810bce4:	bd80      	pop	{r7, pc}
 810bce6:	bf00      	nop
 810bce8:	10004a24 	.word	0x10004a24

0810bcec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810bcec:	b580      	push	{r7, lr}
 810bcee:	b086      	sub	sp, #24
 810bcf0:	af00      	add	r7, sp, #0
 810bcf2:	60f8      	str	r0, [r7, #12]
 810bcf4:	60b9      	str	r1, [r7, #8]
 810bcf6:	607a      	str	r2, [r7, #4]
 810bcf8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810bcfa:	2300      	movs	r3, #0
 810bcfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810bcfe:	68fb      	ldr	r3, [r7, #12]
 810bd00:	68ba      	ldr	r2, [r7, #8]
 810bd02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810bd04:	68fb      	ldr	r3, [r7, #12]
 810bd06:	68fa      	ldr	r2, [r7, #12]
 810bd08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810bd0a:	68ba      	ldr	r2, [r7, #8]
 810bd0c:	687b      	ldr	r3, [r7, #4]
 810bd0e:	429a      	cmp	r2, r3
 810bd10:	d812      	bhi.n	810bd38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810bd12:	687a      	ldr	r2, [r7, #4]
 810bd14:	683b      	ldr	r3, [r7, #0]
 810bd16:	1ad2      	subs	r2, r2, r3
 810bd18:	68fb      	ldr	r3, [r7, #12]
 810bd1a:	699b      	ldr	r3, [r3, #24]
 810bd1c:	429a      	cmp	r2, r3
 810bd1e:	d302      	bcc.n	810bd26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810bd20:	2301      	movs	r3, #1
 810bd22:	617b      	str	r3, [r7, #20]
 810bd24:	e01b      	b.n	810bd5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810bd26:	4b10      	ldr	r3, [pc, #64]	; (810bd68 <prvInsertTimerInActiveList+0x7c>)
 810bd28:	681a      	ldr	r2, [r3, #0]
 810bd2a:	68fb      	ldr	r3, [r7, #12]
 810bd2c:	3304      	adds	r3, #4
 810bd2e:	4619      	mov	r1, r3
 810bd30:	4610      	mov	r0, r2
 810bd32:	f7fd fffc 	bl	8109d2e <vListInsert>
 810bd36:	e012      	b.n	810bd5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810bd38:	687a      	ldr	r2, [r7, #4]
 810bd3a:	683b      	ldr	r3, [r7, #0]
 810bd3c:	429a      	cmp	r2, r3
 810bd3e:	d206      	bcs.n	810bd4e <prvInsertTimerInActiveList+0x62>
 810bd40:	68ba      	ldr	r2, [r7, #8]
 810bd42:	683b      	ldr	r3, [r7, #0]
 810bd44:	429a      	cmp	r2, r3
 810bd46:	d302      	bcc.n	810bd4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810bd48:	2301      	movs	r3, #1
 810bd4a:	617b      	str	r3, [r7, #20]
 810bd4c:	e007      	b.n	810bd5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810bd4e:	4b07      	ldr	r3, [pc, #28]	; (810bd6c <prvInsertTimerInActiveList+0x80>)
 810bd50:	681a      	ldr	r2, [r3, #0]
 810bd52:	68fb      	ldr	r3, [r7, #12]
 810bd54:	3304      	adds	r3, #4
 810bd56:	4619      	mov	r1, r3
 810bd58:	4610      	mov	r0, r2
 810bd5a:	f7fd ffe8 	bl	8109d2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 810bd5e:	697b      	ldr	r3, [r7, #20]
}
 810bd60:	4618      	mov	r0, r3
 810bd62:	3718      	adds	r7, #24
 810bd64:	46bd      	mov	sp, r7
 810bd66:	bd80      	pop	{r7, pc}
 810bd68:	10004a18 	.word	0x10004a18
 810bd6c:	10004a14 	.word	0x10004a14

0810bd70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810bd70:	b580      	push	{r7, lr}
 810bd72:	b08e      	sub	sp, #56	; 0x38
 810bd74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810bd76:	e0c6      	b.n	810bf06 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810bd78:	687b      	ldr	r3, [r7, #4]
 810bd7a:	2b00      	cmp	r3, #0
 810bd7c:	da17      	bge.n	810bdae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810bd7e:	1d3b      	adds	r3, r7, #4
 810bd80:	3304      	adds	r3, #4
 810bd82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bd86:	2b00      	cmp	r3, #0
 810bd88:	d109      	bne.n	810bd9e <prvProcessReceivedCommands+0x2e>
 810bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bd8e:	f383 8811 	msr	BASEPRI, r3
 810bd92:	f3bf 8f6f 	isb	sy
 810bd96:	f3bf 8f4f 	dsb	sy
 810bd9a:	61fb      	str	r3, [r7, #28]
 810bd9c:	e7fe      	b.n	810bd9c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810bda0:	681b      	ldr	r3, [r3, #0]
 810bda2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810bda4:	6850      	ldr	r0, [r2, #4]
 810bda6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810bda8:	6892      	ldr	r2, [r2, #8]
 810bdaa:	4611      	mov	r1, r2
 810bdac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810bdae:	687b      	ldr	r3, [r7, #4]
 810bdb0:	2b00      	cmp	r3, #0
 810bdb2:	f2c0 80a7 	blt.w	810bf04 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810bdb6:	68fb      	ldr	r3, [r7, #12]
 810bdb8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bdbc:	695b      	ldr	r3, [r3, #20]
 810bdbe:	2b00      	cmp	r3, #0
 810bdc0:	d004      	beq.n	810bdcc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bdc4:	3304      	adds	r3, #4
 810bdc6:	4618      	mov	r0, r3
 810bdc8:	f7fd ffea 	bl	8109da0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810bdcc:	463b      	mov	r3, r7
 810bdce:	4618      	mov	r0, r3
 810bdd0:	f7ff ff6c 	bl	810bcac <prvSampleTimeNow>
 810bdd4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810bdd6:	687b      	ldr	r3, [r7, #4]
 810bdd8:	2b09      	cmp	r3, #9
 810bdda:	f200 8094 	bhi.w	810bf06 <prvProcessReceivedCommands+0x196>
 810bdde:	a201      	add	r2, pc, #4	; (adr r2, 810bde4 <prvProcessReceivedCommands+0x74>)
 810bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bde4:	0810be0d 	.word	0x0810be0d
 810bde8:	0810be0d 	.word	0x0810be0d
 810bdec:	0810be0d 	.word	0x0810be0d
 810bdf0:	0810be7f 	.word	0x0810be7f
 810bdf4:	0810be93 	.word	0x0810be93
 810bdf8:	0810bedb 	.word	0x0810bedb
 810bdfc:	0810be0d 	.word	0x0810be0d
 810be00:	0810be0d 	.word	0x0810be0d
 810be04:	0810be7f 	.word	0x0810be7f
 810be08:	0810be93 	.word	0x0810be93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be12:	f043 0301 	orr.w	r3, r3, #1
 810be16:	b2da      	uxtb	r2, r3
 810be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810be1e:	68ba      	ldr	r2, [r7, #8]
 810be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be22:	699b      	ldr	r3, [r3, #24]
 810be24:	18d1      	adds	r1, r2, r3
 810be26:	68bb      	ldr	r3, [r7, #8]
 810be28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810be2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810be2c:	f7ff ff5e 	bl	810bcec <prvInsertTimerInActiveList>
 810be30:	4603      	mov	r3, r0
 810be32:	2b00      	cmp	r3, #0
 810be34:	d067      	beq.n	810bf06 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be38:	6a1b      	ldr	r3, [r3, #32]
 810be3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810be3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be44:	f003 0304 	and.w	r3, r3, #4
 810be48:	2b00      	cmp	r3, #0
 810be4a:	d05c      	beq.n	810bf06 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810be4c:	68ba      	ldr	r2, [r7, #8]
 810be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be50:	699b      	ldr	r3, [r3, #24]
 810be52:	441a      	add	r2, r3
 810be54:	2300      	movs	r3, #0
 810be56:	9300      	str	r3, [sp, #0]
 810be58:	2300      	movs	r3, #0
 810be5a:	2100      	movs	r1, #0
 810be5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810be5e:	f7ff fe09 	bl	810ba74 <xTimerGenericCommand>
 810be62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810be64:	6a3b      	ldr	r3, [r7, #32]
 810be66:	2b00      	cmp	r3, #0
 810be68:	d14d      	bne.n	810bf06 <prvProcessReceivedCommands+0x196>
 810be6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810be6e:	f383 8811 	msr	BASEPRI, r3
 810be72:	f3bf 8f6f 	isb	sy
 810be76:	f3bf 8f4f 	dsb	sy
 810be7a:	61bb      	str	r3, [r7, #24]
 810be7c:	e7fe      	b.n	810be7c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be84:	f023 0301 	bic.w	r3, r3, #1
 810be88:	b2da      	uxtb	r2, r3
 810be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810be90:	e039      	b.n	810bf06 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810be94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810be98:	f043 0301 	orr.w	r3, r3, #1
 810be9c:	b2da      	uxtb	r2, r3
 810be9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bea0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810bea4:	68ba      	ldr	r2, [r7, #8]
 810bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bea8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810beaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810beac:	699b      	ldr	r3, [r3, #24]
 810beae:	2b00      	cmp	r3, #0
 810beb0:	d109      	bne.n	810bec6 <prvProcessReceivedCommands+0x156>
 810beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810beb6:	f383 8811 	msr	BASEPRI, r3
 810beba:	f3bf 8f6f 	isb	sy
 810bebe:	f3bf 8f4f 	dsb	sy
 810bec2:	617b      	str	r3, [r7, #20]
 810bec4:	e7fe      	b.n	810bec4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810bec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bec8:	699a      	ldr	r2, [r3, #24]
 810beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810becc:	18d1      	adds	r1, r2, r3
 810bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810bed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810bed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810bed4:	f7ff ff0a 	bl	810bcec <prvInsertTimerInActiveList>
					break;
 810bed8:	e015      	b.n	810bf06 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bedc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bee0:	f003 0302 	and.w	r3, r3, #2
 810bee4:	2b00      	cmp	r3, #0
 810bee6:	d103      	bne.n	810bef0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 810bee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810beea:	f7fd fdbb 	bl	8109a64 <vPortFree>
 810beee:	e00a      	b.n	810bf06 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810bef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bef6:	f023 0301 	bic.w	r3, r3, #1
 810befa:	b2da      	uxtb	r2, r3
 810befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810befe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810bf02:	e000      	b.n	810bf06 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810bf04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810bf06:	4b07      	ldr	r3, [pc, #28]	; (810bf24 <prvProcessReceivedCommands+0x1b4>)
 810bf08:	681b      	ldr	r3, [r3, #0]
 810bf0a:	1d39      	adds	r1, r7, #4
 810bf0c:	2200      	movs	r2, #0
 810bf0e:	4618      	mov	r0, r3
 810bf10:	f7fe fc3a 	bl	810a788 <xQueueReceive>
 810bf14:	4603      	mov	r3, r0
 810bf16:	2b00      	cmp	r3, #0
 810bf18:	f47f af2e 	bne.w	810bd78 <prvProcessReceivedCommands+0x8>
	}
}
 810bf1c:	bf00      	nop
 810bf1e:	3730      	adds	r7, #48	; 0x30
 810bf20:	46bd      	mov	sp, r7
 810bf22:	bd80      	pop	{r7, pc}
 810bf24:	10004a1c 	.word	0x10004a1c

0810bf28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810bf28:	b580      	push	{r7, lr}
 810bf2a:	b088      	sub	sp, #32
 810bf2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810bf2e:	e047      	b.n	810bfc0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810bf30:	4b2d      	ldr	r3, [pc, #180]	; (810bfe8 <prvSwitchTimerLists+0xc0>)
 810bf32:	681b      	ldr	r3, [r3, #0]
 810bf34:	68db      	ldr	r3, [r3, #12]
 810bf36:	681b      	ldr	r3, [r3, #0]
 810bf38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810bf3a:	4b2b      	ldr	r3, [pc, #172]	; (810bfe8 <prvSwitchTimerLists+0xc0>)
 810bf3c:	681b      	ldr	r3, [r3, #0]
 810bf3e:	68db      	ldr	r3, [r3, #12]
 810bf40:	68db      	ldr	r3, [r3, #12]
 810bf42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810bf44:	68fb      	ldr	r3, [r7, #12]
 810bf46:	3304      	adds	r3, #4
 810bf48:	4618      	mov	r0, r3
 810bf4a:	f7fd ff29 	bl	8109da0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810bf4e:	68fb      	ldr	r3, [r7, #12]
 810bf50:	6a1b      	ldr	r3, [r3, #32]
 810bf52:	68f8      	ldr	r0, [r7, #12]
 810bf54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810bf56:	68fb      	ldr	r3, [r7, #12]
 810bf58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810bf5c:	f003 0304 	and.w	r3, r3, #4
 810bf60:	2b00      	cmp	r3, #0
 810bf62:	d02d      	beq.n	810bfc0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810bf64:	68fb      	ldr	r3, [r7, #12]
 810bf66:	699b      	ldr	r3, [r3, #24]
 810bf68:	693a      	ldr	r2, [r7, #16]
 810bf6a:	4413      	add	r3, r2
 810bf6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810bf6e:	68ba      	ldr	r2, [r7, #8]
 810bf70:	693b      	ldr	r3, [r7, #16]
 810bf72:	429a      	cmp	r2, r3
 810bf74:	d90e      	bls.n	810bf94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810bf76:	68fb      	ldr	r3, [r7, #12]
 810bf78:	68ba      	ldr	r2, [r7, #8]
 810bf7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810bf7c:	68fb      	ldr	r3, [r7, #12]
 810bf7e:	68fa      	ldr	r2, [r7, #12]
 810bf80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810bf82:	4b19      	ldr	r3, [pc, #100]	; (810bfe8 <prvSwitchTimerLists+0xc0>)
 810bf84:	681a      	ldr	r2, [r3, #0]
 810bf86:	68fb      	ldr	r3, [r7, #12]
 810bf88:	3304      	adds	r3, #4
 810bf8a:	4619      	mov	r1, r3
 810bf8c:	4610      	mov	r0, r2
 810bf8e:	f7fd fece 	bl	8109d2e <vListInsert>
 810bf92:	e015      	b.n	810bfc0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810bf94:	2300      	movs	r3, #0
 810bf96:	9300      	str	r3, [sp, #0]
 810bf98:	2300      	movs	r3, #0
 810bf9a:	693a      	ldr	r2, [r7, #16]
 810bf9c:	2100      	movs	r1, #0
 810bf9e:	68f8      	ldr	r0, [r7, #12]
 810bfa0:	f7ff fd68 	bl	810ba74 <xTimerGenericCommand>
 810bfa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810bfa6:	687b      	ldr	r3, [r7, #4]
 810bfa8:	2b00      	cmp	r3, #0
 810bfaa:	d109      	bne.n	810bfc0 <prvSwitchTimerLists+0x98>
 810bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 810bfb0:	f383 8811 	msr	BASEPRI, r3
 810bfb4:	f3bf 8f6f 	isb	sy
 810bfb8:	f3bf 8f4f 	dsb	sy
 810bfbc:	603b      	str	r3, [r7, #0]
 810bfbe:	e7fe      	b.n	810bfbe <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810bfc0:	4b09      	ldr	r3, [pc, #36]	; (810bfe8 <prvSwitchTimerLists+0xc0>)
 810bfc2:	681b      	ldr	r3, [r3, #0]
 810bfc4:	681b      	ldr	r3, [r3, #0]
 810bfc6:	2b00      	cmp	r3, #0
 810bfc8:	d1b2      	bne.n	810bf30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810bfca:	4b07      	ldr	r3, [pc, #28]	; (810bfe8 <prvSwitchTimerLists+0xc0>)
 810bfcc:	681b      	ldr	r3, [r3, #0]
 810bfce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810bfd0:	4b06      	ldr	r3, [pc, #24]	; (810bfec <prvSwitchTimerLists+0xc4>)
 810bfd2:	681b      	ldr	r3, [r3, #0]
 810bfd4:	4a04      	ldr	r2, [pc, #16]	; (810bfe8 <prvSwitchTimerLists+0xc0>)
 810bfd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810bfd8:	4a04      	ldr	r2, [pc, #16]	; (810bfec <prvSwitchTimerLists+0xc4>)
 810bfda:	697b      	ldr	r3, [r7, #20]
 810bfdc:	6013      	str	r3, [r2, #0]
}
 810bfde:	bf00      	nop
 810bfe0:	3718      	adds	r7, #24
 810bfe2:	46bd      	mov	sp, r7
 810bfe4:	bd80      	pop	{r7, pc}
 810bfe6:	bf00      	nop
 810bfe8:	10004a14 	.word	0x10004a14
 810bfec:	10004a18 	.word	0x10004a18

0810bff0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810bff0:	b580      	push	{r7, lr}
 810bff2:	b082      	sub	sp, #8
 810bff4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810bff6:	f7fe f821 	bl	810a03c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810bffa:	4b15      	ldr	r3, [pc, #84]	; (810c050 <prvCheckForValidListAndQueue+0x60>)
 810bffc:	681b      	ldr	r3, [r3, #0]
 810bffe:	2b00      	cmp	r3, #0
 810c000:	d120      	bne.n	810c044 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810c002:	4814      	ldr	r0, [pc, #80]	; (810c054 <prvCheckForValidListAndQueue+0x64>)
 810c004:	f7fd fe42 	bl	8109c8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810c008:	4813      	ldr	r0, [pc, #76]	; (810c058 <prvCheckForValidListAndQueue+0x68>)
 810c00a:	f7fd fe3f 	bl	8109c8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810c00e:	4b13      	ldr	r3, [pc, #76]	; (810c05c <prvCheckForValidListAndQueue+0x6c>)
 810c010:	4a10      	ldr	r2, [pc, #64]	; (810c054 <prvCheckForValidListAndQueue+0x64>)
 810c012:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810c014:	4b12      	ldr	r3, [pc, #72]	; (810c060 <prvCheckForValidListAndQueue+0x70>)
 810c016:	4a10      	ldr	r2, [pc, #64]	; (810c058 <prvCheckForValidListAndQueue+0x68>)
 810c018:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810c01a:	2300      	movs	r3, #0
 810c01c:	9300      	str	r3, [sp, #0]
 810c01e:	4b11      	ldr	r3, [pc, #68]	; (810c064 <prvCheckForValidListAndQueue+0x74>)
 810c020:	4a11      	ldr	r2, [pc, #68]	; (810c068 <prvCheckForValidListAndQueue+0x78>)
 810c022:	2110      	movs	r1, #16
 810c024:	200a      	movs	r0, #10
 810c026:	f7fe f98b 	bl	810a340 <xQueueGenericCreateStatic>
 810c02a:	4602      	mov	r2, r0
 810c02c:	4b08      	ldr	r3, [pc, #32]	; (810c050 <prvCheckForValidListAndQueue+0x60>)
 810c02e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810c030:	4b07      	ldr	r3, [pc, #28]	; (810c050 <prvCheckForValidListAndQueue+0x60>)
 810c032:	681b      	ldr	r3, [r3, #0]
 810c034:	2b00      	cmp	r3, #0
 810c036:	d005      	beq.n	810c044 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810c038:	4b05      	ldr	r3, [pc, #20]	; (810c050 <prvCheckForValidListAndQueue+0x60>)
 810c03a:	681b      	ldr	r3, [r3, #0]
 810c03c:	490b      	ldr	r1, [pc, #44]	; (810c06c <prvCheckForValidListAndQueue+0x7c>)
 810c03e:	4618      	mov	r0, r3
 810c040:	f7fe fd8e 	bl	810ab60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810c044:	f7fe f828 	bl	810a098 <vPortExitCritical>
}
 810c048:	bf00      	nop
 810c04a:	46bd      	mov	sp, r7
 810c04c:	bd80      	pop	{r7, pc}
 810c04e:	bf00      	nop
 810c050:	10004a1c 	.word	0x10004a1c
 810c054:	100049ec 	.word	0x100049ec
 810c058:	10004a00 	.word	0x10004a00
 810c05c:	10004a14 	.word	0x10004a14
 810c060:	10004a18 	.word	0x10004a18
 810c064:	10004ac8 	.word	0x10004ac8
 810c068:	10004a28 	.word	0x10004a28
 810c06c:	0810dc08 	.word	0x0810dc08

0810c070 <__errno>:
 810c070:	4b01      	ldr	r3, [pc, #4]	; (810c078 <__errno+0x8>)
 810c072:	6818      	ldr	r0, [r3, #0]
 810c074:	4770      	bx	lr
 810c076:	bf00      	nop
 810c078:	10000010 	.word	0x10000010

0810c07c <__libc_init_array>:
 810c07c:	b570      	push	{r4, r5, r6, lr}
 810c07e:	4e0d      	ldr	r6, [pc, #52]	; (810c0b4 <__libc_init_array+0x38>)
 810c080:	4c0d      	ldr	r4, [pc, #52]	; (810c0b8 <__libc_init_array+0x3c>)
 810c082:	1ba4      	subs	r4, r4, r6
 810c084:	10a4      	asrs	r4, r4, #2
 810c086:	2500      	movs	r5, #0
 810c088:	42a5      	cmp	r5, r4
 810c08a:	d109      	bne.n	810c0a0 <__libc_init_array+0x24>
 810c08c:	4e0b      	ldr	r6, [pc, #44]	; (810c0bc <__libc_init_array+0x40>)
 810c08e:	4c0c      	ldr	r4, [pc, #48]	; (810c0c0 <__libc_init_array+0x44>)
 810c090:	f001 fd46 	bl	810db20 <_init>
 810c094:	1ba4      	subs	r4, r4, r6
 810c096:	10a4      	asrs	r4, r4, #2
 810c098:	2500      	movs	r5, #0
 810c09a:	42a5      	cmp	r5, r4
 810c09c:	d105      	bne.n	810c0aa <__libc_init_array+0x2e>
 810c09e:	bd70      	pop	{r4, r5, r6, pc}
 810c0a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810c0a4:	4798      	blx	r3
 810c0a6:	3501      	adds	r5, #1
 810c0a8:	e7ee      	b.n	810c088 <__libc_init_array+0xc>
 810c0aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810c0ae:	4798      	blx	r3
 810c0b0:	3501      	adds	r5, #1
 810c0b2:	e7f2      	b.n	810c09a <__libc_init_array+0x1e>
 810c0b4:	0810dee0 	.word	0x0810dee0
 810c0b8:	0810dee0 	.word	0x0810dee0
 810c0bc:	0810dee0 	.word	0x0810dee0
 810c0c0:	0810dee4 	.word	0x0810dee4

0810c0c4 <memcpy>:
 810c0c4:	b510      	push	{r4, lr}
 810c0c6:	1e43      	subs	r3, r0, #1
 810c0c8:	440a      	add	r2, r1
 810c0ca:	4291      	cmp	r1, r2
 810c0cc:	d100      	bne.n	810c0d0 <memcpy+0xc>
 810c0ce:	bd10      	pop	{r4, pc}
 810c0d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c0d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 810c0d8:	e7f7      	b.n	810c0ca <memcpy+0x6>

0810c0da <memset>:
 810c0da:	4402      	add	r2, r0
 810c0dc:	4603      	mov	r3, r0
 810c0de:	4293      	cmp	r3, r2
 810c0e0:	d100      	bne.n	810c0e4 <memset+0xa>
 810c0e2:	4770      	bx	lr
 810c0e4:	f803 1b01 	strb.w	r1, [r3], #1
 810c0e8:	e7f9      	b.n	810c0de <memset+0x4>

0810c0ea <__cvt>:
 810c0ea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810c0ee:	ec55 4b10 	vmov	r4, r5, d0
 810c0f2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810c0f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810c0f8:	2d00      	cmp	r5, #0
 810c0fa:	460e      	mov	r6, r1
 810c0fc:	4691      	mov	r9, r2
 810c0fe:	4619      	mov	r1, r3
 810c100:	bfb8      	it	lt
 810c102:	4622      	movlt	r2, r4
 810c104:	462b      	mov	r3, r5
 810c106:	f027 0720 	bic.w	r7, r7, #32
 810c10a:	bfbb      	ittet	lt
 810c10c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810c110:	461d      	movlt	r5, r3
 810c112:	2300      	movge	r3, #0
 810c114:	232d      	movlt	r3, #45	; 0x2d
 810c116:	bfb8      	it	lt
 810c118:	4614      	movlt	r4, r2
 810c11a:	2f46      	cmp	r7, #70	; 0x46
 810c11c:	700b      	strb	r3, [r1, #0]
 810c11e:	d004      	beq.n	810c12a <__cvt+0x40>
 810c120:	2f45      	cmp	r7, #69	; 0x45
 810c122:	d100      	bne.n	810c126 <__cvt+0x3c>
 810c124:	3601      	adds	r6, #1
 810c126:	2102      	movs	r1, #2
 810c128:	e000      	b.n	810c12c <__cvt+0x42>
 810c12a:	2103      	movs	r1, #3
 810c12c:	ab03      	add	r3, sp, #12
 810c12e:	9301      	str	r3, [sp, #4]
 810c130:	ab02      	add	r3, sp, #8
 810c132:	9300      	str	r3, [sp, #0]
 810c134:	4632      	mov	r2, r6
 810c136:	4653      	mov	r3, sl
 810c138:	ec45 4b10 	vmov	d0, r4, r5
 810c13c:	f000 fbac 	bl	810c898 <_dtoa_r>
 810c140:	2f47      	cmp	r7, #71	; 0x47
 810c142:	4680      	mov	r8, r0
 810c144:	d102      	bne.n	810c14c <__cvt+0x62>
 810c146:	f019 0f01 	tst.w	r9, #1
 810c14a:	d026      	beq.n	810c19a <__cvt+0xb0>
 810c14c:	2f46      	cmp	r7, #70	; 0x46
 810c14e:	eb08 0906 	add.w	r9, r8, r6
 810c152:	d111      	bne.n	810c178 <__cvt+0x8e>
 810c154:	f898 3000 	ldrb.w	r3, [r8]
 810c158:	2b30      	cmp	r3, #48	; 0x30
 810c15a:	d10a      	bne.n	810c172 <__cvt+0x88>
 810c15c:	2200      	movs	r2, #0
 810c15e:	2300      	movs	r3, #0
 810c160:	4620      	mov	r0, r4
 810c162:	4629      	mov	r1, r5
 810c164:	f7f4 fce8 	bl	8100b38 <__aeabi_dcmpeq>
 810c168:	b918      	cbnz	r0, 810c172 <__cvt+0x88>
 810c16a:	f1c6 0601 	rsb	r6, r6, #1
 810c16e:	f8ca 6000 	str.w	r6, [sl]
 810c172:	f8da 3000 	ldr.w	r3, [sl]
 810c176:	4499      	add	r9, r3
 810c178:	2200      	movs	r2, #0
 810c17a:	2300      	movs	r3, #0
 810c17c:	4620      	mov	r0, r4
 810c17e:	4629      	mov	r1, r5
 810c180:	f7f4 fcda 	bl	8100b38 <__aeabi_dcmpeq>
 810c184:	b938      	cbnz	r0, 810c196 <__cvt+0xac>
 810c186:	2230      	movs	r2, #48	; 0x30
 810c188:	9b03      	ldr	r3, [sp, #12]
 810c18a:	454b      	cmp	r3, r9
 810c18c:	d205      	bcs.n	810c19a <__cvt+0xb0>
 810c18e:	1c59      	adds	r1, r3, #1
 810c190:	9103      	str	r1, [sp, #12]
 810c192:	701a      	strb	r2, [r3, #0]
 810c194:	e7f8      	b.n	810c188 <__cvt+0x9e>
 810c196:	f8cd 900c 	str.w	r9, [sp, #12]
 810c19a:	9b03      	ldr	r3, [sp, #12]
 810c19c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810c19e:	eba3 0308 	sub.w	r3, r3, r8
 810c1a2:	4640      	mov	r0, r8
 810c1a4:	6013      	str	r3, [r2, #0]
 810c1a6:	b004      	add	sp, #16
 810c1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810c1ac <__exponent>:
 810c1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810c1ae:	2900      	cmp	r1, #0
 810c1b0:	4604      	mov	r4, r0
 810c1b2:	bfba      	itte	lt
 810c1b4:	4249      	neglt	r1, r1
 810c1b6:	232d      	movlt	r3, #45	; 0x2d
 810c1b8:	232b      	movge	r3, #43	; 0x2b
 810c1ba:	2909      	cmp	r1, #9
 810c1bc:	f804 2b02 	strb.w	r2, [r4], #2
 810c1c0:	7043      	strb	r3, [r0, #1]
 810c1c2:	dd20      	ble.n	810c206 <__exponent+0x5a>
 810c1c4:	f10d 0307 	add.w	r3, sp, #7
 810c1c8:	461f      	mov	r7, r3
 810c1ca:	260a      	movs	r6, #10
 810c1cc:	fb91 f5f6 	sdiv	r5, r1, r6
 810c1d0:	fb06 1115 	mls	r1, r6, r5, r1
 810c1d4:	3130      	adds	r1, #48	; 0x30
 810c1d6:	2d09      	cmp	r5, #9
 810c1d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 810c1dc:	f103 32ff 	add.w	r2, r3, #4294967295
 810c1e0:	4629      	mov	r1, r5
 810c1e2:	dc09      	bgt.n	810c1f8 <__exponent+0x4c>
 810c1e4:	3130      	adds	r1, #48	; 0x30
 810c1e6:	3b02      	subs	r3, #2
 810c1e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 810c1ec:	42bb      	cmp	r3, r7
 810c1ee:	4622      	mov	r2, r4
 810c1f0:	d304      	bcc.n	810c1fc <__exponent+0x50>
 810c1f2:	1a10      	subs	r0, r2, r0
 810c1f4:	b003      	add	sp, #12
 810c1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810c1f8:	4613      	mov	r3, r2
 810c1fa:	e7e7      	b.n	810c1cc <__exponent+0x20>
 810c1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 810c200:	f804 2b01 	strb.w	r2, [r4], #1
 810c204:	e7f2      	b.n	810c1ec <__exponent+0x40>
 810c206:	2330      	movs	r3, #48	; 0x30
 810c208:	4419      	add	r1, r3
 810c20a:	7083      	strb	r3, [r0, #2]
 810c20c:	1d02      	adds	r2, r0, #4
 810c20e:	70c1      	strb	r1, [r0, #3]
 810c210:	e7ef      	b.n	810c1f2 <__exponent+0x46>
	...

0810c214 <_printf_float>:
 810c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c218:	b08d      	sub	sp, #52	; 0x34
 810c21a:	460c      	mov	r4, r1
 810c21c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810c220:	4616      	mov	r6, r2
 810c222:	461f      	mov	r7, r3
 810c224:	4605      	mov	r5, r0
 810c226:	f001 f8ef 	bl	810d408 <_localeconv_r>
 810c22a:	6803      	ldr	r3, [r0, #0]
 810c22c:	9304      	str	r3, [sp, #16]
 810c22e:	4618      	mov	r0, r3
 810c230:	f7f4 f856 	bl	81002e0 <strlen>
 810c234:	2300      	movs	r3, #0
 810c236:	930a      	str	r3, [sp, #40]	; 0x28
 810c238:	f8d8 3000 	ldr.w	r3, [r8]
 810c23c:	9005      	str	r0, [sp, #20]
 810c23e:	3307      	adds	r3, #7
 810c240:	f023 0307 	bic.w	r3, r3, #7
 810c244:	f103 0208 	add.w	r2, r3, #8
 810c248:	f894 a018 	ldrb.w	sl, [r4, #24]
 810c24c:	f8d4 b000 	ldr.w	fp, [r4]
 810c250:	f8c8 2000 	str.w	r2, [r8]
 810c254:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c258:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810c25c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810c260:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810c264:	9307      	str	r3, [sp, #28]
 810c266:	f8cd 8018 	str.w	r8, [sp, #24]
 810c26a:	f04f 32ff 	mov.w	r2, #4294967295
 810c26e:	4ba7      	ldr	r3, [pc, #668]	; (810c50c <_printf_float+0x2f8>)
 810c270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c274:	f7f4 fc92 	bl	8100b9c <__aeabi_dcmpun>
 810c278:	bb70      	cbnz	r0, 810c2d8 <_printf_float+0xc4>
 810c27a:	f04f 32ff 	mov.w	r2, #4294967295
 810c27e:	4ba3      	ldr	r3, [pc, #652]	; (810c50c <_printf_float+0x2f8>)
 810c280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c284:	f7f4 fc6c 	bl	8100b60 <__aeabi_dcmple>
 810c288:	bb30      	cbnz	r0, 810c2d8 <_printf_float+0xc4>
 810c28a:	2200      	movs	r2, #0
 810c28c:	2300      	movs	r3, #0
 810c28e:	4640      	mov	r0, r8
 810c290:	4649      	mov	r1, r9
 810c292:	f7f4 fc5b 	bl	8100b4c <__aeabi_dcmplt>
 810c296:	b110      	cbz	r0, 810c29e <_printf_float+0x8a>
 810c298:	232d      	movs	r3, #45	; 0x2d
 810c29a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810c29e:	4a9c      	ldr	r2, [pc, #624]	; (810c510 <_printf_float+0x2fc>)
 810c2a0:	4b9c      	ldr	r3, [pc, #624]	; (810c514 <_printf_float+0x300>)
 810c2a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810c2a6:	bf8c      	ite	hi
 810c2a8:	4690      	movhi	r8, r2
 810c2aa:	4698      	movls	r8, r3
 810c2ac:	2303      	movs	r3, #3
 810c2ae:	f02b 0204 	bic.w	r2, fp, #4
 810c2b2:	6123      	str	r3, [r4, #16]
 810c2b4:	6022      	str	r2, [r4, #0]
 810c2b6:	f04f 0900 	mov.w	r9, #0
 810c2ba:	9700      	str	r7, [sp, #0]
 810c2bc:	4633      	mov	r3, r6
 810c2be:	aa0b      	add	r2, sp, #44	; 0x2c
 810c2c0:	4621      	mov	r1, r4
 810c2c2:	4628      	mov	r0, r5
 810c2c4:	f000 f9e6 	bl	810c694 <_printf_common>
 810c2c8:	3001      	adds	r0, #1
 810c2ca:	f040 808d 	bne.w	810c3e8 <_printf_float+0x1d4>
 810c2ce:	f04f 30ff 	mov.w	r0, #4294967295
 810c2d2:	b00d      	add	sp, #52	; 0x34
 810c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c2d8:	4642      	mov	r2, r8
 810c2da:	464b      	mov	r3, r9
 810c2dc:	4640      	mov	r0, r8
 810c2de:	4649      	mov	r1, r9
 810c2e0:	f7f4 fc5c 	bl	8100b9c <__aeabi_dcmpun>
 810c2e4:	b110      	cbz	r0, 810c2ec <_printf_float+0xd8>
 810c2e6:	4a8c      	ldr	r2, [pc, #560]	; (810c518 <_printf_float+0x304>)
 810c2e8:	4b8c      	ldr	r3, [pc, #560]	; (810c51c <_printf_float+0x308>)
 810c2ea:	e7da      	b.n	810c2a2 <_printf_float+0x8e>
 810c2ec:	6861      	ldr	r1, [r4, #4]
 810c2ee:	1c4b      	adds	r3, r1, #1
 810c2f0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810c2f4:	a80a      	add	r0, sp, #40	; 0x28
 810c2f6:	d13e      	bne.n	810c376 <_printf_float+0x162>
 810c2f8:	2306      	movs	r3, #6
 810c2fa:	6063      	str	r3, [r4, #4]
 810c2fc:	2300      	movs	r3, #0
 810c2fe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810c302:	ab09      	add	r3, sp, #36	; 0x24
 810c304:	9300      	str	r3, [sp, #0]
 810c306:	ec49 8b10 	vmov	d0, r8, r9
 810c30a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810c30e:	6022      	str	r2, [r4, #0]
 810c310:	f8cd a004 	str.w	sl, [sp, #4]
 810c314:	6861      	ldr	r1, [r4, #4]
 810c316:	4628      	mov	r0, r5
 810c318:	f7ff fee7 	bl	810c0ea <__cvt>
 810c31c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810c320:	2b47      	cmp	r3, #71	; 0x47
 810c322:	4680      	mov	r8, r0
 810c324:	d109      	bne.n	810c33a <_printf_float+0x126>
 810c326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c328:	1cd8      	adds	r0, r3, #3
 810c32a:	db02      	blt.n	810c332 <_printf_float+0x11e>
 810c32c:	6862      	ldr	r2, [r4, #4]
 810c32e:	4293      	cmp	r3, r2
 810c330:	dd47      	ble.n	810c3c2 <_printf_float+0x1ae>
 810c332:	f1aa 0a02 	sub.w	sl, sl, #2
 810c336:	fa5f fa8a 	uxtb.w	sl, sl
 810c33a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810c33e:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c340:	d824      	bhi.n	810c38c <_printf_float+0x178>
 810c342:	3901      	subs	r1, #1
 810c344:	4652      	mov	r2, sl
 810c346:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810c34a:	9109      	str	r1, [sp, #36]	; 0x24
 810c34c:	f7ff ff2e 	bl	810c1ac <__exponent>
 810c350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c352:	1813      	adds	r3, r2, r0
 810c354:	2a01      	cmp	r2, #1
 810c356:	4681      	mov	r9, r0
 810c358:	6123      	str	r3, [r4, #16]
 810c35a:	dc02      	bgt.n	810c362 <_printf_float+0x14e>
 810c35c:	6822      	ldr	r2, [r4, #0]
 810c35e:	07d1      	lsls	r1, r2, #31
 810c360:	d501      	bpl.n	810c366 <_printf_float+0x152>
 810c362:	3301      	adds	r3, #1
 810c364:	6123      	str	r3, [r4, #16]
 810c366:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810c36a:	2b00      	cmp	r3, #0
 810c36c:	d0a5      	beq.n	810c2ba <_printf_float+0xa6>
 810c36e:	232d      	movs	r3, #45	; 0x2d
 810c370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810c374:	e7a1      	b.n	810c2ba <_printf_float+0xa6>
 810c376:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810c37a:	f000 8177 	beq.w	810c66c <_printf_float+0x458>
 810c37e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810c382:	d1bb      	bne.n	810c2fc <_printf_float+0xe8>
 810c384:	2900      	cmp	r1, #0
 810c386:	d1b9      	bne.n	810c2fc <_printf_float+0xe8>
 810c388:	2301      	movs	r3, #1
 810c38a:	e7b6      	b.n	810c2fa <_printf_float+0xe6>
 810c38c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810c390:	d119      	bne.n	810c3c6 <_printf_float+0x1b2>
 810c392:	2900      	cmp	r1, #0
 810c394:	6863      	ldr	r3, [r4, #4]
 810c396:	dd0c      	ble.n	810c3b2 <_printf_float+0x19e>
 810c398:	6121      	str	r1, [r4, #16]
 810c39a:	b913      	cbnz	r3, 810c3a2 <_printf_float+0x18e>
 810c39c:	6822      	ldr	r2, [r4, #0]
 810c39e:	07d2      	lsls	r2, r2, #31
 810c3a0:	d502      	bpl.n	810c3a8 <_printf_float+0x194>
 810c3a2:	3301      	adds	r3, #1
 810c3a4:	440b      	add	r3, r1
 810c3a6:	6123      	str	r3, [r4, #16]
 810c3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c3aa:	65a3      	str	r3, [r4, #88]	; 0x58
 810c3ac:	f04f 0900 	mov.w	r9, #0
 810c3b0:	e7d9      	b.n	810c366 <_printf_float+0x152>
 810c3b2:	b913      	cbnz	r3, 810c3ba <_printf_float+0x1a6>
 810c3b4:	6822      	ldr	r2, [r4, #0]
 810c3b6:	07d0      	lsls	r0, r2, #31
 810c3b8:	d501      	bpl.n	810c3be <_printf_float+0x1aa>
 810c3ba:	3302      	adds	r3, #2
 810c3bc:	e7f3      	b.n	810c3a6 <_printf_float+0x192>
 810c3be:	2301      	movs	r3, #1
 810c3c0:	e7f1      	b.n	810c3a6 <_printf_float+0x192>
 810c3c2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810c3c6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810c3ca:	4293      	cmp	r3, r2
 810c3cc:	db05      	blt.n	810c3da <_printf_float+0x1c6>
 810c3ce:	6822      	ldr	r2, [r4, #0]
 810c3d0:	6123      	str	r3, [r4, #16]
 810c3d2:	07d1      	lsls	r1, r2, #31
 810c3d4:	d5e8      	bpl.n	810c3a8 <_printf_float+0x194>
 810c3d6:	3301      	adds	r3, #1
 810c3d8:	e7e5      	b.n	810c3a6 <_printf_float+0x192>
 810c3da:	2b00      	cmp	r3, #0
 810c3dc:	bfd4      	ite	le
 810c3de:	f1c3 0302 	rsble	r3, r3, #2
 810c3e2:	2301      	movgt	r3, #1
 810c3e4:	4413      	add	r3, r2
 810c3e6:	e7de      	b.n	810c3a6 <_printf_float+0x192>
 810c3e8:	6823      	ldr	r3, [r4, #0]
 810c3ea:	055a      	lsls	r2, r3, #21
 810c3ec:	d407      	bmi.n	810c3fe <_printf_float+0x1ea>
 810c3ee:	6923      	ldr	r3, [r4, #16]
 810c3f0:	4642      	mov	r2, r8
 810c3f2:	4631      	mov	r1, r6
 810c3f4:	4628      	mov	r0, r5
 810c3f6:	47b8      	blx	r7
 810c3f8:	3001      	adds	r0, #1
 810c3fa:	d12b      	bne.n	810c454 <_printf_float+0x240>
 810c3fc:	e767      	b.n	810c2ce <_printf_float+0xba>
 810c3fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810c402:	f240 80dc 	bls.w	810c5be <_printf_float+0x3aa>
 810c406:	2200      	movs	r2, #0
 810c408:	2300      	movs	r3, #0
 810c40a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810c40e:	f7f4 fb93 	bl	8100b38 <__aeabi_dcmpeq>
 810c412:	2800      	cmp	r0, #0
 810c414:	d033      	beq.n	810c47e <_printf_float+0x26a>
 810c416:	2301      	movs	r3, #1
 810c418:	4a41      	ldr	r2, [pc, #260]	; (810c520 <_printf_float+0x30c>)
 810c41a:	4631      	mov	r1, r6
 810c41c:	4628      	mov	r0, r5
 810c41e:	47b8      	blx	r7
 810c420:	3001      	adds	r0, #1
 810c422:	f43f af54 	beq.w	810c2ce <_printf_float+0xba>
 810c426:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810c42a:	429a      	cmp	r2, r3
 810c42c:	db02      	blt.n	810c434 <_printf_float+0x220>
 810c42e:	6823      	ldr	r3, [r4, #0]
 810c430:	07d8      	lsls	r0, r3, #31
 810c432:	d50f      	bpl.n	810c454 <_printf_float+0x240>
 810c434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c438:	4631      	mov	r1, r6
 810c43a:	4628      	mov	r0, r5
 810c43c:	47b8      	blx	r7
 810c43e:	3001      	adds	r0, #1
 810c440:	f43f af45 	beq.w	810c2ce <_printf_float+0xba>
 810c444:	f04f 0800 	mov.w	r8, #0
 810c448:	f104 091a 	add.w	r9, r4, #26
 810c44c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c44e:	3b01      	subs	r3, #1
 810c450:	4543      	cmp	r3, r8
 810c452:	dc09      	bgt.n	810c468 <_printf_float+0x254>
 810c454:	6823      	ldr	r3, [r4, #0]
 810c456:	079b      	lsls	r3, r3, #30
 810c458:	f100 8103 	bmi.w	810c662 <_printf_float+0x44e>
 810c45c:	68e0      	ldr	r0, [r4, #12]
 810c45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c460:	4298      	cmp	r0, r3
 810c462:	bfb8      	it	lt
 810c464:	4618      	movlt	r0, r3
 810c466:	e734      	b.n	810c2d2 <_printf_float+0xbe>
 810c468:	2301      	movs	r3, #1
 810c46a:	464a      	mov	r2, r9
 810c46c:	4631      	mov	r1, r6
 810c46e:	4628      	mov	r0, r5
 810c470:	47b8      	blx	r7
 810c472:	3001      	adds	r0, #1
 810c474:	f43f af2b 	beq.w	810c2ce <_printf_float+0xba>
 810c478:	f108 0801 	add.w	r8, r8, #1
 810c47c:	e7e6      	b.n	810c44c <_printf_float+0x238>
 810c47e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c480:	2b00      	cmp	r3, #0
 810c482:	dc2b      	bgt.n	810c4dc <_printf_float+0x2c8>
 810c484:	2301      	movs	r3, #1
 810c486:	4a26      	ldr	r2, [pc, #152]	; (810c520 <_printf_float+0x30c>)
 810c488:	4631      	mov	r1, r6
 810c48a:	4628      	mov	r0, r5
 810c48c:	47b8      	blx	r7
 810c48e:	3001      	adds	r0, #1
 810c490:	f43f af1d 	beq.w	810c2ce <_printf_float+0xba>
 810c494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c496:	b923      	cbnz	r3, 810c4a2 <_printf_float+0x28e>
 810c498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c49a:	b913      	cbnz	r3, 810c4a2 <_printf_float+0x28e>
 810c49c:	6823      	ldr	r3, [r4, #0]
 810c49e:	07d9      	lsls	r1, r3, #31
 810c4a0:	d5d8      	bpl.n	810c454 <_printf_float+0x240>
 810c4a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c4a6:	4631      	mov	r1, r6
 810c4a8:	4628      	mov	r0, r5
 810c4aa:	47b8      	blx	r7
 810c4ac:	3001      	adds	r0, #1
 810c4ae:	f43f af0e 	beq.w	810c2ce <_printf_float+0xba>
 810c4b2:	f04f 0900 	mov.w	r9, #0
 810c4b6:	f104 0a1a 	add.w	sl, r4, #26
 810c4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c4bc:	425b      	negs	r3, r3
 810c4be:	454b      	cmp	r3, r9
 810c4c0:	dc01      	bgt.n	810c4c6 <_printf_float+0x2b2>
 810c4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c4c4:	e794      	b.n	810c3f0 <_printf_float+0x1dc>
 810c4c6:	2301      	movs	r3, #1
 810c4c8:	4652      	mov	r2, sl
 810c4ca:	4631      	mov	r1, r6
 810c4cc:	4628      	mov	r0, r5
 810c4ce:	47b8      	blx	r7
 810c4d0:	3001      	adds	r0, #1
 810c4d2:	f43f aefc 	beq.w	810c2ce <_printf_float+0xba>
 810c4d6:	f109 0901 	add.w	r9, r9, #1
 810c4da:	e7ee      	b.n	810c4ba <_printf_float+0x2a6>
 810c4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c4de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810c4e0:	429a      	cmp	r2, r3
 810c4e2:	bfa8      	it	ge
 810c4e4:	461a      	movge	r2, r3
 810c4e6:	2a00      	cmp	r2, #0
 810c4e8:	4691      	mov	r9, r2
 810c4ea:	dd07      	ble.n	810c4fc <_printf_float+0x2e8>
 810c4ec:	4613      	mov	r3, r2
 810c4ee:	4631      	mov	r1, r6
 810c4f0:	4642      	mov	r2, r8
 810c4f2:	4628      	mov	r0, r5
 810c4f4:	47b8      	blx	r7
 810c4f6:	3001      	adds	r0, #1
 810c4f8:	f43f aee9 	beq.w	810c2ce <_printf_float+0xba>
 810c4fc:	f104 031a 	add.w	r3, r4, #26
 810c500:	f04f 0b00 	mov.w	fp, #0
 810c504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810c508:	9306      	str	r3, [sp, #24]
 810c50a:	e015      	b.n	810c538 <_printf_float+0x324>
 810c50c:	7fefffff 	.word	0x7fefffff
 810c510:	0810dcb0 	.word	0x0810dcb0
 810c514:	0810dcac 	.word	0x0810dcac
 810c518:	0810dcb8 	.word	0x0810dcb8
 810c51c:	0810dcb4 	.word	0x0810dcb4
 810c520:	0810dcbc 	.word	0x0810dcbc
 810c524:	2301      	movs	r3, #1
 810c526:	9a06      	ldr	r2, [sp, #24]
 810c528:	4631      	mov	r1, r6
 810c52a:	4628      	mov	r0, r5
 810c52c:	47b8      	blx	r7
 810c52e:	3001      	adds	r0, #1
 810c530:	f43f aecd 	beq.w	810c2ce <_printf_float+0xba>
 810c534:	f10b 0b01 	add.w	fp, fp, #1
 810c538:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810c53c:	ebaa 0309 	sub.w	r3, sl, r9
 810c540:	455b      	cmp	r3, fp
 810c542:	dcef      	bgt.n	810c524 <_printf_float+0x310>
 810c544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810c548:	429a      	cmp	r2, r3
 810c54a:	44d0      	add	r8, sl
 810c54c:	db15      	blt.n	810c57a <_printf_float+0x366>
 810c54e:	6823      	ldr	r3, [r4, #0]
 810c550:	07da      	lsls	r2, r3, #31
 810c552:	d412      	bmi.n	810c57a <_printf_float+0x366>
 810c554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c556:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c558:	eba3 020a 	sub.w	r2, r3, sl
 810c55c:	eba3 0a01 	sub.w	sl, r3, r1
 810c560:	4592      	cmp	sl, r2
 810c562:	bfa8      	it	ge
 810c564:	4692      	movge	sl, r2
 810c566:	f1ba 0f00 	cmp.w	sl, #0
 810c56a:	dc0e      	bgt.n	810c58a <_printf_float+0x376>
 810c56c:	f04f 0800 	mov.w	r8, #0
 810c570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c574:	f104 091a 	add.w	r9, r4, #26
 810c578:	e019      	b.n	810c5ae <_printf_float+0x39a>
 810c57a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c57e:	4631      	mov	r1, r6
 810c580:	4628      	mov	r0, r5
 810c582:	47b8      	blx	r7
 810c584:	3001      	adds	r0, #1
 810c586:	d1e5      	bne.n	810c554 <_printf_float+0x340>
 810c588:	e6a1      	b.n	810c2ce <_printf_float+0xba>
 810c58a:	4653      	mov	r3, sl
 810c58c:	4642      	mov	r2, r8
 810c58e:	4631      	mov	r1, r6
 810c590:	4628      	mov	r0, r5
 810c592:	47b8      	blx	r7
 810c594:	3001      	adds	r0, #1
 810c596:	d1e9      	bne.n	810c56c <_printf_float+0x358>
 810c598:	e699      	b.n	810c2ce <_printf_float+0xba>
 810c59a:	2301      	movs	r3, #1
 810c59c:	464a      	mov	r2, r9
 810c59e:	4631      	mov	r1, r6
 810c5a0:	4628      	mov	r0, r5
 810c5a2:	47b8      	blx	r7
 810c5a4:	3001      	adds	r0, #1
 810c5a6:	f43f ae92 	beq.w	810c2ce <_printf_float+0xba>
 810c5aa:	f108 0801 	add.w	r8, r8, #1
 810c5ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810c5b2:	1a9b      	subs	r3, r3, r2
 810c5b4:	eba3 030a 	sub.w	r3, r3, sl
 810c5b8:	4543      	cmp	r3, r8
 810c5ba:	dcee      	bgt.n	810c59a <_printf_float+0x386>
 810c5bc:	e74a      	b.n	810c454 <_printf_float+0x240>
 810c5be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c5c0:	2a01      	cmp	r2, #1
 810c5c2:	dc01      	bgt.n	810c5c8 <_printf_float+0x3b4>
 810c5c4:	07db      	lsls	r3, r3, #31
 810c5c6:	d53a      	bpl.n	810c63e <_printf_float+0x42a>
 810c5c8:	2301      	movs	r3, #1
 810c5ca:	4642      	mov	r2, r8
 810c5cc:	4631      	mov	r1, r6
 810c5ce:	4628      	mov	r0, r5
 810c5d0:	47b8      	blx	r7
 810c5d2:	3001      	adds	r0, #1
 810c5d4:	f43f ae7b 	beq.w	810c2ce <_printf_float+0xba>
 810c5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c5dc:	4631      	mov	r1, r6
 810c5de:	4628      	mov	r0, r5
 810c5e0:	47b8      	blx	r7
 810c5e2:	3001      	adds	r0, #1
 810c5e4:	f108 0801 	add.w	r8, r8, #1
 810c5e8:	f43f ae71 	beq.w	810c2ce <_printf_float+0xba>
 810c5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c5ee:	2200      	movs	r2, #0
 810c5f0:	f103 3aff 	add.w	sl, r3, #4294967295
 810c5f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810c5f8:	2300      	movs	r3, #0
 810c5fa:	f7f4 fa9d 	bl	8100b38 <__aeabi_dcmpeq>
 810c5fe:	b9c8      	cbnz	r0, 810c634 <_printf_float+0x420>
 810c600:	4653      	mov	r3, sl
 810c602:	4642      	mov	r2, r8
 810c604:	4631      	mov	r1, r6
 810c606:	4628      	mov	r0, r5
 810c608:	47b8      	blx	r7
 810c60a:	3001      	adds	r0, #1
 810c60c:	d10e      	bne.n	810c62c <_printf_float+0x418>
 810c60e:	e65e      	b.n	810c2ce <_printf_float+0xba>
 810c610:	2301      	movs	r3, #1
 810c612:	4652      	mov	r2, sl
 810c614:	4631      	mov	r1, r6
 810c616:	4628      	mov	r0, r5
 810c618:	47b8      	blx	r7
 810c61a:	3001      	adds	r0, #1
 810c61c:	f43f ae57 	beq.w	810c2ce <_printf_float+0xba>
 810c620:	f108 0801 	add.w	r8, r8, #1
 810c624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c626:	3b01      	subs	r3, #1
 810c628:	4543      	cmp	r3, r8
 810c62a:	dcf1      	bgt.n	810c610 <_printf_float+0x3fc>
 810c62c:	464b      	mov	r3, r9
 810c62e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810c632:	e6de      	b.n	810c3f2 <_printf_float+0x1de>
 810c634:	f04f 0800 	mov.w	r8, #0
 810c638:	f104 0a1a 	add.w	sl, r4, #26
 810c63c:	e7f2      	b.n	810c624 <_printf_float+0x410>
 810c63e:	2301      	movs	r3, #1
 810c640:	e7df      	b.n	810c602 <_printf_float+0x3ee>
 810c642:	2301      	movs	r3, #1
 810c644:	464a      	mov	r2, r9
 810c646:	4631      	mov	r1, r6
 810c648:	4628      	mov	r0, r5
 810c64a:	47b8      	blx	r7
 810c64c:	3001      	adds	r0, #1
 810c64e:	f43f ae3e 	beq.w	810c2ce <_printf_float+0xba>
 810c652:	f108 0801 	add.w	r8, r8, #1
 810c656:	68e3      	ldr	r3, [r4, #12]
 810c658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c65a:	1a9b      	subs	r3, r3, r2
 810c65c:	4543      	cmp	r3, r8
 810c65e:	dcf0      	bgt.n	810c642 <_printf_float+0x42e>
 810c660:	e6fc      	b.n	810c45c <_printf_float+0x248>
 810c662:	f04f 0800 	mov.w	r8, #0
 810c666:	f104 0919 	add.w	r9, r4, #25
 810c66a:	e7f4      	b.n	810c656 <_printf_float+0x442>
 810c66c:	2900      	cmp	r1, #0
 810c66e:	f43f ae8b 	beq.w	810c388 <_printf_float+0x174>
 810c672:	2300      	movs	r3, #0
 810c674:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810c678:	ab09      	add	r3, sp, #36	; 0x24
 810c67a:	9300      	str	r3, [sp, #0]
 810c67c:	ec49 8b10 	vmov	d0, r8, r9
 810c680:	6022      	str	r2, [r4, #0]
 810c682:	f8cd a004 	str.w	sl, [sp, #4]
 810c686:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810c68a:	4628      	mov	r0, r5
 810c68c:	f7ff fd2d 	bl	810c0ea <__cvt>
 810c690:	4680      	mov	r8, r0
 810c692:	e648      	b.n	810c326 <_printf_float+0x112>

0810c694 <_printf_common>:
 810c694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c698:	4691      	mov	r9, r2
 810c69a:	461f      	mov	r7, r3
 810c69c:	688a      	ldr	r2, [r1, #8]
 810c69e:	690b      	ldr	r3, [r1, #16]
 810c6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810c6a4:	4293      	cmp	r3, r2
 810c6a6:	bfb8      	it	lt
 810c6a8:	4613      	movlt	r3, r2
 810c6aa:	f8c9 3000 	str.w	r3, [r9]
 810c6ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810c6b2:	4606      	mov	r6, r0
 810c6b4:	460c      	mov	r4, r1
 810c6b6:	b112      	cbz	r2, 810c6be <_printf_common+0x2a>
 810c6b8:	3301      	adds	r3, #1
 810c6ba:	f8c9 3000 	str.w	r3, [r9]
 810c6be:	6823      	ldr	r3, [r4, #0]
 810c6c0:	0699      	lsls	r1, r3, #26
 810c6c2:	bf42      	ittt	mi
 810c6c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 810c6c8:	3302      	addmi	r3, #2
 810c6ca:	f8c9 3000 	strmi.w	r3, [r9]
 810c6ce:	6825      	ldr	r5, [r4, #0]
 810c6d0:	f015 0506 	ands.w	r5, r5, #6
 810c6d4:	d107      	bne.n	810c6e6 <_printf_common+0x52>
 810c6d6:	f104 0a19 	add.w	sl, r4, #25
 810c6da:	68e3      	ldr	r3, [r4, #12]
 810c6dc:	f8d9 2000 	ldr.w	r2, [r9]
 810c6e0:	1a9b      	subs	r3, r3, r2
 810c6e2:	42ab      	cmp	r3, r5
 810c6e4:	dc28      	bgt.n	810c738 <_printf_common+0xa4>
 810c6e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810c6ea:	6822      	ldr	r2, [r4, #0]
 810c6ec:	3300      	adds	r3, #0
 810c6ee:	bf18      	it	ne
 810c6f0:	2301      	movne	r3, #1
 810c6f2:	0692      	lsls	r2, r2, #26
 810c6f4:	d42d      	bmi.n	810c752 <_printf_common+0xbe>
 810c6f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810c6fa:	4639      	mov	r1, r7
 810c6fc:	4630      	mov	r0, r6
 810c6fe:	47c0      	blx	r8
 810c700:	3001      	adds	r0, #1
 810c702:	d020      	beq.n	810c746 <_printf_common+0xb2>
 810c704:	6823      	ldr	r3, [r4, #0]
 810c706:	68e5      	ldr	r5, [r4, #12]
 810c708:	f8d9 2000 	ldr.w	r2, [r9]
 810c70c:	f003 0306 	and.w	r3, r3, #6
 810c710:	2b04      	cmp	r3, #4
 810c712:	bf08      	it	eq
 810c714:	1aad      	subeq	r5, r5, r2
 810c716:	68a3      	ldr	r3, [r4, #8]
 810c718:	6922      	ldr	r2, [r4, #16]
 810c71a:	bf0c      	ite	eq
 810c71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810c720:	2500      	movne	r5, #0
 810c722:	4293      	cmp	r3, r2
 810c724:	bfc4      	itt	gt
 810c726:	1a9b      	subgt	r3, r3, r2
 810c728:	18ed      	addgt	r5, r5, r3
 810c72a:	f04f 0900 	mov.w	r9, #0
 810c72e:	341a      	adds	r4, #26
 810c730:	454d      	cmp	r5, r9
 810c732:	d11a      	bne.n	810c76a <_printf_common+0xd6>
 810c734:	2000      	movs	r0, #0
 810c736:	e008      	b.n	810c74a <_printf_common+0xb6>
 810c738:	2301      	movs	r3, #1
 810c73a:	4652      	mov	r2, sl
 810c73c:	4639      	mov	r1, r7
 810c73e:	4630      	mov	r0, r6
 810c740:	47c0      	blx	r8
 810c742:	3001      	adds	r0, #1
 810c744:	d103      	bne.n	810c74e <_printf_common+0xba>
 810c746:	f04f 30ff 	mov.w	r0, #4294967295
 810c74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c74e:	3501      	adds	r5, #1
 810c750:	e7c3      	b.n	810c6da <_printf_common+0x46>
 810c752:	18e1      	adds	r1, r4, r3
 810c754:	1c5a      	adds	r2, r3, #1
 810c756:	2030      	movs	r0, #48	; 0x30
 810c758:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810c75c:	4422      	add	r2, r4
 810c75e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810c762:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810c766:	3302      	adds	r3, #2
 810c768:	e7c5      	b.n	810c6f6 <_printf_common+0x62>
 810c76a:	2301      	movs	r3, #1
 810c76c:	4622      	mov	r2, r4
 810c76e:	4639      	mov	r1, r7
 810c770:	4630      	mov	r0, r6
 810c772:	47c0      	blx	r8
 810c774:	3001      	adds	r0, #1
 810c776:	d0e6      	beq.n	810c746 <_printf_common+0xb2>
 810c778:	f109 0901 	add.w	r9, r9, #1
 810c77c:	e7d8      	b.n	810c730 <_printf_common+0x9c>

0810c77e <quorem>:
 810c77e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c782:	6903      	ldr	r3, [r0, #16]
 810c784:	690c      	ldr	r4, [r1, #16]
 810c786:	42a3      	cmp	r3, r4
 810c788:	4680      	mov	r8, r0
 810c78a:	f2c0 8082 	blt.w	810c892 <quorem+0x114>
 810c78e:	3c01      	subs	r4, #1
 810c790:	f101 0714 	add.w	r7, r1, #20
 810c794:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810c798:	f100 0614 	add.w	r6, r0, #20
 810c79c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 810c7a0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810c7a4:	eb06 030c 	add.w	r3, r6, ip
 810c7a8:	3501      	adds	r5, #1
 810c7aa:	eb07 090c 	add.w	r9, r7, ip
 810c7ae:	9301      	str	r3, [sp, #4]
 810c7b0:	fbb0 f5f5 	udiv	r5, r0, r5
 810c7b4:	b395      	cbz	r5, 810c81c <quorem+0x9e>
 810c7b6:	f04f 0a00 	mov.w	sl, #0
 810c7ba:	4638      	mov	r0, r7
 810c7bc:	46b6      	mov	lr, r6
 810c7be:	46d3      	mov	fp, sl
 810c7c0:	f850 2b04 	ldr.w	r2, [r0], #4
 810c7c4:	b293      	uxth	r3, r2
 810c7c6:	fb05 a303 	mla	r3, r5, r3, sl
 810c7ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810c7ce:	b29b      	uxth	r3, r3
 810c7d0:	ebab 0303 	sub.w	r3, fp, r3
 810c7d4:	0c12      	lsrs	r2, r2, #16
 810c7d6:	f8de b000 	ldr.w	fp, [lr]
 810c7da:	fb05 a202 	mla	r2, r5, r2, sl
 810c7de:	fa13 f38b 	uxtah	r3, r3, fp
 810c7e2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 810c7e6:	fa1f fb82 	uxth.w	fp, r2
 810c7ea:	f8de 2000 	ldr.w	r2, [lr]
 810c7ee:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 810c7f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810c7f6:	b29b      	uxth	r3, r3
 810c7f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810c7fc:	4581      	cmp	r9, r0
 810c7fe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 810c802:	f84e 3b04 	str.w	r3, [lr], #4
 810c806:	d2db      	bcs.n	810c7c0 <quorem+0x42>
 810c808:	f856 300c 	ldr.w	r3, [r6, ip]
 810c80c:	b933      	cbnz	r3, 810c81c <quorem+0x9e>
 810c80e:	9b01      	ldr	r3, [sp, #4]
 810c810:	3b04      	subs	r3, #4
 810c812:	429e      	cmp	r6, r3
 810c814:	461a      	mov	r2, r3
 810c816:	d330      	bcc.n	810c87a <quorem+0xfc>
 810c818:	f8c8 4010 	str.w	r4, [r8, #16]
 810c81c:	4640      	mov	r0, r8
 810c81e:	f001 f81f 	bl	810d860 <__mcmp>
 810c822:	2800      	cmp	r0, #0
 810c824:	db25      	blt.n	810c872 <quorem+0xf4>
 810c826:	3501      	adds	r5, #1
 810c828:	4630      	mov	r0, r6
 810c82a:	f04f 0c00 	mov.w	ip, #0
 810c82e:	f857 2b04 	ldr.w	r2, [r7], #4
 810c832:	f8d0 e000 	ldr.w	lr, [r0]
 810c836:	b293      	uxth	r3, r2
 810c838:	ebac 0303 	sub.w	r3, ip, r3
 810c83c:	0c12      	lsrs	r2, r2, #16
 810c83e:	fa13 f38e 	uxtah	r3, r3, lr
 810c842:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810c846:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810c84a:	b29b      	uxth	r3, r3
 810c84c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810c850:	45b9      	cmp	r9, r7
 810c852:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810c856:	f840 3b04 	str.w	r3, [r0], #4
 810c85a:	d2e8      	bcs.n	810c82e <quorem+0xb0>
 810c85c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 810c860:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810c864:	b92a      	cbnz	r2, 810c872 <quorem+0xf4>
 810c866:	3b04      	subs	r3, #4
 810c868:	429e      	cmp	r6, r3
 810c86a:	461a      	mov	r2, r3
 810c86c:	d30b      	bcc.n	810c886 <quorem+0x108>
 810c86e:	f8c8 4010 	str.w	r4, [r8, #16]
 810c872:	4628      	mov	r0, r5
 810c874:	b003      	add	sp, #12
 810c876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c87a:	6812      	ldr	r2, [r2, #0]
 810c87c:	3b04      	subs	r3, #4
 810c87e:	2a00      	cmp	r2, #0
 810c880:	d1ca      	bne.n	810c818 <quorem+0x9a>
 810c882:	3c01      	subs	r4, #1
 810c884:	e7c5      	b.n	810c812 <quorem+0x94>
 810c886:	6812      	ldr	r2, [r2, #0]
 810c888:	3b04      	subs	r3, #4
 810c88a:	2a00      	cmp	r2, #0
 810c88c:	d1ef      	bne.n	810c86e <quorem+0xf0>
 810c88e:	3c01      	subs	r4, #1
 810c890:	e7ea      	b.n	810c868 <quorem+0xea>
 810c892:	2000      	movs	r0, #0
 810c894:	e7ee      	b.n	810c874 <quorem+0xf6>
	...

0810c898 <_dtoa_r>:
 810c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c89c:	ec57 6b10 	vmov	r6, r7, d0
 810c8a0:	b097      	sub	sp, #92	; 0x5c
 810c8a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810c8a4:	9106      	str	r1, [sp, #24]
 810c8a6:	4604      	mov	r4, r0
 810c8a8:	920b      	str	r2, [sp, #44]	; 0x2c
 810c8aa:	9312      	str	r3, [sp, #72]	; 0x48
 810c8ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810c8b0:	e9cd 6700 	strd	r6, r7, [sp]
 810c8b4:	b93d      	cbnz	r5, 810c8c6 <_dtoa_r+0x2e>
 810c8b6:	2010      	movs	r0, #16
 810c8b8:	f000 fdb4 	bl	810d424 <malloc>
 810c8bc:	6260      	str	r0, [r4, #36]	; 0x24
 810c8be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810c8c2:	6005      	str	r5, [r0, #0]
 810c8c4:	60c5      	str	r5, [r0, #12]
 810c8c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c8c8:	6819      	ldr	r1, [r3, #0]
 810c8ca:	b151      	cbz	r1, 810c8e2 <_dtoa_r+0x4a>
 810c8cc:	685a      	ldr	r2, [r3, #4]
 810c8ce:	604a      	str	r2, [r1, #4]
 810c8d0:	2301      	movs	r3, #1
 810c8d2:	4093      	lsls	r3, r2
 810c8d4:	608b      	str	r3, [r1, #8]
 810c8d6:	4620      	mov	r0, r4
 810c8d8:	f000 fde0 	bl	810d49c <_Bfree>
 810c8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c8de:	2200      	movs	r2, #0
 810c8e0:	601a      	str	r2, [r3, #0]
 810c8e2:	1e3b      	subs	r3, r7, #0
 810c8e4:	bfbb      	ittet	lt
 810c8e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810c8ea:	9301      	strlt	r3, [sp, #4]
 810c8ec:	2300      	movge	r3, #0
 810c8ee:	2201      	movlt	r2, #1
 810c8f0:	bfac      	ite	ge
 810c8f2:	f8c8 3000 	strge.w	r3, [r8]
 810c8f6:	f8c8 2000 	strlt.w	r2, [r8]
 810c8fa:	4baf      	ldr	r3, [pc, #700]	; (810cbb8 <_dtoa_r+0x320>)
 810c8fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810c900:	ea33 0308 	bics.w	r3, r3, r8
 810c904:	d114      	bne.n	810c930 <_dtoa_r+0x98>
 810c906:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c908:	f242 730f 	movw	r3, #9999	; 0x270f
 810c90c:	6013      	str	r3, [r2, #0]
 810c90e:	9b00      	ldr	r3, [sp, #0]
 810c910:	b923      	cbnz	r3, 810c91c <_dtoa_r+0x84>
 810c912:	f3c8 0013 	ubfx	r0, r8, #0, #20
 810c916:	2800      	cmp	r0, #0
 810c918:	f000 8542 	beq.w	810d3a0 <_dtoa_r+0xb08>
 810c91c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c91e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810cbcc <_dtoa_r+0x334>
 810c922:	2b00      	cmp	r3, #0
 810c924:	f000 8544 	beq.w	810d3b0 <_dtoa_r+0xb18>
 810c928:	f10b 0303 	add.w	r3, fp, #3
 810c92c:	f000 bd3e 	b.w	810d3ac <_dtoa_r+0xb14>
 810c930:	e9dd 6700 	ldrd	r6, r7, [sp]
 810c934:	2200      	movs	r2, #0
 810c936:	2300      	movs	r3, #0
 810c938:	4630      	mov	r0, r6
 810c93a:	4639      	mov	r1, r7
 810c93c:	f7f4 f8fc 	bl	8100b38 <__aeabi_dcmpeq>
 810c940:	4681      	mov	r9, r0
 810c942:	b168      	cbz	r0, 810c960 <_dtoa_r+0xc8>
 810c944:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810c946:	2301      	movs	r3, #1
 810c948:	6013      	str	r3, [r2, #0]
 810c94a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c94c:	2b00      	cmp	r3, #0
 810c94e:	f000 8524 	beq.w	810d39a <_dtoa_r+0xb02>
 810c952:	4b9a      	ldr	r3, [pc, #616]	; (810cbbc <_dtoa_r+0x324>)
 810c954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810c956:	f103 3bff 	add.w	fp, r3, #4294967295
 810c95a:	6013      	str	r3, [r2, #0]
 810c95c:	f000 bd28 	b.w	810d3b0 <_dtoa_r+0xb18>
 810c960:	aa14      	add	r2, sp, #80	; 0x50
 810c962:	a915      	add	r1, sp, #84	; 0x54
 810c964:	ec47 6b10 	vmov	d0, r6, r7
 810c968:	4620      	mov	r0, r4
 810c96a:	f000 fff0 	bl	810d94e <__d2b>
 810c96e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810c972:	9004      	str	r0, [sp, #16]
 810c974:	2d00      	cmp	r5, #0
 810c976:	d07c      	beq.n	810ca72 <_dtoa_r+0x1da>
 810c978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810c97c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 810c980:	46b2      	mov	sl, r6
 810c982:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810c986:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810c98a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 810c98e:	2200      	movs	r2, #0
 810c990:	4b8b      	ldr	r3, [pc, #556]	; (810cbc0 <_dtoa_r+0x328>)
 810c992:	4650      	mov	r0, sl
 810c994:	4659      	mov	r1, fp
 810c996:	f7f3 fcaf 	bl	81002f8 <__aeabi_dsub>
 810c99a:	a381      	add	r3, pc, #516	; (adr r3, 810cba0 <_dtoa_r+0x308>)
 810c99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9a0:	f7f3 fe62 	bl	8100668 <__aeabi_dmul>
 810c9a4:	a380      	add	r3, pc, #512	; (adr r3, 810cba8 <_dtoa_r+0x310>)
 810c9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9aa:	f7f3 fca7 	bl	81002fc <__adddf3>
 810c9ae:	4606      	mov	r6, r0
 810c9b0:	4628      	mov	r0, r5
 810c9b2:	460f      	mov	r7, r1
 810c9b4:	f7f3 fdee 	bl	8100594 <__aeabi_i2d>
 810c9b8:	a37d      	add	r3, pc, #500	; (adr r3, 810cbb0 <_dtoa_r+0x318>)
 810c9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c9be:	f7f3 fe53 	bl	8100668 <__aeabi_dmul>
 810c9c2:	4602      	mov	r2, r0
 810c9c4:	460b      	mov	r3, r1
 810c9c6:	4630      	mov	r0, r6
 810c9c8:	4639      	mov	r1, r7
 810c9ca:	f7f3 fc97 	bl	81002fc <__adddf3>
 810c9ce:	4606      	mov	r6, r0
 810c9d0:	460f      	mov	r7, r1
 810c9d2:	f7f4 f8f9 	bl	8100bc8 <__aeabi_d2iz>
 810c9d6:	2200      	movs	r2, #0
 810c9d8:	4682      	mov	sl, r0
 810c9da:	2300      	movs	r3, #0
 810c9dc:	4630      	mov	r0, r6
 810c9de:	4639      	mov	r1, r7
 810c9e0:	f7f4 f8b4 	bl	8100b4c <__aeabi_dcmplt>
 810c9e4:	b148      	cbz	r0, 810c9fa <_dtoa_r+0x162>
 810c9e6:	4650      	mov	r0, sl
 810c9e8:	f7f3 fdd4 	bl	8100594 <__aeabi_i2d>
 810c9ec:	4632      	mov	r2, r6
 810c9ee:	463b      	mov	r3, r7
 810c9f0:	f7f4 f8a2 	bl	8100b38 <__aeabi_dcmpeq>
 810c9f4:	b908      	cbnz	r0, 810c9fa <_dtoa_r+0x162>
 810c9f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c9fa:	f1ba 0f16 	cmp.w	sl, #22
 810c9fe:	d859      	bhi.n	810cab4 <_dtoa_r+0x21c>
 810ca00:	4970      	ldr	r1, [pc, #448]	; (810cbc4 <_dtoa_r+0x32c>)
 810ca02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810ca06:	e9dd 2300 	ldrd	r2, r3, [sp]
 810ca0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ca0e:	f7f4 f8bb 	bl	8100b88 <__aeabi_dcmpgt>
 810ca12:	2800      	cmp	r0, #0
 810ca14:	d050      	beq.n	810cab8 <_dtoa_r+0x220>
 810ca16:	f10a 3aff 	add.w	sl, sl, #4294967295
 810ca1a:	2300      	movs	r3, #0
 810ca1c:	930f      	str	r3, [sp, #60]	; 0x3c
 810ca1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ca20:	1b5d      	subs	r5, r3, r5
 810ca22:	f1b5 0801 	subs.w	r8, r5, #1
 810ca26:	bf49      	itett	mi
 810ca28:	f1c5 0301 	rsbmi	r3, r5, #1
 810ca2c:	2300      	movpl	r3, #0
 810ca2e:	9305      	strmi	r3, [sp, #20]
 810ca30:	f04f 0800 	movmi.w	r8, #0
 810ca34:	bf58      	it	pl
 810ca36:	9305      	strpl	r3, [sp, #20]
 810ca38:	f1ba 0f00 	cmp.w	sl, #0
 810ca3c:	db3e      	blt.n	810cabc <_dtoa_r+0x224>
 810ca3e:	2300      	movs	r3, #0
 810ca40:	44d0      	add	r8, sl
 810ca42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810ca46:	9307      	str	r3, [sp, #28]
 810ca48:	9b06      	ldr	r3, [sp, #24]
 810ca4a:	2b09      	cmp	r3, #9
 810ca4c:	f200 8090 	bhi.w	810cb70 <_dtoa_r+0x2d8>
 810ca50:	2b05      	cmp	r3, #5
 810ca52:	bfc4      	itt	gt
 810ca54:	3b04      	subgt	r3, #4
 810ca56:	9306      	strgt	r3, [sp, #24]
 810ca58:	9b06      	ldr	r3, [sp, #24]
 810ca5a:	f1a3 0302 	sub.w	r3, r3, #2
 810ca5e:	bfcc      	ite	gt
 810ca60:	2500      	movgt	r5, #0
 810ca62:	2501      	movle	r5, #1
 810ca64:	2b03      	cmp	r3, #3
 810ca66:	f200 808f 	bhi.w	810cb88 <_dtoa_r+0x2f0>
 810ca6a:	e8df f003 	tbb	[pc, r3]
 810ca6e:	7f7d      	.short	0x7f7d
 810ca70:	7131      	.short	0x7131
 810ca72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810ca76:	441d      	add	r5, r3
 810ca78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 810ca7c:	2820      	cmp	r0, #32
 810ca7e:	dd13      	ble.n	810caa8 <_dtoa_r+0x210>
 810ca80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810ca84:	9b00      	ldr	r3, [sp, #0]
 810ca86:	fa08 f800 	lsl.w	r8, r8, r0
 810ca8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 810ca8e:	fa23 f000 	lsr.w	r0, r3, r0
 810ca92:	ea48 0000 	orr.w	r0, r8, r0
 810ca96:	f7f3 fd6d 	bl	8100574 <__aeabi_ui2d>
 810ca9a:	2301      	movs	r3, #1
 810ca9c:	4682      	mov	sl, r0
 810ca9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810caa2:	3d01      	subs	r5, #1
 810caa4:	9313      	str	r3, [sp, #76]	; 0x4c
 810caa6:	e772      	b.n	810c98e <_dtoa_r+0xf6>
 810caa8:	9b00      	ldr	r3, [sp, #0]
 810caaa:	f1c0 0020 	rsb	r0, r0, #32
 810caae:	fa03 f000 	lsl.w	r0, r3, r0
 810cab2:	e7f0      	b.n	810ca96 <_dtoa_r+0x1fe>
 810cab4:	2301      	movs	r3, #1
 810cab6:	e7b1      	b.n	810ca1c <_dtoa_r+0x184>
 810cab8:	900f      	str	r0, [sp, #60]	; 0x3c
 810caba:	e7b0      	b.n	810ca1e <_dtoa_r+0x186>
 810cabc:	9b05      	ldr	r3, [sp, #20]
 810cabe:	eba3 030a 	sub.w	r3, r3, sl
 810cac2:	9305      	str	r3, [sp, #20]
 810cac4:	f1ca 0300 	rsb	r3, sl, #0
 810cac8:	9307      	str	r3, [sp, #28]
 810caca:	2300      	movs	r3, #0
 810cacc:	930e      	str	r3, [sp, #56]	; 0x38
 810cace:	e7bb      	b.n	810ca48 <_dtoa_r+0x1b0>
 810cad0:	2301      	movs	r3, #1
 810cad2:	930a      	str	r3, [sp, #40]	; 0x28
 810cad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cad6:	2b00      	cmp	r3, #0
 810cad8:	dd59      	ble.n	810cb8e <_dtoa_r+0x2f6>
 810cada:	9302      	str	r3, [sp, #8]
 810cadc:	4699      	mov	r9, r3
 810cade:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810cae0:	2200      	movs	r2, #0
 810cae2:	6072      	str	r2, [r6, #4]
 810cae4:	2204      	movs	r2, #4
 810cae6:	f102 0014 	add.w	r0, r2, #20
 810caea:	4298      	cmp	r0, r3
 810caec:	6871      	ldr	r1, [r6, #4]
 810caee:	d953      	bls.n	810cb98 <_dtoa_r+0x300>
 810caf0:	4620      	mov	r0, r4
 810caf2:	f000 fc9f 	bl	810d434 <_Balloc>
 810caf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810caf8:	6030      	str	r0, [r6, #0]
 810cafa:	f1b9 0f0e 	cmp.w	r9, #14
 810cafe:	f8d3 b000 	ldr.w	fp, [r3]
 810cb02:	f200 80e6 	bhi.w	810ccd2 <_dtoa_r+0x43a>
 810cb06:	2d00      	cmp	r5, #0
 810cb08:	f000 80e3 	beq.w	810ccd2 <_dtoa_r+0x43a>
 810cb0c:	ed9d 7b00 	vldr	d7, [sp]
 810cb10:	f1ba 0f00 	cmp.w	sl, #0
 810cb14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 810cb18:	dd74      	ble.n	810cc04 <_dtoa_r+0x36c>
 810cb1a:	4a2a      	ldr	r2, [pc, #168]	; (810cbc4 <_dtoa_r+0x32c>)
 810cb1c:	f00a 030f 	and.w	r3, sl, #15
 810cb20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810cb24:	ed93 7b00 	vldr	d7, [r3]
 810cb28:	ea4f 162a 	mov.w	r6, sl, asr #4
 810cb2c:	06f0      	lsls	r0, r6, #27
 810cb2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 810cb32:	d565      	bpl.n	810cc00 <_dtoa_r+0x368>
 810cb34:	4b24      	ldr	r3, [pc, #144]	; (810cbc8 <_dtoa_r+0x330>)
 810cb36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810cb3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810cb3e:	f7f3 febd 	bl	81008bc <__aeabi_ddiv>
 810cb42:	e9cd 0100 	strd	r0, r1, [sp]
 810cb46:	f006 060f 	and.w	r6, r6, #15
 810cb4a:	2503      	movs	r5, #3
 810cb4c:	4f1e      	ldr	r7, [pc, #120]	; (810cbc8 <_dtoa_r+0x330>)
 810cb4e:	e04c      	b.n	810cbea <_dtoa_r+0x352>
 810cb50:	2301      	movs	r3, #1
 810cb52:	930a      	str	r3, [sp, #40]	; 0x28
 810cb54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cb56:	4453      	add	r3, sl
 810cb58:	f103 0901 	add.w	r9, r3, #1
 810cb5c:	9302      	str	r3, [sp, #8]
 810cb5e:	464b      	mov	r3, r9
 810cb60:	2b01      	cmp	r3, #1
 810cb62:	bfb8      	it	lt
 810cb64:	2301      	movlt	r3, #1
 810cb66:	e7ba      	b.n	810cade <_dtoa_r+0x246>
 810cb68:	2300      	movs	r3, #0
 810cb6a:	e7b2      	b.n	810cad2 <_dtoa_r+0x23a>
 810cb6c:	2300      	movs	r3, #0
 810cb6e:	e7f0      	b.n	810cb52 <_dtoa_r+0x2ba>
 810cb70:	2501      	movs	r5, #1
 810cb72:	2300      	movs	r3, #0
 810cb74:	9306      	str	r3, [sp, #24]
 810cb76:	950a      	str	r5, [sp, #40]	; 0x28
 810cb78:	f04f 33ff 	mov.w	r3, #4294967295
 810cb7c:	9302      	str	r3, [sp, #8]
 810cb7e:	4699      	mov	r9, r3
 810cb80:	2200      	movs	r2, #0
 810cb82:	2312      	movs	r3, #18
 810cb84:	920b      	str	r2, [sp, #44]	; 0x2c
 810cb86:	e7aa      	b.n	810cade <_dtoa_r+0x246>
 810cb88:	2301      	movs	r3, #1
 810cb8a:	930a      	str	r3, [sp, #40]	; 0x28
 810cb8c:	e7f4      	b.n	810cb78 <_dtoa_r+0x2e0>
 810cb8e:	2301      	movs	r3, #1
 810cb90:	9302      	str	r3, [sp, #8]
 810cb92:	4699      	mov	r9, r3
 810cb94:	461a      	mov	r2, r3
 810cb96:	e7f5      	b.n	810cb84 <_dtoa_r+0x2ec>
 810cb98:	3101      	adds	r1, #1
 810cb9a:	6071      	str	r1, [r6, #4]
 810cb9c:	0052      	lsls	r2, r2, #1
 810cb9e:	e7a2      	b.n	810cae6 <_dtoa_r+0x24e>
 810cba0:	636f4361 	.word	0x636f4361
 810cba4:	3fd287a7 	.word	0x3fd287a7
 810cba8:	8b60c8b3 	.word	0x8b60c8b3
 810cbac:	3fc68a28 	.word	0x3fc68a28
 810cbb0:	509f79fb 	.word	0x509f79fb
 810cbb4:	3fd34413 	.word	0x3fd34413
 810cbb8:	7ff00000 	.word	0x7ff00000
 810cbbc:	0810dcbd 	.word	0x0810dcbd
 810cbc0:	3ff80000 	.word	0x3ff80000
 810cbc4:	0810dcf8 	.word	0x0810dcf8
 810cbc8:	0810dcd0 	.word	0x0810dcd0
 810cbcc:	0810dcc7 	.word	0x0810dcc7
 810cbd0:	07f1      	lsls	r1, r6, #31
 810cbd2:	d508      	bpl.n	810cbe6 <_dtoa_r+0x34e>
 810cbd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810cbd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810cbdc:	f7f3 fd44 	bl	8100668 <__aeabi_dmul>
 810cbe0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810cbe4:	3501      	adds	r5, #1
 810cbe6:	1076      	asrs	r6, r6, #1
 810cbe8:	3708      	adds	r7, #8
 810cbea:	2e00      	cmp	r6, #0
 810cbec:	d1f0      	bne.n	810cbd0 <_dtoa_r+0x338>
 810cbee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 810cbf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 810cbf6:	f7f3 fe61 	bl	81008bc <__aeabi_ddiv>
 810cbfa:	e9cd 0100 	strd	r0, r1, [sp]
 810cbfe:	e01a      	b.n	810cc36 <_dtoa_r+0x39e>
 810cc00:	2502      	movs	r5, #2
 810cc02:	e7a3      	b.n	810cb4c <_dtoa_r+0x2b4>
 810cc04:	f000 80a0 	beq.w	810cd48 <_dtoa_r+0x4b0>
 810cc08:	f1ca 0600 	rsb	r6, sl, #0
 810cc0c:	4b9f      	ldr	r3, [pc, #636]	; (810ce8c <_dtoa_r+0x5f4>)
 810cc0e:	4fa0      	ldr	r7, [pc, #640]	; (810ce90 <_dtoa_r+0x5f8>)
 810cc10:	f006 020f 	and.w	r2, r6, #15
 810cc14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810cc20:	f7f3 fd22 	bl	8100668 <__aeabi_dmul>
 810cc24:	e9cd 0100 	strd	r0, r1, [sp]
 810cc28:	1136      	asrs	r6, r6, #4
 810cc2a:	2300      	movs	r3, #0
 810cc2c:	2502      	movs	r5, #2
 810cc2e:	2e00      	cmp	r6, #0
 810cc30:	d17f      	bne.n	810cd32 <_dtoa_r+0x49a>
 810cc32:	2b00      	cmp	r3, #0
 810cc34:	d1e1      	bne.n	810cbfa <_dtoa_r+0x362>
 810cc36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810cc38:	2b00      	cmp	r3, #0
 810cc3a:	f000 8087 	beq.w	810cd4c <_dtoa_r+0x4b4>
 810cc3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 810cc42:	2200      	movs	r2, #0
 810cc44:	4b93      	ldr	r3, [pc, #588]	; (810ce94 <_dtoa_r+0x5fc>)
 810cc46:	4630      	mov	r0, r6
 810cc48:	4639      	mov	r1, r7
 810cc4a:	f7f3 ff7f 	bl	8100b4c <__aeabi_dcmplt>
 810cc4e:	2800      	cmp	r0, #0
 810cc50:	d07c      	beq.n	810cd4c <_dtoa_r+0x4b4>
 810cc52:	f1b9 0f00 	cmp.w	r9, #0
 810cc56:	d079      	beq.n	810cd4c <_dtoa_r+0x4b4>
 810cc58:	9b02      	ldr	r3, [sp, #8]
 810cc5a:	2b00      	cmp	r3, #0
 810cc5c:	dd35      	ble.n	810ccca <_dtoa_r+0x432>
 810cc5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 810cc62:	9308      	str	r3, [sp, #32]
 810cc64:	4639      	mov	r1, r7
 810cc66:	2200      	movs	r2, #0
 810cc68:	4b8b      	ldr	r3, [pc, #556]	; (810ce98 <_dtoa_r+0x600>)
 810cc6a:	4630      	mov	r0, r6
 810cc6c:	f7f3 fcfc 	bl	8100668 <__aeabi_dmul>
 810cc70:	e9cd 0100 	strd	r0, r1, [sp]
 810cc74:	9f02      	ldr	r7, [sp, #8]
 810cc76:	3501      	adds	r5, #1
 810cc78:	4628      	mov	r0, r5
 810cc7a:	f7f3 fc8b 	bl	8100594 <__aeabi_i2d>
 810cc7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810cc82:	f7f3 fcf1 	bl	8100668 <__aeabi_dmul>
 810cc86:	2200      	movs	r2, #0
 810cc88:	4b84      	ldr	r3, [pc, #528]	; (810ce9c <_dtoa_r+0x604>)
 810cc8a:	f7f3 fb37 	bl	81002fc <__adddf3>
 810cc8e:	4605      	mov	r5, r0
 810cc90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810cc94:	2f00      	cmp	r7, #0
 810cc96:	d15d      	bne.n	810cd54 <_dtoa_r+0x4bc>
 810cc98:	2200      	movs	r2, #0
 810cc9a:	4b81      	ldr	r3, [pc, #516]	; (810cea0 <_dtoa_r+0x608>)
 810cc9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810cca0:	f7f3 fb2a 	bl	81002f8 <__aeabi_dsub>
 810cca4:	462a      	mov	r2, r5
 810cca6:	4633      	mov	r3, r6
 810cca8:	e9cd 0100 	strd	r0, r1, [sp]
 810ccac:	f7f3 ff6c 	bl	8100b88 <__aeabi_dcmpgt>
 810ccb0:	2800      	cmp	r0, #0
 810ccb2:	f040 8288 	bne.w	810d1c6 <_dtoa_r+0x92e>
 810ccb6:	462a      	mov	r2, r5
 810ccb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810ccbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 810ccc0:	f7f3 ff44 	bl	8100b4c <__aeabi_dcmplt>
 810ccc4:	2800      	cmp	r0, #0
 810ccc6:	f040 827c 	bne.w	810d1c2 <_dtoa_r+0x92a>
 810ccca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810ccce:	e9cd 2300 	strd	r2, r3, [sp]
 810ccd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ccd4:	2b00      	cmp	r3, #0
 810ccd6:	f2c0 8150 	blt.w	810cf7a <_dtoa_r+0x6e2>
 810ccda:	f1ba 0f0e 	cmp.w	sl, #14
 810ccde:	f300 814c 	bgt.w	810cf7a <_dtoa_r+0x6e2>
 810cce2:	4b6a      	ldr	r3, [pc, #424]	; (810ce8c <_dtoa_r+0x5f4>)
 810cce4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810cce8:	ed93 7b00 	vldr	d7, [r3]
 810ccec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ccee:	2b00      	cmp	r3, #0
 810ccf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 810ccf4:	f280 80d8 	bge.w	810cea8 <_dtoa_r+0x610>
 810ccf8:	f1b9 0f00 	cmp.w	r9, #0
 810ccfc:	f300 80d4 	bgt.w	810cea8 <_dtoa_r+0x610>
 810cd00:	f040 825e 	bne.w	810d1c0 <_dtoa_r+0x928>
 810cd04:	2200      	movs	r2, #0
 810cd06:	4b66      	ldr	r3, [pc, #408]	; (810cea0 <_dtoa_r+0x608>)
 810cd08:	ec51 0b17 	vmov	r0, r1, d7
 810cd0c:	f7f3 fcac 	bl	8100668 <__aeabi_dmul>
 810cd10:	e9dd 2300 	ldrd	r2, r3, [sp]
 810cd14:	f7f3 ff2e 	bl	8100b74 <__aeabi_dcmpge>
 810cd18:	464f      	mov	r7, r9
 810cd1a:	464e      	mov	r6, r9
 810cd1c:	2800      	cmp	r0, #0
 810cd1e:	f040 8234 	bne.w	810d18a <_dtoa_r+0x8f2>
 810cd22:	2331      	movs	r3, #49	; 0x31
 810cd24:	f10b 0501 	add.w	r5, fp, #1
 810cd28:	f88b 3000 	strb.w	r3, [fp]
 810cd2c:	f10a 0a01 	add.w	sl, sl, #1
 810cd30:	e22f      	b.n	810d192 <_dtoa_r+0x8fa>
 810cd32:	07f2      	lsls	r2, r6, #31
 810cd34:	d505      	bpl.n	810cd42 <_dtoa_r+0x4aa>
 810cd36:	e9d7 2300 	ldrd	r2, r3, [r7]
 810cd3a:	f7f3 fc95 	bl	8100668 <__aeabi_dmul>
 810cd3e:	3501      	adds	r5, #1
 810cd40:	2301      	movs	r3, #1
 810cd42:	1076      	asrs	r6, r6, #1
 810cd44:	3708      	adds	r7, #8
 810cd46:	e772      	b.n	810cc2e <_dtoa_r+0x396>
 810cd48:	2502      	movs	r5, #2
 810cd4a:	e774      	b.n	810cc36 <_dtoa_r+0x39e>
 810cd4c:	f8cd a020 	str.w	sl, [sp, #32]
 810cd50:	464f      	mov	r7, r9
 810cd52:	e791      	b.n	810cc78 <_dtoa_r+0x3e0>
 810cd54:	4b4d      	ldr	r3, [pc, #308]	; (810ce8c <_dtoa_r+0x5f4>)
 810cd56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810cd5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cd60:	2b00      	cmp	r3, #0
 810cd62:	d047      	beq.n	810cdf4 <_dtoa_r+0x55c>
 810cd64:	4602      	mov	r2, r0
 810cd66:	460b      	mov	r3, r1
 810cd68:	2000      	movs	r0, #0
 810cd6a:	494e      	ldr	r1, [pc, #312]	; (810cea4 <_dtoa_r+0x60c>)
 810cd6c:	f7f3 fda6 	bl	81008bc <__aeabi_ddiv>
 810cd70:	462a      	mov	r2, r5
 810cd72:	4633      	mov	r3, r6
 810cd74:	f7f3 fac0 	bl	81002f8 <__aeabi_dsub>
 810cd78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810cd7c:	465d      	mov	r5, fp
 810cd7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 810cd82:	f7f3 ff21 	bl	8100bc8 <__aeabi_d2iz>
 810cd86:	4606      	mov	r6, r0
 810cd88:	f7f3 fc04 	bl	8100594 <__aeabi_i2d>
 810cd8c:	4602      	mov	r2, r0
 810cd8e:	460b      	mov	r3, r1
 810cd90:	e9dd 0100 	ldrd	r0, r1, [sp]
 810cd94:	f7f3 fab0 	bl	81002f8 <__aeabi_dsub>
 810cd98:	3630      	adds	r6, #48	; 0x30
 810cd9a:	f805 6b01 	strb.w	r6, [r5], #1
 810cd9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810cda2:	e9cd 0100 	strd	r0, r1, [sp]
 810cda6:	f7f3 fed1 	bl	8100b4c <__aeabi_dcmplt>
 810cdaa:	2800      	cmp	r0, #0
 810cdac:	d163      	bne.n	810ce76 <_dtoa_r+0x5de>
 810cdae:	e9dd 2300 	ldrd	r2, r3, [sp]
 810cdb2:	2000      	movs	r0, #0
 810cdb4:	4937      	ldr	r1, [pc, #220]	; (810ce94 <_dtoa_r+0x5fc>)
 810cdb6:	f7f3 fa9f 	bl	81002f8 <__aeabi_dsub>
 810cdba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810cdbe:	f7f3 fec5 	bl	8100b4c <__aeabi_dcmplt>
 810cdc2:	2800      	cmp	r0, #0
 810cdc4:	f040 80b7 	bne.w	810cf36 <_dtoa_r+0x69e>
 810cdc8:	eba5 030b 	sub.w	r3, r5, fp
 810cdcc:	429f      	cmp	r7, r3
 810cdce:	f77f af7c 	ble.w	810ccca <_dtoa_r+0x432>
 810cdd2:	2200      	movs	r2, #0
 810cdd4:	4b30      	ldr	r3, [pc, #192]	; (810ce98 <_dtoa_r+0x600>)
 810cdd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810cdda:	f7f3 fc45 	bl	8100668 <__aeabi_dmul>
 810cdde:	2200      	movs	r2, #0
 810cde0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810cde4:	4b2c      	ldr	r3, [pc, #176]	; (810ce98 <_dtoa_r+0x600>)
 810cde6:	e9dd 0100 	ldrd	r0, r1, [sp]
 810cdea:	f7f3 fc3d 	bl	8100668 <__aeabi_dmul>
 810cdee:	e9cd 0100 	strd	r0, r1, [sp]
 810cdf2:	e7c4      	b.n	810cd7e <_dtoa_r+0x4e6>
 810cdf4:	462a      	mov	r2, r5
 810cdf6:	4633      	mov	r3, r6
 810cdf8:	f7f3 fc36 	bl	8100668 <__aeabi_dmul>
 810cdfc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810ce00:	eb0b 0507 	add.w	r5, fp, r7
 810ce04:	465e      	mov	r6, fp
 810ce06:	e9dd 0100 	ldrd	r0, r1, [sp]
 810ce0a:	f7f3 fedd 	bl	8100bc8 <__aeabi_d2iz>
 810ce0e:	4607      	mov	r7, r0
 810ce10:	f7f3 fbc0 	bl	8100594 <__aeabi_i2d>
 810ce14:	3730      	adds	r7, #48	; 0x30
 810ce16:	4602      	mov	r2, r0
 810ce18:	460b      	mov	r3, r1
 810ce1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 810ce1e:	f7f3 fa6b 	bl	81002f8 <__aeabi_dsub>
 810ce22:	f806 7b01 	strb.w	r7, [r6], #1
 810ce26:	42ae      	cmp	r6, r5
 810ce28:	e9cd 0100 	strd	r0, r1, [sp]
 810ce2c:	f04f 0200 	mov.w	r2, #0
 810ce30:	d126      	bne.n	810ce80 <_dtoa_r+0x5e8>
 810ce32:	4b1c      	ldr	r3, [pc, #112]	; (810cea4 <_dtoa_r+0x60c>)
 810ce34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810ce38:	f7f3 fa60 	bl	81002fc <__adddf3>
 810ce3c:	4602      	mov	r2, r0
 810ce3e:	460b      	mov	r3, r1
 810ce40:	e9dd 0100 	ldrd	r0, r1, [sp]
 810ce44:	f7f3 fea0 	bl	8100b88 <__aeabi_dcmpgt>
 810ce48:	2800      	cmp	r0, #0
 810ce4a:	d174      	bne.n	810cf36 <_dtoa_r+0x69e>
 810ce4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810ce50:	2000      	movs	r0, #0
 810ce52:	4914      	ldr	r1, [pc, #80]	; (810cea4 <_dtoa_r+0x60c>)
 810ce54:	f7f3 fa50 	bl	81002f8 <__aeabi_dsub>
 810ce58:	4602      	mov	r2, r0
 810ce5a:	460b      	mov	r3, r1
 810ce5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810ce60:	f7f3 fe74 	bl	8100b4c <__aeabi_dcmplt>
 810ce64:	2800      	cmp	r0, #0
 810ce66:	f43f af30 	beq.w	810ccca <_dtoa_r+0x432>
 810ce6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810ce6e:	2b30      	cmp	r3, #48	; 0x30
 810ce70:	f105 32ff 	add.w	r2, r5, #4294967295
 810ce74:	d002      	beq.n	810ce7c <_dtoa_r+0x5e4>
 810ce76:	f8dd a020 	ldr.w	sl, [sp, #32]
 810ce7a:	e04a      	b.n	810cf12 <_dtoa_r+0x67a>
 810ce7c:	4615      	mov	r5, r2
 810ce7e:	e7f4      	b.n	810ce6a <_dtoa_r+0x5d2>
 810ce80:	4b05      	ldr	r3, [pc, #20]	; (810ce98 <_dtoa_r+0x600>)
 810ce82:	f7f3 fbf1 	bl	8100668 <__aeabi_dmul>
 810ce86:	e9cd 0100 	strd	r0, r1, [sp]
 810ce8a:	e7bc      	b.n	810ce06 <_dtoa_r+0x56e>
 810ce8c:	0810dcf8 	.word	0x0810dcf8
 810ce90:	0810dcd0 	.word	0x0810dcd0
 810ce94:	3ff00000 	.word	0x3ff00000
 810ce98:	40240000 	.word	0x40240000
 810ce9c:	401c0000 	.word	0x401c0000
 810cea0:	40140000 	.word	0x40140000
 810cea4:	3fe00000 	.word	0x3fe00000
 810cea8:	e9dd 6700 	ldrd	r6, r7, [sp]
 810ceac:	465d      	mov	r5, fp
 810ceae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810ceb2:	4630      	mov	r0, r6
 810ceb4:	4639      	mov	r1, r7
 810ceb6:	f7f3 fd01 	bl	81008bc <__aeabi_ddiv>
 810ceba:	f7f3 fe85 	bl	8100bc8 <__aeabi_d2iz>
 810cebe:	4680      	mov	r8, r0
 810cec0:	f7f3 fb68 	bl	8100594 <__aeabi_i2d>
 810cec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810cec8:	f7f3 fbce 	bl	8100668 <__aeabi_dmul>
 810cecc:	4602      	mov	r2, r0
 810cece:	460b      	mov	r3, r1
 810ced0:	4630      	mov	r0, r6
 810ced2:	4639      	mov	r1, r7
 810ced4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 810ced8:	f7f3 fa0e 	bl	81002f8 <__aeabi_dsub>
 810cedc:	f805 6b01 	strb.w	r6, [r5], #1
 810cee0:	eba5 060b 	sub.w	r6, r5, fp
 810cee4:	45b1      	cmp	r9, r6
 810cee6:	4602      	mov	r2, r0
 810cee8:	460b      	mov	r3, r1
 810ceea:	d139      	bne.n	810cf60 <_dtoa_r+0x6c8>
 810ceec:	f7f3 fa06 	bl	81002fc <__adddf3>
 810cef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810cef4:	4606      	mov	r6, r0
 810cef6:	460f      	mov	r7, r1
 810cef8:	f7f3 fe46 	bl	8100b88 <__aeabi_dcmpgt>
 810cefc:	b9c8      	cbnz	r0, 810cf32 <_dtoa_r+0x69a>
 810cefe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810cf02:	4630      	mov	r0, r6
 810cf04:	4639      	mov	r1, r7
 810cf06:	f7f3 fe17 	bl	8100b38 <__aeabi_dcmpeq>
 810cf0a:	b110      	cbz	r0, 810cf12 <_dtoa_r+0x67a>
 810cf0c:	f018 0f01 	tst.w	r8, #1
 810cf10:	d10f      	bne.n	810cf32 <_dtoa_r+0x69a>
 810cf12:	9904      	ldr	r1, [sp, #16]
 810cf14:	4620      	mov	r0, r4
 810cf16:	f000 fac1 	bl	810d49c <_Bfree>
 810cf1a:	2300      	movs	r3, #0
 810cf1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810cf1e:	702b      	strb	r3, [r5, #0]
 810cf20:	f10a 0301 	add.w	r3, sl, #1
 810cf24:	6013      	str	r3, [r2, #0]
 810cf26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810cf28:	2b00      	cmp	r3, #0
 810cf2a:	f000 8241 	beq.w	810d3b0 <_dtoa_r+0xb18>
 810cf2e:	601d      	str	r5, [r3, #0]
 810cf30:	e23e      	b.n	810d3b0 <_dtoa_r+0xb18>
 810cf32:	f8cd a020 	str.w	sl, [sp, #32]
 810cf36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810cf3a:	2a39      	cmp	r2, #57	; 0x39
 810cf3c:	f105 33ff 	add.w	r3, r5, #4294967295
 810cf40:	d108      	bne.n	810cf54 <_dtoa_r+0x6bc>
 810cf42:	459b      	cmp	fp, r3
 810cf44:	d10a      	bne.n	810cf5c <_dtoa_r+0x6c4>
 810cf46:	9b08      	ldr	r3, [sp, #32]
 810cf48:	3301      	adds	r3, #1
 810cf4a:	9308      	str	r3, [sp, #32]
 810cf4c:	2330      	movs	r3, #48	; 0x30
 810cf4e:	f88b 3000 	strb.w	r3, [fp]
 810cf52:	465b      	mov	r3, fp
 810cf54:	781a      	ldrb	r2, [r3, #0]
 810cf56:	3201      	adds	r2, #1
 810cf58:	701a      	strb	r2, [r3, #0]
 810cf5a:	e78c      	b.n	810ce76 <_dtoa_r+0x5de>
 810cf5c:	461d      	mov	r5, r3
 810cf5e:	e7ea      	b.n	810cf36 <_dtoa_r+0x69e>
 810cf60:	2200      	movs	r2, #0
 810cf62:	4b9b      	ldr	r3, [pc, #620]	; (810d1d0 <_dtoa_r+0x938>)
 810cf64:	f7f3 fb80 	bl	8100668 <__aeabi_dmul>
 810cf68:	2200      	movs	r2, #0
 810cf6a:	2300      	movs	r3, #0
 810cf6c:	4606      	mov	r6, r0
 810cf6e:	460f      	mov	r7, r1
 810cf70:	f7f3 fde2 	bl	8100b38 <__aeabi_dcmpeq>
 810cf74:	2800      	cmp	r0, #0
 810cf76:	d09a      	beq.n	810ceae <_dtoa_r+0x616>
 810cf78:	e7cb      	b.n	810cf12 <_dtoa_r+0x67a>
 810cf7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810cf7c:	2a00      	cmp	r2, #0
 810cf7e:	f000 808b 	beq.w	810d098 <_dtoa_r+0x800>
 810cf82:	9a06      	ldr	r2, [sp, #24]
 810cf84:	2a01      	cmp	r2, #1
 810cf86:	dc6e      	bgt.n	810d066 <_dtoa_r+0x7ce>
 810cf88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810cf8a:	2a00      	cmp	r2, #0
 810cf8c:	d067      	beq.n	810d05e <_dtoa_r+0x7c6>
 810cf8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810cf92:	9f07      	ldr	r7, [sp, #28]
 810cf94:	9d05      	ldr	r5, [sp, #20]
 810cf96:	9a05      	ldr	r2, [sp, #20]
 810cf98:	2101      	movs	r1, #1
 810cf9a:	441a      	add	r2, r3
 810cf9c:	4620      	mov	r0, r4
 810cf9e:	9205      	str	r2, [sp, #20]
 810cfa0:	4498      	add	r8, r3
 810cfa2:	f000 fb1b 	bl	810d5dc <__i2b>
 810cfa6:	4606      	mov	r6, r0
 810cfa8:	2d00      	cmp	r5, #0
 810cfaa:	dd0c      	ble.n	810cfc6 <_dtoa_r+0x72e>
 810cfac:	f1b8 0f00 	cmp.w	r8, #0
 810cfb0:	dd09      	ble.n	810cfc6 <_dtoa_r+0x72e>
 810cfb2:	4545      	cmp	r5, r8
 810cfb4:	9a05      	ldr	r2, [sp, #20]
 810cfb6:	462b      	mov	r3, r5
 810cfb8:	bfa8      	it	ge
 810cfba:	4643      	movge	r3, r8
 810cfbc:	1ad2      	subs	r2, r2, r3
 810cfbe:	9205      	str	r2, [sp, #20]
 810cfc0:	1aed      	subs	r5, r5, r3
 810cfc2:	eba8 0803 	sub.w	r8, r8, r3
 810cfc6:	9b07      	ldr	r3, [sp, #28]
 810cfc8:	b1eb      	cbz	r3, 810d006 <_dtoa_r+0x76e>
 810cfca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810cfcc:	2b00      	cmp	r3, #0
 810cfce:	d067      	beq.n	810d0a0 <_dtoa_r+0x808>
 810cfd0:	b18f      	cbz	r7, 810cff6 <_dtoa_r+0x75e>
 810cfd2:	4631      	mov	r1, r6
 810cfd4:	463a      	mov	r2, r7
 810cfd6:	4620      	mov	r0, r4
 810cfd8:	f000 fba0 	bl	810d71c <__pow5mult>
 810cfdc:	9a04      	ldr	r2, [sp, #16]
 810cfde:	4601      	mov	r1, r0
 810cfe0:	4606      	mov	r6, r0
 810cfe2:	4620      	mov	r0, r4
 810cfe4:	f000 fb03 	bl	810d5ee <__multiply>
 810cfe8:	9904      	ldr	r1, [sp, #16]
 810cfea:	9008      	str	r0, [sp, #32]
 810cfec:	4620      	mov	r0, r4
 810cfee:	f000 fa55 	bl	810d49c <_Bfree>
 810cff2:	9b08      	ldr	r3, [sp, #32]
 810cff4:	9304      	str	r3, [sp, #16]
 810cff6:	9b07      	ldr	r3, [sp, #28]
 810cff8:	1bda      	subs	r2, r3, r7
 810cffa:	d004      	beq.n	810d006 <_dtoa_r+0x76e>
 810cffc:	9904      	ldr	r1, [sp, #16]
 810cffe:	4620      	mov	r0, r4
 810d000:	f000 fb8c 	bl	810d71c <__pow5mult>
 810d004:	9004      	str	r0, [sp, #16]
 810d006:	2101      	movs	r1, #1
 810d008:	4620      	mov	r0, r4
 810d00a:	f000 fae7 	bl	810d5dc <__i2b>
 810d00e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810d010:	4607      	mov	r7, r0
 810d012:	2b00      	cmp	r3, #0
 810d014:	f000 81d0 	beq.w	810d3b8 <_dtoa_r+0xb20>
 810d018:	461a      	mov	r2, r3
 810d01a:	4601      	mov	r1, r0
 810d01c:	4620      	mov	r0, r4
 810d01e:	f000 fb7d 	bl	810d71c <__pow5mult>
 810d022:	9b06      	ldr	r3, [sp, #24]
 810d024:	2b01      	cmp	r3, #1
 810d026:	4607      	mov	r7, r0
 810d028:	dc40      	bgt.n	810d0ac <_dtoa_r+0x814>
 810d02a:	9b00      	ldr	r3, [sp, #0]
 810d02c:	2b00      	cmp	r3, #0
 810d02e:	d139      	bne.n	810d0a4 <_dtoa_r+0x80c>
 810d030:	9b01      	ldr	r3, [sp, #4]
 810d032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810d036:	2b00      	cmp	r3, #0
 810d038:	d136      	bne.n	810d0a8 <_dtoa_r+0x810>
 810d03a:	9b01      	ldr	r3, [sp, #4]
 810d03c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810d040:	0d1b      	lsrs	r3, r3, #20
 810d042:	051b      	lsls	r3, r3, #20
 810d044:	b12b      	cbz	r3, 810d052 <_dtoa_r+0x7ba>
 810d046:	9b05      	ldr	r3, [sp, #20]
 810d048:	3301      	adds	r3, #1
 810d04a:	9305      	str	r3, [sp, #20]
 810d04c:	f108 0801 	add.w	r8, r8, #1
 810d050:	2301      	movs	r3, #1
 810d052:	9307      	str	r3, [sp, #28]
 810d054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810d056:	2b00      	cmp	r3, #0
 810d058:	d12a      	bne.n	810d0b0 <_dtoa_r+0x818>
 810d05a:	2001      	movs	r0, #1
 810d05c:	e030      	b.n	810d0c0 <_dtoa_r+0x828>
 810d05e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810d060:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810d064:	e795      	b.n	810cf92 <_dtoa_r+0x6fa>
 810d066:	9b07      	ldr	r3, [sp, #28]
 810d068:	f109 37ff 	add.w	r7, r9, #4294967295
 810d06c:	42bb      	cmp	r3, r7
 810d06e:	bfbf      	itttt	lt
 810d070:	9b07      	ldrlt	r3, [sp, #28]
 810d072:	9707      	strlt	r7, [sp, #28]
 810d074:	1afa      	sublt	r2, r7, r3
 810d076:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 810d078:	bfbb      	ittet	lt
 810d07a:	189b      	addlt	r3, r3, r2
 810d07c:	930e      	strlt	r3, [sp, #56]	; 0x38
 810d07e:	1bdf      	subge	r7, r3, r7
 810d080:	2700      	movlt	r7, #0
 810d082:	f1b9 0f00 	cmp.w	r9, #0
 810d086:	bfb5      	itete	lt
 810d088:	9b05      	ldrlt	r3, [sp, #20]
 810d08a:	9d05      	ldrge	r5, [sp, #20]
 810d08c:	eba3 0509 	sublt.w	r5, r3, r9
 810d090:	464b      	movge	r3, r9
 810d092:	bfb8      	it	lt
 810d094:	2300      	movlt	r3, #0
 810d096:	e77e      	b.n	810cf96 <_dtoa_r+0x6fe>
 810d098:	9f07      	ldr	r7, [sp, #28]
 810d09a:	9d05      	ldr	r5, [sp, #20]
 810d09c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810d09e:	e783      	b.n	810cfa8 <_dtoa_r+0x710>
 810d0a0:	9a07      	ldr	r2, [sp, #28]
 810d0a2:	e7ab      	b.n	810cffc <_dtoa_r+0x764>
 810d0a4:	2300      	movs	r3, #0
 810d0a6:	e7d4      	b.n	810d052 <_dtoa_r+0x7ba>
 810d0a8:	9b00      	ldr	r3, [sp, #0]
 810d0aa:	e7d2      	b.n	810d052 <_dtoa_r+0x7ba>
 810d0ac:	2300      	movs	r3, #0
 810d0ae:	9307      	str	r3, [sp, #28]
 810d0b0:	693b      	ldr	r3, [r7, #16]
 810d0b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 810d0b6:	6918      	ldr	r0, [r3, #16]
 810d0b8:	f000 fa42 	bl	810d540 <__hi0bits>
 810d0bc:	f1c0 0020 	rsb	r0, r0, #32
 810d0c0:	4440      	add	r0, r8
 810d0c2:	f010 001f 	ands.w	r0, r0, #31
 810d0c6:	d047      	beq.n	810d158 <_dtoa_r+0x8c0>
 810d0c8:	f1c0 0320 	rsb	r3, r0, #32
 810d0cc:	2b04      	cmp	r3, #4
 810d0ce:	dd3b      	ble.n	810d148 <_dtoa_r+0x8b0>
 810d0d0:	9b05      	ldr	r3, [sp, #20]
 810d0d2:	f1c0 001c 	rsb	r0, r0, #28
 810d0d6:	4403      	add	r3, r0
 810d0d8:	9305      	str	r3, [sp, #20]
 810d0da:	4405      	add	r5, r0
 810d0dc:	4480      	add	r8, r0
 810d0de:	9b05      	ldr	r3, [sp, #20]
 810d0e0:	2b00      	cmp	r3, #0
 810d0e2:	dd05      	ble.n	810d0f0 <_dtoa_r+0x858>
 810d0e4:	461a      	mov	r2, r3
 810d0e6:	9904      	ldr	r1, [sp, #16]
 810d0e8:	4620      	mov	r0, r4
 810d0ea:	f000 fb65 	bl	810d7b8 <__lshift>
 810d0ee:	9004      	str	r0, [sp, #16]
 810d0f0:	f1b8 0f00 	cmp.w	r8, #0
 810d0f4:	dd05      	ble.n	810d102 <_dtoa_r+0x86a>
 810d0f6:	4639      	mov	r1, r7
 810d0f8:	4642      	mov	r2, r8
 810d0fa:	4620      	mov	r0, r4
 810d0fc:	f000 fb5c 	bl	810d7b8 <__lshift>
 810d100:	4607      	mov	r7, r0
 810d102:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810d104:	b353      	cbz	r3, 810d15c <_dtoa_r+0x8c4>
 810d106:	4639      	mov	r1, r7
 810d108:	9804      	ldr	r0, [sp, #16]
 810d10a:	f000 fba9 	bl	810d860 <__mcmp>
 810d10e:	2800      	cmp	r0, #0
 810d110:	da24      	bge.n	810d15c <_dtoa_r+0x8c4>
 810d112:	2300      	movs	r3, #0
 810d114:	220a      	movs	r2, #10
 810d116:	9904      	ldr	r1, [sp, #16]
 810d118:	4620      	mov	r0, r4
 810d11a:	f000 f9d6 	bl	810d4ca <__multadd>
 810d11e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d120:	9004      	str	r0, [sp, #16]
 810d122:	f10a 3aff 	add.w	sl, sl, #4294967295
 810d126:	2b00      	cmp	r3, #0
 810d128:	f000 814d 	beq.w	810d3c6 <_dtoa_r+0xb2e>
 810d12c:	2300      	movs	r3, #0
 810d12e:	4631      	mov	r1, r6
 810d130:	220a      	movs	r2, #10
 810d132:	4620      	mov	r0, r4
 810d134:	f000 f9c9 	bl	810d4ca <__multadd>
 810d138:	9b02      	ldr	r3, [sp, #8]
 810d13a:	2b00      	cmp	r3, #0
 810d13c:	4606      	mov	r6, r0
 810d13e:	dc4f      	bgt.n	810d1e0 <_dtoa_r+0x948>
 810d140:	9b06      	ldr	r3, [sp, #24]
 810d142:	2b02      	cmp	r3, #2
 810d144:	dd4c      	ble.n	810d1e0 <_dtoa_r+0x948>
 810d146:	e011      	b.n	810d16c <_dtoa_r+0x8d4>
 810d148:	d0c9      	beq.n	810d0de <_dtoa_r+0x846>
 810d14a:	9a05      	ldr	r2, [sp, #20]
 810d14c:	331c      	adds	r3, #28
 810d14e:	441a      	add	r2, r3
 810d150:	9205      	str	r2, [sp, #20]
 810d152:	441d      	add	r5, r3
 810d154:	4498      	add	r8, r3
 810d156:	e7c2      	b.n	810d0de <_dtoa_r+0x846>
 810d158:	4603      	mov	r3, r0
 810d15a:	e7f6      	b.n	810d14a <_dtoa_r+0x8b2>
 810d15c:	f1b9 0f00 	cmp.w	r9, #0
 810d160:	dc38      	bgt.n	810d1d4 <_dtoa_r+0x93c>
 810d162:	9b06      	ldr	r3, [sp, #24]
 810d164:	2b02      	cmp	r3, #2
 810d166:	dd35      	ble.n	810d1d4 <_dtoa_r+0x93c>
 810d168:	f8cd 9008 	str.w	r9, [sp, #8]
 810d16c:	9b02      	ldr	r3, [sp, #8]
 810d16e:	b963      	cbnz	r3, 810d18a <_dtoa_r+0x8f2>
 810d170:	4639      	mov	r1, r7
 810d172:	2205      	movs	r2, #5
 810d174:	4620      	mov	r0, r4
 810d176:	f000 f9a8 	bl	810d4ca <__multadd>
 810d17a:	4601      	mov	r1, r0
 810d17c:	4607      	mov	r7, r0
 810d17e:	9804      	ldr	r0, [sp, #16]
 810d180:	f000 fb6e 	bl	810d860 <__mcmp>
 810d184:	2800      	cmp	r0, #0
 810d186:	f73f adcc 	bgt.w	810cd22 <_dtoa_r+0x48a>
 810d18a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d18c:	465d      	mov	r5, fp
 810d18e:	ea6f 0a03 	mvn.w	sl, r3
 810d192:	f04f 0900 	mov.w	r9, #0
 810d196:	4639      	mov	r1, r7
 810d198:	4620      	mov	r0, r4
 810d19a:	f000 f97f 	bl	810d49c <_Bfree>
 810d19e:	2e00      	cmp	r6, #0
 810d1a0:	f43f aeb7 	beq.w	810cf12 <_dtoa_r+0x67a>
 810d1a4:	f1b9 0f00 	cmp.w	r9, #0
 810d1a8:	d005      	beq.n	810d1b6 <_dtoa_r+0x91e>
 810d1aa:	45b1      	cmp	r9, r6
 810d1ac:	d003      	beq.n	810d1b6 <_dtoa_r+0x91e>
 810d1ae:	4649      	mov	r1, r9
 810d1b0:	4620      	mov	r0, r4
 810d1b2:	f000 f973 	bl	810d49c <_Bfree>
 810d1b6:	4631      	mov	r1, r6
 810d1b8:	4620      	mov	r0, r4
 810d1ba:	f000 f96f 	bl	810d49c <_Bfree>
 810d1be:	e6a8      	b.n	810cf12 <_dtoa_r+0x67a>
 810d1c0:	2700      	movs	r7, #0
 810d1c2:	463e      	mov	r6, r7
 810d1c4:	e7e1      	b.n	810d18a <_dtoa_r+0x8f2>
 810d1c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 810d1ca:	463e      	mov	r6, r7
 810d1cc:	e5a9      	b.n	810cd22 <_dtoa_r+0x48a>
 810d1ce:	bf00      	nop
 810d1d0:	40240000 	.word	0x40240000
 810d1d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d1d6:	f8cd 9008 	str.w	r9, [sp, #8]
 810d1da:	2b00      	cmp	r3, #0
 810d1dc:	f000 80fa 	beq.w	810d3d4 <_dtoa_r+0xb3c>
 810d1e0:	2d00      	cmp	r5, #0
 810d1e2:	dd05      	ble.n	810d1f0 <_dtoa_r+0x958>
 810d1e4:	4631      	mov	r1, r6
 810d1e6:	462a      	mov	r2, r5
 810d1e8:	4620      	mov	r0, r4
 810d1ea:	f000 fae5 	bl	810d7b8 <__lshift>
 810d1ee:	4606      	mov	r6, r0
 810d1f0:	9b07      	ldr	r3, [sp, #28]
 810d1f2:	2b00      	cmp	r3, #0
 810d1f4:	d04c      	beq.n	810d290 <_dtoa_r+0x9f8>
 810d1f6:	6871      	ldr	r1, [r6, #4]
 810d1f8:	4620      	mov	r0, r4
 810d1fa:	f000 f91b 	bl	810d434 <_Balloc>
 810d1fe:	6932      	ldr	r2, [r6, #16]
 810d200:	3202      	adds	r2, #2
 810d202:	4605      	mov	r5, r0
 810d204:	0092      	lsls	r2, r2, #2
 810d206:	f106 010c 	add.w	r1, r6, #12
 810d20a:	300c      	adds	r0, #12
 810d20c:	f7fe ff5a 	bl	810c0c4 <memcpy>
 810d210:	2201      	movs	r2, #1
 810d212:	4629      	mov	r1, r5
 810d214:	4620      	mov	r0, r4
 810d216:	f000 facf 	bl	810d7b8 <__lshift>
 810d21a:	9b00      	ldr	r3, [sp, #0]
 810d21c:	f8cd b014 	str.w	fp, [sp, #20]
 810d220:	f003 0301 	and.w	r3, r3, #1
 810d224:	46b1      	mov	r9, r6
 810d226:	9307      	str	r3, [sp, #28]
 810d228:	4606      	mov	r6, r0
 810d22a:	4639      	mov	r1, r7
 810d22c:	9804      	ldr	r0, [sp, #16]
 810d22e:	f7ff faa6 	bl	810c77e <quorem>
 810d232:	4649      	mov	r1, r9
 810d234:	4605      	mov	r5, r0
 810d236:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810d23a:	9804      	ldr	r0, [sp, #16]
 810d23c:	f000 fb10 	bl	810d860 <__mcmp>
 810d240:	4632      	mov	r2, r6
 810d242:	9000      	str	r0, [sp, #0]
 810d244:	4639      	mov	r1, r7
 810d246:	4620      	mov	r0, r4
 810d248:	f000 fb24 	bl	810d894 <__mdiff>
 810d24c:	68c3      	ldr	r3, [r0, #12]
 810d24e:	4602      	mov	r2, r0
 810d250:	bb03      	cbnz	r3, 810d294 <_dtoa_r+0x9fc>
 810d252:	4601      	mov	r1, r0
 810d254:	9008      	str	r0, [sp, #32]
 810d256:	9804      	ldr	r0, [sp, #16]
 810d258:	f000 fb02 	bl	810d860 <__mcmp>
 810d25c:	9a08      	ldr	r2, [sp, #32]
 810d25e:	4603      	mov	r3, r0
 810d260:	4611      	mov	r1, r2
 810d262:	4620      	mov	r0, r4
 810d264:	9308      	str	r3, [sp, #32]
 810d266:	f000 f919 	bl	810d49c <_Bfree>
 810d26a:	9b08      	ldr	r3, [sp, #32]
 810d26c:	b9a3      	cbnz	r3, 810d298 <_dtoa_r+0xa00>
 810d26e:	9a06      	ldr	r2, [sp, #24]
 810d270:	b992      	cbnz	r2, 810d298 <_dtoa_r+0xa00>
 810d272:	9a07      	ldr	r2, [sp, #28]
 810d274:	b982      	cbnz	r2, 810d298 <_dtoa_r+0xa00>
 810d276:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810d27a:	d029      	beq.n	810d2d0 <_dtoa_r+0xa38>
 810d27c:	9b00      	ldr	r3, [sp, #0]
 810d27e:	2b00      	cmp	r3, #0
 810d280:	dd01      	ble.n	810d286 <_dtoa_r+0x9ee>
 810d282:	f105 0831 	add.w	r8, r5, #49	; 0x31
 810d286:	9b05      	ldr	r3, [sp, #20]
 810d288:	1c5d      	adds	r5, r3, #1
 810d28a:	f883 8000 	strb.w	r8, [r3]
 810d28e:	e782      	b.n	810d196 <_dtoa_r+0x8fe>
 810d290:	4630      	mov	r0, r6
 810d292:	e7c2      	b.n	810d21a <_dtoa_r+0x982>
 810d294:	2301      	movs	r3, #1
 810d296:	e7e3      	b.n	810d260 <_dtoa_r+0x9c8>
 810d298:	9a00      	ldr	r2, [sp, #0]
 810d29a:	2a00      	cmp	r2, #0
 810d29c:	db04      	blt.n	810d2a8 <_dtoa_r+0xa10>
 810d29e:	d125      	bne.n	810d2ec <_dtoa_r+0xa54>
 810d2a0:	9a06      	ldr	r2, [sp, #24]
 810d2a2:	bb1a      	cbnz	r2, 810d2ec <_dtoa_r+0xa54>
 810d2a4:	9a07      	ldr	r2, [sp, #28]
 810d2a6:	bb0a      	cbnz	r2, 810d2ec <_dtoa_r+0xa54>
 810d2a8:	2b00      	cmp	r3, #0
 810d2aa:	ddec      	ble.n	810d286 <_dtoa_r+0x9ee>
 810d2ac:	2201      	movs	r2, #1
 810d2ae:	9904      	ldr	r1, [sp, #16]
 810d2b0:	4620      	mov	r0, r4
 810d2b2:	f000 fa81 	bl	810d7b8 <__lshift>
 810d2b6:	4639      	mov	r1, r7
 810d2b8:	9004      	str	r0, [sp, #16]
 810d2ba:	f000 fad1 	bl	810d860 <__mcmp>
 810d2be:	2800      	cmp	r0, #0
 810d2c0:	dc03      	bgt.n	810d2ca <_dtoa_r+0xa32>
 810d2c2:	d1e0      	bne.n	810d286 <_dtoa_r+0x9ee>
 810d2c4:	f018 0f01 	tst.w	r8, #1
 810d2c8:	d0dd      	beq.n	810d286 <_dtoa_r+0x9ee>
 810d2ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810d2ce:	d1d8      	bne.n	810d282 <_dtoa_r+0x9ea>
 810d2d0:	9b05      	ldr	r3, [sp, #20]
 810d2d2:	9a05      	ldr	r2, [sp, #20]
 810d2d4:	1c5d      	adds	r5, r3, #1
 810d2d6:	2339      	movs	r3, #57	; 0x39
 810d2d8:	7013      	strb	r3, [r2, #0]
 810d2da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810d2de:	2b39      	cmp	r3, #57	; 0x39
 810d2e0:	f105 32ff 	add.w	r2, r5, #4294967295
 810d2e4:	d04f      	beq.n	810d386 <_dtoa_r+0xaee>
 810d2e6:	3301      	adds	r3, #1
 810d2e8:	7013      	strb	r3, [r2, #0]
 810d2ea:	e754      	b.n	810d196 <_dtoa_r+0x8fe>
 810d2ec:	9a05      	ldr	r2, [sp, #20]
 810d2ee:	2b00      	cmp	r3, #0
 810d2f0:	f102 0501 	add.w	r5, r2, #1
 810d2f4:	dd06      	ble.n	810d304 <_dtoa_r+0xa6c>
 810d2f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810d2fa:	d0e9      	beq.n	810d2d0 <_dtoa_r+0xa38>
 810d2fc:	f108 0801 	add.w	r8, r8, #1
 810d300:	9b05      	ldr	r3, [sp, #20]
 810d302:	e7c2      	b.n	810d28a <_dtoa_r+0x9f2>
 810d304:	9a02      	ldr	r2, [sp, #8]
 810d306:	f805 8c01 	strb.w	r8, [r5, #-1]
 810d30a:	eba5 030b 	sub.w	r3, r5, fp
 810d30e:	4293      	cmp	r3, r2
 810d310:	d021      	beq.n	810d356 <_dtoa_r+0xabe>
 810d312:	2300      	movs	r3, #0
 810d314:	220a      	movs	r2, #10
 810d316:	9904      	ldr	r1, [sp, #16]
 810d318:	4620      	mov	r0, r4
 810d31a:	f000 f8d6 	bl	810d4ca <__multadd>
 810d31e:	45b1      	cmp	r9, r6
 810d320:	9004      	str	r0, [sp, #16]
 810d322:	f04f 0300 	mov.w	r3, #0
 810d326:	f04f 020a 	mov.w	r2, #10
 810d32a:	4649      	mov	r1, r9
 810d32c:	4620      	mov	r0, r4
 810d32e:	d105      	bne.n	810d33c <_dtoa_r+0xaa4>
 810d330:	f000 f8cb 	bl	810d4ca <__multadd>
 810d334:	4681      	mov	r9, r0
 810d336:	4606      	mov	r6, r0
 810d338:	9505      	str	r5, [sp, #20]
 810d33a:	e776      	b.n	810d22a <_dtoa_r+0x992>
 810d33c:	f000 f8c5 	bl	810d4ca <__multadd>
 810d340:	4631      	mov	r1, r6
 810d342:	4681      	mov	r9, r0
 810d344:	2300      	movs	r3, #0
 810d346:	220a      	movs	r2, #10
 810d348:	4620      	mov	r0, r4
 810d34a:	f000 f8be 	bl	810d4ca <__multadd>
 810d34e:	4606      	mov	r6, r0
 810d350:	e7f2      	b.n	810d338 <_dtoa_r+0xaa0>
 810d352:	f04f 0900 	mov.w	r9, #0
 810d356:	2201      	movs	r2, #1
 810d358:	9904      	ldr	r1, [sp, #16]
 810d35a:	4620      	mov	r0, r4
 810d35c:	f000 fa2c 	bl	810d7b8 <__lshift>
 810d360:	4639      	mov	r1, r7
 810d362:	9004      	str	r0, [sp, #16]
 810d364:	f000 fa7c 	bl	810d860 <__mcmp>
 810d368:	2800      	cmp	r0, #0
 810d36a:	dcb6      	bgt.n	810d2da <_dtoa_r+0xa42>
 810d36c:	d102      	bne.n	810d374 <_dtoa_r+0xadc>
 810d36e:	f018 0f01 	tst.w	r8, #1
 810d372:	d1b2      	bne.n	810d2da <_dtoa_r+0xa42>
 810d374:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810d378:	2b30      	cmp	r3, #48	; 0x30
 810d37a:	f105 32ff 	add.w	r2, r5, #4294967295
 810d37e:	f47f af0a 	bne.w	810d196 <_dtoa_r+0x8fe>
 810d382:	4615      	mov	r5, r2
 810d384:	e7f6      	b.n	810d374 <_dtoa_r+0xadc>
 810d386:	4593      	cmp	fp, r2
 810d388:	d105      	bne.n	810d396 <_dtoa_r+0xafe>
 810d38a:	2331      	movs	r3, #49	; 0x31
 810d38c:	f10a 0a01 	add.w	sl, sl, #1
 810d390:	f88b 3000 	strb.w	r3, [fp]
 810d394:	e6ff      	b.n	810d196 <_dtoa_r+0x8fe>
 810d396:	4615      	mov	r5, r2
 810d398:	e79f      	b.n	810d2da <_dtoa_r+0xa42>
 810d39a:	f8df b064 	ldr.w	fp, [pc, #100]	; 810d400 <_dtoa_r+0xb68>
 810d39e:	e007      	b.n	810d3b0 <_dtoa_r+0xb18>
 810d3a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810d3a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 810d404 <_dtoa_r+0xb6c>
 810d3a6:	b11b      	cbz	r3, 810d3b0 <_dtoa_r+0xb18>
 810d3a8:	f10b 0308 	add.w	r3, fp, #8
 810d3ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810d3ae:	6013      	str	r3, [r2, #0]
 810d3b0:	4658      	mov	r0, fp
 810d3b2:	b017      	add	sp, #92	; 0x5c
 810d3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d3b8:	9b06      	ldr	r3, [sp, #24]
 810d3ba:	2b01      	cmp	r3, #1
 810d3bc:	f77f ae35 	ble.w	810d02a <_dtoa_r+0x792>
 810d3c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810d3c2:	9307      	str	r3, [sp, #28]
 810d3c4:	e649      	b.n	810d05a <_dtoa_r+0x7c2>
 810d3c6:	9b02      	ldr	r3, [sp, #8]
 810d3c8:	2b00      	cmp	r3, #0
 810d3ca:	dc03      	bgt.n	810d3d4 <_dtoa_r+0xb3c>
 810d3cc:	9b06      	ldr	r3, [sp, #24]
 810d3ce:	2b02      	cmp	r3, #2
 810d3d0:	f73f aecc 	bgt.w	810d16c <_dtoa_r+0x8d4>
 810d3d4:	465d      	mov	r5, fp
 810d3d6:	4639      	mov	r1, r7
 810d3d8:	9804      	ldr	r0, [sp, #16]
 810d3da:	f7ff f9d0 	bl	810c77e <quorem>
 810d3de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810d3e2:	f805 8b01 	strb.w	r8, [r5], #1
 810d3e6:	9a02      	ldr	r2, [sp, #8]
 810d3e8:	eba5 030b 	sub.w	r3, r5, fp
 810d3ec:	429a      	cmp	r2, r3
 810d3ee:	ddb0      	ble.n	810d352 <_dtoa_r+0xaba>
 810d3f0:	2300      	movs	r3, #0
 810d3f2:	220a      	movs	r2, #10
 810d3f4:	9904      	ldr	r1, [sp, #16]
 810d3f6:	4620      	mov	r0, r4
 810d3f8:	f000 f867 	bl	810d4ca <__multadd>
 810d3fc:	9004      	str	r0, [sp, #16]
 810d3fe:	e7ea      	b.n	810d3d6 <_dtoa_r+0xb3e>
 810d400:	0810dcbc 	.word	0x0810dcbc
 810d404:	0810dcbe 	.word	0x0810dcbe

0810d408 <_localeconv_r>:
 810d408:	4b04      	ldr	r3, [pc, #16]	; (810d41c <_localeconv_r+0x14>)
 810d40a:	681b      	ldr	r3, [r3, #0]
 810d40c:	6a18      	ldr	r0, [r3, #32]
 810d40e:	4b04      	ldr	r3, [pc, #16]	; (810d420 <_localeconv_r+0x18>)
 810d410:	2800      	cmp	r0, #0
 810d412:	bf08      	it	eq
 810d414:	4618      	moveq	r0, r3
 810d416:	30f0      	adds	r0, #240	; 0xf0
 810d418:	4770      	bx	lr
 810d41a:	bf00      	nop
 810d41c:	10000010 	.word	0x10000010
 810d420:	10000074 	.word	0x10000074

0810d424 <malloc>:
 810d424:	4b02      	ldr	r3, [pc, #8]	; (810d430 <malloc+0xc>)
 810d426:	4601      	mov	r1, r0
 810d428:	6818      	ldr	r0, [r3, #0]
 810d42a:	f000 baed 	b.w	810da08 <_malloc_r>
 810d42e:	bf00      	nop
 810d430:	10000010 	.word	0x10000010

0810d434 <_Balloc>:
 810d434:	b570      	push	{r4, r5, r6, lr}
 810d436:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810d438:	4604      	mov	r4, r0
 810d43a:	460e      	mov	r6, r1
 810d43c:	b93d      	cbnz	r5, 810d44e <_Balloc+0x1a>
 810d43e:	2010      	movs	r0, #16
 810d440:	f7ff fff0 	bl	810d424 <malloc>
 810d444:	6260      	str	r0, [r4, #36]	; 0x24
 810d446:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810d44a:	6005      	str	r5, [r0, #0]
 810d44c:	60c5      	str	r5, [r0, #12]
 810d44e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810d450:	68eb      	ldr	r3, [r5, #12]
 810d452:	b183      	cbz	r3, 810d476 <_Balloc+0x42>
 810d454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d456:	68db      	ldr	r3, [r3, #12]
 810d458:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 810d45c:	b9b8      	cbnz	r0, 810d48e <_Balloc+0x5a>
 810d45e:	2101      	movs	r1, #1
 810d460:	fa01 f506 	lsl.w	r5, r1, r6
 810d464:	1d6a      	adds	r2, r5, #5
 810d466:	0092      	lsls	r2, r2, #2
 810d468:	4620      	mov	r0, r4
 810d46a:	f000 fabf 	bl	810d9ec <_calloc_r>
 810d46e:	b160      	cbz	r0, 810d48a <_Balloc+0x56>
 810d470:	e9c0 6501 	strd	r6, r5, [r0, #4]
 810d474:	e00e      	b.n	810d494 <_Balloc+0x60>
 810d476:	2221      	movs	r2, #33	; 0x21
 810d478:	2104      	movs	r1, #4
 810d47a:	4620      	mov	r0, r4
 810d47c:	f000 fab6 	bl	810d9ec <_calloc_r>
 810d480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810d482:	60e8      	str	r0, [r5, #12]
 810d484:	68db      	ldr	r3, [r3, #12]
 810d486:	2b00      	cmp	r3, #0
 810d488:	d1e4      	bne.n	810d454 <_Balloc+0x20>
 810d48a:	2000      	movs	r0, #0
 810d48c:	bd70      	pop	{r4, r5, r6, pc}
 810d48e:	6802      	ldr	r2, [r0, #0]
 810d490:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 810d494:	2300      	movs	r3, #0
 810d496:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810d49a:	e7f7      	b.n	810d48c <_Balloc+0x58>

0810d49c <_Bfree>:
 810d49c:	b570      	push	{r4, r5, r6, lr}
 810d49e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810d4a0:	4606      	mov	r6, r0
 810d4a2:	460d      	mov	r5, r1
 810d4a4:	b93c      	cbnz	r4, 810d4b6 <_Bfree+0x1a>
 810d4a6:	2010      	movs	r0, #16
 810d4a8:	f7ff ffbc 	bl	810d424 <malloc>
 810d4ac:	6270      	str	r0, [r6, #36]	; 0x24
 810d4ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810d4b2:	6004      	str	r4, [r0, #0]
 810d4b4:	60c4      	str	r4, [r0, #12]
 810d4b6:	b13d      	cbz	r5, 810d4c8 <_Bfree+0x2c>
 810d4b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 810d4ba:	686a      	ldr	r2, [r5, #4]
 810d4bc:	68db      	ldr	r3, [r3, #12]
 810d4be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810d4c2:	6029      	str	r1, [r5, #0]
 810d4c4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 810d4c8:	bd70      	pop	{r4, r5, r6, pc}

0810d4ca <__multadd>:
 810d4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d4ce:	690d      	ldr	r5, [r1, #16]
 810d4d0:	461f      	mov	r7, r3
 810d4d2:	4606      	mov	r6, r0
 810d4d4:	460c      	mov	r4, r1
 810d4d6:	f101 0c14 	add.w	ip, r1, #20
 810d4da:	2300      	movs	r3, #0
 810d4dc:	f8dc 0000 	ldr.w	r0, [ip]
 810d4e0:	b281      	uxth	r1, r0
 810d4e2:	fb02 7101 	mla	r1, r2, r1, r7
 810d4e6:	0c0f      	lsrs	r7, r1, #16
 810d4e8:	0c00      	lsrs	r0, r0, #16
 810d4ea:	fb02 7000 	mla	r0, r2, r0, r7
 810d4ee:	b289      	uxth	r1, r1
 810d4f0:	3301      	adds	r3, #1
 810d4f2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 810d4f6:	429d      	cmp	r5, r3
 810d4f8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 810d4fc:	f84c 1b04 	str.w	r1, [ip], #4
 810d500:	dcec      	bgt.n	810d4dc <__multadd+0x12>
 810d502:	b1d7      	cbz	r7, 810d53a <__multadd+0x70>
 810d504:	68a3      	ldr	r3, [r4, #8]
 810d506:	42ab      	cmp	r3, r5
 810d508:	dc12      	bgt.n	810d530 <__multadd+0x66>
 810d50a:	6861      	ldr	r1, [r4, #4]
 810d50c:	4630      	mov	r0, r6
 810d50e:	3101      	adds	r1, #1
 810d510:	f7ff ff90 	bl	810d434 <_Balloc>
 810d514:	6922      	ldr	r2, [r4, #16]
 810d516:	3202      	adds	r2, #2
 810d518:	f104 010c 	add.w	r1, r4, #12
 810d51c:	4680      	mov	r8, r0
 810d51e:	0092      	lsls	r2, r2, #2
 810d520:	300c      	adds	r0, #12
 810d522:	f7fe fdcf 	bl	810c0c4 <memcpy>
 810d526:	4621      	mov	r1, r4
 810d528:	4630      	mov	r0, r6
 810d52a:	f7ff ffb7 	bl	810d49c <_Bfree>
 810d52e:	4644      	mov	r4, r8
 810d530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810d534:	3501      	adds	r5, #1
 810d536:	615f      	str	r7, [r3, #20]
 810d538:	6125      	str	r5, [r4, #16]
 810d53a:	4620      	mov	r0, r4
 810d53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810d540 <__hi0bits>:
 810d540:	0c02      	lsrs	r2, r0, #16
 810d542:	0412      	lsls	r2, r2, #16
 810d544:	4603      	mov	r3, r0
 810d546:	b9b2      	cbnz	r2, 810d576 <__hi0bits+0x36>
 810d548:	0403      	lsls	r3, r0, #16
 810d54a:	2010      	movs	r0, #16
 810d54c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 810d550:	bf04      	itt	eq
 810d552:	021b      	lsleq	r3, r3, #8
 810d554:	3008      	addeq	r0, #8
 810d556:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 810d55a:	bf04      	itt	eq
 810d55c:	011b      	lsleq	r3, r3, #4
 810d55e:	3004      	addeq	r0, #4
 810d560:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 810d564:	bf04      	itt	eq
 810d566:	009b      	lsleq	r3, r3, #2
 810d568:	3002      	addeq	r0, #2
 810d56a:	2b00      	cmp	r3, #0
 810d56c:	db06      	blt.n	810d57c <__hi0bits+0x3c>
 810d56e:	005b      	lsls	r3, r3, #1
 810d570:	d503      	bpl.n	810d57a <__hi0bits+0x3a>
 810d572:	3001      	adds	r0, #1
 810d574:	4770      	bx	lr
 810d576:	2000      	movs	r0, #0
 810d578:	e7e8      	b.n	810d54c <__hi0bits+0xc>
 810d57a:	2020      	movs	r0, #32
 810d57c:	4770      	bx	lr

0810d57e <__lo0bits>:
 810d57e:	6803      	ldr	r3, [r0, #0]
 810d580:	f013 0207 	ands.w	r2, r3, #7
 810d584:	4601      	mov	r1, r0
 810d586:	d00b      	beq.n	810d5a0 <__lo0bits+0x22>
 810d588:	07da      	lsls	r2, r3, #31
 810d58a:	d423      	bmi.n	810d5d4 <__lo0bits+0x56>
 810d58c:	0798      	lsls	r0, r3, #30
 810d58e:	bf49      	itett	mi
 810d590:	085b      	lsrmi	r3, r3, #1
 810d592:	089b      	lsrpl	r3, r3, #2
 810d594:	2001      	movmi	r0, #1
 810d596:	600b      	strmi	r3, [r1, #0]
 810d598:	bf5c      	itt	pl
 810d59a:	600b      	strpl	r3, [r1, #0]
 810d59c:	2002      	movpl	r0, #2
 810d59e:	4770      	bx	lr
 810d5a0:	b298      	uxth	r0, r3
 810d5a2:	b9a8      	cbnz	r0, 810d5d0 <__lo0bits+0x52>
 810d5a4:	0c1b      	lsrs	r3, r3, #16
 810d5a6:	2010      	movs	r0, #16
 810d5a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 810d5ac:	bf04      	itt	eq
 810d5ae:	0a1b      	lsreq	r3, r3, #8
 810d5b0:	3008      	addeq	r0, #8
 810d5b2:	071a      	lsls	r2, r3, #28
 810d5b4:	bf04      	itt	eq
 810d5b6:	091b      	lsreq	r3, r3, #4
 810d5b8:	3004      	addeq	r0, #4
 810d5ba:	079a      	lsls	r2, r3, #30
 810d5bc:	bf04      	itt	eq
 810d5be:	089b      	lsreq	r3, r3, #2
 810d5c0:	3002      	addeq	r0, #2
 810d5c2:	07da      	lsls	r2, r3, #31
 810d5c4:	d402      	bmi.n	810d5cc <__lo0bits+0x4e>
 810d5c6:	085b      	lsrs	r3, r3, #1
 810d5c8:	d006      	beq.n	810d5d8 <__lo0bits+0x5a>
 810d5ca:	3001      	adds	r0, #1
 810d5cc:	600b      	str	r3, [r1, #0]
 810d5ce:	4770      	bx	lr
 810d5d0:	4610      	mov	r0, r2
 810d5d2:	e7e9      	b.n	810d5a8 <__lo0bits+0x2a>
 810d5d4:	2000      	movs	r0, #0
 810d5d6:	4770      	bx	lr
 810d5d8:	2020      	movs	r0, #32
 810d5da:	4770      	bx	lr

0810d5dc <__i2b>:
 810d5dc:	b510      	push	{r4, lr}
 810d5de:	460c      	mov	r4, r1
 810d5e0:	2101      	movs	r1, #1
 810d5e2:	f7ff ff27 	bl	810d434 <_Balloc>
 810d5e6:	2201      	movs	r2, #1
 810d5e8:	6144      	str	r4, [r0, #20]
 810d5ea:	6102      	str	r2, [r0, #16]
 810d5ec:	bd10      	pop	{r4, pc}

0810d5ee <__multiply>:
 810d5ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d5f2:	4614      	mov	r4, r2
 810d5f4:	690a      	ldr	r2, [r1, #16]
 810d5f6:	6923      	ldr	r3, [r4, #16]
 810d5f8:	429a      	cmp	r2, r3
 810d5fa:	bfb8      	it	lt
 810d5fc:	460b      	movlt	r3, r1
 810d5fe:	4688      	mov	r8, r1
 810d600:	bfbc      	itt	lt
 810d602:	46a0      	movlt	r8, r4
 810d604:	461c      	movlt	r4, r3
 810d606:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810d60a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810d60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810d612:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810d616:	eb07 0609 	add.w	r6, r7, r9
 810d61a:	42b3      	cmp	r3, r6
 810d61c:	bfb8      	it	lt
 810d61e:	3101      	addlt	r1, #1
 810d620:	f7ff ff08 	bl	810d434 <_Balloc>
 810d624:	f100 0514 	add.w	r5, r0, #20
 810d628:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 810d62c:	462b      	mov	r3, r5
 810d62e:	2200      	movs	r2, #0
 810d630:	4573      	cmp	r3, lr
 810d632:	d316      	bcc.n	810d662 <__multiply+0x74>
 810d634:	f104 0214 	add.w	r2, r4, #20
 810d638:	f108 0114 	add.w	r1, r8, #20
 810d63c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 810d640:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810d644:	9300      	str	r3, [sp, #0]
 810d646:	9b00      	ldr	r3, [sp, #0]
 810d648:	9201      	str	r2, [sp, #4]
 810d64a:	4293      	cmp	r3, r2
 810d64c:	d80c      	bhi.n	810d668 <__multiply+0x7a>
 810d64e:	2e00      	cmp	r6, #0
 810d650:	dd03      	ble.n	810d65a <__multiply+0x6c>
 810d652:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 810d656:	2b00      	cmp	r3, #0
 810d658:	d05d      	beq.n	810d716 <__multiply+0x128>
 810d65a:	6106      	str	r6, [r0, #16]
 810d65c:	b003      	add	sp, #12
 810d65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d662:	f843 2b04 	str.w	r2, [r3], #4
 810d666:	e7e3      	b.n	810d630 <__multiply+0x42>
 810d668:	f8b2 b000 	ldrh.w	fp, [r2]
 810d66c:	f1bb 0f00 	cmp.w	fp, #0
 810d670:	d023      	beq.n	810d6ba <__multiply+0xcc>
 810d672:	4689      	mov	r9, r1
 810d674:	46ac      	mov	ip, r5
 810d676:	f04f 0800 	mov.w	r8, #0
 810d67a:	f859 4b04 	ldr.w	r4, [r9], #4
 810d67e:	f8dc a000 	ldr.w	sl, [ip]
 810d682:	b2a3      	uxth	r3, r4
 810d684:	fa1f fa8a 	uxth.w	sl, sl
 810d688:	fb0b a303 	mla	r3, fp, r3, sl
 810d68c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810d690:	f8dc 4000 	ldr.w	r4, [ip]
 810d694:	4443      	add	r3, r8
 810d696:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810d69a:	fb0b 840a 	mla	r4, fp, sl, r8
 810d69e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 810d6a2:	46e2      	mov	sl, ip
 810d6a4:	b29b      	uxth	r3, r3
 810d6a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810d6aa:	454f      	cmp	r7, r9
 810d6ac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810d6b0:	f84a 3b04 	str.w	r3, [sl], #4
 810d6b4:	d82b      	bhi.n	810d70e <__multiply+0x120>
 810d6b6:	f8cc 8004 	str.w	r8, [ip, #4]
 810d6ba:	9b01      	ldr	r3, [sp, #4]
 810d6bc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 810d6c0:	3204      	adds	r2, #4
 810d6c2:	f1ba 0f00 	cmp.w	sl, #0
 810d6c6:	d020      	beq.n	810d70a <__multiply+0x11c>
 810d6c8:	682b      	ldr	r3, [r5, #0]
 810d6ca:	4689      	mov	r9, r1
 810d6cc:	46a8      	mov	r8, r5
 810d6ce:	f04f 0b00 	mov.w	fp, #0
 810d6d2:	f8b9 c000 	ldrh.w	ip, [r9]
 810d6d6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 810d6da:	fb0a 440c 	mla	r4, sl, ip, r4
 810d6de:	445c      	add	r4, fp
 810d6e0:	46c4      	mov	ip, r8
 810d6e2:	b29b      	uxth	r3, r3
 810d6e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810d6e8:	f84c 3b04 	str.w	r3, [ip], #4
 810d6ec:	f859 3b04 	ldr.w	r3, [r9], #4
 810d6f0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 810d6f4:	0c1b      	lsrs	r3, r3, #16
 810d6f6:	fb0a b303 	mla	r3, sl, r3, fp
 810d6fa:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 810d6fe:	454f      	cmp	r7, r9
 810d700:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 810d704:	d805      	bhi.n	810d712 <__multiply+0x124>
 810d706:	f8c8 3004 	str.w	r3, [r8, #4]
 810d70a:	3504      	adds	r5, #4
 810d70c:	e79b      	b.n	810d646 <__multiply+0x58>
 810d70e:	46d4      	mov	ip, sl
 810d710:	e7b3      	b.n	810d67a <__multiply+0x8c>
 810d712:	46e0      	mov	r8, ip
 810d714:	e7dd      	b.n	810d6d2 <__multiply+0xe4>
 810d716:	3e01      	subs	r6, #1
 810d718:	e799      	b.n	810d64e <__multiply+0x60>
	...

0810d71c <__pow5mult>:
 810d71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810d720:	4615      	mov	r5, r2
 810d722:	f012 0203 	ands.w	r2, r2, #3
 810d726:	4606      	mov	r6, r0
 810d728:	460f      	mov	r7, r1
 810d72a:	d007      	beq.n	810d73c <__pow5mult+0x20>
 810d72c:	3a01      	subs	r2, #1
 810d72e:	4c21      	ldr	r4, [pc, #132]	; (810d7b4 <__pow5mult+0x98>)
 810d730:	2300      	movs	r3, #0
 810d732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810d736:	f7ff fec8 	bl	810d4ca <__multadd>
 810d73a:	4607      	mov	r7, r0
 810d73c:	10ad      	asrs	r5, r5, #2
 810d73e:	d035      	beq.n	810d7ac <__pow5mult+0x90>
 810d740:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810d742:	b93c      	cbnz	r4, 810d754 <__pow5mult+0x38>
 810d744:	2010      	movs	r0, #16
 810d746:	f7ff fe6d 	bl	810d424 <malloc>
 810d74a:	6270      	str	r0, [r6, #36]	; 0x24
 810d74c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810d750:	6004      	str	r4, [r0, #0]
 810d752:	60c4      	str	r4, [r0, #12]
 810d754:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810d758:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810d75c:	b94c      	cbnz	r4, 810d772 <__pow5mult+0x56>
 810d75e:	f240 2171 	movw	r1, #625	; 0x271
 810d762:	4630      	mov	r0, r6
 810d764:	f7ff ff3a 	bl	810d5dc <__i2b>
 810d768:	2300      	movs	r3, #0
 810d76a:	f8c8 0008 	str.w	r0, [r8, #8]
 810d76e:	4604      	mov	r4, r0
 810d770:	6003      	str	r3, [r0, #0]
 810d772:	f04f 0800 	mov.w	r8, #0
 810d776:	07eb      	lsls	r3, r5, #31
 810d778:	d50a      	bpl.n	810d790 <__pow5mult+0x74>
 810d77a:	4639      	mov	r1, r7
 810d77c:	4622      	mov	r2, r4
 810d77e:	4630      	mov	r0, r6
 810d780:	f7ff ff35 	bl	810d5ee <__multiply>
 810d784:	4639      	mov	r1, r7
 810d786:	4681      	mov	r9, r0
 810d788:	4630      	mov	r0, r6
 810d78a:	f7ff fe87 	bl	810d49c <_Bfree>
 810d78e:	464f      	mov	r7, r9
 810d790:	106d      	asrs	r5, r5, #1
 810d792:	d00b      	beq.n	810d7ac <__pow5mult+0x90>
 810d794:	6820      	ldr	r0, [r4, #0]
 810d796:	b938      	cbnz	r0, 810d7a8 <__pow5mult+0x8c>
 810d798:	4622      	mov	r2, r4
 810d79a:	4621      	mov	r1, r4
 810d79c:	4630      	mov	r0, r6
 810d79e:	f7ff ff26 	bl	810d5ee <__multiply>
 810d7a2:	6020      	str	r0, [r4, #0]
 810d7a4:	f8c0 8000 	str.w	r8, [r0]
 810d7a8:	4604      	mov	r4, r0
 810d7aa:	e7e4      	b.n	810d776 <__pow5mult+0x5a>
 810d7ac:	4638      	mov	r0, r7
 810d7ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810d7b2:	bf00      	nop
 810d7b4:	0810ddc0 	.word	0x0810ddc0

0810d7b8 <__lshift>:
 810d7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d7bc:	460c      	mov	r4, r1
 810d7be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810d7c2:	6923      	ldr	r3, [r4, #16]
 810d7c4:	6849      	ldr	r1, [r1, #4]
 810d7c6:	eb0a 0903 	add.w	r9, sl, r3
 810d7ca:	68a3      	ldr	r3, [r4, #8]
 810d7cc:	4607      	mov	r7, r0
 810d7ce:	4616      	mov	r6, r2
 810d7d0:	f109 0501 	add.w	r5, r9, #1
 810d7d4:	42ab      	cmp	r3, r5
 810d7d6:	db32      	blt.n	810d83e <__lshift+0x86>
 810d7d8:	4638      	mov	r0, r7
 810d7da:	f7ff fe2b 	bl	810d434 <_Balloc>
 810d7de:	2300      	movs	r3, #0
 810d7e0:	4680      	mov	r8, r0
 810d7e2:	f100 0114 	add.w	r1, r0, #20
 810d7e6:	461a      	mov	r2, r3
 810d7e8:	4553      	cmp	r3, sl
 810d7ea:	db2b      	blt.n	810d844 <__lshift+0x8c>
 810d7ec:	6920      	ldr	r0, [r4, #16]
 810d7ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810d7f2:	f104 0314 	add.w	r3, r4, #20
 810d7f6:	f016 021f 	ands.w	r2, r6, #31
 810d7fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810d7fe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810d802:	d025      	beq.n	810d850 <__lshift+0x98>
 810d804:	f1c2 0e20 	rsb	lr, r2, #32
 810d808:	2000      	movs	r0, #0
 810d80a:	681e      	ldr	r6, [r3, #0]
 810d80c:	468a      	mov	sl, r1
 810d80e:	4096      	lsls	r6, r2
 810d810:	4330      	orrs	r0, r6
 810d812:	f84a 0b04 	str.w	r0, [sl], #4
 810d816:	f853 0b04 	ldr.w	r0, [r3], #4
 810d81a:	459c      	cmp	ip, r3
 810d81c:	fa20 f00e 	lsr.w	r0, r0, lr
 810d820:	d814      	bhi.n	810d84c <__lshift+0x94>
 810d822:	6048      	str	r0, [r1, #4]
 810d824:	b108      	cbz	r0, 810d82a <__lshift+0x72>
 810d826:	f109 0502 	add.w	r5, r9, #2
 810d82a:	3d01      	subs	r5, #1
 810d82c:	4638      	mov	r0, r7
 810d82e:	f8c8 5010 	str.w	r5, [r8, #16]
 810d832:	4621      	mov	r1, r4
 810d834:	f7ff fe32 	bl	810d49c <_Bfree>
 810d838:	4640      	mov	r0, r8
 810d83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d83e:	3101      	adds	r1, #1
 810d840:	005b      	lsls	r3, r3, #1
 810d842:	e7c7      	b.n	810d7d4 <__lshift+0x1c>
 810d844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810d848:	3301      	adds	r3, #1
 810d84a:	e7cd      	b.n	810d7e8 <__lshift+0x30>
 810d84c:	4651      	mov	r1, sl
 810d84e:	e7dc      	b.n	810d80a <__lshift+0x52>
 810d850:	3904      	subs	r1, #4
 810d852:	f853 2b04 	ldr.w	r2, [r3], #4
 810d856:	f841 2f04 	str.w	r2, [r1, #4]!
 810d85a:	459c      	cmp	ip, r3
 810d85c:	d8f9      	bhi.n	810d852 <__lshift+0x9a>
 810d85e:	e7e4      	b.n	810d82a <__lshift+0x72>

0810d860 <__mcmp>:
 810d860:	6903      	ldr	r3, [r0, #16]
 810d862:	690a      	ldr	r2, [r1, #16]
 810d864:	1a9b      	subs	r3, r3, r2
 810d866:	b530      	push	{r4, r5, lr}
 810d868:	d10c      	bne.n	810d884 <__mcmp+0x24>
 810d86a:	0092      	lsls	r2, r2, #2
 810d86c:	3014      	adds	r0, #20
 810d86e:	3114      	adds	r1, #20
 810d870:	1884      	adds	r4, r0, r2
 810d872:	4411      	add	r1, r2
 810d874:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810d878:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810d87c:	4295      	cmp	r5, r2
 810d87e:	d003      	beq.n	810d888 <__mcmp+0x28>
 810d880:	d305      	bcc.n	810d88e <__mcmp+0x2e>
 810d882:	2301      	movs	r3, #1
 810d884:	4618      	mov	r0, r3
 810d886:	bd30      	pop	{r4, r5, pc}
 810d888:	42a0      	cmp	r0, r4
 810d88a:	d3f3      	bcc.n	810d874 <__mcmp+0x14>
 810d88c:	e7fa      	b.n	810d884 <__mcmp+0x24>
 810d88e:	f04f 33ff 	mov.w	r3, #4294967295
 810d892:	e7f7      	b.n	810d884 <__mcmp+0x24>

0810d894 <__mdiff>:
 810d894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d898:	460d      	mov	r5, r1
 810d89a:	4607      	mov	r7, r0
 810d89c:	4611      	mov	r1, r2
 810d89e:	4628      	mov	r0, r5
 810d8a0:	4614      	mov	r4, r2
 810d8a2:	f7ff ffdd 	bl	810d860 <__mcmp>
 810d8a6:	1e06      	subs	r6, r0, #0
 810d8a8:	d108      	bne.n	810d8bc <__mdiff+0x28>
 810d8aa:	4631      	mov	r1, r6
 810d8ac:	4638      	mov	r0, r7
 810d8ae:	f7ff fdc1 	bl	810d434 <_Balloc>
 810d8b2:	2301      	movs	r3, #1
 810d8b4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810d8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d8bc:	bfa4      	itt	ge
 810d8be:	4623      	movge	r3, r4
 810d8c0:	462c      	movge	r4, r5
 810d8c2:	4638      	mov	r0, r7
 810d8c4:	6861      	ldr	r1, [r4, #4]
 810d8c6:	bfa6      	itte	ge
 810d8c8:	461d      	movge	r5, r3
 810d8ca:	2600      	movge	r6, #0
 810d8cc:	2601      	movlt	r6, #1
 810d8ce:	f7ff fdb1 	bl	810d434 <_Balloc>
 810d8d2:	692b      	ldr	r3, [r5, #16]
 810d8d4:	60c6      	str	r6, [r0, #12]
 810d8d6:	6926      	ldr	r6, [r4, #16]
 810d8d8:	f105 0914 	add.w	r9, r5, #20
 810d8dc:	f104 0214 	add.w	r2, r4, #20
 810d8e0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810d8e4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810d8e8:	f100 0514 	add.w	r5, r0, #20
 810d8ec:	f04f 0e00 	mov.w	lr, #0
 810d8f0:	f852 ab04 	ldr.w	sl, [r2], #4
 810d8f4:	f859 4b04 	ldr.w	r4, [r9], #4
 810d8f8:	fa1e f18a 	uxtah	r1, lr, sl
 810d8fc:	b2a3      	uxth	r3, r4
 810d8fe:	1ac9      	subs	r1, r1, r3
 810d900:	0c23      	lsrs	r3, r4, #16
 810d902:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810d906:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810d90a:	b289      	uxth	r1, r1
 810d90c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810d910:	45c8      	cmp	r8, r9
 810d912:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810d916:	4694      	mov	ip, r2
 810d918:	f845 3b04 	str.w	r3, [r5], #4
 810d91c:	d8e8      	bhi.n	810d8f0 <__mdiff+0x5c>
 810d91e:	45bc      	cmp	ip, r7
 810d920:	d304      	bcc.n	810d92c <__mdiff+0x98>
 810d922:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810d926:	b183      	cbz	r3, 810d94a <__mdiff+0xb6>
 810d928:	6106      	str	r6, [r0, #16]
 810d92a:	e7c5      	b.n	810d8b8 <__mdiff+0x24>
 810d92c:	f85c 1b04 	ldr.w	r1, [ip], #4
 810d930:	fa1e f381 	uxtah	r3, lr, r1
 810d934:	141a      	asrs	r2, r3, #16
 810d936:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810d93a:	b29b      	uxth	r3, r3
 810d93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810d940:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810d944:	f845 3b04 	str.w	r3, [r5], #4
 810d948:	e7e9      	b.n	810d91e <__mdiff+0x8a>
 810d94a:	3e01      	subs	r6, #1
 810d94c:	e7e9      	b.n	810d922 <__mdiff+0x8e>

0810d94e <__d2b>:
 810d94e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810d952:	460e      	mov	r6, r1
 810d954:	2101      	movs	r1, #1
 810d956:	ec59 8b10 	vmov	r8, r9, d0
 810d95a:	4615      	mov	r5, r2
 810d95c:	f7ff fd6a 	bl	810d434 <_Balloc>
 810d960:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810d964:	4607      	mov	r7, r0
 810d966:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d96a:	bb34      	cbnz	r4, 810d9ba <__d2b+0x6c>
 810d96c:	9301      	str	r3, [sp, #4]
 810d96e:	f1b8 0300 	subs.w	r3, r8, #0
 810d972:	d027      	beq.n	810d9c4 <__d2b+0x76>
 810d974:	a802      	add	r0, sp, #8
 810d976:	f840 3d08 	str.w	r3, [r0, #-8]!
 810d97a:	f7ff fe00 	bl	810d57e <__lo0bits>
 810d97e:	9900      	ldr	r1, [sp, #0]
 810d980:	b1f0      	cbz	r0, 810d9c0 <__d2b+0x72>
 810d982:	9a01      	ldr	r2, [sp, #4]
 810d984:	f1c0 0320 	rsb	r3, r0, #32
 810d988:	fa02 f303 	lsl.w	r3, r2, r3
 810d98c:	430b      	orrs	r3, r1
 810d98e:	40c2      	lsrs	r2, r0
 810d990:	617b      	str	r3, [r7, #20]
 810d992:	9201      	str	r2, [sp, #4]
 810d994:	9b01      	ldr	r3, [sp, #4]
 810d996:	61bb      	str	r3, [r7, #24]
 810d998:	2b00      	cmp	r3, #0
 810d99a:	bf14      	ite	ne
 810d99c:	2102      	movne	r1, #2
 810d99e:	2101      	moveq	r1, #1
 810d9a0:	6139      	str	r1, [r7, #16]
 810d9a2:	b1c4      	cbz	r4, 810d9d6 <__d2b+0x88>
 810d9a4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810d9a8:	4404      	add	r4, r0
 810d9aa:	6034      	str	r4, [r6, #0]
 810d9ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810d9b0:	6028      	str	r0, [r5, #0]
 810d9b2:	4638      	mov	r0, r7
 810d9b4:	b003      	add	sp, #12
 810d9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810d9ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810d9be:	e7d5      	b.n	810d96c <__d2b+0x1e>
 810d9c0:	6179      	str	r1, [r7, #20]
 810d9c2:	e7e7      	b.n	810d994 <__d2b+0x46>
 810d9c4:	a801      	add	r0, sp, #4
 810d9c6:	f7ff fdda 	bl	810d57e <__lo0bits>
 810d9ca:	9b01      	ldr	r3, [sp, #4]
 810d9cc:	617b      	str	r3, [r7, #20]
 810d9ce:	2101      	movs	r1, #1
 810d9d0:	6139      	str	r1, [r7, #16]
 810d9d2:	3020      	adds	r0, #32
 810d9d4:	e7e5      	b.n	810d9a2 <__d2b+0x54>
 810d9d6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810d9da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810d9de:	6030      	str	r0, [r6, #0]
 810d9e0:	6918      	ldr	r0, [r3, #16]
 810d9e2:	f7ff fdad 	bl	810d540 <__hi0bits>
 810d9e6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810d9ea:	e7e1      	b.n	810d9b0 <__d2b+0x62>

0810d9ec <_calloc_r>:
 810d9ec:	b538      	push	{r3, r4, r5, lr}
 810d9ee:	fb02 f401 	mul.w	r4, r2, r1
 810d9f2:	4621      	mov	r1, r4
 810d9f4:	f000 f808 	bl	810da08 <_malloc_r>
 810d9f8:	4605      	mov	r5, r0
 810d9fa:	b118      	cbz	r0, 810da04 <_calloc_r+0x18>
 810d9fc:	4622      	mov	r2, r4
 810d9fe:	2100      	movs	r1, #0
 810da00:	f7fe fb6b 	bl	810c0da <memset>
 810da04:	4628      	mov	r0, r5
 810da06:	bd38      	pop	{r3, r4, r5, pc}

0810da08 <_malloc_r>:
 810da08:	b570      	push	{r4, r5, r6, lr}
 810da0a:	1ccd      	adds	r5, r1, #3
 810da0c:	f025 0503 	bic.w	r5, r5, #3
 810da10:	3508      	adds	r5, #8
 810da12:	2d0c      	cmp	r5, #12
 810da14:	bf38      	it	cc
 810da16:	250c      	movcc	r5, #12
 810da18:	2d00      	cmp	r5, #0
 810da1a:	4606      	mov	r6, r0
 810da1c:	db01      	blt.n	810da22 <_malloc_r+0x1a>
 810da1e:	42a9      	cmp	r1, r5
 810da20:	d903      	bls.n	810da2a <_malloc_r+0x22>
 810da22:	230c      	movs	r3, #12
 810da24:	6033      	str	r3, [r6, #0]
 810da26:	2000      	movs	r0, #0
 810da28:	bd70      	pop	{r4, r5, r6, pc}
 810da2a:	f000 f869 	bl	810db00 <__malloc_lock>
 810da2e:	4a21      	ldr	r2, [pc, #132]	; (810dab4 <_malloc_r+0xac>)
 810da30:	6814      	ldr	r4, [r2, #0]
 810da32:	4621      	mov	r1, r4
 810da34:	b991      	cbnz	r1, 810da5c <_malloc_r+0x54>
 810da36:	4c20      	ldr	r4, [pc, #128]	; (810dab8 <_malloc_r+0xb0>)
 810da38:	6823      	ldr	r3, [r4, #0]
 810da3a:	b91b      	cbnz	r3, 810da44 <_malloc_r+0x3c>
 810da3c:	4630      	mov	r0, r6
 810da3e:	f000 f83d 	bl	810dabc <_sbrk_r>
 810da42:	6020      	str	r0, [r4, #0]
 810da44:	4629      	mov	r1, r5
 810da46:	4630      	mov	r0, r6
 810da48:	f000 f838 	bl	810dabc <_sbrk_r>
 810da4c:	1c43      	adds	r3, r0, #1
 810da4e:	d124      	bne.n	810da9a <_malloc_r+0x92>
 810da50:	230c      	movs	r3, #12
 810da52:	6033      	str	r3, [r6, #0]
 810da54:	4630      	mov	r0, r6
 810da56:	f000 f854 	bl	810db02 <__malloc_unlock>
 810da5a:	e7e4      	b.n	810da26 <_malloc_r+0x1e>
 810da5c:	680b      	ldr	r3, [r1, #0]
 810da5e:	1b5b      	subs	r3, r3, r5
 810da60:	d418      	bmi.n	810da94 <_malloc_r+0x8c>
 810da62:	2b0b      	cmp	r3, #11
 810da64:	d90f      	bls.n	810da86 <_malloc_r+0x7e>
 810da66:	600b      	str	r3, [r1, #0]
 810da68:	50cd      	str	r5, [r1, r3]
 810da6a:	18cc      	adds	r4, r1, r3
 810da6c:	4630      	mov	r0, r6
 810da6e:	f000 f848 	bl	810db02 <__malloc_unlock>
 810da72:	f104 000b 	add.w	r0, r4, #11
 810da76:	1d23      	adds	r3, r4, #4
 810da78:	f020 0007 	bic.w	r0, r0, #7
 810da7c:	1ac3      	subs	r3, r0, r3
 810da7e:	d0d3      	beq.n	810da28 <_malloc_r+0x20>
 810da80:	425a      	negs	r2, r3
 810da82:	50e2      	str	r2, [r4, r3]
 810da84:	e7d0      	b.n	810da28 <_malloc_r+0x20>
 810da86:	428c      	cmp	r4, r1
 810da88:	684b      	ldr	r3, [r1, #4]
 810da8a:	bf16      	itet	ne
 810da8c:	6063      	strne	r3, [r4, #4]
 810da8e:	6013      	streq	r3, [r2, #0]
 810da90:	460c      	movne	r4, r1
 810da92:	e7eb      	b.n	810da6c <_malloc_r+0x64>
 810da94:	460c      	mov	r4, r1
 810da96:	6849      	ldr	r1, [r1, #4]
 810da98:	e7cc      	b.n	810da34 <_malloc_r+0x2c>
 810da9a:	1cc4      	adds	r4, r0, #3
 810da9c:	f024 0403 	bic.w	r4, r4, #3
 810daa0:	42a0      	cmp	r0, r4
 810daa2:	d005      	beq.n	810dab0 <_malloc_r+0xa8>
 810daa4:	1a21      	subs	r1, r4, r0
 810daa6:	4630      	mov	r0, r6
 810daa8:	f000 f808 	bl	810dabc <_sbrk_r>
 810daac:	3001      	adds	r0, #1
 810daae:	d0cf      	beq.n	810da50 <_malloc_r+0x48>
 810dab0:	6025      	str	r5, [r4, #0]
 810dab2:	e7db      	b.n	810da6c <_malloc_r+0x64>
 810dab4:	10004b18 	.word	0x10004b18
 810dab8:	10004b1c 	.word	0x10004b1c

0810dabc <_sbrk_r>:
 810dabc:	b538      	push	{r3, r4, r5, lr}
 810dabe:	4c06      	ldr	r4, [pc, #24]	; (810dad8 <_sbrk_r+0x1c>)
 810dac0:	2300      	movs	r3, #0
 810dac2:	4605      	mov	r5, r0
 810dac4:	4608      	mov	r0, r1
 810dac6:	6023      	str	r3, [r4, #0]
 810dac8:	f7f4 fa30 	bl	8101f2c <_sbrk>
 810dacc:	1c43      	adds	r3, r0, #1
 810dace:	d102      	bne.n	810dad6 <_sbrk_r+0x1a>
 810dad0:	6823      	ldr	r3, [r4, #0]
 810dad2:	b103      	cbz	r3, 810dad6 <_sbrk_r+0x1a>
 810dad4:	602b      	str	r3, [r5, #0]
 810dad6:	bd38      	pop	{r3, r4, r5, pc}
 810dad8:	10004ec8 	.word	0x10004ec8

0810dadc <__ascii_mbtowc>:
 810dadc:	b082      	sub	sp, #8
 810dade:	b901      	cbnz	r1, 810dae2 <__ascii_mbtowc+0x6>
 810dae0:	a901      	add	r1, sp, #4
 810dae2:	b142      	cbz	r2, 810daf6 <__ascii_mbtowc+0x1a>
 810dae4:	b14b      	cbz	r3, 810dafa <__ascii_mbtowc+0x1e>
 810dae6:	7813      	ldrb	r3, [r2, #0]
 810dae8:	600b      	str	r3, [r1, #0]
 810daea:	7812      	ldrb	r2, [r2, #0]
 810daec:	1c10      	adds	r0, r2, #0
 810daee:	bf18      	it	ne
 810daf0:	2001      	movne	r0, #1
 810daf2:	b002      	add	sp, #8
 810daf4:	4770      	bx	lr
 810daf6:	4610      	mov	r0, r2
 810daf8:	e7fb      	b.n	810daf2 <__ascii_mbtowc+0x16>
 810dafa:	f06f 0001 	mvn.w	r0, #1
 810dafe:	e7f8      	b.n	810daf2 <__ascii_mbtowc+0x16>

0810db00 <__malloc_lock>:
 810db00:	4770      	bx	lr

0810db02 <__malloc_unlock>:
 810db02:	4770      	bx	lr

0810db04 <__ascii_wctomb>:
 810db04:	b149      	cbz	r1, 810db1a <__ascii_wctomb+0x16>
 810db06:	2aff      	cmp	r2, #255	; 0xff
 810db08:	bf85      	ittet	hi
 810db0a:	238a      	movhi	r3, #138	; 0x8a
 810db0c:	6003      	strhi	r3, [r0, #0]
 810db0e:	700a      	strbls	r2, [r1, #0]
 810db10:	f04f 30ff 	movhi.w	r0, #4294967295
 810db14:	bf98      	it	ls
 810db16:	2001      	movls	r0, #1
 810db18:	4770      	bx	lr
 810db1a:	4608      	mov	r0, r1
 810db1c:	4770      	bx	lr
	...

0810db20 <_init>:
 810db20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810db22:	bf00      	nop
 810db24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810db26:	bc08      	pop	{r3}
 810db28:	469e      	mov	lr, r3
 810db2a:	4770      	bx	lr

0810db2c <_fini>:
 810db2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810db2e:	bf00      	nop
 810db30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810db32:	bc08      	pop	{r3}
 810db34:	469e      	mov	lr, r3
 810db36:	4770      	bx	lr
