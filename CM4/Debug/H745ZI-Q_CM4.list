
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c888  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0810cb28  0810cb28  0001cb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ce60  0810ce60  0001ce60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ce68  0810ce68  0001ce68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ce6c  0810ce6c  0001ce6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  10000000  0810ce70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004cd4  100001e0  0810d050  000201e0  2**2
                  ALLOC
  8 .RAM_D3       00000000  38000000  38000000  000201e0  2**0
                  CONTENTS
  9 ._user_heap_stack 00000604  10004eb4  10004eb4  00024eb4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003759e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000056e5  00000000  00000000  000577ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ce8  00000000  00000000  0005ce98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ac0  00000000  00000000  0005eb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003d1bb  00000000  00000000  00060640  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0001cdb6  00000000  00000000  0009d7fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0018d62c  00000000  00000000  000ba5b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00247bdd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000080b8  00000000  00000000  00247c58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e0 	.word	0x100001e0
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810cb10 	.word	0x0810cb10

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e4 	.word	0x100001e4
 81002dc:	0810cb10 	.word	0x0810cb10

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <__aeabi_drsub>:
 81002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 81002f4:	e002      	b.n	81002fc <__adddf3>
 81002f6:	bf00      	nop

081002f8 <__aeabi_dsub>:
 81002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

081002fc <__adddf3>:
 81002fc:	b530      	push	{r4, r5, lr}
 81002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8100302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100306:	ea94 0f05 	teq	r4, r5
 810030a:	bf08      	it	eq
 810030c:	ea90 0f02 	teqeq	r0, r2
 8100310:	bf1f      	itttt	ne
 8100312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100316:	ea55 0c02 	orrsne.w	ip, r5, r2
 810031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100322:	f000 80e2 	beq.w	81004ea <__adddf3+0x1ee>
 8100326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 810032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810032e:	bfb8      	it	lt
 8100330:	426d      	neglt	r5, r5
 8100332:	dd0c      	ble.n	810034e <__adddf3+0x52>
 8100334:	442c      	add	r4, r5
 8100336:	ea80 0202 	eor.w	r2, r0, r2
 810033a:	ea81 0303 	eor.w	r3, r1, r3
 810033e:	ea82 0000 	eor.w	r0, r2, r0
 8100342:	ea83 0101 	eor.w	r1, r3, r1
 8100346:	ea80 0202 	eor.w	r2, r0, r2
 810034a:	ea81 0303 	eor.w	r3, r1, r3
 810034e:	2d36      	cmp	r5, #54	; 0x36
 8100350:	bf88      	it	hi
 8100352:	bd30      	pophi	{r4, r5, pc}
 8100354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100364:	d002      	beq.n	810036c <__adddf3+0x70>
 8100366:	4240      	negs	r0, r0
 8100368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100378:	d002      	beq.n	8100380 <__adddf3+0x84>
 810037a:	4252      	negs	r2, r2
 810037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100380:	ea94 0f05 	teq	r4, r5
 8100384:	f000 80a7 	beq.w	81004d6 <__adddf3+0x1da>
 8100388:	f1a4 0401 	sub.w	r4, r4, #1
 810038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100390:	db0d      	blt.n	81003ae <__adddf3+0xb2>
 8100392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100396:	fa22 f205 	lsr.w	r2, r2, r5
 810039a:	1880      	adds	r0, r0, r2
 810039c:	f141 0100 	adc.w	r1, r1, #0
 81003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 81003a4:	1880      	adds	r0, r0, r2
 81003a6:	fa43 f305 	asr.w	r3, r3, r5
 81003aa:	4159      	adcs	r1, r3
 81003ac:	e00e      	b.n	81003cc <__adddf3+0xd0>
 81003ae:	f1a5 0520 	sub.w	r5, r5, #32
 81003b2:	f10e 0e20 	add.w	lr, lr, #32
 81003b6:	2a01      	cmp	r2, #1
 81003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 81003bc:	bf28      	it	cs
 81003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 81003c2:	fa43 f305 	asr.w	r3, r3, r5
 81003c6:	18c0      	adds	r0, r0, r3
 81003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 81003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81003d0:	d507      	bpl.n	81003e2 <__adddf3+0xe6>
 81003d2:	f04f 0e00 	mov.w	lr, #0
 81003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 81003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 81003de:	eb6e 0101 	sbc.w	r1, lr, r1
 81003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 81003e6:	d31b      	bcc.n	8100420 <__adddf3+0x124>
 81003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 81003ec:	d30c      	bcc.n	8100408 <__adddf3+0x10c>
 81003ee:	0849      	lsrs	r1, r1, #1
 81003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 81003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 81003f8:	f104 0401 	add.w	r4, r4, #1
 81003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8100400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100404:	f080 809a 	bcs.w	810053c <__adddf3+0x240>
 8100408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 810040c:	bf08      	it	eq
 810040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100412:	f150 0000 	adcs.w	r0, r0, #0
 8100416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810041a:	ea41 0105 	orr.w	r1, r1, r5
 810041e:	bd30      	pop	{r4, r5, pc}
 8100420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100424:	4140      	adcs	r0, r0
 8100426:	eb41 0101 	adc.w	r1, r1, r1
 810042a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 810042e:	f1a4 0401 	sub.w	r4, r4, #1
 8100432:	d1e9      	bne.n	8100408 <__adddf3+0x10c>
 8100434:	f091 0f00 	teq	r1, #0
 8100438:	bf04      	itt	eq
 810043a:	4601      	moveq	r1, r0
 810043c:	2000      	moveq	r0, #0
 810043e:	fab1 f381 	clz	r3, r1
 8100442:	bf08      	it	eq
 8100444:	3320      	addeq	r3, #32
 8100446:	f1a3 030b 	sub.w	r3, r3, #11
 810044a:	f1b3 0220 	subs.w	r2, r3, #32
 810044e:	da0c      	bge.n	810046a <__adddf3+0x16e>
 8100450:	320c      	adds	r2, #12
 8100452:	dd08      	ble.n	8100466 <__adddf3+0x16a>
 8100454:	f102 0c14 	add.w	ip, r2, #20
 8100458:	f1c2 020c 	rsb	r2, r2, #12
 810045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8100460:	fa21 f102 	lsr.w	r1, r1, r2
 8100464:	e00c      	b.n	8100480 <__adddf3+0x184>
 8100466:	f102 0214 	add.w	r2, r2, #20
 810046a:	bfd8      	it	le
 810046c:	f1c2 0c20 	rsble	ip, r2, #32
 8100470:	fa01 f102 	lsl.w	r1, r1, r2
 8100474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100478:	bfdc      	itt	le
 810047a:	ea41 010c 	orrle.w	r1, r1, ip
 810047e:	4090      	lslle	r0, r2
 8100480:	1ae4      	subs	r4, r4, r3
 8100482:	bfa2      	ittt	ge
 8100484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100488:	4329      	orrge	r1, r5
 810048a:	bd30      	popge	{r4, r5, pc}
 810048c:	ea6f 0404 	mvn.w	r4, r4
 8100490:	3c1f      	subs	r4, #31
 8100492:	da1c      	bge.n	81004ce <__adddf3+0x1d2>
 8100494:	340c      	adds	r4, #12
 8100496:	dc0e      	bgt.n	81004b6 <__adddf3+0x1ba>
 8100498:	f104 0414 	add.w	r4, r4, #20
 810049c:	f1c4 0220 	rsb	r2, r4, #32
 81004a0:	fa20 f004 	lsr.w	r0, r0, r4
 81004a4:	fa01 f302 	lsl.w	r3, r1, r2
 81004a8:	ea40 0003 	orr.w	r0, r0, r3
 81004ac:	fa21 f304 	lsr.w	r3, r1, r4
 81004b0:	ea45 0103 	orr.w	r1, r5, r3
 81004b4:	bd30      	pop	{r4, r5, pc}
 81004b6:	f1c4 040c 	rsb	r4, r4, #12
 81004ba:	f1c4 0220 	rsb	r2, r4, #32
 81004be:	fa20 f002 	lsr.w	r0, r0, r2
 81004c2:	fa01 f304 	lsl.w	r3, r1, r4
 81004c6:	ea40 0003 	orr.w	r0, r0, r3
 81004ca:	4629      	mov	r1, r5
 81004cc:	bd30      	pop	{r4, r5, pc}
 81004ce:	fa21 f004 	lsr.w	r0, r1, r4
 81004d2:	4629      	mov	r1, r5
 81004d4:	bd30      	pop	{r4, r5, pc}
 81004d6:	f094 0f00 	teq	r4, #0
 81004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 81004de:	bf06      	itte	eq
 81004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 81004e4:	3401      	addeq	r4, #1
 81004e6:	3d01      	subne	r5, #1
 81004e8:	e74e      	b.n	8100388 <__adddf3+0x8c>
 81004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81004ee:	bf18      	it	ne
 81004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81004f4:	d029      	beq.n	810054a <__adddf3+0x24e>
 81004f6:	ea94 0f05 	teq	r4, r5
 81004fa:	bf08      	it	eq
 81004fc:	ea90 0f02 	teqeq	r0, r2
 8100500:	d005      	beq.n	810050e <__adddf3+0x212>
 8100502:	ea54 0c00 	orrs.w	ip, r4, r0
 8100506:	bf04      	itt	eq
 8100508:	4619      	moveq	r1, r3
 810050a:	4610      	moveq	r0, r2
 810050c:	bd30      	pop	{r4, r5, pc}
 810050e:	ea91 0f03 	teq	r1, r3
 8100512:	bf1e      	ittt	ne
 8100514:	2100      	movne	r1, #0
 8100516:	2000      	movne	r0, #0
 8100518:	bd30      	popne	{r4, r5, pc}
 810051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810051e:	d105      	bne.n	810052c <__adddf3+0x230>
 8100520:	0040      	lsls	r0, r0, #1
 8100522:	4149      	adcs	r1, r1
 8100524:	bf28      	it	cs
 8100526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 810052a:	bd30      	pop	{r4, r5, pc}
 810052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8100530:	bf3c      	itt	cc
 8100532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8100536:	bd30      	popcc	{r4, r5, pc}
 8100538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 810053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8100540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100544:	f04f 0000 	mov.w	r0, #0
 8100548:	bd30      	pop	{r4, r5, pc}
 810054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810054e:	bf1a      	itte	ne
 8100550:	4619      	movne	r1, r3
 8100552:	4610      	movne	r0, r2
 8100554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100558:	bf1c      	itt	ne
 810055a:	460b      	movne	r3, r1
 810055c:	4602      	movne	r2, r0
 810055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100562:	bf06      	itte	eq
 8100564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100568:	ea91 0f03 	teqeq	r1, r3
 810056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100570:	bd30      	pop	{r4, r5, pc}
 8100572:	bf00      	nop

08100574 <__aeabi_ui2d>:
 8100574:	f090 0f00 	teq	r0, #0
 8100578:	bf04      	itt	eq
 810057a:	2100      	moveq	r1, #0
 810057c:	4770      	bxeq	lr
 810057e:	b530      	push	{r4, r5, lr}
 8100580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100588:	f04f 0500 	mov.w	r5, #0
 810058c:	f04f 0100 	mov.w	r1, #0
 8100590:	e750      	b.n	8100434 <__adddf3+0x138>
 8100592:	bf00      	nop

08100594 <__aeabi_i2d>:
 8100594:	f090 0f00 	teq	r0, #0
 8100598:	bf04      	itt	eq
 810059a:	2100      	moveq	r1, #0
 810059c:	4770      	bxeq	lr
 810059e:	b530      	push	{r4, r5, lr}
 81005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 81005ac:	bf48      	it	mi
 81005ae:	4240      	negmi	r0, r0
 81005b0:	f04f 0100 	mov.w	r1, #0
 81005b4:	e73e      	b.n	8100434 <__adddf3+0x138>
 81005b6:	bf00      	nop

081005b8 <__aeabi_f2d>:
 81005b8:	0042      	lsls	r2, r0, #1
 81005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81005be:	ea4f 0131 	mov.w	r1, r1, rrx
 81005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 81005c6:	bf1f      	itttt	ne
 81005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 81005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 81005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 81005d4:	4770      	bxne	lr
 81005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 81005da:	bf08      	it	eq
 81005dc:	4770      	bxeq	lr
 81005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 81005e2:	bf04      	itt	eq
 81005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 81005e8:	4770      	bxeq	lr
 81005ea:	b530      	push	{r4, r5, lr}
 81005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 81005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81005f8:	e71c      	b.n	8100434 <__adddf3+0x138>
 81005fa:	bf00      	nop

081005fc <__aeabi_ul2d>:
 81005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8100600:	bf08      	it	eq
 8100602:	4770      	bxeq	lr
 8100604:	b530      	push	{r4, r5, lr}
 8100606:	f04f 0500 	mov.w	r5, #0
 810060a:	e00a      	b.n	8100622 <__aeabi_l2d+0x16>

0810060c <__aeabi_l2d>:
 810060c:	ea50 0201 	orrs.w	r2, r0, r1
 8100610:	bf08      	it	eq
 8100612:	4770      	bxeq	lr
 8100614:	b530      	push	{r4, r5, lr}
 8100616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 810061a:	d502      	bpl.n	8100622 <__aeabi_l2d+0x16>
 810061c:	4240      	negs	r0, r0
 810061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 810062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810062e:	f43f aed8 	beq.w	81003e2 <__adddf3+0xe6>
 8100632:	f04f 0203 	mov.w	r2, #3
 8100636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810063a:	bf18      	it	ne
 810063c:	3203      	addne	r2, #3
 810063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100642:	bf18      	it	ne
 8100644:	3203      	addne	r2, #3
 8100646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 810064a:	f1c2 0320 	rsb	r3, r2, #32
 810064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8100652:	fa20 f002 	lsr.w	r0, r0, r2
 8100656:	fa01 fe03 	lsl.w	lr, r1, r3
 810065a:	ea40 000e 	orr.w	r0, r0, lr
 810065e:	fa21 f102 	lsr.w	r1, r1, r2
 8100662:	4414      	add	r4, r2
 8100664:	e6bd      	b.n	81003e2 <__adddf3+0xe6>
 8100666:	bf00      	nop

08100668 <__aeabi_dmul>:
 8100668:	b570      	push	{r4, r5, r6, lr}
 810066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100676:	bf1d      	ittte	ne
 8100678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810067c:	ea94 0f0c 	teqne	r4, ip
 8100680:	ea95 0f0c 	teqne	r5, ip
 8100684:	f000 f8de 	bleq	8100844 <__aeabi_dmul+0x1dc>
 8100688:	442c      	add	r4, r5
 810068a:	ea81 0603 	eor.w	r6, r1, r3
 810068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810069a:	bf18      	it	ne
 810069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 81006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81006a8:	d038      	beq.n	810071c <__aeabi_dmul+0xb4>
 81006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 81006ae:	f04f 0500 	mov.w	r5, #0
 81006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 81006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 81006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 81006be:	f04f 0600 	mov.w	r6, #0
 81006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 81006c6:	f09c 0f00 	teq	ip, #0
 81006ca:	bf18      	it	ne
 81006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 81006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 81006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 81006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 81006dc:	d204      	bcs.n	81006e8 <__aeabi_dmul+0x80>
 81006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 81006e2:	416d      	adcs	r5, r5
 81006e4:	eb46 0606 	adc.w	r6, r6, r6
 81006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 81006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 81006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 81006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 81006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 81006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100700:	bf88      	it	hi
 8100702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100706:	d81e      	bhi.n	8100746 <__aeabi_dmul+0xde>
 8100708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 810070c:	bf08      	it	eq
 810070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100712:	f150 0000 	adcs.w	r0, r0, #0
 8100716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810071a:	bd70      	pop	{r4, r5, r6, pc}
 810071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100720:	ea46 0101 	orr.w	r1, r6, r1
 8100724:	ea40 0002 	orr.w	r0, r0, r2
 8100728:	ea81 0103 	eor.w	r1, r1, r3
 810072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8100730:	bfc2      	ittt	gt
 8100732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 810073a:	bd70      	popgt	{r4, r5, r6, pc}
 810073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100740:	f04f 0e00 	mov.w	lr, #0
 8100744:	3c01      	subs	r4, #1
 8100746:	f300 80ab 	bgt.w	81008a0 <__aeabi_dmul+0x238>
 810074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 810074e:	bfde      	ittt	le
 8100750:	2000      	movle	r0, #0
 8100752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8100756:	bd70      	pople	{r4, r5, r6, pc}
 8100758:	f1c4 0400 	rsb	r4, r4, #0
 810075c:	3c20      	subs	r4, #32
 810075e:	da35      	bge.n	81007cc <__aeabi_dmul+0x164>
 8100760:	340c      	adds	r4, #12
 8100762:	dc1b      	bgt.n	810079c <__aeabi_dmul+0x134>
 8100764:	f104 0414 	add.w	r4, r4, #20
 8100768:	f1c4 0520 	rsb	r5, r4, #32
 810076c:	fa00 f305 	lsl.w	r3, r0, r5
 8100770:	fa20 f004 	lsr.w	r0, r0, r4
 8100774:	fa01 f205 	lsl.w	r2, r1, r5
 8100778:	ea40 0002 	orr.w	r0, r0, r2
 810077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100788:	fa21 f604 	lsr.w	r6, r1, r4
 810078c:	eb42 0106 	adc.w	r1, r2, r6
 8100790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100794:	bf08      	it	eq
 8100796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810079a:	bd70      	pop	{r4, r5, r6, pc}
 810079c:	f1c4 040c 	rsb	r4, r4, #12
 81007a0:	f1c4 0520 	rsb	r5, r4, #32
 81007a4:	fa00 f304 	lsl.w	r3, r0, r4
 81007a8:	fa20 f005 	lsr.w	r0, r0, r5
 81007ac:	fa01 f204 	lsl.w	r2, r1, r4
 81007b0:	ea40 0002 	orr.w	r0, r0, r2
 81007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81007bc:	f141 0100 	adc.w	r1, r1, #0
 81007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007c4:	bf08      	it	eq
 81007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81007ca:	bd70      	pop	{r4, r5, r6, pc}
 81007cc:	f1c4 0520 	rsb	r5, r4, #32
 81007d0:	fa00 f205 	lsl.w	r2, r0, r5
 81007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 81007d8:	fa20 f304 	lsr.w	r3, r0, r4
 81007dc:	fa01 f205 	lsl.w	r2, r1, r5
 81007e0:	ea43 0302 	orr.w	r3, r3, r2
 81007e4:	fa21 f004 	lsr.w	r0, r1, r4
 81007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81007ec:	fa21 f204 	lsr.w	r2, r1, r4
 81007f0:	ea20 0002 	bic.w	r0, r0, r2
 81007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 81007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 81007fc:	bf08      	it	eq
 81007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100802:	bd70      	pop	{r4, r5, r6, pc}
 8100804:	f094 0f00 	teq	r4, #0
 8100808:	d10f      	bne.n	810082a <__aeabi_dmul+0x1c2>
 810080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 810080e:	0040      	lsls	r0, r0, #1
 8100810:	eb41 0101 	adc.w	r1, r1, r1
 8100814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100818:	bf08      	it	eq
 810081a:	3c01      	subeq	r4, #1
 810081c:	d0f7      	beq.n	810080e <__aeabi_dmul+0x1a6>
 810081e:	ea41 0106 	orr.w	r1, r1, r6
 8100822:	f095 0f00 	teq	r5, #0
 8100826:	bf18      	it	ne
 8100828:	4770      	bxne	lr
 810082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 810082e:	0052      	lsls	r2, r2, #1
 8100830:	eb43 0303 	adc.w	r3, r3, r3
 8100834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8100838:	bf08      	it	eq
 810083a:	3d01      	subeq	r5, #1
 810083c:	d0f7      	beq.n	810082e <__aeabi_dmul+0x1c6>
 810083e:	ea43 0306 	orr.w	r3, r3, r6
 8100842:	4770      	bx	lr
 8100844:	ea94 0f0c 	teq	r4, ip
 8100848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 810084c:	bf18      	it	ne
 810084e:	ea95 0f0c 	teqne	r5, ip
 8100852:	d00c      	beq.n	810086e <__aeabi_dmul+0x206>
 8100854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100858:	bf18      	it	ne
 810085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810085e:	d1d1      	bne.n	8100804 <__aeabi_dmul+0x19c>
 8100860:	ea81 0103 	eor.w	r1, r1, r3
 8100864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100868:	f04f 0000 	mov.w	r0, #0
 810086c:	bd70      	pop	{r4, r5, r6, pc}
 810086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100872:	bf06      	itte	eq
 8100874:	4610      	moveq	r0, r2
 8100876:	4619      	moveq	r1, r3
 8100878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810087c:	d019      	beq.n	81008b2 <__aeabi_dmul+0x24a>
 810087e:	ea94 0f0c 	teq	r4, ip
 8100882:	d102      	bne.n	810088a <__aeabi_dmul+0x222>
 8100884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100888:	d113      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810088a:	ea95 0f0c 	teq	r5, ip
 810088e:	d105      	bne.n	810089c <__aeabi_dmul+0x234>
 8100890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100894:	bf1c      	itt	ne
 8100896:	4610      	movne	r0, r2
 8100898:	4619      	movne	r1, r3
 810089a:	d10a      	bne.n	81008b2 <__aeabi_dmul+0x24a>
 810089c:	ea81 0103 	eor.w	r1, r1, r3
 81008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81008ac:	f04f 0000 	mov.w	r0, #0
 81008b0:	bd70      	pop	{r4, r5, r6, pc}
 81008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 81008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 81008ba:	bd70      	pop	{r4, r5, r6, pc}

081008bc <__aeabi_ddiv>:
 81008bc:	b570      	push	{r4, r5, r6, lr}
 81008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81008ca:	bf1d      	ittte	ne
 81008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81008d0:	ea94 0f0c 	teqne	r4, ip
 81008d4:	ea95 0f0c 	teqne	r5, ip
 81008d8:	f000 f8a7 	bleq	8100a2a <__aeabi_ddiv+0x16e>
 81008dc:	eba4 0405 	sub.w	r4, r4, r5
 81008e0:	ea81 0e03 	eor.w	lr, r1, r3
 81008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 81008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81008ec:	f000 8088 	beq.w	8100a00 <__aeabi_ddiv+0x144>
 81008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 81008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 81008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8100900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8100904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8100908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 810090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8100910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8100914:	429d      	cmp	r5, r3
 8100916:	bf08      	it	eq
 8100918:	4296      	cmpeq	r6, r2
 810091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 810091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8100922:	d202      	bcs.n	810092a <__aeabi_ddiv+0x6e>
 8100924:	085b      	lsrs	r3, r3, #1
 8100926:	ea4f 0232 	mov.w	r2, r2, rrx
 810092a:	1ab6      	subs	r6, r6, r2
 810092c:	eb65 0503 	sbc.w	r5, r5, r3
 8100930:	085b      	lsrs	r3, r3, #1
 8100932:	ea4f 0232 	mov.w	r2, r2, rrx
 8100936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 810093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 810093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100946:	bf22      	ittt	cs
 8100948:	1ab6      	subcs	r6, r6, r2
 810094a:	4675      	movcs	r5, lr
 810094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8100950:	085b      	lsrs	r3, r3, #1
 8100952:	ea4f 0232 	mov.w	r2, r2, rrx
 8100956:	ebb6 0e02 	subs.w	lr, r6, r2
 810095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810095e:	bf22      	ittt	cs
 8100960:	1ab6      	subcs	r6, r6, r2
 8100962:	4675      	movcs	r5, lr
 8100964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100968:	085b      	lsrs	r3, r3, #1
 810096a:	ea4f 0232 	mov.w	r2, r2, rrx
 810096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100976:	bf22      	ittt	cs
 8100978:	1ab6      	subcs	r6, r6, r2
 810097a:	4675      	movcs	r5, lr
 810097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100980:	085b      	lsrs	r3, r3, #1
 8100982:	ea4f 0232 	mov.w	r2, r2, rrx
 8100986:	ebb6 0e02 	subs.w	lr, r6, r2
 810098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 810098e:	bf22      	ittt	cs
 8100990:	1ab6      	subcs	r6, r6, r2
 8100992:	4675      	movcs	r5, lr
 8100994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100998:	ea55 0e06 	orrs.w	lr, r5, r6
 810099c:	d018      	beq.n	81009d0 <__aeabi_ddiv+0x114>
 810099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 81009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 81009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 81009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 81009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 81009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 81009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 81009ba:	d1c0      	bne.n	810093e <__aeabi_ddiv+0x82>
 81009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009c0:	d10b      	bne.n	81009da <__aeabi_ddiv+0x11e>
 81009c2:	ea41 0100 	orr.w	r1, r1, r0
 81009c6:	f04f 0000 	mov.w	r0, #0
 81009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 81009ce:	e7b6      	b.n	810093e <__aeabi_ddiv+0x82>
 81009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81009d4:	bf04      	itt	eq
 81009d6:	4301      	orreq	r1, r0
 81009d8:	2000      	moveq	r0, #0
 81009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81009de:	bf88      	it	hi
 81009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81009e4:	f63f aeaf 	bhi.w	8100746 <__aeabi_dmul+0xde>
 81009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 81009ec:	bf04      	itt	eq
 81009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 81009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81009f6:	f150 0000 	adcs.w	r0, r0, #0
 81009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81009fe:	bd70      	pop	{r4, r5, r6, pc}
 8100a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100a0c:	bfc2      	ittt	gt
 8100a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100a16:	bd70      	popgt	{r4, r5, r6, pc}
 8100a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100a1c:	f04f 0e00 	mov.w	lr, #0
 8100a20:	3c01      	subs	r4, #1
 8100a22:	e690      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a24:	ea45 0e06 	orr.w	lr, r5, r6
 8100a28:	e68d      	b.n	8100746 <__aeabi_dmul+0xde>
 8100a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100a2e:	ea94 0f0c 	teq	r4, ip
 8100a32:	bf08      	it	eq
 8100a34:	ea95 0f0c 	teqeq	r5, ip
 8100a38:	f43f af3b 	beq.w	81008b2 <__aeabi_dmul+0x24a>
 8100a3c:	ea94 0f0c 	teq	r4, ip
 8100a40:	d10a      	bne.n	8100a58 <__aeabi_ddiv+0x19c>
 8100a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100a46:	f47f af34 	bne.w	81008b2 <__aeabi_dmul+0x24a>
 8100a4a:	ea95 0f0c 	teq	r5, ip
 8100a4e:	f47f af25 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a52:	4610      	mov	r0, r2
 8100a54:	4619      	mov	r1, r3
 8100a56:	e72c      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a58:	ea95 0f0c 	teq	r5, ip
 8100a5c:	d106      	bne.n	8100a6c <__aeabi_ddiv+0x1b0>
 8100a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100a62:	f43f aefd 	beq.w	8100860 <__aeabi_dmul+0x1f8>
 8100a66:	4610      	mov	r0, r2
 8100a68:	4619      	mov	r1, r3
 8100a6a:	e722      	b.n	81008b2 <__aeabi_dmul+0x24a>
 8100a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100a70:	bf18      	it	ne
 8100a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100a76:	f47f aec5 	bne.w	8100804 <__aeabi_dmul+0x19c>
 8100a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100a7e:	f47f af0d 	bne.w	810089c <__aeabi_dmul+0x234>
 8100a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100a86:	f47f aeeb 	bne.w	8100860 <__aeabi_dmul+0x1f8>
 8100a8a:	e712      	b.n	81008b2 <__aeabi_dmul+0x24a>

08100a8c <__gedf2>:
 8100a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8100a90:	e006      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a92:	bf00      	nop

08100a94 <__ledf2>:
 8100a94:	f04f 0c01 	mov.w	ip, #1
 8100a98:	e002      	b.n	8100aa0 <__cmpdf2+0x4>
 8100a9a:	bf00      	nop

08100a9c <__cmpdf2>:
 8100a9c:	f04f 0c01 	mov.w	ip, #1
 8100aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ab0:	bf18      	it	ne
 8100ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100ab6:	d01b      	beq.n	8100af0 <__cmpdf2+0x54>
 8100ab8:	b001      	add	sp, #4
 8100aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100abe:	bf0c      	ite	eq
 8100ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100ac4:	ea91 0f03 	teqne	r1, r3
 8100ac8:	bf02      	ittt	eq
 8100aca:	ea90 0f02 	teqeq	r0, r2
 8100ace:	2000      	moveq	r0, #0
 8100ad0:	4770      	bxeq	lr
 8100ad2:	f110 0f00 	cmn.w	r0, #0
 8100ad6:	ea91 0f03 	teq	r1, r3
 8100ada:	bf58      	it	pl
 8100adc:	4299      	cmppl	r1, r3
 8100ade:	bf08      	it	eq
 8100ae0:	4290      	cmpeq	r0, r2
 8100ae2:	bf2c      	ite	cs
 8100ae4:	17d8      	asrcs	r0, r3, #31
 8100ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100aea:	f040 0001 	orr.w	r0, r0, #1
 8100aee:	4770      	bx	lr
 8100af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100af8:	d102      	bne.n	8100b00 <__cmpdf2+0x64>
 8100afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100afe:	d107      	bne.n	8100b10 <__cmpdf2+0x74>
 8100b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b08:	d1d6      	bne.n	8100ab8 <__cmpdf2+0x1c>
 8100b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100b0e:	d0d3      	beq.n	8100ab8 <__cmpdf2+0x1c>
 8100b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100b14:	4770      	bx	lr
 8100b16:	bf00      	nop

08100b18 <__aeabi_cdrcmple>:
 8100b18:	4684      	mov	ip, r0
 8100b1a:	4610      	mov	r0, r2
 8100b1c:	4662      	mov	r2, ip
 8100b1e:	468c      	mov	ip, r1
 8100b20:	4619      	mov	r1, r3
 8100b22:	4663      	mov	r3, ip
 8100b24:	e000      	b.n	8100b28 <__aeabi_cdcmpeq>
 8100b26:	bf00      	nop

08100b28 <__aeabi_cdcmpeq>:
 8100b28:	b501      	push	{r0, lr}
 8100b2a:	f7ff ffb7 	bl	8100a9c <__cmpdf2>
 8100b2e:	2800      	cmp	r0, #0
 8100b30:	bf48      	it	mi
 8100b32:	f110 0f00 	cmnmi.w	r0, #0
 8100b36:	bd01      	pop	{r0, pc}

08100b38 <__aeabi_dcmpeq>:
 8100b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b3c:	f7ff fff4 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b40:	bf0c      	ite	eq
 8100b42:	2001      	moveq	r0, #1
 8100b44:	2000      	movne	r0, #0
 8100b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b4a:	bf00      	nop

08100b4c <__aeabi_dcmplt>:
 8100b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b50:	f7ff ffea 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b54:	bf34      	ite	cc
 8100b56:	2001      	movcc	r0, #1
 8100b58:	2000      	movcs	r0, #0
 8100b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b5e:	bf00      	nop

08100b60 <__aeabi_dcmple>:
 8100b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b64:	f7ff ffe0 	bl	8100b28 <__aeabi_cdcmpeq>
 8100b68:	bf94      	ite	ls
 8100b6a:	2001      	movls	r0, #1
 8100b6c:	2000      	movhi	r0, #0
 8100b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b72:	bf00      	nop

08100b74 <__aeabi_dcmpge>:
 8100b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b78:	f7ff ffce 	bl	8100b18 <__aeabi_cdrcmple>
 8100b7c:	bf94      	ite	ls
 8100b7e:	2001      	movls	r0, #1
 8100b80:	2000      	movhi	r0, #0
 8100b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b86:	bf00      	nop

08100b88 <__aeabi_dcmpgt>:
 8100b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100b8c:	f7ff ffc4 	bl	8100b18 <__aeabi_cdrcmple>
 8100b90:	bf34      	ite	cc
 8100b92:	2001      	movcc	r0, #1
 8100b94:	2000      	movcs	r0, #0
 8100b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8100b9a:	bf00      	nop

08100b9c <__aeabi_dcmpun>:
 8100b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba4:	d102      	bne.n	8100bac <__aeabi_dcmpun+0x10>
 8100ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100baa:	d10a      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100bb4:	d102      	bne.n	8100bbc <__aeabi_dcmpun+0x20>
 8100bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bba:	d102      	bne.n	8100bc2 <__aeabi_dcmpun+0x26>
 8100bbc:	f04f 0000 	mov.w	r0, #0
 8100bc0:	4770      	bx	lr
 8100bc2:	f04f 0001 	mov.w	r0, #1
 8100bc6:	4770      	bx	lr

08100bc8 <__aeabi_d2iz>:
 8100bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100bd0:	d215      	bcs.n	8100bfe <__aeabi_d2iz+0x36>
 8100bd2:	d511      	bpl.n	8100bf8 <__aeabi_d2iz+0x30>
 8100bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100bdc:	d912      	bls.n	8100c04 <__aeabi_d2iz+0x3c>
 8100bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100bee:	fa23 f002 	lsr.w	r0, r3, r2
 8100bf2:	bf18      	it	ne
 8100bf4:	4240      	negne	r0, r0
 8100bf6:	4770      	bx	lr
 8100bf8:	f04f 0000 	mov.w	r0, #0
 8100bfc:	4770      	bx	lr
 8100bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100c02:	d105      	bne.n	8100c10 <__aeabi_d2iz+0x48>
 8100c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100c08:	bf08      	it	eq
 8100c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100c0e:	4770      	bx	lr
 8100c10:	f04f 0000 	mov.w	r0, #0
 8100c14:	4770      	bx	lr
 8100c16:	bf00      	nop

08100c18 <__aeabi_uldivmod>:
 8100c18:	b953      	cbnz	r3, 8100c30 <__aeabi_uldivmod+0x18>
 8100c1a:	b94a      	cbnz	r2, 8100c30 <__aeabi_uldivmod+0x18>
 8100c1c:	2900      	cmp	r1, #0
 8100c1e:	bf08      	it	eq
 8100c20:	2800      	cmpeq	r0, #0
 8100c22:	bf1c      	itt	ne
 8100c24:	f04f 31ff 	movne.w	r1, #4294967295
 8100c28:	f04f 30ff 	movne.w	r0, #4294967295
 8100c2c:	f000 b972 	b.w	8100f14 <__aeabi_idiv0>
 8100c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8100c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100c38:	f000 f806 	bl	8100c48 <__udivmoddi4>
 8100c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100c44:	b004      	add	sp, #16
 8100c46:	4770      	bx	lr

08100c48 <__udivmoddi4>:
 8100c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100c4c:	9e08      	ldr	r6, [sp, #32]
 8100c4e:	4604      	mov	r4, r0
 8100c50:	4688      	mov	r8, r1
 8100c52:	2b00      	cmp	r3, #0
 8100c54:	d14b      	bne.n	8100cee <__udivmoddi4+0xa6>
 8100c56:	428a      	cmp	r2, r1
 8100c58:	4615      	mov	r5, r2
 8100c5a:	d967      	bls.n	8100d2c <__udivmoddi4+0xe4>
 8100c5c:	fab2 f282 	clz	r2, r2
 8100c60:	b14a      	cbz	r2, 8100c76 <__udivmoddi4+0x2e>
 8100c62:	f1c2 0720 	rsb	r7, r2, #32
 8100c66:	fa01 f302 	lsl.w	r3, r1, r2
 8100c6a:	fa20 f707 	lsr.w	r7, r0, r7
 8100c6e:	4095      	lsls	r5, r2
 8100c70:	ea47 0803 	orr.w	r8, r7, r3
 8100c74:	4094      	lsls	r4, r2
 8100c76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100c7a:	0c23      	lsrs	r3, r4, #16
 8100c7c:	fbb8 f7fe 	udiv	r7, r8, lr
 8100c80:	fa1f fc85 	uxth.w	ip, r5
 8100c84:	fb0e 8817 	mls	r8, lr, r7, r8
 8100c88:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100c8c:	fb07 f10c 	mul.w	r1, r7, ip
 8100c90:	4299      	cmp	r1, r3
 8100c92:	d909      	bls.n	8100ca8 <__udivmoddi4+0x60>
 8100c94:	18eb      	adds	r3, r5, r3
 8100c96:	f107 30ff 	add.w	r0, r7, #4294967295
 8100c9a:	f080 811b 	bcs.w	8100ed4 <__udivmoddi4+0x28c>
 8100c9e:	4299      	cmp	r1, r3
 8100ca0:	f240 8118 	bls.w	8100ed4 <__udivmoddi4+0x28c>
 8100ca4:	3f02      	subs	r7, #2
 8100ca6:	442b      	add	r3, r5
 8100ca8:	1a5b      	subs	r3, r3, r1
 8100caa:	b2a4      	uxth	r4, r4
 8100cac:	fbb3 f0fe 	udiv	r0, r3, lr
 8100cb0:	fb0e 3310 	mls	r3, lr, r0, r3
 8100cb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100cb8:	fb00 fc0c 	mul.w	ip, r0, ip
 8100cbc:	45a4      	cmp	ip, r4
 8100cbe:	d909      	bls.n	8100cd4 <__udivmoddi4+0x8c>
 8100cc0:	192c      	adds	r4, r5, r4
 8100cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8100cc6:	f080 8107 	bcs.w	8100ed8 <__udivmoddi4+0x290>
 8100cca:	45a4      	cmp	ip, r4
 8100ccc:	f240 8104 	bls.w	8100ed8 <__udivmoddi4+0x290>
 8100cd0:	3802      	subs	r0, #2
 8100cd2:	442c      	add	r4, r5
 8100cd4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8100cd8:	eba4 040c 	sub.w	r4, r4, ip
 8100cdc:	2700      	movs	r7, #0
 8100cde:	b11e      	cbz	r6, 8100ce8 <__udivmoddi4+0xa0>
 8100ce0:	40d4      	lsrs	r4, r2
 8100ce2:	2300      	movs	r3, #0
 8100ce4:	e9c6 4300 	strd	r4, r3, [r6]
 8100ce8:	4639      	mov	r1, r7
 8100cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100cee:	428b      	cmp	r3, r1
 8100cf0:	d909      	bls.n	8100d06 <__udivmoddi4+0xbe>
 8100cf2:	2e00      	cmp	r6, #0
 8100cf4:	f000 80eb 	beq.w	8100ece <__udivmoddi4+0x286>
 8100cf8:	2700      	movs	r7, #0
 8100cfa:	e9c6 0100 	strd	r0, r1, [r6]
 8100cfe:	4638      	mov	r0, r7
 8100d00:	4639      	mov	r1, r7
 8100d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d06:	fab3 f783 	clz	r7, r3
 8100d0a:	2f00      	cmp	r7, #0
 8100d0c:	d147      	bne.n	8100d9e <__udivmoddi4+0x156>
 8100d0e:	428b      	cmp	r3, r1
 8100d10:	d302      	bcc.n	8100d18 <__udivmoddi4+0xd0>
 8100d12:	4282      	cmp	r2, r0
 8100d14:	f200 80fa 	bhi.w	8100f0c <__udivmoddi4+0x2c4>
 8100d18:	1a84      	subs	r4, r0, r2
 8100d1a:	eb61 0303 	sbc.w	r3, r1, r3
 8100d1e:	2001      	movs	r0, #1
 8100d20:	4698      	mov	r8, r3
 8100d22:	2e00      	cmp	r6, #0
 8100d24:	d0e0      	beq.n	8100ce8 <__udivmoddi4+0xa0>
 8100d26:	e9c6 4800 	strd	r4, r8, [r6]
 8100d2a:	e7dd      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100d2c:	b902      	cbnz	r2, 8100d30 <__udivmoddi4+0xe8>
 8100d2e:	deff      	udf	#255	; 0xff
 8100d30:	fab2 f282 	clz	r2, r2
 8100d34:	2a00      	cmp	r2, #0
 8100d36:	f040 808f 	bne.w	8100e58 <__udivmoddi4+0x210>
 8100d3a:	1b49      	subs	r1, r1, r5
 8100d3c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100d40:	fa1f f885 	uxth.w	r8, r5
 8100d44:	2701      	movs	r7, #1
 8100d46:	fbb1 fcfe 	udiv	ip, r1, lr
 8100d4a:	0c23      	lsrs	r3, r4, #16
 8100d4c:	fb0e 111c 	mls	r1, lr, ip, r1
 8100d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d54:	fb08 f10c 	mul.w	r1, r8, ip
 8100d58:	4299      	cmp	r1, r3
 8100d5a:	d907      	bls.n	8100d6c <__udivmoddi4+0x124>
 8100d5c:	18eb      	adds	r3, r5, r3
 8100d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100d62:	d202      	bcs.n	8100d6a <__udivmoddi4+0x122>
 8100d64:	4299      	cmp	r1, r3
 8100d66:	f200 80cd 	bhi.w	8100f04 <__udivmoddi4+0x2bc>
 8100d6a:	4684      	mov	ip, r0
 8100d6c:	1a59      	subs	r1, r3, r1
 8100d6e:	b2a3      	uxth	r3, r4
 8100d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8100d74:	fb0e 1410 	mls	r4, lr, r0, r1
 8100d78:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100d7c:	fb08 f800 	mul.w	r8, r8, r0
 8100d80:	45a0      	cmp	r8, r4
 8100d82:	d907      	bls.n	8100d94 <__udivmoddi4+0x14c>
 8100d84:	192c      	adds	r4, r5, r4
 8100d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8100d8a:	d202      	bcs.n	8100d92 <__udivmoddi4+0x14a>
 8100d8c:	45a0      	cmp	r8, r4
 8100d8e:	f200 80b6 	bhi.w	8100efe <__udivmoddi4+0x2b6>
 8100d92:	4618      	mov	r0, r3
 8100d94:	eba4 0408 	sub.w	r4, r4, r8
 8100d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100d9c:	e79f      	b.n	8100cde <__udivmoddi4+0x96>
 8100d9e:	f1c7 0c20 	rsb	ip, r7, #32
 8100da2:	40bb      	lsls	r3, r7
 8100da4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100da8:	ea4e 0e03 	orr.w	lr, lr, r3
 8100dac:	fa01 f407 	lsl.w	r4, r1, r7
 8100db0:	fa20 f50c 	lsr.w	r5, r0, ip
 8100db4:	fa21 f30c 	lsr.w	r3, r1, ip
 8100db8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100dbc:	4325      	orrs	r5, r4
 8100dbe:	fbb3 f9f8 	udiv	r9, r3, r8
 8100dc2:	0c2c      	lsrs	r4, r5, #16
 8100dc4:	fb08 3319 	mls	r3, r8, r9, r3
 8100dc8:	fa1f fa8e 	uxth.w	sl, lr
 8100dcc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100dd0:	fb09 f40a 	mul.w	r4, r9, sl
 8100dd4:	429c      	cmp	r4, r3
 8100dd6:	fa02 f207 	lsl.w	r2, r2, r7
 8100dda:	fa00 f107 	lsl.w	r1, r0, r7
 8100dde:	d90b      	bls.n	8100df8 <__udivmoddi4+0x1b0>
 8100de0:	eb1e 0303 	adds.w	r3, lr, r3
 8100de4:	f109 30ff 	add.w	r0, r9, #4294967295
 8100de8:	f080 8087 	bcs.w	8100efa <__udivmoddi4+0x2b2>
 8100dec:	429c      	cmp	r4, r3
 8100dee:	f240 8084 	bls.w	8100efa <__udivmoddi4+0x2b2>
 8100df2:	f1a9 0902 	sub.w	r9, r9, #2
 8100df6:	4473      	add	r3, lr
 8100df8:	1b1b      	subs	r3, r3, r4
 8100dfa:	b2ad      	uxth	r5, r5
 8100dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8100e00:	fb08 3310 	mls	r3, r8, r0, r3
 8100e04:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8100e08:	fb00 fa0a 	mul.w	sl, r0, sl
 8100e0c:	45a2      	cmp	sl, r4
 8100e0e:	d908      	bls.n	8100e22 <__udivmoddi4+0x1da>
 8100e10:	eb1e 0404 	adds.w	r4, lr, r4
 8100e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8100e18:	d26b      	bcs.n	8100ef2 <__udivmoddi4+0x2aa>
 8100e1a:	45a2      	cmp	sl, r4
 8100e1c:	d969      	bls.n	8100ef2 <__udivmoddi4+0x2aa>
 8100e1e:	3802      	subs	r0, #2
 8100e20:	4474      	add	r4, lr
 8100e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8100e26:	fba0 8902 	umull	r8, r9, r0, r2
 8100e2a:	eba4 040a 	sub.w	r4, r4, sl
 8100e2e:	454c      	cmp	r4, r9
 8100e30:	46c2      	mov	sl, r8
 8100e32:	464b      	mov	r3, r9
 8100e34:	d354      	bcc.n	8100ee0 <__udivmoddi4+0x298>
 8100e36:	d051      	beq.n	8100edc <__udivmoddi4+0x294>
 8100e38:	2e00      	cmp	r6, #0
 8100e3a:	d069      	beq.n	8100f10 <__udivmoddi4+0x2c8>
 8100e3c:	ebb1 050a 	subs.w	r5, r1, sl
 8100e40:	eb64 0403 	sbc.w	r4, r4, r3
 8100e44:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100e48:	40fd      	lsrs	r5, r7
 8100e4a:	40fc      	lsrs	r4, r7
 8100e4c:	ea4c 0505 	orr.w	r5, ip, r5
 8100e50:	e9c6 5400 	strd	r5, r4, [r6]
 8100e54:	2700      	movs	r7, #0
 8100e56:	e747      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100e58:	f1c2 0320 	rsb	r3, r2, #32
 8100e5c:	fa20 f703 	lsr.w	r7, r0, r3
 8100e60:	4095      	lsls	r5, r2
 8100e62:	fa01 f002 	lsl.w	r0, r1, r2
 8100e66:	fa21 f303 	lsr.w	r3, r1, r3
 8100e6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100e6e:	4338      	orrs	r0, r7
 8100e70:	0c01      	lsrs	r1, r0, #16
 8100e72:	fbb3 f7fe 	udiv	r7, r3, lr
 8100e76:	fa1f f885 	uxth.w	r8, r5
 8100e7a:	fb0e 3317 	mls	r3, lr, r7, r3
 8100e7e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100e82:	fb07 f308 	mul.w	r3, r7, r8
 8100e86:	428b      	cmp	r3, r1
 8100e88:	fa04 f402 	lsl.w	r4, r4, r2
 8100e8c:	d907      	bls.n	8100e9e <__udivmoddi4+0x256>
 8100e8e:	1869      	adds	r1, r5, r1
 8100e90:	f107 3cff 	add.w	ip, r7, #4294967295
 8100e94:	d22f      	bcs.n	8100ef6 <__udivmoddi4+0x2ae>
 8100e96:	428b      	cmp	r3, r1
 8100e98:	d92d      	bls.n	8100ef6 <__udivmoddi4+0x2ae>
 8100e9a:	3f02      	subs	r7, #2
 8100e9c:	4429      	add	r1, r5
 8100e9e:	1acb      	subs	r3, r1, r3
 8100ea0:	b281      	uxth	r1, r0
 8100ea2:	fbb3 f0fe 	udiv	r0, r3, lr
 8100ea6:	fb0e 3310 	mls	r3, lr, r0, r3
 8100eaa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100eae:	fb00 f308 	mul.w	r3, r0, r8
 8100eb2:	428b      	cmp	r3, r1
 8100eb4:	d907      	bls.n	8100ec6 <__udivmoddi4+0x27e>
 8100eb6:	1869      	adds	r1, r5, r1
 8100eb8:	f100 3cff 	add.w	ip, r0, #4294967295
 8100ebc:	d217      	bcs.n	8100eee <__udivmoddi4+0x2a6>
 8100ebe:	428b      	cmp	r3, r1
 8100ec0:	d915      	bls.n	8100eee <__udivmoddi4+0x2a6>
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	4429      	add	r1, r5
 8100ec6:	1ac9      	subs	r1, r1, r3
 8100ec8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8100ecc:	e73b      	b.n	8100d46 <__udivmoddi4+0xfe>
 8100ece:	4637      	mov	r7, r6
 8100ed0:	4630      	mov	r0, r6
 8100ed2:	e709      	b.n	8100ce8 <__udivmoddi4+0xa0>
 8100ed4:	4607      	mov	r7, r0
 8100ed6:	e6e7      	b.n	8100ca8 <__udivmoddi4+0x60>
 8100ed8:	4618      	mov	r0, r3
 8100eda:	e6fb      	b.n	8100cd4 <__udivmoddi4+0x8c>
 8100edc:	4541      	cmp	r1, r8
 8100ede:	d2ab      	bcs.n	8100e38 <__udivmoddi4+0x1f0>
 8100ee0:	ebb8 0a02 	subs.w	sl, r8, r2
 8100ee4:	eb69 020e 	sbc.w	r2, r9, lr
 8100ee8:	3801      	subs	r0, #1
 8100eea:	4613      	mov	r3, r2
 8100eec:	e7a4      	b.n	8100e38 <__udivmoddi4+0x1f0>
 8100eee:	4660      	mov	r0, ip
 8100ef0:	e7e9      	b.n	8100ec6 <__udivmoddi4+0x27e>
 8100ef2:	4618      	mov	r0, r3
 8100ef4:	e795      	b.n	8100e22 <__udivmoddi4+0x1da>
 8100ef6:	4667      	mov	r7, ip
 8100ef8:	e7d1      	b.n	8100e9e <__udivmoddi4+0x256>
 8100efa:	4681      	mov	r9, r0
 8100efc:	e77c      	b.n	8100df8 <__udivmoddi4+0x1b0>
 8100efe:	3802      	subs	r0, #2
 8100f00:	442c      	add	r4, r5
 8100f02:	e747      	b.n	8100d94 <__udivmoddi4+0x14c>
 8100f04:	f1ac 0c02 	sub.w	ip, ip, #2
 8100f08:	442b      	add	r3, r5
 8100f0a:	e72f      	b.n	8100d6c <__udivmoddi4+0x124>
 8100f0c:	4638      	mov	r0, r7
 8100f0e:	e708      	b.n	8100d22 <__udivmoddi4+0xda>
 8100f10:	4637      	mov	r7, r6
 8100f12:	e6e9      	b.n	8100ce8 <__udivmoddi4+0xa0>

08100f14 <__aeabi_idiv0>:
 8100f14:	4770      	bx	lr
 8100f16:	bf00      	nop

08100f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100f18:	b480      	push	{r7}
 8100f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100f1c:	4b0b      	ldr	r3, [pc, #44]	; (8100f4c <SystemInit+0x34>)
 8100f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100f22:	4a0a      	ldr	r2, [pc, #40]	; (8100f4c <SystemInit+0x34>)
 8100f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 8100f2c:	4b07      	ldr	r3, [pc, #28]	; (8100f4c <SystemInit+0x34>)
 8100f2e:	691b      	ldr	r3, [r3, #16]
 8100f30:	4a06      	ldr	r2, [pc, #24]	; (8100f4c <SystemInit+0x34>)
 8100f32:	f043 0304 	orr.w	r3, r3, #4
 8100f36:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100f38:	4b04      	ldr	r3, [pc, #16]	; (8100f4c <SystemInit+0x34>)
 8100f3a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100f3e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100f40:	bf00      	nop
 8100f42:	46bd      	mov	sp, r7
 8100f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f48:	4770      	bx	lr
 8100f4a:	bf00      	nop
 8100f4c:	e000ed00 	.word	0xe000ed00

08100f50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8100f50:	b580      	push	{r7, lr}
 8100f52:	b082      	sub	sp, #8
 8100f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8100f56:	4b11      	ldr	r3, [pc, #68]	; (8100f9c <MX_DMA_Init+0x4c>)
 8100f58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f5c:	4a0f      	ldr	r2, [pc, #60]	; (8100f9c <MX_DMA_Init+0x4c>)
 8100f5e:	f043 0301 	orr.w	r3, r3, #1
 8100f62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100f66:	4b0d      	ldr	r3, [pc, #52]	; (8100f9c <MX_DMA_Init+0x4c>)
 8100f68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100f6c:	f003 0301 	and.w	r3, r3, #1
 8100f70:	607b      	str	r3, [r7, #4]
 8100f72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8100f74:	2200      	movs	r2, #0
 8100f76:	2100      	movs	r1, #0
 8100f78:	200b      	movs	r0, #11
 8100f7a:	f001 f8cb 	bl	8102114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8100f7e:	200b      	movs	r0, #11
 8100f80:	f001 f8e2 	bl	8102148 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8100f84:	2200      	movs	r2, #0
 8100f86:	2100      	movs	r1, #0
 8100f88:	200c      	movs	r0, #12
 8100f8a:	f001 f8c3 	bl	8102114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8100f8e:	200c      	movs	r0, #12
 8100f90:	f001 f8da 	bl	8102148 <HAL_NVIC_EnableIRQ>

}
 8100f94:	bf00      	nop
 8100f96:	3708      	adds	r7, #8
 8100f98:	46bd      	mov	sp, r7
 8100f9a:	bd80      	pop	{r7, pc}
 8100f9c:	58024400 	.word	0x58024400

08100fa0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8100fa0:	b580      	push	{r7, lr}
 8100fa2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8100fa4:	4a04      	ldr	r2, [pc, #16]	; (8100fb8 <MX_FREERTOS_Init+0x18>)
 8100fa6:	2100      	movs	r1, #0
 8100fa8:	4804      	ldr	r0, [pc, #16]	; (8100fbc <MX_FREERTOS_Init+0x1c>)
 8100faa:	f007 fb87 	bl	81086bc <osThreadNew>
 8100fae:	4602      	mov	r2, r0
 8100fb0:	4b03      	ldr	r3, [pc, #12]	; (8100fc0 <MX_FREERTOS_Init+0x20>)
 8100fb2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8100fb4:	bf00      	nop
 8100fb6:	bd80      	pop	{r7, pc}
 8100fb8:	0810cbf0 	.word	0x0810cbf0
 8100fbc:	08100fc5 	.word	0x08100fc5
 8100fc0:	10004b1c 	.word	0x10004b1c

08100fc4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8100fc4:	b580      	push	{r7, lr}
 8100fc6:	b082      	sub	sp, #8
 8100fc8:	af00      	add	r7, sp, #0
 8100fca:	6078      	str	r0, [r7, #4]
      //sprintf ((char*)buf, ":%u.%02u \r\n", (unsigned int) temp/100, (unsigned int)temp % 100);
//
      //HAL_UART_Transmit(&huart3, buf, strlen((char*)buf), HAL_MAX_DELAY);
	  	//LED2_ON();

    osDelay(1000);
 8100fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100fd0:	f007 fc1a 	bl	8108808 <osDelay>
 8100fd4:	e7fa      	b.n	8100fcc <StartDefaultTask+0x8>
	...

08100fd8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100fd8:	b580      	push	{r7, lr}
 8100fda:	b08a      	sub	sp, #40	; 0x28
 8100fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fde:	f107 0314 	add.w	r3, r7, #20
 8100fe2:	2200      	movs	r2, #0
 8100fe4:	601a      	str	r2, [r3, #0]
 8100fe6:	605a      	str	r2, [r3, #4]
 8100fe8:	609a      	str	r2, [r3, #8]
 8100fea:	60da      	str	r2, [r3, #12]
 8100fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100fee:	4b29      	ldr	r3, [pc, #164]	; (8101094 <MX_GPIO_Init+0xbc>)
 8100ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ff4:	4a27      	ldr	r2, [pc, #156]	; (8101094 <MX_GPIO_Init+0xbc>)
 8100ff6:	f043 0310 	orr.w	r3, r3, #16
 8100ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ffe:	4b25      	ldr	r3, [pc, #148]	; (8101094 <MX_GPIO_Init+0xbc>)
 8101000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101004:	f003 0310 	and.w	r3, r3, #16
 8101008:	613b      	str	r3, [r7, #16]
 810100a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 810100c:	4b21      	ldr	r3, [pc, #132]	; (8101094 <MX_GPIO_Init+0xbc>)
 810100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101012:	4a20      	ldr	r2, [pc, #128]	; (8101094 <MX_GPIO_Init+0xbc>)
 8101014:	f043 0308 	orr.w	r3, r3, #8
 8101018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810101c:	4b1d      	ldr	r3, [pc, #116]	; (8101094 <MX_GPIO_Init+0xbc>)
 810101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101022:	f003 0308 	and.w	r3, r3, #8
 8101026:	60fb      	str	r3, [r7, #12]
 8101028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810102a:	4b1a      	ldr	r3, [pc, #104]	; (8101094 <MX_GPIO_Init+0xbc>)
 810102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101030:	4a18      	ldr	r2, [pc, #96]	; (8101094 <MX_GPIO_Init+0xbc>)
 8101032:	f043 0301 	orr.w	r3, r3, #1
 8101036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810103a:	4b16      	ldr	r3, [pc, #88]	; (8101094 <MX_GPIO_Init+0xbc>)
 810103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101040:	f003 0301 	and.w	r3, r3, #1
 8101044:	60bb      	str	r3, [r7, #8]
 8101046:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101048:	4b12      	ldr	r3, [pc, #72]	; (8101094 <MX_GPIO_Init+0xbc>)
 810104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810104e:	4a11      	ldr	r2, [pc, #68]	; (8101094 <MX_GPIO_Init+0xbc>)
 8101050:	f043 0302 	orr.w	r3, r3, #2
 8101054:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101058:	4b0e      	ldr	r3, [pc, #56]	; (8101094 <MX_GPIO_Init+0xbc>)
 810105a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810105e:	f003 0302 	and.w	r3, r3, #2
 8101062:	607b      	str	r3, [r7, #4]
 8101064:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8101066:	2200      	movs	r2, #0
 8101068:	2102      	movs	r1, #2
 810106a:	480b      	ldr	r0, [pc, #44]	; (8101098 <MX_GPIO_Init+0xc0>)
 810106c:	f003 fd58 	bl	8104b20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8101070:	2302      	movs	r3, #2
 8101072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101074:	2301      	movs	r3, #1
 8101076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101078:	2300      	movs	r3, #0
 810107a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810107c:	2300      	movs	r3, #0
 810107e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8101080:	f107 0314 	add.w	r3, r7, #20
 8101084:	4619      	mov	r1, r3
 8101086:	4804      	ldr	r0, [pc, #16]	; (8101098 <MX_GPIO_Init+0xc0>)
 8101088:	f003 fb9a 	bl	81047c0 <HAL_GPIO_Init>

}
 810108c:	bf00      	nop
 810108e:	3728      	adds	r7, #40	; 0x28
 8101090:	46bd      	mov	sp, r7
 8101092:	bd80      	pop	{r7, pc}
 8101094:	58024400 	.word	0x58024400
 8101098:	58021000 	.word	0x58021000

0810109c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 810109c:	b580      	push	{r7, lr}
 810109e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 81010a0:	4b1b      	ldr	r3, [pc, #108]	; (8101110 <MX_I2C1_Init+0x74>)
 81010a2:	4a1c      	ldr	r2, [pc, #112]	; (8101114 <MX_I2C1_Init+0x78>)
 81010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 81010a6:	4b1a      	ldr	r3, [pc, #104]	; (8101110 <MX_I2C1_Init+0x74>)
 81010a8:	4a1b      	ldr	r2, [pc, #108]	; (8101118 <MX_I2C1_Init+0x7c>)
 81010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81010ac:	4b18      	ldr	r3, [pc, #96]	; (8101110 <MX_I2C1_Init+0x74>)
 81010ae:	2200      	movs	r2, #0
 81010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81010b2:	4b17      	ldr	r3, [pc, #92]	; (8101110 <MX_I2C1_Init+0x74>)
 81010b4:	2201      	movs	r2, #1
 81010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81010b8:	4b15      	ldr	r3, [pc, #84]	; (8101110 <MX_I2C1_Init+0x74>)
 81010ba:	2200      	movs	r2, #0
 81010bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81010be:	4b14      	ldr	r3, [pc, #80]	; (8101110 <MX_I2C1_Init+0x74>)
 81010c0:	2200      	movs	r2, #0
 81010c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81010c4:	4b12      	ldr	r3, [pc, #72]	; (8101110 <MX_I2C1_Init+0x74>)
 81010c6:	2200      	movs	r2, #0
 81010c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81010ca:	4b11      	ldr	r3, [pc, #68]	; (8101110 <MX_I2C1_Init+0x74>)
 81010cc:	2200      	movs	r2, #0
 81010ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81010d0:	4b0f      	ldr	r3, [pc, #60]	; (8101110 <MX_I2C1_Init+0x74>)
 81010d2:	2200      	movs	r2, #0
 81010d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81010d6:	480e      	ldr	r0, [pc, #56]	; (8101110 <MX_I2C1_Init+0x74>)
 81010d8:	f003 fd72 	bl	8104bc0 <HAL_I2C_Init>
 81010dc:	4603      	mov	r3, r0
 81010de:	2b00      	cmp	r3, #0
 81010e0:	d001      	beq.n	81010e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81010e2:	f000 fa83 	bl	81015ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81010e6:	2100      	movs	r1, #0
 81010e8:	4809      	ldr	r0, [pc, #36]	; (8101110 <MX_I2C1_Init+0x74>)
 81010ea:	f003 fdf8 	bl	8104cde <HAL_I2CEx_ConfigAnalogFilter>
 81010ee:	4603      	mov	r3, r0
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	d001      	beq.n	81010f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81010f4:	f000 fa7a 	bl	81015ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81010f8:	2100      	movs	r1, #0
 81010fa:	4805      	ldr	r0, [pc, #20]	; (8101110 <MX_I2C1_Init+0x74>)
 81010fc:	f003 fe3a 	bl	8104d74 <HAL_I2CEx_ConfigDigitalFilter>
 8101100:	4603      	mov	r3, r0
 8101102:	2b00      	cmp	r3, #0
 8101104:	d001      	beq.n	810110a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101106:	f000 fa71 	bl	81015ec <Error_Handler>
  }

}
 810110a:	bf00      	nop
 810110c:	bd80      	pop	{r7, pc}
 810110e:	bf00      	nop
 8101110:	10004b20 	.word	0x10004b20
 8101114:	40005400 	.word	0x40005400
 8101118:	307075b1 	.word	0x307075b1

0810111c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 810111c:	b580      	push	{r7, lr}
 810111e:	b08a      	sub	sp, #40	; 0x28
 8101120:	af00      	add	r7, sp, #0
 8101122:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101124:	f107 0314 	add.w	r3, r7, #20
 8101128:	2200      	movs	r2, #0
 810112a:	601a      	str	r2, [r3, #0]
 810112c:	605a      	str	r2, [r3, #4]
 810112e:	609a      	str	r2, [r3, #8]
 8101130:	60da      	str	r2, [r3, #12]
 8101132:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	681b      	ldr	r3, [r3, #0]
 8101138:	4a1a      	ldr	r2, [pc, #104]	; (81011a4 <HAL_I2C_MspInit+0x88>)
 810113a:	4293      	cmp	r3, r2
 810113c:	d12e      	bne.n	810119c <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810113e:	4b1a      	ldr	r3, [pc, #104]	; (81011a8 <HAL_I2C_MspInit+0x8c>)
 8101140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101144:	4a18      	ldr	r2, [pc, #96]	; (81011a8 <HAL_I2C_MspInit+0x8c>)
 8101146:	f043 0302 	orr.w	r3, r3, #2
 810114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810114e:	4b16      	ldr	r3, [pc, #88]	; (81011a8 <HAL_I2C_MspInit+0x8c>)
 8101150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101154:	f003 0302 	and.w	r3, r3, #2
 8101158:	613b      	str	r3, [r7, #16]
 810115a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 810115c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101162:	2312      	movs	r3, #18
 8101164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101166:	2300      	movs	r3, #0
 8101168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810116a:	2300      	movs	r3, #0
 810116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 810116e:	2304      	movs	r3, #4
 8101170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101172:	f107 0314 	add.w	r3, r7, #20
 8101176:	4619      	mov	r1, r3
 8101178:	480c      	ldr	r0, [pc, #48]	; (81011ac <HAL_I2C_MspInit+0x90>)
 810117a:	f003 fb21 	bl	81047c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 810117e:	4b0a      	ldr	r3, [pc, #40]	; (81011a8 <HAL_I2C_MspInit+0x8c>)
 8101180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101184:	4a08      	ldr	r2, [pc, #32]	; (81011a8 <HAL_I2C_MspInit+0x8c>)
 8101186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810118a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810118e:	4b06      	ldr	r3, [pc, #24]	; (81011a8 <HAL_I2C_MspInit+0x8c>)
 8101190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101194:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101198:	60fb      	str	r3, [r7, #12]
 810119a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 810119c:	bf00      	nop
 810119e:	3728      	adds	r7, #40	; 0x28
 81011a0:	46bd      	mov	sp, r7
 81011a2:	bd80      	pop	{r7, pc}
 81011a4:	40005400 	.word	0x40005400
 81011a8:	58024400 	.word	0x58024400
 81011ac:	58020400 	.word	0x58020400

081011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81011b0:	b580      	push	{r7, lr}
 81011b2:	b082      	sub	sp, #8
 81011b4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81011b6:	4b2b      	ldr	r3, [pc, #172]	; (8101264 <main+0xb4>)
 81011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011bc:	4a29      	ldr	r2, [pc, #164]	; (8101264 <main+0xb4>)
 81011be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011c6:	4b27      	ldr	r3, [pc, #156]	; (8101264 <main+0xb4>)
 81011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81011d0:	607b      	str	r3, [r7, #4]
 81011d2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81011d4:	2001      	movs	r0, #1
 81011d6:	f003 fcbd 	bl	8104b54 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81011da:	f003 fe8d 	bl	8104ef8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81011de:	2201      	movs	r2, #1
 81011e0:	2102      	movs	r1, #2
 81011e2:	2000      	movs	r0, #0
 81011e4:	f003 fe12 	bl	8104e0c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81011e8:	4b1f      	ldr	r3, [pc, #124]	; (8101268 <main+0xb8>)
 81011ea:	681b      	ldr	r3, [r3, #0]
 81011ec:	091b      	lsrs	r3, r3, #4
 81011ee:	f003 030f 	and.w	r3, r3, #15
 81011f2:	2b07      	cmp	r3, #7
 81011f4:	d108      	bne.n	8101208 <main+0x58>
 81011f6:	4b1d      	ldr	r3, [pc, #116]	; (810126c <main+0xbc>)
 81011f8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81011fc:	4a1b      	ldr	r2, [pc, #108]	; (810126c <main+0xbc>)
 81011fe:	f043 0301 	orr.w	r3, r3, #1
 8101202:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101206:	e007      	b.n	8101218 <main+0x68>
 8101208:	4b18      	ldr	r3, [pc, #96]	; (810126c <main+0xbc>)
 810120a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810120e:	4a17      	ldr	r2, [pc, #92]	; (810126c <main+0xbc>)
 8101210:	f043 0301 	orr.w	r3, r3, #1
 8101214:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101218:	f000 fe24 	bl	8101e64 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810121c:	f7ff fedc 	bl	8100fd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8101220:	f7ff fe96 	bl	8100f50 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8101224:	f000 fcb8 	bl	8101b98 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8101228:	f000 faee 	bl	8101808 <MX_TIM1_Init>
  MX_I2C1_Init();
 810122c:	f7ff ff36 	bl	810109c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8101230:	f000 fc66 	bl	8101b00 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  ConfigGPS();
 8101234:	f000 f822 	bl	810127c <ConfigGPS>
  ConfigPWMChannels();
 8101238:	f000 f8fe 	bl	8101438 <ConfigPWMChannels>

  if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)data_byte, 1)== HAL_OK)
 810123c:	2201      	movs	r2, #1
 810123e:	490c      	ldr	r1, [pc, #48]	; (8101270 <main+0xc0>)
 8101240:	480c      	ldr	r0, [pc, #48]	; (8101274 <main+0xc4>)
 8101242:	f005 fe2f 	bl	8106ea4 <HAL_UART_Receive_DMA>
 8101246:	4603      	mov	r3, r0
 8101248:	2b00      	cmp	r3, #0
 810124a:	d104      	bne.n	8101256 <main+0xa6>
  {
	  	LED2_ON();
 810124c:	2201      	movs	r2, #1
 810124e:	2102      	movs	r1, #2
 8101250:	4809      	ldr	r0, [pc, #36]	; (8101278 <main+0xc8>)
 8101252:	f003 fc65 	bl	8104b20 <HAL_GPIO_WritePin>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8101256:	f007 f9c7 	bl	81085e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 810125a:	f7ff fea1 	bl	8100fa0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 810125e:	f007 f9f7 	bl	8108650 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101262:	e7fe      	b.n	8101262 <main+0xb2>
 8101264:	58024400 	.word	0x58024400
 8101268:	e000ed00 	.word	0xe000ed00
 810126c:	58026400 	.word	0x58026400
 8101270:	100001fc 	.word	0x100001fc
 8101274:	10004de0 	.word	0x10004de0
 8101278:	58021000 	.word	0x58021000

0810127c <ConfigGPS>:
  }
  /* USER CODE END 3 */
}

void ConfigGPS(void)
{
 810127c:	b590      	push	{r4, r7, lr}
 810127e:	b0a1      	sub	sp, #132	; 0x84
 8101280:	af00      	add	r7, sp, #0
		if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_10HZ_RATE, sizeof(UBLOX_10HZ_RATE)) == HAL_OK)
 8101282:	4b63      	ldr	r3, [pc, #396]	; (8101410 <ConfigGPS+0x194>)
 8101284:	463c      	mov	r4, r7
 8101286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101288:	c407      	stmia	r4!, {r0, r1, r2}
 810128a:	8023      	strh	r3, [r4, #0]
 810128c:	463b      	mov	r3, r7
 810128e:	220e      	movs	r2, #14
 8101290:	4619      	mov	r1, r3
 8101292:	4860      	ldr	r0, [pc, #384]	; (8101414 <ConfigGPS+0x198>)
 8101294:	f005 fd86 	bl	8106da4 <HAL_UART_Transmit_DMA>
 8101298:	4603      	mov	r3, r0
 810129a:	2b00      	cmp	r3, #0
 810129c:	d105      	bne.n	81012aa <ConfigGPS+0x2e>
		{
		  LED3_ON();
 810129e:	2201      	movs	r2, #1
 81012a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81012a4:	485c      	ldr	r0, [pc, #368]	; (8101418 <ConfigGPS+0x19c>)
 81012a6:	f003 fc3b 	bl	8104b20 <HAL_GPIO_WritePin>
		}
		HAL_Delay(100);
 81012aa:	2064      	movs	r0, #100	; 0x64
 81012ac:	f000 fe58 	bl	8101f60 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGGA_OFF, sizeof(UBLOX_GXGGA_OFF)) == HAL_OK)
 81012b0:	4b5a      	ldr	r3, [pc, #360]	; (810141c <ConfigGPS+0x1a0>)
 81012b2:	f107 0410 	add.w	r4, r7, #16
 81012b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81012b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81012bc:	f107 0310 	add.w	r3, r7, #16
 81012c0:	2210      	movs	r2, #16
 81012c2:	4619      	mov	r1, r3
 81012c4:	4853      	ldr	r0, [pc, #332]	; (8101414 <ConfigGPS+0x198>)
 81012c6:	f005 fd6d 	bl	8106da4 <HAL_UART_Transmit_DMA>
 81012ca:	4603      	mov	r3, r0
 81012cc:	2b00      	cmp	r3, #0
 81012ce:	d105      	bne.n	81012dc <ConfigGPS+0x60>
	    {
	  	  LED3_ON();
 81012d0:	2201      	movs	r2, #1
 81012d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81012d6:	4850      	ldr	r0, [pc, #320]	; (8101418 <ConfigGPS+0x19c>)
 81012d8:	f003 fc22 	bl	8104b20 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81012dc:	2064      	movs	r0, #100	; 0x64
 81012de:	f000 fe3f 	bl	8101f60 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGLL_OFF, sizeof(UBLOX_GXGLL_OFF)) == HAL_OK)
 81012e2:	4b4f      	ldr	r3, [pc, #316]	; (8101420 <ConfigGPS+0x1a4>)
 81012e4:	f107 0420 	add.w	r4, r7, #32
 81012e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81012ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81012ee:	f107 0320 	add.w	r3, r7, #32
 81012f2:	2210      	movs	r2, #16
 81012f4:	4619      	mov	r1, r3
 81012f6:	4847      	ldr	r0, [pc, #284]	; (8101414 <ConfigGPS+0x198>)
 81012f8:	f005 fd54 	bl	8106da4 <HAL_UART_Transmit_DMA>
 81012fc:	4603      	mov	r3, r0
 81012fe:	2b00      	cmp	r3, #0
 8101300:	d105      	bne.n	810130e <ConfigGPS+0x92>
	    {
	  	  LED3_ON();
 8101302:	2201      	movs	r2, #1
 8101304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101308:	4843      	ldr	r0, [pc, #268]	; (8101418 <ConfigGPS+0x19c>)
 810130a:	f003 fc09 	bl	8104b20 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 810130e:	2064      	movs	r0, #100	; 0x64
 8101310:	f000 fe26 	bl	8101f60 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGSA_OFF, sizeof(UBLOX_GXGSA_OFF)) == HAL_OK)
 8101314:	4b43      	ldr	r3, [pc, #268]	; (8101424 <ConfigGPS+0x1a8>)
 8101316:	f107 0430 	add.w	r4, r7, #48	; 0x30
 810131a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810131c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101324:	2210      	movs	r2, #16
 8101326:	4619      	mov	r1, r3
 8101328:	483a      	ldr	r0, [pc, #232]	; (8101414 <ConfigGPS+0x198>)
 810132a:	f005 fd3b 	bl	8106da4 <HAL_UART_Transmit_DMA>
 810132e:	4603      	mov	r3, r0
 8101330:	2b00      	cmp	r3, #0
 8101332:	d105      	bne.n	8101340 <ConfigGPS+0xc4>
	    {
	  	  LED3_ON();
 8101334:	2201      	movs	r2, #1
 8101336:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810133a:	4837      	ldr	r0, [pc, #220]	; (8101418 <ConfigGPS+0x19c>)
 810133c:	f003 fbf0 	bl	8104b20 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101340:	2064      	movs	r0, #100	; 0x64
 8101342:	f000 fe0d 	bl	8101f60 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXGSV_OFF, sizeof(UBLOX_GXGSV_OFF)) == HAL_OK)
 8101346:	4b38      	ldr	r3, [pc, #224]	; (8101428 <ConfigGPS+0x1ac>)
 8101348:	f107 0440 	add.w	r4, r7, #64	; 0x40
 810134c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 810134e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101352:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8101356:	2210      	movs	r2, #16
 8101358:	4619      	mov	r1, r3
 810135a:	482e      	ldr	r0, [pc, #184]	; (8101414 <ConfigGPS+0x198>)
 810135c:	f005 fd22 	bl	8106da4 <HAL_UART_Transmit_DMA>
 8101360:	4603      	mov	r3, r0
 8101362:	2b00      	cmp	r3, #0
 8101364:	d105      	bne.n	8101372 <ConfigGPS+0xf6>
	    {
	  	  LED3_ON();
 8101366:	2201      	movs	r2, #1
 8101368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810136c:	482a      	ldr	r0, [pc, #168]	; (8101418 <ConfigGPS+0x19c>)
 810136e:	f003 fbd7 	bl	8104b20 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 8101372:	2064      	movs	r0, #100	; 0x64
 8101374:	f000 fdf4 	bl	8101f60 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXRMC_OFF, sizeof(UBLOX_GXRMC_OFF)) == HAL_OK)
 8101378:	4b2c      	ldr	r3, [pc, #176]	; (810142c <ConfigGPS+0x1b0>)
 810137a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 810137e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8101380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101384:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8101388:	2210      	movs	r2, #16
 810138a:	4619      	mov	r1, r3
 810138c:	4821      	ldr	r0, [pc, #132]	; (8101414 <ConfigGPS+0x198>)
 810138e:	f005 fd09 	bl	8106da4 <HAL_UART_Transmit_DMA>
 8101392:	4603      	mov	r3, r0
 8101394:	2b00      	cmp	r3, #0
 8101396:	d105      	bne.n	81013a4 <ConfigGPS+0x128>
	    {
	  	  LED3_ON();
 8101398:	2201      	movs	r2, #1
 810139a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810139e:	481e      	ldr	r0, [pc, #120]	; (8101418 <ConfigGPS+0x19c>)
 81013a0:	f003 fbbe 	bl	8104b20 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81013a4:	2064      	movs	r0, #100	; 0x64
 81013a6:	f000 fddb 	bl	8101f60 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_GXVTG_OFF, sizeof(UBLOX_GXVTG_OFF)) == HAL_OK)
 81013aa:	4b21      	ldr	r3, [pc, #132]	; (8101430 <ConfigGPS+0x1b4>)
 81013ac:	f107 0460 	add.w	r4, r7, #96	; 0x60
 81013b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81013b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81013b6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 81013ba:	2210      	movs	r2, #16
 81013bc:	4619      	mov	r1, r3
 81013be:	4815      	ldr	r0, [pc, #84]	; (8101414 <ConfigGPS+0x198>)
 81013c0:	f005 fcf0 	bl	8106da4 <HAL_UART_Transmit_DMA>
 81013c4:	4603      	mov	r3, r0
 81013c6:	2b00      	cmp	r3, #0
 81013c8:	d105      	bne.n	81013d6 <ConfigGPS+0x15a>
	    {
	  	  LED3_ON();
 81013ca:	2201      	movs	r2, #1
 81013cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81013d0:	4811      	ldr	r0, [pc, #68]	; (8101418 <ConfigGPS+0x19c>)
 81013d2:	f003 fba5 	bl	8104b20 <HAL_GPIO_WritePin>
	    }
	    HAL_Delay(100);
 81013d6:	2064      	movs	r0, #100	; 0x64
 81013d8:	f000 fdc2 	bl	8101f60 <HAL_Delay>

	    if(HAL_UART_Transmit_DMA(&huart1, (uint8_t *)UBLOX_NAVPVT_ON, sizeof(UBLOX_NAVPVT_ON)) == HAL_OK)
 81013dc:	4b15      	ldr	r3, [pc, #84]	; (8101434 <ConfigGPS+0x1b8>)
 81013de:	f107 0470 	add.w	r4, r7, #112	; 0x70
 81013e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 81013e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 81013e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 81013ec:	2210      	movs	r2, #16
 81013ee:	4619      	mov	r1, r3
 81013f0:	4808      	ldr	r0, [pc, #32]	; (8101414 <ConfigGPS+0x198>)
 81013f2:	f005 fcd7 	bl	8106da4 <HAL_UART_Transmit_DMA>
 81013f6:	4603      	mov	r3, r0
 81013f8:	2b00      	cmp	r3, #0
 81013fa:	d105      	bne.n	8101408 <ConfigGPS+0x18c>
	    {
	  	  LED3_ON();
 81013fc:	2201      	movs	r2, #1
 81013fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101402:	4805      	ldr	r0, [pc, #20]	; (8101418 <ConfigGPS+0x19c>)
 8101404:	f003 fb8c 	bl	8104b20 <HAL_GPIO_WritePin>
	    }
}
 8101408:	bf00      	nop
 810140a:	3784      	adds	r7, #132	; 0x84
 810140c:	46bd      	mov	sp, r7
 810140e:	bd90      	pop	{r4, r7, pc}
 8101410:	0810cb34 	.word	0x0810cb34
 8101414:	10004de0 	.word	0x10004de0
 8101418:	58020400 	.word	0x58020400
 810141c:	0810cb44 	.word	0x0810cb44
 8101420:	0810cb54 	.word	0x0810cb54
 8101424:	0810cb64 	.word	0x0810cb64
 8101428:	0810cb74 	.word	0x0810cb74
 810142c:	0810cb84 	.word	0x0810cb84
 8101430:	0810cb94 	.word	0x0810cb94
 8101434:	0810cba4 	.word	0x0810cba4

08101438 <ConfigPWMChannels>:

void ConfigPWMChannels(void)
{
 8101438:	b580      	push	{r7, lr}
 810143a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 810143c:	2100      	movs	r1, #0
 810143e:	4808      	ldr	r0, [pc, #32]	; (8101460 <ConfigPWMChannels+0x28>)
 8101440:	f004 fb18 	bl	8105a74 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8101444:	2104      	movs	r1, #4
 8101446:	4806      	ldr	r0, [pc, #24]	; (8101460 <ConfigPWMChannels+0x28>)
 8101448:	f004 fb14 	bl	8105a74 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 810144c:	2108      	movs	r1, #8
 810144e:	4804      	ldr	r0, [pc, #16]	; (8101460 <ConfigPWMChannels+0x28>)
 8101450:	f004 fb10 	bl	8105a74 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8101454:	210c      	movs	r1, #12
 8101456:	4802      	ldr	r0, [pc, #8]	; (8101460 <ConfigPWMChannels+0x28>)
 8101458:	f004 fb0c 	bl	8105a74 <HAL_TIM_PWM_Start>
}
 810145c:	bf00      	nop
 810145e:	bd80      	pop	{r7, pc}
 8101460:	10004c18 	.word	0x10004c18

08101464 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8101464:	b580      	push	{r7, lr}
 8101466:	b084      	sub	sp, #16
 8101468:	af00      	add	r7, sp, #0
 810146a:	6078      	str	r0, [r7, #4]
	static int byte_pos = 0;
	static unsigned char checksum[2];
	const int data_size = sizeof(pvt);
 810146c:	2360      	movs	r3, #96	; 0x60
 810146e:	60fb      	str	r3, [r7, #12]

	if(huart->Instance == USART1)
 8101470:	687b      	ldr	r3, [r7, #4]
 8101472:	681b      	ldr	r3, [r3, #0]
 8101474:	4a36      	ldr	r2, [pc, #216]	; (8101550 <HAL_UART_RxCpltCallback+0xec>)
 8101476:	4293      	cmp	r3, r2
 8101478:	d166      	bne.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
	{
		if(byte_pos < 2)
 810147a:	4b36      	ldr	r3, [pc, #216]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 810147c:	681b      	ldr	r3, [r3, #0]
 810147e:	2b01      	cmp	r3, #1
 8101480:	dc17      	bgt.n	81014b2 <HAL_UART_RxCpltCallback+0x4e>
		{
			if(data_byte[0] == UBX_HEADER[byte_pos])
 8101482:	4b35      	ldr	r3, [pc, #212]	; (8101558 <HAL_UART_RxCpltCallback+0xf4>)
 8101484:	781a      	ldrb	r2, [r3, #0]
 8101486:	4b35      	ldr	r3, [pc, #212]	; (810155c <HAL_UART_RxCpltCallback+0xf8>)
 8101488:	881b      	ldrh	r3, [r3, #0]
 810148a:	813b      	strh	r3, [r7, #8]
 810148c:	4b31      	ldr	r3, [pc, #196]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 810148e:	681b      	ldr	r3, [r3, #0]
 8101490:	f107 0110 	add.w	r1, r7, #16
 8101494:	440b      	add	r3, r1
 8101496:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 810149a:	429a      	cmp	r2, r3
 810149c:	d105      	bne.n	81014aa <HAL_UART_RxCpltCallback+0x46>
			{
				byte_pos++;
 810149e:	4b2d      	ldr	r3, [pc, #180]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014a0:	681b      	ldr	r3, [r3, #0]
 81014a2:	3301      	adds	r3, #1
 81014a4:	4a2b      	ldr	r2, [pc, #172]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014a6:	6013      	str	r3, [r2, #0]
		    	  byte_pos = 0;
		      }
		}
	}

}
 81014a8:	e04e      	b.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
				byte_pos = 0;
 81014aa:	4b2a      	ldr	r3, [pc, #168]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014ac:	2200      	movs	r2, #0
 81014ae:	601a      	str	r2, [r3, #0]
}
 81014b0:	e04a      	b.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
			if( (byte_pos-2) < data_size)
 81014b2:	4b28      	ldr	r3, [pc, #160]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014b4:	681b      	ldr	r3, [r3, #0]
 81014b6:	3b02      	subs	r3, #2
 81014b8:	68fa      	ldr	r2, [r7, #12]
 81014ba:	429a      	cmp	r2, r3
 81014bc:	dd07      	ble.n	81014ce <HAL_UART_RxCpltCallback+0x6a>
				((unsigned char*)(&pvt))[byte_pos-2] = data_byte[0];
 81014be:	4b25      	ldr	r3, [pc, #148]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014c0:	681b      	ldr	r3, [r3, #0]
 81014c2:	3b02      	subs	r3, #2
 81014c4:	4a26      	ldr	r2, [pc, #152]	; (8101560 <HAL_UART_RxCpltCallback+0xfc>)
 81014c6:	4413      	add	r3, r2
 81014c8:	4a23      	ldr	r2, [pc, #140]	; (8101558 <HAL_UART_RxCpltCallback+0xf4>)
 81014ca:	7812      	ldrb	r2, [r2, #0]
 81014cc:	701a      	strb	r2, [r3, #0]
			byte_pos++;
 81014ce:	4b21      	ldr	r3, [pc, #132]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014d0:	681b      	ldr	r3, [r3, #0]
 81014d2:	3301      	adds	r3, #1
 81014d4:	4a1f      	ldr	r2, [pc, #124]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014d6:	6013      	str	r3, [r2, #0]
			if ( byte_pos == (data_size+2) )
 81014d8:	68fb      	ldr	r3, [r7, #12]
 81014da:	1c9a      	adds	r2, r3, #2
 81014dc:	4b1d      	ldr	r3, [pc, #116]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	429a      	cmp	r2, r3
 81014e2:	d103      	bne.n	81014ec <HAL_UART_RxCpltCallback+0x88>
			        calcChecksum(checksum);
 81014e4:	481f      	ldr	r0, [pc, #124]	; (8101564 <HAL_UART_RxCpltCallback+0x100>)
 81014e6:	f000 fadf 	bl	8101aa8 <calcChecksum>
}
 81014ea:	e02d      	b.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
			else if ( byte_pos == (data_size+3) )
 81014ec:	68fb      	ldr	r3, [r7, #12]
 81014ee:	1cda      	adds	r2, r3, #3
 81014f0:	4b18      	ldr	r3, [pc, #96]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 81014f2:	681b      	ldr	r3, [r3, #0]
 81014f4:	429a      	cmp	r2, r3
 81014f6:	d109      	bne.n	810150c <HAL_UART_RxCpltCallback+0xa8>
				if ( data_byte[0] != checksum[0] )
 81014f8:	4b17      	ldr	r3, [pc, #92]	; (8101558 <HAL_UART_RxCpltCallback+0xf4>)
 81014fa:	781a      	ldrb	r2, [r3, #0]
 81014fc:	4b19      	ldr	r3, [pc, #100]	; (8101564 <HAL_UART_RxCpltCallback+0x100>)
 81014fe:	781b      	ldrb	r3, [r3, #0]
 8101500:	429a      	cmp	r2, r3
 8101502:	d021      	beq.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
					byte_pos = 0;
 8101504:	4b13      	ldr	r3, [pc, #76]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 8101506:	2200      	movs	r2, #0
 8101508:	601a      	str	r2, [r3, #0]
}
 810150a:	e01d      	b.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
		      else if ( byte_pos == (data_size+4) ) {
 810150c:	68fb      	ldr	r3, [r7, #12]
 810150e:	1d1a      	adds	r2, r3, #4
 8101510:	4b10      	ldr	r3, [pc, #64]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	429a      	cmp	r2, r3
 8101516:	d10e      	bne.n	8101536 <HAL_UART_RxCpltCallback+0xd2>
		    	  byte_pos = 0;
 8101518:	4b0e      	ldr	r3, [pc, #56]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 810151a:	2200      	movs	r2, #0
 810151c:	601a      	str	r2, [r3, #0]
		        if ( data_byte[0] == checksum[1] ) {
 810151e:	4b0e      	ldr	r3, [pc, #56]	; (8101558 <HAL_UART_RxCpltCallback+0xf4>)
 8101520:	781a      	ldrb	r2, [r3, #0]
 8101522:	4b10      	ldr	r3, [pc, #64]	; (8101564 <HAL_UART_RxCpltCallback+0x100>)
 8101524:	785b      	ldrb	r3, [r3, #1]
 8101526:	429a      	cmp	r2, r3
 8101528:	d10e      	bne.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
		        	LED2_ON();
 810152a:	2201      	movs	r2, #1
 810152c:	2102      	movs	r1, #2
 810152e:	480e      	ldr	r0, [pc, #56]	; (8101568 <HAL_UART_RxCpltCallback+0x104>)
 8101530:	f003 faf6 	bl	8104b20 <HAL_GPIO_WritePin>
}
 8101534:	e008      	b.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
		      else if ( byte_pos > (data_size+4) ) {
 8101536:	68fb      	ldr	r3, [r7, #12]
 8101538:	1d1a      	adds	r2, r3, #4
 810153a:	4b06      	ldr	r3, [pc, #24]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 810153c:	681b      	ldr	r3, [r3, #0]
 810153e:	429a      	cmp	r2, r3
 8101540:	da02      	bge.n	8101548 <HAL_UART_RxCpltCallback+0xe4>
		    	  byte_pos = 0;
 8101542:	4b04      	ldr	r3, [pc, #16]	; (8101554 <HAL_UART_RxCpltCallback+0xf0>)
 8101544:	2200      	movs	r2, #0
 8101546:	601a      	str	r2, [r3, #0]
}
 8101548:	bf00      	nop
 810154a:	3710      	adds	r7, #16
 810154c:	46bd      	mov	sp, r7
 810154e:	bd80      	pop	{r7, pc}
 8101550:	40011000 	.word	0x40011000
 8101554:	10000200 	.word	0x10000200
 8101558:	100001fc 	.word	0x100001fc
 810155c:	0810cbb4 	.word	0x0810cbb4
 8101560:	10004b6c 	.word	0x10004b6c
 8101564:	10000204 	.word	0x10000204
 8101568:	58021000 	.word	0x58021000

0810156c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810156c:	b580      	push	{r7, lr}
 810156e:	b082      	sub	sp, #8
 8101570:	af00      	add	r7, sp, #0
 8101572:	6078      	str	r0, [r7, #4]
   if(huart->Instance == USART1)
 8101574:	687b      	ldr	r3, [r7, #4]
 8101576:	681b      	ldr	r3, [r3, #0]
 8101578:	4a05      	ldr	r2, [pc, #20]	; (8101590 <HAL_UART_TxCpltCallback+0x24>)
 810157a:	4293      	cmp	r3, r2
 810157c:	d104      	bne.n	8101588 <HAL_UART_TxCpltCallback+0x1c>
	 {
	   LED2_ON();
 810157e:	2201      	movs	r2, #1
 8101580:	2102      	movs	r1, #2
 8101582:	4804      	ldr	r0, [pc, #16]	; (8101594 <HAL_UART_TxCpltCallback+0x28>)
 8101584:	f003 facc 	bl	8104b20 <HAL_GPIO_WritePin>
	 }
}
 8101588:	bf00      	nop
 810158a:	3708      	adds	r7, #8
 810158c:	46bd      	mov	sp, r7
 810158e:	bd80      	pop	{r7, pc}
 8101590:	40011000 	.word	0x40011000
 8101594:	58021000 	.word	0x58021000

08101598 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8101598:	b580      	push	{r7, lr}
 810159a:	b082      	sub	sp, #8
 810159c:	af00      	add	r7, sp, #0
 810159e:	6078      	str	r0, [r7, #4]
  /* Initialization Error */
  LED1_ON();
 81015a0:	2201      	movs	r2, #1
 81015a2:	2101      	movs	r1, #1
 81015a4:	4806      	ldr	r0, [pc, #24]	; (81015c0 <HAL_UART_ErrorCallback+0x28>)
 81015a6:	f003 fabb 	bl	8104b20 <HAL_GPIO_WritePin>
  error_code = huart->ErrorCode;
 81015aa:	687b      	ldr	r3, [r7, #4]
 81015ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81015b0:	b2da      	uxtb	r2, r3
 81015b2:	4b04      	ldr	r3, [pc, #16]	; (81015c4 <HAL_UART_ErrorCallback+0x2c>)
 81015b4:	701a      	strb	r2, [r3, #0]

}
 81015b6:	bf00      	nop
 81015b8:	3708      	adds	r7, #8
 81015ba:	46bd      	mov	sp, r7
 81015bc:	bd80      	pop	{r7, pc}
 81015be:	bf00      	nop
 81015c0:	58020400 	.word	0x58020400
 81015c4:	100001fd 	.word	0x100001fd

081015c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81015c8:	b580      	push	{r7, lr}
 81015ca:	b082      	sub	sp, #8
 81015cc:	af00      	add	r7, sp, #0
 81015ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 81015d0:	687b      	ldr	r3, [r7, #4]
 81015d2:	681b      	ldr	r3, [r3, #0]
 81015d4:	4a04      	ldr	r2, [pc, #16]	; (81015e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81015d6:	4293      	cmp	r3, r2
 81015d8:	d101      	bne.n	81015de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 81015da:	f000 fca1 	bl	8101f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 81015de:	bf00      	nop
 81015e0:	3708      	adds	r7, #8
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bd80      	pop	{r7, pc}
 81015e6:	bf00      	nop
 81015e8:	40001400 	.word	0x40001400

081015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81015ec:	b480      	push	{r7}
 81015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 81015f0:	bf00      	nop
 81015f2:	46bd      	mov	sp, r7
 81015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f8:	4770      	bx	lr
	...

081015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81015fc:	b580      	push	{r7, lr}
 81015fe:	b082      	sub	sp, #8
 8101600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101602:	4b14      	ldr	r3, [pc, #80]	; (8101654 <HAL_MspInit+0x58>)
 8101604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101608:	4a12      	ldr	r2, [pc, #72]	; (8101654 <HAL_MspInit+0x58>)
 810160a:	f043 0302 	orr.w	r3, r3, #2
 810160e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101612:	4b10      	ldr	r3, [pc, #64]	; (8101654 <HAL_MspInit+0x58>)
 8101614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101618:	f003 0302 	and.w	r3, r3, #2
 810161c:	607b      	str	r3, [r7, #4]
 810161e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8101620:	2200      	movs	r2, #0
 8101622:	210f      	movs	r1, #15
 8101624:	f06f 0001 	mvn.w	r0, #1
 8101628:	f000 fd74 	bl	8102114 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 810162c:	2200      	movs	r2, #0
 810162e:	2100      	movs	r1, #0
 8101630:	2040      	movs	r0, #64	; 0x40
 8101632:	f000 fd6f 	bl	8102114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8101636:	2040      	movs	r0, #64	; 0x40
 8101638:	f000 fd86 	bl	8102148 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 810163c:	2200      	movs	r2, #0
 810163e:	2105      	movs	r1, #5
 8101640:	207e      	movs	r0, #126	; 0x7e
 8101642:	f000 fd67 	bl	8102114 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8101646:	207e      	movs	r0, #126	; 0x7e
 8101648:	f000 fd7e 	bl	8102148 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810164c:	bf00      	nop
 810164e:	3708      	adds	r7, #8
 8101650:	46bd      	mov	sp, r7
 8101652:	bd80      	pop	{r7, pc}
 8101654:	58024400 	.word	0x58024400

08101658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101658:	b580      	push	{r7, lr}
 810165a:	b08e      	sub	sp, #56	; 0x38
 810165c:	af00      	add	r7, sp, #0
 810165e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8101660:	2300      	movs	r3, #0
 8101662:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8101664:	2300      	movs	r3, #0
 8101666:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8101668:	2200      	movs	r2, #0
 810166a:	6879      	ldr	r1, [r7, #4]
 810166c:	2037      	movs	r0, #55	; 0x37
 810166e:	f000 fd51 	bl	8102114 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8101672:	2037      	movs	r0, #55	; 0x37
 8101674:	f000 fd68 	bl	8102148 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8101678:	4b21      	ldr	r3, [pc, #132]	; (8101700 <HAL_InitTick+0xa8>)
 810167a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810167e:	4a20      	ldr	r2, [pc, #128]	; (8101700 <HAL_InitTick+0xa8>)
 8101680:	f043 0320 	orr.w	r3, r3, #32
 8101684:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101688:	4b1d      	ldr	r3, [pc, #116]	; (8101700 <HAL_InitTick+0xa8>)
 810168a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810168e:	f003 0320 	and.w	r3, r3, #32
 8101692:	60bb      	str	r3, [r7, #8]
 8101694:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101696:	f107 020c 	add.w	r2, r7, #12
 810169a:	f107 0310 	add.w	r3, r7, #16
 810169e:	4611      	mov	r1, r2
 81016a0:	4618      	mov	r0, r3
 81016a2:	f003 fe07 	bl	81052b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 81016a6:	f003 fdd9 	bl	810525c <HAL_RCC_GetPCLK1Freq>
 81016aa:	4603      	mov	r3, r0
 81016ac:	005b      	lsls	r3, r3, #1
 81016ae:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 81016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81016b2:	4a14      	ldr	r2, [pc, #80]	; (8101704 <HAL_InitTick+0xac>)
 81016b4:	fba2 2303 	umull	r2, r3, r2, r3
 81016b8:	0c9b      	lsrs	r3, r3, #18
 81016ba:	3b01      	subs	r3, #1
 81016bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 81016be:	4b12      	ldr	r3, [pc, #72]	; (8101708 <HAL_InitTick+0xb0>)
 81016c0:	4a12      	ldr	r2, [pc, #72]	; (810170c <HAL_InitTick+0xb4>)
 81016c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 81016c4:	4b10      	ldr	r3, [pc, #64]	; (8101708 <HAL_InitTick+0xb0>)
 81016c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 81016ca:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 81016cc:	4a0e      	ldr	r2, [pc, #56]	; (8101708 <HAL_InitTick+0xb0>)
 81016ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016d0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 81016d2:	4b0d      	ldr	r3, [pc, #52]	; (8101708 <HAL_InitTick+0xb0>)
 81016d4:	2200      	movs	r2, #0
 81016d6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 81016d8:	4b0b      	ldr	r3, [pc, #44]	; (8101708 <HAL_InitTick+0xb0>)
 81016da:	2200      	movs	r2, #0
 81016dc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 81016de:	480a      	ldr	r0, [pc, #40]	; (8101708 <HAL_InitTick+0xb0>)
 81016e0:	f004 f8d8 	bl	8105894 <HAL_TIM_Base_Init>
 81016e4:	4603      	mov	r3, r0
 81016e6:	2b00      	cmp	r3, #0
 81016e8:	d104      	bne.n	81016f4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 81016ea:	4807      	ldr	r0, [pc, #28]	; (8101708 <HAL_InitTick+0xb0>)
 81016ec:	f004 f92a 	bl	8105944 <HAL_TIM_Base_Start_IT>
 81016f0:	4603      	mov	r3, r0
 81016f2:	e000      	b.n	81016f6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 81016f4:	2301      	movs	r3, #1
}
 81016f6:	4618      	mov	r0, r3
 81016f8:	3738      	adds	r7, #56	; 0x38
 81016fa:	46bd      	mov	sp, r7
 81016fc:	bd80      	pop	{r7, pc}
 81016fe:	bf00      	nop
 8101700:	58024400 	.word	0x58024400
 8101704:	431bde83 	.word	0x431bde83
 8101708:	10004bcc 	.word	0x10004bcc
 810170c:	40001400 	.word	0x40001400

08101710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101710:	b480      	push	{r7}
 8101712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8101714:	bf00      	nop
 8101716:	46bd      	mov	sp, r7
 8101718:	f85d 7b04 	ldr.w	r7, [sp], #4
 810171c:	4770      	bx	lr

0810171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810171e:	b480      	push	{r7}
 8101720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101722:	e7fe      	b.n	8101722 <HardFault_Handler+0x4>

08101724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101724:	b480      	push	{r7}
 8101726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101728:	e7fe      	b.n	8101728 <MemManage_Handler+0x4>

0810172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810172a:	b480      	push	{r7}
 810172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810172e:	e7fe      	b.n	810172e <BusFault_Handler+0x4>

08101730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101730:	b480      	push	{r7}
 8101732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101734:	e7fe      	b.n	8101734 <UsageFault_Handler+0x4>

08101736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101736:	b480      	push	{r7}
 8101738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810173a:	bf00      	nop
 810173c:	46bd      	mov	sp, r7
 810173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101742:	4770      	bx	lr

08101744 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8101744:	b580      	push	{r7, lr}
 8101746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8101748:	4802      	ldr	r0, [pc, #8]	; (8101754 <DMA1_Stream0_IRQHandler+0x10>)
 810174a:	f001 fd27 	bl	810319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 810174e:	bf00      	nop
 8101750:	bd80      	pop	{r7, pc}
 8101752:	bf00      	nop
 8101754:	10004d68 	.word	0x10004d68

08101758 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8101758:	b580      	push	{r7, lr}
 810175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 810175c:	4802      	ldr	r0, [pc, #8]	; (8101768 <DMA1_Stream1_IRQHandler+0x10>)
 810175e:	f001 fd1d 	bl	810319c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8101762:	bf00      	nop
 8101764:	bd80      	pop	{r7, pc}
 8101766:	bf00      	nop
 8101768:	10004cf0 	.word	0x10004cf0

0810176c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 810176c:	b580      	push	{r7, lr}
 810176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8101770:	4802      	ldr	r0, [pc, #8]	; (810177c <USART1_IRQHandler+0x10>)
 8101772:	f005 fc1f 	bl	8106fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8101776:	bf00      	nop
 8101778:	bd80      	pop	{r7, pc}
 810177a:	bf00      	nop
 810177c:	10004de0 	.word	0x10004de0

08101780 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8101780:	b480      	push	{r7}
 8101782:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8101784:	bf00      	nop
 8101786:	46bd      	mov	sp, r7
 8101788:	f85d 7b04 	ldr.w	r7, [sp], #4
 810178c:	4770      	bx	lr

0810178e <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 810178e:	b580      	push	{r7, lr}
 8101790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8101792:	f003 f9f1 	bl	8104b78 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8101796:	bf00      	nop
 8101798:	bd80      	pop	{r7, pc}
	...

0810179c <TIM7_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 810179c:	b580      	push	{r7, lr}
 810179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 81017a0:	4802      	ldr	r0, [pc, #8]	; (81017ac <TIM7_IRQHandler+0x10>)
 81017a2:	f004 fa39 	bl	8105c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 81017a6:	bf00      	nop
 81017a8:	bd80      	pop	{r7, pc}
 81017aa:	bf00      	nop
 81017ac:	10004bcc 	.word	0x10004bcc

081017b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 81017b0:	b580      	push	{r7, lr}
 81017b2:	b084      	sub	sp, #16
 81017b4:	af00      	add	r7, sp, #0
 81017b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 81017b8:	4b11      	ldr	r3, [pc, #68]	; (8101800 <_sbrk+0x50>)
 81017ba:	681b      	ldr	r3, [r3, #0]
 81017bc:	2b00      	cmp	r3, #0
 81017be:	d102      	bne.n	81017c6 <_sbrk+0x16>
		heap_end = &end;
 81017c0:	4b0f      	ldr	r3, [pc, #60]	; (8101800 <_sbrk+0x50>)
 81017c2:	4a10      	ldr	r2, [pc, #64]	; (8101804 <_sbrk+0x54>)
 81017c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 81017c6:	4b0e      	ldr	r3, [pc, #56]	; (8101800 <_sbrk+0x50>)
 81017c8:	681b      	ldr	r3, [r3, #0]
 81017ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 81017cc:	4b0c      	ldr	r3, [pc, #48]	; (8101800 <_sbrk+0x50>)
 81017ce:	681a      	ldr	r2, [r3, #0]
 81017d0:	687b      	ldr	r3, [r7, #4]
 81017d2:	4413      	add	r3, r2
 81017d4:	466a      	mov	r2, sp
 81017d6:	4293      	cmp	r3, r2
 81017d8:	d907      	bls.n	81017ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 81017da:	f009 fc41 	bl	810b060 <__errno>
 81017de:	4602      	mov	r2, r0
 81017e0:	230c      	movs	r3, #12
 81017e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 81017e4:	f04f 33ff 	mov.w	r3, #4294967295
 81017e8:	e006      	b.n	81017f8 <_sbrk+0x48>
	}

	heap_end += incr;
 81017ea:	4b05      	ldr	r3, [pc, #20]	; (8101800 <_sbrk+0x50>)
 81017ec:	681a      	ldr	r2, [r3, #0]
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	4413      	add	r3, r2
 81017f2:	4a03      	ldr	r2, [pc, #12]	; (8101800 <_sbrk+0x50>)
 81017f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 81017f6:	68fb      	ldr	r3, [r7, #12]
}
 81017f8:	4618      	mov	r0, r3
 81017fa:	3710      	adds	r7, #16
 81017fc:	46bd      	mov	sp, r7
 81017fe:	bd80      	pop	{r7, pc}
 8101800:	10000208 	.word	0x10000208
 8101804:	10004eb8 	.word	0x10004eb8

08101808 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8101808:	b580      	push	{r7, lr}
 810180a:	b09a      	sub	sp, #104	; 0x68
 810180c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810180e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101812:	2200      	movs	r2, #0
 8101814:	601a      	str	r2, [r3, #0]
 8101816:	605a      	str	r2, [r3, #4]
 8101818:	609a      	str	r2, [r3, #8]
 810181a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810181c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101820:	2200      	movs	r2, #0
 8101822:	601a      	str	r2, [r3, #0]
 8101824:	605a      	str	r2, [r3, #4]
 8101826:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810182c:	2200      	movs	r2, #0
 810182e:	601a      	str	r2, [r3, #0]
 8101830:	605a      	str	r2, [r3, #4]
 8101832:	609a      	str	r2, [r3, #8]
 8101834:	60da      	str	r2, [r3, #12]
 8101836:	611a      	str	r2, [r3, #16]
 8101838:	615a      	str	r2, [r3, #20]
 810183a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 810183c:	1d3b      	adds	r3, r7, #4
 810183e:	222c      	movs	r2, #44	; 0x2c
 8101840:	2100      	movs	r1, #0
 8101842:	4618      	mov	r0, r3
 8101844:	f009 fc41 	bl	810b0ca <memset>

  htim1.Instance = TIM1;
 8101848:	4b55      	ldr	r3, [pc, #340]	; (81019a0 <MX_TIM1_Init+0x198>)
 810184a:	4a56      	ldr	r2, [pc, #344]	; (81019a4 <MX_TIM1_Init+0x19c>)
 810184c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 810184e:	4b54      	ldr	r3, [pc, #336]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101850:	2236      	movs	r2, #54	; 0x36
 8101852:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101854:	4b52      	ldr	r3, [pc, #328]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101856:	2200      	movs	r2, #0
 8101858:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000;
 810185a:	4b51      	ldr	r3, [pc, #324]	; (81019a0 <MX_TIM1_Init+0x198>)
 810185c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8101860:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101862:	4b4f      	ldr	r3, [pc, #316]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101864:	2200      	movs	r2, #0
 8101866:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101868:	4b4d      	ldr	r3, [pc, #308]	; (81019a0 <MX_TIM1_Init+0x198>)
 810186a:	2200      	movs	r2, #0
 810186c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810186e:	4b4c      	ldr	r3, [pc, #304]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101870:	2200      	movs	r2, #0
 8101872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101874:	484a      	ldr	r0, [pc, #296]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101876:	f004 f80d 	bl	8105894 <HAL_TIM_Base_Init>
 810187a:	4603      	mov	r3, r0
 810187c:	2b00      	cmp	r3, #0
 810187e:	d001      	beq.n	8101884 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101880:	f7ff feb4 	bl	81015ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101888:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 810188a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 810188e:	4619      	mov	r1, r3
 8101890:	4843      	ldr	r0, [pc, #268]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101892:	f004 fbf1 	bl	8106078 <HAL_TIM_ConfigClockSource>
 8101896:	4603      	mov	r3, r0
 8101898:	2b00      	cmp	r3, #0
 810189a:	d001      	beq.n	81018a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 810189c:	f7ff fea6 	bl	81015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81018a0:	483f      	ldr	r0, [pc, #252]	; (81019a0 <MX_TIM1_Init+0x198>)
 81018a2:	f004 f885 	bl	81059b0 <HAL_TIM_PWM_Init>
 81018a6:	4603      	mov	r3, r0
 81018a8:	2b00      	cmp	r3, #0
 81018aa:	d001      	beq.n	81018b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 81018ac:	f7ff fe9e 	bl	81015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81018b0:	2300      	movs	r3, #0
 81018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81018b4:	2300      	movs	r3, #0
 81018b6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81018b8:	2300      	movs	r3, #0
 81018ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81018bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81018c0:	4619      	mov	r1, r3
 81018c2:	4837      	ldr	r0, [pc, #220]	; (81019a0 <MX_TIM1_Init+0x198>)
 81018c4:	f005 f8fa 	bl	8106abc <HAL_TIMEx_MasterConfigSynchronization>
 81018c8:	4603      	mov	r3, r0
 81018ca:	2b00      	cmp	r3, #0
 81018cc:	d001      	beq.n	81018d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 81018ce:	f7ff fe8d 	bl	81015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 81018d2:	2360      	movs	r3, #96	; 0x60
 81018d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 50;
 81018d6:	2332      	movs	r3, #50	; 0x32
 81018d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 81018da:	2300      	movs	r3, #0
 81018dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 81018de:	2300      	movs	r3, #0
 81018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 81018e2:	2300      	movs	r3, #0
 81018e4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 81018e6:	2300      	movs	r3, #0
 81018e8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 81018ea:	2300      	movs	r3, #0
 81018ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 81018ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81018f2:	2200      	movs	r2, #0
 81018f4:	4619      	mov	r1, r3
 81018f6:	482a      	ldr	r0, [pc, #168]	; (81019a0 <MX_TIM1_Init+0x198>)
 81018f8:	f004 faae 	bl	8105e58 <HAL_TIM_PWM_ConfigChannel>
 81018fc:	4603      	mov	r3, r0
 81018fe:	2b00      	cmp	r3, #0
 8101900:	d001      	beq.n	8101906 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8101902:	f7ff fe73 	bl	81015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101906:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810190a:	2204      	movs	r2, #4
 810190c:	4619      	mov	r1, r3
 810190e:	4824      	ldr	r0, [pc, #144]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101910:	f004 faa2 	bl	8105e58 <HAL_TIM_PWM_ConfigChannel>
 8101914:	4603      	mov	r3, r0
 8101916:	2b00      	cmp	r3, #0
 8101918:	d001      	beq.n	810191e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 810191a:	f7ff fe67 	bl	81015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 810191e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101922:	2208      	movs	r2, #8
 8101924:	4619      	mov	r1, r3
 8101926:	481e      	ldr	r0, [pc, #120]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101928:	f004 fa96 	bl	8105e58 <HAL_TIM_PWM_ConfigChannel>
 810192c:	4603      	mov	r3, r0
 810192e:	2b00      	cmp	r3, #0
 8101930:	d001      	beq.n	8101936 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8101932:	f7ff fe5b 	bl	81015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8101936:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810193a:	220c      	movs	r2, #12
 810193c:	4619      	mov	r1, r3
 810193e:	4818      	ldr	r0, [pc, #96]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101940:	f004 fa8a 	bl	8105e58 <HAL_TIM_PWM_ConfigChannel>
 8101944:	4603      	mov	r3, r0
 8101946:	2b00      	cmp	r3, #0
 8101948:	d001      	beq.n	810194e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 810194a:	f7ff fe4f 	bl	81015ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810194e:	2300      	movs	r3, #0
 8101950:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101952:	2300      	movs	r3, #0
 8101954:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101956:	2300      	movs	r3, #0
 8101958:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810195a:	2300      	movs	r3, #0
 810195c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810195e:	2300      	movs	r3, #0
 8101960:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101966:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101968:	2300      	movs	r3, #0
 810196a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810196c:	2300      	movs	r3, #0
 810196e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8101974:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101976:	2300      	movs	r3, #0
 8101978:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810197a:	2300      	movs	r3, #0
 810197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 810197e:	1d3b      	adds	r3, r7, #4
 8101980:	4619      	mov	r1, r3
 8101982:	4807      	ldr	r0, [pc, #28]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101984:	f005 f922 	bl	8106bcc <HAL_TIMEx_ConfigBreakDeadTime>
 8101988:	4603      	mov	r3, r0
 810198a:	2b00      	cmp	r3, #0
 810198c:	d001      	beq.n	8101992 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 810198e:	f7ff fe2d 	bl	81015ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8101992:	4803      	ldr	r0, [pc, #12]	; (81019a0 <MX_TIM1_Init+0x198>)
 8101994:	f000 f82a 	bl	81019ec <HAL_TIM_MspPostInit>

}
 8101998:	bf00      	nop
 810199a:	3768      	adds	r7, #104	; 0x68
 810199c:	46bd      	mov	sp, r7
 810199e:	bd80      	pop	{r7, pc}
 81019a0:	10004c18 	.word	0x10004c18
 81019a4:	40010000 	.word	0x40010000

081019a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 81019a8:	b480      	push	{r7}
 81019aa:	b085      	sub	sp, #20
 81019ac:	af00      	add	r7, sp, #0
 81019ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 81019b0:	687b      	ldr	r3, [r7, #4]
 81019b2:	681b      	ldr	r3, [r3, #0]
 81019b4:	4a0b      	ldr	r2, [pc, #44]	; (81019e4 <HAL_TIM_Base_MspInit+0x3c>)
 81019b6:	4293      	cmp	r3, r2
 81019b8:	d10e      	bne.n	81019d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81019ba:	4b0b      	ldr	r3, [pc, #44]	; (81019e8 <HAL_TIM_Base_MspInit+0x40>)
 81019bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019c0:	4a09      	ldr	r2, [pc, #36]	; (81019e8 <HAL_TIM_Base_MspInit+0x40>)
 81019c2:	f043 0301 	orr.w	r3, r3, #1
 81019c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81019ca:	4b07      	ldr	r3, [pc, #28]	; (81019e8 <HAL_TIM_Base_MspInit+0x40>)
 81019cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81019d0:	f003 0301 	and.w	r3, r3, #1
 81019d4:	60fb      	str	r3, [r7, #12]
 81019d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 81019d8:	bf00      	nop
 81019da:	3714      	adds	r7, #20
 81019dc:	46bd      	mov	sp, r7
 81019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e2:	4770      	bx	lr
 81019e4:	40010000 	.word	0x40010000
 81019e8:	58024400 	.word	0x58024400

081019ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 81019ec:	b580      	push	{r7, lr}
 81019ee:	b08a      	sub	sp, #40	; 0x28
 81019f0:	af00      	add	r7, sp, #0
 81019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019f4:	f107 0314 	add.w	r3, r7, #20
 81019f8:	2200      	movs	r2, #0
 81019fa:	601a      	str	r2, [r3, #0]
 81019fc:	605a      	str	r2, [r3, #4]
 81019fe:	609a      	str	r2, [r3, #8]
 8101a00:	60da      	str	r2, [r3, #12]
 8101a02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8101a04:	687b      	ldr	r3, [r7, #4]
 8101a06:	681b      	ldr	r3, [r3, #0]
 8101a08:	4a23      	ldr	r2, [pc, #140]	; (8101a98 <HAL_TIM_MspPostInit+0xac>)
 8101a0a:	4293      	cmp	r3, r2
 8101a0c:	d13f      	bne.n	8101a8e <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101a0e:	4b23      	ldr	r3, [pc, #140]	; (8101a9c <HAL_TIM_MspPostInit+0xb0>)
 8101a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a14:	4a21      	ldr	r2, [pc, #132]	; (8101a9c <HAL_TIM_MspPostInit+0xb0>)
 8101a16:	f043 0310 	orr.w	r3, r3, #16
 8101a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a1e:	4b1f      	ldr	r3, [pc, #124]	; (8101a9c <HAL_TIM_MspPostInit+0xb0>)
 8101a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a24:	f003 0310 	and.w	r3, r3, #16
 8101a28:	613b      	str	r3, [r7, #16]
 8101a2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a2c:	4b1b      	ldr	r3, [pc, #108]	; (8101a9c <HAL_TIM_MspPostInit+0xb0>)
 8101a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a32:	4a1a      	ldr	r2, [pc, #104]	; (8101a9c <HAL_TIM_MspPostInit+0xb0>)
 8101a34:	f043 0301 	orr.w	r3, r3, #1
 8101a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a3c:	4b17      	ldr	r3, [pc, #92]	; (8101a9c <HAL_TIM_MspPostInit+0xb0>)
 8101a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a42:	f003 0301 	and.w	r3, r3, #1
 8101a46:	60fb      	str	r3, [r7, #12]
 8101a48:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8101a4a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8101a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a50:	2302      	movs	r3, #2
 8101a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a54:	2300      	movs	r3, #0
 8101a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a58:	2300      	movs	r3, #0
 8101a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101a5c:	2301      	movs	r3, #1
 8101a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101a60:	f107 0314 	add.w	r3, r7, #20
 8101a64:	4619      	mov	r1, r3
 8101a66:	480e      	ldr	r0, [pc, #56]	; (8101aa0 <HAL_TIM_MspPostInit+0xb4>)
 8101a68:	f002 feaa 	bl	81047c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8101a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a72:	2302      	movs	r3, #2
 8101a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a76:	2300      	movs	r3, #0
 8101a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a7a:	2300      	movs	r3, #0
 8101a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8101a7e:	2301      	movs	r3, #1
 8101a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101a82:	f107 0314 	add.w	r3, r7, #20
 8101a86:	4619      	mov	r1, r3
 8101a88:	4806      	ldr	r0, [pc, #24]	; (8101aa4 <HAL_TIM_MspPostInit+0xb8>)
 8101a8a:	f002 fe99 	bl	81047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8101a8e:	bf00      	nop
 8101a90:	3728      	adds	r7, #40	; 0x28
 8101a92:	46bd      	mov	sp, r7
 8101a94:	bd80      	pop	{r7, pc}
 8101a96:	bf00      	nop
 8101a98:	40010000 	.word	0x40010000
 8101a9c:	58024400 	.word	0x58024400
 8101aa0:	58021000 	.word	0x58021000
 8101aa4:	58020000 	.word	0x58020000

08101aa8 <calcChecksum>:

GPS gps;
struct NAV_PVT pvt;

void calcChecksum(unsigned char* CK)
{
 8101aa8:	b580      	push	{r7, lr}
 8101aaa:	b084      	sub	sp, #16
 8101aac:	af00      	add	r7, sp, #0
 8101aae:	6078      	str	r0, [r7, #4]
	memset(CK, 0, 2);
 8101ab0:	2202      	movs	r2, #2
 8101ab2:	2100      	movs	r1, #0
 8101ab4:	6878      	ldr	r0, [r7, #4]
 8101ab6:	f009 fb08 	bl	810b0ca <memset>
	for (int i = 0; i < (int)sizeof(pvt); i++)
 8101aba:	2300      	movs	r3, #0
 8101abc:	60fb      	str	r3, [r7, #12]
 8101abe:	e016      	b.n	8101aee <calcChecksum+0x46>
	{
		CK[0] = CK[0] + ((unsigned char*)(&pvt))[i];
 8101ac0:	687b      	ldr	r3, [r7, #4]
 8101ac2:	781a      	ldrb	r2, [r3, #0]
 8101ac4:	68fb      	ldr	r3, [r7, #12]
 8101ac6:	490d      	ldr	r1, [pc, #52]	; (8101afc <calcChecksum+0x54>)
 8101ac8:	440b      	add	r3, r1
 8101aca:	781b      	ldrb	r3, [r3, #0]
 8101acc:	4413      	add	r3, r2
 8101ace:	b2da      	uxtb	r2, r3
 8101ad0:	687b      	ldr	r3, [r7, #4]
 8101ad2:	701a      	strb	r2, [r3, #0]
		CK[1] = CK[1] + CK[0];
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	3301      	adds	r3, #1
 8101ad8:	7819      	ldrb	r1, [r3, #0]
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	781a      	ldrb	r2, [r3, #0]
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	3301      	adds	r3, #1
 8101ae2:	440a      	add	r2, r1
 8101ae4:	b2d2      	uxtb	r2, r2
 8101ae6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < (int)sizeof(pvt); i++)
 8101ae8:	68fb      	ldr	r3, [r7, #12]
 8101aea:	3301      	adds	r3, #1
 8101aec:	60fb      	str	r3, [r7, #12]
 8101aee:	68fb      	ldr	r3, [r7, #12]
 8101af0:	2b5f      	cmp	r3, #95	; 0x5f
 8101af2:	dde5      	ble.n	8101ac0 <calcChecksum+0x18>
	}

}
 8101af4:	bf00      	nop
 8101af6:	3710      	adds	r7, #16
 8101af8:	46bd      	mov	sp, r7
 8101afa:	bd80      	pop	{r7, pc}
 8101afc:	10004b6c 	.word	0x10004b6c

08101b00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8101b00:	b580      	push	{r7, lr}
 8101b02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8101b04:	4b22      	ldr	r3, [pc, #136]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b06:	4a23      	ldr	r2, [pc, #140]	; (8101b94 <MX_USART1_UART_Init+0x94>)
 8101b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8101b0a:	4b21      	ldr	r3, [pc, #132]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8101b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8101b12:	4b1f      	ldr	r3, [pc, #124]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b14:	2200      	movs	r2, #0
 8101b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8101b18:	4b1d      	ldr	r3, [pc, #116]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b1a:	2200      	movs	r2, #0
 8101b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8101b1e:	4b1c      	ldr	r3, [pc, #112]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b20:	2200      	movs	r2, #0
 8101b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8101b24:	4b1a      	ldr	r3, [pc, #104]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b26:	220c      	movs	r2, #12
 8101b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101b2a:	4b19      	ldr	r3, [pc, #100]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b2c:	2200      	movs	r2, #0
 8101b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8101b30:	4b17      	ldr	r3, [pc, #92]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b32:	2200      	movs	r2, #0
 8101b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101b36:	4b16      	ldr	r3, [pc, #88]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b38:	2200      	movs	r2, #0
 8101b3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101b3c:	4b14      	ldr	r3, [pc, #80]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b3e:	2200      	movs	r2, #0
 8101b40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101b42:	4b13      	ldr	r3, [pc, #76]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b44:	2200      	movs	r2, #0
 8101b46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8101b48:	4811      	ldr	r0, [pc, #68]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b4a:	f005 f8db 	bl	8106d04 <HAL_UART_Init>
 8101b4e:	4603      	mov	r3, r0
 8101b50:	2b00      	cmp	r3, #0
 8101b52:	d001      	beq.n	8101b58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8101b54:	f7ff fd4a 	bl	81015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b58:	2100      	movs	r1, #0
 8101b5a:	480d      	ldr	r0, [pc, #52]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b5c:	f006 fc57 	bl	810840e <HAL_UARTEx_SetTxFifoThreshold>
 8101b60:	4603      	mov	r3, r0
 8101b62:	2b00      	cmp	r3, #0
 8101b64:	d001      	beq.n	8101b6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8101b66:	f7ff fd41 	bl	81015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b6a:	2100      	movs	r1, #0
 8101b6c:	4808      	ldr	r0, [pc, #32]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b6e:	f006 fc8c 	bl	810848a <HAL_UARTEx_SetRxFifoThreshold>
 8101b72:	4603      	mov	r3, r0
 8101b74:	2b00      	cmp	r3, #0
 8101b76:	d001      	beq.n	8101b7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8101b78:	f7ff fd38 	bl	81015ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8101b7c:	4804      	ldr	r0, [pc, #16]	; (8101b90 <MX_USART1_UART_Init+0x90>)
 8101b7e:	f006 fc0d 	bl	810839c <HAL_UARTEx_DisableFifoMode>
 8101b82:	4603      	mov	r3, r0
 8101b84:	2b00      	cmp	r3, #0
 8101b86:	d001      	beq.n	8101b8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8101b88:	f7ff fd30 	bl	81015ec <Error_Handler>
  }

}
 8101b8c:	bf00      	nop
 8101b8e:	bd80      	pop	{r7, pc}
 8101b90:	10004de0 	.word	0x10004de0
 8101b94:	40011000 	.word	0x40011000

08101b98 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8101b98:	b580      	push	{r7, lr}
 8101b9a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8101b9c:	4b22      	ldr	r3, [pc, #136]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101b9e:	4a23      	ldr	r2, [pc, #140]	; (8101c2c <MX_USART3_UART_Init+0x94>)
 8101ba0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101ba2:	4b21      	ldr	r3, [pc, #132]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101ba4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101ba8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101baa:	4b1f      	ldr	r3, [pc, #124]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bac:	2200      	movs	r2, #0
 8101bae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101bb0:	4b1d      	ldr	r3, [pc, #116]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bb2:	2200      	movs	r2, #0
 8101bb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101bb6:	4b1c      	ldr	r3, [pc, #112]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bb8:	2200      	movs	r2, #0
 8101bba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101bbc:	4b1a      	ldr	r3, [pc, #104]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bbe:	220c      	movs	r2, #12
 8101bc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101bc2:	4b19      	ldr	r3, [pc, #100]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bc4:	2200      	movs	r2, #0
 8101bc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101bc8:	4b17      	ldr	r3, [pc, #92]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bca:	2200      	movs	r2, #0
 8101bcc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101bce:	4b16      	ldr	r3, [pc, #88]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bd0:	2200      	movs	r2, #0
 8101bd2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101bd4:	4b14      	ldr	r3, [pc, #80]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bd6:	2200      	movs	r2, #0
 8101bd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101bda:	4b13      	ldr	r3, [pc, #76]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bdc:	2200      	movs	r2, #0
 8101bde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101be0:	4811      	ldr	r0, [pc, #68]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101be2:	f005 f88f 	bl	8106d04 <HAL_UART_Init>
 8101be6:	4603      	mov	r3, r0
 8101be8:	2b00      	cmp	r3, #0
 8101bea:	d001      	beq.n	8101bf0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101bec:	f7ff fcfe 	bl	81015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101bf0:	2100      	movs	r1, #0
 8101bf2:	480d      	ldr	r0, [pc, #52]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101bf4:	f006 fc0b 	bl	810840e <HAL_UARTEx_SetTxFifoThreshold>
 8101bf8:	4603      	mov	r3, r0
 8101bfa:	2b00      	cmp	r3, #0
 8101bfc:	d001      	beq.n	8101c02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101bfe:	f7ff fcf5 	bl	81015ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101c02:	2100      	movs	r1, #0
 8101c04:	4808      	ldr	r0, [pc, #32]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101c06:	f006 fc40 	bl	810848a <HAL_UARTEx_SetRxFifoThreshold>
 8101c0a:	4603      	mov	r3, r0
 8101c0c:	2b00      	cmp	r3, #0
 8101c0e:	d001      	beq.n	8101c14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101c10:	f7ff fcec 	bl	81015ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101c14:	4804      	ldr	r0, [pc, #16]	; (8101c28 <MX_USART3_UART_Init+0x90>)
 8101c16:	f006 fbc1 	bl	810839c <HAL_UARTEx_DisableFifoMode>
 8101c1a:	4603      	mov	r3, r0
 8101c1c:	2b00      	cmp	r3, #0
 8101c1e:	d001      	beq.n	8101c24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101c20:	f7ff fce4 	bl	81015ec <Error_Handler>
  }

}
 8101c24:	bf00      	nop
 8101c26:	bd80      	pop	{r7, pc}
 8101c28:	10004c64 	.word	0x10004c64
 8101c2c:	40004800 	.word	0x40004800

08101c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101c30:	b580      	push	{r7, lr}
 8101c32:	b08c      	sub	sp, #48	; 0x30
 8101c34:	af00      	add	r7, sp, #0
 8101c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c38:	f107 031c 	add.w	r3, r7, #28
 8101c3c:	2200      	movs	r2, #0
 8101c3e:	601a      	str	r2, [r3, #0]
 8101c40:	605a      	str	r2, [r3, #4]
 8101c42:	609a      	str	r2, [r3, #8]
 8101c44:	60da      	str	r2, [r3, #12]
 8101c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	4a67      	ldr	r2, [pc, #412]	; (8101dec <HAL_UART_MspInit+0x1bc>)
 8101c4e:	4293      	cmp	r3, r2
 8101c50:	f040 8093 	bne.w	8101d7a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8101c54:	4b66      	ldr	r3, [pc, #408]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101c56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c5a:	4a65      	ldr	r2, [pc, #404]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101c5c:	f043 0310 	orr.w	r3, r3, #16
 8101c60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101c64:	4b62      	ldr	r3, [pc, #392]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c6a:	f003 0310 	and.w	r3, r3, #16
 8101c6e:	61bb      	str	r3, [r7, #24]
 8101c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c72:	4b5f      	ldr	r3, [pc, #380]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c78:	4a5d      	ldr	r2, [pc, #372]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101c7a:	f043 0302 	orr.w	r3, r3, #2
 8101c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c82:	4b5b      	ldr	r3, [pc, #364]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c88:	f003 0302 	and.w	r3, r3, #2
 8101c8c:	617b      	str	r3, [r7, #20]
 8101c8e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8101c90:	23c0      	movs	r3, #192	; 0xc0
 8101c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c94:	2302      	movs	r3, #2
 8101c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c98:	2300      	movs	r3, #0
 8101c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c9c:	2300      	movs	r3, #0
 8101c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8101ca0:	2307      	movs	r3, #7
 8101ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ca4:	f107 031c 	add.w	r3, r7, #28
 8101ca8:	4619      	mov	r1, r3
 8101caa:	4852      	ldr	r0, [pc, #328]	; (8101df4 <HAL_UART_MspInit+0x1c4>)
 8101cac:	f002 fd88 	bl	81047c0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8101cb0:	4b51      	ldr	r3, [pc, #324]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cb2:	4a52      	ldr	r2, [pc, #328]	; (8101dfc <HAL_UART_MspInit+0x1cc>)
 8101cb4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8101cb6:	4b50      	ldr	r3, [pc, #320]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cb8:	2229      	movs	r2, #41	; 0x29
 8101cba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8101cbc:	4b4e      	ldr	r3, [pc, #312]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cbe:	2200      	movs	r2, #0
 8101cc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101cc2:	4b4d      	ldr	r3, [pc, #308]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cc4:	2200      	movs	r2, #0
 8101cc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8101cc8:	4b4b      	ldr	r3, [pc, #300]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101cce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101cd0:	4b49      	ldr	r3, [pc, #292]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cd2:	2200      	movs	r2, #0
 8101cd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101cd6:	4b48      	ldr	r3, [pc, #288]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cd8:	2200      	movs	r2, #0
 8101cda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8101cdc:	4b46      	ldr	r3, [pc, #280]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101ce2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8101ce4:	4b44      	ldr	r3, [pc, #272]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8101cea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101cec:	4b42      	ldr	r3, [pc, #264]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cee:	2200      	movs	r2, #0
 8101cf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8101cf2:	4841      	ldr	r0, [pc, #260]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101cf4:	f000 fa4a 	bl	810218c <HAL_DMA_Init>
 8101cf8:	4603      	mov	r3, r0
 8101cfa:	2b00      	cmp	r3, #0
 8101cfc:	d001      	beq.n	8101d02 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8101cfe:	f7ff fc75 	bl	81015ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	4a3c      	ldr	r2, [pc, #240]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101d06:	679a      	str	r2, [r3, #120]	; 0x78
 8101d08:	4a3b      	ldr	r2, [pc, #236]	; (8101df8 <HAL_UART_MspInit+0x1c8>)
 8101d0a:	687b      	ldr	r3, [r7, #4]
 8101d0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8101d0e:	4b3c      	ldr	r3, [pc, #240]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d10:	4a3c      	ldr	r2, [pc, #240]	; (8101e04 <HAL_UART_MspInit+0x1d4>)
 8101d12:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8101d14:	4b3a      	ldr	r3, [pc, #232]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d16:	222a      	movs	r2, #42	; 0x2a
 8101d18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8101d1a:	4b39      	ldr	r3, [pc, #228]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d1c:	2240      	movs	r2, #64	; 0x40
 8101d1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8101d20:	4b37      	ldr	r3, [pc, #220]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d22:	2200      	movs	r2, #0
 8101d24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8101d26:	4b36      	ldr	r3, [pc, #216]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8101d2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8101d2e:	4b34      	ldr	r3, [pc, #208]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d30:	2200      	movs	r2, #0
 8101d32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8101d34:	4b32      	ldr	r3, [pc, #200]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d36:	2200      	movs	r2, #0
 8101d38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8101d3a:	4b31      	ldr	r3, [pc, #196]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d3c:	2200      	movs	r2, #0
 8101d3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8101d40:	4b2f      	ldr	r3, [pc, #188]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d42:	2200      	movs	r2, #0
 8101d44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8101d46:	4b2e      	ldr	r3, [pc, #184]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d48:	2200      	movs	r2, #0
 8101d4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8101d4c:	482c      	ldr	r0, [pc, #176]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d4e:	f000 fa1d 	bl	810218c <HAL_DMA_Init>
 8101d52:	4603      	mov	r3, r0
 8101d54:	2b00      	cmp	r3, #0
 8101d56:	d001      	beq.n	8101d5c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8101d58:	f7ff fc48 	bl	81015ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8101d5c:	687b      	ldr	r3, [r7, #4]
 8101d5e:	4a28      	ldr	r2, [pc, #160]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d60:	675a      	str	r2, [r3, #116]	; 0x74
 8101d62:	4a27      	ldr	r2, [pc, #156]	; (8101e00 <HAL_UART_MspInit+0x1d0>)
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8101d68:	2200      	movs	r2, #0
 8101d6a:	2100      	movs	r1, #0
 8101d6c:	2025      	movs	r0, #37	; 0x25
 8101d6e:	f000 f9d1 	bl	8102114 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8101d72:	2025      	movs	r0, #37	; 0x25
 8101d74:	f000 f9e8 	bl	8102148 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8101d78:	e033      	b.n	8101de2 <HAL_UART_MspInit+0x1b2>
  else if(uartHandle->Instance==USART3)
 8101d7a:	687b      	ldr	r3, [r7, #4]
 8101d7c:	681b      	ldr	r3, [r3, #0]
 8101d7e:	4a22      	ldr	r2, [pc, #136]	; (8101e08 <HAL_UART_MspInit+0x1d8>)
 8101d80:	4293      	cmp	r3, r2
 8101d82:	d12e      	bne.n	8101de2 <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8101d84:	4b1a      	ldr	r3, [pc, #104]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101d86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d8a:	4a19      	ldr	r2, [pc, #100]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101d90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d94:	4b16      	ldr	r3, [pc, #88]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101d9e:	613b      	str	r3, [r7, #16]
 8101da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101da2:	4b13      	ldr	r3, [pc, #76]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101da8:	4a11      	ldr	r2, [pc, #68]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101daa:	f043 0308 	orr.w	r3, r3, #8
 8101dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101db2:	4b0f      	ldr	r3, [pc, #60]	; (8101df0 <HAL_UART_MspInit+0x1c0>)
 8101db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101db8:	f003 0308 	and.w	r3, r3, #8
 8101dbc:	60fb      	str	r3, [r7, #12]
 8101dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101dc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dc6:	2302      	movs	r3, #2
 8101dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dca:	2300      	movs	r3, #0
 8101dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101dce:	2300      	movs	r3, #0
 8101dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101dd2:	2307      	movs	r3, #7
 8101dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101dd6:	f107 031c 	add.w	r3, r7, #28
 8101dda:	4619      	mov	r1, r3
 8101ddc:	480b      	ldr	r0, [pc, #44]	; (8101e0c <HAL_UART_MspInit+0x1dc>)
 8101dde:	f002 fcef 	bl	81047c0 <HAL_GPIO_Init>
}
 8101de2:	bf00      	nop
 8101de4:	3730      	adds	r7, #48	; 0x30
 8101de6:	46bd      	mov	sp, r7
 8101de8:	bd80      	pop	{r7, pc}
 8101dea:	bf00      	nop
 8101dec:	40011000 	.word	0x40011000
 8101df0:	58024400 	.word	0x58024400
 8101df4:	58020400 	.word	0x58020400
 8101df8:	10004d68 	.word	0x10004d68
 8101dfc:	40020010 	.word	0x40020010
 8101e00:	10004cf0 	.word	0x10004cf0
 8101e04:	40020028 	.word	0x40020028
 8101e08:	40004800 	.word	0x40004800
 8101e0c:	58020c00 	.word	0x58020c00

08101e10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8101e10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101e48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8101e14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8101e16:	e003      	b.n	8101e20 <LoopCopyDataInit>

08101e18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8101e18:	4b0c      	ldr	r3, [pc, #48]	; (8101e4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8101e1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8101e1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8101e1e:	3104      	adds	r1, #4

08101e20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8101e20:	480b      	ldr	r0, [pc, #44]	; (8101e50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8101e22:	4b0c      	ldr	r3, [pc, #48]	; (8101e54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8101e24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8101e26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8101e28:	d3f6      	bcc.n	8101e18 <CopyDataInit>
  ldr  r2, =_sbss
 8101e2a:	4a0b      	ldr	r2, [pc, #44]	; (8101e58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8101e2c:	e002      	b.n	8101e34 <LoopFillZerobss>

08101e2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8101e2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8101e30:	f842 3b04 	str.w	r3, [r2], #4

08101e34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8101e34:	4b09      	ldr	r3, [pc, #36]	; (8101e5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8101e36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8101e38:	d3f9      	bcc.n	8101e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8101e3a:	f7ff f86d 	bl	8100f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8101e3e:	f009 f915 	bl	810b06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101e42:	f7ff f9b5 	bl	81011b0 <main>
  bx  lr    
 8101e46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101e48:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8101e4c:	0810ce70 	.word	0x0810ce70
  ldr  r0, =_sdata
 8101e50:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8101e54:	100001e0 	.word	0x100001e0
  ldr  r2, =_sbss
 8101e58:	100001e0 	.word	0x100001e0
  ldr  r3, = _ebss
 8101e5c:	10004eb4 	.word	0x10004eb4

08101e60 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101e60:	e7fe      	b.n	8101e60 <ADC3_IRQHandler>
	...

08101e64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101e64:	b580      	push	{r7, lr}
 8101e66:	b082      	sub	sp, #8
 8101e68:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101e6a:	4b28      	ldr	r3, [pc, #160]	; (8101f0c <HAL_Init+0xa8>)
 8101e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101e70:	4a26      	ldr	r2, [pc, #152]	; (8101f0c <HAL_Init+0xa8>)
 8101e72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101e76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101e7a:	4b24      	ldr	r3, [pc, #144]	; (8101f0c <HAL_Init+0xa8>)
 8101e7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101e84:	603b      	str	r3, [r7, #0]
 8101e86:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101e88:	4b21      	ldr	r3, [pc, #132]	; (8101f10 <HAL_Init+0xac>)
 8101e8a:	681b      	ldr	r3, [r3, #0]
 8101e8c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101e90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101e94:	4a1e      	ldr	r2, [pc, #120]	; (8101f10 <HAL_Init+0xac>)
 8101e96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101e9a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101e9c:	4b1c      	ldr	r3, [pc, #112]	; (8101f10 <HAL_Init+0xac>)
 8101e9e:	681b      	ldr	r3, [r3, #0]
 8101ea0:	4a1b      	ldr	r2, [pc, #108]	; (8101f10 <HAL_Init+0xac>)
 8101ea2:	f043 0301 	orr.w	r3, r3, #1
 8101ea6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101ea8:	2003      	movs	r0, #3
 8101eaa:	f000 f928 	bl	81020fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101eae:	f003 f831 	bl	8104f14 <HAL_RCC_GetSysClockFreq>
 8101eb2:	4601      	mov	r1, r0
 8101eb4:	4b15      	ldr	r3, [pc, #84]	; (8101f0c <HAL_Init+0xa8>)
 8101eb6:	699b      	ldr	r3, [r3, #24]
 8101eb8:	0a1b      	lsrs	r3, r3, #8
 8101eba:	f003 030f 	and.w	r3, r3, #15
 8101ebe:	4a15      	ldr	r2, [pc, #84]	; (8101f14 <HAL_Init+0xb0>)
 8101ec0:	5cd3      	ldrb	r3, [r2, r3]
 8101ec2:	f003 031f 	and.w	r3, r3, #31
 8101ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8101eca:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ecc:	4b0f      	ldr	r3, [pc, #60]	; (8101f0c <HAL_Init+0xa8>)
 8101ece:	699b      	ldr	r3, [r3, #24]
 8101ed0:	f003 030f 	and.w	r3, r3, #15
 8101ed4:	4a0f      	ldr	r2, [pc, #60]	; (8101f14 <HAL_Init+0xb0>)
 8101ed6:	5cd3      	ldrb	r3, [r2, r3]
 8101ed8:	f003 031f 	and.w	r3, r3, #31
 8101edc:	687a      	ldr	r2, [r7, #4]
 8101ede:	fa22 f303 	lsr.w	r3, r2, r3
 8101ee2:	4a0d      	ldr	r2, [pc, #52]	; (8101f18 <HAL_Init+0xb4>)
 8101ee4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101ee6:	4b0c      	ldr	r3, [pc, #48]	; (8101f18 <HAL_Init+0xb4>)
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	4a0c      	ldr	r2, [pc, #48]	; (8101f1c <HAL_Init+0xb8>)
 8101eec:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101eee:	2000      	movs	r0, #0
 8101ef0:	f7ff fbb2 	bl	8101658 <HAL_InitTick>
 8101ef4:	4603      	mov	r3, r0
 8101ef6:	2b00      	cmp	r3, #0
 8101ef8:	d001      	beq.n	8101efe <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101efa:	2301      	movs	r3, #1
 8101efc:	e002      	b.n	8101f04 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101efe:	f7ff fb7d 	bl	81015fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101f02:	2300      	movs	r3, #0
}
 8101f04:	4618      	mov	r0, r3
 8101f06:	3708      	adds	r7, #8
 8101f08:	46bd      	mov	sp, r7
 8101f0a:	bd80      	pop	{r7, pc}
 8101f0c:	58024400 	.word	0x58024400
 8101f10:	40024400 	.word	0x40024400
 8101f14:	0810cbe0 	.word	0x0810cbe0
 8101f18:	10000004 	.word	0x10000004
 8101f1c:	10000000 	.word	0x10000000

08101f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101f20:	b480      	push	{r7}
 8101f22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101f24:	4b06      	ldr	r3, [pc, #24]	; (8101f40 <HAL_IncTick+0x20>)
 8101f26:	781b      	ldrb	r3, [r3, #0]
 8101f28:	461a      	mov	r2, r3
 8101f2a:	4b06      	ldr	r3, [pc, #24]	; (8101f44 <HAL_IncTick+0x24>)
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	4413      	add	r3, r2
 8101f30:	4a04      	ldr	r2, [pc, #16]	; (8101f44 <HAL_IncTick+0x24>)
 8101f32:	6013      	str	r3, [r2, #0]
}
 8101f34:	bf00      	nop
 8101f36:	46bd      	mov	sp, r7
 8101f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f3c:	4770      	bx	lr
 8101f3e:	bf00      	nop
 8101f40:	10000008 	.word	0x10000008
 8101f44:	10004e6c 	.word	0x10004e6c

08101f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101f48:	b480      	push	{r7}
 8101f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8101f4c:	4b03      	ldr	r3, [pc, #12]	; (8101f5c <HAL_GetTick+0x14>)
 8101f4e:	681b      	ldr	r3, [r3, #0]
}
 8101f50:	4618      	mov	r0, r3
 8101f52:	46bd      	mov	sp, r7
 8101f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f58:	4770      	bx	lr
 8101f5a:	bf00      	nop
 8101f5c:	10004e6c 	.word	0x10004e6c

08101f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101f60:	b580      	push	{r7, lr}
 8101f62:	b084      	sub	sp, #16
 8101f64:	af00      	add	r7, sp, #0
 8101f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101f68:	f7ff ffee 	bl	8101f48 <HAL_GetTick>
 8101f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101f72:	68fb      	ldr	r3, [r7, #12]
 8101f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101f78:	d005      	beq.n	8101f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101f7a:	4b09      	ldr	r3, [pc, #36]	; (8101fa0 <HAL_Delay+0x40>)
 8101f7c:	781b      	ldrb	r3, [r3, #0]
 8101f7e:	461a      	mov	r2, r3
 8101f80:	68fb      	ldr	r3, [r7, #12]
 8101f82:	4413      	add	r3, r2
 8101f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101f86:	bf00      	nop
 8101f88:	f7ff ffde 	bl	8101f48 <HAL_GetTick>
 8101f8c:	4602      	mov	r2, r0
 8101f8e:	68bb      	ldr	r3, [r7, #8]
 8101f90:	1ad3      	subs	r3, r2, r3
 8101f92:	68fa      	ldr	r2, [r7, #12]
 8101f94:	429a      	cmp	r2, r3
 8101f96:	d8f7      	bhi.n	8101f88 <HAL_Delay+0x28>
  {
  }
}
 8101f98:	bf00      	nop
 8101f9a:	3710      	adds	r7, #16
 8101f9c:	46bd      	mov	sp, r7
 8101f9e:	bd80      	pop	{r7, pc}
 8101fa0:	10000008 	.word	0x10000008

08101fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101fa4:	b480      	push	{r7}
 8101fa6:	b085      	sub	sp, #20
 8101fa8:	af00      	add	r7, sp, #0
 8101faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	f003 0307 	and.w	r3, r3, #7
 8101fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101fb4:	4b0c      	ldr	r3, [pc, #48]	; (8101fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8101fb6:	68db      	ldr	r3, [r3, #12]
 8101fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101fba:	68ba      	ldr	r2, [r7, #8]
 8101fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101fc0:	4013      	ands	r3, r2
 8101fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101fc4:	68fb      	ldr	r3, [r7, #12]
 8101fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101fc8:	68bb      	ldr	r3, [r7, #8]
 8101fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101fd6:	4a04      	ldr	r2, [pc, #16]	; (8101fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8101fd8:	68bb      	ldr	r3, [r7, #8]
 8101fda:	60d3      	str	r3, [r2, #12]
}
 8101fdc:	bf00      	nop
 8101fde:	3714      	adds	r7, #20
 8101fe0:	46bd      	mov	sp, r7
 8101fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe6:	4770      	bx	lr
 8101fe8:	e000ed00 	.word	0xe000ed00

08101fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101fec:	b480      	push	{r7}
 8101fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101ff0:	4b04      	ldr	r3, [pc, #16]	; (8102004 <__NVIC_GetPriorityGrouping+0x18>)
 8101ff2:	68db      	ldr	r3, [r3, #12]
 8101ff4:	0a1b      	lsrs	r3, r3, #8
 8101ff6:	f003 0307 	and.w	r3, r3, #7
}
 8101ffa:	4618      	mov	r0, r3
 8101ffc:	46bd      	mov	sp, r7
 8101ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102002:	4770      	bx	lr
 8102004:	e000ed00 	.word	0xe000ed00

08102008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102008:	b480      	push	{r7}
 810200a:	b083      	sub	sp, #12
 810200c:	af00      	add	r7, sp, #0
 810200e:	4603      	mov	r3, r0
 8102010:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102016:	2b00      	cmp	r3, #0
 8102018:	db0b      	blt.n	8102032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810201a:	88fb      	ldrh	r3, [r7, #6]
 810201c:	f003 021f 	and.w	r2, r3, #31
 8102020:	4907      	ldr	r1, [pc, #28]	; (8102040 <__NVIC_EnableIRQ+0x38>)
 8102022:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102026:	095b      	lsrs	r3, r3, #5
 8102028:	2001      	movs	r0, #1
 810202a:	fa00 f202 	lsl.w	r2, r0, r2
 810202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8102032:	bf00      	nop
 8102034:	370c      	adds	r7, #12
 8102036:	46bd      	mov	sp, r7
 8102038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810203c:	4770      	bx	lr
 810203e:	bf00      	nop
 8102040:	e000e100 	.word	0xe000e100

08102044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102044:	b480      	push	{r7}
 8102046:	b083      	sub	sp, #12
 8102048:	af00      	add	r7, sp, #0
 810204a:	4603      	mov	r3, r0
 810204c:	6039      	str	r1, [r7, #0]
 810204e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102050:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102054:	2b00      	cmp	r3, #0
 8102056:	db0a      	blt.n	810206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102058:	683b      	ldr	r3, [r7, #0]
 810205a:	b2da      	uxtb	r2, r3
 810205c:	490c      	ldr	r1, [pc, #48]	; (8102090 <__NVIC_SetPriority+0x4c>)
 810205e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102062:	0112      	lsls	r2, r2, #4
 8102064:	b2d2      	uxtb	r2, r2
 8102066:	440b      	add	r3, r1
 8102068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810206c:	e00a      	b.n	8102084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810206e:	683b      	ldr	r3, [r7, #0]
 8102070:	b2da      	uxtb	r2, r3
 8102072:	4908      	ldr	r1, [pc, #32]	; (8102094 <__NVIC_SetPriority+0x50>)
 8102074:	88fb      	ldrh	r3, [r7, #6]
 8102076:	f003 030f 	and.w	r3, r3, #15
 810207a:	3b04      	subs	r3, #4
 810207c:	0112      	lsls	r2, r2, #4
 810207e:	b2d2      	uxtb	r2, r2
 8102080:	440b      	add	r3, r1
 8102082:	761a      	strb	r2, [r3, #24]
}
 8102084:	bf00      	nop
 8102086:	370c      	adds	r7, #12
 8102088:	46bd      	mov	sp, r7
 810208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810208e:	4770      	bx	lr
 8102090:	e000e100 	.word	0xe000e100
 8102094:	e000ed00 	.word	0xe000ed00

08102098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102098:	b480      	push	{r7}
 810209a:	b089      	sub	sp, #36	; 0x24
 810209c:	af00      	add	r7, sp, #0
 810209e:	60f8      	str	r0, [r7, #12]
 81020a0:	60b9      	str	r1, [r7, #8]
 81020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81020a4:	68fb      	ldr	r3, [r7, #12]
 81020a6:	f003 0307 	and.w	r3, r3, #7
 81020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81020ac:	69fb      	ldr	r3, [r7, #28]
 81020ae:	f1c3 0307 	rsb	r3, r3, #7
 81020b2:	2b04      	cmp	r3, #4
 81020b4:	bf28      	it	cs
 81020b6:	2304      	movcs	r3, #4
 81020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81020ba:	69fb      	ldr	r3, [r7, #28]
 81020bc:	3304      	adds	r3, #4
 81020be:	2b06      	cmp	r3, #6
 81020c0:	d902      	bls.n	81020c8 <NVIC_EncodePriority+0x30>
 81020c2:	69fb      	ldr	r3, [r7, #28]
 81020c4:	3b03      	subs	r3, #3
 81020c6:	e000      	b.n	81020ca <NVIC_EncodePriority+0x32>
 81020c8:	2300      	movs	r3, #0
 81020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81020cc:	f04f 32ff 	mov.w	r2, #4294967295
 81020d0:	69bb      	ldr	r3, [r7, #24]
 81020d2:	fa02 f303 	lsl.w	r3, r2, r3
 81020d6:	43da      	mvns	r2, r3
 81020d8:	68bb      	ldr	r3, [r7, #8]
 81020da:	401a      	ands	r2, r3
 81020dc:	697b      	ldr	r3, [r7, #20]
 81020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81020e0:	f04f 31ff 	mov.w	r1, #4294967295
 81020e4:	697b      	ldr	r3, [r7, #20]
 81020e6:	fa01 f303 	lsl.w	r3, r1, r3
 81020ea:	43d9      	mvns	r1, r3
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81020f0:	4313      	orrs	r3, r2
         );
}
 81020f2:	4618      	mov	r0, r3
 81020f4:	3724      	adds	r7, #36	; 0x24
 81020f6:	46bd      	mov	sp, r7
 81020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020fc:	4770      	bx	lr

081020fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81020fe:	b580      	push	{r7, lr}
 8102100:	b082      	sub	sp, #8
 8102102:	af00      	add	r7, sp, #0
 8102104:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102106:	6878      	ldr	r0, [r7, #4]
 8102108:	f7ff ff4c 	bl	8101fa4 <__NVIC_SetPriorityGrouping>
}
 810210c:	bf00      	nop
 810210e:	3708      	adds	r7, #8
 8102110:	46bd      	mov	sp, r7
 8102112:	bd80      	pop	{r7, pc}

08102114 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102114:	b580      	push	{r7, lr}
 8102116:	b086      	sub	sp, #24
 8102118:	af00      	add	r7, sp, #0
 810211a:	4603      	mov	r3, r0
 810211c:	60b9      	str	r1, [r7, #8]
 810211e:	607a      	str	r2, [r7, #4]
 8102120:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102122:	f7ff ff63 	bl	8101fec <__NVIC_GetPriorityGrouping>
 8102126:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102128:	687a      	ldr	r2, [r7, #4]
 810212a:	68b9      	ldr	r1, [r7, #8]
 810212c:	6978      	ldr	r0, [r7, #20]
 810212e:	f7ff ffb3 	bl	8102098 <NVIC_EncodePriority>
 8102132:	4602      	mov	r2, r0
 8102134:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102138:	4611      	mov	r1, r2
 810213a:	4618      	mov	r0, r3
 810213c:	f7ff ff82 	bl	8102044 <__NVIC_SetPriority>
}
 8102140:	bf00      	nop
 8102142:	3718      	adds	r7, #24
 8102144:	46bd      	mov	sp, r7
 8102146:	bd80      	pop	{r7, pc}

08102148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102148:	b580      	push	{r7, lr}
 810214a:	b082      	sub	sp, #8
 810214c:	af00      	add	r7, sp, #0
 810214e:	4603      	mov	r3, r0
 8102150:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102156:	4618      	mov	r0, r3
 8102158:	f7ff ff56 	bl	8102008 <__NVIC_EnableIRQ>
}
 810215c:	bf00      	nop
 810215e:	3708      	adds	r7, #8
 8102160:	46bd      	mov	sp, r7
 8102162:	bd80      	pop	{r7, pc}

08102164 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102164:	b480      	push	{r7}
 8102166:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102168:	4b07      	ldr	r3, [pc, #28]	; (8102188 <HAL_GetCurrentCPUID+0x24>)
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	091b      	lsrs	r3, r3, #4
 810216e:	f003 030f 	and.w	r3, r3, #15
 8102172:	2b07      	cmp	r3, #7
 8102174:	d101      	bne.n	810217a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102176:	2303      	movs	r3, #3
 8102178:	e000      	b.n	810217c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810217a:	2301      	movs	r3, #1
  }
}
 810217c:	4618      	mov	r0, r3
 810217e:	46bd      	mov	sp, r7
 8102180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102184:	4770      	bx	lr
 8102186:	bf00      	nop
 8102188:	e000ed00 	.word	0xe000ed00

0810218c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810218c:	b580      	push	{r7, lr}
 810218e:	b086      	sub	sp, #24
 8102190:	af00      	add	r7, sp, #0
 8102192:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102194:	f7ff fed8 	bl	8101f48 <HAL_GetTick>
 8102198:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810219a:	687b      	ldr	r3, [r7, #4]
 810219c:	2b00      	cmp	r3, #0
 810219e:	d101      	bne.n	81021a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 81021a0:	2301      	movs	r3, #1
 81021a2:	e314      	b.n	81027ce <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	4a66      	ldr	r2, [pc, #408]	; (8102344 <HAL_DMA_Init+0x1b8>)
 81021aa:	4293      	cmp	r3, r2
 81021ac:	d04a      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	681b      	ldr	r3, [r3, #0]
 81021b2:	4a65      	ldr	r2, [pc, #404]	; (8102348 <HAL_DMA_Init+0x1bc>)
 81021b4:	4293      	cmp	r3, r2
 81021b6:	d045      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	681b      	ldr	r3, [r3, #0]
 81021bc:	4a63      	ldr	r2, [pc, #396]	; (810234c <HAL_DMA_Init+0x1c0>)
 81021be:	4293      	cmp	r3, r2
 81021c0:	d040      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	4a62      	ldr	r2, [pc, #392]	; (8102350 <HAL_DMA_Init+0x1c4>)
 81021c8:	4293      	cmp	r3, r2
 81021ca:	d03b      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	4a60      	ldr	r2, [pc, #384]	; (8102354 <HAL_DMA_Init+0x1c8>)
 81021d2:	4293      	cmp	r3, r2
 81021d4:	d036      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	4a5f      	ldr	r2, [pc, #380]	; (8102358 <HAL_DMA_Init+0x1cc>)
 81021dc:	4293      	cmp	r3, r2
 81021de:	d031      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	4a5d      	ldr	r2, [pc, #372]	; (810235c <HAL_DMA_Init+0x1d0>)
 81021e6:	4293      	cmp	r3, r2
 81021e8:	d02c      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	681b      	ldr	r3, [r3, #0]
 81021ee:	4a5c      	ldr	r2, [pc, #368]	; (8102360 <HAL_DMA_Init+0x1d4>)
 81021f0:	4293      	cmp	r3, r2
 81021f2:	d027      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	4a5a      	ldr	r2, [pc, #360]	; (8102364 <HAL_DMA_Init+0x1d8>)
 81021fa:	4293      	cmp	r3, r2
 81021fc:	d022      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	4a59      	ldr	r2, [pc, #356]	; (8102368 <HAL_DMA_Init+0x1dc>)
 8102204:	4293      	cmp	r3, r2
 8102206:	d01d      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 8102208:	687b      	ldr	r3, [r7, #4]
 810220a:	681b      	ldr	r3, [r3, #0]
 810220c:	4a57      	ldr	r2, [pc, #348]	; (810236c <HAL_DMA_Init+0x1e0>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d018      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	4a56      	ldr	r2, [pc, #344]	; (8102370 <HAL_DMA_Init+0x1e4>)
 8102218:	4293      	cmp	r3, r2
 810221a:	d013      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	4a54      	ldr	r2, [pc, #336]	; (8102374 <HAL_DMA_Init+0x1e8>)
 8102222:	4293      	cmp	r3, r2
 8102224:	d00e      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	4a53      	ldr	r2, [pc, #332]	; (8102378 <HAL_DMA_Init+0x1ec>)
 810222c:	4293      	cmp	r3, r2
 810222e:	d009      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	4a51      	ldr	r2, [pc, #324]	; (810237c <HAL_DMA_Init+0x1f0>)
 8102236:	4293      	cmp	r3, r2
 8102238:	d004      	beq.n	8102244 <HAL_DMA_Init+0xb8>
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	681b      	ldr	r3, [r3, #0]
 810223e:	4a50      	ldr	r2, [pc, #320]	; (8102380 <HAL_DMA_Init+0x1f4>)
 8102240:	4293      	cmp	r3, r2
 8102242:	d101      	bne.n	8102248 <HAL_DMA_Init+0xbc>
 8102244:	2301      	movs	r3, #1
 8102246:	e000      	b.n	810224a <HAL_DMA_Init+0xbe>
 8102248:	2300      	movs	r3, #0
 810224a:	2b00      	cmp	r3, #0
 810224c:	f000 813b 	beq.w	81024c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	2200      	movs	r2, #0
 8102254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	2202      	movs	r2, #2
 810225c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	681b      	ldr	r3, [r3, #0]
 8102264:	4a37      	ldr	r2, [pc, #220]	; (8102344 <HAL_DMA_Init+0x1b8>)
 8102266:	4293      	cmp	r3, r2
 8102268:	d04a      	beq.n	8102300 <HAL_DMA_Init+0x174>
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	681b      	ldr	r3, [r3, #0]
 810226e:	4a36      	ldr	r2, [pc, #216]	; (8102348 <HAL_DMA_Init+0x1bc>)
 8102270:	4293      	cmp	r3, r2
 8102272:	d045      	beq.n	8102300 <HAL_DMA_Init+0x174>
 8102274:	687b      	ldr	r3, [r7, #4]
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	4a34      	ldr	r2, [pc, #208]	; (810234c <HAL_DMA_Init+0x1c0>)
 810227a:	4293      	cmp	r3, r2
 810227c:	d040      	beq.n	8102300 <HAL_DMA_Init+0x174>
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	4a33      	ldr	r2, [pc, #204]	; (8102350 <HAL_DMA_Init+0x1c4>)
 8102284:	4293      	cmp	r3, r2
 8102286:	d03b      	beq.n	8102300 <HAL_DMA_Init+0x174>
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	681b      	ldr	r3, [r3, #0]
 810228c:	4a31      	ldr	r2, [pc, #196]	; (8102354 <HAL_DMA_Init+0x1c8>)
 810228e:	4293      	cmp	r3, r2
 8102290:	d036      	beq.n	8102300 <HAL_DMA_Init+0x174>
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	681b      	ldr	r3, [r3, #0]
 8102296:	4a30      	ldr	r2, [pc, #192]	; (8102358 <HAL_DMA_Init+0x1cc>)
 8102298:	4293      	cmp	r3, r2
 810229a:	d031      	beq.n	8102300 <HAL_DMA_Init+0x174>
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	681b      	ldr	r3, [r3, #0]
 81022a0:	4a2e      	ldr	r2, [pc, #184]	; (810235c <HAL_DMA_Init+0x1d0>)
 81022a2:	4293      	cmp	r3, r2
 81022a4:	d02c      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	4a2d      	ldr	r2, [pc, #180]	; (8102360 <HAL_DMA_Init+0x1d4>)
 81022ac:	4293      	cmp	r3, r2
 81022ae:	d027      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022b0:	687b      	ldr	r3, [r7, #4]
 81022b2:	681b      	ldr	r3, [r3, #0]
 81022b4:	4a2b      	ldr	r2, [pc, #172]	; (8102364 <HAL_DMA_Init+0x1d8>)
 81022b6:	4293      	cmp	r3, r2
 81022b8:	d022      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	4a2a      	ldr	r2, [pc, #168]	; (8102368 <HAL_DMA_Init+0x1dc>)
 81022c0:	4293      	cmp	r3, r2
 81022c2:	d01d      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	681b      	ldr	r3, [r3, #0]
 81022c8:	4a28      	ldr	r2, [pc, #160]	; (810236c <HAL_DMA_Init+0x1e0>)
 81022ca:	4293      	cmp	r3, r2
 81022cc:	d018      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022ce:	687b      	ldr	r3, [r7, #4]
 81022d0:	681b      	ldr	r3, [r3, #0]
 81022d2:	4a27      	ldr	r2, [pc, #156]	; (8102370 <HAL_DMA_Init+0x1e4>)
 81022d4:	4293      	cmp	r3, r2
 81022d6:	d013      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	681b      	ldr	r3, [r3, #0]
 81022dc:	4a25      	ldr	r2, [pc, #148]	; (8102374 <HAL_DMA_Init+0x1e8>)
 81022de:	4293      	cmp	r3, r2
 81022e0:	d00e      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022e2:	687b      	ldr	r3, [r7, #4]
 81022e4:	681b      	ldr	r3, [r3, #0]
 81022e6:	4a24      	ldr	r2, [pc, #144]	; (8102378 <HAL_DMA_Init+0x1ec>)
 81022e8:	4293      	cmp	r3, r2
 81022ea:	d009      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	4a22      	ldr	r2, [pc, #136]	; (810237c <HAL_DMA_Init+0x1f0>)
 81022f2:	4293      	cmp	r3, r2
 81022f4:	d004      	beq.n	8102300 <HAL_DMA_Init+0x174>
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	681b      	ldr	r3, [r3, #0]
 81022fa:	4a21      	ldr	r2, [pc, #132]	; (8102380 <HAL_DMA_Init+0x1f4>)
 81022fc:	4293      	cmp	r3, r2
 81022fe:	d108      	bne.n	8102312 <HAL_DMA_Init+0x186>
 8102300:	687b      	ldr	r3, [r7, #4]
 8102302:	681b      	ldr	r3, [r3, #0]
 8102304:	681a      	ldr	r2, [r3, #0]
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	f022 0201 	bic.w	r2, r2, #1
 810230e:	601a      	str	r2, [r3, #0]
 8102310:	e007      	b.n	8102322 <HAL_DMA_Init+0x196>
 8102312:	687b      	ldr	r3, [r7, #4]
 8102314:	681b      	ldr	r3, [r3, #0]
 8102316:	681a      	ldr	r2, [r3, #0]
 8102318:	687b      	ldr	r3, [r7, #4]
 810231a:	681b      	ldr	r3, [r3, #0]
 810231c:	f022 0201 	bic.w	r2, r2, #1
 8102320:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102322:	e02f      	b.n	8102384 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102324:	f7ff fe10 	bl	8101f48 <HAL_GetTick>
 8102328:	4602      	mov	r2, r0
 810232a:	693b      	ldr	r3, [r7, #16]
 810232c:	1ad3      	subs	r3, r2, r3
 810232e:	2b05      	cmp	r3, #5
 8102330:	d928      	bls.n	8102384 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102332:	687b      	ldr	r3, [r7, #4]
 8102334:	2220      	movs	r2, #32
 8102336:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102338:	687b      	ldr	r3, [r7, #4]
 810233a:	2203      	movs	r2, #3
 810233c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8102340:	2301      	movs	r3, #1
 8102342:	e244      	b.n	81027ce <HAL_DMA_Init+0x642>
 8102344:	40020010 	.word	0x40020010
 8102348:	40020028 	.word	0x40020028
 810234c:	40020040 	.word	0x40020040
 8102350:	40020058 	.word	0x40020058
 8102354:	40020070 	.word	0x40020070
 8102358:	40020088 	.word	0x40020088
 810235c:	400200a0 	.word	0x400200a0
 8102360:	400200b8 	.word	0x400200b8
 8102364:	40020410 	.word	0x40020410
 8102368:	40020428 	.word	0x40020428
 810236c:	40020440 	.word	0x40020440
 8102370:	40020458 	.word	0x40020458
 8102374:	40020470 	.word	0x40020470
 8102378:	40020488 	.word	0x40020488
 810237c:	400204a0 	.word	0x400204a0
 8102380:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	681b      	ldr	r3, [r3, #0]
 8102388:	681b      	ldr	r3, [r3, #0]
 810238a:	f003 0301 	and.w	r3, r3, #1
 810238e:	2b00      	cmp	r3, #0
 8102390:	d1c8      	bne.n	8102324 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102392:	687b      	ldr	r3, [r7, #4]
 8102394:	681b      	ldr	r3, [r3, #0]
 8102396:	681b      	ldr	r3, [r3, #0]
 8102398:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 810239a:	697a      	ldr	r2, [r7, #20]
 810239c:	4b84      	ldr	r3, [pc, #528]	; (81025b0 <HAL_DMA_Init+0x424>)
 810239e:	4013      	ands	r3, r2
 81023a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 81023aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023ac:	687b      	ldr	r3, [r7, #4]
 81023ae:	691b      	ldr	r3, [r3, #16]
 81023b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 81023b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023b8:	687b      	ldr	r3, [r7, #4]
 81023ba:	699b      	ldr	r3, [r3, #24]
 81023bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 81023c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 81023c4:	687b      	ldr	r3, [r7, #4]
 81023c6:	6a1b      	ldr	r3, [r3, #32]
 81023c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 81023ca:	697a      	ldr	r2, [r7, #20]
 81023cc:	4313      	orrs	r3, r2
 81023ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81023d4:	2b04      	cmp	r3, #4
 81023d6:	d107      	bne.n	81023e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81023e0:	4313      	orrs	r3, r2
 81023e2:	697a      	ldr	r2, [r7, #20]
 81023e4:	4313      	orrs	r3, r2
 81023e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 81023e8:	4b72      	ldr	r3, [pc, #456]	; (81025b4 <HAL_DMA_Init+0x428>)
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	0c1b      	lsrs	r3, r3, #16
 81023ee:	041b      	lsls	r3, r3, #16
 81023f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81023f4:	d328      	bcc.n	8102448 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 81023f6:	687b      	ldr	r3, [r7, #4]
 81023f8:	685b      	ldr	r3, [r3, #4]
 81023fa:	2b28      	cmp	r3, #40	; 0x28
 81023fc:	d903      	bls.n	8102406 <HAL_DMA_Init+0x27a>
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	685b      	ldr	r3, [r3, #4]
 8102402:	2b2e      	cmp	r3, #46	; 0x2e
 8102404:	d917      	bls.n	8102436 <HAL_DMA_Init+0x2aa>
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	685b      	ldr	r3, [r3, #4]
 810240a:	2b3e      	cmp	r3, #62	; 0x3e
 810240c:	d903      	bls.n	8102416 <HAL_DMA_Init+0x28a>
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	685b      	ldr	r3, [r3, #4]
 8102412:	2b42      	cmp	r3, #66	; 0x42
 8102414:	d90f      	bls.n	8102436 <HAL_DMA_Init+0x2aa>
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	685b      	ldr	r3, [r3, #4]
 810241a:	2b46      	cmp	r3, #70	; 0x46
 810241c:	d903      	bls.n	8102426 <HAL_DMA_Init+0x29a>
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	685b      	ldr	r3, [r3, #4]
 8102422:	2b48      	cmp	r3, #72	; 0x48
 8102424:	d907      	bls.n	8102436 <HAL_DMA_Init+0x2aa>
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	685b      	ldr	r3, [r3, #4]
 810242a:	2b4e      	cmp	r3, #78	; 0x4e
 810242c:	d905      	bls.n	810243a <HAL_DMA_Init+0x2ae>
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	685b      	ldr	r3, [r3, #4]
 8102432:	2b52      	cmp	r3, #82	; 0x52
 8102434:	d801      	bhi.n	810243a <HAL_DMA_Init+0x2ae>
 8102436:	2301      	movs	r3, #1
 8102438:	e000      	b.n	810243c <HAL_DMA_Init+0x2b0>
 810243a:	2300      	movs	r3, #0
 810243c:	2b00      	cmp	r3, #0
 810243e:	d003      	beq.n	8102448 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102440:	697b      	ldr	r3, [r7, #20]
 8102442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8102446:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	681b      	ldr	r3, [r3, #0]
 810244c:	697a      	ldr	r2, [r7, #20]
 810244e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	695b      	ldr	r3, [r3, #20]
 8102456:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102458:	697b      	ldr	r3, [r7, #20]
 810245a:	f023 0307 	bic.w	r3, r3, #7
 810245e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102464:	697a      	ldr	r2, [r7, #20]
 8102466:	4313      	orrs	r3, r2
 8102468:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810246e:	2b04      	cmp	r3, #4
 8102470:	d117      	bne.n	81024a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102476:	697a      	ldr	r2, [r7, #20]
 8102478:	4313      	orrs	r3, r2
 810247a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102480:	2b00      	cmp	r3, #0
 8102482:	d00e      	beq.n	81024a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102484:	6878      	ldr	r0, [r7, #4]
 8102486:	f002 f811 	bl	81044ac <DMA_CheckFifoParam>
 810248a:	4603      	mov	r3, r0
 810248c:	2b00      	cmp	r3, #0
 810248e:	d008      	beq.n	81024a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102490:	687b      	ldr	r3, [r7, #4]
 8102492:	2240      	movs	r2, #64	; 0x40
 8102494:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	2201      	movs	r2, #1
 810249a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 810249e:	2301      	movs	r3, #1
 81024a0:	e195      	b.n	81027ce <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	697a      	ldr	r2, [r7, #20]
 81024a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 81024aa:	6878      	ldr	r0, [r7, #4]
 81024ac:	f001 ff4c 	bl	8104348 <DMA_CalcBaseAndBitshift>
 81024b0:	4603      	mov	r3, r0
 81024b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81024b8:	f003 031f 	and.w	r3, r3, #31
 81024bc:	223f      	movs	r2, #63	; 0x3f
 81024be:	409a      	lsls	r2, r3
 81024c0:	68bb      	ldr	r3, [r7, #8]
 81024c2:	609a      	str	r2, [r3, #8]
 81024c4:	e0cb      	b.n	810265e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 81024c6:	687b      	ldr	r3, [r7, #4]
 81024c8:	681b      	ldr	r3, [r3, #0]
 81024ca:	4a3b      	ldr	r2, [pc, #236]	; (81025b8 <HAL_DMA_Init+0x42c>)
 81024cc:	4293      	cmp	r3, r2
 81024ce:	d022      	beq.n	8102516 <HAL_DMA_Init+0x38a>
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	681b      	ldr	r3, [r3, #0]
 81024d4:	4a39      	ldr	r2, [pc, #228]	; (81025bc <HAL_DMA_Init+0x430>)
 81024d6:	4293      	cmp	r3, r2
 81024d8:	d01d      	beq.n	8102516 <HAL_DMA_Init+0x38a>
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	681b      	ldr	r3, [r3, #0]
 81024de:	4a38      	ldr	r2, [pc, #224]	; (81025c0 <HAL_DMA_Init+0x434>)
 81024e0:	4293      	cmp	r3, r2
 81024e2:	d018      	beq.n	8102516 <HAL_DMA_Init+0x38a>
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	4a36      	ldr	r2, [pc, #216]	; (81025c4 <HAL_DMA_Init+0x438>)
 81024ea:	4293      	cmp	r3, r2
 81024ec:	d013      	beq.n	8102516 <HAL_DMA_Init+0x38a>
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	4a35      	ldr	r2, [pc, #212]	; (81025c8 <HAL_DMA_Init+0x43c>)
 81024f4:	4293      	cmp	r3, r2
 81024f6:	d00e      	beq.n	8102516 <HAL_DMA_Init+0x38a>
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	4a33      	ldr	r2, [pc, #204]	; (81025cc <HAL_DMA_Init+0x440>)
 81024fe:	4293      	cmp	r3, r2
 8102500:	d009      	beq.n	8102516 <HAL_DMA_Init+0x38a>
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	4a32      	ldr	r2, [pc, #200]	; (81025d0 <HAL_DMA_Init+0x444>)
 8102508:	4293      	cmp	r3, r2
 810250a:	d004      	beq.n	8102516 <HAL_DMA_Init+0x38a>
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	681b      	ldr	r3, [r3, #0]
 8102510:	4a30      	ldr	r2, [pc, #192]	; (81025d4 <HAL_DMA_Init+0x448>)
 8102512:	4293      	cmp	r3, r2
 8102514:	d101      	bne.n	810251a <HAL_DMA_Init+0x38e>
 8102516:	2301      	movs	r3, #1
 8102518:	e000      	b.n	810251c <HAL_DMA_Init+0x390>
 810251a:	2300      	movs	r3, #0
 810251c:	2b00      	cmp	r3, #0
 810251e:	f000 8095 	beq.w	810264c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	681b      	ldr	r3, [r3, #0]
 8102526:	4a24      	ldr	r2, [pc, #144]	; (81025b8 <HAL_DMA_Init+0x42c>)
 8102528:	4293      	cmp	r3, r2
 810252a:	d021      	beq.n	8102570 <HAL_DMA_Init+0x3e4>
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	681b      	ldr	r3, [r3, #0]
 8102530:	4a22      	ldr	r2, [pc, #136]	; (81025bc <HAL_DMA_Init+0x430>)
 8102532:	4293      	cmp	r3, r2
 8102534:	d01c      	beq.n	8102570 <HAL_DMA_Init+0x3e4>
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	4a21      	ldr	r2, [pc, #132]	; (81025c0 <HAL_DMA_Init+0x434>)
 810253c:	4293      	cmp	r3, r2
 810253e:	d017      	beq.n	8102570 <HAL_DMA_Init+0x3e4>
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	4a1f      	ldr	r2, [pc, #124]	; (81025c4 <HAL_DMA_Init+0x438>)
 8102546:	4293      	cmp	r3, r2
 8102548:	d012      	beq.n	8102570 <HAL_DMA_Init+0x3e4>
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	4a1e      	ldr	r2, [pc, #120]	; (81025c8 <HAL_DMA_Init+0x43c>)
 8102550:	4293      	cmp	r3, r2
 8102552:	d00d      	beq.n	8102570 <HAL_DMA_Init+0x3e4>
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	4a1c      	ldr	r2, [pc, #112]	; (81025cc <HAL_DMA_Init+0x440>)
 810255a:	4293      	cmp	r3, r2
 810255c:	d008      	beq.n	8102570 <HAL_DMA_Init+0x3e4>
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	4a1b      	ldr	r2, [pc, #108]	; (81025d0 <HAL_DMA_Init+0x444>)
 8102564:	4293      	cmp	r3, r2
 8102566:	d003      	beq.n	8102570 <HAL_DMA_Init+0x3e4>
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	4a19      	ldr	r2, [pc, #100]	; (81025d4 <HAL_DMA_Init+0x448>)
 810256e:	4293      	cmp	r3, r2
 8102570:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	2200      	movs	r2, #0
 8102576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	2202      	movs	r2, #2
 810257e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102582:	687b      	ldr	r3, [r7, #4]
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 810258a:	697b      	ldr	r3, [r7, #20]
 810258c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8102590:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8102594:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	689b      	ldr	r3, [r3, #8]
 810259a:	2b40      	cmp	r3, #64	; 0x40
 810259c:	d01c      	beq.n	81025d8 <HAL_DMA_Init+0x44c>
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	689b      	ldr	r3, [r3, #8]
 81025a2:	2b80      	cmp	r3, #128	; 0x80
 81025a4:	d102      	bne.n	81025ac <HAL_DMA_Init+0x420>
 81025a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81025aa:	e016      	b.n	81025da <HAL_DMA_Init+0x44e>
 81025ac:	2300      	movs	r3, #0
 81025ae:	e014      	b.n	81025da <HAL_DMA_Init+0x44e>
 81025b0:	fe10803f 	.word	0xfe10803f
 81025b4:	5c001000 	.word	0x5c001000
 81025b8:	58025408 	.word	0x58025408
 81025bc:	5802541c 	.word	0x5802541c
 81025c0:	58025430 	.word	0x58025430
 81025c4:	58025444 	.word	0x58025444
 81025c8:	58025458 	.word	0x58025458
 81025cc:	5802546c 	.word	0x5802546c
 81025d0:	58025480 	.word	0x58025480
 81025d4:	58025494 	.word	0x58025494
 81025d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81025da:	687a      	ldr	r2, [r7, #4]
 81025dc:	68d2      	ldr	r2, [r2, #12]
 81025de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 81025e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81025e2:	687b      	ldr	r3, [r7, #4]
 81025e4:	691b      	ldr	r3, [r3, #16]
 81025e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 81025e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	695b      	ldr	r3, [r3, #20]
 81025ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 81025f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	699b      	ldr	r3, [r3, #24]
 81025f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 81025f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	69db      	ldr	r3, [r3, #28]
 81025fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102600:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	6a1b      	ldr	r3, [r3, #32]
 8102606:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102608:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 810260a:	697a      	ldr	r2, [r7, #20]
 810260c:	4313      	orrs	r3, r2
 810260e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	697a      	ldr	r2, [r7, #20]
 8102616:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	461a      	mov	r2, r3
 810261e:	4b6e      	ldr	r3, [pc, #440]	; (81027d8 <HAL_DMA_Init+0x64c>)
 8102620:	4413      	add	r3, r2
 8102622:	4a6e      	ldr	r2, [pc, #440]	; (81027dc <HAL_DMA_Init+0x650>)
 8102624:	fba2 2303 	umull	r2, r3, r2, r3
 8102628:	091b      	lsrs	r3, r3, #4
 810262a:	009a      	lsls	r2, r3, #2
 810262c:	687b      	ldr	r3, [r7, #4]
 810262e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102630:	6878      	ldr	r0, [r7, #4]
 8102632:	f001 fe89 	bl	8104348 <DMA_CalcBaseAndBitshift>
 8102636:	4603      	mov	r3, r0
 8102638:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810263e:	f003 031f 	and.w	r3, r3, #31
 8102642:	2201      	movs	r2, #1
 8102644:	409a      	lsls	r2, r3
 8102646:	68fb      	ldr	r3, [r7, #12]
 8102648:	605a      	str	r2, [r3, #4]
 810264a:	e008      	b.n	810265e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 810264c:	687b      	ldr	r3, [r7, #4]
 810264e:	2240      	movs	r2, #64	; 0x40
 8102650:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	2203      	movs	r2, #3
 8102656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 810265a:	2301      	movs	r3, #1
 810265c:	e0b7      	b.n	81027ce <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	4a5f      	ldr	r2, [pc, #380]	; (81027e0 <HAL_DMA_Init+0x654>)
 8102664:	4293      	cmp	r3, r2
 8102666:	d072      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102668:	687b      	ldr	r3, [r7, #4]
 810266a:	681b      	ldr	r3, [r3, #0]
 810266c:	4a5d      	ldr	r2, [pc, #372]	; (81027e4 <HAL_DMA_Init+0x658>)
 810266e:	4293      	cmp	r3, r2
 8102670:	d06d      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	681b      	ldr	r3, [r3, #0]
 8102676:	4a5c      	ldr	r2, [pc, #368]	; (81027e8 <HAL_DMA_Init+0x65c>)
 8102678:	4293      	cmp	r3, r2
 810267a:	d068      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	681b      	ldr	r3, [r3, #0]
 8102680:	4a5a      	ldr	r2, [pc, #360]	; (81027ec <HAL_DMA_Init+0x660>)
 8102682:	4293      	cmp	r3, r2
 8102684:	d063      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	681b      	ldr	r3, [r3, #0]
 810268a:	4a59      	ldr	r2, [pc, #356]	; (81027f0 <HAL_DMA_Init+0x664>)
 810268c:	4293      	cmp	r3, r2
 810268e:	d05e      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	681b      	ldr	r3, [r3, #0]
 8102694:	4a57      	ldr	r2, [pc, #348]	; (81027f4 <HAL_DMA_Init+0x668>)
 8102696:	4293      	cmp	r3, r2
 8102698:	d059      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	681b      	ldr	r3, [r3, #0]
 810269e:	4a56      	ldr	r2, [pc, #344]	; (81027f8 <HAL_DMA_Init+0x66c>)
 81026a0:	4293      	cmp	r3, r2
 81026a2:	d054      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026a4:	687b      	ldr	r3, [r7, #4]
 81026a6:	681b      	ldr	r3, [r3, #0]
 81026a8:	4a54      	ldr	r2, [pc, #336]	; (81027fc <HAL_DMA_Init+0x670>)
 81026aa:	4293      	cmp	r3, r2
 81026ac:	d04f      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	681b      	ldr	r3, [r3, #0]
 81026b2:	4a53      	ldr	r2, [pc, #332]	; (8102800 <HAL_DMA_Init+0x674>)
 81026b4:	4293      	cmp	r3, r2
 81026b6:	d04a      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026b8:	687b      	ldr	r3, [r7, #4]
 81026ba:	681b      	ldr	r3, [r3, #0]
 81026bc:	4a51      	ldr	r2, [pc, #324]	; (8102804 <HAL_DMA_Init+0x678>)
 81026be:	4293      	cmp	r3, r2
 81026c0:	d045      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	4a50      	ldr	r2, [pc, #320]	; (8102808 <HAL_DMA_Init+0x67c>)
 81026c8:	4293      	cmp	r3, r2
 81026ca:	d040      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	4a4e      	ldr	r2, [pc, #312]	; (810280c <HAL_DMA_Init+0x680>)
 81026d2:	4293      	cmp	r3, r2
 81026d4:	d03b      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	4a4d      	ldr	r2, [pc, #308]	; (8102810 <HAL_DMA_Init+0x684>)
 81026dc:	4293      	cmp	r3, r2
 81026de:	d036      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	681b      	ldr	r3, [r3, #0]
 81026e4:	4a4b      	ldr	r2, [pc, #300]	; (8102814 <HAL_DMA_Init+0x688>)
 81026e6:	4293      	cmp	r3, r2
 81026e8:	d031      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	4a4a      	ldr	r2, [pc, #296]	; (8102818 <HAL_DMA_Init+0x68c>)
 81026f0:	4293      	cmp	r3, r2
 81026f2:	d02c      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	681b      	ldr	r3, [r3, #0]
 81026f8:	4a48      	ldr	r2, [pc, #288]	; (810281c <HAL_DMA_Init+0x690>)
 81026fa:	4293      	cmp	r3, r2
 81026fc:	d027      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	4a47      	ldr	r2, [pc, #284]	; (8102820 <HAL_DMA_Init+0x694>)
 8102704:	4293      	cmp	r3, r2
 8102706:	d022      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	681b      	ldr	r3, [r3, #0]
 810270c:	4a45      	ldr	r2, [pc, #276]	; (8102824 <HAL_DMA_Init+0x698>)
 810270e:	4293      	cmp	r3, r2
 8102710:	d01d      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102712:	687b      	ldr	r3, [r7, #4]
 8102714:	681b      	ldr	r3, [r3, #0]
 8102716:	4a44      	ldr	r2, [pc, #272]	; (8102828 <HAL_DMA_Init+0x69c>)
 8102718:	4293      	cmp	r3, r2
 810271a:	d018      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	681b      	ldr	r3, [r3, #0]
 8102720:	4a42      	ldr	r2, [pc, #264]	; (810282c <HAL_DMA_Init+0x6a0>)
 8102722:	4293      	cmp	r3, r2
 8102724:	d013      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102726:	687b      	ldr	r3, [r7, #4]
 8102728:	681b      	ldr	r3, [r3, #0]
 810272a:	4a41      	ldr	r2, [pc, #260]	; (8102830 <HAL_DMA_Init+0x6a4>)
 810272c:	4293      	cmp	r3, r2
 810272e:	d00e      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	4a3f      	ldr	r2, [pc, #252]	; (8102834 <HAL_DMA_Init+0x6a8>)
 8102736:	4293      	cmp	r3, r2
 8102738:	d009      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 810273a:	687b      	ldr	r3, [r7, #4]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	4a3e      	ldr	r2, [pc, #248]	; (8102838 <HAL_DMA_Init+0x6ac>)
 8102740:	4293      	cmp	r3, r2
 8102742:	d004      	beq.n	810274e <HAL_DMA_Init+0x5c2>
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	4a3c      	ldr	r2, [pc, #240]	; (810283c <HAL_DMA_Init+0x6b0>)
 810274a:	4293      	cmp	r3, r2
 810274c:	d101      	bne.n	8102752 <HAL_DMA_Init+0x5c6>
 810274e:	2301      	movs	r3, #1
 8102750:	e000      	b.n	8102754 <HAL_DMA_Init+0x5c8>
 8102752:	2300      	movs	r3, #0
 8102754:	2b00      	cmp	r3, #0
 8102756:	d032      	beq.n	81027be <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102758:	6878      	ldr	r0, [r7, #4]
 810275a:	f001 ff23 	bl	81045a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	689b      	ldr	r3, [r3, #8]
 8102762:	2b80      	cmp	r3, #128	; 0x80
 8102764:	d102      	bne.n	810276c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102766:	687b      	ldr	r3, [r7, #4]
 8102768:	2200      	movs	r2, #0
 810276a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	685a      	ldr	r2, [r3, #4]
 8102770:	687b      	ldr	r3, [r7, #4]
 8102772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102774:	b2d2      	uxtb	r2, r2
 8102776:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102778:	687b      	ldr	r3, [r7, #4]
 810277a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810277c:	687a      	ldr	r2, [r7, #4]
 810277e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8102780:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	685b      	ldr	r3, [r3, #4]
 8102786:	2b00      	cmp	r3, #0
 8102788:	d010      	beq.n	81027ac <HAL_DMA_Init+0x620>
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	685b      	ldr	r3, [r3, #4]
 810278e:	2b08      	cmp	r3, #8
 8102790:	d80c      	bhi.n	81027ac <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102792:	6878      	ldr	r0, [r7, #4]
 8102794:	f001 ffa0 	bl	81046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810279c:	2200      	movs	r2, #0
 810279e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81027a0:	687b      	ldr	r3, [r7, #4]
 81027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81027a4:	687a      	ldr	r2, [r7, #4]
 81027a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81027a8:	605a      	str	r2, [r3, #4]
 81027aa:	e008      	b.n	81027be <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	2200      	movs	r2, #0
 81027b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	2200      	movs	r2, #0
 81027b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 81027b8:	687b      	ldr	r3, [r7, #4]
 81027ba:	2200      	movs	r2, #0
 81027bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	2200      	movs	r2, #0
 81027c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 81027c4:	687b      	ldr	r3, [r7, #4]
 81027c6:	2201      	movs	r2, #1
 81027c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 81027cc:	2300      	movs	r3, #0
}
 81027ce:	4618      	mov	r0, r3
 81027d0:	3718      	adds	r7, #24
 81027d2:	46bd      	mov	sp, r7
 81027d4:	bd80      	pop	{r7, pc}
 81027d6:	bf00      	nop
 81027d8:	a7fdabf8 	.word	0xa7fdabf8
 81027dc:	cccccccd 	.word	0xcccccccd
 81027e0:	40020010 	.word	0x40020010
 81027e4:	40020028 	.word	0x40020028
 81027e8:	40020040 	.word	0x40020040
 81027ec:	40020058 	.word	0x40020058
 81027f0:	40020070 	.word	0x40020070
 81027f4:	40020088 	.word	0x40020088
 81027f8:	400200a0 	.word	0x400200a0
 81027fc:	400200b8 	.word	0x400200b8
 8102800:	40020410 	.word	0x40020410
 8102804:	40020428 	.word	0x40020428
 8102808:	40020440 	.word	0x40020440
 810280c:	40020458 	.word	0x40020458
 8102810:	40020470 	.word	0x40020470
 8102814:	40020488 	.word	0x40020488
 8102818:	400204a0 	.word	0x400204a0
 810281c:	400204b8 	.word	0x400204b8
 8102820:	58025408 	.word	0x58025408
 8102824:	5802541c 	.word	0x5802541c
 8102828:	58025430 	.word	0x58025430
 810282c:	58025444 	.word	0x58025444
 8102830:	58025458 	.word	0x58025458
 8102834:	5802546c 	.word	0x5802546c
 8102838:	58025480 	.word	0x58025480
 810283c:	58025494 	.word	0x58025494

08102840 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8102840:	b580      	push	{r7, lr}
 8102842:	b086      	sub	sp, #24
 8102844:	af00      	add	r7, sp, #0
 8102846:	60f8      	str	r0, [r7, #12]
 8102848:	60b9      	str	r1, [r7, #8]
 810284a:	607a      	str	r2, [r7, #4]
 810284c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810284e:	2300      	movs	r3, #0
 8102850:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102852:	68fb      	ldr	r3, [r7, #12]
 8102854:	2b00      	cmp	r3, #0
 8102856:	d101      	bne.n	810285c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8102858:	2301      	movs	r3, #1
 810285a:	e226      	b.n	8102caa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 810285c:	68fb      	ldr	r3, [r7, #12]
 810285e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8102862:	2b01      	cmp	r3, #1
 8102864:	d101      	bne.n	810286a <HAL_DMA_Start_IT+0x2a>
 8102866:	2302      	movs	r3, #2
 8102868:	e21f      	b.n	8102caa <HAL_DMA_Start_IT+0x46a>
 810286a:	68fb      	ldr	r3, [r7, #12]
 810286c:	2201      	movs	r2, #1
 810286e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8102872:	68fb      	ldr	r3, [r7, #12]
 8102874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102878:	b2db      	uxtb	r3, r3
 810287a:	2b01      	cmp	r3, #1
 810287c:	f040 820a 	bne.w	8102c94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102880:	68fb      	ldr	r3, [r7, #12]
 8102882:	2202      	movs	r2, #2
 8102884:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102888:	68fb      	ldr	r3, [r7, #12]
 810288a:	2200      	movs	r2, #0
 810288c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810288e:	68fb      	ldr	r3, [r7, #12]
 8102890:	681b      	ldr	r3, [r3, #0]
 8102892:	4a68      	ldr	r2, [pc, #416]	; (8102a34 <HAL_DMA_Start_IT+0x1f4>)
 8102894:	4293      	cmp	r3, r2
 8102896:	d04a      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 8102898:	68fb      	ldr	r3, [r7, #12]
 810289a:	681b      	ldr	r3, [r3, #0]
 810289c:	4a66      	ldr	r2, [pc, #408]	; (8102a38 <HAL_DMA_Start_IT+0x1f8>)
 810289e:	4293      	cmp	r3, r2
 81028a0:	d045      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	681b      	ldr	r3, [r3, #0]
 81028a6:	4a65      	ldr	r2, [pc, #404]	; (8102a3c <HAL_DMA_Start_IT+0x1fc>)
 81028a8:	4293      	cmp	r3, r2
 81028aa:	d040      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	681b      	ldr	r3, [r3, #0]
 81028b0:	4a63      	ldr	r2, [pc, #396]	; (8102a40 <HAL_DMA_Start_IT+0x200>)
 81028b2:	4293      	cmp	r3, r2
 81028b4:	d03b      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028b6:	68fb      	ldr	r3, [r7, #12]
 81028b8:	681b      	ldr	r3, [r3, #0]
 81028ba:	4a62      	ldr	r2, [pc, #392]	; (8102a44 <HAL_DMA_Start_IT+0x204>)
 81028bc:	4293      	cmp	r3, r2
 81028be:	d036      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028c0:	68fb      	ldr	r3, [r7, #12]
 81028c2:	681b      	ldr	r3, [r3, #0]
 81028c4:	4a60      	ldr	r2, [pc, #384]	; (8102a48 <HAL_DMA_Start_IT+0x208>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	d031      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	681b      	ldr	r3, [r3, #0]
 81028ce:	4a5f      	ldr	r2, [pc, #380]	; (8102a4c <HAL_DMA_Start_IT+0x20c>)
 81028d0:	4293      	cmp	r3, r2
 81028d2:	d02c      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028d4:	68fb      	ldr	r3, [r7, #12]
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	4a5d      	ldr	r2, [pc, #372]	; (8102a50 <HAL_DMA_Start_IT+0x210>)
 81028da:	4293      	cmp	r3, r2
 81028dc:	d027      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028de:	68fb      	ldr	r3, [r7, #12]
 81028e0:	681b      	ldr	r3, [r3, #0]
 81028e2:	4a5c      	ldr	r2, [pc, #368]	; (8102a54 <HAL_DMA_Start_IT+0x214>)
 81028e4:	4293      	cmp	r3, r2
 81028e6:	d022      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028e8:	68fb      	ldr	r3, [r7, #12]
 81028ea:	681b      	ldr	r3, [r3, #0]
 81028ec:	4a5a      	ldr	r2, [pc, #360]	; (8102a58 <HAL_DMA_Start_IT+0x218>)
 81028ee:	4293      	cmp	r3, r2
 81028f0:	d01d      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028f2:	68fb      	ldr	r3, [r7, #12]
 81028f4:	681b      	ldr	r3, [r3, #0]
 81028f6:	4a59      	ldr	r2, [pc, #356]	; (8102a5c <HAL_DMA_Start_IT+0x21c>)
 81028f8:	4293      	cmp	r3, r2
 81028fa:	d018      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 81028fc:	68fb      	ldr	r3, [r7, #12]
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	4a57      	ldr	r2, [pc, #348]	; (8102a60 <HAL_DMA_Start_IT+0x220>)
 8102902:	4293      	cmp	r3, r2
 8102904:	d013      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 8102906:	68fb      	ldr	r3, [r7, #12]
 8102908:	681b      	ldr	r3, [r3, #0]
 810290a:	4a56      	ldr	r2, [pc, #344]	; (8102a64 <HAL_DMA_Start_IT+0x224>)
 810290c:	4293      	cmp	r3, r2
 810290e:	d00e      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 8102910:	68fb      	ldr	r3, [r7, #12]
 8102912:	681b      	ldr	r3, [r3, #0]
 8102914:	4a54      	ldr	r2, [pc, #336]	; (8102a68 <HAL_DMA_Start_IT+0x228>)
 8102916:	4293      	cmp	r3, r2
 8102918:	d009      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 810291a:	68fb      	ldr	r3, [r7, #12]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	4a53      	ldr	r2, [pc, #332]	; (8102a6c <HAL_DMA_Start_IT+0x22c>)
 8102920:	4293      	cmp	r3, r2
 8102922:	d004      	beq.n	810292e <HAL_DMA_Start_IT+0xee>
 8102924:	68fb      	ldr	r3, [r7, #12]
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	4a51      	ldr	r2, [pc, #324]	; (8102a70 <HAL_DMA_Start_IT+0x230>)
 810292a:	4293      	cmp	r3, r2
 810292c:	d108      	bne.n	8102940 <HAL_DMA_Start_IT+0x100>
 810292e:	68fb      	ldr	r3, [r7, #12]
 8102930:	681b      	ldr	r3, [r3, #0]
 8102932:	681a      	ldr	r2, [r3, #0]
 8102934:	68fb      	ldr	r3, [r7, #12]
 8102936:	681b      	ldr	r3, [r3, #0]
 8102938:	f022 0201 	bic.w	r2, r2, #1
 810293c:	601a      	str	r2, [r3, #0]
 810293e:	e007      	b.n	8102950 <HAL_DMA_Start_IT+0x110>
 8102940:	68fb      	ldr	r3, [r7, #12]
 8102942:	681b      	ldr	r3, [r3, #0]
 8102944:	681a      	ldr	r2, [r3, #0]
 8102946:	68fb      	ldr	r3, [r7, #12]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	f022 0201 	bic.w	r2, r2, #1
 810294e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8102950:	683b      	ldr	r3, [r7, #0]
 8102952:	687a      	ldr	r2, [r7, #4]
 8102954:	68b9      	ldr	r1, [r7, #8]
 8102956:	68f8      	ldr	r0, [r7, #12]
 8102958:	f001 fb4a 	bl	8103ff0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810295c:	68fb      	ldr	r3, [r7, #12]
 810295e:	681b      	ldr	r3, [r3, #0]
 8102960:	4a34      	ldr	r2, [pc, #208]	; (8102a34 <HAL_DMA_Start_IT+0x1f4>)
 8102962:	4293      	cmp	r3, r2
 8102964:	d04a      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 8102966:	68fb      	ldr	r3, [r7, #12]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	4a33      	ldr	r2, [pc, #204]	; (8102a38 <HAL_DMA_Start_IT+0x1f8>)
 810296c:	4293      	cmp	r3, r2
 810296e:	d045      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 8102970:	68fb      	ldr	r3, [r7, #12]
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	4a31      	ldr	r2, [pc, #196]	; (8102a3c <HAL_DMA_Start_IT+0x1fc>)
 8102976:	4293      	cmp	r3, r2
 8102978:	d040      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 810297a:	68fb      	ldr	r3, [r7, #12]
 810297c:	681b      	ldr	r3, [r3, #0]
 810297e:	4a30      	ldr	r2, [pc, #192]	; (8102a40 <HAL_DMA_Start_IT+0x200>)
 8102980:	4293      	cmp	r3, r2
 8102982:	d03b      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 8102984:	68fb      	ldr	r3, [r7, #12]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4a2e      	ldr	r2, [pc, #184]	; (8102a44 <HAL_DMA_Start_IT+0x204>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d036      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 810298e:	68fb      	ldr	r3, [r7, #12]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	4a2d      	ldr	r2, [pc, #180]	; (8102a48 <HAL_DMA_Start_IT+0x208>)
 8102994:	4293      	cmp	r3, r2
 8102996:	d031      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 8102998:	68fb      	ldr	r3, [r7, #12]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	4a2b      	ldr	r2, [pc, #172]	; (8102a4c <HAL_DMA_Start_IT+0x20c>)
 810299e:	4293      	cmp	r3, r2
 81029a0:	d02c      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029a2:	68fb      	ldr	r3, [r7, #12]
 81029a4:	681b      	ldr	r3, [r3, #0]
 81029a6:	4a2a      	ldr	r2, [pc, #168]	; (8102a50 <HAL_DMA_Start_IT+0x210>)
 81029a8:	4293      	cmp	r3, r2
 81029aa:	d027      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029ac:	68fb      	ldr	r3, [r7, #12]
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4a28      	ldr	r2, [pc, #160]	; (8102a54 <HAL_DMA_Start_IT+0x214>)
 81029b2:	4293      	cmp	r3, r2
 81029b4:	d022      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029b6:	68fb      	ldr	r3, [r7, #12]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	4a27      	ldr	r2, [pc, #156]	; (8102a58 <HAL_DMA_Start_IT+0x218>)
 81029bc:	4293      	cmp	r3, r2
 81029be:	d01d      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029c0:	68fb      	ldr	r3, [r7, #12]
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	4a25      	ldr	r2, [pc, #148]	; (8102a5c <HAL_DMA_Start_IT+0x21c>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d018      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029ca:	68fb      	ldr	r3, [r7, #12]
 81029cc:	681b      	ldr	r3, [r3, #0]
 81029ce:	4a24      	ldr	r2, [pc, #144]	; (8102a60 <HAL_DMA_Start_IT+0x220>)
 81029d0:	4293      	cmp	r3, r2
 81029d2:	d013      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029d4:	68fb      	ldr	r3, [r7, #12]
 81029d6:	681b      	ldr	r3, [r3, #0]
 81029d8:	4a22      	ldr	r2, [pc, #136]	; (8102a64 <HAL_DMA_Start_IT+0x224>)
 81029da:	4293      	cmp	r3, r2
 81029dc:	d00e      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029de:	68fb      	ldr	r3, [r7, #12]
 81029e0:	681b      	ldr	r3, [r3, #0]
 81029e2:	4a21      	ldr	r2, [pc, #132]	; (8102a68 <HAL_DMA_Start_IT+0x228>)
 81029e4:	4293      	cmp	r3, r2
 81029e6:	d009      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029e8:	68fb      	ldr	r3, [r7, #12]
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	4a1f      	ldr	r2, [pc, #124]	; (8102a6c <HAL_DMA_Start_IT+0x22c>)
 81029ee:	4293      	cmp	r3, r2
 81029f0:	d004      	beq.n	81029fc <HAL_DMA_Start_IT+0x1bc>
 81029f2:	68fb      	ldr	r3, [r7, #12]
 81029f4:	681b      	ldr	r3, [r3, #0]
 81029f6:	4a1e      	ldr	r2, [pc, #120]	; (8102a70 <HAL_DMA_Start_IT+0x230>)
 81029f8:	4293      	cmp	r3, r2
 81029fa:	d101      	bne.n	8102a00 <HAL_DMA_Start_IT+0x1c0>
 81029fc:	2301      	movs	r3, #1
 81029fe:	e000      	b.n	8102a02 <HAL_DMA_Start_IT+0x1c2>
 8102a00:	2300      	movs	r3, #0
 8102a02:	2b00      	cmp	r3, #0
 8102a04:	d036      	beq.n	8102a74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8102a06:	68fb      	ldr	r3, [r7, #12]
 8102a08:	681b      	ldr	r3, [r3, #0]
 8102a0a:	681b      	ldr	r3, [r3, #0]
 8102a0c:	f023 021e 	bic.w	r2, r3, #30
 8102a10:	68fb      	ldr	r3, [r7, #12]
 8102a12:	681b      	ldr	r3, [r3, #0]
 8102a14:	f042 0216 	orr.w	r2, r2, #22
 8102a18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102a1a:	68fb      	ldr	r3, [r7, #12]
 8102a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a1e:	2b00      	cmp	r3, #0
 8102a20:	d03e      	beq.n	8102aa0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8102a22:	68fb      	ldr	r3, [r7, #12]
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	681a      	ldr	r2, [r3, #0]
 8102a28:	68fb      	ldr	r3, [r7, #12]
 8102a2a:	681b      	ldr	r3, [r3, #0]
 8102a2c:	f042 0208 	orr.w	r2, r2, #8
 8102a30:	601a      	str	r2, [r3, #0]
 8102a32:	e035      	b.n	8102aa0 <HAL_DMA_Start_IT+0x260>
 8102a34:	40020010 	.word	0x40020010
 8102a38:	40020028 	.word	0x40020028
 8102a3c:	40020040 	.word	0x40020040
 8102a40:	40020058 	.word	0x40020058
 8102a44:	40020070 	.word	0x40020070
 8102a48:	40020088 	.word	0x40020088
 8102a4c:	400200a0 	.word	0x400200a0
 8102a50:	400200b8 	.word	0x400200b8
 8102a54:	40020410 	.word	0x40020410
 8102a58:	40020428 	.word	0x40020428
 8102a5c:	40020440 	.word	0x40020440
 8102a60:	40020458 	.word	0x40020458
 8102a64:	40020470 	.word	0x40020470
 8102a68:	40020488 	.word	0x40020488
 8102a6c:	400204a0 	.word	0x400204a0
 8102a70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8102a74:	68fb      	ldr	r3, [r7, #12]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	681b      	ldr	r3, [r3, #0]
 8102a7a:	f023 020e 	bic.w	r2, r3, #14
 8102a7e:	68fb      	ldr	r3, [r7, #12]
 8102a80:	681b      	ldr	r3, [r3, #0]
 8102a82:	f042 020a 	orr.w	r2, r2, #10
 8102a86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8102a88:	68fb      	ldr	r3, [r7, #12]
 8102a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102a8c:	2b00      	cmp	r3, #0
 8102a8e:	d007      	beq.n	8102aa0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8102a90:	68fb      	ldr	r3, [r7, #12]
 8102a92:	681b      	ldr	r3, [r3, #0]
 8102a94:	681a      	ldr	r2, [r3, #0]
 8102a96:	68fb      	ldr	r3, [r7, #12]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	f042 0204 	orr.w	r2, r2, #4
 8102a9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102aa0:	68fb      	ldr	r3, [r7, #12]
 8102aa2:	681b      	ldr	r3, [r3, #0]
 8102aa4:	4a83      	ldr	r2, [pc, #524]	; (8102cb4 <HAL_DMA_Start_IT+0x474>)
 8102aa6:	4293      	cmp	r3, r2
 8102aa8:	d072      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102aaa:	68fb      	ldr	r3, [r7, #12]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	4a82      	ldr	r2, [pc, #520]	; (8102cb8 <HAL_DMA_Start_IT+0x478>)
 8102ab0:	4293      	cmp	r3, r2
 8102ab2:	d06d      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102ab4:	68fb      	ldr	r3, [r7, #12]
 8102ab6:	681b      	ldr	r3, [r3, #0]
 8102ab8:	4a80      	ldr	r2, [pc, #512]	; (8102cbc <HAL_DMA_Start_IT+0x47c>)
 8102aba:	4293      	cmp	r3, r2
 8102abc:	d068      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102abe:	68fb      	ldr	r3, [r7, #12]
 8102ac0:	681b      	ldr	r3, [r3, #0]
 8102ac2:	4a7f      	ldr	r2, [pc, #508]	; (8102cc0 <HAL_DMA_Start_IT+0x480>)
 8102ac4:	4293      	cmp	r3, r2
 8102ac6:	d063      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102ac8:	68fb      	ldr	r3, [r7, #12]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	4a7d      	ldr	r2, [pc, #500]	; (8102cc4 <HAL_DMA_Start_IT+0x484>)
 8102ace:	4293      	cmp	r3, r2
 8102ad0:	d05e      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102ad2:	68fb      	ldr	r3, [r7, #12]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	4a7c      	ldr	r2, [pc, #496]	; (8102cc8 <HAL_DMA_Start_IT+0x488>)
 8102ad8:	4293      	cmp	r3, r2
 8102ada:	d059      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	681b      	ldr	r3, [r3, #0]
 8102ae0:	4a7a      	ldr	r2, [pc, #488]	; (8102ccc <HAL_DMA_Start_IT+0x48c>)
 8102ae2:	4293      	cmp	r3, r2
 8102ae4:	d054      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102ae6:	68fb      	ldr	r3, [r7, #12]
 8102ae8:	681b      	ldr	r3, [r3, #0]
 8102aea:	4a79      	ldr	r2, [pc, #484]	; (8102cd0 <HAL_DMA_Start_IT+0x490>)
 8102aec:	4293      	cmp	r3, r2
 8102aee:	d04f      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102af0:	68fb      	ldr	r3, [r7, #12]
 8102af2:	681b      	ldr	r3, [r3, #0]
 8102af4:	4a77      	ldr	r2, [pc, #476]	; (8102cd4 <HAL_DMA_Start_IT+0x494>)
 8102af6:	4293      	cmp	r3, r2
 8102af8:	d04a      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	681b      	ldr	r3, [r3, #0]
 8102afe:	4a76      	ldr	r2, [pc, #472]	; (8102cd8 <HAL_DMA_Start_IT+0x498>)
 8102b00:	4293      	cmp	r3, r2
 8102b02:	d045      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	4a74      	ldr	r2, [pc, #464]	; (8102cdc <HAL_DMA_Start_IT+0x49c>)
 8102b0a:	4293      	cmp	r3, r2
 8102b0c:	d040      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b0e:	68fb      	ldr	r3, [r7, #12]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	4a73      	ldr	r2, [pc, #460]	; (8102ce0 <HAL_DMA_Start_IT+0x4a0>)
 8102b14:	4293      	cmp	r3, r2
 8102b16:	d03b      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b18:	68fb      	ldr	r3, [r7, #12]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	4a71      	ldr	r2, [pc, #452]	; (8102ce4 <HAL_DMA_Start_IT+0x4a4>)
 8102b1e:	4293      	cmp	r3, r2
 8102b20:	d036      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b22:	68fb      	ldr	r3, [r7, #12]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	4a70      	ldr	r2, [pc, #448]	; (8102ce8 <HAL_DMA_Start_IT+0x4a8>)
 8102b28:	4293      	cmp	r3, r2
 8102b2a:	d031      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	681b      	ldr	r3, [r3, #0]
 8102b30:	4a6e      	ldr	r2, [pc, #440]	; (8102cec <HAL_DMA_Start_IT+0x4ac>)
 8102b32:	4293      	cmp	r3, r2
 8102b34:	d02c      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b36:	68fb      	ldr	r3, [r7, #12]
 8102b38:	681b      	ldr	r3, [r3, #0]
 8102b3a:	4a6d      	ldr	r2, [pc, #436]	; (8102cf0 <HAL_DMA_Start_IT+0x4b0>)
 8102b3c:	4293      	cmp	r3, r2
 8102b3e:	d027      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b40:	68fb      	ldr	r3, [r7, #12]
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	4a6b      	ldr	r2, [pc, #428]	; (8102cf4 <HAL_DMA_Start_IT+0x4b4>)
 8102b46:	4293      	cmp	r3, r2
 8102b48:	d022      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b4a:	68fb      	ldr	r3, [r7, #12]
 8102b4c:	681b      	ldr	r3, [r3, #0]
 8102b4e:	4a6a      	ldr	r2, [pc, #424]	; (8102cf8 <HAL_DMA_Start_IT+0x4b8>)
 8102b50:	4293      	cmp	r3, r2
 8102b52:	d01d      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b54:	68fb      	ldr	r3, [r7, #12]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	4a68      	ldr	r2, [pc, #416]	; (8102cfc <HAL_DMA_Start_IT+0x4bc>)
 8102b5a:	4293      	cmp	r3, r2
 8102b5c:	d018      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b5e:	68fb      	ldr	r3, [r7, #12]
 8102b60:	681b      	ldr	r3, [r3, #0]
 8102b62:	4a67      	ldr	r2, [pc, #412]	; (8102d00 <HAL_DMA_Start_IT+0x4c0>)
 8102b64:	4293      	cmp	r3, r2
 8102b66:	d013      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b68:	68fb      	ldr	r3, [r7, #12]
 8102b6a:	681b      	ldr	r3, [r3, #0]
 8102b6c:	4a65      	ldr	r2, [pc, #404]	; (8102d04 <HAL_DMA_Start_IT+0x4c4>)
 8102b6e:	4293      	cmp	r3, r2
 8102b70:	d00e      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b72:	68fb      	ldr	r3, [r7, #12]
 8102b74:	681b      	ldr	r3, [r3, #0]
 8102b76:	4a64      	ldr	r2, [pc, #400]	; (8102d08 <HAL_DMA_Start_IT+0x4c8>)
 8102b78:	4293      	cmp	r3, r2
 8102b7a:	d009      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b7c:	68fb      	ldr	r3, [r7, #12]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	4a62      	ldr	r2, [pc, #392]	; (8102d0c <HAL_DMA_Start_IT+0x4cc>)
 8102b82:	4293      	cmp	r3, r2
 8102b84:	d004      	beq.n	8102b90 <HAL_DMA_Start_IT+0x350>
 8102b86:	68fb      	ldr	r3, [r7, #12]
 8102b88:	681b      	ldr	r3, [r3, #0]
 8102b8a:	4a61      	ldr	r2, [pc, #388]	; (8102d10 <HAL_DMA_Start_IT+0x4d0>)
 8102b8c:	4293      	cmp	r3, r2
 8102b8e:	d101      	bne.n	8102b94 <HAL_DMA_Start_IT+0x354>
 8102b90:	2301      	movs	r3, #1
 8102b92:	e000      	b.n	8102b96 <HAL_DMA_Start_IT+0x356>
 8102b94:	2300      	movs	r3, #0
 8102b96:	2b00      	cmp	r3, #0
 8102b98:	d01a      	beq.n	8102bd0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8102b9a:	68fb      	ldr	r3, [r7, #12]
 8102b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102b9e:	681b      	ldr	r3, [r3, #0]
 8102ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102ba4:	2b00      	cmp	r3, #0
 8102ba6:	d007      	beq.n	8102bb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102bac:	681a      	ldr	r2, [r3, #0]
 8102bae:	68fb      	ldr	r3, [r7, #12]
 8102bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102bb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8102bb8:	68fb      	ldr	r3, [r7, #12]
 8102bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bbc:	2b00      	cmp	r3, #0
 8102bbe:	d007      	beq.n	8102bd0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8102bc0:	68fb      	ldr	r3, [r7, #12]
 8102bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bc4:	681a      	ldr	r2, [r3, #0]
 8102bc6:	68fb      	ldr	r3, [r7, #12]
 8102bc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102bce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8102bd0:	68fb      	ldr	r3, [r7, #12]
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	4a37      	ldr	r2, [pc, #220]	; (8102cb4 <HAL_DMA_Start_IT+0x474>)
 8102bd6:	4293      	cmp	r3, r2
 8102bd8:	d04a      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102bda:	68fb      	ldr	r3, [r7, #12]
 8102bdc:	681b      	ldr	r3, [r3, #0]
 8102bde:	4a36      	ldr	r2, [pc, #216]	; (8102cb8 <HAL_DMA_Start_IT+0x478>)
 8102be0:	4293      	cmp	r3, r2
 8102be2:	d045      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102be4:	68fb      	ldr	r3, [r7, #12]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	4a34      	ldr	r2, [pc, #208]	; (8102cbc <HAL_DMA_Start_IT+0x47c>)
 8102bea:	4293      	cmp	r3, r2
 8102bec:	d040      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102bee:	68fb      	ldr	r3, [r7, #12]
 8102bf0:	681b      	ldr	r3, [r3, #0]
 8102bf2:	4a33      	ldr	r2, [pc, #204]	; (8102cc0 <HAL_DMA_Start_IT+0x480>)
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	d03b      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102bf8:	68fb      	ldr	r3, [r7, #12]
 8102bfa:	681b      	ldr	r3, [r3, #0]
 8102bfc:	4a31      	ldr	r2, [pc, #196]	; (8102cc4 <HAL_DMA_Start_IT+0x484>)
 8102bfe:	4293      	cmp	r3, r2
 8102c00:	d036      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c02:	68fb      	ldr	r3, [r7, #12]
 8102c04:	681b      	ldr	r3, [r3, #0]
 8102c06:	4a30      	ldr	r2, [pc, #192]	; (8102cc8 <HAL_DMA_Start_IT+0x488>)
 8102c08:	4293      	cmp	r3, r2
 8102c0a:	d031      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	4a2e      	ldr	r2, [pc, #184]	; (8102ccc <HAL_DMA_Start_IT+0x48c>)
 8102c12:	4293      	cmp	r3, r2
 8102c14:	d02c      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c16:	68fb      	ldr	r3, [r7, #12]
 8102c18:	681b      	ldr	r3, [r3, #0]
 8102c1a:	4a2d      	ldr	r2, [pc, #180]	; (8102cd0 <HAL_DMA_Start_IT+0x490>)
 8102c1c:	4293      	cmp	r3, r2
 8102c1e:	d027      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c20:	68fb      	ldr	r3, [r7, #12]
 8102c22:	681b      	ldr	r3, [r3, #0]
 8102c24:	4a2b      	ldr	r2, [pc, #172]	; (8102cd4 <HAL_DMA_Start_IT+0x494>)
 8102c26:	4293      	cmp	r3, r2
 8102c28:	d022      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c2a:	68fb      	ldr	r3, [r7, #12]
 8102c2c:	681b      	ldr	r3, [r3, #0]
 8102c2e:	4a2a      	ldr	r2, [pc, #168]	; (8102cd8 <HAL_DMA_Start_IT+0x498>)
 8102c30:	4293      	cmp	r3, r2
 8102c32:	d01d      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c34:	68fb      	ldr	r3, [r7, #12]
 8102c36:	681b      	ldr	r3, [r3, #0]
 8102c38:	4a28      	ldr	r2, [pc, #160]	; (8102cdc <HAL_DMA_Start_IT+0x49c>)
 8102c3a:	4293      	cmp	r3, r2
 8102c3c:	d018      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c3e:	68fb      	ldr	r3, [r7, #12]
 8102c40:	681b      	ldr	r3, [r3, #0]
 8102c42:	4a27      	ldr	r2, [pc, #156]	; (8102ce0 <HAL_DMA_Start_IT+0x4a0>)
 8102c44:	4293      	cmp	r3, r2
 8102c46:	d013      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c48:	68fb      	ldr	r3, [r7, #12]
 8102c4a:	681b      	ldr	r3, [r3, #0]
 8102c4c:	4a25      	ldr	r2, [pc, #148]	; (8102ce4 <HAL_DMA_Start_IT+0x4a4>)
 8102c4e:	4293      	cmp	r3, r2
 8102c50:	d00e      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c52:	68fb      	ldr	r3, [r7, #12]
 8102c54:	681b      	ldr	r3, [r3, #0]
 8102c56:	4a24      	ldr	r2, [pc, #144]	; (8102ce8 <HAL_DMA_Start_IT+0x4a8>)
 8102c58:	4293      	cmp	r3, r2
 8102c5a:	d009      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c5c:	68fb      	ldr	r3, [r7, #12]
 8102c5e:	681b      	ldr	r3, [r3, #0]
 8102c60:	4a22      	ldr	r2, [pc, #136]	; (8102cec <HAL_DMA_Start_IT+0x4ac>)
 8102c62:	4293      	cmp	r3, r2
 8102c64:	d004      	beq.n	8102c70 <HAL_DMA_Start_IT+0x430>
 8102c66:	68fb      	ldr	r3, [r7, #12]
 8102c68:	681b      	ldr	r3, [r3, #0]
 8102c6a:	4a21      	ldr	r2, [pc, #132]	; (8102cf0 <HAL_DMA_Start_IT+0x4b0>)
 8102c6c:	4293      	cmp	r3, r2
 8102c6e:	d108      	bne.n	8102c82 <HAL_DMA_Start_IT+0x442>
 8102c70:	68fb      	ldr	r3, [r7, #12]
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	681a      	ldr	r2, [r3, #0]
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	f042 0201 	orr.w	r2, r2, #1
 8102c7e:	601a      	str	r2, [r3, #0]
 8102c80:	e012      	b.n	8102ca8 <HAL_DMA_Start_IT+0x468>
 8102c82:	68fb      	ldr	r3, [r7, #12]
 8102c84:	681b      	ldr	r3, [r3, #0]
 8102c86:	681a      	ldr	r2, [r3, #0]
 8102c88:	68fb      	ldr	r3, [r7, #12]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	f042 0201 	orr.w	r2, r2, #1
 8102c90:	601a      	str	r2, [r3, #0]
 8102c92:	e009      	b.n	8102ca8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8102c94:	68fb      	ldr	r3, [r7, #12]
 8102c96:	2200      	movs	r2, #0
 8102c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8102ca2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8102ca4:	2301      	movs	r3, #1
 8102ca6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8102ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8102caa:	4618      	mov	r0, r3
 8102cac:	3718      	adds	r7, #24
 8102cae:	46bd      	mov	sp, r7
 8102cb0:	bd80      	pop	{r7, pc}
 8102cb2:	bf00      	nop
 8102cb4:	40020010 	.word	0x40020010
 8102cb8:	40020028 	.word	0x40020028
 8102cbc:	40020040 	.word	0x40020040
 8102cc0:	40020058 	.word	0x40020058
 8102cc4:	40020070 	.word	0x40020070
 8102cc8:	40020088 	.word	0x40020088
 8102ccc:	400200a0 	.word	0x400200a0
 8102cd0:	400200b8 	.word	0x400200b8
 8102cd4:	40020410 	.word	0x40020410
 8102cd8:	40020428 	.word	0x40020428
 8102cdc:	40020440 	.word	0x40020440
 8102ce0:	40020458 	.word	0x40020458
 8102ce4:	40020470 	.word	0x40020470
 8102ce8:	40020488 	.word	0x40020488
 8102cec:	400204a0 	.word	0x400204a0
 8102cf0:	400204b8 	.word	0x400204b8
 8102cf4:	58025408 	.word	0x58025408
 8102cf8:	5802541c 	.word	0x5802541c
 8102cfc:	58025430 	.word	0x58025430
 8102d00:	58025444 	.word	0x58025444
 8102d04:	58025458 	.word	0x58025458
 8102d08:	5802546c 	.word	0x5802546c
 8102d0c:	58025480 	.word	0x58025480
 8102d10:	58025494 	.word	0x58025494

08102d14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8102d14:	b580      	push	{r7, lr}
 8102d16:	b084      	sub	sp, #16
 8102d18:	af00      	add	r7, sp, #0
 8102d1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	2b00      	cmp	r3, #0
 8102d20:	d101      	bne.n	8102d26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8102d22:	2301      	movs	r3, #1
 8102d24:	e205      	b.n	8103132 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8102d2c:	b2db      	uxtb	r3, r3
 8102d2e:	2b02      	cmp	r3, #2
 8102d30:	d004      	beq.n	8102d3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	2280      	movs	r2, #128	; 0x80
 8102d36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8102d38:	2301      	movs	r3, #1
 8102d3a:	e1fa      	b.n	8103132 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	4a8c      	ldr	r2, [pc, #560]	; (8102f74 <HAL_DMA_Abort_IT+0x260>)
 8102d42:	4293      	cmp	r3, r2
 8102d44:	d04a      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	681b      	ldr	r3, [r3, #0]
 8102d4a:	4a8b      	ldr	r2, [pc, #556]	; (8102f78 <HAL_DMA_Abort_IT+0x264>)
 8102d4c:	4293      	cmp	r3, r2
 8102d4e:	d045      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d50:	687b      	ldr	r3, [r7, #4]
 8102d52:	681b      	ldr	r3, [r3, #0]
 8102d54:	4a89      	ldr	r2, [pc, #548]	; (8102f7c <HAL_DMA_Abort_IT+0x268>)
 8102d56:	4293      	cmp	r3, r2
 8102d58:	d040      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	681b      	ldr	r3, [r3, #0]
 8102d5e:	4a88      	ldr	r2, [pc, #544]	; (8102f80 <HAL_DMA_Abort_IT+0x26c>)
 8102d60:	4293      	cmp	r3, r2
 8102d62:	d03b      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d64:	687b      	ldr	r3, [r7, #4]
 8102d66:	681b      	ldr	r3, [r3, #0]
 8102d68:	4a86      	ldr	r2, [pc, #536]	; (8102f84 <HAL_DMA_Abort_IT+0x270>)
 8102d6a:	4293      	cmp	r3, r2
 8102d6c:	d036      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	681b      	ldr	r3, [r3, #0]
 8102d72:	4a85      	ldr	r2, [pc, #532]	; (8102f88 <HAL_DMA_Abort_IT+0x274>)
 8102d74:	4293      	cmp	r3, r2
 8102d76:	d031      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	4a83      	ldr	r2, [pc, #524]	; (8102f8c <HAL_DMA_Abort_IT+0x278>)
 8102d7e:	4293      	cmp	r3, r2
 8102d80:	d02c      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	4a82      	ldr	r2, [pc, #520]	; (8102f90 <HAL_DMA_Abort_IT+0x27c>)
 8102d88:	4293      	cmp	r3, r2
 8102d8a:	d027      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	681b      	ldr	r3, [r3, #0]
 8102d90:	4a80      	ldr	r2, [pc, #512]	; (8102f94 <HAL_DMA_Abort_IT+0x280>)
 8102d92:	4293      	cmp	r3, r2
 8102d94:	d022      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	681b      	ldr	r3, [r3, #0]
 8102d9a:	4a7f      	ldr	r2, [pc, #508]	; (8102f98 <HAL_DMA_Abort_IT+0x284>)
 8102d9c:	4293      	cmp	r3, r2
 8102d9e:	d01d      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	4a7d      	ldr	r2, [pc, #500]	; (8102f9c <HAL_DMA_Abort_IT+0x288>)
 8102da6:	4293      	cmp	r3, r2
 8102da8:	d018      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	4a7c      	ldr	r2, [pc, #496]	; (8102fa0 <HAL_DMA_Abort_IT+0x28c>)
 8102db0:	4293      	cmp	r3, r2
 8102db2:	d013      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	681b      	ldr	r3, [r3, #0]
 8102db8:	4a7a      	ldr	r2, [pc, #488]	; (8102fa4 <HAL_DMA_Abort_IT+0x290>)
 8102dba:	4293      	cmp	r3, r2
 8102dbc:	d00e      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	681b      	ldr	r3, [r3, #0]
 8102dc2:	4a79      	ldr	r2, [pc, #484]	; (8102fa8 <HAL_DMA_Abort_IT+0x294>)
 8102dc4:	4293      	cmp	r3, r2
 8102dc6:	d009      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	4a77      	ldr	r2, [pc, #476]	; (8102fac <HAL_DMA_Abort_IT+0x298>)
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d004      	beq.n	8102ddc <HAL_DMA_Abort_IT+0xc8>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	4a76      	ldr	r2, [pc, #472]	; (8102fb0 <HAL_DMA_Abort_IT+0x29c>)
 8102dd8:	4293      	cmp	r3, r2
 8102dda:	d101      	bne.n	8102de0 <HAL_DMA_Abort_IT+0xcc>
 8102ddc:	2301      	movs	r3, #1
 8102dde:	e000      	b.n	8102de2 <HAL_DMA_Abort_IT+0xce>
 8102de0:	2300      	movs	r3, #0
 8102de2:	2b00      	cmp	r3, #0
 8102de4:	d065      	beq.n	8102eb2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	2204      	movs	r2, #4
 8102dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	4a60      	ldr	r2, [pc, #384]	; (8102f74 <HAL_DMA_Abort_IT+0x260>)
 8102df4:	4293      	cmp	r3, r2
 8102df6:	d04a      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102df8:	687b      	ldr	r3, [r7, #4]
 8102dfa:	681b      	ldr	r3, [r3, #0]
 8102dfc:	4a5e      	ldr	r2, [pc, #376]	; (8102f78 <HAL_DMA_Abort_IT+0x264>)
 8102dfe:	4293      	cmp	r3, r2
 8102e00:	d045      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	681b      	ldr	r3, [r3, #0]
 8102e06:	4a5d      	ldr	r2, [pc, #372]	; (8102f7c <HAL_DMA_Abort_IT+0x268>)
 8102e08:	4293      	cmp	r3, r2
 8102e0a:	d040      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	681b      	ldr	r3, [r3, #0]
 8102e10:	4a5b      	ldr	r2, [pc, #364]	; (8102f80 <HAL_DMA_Abort_IT+0x26c>)
 8102e12:	4293      	cmp	r3, r2
 8102e14:	d03b      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e16:	687b      	ldr	r3, [r7, #4]
 8102e18:	681b      	ldr	r3, [r3, #0]
 8102e1a:	4a5a      	ldr	r2, [pc, #360]	; (8102f84 <HAL_DMA_Abort_IT+0x270>)
 8102e1c:	4293      	cmp	r3, r2
 8102e1e:	d036      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	4a58      	ldr	r2, [pc, #352]	; (8102f88 <HAL_DMA_Abort_IT+0x274>)
 8102e26:	4293      	cmp	r3, r2
 8102e28:	d031      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	4a57      	ldr	r2, [pc, #348]	; (8102f8c <HAL_DMA_Abort_IT+0x278>)
 8102e30:	4293      	cmp	r3, r2
 8102e32:	d02c      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e34:	687b      	ldr	r3, [r7, #4]
 8102e36:	681b      	ldr	r3, [r3, #0]
 8102e38:	4a55      	ldr	r2, [pc, #340]	; (8102f90 <HAL_DMA_Abort_IT+0x27c>)
 8102e3a:	4293      	cmp	r3, r2
 8102e3c:	d027      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	681b      	ldr	r3, [r3, #0]
 8102e42:	4a54      	ldr	r2, [pc, #336]	; (8102f94 <HAL_DMA_Abort_IT+0x280>)
 8102e44:	4293      	cmp	r3, r2
 8102e46:	d022      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	681b      	ldr	r3, [r3, #0]
 8102e4c:	4a52      	ldr	r2, [pc, #328]	; (8102f98 <HAL_DMA_Abort_IT+0x284>)
 8102e4e:	4293      	cmp	r3, r2
 8102e50:	d01d      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	4a51      	ldr	r2, [pc, #324]	; (8102f9c <HAL_DMA_Abort_IT+0x288>)
 8102e58:	4293      	cmp	r3, r2
 8102e5a:	d018      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	681b      	ldr	r3, [r3, #0]
 8102e60:	4a4f      	ldr	r2, [pc, #316]	; (8102fa0 <HAL_DMA_Abort_IT+0x28c>)
 8102e62:	4293      	cmp	r3, r2
 8102e64:	d013      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	681b      	ldr	r3, [r3, #0]
 8102e6a:	4a4e      	ldr	r2, [pc, #312]	; (8102fa4 <HAL_DMA_Abort_IT+0x290>)
 8102e6c:	4293      	cmp	r3, r2
 8102e6e:	d00e      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	4a4c      	ldr	r2, [pc, #304]	; (8102fa8 <HAL_DMA_Abort_IT+0x294>)
 8102e76:	4293      	cmp	r3, r2
 8102e78:	d009      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e7a:	687b      	ldr	r3, [r7, #4]
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	4a4b      	ldr	r2, [pc, #300]	; (8102fac <HAL_DMA_Abort_IT+0x298>)
 8102e80:	4293      	cmp	r3, r2
 8102e82:	d004      	beq.n	8102e8e <HAL_DMA_Abort_IT+0x17a>
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	4a49      	ldr	r2, [pc, #292]	; (8102fb0 <HAL_DMA_Abort_IT+0x29c>)
 8102e8a:	4293      	cmp	r3, r2
 8102e8c:	d108      	bne.n	8102ea0 <HAL_DMA_Abort_IT+0x18c>
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	681a      	ldr	r2, [r3, #0]
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	681b      	ldr	r3, [r3, #0]
 8102e98:	f022 0201 	bic.w	r2, r2, #1
 8102e9c:	601a      	str	r2, [r3, #0]
 8102e9e:	e147      	b.n	8103130 <HAL_DMA_Abort_IT+0x41c>
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	681a      	ldr	r2, [r3, #0]
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	681b      	ldr	r3, [r3, #0]
 8102eaa:	f022 0201 	bic.w	r2, r2, #1
 8102eae:	601a      	str	r2, [r3, #0]
 8102eb0:	e13e      	b.n	8103130 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	681a      	ldr	r2, [r3, #0]
 8102eb8:	687b      	ldr	r3, [r7, #4]
 8102eba:	681b      	ldr	r3, [r3, #0]
 8102ebc:	f022 020e 	bic.w	r2, r2, #14
 8102ec0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	681b      	ldr	r3, [r3, #0]
 8102ec6:	4a2b      	ldr	r2, [pc, #172]	; (8102f74 <HAL_DMA_Abort_IT+0x260>)
 8102ec8:	4293      	cmp	r3, r2
 8102eca:	d04a      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	681b      	ldr	r3, [r3, #0]
 8102ed0:	4a29      	ldr	r2, [pc, #164]	; (8102f78 <HAL_DMA_Abort_IT+0x264>)
 8102ed2:	4293      	cmp	r3, r2
 8102ed4:	d045      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	681b      	ldr	r3, [r3, #0]
 8102eda:	4a28      	ldr	r2, [pc, #160]	; (8102f7c <HAL_DMA_Abort_IT+0x268>)
 8102edc:	4293      	cmp	r3, r2
 8102ede:	d040      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102ee0:	687b      	ldr	r3, [r7, #4]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	4a26      	ldr	r2, [pc, #152]	; (8102f80 <HAL_DMA_Abort_IT+0x26c>)
 8102ee6:	4293      	cmp	r3, r2
 8102ee8:	d03b      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	681b      	ldr	r3, [r3, #0]
 8102eee:	4a25      	ldr	r2, [pc, #148]	; (8102f84 <HAL_DMA_Abort_IT+0x270>)
 8102ef0:	4293      	cmp	r3, r2
 8102ef2:	d036      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	681b      	ldr	r3, [r3, #0]
 8102ef8:	4a23      	ldr	r2, [pc, #140]	; (8102f88 <HAL_DMA_Abort_IT+0x274>)
 8102efa:	4293      	cmp	r3, r2
 8102efc:	d031      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	681b      	ldr	r3, [r3, #0]
 8102f02:	4a22      	ldr	r2, [pc, #136]	; (8102f8c <HAL_DMA_Abort_IT+0x278>)
 8102f04:	4293      	cmp	r3, r2
 8102f06:	d02c      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	4a20      	ldr	r2, [pc, #128]	; (8102f90 <HAL_DMA_Abort_IT+0x27c>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d027      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4a1f      	ldr	r2, [pc, #124]	; (8102f94 <HAL_DMA_Abort_IT+0x280>)
 8102f18:	4293      	cmp	r3, r2
 8102f1a:	d022      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	4a1d      	ldr	r2, [pc, #116]	; (8102f98 <HAL_DMA_Abort_IT+0x284>)
 8102f22:	4293      	cmp	r3, r2
 8102f24:	d01d      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	681b      	ldr	r3, [r3, #0]
 8102f2a:	4a1c      	ldr	r2, [pc, #112]	; (8102f9c <HAL_DMA_Abort_IT+0x288>)
 8102f2c:	4293      	cmp	r3, r2
 8102f2e:	d018      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	4a1a      	ldr	r2, [pc, #104]	; (8102fa0 <HAL_DMA_Abort_IT+0x28c>)
 8102f36:	4293      	cmp	r3, r2
 8102f38:	d013      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	681b      	ldr	r3, [r3, #0]
 8102f3e:	4a19      	ldr	r2, [pc, #100]	; (8102fa4 <HAL_DMA_Abort_IT+0x290>)
 8102f40:	4293      	cmp	r3, r2
 8102f42:	d00e      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	681b      	ldr	r3, [r3, #0]
 8102f48:	4a17      	ldr	r2, [pc, #92]	; (8102fa8 <HAL_DMA_Abort_IT+0x294>)
 8102f4a:	4293      	cmp	r3, r2
 8102f4c:	d009      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	681b      	ldr	r3, [r3, #0]
 8102f52:	4a16      	ldr	r2, [pc, #88]	; (8102fac <HAL_DMA_Abort_IT+0x298>)
 8102f54:	4293      	cmp	r3, r2
 8102f56:	d004      	beq.n	8102f62 <HAL_DMA_Abort_IT+0x24e>
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	4a14      	ldr	r2, [pc, #80]	; (8102fb0 <HAL_DMA_Abort_IT+0x29c>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d128      	bne.n	8102fb4 <HAL_DMA_Abort_IT+0x2a0>
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	681a      	ldr	r2, [r3, #0]
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	f022 0201 	bic.w	r2, r2, #1
 8102f70:	601a      	str	r2, [r3, #0]
 8102f72:	e027      	b.n	8102fc4 <HAL_DMA_Abort_IT+0x2b0>
 8102f74:	40020010 	.word	0x40020010
 8102f78:	40020028 	.word	0x40020028
 8102f7c:	40020040 	.word	0x40020040
 8102f80:	40020058 	.word	0x40020058
 8102f84:	40020070 	.word	0x40020070
 8102f88:	40020088 	.word	0x40020088
 8102f8c:	400200a0 	.word	0x400200a0
 8102f90:	400200b8 	.word	0x400200b8
 8102f94:	40020410 	.word	0x40020410
 8102f98:	40020428 	.word	0x40020428
 8102f9c:	40020440 	.word	0x40020440
 8102fa0:	40020458 	.word	0x40020458
 8102fa4:	40020470 	.word	0x40020470
 8102fa8:	40020488 	.word	0x40020488
 8102fac:	400204a0 	.word	0x400204a0
 8102fb0:	400204b8 	.word	0x400204b8
 8102fb4:	687b      	ldr	r3, [r7, #4]
 8102fb6:	681b      	ldr	r3, [r3, #0]
 8102fb8:	681a      	ldr	r2, [r3, #0]
 8102fba:	687b      	ldr	r3, [r7, #4]
 8102fbc:	681b      	ldr	r3, [r3, #0]
 8102fbe:	f022 0201 	bic.w	r2, r2, #1
 8102fc2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	681b      	ldr	r3, [r3, #0]
 8102fc8:	4a5c      	ldr	r2, [pc, #368]	; (810313c <HAL_DMA_Abort_IT+0x428>)
 8102fca:	4293      	cmp	r3, r2
 8102fcc:	d072      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	681b      	ldr	r3, [r3, #0]
 8102fd2:	4a5b      	ldr	r2, [pc, #364]	; (8103140 <HAL_DMA_Abort_IT+0x42c>)
 8102fd4:	4293      	cmp	r3, r2
 8102fd6:	d06d      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	4a59      	ldr	r2, [pc, #356]	; (8103144 <HAL_DMA_Abort_IT+0x430>)
 8102fde:	4293      	cmp	r3, r2
 8102fe0:	d068      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	4a58      	ldr	r2, [pc, #352]	; (8103148 <HAL_DMA_Abort_IT+0x434>)
 8102fe8:	4293      	cmp	r3, r2
 8102fea:	d063      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	681b      	ldr	r3, [r3, #0]
 8102ff0:	4a56      	ldr	r2, [pc, #344]	; (810314c <HAL_DMA_Abort_IT+0x438>)
 8102ff2:	4293      	cmp	r3, r2
 8102ff4:	d05e      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	681b      	ldr	r3, [r3, #0]
 8102ffa:	4a55      	ldr	r2, [pc, #340]	; (8103150 <HAL_DMA_Abort_IT+0x43c>)
 8102ffc:	4293      	cmp	r3, r2
 8102ffe:	d059      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	4a53      	ldr	r2, [pc, #332]	; (8103154 <HAL_DMA_Abort_IT+0x440>)
 8103006:	4293      	cmp	r3, r2
 8103008:	d054      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 810300a:	687b      	ldr	r3, [r7, #4]
 810300c:	681b      	ldr	r3, [r3, #0]
 810300e:	4a52      	ldr	r2, [pc, #328]	; (8103158 <HAL_DMA_Abort_IT+0x444>)
 8103010:	4293      	cmp	r3, r2
 8103012:	d04f      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	681b      	ldr	r3, [r3, #0]
 8103018:	4a50      	ldr	r2, [pc, #320]	; (810315c <HAL_DMA_Abort_IT+0x448>)
 810301a:	4293      	cmp	r3, r2
 810301c:	d04a      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	681b      	ldr	r3, [r3, #0]
 8103022:	4a4f      	ldr	r2, [pc, #316]	; (8103160 <HAL_DMA_Abort_IT+0x44c>)
 8103024:	4293      	cmp	r3, r2
 8103026:	d045      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	681b      	ldr	r3, [r3, #0]
 810302c:	4a4d      	ldr	r2, [pc, #308]	; (8103164 <HAL_DMA_Abort_IT+0x450>)
 810302e:	4293      	cmp	r3, r2
 8103030:	d040      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103032:	687b      	ldr	r3, [r7, #4]
 8103034:	681b      	ldr	r3, [r3, #0]
 8103036:	4a4c      	ldr	r2, [pc, #304]	; (8103168 <HAL_DMA_Abort_IT+0x454>)
 8103038:	4293      	cmp	r3, r2
 810303a:	d03b      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	4a4a      	ldr	r2, [pc, #296]	; (810316c <HAL_DMA_Abort_IT+0x458>)
 8103042:	4293      	cmp	r3, r2
 8103044:	d036      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103046:	687b      	ldr	r3, [r7, #4]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	4a49      	ldr	r2, [pc, #292]	; (8103170 <HAL_DMA_Abort_IT+0x45c>)
 810304c:	4293      	cmp	r3, r2
 810304e:	d031      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	681b      	ldr	r3, [r3, #0]
 8103054:	4a47      	ldr	r2, [pc, #284]	; (8103174 <HAL_DMA_Abort_IT+0x460>)
 8103056:	4293      	cmp	r3, r2
 8103058:	d02c      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	4a46      	ldr	r2, [pc, #280]	; (8103178 <HAL_DMA_Abort_IT+0x464>)
 8103060:	4293      	cmp	r3, r2
 8103062:	d027      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103064:	687b      	ldr	r3, [r7, #4]
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	4a44      	ldr	r2, [pc, #272]	; (810317c <HAL_DMA_Abort_IT+0x468>)
 810306a:	4293      	cmp	r3, r2
 810306c:	d022      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 810306e:	687b      	ldr	r3, [r7, #4]
 8103070:	681b      	ldr	r3, [r3, #0]
 8103072:	4a43      	ldr	r2, [pc, #268]	; (8103180 <HAL_DMA_Abort_IT+0x46c>)
 8103074:	4293      	cmp	r3, r2
 8103076:	d01d      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	4a41      	ldr	r2, [pc, #260]	; (8103184 <HAL_DMA_Abort_IT+0x470>)
 810307e:	4293      	cmp	r3, r2
 8103080:	d018      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	4a40      	ldr	r2, [pc, #256]	; (8103188 <HAL_DMA_Abort_IT+0x474>)
 8103088:	4293      	cmp	r3, r2
 810308a:	d013      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	681b      	ldr	r3, [r3, #0]
 8103090:	4a3e      	ldr	r2, [pc, #248]	; (810318c <HAL_DMA_Abort_IT+0x478>)
 8103092:	4293      	cmp	r3, r2
 8103094:	d00e      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	4a3d      	ldr	r2, [pc, #244]	; (8103190 <HAL_DMA_Abort_IT+0x47c>)
 810309c:	4293      	cmp	r3, r2
 810309e:	d009      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 81030a0:	687b      	ldr	r3, [r7, #4]
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	4a3b      	ldr	r2, [pc, #236]	; (8103194 <HAL_DMA_Abort_IT+0x480>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d004      	beq.n	81030b4 <HAL_DMA_Abort_IT+0x3a0>
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	681b      	ldr	r3, [r3, #0]
 81030ae:	4a3a      	ldr	r2, [pc, #232]	; (8103198 <HAL_DMA_Abort_IT+0x484>)
 81030b0:	4293      	cmp	r3, r2
 81030b2:	d101      	bne.n	81030b8 <HAL_DMA_Abort_IT+0x3a4>
 81030b4:	2301      	movs	r3, #1
 81030b6:	e000      	b.n	81030ba <HAL_DMA_Abort_IT+0x3a6>
 81030b8:	2300      	movs	r3, #0
 81030ba:	2b00      	cmp	r3, #0
 81030bc:	d028      	beq.n	8103110 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81030be:	687b      	ldr	r3, [r7, #4]
 81030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030c2:	681a      	ldr	r2, [r3, #0]
 81030c4:	687b      	ldr	r3, [r7, #4]
 81030c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81030cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81030d4:	687b      	ldr	r3, [r7, #4]
 81030d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030d8:	f003 031f 	and.w	r3, r3, #31
 81030dc:	2201      	movs	r2, #1
 81030de:	409a      	lsls	r2, r3
 81030e0:	68fb      	ldr	r3, [r7, #12]
 81030e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81030e8:	687a      	ldr	r2, [r7, #4]
 81030ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81030ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81030f2:	2b00      	cmp	r3, #0
 81030f4:	d00c      	beq.n	8103110 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81030fa:	681a      	ldr	r2, [r3, #0]
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8103104:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810310a:	687a      	ldr	r2, [r7, #4]
 810310c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810310e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	2200      	movs	r2, #0
 8103114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103118:	687b      	ldr	r3, [r7, #4]
 810311a:	2201      	movs	r2, #1
 810311c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103124:	2b00      	cmp	r3, #0
 8103126:	d003      	beq.n	8103130 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8103128:	687b      	ldr	r3, [r7, #4]
 810312a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810312c:	6878      	ldr	r0, [r7, #4]
 810312e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103130:	2300      	movs	r3, #0
}
 8103132:	4618      	mov	r0, r3
 8103134:	3710      	adds	r7, #16
 8103136:	46bd      	mov	sp, r7
 8103138:	bd80      	pop	{r7, pc}
 810313a:	bf00      	nop
 810313c:	40020010 	.word	0x40020010
 8103140:	40020028 	.word	0x40020028
 8103144:	40020040 	.word	0x40020040
 8103148:	40020058 	.word	0x40020058
 810314c:	40020070 	.word	0x40020070
 8103150:	40020088 	.word	0x40020088
 8103154:	400200a0 	.word	0x400200a0
 8103158:	400200b8 	.word	0x400200b8
 810315c:	40020410 	.word	0x40020410
 8103160:	40020428 	.word	0x40020428
 8103164:	40020440 	.word	0x40020440
 8103168:	40020458 	.word	0x40020458
 810316c:	40020470 	.word	0x40020470
 8103170:	40020488 	.word	0x40020488
 8103174:	400204a0 	.word	0x400204a0
 8103178:	400204b8 	.word	0x400204b8
 810317c:	58025408 	.word	0x58025408
 8103180:	5802541c 	.word	0x5802541c
 8103184:	58025430 	.word	0x58025430
 8103188:	58025444 	.word	0x58025444
 810318c:	58025458 	.word	0x58025458
 8103190:	5802546c 	.word	0x5802546c
 8103194:	58025480 	.word	0x58025480
 8103198:	58025494 	.word	0x58025494

0810319c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 810319c:	b580      	push	{r7, lr}
 810319e:	b08a      	sub	sp, #40	; 0x28
 81031a0:	af00      	add	r7, sp, #0
 81031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 81031a4:	2300      	movs	r3, #0
 81031a6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 81031a8:	4b67      	ldr	r3, [pc, #412]	; (8103348 <HAL_DMA_IRQHandler+0x1ac>)
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	4a67      	ldr	r2, [pc, #412]	; (810334c <HAL_DMA_IRQHandler+0x1b0>)
 81031ae:	fba2 2303 	umull	r2, r3, r2, r3
 81031b2:	0a9b      	lsrs	r3, r3, #10
 81031b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031ba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81031bc:	687b      	ldr	r3, [r7, #4]
 81031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031c0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 81031c2:	6a3b      	ldr	r3, [r7, #32]
 81031c4:	681b      	ldr	r3, [r3, #0]
 81031c6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 81031c8:	69fb      	ldr	r3, [r7, #28]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	4a5f      	ldr	r2, [pc, #380]	; (8103350 <HAL_DMA_IRQHandler+0x1b4>)
 81031d4:	4293      	cmp	r3, r2
 81031d6:	d04a      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 81031d8:	687b      	ldr	r3, [r7, #4]
 81031da:	681b      	ldr	r3, [r3, #0]
 81031dc:	4a5d      	ldr	r2, [pc, #372]	; (8103354 <HAL_DMA_IRQHandler+0x1b8>)
 81031de:	4293      	cmp	r3, r2
 81031e0:	d045      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	4a5c      	ldr	r2, [pc, #368]	; (8103358 <HAL_DMA_IRQHandler+0x1bc>)
 81031e8:	4293      	cmp	r3, r2
 81031ea:	d040      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	681b      	ldr	r3, [r3, #0]
 81031f0:	4a5a      	ldr	r2, [pc, #360]	; (810335c <HAL_DMA_IRQHandler+0x1c0>)
 81031f2:	4293      	cmp	r3, r2
 81031f4:	d03b      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	681b      	ldr	r3, [r3, #0]
 81031fa:	4a59      	ldr	r2, [pc, #356]	; (8103360 <HAL_DMA_IRQHandler+0x1c4>)
 81031fc:	4293      	cmp	r3, r2
 81031fe:	d036      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	681b      	ldr	r3, [r3, #0]
 8103204:	4a57      	ldr	r2, [pc, #348]	; (8103364 <HAL_DMA_IRQHandler+0x1c8>)
 8103206:	4293      	cmp	r3, r2
 8103208:	d031      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	4a56      	ldr	r2, [pc, #344]	; (8103368 <HAL_DMA_IRQHandler+0x1cc>)
 8103210:	4293      	cmp	r3, r2
 8103212:	d02c      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	4a54      	ldr	r2, [pc, #336]	; (810336c <HAL_DMA_IRQHandler+0x1d0>)
 810321a:	4293      	cmp	r3, r2
 810321c:	d027      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	4a53      	ldr	r2, [pc, #332]	; (8103370 <HAL_DMA_IRQHandler+0x1d4>)
 8103224:	4293      	cmp	r3, r2
 8103226:	d022      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	681b      	ldr	r3, [r3, #0]
 810322c:	4a51      	ldr	r2, [pc, #324]	; (8103374 <HAL_DMA_IRQHandler+0x1d8>)
 810322e:	4293      	cmp	r3, r2
 8103230:	d01d      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	4a50      	ldr	r2, [pc, #320]	; (8103378 <HAL_DMA_IRQHandler+0x1dc>)
 8103238:	4293      	cmp	r3, r2
 810323a:	d018      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	681b      	ldr	r3, [r3, #0]
 8103240:	4a4e      	ldr	r2, [pc, #312]	; (810337c <HAL_DMA_IRQHandler+0x1e0>)
 8103242:	4293      	cmp	r3, r2
 8103244:	d013      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	681b      	ldr	r3, [r3, #0]
 810324a:	4a4d      	ldr	r2, [pc, #308]	; (8103380 <HAL_DMA_IRQHandler+0x1e4>)
 810324c:	4293      	cmp	r3, r2
 810324e:	d00e      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	4a4b      	ldr	r2, [pc, #300]	; (8103384 <HAL_DMA_IRQHandler+0x1e8>)
 8103256:	4293      	cmp	r3, r2
 8103258:	d009      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	681b      	ldr	r3, [r3, #0]
 810325e:	4a4a      	ldr	r2, [pc, #296]	; (8103388 <HAL_DMA_IRQHandler+0x1ec>)
 8103260:	4293      	cmp	r3, r2
 8103262:	d004      	beq.n	810326e <HAL_DMA_IRQHandler+0xd2>
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	4a48      	ldr	r2, [pc, #288]	; (810338c <HAL_DMA_IRQHandler+0x1f0>)
 810326a:	4293      	cmp	r3, r2
 810326c:	d101      	bne.n	8103272 <HAL_DMA_IRQHandler+0xd6>
 810326e:	2301      	movs	r3, #1
 8103270:	e000      	b.n	8103274 <HAL_DMA_IRQHandler+0xd8>
 8103272:	2300      	movs	r3, #0
 8103274:	2b00      	cmp	r3, #0
 8103276:	f000 842b 	beq.w	8103ad0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810327e:	f003 031f 	and.w	r3, r3, #31
 8103282:	2208      	movs	r2, #8
 8103284:	409a      	lsls	r2, r3
 8103286:	69bb      	ldr	r3, [r7, #24]
 8103288:	4013      	ands	r3, r2
 810328a:	2b00      	cmp	r3, #0
 810328c:	f000 80a2 	beq.w	81033d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	681b      	ldr	r3, [r3, #0]
 8103294:	4a2e      	ldr	r2, [pc, #184]	; (8103350 <HAL_DMA_IRQHandler+0x1b4>)
 8103296:	4293      	cmp	r3, r2
 8103298:	d04a      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 810329a:	687b      	ldr	r3, [r7, #4]
 810329c:	681b      	ldr	r3, [r3, #0]
 810329e:	4a2d      	ldr	r2, [pc, #180]	; (8103354 <HAL_DMA_IRQHandler+0x1b8>)
 81032a0:	4293      	cmp	r3, r2
 81032a2:	d045      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032a4:	687b      	ldr	r3, [r7, #4]
 81032a6:	681b      	ldr	r3, [r3, #0]
 81032a8:	4a2b      	ldr	r2, [pc, #172]	; (8103358 <HAL_DMA_IRQHandler+0x1bc>)
 81032aa:	4293      	cmp	r3, r2
 81032ac:	d040      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	681b      	ldr	r3, [r3, #0]
 81032b2:	4a2a      	ldr	r2, [pc, #168]	; (810335c <HAL_DMA_IRQHandler+0x1c0>)
 81032b4:	4293      	cmp	r3, r2
 81032b6:	d03b      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032b8:	687b      	ldr	r3, [r7, #4]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	4a28      	ldr	r2, [pc, #160]	; (8103360 <HAL_DMA_IRQHandler+0x1c4>)
 81032be:	4293      	cmp	r3, r2
 81032c0:	d036      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032c2:	687b      	ldr	r3, [r7, #4]
 81032c4:	681b      	ldr	r3, [r3, #0]
 81032c6:	4a27      	ldr	r2, [pc, #156]	; (8103364 <HAL_DMA_IRQHandler+0x1c8>)
 81032c8:	4293      	cmp	r3, r2
 81032ca:	d031      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	681b      	ldr	r3, [r3, #0]
 81032d0:	4a25      	ldr	r2, [pc, #148]	; (8103368 <HAL_DMA_IRQHandler+0x1cc>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d02c      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	4a24      	ldr	r2, [pc, #144]	; (810336c <HAL_DMA_IRQHandler+0x1d0>)
 81032dc:	4293      	cmp	r3, r2
 81032de:	d027      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	681b      	ldr	r3, [r3, #0]
 81032e4:	4a22      	ldr	r2, [pc, #136]	; (8103370 <HAL_DMA_IRQHandler+0x1d4>)
 81032e6:	4293      	cmp	r3, r2
 81032e8:	d022      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	681b      	ldr	r3, [r3, #0]
 81032ee:	4a21      	ldr	r2, [pc, #132]	; (8103374 <HAL_DMA_IRQHandler+0x1d8>)
 81032f0:	4293      	cmp	r3, r2
 81032f2:	d01d      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032f4:	687b      	ldr	r3, [r7, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
 81032f8:	4a1f      	ldr	r2, [pc, #124]	; (8103378 <HAL_DMA_IRQHandler+0x1dc>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d018      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	681b      	ldr	r3, [r3, #0]
 8103302:	4a1e      	ldr	r2, [pc, #120]	; (810337c <HAL_DMA_IRQHandler+0x1e0>)
 8103304:	4293      	cmp	r3, r2
 8103306:	d013      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	4a1c      	ldr	r2, [pc, #112]	; (8103380 <HAL_DMA_IRQHandler+0x1e4>)
 810330e:	4293      	cmp	r3, r2
 8103310:	d00e      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 8103312:	687b      	ldr	r3, [r7, #4]
 8103314:	681b      	ldr	r3, [r3, #0]
 8103316:	4a1b      	ldr	r2, [pc, #108]	; (8103384 <HAL_DMA_IRQHandler+0x1e8>)
 8103318:	4293      	cmp	r3, r2
 810331a:	d009      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	681b      	ldr	r3, [r3, #0]
 8103320:	4a19      	ldr	r2, [pc, #100]	; (8103388 <HAL_DMA_IRQHandler+0x1ec>)
 8103322:	4293      	cmp	r3, r2
 8103324:	d004      	beq.n	8103330 <HAL_DMA_IRQHandler+0x194>
 8103326:	687b      	ldr	r3, [r7, #4]
 8103328:	681b      	ldr	r3, [r3, #0]
 810332a:	4a18      	ldr	r2, [pc, #96]	; (810338c <HAL_DMA_IRQHandler+0x1f0>)
 810332c:	4293      	cmp	r3, r2
 810332e:	d12f      	bne.n	8103390 <HAL_DMA_IRQHandler+0x1f4>
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	f003 0304 	and.w	r3, r3, #4
 810333a:	2b00      	cmp	r3, #0
 810333c:	bf14      	ite	ne
 810333e:	2301      	movne	r3, #1
 8103340:	2300      	moveq	r3, #0
 8103342:	b2db      	uxtb	r3, r3
 8103344:	e02e      	b.n	81033a4 <HAL_DMA_IRQHandler+0x208>
 8103346:	bf00      	nop
 8103348:	10000000 	.word	0x10000000
 810334c:	1b4e81b5 	.word	0x1b4e81b5
 8103350:	40020010 	.word	0x40020010
 8103354:	40020028 	.word	0x40020028
 8103358:	40020040 	.word	0x40020040
 810335c:	40020058 	.word	0x40020058
 8103360:	40020070 	.word	0x40020070
 8103364:	40020088 	.word	0x40020088
 8103368:	400200a0 	.word	0x400200a0
 810336c:	400200b8 	.word	0x400200b8
 8103370:	40020410 	.word	0x40020410
 8103374:	40020428 	.word	0x40020428
 8103378:	40020440 	.word	0x40020440
 810337c:	40020458 	.word	0x40020458
 8103380:	40020470 	.word	0x40020470
 8103384:	40020488 	.word	0x40020488
 8103388:	400204a0 	.word	0x400204a0
 810338c:	400204b8 	.word	0x400204b8
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	681b      	ldr	r3, [r3, #0]
 8103396:	f003 0308 	and.w	r3, r3, #8
 810339a:	2b00      	cmp	r3, #0
 810339c:	bf14      	ite	ne
 810339e:	2301      	movne	r3, #1
 81033a0:	2300      	moveq	r3, #0
 81033a2:	b2db      	uxtb	r3, r3
 81033a4:	2b00      	cmp	r3, #0
 81033a6:	d015      	beq.n	81033d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	681a      	ldr	r2, [r3, #0]
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	f022 0204 	bic.w	r2, r2, #4
 81033b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033bc:	f003 031f 	and.w	r3, r3, #31
 81033c0:	2208      	movs	r2, #8
 81033c2:	409a      	lsls	r2, r3
 81033c4:	6a3b      	ldr	r3, [r7, #32]
 81033c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033cc:	f043 0201 	orr.w	r2, r3, #1
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81033d8:	f003 031f 	and.w	r3, r3, #31
 81033dc:	69ba      	ldr	r2, [r7, #24]
 81033de:	fa22 f303 	lsr.w	r3, r2, r3
 81033e2:	f003 0301 	and.w	r3, r3, #1
 81033e6:	2b00      	cmp	r3, #0
 81033e8:	d06e      	beq.n	81034c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81033ea:	687b      	ldr	r3, [r7, #4]
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	4a69      	ldr	r2, [pc, #420]	; (8103594 <HAL_DMA_IRQHandler+0x3f8>)
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d04a      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	4a67      	ldr	r2, [pc, #412]	; (8103598 <HAL_DMA_IRQHandler+0x3fc>)
 81033fa:	4293      	cmp	r3, r2
 81033fc:	d045      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 81033fe:	687b      	ldr	r3, [r7, #4]
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	4a66      	ldr	r2, [pc, #408]	; (810359c <HAL_DMA_IRQHandler+0x400>)
 8103404:	4293      	cmp	r3, r2
 8103406:	d040      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	4a64      	ldr	r2, [pc, #400]	; (81035a0 <HAL_DMA_IRQHandler+0x404>)
 810340e:	4293      	cmp	r3, r2
 8103410:	d03b      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103412:	687b      	ldr	r3, [r7, #4]
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	4a63      	ldr	r2, [pc, #396]	; (81035a4 <HAL_DMA_IRQHandler+0x408>)
 8103418:	4293      	cmp	r3, r2
 810341a:	d036      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 810341c:	687b      	ldr	r3, [r7, #4]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	4a61      	ldr	r2, [pc, #388]	; (81035a8 <HAL_DMA_IRQHandler+0x40c>)
 8103422:	4293      	cmp	r3, r2
 8103424:	d031      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	4a60      	ldr	r2, [pc, #384]	; (81035ac <HAL_DMA_IRQHandler+0x410>)
 810342c:	4293      	cmp	r3, r2
 810342e:	d02c      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103430:	687b      	ldr	r3, [r7, #4]
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	4a5e      	ldr	r2, [pc, #376]	; (81035b0 <HAL_DMA_IRQHandler+0x414>)
 8103436:	4293      	cmp	r3, r2
 8103438:	d027      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 810343a:	687b      	ldr	r3, [r7, #4]
 810343c:	681b      	ldr	r3, [r3, #0]
 810343e:	4a5d      	ldr	r2, [pc, #372]	; (81035b4 <HAL_DMA_IRQHandler+0x418>)
 8103440:	4293      	cmp	r3, r2
 8103442:	d022      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	4a5b      	ldr	r2, [pc, #364]	; (81035b8 <HAL_DMA_IRQHandler+0x41c>)
 810344a:	4293      	cmp	r3, r2
 810344c:	d01d      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	681b      	ldr	r3, [r3, #0]
 8103452:	4a5a      	ldr	r2, [pc, #360]	; (81035bc <HAL_DMA_IRQHandler+0x420>)
 8103454:	4293      	cmp	r3, r2
 8103456:	d018      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	4a58      	ldr	r2, [pc, #352]	; (81035c0 <HAL_DMA_IRQHandler+0x424>)
 810345e:	4293      	cmp	r3, r2
 8103460:	d013      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	681b      	ldr	r3, [r3, #0]
 8103466:	4a57      	ldr	r2, [pc, #348]	; (81035c4 <HAL_DMA_IRQHandler+0x428>)
 8103468:	4293      	cmp	r3, r2
 810346a:	d00e      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	681b      	ldr	r3, [r3, #0]
 8103470:	4a55      	ldr	r2, [pc, #340]	; (81035c8 <HAL_DMA_IRQHandler+0x42c>)
 8103472:	4293      	cmp	r3, r2
 8103474:	d009      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103476:	687b      	ldr	r3, [r7, #4]
 8103478:	681b      	ldr	r3, [r3, #0]
 810347a:	4a54      	ldr	r2, [pc, #336]	; (81035cc <HAL_DMA_IRQHandler+0x430>)
 810347c:	4293      	cmp	r3, r2
 810347e:	d004      	beq.n	810348a <HAL_DMA_IRQHandler+0x2ee>
 8103480:	687b      	ldr	r3, [r7, #4]
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	4a52      	ldr	r2, [pc, #328]	; (81035d0 <HAL_DMA_IRQHandler+0x434>)
 8103486:	4293      	cmp	r3, r2
 8103488:	d10a      	bne.n	81034a0 <HAL_DMA_IRQHandler+0x304>
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	681b      	ldr	r3, [r3, #0]
 810348e:	695b      	ldr	r3, [r3, #20]
 8103490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103494:	2b00      	cmp	r3, #0
 8103496:	bf14      	ite	ne
 8103498:	2301      	movne	r3, #1
 810349a:	2300      	moveq	r3, #0
 810349c:	b2db      	uxtb	r3, r3
 810349e:	e003      	b.n	81034a8 <HAL_DMA_IRQHandler+0x30c>
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	681b      	ldr	r3, [r3, #0]
 81034a4:	681b      	ldr	r3, [r3, #0]
 81034a6:	2300      	movs	r3, #0
 81034a8:	2b00      	cmp	r3, #0
 81034aa:	d00d      	beq.n	81034c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034b0:	f003 031f 	and.w	r3, r3, #31
 81034b4:	2201      	movs	r2, #1
 81034b6:	409a      	lsls	r2, r3
 81034b8:	6a3b      	ldr	r3, [r7, #32]
 81034ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81034bc:	687b      	ldr	r3, [r7, #4]
 81034be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034c0:	f043 0202 	orr.w	r2, r3, #2
 81034c4:	687b      	ldr	r3, [r7, #4]
 81034c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81034c8:	687b      	ldr	r3, [r7, #4]
 81034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81034cc:	f003 031f 	and.w	r3, r3, #31
 81034d0:	2204      	movs	r2, #4
 81034d2:	409a      	lsls	r2, r3
 81034d4:	69bb      	ldr	r3, [r7, #24]
 81034d6:	4013      	ands	r3, r2
 81034d8:	2b00      	cmp	r3, #0
 81034da:	f000 808f 	beq.w	81035fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	681b      	ldr	r3, [r3, #0]
 81034e2:	4a2c      	ldr	r2, [pc, #176]	; (8103594 <HAL_DMA_IRQHandler+0x3f8>)
 81034e4:	4293      	cmp	r3, r2
 81034e6:	d04a      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	4a2a      	ldr	r2, [pc, #168]	; (8103598 <HAL_DMA_IRQHandler+0x3fc>)
 81034ee:	4293      	cmp	r3, r2
 81034f0:	d045      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	681b      	ldr	r3, [r3, #0]
 81034f6:	4a29      	ldr	r2, [pc, #164]	; (810359c <HAL_DMA_IRQHandler+0x400>)
 81034f8:	4293      	cmp	r3, r2
 81034fa:	d040      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	681b      	ldr	r3, [r3, #0]
 8103500:	4a27      	ldr	r2, [pc, #156]	; (81035a0 <HAL_DMA_IRQHandler+0x404>)
 8103502:	4293      	cmp	r3, r2
 8103504:	d03b      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	681b      	ldr	r3, [r3, #0]
 810350a:	4a26      	ldr	r2, [pc, #152]	; (81035a4 <HAL_DMA_IRQHandler+0x408>)
 810350c:	4293      	cmp	r3, r2
 810350e:	d036      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	681b      	ldr	r3, [r3, #0]
 8103514:	4a24      	ldr	r2, [pc, #144]	; (81035a8 <HAL_DMA_IRQHandler+0x40c>)
 8103516:	4293      	cmp	r3, r2
 8103518:	d031      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	681b      	ldr	r3, [r3, #0]
 810351e:	4a23      	ldr	r2, [pc, #140]	; (81035ac <HAL_DMA_IRQHandler+0x410>)
 8103520:	4293      	cmp	r3, r2
 8103522:	d02c      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	681b      	ldr	r3, [r3, #0]
 8103528:	4a21      	ldr	r2, [pc, #132]	; (81035b0 <HAL_DMA_IRQHandler+0x414>)
 810352a:	4293      	cmp	r3, r2
 810352c:	d027      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 810352e:	687b      	ldr	r3, [r7, #4]
 8103530:	681b      	ldr	r3, [r3, #0]
 8103532:	4a20      	ldr	r2, [pc, #128]	; (81035b4 <HAL_DMA_IRQHandler+0x418>)
 8103534:	4293      	cmp	r3, r2
 8103536:	d022      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103538:	687b      	ldr	r3, [r7, #4]
 810353a:	681b      	ldr	r3, [r3, #0]
 810353c:	4a1e      	ldr	r2, [pc, #120]	; (81035b8 <HAL_DMA_IRQHandler+0x41c>)
 810353e:	4293      	cmp	r3, r2
 8103540:	d01d      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103542:	687b      	ldr	r3, [r7, #4]
 8103544:	681b      	ldr	r3, [r3, #0]
 8103546:	4a1d      	ldr	r2, [pc, #116]	; (81035bc <HAL_DMA_IRQHandler+0x420>)
 8103548:	4293      	cmp	r3, r2
 810354a:	d018      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	681b      	ldr	r3, [r3, #0]
 8103550:	4a1b      	ldr	r2, [pc, #108]	; (81035c0 <HAL_DMA_IRQHandler+0x424>)
 8103552:	4293      	cmp	r3, r2
 8103554:	d013      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103556:	687b      	ldr	r3, [r7, #4]
 8103558:	681b      	ldr	r3, [r3, #0]
 810355a:	4a1a      	ldr	r2, [pc, #104]	; (81035c4 <HAL_DMA_IRQHandler+0x428>)
 810355c:	4293      	cmp	r3, r2
 810355e:	d00e      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	4a18      	ldr	r2, [pc, #96]	; (81035c8 <HAL_DMA_IRQHandler+0x42c>)
 8103566:	4293      	cmp	r3, r2
 8103568:	d009      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	681b      	ldr	r3, [r3, #0]
 810356e:	4a17      	ldr	r2, [pc, #92]	; (81035cc <HAL_DMA_IRQHandler+0x430>)
 8103570:	4293      	cmp	r3, r2
 8103572:	d004      	beq.n	810357e <HAL_DMA_IRQHandler+0x3e2>
 8103574:	687b      	ldr	r3, [r7, #4]
 8103576:	681b      	ldr	r3, [r3, #0]
 8103578:	4a15      	ldr	r2, [pc, #84]	; (81035d0 <HAL_DMA_IRQHandler+0x434>)
 810357a:	4293      	cmp	r3, r2
 810357c:	d12a      	bne.n	81035d4 <HAL_DMA_IRQHandler+0x438>
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	f003 0302 	and.w	r3, r3, #2
 8103588:	2b00      	cmp	r3, #0
 810358a:	bf14      	ite	ne
 810358c:	2301      	movne	r3, #1
 810358e:	2300      	moveq	r3, #0
 8103590:	b2db      	uxtb	r3, r3
 8103592:	e023      	b.n	81035dc <HAL_DMA_IRQHandler+0x440>
 8103594:	40020010 	.word	0x40020010
 8103598:	40020028 	.word	0x40020028
 810359c:	40020040 	.word	0x40020040
 81035a0:	40020058 	.word	0x40020058
 81035a4:	40020070 	.word	0x40020070
 81035a8:	40020088 	.word	0x40020088
 81035ac:	400200a0 	.word	0x400200a0
 81035b0:	400200b8 	.word	0x400200b8
 81035b4:	40020410 	.word	0x40020410
 81035b8:	40020428 	.word	0x40020428
 81035bc:	40020440 	.word	0x40020440
 81035c0:	40020458 	.word	0x40020458
 81035c4:	40020470 	.word	0x40020470
 81035c8:	40020488 	.word	0x40020488
 81035cc:	400204a0 	.word	0x400204a0
 81035d0:	400204b8 	.word	0x400204b8
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	2300      	movs	r3, #0
 81035dc:	2b00      	cmp	r3, #0
 81035de:	d00d      	beq.n	81035fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81035e4:	f003 031f 	and.w	r3, r3, #31
 81035e8:	2204      	movs	r2, #4
 81035ea:	409a      	lsls	r2, r3
 81035ec:	6a3b      	ldr	r3, [r7, #32]
 81035ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81035f4:	f043 0204 	orr.w	r2, r3, #4
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103600:	f003 031f 	and.w	r3, r3, #31
 8103604:	2210      	movs	r2, #16
 8103606:	409a      	lsls	r2, r3
 8103608:	69bb      	ldr	r3, [r7, #24]
 810360a:	4013      	ands	r3, r2
 810360c:	2b00      	cmp	r3, #0
 810360e:	f000 80a6 	beq.w	810375e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	4a85      	ldr	r2, [pc, #532]	; (810382c <HAL_DMA_IRQHandler+0x690>)
 8103618:	4293      	cmp	r3, r2
 810361a:	d04a      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	4a83      	ldr	r2, [pc, #524]	; (8103830 <HAL_DMA_IRQHandler+0x694>)
 8103622:	4293      	cmp	r3, r2
 8103624:	d045      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	681b      	ldr	r3, [r3, #0]
 810362a:	4a82      	ldr	r2, [pc, #520]	; (8103834 <HAL_DMA_IRQHandler+0x698>)
 810362c:	4293      	cmp	r3, r2
 810362e:	d040      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103630:	687b      	ldr	r3, [r7, #4]
 8103632:	681b      	ldr	r3, [r3, #0]
 8103634:	4a80      	ldr	r2, [pc, #512]	; (8103838 <HAL_DMA_IRQHandler+0x69c>)
 8103636:	4293      	cmp	r3, r2
 8103638:	d03b      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 810363a:	687b      	ldr	r3, [r7, #4]
 810363c:	681b      	ldr	r3, [r3, #0]
 810363e:	4a7f      	ldr	r2, [pc, #508]	; (810383c <HAL_DMA_IRQHandler+0x6a0>)
 8103640:	4293      	cmp	r3, r2
 8103642:	d036      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	681b      	ldr	r3, [r3, #0]
 8103648:	4a7d      	ldr	r2, [pc, #500]	; (8103840 <HAL_DMA_IRQHandler+0x6a4>)
 810364a:	4293      	cmp	r3, r2
 810364c:	d031      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 810364e:	687b      	ldr	r3, [r7, #4]
 8103650:	681b      	ldr	r3, [r3, #0]
 8103652:	4a7c      	ldr	r2, [pc, #496]	; (8103844 <HAL_DMA_IRQHandler+0x6a8>)
 8103654:	4293      	cmp	r3, r2
 8103656:	d02c      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103658:	687b      	ldr	r3, [r7, #4]
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	4a7a      	ldr	r2, [pc, #488]	; (8103848 <HAL_DMA_IRQHandler+0x6ac>)
 810365e:	4293      	cmp	r3, r2
 8103660:	d027      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103662:	687b      	ldr	r3, [r7, #4]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	4a79      	ldr	r2, [pc, #484]	; (810384c <HAL_DMA_IRQHandler+0x6b0>)
 8103668:	4293      	cmp	r3, r2
 810366a:	d022      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	4a77      	ldr	r2, [pc, #476]	; (8103850 <HAL_DMA_IRQHandler+0x6b4>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d01d      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4a76      	ldr	r2, [pc, #472]	; (8103854 <HAL_DMA_IRQHandler+0x6b8>)
 810367c:	4293      	cmp	r3, r2
 810367e:	d018      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103680:	687b      	ldr	r3, [r7, #4]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	4a74      	ldr	r2, [pc, #464]	; (8103858 <HAL_DMA_IRQHandler+0x6bc>)
 8103686:	4293      	cmp	r3, r2
 8103688:	d013      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 810368a:	687b      	ldr	r3, [r7, #4]
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	4a73      	ldr	r2, [pc, #460]	; (810385c <HAL_DMA_IRQHandler+0x6c0>)
 8103690:	4293      	cmp	r3, r2
 8103692:	d00e      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	4a71      	ldr	r2, [pc, #452]	; (8103860 <HAL_DMA_IRQHandler+0x6c4>)
 810369a:	4293      	cmp	r3, r2
 810369c:	d009      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	681b      	ldr	r3, [r3, #0]
 81036a2:	4a70      	ldr	r2, [pc, #448]	; (8103864 <HAL_DMA_IRQHandler+0x6c8>)
 81036a4:	4293      	cmp	r3, r2
 81036a6:	d004      	beq.n	81036b2 <HAL_DMA_IRQHandler+0x516>
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	4a6e      	ldr	r2, [pc, #440]	; (8103868 <HAL_DMA_IRQHandler+0x6cc>)
 81036ae:	4293      	cmp	r3, r2
 81036b0:	d10a      	bne.n	81036c8 <HAL_DMA_IRQHandler+0x52c>
 81036b2:	687b      	ldr	r3, [r7, #4]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	f003 0308 	and.w	r3, r3, #8
 81036bc:	2b00      	cmp	r3, #0
 81036be:	bf14      	ite	ne
 81036c0:	2301      	movne	r3, #1
 81036c2:	2300      	moveq	r3, #0
 81036c4:	b2db      	uxtb	r3, r3
 81036c6:	e009      	b.n	81036dc <HAL_DMA_IRQHandler+0x540>
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	681b      	ldr	r3, [r3, #0]
 81036cc:	681b      	ldr	r3, [r3, #0]
 81036ce:	f003 0304 	and.w	r3, r3, #4
 81036d2:	2b00      	cmp	r3, #0
 81036d4:	bf14      	ite	ne
 81036d6:	2301      	movne	r3, #1
 81036d8:	2300      	moveq	r3, #0
 81036da:	b2db      	uxtb	r3, r3
 81036dc:	2b00      	cmp	r3, #0
 81036de:	d03e      	beq.n	810375e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81036e0:	687b      	ldr	r3, [r7, #4]
 81036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81036e4:	f003 031f 	and.w	r3, r3, #31
 81036e8:	2210      	movs	r2, #16
 81036ea:	409a      	lsls	r2, r3
 81036ec:	6a3b      	ldr	r3, [r7, #32]
 81036ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	681b      	ldr	r3, [r3, #0]
 81036f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81036fa:	2b00      	cmp	r3, #0
 81036fc:	d018      	beq.n	8103730 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	681b      	ldr	r3, [r3, #0]
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103708:	2b00      	cmp	r3, #0
 810370a:	d108      	bne.n	810371e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810370c:	687b      	ldr	r3, [r7, #4]
 810370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103710:	2b00      	cmp	r3, #0
 8103712:	d024      	beq.n	810375e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8103714:	687b      	ldr	r3, [r7, #4]
 8103716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103718:	6878      	ldr	r0, [r7, #4]
 810371a:	4798      	blx	r3
 810371c:	e01f      	b.n	810375e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103722:	2b00      	cmp	r3, #0
 8103724:	d01b      	beq.n	810375e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8103726:	687b      	ldr	r3, [r7, #4]
 8103728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810372a:	6878      	ldr	r0, [r7, #4]
 810372c:	4798      	blx	r3
 810372e:	e016      	b.n	810375e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810373a:	2b00      	cmp	r3, #0
 810373c:	d107      	bne.n	810374e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	681b      	ldr	r3, [r3, #0]
 8103742:	681a      	ldr	r2, [r3, #0]
 8103744:	687b      	ldr	r3, [r7, #4]
 8103746:	681b      	ldr	r3, [r3, #0]
 8103748:	f022 0208 	bic.w	r2, r2, #8
 810374c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103752:	2b00      	cmp	r3, #0
 8103754:	d003      	beq.n	810375e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810375a:	6878      	ldr	r0, [r7, #4]
 810375c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103762:	f003 031f 	and.w	r3, r3, #31
 8103766:	2220      	movs	r2, #32
 8103768:	409a      	lsls	r2, r3
 810376a:	69bb      	ldr	r3, [r7, #24]
 810376c:	4013      	ands	r3, r2
 810376e:	2b00      	cmp	r3, #0
 8103770:	f000 8110 	beq.w	8103994 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8103774:	687b      	ldr	r3, [r7, #4]
 8103776:	681b      	ldr	r3, [r3, #0]
 8103778:	4a2c      	ldr	r2, [pc, #176]	; (810382c <HAL_DMA_IRQHandler+0x690>)
 810377a:	4293      	cmp	r3, r2
 810377c:	d04a      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 810377e:	687b      	ldr	r3, [r7, #4]
 8103780:	681b      	ldr	r3, [r3, #0]
 8103782:	4a2b      	ldr	r2, [pc, #172]	; (8103830 <HAL_DMA_IRQHandler+0x694>)
 8103784:	4293      	cmp	r3, r2
 8103786:	d045      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	681b      	ldr	r3, [r3, #0]
 810378c:	4a29      	ldr	r2, [pc, #164]	; (8103834 <HAL_DMA_IRQHandler+0x698>)
 810378e:	4293      	cmp	r3, r2
 8103790:	d040      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	4a28      	ldr	r2, [pc, #160]	; (8103838 <HAL_DMA_IRQHandler+0x69c>)
 8103798:	4293      	cmp	r3, r2
 810379a:	d03b      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 810379c:	687b      	ldr	r3, [r7, #4]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a26      	ldr	r2, [pc, #152]	; (810383c <HAL_DMA_IRQHandler+0x6a0>)
 81037a2:	4293      	cmp	r3, r2
 81037a4:	d036      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	4a25      	ldr	r2, [pc, #148]	; (8103840 <HAL_DMA_IRQHandler+0x6a4>)
 81037ac:	4293      	cmp	r3, r2
 81037ae:	d031      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	4a23      	ldr	r2, [pc, #140]	; (8103844 <HAL_DMA_IRQHandler+0x6a8>)
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d02c      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	681b      	ldr	r3, [r3, #0]
 81037be:	4a22      	ldr	r2, [pc, #136]	; (8103848 <HAL_DMA_IRQHandler+0x6ac>)
 81037c0:	4293      	cmp	r3, r2
 81037c2:	d027      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	681b      	ldr	r3, [r3, #0]
 81037c8:	4a20      	ldr	r2, [pc, #128]	; (810384c <HAL_DMA_IRQHandler+0x6b0>)
 81037ca:	4293      	cmp	r3, r2
 81037cc:	d022      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	4a1f      	ldr	r2, [pc, #124]	; (8103850 <HAL_DMA_IRQHandler+0x6b4>)
 81037d4:	4293      	cmp	r3, r2
 81037d6:	d01d      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	681b      	ldr	r3, [r3, #0]
 81037dc:	4a1d      	ldr	r2, [pc, #116]	; (8103854 <HAL_DMA_IRQHandler+0x6b8>)
 81037de:	4293      	cmp	r3, r2
 81037e0:	d018      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037e2:	687b      	ldr	r3, [r7, #4]
 81037e4:	681b      	ldr	r3, [r3, #0]
 81037e6:	4a1c      	ldr	r2, [pc, #112]	; (8103858 <HAL_DMA_IRQHandler+0x6bc>)
 81037e8:	4293      	cmp	r3, r2
 81037ea:	d013      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037ec:	687b      	ldr	r3, [r7, #4]
 81037ee:	681b      	ldr	r3, [r3, #0]
 81037f0:	4a1a      	ldr	r2, [pc, #104]	; (810385c <HAL_DMA_IRQHandler+0x6c0>)
 81037f2:	4293      	cmp	r3, r2
 81037f4:	d00e      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	681b      	ldr	r3, [r3, #0]
 81037fa:	4a19      	ldr	r2, [pc, #100]	; (8103860 <HAL_DMA_IRQHandler+0x6c4>)
 81037fc:	4293      	cmp	r3, r2
 81037fe:	d009      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 8103800:	687b      	ldr	r3, [r7, #4]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	4a17      	ldr	r2, [pc, #92]	; (8103864 <HAL_DMA_IRQHandler+0x6c8>)
 8103806:	4293      	cmp	r3, r2
 8103808:	d004      	beq.n	8103814 <HAL_DMA_IRQHandler+0x678>
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	681b      	ldr	r3, [r3, #0]
 810380e:	4a16      	ldr	r2, [pc, #88]	; (8103868 <HAL_DMA_IRQHandler+0x6cc>)
 8103810:	4293      	cmp	r3, r2
 8103812:	d12b      	bne.n	810386c <HAL_DMA_IRQHandler+0x6d0>
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	681b      	ldr	r3, [r3, #0]
 8103818:	681b      	ldr	r3, [r3, #0]
 810381a:	f003 0310 	and.w	r3, r3, #16
 810381e:	2b00      	cmp	r3, #0
 8103820:	bf14      	ite	ne
 8103822:	2301      	movne	r3, #1
 8103824:	2300      	moveq	r3, #0
 8103826:	b2db      	uxtb	r3, r3
 8103828:	e02a      	b.n	8103880 <HAL_DMA_IRQHandler+0x6e4>
 810382a:	bf00      	nop
 810382c:	40020010 	.word	0x40020010
 8103830:	40020028 	.word	0x40020028
 8103834:	40020040 	.word	0x40020040
 8103838:	40020058 	.word	0x40020058
 810383c:	40020070 	.word	0x40020070
 8103840:	40020088 	.word	0x40020088
 8103844:	400200a0 	.word	0x400200a0
 8103848:	400200b8 	.word	0x400200b8
 810384c:	40020410 	.word	0x40020410
 8103850:	40020428 	.word	0x40020428
 8103854:	40020440 	.word	0x40020440
 8103858:	40020458 	.word	0x40020458
 810385c:	40020470 	.word	0x40020470
 8103860:	40020488 	.word	0x40020488
 8103864:	400204a0 	.word	0x400204a0
 8103868:	400204b8 	.word	0x400204b8
 810386c:	687b      	ldr	r3, [r7, #4]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	f003 0302 	and.w	r3, r3, #2
 8103876:	2b00      	cmp	r3, #0
 8103878:	bf14      	ite	ne
 810387a:	2301      	movne	r3, #1
 810387c:	2300      	moveq	r3, #0
 810387e:	b2db      	uxtb	r3, r3
 8103880:	2b00      	cmp	r3, #0
 8103882:	f000 8087 	beq.w	8103994 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810388a:	f003 031f 	and.w	r3, r3, #31
 810388e:	2220      	movs	r2, #32
 8103890:	409a      	lsls	r2, r3
 8103892:	6a3b      	ldr	r3, [r7, #32]
 8103894:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8103896:	687b      	ldr	r3, [r7, #4]
 8103898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810389c:	b2db      	uxtb	r3, r3
 810389e:	2b04      	cmp	r3, #4
 81038a0:	d139      	bne.n	8103916 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81038a2:	687b      	ldr	r3, [r7, #4]
 81038a4:	681b      	ldr	r3, [r3, #0]
 81038a6:	681a      	ldr	r2, [r3, #0]
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	f022 0216 	bic.w	r2, r2, #22
 81038b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81038b2:	687b      	ldr	r3, [r7, #4]
 81038b4:	681b      	ldr	r3, [r3, #0]
 81038b6:	695a      	ldr	r2, [r3, #20]
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81038c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038c6:	2b00      	cmp	r3, #0
 81038c8:	d103      	bne.n	81038d2 <HAL_DMA_IRQHandler+0x736>
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81038ce:	2b00      	cmp	r3, #0
 81038d0:	d007      	beq.n	81038e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	681b      	ldr	r3, [r3, #0]
 81038d6:	681a      	ldr	r2, [r3, #0]
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	f022 0208 	bic.w	r2, r2, #8
 81038e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81038e6:	f003 031f 	and.w	r3, r3, #31
 81038ea:	223f      	movs	r2, #63	; 0x3f
 81038ec:	409a      	lsls	r2, r3
 81038ee:	6a3b      	ldr	r3, [r7, #32]
 81038f0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81038f2:	687b      	ldr	r3, [r7, #4]
 81038f4:	2200      	movs	r2, #0
 81038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	2201      	movs	r2, #1
 81038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8103902:	687b      	ldr	r3, [r7, #4]
 8103904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103906:	2b00      	cmp	r3, #0
 8103908:	f000 834a 	beq.w	8103fa0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103910:	6878      	ldr	r0, [r7, #4]
 8103912:	4798      	blx	r3
          }
          return;
 8103914:	e344      	b.n	8103fa0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	681b      	ldr	r3, [r3, #0]
 810391a:	681b      	ldr	r3, [r3, #0]
 810391c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103920:	2b00      	cmp	r3, #0
 8103922:	d018      	beq.n	8103956 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	681b      	ldr	r3, [r3, #0]
 8103928:	681b      	ldr	r3, [r3, #0]
 810392a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810392e:	2b00      	cmp	r3, #0
 8103930:	d108      	bne.n	8103944 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8103932:	687b      	ldr	r3, [r7, #4]
 8103934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103936:	2b00      	cmp	r3, #0
 8103938:	d02c      	beq.n	8103994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810393e:	6878      	ldr	r0, [r7, #4]
 8103940:	4798      	blx	r3
 8103942:	e027      	b.n	8103994 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103948:	2b00      	cmp	r3, #0
 810394a:	d023      	beq.n	8103994 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810394c:	687b      	ldr	r3, [r7, #4]
 810394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103950:	6878      	ldr	r0, [r7, #4]
 8103952:	4798      	blx	r3
 8103954:	e01e      	b.n	8103994 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8103956:	687b      	ldr	r3, [r7, #4]
 8103958:	681b      	ldr	r3, [r3, #0]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103960:	2b00      	cmp	r3, #0
 8103962:	d10f      	bne.n	8103984 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8103964:	687b      	ldr	r3, [r7, #4]
 8103966:	681b      	ldr	r3, [r3, #0]
 8103968:	681a      	ldr	r2, [r3, #0]
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	681b      	ldr	r3, [r3, #0]
 810396e:	f022 0210 	bic.w	r2, r2, #16
 8103972:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	2200      	movs	r2, #0
 8103978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	2201      	movs	r2, #1
 8103980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103988:	2b00      	cmp	r3, #0
 810398a:	d003      	beq.n	8103994 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103990:	6878      	ldr	r0, [r7, #4]
 8103992:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103998:	2b00      	cmp	r3, #0
 810399a:	f000 8306 	beq.w	8103faa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039a2:	f003 0301 	and.w	r3, r3, #1
 81039a6:	2b00      	cmp	r3, #0
 81039a8:	f000 8088 	beq.w	8103abc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	2204      	movs	r2, #4
 81039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	681b      	ldr	r3, [r3, #0]
 81039b8:	4a7a      	ldr	r2, [pc, #488]	; (8103ba4 <HAL_DMA_IRQHandler+0xa08>)
 81039ba:	4293      	cmp	r3, r2
 81039bc:	d04a      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	4a79      	ldr	r2, [pc, #484]	; (8103ba8 <HAL_DMA_IRQHandler+0xa0c>)
 81039c4:	4293      	cmp	r3, r2
 81039c6:	d045      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	4a77      	ldr	r2, [pc, #476]	; (8103bac <HAL_DMA_IRQHandler+0xa10>)
 81039ce:	4293      	cmp	r3, r2
 81039d0:	d040      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	4a76      	ldr	r2, [pc, #472]	; (8103bb0 <HAL_DMA_IRQHandler+0xa14>)
 81039d8:	4293      	cmp	r3, r2
 81039da:	d03b      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a74      	ldr	r2, [pc, #464]	; (8103bb4 <HAL_DMA_IRQHandler+0xa18>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d036      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	4a73      	ldr	r2, [pc, #460]	; (8103bb8 <HAL_DMA_IRQHandler+0xa1c>)
 81039ec:	4293      	cmp	r3, r2
 81039ee:	d031      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	4a71      	ldr	r2, [pc, #452]	; (8103bbc <HAL_DMA_IRQHandler+0xa20>)
 81039f6:	4293      	cmp	r3, r2
 81039f8:	d02c      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	681b      	ldr	r3, [r3, #0]
 81039fe:	4a70      	ldr	r2, [pc, #448]	; (8103bc0 <HAL_DMA_IRQHandler+0xa24>)
 8103a00:	4293      	cmp	r3, r2
 8103a02:	d027      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	4a6e      	ldr	r2, [pc, #440]	; (8103bc4 <HAL_DMA_IRQHandler+0xa28>)
 8103a0a:	4293      	cmp	r3, r2
 8103a0c:	d022      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	4a6d      	ldr	r2, [pc, #436]	; (8103bc8 <HAL_DMA_IRQHandler+0xa2c>)
 8103a14:	4293      	cmp	r3, r2
 8103a16:	d01d      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	4a6b      	ldr	r2, [pc, #428]	; (8103bcc <HAL_DMA_IRQHandler+0xa30>)
 8103a1e:	4293      	cmp	r3, r2
 8103a20:	d018      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	4a6a      	ldr	r2, [pc, #424]	; (8103bd0 <HAL_DMA_IRQHandler+0xa34>)
 8103a28:	4293      	cmp	r3, r2
 8103a2a:	d013      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	4a68      	ldr	r2, [pc, #416]	; (8103bd4 <HAL_DMA_IRQHandler+0xa38>)
 8103a32:	4293      	cmp	r3, r2
 8103a34:	d00e      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	4a67      	ldr	r2, [pc, #412]	; (8103bd8 <HAL_DMA_IRQHandler+0xa3c>)
 8103a3c:	4293      	cmp	r3, r2
 8103a3e:	d009      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	4a65      	ldr	r2, [pc, #404]	; (8103bdc <HAL_DMA_IRQHandler+0xa40>)
 8103a46:	4293      	cmp	r3, r2
 8103a48:	d004      	beq.n	8103a54 <HAL_DMA_IRQHandler+0x8b8>
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	4a64      	ldr	r2, [pc, #400]	; (8103be0 <HAL_DMA_IRQHandler+0xa44>)
 8103a50:	4293      	cmp	r3, r2
 8103a52:	d108      	bne.n	8103a66 <HAL_DMA_IRQHandler+0x8ca>
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	681b      	ldr	r3, [r3, #0]
 8103a58:	681a      	ldr	r2, [r3, #0]
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	f022 0201 	bic.w	r2, r2, #1
 8103a62:	601a      	str	r2, [r3, #0]
 8103a64:	e007      	b.n	8103a76 <HAL_DMA_IRQHandler+0x8da>
 8103a66:	687b      	ldr	r3, [r7, #4]
 8103a68:	681b      	ldr	r3, [r3, #0]
 8103a6a:	681a      	ldr	r2, [r3, #0]
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	f022 0201 	bic.w	r2, r2, #1
 8103a74:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8103a76:	68fb      	ldr	r3, [r7, #12]
 8103a78:	3301      	adds	r3, #1
 8103a7a:	60fb      	str	r3, [r7, #12]
 8103a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103a7e:	429a      	cmp	r2, r3
 8103a80:	d307      	bcc.n	8103a92 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8103a82:	687b      	ldr	r3, [r7, #4]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	681b      	ldr	r3, [r3, #0]
 8103a88:	f003 0301 	and.w	r3, r3, #1
 8103a8c:	2b00      	cmp	r3, #0
 8103a8e:	d1f2      	bne.n	8103a76 <HAL_DMA_IRQHandler+0x8da>
 8103a90:	e000      	b.n	8103a94 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8103a92:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	2200      	movs	r2, #0
 8103a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	681b      	ldr	r3, [r3, #0]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	f003 0301 	and.w	r3, r3, #1
 8103aa6:	2b00      	cmp	r3, #0
 8103aa8:	d004      	beq.n	8103ab4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	2203      	movs	r2, #3
 8103aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8103ab2:	e003      	b.n	8103abc <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	2201      	movs	r2, #1
 8103ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ac0:	2b00      	cmp	r3, #0
 8103ac2:	f000 8272 	beq.w	8103faa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103aca:	6878      	ldr	r0, [r7, #4]
 8103acc:	4798      	blx	r3
 8103ace:	e26c      	b.n	8103faa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	4a43      	ldr	r2, [pc, #268]	; (8103be4 <HAL_DMA_IRQHandler+0xa48>)
 8103ad6:	4293      	cmp	r3, r2
 8103ad8:	d022      	beq.n	8103b20 <HAL_DMA_IRQHandler+0x984>
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	681b      	ldr	r3, [r3, #0]
 8103ade:	4a42      	ldr	r2, [pc, #264]	; (8103be8 <HAL_DMA_IRQHandler+0xa4c>)
 8103ae0:	4293      	cmp	r3, r2
 8103ae2:	d01d      	beq.n	8103b20 <HAL_DMA_IRQHandler+0x984>
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	4a40      	ldr	r2, [pc, #256]	; (8103bec <HAL_DMA_IRQHandler+0xa50>)
 8103aea:	4293      	cmp	r3, r2
 8103aec:	d018      	beq.n	8103b20 <HAL_DMA_IRQHandler+0x984>
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	681b      	ldr	r3, [r3, #0]
 8103af2:	4a3f      	ldr	r2, [pc, #252]	; (8103bf0 <HAL_DMA_IRQHandler+0xa54>)
 8103af4:	4293      	cmp	r3, r2
 8103af6:	d013      	beq.n	8103b20 <HAL_DMA_IRQHandler+0x984>
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	4a3d      	ldr	r2, [pc, #244]	; (8103bf4 <HAL_DMA_IRQHandler+0xa58>)
 8103afe:	4293      	cmp	r3, r2
 8103b00:	d00e      	beq.n	8103b20 <HAL_DMA_IRQHandler+0x984>
 8103b02:	687b      	ldr	r3, [r7, #4]
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	4a3c      	ldr	r2, [pc, #240]	; (8103bf8 <HAL_DMA_IRQHandler+0xa5c>)
 8103b08:	4293      	cmp	r3, r2
 8103b0a:	d009      	beq.n	8103b20 <HAL_DMA_IRQHandler+0x984>
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	4a3a      	ldr	r2, [pc, #232]	; (8103bfc <HAL_DMA_IRQHandler+0xa60>)
 8103b12:	4293      	cmp	r3, r2
 8103b14:	d004      	beq.n	8103b20 <HAL_DMA_IRQHandler+0x984>
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	4a39      	ldr	r2, [pc, #228]	; (8103c00 <HAL_DMA_IRQHandler+0xa64>)
 8103b1c:	4293      	cmp	r3, r2
 8103b1e:	d101      	bne.n	8103b24 <HAL_DMA_IRQHandler+0x988>
 8103b20:	2301      	movs	r3, #1
 8103b22:	e000      	b.n	8103b26 <HAL_DMA_IRQHandler+0x98a>
 8103b24:	2300      	movs	r3, #0
 8103b26:	2b00      	cmp	r3, #0
 8103b28:	f000 823f 	beq.w	8103faa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8103b34:	687b      	ldr	r3, [r7, #4]
 8103b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b38:	f003 031f 	and.w	r3, r3, #31
 8103b3c:	2204      	movs	r2, #4
 8103b3e:	409a      	lsls	r2, r3
 8103b40:	697b      	ldr	r3, [r7, #20]
 8103b42:	4013      	ands	r3, r2
 8103b44:	2b00      	cmp	r3, #0
 8103b46:	f000 80cd 	beq.w	8103ce4 <HAL_DMA_IRQHandler+0xb48>
 8103b4a:	693b      	ldr	r3, [r7, #16]
 8103b4c:	f003 0304 	and.w	r3, r3, #4
 8103b50:	2b00      	cmp	r3, #0
 8103b52:	f000 80c7 	beq.w	8103ce4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b5a:	f003 031f 	and.w	r3, r3, #31
 8103b5e:	2204      	movs	r2, #4
 8103b60:	409a      	lsls	r2, r3
 8103b62:	69fb      	ldr	r3, [r7, #28]
 8103b64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103b66:	693b      	ldr	r3, [r7, #16]
 8103b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	d049      	beq.n	8103c04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103b70:	693b      	ldr	r3, [r7, #16]
 8103b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b76:	2b00      	cmp	r3, #0
 8103b78:	d109      	bne.n	8103b8e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b7e:	2b00      	cmp	r3, #0
 8103b80:	f000 8210 	beq.w	8103fa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b88:	6878      	ldr	r0, [r7, #4]
 8103b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103b8c:	e20a      	b.n	8103fa4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b92:	2b00      	cmp	r3, #0
 8103b94:	f000 8206 	beq.w	8103fa4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103b9c:	6878      	ldr	r0, [r7, #4]
 8103b9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ba0:	e200      	b.n	8103fa4 <HAL_DMA_IRQHandler+0xe08>
 8103ba2:	bf00      	nop
 8103ba4:	40020010 	.word	0x40020010
 8103ba8:	40020028 	.word	0x40020028
 8103bac:	40020040 	.word	0x40020040
 8103bb0:	40020058 	.word	0x40020058
 8103bb4:	40020070 	.word	0x40020070
 8103bb8:	40020088 	.word	0x40020088
 8103bbc:	400200a0 	.word	0x400200a0
 8103bc0:	400200b8 	.word	0x400200b8
 8103bc4:	40020410 	.word	0x40020410
 8103bc8:	40020428 	.word	0x40020428
 8103bcc:	40020440 	.word	0x40020440
 8103bd0:	40020458 	.word	0x40020458
 8103bd4:	40020470 	.word	0x40020470
 8103bd8:	40020488 	.word	0x40020488
 8103bdc:	400204a0 	.word	0x400204a0
 8103be0:	400204b8 	.word	0x400204b8
 8103be4:	58025408 	.word	0x58025408
 8103be8:	5802541c 	.word	0x5802541c
 8103bec:	58025430 	.word	0x58025430
 8103bf0:	58025444 	.word	0x58025444
 8103bf4:	58025458 	.word	0x58025458
 8103bf8:	5802546c 	.word	0x5802546c
 8103bfc:	58025480 	.word	0x58025480
 8103c00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103c04:	693b      	ldr	r3, [r7, #16]
 8103c06:	f003 0320 	and.w	r3, r3, #32
 8103c0a:	2b00      	cmp	r3, #0
 8103c0c:	d160      	bne.n	8103cd0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	681b      	ldr	r3, [r3, #0]
 8103c12:	4a8c      	ldr	r2, [pc, #560]	; (8103e44 <HAL_DMA_IRQHandler+0xca8>)
 8103c14:	4293      	cmp	r3, r2
 8103c16:	d04a      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c18:	687b      	ldr	r3, [r7, #4]
 8103c1a:	681b      	ldr	r3, [r3, #0]
 8103c1c:	4a8a      	ldr	r2, [pc, #552]	; (8103e48 <HAL_DMA_IRQHandler+0xcac>)
 8103c1e:	4293      	cmp	r3, r2
 8103c20:	d045      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	681b      	ldr	r3, [r3, #0]
 8103c26:	4a89      	ldr	r2, [pc, #548]	; (8103e4c <HAL_DMA_IRQHandler+0xcb0>)
 8103c28:	4293      	cmp	r3, r2
 8103c2a:	d040      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c2c:	687b      	ldr	r3, [r7, #4]
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	4a87      	ldr	r2, [pc, #540]	; (8103e50 <HAL_DMA_IRQHandler+0xcb4>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d03b      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	681b      	ldr	r3, [r3, #0]
 8103c3a:	4a86      	ldr	r2, [pc, #536]	; (8103e54 <HAL_DMA_IRQHandler+0xcb8>)
 8103c3c:	4293      	cmp	r3, r2
 8103c3e:	d036      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c40:	687b      	ldr	r3, [r7, #4]
 8103c42:	681b      	ldr	r3, [r3, #0]
 8103c44:	4a84      	ldr	r2, [pc, #528]	; (8103e58 <HAL_DMA_IRQHandler+0xcbc>)
 8103c46:	4293      	cmp	r3, r2
 8103c48:	d031      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	4a83      	ldr	r2, [pc, #524]	; (8103e5c <HAL_DMA_IRQHandler+0xcc0>)
 8103c50:	4293      	cmp	r3, r2
 8103c52:	d02c      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c54:	687b      	ldr	r3, [r7, #4]
 8103c56:	681b      	ldr	r3, [r3, #0]
 8103c58:	4a81      	ldr	r2, [pc, #516]	; (8103e60 <HAL_DMA_IRQHandler+0xcc4>)
 8103c5a:	4293      	cmp	r3, r2
 8103c5c:	d027      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681b      	ldr	r3, [r3, #0]
 8103c62:	4a80      	ldr	r2, [pc, #512]	; (8103e64 <HAL_DMA_IRQHandler+0xcc8>)
 8103c64:	4293      	cmp	r3, r2
 8103c66:	d022      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	681b      	ldr	r3, [r3, #0]
 8103c6c:	4a7e      	ldr	r2, [pc, #504]	; (8103e68 <HAL_DMA_IRQHandler+0xccc>)
 8103c6e:	4293      	cmp	r3, r2
 8103c70:	d01d      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	4a7d      	ldr	r2, [pc, #500]	; (8103e6c <HAL_DMA_IRQHandler+0xcd0>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d018      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	4a7b      	ldr	r2, [pc, #492]	; (8103e70 <HAL_DMA_IRQHandler+0xcd4>)
 8103c82:	4293      	cmp	r3, r2
 8103c84:	d013      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	681b      	ldr	r3, [r3, #0]
 8103c8a:	4a7a      	ldr	r2, [pc, #488]	; (8103e74 <HAL_DMA_IRQHandler+0xcd8>)
 8103c8c:	4293      	cmp	r3, r2
 8103c8e:	d00e      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	681b      	ldr	r3, [r3, #0]
 8103c94:	4a78      	ldr	r2, [pc, #480]	; (8103e78 <HAL_DMA_IRQHandler+0xcdc>)
 8103c96:	4293      	cmp	r3, r2
 8103c98:	d009      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103c9a:	687b      	ldr	r3, [r7, #4]
 8103c9c:	681b      	ldr	r3, [r3, #0]
 8103c9e:	4a77      	ldr	r2, [pc, #476]	; (8103e7c <HAL_DMA_IRQHandler+0xce0>)
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d004      	beq.n	8103cae <HAL_DMA_IRQHandler+0xb12>
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	4a75      	ldr	r2, [pc, #468]	; (8103e80 <HAL_DMA_IRQHandler+0xce4>)
 8103caa:	4293      	cmp	r3, r2
 8103cac:	d108      	bne.n	8103cc0 <HAL_DMA_IRQHandler+0xb24>
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	681b      	ldr	r3, [r3, #0]
 8103cb2:	681a      	ldr	r2, [r3, #0]
 8103cb4:	687b      	ldr	r3, [r7, #4]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	f022 0208 	bic.w	r2, r2, #8
 8103cbc:	601a      	str	r2, [r3, #0]
 8103cbe:	e007      	b.n	8103cd0 <HAL_DMA_IRQHandler+0xb34>
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	681b      	ldr	r3, [r3, #0]
 8103cc4:	681a      	ldr	r2, [r3, #0]
 8103cc6:	687b      	ldr	r3, [r7, #4]
 8103cc8:	681b      	ldr	r3, [r3, #0]
 8103cca:	f022 0204 	bic.w	r2, r2, #4
 8103cce:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103cd4:	2b00      	cmp	r3, #0
 8103cd6:	f000 8165 	beq.w	8103fa4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103cde:	6878      	ldr	r0, [r7, #4]
 8103ce0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103ce2:	e15f      	b.n	8103fa4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8103ce4:	687b      	ldr	r3, [r7, #4]
 8103ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ce8:	f003 031f 	and.w	r3, r3, #31
 8103cec:	2202      	movs	r2, #2
 8103cee:	409a      	lsls	r2, r3
 8103cf0:	697b      	ldr	r3, [r7, #20]
 8103cf2:	4013      	ands	r3, r2
 8103cf4:	2b00      	cmp	r3, #0
 8103cf6:	f000 80c5 	beq.w	8103e84 <HAL_DMA_IRQHandler+0xce8>
 8103cfa:	693b      	ldr	r3, [r7, #16]
 8103cfc:	f003 0302 	and.w	r3, r3, #2
 8103d00:	2b00      	cmp	r3, #0
 8103d02:	f000 80bf 	beq.w	8103e84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8103d06:	687b      	ldr	r3, [r7, #4]
 8103d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d0a:	f003 031f 	and.w	r3, r3, #31
 8103d0e:	2202      	movs	r2, #2
 8103d10:	409a      	lsls	r2, r3
 8103d12:	69fb      	ldr	r3, [r7, #28]
 8103d14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103d16:	693b      	ldr	r3, [r7, #16]
 8103d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d018      	beq.n	8103d52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8103d20:	693b      	ldr	r3, [r7, #16]
 8103d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103d26:	2b00      	cmp	r3, #0
 8103d28:	d109      	bne.n	8103d3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8103d2a:	687b      	ldr	r3, [r7, #4]
 8103d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d2e:	2b00      	cmp	r3, #0
 8103d30:	f000 813a 	beq.w	8103fa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d38:	6878      	ldr	r0, [r7, #4]
 8103d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103d3c:	e134      	b.n	8103fa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d42:	2b00      	cmp	r3, #0
 8103d44:	f000 8130 	beq.w	8103fa8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d4c:	6878      	ldr	r0, [r7, #4]
 8103d4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103d50:	e12a      	b.n	8103fa8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8103d52:	693b      	ldr	r3, [r7, #16]
 8103d54:	f003 0320 	and.w	r3, r3, #32
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d168      	bne.n	8103e2e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8103d5c:	687b      	ldr	r3, [r7, #4]
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	4a38      	ldr	r2, [pc, #224]	; (8103e44 <HAL_DMA_IRQHandler+0xca8>)
 8103d62:	4293      	cmp	r3, r2
 8103d64:	d04a      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103d66:	687b      	ldr	r3, [r7, #4]
 8103d68:	681b      	ldr	r3, [r3, #0]
 8103d6a:	4a37      	ldr	r2, [pc, #220]	; (8103e48 <HAL_DMA_IRQHandler+0xcac>)
 8103d6c:	4293      	cmp	r3, r2
 8103d6e:	d045      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103d70:	687b      	ldr	r3, [r7, #4]
 8103d72:	681b      	ldr	r3, [r3, #0]
 8103d74:	4a35      	ldr	r2, [pc, #212]	; (8103e4c <HAL_DMA_IRQHandler+0xcb0>)
 8103d76:	4293      	cmp	r3, r2
 8103d78:	d040      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	4a34      	ldr	r2, [pc, #208]	; (8103e50 <HAL_DMA_IRQHandler+0xcb4>)
 8103d80:	4293      	cmp	r3, r2
 8103d82:	d03b      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103d84:	687b      	ldr	r3, [r7, #4]
 8103d86:	681b      	ldr	r3, [r3, #0]
 8103d88:	4a32      	ldr	r2, [pc, #200]	; (8103e54 <HAL_DMA_IRQHandler+0xcb8>)
 8103d8a:	4293      	cmp	r3, r2
 8103d8c:	d036      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	4a31      	ldr	r2, [pc, #196]	; (8103e58 <HAL_DMA_IRQHandler+0xcbc>)
 8103d94:	4293      	cmp	r3, r2
 8103d96:	d031      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	681b      	ldr	r3, [r3, #0]
 8103d9c:	4a2f      	ldr	r2, [pc, #188]	; (8103e5c <HAL_DMA_IRQHandler+0xcc0>)
 8103d9e:	4293      	cmp	r3, r2
 8103da0:	d02c      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103da2:	687b      	ldr	r3, [r7, #4]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	4a2e      	ldr	r2, [pc, #184]	; (8103e60 <HAL_DMA_IRQHandler+0xcc4>)
 8103da8:	4293      	cmp	r3, r2
 8103daa:	d027      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	4a2c      	ldr	r2, [pc, #176]	; (8103e64 <HAL_DMA_IRQHandler+0xcc8>)
 8103db2:	4293      	cmp	r3, r2
 8103db4:	d022      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	4a2b      	ldr	r2, [pc, #172]	; (8103e68 <HAL_DMA_IRQHandler+0xccc>)
 8103dbc:	4293      	cmp	r3, r2
 8103dbe:	d01d      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103dc0:	687b      	ldr	r3, [r7, #4]
 8103dc2:	681b      	ldr	r3, [r3, #0]
 8103dc4:	4a29      	ldr	r2, [pc, #164]	; (8103e6c <HAL_DMA_IRQHandler+0xcd0>)
 8103dc6:	4293      	cmp	r3, r2
 8103dc8:	d018      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	4a28      	ldr	r2, [pc, #160]	; (8103e70 <HAL_DMA_IRQHandler+0xcd4>)
 8103dd0:	4293      	cmp	r3, r2
 8103dd2:	d013      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103dd4:	687b      	ldr	r3, [r7, #4]
 8103dd6:	681b      	ldr	r3, [r3, #0]
 8103dd8:	4a26      	ldr	r2, [pc, #152]	; (8103e74 <HAL_DMA_IRQHandler+0xcd8>)
 8103dda:	4293      	cmp	r3, r2
 8103ddc:	d00e      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	4a25      	ldr	r2, [pc, #148]	; (8103e78 <HAL_DMA_IRQHandler+0xcdc>)
 8103de4:	4293      	cmp	r3, r2
 8103de6:	d009      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	4a23      	ldr	r2, [pc, #140]	; (8103e7c <HAL_DMA_IRQHandler+0xce0>)
 8103dee:	4293      	cmp	r3, r2
 8103df0:	d004      	beq.n	8103dfc <HAL_DMA_IRQHandler+0xc60>
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	681b      	ldr	r3, [r3, #0]
 8103df6:	4a22      	ldr	r2, [pc, #136]	; (8103e80 <HAL_DMA_IRQHandler+0xce4>)
 8103df8:	4293      	cmp	r3, r2
 8103dfa:	d108      	bne.n	8103e0e <HAL_DMA_IRQHandler+0xc72>
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	681b      	ldr	r3, [r3, #0]
 8103e00:	681a      	ldr	r2, [r3, #0]
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	f022 0214 	bic.w	r2, r2, #20
 8103e0a:	601a      	str	r2, [r3, #0]
 8103e0c:	e007      	b.n	8103e1e <HAL_DMA_IRQHandler+0xc82>
 8103e0e:	687b      	ldr	r3, [r7, #4]
 8103e10:	681b      	ldr	r3, [r3, #0]
 8103e12:	681a      	ldr	r2, [r3, #0]
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	f022 020a 	bic.w	r2, r2, #10
 8103e1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	2200      	movs	r2, #0
 8103e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	2201      	movs	r2, #1
 8103e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e32:	2b00      	cmp	r3, #0
 8103e34:	f000 80b8 	beq.w	8103fa8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103e3c:	6878      	ldr	r0, [r7, #4]
 8103e3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103e40:	e0b2      	b.n	8103fa8 <HAL_DMA_IRQHandler+0xe0c>
 8103e42:	bf00      	nop
 8103e44:	40020010 	.word	0x40020010
 8103e48:	40020028 	.word	0x40020028
 8103e4c:	40020040 	.word	0x40020040
 8103e50:	40020058 	.word	0x40020058
 8103e54:	40020070 	.word	0x40020070
 8103e58:	40020088 	.word	0x40020088
 8103e5c:	400200a0 	.word	0x400200a0
 8103e60:	400200b8 	.word	0x400200b8
 8103e64:	40020410 	.word	0x40020410
 8103e68:	40020428 	.word	0x40020428
 8103e6c:	40020440 	.word	0x40020440
 8103e70:	40020458 	.word	0x40020458
 8103e74:	40020470 	.word	0x40020470
 8103e78:	40020488 	.word	0x40020488
 8103e7c:	400204a0 	.word	0x400204a0
 8103e80:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8103e84:	687b      	ldr	r3, [r7, #4]
 8103e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e88:	f003 031f 	and.w	r3, r3, #31
 8103e8c:	2208      	movs	r2, #8
 8103e8e:	409a      	lsls	r2, r3
 8103e90:	697b      	ldr	r3, [r7, #20]
 8103e92:	4013      	ands	r3, r2
 8103e94:	2b00      	cmp	r3, #0
 8103e96:	f000 8088 	beq.w	8103faa <HAL_DMA_IRQHandler+0xe0e>
 8103e9a:	693b      	ldr	r3, [r7, #16]
 8103e9c:	f003 0308 	and.w	r3, r3, #8
 8103ea0:	2b00      	cmp	r3, #0
 8103ea2:	f000 8082 	beq.w	8103faa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	681b      	ldr	r3, [r3, #0]
 8103eaa:	4a41      	ldr	r2, [pc, #260]	; (8103fb0 <HAL_DMA_IRQHandler+0xe14>)
 8103eac:	4293      	cmp	r3, r2
 8103eae:	d04a      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103eb0:	687b      	ldr	r3, [r7, #4]
 8103eb2:	681b      	ldr	r3, [r3, #0]
 8103eb4:	4a3f      	ldr	r2, [pc, #252]	; (8103fb4 <HAL_DMA_IRQHandler+0xe18>)
 8103eb6:	4293      	cmp	r3, r2
 8103eb8:	d045      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	4a3e      	ldr	r2, [pc, #248]	; (8103fb8 <HAL_DMA_IRQHandler+0xe1c>)
 8103ec0:	4293      	cmp	r3, r2
 8103ec2:	d040      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	4a3c      	ldr	r2, [pc, #240]	; (8103fbc <HAL_DMA_IRQHandler+0xe20>)
 8103eca:	4293      	cmp	r3, r2
 8103ecc:	d03b      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	681b      	ldr	r3, [r3, #0]
 8103ed2:	4a3b      	ldr	r2, [pc, #236]	; (8103fc0 <HAL_DMA_IRQHandler+0xe24>)
 8103ed4:	4293      	cmp	r3, r2
 8103ed6:	d036      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103ed8:	687b      	ldr	r3, [r7, #4]
 8103eda:	681b      	ldr	r3, [r3, #0]
 8103edc:	4a39      	ldr	r2, [pc, #228]	; (8103fc4 <HAL_DMA_IRQHandler+0xe28>)
 8103ede:	4293      	cmp	r3, r2
 8103ee0:	d031      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	681b      	ldr	r3, [r3, #0]
 8103ee6:	4a38      	ldr	r2, [pc, #224]	; (8103fc8 <HAL_DMA_IRQHandler+0xe2c>)
 8103ee8:	4293      	cmp	r3, r2
 8103eea:	d02c      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	681b      	ldr	r3, [r3, #0]
 8103ef0:	4a36      	ldr	r2, [pc, #216]	; (8103fcc <HAL_DMA_IRQHandler+0xe30>)
 8103ef2:	4293      	cmp	r3, r2
 8103ef4:	d027      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	681b      	ldr	r3, [r3, #0]
 8103efa:	4a35      	ldr	r2, [pc, #212]	; (8103fd0 <HAL_DMA_IRQHandler+0xe34>)
 8103efc:	4293      	cmp	r3, r2
 8103efe:	d022      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103f00:	687b      	ldr	r3, [r7, #4]
 8103f02:	681b      	ldr	r3, [r3, #0]
 8103f04:	4a33      	ldr	r2, [pc, #204]	; (8103fd4 <HAL_DMA_IRQHandler+0xe38>)
 8103f06:	4293      	cmp	r3, r2
 8103f08:	d01d      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103f0a:	687b      	ldr	r3, [r7, #4]
 8103f0c:	681b      	ldr	r3, [r3, #0]
 8103f0e:	4a32      	ldr	r2, [pc, #200]	; (8103fd8 <HAL_DMA_IRQHandler+0xe3c>)
 8103f10:	4293      	cmp	r3, r2
 8103f12:	d018      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103f14:	687b      	ldr	r3, [r7, #4]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	4a30      	ldr	r2, [pc, #192]	; (8103fdc <HAL_DMA_IRQHandler+0xe40>)
 8103f1a:	4293      	cmp	r3, r2
 8103f1c:	d013      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	681b      	ldr	r3, [r3, #0]
 8103f22:	4a2f      	ldr	r2, [pc, #188]	; (8103fe0 <HAL_DMA_IRQHandler+0xe44>)
 8103f24:	4293      	cmp	r3, r2
 8103f26:	d00e      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103f28:	687b      	ldr	r3, [r7, #4]
 8103f2a:	681b      	ldr	r3, [r3, #0]
 8103f2c:	4a2d      	ldr	r2, [pc, #180]	; (8103fe4 <HAL_DMA_IRQHandler+0xe48>)
 8103f2e:	4293      	cmp	r3, r2
 8103f30:	d009      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103f32:	687b      	ldr	r3, [r7, #4]
 8103f34:	681b      	ldr	r3, [r3, #0]
 8103f36:	4a2c      	ldr	r2, [pc, #176]	; (8103fe8 <HAL_DMA_IRQHandler+0xe4c>)
 8103f38:	4293      	cmp	r3, r2
 8103f3a:	d004      	beq.n	8103f46 <HAL_DMA_IRQHandler+0xdaa>
 8103f3c:	687b      	ldr	r3, [r7, #4]
 8103f3e:	681b      	ldr	r3, [r3, #0]
 8103f40:	4a2a      	ldr	r2, [pc, #168]	; (8103fec <HAL_DMA_IRQHandler+0xe50>)
 8103f42:	4293      	cmp	r3, r2
 8103f44:	d108      	bne.n	8103f58 <HAL_DMA_IRQHandler+0xdbc>
 8103f46:	687b      	ldr	r3, [r7, #4]
 8103f48:	681b      	ldr	r3, [r3, #0]
 8103f4a:	681a      	ldr	r2, [r3, #0]
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	681b      	ldr	r3, [r3, #0]
 8103f50:	f022 021c 	bic.w	r2, r2, #28
 8103f54:	601a      	str	r2, [r3, #0]
 8103f56:	e007      	b.n	8103f68 <HAL_DMA_IRQHandler+0xdcc>
 8103f58:	687b      	ldr	r3, [r7, #4]
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	681a      	ldr	r2, [r3, #0]
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	681b      	ldr	r3, [r3, #0]
 8103f62:	f022 020e 	bic.w	r2, r2, #14
 8103f66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8103f68:	687b      	ldr	r3, [r7, #4]
 8103f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f6c:	f003 031f 	and.w	r3, r3, #31
 8103f70:	2201      	movs	r2, #1
 8103f72:	409a      	lsls	r2, r3
 8103f74:	69fb      	ldr	r3, [r7, #28]
 8103f76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	2201      	movs	r2, #1
 8103f7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	2200      	movs	r2, #0
 8103f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	2201      	movs	r2, #1
 8103f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f92:	2b00      	cmp	r3, #0
 8103f94:	d009      	beq.n	8103faa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f9a:	6878      	ldr	r0, [r7, #4]
 8103f9c:	4798      	blx	r3
 8103f9e:	e004      	b.n	8103faa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8103fa0:	bf00      	nop
 8103fa2:	e002      	b.n	8103faa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103fa4:	bf00      	nop
 8103fa6:	e000      	b.n	8103faa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8103fa8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8103faa:	3728      	adds	r7, #40	; 0x28
 8103fac:	46bd      	mov	sp, r7
 8103fae:	bd80      	pop	{r7, pc}
 8103fb0:	40020010 	.word	0x40020010
 8103fb4:	40020028 	.word	0x40020028
 8103fb8:	40020040 	.word	0x40020040
 8103fbc:	40020058 	.word	0x40020058
 8103fc0:	40020070 	.word	0x40020070
 8103fc4:	40020088 	.word	0x40020088
 8103fc8:	400200a0 	.word	0x400200a0
 8103fcc:	400200b8 	.word	0x400200b8
 8103fd0:	40020410 	.word	0x40020410
 8103fd4:	40020428 	.word	0x40020428
 8103fd8:	40020440 	.word	0x40020440
 8103fdc:	40020458 	.word	0x40020458
 8103fe0:	40020470 	.word	0x40020470
 8103fe4:	40020488 	.word	0x40020488
 8103fe8:	400204a0 	.word	0x400204a0
 8103fec:	400204b8 	.word	0x400204b8

08103ff0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103ff0:	b480      	push	{r7}
 8103ff2:	b087      	sub	sp, #28
 8103ff4:	af00      	add	r7, sp, #0
 8103ff6:	60f8      	str	r0, [r7, #12]
 8103ff8:	60b9      	str	r1, [r7, #8]
 8103ffa:	607a      	str	r2, [r7, #4]
 8103ffc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104002:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104008:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810400a:	68fb      	ldr	r3, [r7, #12]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	4a84      	ldr	r2, [pc, #528]	; (8104220 <DMA_SetConfig+0x230>)
 8104010:	4293      	cmp	r3, r2
 8104012:	d072      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104014:	68fb      	ldr	r3, [r7, #12]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	4a82      	ldr	r2, [pc, #520]	; (8104224 <DMA_SetConfig+0x234>)
 810401a:	4293      	cmp	r3, r2
 810401c:	d06d      	beq.n	81040fa <DMA_SetConfig+0x10a>
 810401e:	68fb      	ldr	r3, [r7, #12]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	4a81      	ldr	r2, [pc, #516]	; (8104228 <DMA_SetConfig+0x238>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d068      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104028:	68fb      	ldr	r3, [r7, #12]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	4a7f      	ldr	r2, [pc, #508]	; (810422c <DMA_SetConfig+0x23c>)
 810402e:	4293      	cmp	r3, r2
 8104030:	d063      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104032:	68fb      	ldr	r3, [r7, #12]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	4a7e      	ldr	r2, [pc, #504]	; (8104230 <DMA_SetConfig+0x240>)
 8104038:	4293      	cmp	r3, r2
 810403a:	d05e      	beq.n	81040fa <DMA_SetConfig+0x10a>
 810403c:	68fb      	ldr	r3, [r7, #12]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	4a7c      	ldr	r2, [pc, #496]	; (8104234 <DMA_SetConfig+0x244>)
 8104042:	4293      	cmp	r3, r2
 8104044:	d059      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104046:	68fb      	ldr	r3, [r7, #12]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4a7b      	ldr	r2, [pc, #492]	; (8104238 <DMA_SetConfig+0x248>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d054      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104050:	68fb      	ldr	r3, [r7, #12]
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4a79      	ldr	r2, [pc, #484]	; (810423c <DMA_SetConfig+0x24c>)
 8104056:	4293      	cmp	r3, r2
 8104058:	d04f      	beq.n	81040fa <DMA_SetConfig+0x10a>
 810405a:	68fb      	ldr	r3, [r7, #12]
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	4a78      	ldr	r2, [pc, #480]	; (8104240 <DMA_SetConfig+0x250>)
 8104060:	4293      	cmp	r3, r2
 8104062:	d04a      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104064:	68fb      	ldr	r3, [r7, #12]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	4a76      	ldr	r2, [pc, #472]	; (8104244 <DMA_SetConfig+0x254>)
 810406a:	4293      	cmp	r3, r2
 810406c:	d045      	beq.n	81040fa <DMA_SetConfig+0x10a>
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	681b      	ldr	r3, [r3, #0]
 8104072:	4a75      	ldr	r2, [pc, #468]	; (8104248 <DMA_SetConfig+0x258>)
 8104074:	4293      	cmp	r3, r2
 8104076:	d040      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104078:	68fb      	ldr	r3, [r7, #12]
 810407a:	681b      	ldr	r3, [r3, #0]
 810407c:	4a73      	ldr	r2, [pc, #460]	; (810424c <DMA_SetConfig+0x25c>)
 810407e:	4293      	cmp	r3, r2
 8104080:	d03b      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	4a72      	ldr	r2, [pc, #456]	; (8104250 <DMA_SetConfig+0x260>)
 8104088:	4293      	cmp	r3, r2
 810408a:	d036      	beq.n	81040fa <DMA_SetConfig+0x10a>
 810408c:	68fb      	ldr	r3, [r7, #12]
 810408e:	681b      	ldr	r3, [r3, #0]
 8104090:	4a70      	ldr	r2, [pc, #448]	; (8104254 <DMA_SetConfig+0x264>)
 8104092:	4293      	cmp	r3, r2
 8104094:	d031      	beq.n	81040fa <DMA_SetConfig+0x10a>
 8104096:	68fb      	ldr	r3, [r7, #12]
 8104098:	681b      	ldr	r3, [r3, #0]
 810409a:	4a6f      	ldr	r2, [pc, #444]	; (8104258 <DMA_SetConfig+0x268>)
 810409c:	4293      	cmp	r3, r2
 810409e:	d02c      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040a0:	68fb      	ldr	r3, [r7, #12]
 81040a2:	681b      	ldr	r3, [r3, #0]
 81040a4:	4a6d      	ldr	r2, [pc, #436]	; (810425c <DMA_SetConfig+0x26c>)
 81040a6:	4293      	cmp	r3, r2
 81040a8:	d027      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040aa:	68fb      	ldr	r3, [r7, #12]
 81040ac:	681b      	ldr	r3, [r3, #0]
 81040ae:	4a6c      	ldr	r2, [pc, #432]	; (8104260 <DMA_SetConfig+0x270>)
 81040b0:	4293      	cmp	r3, r2
 81040b2:	d022      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040b4:	68fb      	ldr	r3, [r7, #12]
 81040b6:	681b      	ldr	r3, [r3, #0]
 81040b8:	4a6a      	ldr	r2, [pc, #424]	; (8104264 <DMA_SetConfig+0x274>)
 81040ba:	4293      	cmp	r3, r2
 81040bc:	d01d      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040be:	68fb      	ldr	r3, [r7, #12]
 81040c0:	681b      	ldr	r3, [r3, #0]
 81040c2:	4a69      	ldr	r2, [pc, #420]	; (8104268 <DMA_SetConfig+0x278>)
 81040c4:	4293      	cmp	r3, r2
 81040c6:	d018      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040c8:	68fb      	ldr	r3, [r7, #12]
 81040ca:	681b      	ldr	r3, [r3, #0]
 81040cc:	4a67      	ldr	r2, [pc, #412]	; (810426c <DMA_SetConfig+0x27c>)
 81040ce:	4293      	cmp	r3, r2
 81040d0:	d013      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040d2:	68fb      	ldr	r3, [r7, #12]
 81040d4:	681b      	ldr	r3, [r3, #0]
 81040d6:	4a66      	ldr	r2, [pc, #408]	; (8104270 <DMA_SetConfig+0x280>)
 81040d8:	4293      	cmp	r3, r2
 81040da:	d00e      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040dc:	68fb      	ldr	r3, [r7, #12]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	4a64      	ldr	r2, [pc, #400]	; (8104274 <DMA_SetConfig+0x284>)
 81040e2:	4293      	cmp	r3, r2
 81040e4:	d009      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	4a63      	ldr	r2, [pc, #396]	; (8104278 <DMA_SetConfig+0x288>)
 81040ec:	4293      	cmp	r3, r2
 81040ee:	d004      	beq.n	81040fa <DMA_SetConfig+0x10a>
 81040f0:	68fb      	ldr	r3, [r7, #12]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	4a61      	ldr	r2, [pc, #388]	; (810427c <DMA_SetConfig+0x28c>)
 81040f6:	4293      	cmp	r3, r2
 81040f8:	d101      	bne.n	81040fe <DMA_SetConfig+0x10e>
 81040fa:	2301      	movs	r3, #1
 81040fc:	e000      	b.n	8104100 <DMA_SetConfig+0x110>
 81040fe:	2300      	movs	r3, #0
 8104100:	2b00      	cmp	r3, #0
 8104102:	d00d      	beq.n	8104120 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104108:	68fa      	ldr	r2, [r7, #12]
 810410a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810410c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810410e:	68fb      	ldr	r3, [r7, #12]
 8104110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104112:	2b00      	cmp	r3, #0
 8104114:	d004      	beq.n	8104120 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104116:	68fb      	ldr	r3, [r7, #12]
 8104118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810411a:	68fa      	ldr	r2, [r7, #12]
 810411c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810411e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	4a3e      	ldr	r2, [pc, #248]	; (8104220 <DMA_SetConfig+0x230>)
 8104126:	4293      	cmp	r3, r2
 8104128:	d04a      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 810412a:	68fb      	ldr	r3, [r7, #12]
 810412c:	681b      	ldr	r3, [r3, #0]
 810412e:	4a3d      	ldr	r2, [pc, #244]	; (8104224 <DMA_SetConfig+0x234>)
 8104130:	4293      	cmp	r3, r2
 8104132:	d045      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 8104134:	68fb      	ldr	r3, [r7, #12]
 8104136:	681b      	ldr	r3, [r3, #0]
 8104138:	4a3b      	ldr	r2, [pc, #236]	; (8104228 <DMA_SetConfig+0x238>)
 810413a:	4293      	cmp	r3, r2
 810413c:	d040      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 810413e:	68fb      	ldr	r3, [r7, #12]
 8104140:	681b      	ldr	r3, [r3, #0]
 8104142:	4a3a      	ldr	r2, [pc, #232]	; (810422c <DMA_SetConfig+0x23c>)
 8104144:	4293      	cmp	r3, r2
 8104146:	d03b      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 8104148:	68fb      	ldr	r3, [r7, #12]
 810414a:	681b      	ldr	r3, [r3, #0]
 810414c:	4a38      	ldr	r2, [pc, #224]	; (8104230 <DMA_SetConfig+0x240>)
 810414e:	4293      	cmp	r3, r2
 8104150:	d036      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 8104152:	68fb      	ldr	r3, [r7, #12]
 8104154:	681b      	ldr	r3, [r3, #0]
 8104156:	4a37      	ldr	r2, [pc, #220]	; (8104234 <DMA_SetConfig+0x244>)
 8104158:	4293      	cmp	r3, r2
 810415a:	d031      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 810415c:	68fb      	ldr	r3, [r7, #12]
 810415e:	681b      	ldr	r3, [r3, #0]
 8104160:	4a35      	ldr	r2, [pc, #212]	; (8104238 <DMA_SetConfig+0x248>)
 8104162:	4293      	cmp	r3, r2
 8104164:	d02c      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 8104166:	68fb      	ldr	r3, [r7, #12]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	4a34      	ldr	r2, [pc, #208]	; (810423c <DMA_SetConfig+0x24c>)
 810416c:	4293      	cmp	r3, r2
 810416e:	d027      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 8104170:	68fb      	ldr	r3, [r7, #12]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	4a32      	ldr	r2, [pc, #200]	; (8104240 <DMA_SetConfig+0x250>)
 8104176:	4293      	cmp	r3, r2
 8104178:	d022      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	4a31      	ldr	r2, [pc, #196]	; (8104244 <DMA_SetConfig+0x254>)
 8104180:	4293      	cmp	r3, r2
 8104182:	d01d      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	4a2f      	ldr	r2, [pc, #188]	; (8104248 <DMA_SetConfig+0x258>)
 810418a:	4293      	cmp	r3, r2
 810418c:	d018      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 810418e:	68fb      	ldr	r3, [r7, #12]
 8104190:	681b      	ldr	r3, [r3, #0]
 8104192:	4a2e      	ldr	r2, [pc, #184]	; (810424c <DMA_SetConfig+0x25c>)
 8104194:	4293      	cmp	r3, r2
 8104196:	d013      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	681b      	ldr	r3, [r3, #0]
 810419c:	4a2c      	ldr	r2, [pc, #176]	; (8104250 <DMA_SetConfig+0x260>)
 810419e:	4293      	cmp	r3, r2
 81041a0:	d00e      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 81041a2:	68fb      	ldr	r3, [r7, #12]
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	4a2b      	ldr	r2, [pc, #172]	; (8104254 <DMA_SetConfig+0x264>)
 81041a8:	4293      	cmp	r3, r2
 81041aa:	d009      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	4a29      	ldr	r2, [pc, #164]	; (8104258 <DMA_SetConfig+0x268>)
 81041b2:	4293      	cmp	r3, r2
 81041b4:	d004      	beq.n	81041c0 <DMA_SetConfig+0x1d0>
 81041b6:	68fb      	ldr	r3, [r7, #12]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	4a28      	ldr	r2, [pc, #160]	; (810425c <DMA_SetConfig+0x26c>)
 81041bc:	4293      	cmp	r3, r2
 81041be:	d101      	bne.n	81041c4 <DMA_SetConfig+0x1d4>
 81041c0:	2301      	movs	r3, #1
 81041c2:	e000      	b.n	81041c6 <DMA_SetConfig+0x1d6>
 81041c4:	2300      	movs	r3, #0
 81041c6:	2b00      	cmp	r3, #0
 81041c8:	d05a      	beq.n	8104280 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81041ca:	68fb      	ldr	r3, [r7, #12]
 81041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81041ce:	f003 031f 	and.w	r3, r3, #31
 81041d2:	223f      	movs	r2, #63	; 0x3f
 81041d4:	409a      	lsls	r2, r3
 81041d6:	697b      	ldr	r3, [r7, #20]
 81041d8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 81041da:	68fb      	ldr	r3, [r7, #12]
 81041dc:	681b      	ldr	r3, [r3, #0]
 81041de:	681a      	ldr	r2, [r3, #0]
 81041e0:	68fb      	ldr	r3, [r7, #12]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 81041e8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	683a      	ldr	r2, [r7, #0]
 81041f0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81041f2:	68fb      	ldr	r3, [r7, #12]
 81041f4:	689b      	ldr	r3, [r3, #8]
 81041f6:	2b40      	cmp	r3, #64	; 0x40
 81041f8:	d108      	bne.n	810420c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 81041fa:	68fb      	ldr	r3, [r7, #12]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	687a      	ldr	r2, [r7, #4]
 8104200:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8104202:	68fb      	ldr	r3, [r7, #12]
 8104204:	681b      	ldr	r3, [r3, #0]
 8104206:	68ba      	ldr	r2, [r7, #8]
 8104208:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810420a:	e087      	b.n	810431c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 810420c:	68fb      	ldr	r3, [r7, #12]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	68ba      	ldr	r2, [r7, #8]
 8104212:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8104214:	68fb      	ldr	r3, [r7, #12]
 8104216:	681b      	ldr	r3, [r3, #0]
 8104218:	687a      	ldr	r2, [r7, #4]
 810421a:	60da      	str	r2, [r3, #12]
}
 810421c:	e07e      	b.n	810431c <DMA_SetConfig+0x32c>
 810421e:	bf00      	nop
 8104220:	40020010 	.word	0x40020010
 8104224:	40020028 	.word	0x40020028
 8104228:	40020040 	.word	0x40020040
 810422c:	40020058 	.word	0x40020058
 8104230:	40020070 	.word	0x40020070
 8104234:	40020088 	.word	0x40020088
 8104238:	400200a0 	.word	0x400200a0
 810423c:	400200b8 	.word	0x400200b8
 8104240:	40020410 	.word	0x40020410
 8104244:	40020428 	.word	0x40020428
 8104248:	40020440 	.word	0x40020440
 810424c:	40020458 	.word	0x40020458
 8104250:	40020470 	.word	0x40020470
 8104254:	40020488 	.word	0x40020488
 8104258:	400204a0 	.word	0x400204a0
 810425c:	400204b8 	.word	0x400204b8
 8104260:	58025408 	.word	0x58025408
 8104264:	5802541c 	.word	0x5802541c
 8104268:	58025430 	.word	0x58025430
 810426c:	58025444 	.word	0x58025444
 8104270:	58025458 	.word	0x58025458
 8104274:	5802546c 	.word	0x5802546c
 8104278:	58025480 	.word	0x58025480
 810427c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8104280:	68fb      	ldr	r3, [r7, #12]
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	4a28      	ldr	r2, [pc, #160]	; (8104328 <DMA_SetConfig+0x338>)
 8104286:	4293      	cmp	r3, r2
 8104288:	d022      	beq.n	81042d0 <DMA_SetConfig+0x2e0>
 810428a:	68fb      	ldr	r3, [r7, #12]
 810428c:	681b      	ldr	r3, [r3, #0]
 810428e:	4a27      	ldr	r2, [pc, #156]	; (810432c <DMA_SetConfig+0x33c>)
 8104290:	4293      	cmp	r3, r2
 8104292:	d01d      	beq.n	81042d0 <DMA_SetConfig+0x2e0>
 8104294:	68fb      	ldr	r3, [r7, #12]
 8104296:	681b      	ldr	r3, [r3, #0]
 8104298:	4a25      	ldr	r2, [pc, #148]	; (8104330 <DMA_SetConfig+0x340>)
 810429a:	4293      	cmp	r3, r2
 810429c:	d018      	beq.n	81042d0 <DMA_SetConfig+0x2e0>
 810429e:	68fb      	ldr	r3, [r7, #12]
 81042a0:	681b      	ldr	r3, [r3, #0]
 81042a2:	4a24      	ldr	r2, [pc, #144]	; (8104334 <DMA_SetConfig+0x344>)
 81042a4:	4293      	cmp	r3, r2
 81042a6:	d013      	beq.n	81042d0 <DMA_SetConfig+0x2e0>
 81042a8:	68fb      	ldr	r3, [r7, #12]
 81042aa:	681b      	ldr	r3, [r3, #0]
 81042ac:	4a22      	ldr	r2, [pc, #136]	; (8104338 <DMA_SetConfig+0x348>)
 81042ae:	4293      	cmp	r3, r2
 81042b0:	d00e      	beq.n	81042d0 <DMA_SetConfig+0x2e0>
 81042b2:	68fb      	ldr	r3, [r7, #12]
 81042b4:	681b      	ldr	r3, [r3, #0]
 81042b6:	4a21      	ldr	r2, [pc, #132]	; (810433c <DMA_SetConfig+0x34c>)
 81042b8:	4293      	cmp	r3, r2
 81042ba:	d009      	beq.n	81042d0 <DMA_SetConfig+0x2e0>
 81042bc:	68fb      	ldr	r3, [r7, #12]
 81042be:	681b      	ldr	r3, [r3, #0]
 81042c0:	4a1f      	ldr	r2, [pc, #124]	; (8104340 <DMA_SetConfig+0x350>)
 81042c2:	4293      	cmp	r3, r2
 81042c4:	d004      	beq.n	81042d0 <DMA_SetConfig+0x2e0>
 81042c6:	68fb      	ldr	r3, [r7, #12]
 81042c8:	681b      	ldr	r3, [r3, #0]
 81042ca:	4a1e      	ldr	r2, [pc, #120]	; (8104344 <DMA_SetConfig+0x354>)
 81042cc:	4293      	cmp	r3, r2
 81042ce:	d101      	bne.n	81042d4 <DMA_SetConfig+0x2e4>
 81042d0:	2301      	movs	r3, #1
 81042d2:	e000      	b.n	81042d6 <DMA_SetConfig+0x2e6>
 81042d4:	2300      	movs	r3, #0
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d020      	beq.n	810431c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81042da:	68fb      	ldr	r3, [r7, #12]
 81042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81042de:	f003 031f 	and.w	r3, r3, #31
 81042e2:	2201      	movs	r2, #1
 81042e4:	409a      	lsls	r2, r3
 81042e6:	693b      	ldr	r3, [r7, #16]
 81042e8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 81042ea:	68fb      	ldr	r3, [r7, #12]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	683a      	ldr	r2, [r7, #0]
 81042f0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	689b      	ldr	r3, [r3, #8]
 81042f6:	2b40      	cmp	r3, #64	; 0x40
 81042f8:	d108      	bne.n	810430c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 81042fa:	68fb      	ldr	r3, [r7, #12]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	687a      	ldr	r2, [r7, #4]
 8104300:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8104302:	68fb      	ldr	r3, [r7, #12]
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	68ba      	ldr	r2, [r7, #8]
 8104308:	60da      	str	r2, [r3, #12]
}
 810430a:	e007      	b.n	810431c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810430c:	68fb      	ldr	r3, [r7, #12]
 810430e:	681b      	ldr	r3, [r3, #0]
 8104310:	68ba      	ldr	r2, [r7, #8]
 8104312:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	687a      	ldr	r2, [r7, #4]
 810431a:	60da      	str	r2, [r3, #12]
}
 810431c:	bf00      	nop
 810431e:	371c      	adds	r7, #28
 8104320:	46bd      	mov	sp, r7
 8104322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104326:	4770      	bx	lr
 8104328:	58025408 	.word	0x58025408
 810432c:	5802541c 	.word	0x5802541c
 8104330:	58025430 	.word	0x58025430
 8104334:	58025444 	.word	0x58025444
 8104338:	58025458 	.word	0x58025458
 810433c:	5802546c 	.word	0x5802546c
 8104340:	58025480 	.word	0x58025480
 8104344:	58025494 	.word	0x58025494

08104348 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8104348:	b480      	push	{r7}
 810434a:	b085      	sub	sp, #20
 810434c:	af00      	add	r7, sp, #0
 810434e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	4a43      	ldr	r2, [pc, #268]	; (8104464 <DMA_CalcBaseAndBitshift+0x11c>)
 8104356:	4293      	cmp	r3, r2
 8104358:	d04a      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	4a42      	ldr	r2, [pc, #264]	; (8104468 <DMA_CalcBaseAndBitshift+0x120>)
 8104360:	4293      	cmp	r3, r2
 8104362:	d045      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	4a40      	ldr	r2, [pc, #256]	; (810446c <DMA_CalcBaseAndBitshift+0x124>)
 810436a:	4293      	cmp	r3, r2
 810436c:	d040      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	4a3f      	ldr	r2, [pc, #252]	; (8104470 <DMA_CalcBaseAndBitshift+0x128>)
 8104374:	4293      	cmp	r3, r2
 8104376:	d03b      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 8104378:	687b      	ldr	r3, [r7, #4]
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	4a3d      	ldr	r2, [pc, #244]	; (8104474 <DMA_CalcBaseAndBitshift+0x12c>)
 810437e:	4293      	cmp	r3, r2
 8104380:	d036      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	4a3c      	ldr	r2, [pc, #240]	; (8104478 <DMA_CalcBaseAndBitshift+0x130>)
 8104388:	4293      	cmp	r3, r2
 810438a:	d031      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 810438c:	687b      	ldr	r3, [r7, #4]
 810438e:	681b      	ldr	r3, [r3, #0]
 8104390:	4a3a      	ldr	r2, [pc, #232]	; (810447c <DMA_CalcBaseAndBitshift+0x134>)
 8104392:	4293      	cmp	r3, r2
 8104394:	d02c      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	4a39      	ldr	r2, [pc, #228]	; (8104480 <DMA_CalcBaseAndBitshift+0x138>)
 810439c:	4293      	cmp	r3, r2
 810439e:	d027      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043a0:	687b      	ldr	r3, [r7, #4]
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	4a37      	ldr	r2, [pc, #220]	; (8104484 <DMA_CalcBaseAndBitshift+0x13c>)
 81043a6:	4293      	cmp	r3, r2
 81043a8:	d022      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	4a36      	ldr	r2, [pc, #216]	; (8104488 <DMA_CalcBaseAndBitshift+0x140>)
 81043b0:	4293      	cmp	r3, r2
 81043b2:	d01d      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	4a34      	ldr	r2, [pc, #208]	; (810448c <DMA_CalcBaseAndBitshift+0x144>)
 81043ba:	4293      	cmp	r3, r2
 81043bc:	d018      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043be:	687b      	ldr	r3, [r7, #4]
 81043c0:	681b      	ldr	r3, [r3, #0]
 81043c2:	4a33      	ldr	r2, [pc, #204]	; (8104490 <DMA_CalcBaseAndBitshift+0x148>)
 81043c4:	4293      	cmp	r3, r2
 81043c6:	d013      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043c8:	687b      	ldr	r3, [r7, #4]
 81043ca:	681b      	ldr	r3, [r3, #0]
 81043cc:	4a31      	ldr	r2, [pc, #196]	; (8104494 <DMA_CalcBaseAndBitshift+0x14c>)
 81043ce:	4293      	cmp	r3, r2
 81043d0:	d00e      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043d2:	687b      	ldr	r3, [r7, #4]
 81043d4:	681b      	ldr	r3, [r3, #0]
 81043d6:	4a30      	ldr	r2, [pc, #192]	; (8104498 <DMA_CalcBaseAndBitshift+0x150>)
 81043d8:	4293      	cmp	r3, r2
 81043da:	d009      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	681b      	ldr	r3, [r3, #0]
 81043e0:	4a2e      	ldr	r2, [pc, #184]	; (810449c <DMA_CalcBaseAndBitshift+0x154>)
 81043e2:	4293      	cmp	r3, r2
 81043e4:	d004      	beq.n	81043f0 <DMA_CalcBaseAndBitshift+0xa8>
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	681b      	ldr	r3, [r3, #0]
 81043ea:	4a2d      	ldr	r2, [pc, #180]	; (81044a0 <DMA_CalcBaseAndBitshift+0x158>)
 81043ec:	4293      	cmp	r3, r2
 81043ee:	d101      	bne.n	81043f4 <DMA_CalcBaseAndBitshift+0xac>
 81043f0:	2301      	movs	r3, #1
 81043f2:	e000      	b.n	81043f6 <DMA_CalcBaseAndBitshift+0xae>
 81043f4:	2300      	movs	r3, #0
 81043f6:	2b00      	cmp	r3, #0
 81043f8:	d026      	beq.n	8104448 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 81043fa:	687b      	ldr	r3, [r7, #4]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	b2db      	uxtb	r3, r3
 8104400:	3b10      	subs	r3, #16
 8104402:	4a28      	ldr	r2, [pc, #160]	; (81044a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8104404:	fba2 2303 	umull	r2, r3, r2, r3
 8104408:	091b      	lsrs	r3, r3, #4
 810440a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 810440c:	68fb      	ldr	r3, [r7, #12]
 810440e:	f003 0307 	and.w	r3, r3, #7
 8104412:	4a25      	ldr	r2, [pc, #148]	; (81044a8 <DMA_CalcBaseAndBitshift+0x160>)
 8104414:	5cd3      	ldrb	r3, [r2, r3]
 8104416:	461a      	mov	r2, r3
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	2b03      	cmp	r3, #3
 8104420:	d909      	bls.n	8104436 <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810442a:	f023 0303 	bic.w	r3, r3, #3
 810442e:	1d1a      	adds	r2, r3, #4
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	659a      	str	r2, [r3, #88]	; 0x58
 8104434:	e00e      	b.n	8104454 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	681b      	ldr	r3, [r3, #0]
 810443a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 810443e:	f023 0303 	bic.w	r3, r3, #3
 8104442:	687a      	ldr	r2, [r7, #4]
 8104444:	6593      	str	r3, [r2, #88]	; 0x58
 8104446:	e005      	b.n	8104454 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8104458:	4618      	mov	r0, r3
 810445a:	3714      	adds	r7, #20
 810445c:	46bd      	mov	sp, r7
 810445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104462:	4770      	bx	lr
 8104464:	40020010 	.word	0x40020010
 8104468:	40020028 	.word	0x40020028
 810446c:	40020040 	.word	0x40020040
 8104470:	40020058 	.word	0x40020058
 8104474:	40020070 	.word	0x40020070
 8104478:	40020088 	.word	0x40020088
 810447c:	400200a0 	.word	0x400200a0
 8104480:	400200b8 	.word	0x400200b8
 8104484:	40020410 	.word	0x40020410
 8104488:	40020428 	.word	0x40020428
 810448c:	40020440 	.word	0x40020440
 8104490:	40020458 	.word	0x40020458
 8104494:	40020470 	.word	0x40020470
 8104498:	40020488 	.word	0x40020488
 810449c:	400204a0 	.word	0x400204a0
 81044a0:	400204b8 	.word	0x400204b8
 81044a4:	aaaaaaab 	.word	0xaaaaaaab
 81044a8:	0810cc14 	.word	0x0810cc14

081044ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81044ac:	b480      	push	{r7}
 81044ae:	b085      	sub	sp, #20
 81044b0:	af00      	add	r7, sp, #0
 81044b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81044b4:	2300      	movs	r3, #0
 81044b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	699b      	ldr	r3, [r3, #24]
 81044bc:	2b00      	cmp	r3, #0
 81044be:	d120      	bne.n	8104502 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81044c4:	2b03      	cmp	r3, #3
 81044c6:	d858      	bhi.n	810457a <DMA_CheckFifoParam+0xce>
 81044c8:	a201      	add	r2, pc, #4	; (adr r2, 81044d0 <DMA_CheckFifoParam+0x24>)
 81044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044ce:	bf00      	nop
 81044d0:	081044e1 	.word	0x081044e1
 81044d4:	081044f3 	.word	0x081044f3
 81044d8:	081044e1 	.word	0x081044e1
 81044dc:	0810457b 	.word	0x0810457b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81044e8:	2b00      	cmp	r3, #0
 81044ea:	d048      	beq.n	810457e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81044ec:	2301      	movs	r3, #1
 81044ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81044f0:	e045      	b.n	810457e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81044f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81044fa:	d142      	bne.n	8104582 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81044fc:	2301      	movs	r3, #1
 81044fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104500:	e03f      	b.n	8104582 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	699b      	ldr	r3, [r3, #24]
 8104506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810450a:	d123      	bne.n	8104554 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104510:	2b03      	cmp	r3, #3
 8104512:	d838      	bhi.n	8104586 <DMA_CheckFifoParam+0xda>
 8104514:	a201      	add	r2, pc, #4	; (adr r2, 810451c <DMA_CheckFifoParam+0x70>)
 8104516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810451a:	bf00      	nop
 810451c:	0810452d 	.word	0x0810452d
 8104520:	08104533 	.word	0x08104533
 8104524:	0810452d 	.word	0x0810452d
 8104528:	08104545 	.word	0x08104545
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 810452c:	2301      	movs	r3, #1
 810452e:	73fb      	strb	r3, [r7, #15]
        break;
 8104530:	e030      	b.n	8104594 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810453a:	2b00      	cmp	r3, #0
 810453c:	d025      	beq.n	810458a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 810453e:	2301      	movs	r3, #1
 8104540:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104542:	e022      	b.n	810458a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 810454c:	d11f      	bne.n	810458e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 810454e:	2301      	movs	r3, #1
 8104550:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8104552:	e01c      	b.n	810458e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104558:	2b02      	cmp	r3, #2
 810455a:	d902      	bls.n	8104562 <DMA_CheckFifoParam+0xb6>
 810455c:	2b03      	cmp	r3, #3
 810455e:	d003      	beq.n	8104568 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8104560:	e018      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8104562:	2301      	movs	r3, #1
 8104564:	73fb      	strb	r3, [r7, #15]
        break;
 8104566:	e015      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810456c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104570:	2b00      	cmp	r3, #0
 8104572:	d00e      	beq.n	8104592 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8104574:	2301      	movs	r3, #1
 8104576:	73fb      	strb	r3, [r7, #15]
    break;
 8104578:	e00b      	b.n	8104592 <DMA_CheckFifoParam+0xe6>
        break;
 810457a:	bf00      	nop
 810457c:	e00a      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
        break;
 810457e:	bf00      	nop
 8104580:	e008      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
        break;
 8104582:	bf00      	nop
 8104584:	e006      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
        break;
 8104586:	bf00      	nop
 8104588:	e004      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
        break;
 810458a:	bf00      	nop
 810458c:	e002      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
        break;
 810458e:	bf00      	nop
 8104590:	e000      	b.n	8104594 <DMA_CheckFifoParam+0xe8>
    break;
 8104592:	bf00      	nop
    }
  }

  return status;
 8104594:	7bfb      	ldrb	r3, [r7, #15]
}
 8104596:	4618      	mov	r0, r3
 8104598:	3714      	adds	r7, #20
 810459a:	46bd      	mov	sp, r7
 810459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045a0:	4770      	bx	lr
 81045a2:	bf00      	nop

081045a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81045a4:	b480      	push	{r7}
 81045a6:	b085      	sub	sp, #20
 81045a8:	af00      	add	r7, sp, #0
 81045aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	681b      	ldr	r3, [r3, #0]
 81045b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	4a3a      	ldr	r2, [pc, #232]	; (81046a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81045b8:	4293      	cmp	r3, r2
 81045ba:	d022      	beq.n	8104602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	4a38      	ldr	r2, [pc, #224]	; (81046a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81045c2:	4293      	cmp	r3, r2
 81045c4:	d01d      	beq.n	8104602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	681b      	ldr	r3, [r3, #0]
 81045ca:	4a37      	ldr	r2, [pc, #220]	; (81046a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81045cc:	4293      	cmp	r3, r2
 81045ce:	d018      	beq.n	8104602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	4a35      	ldr	r2, [pc, #212]	; (81046ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81045d6:	4293      	cmp	r3, r2
 81045d8:	d013      	beq.n	8104602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81045da:	687b      	ldr	r3, [r7, #4]
 81045dc:	681b      	ldr	r3, [r3, #0]
 81045de:	4a34      	ldr	r2, [pc, #208]	; (81046b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81045e0:	4293      	cmp	r3, r2
 81045e2:	d00e      	beq.n	8104602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81045e4:	687b      	ldr	r3, [r7, #4]
 81045e6:	681b      	ldr	r3, [r3, #0]
 81045e8:	4a32      	ldr	r2, [pc, #200]	; (81046b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81045ea:	4293      	cmp	r3, r2
 81045ec:	d009      	beq.n	8104602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	681b      	ldr	r3, [r3, #0]
 81045f2:	4a31      	ldr	r2, [pc, #196]	; (81046b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81045f4:	4293      	cmp	r3, r2
 81045f6:	d004      	beq.n	8104602 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81045f8:	687b      	ldr	r3, [r7, #4]
 81045fa:	681b      	ldr	r3, [r3, #0]
 81045fc:	4a2f      	ldr	r2, [pc, #188]	; (81046bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81045fe:	4293      	cmp	r3, r2
 8104600:	d101      	bne.n	8104606 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8104602:	2301      	movs	r3, #1
 8104604:	e000      	b.n	8104608 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8104606:	2300      	movs	r3, #0
 8104608:	2b00      	cmp	r3, #0
 810460a:	d01c      	beq.n	8104646 <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 810460c:	687b      	ldr	r3, [r7, #4]
 810460e:	681b      	ldr	r3, [r3, #0]
 8104610:	b2db      	uxtb	r3, r3
 8104612:	3b08      	subs	r3, #8
 8104614:	4a2a      	ldr	r2, [pc, #168]	; (81046c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8104616:	fba2 2303 	umull	r2, r3, r2, r3
 810461a:	091b      	lsrs	r3, r3, #4
 810461c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 810461e:	68fb      	ldr	r3, [r7, #12]
 8104620:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 8104624:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 8104628:	009b      	lsls	r3, r3, #2
 810462a:	461a      	mov	r2, r3
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	4a24      	ldr	r2, [pc, #144]	; (81046c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8104634:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104636:	68fb      	ldr	r3, [r7, #12]
 8104638:	f003 031f 	and.w	r3, r3, #31
 810463c:	2201      	movs	r2, #1
 810463e:	409a      	lsls	r2, r3
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8104644:	e026      	b.n	8104694 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	681b      	ldr	r3, [r3, #0]
 810464a:	b2db      	uxtb	r3, r3
 810464c:	3b10      	subs	r3, #16
 810464e:	4a1e      	ldr	r2, [pc, #120]	; (81046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8104650:	fba2 2303 	umull	r2, r3, r2, r3
 8104654:	091b      	lsrs	r3, r3, #4
 8104656:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8104658:	68bb      	ldr	r3, [r7, #8]
 810465a:	4a1c      	ldr	r2, [pc, #112]	; (81046cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 810465c:	4293      	cmp	r3, r2
 810465e:	d806      	bhi.n	810466e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8104660:	68bb      	ldr	r3, [r7, #8]
 8104662:	4a1b      	ldr	r2, [pc, #108]	; (81046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8104664:	4293      	cmp	r3, r2
 8104666:	d902      	bls.n	810466e <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8104668:	68fb      	ldr	r3, [r7, #12]
 810466a:	3308      	adds	r3, #8
 810466c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8104674:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8104678:	009b      	lsls	r3, r3, #2
 810467a:	461a      	mov	r2, r3
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8104680:	687b      	ldr	r3, [r7, #4]
 8104682:	4a14      	ldr	r2, [pc, #80]	; (81046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8104684:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8104686:	68fb      	ldr	r3, [r7, #12]
 8104688:	f003 031f 	and.w	r3, r3, #31
 810468c:	2201      	movs	r2, #1
 810468e:	409a      	lsls	r2, r3
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	669a      	str	r2, [r3, #104]	; 0x68
}
 8104694:	bf00      	nop
 8104696:	3714      	adds	r7, #20
 8104698:	46bd      	mov	sp, r7
 810469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810469e:	4770      	bx	lr
 81046a0:	58025408 	.word	0x58025408
 81046a4:	5802541c 	.word	0x5802541c
 81046a8:	58025430 	.word	0x58025430
 81046ac:	58025444 	.word	0x58025444
 81046b0:	58025458 	.word	0x58025458
 81046b4:	5802546c 	.word	0x5802546c
 81046b8:	58025480 	.word	0x58025480
 81046bc:	58025494 	.word	0x58025494
 81046c0:	cccccccd 	.word	0xcccccccd
 81046c4:	58025880 	.word	0x58025880
 81046c8:	aaaaaaab 	.word	0xaaaaaaab
 81046cc:	400204b8 	.word	0x400204b8
 81046d0:	4002040f 	.word	0x4002040f
 81046d4:	40020880 	.word	0x40020880

081046d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81046d8:	b480      	push	{r7}
 81046da:	b085      	sub	sp, #20
 81046dc:	af00      	add	r7, sp, #0
 81046de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	685b      	ldr	r3, [r3, #4]
 81046e4:	b2db      	uxtb	r3, r3
 81046e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81046e8:	68fb      	ldr	r3, [r7, #12]
 81046ea:	2b00      	cmp	r3, #0
 81046ec:	d04a      	beq.n	8104784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81046ee:	68fb      	ldr	r3, [r7, #12]
 81046f0:	2b08      	cmp	r3, #8
 81046f2:	d847      	bhi.n	8104784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	681b      	ldr	r3, [r3, #0]
 81046f8:	4a25      	ldr	r2, [pc, #148]	; (8104790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81046fa:	4293      	cmp	r3, r2
 81046fc:	d022      	beq.n	8104744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	681b      	ldr	r3, [r3, #0]
 8104702:	4a24      	ldr	r2, [pc, #144]	; (8104794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8104704:	4293      	cmp	r3, r2
 8104706:	d01d      	beq.n	8104744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	4a22      	ldr	r2, [pc, #136]	; (8104798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 810470e:	4293      	cmp	r3, r2
 8104710:	d018      	beq.n	8104744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	681b      	ldr	r3, [r3, #0]
 8104716:	4a21      	ldr	r2, [pc, #132]	; (810479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8104718:	4293      	cmp	r3, r2
 810471a:	d013      	beq.n	8104744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810471c:	687b      	ldr	r3, [r7, #4]
 810471e:	681b      	ldr	r3, [r3, #0]
 8104720:	4a1f      	ldr	r2, [pc, #124]	; (81047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8104722:	4293      	cmp	r3, r2
 8104724:	d00e      	beq.n	8104744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	4a1e      	ldr	r2, [pc, #120]	; (81047a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 810472c:	4293      	cmp	r3, r2
 810472e:	d009      	beq.n	8104744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8104730:	687b      	ldr	r3, [r7, #4]
 8104732:	681b      	ldr	r3, [r3, #0]
 8104734:	4a1c      	ldr	r2, [pc, #112]	; (81047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8104736:	4293      	cmp	r3, r2
 8104738:	d004      	beq.n	8104744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	681b      	ldr	r3, [r3, #0]
 810473e:	4a1b      	ldr	r2, [pc, #108]	; (81047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8104740:	4293      	cmp	r3, r2
 8104742:	d101      	bne.n	8104748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8104744:	2301      	movs	r3, #1
 8104746:	e000      	b.n	810474a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8104748:	2300      	movs	r3, #0
 810474a:	2b00      	cmp	r3, #0
 810474c:	d00a      	beq.n	8104764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 810474e:	68fa      	ldr	r2, [r7, #12]
 8104750:	4b17      	ldr	r3, [pc, #92]	; (81047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8104752:	4413      	add	r3, r2
 8104754:	009b      	lsls	r3, r3, #2
 8104756:	461a      	mov	r2, r3
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	4a15      	ldr	r2, [pc, #84]	; (81047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8104760:	671a      	str	r2, [r3, #112]	; 0x70
 8104762:	e009      	b.n	8104778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8104764:	68fa      	ldr	r2, [r7, #12]
 8104766:	4b14      	ldr	r3, [pc, #80]	; (81047b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8104768:	4413      	add	r3, r2
 810476a:	009b      	lsls	r3, r3, #2
 810476c:	461a      	mov	r2, r3
 810476e:	687b      	ldr	r3, [r7, #4]
 8104770:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	4a11      	ldr	r2, [pc, #68]	; (81047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8104776:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8104778:	68fb      	ldr	r3, [r7, #12]
 810477a:	3b01      	subs	r3, #1
 810477c:	2201      	movs	r2, #1
 810477e:	409a      	lsls	r2, r3
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8104784:	bf00      	nop
 8104786:	3714      	adds	r7, #20
 8104788:	46bd      	mov	sp, r7
 810478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810478e:	4770      	bx	lr
 8104790:	58025408 	.word	0x58025408
 8104794:	5802541c 	.word	0x5802541c
 8104798:	58025430 	.word	0x58025430
 810479c:	58025444 	.word	0x58025444
 81047a0:	58025458 	.word	0x58025458
 81047a4:	5802546c 	.word	0x5802546c
 81047a8:	58025480 	.word	0x58025480
 81047ac:	58025494 	.word	0x58025494
 81047b0:	1600963f 	.word	0x1600963f
 81047b4:	58025940 	.word	0x58025940
 81047b8:	1000823f 	.word	0x1000823f
 81047bc:	40020940 	.word	0x40020940

081047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81047c0:	b480      	push	{r7}
 81047c2:	b089      	sub	sp, #36	; 0x24
 81047c4:	af00      	add	r7, sp, #0
 81047c6:	6078      	str	r0, [r7, #4]
 81047c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81047ca:	2300      	movs	r3, #0
 81047cc:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81047ce:	4b89      	ldr	r3, [pc, #548]	; (81049f4 <HAL_GPIO_Init+0x234>)
 81047d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81047d2:	e194      	b.n	8104afe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81047d4:	683b      	ldr	r3, [r7, #0]
 81047d6:	681a      	ldr	r2, [r3, #0]
 81047d8:	2101      	movs	r1, #1
 81047da:	69fb      	ldr	r3, [r7, #28]
 81047dc:	fa01 f303 	lsl.w	r3, r1, r3
 81047e0:	4013      	ands	r3, r2
 81047e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81047e4:	693b      	ldr	r3, [r7, #16]
 81047e6:	2b00      	cmp	r3, #0
 81047e8:	f000 8186 	beq.w	8104af8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81047ec:	683b      	ldr	r3, [r7, #0]
 81047ee:	685b      	ldr	r3, [r3, #4]
 81047f0:	2b01      	cmp	r3, #1
 81047f2:	d00b      	beq.n	810480c <HAL_GPIO_Init+0x4c>
 81047f4:	683b      	ldr	r3, [r7, #0]
 81047f6:	685b      	ldr	r3, [r3, #4]
 81047f8:	2b02      	cmp	r3, #2
 81047fa:	d007      	beq.n	810480c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81047fc:	683b      	ldr	r3, [r7, #0]
 81047fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104800:	2b11      	cmp	r3, #17
 8104802:	d003      	beq.n	810480c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104804:	683b      	ldr	r3, [r7, #0]
 8104806:	685b      	ldr	r3, [r3, #4]
 8104808:	2b12      	cmp	r3, #18
 810480a:	d130      	bne.n	810486e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	689b      	ldr	r3, [r3, #8]
 8104810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104812:	69fb      	ldr	r3, [r7, #28]
 8104814:	005b      	lsls	r3, r3, #1
 8104816:	2203      	movs	r2, #3
 8104818:	fa02 f303 	lsl.w	r3, r2, r3
 810481c:	43db      	mvns	r3, r3
 810481e:	69ba      	ldr	r2, [r7, #24]
 8104820:	4013      	ands	r3, r2
 8104822:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104824:	683b      	ldr	r3, [r7, #0]
 8104826:	68da      	ldr	r2, [r3, #12]
 8104828:	69fb      	ldr	r3, [r7, #28]
 810482a:	005b      	lsls	r3, r3, #1
 810482c:	fa02 f303 	lsl.w	r3, r2, r3
 8104830:	69ba      	ldr	r2, [r7, #24]
 8104832:	4313      	orrs	r3, r2
 8104834:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	69ba      	ldr	r2, [r7, #24]
 810483a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	685b      	ldr	r3, [r3, #4]
 8104840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104842:	2201      	movs	r2, #1
 8104844:	69fb      	ldr	r3, [r7, #28]
 8104846:	fa02 f303 	lsl.w	r3, r2, r3
 810484a:	43db      	mvns	r3, r3
 810484c:	69ba      	ldr	r2, [r7, #24]
 810484e:	4013      	ands	r3, r2
 8104850:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8104852:	683b      	ldr	r3, [r7, #0]
 8104854:	685b      	ldr	r3, [r3, #4]
 8104856:	091b      	lsrs	r3, r3, #4
 8104858:	f003 0201 	and.w	r2, r3, #1
 810485c:	69fb      	ldr	r3, [r7, #28]
 810485e:	fa02 f303 	lsl.w	r3, r2, r3
 8104862:	69ba      	ldr	r2, [r7, #24]
 8104864:	4313      	orrs	r3, r2
 8104866:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104868:	687b      	ldr	r3, [r7, #4]
 810486a:	69ba      	ldr	r2, [r7, #24]
 810486c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810486e:	687b      	ldr	r3, [r7, #4]
 8104870:	68db      	ldr	r3, [r3, #12]
 8104872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104874:	69fb      	ldr	r3, [r7, #28]
 8104876:	005b      	lsls	r3, r3, #1
 8104878:	2203      	movs	r2, #3
 810487a:	fa02 f303 	lsl.w	r3, r2, r3
 810487e:	43db      	mvns	r3, r3
 8104880:	69ba      	ldr	r2, [r7, #24]
 8104882:	4013      	ands	r3, r2
 8104884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104886:	683b      	ldr	r3, [r7, #0]
 8104888:	689a      	ldr	r2, [r3, #8]
 810488a:	69fb      	ldr	r3, [r7, #28]
 810488c:	005b      	lsls	r3, r3, #1
 810488e:	fa02 f303 	lsl.w	r3, r2, r3
 8104892:	69ba      	ldr	r2, [r7, #24]
 8104894:	4313      	orrs	r3, r2
 8104896:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104898:	687b      	ldr	r3, [r7, #4]
 810489a:	69ba      	ldr	r2, [r7, #24]
 810489c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810489e:	683b      	ldr	r3, [r7, #0]
 81048a0:	685b      	ldr	r3, [r3, #4]
 81048a2:	2b02      	cmp	r3, #2
 81048a4:	d003      	beq.n	81048ae <HAL_GPIO_Init+0xee>
 81048a6:	683b      	ldr	r3, [r7, #0]
 81048a8:	685b      	ldr	r3, [r3, #4]
 81048aa:	2b12      	cmp	r3, #18
 81048ac:	d123      	bne.n	81048f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81048ae:	69fb      	ldr	r3, [r7, #28]
 81048b0:	08da      	lsrs	r2, r3, #3
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	3208      	adds	r2, #8
 81048b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81048bc:	69fb      	ldr	r3, [r7, #28]
 81048be:	f003 0307 	and.w	r3, r3, #7
 81048c2:	009b      	lsls	r3, r3, #2
 81048c4:	220f      	movs	r2, #15
 81048c6:	fa02 f303 	lsl.w	r3, r2, r3
 81048ca:	43db      	mvns	r3, r3
 81048cc:	69ba      	ldr	r2, [r7, #24]
 81048ce:	4013      	ands	r3, r2
 81048d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81048d2:	683b      	ldr	r3, [r7, #0]
 81048d4:	691a      	ldr	r2, [r3, #16]
 81048d6:	69fb      	ldr	r3, [r7, #28]
 81048d8:	f003 0307 	and.w	r3, r3, #7
 81048dc:	009b      	lsls	r3, r3, #2
 81048de:	fa02 f303 	lsl.w	r3, r2, r3
 81048e2:	69ba      	ldr	r2, [r7, #24]
 81048e4:	4313      	orrs	r3, r2
 81048e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81048e8:	69fb      	ldr	r3, [r7, #28]
 81048ea:	08da      	lsrs	r2, r3, #3
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	3208      	adds	r2, #8
 81048f0:	69b9      	ldr	r1, [r7, #24]
 81048f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81048f6:	687b      	ldr	r3, [r7, #4]
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81048fc:	69fb      	ldr	r3, [r7, #28]
 81048fe:	005b      	lsls	r3, r3, #1
 8104900:	2203      	movs	r2, #3
 8104902:	fa02 f303 	lsl.w	r3, r2, r3
 8104906:	43db      	mvns	r3, r3
 8104908:	69ba      	ldr	r2, [r7, #24]
 810490a:	4013      	ands	r3, r2
 810490c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810490e:	683b      	ldr	r3, [r7, #0]
 8104910:	685b      	ldr	r3, [r3, #4]
 8104912:	f003 0203 	and.w	r2, r3, #3
 8104916:	69fb      	ldr	r3, [r7, #28]
 8104918:	005b      	lsls	r3, r3, #1
 810491a:	fa02 f303 	lsl.w	r3, r2, r3
 810491e:	69ba      	ldr	r2, [r7, #24]
 8104920:	4313      	orrs	r3, r2
 8104922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104924:	687b      	ldr	r3, [r7, #4]
 8104926:	69ba      	ldr	r2, [r7, #24]
 8104928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810492a:	683b      	ldr	r3, [r7, #0]
 810492c:	685b      	ldr	r3, [r3, #4]
 810492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104932:	2b00      	cmp	r3, #0
 8104934:	f000 80e0 	beq.w	8104af8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104938:	4b2f      	ldr	r3, [pc, #188]	; (81049f8 <HAL_GPIO_Init+0x238>)
 810493a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810493e:	4a2e      	ldr	r2, [pc, #184]	; (81049f8 <HAL_GPIO_Init+0x238>)
 8104940:	f043 0302 	orr.w	r3, r3, #2
 8104944:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104948:	4b2b      	ldr	r3, [pc, #172]	; (81049f8 <HAL_GPIO_Init+0x238>)
 810494a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810494e:	f003 0302 	and.w	r3, r3, #2
 8104952:	60fb      	str	r3, [r7, #12]
 8104954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104956:	4a29      	ldr	r2, [pc, #164]	; (81049fc <HAL_GPIO_Init+0x23c>)
 8104958:	69fb      	ldr	r3, [r7, #28]
 810495a:	089b      	lsrs	r3, r3, #2
 810495c:	3302      	adds	r3, #2
 810495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104964:	69fb      	ldr	r3, [r7, #28]
 8104966:	f003 0303 	and.w	r3, r3, #3
 810496a:	009b      	lsls	r3, r3, #2
 810496c:	220f      	movs	r2, #15
 810496e:	fa02 f303 	lsl.w	r3, r2, r3
 8104972:	43db      	mvns	r3, r3
 8104974:	69ba      	ldr	r2, [r7, #24]
 8104976:	4013      	ands	r3, r2
 8104978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	4a20      	ldr	r2, [pc, #128]	; (8104a00 <HAL_GPIO_Init+0x240>)
 810497e:	4293      	cmp	r3, r2
 8104980:	d052      	beq.n	8104a28 <HAL_GPIO_Init+0x268>
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	4a1f      	ldr	r2, [pc, #124]	; (8104a04 <HAL_GPIO_Init+0x244>)
 8104986:	4293      	cmp	r3, r2
 8104988:	d031      	beq.n	81049ee <HAL_GPIO_Init+0x22e>
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	4a1e      	ldr	r2, [pc, #120]	; (8104a08 <HAL_GPIO_Init+0x248>)
 810498e:	4293      	cmp	r3, r2
 8104990:	d02b      	beq.n	81049ea <HAL_GPIO_Init+0x22a>
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	4a1d      	ldr	r2, [pc, #116]	; (8104a0c <HAL_GPIO_Init+0x24c>)
 8104996:	4293      	cmp	r3, r2
 8104998:	d025      	beq.n	81049e6 <HAL_GPIO_Init+0x226>
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	4a1c      	ldr	r2, [pc, #112]	; (8104a10 <HAL_GPIO_Init+0x250>)
 810499e:	4293      	cmp	r3, r2
 81049a0:	d01f      	beq.n	81049e2 <HAL_GPIO_Init+0x222>
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	4a1b      	ldr	r2, [pc, #108]	; (8104a14 <HAL_GPIO_Init+0x254>)
 81049a6:	4293      	cmp	r3, r2
 81049a8:	d019      	beq.n	81049de <HAL_GPIO_Init+0x21e>
 81049aa:	687b      	ldr	r3, [r7, #4]
 81049ac:	4a1a      	ldr	r2, [pc, #104]	; (8104a18 <HAL_GPIO_Init+0x258>)
 81049ae:	4293      	cmp	r3, r2
 81049b0:	d013      	beq.n	81049da <HAL_GPIO_Init+0x21a>
 81049b2:	687b      	ldr	r3, [r7, #4]
 81049b4:	4a19      	ldr	r2, [pc, #100]	; (8104a1c <HAL_GPIO_Init+0x25c>)
 81049b6:	4293      	cmp	r3, r2
 81049b8:	d00d      	beq.n	81049d6 <HAL_GPIO_Init+0x216>
 81049ba:	687b      	ldr	r3, [r7, #4]
 81049bc:	4a18      	ldr	r2, [pc, #96]	; (8104a20 <HAL_GPIO_Init+0x260>)
 81049be:	4293      	cmp	r3, r2
 81049c0:	d007      	beq.n	81049d2 <HAL_GPIO_Init+0x212>
 81049c2:	687b      	ldr	r3, [r7, #4]
 81049c4:	4a17      	ldr	r2, [pc, #92]	; (8104a24 <HAL_GPIO_Init+0x264>)
 81049c6:	4293      	cmp	r3, r2
 81049c8:	d101      	bne.n	81049ce <HAL_GPIO_Init+0x20e>
 81049ca:	2309      	movs	r3, #9
 81049cc:	e02d      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049ce:	230a      	movs	r3, #10
 81049d0:	e02b      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049d2:	2308      	movs	r3, #8
 81049d4:	e029      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049d6:	2307      	movs	r3, #7
 81049d8:	e027      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049da:	2306      	movs	r3, #6
 81049dc:	e025      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049de:	2305      	movs	r3, #5
 81049e0:	e023      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049e2:	2304      	movs	r3, #4
 81049e4:	e021      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049e6:	2303      	movs	r3, #3
 81049e8:	e01f      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049ea:	2302      	movs	r3, #2
 81049ec:	e01d      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049ee:	2301      	movs	r3, #1
 81049f0:	e01b      	b.n	8104a2a <HAL_GPIO_Init+0x26a>
 81049f2:	bf00      	nop
 81049f4:	580000c0 	.word	0x580000c0
 81049f8:	58024400 	.word	0x58024400
 81049fc:	58000400 	.word	0x58000400
 8104a00:	58020000 	.word	0x58020000
 8104a04:	58020400 	.word	0x58020400
 8104a08:	58020800 	.word	0x58020800
 8104a0c:	58020c00 	.word	0x58020c00
 8104a10:	58021000 	.word	0x58021000
 8104a14:	58021400 	.word	0x58021400
 8104a18:	58021800 	.word	0x58021800
 8104a1c:	58021c00 	.word	0x58021c00
 8104a20:	58022000 	.word	0x58022000
 8104a24:	58022400 	.word	0x58022400
 8104a28:	2300      	movs	r3, #0
 8104a2a:	69fa      	ldr	r2, [r7, #28]
 8104a2c:	f002 0203 	and.w	r2, r2, #3
 8104a30:	0092      	lsls	r2, r2, #2
 8104a32:	4093      	lsls	r3, r2
 8104a34:	69ba      	ldr	r2, [r7, #24]
 8104a36:	4313      	orrs	r3, r2
 8104a38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104a3a:	4938      	ldr	r1, [pc, #224]	; (8104b1c <HAL_GPIO_Init+0x35c>)
 8104a3c:	69fb      	ldr	r3, [r7, #28]
 8104a3e:	089b      	lsrs	r3, r3, #2
 8104a40:	3302      	adds	r3, #2
 8104a42:	69ba      	ldr	r2, [r7, #24]
 8104a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104a48:	697b      	ldr	r3, [r7, #20]
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a4e:	693b      	ldr	r3, [r7, #16]
 8104a50:	43db      	mvns	r3, r3
 8104a52:	69ba      	ldr	r2, [r7, #24]
 8104a54:	4013      	ands	r3, r2
 8104a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104a58:	683b      	ldr	r3, [r7, #0]
 8104a5a:	685b      	ldr	r3, [r3, #4]
 8104a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104a60:	2b00      	cmp	r3, #0
 8104a62:	d003      	beq.n	8104a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104a64:	69ba      	ldr	r2, [r7, #24]
 8104a66:	693b      	ldr	r3, [r7, #16]
 8104a68:	4313      	orrs	r3, r2
 8104a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104a6c:	697b      	ldr	r3, [r7, #20]
 8104a6e:	69ba      	ldr	r2, [r7, #24]
 8104a70:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8104a72:	697b      	ldr	r3, [r7, #20]
 8104a74:	685b      	ldr	r3, [r3, #4]
 8104a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104a78:	693b      	ldr	r3, [r7, #16]
 8104a7a:	43db      	mvns	r3, r3
 8104a7c:	69ba      	ldr	r2, [r7, #24]
 8104a7e:	4013      	ands	r3, r2
 8104a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8104a82:	683b      	ldr	r3, [r7, #0]
 8104a84:	685b      	ldr	r3, [r3, #4]
 8104a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d003      	beq.n	8104a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8104a8e:	69ba      	ldr	r2, [r7, #24]
 8104a90:	693b      	ldr	r3, [r7, #16]
 8104a92:	4313      	orrs	r3, r2
 8104a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8104a96:	697b      	ldr	r3, [r7, #20]
 8104a98:	69ba      	ldr	r2, [r7, #24]
 8104a9a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8104a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104aa4:	693b      	ldr	r3, [r7, #16]
 8104aa6:	43db      	mvns	r3, r3
 8104aa8:	69ba      	ldr	r2, [r7, #24]
 8104aaa:	4013      	ands	r3, r2
 8104aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8104aae:	683b      	ldr	r3, [r7, #0]
 8104ab0:	685b      	ldr	r3, [r3, #4]
 8104ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104ab6:	2b00      	cmp	r3, #0
 8104ab8:	d003      	beq.n	8104ac2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8104aba:	69ba      	ldr	r2, [r7, #24]
 8104abc:	693b      	ldr	r3, [r7, #16]
 8104abe:	4313      	orrs	r3, r2
 8104ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8104ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104ac6:	69bb      	ldr	r3, [r7, #24]
 8104ac8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8104aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8104ace:	685b      	ldr	r3, [r3, #4]
 8104ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104ad2:	693b      	ldr	r3, [r7, #16]
 8104ad4:	43db      	mvns	r3, r3
 8104ad6:	69ba      	ldr	r2, [r7, #24]
 8104ad8:	4013      	ands	r3, r2
 8104ada:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8104adc:	683b      	ldr	r3, [r7, #0]
 8104ade:	685b      	ldr	r3, [r3, #4]
 8104ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104ae4:	2b00      	cmp	r3, #0
 8104ae6:	d003      	beq.n	8104af0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104ae8:	69ba      	ldr	r2, [r7, #24]
 8104aea:	693b      	ldr	r3, [r7, #16]
 8104aec:	4313      	orrs	r3, r2
 8104aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8104af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104af4:	69bb      	ldr	r3, [r7, #24]
 8104af6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104af8:	69fb      	ldr	r3, [r7, #28]
 8104afa:	3301      	adds	r3, #1
 8104afc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104afe:	683b      	ldr	r3, [r7, #0]
 8104b00:	681a      	ldr	r2, [r3, #0]
 8104b02:	69fb      	ldr	r3, [r7, #28]
 8104b04:	fa22 f303 	lsr.w	r3, r2, r3
 8104b08:	2b00      	cmp	r3, #0
 8104b0a:	f47f ae63 	bne.w	81047d4 <HAL_GPIO_Init+0x14>
  }
}
 8104b0e:	bf00      	nop
 8104b10:	3724      	adds	r7, #36	; 0x24
 8104b12:	46bd      	mov	sp, r7
 8104b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b18:	4770      	bx	lr
 8104b1a:	bf00      	nop
 8104b1c:	58000400 	.word	0x58000400

08104b20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8104b20:	b480      	push	{r7}
 8104b22:	b083      	sub	sp, #12
 8104b24:	af00      	add	r7, sp, #0
 8104b26:	6078      	str	r0, [r7, #4]
 8104b28:	460b      	mov	r3, r1
 8104b2a:	807b      	strh	r3, [r7, #2]
 8104b2c:	4613      	mov	r3, r2
 8104b2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8104b30:	787b      	ldrb	r3, [r7, #1]
 8104b32:	2b00      	cmp	r3, #0
 8104b34:	d003      	beq.n	8104b3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104b36:	887a      	ldrh	r2, [r7, #2]
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104b3c:	e003      	b.n	8104b46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104b3e:	887b      	ldrh	r3, [r7, #2]
 8104b40:	041a      	lsls	r2, r3, #16
 8104b42:	687b      	ldr	r3, [r7, #4]
 8104b44:	619a      	str	r2, [r3, #24]
}
 8104b46:	bf00      	nop
 8104b48:	370c      	adds	r7, #12
 8104b4a:	46bd      	mov	sp, r7
 8104b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b50:	4770      	bx	lr
	...

08104b54 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8104b54:	b480      	push	{r7}
 8104b56:	b083      	sub	sp, #12
 8104b58:	af00      	add	r7, sp, #0
 8104b5a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8104b5c:	4b05      	ldr	r3, [pc, #20]	; (8104b74 <HAL_HSEM_ActivateNotification+0x20>)
 8104b5e:	681a      	ldr	r2, [r3, #0]
 8104b60:	4904      	ldr	r1, [pc, #16]	; (8104b74 <HAL_HSEM_ActivateNotification+0x20>)
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	4313      	orrs	r3, r2
 8104b66:	600b      	str	r3, [r1, #0]
#endif
}
 8104b68:	bf00      	nop
 8104b6a:	370c      	adds	r7, #12
 8104b6c:	46bd      	mov	sp, r7
 8104b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104b72:	4770      	bx	lr
 8104b74:	58026510 	.word	0x58026510

08104b78 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8104b78:	b580      	push	{r7, lr}
 8104b7a:	b082      	sub	sp, #8
 8104b7c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8104b7e:	4b0a      	ldr	r3, [pc, #40]	; (8104ba8 <HAL_HSEM_IRQHandler+0x30>)
 8104b80:	68db      	ldr	r3, [r3, #12]
 8104b82:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8104b84:	4b08      	ldr	r3, [pc, #32]	; (8104ba8 <HAL_HSEM_IRQHandler+0x30>)
 8104b86:	681a      	ldr	r2, [r3, #0]
 8104b88:	687b      	ldr	r3, [r7, #4]
 8104b8a:	43db      	mvns	r3, r3
 8104b8c:	4906      	ldr	r1, [pc, #24]	; (8104ba8 <HAL_HSEM_IRQHandler+0x30>)
 8104b8e:	4013      	ands	r3, r2
 8104b90:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8104b92:	4a05      	ldr	r2, [pc, #20]	; (8104ba8 <HAL_HSEM_IRQHandler+0x30>)
 8104b94:	687b      	ldr	r3, [r7, #4]
 8104b96:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8104b98:	6878      	ldr	r0, [r7, #4]
 8104b9a:	f000 f807 	bl	8104bac <HAL_HSEM_FreeCallback>
}
 8104b9e:	bf00      	nop
 8104ba0:	3708      	adds	r7, #8
 8104ba2:	46bd      	mov	sp, r7
 8104ba4:	bd80      	pop	{r7, pc}
 8104ba6:	bf00      	nop
 8104ba8:	58026510 	.word	0x58026510

08104bac <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8104bac:	b480      	push	{r7}
 8104bae:	b083      	sub	sp, #12
 8104bb0:	af00      	add	r7, sp, #0
 8104bb2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8104bb4:	bf00      	nop
 8104bb6:	370c      	adds	r7, #12
 8104bb8:	46bd      	mov	sp, r7
 8104bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104bbe:	4770      	bx	lr

08104bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8104bc0:	b580      	push	{r7, lr}
 8104bc2:	b082      	sub	sp, #8
 8104bc4:	af00      	add	r7, sp, #0
 8104bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	2b00      	cmp	r3, #0
 8104bcc:	d101      	bne.n	8104bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8104bce:	2301      	movs	r3, #1
 8104bd0:	e081      	b.n	8104cd6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104bd8:	b2db      	uxtb	r3, r3
 8104bda:	2b00      	cmp	r3, #0
 8104bdc:	d106      	bne.n	8104bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	2200      	movs	r2, #0
 8104be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8104be6:	6878      	ldr	r0, [r7, #4]
 8104be8:	f7fc fa98 	bl	810111c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8104bec:	687b      	ldr	r3, [r7, #4]
 8104bee:	2224      	movs	r2, #36	; 0x24
 8104bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	681a      	ldr	r2, [r3, #0]
 8104bfa:	687b      	ldr	r3, [r7, #4]
 8104bfc:	681b      	ldr	r3, [r3, #0]
 8104bfe:	f022 0201 	bic.w	r2, r2, #1
 8104c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	685a      	ldr	r2, [r3, #4]
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	681b      	ldr	r3, [r3, #0]
 8104c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8104c10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	689a      	ldr	r2, [r3, #8]
 8104c18:	687b      	ldr	r3, [r7, #4]
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104c20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8104c22:	687b      	ldr	r3, [r7, #4]
 8104c24:	68db      	ldr	r3, [r3, #12]
 8104c26:	2b01      	cmp	r3, #1
 8104c28:	d107      	bne.n	8104c3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	689a      	ldr	r2, [r3, #8]
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8104c36:	609a      	str	r2, [r3, #8]
 8104c38:	e006      	b.n	8104c48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	689a      	ldr	r2, [r3, #8]
 8104c3e:	687b      	ldr	r3, [r7, #4]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8104c46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	68db      	ldr	r3, [r3, #12]
 8104c4c:	2b02      	cmp	r3, #2
 8104c4e:	d104      	bne.n	8104c5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104c58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8104c5a:	687b      	ldr	r3, [r7, #4]
 8104c5c:	681b      	ldr	r3, [r3, #0]
 8104c5e:	685b      	ldr	r3, [r3, #4]
 8104c60:	687a      	ldr	r2, [r7, #4]
 8104c62:	6812      	ldr	r2, [r2, #0]
 8104c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8104c6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	681b      	ldr	r3, [r3, #0]
 8104c72:	68da      	ldr	r2, [r3, #12]
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8104c7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8104c7e:	687b      	ldr	r3, [r7, #4]
 8104c80:	691a      	ldr	r2, [r3, #16]
 8104c82:	687b      	ldr	r3, [r7, #4]
 8104c84:	695b      	ldr	r3, [r3, #20]
 8104c86:	ea42 0103 	orr.w	r1, r2, r3
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	699b      	ldr	r3, [r3, #24]
 8104c8e:	021a      	lsls	r2, r3, #8
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	430a      	orrs	r2, r1
 8104c96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	69d9      	ldr	r1, [r3, #28]
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	6a1a      	ldr	r2, [r3, #32]
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	430a      	orrs	r2, r1
 8104ca6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8104ca8:	687b      	ldr	r3, [r7, #4]
 8104caa:	681b      	ldr	r3, [r3, #0]
 8104cac:	681a      	ldr	r2, [r3, #0]
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	f042 0201 	orr.w	r2, r2, #1
 8104cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	2200      	movs	r2, #0
 8104cbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	2220      	movs	r2, #32
 8104cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8104cc6:	687b      	ldr	r3, [r7, #4]
 8104cc8:	2200      	movs	r2, #0
 8104cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	2200      	movs	r2, #0
 8104cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8104cd4:	2300      	movs	r3, #0
}
 8104cd6:	4618      	mov	r0, r3
 8104cd8:	3708      	adds	r7, #8
 8104cda:	46bd      	mov	sp, r7
 8104cdc:	bd80      	pop	{r7, pc}

08104cde <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8104cde:	b480      	push	{r7}
 8104ce0:	b083      	sub	sp, #12
 8104ce2:	af00      	add	r7, sp, #0
 8104ce4:	6078      	str	r0, [r7, #4]
 8104ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104cee:	b2db      	uxtb	r3, r3
 8104cf0:	2b20      	cmp	r3, #32
 8104cf2:	d138      	bne.n	8104d66 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104cf4:	687b      	ldr	r3, [r7, #4]
 8104cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104cfa:	2b01      	cmp	r3, #1
 8104cfc:	d101      	bne.n	8104d02 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104cfe:	2302      	movs	r3, #2
 8104d00:	e032      	b.n	8104d68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104d02:	687b      	ldr	r3, [r7, #4]
 8104d04:	2201      	movs	r2, #1
 8104d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104d0a:	687b      	ldr	r3, [r7, #4]
 8104d0c:	2224      	movs	r2, #36	; 0x24
 8104d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104d12:	687b      	ldr	r3, [r7, #4]
 8104d14:	681b      	ldr	r3, [r3, #0]
 8104d16:	681a      	ldr	r2, [r3, #0]
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	681b      	ldr	r3, [r3, #0]
 8104d1c:	f022 0201 	bic.w	r2, r2, #1
 8104d20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	681b      	ldr	r3, [r3, #0]
 8104d26:	681a      	ldr	r2, [r3, #0]
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8104d30:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	681b      	ldr	r3, [r3, #0]
 8104d36:	6819      	ldr	r1, [r3, #0]
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	681b      	ldr	r3, [r3, #0]
 8104d3c:	683a      	ldr	r2, [r7, #0]
 8104d3e:	430a      	orrs	r2, r1
 8104d40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104d42:	687b      	ldr	r3, [r7, #4]
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	681a      	ldr	r2, [r3, #0]
 8104d48:	687b      	ldr	r3, [r7, #4]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	f042 0201 	orr.w	r2, r2, #1
 8104d50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104d52:	687b      	ldr	r3, [r7, #4]
 8104d54:	2220      	movs	r2, #32
 8104d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	2200      	movs	r2, #0
 8104d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104d62:	2300      	movs	r3, #0
 8104d64:	e000      	b.n	8104d68 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8104d66:	2302      	movs	r3, #2
  }
}
 8104d68:	4618      	mov	r0, r3
 8104d6a:	370c      	adds	r7, #12
 8104d6c:	46bd      	mov	sp, r7
 8104d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d72:	4770      	bx	lr

08104d74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8104d74:	b480      	push	{r7}
 8104d76:	b085      	sub	sp, #20
 8104d78:	af00      	add	r7, sp, #0
 8104d7a:	6078      	str	r0, [r7, #4]
 8104d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104d7e:	687b      	ldr	r3, [r7, #4]
 8104d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104d84:	b2db      	uxtb	r3, r3
 8104d86:	2b20      	cmp	r3, #32
 8104d88:	d139      	bne.n	8104dfe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104d90:	2b01      	cmp	r3, #1
 8104d92:	d101      	bne.n	8104d98 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8104d94:	2302      	movs	r3, #2
 8104d96:	e033      	b.n	8104e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8104d98:	687b      	ldr	r3, [r7, #4]
 8104d9a:	2201      	movs	r2, #1
 8104d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104da0:	687b      	ldr	r3, [r7, #4]
 8104da2:	2224      	movs	r2, #36	; 0x24
 8104da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104da8:	687b      	ldr	r3, [r7, #4]
 8104daa:	681b      	ldr	r3, [r3, #0]
 8104dac:	681a      	ldr	r2, [r3, #0]
 8104dae:	687b      	ldr	r3, [r7, #4]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	f022 0201 	bic.w	r2, r2, #1
 8104db6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	681b      	ldr	r3, [r3, #0]
 8104dbe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8104dc0:	68fb      	ldr	r3, [r7, #12]
 8104dc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104dc6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8104dc8:	683b      	ldr	r3, [r7, #0]
 8104dca:	021b      	lsls	r3, r3, #8
 8104dcc:	68fa      	ldr	r2, [r7, #12]
 8104dce:	4313      	orrs	r3, r2
 8104dd0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8104dd2:	687b      	ldr	r3, [r7, #4]
 8104dd4:	681b      	ldr	r3, [r3, #0]
 8104dd6:	68fa      	ldr	r2, [r7, #12]
 8104dd8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104dda:	687b      	ldr	r3, [r7, #4]
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	681a      	ldr	r2, [r3, #0]
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	f042 0201 	orr.w	r2, r2, #1
 8104de8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104dea:	687b      	ldr	r3, [r7, #4]
 8104dec:	2220      	movs	r2, #32
 8104dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104df2:	687b      	ldr	r3, [r7, #4]
 8104df4:	2200      	movs	r2, #0
 8104df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104dfa:	2300      	movs	r3, #0
 8104dfc:	e000      	b.n	8104e00 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104dfe:	2302      	movs	r3, #2
  }
}
 8104e00:	4618      	mov	r0, r3
 8104e02:	3714      	adds	r7, #20
 8104e04:	46bd      	mov	sp, r7
 8104e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e0a:	4770      	bx	lr

08104e0c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104e0c:	b580      	push	{r7, lr}
 8104e0e:	b084      	sub	sp, #16
 8104e10:	af00      	add	r7, sp, #0
 8104e12:	60f8      	str	r0, [r7, #12]
 8104e14:	460b      	mov	r3, r1
 8104e16:	607a      	str	r2, [r7, #4]
 8104e18:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104e1a:	4b35      	ldr	r3, [pc, #212]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104e1c:	681b      	ldr	r3, [r3, #0]
 8104e1e:	f023 0201 	bic.w	r2, r3, #1
 8104e22:	4933      	ldr	r1, [pc, #204]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104e24:	68fb      	ldr	r3, [r7, #12]
 8104e26:	4313      	orrs	r3, r2
 8104e28:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	2b00      	cmp	r3, #0
 8104e2e:	d121      	bne.n	8104e74 <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104e30:	f7fd f998 	bl	8102164 <HAL_GetCurrentCPUID>
 8104e34:	4603      	mov	r3, r0
 8104e36:	2b03      	cmp	r3, #3
 8104e38:	d154      	bne.n	8104ee4 <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104e3a:	4b2d      	ldr	r3, [pc, #180]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104e3c:	691b      	ldr	r3, [r3, #16]
 8104e3e:	4a2c      	ldr	r2, [pc, #176]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104e40:	f023 0301 	bic.w	r3, r3, #1
 8104e44:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104e46:	4b2b      	ldr	r3, [pc, #172]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104e48:	691b      	ldr	r3, [r3, #16]
 8104e4a:	4a2a      	ldr	r2, [pc, #168]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104e4c:	f043 0304 	orr.w	r3, r3, #4
 8104e50:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8104e52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8104e56:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104e5a:	7afb      	ldrb	r3, [r7, #11]
 8104e5c:	2b01      	cmp	r3, #1
 8104e5e:	d101      	bne.n	8104e64 <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104e60:	bf30      	wfi
 8104e62:	e000      	b.n	8104e66 <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104e64:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104e66:	4b23      	ldr	r3, [pc, #140]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104e68:	691b      	ldr	r3, [r3, #16]
 8104e6a:	4a22      	ldr	r2, [pc, #136]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104e6c:	f023 0304 	bic.w	r3, r3, #4
 8104e70:	6113      	str	r3, [r2, #16]
 8104e72:	e03a      	b.n	8104eea <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104e74:	687b      	ldr	r3, [r7, #4]
 8104e76:	2b01      	cmp	r3, #1
 8104e78:	d121      	bne.n	8104ebe <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104e7a:	f7fd f973 	bl	8102164 <HAL_GetCurrentCPUID>
 8104e7e:	4603      	mov	r3, r0
 8104e80:	2b01      	cmp	r3, #1
 8104e82:	d131      	bne.n	8104ee8 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104e84:	4b1a      	ldr	r3, [pc, #104]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104e86:	695b      	ldr	r3, [r3, #20]
 8104e88:	4a19      	ldr	r2, [pc, #100]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104e8a:	f023 0302 	bic.w	r3, r3, #2
 8104e8e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104e90:	4b18      	ldr	r3, [pc, #96]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104e92:	691b      	ldr	r3, [r3, #16]
 8104e94:	4a17      	ldr	r2, [pc, #92]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104e96:	f043 0304 	orr.w	r3, r3, #4
 8104e9a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8104e9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8104ea0:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104ea4:	7afb      	ldrb	r3, [r7, #11]
 8104ea6:	2b01      	cmp	r3, #1
 8104ea8:	d101      	bne.n	8104eae <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104eaa:	bf30      	wfi
 8104eac:	e000      	b.n	8104eb0 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104eae:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104eb0:	4b10      	ldr	r3, [pc, #64]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104eb2:	691b      	ldr	r3, [r3, #16]
 8104eb4:	4a0f      	ldr	r2, [pc, #60]	; (8104ef4 <HAL_PWREx_EnterSTOPMode+0xe8>)
 8104eb6:	f023 0304 	bic.w	r3, r3, #4
 8104eba:	6113      	str	r3, [r2, #16]
 8104ebc:	e015      	b.n	8104eea <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104ebe:	f7fd f951 	bl	8102164 <HAL_GetCurrentCPUID>
 8104ec2:	4603      	mov	r3, r0
 8104ec4:	2b03      	cmp	r3, #3
 8104ec6:	d106      	bne.n	8104ed6 <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8104ec8:	4b09      	ldr	r3, [pc, #36]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104eca:	691b      	ldr	r3, [r3, #16]
 8104ecc:	4a08      	ldr	r2, [pc, #32]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104ece:	f023 0304 	bic.w	r3, r3, #4
 8104ed2:	6113      	str	r3, [r2, #16]
 8104ed4:	e009      	b.n	8104eea <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8104ed6:	4b06      	ldr	r3, [pc, #24]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104ed8:	695b      	ldr	r3, [r3, #20]
 8104eda:	4a05      	ldr	r2, [pc, #20]	; (8104ef0 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8104edc:	f023 0304 	bic.w	r3, r3, #4
 8104ee0:	6153      	str	r3, [r2, #20]
 8104ee2:	e002      	b.n	8104eea <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8104ee4:	bf00      	nop
 8104ee6:	e000      	b.n	8104eea <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8104ee8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8104eea:	3710      	adds	r7, #16
 8104eec:	46bd      	mov	sp, r7
 8104eee:	bd80      	pop	{r7, pc}
 8104ef0:	58024800 	.word	0x58024800
 8104ef4:	e000ed00 	.word	0xe000ed00

08104ef8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104ef8:	b580      	push	{r7, lr}
 8104efa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104efc:	f7fd f932 	bl	8102164 <HAL_GetCurrentCPUID>
 8104f00:	4603      	mov	r3, r0
 8104f02:	2b03      	cmp	r3, #3
 8104f04:	d101      	bne.n	8104f0a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104f06:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104f08:	e001      	b.n	8104f0e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8104f0a:	bf40      	sev
    __WFE ();
 8104f0c:	bf20      	wfe
}
 8104f0e:	bf00      	nop
 8104f10:	bd80      	pop	{r7, pc}
	...

08104f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104f14:	b480      	push	{r7}
 8104f16:	b089      	sub	sp, #36	; 0x24
 8104f18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8104f1a:	4baf      	ldr	r3, [pc, #700]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104f1c:	691b      	ldr	r3, [r3, #16]
 8104f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104f22:	2b18      	cmp	r3, #24
 8104f24:	f200 814e 	bhi.w	81051c4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8104f28:	a201      	add	r2, pc, #4	; (adr r2, 8104f30 <HAL_RCC_GetSysClockFreq+0x1c>)
 8104f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f2e:	bf00      	nop
 8104f30:	08104f95 	.word	0x08104f95
 8104f34:	081051c5 	.word	0x081051c5
 8104f38:	081051c5 	.word	0x081051c5
 8104f3c:	081051c5 	.word	0x081051c5
 8104f40:	081051c5 	.word	0x081051c5
 8104f44:	081051c5 	.word	0x081051c5
 8104f48:	081051c5 	.word	0x081051c5
 8104f4c:	081051c5 	.word	0x081051c5
 8104f50:	08104fbb 	.word	0x08104fbb
 8104f54:	081051c5 	.word	0x081051c5
 8104f58:	081051c5 	.word	0x081051c5
 8104f5c:	081051c5 	.word	0x081051c5
 8104f60:	081051c5 	.word	0x081051c5
 8104f64:	081051c5 	.word	0x081051c5
 8104f68:	081051c5 	.word	0x081051c5
 8104f6c:	081051c5 	.word	0x081051c5
 8104f70:	08104fc1 	.word	0x08104fc1
 8104f74:	081051c5 	.word	0x081051c5
 8104f78:	081051c5 	.word	0x081051c5
 8104f7c:	081051c5 	.word	0x081051c5
 8104f80:	081051c5 	.word	0x081051c5
 8104f84:	081051c5 	.word	0x081051c5
 8104f88:	081051c5 	.word	0x081051c5
 8104f8c:	081051c5 	.word	0x081051c5
 8104f90:	08104fc7 	.word	0x08104fc7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104f94:	4b90      	ldr	r3, [pc, #576]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	f003 0320 	and.w	r3, r3, #32
 8104f9c:	2b00      	cmp	r3, #0
 8104f9e:	d009      	beq.n	8104fb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104fa0:	4b8d      	ldr	r3, [pc, #564]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104fa2:	681b      	ldr	r3, [r3, #0]
 8104fa4:	08db      	lsrs	r3, r3, #3
 8104fa6:	f003 0303 	and.w	r3, r3, #3
 8104faa:	4a8c      	ldr	r2, [pc, #560]	; (81051dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104fac:	fa22 f303 	lsr.w	r3, r2, r3
 8104fb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8104fb2:	e10a      	b.n	81051ca <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104fb4:	4b89      	ldr	r3, [pc, #548]	; (81051dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8104fb6:	61bb      	str	r3, [r7, #24]
    break;
 8104fb8:	e107      	b.n	81051ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8104fba:	4b89      	ldr	r3, [pc, #548]	; (81051e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8104fbc:	61bb      	str	r3, [r7, #24]
    break;
 8104fbe:	e104      	b.n	81051ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104fc0:	4b88      	ldr	r3, [pc, #544]	; (81051e4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8104fc2:	61bb      	str	r3, [r7, #24]
    break;
 8104fc4:	e101      	b.n	81051ca <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104fc6:	4b84      	ldr	r3, [pc, #528]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fca:	f003 0303 	and.w	r3, r3, #3
 8104fce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104fd0:	4b81      	ldr	r3, [pc, #516]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104fd4:	091b      	lsrs	r3, r3, #4
 8104fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104fda:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8104fdc:	4b7e      	ldr	r3, [pc, #504]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fe0:	f003 0301 	and.w	r3, r3, #1
 8104fe4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8104fe6:	4b7c      	ldr	r3, [pc, #496]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8104fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104fea:	08db      	lsrs	r3, r3, #3
 8104fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104ff0:	68fa      	ldr	r2, [r7, #12]
 8104ff2:	fb02 f303 	mul.w	r3, r2, r3
 8104ff6:	ee07 3a90 	vmov	s15, r3
 8104ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ffe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8105002:	693b      	ldr	r3, [r7, #16]
 8105004:	2b00      	cmp	r3, #0
 8105006:	f000 80da 	beq.w	81051be <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 810500a:	697b      	ldr	r3, [r7, #20]
 810500c:	2b01      	cmp	r3, #1
 810500e:	d05a      	beq.n	81050c6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8105010:	2b01      	cmp	r3, #1
 8105012:	d302      	bcc.n	810501a <HAL_RCC_GetSysClockFreq+0x106>
 8105014:	2b02      	cmp	r3, #2
 8105016:	d078      	beq.n	810510a <HAL_RCC_GetSysClockFreq+0x1f6>
 8105018:	e099      	b.n	810514e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810501a:	4b6f      	ldr	r3, [pc, #444]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	f003 0320 	and.w	r3, r3, #32
 8105022:	2b00      	cmp	r3, #0
 8105024:	d02d      	beq.n	8105082 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105026:	4b6c      	ldr	r3, [pc, #432]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105028:	681b      	ldr	r3, [r3, #0]
 810502a:	08db      	lsrs	r3, r3, #3
 810502c:	f003 0303 	and.w	r3, r3, #3
 8105030:	4a6a      	ldr	r2, [pc, #424]	; (81051dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8105032:	fa22 f303 	lsr.w	r3, r2, r3
 8105036:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105038:	687b      	ldr	r3, [r7, #4]
 810503a:	ee07 3a90 	vmov	s15, r3
 810503e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105042:	693b      	ldr	r3, [r7, #16]
 8105044:	ee07 3a90 	vmov	s15, r3
 8105048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810504c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105050:	4b61      	ldr	r3, [pc, #388]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105058:	ee07 3a90 	vmov	s15, r3
 810505c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105060:	ed97 6a02 	vldr	s12, [r7, #8]
 8105064:	eddf 5a60 	vldr	s11, [pc, #384]	; 81051e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105068:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810506c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105070:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105074:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105078:	ee67 7a27 	vmul.f32	s15, s14, s15
 810507c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8105080:	e087      	b.n	8105192 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105082:	693b      	ldr	r3, [r7, #16]
 8105084:	ee07 3a90 	vmov	s15, r3
 8105088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810508c:	eddf 6a57 	vldr	s13, [pc, #348]	; 81051ec <HAL_RCC_GetSysClockFreq+0x2d8>
 8105090:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105094:	4b50      	ldr	r3, [pc, #320]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810509c:	ee07 3a90 	vmov	s15, r3
 81050a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050a4:	ed97 6a02 	vldr	s12, [r7, #8]
 81050a8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 81051e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 81050ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81050bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81050c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81050c4:	e065      	b.n	8105192 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81050c6:	693b      	ldr	r3, [r7, #16]
 81050c8:	ee07 3a90 	vmov	s15, r3
 81050cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81050d0:	eddf 6a47 	vldr	s13, [pc, #284]	; 81051f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 81050d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81050d8:	4b3f      	ldr	r3, [pc, #252]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81050dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81050e0:	ee07 3a90 	vmov	s15, r3
 81050e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81050e8:	ed97 6a02 	vldr	s12, [r7, #8]
 81050ec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 81051e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 81050f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81050f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81050f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81050fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105104:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105108:	e043      	b.n	8105192 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810510a:	693b      	ldr	r3, [r7, #16]
 810510c:	ee07 3a90 	vmov	s15, r3
 8105110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105114:	eddf 6a37 	vldr	s13, [pc, #220]	; 81051f4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8105118:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810511c:	4b2e      	ldr	r3, [pc, #184]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105120:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105124:	ee07 3a90 	vmov	s15, r3
 8105128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810512c:	ed97 6a02 	vldr	s12, [r7, #8]
 8105130:	eddf 5a2d 	vldr	s11, [pc, #180]	; 81051e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810513c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105148:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810514c:	e021      	b.n	8105192 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810514e:	693b      	ldr	r3, [r7, #16]
 8105150:	ee07 3a90 	vmov	s15, r3
 8105154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105158:	eddf 6a25 	vldr	s13, [pc, #148]	; 81051f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 810515c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105160:	4b1d      	ldr	r3, [pc, #116]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105168:	ee07 3a90 	vmov	s15, r3
 810516c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105170:	ed97 6a02 	vldr	s12, [r7, #8]
 8105174:	eddf 5a1c 	vldr	s11, [pc, #112]	; 81051e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8105178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810517c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105188:	ee67 7a27 	vmul.f32	s15, s14, s15
 810518c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105190:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8105192:	4b11      	ldr	r3, [pc, #68]	; (81051d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8105194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105196:	0a5b      	lsrs	r3, r3, #9
 8105198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810519c:	3301      	adds	r3, #1
 810519e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81051a0:	683b      	ldr	r3, [r7, #0]
 81051a2:	ee07 3a90 	vmov	s15, r3
 81051a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81051aa:	edd7 6a07 	vldr	s13, [r7, #28]
 81051ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81051b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81051b6:	ee17 3a90 	vmov	r3, s15
 81051ba:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81051bc:	e005      	b.n	81051ca <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 81051be:	2300      	movs	r3, #0
 81051c0:	61bb      	str	r3, [r7, #24]
    break;
 81051c2:	e002      	b.n	81051ca <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 81051c4:	4b06      	ldr	r3, [pc, #24]	; (81051e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 81051c6:	61bb      	str	r3, [r7, #24]
    break;
 81051c8:	bf00      	nop
  }

  return sysclockfreq;
 81051ca:	69bb      	ldr	r3, [r7, #24]
}
 81051cc:	4618      	mov	r0, r3
 81051ce:	3724      	adds	r7, #36	; 0x24
 81051d0:	46bd      	mov	sp, r7
 81051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051d6:	4770      	bx	lr
 81051d8:	58024400 	.word	0x58024400
 81051dc:	03d09000 	.word	0x03d09000
 81051e0:	003d0900 	.word	0x003d0900
 81051e4:	007a1200 	.word	0x007a1200
 81051e8:	46000000 	.word	0x46000000
 81051ec:	4c742400 	.word	0x4c742400
 81051f0:	4a742400 	.word	0x4a742400
 81051f4:	4af42400 	.word	0x4af42400

081051f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81051f8:	b580      	push	{r7, lr}
 81051fa:	b082      	sub	sp, #8
 81051fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81051fe:	f7ff fe89 	bl	8104f14 <HAL_RCC_GetSysClockFreq>
 8105202:	4601      	mov	r1, r0
 8105204:	4b11      	ldr	r3, [pc, #68]	; (810524c <HAL_RCC_GetHCLKFreq+0x54>)
 8105206:	699b      	ldr	r3, [r3, #24]
 8105208:	0a1b      	lsrs	r3, r3, #8
 810520a:	f003 030f 	and.w	r3, r3, #15
 810520e:	4a10      	ldr	r2, [pc, #64]	; (8105250 <HAL_RCC_GetHCLKFreq+0x58>)
 8105210:	5cd3      	ldrb	r3, [r2, r3]
 8105212:	f003 031f 	and.w	r3, r3, #31
 8105216:	fa21 f303 	lsr.w	r3, r1, r3
 810521a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810521c:	4b0b      	ldr	r3, [pc, #44]	; (810524c <HAL_RCC_GetHCLKFreq+0x54>)
 810521e:	699b      	ldr	r3, [r3, #24]
 8105220:	f003 030f 	and.w	r3, r3, #15
 8105224:	4a0a      	ldr	r2, [pc, #40]	; (8105250 <HAL_RCC_GetHCLKFreq+0x58>)
 8105226:	5cd3      	ldrb	r3, [r2, r3]
 8105228:	f003 031f 	and.w	r3, r3, #31
 810522c:	687a      	ldr	r2, [r7, #4]
 810522e:	fa22 f303 	lsr.w	r3, r2, r3
 8105232:	4a08      	ldr	r2, [pc, #32]	; (8105254 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105234:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105236:	4b07      	ldr	r3, [pc, #28]	; (8105254 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	4a07      	ldr	r2, [pc, #28]	; (8105258 <HAL_RCC_GetHCLKFreq+0x60>)
 810523c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810523e:	4b05      	ldr	r3, [pc, #20]	; (8105254 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105240:	681b      	ldr	r3, [r3, #0]
}
 8105242:	4618      	mov	r0, r3
 8105244:	3708      	adds	r7, #8
 8105246:	46bd      	mov	sp, r7
 8105248:	bd80      	pop	{r7, pc}
 810524a:	bf00      	nop
 810524c:	58024400 	.word	0x58024400
 8105250:	0810cbe0 	.word	0x0810cbe0
 8105254:	10000004 	.word	0x10000004
 8105258:	10000000 	.word	0x10000000

0810525c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810525c:	b580      	push	{r7, lr}
 810525e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105260:	f7ff ffca 	bl	81051f8 <HAL_RCC_GetHCLKFreq>
 8105264:	4601      	mov	r1, r0
 8105266:	4b06      	ldr	r3, [pc, #24]	; (8105280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105268:	69db      	ldr	r3, [r3, #28]
 810526a:	091b      	lsrs	r3, r3, #4
 810526c:	f003 0307 	and.w	r3, r3, #7
 8105270:	4a04      	ldr	r2, [pc, #16]	; (8105284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8105272:	5cd3      	ldrb	r3, [r2, r3]
 8105274:	f003 031f 	and.w	r3, r3, #31
 8105278:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810527c:	4618      	mov	r0, r3
 810527e:	bd80      	pop	{r7, pc}
 8105280:	58024400 	.word	0x58024400
 8105284:	0810cbe0 	.word	0x0810cbe0

08105288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105288:	b580      	push	{r7, lr}
 810528a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810528c:	f7ff ffb4 	bl	81051f8 <HAL_RCC_GetHCLKFreq>
 8105290:	4601      	mov	r1, r0
 8105292:	4b06      	ldr	r3, [pc, #24]	; (81052ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8105294:	69db      	ldr	r3, [r3, #28]
 8105296:	0a1b      	lsrs	r3, r3, #8
 8105298:	f003 0307 	and.w	r3, r3, #7
 810529c:	4a04      	ldr	r2, [pc, #16]	; (81052b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 810529e:	5cd3      	ldrb	r3, [r2, r3]
 81052a0:	f003 031f 	and.w	r3, r3, #31
 81052a4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81052a8:	4618      	mov	r0, r3
 81052aa:	bd80      	pop	{r7, pc}
 81052ac:	58024400 	.word	0x58024400
 81052b0:	0810cbe0 	.word	0x0810cbe0

081052b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 81052b4:	b480      	push	{r7}
 81052b6:	b083      	sub	sp, #12
 81052b8:	af00      	add	r7, sp, #0
 81052ba:	6078      	str	r0, [r7, #4]
 81052bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	223f      	movs	r2, #63	; 0x3f
 81052c2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 81052c4:	4b1a      	ldr	r3, [pc, #104]	; (8105330 <HAL_RCC_GetClockConfig+0x7c>)
 81052c6:	691b      	ldr	r3, [r3, #16]
 81052c8:	f003 0207 	and.w	r2, r3, #7
 81052cc:	687b      	ldr	r3, [r7, #4]
 81052ce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 81052d0:	4b17      	ldr	r3, [pc, #92]	; (8105330 <HAL_RCC_GetClockConfig+0x7c>)
 81052d2:	699b      	ldr	r3, [r3, #24]
 81052d4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 81052dc:	4b14      	ldr	r3, [pc, #80]	; (8105330 <HAL_RCC_GetClockConfig+0x7c>)
 81052de:	699b      	ldr	r3, [r3, #24]
 81052e0:	f003 020f 	and.w	r2, r3, #15
 81052e4:	687b      	ldr	r3, [r7, #4]
 81052e6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81052e8:	4b11      	ldr	r3, [pc, #68]	; (8105330 <HAL_RCC_GetClockConfig+0x7c>)
 81052ea:	699b      	ldr	r3, [r3, #24]
 81052ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81052f0:	687b      	ldr	r3, [r7, #4]
 81052f2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81052f4:	4b0e      	ldr	r3, [pc, #56]	; (8105330 <HAL_RCC_GetClockConfig+0x7c>)
 81052f6:	69db      	ldr	r3, [r3, #28]
 81052f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81052fc:	687b      	ldr	r3, [r7, #4]
 81052fe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8105300:	4b0b      	ldr	r3, [pc, #44]	; (8105330 <HAL_RCC_GetClockConfig+0x7c>)
 8105302:	69db      	ldr	r3, [r3, #28]
 8105304:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810530c:	4b08      	ldr	r3, [pc, #32]	; (8105330 <HAL_RCC_GetClockConfig+0x7c>)
 810530e:	6a1b      	ldr	r3, [r3, #32]
 8105310:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8105318:	4b06      	ldr	r3, [pc, #24]	; (8105334 <HAL_RCC_GetClockConfig+0x80>)
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	f003 020f 	and.w	r2, r3, #15
 8105320:	683b      	ldr	r3, [r7, #0]
 8105322:	601a      	str	r2, [r3, #0]
}
 8105324:	bf00      	nop
 8105326:	370c      	adds	r7, #12
 8105328:	46bd      	mov	sp, r7
 810532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810532e:	4770      	bx	lr
 8105330:	58024400 	.word	0x58024400
 8105334:	52002000 	.word	0x52002000

08105338 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105338:	b580      	push	{r7, lr}
 810533a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810533c:	f7ff ff5c 	bl	81051f8 <HAL_RCC_GetHCLKFreq>
 8105340:	4601      	mov	r1, r0
 8105342:	4b06      	ldr	r3, [pc, #24]	; (810535c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105344:	6a1b      	ldr	r3, [r3, #32]
 8105346:	091b      	lsrs	r3, r3, #4
 8105348:	f003 0307 	and.w	r3, r3, #7
 810534c:	4a04      	ldr	r2, [pc, #16]	; (8105360 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810534e:	5cd3      	ldrb	r3, [r2, r3]
 8105350:	f003 031f 	and.w	r3, r3, #31
 8105354:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105358:	4618      	mov	r0, r3
 810535a:	bd80      	pop	{r7, pc}
 810535c:	58024400 	.word	0x58024400
 8105360:	0810cbe0 	.word	0x0810cbe0

08105364 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105364:	b480      	push	{r7}
 8105366:	b089      	sub	sp, #36	; 0x24
 8105368:	af00      	add	r7, sp, #0
 810536a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810536c:	4b9d      	ldr	r3, [pc, #628]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105370:	f003 0303 	and.w	r3, r3, #3
 8105374:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105376:	4b9b      	ldr	r3, [pc, #620]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810537a:	0b1b      	lsrs	r3, r3, #12
 810537c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105380:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105382:	4b98      	ldr	r3, [pc, #608]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105386:	091b      	lsrs	r3, r3, #4
 8105388:	f003 0301 	and.w	r3, r3, #1
 810538c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810538e:	4b95      	ldr	r3, [pc, #596]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105392:	08db      	lsrs	r3, r3, #3
 8105394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105398:	693a      	ldr	r2, [r7, #16]
 810539a:	fb02 f303 	mul.w	r3, r2, r3
 810539e:	ee07 3a90 	vmov	s15, r3
 81053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81053aa:	697b      	ldr	r3, [r7, #20]
 81053ac:	2b00      	cmp	r3, #0
 81053ae:	f000 810a 	beq.w	81055c6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 81053b2:	69bb      	ldr	r3, [r7, #24]
 81053b4:	2b01      	cmp	r3, #1
 81053b6:	d05a      	beq.n	810546e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 81053b8:	2b01      	cmp	r3, #1
 81053ba:	d302      	bcc.n	81053c2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 81053bc:	2b02      	cmp	r3, #2
 81053be:	d078      	beq.n	81054b2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 81053c0:	e099      	b.n	81054f6 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81053c2:	4b88      	ldr	r3, [pc, #544]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81053c4:	681b      	ldr	r3, [r3, #0]
 81053c6:	f003 0320 	and.w	r3, r3, #32
 81053ca:	2b00      	cmp	r3, #0
 81053cc:	d02d      	beq.n	810542a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81053ce:	4b85      	ldr	r3, [pc, #532]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	08db      	lsrs	r3, r3, #3
 81053d4:	f003 0303 	and.w	r3, r3, #3
 81053d8:	4a83      	ldr	r2, [pc, #524]	; (81055e8 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 81053da:	fa22 f303 	lsr.w	r3, r2, r3
 81053de:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81053e0:	68bb      	ldr	r3, [r7, #8]
 81053e2:	ee07 3a90 	vmov	s15, r3
 81053e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81053ea:	697b      	ldr	r3, [r7, #20]
 81053ec:	ee07 3a90 	vmov	s15, r3
 81053f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81053f8:	4b7a      	ldr	r3, [pc, #488]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105400:	ee07 3a90 	vmov	s15, r3
 8105404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105408:	ed97 6a03 	vldr	s12, [r7, #12]
 810540c:	eddf 5a77 	vldr	s11, [pc, #476]	; 81055ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105410:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105414:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105418:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810541c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105424:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105428:	e087      	b.n	810553a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810542a:	697b      	ldr	r3, [r7, #20]
 810542c:	ee07 3a90 	vmov	s15, r3
 8105430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105434:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81055f0 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8105438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810543c:	4b69      	ldr	r3, [pc, #420]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105444:	ee07 3a90 	vmov	s15, r3
 8105448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810544c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105450:	eddf 5a66 	vldr	s11, [pc, #408]	; 81055ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810545c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105468:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810546c:	e065      	b.n	810553a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810546e:	697b      	ldr	r3, [r7, #20]
 8105470:	ee07 3a90 	vmov	s15, r3
 8105474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105478:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 810547c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105480:	4b58      	ldr	r3, [pc, #352]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105488:	ee07 3a90 	vmov	s15, r3
 810548c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105490:	ed97 6a03 	vldr	s12, [r7, #12]
 8105494:	eddf 5a55 	vldr	s11, [pc, #340]	; 81055ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810549c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81054b0:	e043      	b.n	810553a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81054b2:	697b      	ldr	r3, [r7, #20]
 81054b4:	ee07 3a90 	vmov	s15, r3
 81054b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 81054c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054c4:	4b47      	ldr	r3, [pc, #284]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 81054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81054c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054cc:	ee07 3a90 	vmov	s15, r3
 81054d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054d4:	ed97 6a03 	vldr	s12, [r7, #12]
 81054d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 81055ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 81054dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81054e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81054e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81054e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81054ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81054f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81054f4:	e021      	b.n	810553a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81054f6:	697b      	ldr	r3, [r7, #20]
 81054f8:	ee07 3a90 	vmov	s15, r3
 81054fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105500:	eddf 6a3c 	vldr	s13, [pc, #240]	; 81055f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8105504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105508:	4b36      	ldr	r3, [pc, #216]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810550c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105510:	ee07 3a90 	vmov	s15, r3
 8105514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105518:	ed97 6a03 	vldr	s12, [r7, #12]
 810551c:	eddf 5a33 	vldr	s11, [pc, #204]	; 81055ec <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8105520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810552c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105538:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 810553a:	4b2a      	ldr	r3, [pc, #168]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810553e:	0a5b      	lsrs	r3, r3, #9
 8105540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105544:	ee07 3a90 	vmov	s15, r3
 8105548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810554c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105554:	edd7 6a07 	vldr	s13, [r7, #28]
 8105558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810555c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105560:	ee17 2a90 	vmov	r2, s15
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105568:	4b1e      	ldr	r3, [pc, #120]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 810556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810556c:	0c1b      	lsrs	r3, r3, #16
 810556e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105572:	ee07 3a90 	vmov	s15, r3
 8105576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810557a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810557e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105582:	edd7 6a07 	vldr	s13, [r7, #28]
 8105586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810558a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810558e:	ee17 2a90 	vmov	r2, s15
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105596:	4b13      	ldr	r3, [pc, #76]	; (81055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8105598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810559a:	0e1b      	lsrs	r3, r3, #24
 810559c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81055a0:	ee07 3a90 	vmov	s15, r3
 81055a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81055ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 81055b0:	edd7 6a07 	vldr	s13, [r7, #28]
 81055b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81055b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81055bc:	ee17 2a90 	vmov	r2, s15
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81055c4:	e008      	b.n	81055d8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81055c6:	687b      	ldr	r3, [r7, #4]
 81055c8:	2200      	movs	r2, #0
 81055ca:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81055cc:	687b      	ldr	r3, [r7, #4]
 81055ce:	2200      	movs	r2, #0
 81055d0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	2200      	movs	r2, #0
 81055d6:	609a      	str	r2, [r3, #8]
}
 81055d8:	bf00      	nop
 81055da:	3724      	adds	r7, #36	; 0x24
 81055dc:	46bd      	mov	sp, r7
 81055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055e2:	4770      	bx	lr
 81055e4:	58024400 	.word	0x58024400
 81055e8:	03d09000 	.word	0x03d09000
 81055ec:	46000000 	.word	0x46000000
 81055f0:	4c742400 	.word	0x4c742400
 81055f4:	4a742400 	.word	0x4a742400
 81055f8:	4af42400 	.word	0x4af42400

081055fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81055fc:	b480      	push	{r7}
 81055fe:	b089      	sub	sp, #36	; 0x24
 8105600:	af00      	add	r7, sp, #0
 8105602:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105604:	4b9d      	ldr	r3, [pc, #628]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105608:	f003 0303 	and.w	r3, r3, #3
 810560c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810560e:	4b9b      	ldr	r3, [pc, #620]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105612:	0d1b      	lsrs	r3, r3, #20
 8105614:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105618:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810561a:	4b98      	ldr	r3, [pc, #608]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810561e:	0a1b      	lsrs	r3, r3, #8
 8105620:	f003 0301 	and.w	r3, r3, #1
 8105624:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8105626:	4b95      	ldr	r3, [pc, #596]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810562a:	08db      	lsrs	r3, r3, #3
 810562c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105630:	693a      	ldr	r2, [r7, #16]
 8105632:	fb02 f303 	mul.w	r3, r2, r3
 8105636:	ee07 3a90 	vmov	s15, r3
 810563a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810563e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105642:	697b      	ldr	r3, [r7, #20]
 8105644:	2b00      	cmp	r3, #0
 8105646:	f000 810a 	beq.w	810585e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 810564a:	69bb      	ldr	r3, [r7, #24]
 810564c:	2b01      	cmp	r3, #1
 810564e:	d05a      	beq.n	8105706 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8105650:	2b01      	cmp	r3, #1
 8105652:	d302      	bcc.n	810565a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8105654:	2b02      	cmp	r3, #2
 8105656:	d078      	beq.n	810574a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8105658:	e099      	b.n	810578e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810565a:	4b88      	ldr	r3, [pc, #544]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810565c:	681b      	ldr	r3, [r3, #0]
 810565e:	f003 0320 	and.w	r3, r3, #32
 8105662:	2b00      	cmp	r3, #0
 8105664:	d02d      	beq.n	81056c2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105666:	4b85      	ldr	r3, [pc, #532]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105668:	681b      	ldr	r3, [r3, #0]
 810566a:	08db      	lsrs	r3, r3, #3
 810566c:	f003 0303 	and.w	r3, r3, #3
 8105670:	4a83      	ldr	r2, [pc, #524]	; (8105880 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8105672:	fa22 f303 	lsr.w	r3, r2, r3
 8105676:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105678:	68bb      	ldr	r3, [r7, #8]
 810567a:	ee07 3a90 	vmov	s15, r3
 810567e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105682:	697b      	ldr	r3, [r7, #20]
 8105684:	ee07 3a90 	vmov	s15, r3
 8105688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810568c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105690:	4b7a      	ldr	r3, [pc, #488]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105698:	ee07 3a90 	vmov	s15, r3
 810569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056a0:	ed97 6a03 	vldr	s12, [r7, #12]
 81056a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81056a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81056c0:	e087      	b.n	81057d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81056c2:	697b      	ldr	r3, [r7, #20]
 81056c4:	ee07 3a90 	vmov	s15, r3
 81056c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105888 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 81056d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056d4:	4b69      	ldr	r3, [pc, #420]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056dc:	ee07 3a90 	vmov	s15, r3
 81056e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056e4:	ed97 6a03 	vldr	s12, [r7, #12]
 81056e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81056ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105700:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105704:	e065      	b.n	81057d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105706:	697b      	ldr	r3, [r7, #20]
 8105708:	ee07 3a90 	vmov	s15, r3
 810570c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105710:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810588c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8105714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105718:	4b58      	ldr	r3, [pc, #352]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810571c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105720:	ee07 3a90 	vmov	s15, r3
 8105724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105728:	ed97 6a03 	vldr	s12, [r7, #12]
 810572c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810573c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105744:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105748:	e043      	b.n	81057d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810574a:	697b      	ldr	r3, [r7, #20]
 810574c:	ee07 3a90 	vmov	s15, r3
 8105750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105754:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105890 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8105758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810575c:	4b47      	ldr	r3, [pc, #284]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105764:	ee07 3a90 	vmov	s15, r3
 8105768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810576c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105770:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8105774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810577c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105788:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810578c:	e021      	b.n	81057d2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810578e:	697b      	ldr	r3, [r7, #20]
 8105790:	ee07 3a90 	vmov	s15, r3
 8105794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105798:	eddf 6a3c 	vldr	s13, [pc, #240]	; 810588c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 810579c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057a0:	4b36      	ldr	r3, [pc, #216]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81057a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81057a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057a8:	ee07 3a90 	vmov	s15, r3
 81057ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057b0:	ed97 6a03 	vldr	s12, [r7, #12]
 81057b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105884 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 81057b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81057d0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81057d2:	4b2a      	ldr	r3, [pc, #168]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81057d6:	0a5b      	lsrs	r3, r3, #9
 81057d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81057dc:	ee07 3a90 	vmov	s15, r3
 81057e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81057e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81057ec:	edd7 6a07 	vldr	s13, [r7, #28]
 81057f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81057f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81057f8:	ee17 2a90 	vmov	r2, s15
 81057fc:	687b      	ldr	r3, [r7, #4]
 81057fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8105800:	4b1e      	ldr	r3, [pc, #120]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105804:	0c1b      	lsrs	r3, r3, #16
 8105806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810580a:	ee07 3a90 	vmov	s15, r3
 810580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105816:	ee37 7a87 	vadd.f32	s14, s15, s14
 810581a:	edd7 6a07 	vldr	s13, [r7, #28]
 810581e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105826:	ee17 2a90 	vmov	r2, s15
 810582a:	687b      	ldr	r3, [r7, #4]
 810582c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810582e:	4b13      	ldr	r3, [pc, #76]	; (810587c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8105830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105832:	0e1b      	lsrs	r3, r3, #24
 8105834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105838:	ee07 3a90 	vmov	s15, r3
 810583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105844:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105848:	edd7 6a07 	vldr	s13, [r7, #28]
 810584c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105854:	ee17 2a90 	vmov	r2, s15
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810585c:	e008      	b.n	8105870 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	2200      	movs	r2, #0
 8105862:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	2200      	movs	r2, #0
 8105868:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	2200      	movs	r2, #0
 810586e:	609a      	str	r2, [r3, #8]
}
 8105870:	bf00      	nop
 8105872:	3724      	adds	r7, #36	; 0x24
 8105874:	46bd      	mov	sp, r7
 8105876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810587a:	4770      	bx	lr
 810587c:	58024400 	.word	0x58024400
 8105880:	03d09000 	.word	0x03d09000
 8105884:	46000000 	.word	0x46000000
 8105888:	4c742400 	.word	0x4c742400
 810588c:	4a742400 	.word	0x4a742400
 8105890:	4af42400 	.word	0x4af42400

08105894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105894:	b580      	push	{r7, lr}
 8105896:	b082      	sub	sp, #8
 8105898:	af00      	add	r7, sp, #0
 810589a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810589c:	687b      	ldr	r3, [r7, #4]
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d101      	bne.n	81058a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81058a2:	2301      	movs	r3, #1
 81058a4:	e049      	b.n	810593a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81058ac:	b2db      	uxtb	r3, r3
 81058ae:	2b00      	cmp	r3, #0
 81058b0:	d106      	bne.n	81058c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81058b2:	687b      	ldr	r3, [r7, #4]
 81058b4:	2200      	movs	r2, #0
 81058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 81058ba:	6878      	ldr	r0, [r7, #4]
 81058bc:	f7fc f874 	bl	81019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	2202      	movs	r2, #2
 81058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	681a      	ldr	r2, [r3, #0]
 81058cc:	687b      	ldr	r3, [r7, #4]
 81058ce:	3304      	adds	r3, #4
 81058d0:	4619      	mov	r1, r3
 81058d2:	4610      	mov	r0, r2
 81058d4:	f000 fcc8 	bl	8106268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	2201      	movs	r2, #1
 81058dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	2201      	movs	r2, #1
 81058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	2201      	movs	r2, #1
 81058ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81058f0:	687b      	ldr	r3, [r7, #4]
 81058f2:	2201      	movs	r2, #1
 81058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	2201      	movs	r2, #1
 81058fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105900:	687b      	ldr	r3, [r7, #4]
 8105902:	2201      	movs	r2, #1
 8105904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105908:	687b      	ldr	r3, [r7, #4]
 810590a:	2201      	movs	r2, #1
 810590c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	2201      	movs	r2, #1
 8105914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	2201      	movs	r2, #1
 810591c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	2201      	movs	r2, #1
 8105924:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	2201      	movs	r2, #1
 810592c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	2201      	movs	r2, #1
 8105934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105938:	2300      	movs	r3, #0
}
 810593a:	4618      	mov	r0, r3
 810593c:	3708      	adds	r7, #8
 810593e:	46bd      	mov	sp, r7
 8105940:	bd80      	pop	{r7, pc}
	...

08105944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8105944:	b480      	push	{r7}
 8105946:	b085      	sub	sp, #20
 8105948:	af00      	add	r7, sp, #0
 810594a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810594c:	687b      	ldr	r3, [r7, #4]
 810594e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105952:	b2db      	uxtb	r3, r3
 8105954:	2b01      	cmp	r3, #1
 8105956:	d001      	beq.n	810595c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8105958:	2301      	movs	r3, #1
 810595a:	e021      	b.n	81059a0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810595c:	687b      	ldr	r3, [r7, #4]
 810595e:	2202      	movs	r2, #2
 8105960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8105964:	687b      	ldr	r3, [r7, #4]
 8105966:	681b      	ldr	r3, [r3, #0]
 8105968:	68da      	ldr	r2, [r3, #12]
 810596a:	687b      	ldr	r3, [r7, #4]
 810596c:	681b      	ldr	r3, [r3, #0]
 810596e:	f042 0201 	orr.w	r2, r2, #1
 8105972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105974:	687b      	ldr	r3, [r7, #4]
 8105976:	681b      	ldr	r3, [r3, #0]
 8105978:	689a      	ldr	r2, [r3, #8]
 810597a:	4b0c      	ldr	r3, [pc, #48]	; (81059ac <HAL_TIM_Base_Start_IT+0x68>)
 810597c:	4013      	ands	r3, r2
 810597e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105980:	68fb      	ldr	r3, [r7, #12]
 8105982:	2b06      	cmp	r3, #6
 8105984:	d00b      	beq.n	810599e <HAL_TIM_Base_Start_IT+0x5a>
 8105986:	68fb      	ldr	r3, [r7, #12]
 8105988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810598c:	d007      	beq.n	810599e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	681b      	ldr	r3, [r3, #0]
 8105992:	681a      	ldr	r2, [r3, #0]
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	f042 0201 	orr.w	r2, r2, #1
 810599c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810599e:	2300      	movs	r3, #0
}
 81059a0:	4618      	mov	r0, r3
 81059a2:	3714      	adds	r7, #20
 81059a4:	46bd      	mov	sp, r7
 81059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059aa:	4770      	bx	lr
 81059ac:	00010007 	.word	0x00010007

081059b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 81059b0:	b580      	push	{r7, lr}
 81059b2:	b082      	sub	sp, #8
 81059b4:	af00      	add	r7, sp, #0
 81059b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	2b00      	cmp	r3, #0
 81059bc:	d101      	bne.n	81059c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 81059be:	2301      	movs	r3, #1
 81059c0:	e049      	b.n	8105a56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81059c8:	b2db      	uxtb	r3, r3
 81059ca:	2b00      	cmp	r3, #0
 81059cc:	d106      	bne.n	81059dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81059ce:	687b      	ldr	r3, [r7, #4]
 81059d0:	2200      	movs	r2, #0
 81059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 81059d6:	6878      	ldr	r0, [r7, #4]
 81059d8:	f000 f841 	bl	8105a5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81059dc:	687b      	ldr	r3, [r7, #4]
 81059de:	2202      	movs	r2, #2
 81059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81059e4:	687b      	ldr	r3, [r7, #4]
 81059e6:	681a      	ldr	r2, [r3, #0]
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	3304      	adds	r3, #4
 81059ec:	4619      	mov	r1, r3
 81059ee:	4610      	mov	r0, r2
 81059f0:	f000 fc3a 	bl	8106268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	2201      	movs	r2, #1
 81059f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	2201      	movs	r2, #1
 8105a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	2201      	movs	r2, #1
 8105a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	2201      	movs	r2, #1
 8105a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	2201      	movs	r2, #1
 8105a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	2201      	movs	r2, #1
 8105a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	2201      	movs	r2, #1
 8105a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2201      	movs	r2, #1
 8105a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	2201      	movs	r2, #1
 8105a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105a3c:	687b      	ldr	r3, [r7, #4]
 8105a3e:	2201      	movs	r2, #1
 8105a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	2201      	movs	r2, #1
 8105a48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	2201      	movs	r2, #1
 8105a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8105a54:	2300      	movs	r3, #0
}
 8105a56:	4618      	mov	r0, r3
 8105a58:	3708      	adds	r7, #8
 8105a5a:	46bd      	mov	sp, r7
 8105a5c:	bd80      	pop	{r7, pc}

08105a5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8105a5e:	b480      	push	{r7}
 8105a60:	b083      	sub	sp, #12
 8105a62:	af00      	add	r7, sp, #0
 8105a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8105a66:	bf00      	nop
 8105a68:	370c      	adds	r7, #12
 8105a6a:	46bd      	mov	sp, r7
 8105a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a70:	4770      	bx	lr
	...

08105a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8105a74:	b580      	push	{r7, lr}
 8105a76:	b084      	sub	sp, #16
 8105a78:	af00      	add	r7, sp, #0
 8105a7a:	6078      	str	r0, [r7, #4]
 8105a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8105a7e:	683b      	ldr	r3, [r7, #0]
 8105a80:	2b00      	cmp	r3, #0
 8105a82:	d109      	bne.n	8105a98 <HAL_TIM_PWM_Start+0x24>
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8105a8a:	b2db      	uxtb	r3, r3
 8105a8c:	2b01      	cmp	r3, #1
 8105a8e:	bf14      	ite	ne
 8105a90:	2301      	movne	r3, #1
 8105a92:	2300      	moveq	r3, #0
 8105a94:	b2db      	uxtb	r3, r3
 8105a96:	e03c      	b.n	8105b12 <HAL_TIM_PWM_Start+0x9e>
 8105a98:	683b      	ldr	r3, [r7, #0]
 8105a9a:	2b04      	cmp	r3, #4
 8105a9c:	d109      	bne.n	8105ab2 <HAL_TIM_PWM_Start+0x3e>
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8105aa4:	b2db      	uxtb	r3, r3
 8105aa6:	2b01      	cmp	r3, #1
 8105aa8:	bf14      	ite	ne
 8105aaa:	2301      	movne	r3, #1
 8105aac:	2300      	moveq	r3, #0
 8105aae:	b2db      	uxtb	r3, r3
 8105ab0:	e02f      	b.n	8105b12 <HAL_TIM_PWM_Start+0x9e>
 8105ab2:	683b      	ldr	r3, [r7, #0]
 8105ab4:	2b08      	cmp	r3, #8
 8105ab6:	d109      	bne.n	8105acc <HAL_TIM_PWM_Start+0x58>
 8105ab8:	687b      	ldr	r3, [r7, #4]
 8105aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8105abe:	b2db      	uxtb	r3, r3
 8105ac0:	2b01      	cmp	r3, #1
 8105ac2:	bf14      	ite	ne
 8105ac4:	2301      	movne	r3, #1
 8105ac6:	2300      	moveq	r3, #0
 8105ac8:	b2db      	uxtb	r3, r3
 8105aca:	e022      	b.n	8105b12 <HAL_TIM_PWM_Start+0x9e>
 8105acc:	683b      	ldr	r3, [r7, #0]
 8105ace:	2b0c      	cmp	r3, #12
 8105ad0:	d109      	bne.n	8105ae6 <HAL_TIM_PWM_Start+0x72>
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8105ad8:	b2db      	uxtb	r3, r3
 8105ada:	2b01      	cmp	r3, #1
 8105adc:	bf14      	ite	ne
 8105ade:	2301      	movne	r3, #1
 8105ae0:	2300      	moveq	r3, #0
 8105ae2:	b2db      	uxtb	r3, r3
 8105ae4:	e015      	b.n	8105b12 <HAL_TIM_PWM_Start+0x9e>
 8105ae6:	683b      	ldr	r3, [r7, #0]
 8105ae8:	2b10      	cmp	r3, #16
 8105aea:	d109      	bne.n	8105b00 <HAL_TIM_PWM_Start+0x8c>
 8105aec:	687b      	ldr	r3, [r7, #4]
 8105aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8105af2:	b2db      	uxtb	r3, r3
 8105af4:	2b01      	cmp	r3, #1
 8105af6:	bf14      	ite	ne
 8105af8:	2301      	movne	r3, #1
 8105afa:	2300      	moveq	r3, #0
 8105afc:	b2db      	uxtb	r3, r3
 8105afe:	e008      	b.n	8105b12 <HAL_TIM_PWM_Start+0x9e>
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8105b06:	b2db      	uxtb	r3, r3
 8105b08:	2b01      	cmp	r3, #1
 8105b0a:	bf14      	ite	ne
 8105b0c:	2301      	movne	r3, #1
 8105b0e:	2300      	moveq	r3, #0
 8105b10:	b2db      	uxtb	r3, r3
 8105b12:	2b00      	cmp	r3, #0
 8105b14:	d001      	beq.n	8105b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8105b16:	2301      	movs	r3, #1
 8105b18:	e06e      	b.n	8105bf8 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8105b1a:	683b      	ldr	r3, [r7, #0]
 8105b1c:	2b00      	cmp	r3, #0
 8105b1e:	d104      	bne.n	8105b2a <HAL_TIM_PWM_Start+0xb6>
 8105b20:	687b      	ldr	r3, [r7, #4]
 8105b22:	2202      	movs	r2, #2
 8105b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8105b28:	e023      	b.n	8105b72 <HAL_TIM_PWM_Start+0xfe>
 8105b2a:	683b      	ldr	r3, [r7, #0]
 8105b2c:	2b04      	cmp	r3, #4
 8105b2e:	d104      	bne.n	8105b3a <HAL_TIM_PWM_Start+0xc6>
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	2202      	movs	r2, #2
 8105b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8105b38:	e01b      	b.n	8105b72 <HAL_TIM_PWM_Start+0xfe>
 8105b3a:	683b      	ldr	r3, [r7, #0]
 8105b3c:	2b08      	cmp	r3, #8
 8105b3e:	d104      	bne.n	8105b4a <HAL_TIM_PWM_Start+0xd6>
 8105b40:	687b      	ldr	r3, [r7, #4]
 8105b42:	2202      	movs	r2, #2
 8105b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8105b48:	e013      	b.n	8105b72 <HAL_TIM_PWM_Start+0xfe>
 8105b4a:	683b      	ldr	r3, [r7, #0]
 8105b4c:	2b0c      	cmp	r3, #12
 8105b4e:	d104      	bne.n	8105b5a <HAL_TIM_PWM_Start+0xe6>
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	2202      	movs	r2, #2
 8105b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8105b58:	e00b      	b.n	8105b72 <HAL_TIM_PWM_Start+0xfe>
 8105b5a:	683b      	ldr	r3, [r7, #0]
 8105b5c:	2b10      	cmp	r3, #16
 8105b5e:	d104      	bne.n	8105b6a <HAL_TIM_PWM_Start+0xf6>
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	2202      	movs	r2, #2
 8105b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8105b68:	e003      	b.n	8105b72 <HAL_TIM_PWM_Start+0xfe>
 8105b6a:	687b      	ldr	r3, [r7, #4]
 8105b6c:	2202      	movs	r2, #2
 8105b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	681b      	ldr	r3, [r3, #0]
 8105b76:	2201      	movs	r2, #1
 8105b78:	6839      	ldr	r1, [r7, #0]
 8105b7a:	4618      	mov	r0, r3
 8105b7c:	f000 ff78 	bl	8106a70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	681b      	ldr	r3, [r3, #0]
 8105b84:	4a1e      	ldr	r2, [pc, #120]	; (8105c00 <HAL_TIM_PWM_Start+0x18c>)
 8105b86:	4293      	cmp	r3, r2
 8105b88:	d013      	beq.n	8105bb2 <HAL_TIM_PWM_Start+0x13e>
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	681b      	ldr	r3, [r3, #0]
 8105b8e:	4a1d      	ldr	r2, [pc, #116]	; (8105c04 <HAL_TIM_PWM_Start+0x190>)
 8105b90:	4293      	cmp	r3, r2
 8105b92:	d00e      	beq.n	8105bb2 <HAL_TIM_PWM_Start+0x13e>
 8105b94:	687b      	ldr	r3, [r7, #4]
 8105b96:	681b      	ldr	r3, [r3, #0]
 8105b98:	4a1b      	ldr	r2, [pc, #108]	; (8105c08 <HAL_TIM_PWM_Start+0x194>)
 8105b9a:	4293      	cmp	r3, r2
 8105b9c:	d009      	beq.n	8105bb2 <HAL_TIM_PWM_Start+0x13e>
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	4a1a      	ldr	r2, [pc, #104]	; (8105c0c <HAL_TIM_PWM_Start+0x198>)
 8105ba4:	4293      	cmp	r3, r2
 8105ba6:	d004      	beq.n	8105bb2 <HAL_TIM_PWM_Start+0x13e>
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	4a18      	ldr	r2, [pc, #96]	; (8105c10 <HAL_TIM_PWM_Start+0x19c>)
 8105bae:	4293      	cmp	r3, r2
 8105bb0:	d101      	bne.n	8105bb6 <HAL_TIM_PWM_Start+0x142>
 8105bb2:	2301      	movs	r3, #1
 8105bb4:	e000      	b.n	8105bb8 <HAL_TIM_PWM_Start+0x144>
 8105bb6:	2300      	movs	r3, #0
 8105bb8:	2b00      	cmp	r3, #0
 8105bba:	d007      	beq.n	8105bcc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8105bbc:	687b      	ldr	r3, [r7, #4]
 8105bbe:	681b      	ldr	r3, [r3, #0]
 8105bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	681b      	ldr	r3, [r3, #0]
 8105bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8105bca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8105bcc:	687b      	ldr	r3, [r7, #4]
 8105bce:	681b      	ldr	r3, [r3, #0]
 8105bd0:	689a      	ldr	r2, [r3, #8]
 8105bd2:	4b10      	ldr	r3, [pc, #64]	; (8105c14 <HAL_TIM_PWM_Start+0x1a0>)
 8105bd4:	4013      	ands	r3, r2
 8105bd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8105bd8:	68fb      	ldr	r3, [r7, #12]
 8105bda:	2b06      	cmp	r3, #6
 8105bdc:	d00b      	beq.n	8105bf6 <HAL_TIM_PWM_Start+0x182>
 8105bde:	68fb      	ldr	r3, [r7, #12]
 8105be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105be4:	d007      	beq.n	8105bf6 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 8105be6:	687b      	ldr	r3, [r7, #4]
 8105be8:	681b      	ldr	r3, [r3, #0]
 8105bea:	681a      	ldr	r2, [r3, #0]
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	f042 0201 	orr.w	r2, r2, #1
 8105bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8105bf6:	2300      	movs	r3, #0
}
 8105bf8:	4618      	mov	r0, r3
 8105bfa:	3710      	adds	r7, #16
 8105bfc:	46bd      	mov	sp, r7
 8105bfe:	bd80      	pop	{r7, pc}
 8105c00:	40010000 	.word	0x40010000
 8105c04:	40010400 	.word	0x40010400
 8105c08:	40014000 	.word	0x40014000
 8105c0c:	40014400 	.word	0x40014400
 8105c10:	40014800 	.word	0x40014800
 8105c14:	00010007 	.word	0x00010007

08105c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8105c18:	b580      	push	{r7, lr}
 8105c1a:	b082      	sub	sp, #8
 8105c1c:	af00      	add	r7, sp, #0
 8105c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8105c20:	687b      	ldr	r3, [r7, #4]
 8105c22:	681b      	ldr	r3, [r3, #0]
 8105c24:	691b      	ldr	r3, [r3, #16]
 8105c26:	f003 0302 	and.w	r3, r3, #2
 8105c2a:	2b02      	cmp	r3, #2
 8105c2c:	d122      	bne.n	8105c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8105c2e:	687b      	ldr	r3, [r7, #4]
 8105c30:	681b      	ldr	r3, [r3, #0]
 8105c32:	68db      	ldr	r3, [r3, #12]
 8105c34:	f003 0302 	and.w	r3, r3, #2
 8105c38:	2b02      	cmp	r3, #2
 8105c3a:	d11b      	bne.n	8105c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8105c3c:	687b      	ldr	r3, [r7, #4]
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	f06f 0202 	mvn.w	r2, #2
 8105c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	2201      	movs	r2, #1
 8105c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8105c4c:	687b      	ldr	r3, [r7, #4]
 8105c4e:	681b      	ldr	r3, [r3, #0]
 8105c50:	699b      	ldr	r3, [r3, #24]
 8105c52:	f003 0303 	and.w	r3, r3, #3
 8105c56:	2b00      	cmp	r3, #0
 8105c58:	d003      	beq.n	8105c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8105c5a:	6878      	ldr	r0, [r7, #4]
 8105c5c:	f000 fae6 	bl	810622c <HAL_TIM_IC_CaptureCallback>
 8105c60:	e005      	b.n	8105c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8105c62:	6878      	ldr	r0, [r7, #4]
 8105c64:	f000 fad8 	bl	8106218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105c68:	6878      	ldr	r0, [r7, #4]
 8105c6a:	f000 fae9 	bl	8106240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105c6e:	687b      	ldr	r3, [r7, #4]
 8105c70:	2200      	movs	r2, #0
 8105c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	691b      	ldr	r3, [r3, #16]
 8105c7a:	f003 0304 	and.w	r3, r3, #4
 8105c7e:	2b04      	cmp	r3, #4
 8105c80:	d122      	bne.n	8105cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8105c82:	687b      	ldr	r3, [r7, #4]
 8105c84:	681b      	ldr	r3, [r3, #0]
 8105c86:	68db      	ldr	r3, [r3, #12]
 8105c88:	f003 0304 	and.w	r3, r3, #4
 8105c8c:	2b04      	cmp	r3, #4
 8105c8e:	d11b      	bne.n	8105cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8105c90:	687b      	ldr	r3, [r7, #4]
 8105c92:	681b      	ldr	r3, [r3, #0]
 8105c94:	f06f 0204 	mvn.w	r2, #4
 8105c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	2202      	movs	r2, #2
 8105c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8105ca0:	687b      	ldr	r3, [r7, #4]
 8105ca2:	681b      	ldr	r3, [r3, #0]
 8105ca4:	699b      	ldr	r3, [r3, #24]
 8105ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105caa:	2b00      	cmp	r3, #0
 8105cac:	d003      	beq.n	8105cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105cae:	6878      	ldr	r0, [r7, #4]
 8105cb0:	f000 fabc 	bl	810622c <HAL_TIM_IC_CaptureCallback>
 8105cb4:	e005      	b.n	8105cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105cb6:	6878      	ldr	r0, [r7, #4]
 8105cb8:	f000 faae 	bl	8106218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105cbc:	6878      	ldr	r0, [r7, #4]
 8105cbe:	f000 fabf 	bl	8106240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	2200      	movs	r2, #0
 8105cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8105cc8:	687b      	ldr	r3, [r7, #4]
 8105cca:	681b      	ldr	r3, [r3, #0]
 8105ccc:	691b      	ldr	r3, [r3, #16]
 8105cce:	f003 0308 	and.w	r3, r3, #8
 8105cd2:	2b08      	cmp	r3, #8
 8105cd4:	d122      	bne.n	8105d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8105cd6:	687b      	ldr	r3, [r7, #4]
 8105cd8:	681b      	ldr	r3, [r3, #0]
 8105cda:	68db      	ldr	r3, [r3, #12]
 8105cdc:	f003 0308 	and.w	r3, r3, #8
 8105ce0:	2b08      	cmp	r3, #8
 8105ce2:	d11b      	bne.n	8105d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	681b      	ldr	r3, [r3, #0]
 8105ce8:	f06f 0208 	mvn.w	r2, #8
 8105cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8105cee:	687b      	ldr	r3, [r7, #4]
 8105cf0:	2204      	movs	r2, #4
 8105cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8105cf4:	687b      	ldr	r3, [r7, #4]
 8105cf6:	681b      	ldr	r3, [r3, #0]
 8105cf8:	69db      	ldr	r3, [r3, #28]
 8105cfa:	f003 0303 	and.w	r3, r3, #3
 8105cfe:	2b00      	cmp	r3, #0
 8105d00:	d003      	beq.n	8105d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105d02:	6878      	ldr	r0, [r7, #4]
 8105d04:	f000 fa92 	bl	810622c <HAL_TIM_IC_CaptureCallback>
 8105d08:	e005      	b.n	8105d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105d0a:	6878      	ldr	r0, [r7, #4]
 8105d0c:	f000 fa84 	bl	8106218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105d10:	6878      	ldr	r0, [r7, #4]
 8105d12:	f000 fa95 	bl	8106240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	2200      	movs	r2, #0
 8105d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	681b      	ldr	r3, [r3, #0]
 8105d20:	691b      	ldr	r3, [r3, #16]
 8105d22:	f003 0310 	and.w	r3, r3, #16
 8105d26:	2b10      	cmp	r3, #16
 8105d28:	d122      	bne.n	8105d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8105d2a:	687b      	ldr	r3, [r7, #4]
 8105d2c:	681b      	ldr	r3, [r3, #0]
 8105d2e:	68db      	ldr	r3, [r3, #12]
 8105d30:	f003 0310 	and.w	r3, r3, #16
 8105d34:	2b10      	cmp	r3, #16
 8105d36:	d11b      	bne.n	8105d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8105d38:	687b      	ldr	r3, [r7, #4]
 8105d3a:	681b      	ldr	r3, [r3, #0]
 8105d3c:	f06f 0210 	mvn.w	r2, #16
 8105d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8105d42:	687b      	ldr	r3, [r7, #4]
 8105d44:	2208      	movs	r2, #8
 8105d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8105d48:	687b      	ldr	r3, [r7, #4]
 8105d4a:	681b      	ldr	r3, [r3, #0]
 8105d4c:	69db      	ldr	r3, [r3, #28]
 8105d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8105d52:	2b00      	cmp	r3, #0
 8105d54:	d003      	beq.n	8105d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8105d56:	6878      	ldr	r0, [r7, #4]
 8105d58:	f000 fa68 	bl	810622c <HAL_TIM_IC_CaptureCallback>
 8105d5c:	e005      	b.n	8105d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8105d5e:	6878      	ldr	r0, [r7, #4]
 8105d60:	f000 fa5a 	bl	8106218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8105d64:	6878      	ldr	r0, [r7, #4]
 8105d66:	f000 fa6b 	bl	8106240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8105d6a:	687b      	ldr	r3, [r7, #4]
 8105d6c:	2200      	movs	r2, #0
 8105d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8105d70:	687b      	ldr	r3, [r7, #4]
 8105d72:	681b      	ldr	r3, [r3, #0]
 8105d74:	691b      	ldr	r3, [r3, #16]
 8105d76:	f003 0301 	and.w	r3, r3, #1
 8105d7a:	2b01      	cmp	r3, #1
 8105d7c:	d10e      	bne.n	8105d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8105d7e:	687b      	ldr	r3, [r7, #4]
 8105d80:	681b      	ldr	r3, [r3, #0]
 8105d82:	68db      	ldr	r3, [r3, #12]
 8105d84:	f003 0301 	and.w	r3, r3, #1
 8105d88:	2b01      	cmp	r3, #1
 8105d8a:	d107      	bne.n	8105d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	f06f 0201 	mvn.w	r2, #1
 8105d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8105d96:	6878      	ldr	r0, [r7, #4]
 8105d98:	f7fb fc16 	bl	81015c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8105d9c:	687b      	ldr	r3, [r7, #4]
 8105d9e:	681b      	ldr	r3, [r3, #0]
 8105da0:	691b      	ldr	r3, [r3, #16]
 8105da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105da6:	2b80      	cmp	r3, #128	; 0x80
 8105da8:	d10e      	bne.n	8105dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	68db      	ldr	r3, [r3, #12]
 8105db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105db4:	2b80      	cmp	r3, #128	; 0x80
 8105db6:	d107      	bne.n	8105dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	681b      	ldr	r3, [r3, #0]
 8105dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8105dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8105dc2:	6878      	ldr	r0, [r7, #4]
 8105dc4:	f000 ff8a 	bl	8106cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8105dc8:	687b      	ldr	r3, [r7, #4]
 8105dca:	681b      	ldr	r3, [r3, #0]
 8105dcc:	691b      	ldr	r3, [r3, #16]
 8105dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105dd6:	d10e      	bne.n	8105df6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	68db      	ldr	r3, [r3, #12]
 8105dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105de2:	2b80      	cmp	r3, #128	; 0x80
 8105de4:	d107      	bne.n	8105df6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8105dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8105df0:	6878      	ldr	r0, [r7, #4]
 8105df2:	f000 ff7d 	bl	8106cf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8105df6:	687b      	ldr	r3, [r7, #4]
 8105df8:	681b      	ldr	r3, [r3, #0]
 8105dfa:	691b      	ldr	r3, [r3, #16]
 8105dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105e00:	2b40      	cmp	r3, #64	; 0x40
 8105e02:	d10e      	bne.n	8105e22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8105e04:	687b      	ldr	r3, [r7, #4]
 8105e06:	681b      	ldr	r3, [r3, #0]
 8105e08:	68db      	ldr	r3, [r3, #12]
 8105e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105e0e:	2b40      	cmp	r3, #64	; 0x40
 8105e10:	d107      	bne.n	8105e22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	681b      	ldr	r3, [r3, #0]
 8105e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8105e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8105e1c:	6878      	ldr	r0, [r7, #4]
 8105e1e:	f000 fa19 	bl	8106254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	691b      	ldr	r3, [r3, #16]
 8105e28:	f003 0320 	and.w	r3, r3, #32
 8105e2c:	2b20      	cmp	r3, #32
 8105e2e:	d10e      	bne.n	8105e4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8105e30:	687b      	ldr	r3, [r7, #4]
 8105e32:	681b      	ldr	r3, [r3, #0]
 8105e34:	68db      	ldr	r3, [r3, #12]
 8105e36:	f003 0320 	and.w	r3, r3, #32
 8105e3a:	2b20      	cmp	r3, #32
 8105e3c:	d107      	bne.n	8105e4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8105e3e:	687b      	ldr	r3, [r7, #4]
 8105e40:	681b      	ldr	r3, [r3, #0]
 8105e42:	f06f 0220 	mvn.w	r2, #32
 8105e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105e48:	6878      	ldr	r0, [r7, #4]
 8105e4a:	f000 ff3d 	bl	8106cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105e4e:	bf00      	nop
 8105e50:	3708      	adds	r7, #8
 8105e52:	46bd      	mov	sp, r7
 8105e54:	bd80      	pop	{r7, pc}
	...

08105e58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8105e58:	b580      	push	{r7, lr}
 8105e5a:	b084      	sub	sp, #16
 8105e5c:	af00      	add	r7, sp, #0
 8105e5e:	60f8      	str	r0, [r7, #12]
 8105e60:	60b9      	str	r1, [r7, #8]
 8105e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8105e64:	68fb      	ldr	r3, [r7, #12]
 8105e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8105e6a:	2b01      	cmp	r3, #1
 8105e6c:	d101      	bne.n	8105e72 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8105e6e:	2302      	movs	r3, #2
 8105e70:	e0fd      	b.n	810606e <HAL_TIM_PWM_ConfigChannel+0x216>
 8105e72:	68fb      	ldr	r3, [r7, #12]
 8105e74:	2201      	movs	r2, #1
 8105e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8105e7a:	687b      	ldr	r3, [r7, #4]
 8105e7c:	2b14      	cmp	r3, #20
 8105e7e:	f200 80f0 	bhi.w	8106062 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8105e82:	a201      	add	r2, pc, #4	; (adr r2, 8105e88 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8105e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e88:	08105edd 	.word	0x08105edd
 8105e8c:	08106063 	.word	0x08106063
 8105e90:	08106063 	.word	0x08106063
 8105e94:	08106063 	.word	0x08106063
 8105e98:	08105f1d 	.word	0x08105f1d
 8105e9c:	08106063 	.word	0x08106063
 8105ea0:	08106063 	.word	0x08106063
 8105ea4:	08106063 	.word	0x08106063
 8105ea8:	08105f5f 	.word	0x08105f5f
 8105eac:	08106063 	.word	0x08106063
 8105eb0:	08106063 	.word	0x08106063
 8105eb4:	08106063 	.word	0x08106063
 8105eb8:	08105f9f 	.word	0x08105f9f
 8105ebc:	08106063 	.word	0x08106063
 8105ec0:	08106063 	.word	0x08106063
 8105ec4:	08106063 	.word	0x08106063
 8105ec8:	08105fe1 	.word	0x08105fe1
 8105ecc:	08106063 	.word	0x08106063
 8105ed0:	08106063 	.word	0x08106063
 8105ed4:	08106063 	.word	0x08106063
 8105ed8:	08106021 	.word	0x08106021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8105edc:	68fb      	ldr	r3, [r7, #12]
 8105ede:	681b      	ldr	r3, [r3, #0]
 8105ee0:	68b9      	ldr	r1, [r7, #8]
 8105ee2:	4618      	mov	r0, r3
 8105ee4:	f000 fa5a 	bl	810639c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8105ee8:	68fb      	ldr	r3, [r7, #12]
 8105eea:	681b      	ldr	r3, [r3, #0]
 8105eec:	699a      	ldr	r2, [r3, #24]
 8105eee:	68fb      	ldr	r3, [r7, #12]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	f042 0208 	orr.w	r2, r2, #8
 8105ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8105ef8:	68fb      	ldr	r3, [r7, #12]
 8105efa:	681b      	ldr	r3, [r3, #0]
 8105efc:	699a      	ldr	r2, [r3, #24]
 8105efe:	68fb      	ldr	r3, [r7, #12]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	f022 0204 	bic.w	r2, r2, #4
 8105f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8105f08:	68fb      	ldr	r3, [r7, #12]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	6999      	ldr	r1, [r3, #24]
 8105f0e:	68bb      	ldr	r3, [r7, #8]
 8105f10:	691a      	ldr	r2, [r3, #16]
 8105f12:	68fb      	ldr	r3, [r7, #12]
 8105f14:	681b      	ldr	r3, [r3, #0]
 8105f16:	430a      	orrs	r2, r1
 8105f18:	619a      	str	r2, [r3, #24]
      break;
 8105f1a:	e0a3      	b.n	8106064 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8105f1c:	68fb      	ldr	r3, [r7, #12]
 8105f1e:	681b      	ldr	r3, [r3, #0]
 8105f20:	68b9      	ldr	r1, [r7, #8]
 8105f22:	4618      	mov	r0, r3
 8105f24:	f000 faca 	bl	81064bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8105f28:	68fb      	ldr	r3, [r7, #12]
 8105f2a:	681b      	ldr	r3, [r3, #0]
 8105f2c:	699a      	ldr	r2, [r3, #24]
 8105f2e:	68fb      	ldr	r3, [r7, #12]
 8105f30:	681b      	ldr	r3, [r3, #0]
 8105f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8105f38:	68fb      	ldr	r3, [r7, #12]
 8105f3a:	681b      	ldr	r3, [r3, #0]
 8105f3c:	699a      	ldr	r2, [r3, #24]
 8105f3e:	68fb      	ldr	r3, [r7, #12]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8105f48:	68fb      	ldr	r3, [r7, #12]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	6999      	ldr	r1, [r3, #24]
 8105f4e:	68bb      	ldr	r3, [r7, #8]
 8105f50:	691b      	ldr	r3, [r3, #16]
 8105f52:	021a      	lsls	r2, r3, #8
 8105f54:	68fb      	ldr	r3, [r7, #12]
 8105f56:	681b      	ldr	r3, [r3, #0]
 8105f58:	430a      	orrs	r2, r1
 8105f5a:	619a      	str	r2, [r3, #24]
      break;
 8105f5c:	e082      	b.n	8106064 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8105f5e:	68fb      	ldr	r3, [r7, #12]
 8105f60:	681b      	ldr	r3, [r3, #0]
 8105f62:	68b9      	ldr	r1, [r7, #8]
 8105f64:	4618      	mov	r0, r3
 8105f66:	f000 fb33 	bl	81065d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8105f6a:	68fb      	ldr	r3, [r7, #12]
 8105f6c:	681b      	ldr	r3, [r3, #0]
 8105f6e:	69da      	ldr	r2, [r3, #28]
 8105f70:	68fb      	ldr	r3, [r7, #12]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	f042 0208 	orr.w	r2, r2, #8
 8105f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8105f7a:	68fb      	ldr	r3, [r7, #12]
 8105f7c:	681b      	ldr	r3, [r3, #0]
 8105f7e:	69da      	ldr	r2, [r3, #28]
 8105f80:	68fb      	ldr	r3, [r7, #12]
 8105f82:	681b      	ldr	r3, [r3, #0]
 8105f84:	f022 0204 	bic.w	r2, r2, #4
 8105f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8105f8a:	68fb      	ldr	r3, [r7, #12]
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	69d9      	ldr	r1, [r3, #28]
 8105f90:	68bb      	ldr	r3, [r7, #8]
 8105f92:	691a      	ldr	r2, [r3, #16]
 8105f94:	68fb      	ldr	r3, [r7, #12]
 8105f96:	681b      	ldr	r3, [r3, #0]
 8105f98:	430a      	orrs	r2, r1
 8105f9a:	61da      	str	r2, [r3, #28]
      break;
 8105f9c:	e062      	b.n	8106064 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8105f9e:	68fb      	ldr	r3, [r7, #12]
 8105fa0:	681b      	ldr	r3, [r3, #0]
 8105fa2:	68b9      	ldr	r1, [r7, #8]
 8105fa4:	4618      	mov	r0, r3
 8105fa6:	f000 fb99 	bl	81066dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8105faa:	68fb      	ldr	r3, [r7, #12]
 8105fac:	681b      	ldr	r3, [r3, #0]
 8105fae:	69da      	ldr	r2, [r3, #28]
 8105fb0:	68fb      	ldr	r3, [r7, #12]
 8105fb2:	681b      	ldr	r3, [r3, #0]
 8105fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8105fba:	68fb      	ldr	r3, [r7, #12]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	69da      	ldr	r2, [r3, #28]
 8105fc0:	68fb      	ldr	r3, [r7, #12]
 8105fc2:	681b      	ldr	r3, [r3, #0]
 8105fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8105fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8105fca:	68fb      	ldr	r3, [r7, #12]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	69d9      	ldr	r1, [r3, #28]
 8105fd0:	68bb      	ldr	r3, [r7, #8]
 8105fd2:	691b      	ldr	r3, [r3, #16]
 8105fd4:	021a      	lsls	r2, r3, #8
 8105fd6:	68fb      	ldr	r3, [r7, #12]
 8105fd8:	681b      	ldr	r3, [r3, #0]
 8105fda:	430a      	orrs	r2, r1
 8105fdc:	61da      	str	r2, [r3, #28]
      break;
 8105fde:	e041      	b.n	8106064 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8105fe0:	68fb      	ldr	r3, [r7, #12]
 8105fe2:	681b      	ldr	r3, [r3, #0]
 8105fe4:	68b9      	ldr	r1, [r7, #8]
 8105fe6:	4618      	mov	r0, r3
 8105fe8:	f000 fbe0 	bl	81067ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8105fec:	68fb      	ldr	r3, [r7, #12]
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105ff2:	68fb      	ldr	r3, [r7, #12]
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	f042 0208 	orr.w	r2, r2, #8
 8105ffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8105ffc:	68fb      	ldr	r3, [r7, #12]
 8105ffe:	681b      	ldr	r3, [r3, #0]
 8106000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106002:	68fb      	ldr	r3, [r7, #12]
 8106004:	681b      	ldr	r3, [r3, #0]
 8106006:	f022 0204 	bic.w	r2, r2, #4
 810600a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 810600c:	68fb      	ldr	r3, [r7, #12]
 810600e:	681b      	ldr	r3, [r3, #0]
 8106010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8106012:	68bb      	ldr	r3, [r7, #8]
 8106014:	691a      	ldr	r2, [r3, #16]
 8106016:	68fb      	ldr	r3, [r7, #12]
 8106018:	681b      	ldr	r3, [r3, #0]
 810601a:	430a      	orrs	r2, r1
 810601c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810601e:	e021      	b.n	8106064 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106020:	68fb      	ldr	r3, [r7, #12]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	68b9      	ldr	r1, [r7, #8]
 8106026:	4618      	mov	r0, r3
 8106028:	f000 fc22 	bl	8106870 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 810602c:	68fb      	ldr	r3, [r7, #12]
 810602e:	681b      	ldr	r3, [r3, #0]
 8106030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106032:	68fb      	ldr	r3, [r7, #12]
 8106034:	681b      	ldr	r3, [r3, #0]
 8106036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810603a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 810603c:	68fb      	ldr	r3, [r7, #12]
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8106042:	68fb      	ldr	r3, [r7, #12]
 8106044:	681b      	ldr	r3, [r3, #0]
 8106046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 810604a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 810604c:	68fb      	ldr	r3, [r7, #12]
 810604e:	681b      	ldr	r3, [r3, #0]
 8106050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8106052:	68bb      	ldr	r3, [r7, #8]
 8106054:	691b      	ldr	r3, [r3, #16]
 8106056:	021a      	lsls	r2, r3, #8
 8106058:	68fb      	ldr	r3, [r7, #12]
 810605a:	681b      	ldr	r3, [r3, #0]
 810605c:	430a      	orrs	r2, r1
 810605e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8106060:	e000      	b.n	8106064 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8106062:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106064:	68fb      	ldr	r3, [r7, #12]
 8106066:	2200      	movs	r2, #0
 8106068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810606c:	2300      	movs	r3, #0
}
 810606e:	4618      	mov	r0, r3
 8106070:	3710      	adds	r7, #16
 8106072:	46bd      	mov	sp, r7
 8106074:	bd80      	pop	{r7, pc}
 8106076:	bf00      	nop

08106078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8106078:	b580      	push	{r7, lr}
 810607a:	b084      	sub	sp, #16
 810607c:	af00      	add	r7, sp, #0
 810607e:	6078      	str	r0, [r7, #4]
 8106080:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106088:	2b01      	cmp	r3, #1
 810608a:	d101      	bne.n	8106090 <HAL_TIM_ConfigClockSource+0x18>
 810608c:	2302      	movs	r3, #2
 810608e:	e0b9      	b.n	8106204 <HAL_TIM_ConfigClockSource+0x18c>
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	2201      	movs	r2, #1
 8106094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	2202      	movs	r2, #2
 810609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	689b      	ldr	r3, [r3, #8]
 81060a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81060a8:	68fb      	ldr	r3, [r7, #12]
 81060aa:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81060ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81060b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81060b4:	68fb      	ldr	r3, [r7, #12]
 81060b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81060ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 81060bc:	687b      	ldr	r3, [r7, #4]
 81060be:	681b      	ldr	r3, [r3, #0]
 81060c0:	68fa      	ldr	r2, [r7, #12]
 81060c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81060c4:	683b      	ldr	r3, [r7, #0]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	2b70      	cmp	r3, #112	; 0x70
 81060ca:	d02e      	beq.n	810612a <HAL_TIM_ConfigClockSource+0xb2>
 81060cc:	2b70      	cmp	r3, #112	; 0x70
 81060ce:	d812      	bhi.n	81060f6 <HAL_TIM_ConfigClockSource+0x7e>
 81060d0:	2b30      	cmp	r3, #48	; 0x30
 81060d2:	f000 8084 	beq.w	81061de <HAL_TIM_ConfigClockSource+0x166>
 81060d6:	2b30      	cmp	r3, #48	; 0x30
 81060d8:	d806      	bhi.n	81060e8 <HAL_TIM_ConfigClockSource+0x70>
 81060da:	2b10      	cmp	r3, #16
 81060dc:	d07f      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
 81060de:	2b20      	cmp	r3, #32
 81060e0:	d07d      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
 81060e2:	2b00      	cmp	r3, #0
 81060e4:	d07b      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 81060e6:	e084      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81060e8:	2b50      	cmp	r3, #80	; 0x50
 81060ea:	d048      	beq.n	810617e <HAL_TIM_ConfigClockSource+0x106>
 81060ec:	2b60      	cmp	r3, #96	; 0x60
 81060ee:	d056      	beq.n	810619e <HAL_TIM_ConfigClockSource+0x126>
 81060f0:	2b40      	cmp	r3, #64	; 0x40
 81060f2:	d064      	beq.n	81061be <HAL_TIM_ConfigClockSource+0x146>
      break;
 81060f4:	e07d      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81060f6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81060fa:	d070      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
 81060fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8106100:	d809      	bhi.n	8106116 <HAL_TIM_ConfigClockSource+0x9e>
 8106102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106106:	d027      	beq.n	8106158 <HAL_TIM_ConfigClockSource+0xe0>
 8106108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810610c:	d067      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
 810610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106112:	d06d      	beq.n	81061f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8106114:	e06d      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8106116:	4a3d      	ldr	r2, [pc, #244]	; (810620c <HAL_TIM_ConfigClockSource+0x194>)
 8106118:	4293      	cmp	r3, r2
 810611a:	d060      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
 810611c:	4a3c      	ldr	r2, [pc, #240]	; (8106210 <HAL_TIM_ConfigClockSource+0x198>)
 810611e:	4293      	cmp	r3, r2
 8106120:	d05d      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
 8106122:	4a3c      	ldr	r2, [pc, #240]	; (8106214 <HAL_TIM_ConfigClockSource+0x19c>)
 8106124:	4293      	cmp	r3, r2
 8106126:	d05a      	beq.n	81061de <HAL_TIM_ConfigClockSource+0x166>
      break;
 8106128:	e063      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	6818      	ldr	r0, [r3, #0]
 810612e:	683b      	ldr	r3, [r7, #0]
 8106130:	6899      	ldr	r1, [r3, #8]
 8106132:	683b      	ldr	r3, [r7, #0]
 8106134:	685a      	ldr	r2, [r3, #4]
 8106136:	683b      	ldr	r3, [r7, #0]
 8106138:	68db      	ldr	r3, [r3, #12]
 810613a:	f000 fc79 	bl	8106a30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	681b      	ldr	r3, [r3, #0]
 8106142:	689b      	ldr	r3, [r3, #8]
 8106144:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8106146:	68fb      	ldr	r3, [r7, #12]
 8106148:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 810614c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	681b      	ldr	r3, [r3, #0]
 8106152:	68fa      	ldr	r2, [r7, #12]
 8106154:	609a      	str	r2, [r3, #8]
      break;
 8106156:	e04c      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	6818      	ldr	r0, [r3, #0]
 810615c:	683b      	ldr	r3, [r7, #0]
 810615e:	6899      	ldr	r1, [r3, #8]
 8106160:	683b      	ldr	r3, [r7, #0]
 8106162:	685a      	ldr	r2, [r3, #4]
 8106164:	683b      	ldr	r3, [r7, #0]
 8106166:	68db      	ldr	r3, [r3, #12]
 8106168:	f000 fc62 	bl	8106a30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810616c:	687b      	ldr	r3, [r7, #4]
 810616e:	681b      	ldr	r3, [r3, #0]
 8106170:	689a      	ldr	r2, [r3, #8]
 8106172:	687b      	ldr	r3, [r7, #4]
 8106174:	681b      	ldr	r3, [r3, #0]
 8106176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 810617a:	609a      	str	r2, [r3, #8]
      break;
 810617c:	e039      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 810617e:	687b      	ldr	r3, [r7, #4]
 8106180:	6818      	ldr	r0, [r3, #0]
 8106182:	683b      	ldr	r3, [r7, #0]
 8106184:	6859      	ldr	r1, [r3, #4]
 8106186:	683b      	ldr	r3, [r7, #0]
 8106188:	68db      	ldr	r3, [r3, #12]
 810618a:	461a      	mov	r2, r3
 810618c:	f000 fbd4 	bl	8106938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8106190:	687b      	ldr	r3, [r7, #4]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	2150      	movs	r1, #80	; 0x50
 8106196:	4618      	mov	r0, r3
 8106198:	f000 fc2d 	bl	81069f6 <TIM_ITRx_SetConfig>
      break;
 810619c:	e029      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	6818      	ldr	r0, [r3, #0]
 81061a2:	683b      	ldr	r3, [r7, #0]
 81061a4:	6859      	ldr	r1, [r3, #4]
 81061a6:	683b      	ldr	r3, [r7, #0]
 81061a8:	68db      	ldr	r3, [r3, #12]
 81061aa:	461a      	mov	r2, r3
 81061ac:	f000 fbf3 	bl	8106996 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	2160      	movs	r1, #96	; 0x60
 81061b6:	4618      	mov	r0, r3
 81061b8:	f000 fc1d 	bl	81069f6 <TIM_ITRx_SetConfig>
      break;
 81061bc:	e019      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 81061be:	687b      	ldr	r3, [r7, #4]
 81061c0:	6818      	ldr	r0, [r3, #0]
 81061c2:	683b      	ldr	r3, [r7, #0]
 81061c4:	6859      	ldr	r1, [r3, #4]
 81061c6:	683b      	ldr	r3, [r7, #0]
 81061c8:	68db      	ldr	r3, [r3, #12]
 81061ca:	461a      	mov	r2, r3
 81061cc:	f000 fbb4 	bl	8106938 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	2140      	movs	r1, #64	; 0x40
 81061d6:	4618      	mov	r0, r3
 81061d8:	f000 fc0d 	bl	81069f6 <TIM_ITRx_SetConfig>
      break;
 81061dc:	e009      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81061de:	687b      	ldr	r3, [r7, #4]
 81061e0:	681a      	ldr	r2, [r3, #0]
 81061e2:	683b      	ldr	r3, [r7, #0]
 81061e4:	681b      	ldr	r3, [r3, #0]
 81061e6:	4619      	mov	r1, r3
 81061e8:	4610      	mov	r0, r2
 81061ea:	f000 fc04 	bl	81069f6 <TIM_ITRx_SetConfig>
      break;
 81061ee:	e000      	b.n	81061f2 <HAL_TIM_ConfigClockSource+0x17a>
      break;
 81061f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	2201      	movs	r2, #1
 81061f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81061fa:	687b      	ldr	r3, [r7, #4]
 81061fc:	2200      	movs	r2, #0
 81061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106202:	2300      	movs	r3, #0
}
 8106204:	4618      	mov	r0, r3
 8106206:	3710      	adds	r7, #16
 8106208:	46bd      	mov	sp, r7
 810620a:	bd80      	pop	{r7, pc}
 810620c:	00100030 	.word	0x00100030
 8106210:	00100040 	.word	0x00100040
 8106214:	00100020 	.word	0x00100020

08106218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106218:	b480      	push	{r7}
 810621a:	b083      	sub	sp, #12
 810621c:	af00      	add	r7, sp, #0
 810621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106220:	bf00      	nop
 8106222:	370c      	adds	r7, #12
 8106224:	46bd      	mov	sp, r7
 8106226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810622a:	4770      	bx	lr

0810622c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810622c:	b480      	push	{r7}
 810622e:	b083      	sub	sp, #12
 8106230:	af00      	add	r7, sp, #0
 8106232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106234:	bf00      	nop
 8106236:	370c      	adds	r7, #12
 8106238:	46bd      	mov	sp, r7
 810623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810623e:	4770      	bx	lr

08106240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106240:	b480      	push	{r7}
 8106242:	b083      	sub	sp, #12
 8106244:	af00      	add	r7, sp, #0
 8106246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106248:	bf00      	nop
 810624a:	370c      	adds	r7, #12
 810624c:	46bd      	mov	sp, r7
 810624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106252:	4770      	bx	lr

08106254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106254:	b480      	push	{r7}
 8106256:	b083      	sub	sp, #12
 8106258:	af00      	add	r7, sp, #0
 810625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810625c:	bf00      	nop
 810625e:	370c      	adds	r7, #12
 8106260:	46bd      	mov	sp, r7
 8106262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106266:	4770      	bx	lr

08106268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8106268:	b480      	push	{r7}
 810626a:	b085      	sub	sp, #20
 810626c:	af00      	add	r7, sp, #0
 810626e:	6078      	str	r0, [r7, #4]
 8106270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	681b      	ldr	r3, [r3, #0]
 8106276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106278:	687b      	ldr	r3, [r7, #4]
 810627a:	4a40      	ldr	r2, [pc, #256]	; (810637c <TIM_Base_SetConfig+0x114>)
 810627c:	4293      	cmp	r3, r2
 810627e:	d013      	beq.n	81062a8 <TIM_Base_SetConfig+0x40>
 8106280:	687b      	ldr	r3, [r7, #4]
 8106282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106286:	d00f      	beq.n	81062a8 <TIM_Base_SetConfig+0x40>
 8106288:	687b      	ldr	r3, [r7, #4]
 810628a:	4a3d      	ldr	r2, [pc, #244]	; (8106380 <TIM_Base_SetConfig+0x118>)
 810628c:	4293      	cmp	r3, r2
 810628e:	d00b      	beq.n	81062a8 <TIM_Base_SetConfig+0x40>
 8106290:	687b      	ldr	r3, [r7, #4]
 8106292:	4a3c      	ldr	r2, [pc, #240]	; (8106384 <TIM_Base_SetConfig+0x11c>)
 8106294:	4293      	cmp	r3, r2
 8106296:	d007      	beq.n	81062a8 <TIM_Base_SetConfig+0x40>
 8106298:	687b      	ldr	r3, [r7, #4]
 810629a:	4a3b      	ldr	r2, [pc, #236]	; (8106388 <TIM_Base_SetConfig+0x120>)
 810629c:	4293      	cmp	r3, r2
 810629e:	d003      	beq.n	81062a8 <TIM_Base_SetConfig+0x40>
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	4a3a      	ldr	r2, [pc, #232]	; (810638c <TIM_Base_SetConfig+0x124>)
 81062a4:	4293      	cmp	r3, r2
 81062a6:	d108      	bne.n	81062ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81062a8:	68fb      	ldr	r3, [r7, #12]
 81062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81062ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81062b0:	683b      	ldr	r3, [r7, #0]
 81062b2:	685b      	ldr	r3, [r3, #4]
 81062b4:	68fa      	ldr	r2, [r7, #12]
 81062b6:	4313      	orrs	r3, r2
 81062b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	4a2f      	ldr	r2, [pc, #188]	; (810637c <TIM_Base_SetConfig+0x114>)
 81062be:	4293      	cmp	r3, r2
 81062c0:	d01f      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81062c8:	d01b      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	4a2c      	ldr	r2, [pc, #176]	; (8106380 <TIM_Base_SetConfig+0x118>)
 81062ce:	4293      	cmp	r3, r2
 81062d0:	d017      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062d2:	687b      	ldr	r3, [r7, #4]
 81062d4:	4a2b      	ldr	r2, [pc, #172]	; (8106384 <TIM_Base_SetConfig+0x11c>)
 81062d6:	4293      	cmp	r3, r2
 81062d8:	d013      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062da:	687b      	ldr	r3, [r7, #4]
 81062dc:	4a2a      	ldr	r2, [pc, #168]	; (8106388 <TIM_Base_SetConfig+0x120>)
 81062de:	4293      	cmp	r3, r2
 81062e0:	d00f      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062e2:	687b      	ldr	r3, [r7, #4]
 81062e4:	4a29      	ldr	r2, [pc, #164]	; (810638c <TIM_Base_SetConfig+0x124>)
 81062e6:	4293      	cmp	r3, r2
 81062e8:	d00b      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	4a28      	ldr	r2, [pc, #160]	; (8106390 <TIM_Base_SetConfig+0x128>)
 81062ee:	4293      	cmp	r3, r2
 81062f0:	d007      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062f2:	687b      	ldr	r3, [r7, #4]
 81062f4:	4a27      	ldr	r2, [pc, #156]	; (8106394 <TIM_Base_SetConfig+0x12c>)
 81062f6:	4293      	cmp	r3, r2
 81062f8:	d003      	beq.n	8106302 <TIM_Base_SetConfig+0x9a>
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	4a26      	ldr	r2, [pc, #152]	; (8106398 <TIM_Base_SetConfig+0x130>)
 81062fe:	4293      	cmp	r3, r2
 8106300:	d108      	bne.n	8106314 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106302:	68fb      	ldr	r3, [r7, #12]
 8106304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810630a:	683b      	ldr	r3, [r7, #0]
 810630c:	68db      	ldr	r3, [r3, #12]
 810630e:	68fa      	ldr	r2, [r7, #12]
 8106310:	4313      	orrs	r3, r2
 8106312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106314:	68fb      	ldr	r3, [r7, #12]
 8106316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810631a:	683b      	ldr	r3, [r7, #0]
 810631c:	695b      	ldr	r3, [r3, #20]
 810631e:	4313      	orrs	r3, r2
 8106320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106322:	687b      	ldr	r3, [r7, #4]
 8106324:	68fa      	ldr	r2, [r7, #12]
 8106326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106328:	683b      	ldr	r3, [r7, #0]
 810632a:	689a      	ldr	r2, [r3, #8]
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106330:	683b      	ldr	r3, [r7, #0]
 8106332:	681a      	ldr	r2, [r3, #0]
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	4a10      	ldr	r2, [pc, #64]	; (810637c <TIM_Base_SetConfig+0x114>)
 810633c:	4293      	cmp	r3, r2
 810633e:	d00f      	beq.n	8106360 <TIM_Base_SetConfig+0xf8>
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	4a12      	ldr	r2, [pc, #72]	; (810638c <TIM_Base_SetConfig+0x124>)
 8106344:	4293      	cmp	r3, r2
 8106346:	d00b      	beq.n	8106360 <TIM_Base_SetConfig+0xf8>
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	4a11      	ldr	r2, [pc, #68]	; (8106390 <TIM_Base_SetConfig+0x128>)
 810634c:	4293      	cmp	r3, r2
 810634e:	d007      	beq.n	8106360 <TIM_Base_SetConfig+0xf8>
 8106350:	687b      	ldr	r3, [r7, #4]
 8106352:	4a10      	ldr	r2, [pc, #64]	; (8106394 <TIM_Base_SetConfig+0x12c>)
 8106354:	4293      	cmp	r3, r2
 8106356:	d003      	beq.n	8106360 <TIM_Base_SetConfig+0xf8>
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	4a0f      	ldr	r2, [pc, #60]	; (8106398 <TIM_Base_SetConfig+0x130>)
 810635c:	4293      	cmp	r3, r2
 810635e:	d103      	bne.n	8106368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106360:	683b      	ldr	r3, [r7, #0]
 8106362:	691a      	ldr	r2, [r3, #16]
 8106364:	687b      	ldr	r3, [r7, #4]
 8106366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	2201      	movs	r2, #1
 810636c:	615a      	str	r2, [r3, #20]
}
 810636e:	bf00      	nop
 8106370:	3714      	adds	r7, #20
 8106372:	46bd      	mov	sp, r7
 8106374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106378:	4770      	bx	lr
 810637a:	bf00      	nop
 810637c:	40010000 	.word	0x40010000
 8106380:	40000400 	.word	0x40000400
 8106384:	40000800 	.word	0x40000800
 8106388:	40000c00 	.word	0x40000c00
 810638c:	40010400 	.word	0x40010400
 8106390:	40014000 	.word	0x40014000
 8106394:	40014400 	.word	0x40014400
 8106398:	40014800 	.word	0x40014800

0810639c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 810639c:	b480      	push	{r7}
 810639e:	b087      	sub	sp, #28
 81063a0:	af00      	add	r7, sp, #0
 81063a2:	6078      	str	r0, [r7, #4]
 81063a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	6a1b      	ldr	r3, [r3, #32]
 81063aa:	f023 0201 	bic.w	r2, r3, #1
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	6a1b      	ldr	r3, [r3, #32]
 81063b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	685b      	ldr	r3, [r3, #4]
 81063bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	699b      	ldr	r3, [r3, #24]
 81063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81063c4:	68fb      	ldr	r3, [r7, #12]
 81063c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81063ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81063d0:	68fb      	ldr	r3, [r7, #12]
 81063d2:	f023 0303 	bic.w	r3, r3, #3
 81063d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81063d8:	683b      	ldr	r3, [r7, #0]
 81063da:	681b      	ldr	r3, [r3, #0]
 81063dc:	68fa      	ldr	r2, [r7, #12]
 81063de:	4313      	orrs	r3, r2
 81063e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81063e2:	697b      	ldr	r3, [r7, #20]
 81063e4:	f023 0302 	bic.w	r3, r3, #2
 81063e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81063ea:	683b      	ldr	r3, [r7, #0]
 81063ec:	689b      	ldr	r3, [r3, #8]
 81063ee:	697a      	ldr	r2, [r7, #20]
 81063f0:	4313      	orrs	r3, r2
 81063f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	4a2c      	ldr	r2, [pc, #176]	; (81064a8 <TIM_OC1_SetConfig+0x10c>)
 81063f8:	4293      	cmp	r3, r2
 81063fa:	d00f      	beq.n	810641c <TIM_OC1_SetConfig+0x80>
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	4a2b      	ldr	r2, [pc, #172]	; (81064ac <TIM_OC1_SetConfig+0x110>)
 8106400:	4293      	cmp	r3, r2
 8106402:	d00b      	beq.n	810641c <TIM_OC1_SetConfig+0x80>
 8106404:	687b      	ldr	r3, [r7, #4]
 8106406:	4a2a      	ldr	r2, [pc, #168]	; (81064b0 <TIM_OC1_SetConfig+0x114>)
 8106408:	4293      	cmp	r3, r2
 810640a:	d007      	beq.n	810641c <TIM_OC1_SetConfig+0x80>
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	4a29      	ldr	r2, [pc, #164]	; (81064b4 <TIM_OC1_SetConfig+0x118>)
 8106410:	4293      	cmp	r3, r2
 8106412:	d003      	beq.n	810641c <TIM_OC1_SetConfig+0x80>
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	4a28      	ldr	r2, [pc, #160]	; (81064b8 <TIM_OC1_SetConfig+0x11c>)
 8106418:	4293      	cmp	r3, r2
 810641a:	d10c      	bne.n	8106436 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810641c:	697b      	ldr	r3, [r7, #20]
 810641e:	f023 0308 	bic.w	r3, r3, #8
 8106422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106424:	683b      	ldr	r3, [r7, #0]
 8106426:	68db      	ldr	r3, [r3, #12]
 8106428:	697a      	ldr	r2, [r7, #20]
 810642a:	4313      	orrs	r3, r2
 810642c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810642e:	697b      	ldr	r3, [r7, #20]
 8106430:	f023 0304 	bic.w	r3, r3, #4
 8106434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	4a1b      	ldr	r2, [pc, #108]	; (81064a8 <TIM_OC1_SetConfig+0x10c>)
 810643a:	4293      	cmp	r3, r2
 810643c:	d00f      	beq.n	810645e <TIM_OC1_SetConfig+0xc2>
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	4a1a      	ldr	r2, [pc, #104]	; (81064ac <TIM_OC1_SetConfig+0x110>)
 8106442:	4293      	cmp	r3, r2
 8106444:	d00b      	beq.n	810645e <TIM_OC1_SetConfig+0xc2>
 8106446:	687b      	ldr	r3, [r7, #4]
 8106448:	4a19      	ldr	r2, [pc, #100]	; (81064b0 <TIM_OC1_SetConfig+0x114>)
 810644a:	4293      	cmp	r3, r2
 810644c:	d007      	beq.n	810645e <TIM_OC1_SetConfig+0xc2>
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	4a18      	ldr	r2, [pc, #96]	; (81064b4 <TIM_OC1_SetConfig+0x118>)
 8106452:	4293      	cmp	r3, r2
 8106454:	d003      	beq.n	810645e <TIM_OC1_SetConfig+0xc2>
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	4a17      	ldr	r2, [pc, #92]	; (81064b8 <TIM_OC1_SetConfig+0x11c>)
 810645a:	4293      	cmp	r3, r2
 810645c:	d111      	bne.n	8106482 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810645e:	693b      	ldr	r3, [r7, #16]
 8106460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106466:	693b      	ldr	r3, [r7, #16]
 8106468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810646c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810646e:	683b      	ldr	r3, [r7, #0]
 8106470:	695b      	ldr	r3, [r3, #20]
 8106472:	693a      	ldr	r2, [r7, #16]
 8106474:	4313      	orrs	r3, r2
 8106476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106478:	683b      	ldr	r3, [r7, #0]
 810647a:	699b      	ldr	r3, [r3, #24]
 810647c:	693a      	ldr	r2, [r7, #16]
 810647e:	4313      	orrs	r3, r2
 8106480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	693a      	ldr	r2, [r7, #16]
 8106486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	68fa      	ldr	r2, [r7, #12]
 810648c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810648e:	683b      	ldr	r3, [r7, #0]
 8106490:	685a      	ldr	r2, [r3, #4]
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	697a      	ldr	r2, [r7, #20]
 810649a:	621a      	str	r2, [r3, #32]
}
 810649c:	bf00      	nop
 810649e:	371c      	adds	r7, #28
 81064a0:	46bd      	mov	sp, r7
 81064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064a6:	4770      	bx	lr
 81064a8:	40010000 	.word	0x40010000
 81064ac:	40010400 	.word	0x40010400
 81064b0:	40014000 	.word	0x40014000
 81064b4:	40014400 	.word	0x40014400
 81064b8:	40014800 	.word	0x40014800

081064bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81064bc:	b480      	push	{r7}
 81064be:	b087      	sub	sp, #28
 81064c0:	af00      	add	r7, sp, #0
 81064c2:	6078      	str	r0, [r7, #4]
 81064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	6a1b      	ldr	r3, [r3, #32]
 81064ca:	f023 0210 	bic.w	r2, r3, #16
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	6a1b      	ldr	r3, [r3, #32]
 81064d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	685b      	ldr	r3, [r3, #4]
 81064dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	699b      	ldr	r3, [r3, #24]
 81064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81064e4:	68fb      	ldr	r3, [r7, #12]
 81064e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81064ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81064ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81064f0:	68fb      	ldr	r3, [r7, #12]
 81064f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81064f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81064f8:	683b      	ldr	r3, [r7, #0]
 81064fa:	681b      	ldr	r3, [r3, #0]
 81064fc:	021b      	lsls	r3, r3, #8
 81064fe:	68fa      	ldr	r2, [r7, #12]
 8106500:	4313      	orrs	r3, r2
 8106502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106504:	697b      	ldr	r3, [r7, #20]
 8106506:	f023 0320 	bic.w	r3, r3, #32
 810650a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810650c:	683b      	ldr	r3, [r7, #0]
 810650e:	689b      	ldr	r3, [r3, #8]
 8106510:	011b      	lsls	r3, r3, #4
 8106512:	697a      	ldr	r2, [r7, #20]
 8106514:	4313      	orrs	r3, r2
 8106516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106518:	687b      	ldr	r3, [r7, #4]
 810651a:	4a28      	ldr	r2, [pc, #160]	; (81065bc <TIM_OC2_SetConfig+0x100>)
 810651c:	4293      	cmp	r3, r2
 810651e:	d003      	beq.n	8106528 <TIM_OC2_SetConfig+0x6c>
 8106520:	687b      	ldr	r3, [r7, #4]
 8106522:	4a27      	ldr	r2, [pc, #156]	; (81065c0 <TIM_OC2_SetConfig+0x104>)
 8106524:	4293      	cmp	r3, r2
 8106526:	d10d      	bne.n	8106544 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106528:	697b      	ldr	r3, [r7, #20]
 810652a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106530:	683b      	ldr	r3, [r7, #0]
 8106532:	68db      	ldr	r3, [r3, #12]
 8106534:	011b      	lsls	r3, r3, #4
 8106536:	697a      	ldr	r2, [r7, #20]
 8106538:	4313      	orrs	r3, r2
 810653a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810653c:	697b      	ldr	r3, [r7, #20]
 810653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	4a1d      	ldr	r2, [pc, #116]	; (81065bc <TIM_OC2_SetConfig+0x100>)
 8106548:	4293      	cmp	r3, r2
 810654a:	d00f      	beq.n	810656c <TIM_OC2_SetConfig+0xb0>
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	4a1c      	ldr	r2, [pc, #112]	; (81065c0 <TIM_OC2_SetConfig+0x104>)
 8106550:	4293      	cmp	r3, r2
 8106552:	d00b      	beq.n	810656c <TIM_OC2_SetConfig+0xb0>
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	4a1b      	ldr	r2, [pc, #108]	; (81065c4 <TIM_OC2_SetConfig+0x108>)
 8106558:	4293      	cmp	r3, r2
 810655a:	d007      	beq.n	810656c <TIM_OC2_SetConfig+0xb0>
 810655c:	687b      	ldr	r3, [r7, #4]
 810655e:	4a1a      	ldr	r2, [pc, #104]	; (81065c8 <TIM_OC2_SetConfig+0x10c>)
 8106560:	4293      	cmp	r3, r2
 8106562:	d003      	beq.n	810656c <TIM_OC2_SetConfig+0xb0>
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	4a19      	ldr	r2, [pc, #100]	; (81065cc <TIM_OC2_SetConfig+0x110>)
 8106568:	4293      	cmp	r3, r2
 810656a:	d113      	bne.n	8106594 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810656c:	693b      	ldr	r3, [r7, #16]
 810656e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106574:	693b      	ldr	r3, [r7, #16]
 8106576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810657a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810657c:	683b      	ldr	r3, [r7, #0]
 810657e:	695b      	ldr	r3, [r3, #20]
 8106580:	009b      	lsls	r3, r3, #2
 8106582:	693a      	ldr	r2, [r7, #16]
 8106584:	4313      	orrs	r3, r2
 8106586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106588:	683b      	ldr	r3, [r7, #0]
 810658a:	699b      	ldr	r3, [r3, #24]
 810658c:	009b      	lsls	r3, r3, #2
 810658e:	693a      	ldr	r2, [r7, #16]
 8106590:	4313      	orrs	r3, r2
 8106592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	693a      	ldr	r2, [r7, #16]
 8106598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	68fa      	ldr	r2, [r7, #12]
 810659e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81065a0:	683b      	ldr	r3, [r7, #0]
 81065a2:	685a      	ldr	r2, [r3, #4]
 81065a4:	687b      	ldr	r3, [r7, #4]
 81065a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	697a      	ldr	r2, [r7, #20]
 81065ac:	621a      	str	r2, [r3, #32]
}
 81065ae:	bf00      	nop
 81065b0:	371c      	adds	r7, #28
 81065b2:	46bd      	mov	sp, r7
 81065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065b8:	4770      	bx	lr
 81065ba:	bf00      	nop
 81065bc:	40010000 	.word	0x40010000
 81065c0:	40010400 	.word	0x40010400
 81065c4:	40014000 	.word	0x40014000
 81065c8:	40014400 	.word	0x40014400
 81065cc:	40014800 	.word	0x40014800

081065d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81065d0:	b480      	push	{r7}
 81065d2:	b087      	sub	sp, #28
 81065d4:	af00      	add	r7, sp, #0
 81065d6:	6078      	str	r0, [r7, #4]
 81065d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	6a1b      	ldr	r3, [r3, #32]
 81065de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	6a1b      	ldr	r3, [r3, #32]
 81065ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81065ec:	687b      	ldr	r3, [r7, #4]
 81065ee:	685b      	ldr	r3, [r3, #4]
 81065f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81065f2:	687b      	ldr	r3, [r7, #4]
 81065f4:	69db      	ldr	r3, [r3, #28]
 81065f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81065f8:	68fb      	ldr	r3, [r7, #12]
 81065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81065fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106600:	68fb      	ldr	r3, [r7, #12]
 8106602:	f023 0303 	bic.w	r3, r3, #3
 8106606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106608:	683b      	ldr	r3, [r7, #0]
 810660a:	681b      	ldr	r3, [r3, #0]
 810660c:	68fa      	ldr	r2, [r7, #12]
 810660e:	4313      	orrs	r3, r2
 8106610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106612:	697b      	ldr	r3, [r7, #20]
 8106614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810661a:	683b      	ldr	r3, [r7, #0]
 810661c:	689b      	ldr	r3, [r3, #8]
 810661e:	021b      	lsls	r3, r3, #8
 8106620:	697a      	ldr	r2, [r7, #20]
 8106622:	4313      	orrs	r3, r2
 8106624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106626:	687b      	ldr	r3, [r7, #4]
 8106628:	4a27      	ldr	r2, [pc, #156]	; (81066c8 <TIM_OC3_SetConfig+0xf8>)
 810662a:	4293      	cmp	r3, r2
 810662c:	d003      	beq.n	8106636 <TIM_OC3_SetConfig+0x66>
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	4a26      	ldr	r2, [pc, #152]	; (81066cc <TIM_OC3_SetConfig+0xfc>)
 8106632:	4293      	cmp	r3, r2
 8106634:	d10d      	bne.n	8106652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106636:	697b      	ldr	r3, [r7, #20]
 8106638:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810663c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810663e:	683b      	ldr	r3, [r7, #0]
 8106640:	68db      	ldr	r3, [r3, #12]
 8106642:	021b      	lsls	r3, r3, #8
 8106644:	697a      	ldr	r2, [r7, #20]
 8106646:	4313      	orrs	r3, r2
 8106648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810664a:	697b      	ldr	r3, [r7, #20]
 810664c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	4a1c      	ldr	r2, [pc, #112]	; (81066c8 <TIM_OC3_SetConfig+0xf8>)
 8106656:	4293      	cmp	r3, r2
 8106658:	d00f      	beq.n	810667a <TIM_OC3_SetConfig+0xaa>
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	4a1b      	ldr	r2, [pc, #108]	; (81066cc <TIM_OC3_SetConfig+0xfc>)
 810665e:	4293      	cmp	r3, r2
 8106660:	d00b      	beq.n	810667a <TIM_OC3_SetConfig+0xaa>
 8106662:	687b      	ldr	r3, [r7, #4]
 8106664:	4a1a      	ldr	r2, [pc, #104]	; (81066d0 <TIM_OC3_SetConfig+0x100>)
 8106666:	4293      	cmp	r3, r2
 8106668:	d007      	beq.n	810667a <TIM_OC3_SetConfig+0xaa>
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	4a19      	ldr	r2, [pc, #100]	; (81066d4 <TIM_OC3_SetConfig+0x104>)
 810666e:	4293      	cmp	r3, r2
 8106670:	d003      	beq.n	810667a <TIM_OC3_SetConfig+0xaa>
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	4a18      	ldr	r2, [pc, #96]	; (81066d8 <TIM_OC3_SetConfig+0x108>)
 8106676:	4293      	cmp	r3, r2
 8106678:	d113      	bne.n	81066a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810667a:	693b      	ldr	r3, [r7, #16]
 810667c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106682:	693b      	ldr	r3, [r7, #16]
 8106684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810668a:	683b      	ldr	r3, [r7, #0]
 810668c:	695b      	ldr	r3, [r3, #20]
 810668e:	011b      	lsls	r3, r3, #4
 8106690:	693a      	ldr	r2, [r7, #16]
 8106692:	4313      	orrs	r3, r2
 8106694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106696:	683b      	ldr	r3, [r7, #0]
 8106698:	699b      	ldr	r3, [r3, #24]
 810669a:	011b      	lsls	r3, r3, #4
 810669c:	693a      	ldr	r2, [r7, #16]
 810669e:	4313      	orrs	r3, r2
 81066a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	693a      	ldr	r2, [r7, #16]
 81066a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	68fa      	ldr	r2, [r7, #12]
 81066ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81066ae:	683b      	ldr	r3, [r7, #0]
 81066b0:	685a      	ldr	r2, [r3, #4]
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	697a      	ldr	r2, [r7, #20]
 81066ba:	621a      	str	r2, [r3, #32]
}
 81066bc:	bf00      	nop
 81066be:	371c      	adds	r7, #28
 81066c0:	46bd      	mov	sp, r7
 81066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066c6:	4770      	bx	lr
 81066c8:	40010000 	.word	0x40010000
 81066cc:	40010400 	.word	0x40010400
 81066d0:	40014000 	.word	0x40014000
 81066d4:	40014400 	.word	0x40014400
 81066d8:	40014800 	.word	0x40014800

081066dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 81066dc:	b480      	push	{r7}
 81066de:	b087      	sub	sp, #28
 81066e0:	af00      	add	r7, sp, #0
 81066e2:	6078      	str	r0, [r7, #4]
 81066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81066e6:	687b      	ldr	r3, [r7, #4]
 81066e8:	6a1b      	ldr	r3, [r3, #32]
 81066ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	6a1b      	ldr	r3, [r3, #32]
 81066f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	685b      	ldr	r3, [r3, #4]
 81066fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	69db      	ldr	r3, [r3, #28]
 8106702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8106704:	68fb      	ldr	r3, [r7, #12]
 8106706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810670a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810670c:	68fb      	ldr	r3, [r7, #12]
 810670e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106714:	683b      	ldr	r3, [r7, #0]
 8106716:	681b      	ldr	r3, [r3, #0]
 8106718:	021b      	lsls	r3, r3, #8
 810671a:	68fa      	ldr	r2, [r7, #12]
 810671c:	4313      	orrs	r3, r2
 810671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106720:	693b      	ldr	r3, [r7, #16]
 8106722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8106728:	683b      	ldr	r3, [r7, #0]
 810672a:	689b      	ldr	r3, [r3, #8]
 810672c:	031b      	lsls	r3, r3, #12
 810672e:	693a      	ldr	r2, [r7, #16]
 8106730:	4313      	orrs	r3, r2
 8106732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	4a18      	ldr	r2, [pc, #96]	; (8106798 <TIM_OC4_SetConfig+0xbc>)
 8106738:	4293      	cmp	r3, r2
 810673a:	d00f      	beq.n	810675c <TIM_OC4_SetConfig+0x80>
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	4a17      	ldr	r2, [pc, #92]	; (810679c <TIM_OC4_SetConfig+0xc0>)
 8106740:	4293      	cmp	r3, r2
 8106742:	d00b      	beq.n	810675c <TIM_OC4_SetConfig+0x80>
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	4a16      	ldr	r2, [pc, #88]	; (81067a0 <TIM_OC4_SetConfig+0xc4>)
 8106748:	4293      	cmp	r3, r2
 810674a:	d007      	beq.n	810675c <TIM_OC4_SetConfig+0x80>
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	4a15      	ldr	r2, [pc, #84]	; (81067a4 <TIM_OC4_SetConfig+0xc8>)
 8106750:	4293      	cmp	r3, r2
 8106752:	d003      	beq.n	810675c <TIM_OC4_SetConfig+0x80>
 8106754:	687b      	ldr	r3, [r7, #4]
 8106756:	4a14      	ldr	r2, [pc, #80]	; (81067a8 <TIM_OC4_SetConfig+0xcc>)
 8106758:	4293      	cmp	r3, r2
 810675a:	d109      	bne.n	8106770 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810675c:	697b      	ldr	r3, [r7, #20]
 810675e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8106762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8106764:	683b      	ldr	r3, [r7, #0]
 8106766:	695b      	ldr	r3, [r3, #20]
 8106768:	019b      	lsls	r3, r3, #6
 810676a:	697a      	ldr	r2, [r7, #20]
 810676c:	4313      	orrs	r3, r2
 810676e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	697a      	ldr	r2, [r7, #20]
 8106774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	68fa      	ldr	r2, [r7, #12]
 810677a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810677c:	683b      	ldr	r3, [r7, #0]
 810677e:	685a      	ldr	r2, [r3, #4]
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106784:	687b      	ldr	r3, [r7, #4]
 8106786:	693a      	ldr	r2, [r7, #16]
 8106788:	621a      	str	r2, [r3, #32]
}
 810678a:	bf00      	nop
 810678c:	371c      	adds	r7, #28
 810678e:	46bd      	mov	sp, r7
 8106790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106794:	4770      	bx	lr
 8106796:	bf00      	nop
 8106798:	40010000 	.word	0x40010000
 810679c:	40010400 	.word	0x40010400
 81067a0:	40014000 	.word	0x40014000
 81067a4:	40014400 	.word	0x40014400
 81067a8:	40014800 	.word	0x40014800

081067ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81067ac:	b480      	push	{r7}
 81067ae:	b087      	sub	sp, #28
 81067b0:	af00      	add	r7, sp, #0
 81067b2:	6078      	str	r0, [r7, #4]
 81067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81067b6:	687b      	ldr	r3, [r7, #4]
 81067b8:	6a1b      	ldr	r3, [r3, #32]
 81067ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81067c2:	687b      	ldr	r3, [r7, #4]
 81067c4:	6a1b      	ldr	r3, [r3, #32]
 81067c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	685b      	ldr	r3, [r3, #4]
 81067cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81067d4:	68fb      	ldr	r3, [r7, #12]
 81067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81067dc:	683b      	ldr	r3, [r7, #0]
 81067de:	681b      	ldr	r3, [r3, #0]
 81067e0:	68fa      	ldr	r2, [r7, #12]
 81067e2:	4313      	orrs	r3, r2
 81067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81067e6:	693b      	ldr	r3, [r7, #16]
 81067e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81067ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81067ee:	683b      	ldr	r3, [r7, #0]
 81067f0:	689b      	ldr	r3, [r3, #8]
 81067f2:	041b      	lsls	r3, r3, #16
 81067f4:	693a      	ldr	r2, [r7, #16]
 81067f6:	4313      	orrs	r3, r2
 81067f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	4a17      	ldr	r2, [pc, #92]	; (810685c <TIM_OC5_SetConfig+0xb0>)
 81067fe:	4293      	cmp	r3, r2
 8106800:	d00f      	beq.n	8106822 <TIM_OC5_SetConfig+0x76>
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	4a16      	ldr	r2, [pc, #88]	; (8106860 <TIM_OC5_SetConfig+0xb4>)
 8106806:	4293      	cmp	r3, r2
 8106808:	d00b      	beq.n	8106822 <TIM_OC5_SetConfig+0x76>
 810680a:	687b      	ldr	r3, [r7, #4]
 810680c:	4a15      	ldr	r2, [pc, #84]	; (8106864 <TIM_OC5_SetConfig+0xb8>)
 810680e:	4293      	cmp	r3, r2
 8106810:	d007      	beq.n	8106822 <TIM_OC5_SetConfig+0x76>
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	4a14      	ldr	r2, [pc, #80]	; (8106868 <TIM_OC5_SetConfig+0xbc>)
 8106816:	4293      	cmp	r3, r2
 8106818:	d003      	beq.n	8106822 <TIM_OC5_SetConfig+0x76>
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	4a13      	ldr	r2, [pc, #76]	; (810686c <TIM_OC5_SetConfig+0xc0>)
 810681e:	4293      	cmp	r3, r2
 8106820:	d109      	bne.n	8106836 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8106822:	697b      	ldr	r3, [r7, #20]
 8106824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810682a:	683b      	ldr	r3, [r7, #0]
 810682c:	695b      	ldr	r3, [r3, #20]
 810682e:	021b      	lsls	r3, r3, #8
 8106830:	697a      	ldr	r2, [r7, #20]
 8106832:	4313      	orrs	r3, r2
 8106834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	697a      	ldr	r2, [r7, #20]
 810683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	68fa      	ldr	r2, [r7, #12]
 8106840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8106842:	683b      	ldr	r3, [r7, #0]
 8106844:	685a      	ldr	r2, [r3, #4]
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810684a:	687b      	ldr	r3, [r7, #4]
 810684c:	693a      	ldr	r2, [r7, #16]
 810684e:	621a      	str	r2, [r3, #32]
}
 8106850:	bf00      	nop
 8106852:	371c      	adds	r7, #28
 8106854:	46bd      	mov	sp, r7
 8106856:	f85d 7b04 	ldr.w	r7, [sp], #4
 810685a:	4770      	bx	lr
 810685c:	40010000 	.word	0x40010000
 8106860:	40010400 	.word	0x40010400
 8106864:	40014000 	.word	0x40014000
 8106868:	40014400 	.word	0x40014400
 810686c:	40014800 	.word	0x40014800

08106870 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8106870:	b480      	push	{r7}
 8106872:	b087      	sub	sp, #28
 8106874:	af00      	add	r7, sp, #0
 8106876:	6078      	str	r0, [r7, #4]
 8106878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810687a:	687b      	ldr	r3, [r7, #4]
 810687c:	6a1b      	ldr	r3, [r3, #32]
 810687e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106886:	687b      	ldr	r3, [r7, #4]
 8106888:	6a1b      	ldr	r3, [r3, #32]
 810688a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	685b      	ldr	r3, [r3, #4]
 8106890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8106898:	68fb      	ldr	r3, [r7, #12]
 810689a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810689e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81068a0:	683b      	ldr	r3, [r7, #0]
 81068a2:	681b      	ldr	r3, [r3, #0]
 81068a4:	021b      	lsls	r3, r3, #8
 81068a6:	68fa      	ldr	r2, [r7, #12]
 81068a8:	4313      	orrs	r3, r2
 81068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81068ac:	693b      	ldr	r3, [r7, #16]
 81068ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81068b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81068b4:	683b      	ldr	r3, [r7, #0]
 81068b6:	689b      	ldr	r3, [r3, #8]
 81068b8:	051b      	lsls	r3, r3, #20
 81068ba:	693a      	ldr	r2, [r7, #16]
 81068bc:	4313      	orrs	r3, r2
 81068be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81068c0:	687b      	ldr	r3, [r7, #4]
 81068c2:	4a18      	ldr	r2, [pc, #96]	; (8106924 <TIM_OC6_SetConfig+0xb4>)
 81068c4:	4293      	cmp	r3, r2
 81068c6:	d00f      	beq.n	81068e8 <TIM_OC6_SetConfig+0x78>
 81068c8:	687b      	ldr	r3, [r7, #4]
 81068ca:	4a17      	ldr	r2, [pc, #92]	; (8106928 <TIM_OC6_SetConfig+0xb8>)
 81068cc:	4293      	cmp	r3, r2
 81068ce:	d00b      	beq.n	81068e8 <TIM_OC6_SetConfig+0x78>
 81068d0:	687b      	ldr	r3, [r7, #4]
 81068d2:	4a16      	ldr	r2, [pc, #88]	; (810692c <TIM_OC6_SetConfig+0xbc>)
 81068d4:	4293      	cmp	r3, r2
 81068d6:	d007      	beq.n	81068e8 <TIM_OC6_SetConfig+0x78>
 81068d8:	687b      	ldr	r3, [r7, #4]
 81068da:	4a15      	ldr	r2, [pc, #84]	; (8106930 <TIM_OC6_SetConfig+0xc0>)
 81068dc:	4293      	cmp	r3, r2
 81068de:	d003      	beq.n	81068e8 <TIM_OC6_SetConfig+0x78>
 81068e0:	687b      	ldr	r3, [r7, #4]
 81068e2:	4a14      	ldr	r2, [pc, #80]	; (8106934 <TIM_OC6_SetConfig+0xc4>)
 81068e4:	4293      	cmp	r3, r2
 81068e6:	d109      	bne.n	81068fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81068e8:	697b      	ldr	r3, [r7, #20]
 81068ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81068ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81068f0:	683b      	ldr	r3, [r7, #0]
 81068f2:	695b      	ldr	r3, [r3, #20]
 81068f4:	029b      	lsls	r3, r3, #10
 81068f6:	697a      	ldr	r2, [r7, #20]
 81068f8:	4313      	orrs	r3, r2
 81068fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	697a      	ldr	r2, [r7, #20]
 8106900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8106902:	687b      	ldr	r3, [r7, #4]
 8106904:	68fa      	ldr	r2, [r7, #12]
 8106906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8106908:	683b      	ldr	r3, [r7, #0]
 810690a:	685a      	ldr	r2, [r3, #4]
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106910:	687b      	ldr	r3, [r7, #4]
 8106912:	693a      	ldr	r2, [r7, #16]
 8106914:	621a      	str	r2, [r3, #32]
}
 8106916:	bf00      	nop
 8106918:	371c      	adds	r7, #28
 810691a:	46bd      	mov	sp, r7
 810691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106920:	4770      	bx	lr
 8106922:	bf00      	nop
 8106924:	40010000 	.word	0x40010000
 8106928:	40010400 	.word	0x40010400
 810692c:	40014000 	.word	0x40014000
 8106930:	40014400 	.word	0x40014400
 8106934:	40014800 	.word	0x40014800

08106938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106938:	b480      	push	{r7}
 810693a:	b087      	sub	sp, #28
 810693c:	af00      	add	r7, sp, #0
 810693e:	60f8      	str	r0, [r7, #12]
 8106940:	60b9      	str	r1, [r7, #8]
 8106942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8106944:	68fb      	ldr	r3, [r7, #12]
 8106946:	6a1b      	ldr	r3, [r3, #32]
 8106948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810694a:	68fb      	ldr	r3, [r7, #12]
 810694c:	6a1b      	ldr	r3, [r3, #32]
 810694e:	f023 0201 	bic.w	r2, r3, #1
 8106952:	68fb      	ldr	r3, [r7, #12]
 8106954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8106956:	68fb      	ldr	r3, [r7, #12]
 8106958:	699b      	ldr	r3, [r3, #24]
 810695a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810695c:	693b      	ldr	r3, [r7, #16]
 810695e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8106962:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	011b      	lsls	r3, r3, #4
 8106968:	693a      	ldr	r2, [r7, #16]
 810696a:	4313      	orrs	r3, r2
 810696c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810696e:	697b      	ldr	r3, [r7, #20]
 8106970:	f023 030a 	bic.w	r3, r3, #10
 8106974:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8106976:	697a      	ldr	r2, [r7, #20]
 8106978:	68bb      	ldr	r3, [r7, #8]
 810697a:	4313      	orrs	r3, r2
 810697c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810697e:	68fb      	ldr	r3, [r7, #12]
 8106980:	693a      	ldr	r2, [r7, #16]
 8106982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8106984:	68fb      	ldr	r3, [r7, #12]
 8106986:	697a      	ldr	r2, [r7, #20]
 8106988:	621a      	str	r2, [r3, #32]
}
 810698a:	bf00      	nop
 810698c:	371c      	adds	r7, #28
 810698e:	46bd      	mov	sp, r7
 8106990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106994:	4770      	bx	lr

08106996 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8106996:	b480      	push	{r7}
 8106998:	b087      	sub	sp, #28
 810699a:	af00      	add	r7, sp, #0
 810699c:	60f8      	str	r0, [r7, #12]
 810699e:	60b9      	str	r1, [r7, #8]
 81069a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81069a2:	68fb      	ldr	r3, [r7, #12]
 81069a4:	6a1b      	ldr	r3, [r3, #32]
 81069a6:	f023 0210 	bic.w	r2, r3, #16
 81069aa:	68fb      	ldr	r3, [r7, #12]
 81069ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81069ae:	68fb      	ldr	r3, [r7, #12]
 81069b0:	699b      	ldr	r3, [r3, #24]
 81069b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81069b4:	68fb      	ldr	r3, [r7, #12]
 81069b6:	6a1b      	ldr	r3, [r3, #32]
 81069b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81069ba:	697b      	ldr	r3, [r7, #20]
 81069bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81069c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81069c2:	687b      	ldr	r3, [r7, #4]
 81069c4:	031b      	lsls	r3, r3, #12
 81069c6:	697a      	ldr	r2, [r7, #20]
 81069c8:	4313      	orrs	r3, r2
 81069ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81069cc:	693b      	ldr	r3, [r7, #16]
 81069ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 81069d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 81069d4:	68bb      	ldr	r3, [r7, #8]
 81069d6:	011b      	lsls	r3, r3, #4
 81069d8:	693a      	ldr	r2, [r7, #16]
 81069da:	4313      	orrs	r3, r2
 81069dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81069de:	68fb      	ldr	r3, [r7, #12]
 81069e0:	697a      	ldr	r2, [r7, #20]
 81069e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81069e4:	68fb      	ldr	r3, [r7, #12]
 81069e6:	693a      	ldr	r2, [r7, #16]
 81069e8:	621a      	str	r2, [r3, #32]
}
 81069ea:	bf00      	nop
 81069ec:	371c      	adds	r7, #28
 81069ee:	46bd      	mov	sp, r7
 81069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81069f4:	4770      	bx	lr

081069f6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81069f6:	b480      	push	{r7}
 81069f8:	b085      	sub	sp, #20
 81069fa:	af00      	add	r7, sp, #0
 81069fc:	6078      	str	r0, [r7, #4]
 81069fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8106a00:	687b      	ldr	r3, [r7, #4]
 8106a02:	689b      	ldr	r3, [r3, #8]
 8106a04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8106a06:	68fb      	ldr	r3, [r7, #12]
 8106a08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8106a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8106a12:	683a      	ldr	r2, [r7, #0]
 8106a14:	68fb      	ldr	r3, [r7, #12]
 8106a16:	4313      	orrs	r3, r2
 8106a18:	f043 0307 	orr.w	r3, r3, #7
 8106a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106a1e:	687b      	ldr	r3, [r7, #4]
 8106a20:	68fa      	ldr	r2, [r7, #12]
 8106a22:	609a      	str	r2, [r3, #8]
}
 8106a24:	bf00      	nop
 8106a26:	3714      	adds	r7, #20
 8106a28:	46bd      	mov	sp, r7
 8106a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a2e:	4770      	bx	lr

08106a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8106a30:	b480      	push	{r7}
 8106a32:	b087      	sub	sp, #28
 8106a34:	af00      	add	r7, sp, #0
 8106a36:	60f8      	str	r0, [r7, #12]
 8106a38:	60b9      	str	r1, [r7, #8]
 8106a3a:	607a      	str	r2, [r7, #4]
 8106a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8106a3e:	68fb      	ldr	r3, [r7, #12]
 8106a40:	689b      	ldr	r3, [r3, #8]
 8106a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8106a44:	697b      	ldr	r3, [r7, #20]
 8106a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8106a4c:	683b      	ldr	r3, [r7, #0]
 8106a4e:	021a      	lsls	r2, r3, #8
 8106a50:	687b      	ldr	r3, [r7, #4]
 8106a52:	431a      	orrs	r2, r3
 8106a54:	68bb      	ldr	r3, [r7, #8]
 8106a56:	4313      	orrs	r3, r2
 8106a58:	697a      	ldr	r2, [r7, #20]
 8106a5a:	4313      	orrs	r3, r2
 8106a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8106a5e:	68fb      	ldr	r3, [r7, #12]
 8106a60:	697a      	ldr	r2, [r7, #20]
 8106a62:	609a      	str	r2, [r3, #8]
}
 8106a64:	bf00      	nop
 8106a66:	371c      	adds	r7, #28
 8106a68:	46bd      	mov	sp, r7
 8106a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a6e:	4770      	bx	lr

08106a70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8106a70:	b480      	push	{r7}
 8106a72:	b087      	sub	sp, #28
 8106a74:	af00      	add	r7, sp, #0
 8106a76:	60f8      	str	r0, [r7, #12]
 8106a78:	60b9      	str	r1, [r7, #8]
 8106a7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8106a7c:	68bb      	ldr	r3, [r7, #8]
 8106a7e:	f003 031f 	and.w	r3, r3, #31
 8106a82:	2201      	movs	r2, #1
 8106a84:	fa02 f303 	lsl.w	r3, r2, r3
 8106a88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8106a8a:	68fb      	ldr	r3, [r7, #12]
 8106a8c:	6a1a      	ldr	r2, [r3, #32]
 8106a8e:	697b      	ldr	r3, [r7, #20]
 8106a90:	43db      	mvns	r3, r3
 8106a92:	401a      	ands	r2, r3
 8106a94:	68fb      	ldr	r3, [r7, #12]
 8106a96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8106a98:	68fb      	ldr	r3, [r7, #12]
 8106a9a:	6a1a      	ldr	r2, [r3, #32]
 8106a9c:	68bb      	ldr	r3, [r7, #8]
 8106a9e:	f003 031f 	and.w	r3, r3, #31
 8106aa2:	6879      	ldr	r1, [r7, #4]
 8106aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8106aa8:	431a      	orrs	r2, r3
 8106aaa:	68fb      	ldr	r3, [r7, #12]
 8106aac:	621a      	str	r2, [r3, #32]
}
 8106aae:	bf00      	nop
 8106ab0:	371c      	adds	r7, #28
 8106ab2:	46bd      	mov	sp, r7
 8106ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ab8:	4770      	bx	lr
	...

08106abc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8106abc:	b480      	push	{r7}
 8106abe:	b085      	sub	sp, #20
 8106ac0:	af00      	add	r7, sp, #0
 8106ac2:	6078      	str	r0, [r7, #4]
 8106ac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106acc:	2b01      	cmp	r3, #1
 8106ace:	d101      	bne.n	8106ad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8106ad0:	2302      	movs	r3, #2
 8106ad2:	e068      	b.n	8106ba6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8106ad4:	687b      	ldr	r3, [r7, #4]
 8106ad6:	2201      	movs	r2, #1
 8106ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106adc:	687b      	ldr	r3, [r7, #4]
 8106ade:	2202      	movs	r2, #2
 8106ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	681b      	ldr	r3, [r3, #0]
 8106ae8:	685b      	ldr	r3, [r3, #4]
 8106aea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8106aec:	687b      	ldr	r3, [r7, #4]
 8106aee:	681b      	ldr	r3, [r3, #0]
 8106af0:	689b      	ldr	r3, [r3, #8]
 8106af2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	681b      	ldr	r3, [r3, #0]
 8106af8:	4a2e      	ldr	r2, [pc, #184]	; (8106bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8106afa:	4293      	cmp	r3, r2
 8106afc:	d004      	beq.n	8106b08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	681b      	ldr	r3, [r3, #0]
 8106b02:	4a2d      	ldr	r2, [pc, #180]	; (8106bb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8106b04:	4293      	cmp	r3, r2
 8106b06:	d108      	bne.n	8106b1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8106b08:	68fb      	ldr	r3, [r7, #12]
 8106b0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8106b0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8106b10:	683b      	ldr	r3, [r7, #0]
 8106b12:	685b      	ldr	r3, [r3, #4]
 8106b14:	68fa      	ldr	r2, [r7, #12]
 8106b16:	4313      	orrs	r3, r2
 8106b18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8106b1a:	68fb      	ldr	r3, [r7, #12]
 8106b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106b20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8106b22:	683b      	ldr	r3, [r7, #0]
 8106b24:	681b      	ldr	r3, [r3, #0]
 8106b26:	68fa      	ldr	r2, [r7, #12]
 8106b28:	4313      	orrs	r3, r2
 8106b2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8106b2c:	687b      	ldr	r3, [r7, #4]
 8106b2e:	681b      	ldr	r3, [r3, #0]
 8106b30:	68fa      	ldr	r2, [r7, #12]
 8106b32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106b34:	687b      	ldr	r3, [r7, #4]
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	4a1e      	ldr	r2, [pc, #120]	; (8106bb4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8106b3a:	4293      	cmp	r3, r2
 8106b3c:	d01d      	beq.n	8106b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	681b      	ldr	r3, [r3, #0]
 8106b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106b46:	d018      	beq.n	8106b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	681b      	ldr	r3, [r3, #0]
 8106b4c:	4a1b      	ldr	r2, [pc, #108]	; (8106bbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8106b4e:	4293      	cmp	r3, r2
 8106b50:	d013      	beq.n	8106b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8106b52:	687b      	ldr	r3, [r7, #4]
 8106b54:	681b      	ldr	r3, [r3, #0]
 8106b56:	4a1a      	ldr	r2, [pc, #104]	; (8106bc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8106b58:	4293      	cmp	r3, r2
 8106b5a:	d00e      	beq.n	8106b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8106b5c:	687b      	ldr	r3, [r7, #4]
 8106b5e:	681b      	ldr	r3, [r3, #0]
 8106b60:	4a18      	ldr	r2, [pc, #96]	; (8106bc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8106b62:	4293      	cmp	r3, r2
 8106b64:	d009      	beq.n	8106b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8106b66:	687b      	ldr	r3, [r7, #4]
 8106b68:	681b      	ldr	r3, [r3, #0]
 8106b6a:	4a13      	ldr	r2, [pc, #76]	; (8106bb8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8106b6c:	4293      	cmp	r3, r2
 8106b6e:	d004      	beq.n	8106b7a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	681b      	ldr	r3, [r3, #0]
 8106b74:	4a14      	ldr	r2, [pc, #80]	; (8106bc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8106b76:	4293      	cmp	r3, r2
 8106b78:	d10c      	bne.n	8106b94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8106b7a:	68bb      	ldr	r3, [r7, #8]
 8106b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8106b82:	683b      	ldr	r3, [r7, #0]
 8106b84:	689b      	ldr	r3, [r3, #8]
 8106b86:	68ba      	ldr	r2, [r7, #8]
 8106b88:	4313      	orrs	r3, r2
 8106b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	681b      	ldr	r3, [r3, #0]
 8106b90:	68ba      	ldr	r2, [r7, #8]
 8106b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	2201      	movs	r2, #1
 8106b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106b9c:	687b      	ldr	r3, [r7, #4]
 8106b9e:	2200      	movs	r2, #0
 8106ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106ba4:	2300      	movs	r3, #0
}
 8106ba6:	4618      	mov	r0, r3
 8106ba8:	3714      	adds	r7, #20
 8106baa:	46bd      	mov	sp, r7
 8106bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106bb0:	4770      	bx	lr
 8106bb2:	bf00      	nop
 8106bb4:	40010000 	.word	0x40010000
 8106bb8:	40010400 	.word	0x40010400
 8106bbc:	40000400 	.word	0x40000400
 8106bc0:	40000800 	.word	0x40000800
 8106bc4:	40000c00 	.word	0x40000c00
 8106bc8:	40001800 	.word	0x40001800

08106bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8106bcc:	b480      	push	{r7}
 8106bce:	b085      	sub	sp, #20
 8106bd0:	af00      	add	r7, sp, #0
 8106bd2:	6078      	str	r0, [r7, #4]
 8106bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8106bd6:	2300      	movs	r3, #0
 8106bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106be0:	2b01      	cmp	r3, #1
 8106be2:	d101      	bne.n	8106be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8106be4:	2302      	movs	r3, #2
 8106be6:	e065      	b.n	8106cb4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	2201      	movs	r2, #1
 8106bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8106bf0:	68fb      	ldr	r3, [r7, #12]
 8106bf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8106bf6:	683b      	ldr	r3, [r7, #0]
 8106bf8:	68db      	ldr	r3, [r3, #12]
 8106bfa:	4313      	orrs	r3, r2
 8106bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8106bfe:	68fb      	ldr	r3, [r7, #12]
 8106c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8106c04:	683b      	ldr	r3, [r7, #0]
 8106c06:	689b      	ldr	r3, [r3, #8]
 8106c08:	4313      	orrs	r3, r2
 8106c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8106c0c:	68fb      	ldr	r3, [r7, #12]
 8106c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8106c12:	683b      	ldr	r3, [r7, #0]
 8106c14:	685b      	ldr	r3, [r3, #4]
 8106c16:	4313      	orrs	r3, r2
 8106c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8106c1a:	68fb      	ldr	r3, [r7, #12]
 8106c1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8106c20:	683b      	ldr	r3, [r7, #0]
 8106c22:	681b      	ldr	r3, [r3, #0]
 8106c24:	4313      	orrs	r3, r2
 8106c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8106c28:	68fb      	ldr	r3, [r7, #12]
 8106c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106c2e:	683b      	ldr	r3, [r7, #0]
 8106c30:	691b      	ldr	r3, [r3, #16]
 8106c32:	4313      	orrs	r3, r2
 8106c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8106c36:	68fb      	ldr	r3, [r7, #12]
 8106c38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8106c3c:	683b      	ldr	r3, [r7, #0]
 8106c3e:	695b      	ldr	r3, [r3, #20]
 8106c40:	4313      	orrs	r3, r2
 8106c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8106c44:	68fb      	ldr	r3, [r7, #12]
 8106c46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8106c4a:	683b      	ldr	r3, [r7, #0]
 8106c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c4e:	4313      	orrs	r3, r2
 8106c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8106c52:	68fb      	ldr	r3, [r7, #12]
 8106c54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8106c58:	683b      	ldr	r3, [r7, #0]
 8106c5a:	699b      	ldr	r3, [r3, #24]
 8106c5c:	041b      	lsls	r3, r3, #16
 8106c5e:	4313      	orrs	r3, r2
 8106c60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	681b      	ldr	r3, [r3, #0]
 8106c66:	4a16      	ldr	r2, [pc, #88]	; (8106cc0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8106c68:	4293      	cmp	r3, r2
 8106c6a:	d004      	beq.n	8106c76 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	681b      	ldr	r3, [r3, #0]
 8106c70:	4a14      	ldr	r2, [pc, #80]	; (8106cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8106c72:	4293      	cmp	r3, r2
 8106c74:	d115      	bne.n	8106ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8106c76:	68fb      	ldr	r3, [r7, #12]
 8106c78:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8106c7c:	683b      	ldr	r3, [r7, #0]
 8106c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c80:	051b      	lsls	r3, r3, #20
 8106c82:	4313      	orrs	r3, r2
 8106c84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8106c86:	68fb      	ldr	r3, [r7, #12]
 8106c88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8106c8c:	683b      	ldr	r3, [r7, #0]
 8106c8e:	69db      	ldr	r3, [r3, #28]
 8106c90:	4313      	orrs	r3, r2
 8106c92:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8106c94:	68fb      	ldr	r3, [r7, #12]
 8106c96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8106c9a:	683b      	ldr	r3, [r7, #0]
 8106c9c:	6a1b      	ldr	r3, [r3, #32]
 8106c9e:	4313      	orrs	r3, r2
 8106ca0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8106ca2:	687b      	ldr	r3, [r7, #4]
 8106ca4:	681b      	ldr	r3, [r3, #0]
 8106ca6:	68fa      	ldr	r2, [r7, #12]
 8106ca8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	2200      	movs	r2, #0
 8106cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106cb2:	2300      	movs	r3, #0
}
 8106cb4:	4618      	mov	r0, r3
 8106cb6:	3714      	adds	r7, #20
 8106cb8:	46bd      	mov	sp, r7
 8106cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cbe:	4770      	bx	lr
 8106cc0:	40010000 	.word	0x40010000
 8106cc4:	40010400 	.word	0x40010400

08106cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8106cc8:	b480      	push	{r7}
 8106cca:	b083      	sub	sp, #12
 8106ccc:	af00      	add	r7, sp, #0
 8106cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8106cd0:	bf00      	nop
 8106cd2:	370c      	adds	r7, #12
 8106cd4:	46bd      	mov	sp, r7
 8106cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cda:	4770      	bx	lr

08106cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8106cdc:	b480      	push	{r7}
 8106cde:	b083      	sub	sp, #12
 8106ce0:	af00      	add	r7, sp, #0
 8106ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106ce4:	bf00      	nop
 8106ce6:	370c      	adds	r7, #12
 8106ce8:	46bd      	mov	sp, r7
 8106cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cee:	4770      	bx	lr

08106cf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106cf0:	b480      	push	{r7}
 8106cf2:	b083      	sub	sp, #12
 8106cf4:	af00      	add	r7, sp, #0
 8106cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106cf8:	bf00      	nop
 8106cfa:	370c      	adds	r7, #12
 8106cfc:	46bd      	mov	sp, r7
 8106cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d02:	4770      	bx	lr

08106d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106d04:	b580      	push	{r7, lr}
 8106d06:	b082      	sub	sp, #8
 8106d08:	af00      	add	r7, sp, #0
 8106d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	2b00      	cmp	r3, #0
 8106d10:	d101      	bne.n	8106d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8106d12:	2301      	movs	r3, #1
 8106d14:	e042      	b.n	8106d9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106d1c:	2b00      	cmp	r3, #0
 8106d1e:	d106      	bne.n	8106d2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	2200      	movs	r2, #0
 8106d24:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106d28:	6878      	ldr	r0, [r7, #4]
 8106d2a:	f7fa ff81 	bl	8101c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	2224      	movs	r2, #36	; 0x24
 8106d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	681b      	ldr	r3, [r3, #0]
 8106d3a:	681a      	ldr	r2, [r3, #0]
 8106d3c:	687b      	ldr	r3, [r7, #4]
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	f022 0201 	bic.w	r2, r2, #1
 8106d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106d46:	6878      	ldr	r0, [r7, #4]
 8106d48:	f000 fac8 	bl	81072dc <UART_SetConfig>
 8106d4c:	4603      	mov	r3, r0
 8106d4e:	2b01      	cmp	r3, #1
 8106d50:	d101      	bne.n	8106d56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8106d52:	2301      	movs	r3, #1
 8106d54:	e022      	b.n	8106d9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106d56:	687b      	ldr	r3, [r7, #4]
 8106d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106d5a:	2b00      	cmp	r3, #0
 8106d5c:	d002      	beq.n	8106d64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8106d5e:	6878      	ldr	r0, [r7, #4]
 8106d60:	f001 f86c 	bl	8107e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106d64:	687b      	ldr	r3, [r7, #4]
 8106d66:	681b      	ldr	r3, [r3, #0]
 8106d68:	685a      	ldr	r2, [r3, #4]
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	681b      	ldr	r3, [r3, #0]
 8106d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8106d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	681b      	ldr	r3, [r3, #0]
 8106d78:	689a      	ldr	r2, [r3, #8]
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	681b      	ldr	r3, [r3, #0]
 8106d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8106d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8106d84:	687b      	ldr	r3, [r7, #4]
 8106d86:	681b      	ldr	r3, [r3, #0]
 8106d88:	681a      	ldr	r2, [r3, #0]
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	f042 0201 	orr.w	r2, r2, #1
 8106d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8106d94:	6878      	ldr	r0, [r7, #4]
 8106d96:	f001 f8f3 	bl	8107f80 <UART_CheckIdleState>
 8106d9a:	4603      	mov	r3, r0
}
 8106d9c:	4618      	mov	r0, r3
 8106d9e:	3708      	adds	r7, #8
 8106da0:	46bd      	mov	sp, r7
 8106da2:	bd80      	pop	{r7, pc}

08106da4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8106da4:	b580      	push	{r7, lr}
 8106da6:	b084      	sub	sp, #16
 8106da8:	af00      	add	r7, sp, #0
 8106daa:	60f8      	str	r0, [r7, #12]
 8106dac:	60b9      	str	r1, [r7, #8]
 8106dae:	4613      	mov	r3, r2
 8106db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8106db2:	68fb      	ldr	r3, [r7, #12]
 8106db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8106db8:	2b20      	cmp	r3, #32
 8106dba:	d168      	bne.n	8106e8e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8106dbc:	68bb      	ldr	r3, [r7, #8]
 8106dbe:	2b00      	cmp	r3, #0
 8106dc0:	d002      	beq.n	8106dc8 <HAL_UART_Transmit_DMA+0x24>
 8106dc2:	88fb      	ldrh	r3, [r7, #6]
 8106dc4:	2b00      	cmp	r3, #0
 8106dc6:	d101      	bne.n	8106dcc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8106dc8:	2301      	movs	r3, #1
 8106dca:	e061      	b.n	8106e90 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8106dcc:	68fb      	ldr	r3, [r7, #12]
 8106dce:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8106dd2:	2b01      	cmp	r3, #1
 8106dd4:	d101      	bne.n	8106dda <HAL_UART_Transmit_DMA+0x36>
 8106dd6:	2302      	movs	r3, #2
 8106dd8:	e05a      	b.n	8106e90 <HAL_UART_Transmit_DMA+0xec>
 8106dda:	68fb      	ldr	r3, [r7, #12]
 8106ddc:	2201      	movs	r2, #1
 8106dde:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8106de2:	68fb      	ldr	r3, [r7, #12]
 8106de4:	68ba      	ldr	r2, [r7, #8]
 8106de6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8106de8:	68fb      	ldr	r3, [r7, #12]
 8106dea:	88fa      	ldrh	r2, [r7, #6]
 8106dec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8106df0:	68fb      	ldr	r3, [r7, #12]
 8106df2:	88fa      	ldrh	r2, [r7, #6]
 8106df4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106df8:	68fb      	ldr	r3, [r7, #12]
 8106dfa:	2200      	movs	r2, #0
 8106dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8106e00:	68fb      	ldr	r3, [r7, #12]
 8106e02:	2221      	movs	r2, #33	; 0x21
 8106e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8106e08:	68fb      	ldr	r3, [r7, #12]
 8106e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e0c:	2b00      	cmp	r3, #0
 8106e0e:	d02c      	beq.n	8106e6a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8106e10:	68fb      	ldr	r3, [r7, #12]
 8106e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e14:	4a20      	ldr	r2, [pc, #128]	; (8106e98 <HAL_UART_Transmit_DMA+0xf4>)
 8106e16:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8106e18:	68fb      	ldr	r3, [r7, #12]
 8106e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e1c:	4a1f      	ldr	r2, [pc, #124]	; (8106e9c <HAL_UART_Transmit_DMA+0xf8>)
 8106e1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8106e20:	68fb      	ldr	r3, [r7, #12]
 8106e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e24:	4a1e      	ldr	r2, [pc, #120]	; (8106ea0 <HAL_UART_Transmit_DMA+0xfc>)
 8106e26:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8106e28:	68fb      	ldr	r3, [r7, #12]
 8106e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e2c:	2200      	movs	r2, #0
 8106e2e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8106e30:	68fb      	ldr	r3, [r7, #12]
 8106e32:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8106e34:	68fb      	ldr	r3, [r7, #12]
 8106e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106e38:	4619      	mov	r1, r3
 8106e3a:	68fb      	ldr	r3, [r7, #12]
 8106e3c:	681b      	ldr	r3, [r3, #0]
 8106e3e:	3328      	adds	r3, #40	; 0x28
 8106e40:	461a      	mov	r2, r3
 8106e42:	88fb      	ldrh	r3, [r7, #6]
 8106e44:	f7fb fcfc 	bl	8102840 <HAL_DMA_Start_IT>
 8106e48:	4603      	mov	r3, r0
 8106e4a:	2b00      	cmp	r3, #0
 8106e4c:	d00d      	beq.n	8106e6a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8106e4e:	68fb      	ldr	r3, [r7, #12]
 8106e50:	2210      	movs	r2, #16
 8106e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106e56:	68fb      	ldr	r3, [r7, #12]
 8106e58:	2200      	movs	r2, #0
 8106e5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8106e5e:	68fb      	ldr	r3, [r7, #12]
 8106e60:	2220      	movs	r2, #32
 8106e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8106e66:	2301      	movs	r3, #1
 8106e68:	e012      	b.n	8106e90 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8106e6a:	68fb      	ldr	r3, [r7, #12]
 8106e6c:	681b      	ldr	r3, [r3, #0]
 8106e6e:	2240      	movs	r2, #64	; 0x40
 8106e70:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8106e72:	68fb      	ldr	r3, [r7, #12]
 8106e74:	2200      	movs	r2, #0
 8106e76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8106e7a:	68fb      	ldr	r3, [r7, #12]
 8106e7c:	681b      	ldr	r3, [r3, #0]
 8106e7e:	689a      	ldr	r2, [r3, #8]
 8106e80:	68fb      	ldr	r3, [r7, #12]
 8106e82:	681b      	ldr	r3, [r3, #0]
 8106e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8106e88:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8106e8a:	2300      	movs	r3, #0
 8106e8c:	e000      	b.n	8106e90 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8106e8e:	2302      	movs	r3, #2
  }
}
 8106e90:	4618      	mov	r0, r3
 8106e92:	3710      	adds	r7, #16
 8106e94:	46bd      	mov	sp, r7
 8106e96:	bd80      	pop	{r7, pc}
 8106e98:	08108193 	.word	0x08108193
 8106e9c:	081081e3 	.word	0x081081e3
 8106ea0:	08108281 	.word	0x08108281

08106ea4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8106ea4:	b580      	push	{r7, lr}
 8106ea6:	b084      	sub	sp, #16
 8106ea8:	af00      	add	r7, sp, #0
 8106eaa:	60f8      	str	r0, [r7, #12]
 8106eac:	60b9      	str	r1, [r7, #8]
 8106eae:	4613      	mov	r3, r2
 8106eb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8106eb2:	68fb      	ldr	r3, [r7, #12]
 8106eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106eb8:	2b20      	cmp	r3, #32
 8106eba:	d170      	bne.n	8106f9e <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 8106ebc:	68bb      	ldr	r3, [r7, #8]
 8106ebe:	2b00      	cmp	r3, #0
 8106ec0:	d002      	beq.n	8106ec8 <HAL_UART_Receive_DMA+0x24>
 8106ec2:	88fb      	ldrh	r3, [r7, #6]
 8106ec4:	2b00      	cmp	r3, #0
 8106ec6:	d101      	bne.n	8106ecc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8106ec8:	2301      	movs	r3, #1
 8106eca:	e069      	b.n	8106fa0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 8106ecc:	68fb      	ldr	r3, [r7, #12]
 8106ece:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8106ed2:	2b01      	cmp	r3, #1
 8106ed4:	d101      	bne.n	8106eda <HAL_UART_Receive_DMA+0x36>
 8106ed6:	2302      	movs	r3, #2
 8106ed8:	e062      	b.n	8106fa0 <HAL_UART_Receive_DMA+0xfc>
 8106eda:	68fb      	ldr	r3, [r7, #12]
 8106edc:	2201      	movs	r2, #1
 8106ede:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8106ee2:	68fb      	ldr	r3, [r7, #12]
 8106ee4:	68ba      	ldr	r2, [r7, #8]
 8106ee6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8106ee8:	68fb      	ldr	r3, [r7, #12]
 8106eea:	88fa      	ldrh	r2, [r7, #6]
 8106eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106ef0:	68fb      	ldr	r3, [r7, #12]
 8106ef2:	2200      	movs	r2, #0
 8106ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8106ef8:	68fb      	ldr	r3, [r7, #12]
 8106efa:	2222      	movs	r2, #34	; 0x22
 8106efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8106f00:	68fb      	ldr	r3, [r7, #12]
 8106f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106f04:	2b00      	cmp	r3, #0
 8106f06:	d02c      	beq.n	8106f62 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8106f08:	68fb      	ldr	r3, [r7, #12]
 8106f0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106f0c:	4a26      	ldr	r2, [pc, #152]	; (8106fa8 <HAL_UART_Receive_DMA+0x104>)
 8106f0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8106f10:	68fb      	ldr	r3, [r7, #12]
 8106f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106f14:	4a25      	ldr	r2, [pc, #148]	; (8106fac <HAL_UART_Receive_DMA+0x108>)
 8106f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8106f18:	68fb      	ldr	r3, [r7, #12]
 8106f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106f1c:	4a24      	ldr	r2, [pc, #144]	; (8106fb0 <HAL_UART_Receive_DMA+0x10c>)
 8106f1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8106f20:	68fb      	ldr	r3, [r7, #12]
 8106f22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8106f24:	2200      	movs	r2, #0
 8106f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8106f28:	68fb      	ldr	r3, [r7, #12]
 8106f2a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8106f2c:	68fb      	ldr	r3, [r7, #12]
 8106f2e:	681b      	ldr	r3, [r3, #0]
 8106f30:	3324      	adds	r3, #36	; 0x24
 8106f32:	4619      	mov	r1, r3
 8106f34:	68fb      	ldr	r3, [r7, #12]
 8106f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106f38:	461a      	mov	r2, r3
 8106f3a:	88fb      	ldrh	r3, [r7, #6]
 8106f3c:	f7fb fc80 	bl	8102840 <HAL_DMA_Start_IT>
 8106f40:	4603      	mov	r3, r0
 8106f42:	2b00      	cmp	r3, #0
 8106f44:	d00d      	beq.n	8106f62 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8106f46:	68fb      	ldr	r3, [r7, #12]
 8106f48:	2210      	movs	r2, #16
 8106f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106f4e:	68fb      	ldr	r3, [r7, #12]
 8106f50:	2200      	movs	r2, #0
 8106f52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8106f56:	68fb      	ldr	r3, [r7, #12]
 8106f58:	2220      	movs	r2, #32
 8106f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8106f5e:	2301      	movs	r3, #1
 8106f60:	e01e      	b.n	8106fa0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 8106f62:	68fb      	ldr	r3, [r7, #12]
 8106f64:	2200      	movs	r2, #0
 8106f66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8106f6a:	68fb      	ldr	r3, [r7, #12]
 8106f6c:	681b      	ldr	r3, [r3, #0]
 8106f6e:	681a      	ldr	r2, [r3, #0]
 8106f70:	68fb      	ldr	r3, [r7, #12]
 8106f72:	681b      	ldr	r3, [r3, #0]
 8106f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106f78:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106f7a:	68fb      	ldr	r3, [r7, #12]
 8106f7c:	681b      	ldr	r3, [r3, #0]
 8106f7e:	689a      	ldr	r2, [r3, #8]
 8106f80:	68fb      	ldr	r3, [r7, #12]
 8106f82:	681b      	ldr	r3, [r3, #0]
 8106f84:	f042 0201 	orr.w	r2, r2, #1
 8106f88:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8106f8a:	68fb      	ldr	r3, [r7, #12]
 8106f8c:	681b      	ldr	r3, [r3, #0]
 8106f8e:	689a      	ldr	r2, [r3, #8]
 8106f90:	68fb      	ldr	r3, [r7, #12]
 8106f92:	681b      	ldr	r3, [r3, #0]
 8106f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106f98:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8106f9a:	2300      	movs	r3, #0
 8106f9c:	e000      	b.n	8106fa0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 8106f9e:	2302      	movs	r3, #2
  }
}
 8106fa0:	4618      	mov	r0, r3
 8106fa2:	3710      	adds	r7, #16
 8106fa4:	46bd      	mov	sp, r7
 8106fa6:	bd80      	pop	{r7, pc}
 8106fa8:	081081ff 	.word	0x081081ff
 8106fac:	08108265 	.word	0x08108265
 8106fb0:	08108281 	.word	0x08108281

08106fb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8106fb4:	b580      	push	{r7, lr}
 8106fb6:	b088      	sub	sp, #32
 8106fb8:	af00      	add	r7, sp, #0
 8106fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	681b      	ldr	r3, [r3, #0]
 8106fc0:	69db      	ldr	r3, [r3, #28]
 8106fc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8106fc4:	687b      	ldr	r3, [r7, #4]
 8106fc6:	681b      	ldr	r3, [r3, #0]
 8106fc8:	681b      	ldr	r3, [r3, #0]
 8106fca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	689b      	ldr	r3, [r3, #8]
 8106fd2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8106fd4:	69fa      	ldr	r2, [r7, #28]
 8106fd6:	f640 030f 	movw	r3, #2063	; 0x80f
 8106fda:	4013      	ands	r3, r2
 8106fdc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8106fde:	693b      	ldr	r3, [r7, #16]
 8106fe0:	2b00      	cmp	r3, #0
 8106fe2:	d118      	bne.n	8107016 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8106fe4:	69fb      	ldr	r3, [r7, #28]
 8106fe6:	f003 0320 	and.w	r3, r3, #32
 8106fea:	2b00      	cmp	r3, #0
 8106fec:	d013      	beq.n	8107016 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8106fee:	69bb      	ldr	r3, [r7, #24]
 8106ff0:	f003 0320 	and.w	r3, r3, #32
 8106ff4:	2b00      	cmp	r3, #0
 8106ff6:	d104      	bne.n	8107002 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8106ff8:	697b      	ldr	r3, [r7, #20]
 8106ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8106ffe:	2b00      	cmp	r3, #0
 8107000:	d009      	beq.n	8107016 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107006:	2b00      	cmp	r3, #0
 8107008:	f000 8145 	beq.w	8107296 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107010:	6878      	ldr	r0, [r7, #4]
 8107012:	4798      	blx	r3
      }
      return;
 8107014:	e13f      	b.n	8107296 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8107016:	693b      	ldr	r3, [r7, #16]
 8107018:	2b00      	cmp	r3, #0
 810701a:	f000 80e8 	beq.w	81071ee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810701e:	697a      	ldr	r2, [r7, #20]
 8107020:	4ba1      	ldr	r3, [pc, #644]	; (81072a8 <HAL_UART_IRQHandler+0x2f4>)
 8107022:	4013      	ands	r3, r2
 8107024:	2b00      	cmp	r3, #0
 8107026:	d105      	bne.n	8107034 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8107028:	69ba      	ldr	r2, [r7, #24]
 810702a:	4ba0      	ldr	r3, [pc, #640]	; (81072ac <HAL_UART_IRQHandler+0x2f8>)
 810702c:	4013      	ands	r3, r2
 810702e:	2b00      	cmp	r3, #0
 8107030:	f000 80dd 	beq.w	81071ee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8107034:	69fb      	ldr	r3, [r7, #28]
 8107036:	f003 0301 	and.w	r3, r3, #1
 810703a:	2b00      	cmp	r3, #0
 810703c:	d010      	beq.n	8107060 <HAL_UART_IRQHandler+0xac>
 810703e:	69bb      	ldr	r3, [r7, #24]
 8107040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8107044:	2b00      	cmp	r3, #0
 8107046:	d00b      	beq.n	8107060 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	2201      	movs	r2, #1
 810704e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107056:	f043 0201 	orr.w	r2, r3, #1
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8107060:	69fb      	ldr	r3, [r7, #28]
 8107062:	f003 0302 	and.w	r3, r3, #2
 8107066:	2b00      	cmp	r3, #0
 8107068:	d010      	beq.n	810708c <HAL_UART_IRQHandler+0xd8>
 810706a:	697b      	ldr	r3, [r7, #20]
 810706c:	f003 0301 	and.w	r3, r3, #1
 8107070:	2b00      	cmp	r3, #0
 8107072:	d00b      	beq.n	810708c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	681b      	ldr	r3, [r3, #0]
 8107078:	2202      	movs	r2, #2
 810707a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107082:	f043 0204 	orr.w	r2, r3, #4
 8107086:	687b      	ldr	r3, [r7, #4]
 8107088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 810708c:	69fb      	ldr	r3, [r7, #28]
 810708e:	f003 0304 	and.w	r3, r3, #4
 8107092:	2b00      	cmp	r3, #0
 8107094:	d010      	beq.n	81070b8 <HAL_UART_IRQHandler+0x104>
 8107096:	697b      	ldr	r3, [r7, #20]
 8107098:	f003 0301 	and.w	r3, r3, #1
 810709c:	2b00      	cmp	r3, #0
 810709e:	d00b      	beq.n	81070b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 81070a0:	687b      	ldr	r3, [r7, #4]
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	2204      	movs	r2, #4
 81070a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81070ae:	f043 0202 	orr.w	r2, r3, #2
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 81070b8:	69fb      	ldr	r3, [r7, #28]
 81070ba:	f003 0308 	and.w	r3, r3, #8
 81070be:	2b00      	cmp	r3, #0
 81070c0:	d015      	beq.n	81070ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81070c2:	69bb      	ldr	r3, [r7, #24]
 81070c4:	f003 0320 	and.w	r3, r3, #32
 81070c8:	2b00      	cmp	r3, #0
 81070ca:	d104      	bne.n	81070d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 81070cc:	697a      	ldr	r2, [r7, #20]
 81070ce:	4b76      	ldr	r3, [pc, #472]	; (81072a8 <HAL_UART_IRQHandler+0x2f4>)
 81070d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 81070d2:	2b00      	cmp	r3, #0
 81070d4:	d00b      	beq.n	81070ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81070d6:	687b      	ldr	r3, [r7, #4]
 81070d8:	681b      	ldr	r3, [r3, #0]
 81070da:	2208      	movs	r2, #8
 81070dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81070e4:	f043 0208 	orr.w	r2, r3, #8
 81070e8:	687b      	ldr	r3, [r7, #4]
 81070ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 81070ee:	69fb      	ldr	r3, [r7, #28]
 81070f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81070f4:	2b00      	cmp	r3, #0
 81070f6:	d011      	beq.n	810711c <HAL_UART_IRQHandler+0x168>
 81070f8:	69bb      	ldr	r3, [r7, #24]
 81070fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 81070fe:	2b00      	cmp	r3, #0
 8107100:	d00c      	beq.n	810711c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	681b      	ldr	r3, [r3, #0]
 8107106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810710a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 810710c:	687b      	ldr	r3, [r7, #4]
 810710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107112:	f043 0220 	orr.w	r2, r3, #32
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 810711c:	687b      	ldr	r3, [r7, #4]
 810711e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107122:	2b00      	cmp	r3, #0
 8107124:	f000 80b9 	beq.w	810729a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8107128:	69fb      	ldr	r3, [r7, #28]
 810712a:	f003 0320 	and.w	r3, r3, #32
 810712e:	2b00      	cmp	r3, #0
 8107130:	d011      	beq.n	8107156 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8107132:	69bb      	ldr	r3, [r7, #24]
 8107134:	f003 0320 	and.w	r3, r3, #32
 8107138:	2b00      	cmp	r3, #0
 810713a:	d104      	bne.n	8107146 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 810713c:	697b      	ldr	r3, [r7, #20]
 810713e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107142:	2b00      	cmp	r3, #0
 8107144:	d007      	beq.n	8107156 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810714a:	2b00      	cmp	r3, #0
 810714c:	d003      	beq.n	8107156 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107152:	6878      	ldr	r0, [r7, #4]
 8107154:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810715c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	681b      	ldr	r3, [r3, #0]
 8107162:	689b      	ldr	r3, [r3, #8]
 8107164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107168:	2b40      	cmp	r3, #64	; 0x40
 810716a:	d004      	beq.n	8107176 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 810716c:	68fb      	ldr	r3, [r7, #12]
 810716e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8107172:	2b00      	cmp	r3, #0
 8107174:	d031      	beq.n	81071da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8107176:	6878      	ldr	r0, [r7, #4]
 8107178:	f000 ffe8 	bl	810814c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810717c:	687b      	ldr	r3, [r7, #4]
 810717e:	681b      	ldr	r3, [r3, #0]
 8107180:	689b      	ldr	r3, [r3, #8]
 8107182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107186:	2b40      	cmp	r3, #64	; 0x40
 8107188:	d123      	bne.n	81071d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	681b      	ldr	r3, [r3, #0]
 810718e:	689a      	ldr	r2, [r3, #8]
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	681b      	ldr	r3, [r3, #0]
 8107194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107198:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810719a:	687b      	ldr	r3, [r7, #4]
 810719c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810719e:	2b00      	cmp	r3, #0
 81071a0:	d013      	beq.n	81071ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 81071a2:	687b      	ldr	r3, [r7, #4]
 81071a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81071a6:	4a42      	ldr	r2, [pc, #264]	; (81072b0 <HAL_UART_IRQHandler+0x2fc>)
 81071a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 81071aa:	687b      	ldr	r3, [r7, #4]
 81071ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81071ae:	4618      	mov	r0, r3
 81071b0:	f7fb fdb0 	bl	8102d14 <HAL_DMA_Abort_IT>
 81071b4:	4603      	mov	r3, r0
 81071b6:	2b00      	cmp	r3, #0
 81071b8:	d017      	beq.n	81071ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81071be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81071c0:	687a      	ldr	r2, [r7, #4]
 81071c2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 81071c4:	4610      	mov	r0, r2
 81071c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81071c8:	e00f      	b.n	81071ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 81071ca:	6878      	ldr	r0, [r7, #4]
 81071cc:	f7fa f9e4 	bl	8101598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81071d0:	e00b      	b.n	81071ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 81071d2:	6878      	ldr	r0, [r7, #4]
 81071d4:	f7fa f9e0 	bl	8101598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81071d8:	e007      	b.n	81071ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 81071da:	6878      	ldr	r0, [r7, #4]
 81071dc:	f7fa f9dc 	bl	8101598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	2200      	movs	r2, #0
 81071e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 81071e8:	e057      	b.n	810729a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81071ea:	bf00      	nop
    return;
 81071ec:	e055      	b.n	810729a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81071ee:	69fb      	ldr	r3, [r7, #28]
 81071f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81071f4:	2b00      	cmp	r3, #0
 81071f6:	d00d      	beq.n	8107214 <HAL_UART_IRQHandler+0x260>
 81071f8:	697b      	ldr	r3, [r7, #20]
 81071fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81071fe:	2b00      	cmp	r3, #0
 8107200:	d008      	beq.n	8107214 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8107202:	687b      	ldr	r3, [r7, #4]
 8107204:	681b      	ldr	r3, [r3, #0]
 8107206:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 810720a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810720c:	6878      	ldr	r0, [r7, #4]
 810720e:	f001 f8a7 	bl	8108360 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8107212:	e045      	b.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8107214:	69fb      	ldr	r3, [r7, #28]
 8107216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810721a:	2b00      	cmp	r3, #0
 810721c:	d012      	beq.n	8107244 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810721e:	69bb      	ldr	r3, [r7, #24]
 8107220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107224:	2b00      	cmp	r3, #0
 8107226:	d104      	bne.n	8107232 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8107228:	697b      	ldr	r3, [r7, #20]
 810722a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810722e:	2b00      	cmp	r3, #0
 8107230:	d008      	beq.n	8107244 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8107232:	687b      	ldr	r3, [r7, #4]
 8107234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8107236:	2b00      	cmp	r3, #0
 8107238:	d031      	beq.n	810729e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 810723a:	687b      	ldr	r3, [r7, #4]
 810723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810723e:	6878      	ldr	r0, [r7, #4]
 8107240:	4798      	blx	r3
    }
    return;
 8107242:	e02c      	b.n	810729e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8107244:	69fb      	ldr	r3, [r7, #28]
 8107246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810724a:	2b00      	cmp	r3, #0
 810724c:	d008      	beq.n	8107260 <HAL_UART_IRQHandler+0x2ac>
 810724e:	69bb      	ldr	r3, [r7, #24]
 8107250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107254:	2b00      	cmp	r3, #0
 8107256:	d003      	beq.n	8107260 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8107258:	6878      	ldr	r0, [r7, #4]
 810725a:	f001 f867 	bl	810832c <UART_EndTransmit_IT>
    return;
 810725e:	e01f      	b.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8107260:	69fb      	ldr	r3, [r7, #28]
 8107262:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8107266:	2b00      	cmp	r3, #0
 8107268:	d008      	beq.n	810727c <HAL_UART_IRQHandler+0x2c8>
 810726a:	69bb      	ldr	r3, [r7, #24]
 810726c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8107270:	2b00      	cmp	r3, #0
 8107272:	d003      	beq.n	810727c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8107274:	6878      	ldr	r0, [r7, #4]
 8107276:	f001 f887 	bl	8108388 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810727a:	e011      	b.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810727c:	69fb      	ldr	r3, [r7, #28]
 810727e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8107282:	2b00      	cmp	r3, #0
 8107284:	d00c      	beq.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
 8107286:	69bb      	ldr	r3, [r7, #24]
 8107288:	2b00      	cmp	r3, #0
 810728a:	da09      	bge.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810728c:	6878      	ldr	r0, [r7, #4]
 810728e:	f001 f871 	bl	8108374 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8107292:	bf00      	nop
 8107294:	e004      	b.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8107296:	bf00      	nop
 8107298:	e002      	b.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
    return;
 810729a:	bf00      	nop
 810729c:	e000      	b.n	81072a0 <HAL_UART_IRQHandler+0x2ec>
    return;
 810729e:	bf00      	nop
  }
}
 81072a0:	3720      	adds	r7, #32
 81072a2:	46bd      	mov	sp, r7
 81072a4:	bd80      	pop	{r7, pc}
 81072a6:	bf00      	nop
 81072a8:	10000001 	.word	0x10000001
 81072ac:	04000120 	.word	0x04000120
 81072b0:	08108301 	.word	0x08108301

081072b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 81072b4:	b480      	push	{r7}
 81072b6:	b083      	sub	sp, #12
 81072b8:	af00      	add	r7, sp, #0
 81072ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 81072bc:	bf00      	nop
 81072be:	370c      	adds	r7, #12
 81072c0:	46bd      	mov	sp, r7
 81072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072c6:	4770      	bx	lr

081072c8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 81072c8:	b480      	push	{r7}
 81072ca:	b083      	sub	sp, #12
 81072cc:	af00      	add	r7, sp, #0
 81072ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 81072d0:	bf00      	nop
 81072d2:	370c      	adds	r7, #12
 81072d4:	46bd      	mov	sp, r7
 81072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072da:	4770      	bx	lr

081072dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81072dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 81072e0:	b08e      	sub	sp, #56	; 0x38
 81072e2:	af00      	add	r7, sp, #0
 81072e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81072e6:	2300      	movs	r3, #0
 81072e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81072ec:	687b      	ldr	r3, [r7, #4]
 81072ee:	689a      	ldr	r2, [r3, #8]
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	691b      	ldr	r3, [r3, #16]
 81072f4:	431a      	orrs	r2, r3
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	695b      	ldr	r3, [r3, #20]
 81072fa:	431a      	orrs	r2, r3
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	69db      	ldr	r3, [r3, #28]
 8107300:	4313      	orrs	r3, r2
 8107302:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8107304:	687b      	ldr	r3, [r7, #4]
 8107306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107308:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810730a:	4313      	orrs	r3, r2
 810730c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	681b      	ldr	r3, [r3, #0]
 8107312:	681a      	ldr	r2, [r3, #0]
 8107314:	4bc2      	ldr	r3, [pc, #776]	; (8107620 <UART_SetConfig+0x344>)
 8107316:	4013      	ands	r3, r2
 8107318:	687a      	ldr	r2, [r7, #4]
 810731a:	6812      	ldr	r2, [r2, #0]
 810731c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810731e:	430b      	orrs	r3, r1
 8107320:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107322:	687b      	ldr	r3, [r7, #4]
 8107324:	681b      	ldr	r3, [r3, #0]
 8107326:	685b      	ldr	r3, [r3, #4]
 8107328:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	68da      	ldr	r2, [r3, #12]
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	681b      	ldr	r3, [r3, #0]
 8107334:	430a      	orrs	r2, r1
 8107336:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	699b      	ldr	r3, [r3, #24]
 810733c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	4ab8      	ldr	r2, [pc, #736]	; (8107624 <UART_SetConfig+0x348>)
 8107344:	4293      	cmp	r3, r2
 8107346:	d004      	beq.n	8107352 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107348:	687b      	ldr	r3, [r7, #4]
 810734a:	6a1b      	ldr	r3, [r3, #32]
 810734c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810734e:	4313      	orrs	r3, r2
 8107350:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	681b      	ldr	r3, [r3, #0]
 8107356:	689b      	ldr	r3, [r3, #8]
 8107358:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810735c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8107360:	687a      	ldr	r2, [r7, #4]
 8107362:	6812      	ldr	r2, [r2, #0]
 8107364:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8107366:	430b      	orrs	r3, r1
 8107368:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810736a:	687b      	ldr	r3, [r7, #4]
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8107370:	f023 010f 	bic.w	r1, r3, #15
 8107374:	687b      	ldr	r3, [r7, #4]
 8107376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	681b      	ldr	r3, [r3, #0]
 810737c:	430a      	orrs	r2, r1
 810737e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	681b      	ldr	r3, [r3, #0]
 8107384:	4aa8      	ldr	r2, [pc, #672]	; (8107628 <UART_SetConfig+0x34c>)
 8107386:	4293      	cmp	r3, r2
 8107388:	d177      	bne.n	810747a <UART_SetConfig+0x19e>
 810738a:	4ba8      	ldr	r3, [pc, #672]	; (810762c <UART_SetConfig+0x350>)
 810738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810738e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8107392:	2b28      	cmp	r3, #40	; 0x28
 8107394:	d86c      	bhi.n	8107470 <UART_SetConfig+0x194>
 8107396:	a201      	add	r2, pc, #4	; (adr r2, 810739c <UART_SetConfig+0xc0>)
 8107398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810739c:	08107441 	.word	0x08107441
 81073a0:	08107471 	.word	0x08107471
 81073a4:	08107471 	.word	0x08107471
 81073a8:	08107471 	.word	0x08107471
 81073ac:	08107471 	.word	0x08107471
 81073b0:	08107471 	.word	0x08107471
 81073b4:	08107471 	.word	0x08107471
 81073b8:	08107471 	.word	0x08107471
 81073bc:	08107449 	.word	0x08107449
 81073c0:	08107471 	.word	0x08107471
 81073c4:	08107471 	.word	0x08107471
 81073c8:	08107471 	.word	0x08107471
 81073cc:	08107471 	.word	0x08107471
 81073d0:	08107471 	.word	0x08107471
 81073d4:	08107471 	.word	0x08107471
 81073d8:	08107471 	.word	0x08107471
 81073dc:	08107451 	.word	0x08107451
 81073e0:	08107471 	.word	0x08107471
 81073e4:	08107471 	.word	0x08107471
 81073e8:	08107471 	.word	0x08107471
 81073ec:	08107471 	.word	0x08107471
 81073f0:	08107471 	.word	0x08107471
 81073f4:	08107471 	.word	0x08107471
 81073f8:	08107471 	.word	0x08107471
 81073fc:	08107459 	.word	0x08107459
 8107400:	08107471 	.word	0x08107471
 8107404:	08107471 	.word	0x08107471
 8107408:	08107471 	.word	0x08107471
 810740c:	08107471 	.word	0x08107471
 8107410:	08107471 	.word	0x08107471
 8107414:	08107471 	.word	0x08107471
 8107418:	08107471 	.word	0x08107471
 810741c:	08107461 	.word	0x08107461
 8107420:	08107471 	.word	0x08107471
 8107424:	08107471 	.word	0x08107471
 8107428:	08107471 	.word	0x08107471
 810742c:	08107471 	.word	0x08107471
 8107430:	08107471 	.word	0x08107471
 8107434:	08107471 	.word	0x08107471
 8107438:	08107471 	.word	0x08107471
 810743c:	08107469 	.word	0x08107469
 8107440:	2301      	movs	r3, #1
 8107442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107446:	e231      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107448:	2304      	movs	r3, #4
 810744a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810744e:	e22d      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107450:	2308      	movs	r3, #8
 8107452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107456:	e229      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107458:	2310      	movs	r3, #16
 810745a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810745e:	e225      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107460:	2320      	movs	r3, #32
 8107462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107466:	e221      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107468:	2340      	movs	r3, #64	; 0x40
 810746a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810746e:	e21d      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107470:	2380      	movs	r3, #128	; 0x80
 8107472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107476:	bf00      	nop
 8107478:	e218      	b.n	81078ac <UART_SetConfig+0x5d0>
 810747a:	687b      	ldr	r3, [r7, #4]
 810747c:	681b      	ldr	r3, [r3, #0]
 810747e:	4a6c      	ldr	r2, [pc, #432]	; (8107630 <UART_SetConfig+0x354>)
 8107480:	4293      	cmp	r3, r2
 8107482:	d132      	bne.n	81074ea <UART_SetConfig+0x20e>
 8107484:	4b69      	ldr	r3, [pc, #420]	; (810762c <UART_SetConfig+0x350>)
 8107486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107488:	f003 0307 	and.w	r3, r3, #7
 810748c:	2b05      	cmp	r3, #5
 810748e:	d827      	bhi.n	81074e0 <UART_SetConfig+0x204>
 8107490:	a201      	add	r2, pc, #4	; (adr r2, 8107498 <UART_SetConfig+0x1bc>)
 8107492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107496:	bf00      	nop
 8107498:	081074b1 	.word	0x081074b1
 810749c:	081074b9 	.word	0x081074b9
 81074a0:	081074c1 	.word	0x081074c1
 81074a4:	081074c9 	.word	0x081074c9
 81074a8:	081074d1 	.word	0x081074d1
 81074ac:	081074d9 	.word	0x081074d9
 81074b0:	2300      	movs	r3, #0
 81074b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074b6:	e1f9      	b.n	81078ac <UART_SetConfig+0x5d0>
 81074b8:	2304      	movs	r3, #4
 81074ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074be:	e1f5      	b.n	81078ac <UART_SetConfig+0x5d0>
 81074c0:	2308      	movs	r3, #8
 81074c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074c6:	e1f1      	b.n	81078ac <UART_SetConfig+0x5d0>
 81074c8:	2310      	movs	r3, #16
 81074ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074ce:	e1ed      	b.n	81078ac <UART_SetConfig+0x5d0>
 81074d0:	2320      	movs	r3, #32
 81074d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074d6:	e1e9      	b.n	81078ac <UART_SetConfig+0x5d0>
 81074d8:	2340      	movs	r3, #64	; 0x40
 81074da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074de:	e1e5      	b.n	81078ac <UART_SetConfig+0x5d0>
 81074e0:	2380      	movs	r3, #128	; 0x80
 81074e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81074e6:	bf00      	nop
 81074e8:	e1e0      	b.n	81078ac <UART_SetConfig+0x5d0>
 81074ea:	687b      	ldr	r3, [r7, #4]
 81074ec:	681b      	ldr	r3, [r3, #0]
 81074ee:	4a51      	ldr	r2, [pc, #324]	; (8107634 <UART_SetConfig+0x358>)
 81074f0:	4293      	cmp	r3, r2
 81074f2:	d132      	bne.n	810755a <UART_SetConfig+0x27e>
 81074f4:	4b4d      	ldr	r3, [pc, #308]	; (810762c <UART_SetConfig+0x350>)
 81074f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81074f8:	f003 0307 	and.w	r3, r3, #7
 81074fc:	2b05      	cmp	r3, #5
 81074fe:	d827      	bhi.n	8107550 <UART_SetConfig+0x274>
 8107500:	a201      	add	r2, pc, #4	; (adr r2, 8107508 <UART_SetConfig+0x22c>)
 8107502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107506:	bf00      	nop
 8107508:	08107521 	.word	0x08107521
 810750c:	08107529 	.word	0x08107529
 8107510:	08107531 	.word	0x08107531
 8107514:	08107539 	.word	0x08107539
 8107518:	08107541 	.word	0x08107541
 810751c:	08107549 	.word	0x08107549
 8107520:	2300      	movs	r3, #0
 8107522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107526:	e1c1      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107528:	2304      	movs	r3, #4
 810752a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810752e:	e1bd      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107530:	2308      	movs	r3, #8
 8107532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107536:	e1b9      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107538:	2310      	movs	r3, #16
 810753a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810753e:	e1b5      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107540:	2320      	movs	r3, #32
 8107542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107546:	e1b1      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107548:	2340      	movs	r3, #64	; 0x40
 810754a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810754e:	e1ad      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107550:	2380      	movs	r3, #128	; 0x80
 8107552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107556:	bf00      	nop
 8107558:	e1a8      	b.n	81078ac <UART_SetConfig+0x5d0>
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	681b      	ldr	r3, [r3, #0]
 810755e:	4a36      	ldr	r2, [pc, #216]	; (8107638 <UART_SetConfig+0x35c>)
 8107560:	4293      	cmp	r3, r2
 8107562:	d132      	bne.n	81075ca <UART_SetConfig+0x2ee>
 8107564:	4b31      	ldr	r3, [pc, #196]	; (810762c <UART_SetConfig+0x350>)
 8107566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107568:	f003 0307 	and.w	r3, r3, #7
 810756c:	2b05      	cmp	r3, #5
 810756e:	d827      	bhi.n	81075c0 <UART_SetConfig+0x2e4>
 8107570:	a201      	add	r2, pc, #4	; (adr r2, 8107578 <UART_SetConfig+0x29c>)
 8107572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107576:	bf00      	nop
 8107578:	08107591 	.word	0x08107591
 810757c:	08107599 	.word	0x08107599
 8107580:	081075a1 	.word	0x081075a1
 8107584:	081075a9 	.word	0x081075a9
 8107588:	081075b1 	.word	0x081075b1
 810758c:	081075b9 	.word	0x081075b9
 8107590:	2300      	movs	r3, #0
 8107592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107596:	e189      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107598:	2304      	movs	r3, #4
 810759a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810759e:	e185      	b.n	81078ac <UART_SetConfig+0x5d0>
 81075a0:	2308      	movs	r3, #8
 81075a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075a6:	e181      	b.n	81078ac <UART_SetConfig+0x5d0>
 81075a8:	2310      	movs	r3, #16
 81075aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075ae:	e17d      	b.n	81078ac <UART_SetConfig+0x5d0>
 81075b0:	2320      	movs	r3, #32
 81075b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075b6:	e179      	b.n	81078ac <UART_SetConfig+0x5d0>
 81075b8:	2340      	movs	r3, #64	; 0x40
 81075ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075be:	e175      	b.n	81078ac <UART_SetConfig+0x5d0>
 81075c0:	2380      	movs	r3, #128	; 0x80
 81075c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81075c6:	bf00      	nop
 81075c8:	e170      	b.n	81078ac <UART_SetConfig+0x5d0>
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	681b      	ldr	r3, [r3, #0]
 81075ce:	4a1b      	ldr	r2, [pc, #108]	; (810763c <UART_SetConfig+0x360>)
 81075d0:	4293      	cmp	r3, r2
 81075d2:	d142      	bne.n	810765a <UART_SetConfig+0x37e>
 81075d4:	4b15      	ldr	r3, [pc, #84]	; (810762c <UART_SetConfig+0x350>)
 81075d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81075d8:	f003 0307 	and.w	r3, r3, #7
 81075dc:	2b05      	cmp	r3, #5
 81075de:	d837      	bhi.n	8107650 <UART_SetConfig+0x374>
 81075e0:	a201      	add	r2, pc, #4	; (adr r2, 81075e8 <UART_SetConfig+0x30c>)
 81075e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81075e6:	bf00      	nop
 81075e8:	08107601 	.word	0x08107601
 81075ec:	08107609 	.word	0x08107609
 81075f0:	08107611 	.word	0x08107611
 81075f4:	08107619 	.word	0x08107619
 81075f8:	08107641 	.word	0x08107641
 81075fc:	08107649 	.word	0x08107649
 8107600:	2300      	movs	r3, #0
 8107602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107606:	e151      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107608:	2304      	movs	r3, #4
 810760a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810760e:	e14d      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107610:	2308      	movs	r3, #8
 8107612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107616:	e149      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107618:	2310      	movs	r3, #16
 810761a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810761e:	e145      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107620:	cfff69f3 	.word	0xcfff69f3
 8107624:	58000c00 	.word	0x58000c00
 8107628:	40011000 	.word	0x40011000
 810762c:	58024400 	.word	0x58024400
 8107630:	40004400 	.word	0x40004400
 8107634:	40004800 	.word	0x40004800
 8107638:	40004c00 	.word	0x40004c00
 810763c:	40005000 	.word	0x40005000
 8107640:	2320      	movs	r3, #32
 8107642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107646:	e131      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107648:	2340      	movs	r3, #64	; 0x40
 810764a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810764e:	e12d      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107650:	2380      	movs	r3, #128	; 0x80
 8107652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107656:	bf00      	nop
 8107658:	e128      	b.n	81078ac <UART_SetConfig+0x5d0>
 810765a:	687b      	ldr	r3, [r7, #4]
 810765c:	681b      	ldr	r3, [r3, #0]
 810765e:	4ab6      	ldr	r2, [pc, #728]	; (8107938 <UART_SetConfig+0x65c>)
 8107660:	4293      	cmp	r3, r2
 8107662:	d178      	bne.n	8107756 <UART_SetConfig+0x47a>
 8107664:	4bb5      	ldr	r3, [pc, #724]	; (810793c <UART_SetConfig+0x660>)
 8107666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810766c:	2b28      	cmp	r3, #40	; 0x28
 810766e:	d86d      	bhi.n	810774c <UART_SetConfig+0x470>
 8107670:	a201      	add	r2, pc, #4	; (adr r2, 8107678 <UART_SetConfig+0x39c>)
 8107672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107676:	bf00      	nop
 8107678:	0810771d 	.word	0x0810771d
 810767c:	0810774d 	.word	0x0810774d
 8107680:	0810774d 	.word	0x0810774d
 8107684:	0810774d 	.word	0x0810774d
 8107688:	0810774d 	.word	0x0810774d
 810768c:	0810774d 	.word	0x0810774d
 8107690:	0810774d 	.word	0x0810774d
 8107694:	0810774d 	.word	0x0810774d
 8107698:	08107725 	.word	0x08107725
 810769c:	0810774d 	.word	0x0810774d
 81076a0:	0810774d 	.word	0x0810774d
 81076a4:	0810774d 	.word	0x0810774d
 81076a8:	0810774d 	.word	0x0810774d
 81076ac:	0810774d 	.word	0x0810774d
 81076b0:	0810774d 	.word	0x0810774d
 81076b4:	0810774d 	.word	0x0810774d
 81076b8:	0810772d 	.word	0x0810772d
 81076bc:	0810774d 	.word	0x0810774d
 81076c0:	0810774d 	.word	0x0810774d
 81076c4:	0810774d 	.word	0x0810774d
 81076c8:	0810774d 	.word	0x0810774d
 81076cc:	0810774d 	.word	0x0810774d
 81076d0:	0810774d 	.word	0x0810774d
 81076d4:	0810774d 	.word	0x0810774d
 81076d8:	08107735 	.word	0x08107735
 81076dc:	0810774d 	.word	0x0810774d
 81076e0:	0810774d 	.word	0x0810774d
 81076e4:	0810774d 	.word	0x0810774d
 81076e8:	0810774d 	.word	0x0810774d
 81076ec:	0810774d 	.word	0x0810774d
 81076f0:	0810774d 	.word	0x0810774d
 81076f4:	0810774d 	.word	0x0810774d
 81076f8:	0810773d 	.word	0x0810773d
 81076fc:	0810774d 	.word	0x0810774d
 8107700:	0810774d 	.word	0x0810774d
 8107704:	0810774d 	.word	0x0810774d
 8107708:	0810774d 	.word	0x0810774d
 810770c:	0810774d 	.word	0x0810774d
 8107710:	0810774d 	.word	0x0810774d
 8107714:	0810774d 	.word	0x0810774d
 8107718:	08107745 	.word	0x08107745
 810771c:	2301      	movs	r3, #1
 810771e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107722:	e0c3      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107724:	2304      	movs	r3, #4
 8107726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810772a:	e0bf      	b.n	81078ac <UART_SetConfig+0x5d0>
 810772c:	2308      	movs	r3, #8
 810772e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107732:	e0bb      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107734:	2310      	movs	r3, #16
 8107736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810773a:	e0b7      	b.n	81078ac <UART_SetConfig+0x5d0>
 810773c:	2320      	movs	r3, #32
 810773e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107742:	e0b3      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107744:	2340      	movs	r3, #64	; 0x40
 8107746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810774a:	e0af      	b.n	81078ac <UART_SetConfig+0x5d0>
 810774c:	2380      	movs	r3, #128	; 0x80
 810774e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107752:	bf00      	nop
 8107754:	e0aa      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107756:	687b      	ldr	r3, [r7, #4]
 8107758:	681b      	ldr	r3, [r3, #0]
 810775a:	4a79      	ldr	r2, [pc, #484]	; (8107940 <UART_SetConfig+0x664>)
 810775c:	4293      	cmp	r3, r2
 810775e:	d132      	bne.n	81077c6 <UART_SetConfig+0x4ea>
 8107760:	4b76      	ldr	r3, [pc, #472]	; (810793c <UART_SetConfig+0x660>)
 8107762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107764:	f003 0307 	and.w	r3, r3, #7
 8107768:	2b05      	cmp	r3, #5
 810776a:	d827      	bhi.n	81077bc <UART_SetConfig+0x4e0>
 810776c:	a201      	add	r2, pc, #4	; (adr r2, 8107774 <UART_SetConfig+0x498>)
 810776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107772:	bf00      	nop
 8107774:	0810778d 	.word	0x0810778d
 8107778:	08107795 	.word	0x08107795
 810777c:	0810779d 	.word	0x0810779d
 8107780:	081077a5 	.word	0x081077a5
 8107784:	081077ad 	.word	0x081077ad
 8107788:	081077b5 	.word	0x081077b5
 810778c:	2300      	movs	r3, #0
 810778e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107792:	e08b      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107794:	2304      	movs	r3, #4
 8107796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810779a:	e087      	b.n	81078ac <UART_SetConfig+0x5d0>
 810779c:	2308      	movs	r3, #8
 810779e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077a2:	e083      	b.n	81078ac <UART_SetConfig+0x5d0>
 81077a4:	2310      	movs	r3, #16
 81077a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077aa:	e07f      	b.n	81078ac <UART_SetConfig+0x5d0>
 81077ac:	2320      	movs	r3, #32
 81077ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077b2:	e07b      	b.n	81078ac <UART_SetConfig+0x5d0>
 81077b4:	2340      	movs	r3, #64	; 0x40
 81077b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077ba:	e077      	b.n	81078ac <UART_SetConfig+0x5d0>
 81077bc:	2380      	movs	r3, #128	; 0x80
 81077be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81077c2:	bf00      	nop
 81077c4:	e072      	b.n	81078ac <UART_SetConfig+0x5d0>
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	681b      	ldr	r3, [r3, #0]
 81077ca:	4a5e      	ldr	r2, [pc, #376]	; (8107944 <UART_SetConfig+0x668>)
 81077cc:	4293      	cmp	r3, r2
 81077ce:	d132      	bne.n	8107836 <UART_SetConfig+0x55a>
 81077d0:	4b5a      	ldr	r3, [pc, #360]	; (810793c <UART_SetConfig+0x660>)
 81077d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81077d4:	f003 0307 	and.w	r3, r3, #7
 81077d8:	2b05      	cmp	r3, #5
 81077da:	d827      	bhi.n	810782c <UART_SetConfig+0x550>
 81077dc:	a201      	add	r2, pc, #4	; (adr r2, 81077e4 <UART_SetConfig+0x508>)
 81077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81077e2:	bf00      	nop
 81077e4:	081077fd 	.word	0x081077fd
 81077e8:	08107805 	.word	0x08107805
 81077ec:	0810780d 	.word	0x0810780d
 81077f0:	08107815 	.word	0x08107815
 81077f4:	0810781d 	.word	0x0810781d
 81077f8:	08107825 	.word	0x08107825
 81077fc:	2300      	movs	r3, #0
 81077fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107802:	e053      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107804:	2304      	movs	r3, #4
 8107806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810780a:	e04f      	b.n	81078ac <UART_SetConfig+0x5d0>
 810780c:	2308      	movs	r3, #8
 810780e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107812:	e04b      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107814:	2310      	movs	r3, #16
 8107816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810781a:	e047      	b.n	81078ac <UART_SetConfig+0x5d0>
 810781c:	2320      	movs	r3, #32
 810781e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107822:	e043      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107824:	2340      	movs	r3, #64	; 0x40
 8107826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810782a:	e03f      	b.n	81078ac <UART_SetConfig+0x5d0>
 810782c:	2380      	movs	r3, #128	; 0x80
 810782e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107832:	bf00      	nop
 8107834:	e03a      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	681b      	ldr	r3, [r3, #0]
 810783a:	4a43      	ldr	r2, [pc, #268]	; (8107948 <UART_SetConfig+0x66c>)
 810783c:	4293      	cmp	r3, r2
 810783e:	d132      	bne.n	81078a6 <UART_SetConfig+0x5ca>
 8107840:	4b3e      	ldr	r3, [pc, #248]	; (810793c <UART_SetConfig+0x660>)
 8107842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107844:	f003 0307 	and.w	r3, r3, #7
 8107848:	2b05      	cmp	r3, #5
 810784a:	d827      	bhi.n	810789c <UART_SetConfig+0x5c0>
 810784c:	a201      	add	r2, pc, #4	; (adr r2, 8107854 <UART_SetConfig+0x578>)
 810784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107852:	bf00      	nop
 8107854:	0810786d 	.word	0x0810786d
 8107858:	08107875 	.word	0x08107875
 810785c:	0810787d 	.word	0x0810787d
 8107860:	08107885 	.word	0x08107885
 8107864:	0810788d 	.word	0x0810788d
 8107868:	08107895 	.word	0x08107895
 810786c:	2302      	movs	r3, #2
 810786e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107872:	e01b      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107874:	2304      	movs	r3, #4
 8107876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810787a:	e017      	b.n	81078ac <UART_SetConfig+0x5d0>
 810787c:	2308      	movs	r3, #8
 810787e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107882:	e013      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107884:	2310      	movs	r3, #16
 8107886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810788a:	e00f      	b.n	81078ac <UART_SetConfig+0x5d0>
 810788c:	2320      	movs	r3, #32
 810788e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8107892:	e00b      	b.n	81078ac <UART_SetConfig+0x5d0>
 8107894:	2340      	movs	r3, #64	; 0x40
 8107896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810789a:	e007      	b.n	81078ac <UART_SetConfig+0x5d0>
 810789c:	2380      	movs	r3, #128	; 0x80
 810789e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81078a2:	bf00      	nop
 81078a4:	e002      	b.n	81078ac <UART_SetConfig+0x5d0>
 81078a6:	2380      	movs	r3, #128	; 0x80
 81078a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81078ac:	687b      	ldr	r3, [r7, #4]
 81078ae:	681b      	ldr	r3, [r3, #0]
 81078b0:	4a25      	ldr	r2, [pc, #148]	; (8107948 <UART_SetConfig+0x66c>)
 81078b2:	4293      	cmp	r3, r2
 81078b4:	f040 80b8 	bne.w	8107a28 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81078b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81078bc:	2b08      	cmp	r3, #8
 81078be:	d019      	beq.n	81078f4 <UART_SetConfig+0x618>
 81078c0:	2b08      	cmp	r3, #8
 81078c2:	dc04      	bgt.n	81078ce <UART_SetConfig+0x5f2>
 81078c4:	2b02      	cmp	r3, #2
 81078c6:	d009      	beq.n	81078dc <UART_SetConfig+0x600>
 81078c8:	2b04      	cmp	r3, #4
 81078ca:	d00b      	beq.n	81078e4 <UART_SetConfig+0x608>
 81078cc:	e042      	b.n	8107954 <UART_SetConfig+0x678>
 81078ce:	2b20      	cmp	r3, #32
 81078d0:	d02b      	beq.n	810792a <UART_SetConfig+0x64e>
 81078d2:	2b40      	cmp	r3, #64	; 0x40
 81078d4:	d02c      	beq.n	8107930 <UART_SetConfig+0x654>
 81078d6:	2b10      	cmp	r3, #16
 81078d8:	d014      	beq.n	8107904 <UART_SetConfig+0x628>
 81078da:	e03b      	b.n	8107954 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81078dc:	f7fd fd2c 	bl	8105338 <HAL_RCCEx_GetD3PCLK1Freq>
 81078e0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81078e2:	e03d      	b.n	8107960 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81078e4:	f107 0314 	add.w	r3, r7, #20
 81078e8:	4618      	mov	r0, r3
 81078ea:	f7fd fd3b 	bl	8105364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81078ee:	69bb      	ldr	r3, [r7, #24]
 81078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81078f2:	e035      	b.n	8107960 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81078f4:	f107 0308 	add.w	r3, r7, #8
 81078f8:	4618      	mov	r0, r3
 81078fa:	f7fd fe7f 	bl	81055fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81078fe:	68fb      	ldr	r3, [r7, #12]
 8107900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107902:	e02d      	b.n	8107960 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107904:	4b0d      	ldr	r3, [pc, #52]	; (810793c <UART_SetConfig+0x660>)
 8107906:	681b      	ldr	r3, [r3, #0]
 8107908:	f003 0320 	and.w	r3, r3, #32
 810790c:	2b00      	cmp	r3, #0
 810790e:	d009      	beq.n	8107924 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107910:	4b0a      	ldr	r3, [pc, #40]	; (810793c <UART_SetConfig+0x660>)
 8107912:	681b      	ldr	r3, [r3, #0]
 8107914:	08db      	lsrs	r3, r3, #3
 8107916:	f003 0303 	and.w	r3, r3, #3
 810791a:	4a0c      	ldr	r2, [pc, #48]	; (810794c <UART_SetConfig+0x670>)
 810791c:	fa22 f303 	lsr.w	r3, r2, r3
 8107920:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107922:	e01d      	b.n	8107960 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8107924:	4b09      	ldr	r3, [pc, #36]	; (810794c <UART_SetConfig+0x670>)
 8107926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107928:	e01a      	b.n	8107960 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810792a:	4b09      	ldr	r3, [pc, #36]	; (8107950 <UART_SetConfig+0x674>)
 810792c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810792e:	e017      	b.n	8107960 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107936:	e013      	b.n	8107960 <UART_SetConfig+0x684>
 8107938:	40011400 	.word	0x40011400
 810793c:	58024400 	.word	0x58024400
 8107940:	40007800 	.word	0x40007800
 8107944:	40007c00 	.word	0x40007c00
 8107948:	58000c00 	.word	0x58000c00
 810794c:	03d09000 	.word	0x03d09000
 8107950:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8107954:	2300      	movs	r3, #0
 8107956:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107958:	2301      	movs	r3, #1
 810795a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810795e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8107960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107962:	2b00      	cmp	r3, #0
 8107964:	f000 824d 	beq.w	8107e02 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810796c:	4aad      	ldr	r2, [pc, #692]	; (8107c24 <UART_SetConfig+0x948>)
 810796e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107972:	461a      	mov	r2, r3
 8107974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107976:	fbb3 f3f2 	udiv	r3, r3, r2
 810797a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810797c:	687b      	ldr	r3, [r7, #4]
 810797e:	685a      	ldr	r2, [r3, #4]
 8107980:	4613      	mov	r3, r2
 8107982:	005b      	lsls	r3, r3, #1
 8107984:	4413      	add	r3, r2
 8107986:	6a3a      	ldr	r2, [r7, #32]
 8107988:	429a      	cmp	r2, r3
 810798a:	d305      	bcc.n	8107998 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810798c:	687b      	ldr	r3, [r7, #4]
 810798e:	685b      	ldr	r3, [r3, #4]
 8107990:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107992:	6a3a      	ldr	r2, [r7, #32]
 8107994:	429a      	cmp	r2, r3
 8107996:	d903      	bls.n	81079a0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8107998:	2301      	movs	r3, #1
 810799a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810799e:	e230      	b.n	8107e02 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81079a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81079a2:	4618      	mov	r0, r3
 81079a4:	f04f 0100 	mov.w	r1, #0
 81079a8:	687b      	ldr	r3, [r7, #4]
 81079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81079ac:	4a9d      	ldr	r2, [pc, #628]	; (8107c24 <UART_SetConfig+0x948>)
 81079ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81079b2:	b29b      	uxth	r3, r3
 81079b4:	f04f 0400 	mov.w	r4, #0
 81079b8:	461a      	mov	r2, r3
 81079ba:	4623      	mov	r3, r4
 81079bc:	f7f9 f92c 	bl	8100c18 <__aeabi_uldivmod>
 81079c0:	4603      	mov	r3, r0
 81079c2:	460c      	mov	r4, r1
 81079c4:	4619      	mov	r1, r3
 81079c6:	4622      	mov	r2, r4
 81079c8:	f04f 0300 	mov.w	r3, #0
 81079cc:	f04f 0400 	mov.w	r4, #0
 81079d0:	0214      	lsls	r4, r2, #8
 81079d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 81079d6:	020b      	lsls	r3, r1, #8
 81079d8:	687a      	ldr	r2, [r7, #4]
 81079da:	6852      	ldr	r2, [r2, #4]
 81079dc:	0852      	lsrs	r2, r2, #1
 81079de:	4611      	mov	r1, r2
 81079e0:	f04f 0200 	mov.w	r2, #0
 81079e4:	eb13 0b01 	adds.w	fp, r3, r1
 81079e8:	eb44 0c02 	adc.w	ip, r4, r2
 81079ec:	4658      	mov	r0, fp
 81079ee:	4661      	mov	r1, ip
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	685b      	ldr	r3, [r3, #4]
 81079f4:	f04f 0400 	mov.w	r4, #0
 81079f8:	461a      	mov	r2, r3
 81079fa:	4623      	mov	r3, r4
 81079fc:	f7f9 f90c 	bl	8100c18 <__aeabi_uldivmod>
 8107a00:	4603      	mov	r3, r0
 8107a02:	460c      	mov	r4, r1
 8107a04:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8107a0c:	d308      	bcc.n	8107a20 <UART_SetConfig+0x744>
 8107a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107a10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107a14:	d204      	bcs.n	8107a20 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8107a16:	687b      	ldr	r3, [r7, #4]
 8107a18:	681b      	ldr	r3, [r3, #0]
 8107a1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107a1c:	60da      	str	r2, [r3, #12]
 8107a1e:	e1f0      	b.n	8107e02 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8107a20:	2301      	movs	r3, #1
 8107a22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107a26:	e1ec      	b.n	8107e02 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	69db      	ldr	r3, [r3, #28]
 8107a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8107a30:	f040 8100 	bne.w	8107c34 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8107a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107a38:	2b40      	cmp	r3, #64	; 0x40
 8107a3a:	f200 80b7 	bhi.w	8107bac <UART_SetConfig+0x8d0>
 8107a3e:	a201      	add	r2, pc, #4	; (adr r2, 8107a44 <UART_SetConfig+0x768>)
 8107a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107a44:	08107b49 	.word	0x08107b49
 8107a48:	08107b51 	.word	0x08107b51
 8107a4c:	08107bad 	.word	0x08107bad
 8107a50:	08107bad 	.word	0x08107bad
 8107a54:	08107b59 	.word	0x08107b59
 8107a58:	08107bad 	.word	0x08107bad
 8107a5c:	08107bad 	.word	0x08107bad
 8107a60:	08107bad 	.word	0x08107bad
 8107a64:	08107b69 	.word	0x08107b69
 8107a68:	08107bad 	.word	0x08107bad
 8107a6c:	08107bad 	.word	0x08107bad
 8107a70:	08107bad 	.word	0x08107bad
 8107a74:	08107bad 	.word	0x08107bad
 8107a78:	08107bad 	.word	0x08107bad
 8107a7c:	08107bad 	.word	0x08107bad
 8107a80:	08107bad 	.word	0x08107bad
 8107a84:	08107b79 	.word	0x08107b79
 8107a88:	08107bad 	.word	0x08107bad
 8107a8c:	08107bad 	.word	0x08107bad
 8107a90:	08107bad 	.word	0x08107bad
 8107a94:	08107bad 	.word	0x08107bad
 8107a98:	08107bad 	.word	0x08107bad
 8107a9c:	08107bad 	.word	0x08107bad
 8107aa0:	08107bad 	.word	0x08107bad
 8107aa4:	08107bad 	.word	0x08107bad
 8107aa8:	08107bad 	.word	0x08107bad
 8107aac:	08107bad 	.word	0x08107bad
 8107ab0:	08107bad 	.word	0x08107bad
 8107ab4:	08107bad 	.word	0x08107bad
 8107ab8:	08107bad 	.word	0x08107bad
 8107abc:	08107bad 	.word	0x08107bad
 8107ac0:	08107bad 	.word	0x08107bad
 8107ac4:	08107b9f 	.word	0x08107b9f
 8107ac8:	08107bad 	.word	0x08107bad
 8107acc:	08107bad 	.word	0x08107bad
 8107ad0:	08107bad 	.word	0x08107bad
 8107ad4:	08107bad 	.word	0x08107bad
 8107ad8:	08107bad 	.word	0x08107bad
 8107adc:	08107bad 	.word	0x08107bad
 8107ae0:	08107bad 	.word	0x08107bad
 8107ae4:	08107bad 	.word	0x08107bad
 8107ae8:	08107bad 	.word	0x08107bad
 8107aec:	08107bad 	.word	0x08107bad
 8107af0:	08107bad 	.word	0x08107bad
 8107af4:	08107bad 	.word	0x08107bad
 8107af8:	08107bad 	.word	0x08107bad
 8107afc:	08107bad 	.word	0x08107bad
 8107b00:	08107bad 	.word	0x08107bad
 8107b04:	08107bad 	.word	0x08107bad
 8107b08:	08107bad 	.word	0x08107bad
 8107b0c:	08107bad 	.word	0x08107bad
 8107b10:	08107bad 	.word	0x08107bad
 8107b14:	08107bad 	.word	0x08107bad
 8107b18:	08107bad 	.word	0x08107bad
 8107b1c:	08107bad 	.word	0x08107bad
 8107b20:	08107bad 	.word	0x08107bad
 8107b24:	08107bad 	.word	0x08107bad
 8107b28:	08107bad 	.word	0x08107bad
 8107b2c:	08107bad 	.word	0x08107bad
 8107b30:	08107bad 	.word	0x08107bad
 8107b34:	08107bad 	.word	0x08107bad
 8107b38:	08107bad 	.word	0x08107bad
 8107b3c:	08107bad 	.word	0x08107bad
 8107b40:	08107bad 	.word	0x08107bad
 8107b44:	08107ba5 	.word	0x08107ba5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107b48:	f7fd fb88 	bl	810525c <HAL_RCC_GetPCLK1Freq>
 8107b4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107b4e:	e033      	b.n	8107bb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107b50:	f7fd fb9a 	bl	8105288 <HAL_RCC_GetPCLK2Freq>
 8107b54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107b56:	e02f      	b.n	8107bb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b58:	f107 0314 	add.w	r3, r7, #20
 8107b5c:	4618      	mov	r0, r3
 8107b5e:	f7fd fc01 	bl	8105364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107b62:	69bb      	ldr	r3, [r7, #24]
 8107b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107b66:	e027      	b.n	8107bb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b68:	f107 0308 	add.w	r3, r7, #8
 8107b6c:	4618      	mov	r0, r3
 8107b6e:	f7fd fd45 	bl	81055fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107b72:	68fb      	ldr	r3, [r7, #12]
 8107b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107b76:	e01f      	b.n	8107bb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107b78:	4b2b      	ldr	r3, [pc, #172]	; (8107c28 <UART_SetConfig+0x94c>)
 8107b7a:	681b      	ldr	r3, [r3, #0]
 8107b7c:	f003 0320 	and.w	r3, r3, #32
 8107b80:	2b00      	cmp	r3, #0
 8107b82:	d009      	beq.n	8107b98 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107b84:	4b28      	ldr	r3, [pc, #160]	; (8107c28 <UART_SetConfig+0x94c>)
 8107b86:	681b      	ldr	r3, [r3, #0]
 8107b88:	08db      	lsrs	r3, r3, #3
 8107b8a:	f003 0303 	and.w	r3, r3, #3
 8107b8e:	4a27      	ldr	r2, [pc, #156]	; (8107c2c <UART_SetConfig+0x950>)
 8107b90:	fa22 f303 	lsr.w	r3, r2, r3
 8107b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107b96:	e00f      	b.n	8107bb8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8107b98:	4b24      	ldr	r3, [pc, #144]	; (8107c2c <UART_SetConfig+0x950>)
 8107b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107b9c:	e00c      	b.n	8107bb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107b9e:	4b24      	ldr	r3, [pc, #144]	; (8107c30 <UART_SetConfig+0x954>)
 8107ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107ba2:	e009      	b.n	8107bb8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107baa:	e005      	b.n	8107bb8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8107bac:	2300      	movs	r3, #0
 8107bae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107bb0:	2301      	movs	r3, #1
 8107bb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107bb6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107bba:	2b00      	cmp	r3, #0
 8107bbc:	f000 8121 	beq.w	8107e02 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107bc0:	687b      	ldr	r3, [r7, #4]
 8107bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107bc4:	4a17      	ldr	r2, [pc, #92]	; (8107c24 <UART_SetConfig+0x948>)
 8107bc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107bca:	461a      	mov	r2, r3
 8107bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8107bd2:	005a      	lsls	r2, r3, #1
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	685b      	ldr	r3, [r3, #4]
 8107bd8:	085b      	lsrs	r3, r3, #1
 8107bda:	441a      	add	r2, r3
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	685b      	ldr	r3, [r3, #4]
 8107be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8107be4:	b29b      	uxth	r3, r3
 8107be6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107bea:	2b0f      	cmp	r3, #15
 8107bec:	d916      	bls.n	8107c1c <UART_SetConfig+0x940>
 8107bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107bf4:	d212      	bcs.n	8107c1c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107bf8:	b29b      	uxth	r3, r3
 8107bfa:	f023 030f 	bic.w	r3, r3, #15
 8107bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107c02:	085b      	lsrs	r3, r3, #1
 8107c04:	b29b      	uxth	r3, r3
 8107c06:	f003 0307 	and.w	r3, r3, #7
 8107c0a:	b29a      	uxth	r2, r3
 8107c0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8107c0e:	4313      	orrs	r3, r2
 8107c10:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8107c12:	687b      	ldr	r3, [r7, #4]
 8107c14:	681b      	ldr	r3, [r3, #0]
 8107c16:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8107c18:	60da      	str	r2, [r3, #12]
 8107c1a:	e0f2      	b.n	8107e02 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8107c1c:	2301      	movs	r3, #1
 8107c1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8107c22:	e0ee      	b.n	8107e02 <UART_SetConfig+0xb26>
 8107c24:	0810cc1c 	.word	0x0810cc1c
 8107c28:	58024400 	.word	0x58024400
 8107c2c:	03d09000 	.word	0x03d09000
 8107c30:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8107c34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8107c38:	2b40      	cmp	r3, #64	; 0x40
 8107c3a:	f200 80b7 	bhi.w	8107dac <UART_SetConfig+0xad0>
 8107c3e:	a201      	add	r2, pc, #4	; (adr r2, 8107c44 <UART_SetConfig+0x968>)
 8107c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107c44:	08107d49 	.word	0x08107d49
 8107c48:	08107d51 	.word	0x08107d51
 8107c4c:	08107dad 	.word	0x08107dad
 8107c50:	08107dad 	.word	0x08107dad
 8107c54:	08107d59 	.word	0x08107d59
 8107c58:	08107dad 	.word	0x08107dad
 8107c5c:	08107dad 	.word	0x08107dad
 8107c60:	08107dad 	.word	0x08107dad
 8107c64:	08107d69 	.word	0x08107d69
 8107c68:	08107dad 	.word	0x08107dad
 8107c6c:	08107dad 	.word	0x08107dad
 8107c70:	08107dad 	.word	0x08107dad
 8107c74:	08107dad 	.word	0x08107dad
 8107c78:	08107dad 	.word	0x08107dad
 8107c7c:	08107dad 	.word	0x08107dad
 8107c80:	08107dad 	.word	0x08107dad
 8107c84:	08107d79 	.word	0x08107d79
 8107c88:	08107dad 	.word	0x08107dad
 8107c8c:	08107dad 	.word	0x08107dad
 8107c90:	08107dad 	.word	0x08107dad
 8107c94:	08107dad 	.word	0x08107dad
 8107c98:	08107dad 	.word	0x08107dad
 8107c9c:	08107dad 	.word	0x08107dad
 8107ca0:	08107dad 	.word	0x08107dad
 8107ca4:	08107dad 	.word	0x08107dad
 8107ca8:	08107dad 	.word	0x08107dad
 8107cac:	08107dad 	.word	0x08107dad
 8107cb0:	08107dad 	.word	0x08107dad
 8107cb4:	08107dad 	.word	0x08107dad
 8107cb8:	08107dad 	.word	0x08107dad
 8107cbc:	08107dad 	.word	0x08107dad
 8107cc0:	08107dad 	.word	0x08107dad
 8107cc4:	08107d9f 	.word	0x08107d9f
 8107cc8:	08107dad 	.word	0x08107dad
 8107ccc:	08107dad 	.word	0x08107dad
 8107cd0:	08107dad 	.word	0x08107dad
 8107cd4:	08107dad 	.word	0x08107dad
 8107cd8:	08107dad 	.word	0x08107dad
 8107cdc:	08107dad 	.word	0x08107dad
 8107ce0:	08107dad 	.word	0x08107dad
 8107ce4:	08107dad 	.word	0x08107dad
 8107ce8:	08107dad 	.word	0x08107dad
 8107cec:	08107dad 	.word	0x08107dad
 8107cf0:	08107dad 	.word	0x08107dad
 8107cf4:	08107dad 	.word	0x08107dad
 8107cf8:	08107dad 	.word	0x08107dad
 8107cfc:	08107dad 	.word	0x08107dad
 8107d00:	08107dad 	.word	0x08107dad
 8107d04:	08107dad 	.word	0x08107dad
 8107d08:	08107dad 	.word	0x08107dad
 8107d0c:	08107dad 	.word	0x08107dad
 8107d10:	08107dad 	.word	0x08107dad
 8107d14:	08107dad 	.word	0x08107dad
 8107d18:	08107dad 	.word	0x08107dad
 8107d1c:	08107dad 	.word	0x08107dad
 8107d20:	08107dad 	.word	0x08107dad
 8107d24:	08107dad 	.word	0x08107dad
 8107d28:	08107dad 	.word	0x08107dad
 8107d2c:	08107dad 	.word	0x08107dad
 8107d30:	08107dad 	.word	0x08107dad
 8107d34:	08107dad 	.word	0x08107dad
 8107d38:	08107dad 	.word	0x08107dad
 8107d3c:	08107dad 	.word	0x08107dad
 8107d40:	08107dad 	.word	0x08107dad
 8107d44:	08107da5 	.word	0x08107da5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8107d48:	f7fd fa88 	bl	810525c <HAL_RCC_GetPCLK1Freq>
 8107d4c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107d4e:	e033      	b.n	8107db8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8107d50:	f7fd fa9a 	bl	8105288 <HAL_RCC_GetPCLK2Freq>
 8107d54:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8107d56:	e02f      	b.n	8107db8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107d58:	f107 0314 	add.w	r3, r7, #20
 8107d5c:	4618      	mov	r0, r3
 8107d5e:	f7fd fb01 	bl	8105364 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8107d62:	69bb      	ldr	r3, [r7, #24]
 8107d64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107d66:	e027      	b.n	8107db8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107d68:	f107 0308 	add.w	r3, r7, #8
 8107d6c:	4618      	mov	r0, r3
 8107d6e:	f7fd fc45 	bl	81055fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8107d72:	68fb      	ldr	r3, [r7, #12]
 8107d74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107d76:	e01f      	b.n	8107db8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107d78:	4b2c      	ldr	r3, [pc, #176]	; (8107e2c <UART_SetConfig+0xb50>)
 8107d7a:	681b      	ldr	r3, [r3, #0]
 8107d7c:	f003 0320 	and.w	r3, r3, #32
 8107d80:	2b00      	cmp	r3, #0
 8107d82:	d009      	beq.n	8107d98 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8107d84:	4b29      	ldr	r3, [pc, #164]	; (8107e2c <UART_SetConfig+0xb50>)
 8107d86:	681b      	ldr	r3, [r3, #0]
 8107d88:	08db      	lsrs	r3, r3, #3
 8107d8a:	f003 0303 	and.w	r3, r3, #3
 8107d8e:	4a28      	ldr	r2, [pc, #160]	; (8107e30 <UART_SetConfig+0xb54>)
 8107d90:	fa22 f303 	lsr.w	r3, r2, r3
 8107d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8107d96:	e00f      	b.n	8107db8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8107d98:	4b25      	ldr	r3, [pc, #148]	; (8107e30 <UART_SetConfig+0xb54>)
 8107d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107d9c:	e00c      	b.n	8107db8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8107d9e:	4b25      	ldr	r3, [pc, #148]	; (8107e34 <UART_SetConfig+0xb58>)
 8107da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107da2:	e009      	b.n	8107db8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8107da4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8107da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8107daa:	e005      	b.n	8107db8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8107dac:	2300      	movs	r3, #0
 8107dae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8107db0:	2301      	movs	r3, #1
 8107db2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8107db6:	bf00      	nop
    }

    if (pclk != 0U)
 8107db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107dba:	2b00      	cmp	r3, #0
 8107dbc:	d021      	beq.n	8107e02 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107dc2:	4a1d      	ldr	r2, [pc, #116]	; (8107e38 <UART_SetConfig+0xb5c>)
 8107dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107dc8:	461a      	mov	r2, r3
 8107dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107dcc:	fbb3 f2f2 	udiv	r2, r3, r2
 8107dd0:	687b      	ldr	r3, [r7, #4]
 8107dd2:	685b      	ldr	r3, [r3, #4]
 8107dd4:	085b      	lsrs	r3, r3, #1
 8107dd6:	441a      	add	r2, r3
 8107dd8:	687b      	ldr	r3, [r7, #4]
 8107dda:	685b      	ldr	r3, [r3, #4]
 8107ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8107de0:	b29b      	uxth	r3, r3
 8107de2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107de6:	2b0f      	cmp	r3, #15
 8107de8:	d908      	bls.n	8107dfc <UART_SetConfig+0xb20>
 8107dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107df0:	d204      	bcs.n	8107dfc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8107df2:	687b      	ldr	r3, [r7, #4]
 8107df4:	681b      	ldr	r3, [r3, #0]
 8107df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8107df8:	60da      	str	r2, [r3, #12]
 8107dfa:	e002      	b.n	8107e02 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8107dfc:	2301      	movs	r3, #1
 8107dfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107e02:	687b      	ldr	r3, [r7, #4]
 8107e04:	2201      	movs	r2, #1
 8107e06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8107e0a:	687b      	ldr	r3, [r7, #4]
 8107e0c:	2201      	movs	r2, #1
 8107e0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	2200      	movs	r2, #0
 8107e16:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8107e18:	687b      	ldr	r3, [r7, #4]
 8107e1a:	2200      	movs	r2, #0
 8107e1c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8107e1e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8107e22:	4618      	mov	r0, r3
 8107e24:	3738      	adds	r7, #56	; 0x38
 8107e26:	46bd      	mov	sp, r7
 8107e28:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8107e2c:	58024400 	.word	0x58024400
 8107e30:	03d09000 	.word	0x03d09000
 8107e34:	003d0900 	.word	0x003d0900
 8107e38:	0810cc1c 	.word	0x0810cc1c

08107e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107e3c:	b480      	push	{r7}
 8107e3e:	b083      	sub	sp, #12
 8107e40:	af00      	add	r7, sp, #0
 8107e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107e44:	687b      	ldr	r3, [r7, #4]
 8107e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107e48:	f003 0301 	and.w	r3, r3, #1
 8107e4c:	2b00      	cmp	r3, #0
 8107e4e:	d00a      	beq.n	8107e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107e50:	687b      	ldr	r3, [r7, #4]
 8107e52:	681b      	ldr	r3, [r3, #0]
 8107e54:	685b      	ldr	r3, [r3, #4]
 8107e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107e5a:	687b      	ldr	r3, [r7, #4]
 8107e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	430a      	orrs	r2, r1
 8107e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107e66:	687b      	ldr	r3, [r7, #4]
 8107e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107e6a:	f003 0302 	and.w	r3, r3, #2
 8107e6e:	2b00      	cmp	r3, #0
 8107e70:	d00a      	beq.n	8107e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8107e72:	687b      	ldr	r3, [r7, #4]
 8107e74:	681b      	ldr	r3, [r3, #0]
 8107e76:	685b      	ldr	r3, [r3, #4]
 8107e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107e7c:	687b      	ldr	r3, [r7, #4]
 8107e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107e80:	687b      	ldr	r3, [r7, #4]
 8107e82:	681b      	ldr	r3, [r3, #0]
 8107e84:	430a      	orrs	r2, r1
 8107e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107e88:	687b      	ldr	r3, [r7, #4]
 8107e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107e8c:	f003 0304 	and.w	r3, r3, #4
 8107e90:	2b00      	cmp	r3, #0
 8107e92:	d00a      	beq.n	8107eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8107e94:	687b      	ldr	r3, [r7, #4]
 8107e96:	681b      	ldr	r3, [r3, #0]
 8107e98:	685b      	ldr	r3, [r3, #4]
 8107e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107e9e:	687b      	ldr	r3, [r7, #4]
 8107ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107ea2:	687b      	ldr	r3, [r7, #4]
 8107ea4:	681b      	ldr	r3, [r3, #0]
 8107ea6:	430a      	orrs	r2, r1
 8107ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107eaa:	687b      	ldr	r3, [r7, #4]
 8107eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107eae:	f003 0308 	and.w	r3, r3, #8
 8107eb2:	2b00      	cmp	r3, #0
 8107eb4:	d00a      	beq.n	8107ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107eb6:	687b      	ldr	r3, [r7, #4]
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	685b      	ldr	r3, [r3, #4]
 8107ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8107ec0:	687b      	ldr	r3, [r7, #4]
 8107ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	681b      	ldr	r3, [r3, #0]
 8107ec8:	430a      	orrs	r2, r1
 8107eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ed0:	f003 0310 	and.w	r3, r3, #16
 8107ed4:	2b00      	cmp	r3, #0
 8107ed6:	d00a      	beq.n	8107eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8107ed8:	687b      	ldr	r3, [r7, #4]
 8107eda:	681b      	ldr	r3, [r3, #0]
 8107edc:	689b      	ldr	r3, [r3, #8]
 8107ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8107ee2:	687b      	ldr	r3, [r7, #4]
 8107ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107ee6:	687b      	ldr	r3, [r7, #4]
 8107ee8:	681b      	ldr	r3, [r3, #0]
 8107eea:	430a      	orrs	r2, r1
 8107eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8107eee:	687b      	ldr	r3, [r7, #4]
 8107ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107ef2:	f003 0320 	and.w	r3, r3, #32
 8107ef6:	2b00      	cmp	r3, #0
 8107ef8:	d00a      	beq.n	8107f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	681b      	ldr	r3, [r3, #0]
 8107efe:	689b      	ldr	r3, [r3, #8]
 8107f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107f08:	687b      	ldr	r3, [r7, #4]
 8107f0a:	681b      	ldr	r3, [r3, #0]
 8107f0c:	430a      	orrs	r2, r1
 8107f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8107f10:	687b      	ldr	r3, [r7, #4]
 8107f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107f18:	2b00      	cmp	r3, #0
 8107f1a:	d01a      	beq.n	8107f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107f1c:	687b      	ldr	r3, [r7, #4]
 8107f1e:	681b      	ldr	r3, [r3, #0]
 8107f20:	685b      	ldr	r3, [r3, #4]
 8107f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107f26:	687b      	ldr	r3, [r7, #4]
 8107f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107f2a:	687b      	ldr	r3, [r7, #4]
 8107f2c:	681b      	ldr	r3, [r3, #0]
 8107f2e:	430a      	orrs	r2, r1
 8107f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107f3a:	d10a      	bne.n	8107f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107f3c:	687b      	ldr	r3, [r7, #4]
 8107f3e:	681b      	ldr	r3, [r3, #0]
 8107f40:	685b      	ldr	r3, [r3, #4]
 8107f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107f4a:	687b      	ldr	r3, [r7, #4]
 8107f4c:	681b      	ldr	r3, [r3, #0]
 8107f4e:	430a      	orrs	r2, r1
 8107f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8107f52:	687b      	ldr	r3, [r7, #4]
 8107f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107f5a:	2b00      	cmp	r3, #0
 8107f5c:	d00a      	beq.n	8107f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107f5e:	687b      	ldr	r3, [r7, #4]
 8107f60:	681b      	ldr	r3, [r3, #0]
 8107f62:	685b      	ldr	r3, [r3, #4]
 8107f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107f6c:	687b      	ldr	r3, [r7, #4]
 8107f6e:	681b      	ldr	r3, [r3, #0]
 8107f70:	430a      	orrs	r2, r1
 8107f72:	605a      	str	r2, [r3, #4]
  }
}
 8107f74:	bf00      	nop
 8107f76:	370c      	adds	r7, #12
 8107f78:	46bd      	mov	sp, r7
 8107f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f7e:	4770      	bx	lr

08107f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107f80:	b580      	push	{r7, lr}
 8107f82:	b086      	sub	sp, #24
 8107f84:	af02      	add	r7, sp, #8
 8107f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	2200      	movs	r2, #0
 8107f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8107f90:	f7f9 ffda 	bl	8101f48 <HAL_GetTick>
 8107f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8107f96:	687b      	ldr	r3, [r7, #4]
 8107f98:	681b      	ldr	r3, [r3, #0]
 8107f9a:	681b      	ldr	r3, [r3, #0]
 8107f9c:	f003 0308 	and.w	r3, r3, #8
 8107fa0:	2b08      	cmp	r3, #8
 8107fa2:	d10e      	bne.n	8107fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107fa8:	9300      	str	r3, [sp, #0]
 8107faa:	68fb      	ldr	r3, [r7, #12]
 8107fac:	2200      	movs	r2, #0
 8107fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8107fb2:	6878      	ldr	r0, [r7, #4]
 8107fb4:	f000 f82c 	bl	8108010 <UART_WaitOnFlagUntilTimeout>
 8107fb8:	4603      	mov	r3, r0
 8107fba:	2b00      	cmp	r3, #0
 8107fbc:	d001      	beq.n	8107fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107fbe:	2303      	movs	r3, #3
 8107fc0:	e022      	b.n	8108008 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8107fc2:	687b      	ldr	r3, [r7, #4]
 8107fc4:	681b      	ldr	r3, [r3, #0]
 8107fc6:	681b      	ldr	r3, [r3, #0]
 8107fc8:	f003 0304 	and.w	r3, r3, #4
 8107fcc:	2b04      	cmp	r3, #4
 8107fce:	d10e      	bne.n	8107fee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8107fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107fd4:	9300      	str	r3, [sp, #0]
 8107fd6:	68fb      	ldr	r3, [r7, #12]
 8107fd8:	2200      	movs	r2, #0
 8107fda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8107fde:	6878      	ldr	r0, [r7, #4]
 8107fe0:	f000 f816 	bl	8108010 <UART_WaitOnFlagUntilTimeout>
 8107fe4:	4603      	mov	r3, r0
 8107fe6:	2b00      	cmp	r3, #0
 8107fe8:	d001      	beq.n	8107fee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107fea:	2303      	movs	r3, #3
 8107fec:	e00c      	b.n	8108008 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	2220      	movs	r2, #32
 8107ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	2220      	movs	r2, #32
 8107ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	2200      	movs	r2, #0
 8108002:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108006:	2300      	movs	r3, #0
}
 8108008:	4618      	mov	r0, r3
 810800a:	3710      	adds	r7, #16
 810800c:	46bd      	mov	sp, r7
 810800e:	bd80      	pop	{r7, pc}

08108010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108010:	b580      	push	{r7, lr}
 8108012:	b084      	sub	sp, #16
 8108014:	af00      	add	r7, sp, #0
 8108016:	60f8      	str	r0, [r7, #12]
 8108018:	60b9      	str	r1, [r7, #8]
 810801a:	603b      	str	r3, [r7, #0]
 810801c:	4613      	mov	r3, r2
 810801e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108020:	e062      	b.n	81080e8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108022:	69bb      	ldr	r3, [r7, #24]
 8108024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108028:	d05e      	beq.n	81080e8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810802a:	f7f9 ff8d 	bl	8101f48 <HAL_GetTick>
 810802e:	4602      	mov	r2, r0
 8108030:	683b      	ldr	r3, [r7, #0]
 8108032:	1ad3      	subs	r3, r2, r3
 8108034:	69ba      	ldr	r2, [r7, #24]
 8108036:	429a      	cmp	r2, r3
 8108038:	d302      	bcc.n	8108040 <UART_WaitOnFlagUntilTimeout+0x30>
 810803a:	69bb      	ldr	r3, [r7, #24]
 810803c:	2b00      	cmp	r3, #0
 810803e:	d11d      	bne.n	810807c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8108040:	68fb      	ldr	r3, [r7, #12]
 8108042:	681b      	ldr	r3, [r3, #0]
 8108044:	681a      	ldr	r2, [r3, #0]
 8108046:	68fb      	ldr	r3, [r7, #12]
 8108048:	681b      	ldr	r3, [r3, #0]
 810804a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 810804e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108050:	68fb      	ldr	r3, [r7, #12]
 8108052:	681b      	ldr	r3, [r3, #0]
 8108054:	689a      	ldr	r2, [r3, #8]
 8108056:	68fb      	ldr	r3, [r7, #12]
 8108058:	681b      	ldr	r3, [r3, #0]
 810805a:	f022 0201 	bic.w	r2, r2, #1
 810805e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8108060:	68fb      	ldr	r3, [r7, #12]
 8108062:	2220      	movs	r2, #32
 8108064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8108068:	68fb      	ldr	r3, [r7, #12]
 810806a:	2220      	movs	r2, #32
 810806c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8108070:	68fb      	ldr	r3, [r7, #12]
 8108072:	2200      	movs	r2, #0
 8108074:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8108078:	2303      	movs	r3, #3
 810807a:	e045      	b.n	8108108 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810807c:	68fb      	ldr	r3, [r7, #12]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	f003 0304 	and.w	r3, r3, #4
 8108086:	2b00      	cmp	r3, #0
 8108088:	d02e      	beq.n	81080e8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810808a:	68fb      	ldr	r3, [r7, #12]
 810808c:	681b      	ldr	r3, [r3, #0]
 810808e:	69db      	ldr	r3, [r3, #28]
 8108090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108098:	d126      	bne.n	81080e8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810809a:	68fb      	ldr	r3, [r7, #12]
 810809c:	681b      	ldr	r3, [r3, #0]
 810809e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81080a2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81080a4:	68fb      	ldr	r3, [r7, #12]
 81080a6:	681b      	ldr	r3, [r3, #0]
 81080a8:	681a      	ldr	r2, [r3, #0]
 81080aa:	68fb      	ldr	r3, [r7, #12]
 81080ac:	681b      	ldr	r3, [r3, #0]
 81080ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81080b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81080b4:	68fb      	ldr	r3, [r7, #12]
 81080b6:	681b      	ldr	r3, [r3, #0]
 81080b8:	689a      	ldr	r2, [r3, #8]
 81080ba:	68fb      	ldr	r3, [r7, #12]
 81080bc:	681b      	ldr	r3, [r3, #0]
 81080be:	f022 0201 	bic.w	r2, r2, #1
 81080c2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 81080c4:	68fb      	ldr	r3, [r7, #12]
 81080c6:	2220      	movs	r2, #32
 81080c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 81080cc:	68fb      	ldr	r3, [r7, #12]
 81080ce:	2220      	movs	r2, #32
 81080d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81080d4:	68fb      	ldr	r3, [r7, #12]
 81080d6:	2220      	movs	r2, #32
 81080d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81080dc:	68fb      	ldr	r3, [r7, #12]
 81080de:	2200      	movs	r2, #0
 81080e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 81080e4:	2303      	movs	r3, #3
 81080e6:	e00f      	b.n	8108108 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81080e8:	68fb      	ldr	r3, [r7, #12]
 81080ea:	681b      	ldr	r3, [r3, #0]
 81080ec:	69da      	ldr	r2, [r3, #28]
 81080ee:	68bb      	ldr	r3, [r7, #8]
 81080f0:	4013      	ands	r3, r2
 81080f2:	68ba      	ldr	r2, [r7, #8]
 81080f4:	429a      	cmp	r2, r3
 81080f6:	bf0c      	ite	eq
 81080f8:	2301      	moveq	r3, #1
 81080fa:	2300      	movne	r3, #0
 81080fc:	b2db      	uxtb	r3, r3
 81080fe:	461a      	mov	r2, r3
 8108100:	79fb      	ldrb	r3, [r7, #7]
 8108102:	429a      	cmp	r2, r3
 8108104:	d08d      	beq.n	8108022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108106:	2300      	movs	r3, #0
}
 8108108:	4618      	mov	r0, r3
 810810a:	3710      	adds	r7, #16
 810810c:	46bd      	mov	sp, r7
 810810e:	bd80      	pop	{r7, pc}

08108110 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8108110:	b480      	push	{r7}
 8108112:	b083      	sub	sp, #12
 8108114:	af00      	add	r7, sp, #0
 8108116:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8108118:	687b      	ldr	r3, [r7, #4]
 810811a:	681b      	ldr	r3, [r3, #0]
 810811c:	681a      	ldr	r2, [r3, #0]
 810811e:	687b      	ldr	r3, [r7, #4]
 8108120:	681b      	ldr	r3, [r3, #0]
 8108122:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8108126:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8108128:	687b      	ldr	r3, [r7, #4]
 810812a:	681b      	ldr	r3, [r3, #0]
 810812c:	689a      	ldr	r2, [r3, #8]
 810812e:	687b      	ldr	r3, [r7, #4]
 8108130:	681b      	ldr	r3, [r3, #0]
 8108132:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8108136:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	2220      	movs	r2, #32
 810813c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8108140:	bf00      	nop
 8108142:	370c      	adds	r7, #12
 8108144:	46bd      	mov	sp, r7
 8108146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810814a:	4770      	bx	lr

0810814c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810814c:	b480      	push	{r7}
 810814e:	b083      	sub	sp, #12
 8108150:	af00      	add	r7, sp, #0
 8108152:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108154:	687b      	ldr	r3, [r7, #4]
 8108156:	681b      	ldr	r3, [r3, #0]
 8108158:	681a      	ldr	r2, [r3, #0]
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	681b      	ldr	r3, [r3, #0]
 810815e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8108162:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108164:	687b      	ldr	r3, [r7, #4]
 8108166:	681b      	ldr	r3, [r3, #0]
 8108168:	689b      	ldr	r3, [r3, #8]
 810816a:	687a      	ldr	r2, [r7, #4]
 810816c:	6812      	ldr	r2, [r2, #0]
 810816e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108172:	f023 0301 	bic.w	r3, r3, #1
 8108176:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108178:	687b      	ldr	r3, [r7, #4]
 810817a:	2220      	movs	r2, #32
 810817c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108180:	687b      	ldr	r3, [r7, #4]
 8108182:	2200      	movs	r2, #0
 8108184:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8108186:	bf00      	nop
 8108188:	370c      	adds	r7, #12
 810818a:	46bd      	mov	sp, r7
 810818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108190:	4770      	bx	lr

08108192 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8108192:	b580      	push	{r7, lr}
 8108194:	b084      	sub	sp, #16
 8108196:	af00      	add	r7, sp, #0
 8108198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810819a:	687b      	ldr	r3, [r7, #4]
 810819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810819e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 81081a0:	687b      	ldr	r3, [r7, #4]
 81081a2:	69db      	ldr	r3, [r3, #28]
 81081a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81081a8:	d014      	beq.n	81081d4 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 81081aa:	68fb      	ldr	r3, [r7, #12]
 81081ac:	2200      	movs	r2, #0
 81081ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 81081b2:	68fb      	ldr	r3, [r7, #12]
 81081b4:	681b      	ldr	r3, [r3, #0]
 81081b6:	689a      	ldr	r2, [r3, #8]
 81081b8:	68fb      	ldr	r3, [r7, #12]
 81081ba:	681b      	ldr	r3, [r3, #0]
 81081bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81081c0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 81081c2:	68fb      	ldr	r3, [r7, #12]
 81081c4:	681b      	ldr	r3, [r3, #0]
 81081c6:	681a      	ldr	r2, [r3, #0]
 81081c8:	68fb      	ldr	r3, [r7, #12]
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81081d0:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 81081d2:	e002      	b.n	81081da <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 81081d4:	68f8      	ldr	r0, [r7, #12]
 81081d6:	f7f9 f9c9 	bl	810156c <HAL_UART_TxCpltCallback>
}
 81081da:	bf00      	nop
 81081dc:	3710      	adds	r7, #16
 81081de:	46bd      	mov	sp, r7
 81081e0:	bd80      	pop	{r7, pc}

081081e2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 81081e2:	b580      	push	{r7, lr}
 81081e4:	b084      	sub	sp, #16
 81081e6:	af00      	add	r7, sp, #0
 81081e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81081ea:	687b      	ldr	r3, [r7, #4]
 81081ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81081ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 81081f0:	68f8      	ldr	r0, [r7, #12]
 81081f2:	f7ff f85f 	bl	81072b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81081f6:	bf00      	nop
 81081f8:	3710      	adds	r7, #16
 81081fa:	46bd      	mov	sp, r7
 81081fc:	bd80      	pop	{r7, pc}

081081fe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 81081fe:	b580      	push	{r7, lr}
 8108200:	b084      	sub	sp, #16
 8108202:	af00      	add	r7, sp, #0
 8108204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810820a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	69db      	ldr	r3, [r3, #28]
 8108210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8108214:	d01f      	beq.n	8108256 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8108216:	68fb      	ldr	r3, [r7, #12]
 8108218:	2200      	movs	r2, #0
 810821a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810821e:	68fb      	ldr	r3, [r7, #12]
 8108220:	681b      	ldr	r3, [r3, #0]
 8108222:	681a      	ldr	r2, [r3, #0]
 8108224:	68fb      	ldr	r3, [r7, #12]
 8108226:	681b      	ldr	r3, [r3, #0]
 8108228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810822c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810822e:	68fb      	ldr	r3, [r7, #12]
 8108230:	681b      	ldr	r3, [r3, #0]
 8108232:	689a      	ldr	r2, [r3, #8]
 8108234:	68fb      	ldr	r3, [r7, #12]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	f022 0201 	bic.w	r2, r2, #1
 810823c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810823e:	68fb      	ldr	r3, [r7, #12]
 8108240:	681b      	ldr	r3, [r3, #0]
 8108242:	689a      	ldr	r2, [r3, #8]
 8108244:	68fb      	ldr	r3, [r7, #12]
 8108246:	681b      	ldr	r3, [r3, #0]
 8108248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 810824c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810824e:	68fb      	ldr	r3, [r7, #12]
 8108250:	2220      	movs	r2, #32
 8108252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8108256:	68f8      	ldr	r0, [r7, #12]
 8108258:	f7f9 f904 	bl	8101464 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810825c:	bf00      	nop
 810825e:	3710      	adds	r7, #16
 8108260:	46bd      	mov	sp, r7
 8108262:	bd80      	pop	{r7, pc}

08108264 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8108264:	b580      	push	{r7, lr}
 8108266:	b084      	sub	sp, #16
 8108268:	af00      	add	r7, sp, #0
 810826a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810826c:	687b      	ldr	r3, [r7, #4]
 810826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8108270:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8108272:	68f8      	ldr	r0, [r7, #12]
 8108274:	f7ff f828 	bl	81072c8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108278:	bf00      	nop
 810827a:	3710      	adds	r7, #16
 810827c:	46bd      	mov	sp, r7
 810827e:	bd80      	pop	{r7, pc}

08108280 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8108280:	b580      	push	{r7, lr}
 8108282:	b086      	sub	sp, #24
 8108284:	af00      	add	r7, sp, #0
 8108286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108288:	687b      	ldr	r3, [r7, #4]
 810828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810828c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810828e:	697b      	ldr	r3, [r7, #20]
 8108290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8108294:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8108296:	697b      	ldr	r3, [r7, #20]
 8108298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810829c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810829e:	697b      	ldr	r3, [r7, #20]
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	689b      	ldr	r3, [r3, #8]
 81082a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81082a8:	2b80      	cmp	r3, #128	; 0x80
 81082aa:	d109      	bne.n	81082c0 <UART_DMAError+0x40>
 81082ac:	693b      	ldr	r3, [r7, #16]
 81082ae:	2b21      	cmp	r3, #33	; 0x21
 81082b0:	d106      	bne.n	81082c0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 81082b2:	697b      	ldr	r3, [r7, #20]
 81082b4:	2200      	movs	r2, #0
 81082b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 81082ba:	6978      	ldr	r0, [r7, #20]
 81082bc:	f7ff ff28 	bl	8108110 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 81082c0:	697b      	ldr	r3, [r7, #20]
 81082c2:	681b      	ldr	r3, [r3, #0]
 81082c4:	689b      	ldr	r3, [r3, #8]
 81082c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81082ca:	2b40      	cmp	r3, #64	; 0x40
 81082cc:	d109      	bne.n	81082e2 <UART_DMAError+0x62>
 81082ce:	68fb      	ldr	r3, [r7, #12]
 81082d0:	2b22      	cmp	r3, #34	; 0x22
 81082d2:	d106      	bne.n	81082e2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 81082d4:	697b      	ldr	r3, [r7, #20]
 81082d6:	2200      	movs	r2, #0
 81082d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 81082dc:	6978      	ldr	r0, [r7, #20]
 81082de:	f7ff ff35 	bl	810814c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 81082e2:	697b      	ldr	r3, [r7, #20]
 81082e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81082e8:	f043 0210 	orr.w	r2, r3, #16
 81082ec:	697b      	ldr	r3, [r7, #20]
 81082ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 81082f2:	6978      	ldr	r0, [r7, #20]
 81082f4:	f7f9 f950 	bl	8101598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 81082f8:	bf00      	nop
 81082fa:	3718      	adds	r7, #24
 81082fc:	46bd      	mov	sp, r7
 81082fe:	bd80      	pop	{r7, pc}

08108300 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8108300:	b580      	push	{r7, lr}
 8108302:	b084      	sub	sp, #16
 8108304:	af00      	add	r7, sp, #0
 8108306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8108308:	687b      	ldr	r3, [r7, #4]
 810830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810830c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810830e:	68fb      	ldr	r3, [r7, #12]
 8108310:	2200      	movs	r2, #0
 8108312:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8108316:	68fb      	ldr	r3, [r7, #12]
 8108318:	2200      	movs	r2, #0
 810831a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810831e:	68f8      	ldr	r0, [r7, #12]
 8108320:	f7f9 f93a 	bl	8101598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108324:	bf00      	nop
 8108326:	3710      	adds	r7, #16
 8108328:	46bd      	mov	sp, r7
 810832a:	bd80      	pop	{r7, pc}

0810832c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810832c:	b580      	push	{r7, lr}
 810832e:	b082      	sub	sp, #8
 8108330:	af00      	add	r7, sp, #0
 8108332:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8108334:	687b      	ldr	r3, [r7, #4]
 8108336:	681b      	ldr	r3, [r3, #0]
 8108338:	681a      	ldr	r2, [r3, #0]
 810833a:	687b      	ldr	r3, [r7, #4]
 810833c:	681b      	ldr	r3, [r3, #0]
 810833e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8108342:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8108344:	687b      	ldr	r3, [r7, #4]
 8108346:	2220      	movs	r2, #32
 8108348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	2200      	movs	r2, #0
 8108350:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8108352:	6878      	ldr	r0, [r7, #4]
 8108354:	f7f9 f90a 	bl	810156c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8108358:	bf00      	nop
 810835a:	3708      	adds	r7, #8
 810835c:	46bd      	mov	sp, r7
 810835e:	bd80      	pop	{r7, pc}

08108360 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8108360:	b480      	push	{r7}
 8108362:	b083      	sub	sp, #12
 8108364:	af00      	add	r7, sp, #0
 8108366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8108368:	bf00      	nop
 810836a:	370c      	adds	r7, #12
 810836c:	46bd      	mov	sp, r7
 810836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108372:	4770      	bx	lr

08108374 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8108374:	b480      	push	{r7}
 8108376:	b083      	sub	sp, #12
 8108378:	af00      	add	r7, sp, #0
 810837a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810837c:	bf00      	nop
 810837e:	370c      	adds	r7, #12
 8108380:	46bd      	mov	sp, r7
 8108382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108386:	4770      	bx	lr

08108388 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8108388:	b480      	push	{r7}
 810838a:	b083      	sub	sp, #12
 810838c:	af00      	add	r7, sp, #0
 810838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8108390:	bf00      	nop
 8108392:	370c      	adds	r7, #12
 8108394:	46bd      	mov	sp, r7
 8108396:	f85d 7b04 	ldr.w	r7, [sp], #4
 810839a:	4770      	bx	lr

0810839c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810839c:	b480      	push	{r7}
 810839e:	b085      	sub	sp, #20
 81083a0:	af00      	add	r7, sp, #0
 81083a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81083a4:	687b      	ldr	r3, [r7, #4]
 81083a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 81083aa:	2b01      	cmp	r3, #1
 81083ac:	d101      	bne.n	81083b2 <HAL_UARTEx_DisableFifoMode+0x16>
 81083ae:	2302      	movs	r3, #2
 81083b0:	e027      	b.n	8108402 <HAL_UARTEx_DisableFifoMode+0x66>
 81083b2:	687b      	ldr	r3, [r7, #4]
 81083b4:	2201      	movs	r2, #1
 81083b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81083ba:	687b      	ldr	r3, [r7, #4]
 81083bc:	2224      	movs	r2, #36	; 0x24
 81083be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	681b      	ldr	r3, [r3, #0]
 81083c6:	681b      	ldr	r3, [r3, #0]
 81083c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81083ca:	687b      	ldr	r3, [r7, #4]
 81083cc:	681b      	ldr	r3, [r3, #0]
 81083ce:	681a      	ldr	r2, [r3, #0]
 81083d0:	687b      	ldr	r3, [r7, #4]
 81083d2:	681b      	ldr	r3, [r3, #0]
 81083d4:	f022 0201 	bic.w	r2, r2, #1
 81083d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81083da:	68fb      	ldr	r3, [r7, #12]
 81083dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81083e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81083e2:	687b      	ldr	r3, [r7, #4]
 81083e4:	2200      	movs	r2, #0
 81083e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81083e8:	687b      	ldr	r3, [r7, #4]
 81083ea:	681b      	ldr	r3, [r3, #0]
 81083ec:	68fa      	ldr	r2, [r7, #12]
 81083ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81083f0:	687b      	ldr	r3, [r7, #4]
 81083f2:	2220      	movs	r2, #32
 81083f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81083f8:	687b      	ldr	r3, [r7, #4]
 81083fa:	2200      	movs	r2, #0
 81083fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108400:	2300      	movs	r3, #0
}
 8108402:	4618      	mov	r0, r3
 8108404:	3714      	adds	r7, #20
 8108406:	46bd      	mov	sp, r7
 8108408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810840c:	4770      	bx	lr

0810840e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810840e:	b580      	push	{r7, lr}
 8108410:	b084      	sub	sp, #16
 8108412:	af00      	add	r7, sp, #0
 8108414:	6078      	str	r0, [r7, #4]
 8108416:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108418:	687b      	ldr	r3, [r7, #4]
 810841a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810841e:	2b01      	cmp	r3, #1
 8108420:	d101      	bne.n	8108426 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108422:	2302      	movs	r3, #2
 8108424:	e02d      	b.n	8108482 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108426:	687b      	ldr	r3, [r7, #4]
 8108428:	2201      	movs	r2, #1
 810842a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810842e:	687b      	ldr	r3, [r7, #4]
 8108430:	2224      	movs	r2, #36	; 0x24
 8108432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108436:	687b      	ldr	r3, [r7, #4]
 8108438:	681b      	ldr	r3, [r3, #0]
 810843a:	681b      	ldr	r3, [r3, #0]
 810843c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810843e:	687b      	ldr	r3, [r7, #4]
 8108440:	681b      	ldr	r3, [r3, #0]
 8108442:	681a      	ldr	r2, [r3, #0]
 8108444:	687b      	ldr	r3, [r7, #4]
 8108446:	681b      	ldr	r3, [r3, #0]
 8108448:	f022 0201 	bic.w	r2, r2, #1
 810844c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	681b      	ldr	r3, [r3, #0]
 8108452:	689b      	ldr	r3, [r3, #8]
 8108454:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108458:	687b      	ldr	r3, [r7, #4]
 810845a:	681b      	ldr	r3, [r3, #0]
 810845c:	683a      	ldr	r2, [r7, #0]
 810845e:	430a      	orrs	r2, r1
 8108460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108462:	6878      	ldr	r0, [r7, #4]
 8108464:	f000 f850 	bl	8108508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	681b      	ldr	r3, [r3, #0]
 810846c:	68fa      	ldr	r2, [r7, #12]
 810846e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108470:	687b      	ldr	r3, [r7, #4]
 8108472:	2220      	movs	r2, #32
 8108474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108478:	687b      	ldr	r3, [r7, #4]
 810847a:	2200      	movs	r2, #0
 810847c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8108480:	2300      	movs	r3, #0
}
 8108482:	4618      	mov	r0, r3
 8108484:	3710      	adds	r7, #16
 8108486:	46bd      	mov	sp, r7
 8108488:	bd80      	pop	{r7, pc}

0810848a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810848a:	b580      	push	{r7, lr}
 810848c:	b084      	sub	sp, #16
 810848e:	af00      	add	r7, sp, #0
 8108490:	6078      	str	r0, [r7, #4]
 8108492:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108494:	687b      	ldr	r3, [r7, #4]
 8108496:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810849a:	2b01      	cmp	r3, #1
 810849c:	d101      	bne.n	81084a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810849e:	2302      	movs	r3, #2
 81084a0:	e02d      	b.n	81084fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81084a2:	687b      	ldr	r3, [r7, #4]
 81084a4:	2201      	movs	r2, #1
 81084a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 81084aa:	687b      	ldr	r3, [r7, #4]
 81084ac:	2224      	movs	r2, #36	; 0x24
 81084ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81084b2:	687b      	ldr	r3, [r7, #4]
 81084b4:	681b      	ldr	r3, [r3, #0]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81084ba:	687b      	ldr	r3, [r7, #4]
 81084bc:	681b      	ldr	r3, [r3, #0]
 81084be:	681a      	ldr	r2, [r3, #0]
 81084c0:	687b      	ldr	r3, [r7, #4]
 81084c2:	681b      	ldr	r3, [r3, #0]
 81084c4:	f022 0201 	bic.w	r2, r2, #1
 81084c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81084ca:	687b      	ldr	r3, [r7, #4]
 81084cc:	681b      	ldr	r3, [r3, #0]
 81084ce:	689b      	ldr	r3, [r3, #8]
 81084d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81084d4:	687b      	ldr	r3, [r7, #4]
 81084d6:	681b      	ldr	r3, [r3, #0]
 81084d8:	683a      	ldr	r2, [r7, #0]
 81084da:	430a      	orrs	r2, r1
 81084dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81084de:	6878      	ldr	r0, [r7, #4]
 81084e0:	f000 f812 	bl	8108508 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81084e4:	687b      	ldr	r3, [r7, #4]
 81084e6:	681b      	ldr	r3, [r3, #0]
 81084e8:	68fa      	ldr	r2, [r7, #12]
 81084ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81084ec:	687b      	ldr	r3, [r7, #4]
 81084ee:	2220      	movs	r2, #32
 81084f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81084f4:	687b      	ldr	r3, [r7, #4]
 81084f6:	2200      	movs	r2, #0
 81084f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81084fc:	2300      	movs	r3, #0
}
 81084fe:	4618      	mov	r0, r3
 8108500:	3710      	adds	r7, #16
 8108502:	46bd      	mov	sp, r7
 8108504:	bd80      	pop	{r7, pc}
	...

08108508 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8108508:	b480      	push	{r7}
 810850a:	b089      	sub	sp, #36	; 0x24
 810850c:	af00      	add	r7, sp, #0
 810850e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8108510:	4a2f      	ldr	r2, [pc, #188]	; (81085d0 <UARTEx_SetNbDataToProcess+0xc8>)
 8108512:	f107 0314 	add.w	r3, r7, #20
 8108516:	e892 0003 	ldmia.w	r2, {r0, r1}
 810851a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 810851e:	4a2d      	ldr	r2, [pc, #180]	; (81085d4 <UARTEx_SetNbDataToProcess+0xcc>)
 8108520:	f107 030c 	add.w	r3, r7, #12
 8108524:	e892 0003 	ldmia.w	r2, {r0, r1}
 8108528:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810852c:	687b      	ldr	r3, [r7, #4]
 810852e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8108530:	2b00      	cmp	r3, #0
 8108532:	d108      	bne.n	8108546 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8108534:	687b      	ldr	r3, [r7, #4]
 8108536:	2201      	movs	r2, #1
 8108538:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810853c:	687b      	ldr	r3, [r7, #4]
 810853e:	2201      	movs	r2, #1
 8108540:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8108544:	e03d      	b.n	81085c2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8108546:	2310      	movs	r3, #16
 8108548:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810854a:	2310      	movs	r3, #16
 810854c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810854e:	687b      	ldr	r3, [r7, #4]
 8108550:	681b      	ldr	r3, [r3, #0]
 8108552:	689b      	ldr	r3, [r3, #8]
 8108554:	0e5b      	lsrs	r3, r3, #25
 8108556:	b2db      	uxtb	r3, r3
 8108558:	f003 0307 	and.w	r3, r3, #7
 810855c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810855e:	687b      	ldr	r3, [r7, #4]
 8108560:	681b      	ldr	r3, [r3, #0]
 8108562:	689b      	ldr	r3, [r3, #8]
 8108564:	0f5b      	lsrs	r3, r3, #29
 8108566:	b2db      	uxtb	r3, r3
 8108568:	f003 0307 	and.w	r3, r3, #7
 810856c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 810856e:	7fbb      	ldrb	r3, [r7, #30]
 8108570:	7f3a      	ldrb	r2, [r7, #28]
 8108572:	f107 0120 	add.w	r1, r7, #32
 8108576:	440a      	add	r2, r1
 8108578:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810857c:	fb02 f303 	mul.w	r3, r2, r3
 8108580:	7f3a      	ldrb	r2, [r7, #28]
 8108582:	f107 0120 	add.w	r1, r7, #32
 8108586:	440a      	add	r2, r1
 8108588:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810858c:	fb93 f3f2 	sdiv	r3, r3, r2
 8108590:	b29a      	uxth	r2, r3
 8108592:	687b      	ldr	r3, [r7, #4]
 8108594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8108598:	7ffb      	ldrb	r3, [r7, #31]
 810859a:	7f7a      	ldrb	r2, [r7, #29]
 810859c:	f107 0120 	add.w	r1, r7, #32
 81085a0:	440a      	add	r2, r1
 81085a2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 81085a6:	fb02 f303 	mul.w	r3, r2, r3
 81085aa:	7f7a      	ldrb	r2, [r7, #29]
 81085ac:	f107 0120 	add.w	r1, r7, #32
 81085b0:	440a      	add	r2, r1
 81085b2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 81085b6:	fb93 f3f2 	sdiv	r3, r3, r2
 81085ba:	b29a      	uxth	r2, r3
 81085bc:	687b      	ldr	r3, [r7, #4]
 81085be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81085c2:	bf00      	nop
 81085c4:	3724      	adds	r7, #36	; 0x24
 81085c6:	46bd      	mov	sp, r7
 81085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085cc:	4770      	bx	lr
 81085ce:	bf00      	nop
 81085d0:	0810cbb8 	.word	0x0810cbb8
 81085d4:	0810cbc0 	.word	0x0810cbc0

081085d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81085d8:	b480      	push	{r7}
 81085da:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81085dc:	bf00      	nop
 81085de:	46bd      	mov	sp, r7
 81085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085e4:	4770      	bx	lr
	...

081085e8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81085e8:	b480      	push	{r7}
 81085ea:	b085      	sub	sp, #20
 81085ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81085ee:	f3ef 8305 	mrs	r3, IPSR
 81085f2:	60bb      	str	r3, [r7, #8]
  return(result);
 81085f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81085f6:	2b00      	cmp	r3, #0
 81085f8:	d10f      	bne.n	810861a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81085fa:	f3ef 8310 	mrs	r3, PRIMASK
 81085fe:	607b      	str	r3, [r7, #4]
  return(result);
 8108600:	687b      	ldr	r3, [r7, #4]
 8108602:	2b00      	cmp	r3, #0
 8108604:	d105      	bne.n	8108612 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8108606:	f3ef 8311 	mrs	r3, BASEPRI
 810860a:	603b      	str	r3, [r7, #0]
  return(result);
 810860c:	683b      	ldr	r3, [r7, #0]
 810860e:	2b00      	cmp	r3, #0
 8108610:	d007      	beq.n	8108622 <osKernelInitialize+0x3a>
 8108612:	4b0e      	ldr	r3, [pc, #56]	; (810864c <osKernelInitialize+0x64>)
 8108614:	681b      	ldr	r3, [r3, #0]
 8108616:	2b02      	cmp	r3, #2
 8108618:	d103      	bne.n	8108622 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 810861a:	f06f 0305 	mvn.w	r3, #5
 810861e:	60fb      	str	r3, [r7, #12]
 8108620:	e00c      	b.n	810863c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8108622:	4b0a      	ldr	r3, [pc, #40]	; (810864c <osKernelInitialize+0x64>)
 8108624:	681b      	ldr	r3, [r3, #0]
 8108626:	2b00      	cmp	r3, #0
 8108628:	d105      	bne.n	8108636 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810862a:	4b08      	ldr	r3, [pc, #32]	; (810864c <osKernelInitialize+0x64>)
 810862c:	2201      	movs	r2, #1
 810862e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8108630:	2300      	movs	r3, #0
 8108632:	60fb      	str	r3, [r7, #12]
 8108634:	e002      	b.n	810863c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8108636:	f04f 33ff 	mov.w	r3, #4294967295
 810863a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 810863c:	68fb      	ldr	r3, [r7, #12]
}
 810863e:	4618      	mov	r0, r3
 8108640:	3714      	adds	r7, #20
 8108642:	46bd      	mov	sp, r7
 8108644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108648:	4770      	bx	lr
 810864a:	bf00      	nop
 810864c:	1000020c 	.word	0x1000020c

08108650 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8108650:	b580      	push	{r7, lr}
 8108652:	b084      	sub	sp, #16
 8108654:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108656:	f3ef 8305 	mrs	r3, IPSR
 810865a:	60bb      	str	r3, [r7, #8]
  return(result);
 810865c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810865e:	2b00      	cmp	r3, #0
 8108660:	d10f      	bne.n	8108682 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8108662:	f3ef 8310 	mrs	r3, PRIMASK
 8108666:	607b      	str	r3, [r7, #4]
  return(result);
 8108668:	687b      	ldr	r3, [r7, #4]
 810866a:	2b00      	cmp	r3, #0
 810866c:	d105      	bne.n	810867a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810866e:	f3ef 8311 	mrs	r3, BASEPRI
 8108672:	603b      	str	r3, [r7, #0]
  return(result);
 8108674:	683b      	ldr	r3, [r7, #0]
 8108676:	2b00      	cmp	r3, #0
 8108678:	d007      	beq.n	810868a <osKernelStart+0x3a>
 810867a:	4b0f      	ldr	r3, [pc, #60]	; (81086b8 <osKernelStart+0x68>)
 810867c:	681b      	ldr	r3, [r3, #0]
 810867e:	2b02      	cmp	r3, #2
 8108680:	d103      	bne.n	810868a <osKernelStart+0x3a>
    stat = osErrorISR;
 8108682:	f06f 0305 	mvn.w	r3, #5
 8108686:	60fb      	str	r3, [r7, #12]
 8108688:	e010      	b.n	81086ac <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 810868a:	4b0b      	ldr	r3, [pc, #44]	; (81086b8 <osKernelStart+0x68>)
 810868c:	681b      	ldr	r3, [r3, #0]
 810868e:	2b01      	cmp	r3, #1
 8108690:	d109      	bne.n	81086a6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8108692:	f7ff ffa1 	bl	81085d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8108696:	4b08      	ldr	r3, [pc, #32]	; (81086b8 <osKernelStart+0x68>)
 8108698:	2202      	movs	r2, #2
 810869a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810869c:	f001 fc86 	bl	8109fac <vTaskStartScheduler>
      stat = osOK;
 81086a0:	2300      	movs	r3, #0
 81086a2:	60fb      	str	r3, [r7, #12]
 81086a4:	e002      	b.n	81086ac <osKernelStart+0x5c>
    } else {
      stat = osError;
 81086a6:	f04f 33ff 	mov.w	r3, #4294967295
 81086aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 81086ac:	68fb      	ldr	r3, [r7, #12]
}
 81086ae:	4618      	mov	r0, r3
 81086b0:	3710      	adds	r7, #16
 81086b2:	46bd      	mov	sp, r7
 81086b4:	bd80      	pop	{r7, pc}
 81086b6:	bf00      	nop
 81086b8:	1000020c 	.word	0x1000020c

081086bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81086bc:	b580      	push	{r7, lr}
 81086be:	b090      	sub	sp, #64	; 0x40
 81086c0:	af04      	add	r7, sp, #16
 81086c2:	60f8      	str	r0, [r7, #12]
 81086c4:	60b9      	str	r1, [r7, #8]
 81086c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81086c8:	2300      	movs	r3, #0
 81086ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81086cc:	f3ef 8305 	mrs	r3, IPSR
 81086d0:	61fb      	str	r3, [r7, #28]
  return(result);
 81086d2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 81086d4:	2b00      	cmp	r3, #0
 81086d6:	f040 808f 	bne.w	81087f8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81086da:	f3ef 8310 	mrs	r3, PRIMASK
 81086de:	61bb      	str	r3, [r7, #24]
  return(result);
 81086e0:	69bb      	ldr	r3, [r7, #24]
 81086e2:	2b00      	cmp	r3, #0
 81086e4:	d105      	bne.n	81086f2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81086e6:	f3ef 8311 	mrs	r3, BASEPRI
 81086ea:	617b      	str	r3, [r7, #20]
  return(result);
 81086ec:	697b      	ldr	r3, [r7, #20]
 81086ee:	2b00      	cmp	r3, #0
 81086f0:	d003      	beq.n	81086fa <osThreadNew+0x3e>
 81086f2:	4b44      	ldr	r3, [pc, #272]	; (8108804 <osThreadNew+0x148>)
 81086f4:	681b      	ldr	r3, [r3, #0]
 81086f6:	2b02      	cmp	r3, #2
 81086f8:	d07e      	beq.n	81087f8 <osThreadNew+0x13c>
 81086fa:	68fb      	ldr	r3, [r7, #12]
 81086fc:	2b00      	cmp	r3, #0
 81086fe:	d07b      	beq.n	81087f8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8108700:	2380      	movs	r3, #128	; 0x80
 8108702:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8108704:	2318      	movs	r3, #24
 8108706:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8108708:	2300      	movs	r3, #0
 810870a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 810870c:	f04f 33ff 	mov.w	r3, #4294967295
 8108710:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8108712:	687b      	ldr	r3, [r7, #4]
 8108714:	2b00      	cmp	r3, #0
 8108716:	d045      	beq.n	81087a4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8108718:	687b      	ldr	r3, [r7, #4]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	2b00      	cmp	r3, #0
 810871e:	d002      	beq.n	8108726 <osThreadNew+0x6a>
        name = attr->name;
 8108720:	687b      	ldr	r3, [r7, #4]
 8108722:	681b      	ldr	r3, [r3, #0]
 8108724:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8108726:	687b      	ldr	r3, [r7, #4]
 8108728:	699b      	ldr	r3, [r3, #24]
 810872a:	2b00      	cmp	r3, #0
 810872c:	d002      	beq.n	8108734 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 810872e:	687b      	ldr	r3, [r7, #4]
 8108730:	699b      	ldr	r3, [r3, #24]
 8108732:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8108734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108736:	2b00      	cmp	r3, #0
 8108738:	d008      	beq.n	810874c <osThreadNew+0x90>
 810873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810873c:	2b38      	cmp	r3, #56	; 0x38
 810873e:	d805      	bhi.n	810874c <osThreadNew+0x90>
 8108740:	687b      	ldr	r3, [r7, #4]
 8108742:	685b      	ldr	r3, [r3, #4]
 8108744:	f003 0301 	and.w	r3, r3, #1
 8108748:	2b00      	cmp	r3, #0
 810874a:	d001      	beq.n	8108750 <osThreadNew+0x94>
        return (NULL);
 810874c:	2300      	movs	r3, #0
 810874e:	e054      	b.n	81087fa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8108750:	687b      	ldr	r3, [r7, #4]
 8108752:	695b      	ldr	r3, [r3, #20]
 8108754:	2b00      	cmp	r3, #0
 8108756:	d003      	beq.n	8108760 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8108758:	687b      	ldr	r3, [r7, #4]
 810875a:	695b      	ldr	r3, [r3, #20]
 810875c:	089b      	lsrs	r3, r3, #2
 810875e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8108760:	687b      	ldr	r3, [r7, #4]
 8108762:	689b      	ldr	r3, [r3, #8]
 8108764:	2b00      	cmp	r3, #0
 8108766:	d00e      	beq.n	8108786 <osThreadNew+0xca>
 8108768:	687b      	ldr	r3, [r7, #4]
 810876a:	68db      	ldr	r3, [r3, #12]
 810876c:	2b5b      	cmp	r3, #91	; 0x5b
 810876e:	d90a      	bls.n	8108786 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8108770:	687b      	ldr	r3, [r7, #4]
 8108772:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8108774:	2b00      	cmp	r3, #0
 8108776:	d006      	beq.n	8108786 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8108778:	687b      	ldr	r3, [r7, #4]
 810877a:	695b      	ldr	r3, [r3, #20]
 810877c:	2b00      	cmp	r3, #0
 810877e:	d002      	beq.n	8108786 <osThreadNew+0xca>
        mem = 1;
 8108780:	2301      	movs	r3, #1
 8108782:	623b      	str	r3, [r7, #32]
 8108784:	e010      	b.n	81087a8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8108786:	687b      	ldr	r3, [r7, #4]
 8108788:	689b      	ldr	r3, [r3, #8]
 810878a:	2b00      	cmp	r3, #0
 810878c:	d10c      	bne.n	81087a8 <osThreadNew+0xec>
 810878e:	687b      	ldr	r3, [r7, #4]
 8108790:	68db      	ldr	r3, [r3, #12]
 8108792:	2b00      	cmp	r3, #0
 8108794:	d108      	bne.n	81087a8 <osThreadNew+0xec>
 8108796:	687b      	ldr	r3, [r7, #4]
 8108798:	691b      	ldr	r3, [r3, #16]
 810879a:	2b00      	cmp	r3, #0
 810879c:	d104      	bne.n	81087a8 <osThreadNew+0xec>
          mem = 0;
 810879e:	2300      	movs	r3, #0
 81087a0:	623b      	str	r3, [r7, #32]
 81087a2:	e001      	b.n	81087a8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 81087a4:	2300      	movs	r3, #0
 81087a6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 81087a8:	6a3b      	ldr	r3, [r7, #32]
 81087aa:	2b01      	cmp	r3, #1
 81087ac:	d110      	bne.n	81087d0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81087ae:	687b      	ldr	r3, [r7, #4]
 81087b0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 81087b2:	687a      	ldr	r2, [r7, #4]
 81087b4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 81087b6:	9202      	str	r2, [sp, #8]
 81087b8:	9301      	str	r3, [sp, #4]
 81087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087bc:	9300      	str	r3, [sp, #0]
 81087be:	68bb      	ldr	r3, [r7, #8]
 81087c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81087c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81087c4:	68f8      	ldr	r0, [r7, #12]
 81087c6:	f001 fa1f 	bl	8109c08 <xTaskCreateStatic>
 81087ca:	4603      	mov	r3, r0
 81087cc:	613b      	str	r3, [r7, #16]
 81087ce:	e013      	b.n	81087f8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 81087d0:	6a3b      	ldr	r3, [r7, #32]
 81087d2:	2b00      	cmp	r3, #0
 81087d4:	d110      	bne.n	81087f8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81087d8:	b29a      	uxth	r2, r3
 81087da:	f107 0310 	add.w	r3, r7, #16
 81087de:	9301      	str	r3, [sp, #4]
 81087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81087e2:	9300      	str	r3, [sp, #0]
 81087e4:	68bb      	ldr	r3, [r7, #8]
 81087e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81087e8:	68f8      	ldr	r0, [r7, #12]
 81087ea:	f001 fa67 	bl	8109cbc <xTaskCreate>
 81087ee:	4603      	mov	r3, r0
 81087f0:	2b01      	cmp	r3, #1
 81087f2:	d001      	beq.n	81087f8 <osThreadNew+0x13c>
          hTask = NULL;
 81087f4:	2300      	movs	r3, #0
 81087f6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 81087f8:	693b      	ldr	r3, [r7, #16]
}
 81087fa:	4618      	mov	r0, r3
 81087fc:	3730      	adds	r7, #48	; 0x30
 81087fe:	46bd      	mov	sp, r7
 8108800:	bd80      	pop	{r7, pc}
 8108802:	bf00      	nop
 8108804:	1000020c 	.word	0x1000020c

08108808 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8108808:	b580      	push	{r7, lr}
 810880a:	b086      	sub	sp, #24
 810880c:	af00      	add	r7, sp, #0
 810880e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8108810:	f3ef 8305 	mrs	r3, IPSR
 8108814:	613b      	str	r3, [r7, #16]
  return(result);
 8108816:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8108818:	2b00      	cmp	r3, #0
 810881a:	d10f      	bne.n	810883c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 810881c:	f3ef 8310 	mrs	r3, PRIMASK
 8108820:	60fb      	str	r3, [r7, #12]
  return(result);
 8108822:	68fb      	ldr	r3, [r7, #12]
 8108824:	2b00      	cmp	r3, #0
 8108826:	d105      	bne.n	8108834 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8108828:	f3ef 8311 	mrs	r3, BASEPRI
 810882c:	60bb      	str	r3, [r7, #8]
  return(result);
 810882e:	68bb      	ldr	r3, [r7, #8]
 8108830:	2b00      	cmp	r3, #0
 8108832:	d007      	beq.n	8108844 <osDelay+0x3c>
 8108834:	4b0a      	ldr	r3, [pc, #40]	; (8108860 <osDelay+0x58>)
 8108836:	681b      	ldr	r3, [r3, #0]
 8108838:	2b02      	cmp	r3, #2
 810883a:	d103      	bne.n	8108844 <osDelay+0x3c>
    stat = osErrorISR;
 810883c:	f06f 0305 	mvn.w	r3, #5
 8108840:	617b      	str	r3, [r7, #20]
 8108842:	e007      	b.n	8108854 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8108844:	2300      	movs	r3, #0
 8108846:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8108848:	687b      	ldr	r3, [r7, #4]
 810884a:	2b00      	cmp	r3, #0
 810884c:	d002      	beq.n	8108854 <osDelay+0x4c>
      vTaskDelay(ticks);
 810884e:	6878      	ldr	r0, [r7, #4]
 8108850:	f001 fb78 	bl	8109f44 <vTaskDelay>
    }
  }

  return (stat);
 8108854:	697b      	ldr	r3, [r7, #20]
}
 8108856:	4618      	mov	r0, r3
 8108858:	3718      	adds	r7, #24
 810885a:	46bd      	mov	sp, r7
 810885c:	bd80      	pop	{r7, pc}
 810885e:	bf00      	nop
 8108860:	1000020c 	.word	0x1000020c

08108864 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8108864:	b480      	push	{r7}
 8108866:	b085      	sub	sp, #20
 8108868:	af00      	add	r7, sp, #0
 810886a:	60f8      	str	r0, [r7, #12]
 810886c:	60b9      	str	r1, [r7, #8]
 810886e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8108870:	68fb      	ldr	r3, [r7, #12]
 8108872:	4a07      	ldr	r2, [pc, #28]	; (8108890 <vApplicationGetIdleTaskMemory+0x2c>)
 8108874:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8108876:	68bb      	ldr	r3, [r7, #8]
 8108878:	4a06      	ldr	r2, [pc, #24]	; (8108894 <vApplicationGetIdleTaskMemory+0x30>)
 810887a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810887c:	687b      	ldr	r3, [r7, #4]
 810887e:	2280      	movs	r2, #128	; 0x80
 8108880:	601a      	str	r2, [r3, #0]
}
 8108882:	bf00      	nop
 8108884:	3714      	adds	r7, #20
 8108886:	46bd      	mov	sp, r7
 8108888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810888c:	4770      	bx	lr
 810888e:	bf00      	nop
 8108890:	10000210 	.word	0x10000210
 8108894:	1000026c 	.word	0x1000026c

08108898 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8108898:	b480      	push	{r7}
 810889a:	b085      	sub	sp, #20
 810889c:	af00      	add	r7, sp, #0
 810889e:	60f8      	str	r0, [r7, #12]
 81088a0:	60b9      	str	r1, [r7, #8]
 81088a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 81088a4:	68fb      	ldr	r3, [r7, #12]
 81088a6:	4a07      	ldr	r2, [pc, #28]	; (81088c4 <vApplicationGetTimerTaskMemory+0x2c>)
 81088a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 81088aa:	68bb      	ldr	r3, [r7, #8]
 81088ac:	4a06      	ldr	r2, [pc, #24]	; (81088c8 <vApplicationGetTimerTaskMemory+0x30>)
 81088ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 81088b6:	601a      	str	r2, [r3, #0]
}
 81088b8:	bf00      	nop
 81088ba:	3714      	adds	r7, #20
 81088bc:	46bd      	mov	sp, r7
 81088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088c2:	4770      	bx	lr
 81088c4:	1000046c 	.word	0x1000046c
 81088c8:	100004c8 	.word	0x100004c8

081088cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81088cc:	b580      	push	{r7, lr}
 81088ce:	b08a      	sub	sp, #40	; 0x28
 81088d0:	af00      	add	r7, sp, #0
 81088d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81088d4:	2300      	movs	r3, #0
 81088d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81088d8:	f001 fbcc 	bl	810a074 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81088dc:	4b57      	ldr	r3, [pc, #348]	; (8108a3c <pvPortMalloc+0x170>)
 81088de:	681b      	ldr	r3, [r3, #0]
 81088e0:	2b00      	cmp	r3, #0
 81088e2:	d101      	bne.n	81088e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81088e4:	f000 f90c 	bl	8108b00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81088e8:	4b55      	ldr	r3, [pc, #340]	; (8108a40 <pvPortMalloc+0x174>)
 81088ea:	681a      	ldr	r2, [r3, #0]
 81088ec:	687b      	ldr	r3, [r7, #4]
 81088ee:	4013      	ands	r3, r2
 81088f0:	2b00      	cmp	r3, #0
 81088f2:	f040 808c 	bne.w	8108a0e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	2b00      	cmp	r3, #0
 81088fa:	d01c      	beq.n	8108936 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 81088fc:	2208      	movs	r2, #8
 81088fe:	687b      	ldr	r3, [r7, #4]
 8108900:	4413      	add	r3, r2
 8108902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8108904:	687b      	ldr	r3, [r7, #4]
 8108906:	f003 0307 	and.w	r3, r3, #7
 810890a:	2b00      	cmp	r3, #0
 810890c:	d013      	beq.n	8108936 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810890e:	687b      	ldr	r3, [r7, #4]
 8108910:	f023 0307 	bic.w	r3, r3, #7
 8108914:	3308      	adds	r3, #8
 8108916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8108918:	687b      	ldr	r3, [r7, #4]
 810891a:	f003 0307 	and.w	r3, r3, #7
 810891e:	2b00      	cmp	r3, #0
 8108920:	d009      	beq.n	8108936 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8108922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108926:	f383 8811 	msr	BASEPRI, r3
 810892a:	f3bf 8f6f 	isb	sy
 810892e:	f3bf 8f4f 	dsb	sy
 8108932:	617b      	str	r3, [r7, #20]
 8108934:	e7fe      	b.n	8108934 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8108936:	687b      	ldr	r3, [r7, #4]
 8108938:	2b00      	cmp	r3, #0
 810893a:	d068      	beq.n	8108a0e <pvPortMalloc+0x142>
 810893c:	4b41      	ldr	r3, [pc, #260]	; (8108a44 <pvPortMalloc+0x178>)
 810893e:	681b      	ldr	r3, [r3, #0]
 8108940:	687a      	ldr	r2, [r7, #4]
 8108942:	429a      	cmp	r2, r3
 8108944:	d863      	bhi.n	8108a0e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8108946:	4b40      	ldr	r3, [pc, #256]	; (8108a48 <pvPortMalloc+0x17c>)
 8108948:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810894a:	4b3f      	ldr	r3, [pc, #252]	; (8108a48 <pvPortMalloc+0x17c>)
 810894c:	681b      	ldr	r3, [r3, #0]
 810894e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8108950:	e004      	b.n	810895c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8108952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108954:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8108956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108958:	681b      	ldr	r3, [r3, #0]
 810895a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810895e:	685b      	ldr	r3, [r3, #4]
 8108960:	687a      	ldr	r2, [r7, #4]
 8108962:	429a      	cmp	r2, r3
 8108964:	d903      	bls.n	810896e <pvPortMalloc+0xa2>
 8108966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108968:	681b      	ldr	r3, [r3, #0]
 810896a:	2b00      	cmp	r3, #0
 810896c:	d1f1      	bne.n	8108952 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810896e:	4b33      	ldr	r3, [pc, #204]	; (8108a3c <pvPortMalloc+0x170>)
 8108970:	681b      	ldr	r3, [r3, #0]
 8108972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8108974:	429a      	cmp	r2, r3
 8108976:	d04a      	beq.n	8108a0e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8108978:	6a3b      	ldr	r3, [r7, #32]
 810897a:	681b      	ldr	r3, [r3, #0]
 810897c:	2208      	movs	r2, #8
 810897e:	4413      	add	r3, r2
 8108980:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8108982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108984:	681a      	ldr	r2, [r3, #0]
 8108986:	6a3b      	ldr	r3, [r7, #32]
 8108988:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810898c:	685a      	ldr	r2, [r3, #4]
 810898e:	687b      	ldr	r3, [r7, #4]
 8108990:	1ad2      	subs	r2, r2, r3
 8108992:	2308      	movs	r3, #8
 8108994:	005b      	lsls	r3, r3, #1
 8108996:	429a      	cmp	r2, r3
 8108998:	d91e      	bls.n	81089d8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810899a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	4413      	add	r3, r2
 81089a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 81089a2:	69bb      	ldr	r3, [r7, #24]
 81089a4:	f003 0307 	and.w	r3, r3, #7
 81089a8:	2b00      	cmp	r3, #0
 81089aa:	d009      	beq.n	81089c0 <pvPortMalloc+0xf4>
 81089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 81089b0:	f383 8811 	msr	BASEPRI, r3
 81089b4:	f3bf 8f6f 	isb	sy
 81089b8:	f3bf 8f4f 	dsb	sy
 81089bc:	613b      	str	r3, [r7, #16]
 81089be:	e7fe      	b.n	81089be <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 81089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089c2:	685a      	ldr	r2, [r3, #4]
 81089c4:	687b      	ldr	r3, [r7, #4]
 81089c6:	1ad2      	subs	r2, r2, r3
 81089c8:	69bb      	ldr	r3, [r7, #24]
 81089ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 81089cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089ce:	687a      	ldr	r2, [r7, #4]
 81089d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 81089d2:	69b8      	ldr	r0, [r7, #24]
 81089d4:	f000 f8f6 	bl	8108bc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 81089d8:	4b1a      	ldr	r3, [pc, #104]	; (8108a44 <pvPortMalloc+0x178>)
 81089da:	681a      	ldr	r2, [r3, #0]
 81089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089de:	685b      	ldr	r3, [r3, #4]
 81089e0:	1ad3      	subs	r3, r2, r3
 81089e2:	4a18      	ldr	r2, [pc, #96]	; (8108a44 <pvPortMalloc+0x178>)
 81089e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 81089e6:	4b17      	ldr	r3, [pc, #92]	; (8108a44 <pvPortMalloc+0x178>)
 81089e8:	681a      	ldr	r2, [r3, #0]
 81089ea:	4b18      	ldr	r3, [pc, #96]	; (8108a4c <pvPortMalloc+0x180>)
 81089ec:	681b      	ldr	r3, [r3, #0]
 81089ee:	429a      	cmp	r2, r3
 81089f0:	d203      	bcs.n	81089fa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 81089f2:	4b14      	ldr	r3, [pc, #80]	; (8108a44 <pvPortMalloc+0x178>)
 81089f4:	681b      	ldr	r3, [r3, #0]
 81089f6:	4a15      	ldr	r2, [pc, #84]	; (8108a4c <pvPortMalloc+0x180>)
 81089f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 81089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81089fc:	685a      	ldr	r2, [r3, #4]
 81089fe:	4b10      	ldr	r3, [pc, #64]	; (8108a40 <pvPortMalloc+0x174>)
 8108a00:	681b      	ldr	r3, [r3, #0]
 8108a02:	431a      	orrs	r2, r3
 8108a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8108a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108a0a:	2200      	movs	r2, #0
 8108a0c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8108a0e:	f001 fb3f 	bl	810a090 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8108a12:	69fb      	ldr	r3, [r7, #28]
 8108a14:	f003 0307 	and.w	r3, r3, #7
 8108a18:	2b00      	cmp	r3, #0
 8108a1a:	d009      	beq.n	8108a30 <pvPortMalloc+0x164>
 8108a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a20:	f383 8811 	msr	BASEPRI, r3
 8108a24:	f3bf 8f6f 	isb	sy
 8108a28:	f3bf 8f4f 	dsb	sy
 8108a2c:	60fb      	str	r3, [r7, #12]
 8108a2e:	e7fe      	b.n	8108a2e <pvPortMalloc+0x162>
	return pvReturn;
 8108a30:	69fb      	ldr	r3, [r7, #28]
}
 8108a32:	4618      	mov	r0, r3
 8108a34:	3728      	adds	r7, #40	; 0x28
 8108a36:	46bd      	mov	sp, r7
 8108a38:	bd80      	pop	{r7, pc}
 8108a3a:	bf00      	nop
 8108a3c:	100044d0 	.word	0x100044d0
 8108a40:	100044dc 	.word	0x100044dc
 8108a44:	100044d4 	.word	0x100044d4
 8108a48:	100044c8 	.word	0x100044c8
 8108a4c:	100044d8 	.word	0x100044d8

08108a50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8108a50:	b580      	push	{r7, lr}
 8108a52:	b086      	sub	sp, #24
 8108a54:	af00      	add	r7, sp, #0
 8108a56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8108a58:	687b      	ldr	r3, [r7, #4]
 8108a5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8108a5c:	687b      	ldr	r3, [r7, #4]
 8108a5e:	2b00      	cmp	r3, #0
 8108a60:	d046      	beq.n	8108af0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8108a62:	2308      	movs	r3, #8
 8108a64:	425b      	negs	r3, r3
 8108a66:	697a      	ldr	r2, [r7, #20]
 8108a68:	4413      	add	r3, r2
 8108a6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8108a6c:	697b      	ldr	r3, [r7, #20]
 8108a6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8108a70:	693b      	ldr	r3, [r7, #16]
 8108a72:	685a      	ldr	r2, [r3, #4]
 8108a74:	4b20      	ldr	r3, [pc, #128]	; (8108af8 <vPortFree+0xa8>)
 8108a76:	681b      	ldr	r3, [r3, #0]
 8108a78:	4013      	ands	r3, r2
 8108a7a:	2b00      	cmp	r3, #0
 8108a7c:	d109      	bne.n	8108a92 <vPortFree+0x42>
 8108a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a82:	f383 8811 	msr	BASEPRI, r3
 8108a86:	f3bf 8f6f 	isb	sy
 8108a8a:	f3bf 8f4f 	dsb	sy
 8108a8e:	60fb      	str	r3, [r7, #12]
 8108a90:	e7fe      	b.n	8108a90 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8108a92:	693b      	ldr	r3, [r7, #16]
 8108a94:	681b      	ldr	r3, [r3, #0]
 8108a96:	2b00      	cmp	r3, #0
 8108a98:	d009      	beq.n	8108aae <vPortFree+0x5e>
 8108a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108a9e:	f383 8811 	msr	BASEPRI, r3
 8108aa2:	f3bf 8f6f 	isb	sy
 8108aa6:	f3bf 8f4f 	dsb	sy
 8108aaa:	60bb      	str	r3, [r7, #8]
 8108aac:	e7fe      	b.n	8108aac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8108aae:	693b      	ldr	r3, [r7, #16]
 8108ab0:	685a      	ldr	r2, [r3, #4]
 8108ab2:	4b11      	ldr	r3, [pc, #68]	; (8108af8 <vPortFree+0xa8>)
 8108ab4:	681b      	ldr	r3, [r3, #0]
 8108ab6:	4013      	ands	r3, r2
 8108ab8:	2b00      	cmp	r3, #0
 8108aba:	d019      	beq.n	8108af0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8108abc:	693b      	ldr	r3, [r7, #16]
 8108abe:	681b      	ldr	r3, [r3, #0]
 8108ac0:	2b00      	cmp	r3, #0
 8108ac2:	d115      	bne.n	8108af0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8108ac4:	693b      	ldr	r3, [r7, #16]
 8108ac6:	685a      	ldr	r2, [r3, #4]
 8108ac8:	4b0b      	ldr	r3, [pc, #44]	; (8108af8 <vPortFree+0xa8>)
 8108aca:	681b      	ldr	r3, [r3, #0]
 8108acc:	43db      	mvns	r3, r3
 8108ace:	401a      	ands	r2, r3
 8108ad0:	693b      	ldr	r3, [r7, #16]
 8108ad2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8108ad4:	f001 face 	bl	810a074 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8108ad8:	693b      	ldr	r3, [r7, #16]
 8108ada:	685a      	ldr	r2, [r3, #4]
 8108adc:	4b07      	ldr	r3, [pc, #28]	; (8108afc <vPortFree+0xac>)
 8108ade:	681b      	ldr	r3, [r3, #0]
 8108ae0:	4413      	add	r3, r2
 8108ae2:	4a06      	ldr	r2, [pc, #24]	; (8108afc <vPortFree+0xac>)
 8108ae4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8108ae6:	6938      	ldr	r0, [r7, #16]
 8108ae8:	f000 f86c 	bl	8108bc4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8108aec:	f001 fad0 	bl	810a090 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8108af0:	bf00      	nop
 8108af2:	3718      	adds	r7, #24
 8108af4:	46bd      	mov	sp, r7
 8108af6:	bd80      	pop	{r7, pc}
 8108af8:	100044dc 	.word	0x100044dc
 8108afc:	100044d4 	.word	0x100044d4

08108b00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8108b00:	b480      	push	{r7}
 8108b02:	b085      	sub	sp, #20
 8108b04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8108b06:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8108b0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8108b0c:	4b27      	ldr	r3, [pc, #156]	; (8108bac <prvHeapInit+0xac>)
 8108b0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8108b10:	68fb      	ldr	r3, [r7, #12]
 8108b12:	f003 0307 	and.w	r3, r3, #7
 8108b16:	2b00      	cmp	r3, #0
 8108b18:	d00c      	beq.n	8108b34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8108b1a:	68fb      	ldr	r3, [r7, #12]
 8108b1c:	3307      	adds	r3, #7
 8108b1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108b20:	68fb      	ldr	r3, [r7, #12]
 8108b22:	f023 0307 	bic.w	r3, r3, #7
 8108b26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8108b28:	68ba      	ldr	r2, [r7, #8]
 8108b2a:	68fb      	ldr	r3, [r7, #12]
 8108b2c:	1ad3      	subs	r3, r2, r3
 8108b2e:	4a1f      	ldr	r2, [pc, #124]	; (8108bac <prvHeapInit+0xac>)
 8108b30:	4413      	add	r3, r2
 8108b32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8108b34:	68fb      	ldr	r3, [r7, #12]
 8108b36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8108b38:	4a1d      	ldr	r2, [pc, #116]	; (8108bb0 <prvHeapInit+0xb0>)
 8108b3a:	687b      	ldr	r3, [r7, #4]
 8108b3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8108b3e:	4b1c      	ldr	r3, [pc, #112]	; (8108bb0 <prvHeapInit+0xb0>)
 8108b40:	2200      	movs	r2, #0
 8108b42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	68ba      	ldr	r2, [r7, #8]
 8108b48:	4413      	add	r3, r2
 8108b4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8108b4c:	2208      	movs	r2, #8
 8108b4e:	68fb      	ldr	r3, [r7, #12]
 8108b50:	1a9b      	subs	r3, r3, r2
 8108b52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8108b54:	68fb      	ldr	r3, [r7, #12]
 8108b56:	f023 0307 	bic.w	r3, r3, #7
 8108b5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8108b5c:	68fb      	ldr	r3, [r7, #12]
 8108b5e:	4a15      	ldr	r2, [pc, #84]	; (8108bb4 <prvHeapInit+0xb4>)
 8108b60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8108b62:	4b14      	ldr	r3, [pc, #80]	; (8108bb4 <prvHeapInit+0xb4>)
 8108b64:	681b      	ldr	r3, [r3, #0]
 8108b66:	2200      	movs	r2, #0
 8108b68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8108b6a:	4b12      	ldr	r3, [pc, #72]	; (8108bb4 <prvHeapInit+0xb4>)
 8108b6c:	681b      	ldr	r3, [r3, #0]
 8108b6e:	2200      	movs	r2, #0
 8108b70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8108b72:	687b      	ldr	r3, [r7, #4]
 8108b74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8108b76:	683b      	ldr	r3, [r7, #0]
 8108b78:	68fa      	ldr	r2, [r7, #12]
 8108b7a:	1ad2      	subs	r2, r2, r3
 8108b7c:	683b      	ldr	r3, [r7, #0]
 8108b7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8108b80:	4b0c      	ldr	r3, [pc, #48]	; (8108bb4 <prvHeapInit+0xb4>)
 8108b82:	681a      	ldr	r2, [r3, #0]
 8108b84:	683b      	ldr	r3, [r7, #0]
 8108b86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108b88:	683b      	ldr	r3, [r7, #0]
 8108b8a:	685b      	ldr	r3, [r3, #4]
 8108b8c:	4a0a      	ldr	r2, [pc, #40]	; (8108bb8 <prvHeapInit+0xb8>)
 8108b8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8108b90:	683b      	ldr	r3, [r7, #0]
 8108b92:	685b      	ldr	r3, [r3, #4]
 8108b94:	4a09      	ldr	r2, [pc, #36]	; (8108bbc <prvHeapInit+0xbc>)
 8108b96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8108b98:	4b09      	ldr	r3, [pc, #36]	; (8108bc0 <prvHeapInit+0xc0>)
 8108b9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8108b9e:	601a      	str	r2, [r3, #0]
}
 8108ba0:	bf00      	nop
 8108ba2:	3714      	adds	r7, #20
 8108ba4:	46bd      	mov	sp, r7
 8108ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108baa:	4770      	bx	lr
 8108bac:	100008c8 	.word	0x100008c8
 8108bb0:	100044c8 	.word	0x100044c8
 8108bb4:	100044d0 	.word	0x100044d0
 8108bb8:	100044d8 	.word	0x100044d8
 8108bbc:	100044d4 	.word	0x100044d4
 8108bc0:	100044dc 	.word	0x100044dc

08108bc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8108bc4:	b480      	push	{r7}
 8108bc6:	b085      	sub	sp, #20
 8108bc8:	af00      	add	r7, sp, #0
 8108bca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8108bcc:	4b28      	ldr	r3, [pc, #160]	; (8108c70 <prvInsertBlockIntoFreeList+0xac>)
 8108bce:	60fb      	str	r3, [r7, #12]
 8108bd0:	e002      	b.n	8108bd8 <prvInsertBlockIntoFreeList+0x14>
 8108bd2:	68fb      	ldr	r3, [r7, #12]
 8108bd4:	681b      	ldr	r3, [r3, #0]
 8108bd6:	60fb      	str	r3, [r7, #12]
 8108bd8:	68fb      	ldr	r3, [r7, #12]
 8108bda:	681b      	ldr	r3, [r3, #0]
 8108bdc:	687a      	ldr	r2, [r7, #4]
 8108bde:	429a      	cmp	r2, r3
 8108be0:	d8f7      	bhi.n	8108bd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8108be2:	68fb      	ldr	r3, [r7, #12]
 8108be4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8108be6:	68fb      	ldr	r3, [r7, #12]
 8108be8:	685b      	ldr	r3, [r3, #4]
 8108bea:	68ba      	ldr	r2, [r7, #8]
 8108bec:	4413      	add	r3, r2
 8108bee:	687a      	ldr	r2, [r7, #4]
 8108bf0:	429a      	cmp	r2, r3
 8108bf2:	d108      	bne.n	8108c06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8108bf4:	68fb      	ldr	r3, [r7, #12]
 8108bf6:	685a      	ldr	r2, [r3, #4]
 8108bf8:	687b      	ldr	r3, [r7, #4]
 8108bfa:	685b      	ldr	r3, [r3, #4]
 8108bfc:	441a      	add	r2, r3
 8108bfe:	68fb      	ldr	r3, [r7, #12]
 8108c00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8108c02:	68fb      	ldr	r3, [r7, #12]
 8108c04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8108c06:	687b      	ldr	r3, [r7, #4]
 8108c08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	685b      	ldr	r3, [r3, #4]
 8108c0e:	68ba      	ldr	r2, [r7, #8]
 8108c10:	441a      	add	r2, r3
 8108c12:	68fb      	ldr	r3, [r7, #12]
 8108c14:	681b      	ldr	r3, [r3, #0]
 8108c16:	429a      	cmp	r2, r3
 8108c18:	d118      	bne.n	8108c4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8108c1a:	68fb      	ldr	r3, [r7, #12]
 8108c1c:	681a      	ldr	r2, [r3, #0]
 8108c1e:	4b15      	ldr	r3, [pc, #84]	; (8108c74 <prvInsertBlockIntoFreeList+0xb0>)
 8108c20:	681b      	ldr	r3, [r3, #0]
 8108c22:	429a      	cmp	r2, r3
 8108c24:	d00d      	beq.n	8108c42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	685a      	ldr	r2, [r3, #4]
 8108c2a:	68fb      	ldr	r3, [r7, #12]
 8108c2c:	681b      	ldr	r3, [r3, #0]
 8108c2e:	685b      	ldr	r3, [r3, #4]
 8108c30:	441a      	add	r2, r3
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8108c36:	68fb      	ldr	r3, [r7, #12]
 8108c38:	681b      	ldr	r3, [r3, #0]
 8108c3a:	681a      	ldr	r2, [r3, #0]
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	601a      	str	r2, [r3, #0]
 8108c40:	e008      	b.n	8108c54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8108c42:	4b0c      	ldr	r3, [pc, #48]	; (8108c74 <prvInsertBlockIntoFreeList+0xb0>)
 8108c44:	681a      	ldr	r2, [r3, #0]
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	601a      	str	r2, [r3, #0]
 8108c4a:	e003      	b.n	8108c54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8108c4c:	68fb      	ldr	r3, [r7, #12]
 8108c4e:	681a      	ldr	r2, [r3, #0]
 8108c50:	687b      	ldr	r3, [r7, #4]
 8108c52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8108c54:	68fa      	ldr	r2, [r7, #12]
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	429a      	cmp	r2, r3
 8108c5a:	d002      	beq.n	8108c62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8108c5c:	68fb      	ldr	r3, [r7, #12]
 8108c5e:	687a      	ldr	r2, [r7, #4]
 8108c60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8108c62:	bf00      	nop
 8108c64:	3714      	adds	r7, #20
 8108c66:	46bd      	mov	sp, r7
 8108c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c6c:	4770      	bx	lr
 8108c6e:	bf00      	nop
 8108c70:	100044c8 	.word	0x100044c8
 8108c74:	100044d0 	.word	0x100044d0

08108c78 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8108c78:	b480      	push	{r7}
 8108c7a:	b083      	sub	sp, #12
 8108c7c:	af00      	add	r7, sp, #0
 8108c7e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108c80:	687b      	ldr	r3, [r7, #4]
 8108c82:	f103 0208 	add.w	r2, r3, #8
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8108c90:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108c92:	687b      	ldr	r3, [r7, #4]
 8108c94:	f103 0208 	add.w	r2, r3, #8
 8108c98:	687b      	ldr	r3, [r7, #4]
 8108c9a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8108c9c:	687b      	ldr	r3, [r7, #4]
 8108c9e:	f103 0208 	add.w	r2, r3, #8
 8108ca2:	687b      	ldr	r3, [r7, #4]
 8108ca4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8108ca6:	687b      	ldr	r3, [r7, #4]
 8108ca8:	2200      	movs	r2, #0
 8108caa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8108cac:	bf00      	nop
 8108cae:	370c      	adds	r7, #12
 8108cb0:	46bd      	mov	sp, r7
 8108cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cb6:	4770      	bx	lr

08108cb8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8108cb8:	b480      	push	{r7}
 8108cba:	b083      	sub	sp, #12
 8108cbc:	af00      	add	r7, sp, #0
 8108cbe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	2200      	movs	r2, #0
 8108cc4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8108cc6:	bf00      	nop
 8108cc8:	370c      	adds	r7, #12
 8108cca:	46bd      	mov	sp, r7
 8108ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cd0:	4770      	bx	lr

08108cd2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8108cd2:	b480      	push	{r7}
 8108cd4:	b085      	sub	sp, #20
 8108cd6:	af00      	add	r7, sp, #0
 8108cd8:	6078      	str	r0, [r7, #4]
 8108cda:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8108cdc:	687b      	ldr	r3, [r7, #4]
 8108cde:	685b      	ldr	r3, [r3, #4]
 8108ce0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8108ce2:	683b      	ldr	r3, [r7, #0]
 8108ce4:	68fa      	ldr	r2, [r7, #12]
 8108ce6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8108ce8:	68fb      	ldr	r3, [r7, #12]
 8108cea:	689a      	ldr	r2, [r3, #8]
 8108cec:	683b      	ldr	r3, [r7, #0]
 8108cee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8108cf0:	68fb      	ldr	r3, [r7, #12]
 8108cf2:	689b      	ldr	r3, [r3, #8]
 8108cf4:	683a      	ldr	r2, [r7, #0]
 8108cf6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8108cf8:	68fb      	ldr	r3, [r7, #12]
 8108cfa:	683a      	ldr	r2, [r7, #0]
 8108cfc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8108cfe:	683b      	ldr	r3, [r7, #0]
 8108d00:	687a      	ldr	r2, [r7, #4]
 8108d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108d04:	687b      	ldr	r3, [r7, #4]
 8108d06:	681b      	ldr	r3, [r3, #0]
 8108d08:	1c5a      	adds	r2, r3, #1
 8108d0a:	687b      	ldr	r3, [r7, #4]
 8108d0c:	601a      	str	r2, [r3, #0]
}
 8108d0e:	bf00      	nop
 8108d10:	3714      	adds	r7, #20
 8108d12:	46bd      	mov	sp, r7
 8108d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d18:	4770      	bx	lr

08108d1a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8108d1a:	b480      	push	{r7}
 8108d1c:	b085      	sub	sp, #20
 8108d1e:	af00      	add	r7, sp, #0
 8108d20:	6078      	str	r0, [r7, #4]
 8108d22:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8108d24:	683b      	ldr	r3, [r7, #0]
 8108d26:	681b      	ldr	r3, [r3, #0]
 8108d28:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8108d2a:	68bb      	ldr	r3, [r7, #8]
 8108d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108d30:	d103      	bne.n	8108d3a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	691b      	ldr	r3, [r3, #16]
 8108d36:	60fb      	str	r3, [r7, #12]
 8108d38:	e00c      	b.n	8108d54 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8108d3a:	687b      	ldr	r3, [r7, #4]
 8108d3c:	3308      	adds	r3, #8
 8108d3e:	60fb      	str	r3, [r7, #12]
 8108d40:	e002      	b.n	8108d48 <vListInsert+0x2e>
 8108d42:	68fb      	ldr	r3, [r7, #12]
 8108d44:	685b      	ldr	r3, [r3, #4]
 8108d46:	60fb      	str	r3, [r7, #12]
 8108d48:	68fb      	ldr	r3, [r7, #12]
 8108d4a:	685b      	ldr	r3, [r3, #4]
 8108d4c:	681b      	ldr	r3, [r3, #0]
 8108d4e:	68ba      	ldr	r2, [r7, #8]
 8108d50:	429a      	cmp	r2, r3
 8108d52:	d2f6      	bcs.n	8108d42 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8108d54:	68fb      	ldr	r3, [r7, #12]
 8108d56:	685a      	ldr	r2, [r3, #4]
 8108d58:	683b      	ldr	r3, [r7, #0]
 8108d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8108d5c:	683b      	ldr	r3, [r7, #0]
 8108d5e:	685b      	ldr	r3, [r3, #4]
 8108d60:	683a      	ldr	r2, [r7, #0]
 8108d62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8108d64:	683b      	ldr	r3, [r7, #0]
 8108d66:	68fa      	ldr	r2, [r7, #12]
 8108d68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8108d6a:	68fb      	ldr	r3, [r7, #12]
 8108d6c:	683a      	ldr	r2, [r7, #0]
 8108d6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8108d70:	683b      	ldr	r3, [r7, #0]
 8108d72:	687a      	ldr	r2, [r7, #4]
 8108d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8108d76:	687b      	ldr	r3, [r7, #4]
 8108d78:	681b      	ldr	r3, [r3, #0]
 8108d7a:	1c5a      	adds	r2, r3, #1
 8108d7c:	687b      	ldr	r3, [r7, #4]
 8108d7e:	601a      	str	r2, [r3, #0]
}
 8108d80:	bf00      	nop
 8108d82:	3714      	adds	r7, #20
 8108d84:	46bd      	mov	sp, r7
 8108d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d8a:	4770      	bx	lr

08108d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8108d8c:	b480      	push	{r7}
 8108d8e:	b085      	sub	sp, #20
 8108d90:	af00      	add	r7, sp, #0
 8108d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8108d94:	687b      	ldr	r3, [r7, #4]
 8108d96:	691b      	ldr	r3, [r3, #16]
 8108d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8108d9a:	687b      	ldr	r3, [r7, #4]
 8108d9c:	685b      	ldr	r3, [r3, #4]
 8108d9e:	687a      	ldr	r2, [r7, #4]
 8108da0:	6892      	ldr	r2, [r2, #8]
 8108da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	689b      	ldr	r3, [r3, #8]
 8108da8:	687a      	ldr	r2, [r7, #4]
 8108daa:	6852      	ldr	r2, [r2, #4]
 8108dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8108dae:	68fb      	ldr	r3, [r7, #12]
 8108db0:	685b      	ldr	r3, [r3, #4]
 8108db2:	687a      	ldr	r2, [r7, #4]
 8108db4:	429a      	cmp	r2, r3
 8108db6:	d103      	bne.n	8108dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	689a      	ldr	r2, [r3, #8]
 8108dbc:	68fb      	ldr	r3, [r7, #12]
 8108dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8108dc0:	687b      	ldr	r3, [r7, #4]
 8108dc2:	2200      	movs	r2, #0
 8108dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8108dc6:	68fb      	ldr	r3, [r7, #12]
 8108dc8:	681b      	ldr	r3, [r3, #0]
 8108dca:	1e5a      	subs	r2, r3, #1
 8108dcc:	68fb      	ldr	r3, [r7, #12]
 8108dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8108dd0:	68fb      	ldr	r3, [r7, #12]
 8108dd2:	681b      	ldr	r3, [r3, #0]
}
 8108dd4:	4618      	mov	r0, r3
 8108dd6:	3714      	adds	r7, #20
 8108dd8:	46bd      	mov	sp, r7
 8108dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dde:	4770      	bx	lr

08108de0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8108de0:	b480      	push	{r7}
 8108de2:	b085      	sub	sp, #20
 8108de4:	af00      	add	r7, sp, #0
 8108de6:	60f8      	str	r0, [r7, #12]
 8108de8:	60b9      	str	r1, [r7, #8]
 8108dea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8108dec:	68fb      	ldr	r3, [r7, #12]
 8108dee:	3b04      	subs	r3, #4
 8108df0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8108df2:	68fb      	ldr	r3, [r7, #12]
 8108df4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8108df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8108dfa:	68fb      	ldr	r3, [r7, #12]
 8108dfc:	3b04      	subs	r3, #4
 8108dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8108e00:	68bb      	ldr	r3, [r7, #8]
 8108e02:	f023 0201 	bic.w	r2, r3, #1
 8108e06:	68fb      	ldr	r3, [r7, #12]
 8108e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8108e0a:	68fb      	ldr	r3, [r7, #12]
 8108e0c:	3b04      	subs	r3, #4
 8108e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8108e10:	4a0c      	ldr	r2, [pc, #48]	; (8108e44 <pxPortInitialiseStack+0x64>)
 8108e12:	68fb      	ldr	r3, [r7, #12]
 8108e14:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8108e16:	68fb      	ldr	r3, [r7, #12]
 8108e18:	3b14      	subs	r3, #20
 8108e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8108e1c:	687a      	ldr	r2, [r7, #4]
 8108e1e:	68fb      	ldr	r3, [r7, #12]
 8108e20:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8108e22:	68fb      	ldr	r3, [r7, #12]
 8108e24:	3b04      	subs	r3, #4
 8108e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8108e28:	68fb      	ldr	r3, [r7, #12]
 8108e2a:	f06f 0202 	mvn.w	r2, #2
 8108e2e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8108e30:	68fb      	ldr	r3, [r7, #12]
 8108e32:	3b20      	subs	r3, #32
 8108e34:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8108e36:	68fb      	ldr	r3, [r7, #12]
}
 8108e38:	4618      	mov	r0, r3
 8108e3a:	3714      	adds	r7, #20
 8108e3c:	46bd      	mov	sp, r7
 8108e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e42:	4770      	bx	lr
 8108e44:	08108e49 	.word	0x08108e49

08108e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8108e48:	b480      	push	{r7}
 8108e4a:	b085      	sub	sp, #20
 8108e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8108e4e:	2300      	movs	r3, #0
 8108e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8108e52:	4b11      	ldr	r3, [pc, #68]	; (8108e98 <prvTaskExitError+0x50>)
 8108e54:	681b      	ldr	r3, [r3, #0]
 8108e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108e5a:	d009      	beq.n	8108e70 <prvTaskExitError+0x28>
 8108e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108e60:	f383 8811 	msr	BASEPRI, r3
 8108e64:	f3bf 8f6f 	isb	sy
 8108e68:	f3bf 8f4f 	dsb	sy
 8108e6c:	60fb      	str	r3, [r7, #12]
 8108e6e:	e7fe      	b.n	8108e6e <prvTaskExitError+0x26>
 8108e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108e74:	f383 8811 	msr	BASEPRI, r3
 8108e78:	f3bf 8f6f 	isb	sy
 8108e7c:	f3bf 8f4f 	dsb	sy
 8108e80:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8108e82:	bf00      	nop
 8108e84:	687b      	ldr	r3, [r7, #4]
 8108e86:	2b00      	cmp	r3, #0
 8108e88:	d0fc      	beq.n	8108e84 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8108e8a:	bf00      	nop
 8108e8c:	3714      	adds	r7, #20
 8108e8e:	46bd      	mov	sp, r7
 8108e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e94:	4770      	bx	lr
 8108e96:	bf00      	nop
 8108e98:	1000000c 	.word	0x1000000c
 8108e9c:	00000000 	.word	0x00000000

08108ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8108ea0:	4b07      	ldr	r3, [pc, #28]	; (8108ec0 <pxCurrentTCBConst2>)
 8108ea2:	6819      	ldr	r1, [r3, #0]
 8108ea4:	6808      	ldr	r0, [r1, #0]
 8108ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108eaa:	f380 8809 	msr	PSP, r0
 8108eae:	f3bf 8f6f 	isb	sy
 8108eb2:	f04f 0000 	mov.w	r0, #0
 8108eb6:	f380 8811 	msr	BASEPRI, r0
 8108eba:	4770      	bx	lr
 8108ebc:	f3af 8000 	nop.w

08108ec0 <pxCurrentTCBConst2>:
 8108ec0:	100044e8 	.word	0x100044e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8108ec4:	bf00      	nop
 8108ec6:	bf00      	nop

08108ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8108ec8:	4808      	ldr	r0, [pc, #32]	; (8108eec <prvPortStartFirstTask+0x24>)
 8108eca:	6800      	ldr	r0, [r0, #0]
 8108ecc:	6800      	ldr	r0, [r0, #0]
 8108ece:	f380 8808 	msr	MSP, r0
 8108ed2:	f04f 0000 	mov.w	r0, #0
 8108ed6:	f380 8814 	msr	CONTROL, r0
 8108eda:	b662      	cpsie	i
 8108edc:	b661      	cpsie	f
 8108ede:	f3bf 8f4f 	dsb	sy
 8108ee2:	f3bf 8f6f 	isb	sy
 8108ee6:	df00      	svc	0
 8108ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8108eea:	bf00      	nop
 8108eec:	e000ed08 	.word	0xe000ed08

08108ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8108ef0:	b580      	push	{r7, lr}
 8108ef2:	b086      	sub	sp, #24
 8108ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8108ef6:	4b44      	ldr	r3, [pc, #272]	; (8109008 <xPortStartScheduler+0x118>)
 8108ef8:	681b      	ldr	r3, [r3, #0]
 8108efa:	4a44      	ldr	r2, [pc, #272]	; (810900c <xPortStartScheduler+0x11c>)
 8108efc:	4293      	cmp	r3, r2
 8108efe:	d109      	bne.n	8108f14 <xPortStartScheduler+0x24>
 8108f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f04:	f383 8811 	msr	BASEPRI, r3
 8108f08:	f3bf 8f6f 	isb	sy
 8108f0c:	f3bf 8f4f 	dsb	sy
 8108f10:	613b      	str	r3, [r7, #16]
 8108f12:	e7fe      	b.n	8108f12 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8108f14:	4b3c      	ldr	r3, [pc, #240]	; (8109008 <xPortStartScheduler+0x118>)
 8108f16:	681b      	ldr	r3, [r3, #0]
 8108f18:	4a3d      	ldr	r2, [pc, #244]	; (8109010 <xPortStartScheduler+0x120>)
 8108f1a:	4293      	cmp	r3, r2
 8108f1c:	d109      	bne.n	8108f32 <xPortStartScheduler+0x42>
 8108f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f22:	f383 8811 	msr	BASEPRI, r3
 8108f26:	f3bf 8f6f 	isb	sy
 8108f2a:	f3bf 8f4f 	dsb	sy
 8108f2e:	60fb      	str	r3, [r7, #12]
 8108f30:	e7fe      	b.n	8108f30 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8108f32:	4b38      	ldr	r3, [pc, #224]	; (8109014 <xPortStartScheduler+0x124>)
 8108f34:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8108f36:	697b      	ldr	r3, [r7, #20]
 8108f38:	781b      	ldrb	r3, [r3, #0]
 8108f3a:	b2db      	uxtb	r3, r3
 8108f3c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8108f3e:	697b      	ldr	r3, [r7, #20]
 8108f40:	22ff      	movs	r2, #255	; 0xff
 8108f42:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8108f44:	697b      	ldr	r3, [r7, #20]
 8108f46:	781b      	ldrb	r3, [r3, #0]
 8108f48:	b2db      	uxtb	r3, r3
 8108f4a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8108f4c:	78fb      	ldrb	r3, [r7, #3]
 8108f4e:	b2db      	uxtb	r3, r3
 8108f50:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8108f54:	b2da      	uxtb	r2, r3
 8108f56:	4b30      	ldr	r3, [pc, #192]	; (8109018 <xPortStartScheduler+0x128>)
 8108f58:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8108f5a:	4b30      	ldr	r3, [pc, #192]	; (810901c <xPortStartScheduler+0x12c>)
 8108f5c:	2207      	movs	r2, #7
 8108f5e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8108f60:	e009      	b.n	8108f76 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8108f62:	4b2e      	ldr	r3, [pc, #184]	; (810901c <xPortStartScheduler+0x12c>)
 8108f64:	681b      	ldr	r3, [r3, #0]
 8108f66:	3b01      	subs	r3, #1
 8108f68:	4a2c      	ldr	r2, [pc, #176]	; (810901c <xPortStartScheduler+0x12c>)
 8108f6a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8108f6c:	78fb      	ldrb	r3, [r7, #3]
 8108f6e:	b2db      	uxtb	r3, r3
 8108f70:	005b      	lsls	r3, r3, #1
 8108f72:	b2db      	uxtb	r3, r3
 8108f74:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8108f76:	78fb      	ldrb	r3, [r7, #3]
 8108f78:	b2db      	uxtb	r3, r3
 8108f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108f7e:	2b80      	cmp	r3, #128	; 0x80
 8108f80:	d0ef      	beq.n	8108f62 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8108f82:	4b26      	ldr	r3, [pc, #152]	; (810901c <xPortStartScheduler+0x12c>)
 8108f84:	681b      	ldr	r3, [r3, #0]
 8108f86:	f1c3 0307 	rsb	r3, r3, #7
 8108f8a:	2b04      	cmp	r3, #4
 8108f8c:	d009      	beq.n	8108fa2 <xPortStartScheduler+0xb2>
 8108f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8108f92:	f383 8811 	msr	BASEPRI, r3
 8108f96:	f3bf 8f6f 	isb	sy
 8108f9a:	f3bf 8f4f 	dsb	sy
 8108f9e:	60bb      	str	r3, [r7, #8]
 8108fa0:	e7fe      	b.n	8108fa0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8108fa2:	4b1e      	ldr	r3, [pc, #120]	; (810901c <xPortStartScheduler+0x12c>)
 8108fa4:	681b      	ldr	r3, [r3, #0]
 8108fa6:	021b      	lsls	r3, r3, #8
 8108fa8:	4a1c      	ldr	r2, [pc, #112]	; (810901c <xPortStartScheduler+0x12c>)
 8108faa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8108fac:	4b1b      	ldr	r3, [pc, #108]	; (810901c <xPortStartScheduler+0x12c>)
 8108fae:	681b      	ldr	r3, [r3, #0]
 8108fb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8108fb4:	4a19      	ldr	r2, [pc, #100]	; (810901c <xPortStartScheduler+0x12c>)
 8108fb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8108fb8:	687b      	ldr	r3, [r7, #4]
 8108fba:	b2da      	uxtb	r2, r3
 8108fbc:	697b      	ldr	r3, [r7, #20]
 8108fbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8108fc0:	4b17      	ldr	r3, [pc, #92]	; (8109020 <xPortStartScheduler+0x130>)
 8108fc2:	681b      	ldr	r3, [r3, #0]
 8108fc4:	4a16      	ldr	r2, [pc, #88]	; (8109020 <xPortStartScheduler+0x130>)
 8108fc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8108fca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8108fcc:	4b14      	ldr	r3, [pc, #80]	; (8109020 <xPortStartScheduler+0x130>)
 8108fce:	681b      	ldr	r3, [r3, #0]
 8108fd0:	4a13      	ldr	r2, [pc, #76]	; (8109020 <xPortStartScheduler+0x130>)
 8108fd2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8108fd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8108fd8:	f000 f8d6 	bl	8109188 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8108fdc:	4b11      	ldr	r3, [pc, #68]	; (8109024 <xPortStartScheduler+0x134>)
 8108fde:	2200      	movs	r2, #0
 8108fe0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8108fe2:	f000 f8f5 	bl	81091d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8108fe6:	4b10      	ldr	r3, [pc, #64]	; (8109028 <xPortStartScheduler+0x138>)
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	4a0f      	ldr	r2, [pc, #60]	; (8109028 <xPortStartScheduler+0x138>)
 8108fec:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8108ff0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8108ff2:	f7ff ff69 	bl	8108ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8108ff6:	f001 f9af 	bl	810a358 <vTaskSwitchContext>
	prvTaskExitError();
 8108ffa:	f7ff ff25 	bl	8108e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8108ffe:	2300      	movs	r3, #0
}
 8109000:	4618      	mov	r0, r3
 8109002:	3718      	adds	r7, #24
 8109004:	46bd      	mov	sp, r7
 8109006:	bd80      	pop	{r7, pc}
 8109008:	e000ed00 	.word	0xe000ed00
 810900c:	410fc271 	.word	0x410fc271
 8109010:	410fc270 	.word	0x410fc270
 8109014:	e000e400 	.word	0xe000e400
 8109018:	100044e0 	.word	0x100044e0
 810901c:	100044e4 	.word	0x100044e4
 8109020:	e000ed20 	.word	0xe000ed20
 8109024:	1000000c 	.word	0x1000000c
 8109028:	e000ef34 	.word	0xe000ef34

0810902c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810902c:	b480      	push	{r7}
 810902e:	b083      	sub	sp, #12
 8109030:	af00      	add	r7, sp, #0
 8109032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109036:	f383 8811 	msr	BASEPRI, r3
 810903a:	f3bf 8f6f 	isb	sy
 810903e:	f3bf 8f4f 	dsb	sy
 8109042:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8109044:	4b0e      	ldr	r3, [pc, #56]	; (8109080 <vPortEnterCritical+0x54>)
 8109046:	681b      	ldr	r3, [r3, #0]
 8109048:	3301      	adds	r3, #1
 810904a:	4a0d      	ldr	r2, [pc, #52]	; (8109080 <vPortEnterCritical+0x54>)
 810904c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810904e:	4b0c      	ldr	r3, [pc, #48]	; (8109080 <vPortEnterCritical+0x54>)
 8109050:	681b      	ldr	r3, [r3, #0]
 8109052:	2b01      	cmp	r3, #1
 8109054:	d10e      	bne.n	8109074 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8109056:	4b0b      	ldr	r3, [pc, #44]	; (8109084 <vPortEnterCritical+0x58>)
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	b2db      	uxtb	r3, r3
 810905c:	2b00      	cmp	r3, #0
 810905e:	d009      	beq.n	8109074 <vPortEnterCritical+0x48>
 8109060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109064:	f383 8811 	msr	BASEPRI, r3
 8109068:	f3bf 8f6f 	isb	sy
 810906c:	f3bf 8f4f 	dsb	sy
 8109070:	603b      	str	r3, [r7, #0]
 8109072:	e7fe      	b.n	8109072 <vPortEnterCritical+0x46>
	}
}
 8109074:	bf00      	nop
 8109076:	370c      	adds	r7, #12
 8109078:	46bd      	mov	sp, r7
 810907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810907e:	4770      	bx	lr
 8109080:	1000000c 	.word	0x1000000c
 8109084:	e000ed04 	.word	0xe000ed04

08109088 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8109088:	b480      	push	{r7}
 810908a:	b083      	sub	sp, #12
 810908c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810908e:	4b11      	ldr	r3, [pc, #68]	; (81090d4 <vPortExitCritical+0x4c>)
 8109090:	681b      	ldr	r3, [r3, #0]
 8109092:	2b00      	cmp	r3, #0
 8109094:	d109      	bne.n	81090aa <vPortExitCritical+0x22>
 8109096:	f04f 0350 	mov.w	r3, #80	; 0x50
 810909a:	f383 8811 	msr	BASEPRI, r3
 810909e:	f3bf 8f6f 	isb	sy
 81090a2:	f3bf 8f4f 	dsb	sy
 81090a6:	607b      	str	r3, [r7, #4]
 81090a8:	e7fe      	b.n	81090a8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 81090aa:	4b0a      	ldr	r3, [pc, #40]	; (81090d4 <vPortExitCritical+0x4c>)
 81090ac:	681b      	ldr	r3, [r3, #0]
 81090ae:	3b01      	subs	r3, #1
 81090b0:	4a08      	ldr	r2, [pc, #32]	; (81090d4 <vPortExitCritical+0x4c>)
 81090b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 81090b4:	4b07      	ldr	r3, [pc, #28]	; (81090d4 <vPortExitCritical+0x4c>)
 81090b6:	681b      	ldr	r3, [r3, #0]
 81090b8:	2b00      	cmp	r3, #0
 81090ba:	d104      	bne.n	81090c6 <vPortExitCritical+0x3e>
 81090bc:	2300      	movs	r3, #0
 81090be:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81090c0:	683b      	ldr	r3, [r7, #0]
 81090c2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 81090c6:	bf00      	nop
 81090c8:	370c      	adds	r7, #12
 81090ca:	46bd      	mov	sp, r7
 81090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090d0:	4770      	bx	lr
 81090d2:	bf00      	nop
 81090d4:	1000000c 	.word	0x1000000c
	...

081090e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81090e0:	f3ef 8009 	mrs	r0, PSP
 81090e4:	f3bf 8f6f 	isb	sy
 81090e8:	4b15      	ldr	r3, [pc, #84]	; (8109140 <pxCurrentTCBConst>)
 81090ea:	681a      	ldr	r2, [r3, #0]
 81090ec:	f01e 0f10 	tst.w	lr, #16
 81090f0:	bf08      	it	eq
 81090f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81090f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81090fa:	6010      	str	r0, [r2, #0]
 81090fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8109100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8109104:	f380 8811 	msr	BASEPRI, r0
 8109108:	f3bf 8f4f 	dsb	sy
 810910c:	f3bf 8f6f 	isb	sy
 8109110:	f001 f922 	bl	810a358 <vTaskSwitchContext>
 8109114:	f04f 0000 	mov.w	r0, #0
 8109118:	f380 8811 	msr	BASEPRI, r0
 810911c:	bc09      	pop	{r0, r3}
 810911e:	6819      	ldr	r1, [r3, #0]
 8109120:	6808      	ldr	r0, [r1, #0]
 8109122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109126:	f01e 0f10 	tst.w	lr, #16
 810912a:	bf08      	it	eq
 810912c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8109130:	f380 8809 	msr	PSP, r0
 8109134:	f3bf 8f6f 	isb	sy
 8109138:	4770      	bx	lr
 810913a:	bf00      	nop
 810913c:	f3af 8000 	nop.w

08109140 <pxCurrentTCBConst>:
 8109140:	100044e8 	.word	0x100044e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8109144:	bf00      	nop
 8109146:	bf00      	nop

08109148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8109148:	b580      	push	{r7, lr}
 810914a:	b082      	sub	sp, #8
 810914c:	af00      	add	r7, sp, #0
	__asm volatile
 810914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109152:	f383 8811 	msr	BASEPRI, r3
 8109156:	f3bf 8f6f 	isb	sy
 810915a:	f3bf 8f4f 	dsb	sy
 810915e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8109160:	f001 f842 	bl	810a1e8 <xTaskIncrementTick>
 8109164:	4603      	mov	r3, r0
 8109166:	2b00      	cmp	r3, #0
 8109168:	d003      	beq.n	8109172 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810916a:	4b06      	ldr	r3, [pc, #24]	; (8109184 <SysTick_Handler+0x3c>)
 810916c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109170:	601a      	str	r2, [r3, #0]
 8109172:	2300      	movs	r3, #0
 8109174:	603b      	str	r3, [r7, #0]
	__asm volatile
 8109176:	683b      	ldr	r3, [r7, #0]
 8109178:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 810917c:	bf00      	nop
 810917e:	3708      	adds	r7, #8
 8109180:	46bd      	mov	sp, r7
 8109182:	bd80      	pop	{r7, pc}
 8109184:	e000ed04 	.word	0xe000ed04

08109188 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8109188:	b480      	push	{r7}
 810918a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810918c:	4b0b      	ldr	r3, [pc, #44]	; (81091bc <vPortSetupTimerInterrupt+0x34>)
 810918e:	2200      	movs	r2, #0
 8109190:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8109192:	4b0b      	ldr	r3, [pc, #44]	; (81091c0 <vPortSetupTimerInterrupt+0x38>)
 8109194:	2200      	movs	r2, #0
 8109196:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8109198:	4b0a      	ldr	r3, [pc, #40]	; (81091c4 <vPortSetupTimerInterrupt+0x3c>)
 810919a:	681b      	ldr	r3, [r3, #0]
 810919c:	4a0a      	ldr	r2, [pc, #40]	; (81091c8 <vPortSetupTimerInterrupt+0x40>)
 810919e:	fba2 2303 	umull	r2, r3, r2, r3
 81091a2:	099b      	lsrs	r3, r3, #6
 81091a4:	4a09      	ldr	r2, [pc, #36]	; (81091cc <vPortSetupTimerInterrupt+0x44>)
 81091a6:	3b01      	subs	r3, #1
 81091a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 81091aa:	4b04      	ldr	r3, [pc, #16]	; (81091bc <vPortSetupTimerInterrupt+0x34>)
 81091ac:	2207      	movs	r2, #7
 81091ae:	601a      	str	r2, [r3, #0]
}
 81091b0:	bf00      	nop
 81091b2:	46bd      	mov	sp, r7
 81091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091b8:	4770      	bx	lr
 81091ba:	bf00      	nop
 81091bc:	e000e010 	.word	0xe000e010
 81091c0:	e000e018 	.word	0xe000e018
 81091c4:	10000004 	.word	0x10000004
 81091c8:	10624dd3 	.word	0x10624dd3
 81091cc:	e000e014 	.word	0xe000e014

081091d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81091d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81091e0 <vPortEnableVFP+0x10>
 81091d4:	6801      	ldr	r1, [r0, #0]
 81091d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81091da:	6001      	str	r1, [r0, #0]
 81091dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81091de:	bf00      	nop
 81091e0:	e000ed88 	.word	0xe000ed88

081091e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81091e4:	b480      	push	{r7}
 81091e6:	b085      	sub	sp, #20
 81091e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81091ea:	f3ef 8305 	mrs	r3, IPSR
 81091ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81091f0:	68fb      	ldr	r3, [r7, #12]
 81091f2:	2b0f      	cmp	r3, #15
 81091f4:	d913      	bls.n	810921e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81091f6:	4a16      	ldr	r2, [pc, #88]	; (8109250 <vPortValidateInterruptPriority+0x6c>)
 81091f8:	68fb      	ldr	r3, [r7, #12]
 81091fa:	4413      	add	r3, r2
 81091fc:	781b      	ldrb	r3, [r3, #0]
 81091fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8109200:	4b14      	ldr	r3, [pc, #80]	; (8109254 <vPortValidateInterruptPriority+0x70>)
 8109202:	781b      	ldrb	r3, [r3, #0]
 8109204:	7afa      	ldrb	r2, [r7, #11]
 8109206:	429a      	cmp	r2, r3
 8109208:	d209      	bcs.n	810921e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 810920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810920e:	f383 8811 	msr	BASEPRI, r3
 8109212:	f3bf 8f6f 	isb	sy
 8109216:	f3bf 8f4f 	dsb	sy
 810921a:	607b      	str	r3, [r7, #4]
 810921c:	e7fe      	b.n	810921c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810921e:	4b0e      	ldr	r3, [pc, #56]	; (8109258 <vPortValidateInterruptPriority+0x74>)
 8109220:	681b      	ldr	r3, [r3, #0]
 8109222:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8109226:	4b0d      	ldr	r3, [pc, #52]	; (810925c <vPortValidateInterruptPriority+0x78>)
 8109228:	681b      	ldr	r3, [r3, #0]
 810922a:	429a      	cmp	r2, r3
 810922c:	d909      	bls.n	8109242 <vPortValidateInterruptPriority+0x5e>
 810922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109232:	f383 8811 	msr	BASEPRI, r3
 8109236:	f3bf 8f6f 	isb	sy
 810923a:	f3bf 8f4f 	dsb	sy
 810923e:	603b      	str	r3, [r7, #0]
 8109240:	e7fe      	b.n	8109240 <vPortValidateInterruptPriority+0x5c>
	}
 8109242:	bf00      	nop
 8109244:	3714      	adds	r7, #20
 8109246:	46bd      	mov	sp, r7
 8109248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810924c:	4770      	bx	lr
 810924e:	bf00      	nop
 8109250:	e000e3f0 	.word	0xe000e3f0
 8109254:	100044e0 	.word	0x100044e0
 8109258:	e000ed0c 	.word	0xe000ed0c
 810925c:	100044e4 	.word	0x100044e4

08109260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8109260:	b580      	push	{r7, lr}
 8109262:	b084      	sub	sp, #16
 8109264:	af00      	add	r7, sp, #0
 8109266:	6078      	str	r0, [r7, #4]
 8109268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810926a:	687b      	ldr	r3, [r7, #4]
 810926c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810926e:	68fb      	ldr	r3, [r7, #12]
 8109270:	2b00      	cmp	r3, #0
 8109272:	d109      	bne.n	8109288 <xQueueGenericReset+0x28>
 8109274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109278:	f383 8811 	msr	BASEPRI, r3
 810927c:	f3bf 8f6f 	isb	sy
 8109280:	f3bf 8f4f 	dsb	sy
 8109284:	60bb      	str	r3, [r7, #8]
 8109286:	e7fe      	b.n	8109286 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8109288:	f7ff fed0 	bl	810902c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810928c:	68fb      	ldr	r3, [r7, #12]
 810928e:	681a      	ldr	r2, [r3, #0]
 8109290:	68fb      	ldr	r3, [r7, #12]
 8109292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109294:	68f9      	ldr	r1, [r7, #12]
 8109296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8109298:	fb01 f303 	mul.w	r3, r1, r3
 810929c:	441a      	add	r2, r3
 810929e:	68fb      	ldr	r3, [r7, #12]
 81092a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 81092a2:	68fb      	ldr	r3, [r7, #12]
 81092a4:	2200      	movs	r2, #0
 81092a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 81092a8:	68fb      	ldr	r3, [r7, #12]
 81092aa:	681a      	ldr	r2, [r3, #0]
 81092ac:	68fb      	ldr	r3, [r7, #12]
 81092ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 81092b0:	68fb      	ldr	r3, [r7, #12]
 81092b2:	681a      	ldr	r2, [r3, #0]
 81092b4:	68fb      	ldr	r3, [r7, #12]
 81092b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81092b8:	3b01      	subs	r3, #1
 81092ba:	68f9      	ldr	r1, [r7, #12]
 81092bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 81092be:	fb01 f303 	mul.w	r3, r1, r3
 81092c2:	441a      	add	r2, r3
 81092c4:	68fb      	ldr	r3, [r7, #12]
 81092c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81092c8:	68fb      	ldr	r3, [r7, #12]
 81092ca:	22ff      	movs	r2, #255	; 0xff
 81092cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81092d0:	68fb      	ldr	r3, [r7, #12]
 81092d2:	22ff      	movs	r2, #255	; 0xff
 81092d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 81092d8:	683b      	ldr	r3, [r7, #0]
 81092da:	2b00      	cmp	r3, #0
 81092dc:	d114      	bne.n	8109308 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81092de:	68fb      	ldr	r3, [r7, #12]
 81092e0:	691b      	ldr	r3, [r3, #16]
 81092e2:	2b00      	cmp	r3, #0
 81092e4:	d01a      	beq.n	810931c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81092e6:	68fb      	ldr	r3, [r7, #12]
 81092e8:	3310      	adds	r3, #16
 81092ea:	4618      	mov	r0, r3
 81092ec:	f001 f8de 	bl	810a4ac <xTaskRemoveFromEventList>
 81092f0:	4603      	mov	r3, r0
 81092f2:	2b00      	cmp	r3, #0
 81092f4:	d012      	beq.n	810931c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81092f6:	4b0d      	ldr	r3, [pc, #52]	; (810932c <xQueueGenericReset+0xcc>)
 81092f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81092fc:	601a      	str	r2, [r3, #0]
 81092fe:	f3bf 8f4f 	dsb	sy
 8109302:	f3bf 8f6f 	isb	sy
 8109306:	e009      	b.n	810931c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8109308:	68fb      	ldr	r3, [r7, #12]
 810930a:	3310      	adds	r3, #16
 810930c:	4618      	mov	r0, r3
 810930e:	f7ff fcb3 	bl	8108c78 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8109312:	68fb      	ldr	r3, [r7, #12]
 8109314:	3324      	adds	r3, #36	; 0x24
 8109316:	4618      	mov	r0, r3
 8109318:	f7ff fcae 	bl	8108c78 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810931c:	f7ff feb4 	bl	8109088 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8109320:	2301      	movs	r3, #1
}
 8109322:	4618      	mov	r0, r3
 8109324:	3710      	adds	r7, #16
 8109326:	46bd      	mov	sp, r7
 8109328:	bd80      	pop	{r7, pc}
 810932a:	bf00      	nop
 810932c:	e000ed04 	.word	0xe000ed04

08109330 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8109330:	b580      	push	{r7, lr}
 8109332:	b08e      	sub	sp, #56	; 0x38
 8109334:	af02      	add	r7, sp, #8
 8109336:	60f8      	str	r0, [r7, #12]
 8109338:	60b9      	str	r1, [r7, #8]
 810933a:	607a      	str	r2, [r7, #4]
 810933c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810933e:	68fb      	ldr	r3, [r7, #12]
 8109340:	2b00      	cmp	r3, #0
 8109342:	d109      	bne.n	8109358 <xQueueGenericCreateStatic+0x28>
 8109344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109348:	f383 8811 	msr	BASEPRI, r3
 810934c:	f3bf 8f6f 	isb	sy
 8109350:	f3bf 8f4f 	dsb	sy
 8109354:	62bb      	str	r3, [r7, #40]	; 0x28
 8109356:	e7fe      	b.n	8109356 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8109358:	683b      	ldr	r3, [r7, #0]
 810935a:	2b00      	cmp	r3, #0
 810935c:	d109      	bne.n	8109372 <xQueueGenericCreateStatic+0x42>
 810935e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109362:	f383 8811 	msr	BASEPRI, r3
 8109366:	f3bf 8f6f 	isb	sy
 810936a:	f3bf 8f4f 	dsb	sy
 810936e:	627b      	str	r3, [r7, #36]	; 0x24
 8109370:	e7fe      	b.n	8109370 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8109372:	687b      	ldr	r3, [r7, #4]
 8109374:	2b00      	cmp	r3, #0
 8109376:	d002      	beq.n	810937e <xQueueGenericCreateStatic+0x4e>
 8109378:	68bb      	ldr	r3, [r7, #8]
 810937a:	2b00      	cmp	r3, #0
 810937c:	d001      	beq.n	8109382 <xQueueGenericCreateStatic+0x52>
 810937e:	2301      	movs	r3, #1
 8109380:	e000      	b.n	8109384 <xQueueGenericCreateStatic+0x54>
 8109382:	2300      	movs	r3, #0
 8109384:	2b00      	cmp	r3, #0
 8109386:	d109      	bne.n	810939c <xQueueGenericCreateStatic+0x6c>
 8109388:	f04f 0350 	mov.w	r3, #80	; 0x50
 810938c:	f383 8811 	msr	BASEPRI, r3
 8109390:	f3bf 8f6f 	isb	sy
 8109394:	f3bf 8f4f 	dsb	sy
 8109398:	623b      	str	r3, [r7, #32]
 810939a:	e7fe      	b.n	810939a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810939c:	687b      	ldr	r3, [r7, #4]
 810939e:	2b00      	cmp	r3, #0
 81093a0:	d102      	bne.n	81093a8 <xQueueGenericCreateStatic+0x78>
 81093a2:	68bb      	ldr	r3, [r7, #8]
 81093a4:	2b00      	cmp	r3, #0
 81093a6:	d101      	bne.n	81093ac <xQueueGenericCreateStatic+0x7c>
 81093a8:	2301      	movs	r3, #1
 81093aa:	e000      	b.n	81093ae <xQueueGenericCreateStatic+0x7e>
 81093ac:	2300      	movs	r3, #0
 81093ae:	2b00      	cmp	r3, #0
 81093b0:	d109      	bne.n	81093c6 <xQueueGenericCreateStatic+0x96>
 81093b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81093b6:	f383 8811 	msr	BASEPRI, r3
 81093ba:	f3bf 8f6f 	isb	sy
 81093be:	f3bf 8f4f 	dsb	sy
 81093c2:	61fb      	str	r3, [r7, #28]
 81093c4:	e7fe      	b.n	81093c4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81093c6:	2350      	movs	r3, #80	; 0x50
 81093c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81093ca:	697b      	ldr	r3, [r7, #20]
 81093cc:	2b50      	cmp	r3, #80	; 0x50
 81093ce:	d009      	beq.n	81093e4 <xQueueGenericCreateStatic+0xb4>
 81093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81093d4:	f383 8811 	msr	BASEPRI, r3
 81093d8:	f3bf 8f6f 	isb	sy
 81093dc:	f3bf 8f4f 	dsb	sy
 81093e0:	61bb      	str	r3, [r7, #24]
 81093e2:	e7fe      	b.n	81093e2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81093e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81093e6:	683b      	ldr	r3, [r7, #0]
 81093e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 81093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81093ec:	2b00      	cmp	r3, #0
 81093ee:	d00d      	beq.n	810940c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81093f2:	2201      	movs	r2, #1
 81093f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81093f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 81093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81093fe:	9300      	str	r3, [sp, #0]
 8109400:	4613      	mov	r3, r2
 8109402:	687a      	ldr	r2, [r7, #4]
 8109404:	68b9      	ldr	r1, [r7, #8]
 8109406:	68f8      	ldr	r0, [r7, #12]
 8109408:	f000 f805 	bl	8109416 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 810940e:	4618      	mov	r0, r3
 8109410:	3730      	adds	r7, #48	; 0x30
 8109412:	46bd      	mov	sp, r7
 8109414:	bd80      	pop	{r7, pc}

08109416 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8109416:	b580      	push	{r7, lr}
 8109418:	b084      	sub	sp, #16
 810941a:	af00      	add	r7, sp, #0
 810941c:	60f8      	str	r0, [r7, #12]
 810941e:	60b9      	str	r1, [r7, #8]
 8109420:	607a      	str	r2, [r7, #4]
 8109422:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8109424:	68bb      	ldr	r3, [r7, #8]
 8109426:	2b00      	cmp	r3, #0
 8109428:	d103      	bne.n	8109432 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810942a:	69bb      	ldr	r3, [r7, #24]
 810942c:	69ba      	ldr	r2, [r7, #24]
 810942e:	601a      	str	r2, [r3, #0]
 8109430:	e002      	b.n	8109438 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8109432:	69bb      	ldr	r3, [r7, #24]
 8109434:	687a      	ldr	r2, [r7, #4]
 8109436:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8109438:	69bb      	ldr	r3, [r7, #24]
 810943a:	68fa      	ldr	r2, [r7, #12]
 810943c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810943e:	69bb      	ldr	r3, [r7, #24]
 8109440:	68ba      	ldr	r2, [r7, #8]
 8109442:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8109444:	2101      	movs	r1, #1
 8109446:	69b8      	ldr	r0, [r7, #24]
 8109448:	f7ff ff0a 	bl	8109260 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810944c:	69bb      	ldr	r3, [r7, #24]
 810944e:	78fa      	ldrb	r2, [r7, #3]
 8109450:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8109454:	bf00      	nop
 8109456:	3710      	adds	r7, #16
 8109458:	46bd      	mov	sp, r7
 810945a:	bd80      	pop	{r7, pc}

0810945c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810945c:	b580      	push	{r7, lr}
 810945e:	b08e      	sub	sp, #56	; 0x38
 8109460:	af00      	add	r7, sp, #0
 8109462:	60f8      	str	r0, [r7, #12]
 8109464:	60b9      	str	r1, [r7, #8]
 8109466:	607a      	str	r2, [r7, #4]
 8109468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810946a:	2300      	movs	r3, #0
 810946c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810946e:	68fb      	ldr	r3, [r7, #12]
 8109470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8109472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109474:	2b00      	cmp	r3, #0
 8109476:	d109      	bne.n	810948c <xQueueGenericSend+0x30>
 8109478:	f04f 0350 	mov.w	r3, #80	; 0x50
 810947c:	f383 8811 	msr	BASEPRI, r3
 8109480:	f3bf 8f6f 	isb	sy
 8109484:	f3bf 8f4f 	dsb	sy
 8109488:	62bb      	str	r3, [r7, #40]	; 0x28
 810948a:	e7fe      	b.n	810948a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810948c:	68bb      	ldr	r3, [r7, #8]
 810948e:	2b00      	cmp	r3, #0
 8109490:	d103      	bne.n	810949a <xQueueGenericSend+0x3e>
 8109492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109496:	2b00      	cmp	r3, #0
 8109498:	d101      	bne.n	810949e <xQueueGenericSend+0x42>
 810949a:	2301      	movs	r3, #1
 810949c:	e000      	b.n	81094a0 <xQueueGenericSend+0x44>
 810949e:	2300      	movs	r3, #0
 81094a0:	2b00      	cmp	r3, #0
 81094a2:	d109      	bne.n	81094b8 <xQueueGenericSend+0x5c>
 81094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094a8:	f383 8811 	msr	BASEPRI, r3
 81094ac:	f3bf 8f6f 	isb	sy
 81094b0:	f3bf 8f4f 	dsb	sy
 81094b4:	627b      	str	r3, [r7, #36]	; 0x24
 81094b6:	e7fe      	b.n	81094b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81094b8:	683b      	ldr	r3, [r7, #0]
 81094ba:	2b02      	cmp	r3, #2
 81094bc:	d103      	bne.n	81094c6 <xQueueGenericSend+0x6a>
 81094be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81094c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81094c2:	2b01      	cmp	r3, #1
 81094c4:	d101      	bne.n	81094ca <xQueueGenericSend+0x6e>
 81094c6:	2301      	movs	r3, #1
 81094c8:	e000      	b.n	81094cc <xQueueGenericSend+0x70>
 81094ca:	2300      	movs	r3, #0
 81094cc:	2b00      	cmp	r3, #0
 81094ce:	d109      	bne.n	81094e4 <xQueueGenericSend+0x88>
 81094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81094d4:	f383 8811 	msr	BASEPRI, r3
 81094d8:	f3bf 8f6f 	isb	sy
 81094dc:	f3bf 8f4f 	dsb	sy
 81094e0:	623b      	str	r3, [r7, #32]
 81094e2:	e7fe      	b.n	81094e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81094e4:	f001 f998 	bl	810a818 <xTaskGetSchedulerState>
 81094e8:	4603      	mov	r3, r0
 81094ea:	2b00      	cmp	r3, #0
 81094ec:	d102      	bne.n	81094f4 <xQueueGenericSend+0x98>
 81094ee:	687b      	ldr	r3, [r7, #4]
 81094f0:	2b00      	cmp	r3, #0
 81094f2:	d101      	bne.n	81094f8 <xQueueGenericSend+0x9c>
 81094f4:	2301      	movs	r3, #1
 81094f6:	e000      	b.n	81094fa <xQueueGenericSend+0x9e>
 81094f8:	2300      	movs	r3, #0
 81094fa:	2b00      	cmp	r3, #0
 81094fc:	d109      	bne.n	8109512 <xQueueGenericSend+0xb6>
 81094fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109502:	f383 8811 	msr	BASEPRI, r3
 8109506:	f3bf 8f6f 	isb	sy
 810950a:	f3bf 8f4f 	dsb	sy
 810950e:	61fb      	str	r3, [r7, #28]
 8109510:	e7fe      	b.n	8109510 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109512:	f7ff fd8b 	bl	810902c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8109516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810951c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810951e:	429a      	cmp	r2, r3
 8109520:	d302      	bcc.n	8109528 <xQueueGenericSend+0xcc>
 8109522:	683b      	ldr	r3, [r7, #0]
 8109524:	2b02      	cmp	r3, #2
 8109526:	d129      	bne.n	810957c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8109528:	683a      	ldr	r2, [r7, #0]
 810952a:	68b9      	ldr	r1, [r7, #8]
 810952c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810952e:	f000 f9ff 	bl	8109930 <prvCopyDataToQueue>
 8109532:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109538:	2b00      	cmp	r3, #0
 810953a:	d010      	beq.n	810955e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810953e:	3324      	adds	r3, #36	; 0x24
 8109540:	4618      	mov	r0, r3
 8109542:	f000 ffb3 	bl	810a4ac <xTaskRemoveFromEventList>
 8109546:	4603      	mov	r3, r0
 8109548:	2b00      	cmp	r3, #0
 810954a:	d013      	beq.n	8109574 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810954c:	4b3f      	ldr	r3, [pc, #252]	; (810964c <xQueueGenericSend+0x1f0>)
 810954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109552:	601a      	str	r2, [r3, #0]
 8109554:	f3bf 8f4f 	dsb	sy
 8109558:	f3bf 8f6f 	isb	sy
 810955c:	e00a      	b.n	8109574 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810955e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109560:	2b00      	cmp	r3, #0
 8109562:	d007      	beq.n	8109574 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8109564:	4b39      	ldr	r3, [pc, #228]	; (810964c <xQueueGenericSend+0x1f0>)
 8109566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810956a:	601a      	str	r2, [r3, #0]
 810956c:	f3bf 8f4f 	dsb	sy
 8109570:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8109574:	f7ff fd88 	bl	8109088 <vPortExitCritical>
				return pdPASS;
 8109578:	2301      	movs	r3, #1
 810957a:	e063      	b.n	8109644 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810957c:	687b      	ldr	r3, [r7, #4]
 810957e:	2b00      	cmp	r3, #0
 8109580:	d103      	bne.n	810958a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109582:	f7ff fd81 	bl	8109088 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8109586:	2300      	movs	r3, #0
 8109588:	e05c      	b.n	8109644 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810958a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810958c:	2b00      	cmp	r3, #0
 810958e:	d106      	bne.n	810959e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109590:	f107 0314 	add.w	r3, r7, #20
 8109594:	4618      	mov	r0, r3
 8109596:	f000 ffeb 	bl	810a570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810959a:	2301      	movs	r3, #1
 810959c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810959e:	f7ff fd73 	bl	8109088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 81095a2:	f000 fd67 	bl	810a074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 81095a6:	f7ff fd41 	bl	810902c <vPortEnterCritical>
 81095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81095b0:	b25b      	sxtb	r3, r3
 81095b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81095b6:	d103      	bne.n	81095c0 <xQueueGenericSend+0x164>
 81095b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095ba:	2200      	movs	r2, #0
 81095bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81095c6:	b25b      	sxtb	r3, r3
 81095c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81095cc:	d103      	bne.n	81095d6 <xQueueGenericSend+0x17a>
 81095ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095d0:	2200      	movs	r2, #0
 81095d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81095d6:	f7ff fd57 	bl	8109088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81095da:	1d3a      	adds	r2, r7, #4
 81095dc:	f107 0314 	add.w	r3, r7, #20
 81095e0:	4611      	mov	r1, r2
 81095e2:	4618      	mov	r0, r3
 81095e4:	f000 ffda 	bl	810a59c <xTaskCheckForTimeOut>
 81095e8:	4603      	mov	r3, r0
 81095ea:	2b00      	cmp	r3, #0
 81095ec:	d124      	bne.n	8109638 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81095ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81095f0:	f000 fa96 	bl	8109b20 <prvIsQueueFull>
 81095f4:	4603      	mov	r3, r0
 81095f6:	2b00      	cmp	r3, #0
 81095f8:	d018      	beq.n	810962c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81095fc:	3310      	adds	r3, #16
 81095fe:	687a      	ldr	r2, [r7, #4]
 8109600:	4611      	mov	r1, r2
 8109602:	4618      	mov	r0, r3
 8109604:	f000 ff04 	bl	810a410 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8109608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810960a:	f000 fa21 	bl	8109a50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810960e:	f000 fd3f 	bl	810a090 <xTaskResumeAll>
 8109612:	4603      	mov	r3, r0
 8109614:	2b00      	cmp	r3, #0
 8109616:	f47f af7c 	bne.w	8109512 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 810961a:	4b0c      	ldr	r3, [pc, #48]	; (810964c <xQueueGenericSend+0x1f0>)
 810961c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109620:	601a      	str	r2, [r3, #0]
 8109622:	f3bf 8f4f 	dsb	sy
 8109626:	f3bf 8f6f 	isb	sy
 810962a:	e772      	b.n	8109512 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810962c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810962e:	f000 fa0f 	bl	8109a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109632:	f000 fd2d 	bl	810a090 <xTaskResumeAll>
 8109636:	e76c      	b.n	8109512 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8109638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810963a:	f000 fa09 	bl	8109a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810963e:	f000 fd27 	bl	810a090 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8109642:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8109644:	4618      	mov	r0, r3
 8109646:	3738      	adds	r7, #56	; 0x38
 8109648:	46bd      	mov	sp, r7
 810964a:	bd80      	pop	{r7, pc}
 810964c:	e000ed04 	.word	0xe000ed04

08109650 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8109650:	b580      	push	{r7, lr}
 8109652:	b08e      	sub	sp, #56	; 0x38
 8109654:	af00      	add	r7, sp, #0
 8109656:	60f8      	str	r0, [r7, #12]
 8109658:	60b9      	str	r1, [r7, #8]
 810965a:	607a      	str	r2, [r7, #4]
 810965c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810965e:	68fb      	ldr	r3, [r7, #12]
 8109660:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8109662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109664:	2b00      	cmp	r3, #0
 8109666:	d109      	bne.n	810967c <xQueueGenericSendFromISR+0x2c>
 8109668:	f04f 0350 	mov.w	r3, #80	; 0x50
 810966c:	f383 8811 	msr	BASEPRI, r3
 8109670:	f3bf 8f6f 	isb	sy
 8109674:	f3bf 8f4f 	dsb	sy
 8109678:	627b      	str	r3, [r7, #36]	; 0x24
 810967a:	e7fe      	b.n	810967a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810967c:	68bb      	ldr	r3, [r7, #8]
 810967e:	2b00      	cmp	r3, #0
 8109680:	d103      	bne.n	810968a <xQueueGenericSendFromISR+0x3a>
 8109682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109686:	2b00      	cmp	r3, #0
 8109688:	d101      	bne.n	810968e <xQueueGenericSendFromISR+0x3e>
 810968a:	2301      	movs	r3, #1
 810968c:	e000      	b.n	8109690 <xQueueGenericSendFromISR+0x40>
 810968e:	2300      	movs	r3, #0
 8109690:	2b00      	cmp	r3, #0
 8109692:	d109      	bne.n	81096a8 <xQueueGenericSendFromISR+0x58>
 8109694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109698:	f383 8811 	msr	BASEPRI, r3
 810969c:	f3bf 8f6f 	isb	sy
 81096a0:	f3bf 8f4f 	dsb	sy
 81096a4:	623b      	str	r3, [r7, #32]
 81096a6:	e7fe      	b.n	81096a6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 81096a8:	683b      	ldr	r3, [r7, #0]
 81096aa:	2b02      	cmp	r3, #2
 81096ac:	d103      	bne.n	81096b6 <xQueueGenericSendFromISR+0x66>
 81096ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81096b2:	2b01      	cmp	r3, #1
 81096b4:	d101      	bne.n	81096ba <xQueueGenericSendFromISR+0x6a>
 81096b6:	2301      	movs	r3, #1
 81096b8:	e000      	b.n	81096bc <xQueueGenericSendFromISR+0x6c>
 81096ba:	2300      	movs	r3, #0
 81096bc:	2b00      	cmp	r3, #0
 81096be:	d109      	bne.n	81096d4 <xQueueGenericSendFromISR+0x84>
 81096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81096c4:	f383 8811 	msr	BASEPRI, r3
 81096c8:	f3bf 8f6f 	isb	sy
 81096cc:	f3bf 8f4f 	dsb	sy
 81096d0:	61fb      	str	r3, [r7, #28]
 81096d2:	e7fe      	b.n	81096d2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81096d4:	f7ff fd86 	bl	81091e4 <vPortValidateInterruptPriority>
	__asm volatile
 81096d8:	f3ef 8211 	mrs	r2, BASEPRI
 81096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81096e0:	f383 8811 	msr	BASEPRI, r3
 81096e4:	f3bf 8f6f 	isb	sy
 81096e8:	f3bf 8f4f 	dsb	sy
 81096ec:	61ba      	str	r2, [r7, #24]
 81096ee:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81096f0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81096f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81096fc:	429a      	cmp	r2, r3
 81096fe:	d302      	bcc.n	8109706 <xQueueGenericSendFromISR+0xb6>
 8109700:	683b      	ldr	r3, [r7, #0]
 8109702:	2b02      	cmp	r3, #2
 8109704:	d12c      	bne.n	8109760 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8109706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810970c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8109710:	683a      	ldr	r2, [r7, #0]
 8109712:	68b9      	ldr	r1, [r7, #8]
 8109714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109716:	f000 f90b 	bl	8109930 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810971a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 810971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109722:	d112      	bne.n	810974a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109728:	2b00      	cmp	r3, #0
 810972a:	d016      	beq.n	810975a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810972e:	3324      	adds	r3, #36	; 0x24
 8109730:	4618      	mov	r0, r3
 8109732:	f000 febb 	bl	810a4ac <xTaskRemoveFromEventList>
 8109736:	4603      	mov	r3, r0
 8109738:	2b00      	cmp	r3, #0
 810973a:	d00e      	beq.n	810975a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	2b00      	cmp	r3, #0
 8109740:	d00b      	beq.n	810975a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	2201      	movs	r2, #1
 8109746:	601a      	str	r2, [r3, #0]
 8109748:	e007      	b.n	810975a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810974a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810974e:	3301      	adds	r3, #1
 8109750:	b2db      	uxtb	r3, r3
 8109752:	b25a      	sxtb	r2, r3
 8109754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810975a:	2301      	movs	r3, #1
 810975c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 810975e:	e001      	b.n	8109764 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8109760:	2300      	movs	r3, #0
 8109762:	637b      	str	r3, [r7, #52]	; 0x34
 8109764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109766:	613b      	str	r3, [r7, #16]
	__asm volatile
 8109768:	693b      	ldr	r3, [r7, #16]
 810976a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8109770:	4618      	mov	r0, r3
 8109772:	3738      	adds	r7, #56	; 0x38
 8109774:	46bd      	mov	sp, r7
 8109776:	bd80      	pop	{r7, pc}

08109778 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8109778:	b580      	push	{r7, lr}
 810977a:	b08c      	sub	sp, #48	; 0x30
 810977c:	af00      	add	r7, sp, #0
 810977e:	60f8      	str	r0, [r7, #12]
 8109780:	60b9      	str	r1, [r7, #8]
 8109782:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8109784:	2300      	movs	r3, #0
 8109786:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8109788:	68fb      	ldr	r3, [r7, #12]
 810978a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810978e:	2b00      	cmp	r3, #0
 8109790:	d109      	bne.n	81097a6 <xQueueReceive+0x2e>
	__asm volatile
 8109792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109796:	f383 8811 	msr	BASEPRI, r3
 810979a:	f3bf 8f6f 	isb	sy
 810979e:	f3bf 8f4f 	dsb	sy
 81097a2:	623b      	str	r3, [r7, #32]
 81097a4:	e7fe      	b.n	81097a4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 81097a6:	68bb      	ldr	r3, [r7, #8]
 81097a8:	2b00      	cmp	r3, #0
 81097aa:	d103      	bne.n	81097b4 <xQueueReceive+0x3c>
 81097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81097ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81097b0:	2b00      	cmp	r3, #0
 81097b2:	d101      	bne.n	81097b8 <xQueueReceive+0x40>
 81097b4:	2301      	movs	r3, #1
 81097b6:	e000      	b.n	81097ba <xQueueReceive+0x42>
 81097b8:	2300      	movs	r3, #0
 81097ba:	2b00      	cmp	r3, #0
 81097bc:	d109      	bne.n	81097d2 <xQueueReceive+0x5a>
 81097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 81097c2:	f383 8811 	msr	BASEPRI, r3
 81097c6:	f3bf 8f6f 	isb	sy
 81097ca:	f3bf 8f4f 	dsb	sy
 81097ce:	61fb      	str	r3, [r7, #28]
 81097d0:	e7fe      	b.n	81097d0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81097d2:	f001 f821 	bl	810a818 <xTaskGetSchedulerState>
 81097d6:	4603      	mov	r3, r0
 81097d8:	2b00      	cmp	r3, #0
 81097da:	d102      	bne.n	81097e2 <xQueueReceive+0x6a>
 81097dc:	687b      	ldr	r3, [r7, #4]
 81097de:	2b00      	cmp	r3, #0
 81097e0:	d101      	bne.n	81097e6 <xQueueReceive+0x6e>
 81097e2:	2301      	movs	r3, #1
 81097e4:	e000      	b.n	81097e8 <xQueueReceive+0x70>
 81097e6:	2300      	movs	r3, #0
 81097e8:	2b00      	cmp	r3, #0
 81097ea:	d109      	bne.n	8109800 <xQueueReceive+0x88>
 81097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81097f0:	f383 8811 	msr	BASEPRI, r3
 81097f4:	f3bf 8f6f 	isb	sy
 81097f8:	f3bf 8f4f 	dsb	sy
 81097fc:	61bb      	str	r3, [r7, #24]
 81097fe:	e7fe      	b.n	81097fe <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8109800:	f7ff fc14 	bl	810902c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109808:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810980c:	2b00      	cmp	r3, #0
 810980e:	d01f      	beq.n	8109850 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8109810:	68b9      	ldr	r1, [r7, #8]
 8109812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109814:	f000 f8f6 	bl	8109a04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8109818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810981a:	1e5a      	subs	r2, r3, #1
 810981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810981e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109822:	691b      	ldr	r3, [r3, #16]
 8109824:	2b00      	cmp	r3, #0
 8109826:	d00f      	beq.n	8109848 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810982a:	3310      	adds	r3, #16
 810982c:	4618      	mov	r0, r3
 810982e:	f000 fe3d 	bl	810a4ac <xTaskRemoveFromEventList>
 8109832:	4603      	mov	r3, r0
 8109834:	2b00      	cmp	r3, #0
 8109836:	d007      	beq.n	8109848 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8109838:	4b3c      	ldr	r3, [pc, #240]	; (810992c <xQueueReceive+0x1b4>)
 810983a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810983e:	601a      	str	r2, [r3, #0]
 8109840:	f3bf 8f4f 	dsb	sy
 8109844:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8109848:	f7ff fc1e 	bl	8109088 <vPortExitCritical>
				return pdPASS;
 810984c:	2301      	movs	r3, #1
 810984e:	e069      	b.n	8109924 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8109850:	687b      	ldr	r3, [r7, #4]
 8109852:	2b00      	cmp	r3, #0
 8109854:	d103      	bne.n	810985e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8109856:	f7ff fc17 	bl	8109088 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810985a:	2300      	movs	r3, #0
 810985c:	e062      	b.n	8109924 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 810985e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109860:	2b00      	cmp	r3, #0
 8109862:	d106      	bne.n	8109872 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8109864:	f107 0310 	add.w	r3, r7, #16
 8109868:	4618      	mov	r0, r3
 810986a:	f000 fe81 	bl	810a570 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810986e:	2301      	movs	r3, #1
 8109870:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8109872:	f7ff fc09 	bl	8109088 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8109876:	f000 fbfd 	bl	810a074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810987a:	f7ff fbd7 	bl	810902c <vPortEnterCritical>
 810987e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109880:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109884:	b25b      	sxtb	r3, r3
 8109886:	f1b3 3fff 	cmp.w	r3, #4294967295
 810988a:	d103      	bne.n	8109894 <xQueueReceive+0x11c>
 810988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810988e:	2200      	movs	r2, #0
 8109890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810989a:	b25b      	sxtb	r3, r3
 810989c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81098a0:	d103      	bne.n	81098aa <xQueueReceive+0x132>
 81098a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81098a4:	2200      	movs	r2, #0
 81098a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81098aa:	f7ff fbed 	bl	8109088 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81098ae:	1d3a      	adds	r2, r7, #4
 81098b0:	f107 0310 	add.w	r3, r7, #16
 81098b4:	4611      	mov	r1, r2
 81098b6:	4618      	mov	r0, r3
 81098b8:	f000 fe70 	bl	810a59c <xTaskCheckForTimeOut>
 81098bc:	4603      	mov	r3, r0
 81098be:	2b00      	cmp	r3, #0
 81098c0:	d123      	bne.n	810990a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81098c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81098c4:	f000 f916 	bl	8109af4 <prvIsQueueEmpty>
 81098c8:	4603      	mov	r3, r0
 81098ca:	2b00      	cmp	r3, #0
 81098cc:	d017      	beq.n	81098fe <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81098ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81098d0:	3324      	adds	r3, #36	; 0x24
 81098d2:	687a      	ldr	r2, [r7, #4]
 81098d4:	4611      	mov	r1, r2
 81098d6:	4618      	mov	r0, r3
 81098d8:	f000 fd9a 	bl	810a410 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81098dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81098de:	f000 f8b7 	bl	8109a50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81098e2:	f000 fbd5 	bl	810a090 <xTaskResumeAll>
 81098e6:	4603      	mov	r3, r0
 81098e8:	2b00      	cmp	r3, #0
 81098ea:	d189      	bne.n	8109800 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 81098ec:	4b0f      	ldr	r3, [pc, #60]	; (810992c <xQueueReceive+0x1b4>)
 81098ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81098f2:	601a      	str	r2, [r3, #0]
 81098f4:	f3bf 8f4f 	dsb	sy
 81098f8:	f3bf 8f6f 	isb	sy
 81098fc:	e780      	b.n	8109800 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81098fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109900:	f000 f8a6 	bl	8109a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8109904:	f000 fbc4 	bl	810a090 <xTaskResumeAll>
 8109908:	e77a      	b.n	8109800 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810990a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810990c:	f000 f8a0 	bl	8109a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8109910:	f000 fbbe 	bl	810a090 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8109914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109916:	f000 f8ed 	bl	8109af4 <prvIsQueueEmpty>
 810991a:	4603      	mov	r3, r0
 810991c:	2b00      	cmp	r3, #0
 810991e:	f43f af6f 	beq.w	8109800 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8109922:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8109924:	4618      	mov	r0, r3
 8109926:	3730      	adds	r7, #48	; 0x30
 8109928:	46bd      	mov	sp, r7
 810992a:	bd80      	pop	{r7, pc}
 810992c:	e000ed04 	.word	0xe000ed04

08109930 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8109930:	b580      	push	{r7, lr}
 8109932:	b086      	sub	sp, #24
 8109934:	af00      	add	r7, sp, #0
 8109936:	60f8      	str	r0, [r7, #12]
 8109938:	60b9      	str	r1, [r7, #8]
 810993a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810993c:	2300      	movs	r3, #0
 810993e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8109940:	68fb      	ldr	r3, [r7, #12]
 8109942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109944:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8109946:	68fb      	ldr	r3, [r7, #12]
 8109948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810994a:	2b00      	cmp	r3, #0
 810994c:	d10d      	bne.n	810996a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810994e:	68fb      	ldr	r3, [r7, #12]
 8109950:	681b      	ldr	r3, [r3, #0]
 8109952:	2b00      	cmp	r3, #0
 8109954:	d14d      	bne.n	81099f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8109956:	68fb      	ldr	r3, [r7, #12]
 8109958:	689b      	ldr	r3, [r3, #8]
 810995a:	4618      	mov	r0, r3
 810995c:	f000 ff7a 	bl	810a854 <xTaskPriorityDisinherit>
 8109960:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8109962:	68fb      	ldr	r3, [r7, #12]
 8109964:	2200      	movs	r2, #0
 8109966:	609a      	str	r2, [r3, #8]
 8109968:	e043      	b.n	81099f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810996a:	687b      	ldr	r3, [r7, #4]
 810996c:	2b00      	cmp	r3, #0
 810996e:	d119      	bne.n	81099a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109970:	68fb      	ldr	r3, [r7, #12]
 8109972:	6858      	ldr	r0, [r3, #4]
 8109974:	68fb      	ldr	r3, [r7, #12]
 8109976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109978:	461a      	mov	r2, r3
 810997a:	68b9      	ldr	r1, [r7, #8]
 810997c:	f001 fb9a 	bl	810b0b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109980:	68fb      	ldr	r3, [r7, #12]
 8109982:	685a      	ldr	r2, [r3, #4]
 8109984:	68fb      	ldr	r3, [r7, #12]
 8109986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109988:	441a      	add	r2, r3
 810998a:	68fb      	ldr	r3, [r7, #12]
 810998c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810998e:	68fb      	ldr	r3, [r7, #12]
 8109990:	685a      	ldr	r2, [r3, #4]
 8109992:	68fb      	ldr	r3, [r7, #12]
 8109994:	689b      	ldr	r3, [r3, #8]
 8109996:	429a      	cmp	r2, r3
 8109998:	d32b      	bcc.n	81099f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810999a:	68fb      	ldr	r3, [r7, #12]
 810999c:	681a      	ldr	r2, [r3, #0]
 810999e:	68fb      	ldr	r3, [r7, #12]
 81099a0:	605a      	str	r2, [r3, #4]
 81099a2:	e026      	b.n	81099f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 81099a4:	68fb      	ldr	r3, [r7, #12]
 81099a6:	68d8      	ldr	r0, [r3, #12]
 81099a8:	68fb      	ldr	r3, [r7, #12]
 81099aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099ac:	461a      	mov	r2, r3
 81099ae:	68b9      	ldr	r1, [r7, #8]
 81099b0:	f001 fb80 	bl	810b0b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 81099b4:	68fb      	ldr	r3, [r7, #12]
 81099b6:	68da      	ldr	r2, [r3, #12]
 81099b8:	68fb      	ldr	r3, [r7, #12]
 81099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099bc:	425b      	negs	r3, r3
 81099be:	441a      	add	r2, r3
 81099c0:	68fb      	ldr	r3, [r7, #12]
 81099c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 81099c4:	68fb      	ldr	r3, [r7, #12]
 81099c6:	68da      	ldr	r2, [r3, #12]
 81099c8:	68fb      	ldr	r3, [r7, #12]
 81099ca:	681b      	ldr	r3, [r3, #0]
 81099cc:	429a      	cmp	r2, r3
 81099ce:	d207      	bcs.n	81099e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 81099d0:	68fb      	ldr	r3, [r7, #12]
 81099d2:	689a      	ldr	r2, [r3, #8]
 81099d4:	68fb      	ldr	r3, [r7, #12]
 81099d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81099d8:	425b      	negs	r3, r3
 81099da:	441a      	add	r2, r3
 81099dc:	68fb      	ldr	r3, [r7, #12]
 81099de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 81099e0:	687b      	ldr	r3, [r7, #4]
 81099e2:	2b02      	cmp	r3, #2
 81099e4:	d105      	bne.n	81099f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81099e6:	693b      	ldr	r3, [r7, #16]
 81099e8:	2b00      	cmp	r3, #0
 81099ea:	d002      	beq.n	81099f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 81099ec:	693b      	ldr	r3, [r7, #16]
 81099ee:	3b01      	subs	r3, #1
 81099f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 81099f2:	693b      	ldr	r3, [r7, #16]
 81099f4:	1c5a      	adds	r2, r3, #1
 81099f6:	68fb      	ldr	r3, [r7, #12]
 81099f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 81099fa:	697b      	ldr	r3, [r7, #20]
}
 81099fc:	4618      	mov	r0, r3
 81099fe:	3718      	adds	r7, #24
 8109a00:	46bd      	mov	sp, r7
 8109a02:	bd80      	pop	{r7, pc}

08109a04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8109a04:	b580      	push	{r7, lr}
 8109a06:	b082      	sub	sp, #8
 8109a08:	af00      	add	r7, sp, #0
 8109a0a:	6078      	str	r0, [r7, #4]
 8109a0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8109a0e:	687b      	ldr	r3, [r7, #4]
 8109a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a12:	2b00      	cmp	r3, #0
 8109a14:	d018      	beq.n	8109a48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8109a16:	687b      	ldr	r3, [r7, #4]
 8109a18:	68da      	ldr	r2, [r3, #12]
 8109a1a:	687b      	ldr	r3, [r7, #4]
 8109a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a1e:	441a      	add	r2, r3
 8109a20:	687b      	ldr	r3, [r7, #4]
 8109a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8109a24:	687b      	ldr	r3, [r7, #4]
 8109a26:	68da      	ldr	r2, [r3, #12]
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	689b      	ldr	r3, [r3, #8]
 8109a2c:	429a      	cmp	r2, r3
 8109a2e:	d303      	bcc.n	8109a38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8109a30:	687b      	ldr	r3, [r7, #4]
 8109a32:	681a      	ldr	r2, [r3, #0]
 8109a34:	687b      	ldr	r3, [r7, #4]
 8109a36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	68d9      	ldr	r1, [r3, #12]
 8109a3c:	687b      	ldr	r3, [r7, #4]
 8109a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109a40:	461a      	mov	r2, r3
 8109a42:	6838      	ldr	r0, [r7, #0]
 8109a44:	f001 fb36 	bl	810b0b4 <memcpy>
	}
}
 8109a48:	bf00      	nop
 8109a4a:	3708      	adds	r7, #8
 8109a4c:	46bd      	mov	sp, r7
 8109a4e:	bd80      	pop	{r7, pc}

08109a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8109a50:	b580      	push	{r7, lr}
 8109a52:	b084      	sub	sp, #16
 8109a54:	af00      	add	r7, sp, #0
 8109a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8109a58:	f7ff fae8 	bl	810902c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8109a5c:	687b      	ldr	r3, [r7, #4]
 8109a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109a62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109a64:	e011      	b.n	8109a8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8109a66:	687b      	ldr	r3, [r7, #4]
 8109a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a6a:	2b00      	cmp	r3, #0
 8109a6c:	d012      	beq.n	8109a94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	3324      	adds	r3, #36	; 0x24
 8109a72:	4618      	mov	r0, r3
 8109a74:	f000 fd1a 	bl	810a4ac <xTaskRemoveFromEventList>
 8109a78:	4603      	mov	r3, r0
 8109a7a:	2b00      	cmp	r3, #0
 8109a7c:	d001      	beq.n	8109a82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8109a7e:	f000 fded 	bl	810a65c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8109a82:	7bfb      	ldrb	r3, [r7, #15]
 8109a84:	3b01      	subs	r3, #1
 8109a86:	b2db      	uxtb	r3, r3
 8109a88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8109a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8109a8e:	2b00      	cmp	r3, #0
 8109a90:	dce9      	bgt.n	8109a66 <prvUnlockQueue+0x16>
 8109a92:	e000      	b.n	8109a96 <prvUnlockQueue+0x46>
					break;
 8109a94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8109a96:	687b      	ldr	r3, [r7, #4]
 8109a98:	22ff      	movs	r2, #255	; 0xff
 8109a9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8109a9e:	f7ff faf3 	bl	8109088 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8109aa2:	f7ff fac3 	bl	810902c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8109aa6:	687b      	ldr	r3, [r7, #4]
 8109aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109aac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109aae:	e011      	b.n	8109ad4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8109ab0:	687b      	ldr	r3, [r7, #4]
 8109ab2:	691b      	ldr	r3, [r3, #16]
 8109ab4:	2b00      	cmp	r3, #0
 8109ab6:	d012      	beq.n	8109ade <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	3310      	adds	r3, #16
 8109abc:	4618      	mov	r0, r3
 8109abe:	f000 fcf5 	bl	810a4ac <xTaskRemoveFromEventList>
 8109ac2:	4603      	mov	r3, r0
 8109ac4:	2b00      	cmp	r3, #0
 8109ac6:	d001      	beq.n	8109acc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8109ac8:	f000 fdc8 	bl	810a65c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8109acc:	7bbb      	ldrb	r3, [r7, #14]
 8109ace:	3b01      	subs	r3, #1
 8109ad0:	b2db      	uxtb	r3, r3
 8109ad2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8109ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8109ad8:	2b00      	cmp	r3, #0
 8109ada:	dce9      	bgt.n	8109ab0 <prvUnlockQueue+0x60>
 8109adc:	e000      	b.n	8109ae0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8109ade:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8109ae0:	687b      	ldr	r3, [r7, #4]
 8109ae2:	22ff      	movs	r2, #255	; 0xff
 8109ae4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8109ae8:	f7ff face 	bl	8109088 <vPortExitCritical>
}
 8109aec:	bf00      	nop
 8109aee:	3710      	adds	r7, #16
 8109af0:	46bd      	mov	sp, r7
 8109af2:	bd80      	pop	{r7, pc}

08109af4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8109af4:	b580      	push	{r7, lr}
 8109af6:	b084      	sub	sp, #16
 8109af8:	af00      	add	r7, sp, #0
 8109afa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8109afc:	f7ff fa96 	bl	810902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8109b00:	687b      	ldr	r3, [r7, #4]
 8109b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109b04:	2b00      	cmp	r3, #0
 8109b06:	d102      	bne.n	8109b0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8109b08:	2301      	movs	r3, #1
 8109b0a:	60fb      	str	r3, [r7, #12]
 8109b0c:	e001      	b.n	8109b12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8109b0e:	2300      	movs	r3, #0
 8109b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109b12:	f7ff fab9 	bl	8109088 <vPortExitCritical>

	return xReturn;
 8109b16:	68fb      	ldr	r3, [r7, #12]
}
 8109b18:	4618      	mov	r0, r3
 8109b1a:	3710      	adds	r7, #16
 8109b1c:	46bd      	mov	sp, r7
 8109b1e:	bd80      	pop	{r7, pc}

08109b20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8109b20:	b580      	push	{r7, lr}
 8109b22:	b084      	sub	sp, #16
 8109b24:	af00      	add	r7, sp, #0
 8109b26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8109b28:	f7ff fa80 	bl	810902c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8109b2c:	687b      	ldr	r3, [r7, #4]
 8109b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8109b34:	429a      	cmp	r2, r3
 8109b36:	d102      	bne.n	8109b3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8109b38:	2301      	movs	r3, #1
 8109b3a:	60fb      	str	r3, [r7, #12]
 8109b3c:	e001      	b.n	8109b42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8109b3e:	2300      	movs	r3, #0
 8109b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8109b42:	f7ff faa1 	bl	8109088 <vPortExitCritical>

	return xReturn;
 8109b46:	68fb      	ldr	r3, [r7, #12]
}
 8109b48:	4618      	mov	r0, r3
 8109b4a:	3710      	adds	r7, #16
 8109b4c:	46bd      	mov	sp, r7
 8109b4e:	bd80      	pop	{r7, pc}

08109b50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8109b50:	b480      	push	{r7}
 8109b52:	b085      	sub	sp, #20
 8109b54:	af00      	add	r7, sp, #0
 8109b56:	6078      	str	r0, [r7, #4]
 8109b58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8109b5a:	2300      	movs	r3, #0
 8109b5c:	60fb      	str	r3, [r7, #12]
 8109b5e:	e014      	b.n	8109b8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8109b60:	4a0e      	ldr	r2, [pc, #56]	; (8109b9c <vQueueAddToRegistry+0x4c>)
 8109b62:	68fb      	ldr	r3, [r7, #12]
 8109b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8109b68:	2b00      	cmp	r3, #0
 8109b6a:	d10b      	bne.n	8109b84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8109b6c:	490b      	ldr	r1, [pc, #44]	; (8109b9c <vQueueAddToRegistry+0x4c>)
 8109b6e:	68fb      	ldr	r3, [r7, #12]
 8109b70:	683a      	ldr	r2, [r7, #0]
 8109b72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8109b76:	4a09      	ldr	r2, [pc, #36]	; (8109b9c <vQueueAddToRegistry+0x4c>)
 8109b78:	68fb      	ldr	r3, [r7, #12]
 8109b7a:	00db      	lsls	r3, r3, #3
 8109b7c:	4413      	add	r3, r2
 8109b7e:	687a      	ldr	r2, [r7, #4]
 8109b80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8109b82:	e005      	b.n	8109b90 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8109b84:	68fb      	ldr	r3, [r7, #12]
 8109b86:	3301      	adds	r3, #1
 8109b88:	60fb      	str	r3, [r7, #12]
 8109b8a:	68fb      	ldr	r3, [r7, #12]
 8109b8c:	2b07      	cmp	r3, #7
 8109b8e:	d9e7      	bls.n	8109b60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8109b90:	bf00      	nop
 8109b92:	3714      	adds	r7, #20
 8109b94:	46bd      	mov	sp, r7
 8109b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b9a:	4770      	bx	lr
 8109b9c:	10004e70 	.word	0x10004e70

08109ba0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8109ba0:	b580      	push	{r7, lr}
 8109ba2:	b086      	sub	sp, #24
 8109ba4:	af00      	add	r7, sp, #0
 8109ba6:	60f8      	str	r0, [r7, #12]
 8109ba8:	60b9      	str	r1, [r7, #8]
 8109baa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8109bac:	68fb      	ldr	r3, [r7, #12]
 8109bae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8109bb0:	f7ff fa3c 	bl	810902c <vPortEnterCritical>
 8109bb4:	697b      	ldr	r3, [r7, #20]
 8109bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8109bba:	b25b      	sxtb	r3, r3
 8109bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109bc0:	d103      	bne.n	8109bca <vQueueWaitForMessageRestricted+0x2a>
 8109bc2:	697b      	ldr	r3, [r7, #20]
 8109bc4:	2200      	movs	r2, #0
 8109bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8109bca:	697b      	ldr	r3, [r7, #20]
 8109bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8109bd0:	b25b      	sxtb	r3, r3
 8109bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109bd6:	d103      	bne.n	8109be0 <vQueueWaitForMessageRestricted+0x40>
 8109bd8:	697b      	ldr	r3, [r7, #20]
 8109bda:	2200      	movs	r2, #0
 8109bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8109be0:	f7ff fa52 	bl	8109088 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8109be4:	697b      	ldr	r3, [r7, #20]
 8109be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8109be8:	2b00      	cmp	r3, #0
 8109bea:	d106      	bne.n	8109bfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8109bec:	697b      	ldr	r3, [r7, #20]
 8109bee:	3324      	adds	r3, #36	; 0x24
 8109bf0:	687a      	ldr	r2, [r7, #4]
 8109bf2:	68b9      	ldr	r1, [r7, #8]
 8109bf4:	4618      	mov	r0, r3
 8109bf6:	f000 fc2f 	bl	810a458 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8109bfa:	6978      	ldr	r0, [r7, #20]
 8109bfc:	f7ff ff28 	bl	8109a50 <prvUnlockQueue>
	}
 8109c00:	bf00      	nop
 8109c02:	3718      	adds	r7, #24
 8109c04:	46bd      	mov	sp, r7
 8109c06:	bd80      	pop	{r7, pc}

08109c08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8109c08:	b580      	push	{r7, lr}
 8109c0a:	b08e      	sub	sp, #56	; 0x38
 8109c0c:	af04      	add	r7, sp, #16
 8109c0e:	60f8      	str	r0, [r7, #12]
 8109c10:	60b9      	str	r1, [r7, #8]
 8109c12:	607a      	str	r2, [r7, #4]
 8109c14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8109c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109c18:	2b00      	cmp	r3, #0
 8109c1a:	d109      	bne.n	8109c30 <xTaskCreateStatic+0x28>
 8109c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c20:	f383 8811 	msr	BASEPRI, r3
 8109c24:	f3bf 8f6f 	isb	sy
 8109c28:	f3bf 8f4f 	dsb	sy
 8109c2c:	623b      	str	r3, [r7, #32]
 8109c2e:	e7fe      	b.n	8109c2e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8109c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109c32:	2b00      	cmp	r3, #0
 8109c34:	d109      	bne.n	8109c4a <xTaskCreateStatic+0x42>
 8109c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c3a:	f383 8811 	msr	BASEPRI, r3
 8109c3e:	f3bf 8f6f 	isb	sy
 8109c42:	f3bf 8f4f 	dsb	sy
 8109c46:	61fb      	str	r3, [r7, #28]
 8109c48:	e7fe      	b.n	8109c48 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8109c4a:	235c      	movs	r3, #92	; 0x5c
 8109c4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8109c4e:	693b      	ldr	r3, [r7, #16]
 8109c50:	2b5c      	cmp	r3, #92	; 0x5c
 8109c52:	d009      	beq.n	8109c68 <xTaskCreateStatic+0x60>
 8109c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109c58:	f383 8811 	msr	BASEPRI, r3
 8109c5c:	f3bf 8f6f 	isb	sy
 8109c60:	f3bf 8f4f 	dsb	sy
 8109c64:	61bb      	str	r3, [r7, #24]
 8109c66:	e7fe      	b.n	8109c66 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8109c68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8109c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109c6c:	2b00      	cmp	r3, #0
 8109c6e:	d01e      	beq.n	8109cae <xTaskCreateStatic+0xa6>
 8109c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109c72:	2b00      	cmp	r3, #0
 8109c74:	d01b      	beq.n	8109cae <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8109c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109c78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8109c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8109c7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8109c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109c82:	2202      	movs	r2, #2
 8109c84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8109c88:	2300      	movs	r3, #0
 8109c8a:	9303      	str	r3, [sp, #12]
 8109c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109c8e:	9302      	str	r3, [sp, #8]
 8109c90:	f107 0314 	add.w	r3, r7, #20
 8109c94:	9301      	str	r3, [sp, #4]
 8109c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109c98:	9300      	str	r3, [sp, #0]
 8109c9a:	683b      	ldr	r3, [r7, #0]
 8109c9c:	687a      	ldr	r2, [r7, #4]
 8109c9e:	68b9      	ldr	r1, [r7, #8]
 8109ca0:	68f8      	ldr	r0, [r7, #12]
 8109ca2:	f000 f850 	bl	8109d46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109ca6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109ca8:	f000 f8dc 	bl	8109e64 <prvAddNewTaskToReadyList>
 8109cac:	e001      	b.n	8109cb2 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8109cae:	2300      	movs	r3, #0
 8109cb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8109cb2:	697b      	ldr	r3, [r7, #20]
	}
 8109cb4:	4618      	mov	r0, r3
 8109cb6:	3728      	adds	r7, #40	; 0x28
 8109cb8:	46bd      	mov	sp, r7
 8109cba:	bd80      	pop	{r7, pc}

08109cbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8109cbc:	b580      	push	{r7, lr}
 8109cbe:	b08c      	sub	sp, #48	; 0x30
 8109cc0:	af04      	add	r7, sp, #16
 8109cc2:	60f8      	str	r0, [r7, #12]
 8109cc4:	60b9      	str	r1, [r7, #8]
 8109cc6:	603b      	str	r3, [r7, #0]
 8109cc8:	4613      	mov	r3, r2
 8109cca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8109ccc:	88fb      	ldrh	r3, [r7, #6]
 8109cce:	009b      	lsls	r3, r3, #2
 8109cd0:	4618      	mov	r0, r3
 8109cd2:	f7fe fdfb 	bl	81088cc <pvPortMalloc>
 8109cd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8109cd8:	697b      	ldr	r3, [r7, #20]
 8109cda:	2b00      	cmp	r3, #0
 8109cdc:	d00e      	beq.n	8109cfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8109cde:	205c      	movs	r0, #92	; 0x5c
 8109ce0:	f7fe fdf4 	bl	81088cc <pvPortMalloc>
 8109ce4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8109ce6:	69fb      	ldr	r3, [r7, #28]
 8109ce8:	2b00      	cmp	r3, #0
 8109cea:	d003      	beq.n	8109cf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8109cec:	69fb      	ldr	r3, [r7, #28]
 8109cee:	697a      	ldr	r2, [r7, #20]
 8109cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8109cf2:	e005      	b.n	8109d00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8109cf4:	6978      	ldr	r0, [r7, #20]
 8109cf6:	f7fe feab 	bl	8108a50 <vPortFree>
 8109cfa:	e001      	b.n	8109d00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8109cfc:	2300      	movs	r3, #0
 8109cfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8109d00:	69fb      	ldr	r3, [r7, #28]
 8109d02:	2b00      	cmp	r3, #0
 8109d04:	d017      	beq.n	8109d36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8109d06:	69fb      	ldr	r3, [r7, #28]
 8109d08:	2200      	movs	r2, #0
 8109d0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8109d0e:	88fa      	ldrh	r2, [r7, #6]
 8109d10:	2300      	movs	r3, #0
 8109d12:	9303      	str	r3, [sp, #12]
 8109d14:	69fb      	ldr	r3, [r7, #28]
 8109d16:	9302      	str	r3, [sp, #8]
 8109d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109d1a:	9301      	str	r3, [sp, #4]
 8109d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109d1e:	9300      	str	r3, [sp, #0]
 8109d20:	683b      	ldr	r3, [r7, #0]
 8109d22:	68b9      	ldr	r1, [r7, #8]
 8109d24:	68f8      	ldr	r0, [r7, #12]
 8109d26:	f000 f80e 	bl	8109d46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8109d2a:	69f8      	ldr	r0, [r7, #28]
 8109d2c:	f000 f89a 	bl	8109e64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8109d30:	2301      	movs	r3, #1
 8109d32:	61bb      	str	r3, [r7, #24]
 8109d34:	e002      	b.n	8109d3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8109d36:	f04f 33ff 	mov.w	r3, #4294967295
 8109d3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8109d3c:	69bb      	ldr	r3, [r7, #24]
	}
 8109d3e:	4618      	mov	r0, r3
 8109d40:	3720      	adds	r7, #32
 8109d42:	46bd      	mov	sp, r7
 8109d44:	bd80      	pop	{r7, pc}

08109d46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8109d46:	b580      	push	{r7, lr}
 8109d48:	b088      	sub	sp, #32
 8109d4a:	af00      	add	r7, sp, #0
 8109d4c:	60f8      	str	r0, [r7, #12]
 8109d4e:	60b9      	str	r1, [r7, #8]
 8109d50:	607a      	str	r2, [r7, #4]
 8109d52:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8109d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8109d58:	687b      	ldr	r3, [r7, #4]
 8109d5a:	009b      	lsls	r3, r3, #2
 8109d5c:	461a      	mov	r2, r3
 8109d5e:	21a5      	movs	r1, #165	; 0xa5
 8109d60:	f001 f9b3 	bl	810b0ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8109d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8109d6e:	3b01      	subs	r3, #1
 8109d70:	009b      	lsls	r3, r3, #2
 8109d72:	4413      	add	r3, r2
 8109d74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8109d76:	69bb      	ldr	r3, [r7, #24]
 8109d78:	f023 0307 	bic.w	r3, r3, #7
 8109d7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8109d7e:	69bb      	ldr	r3, [r7, #24]
 8109d80:	f003 0307 	and.w	r3, r3, #7
 8109d84:	2b00      	cmp	r3, #0
 8109d86:	d009      	beq.n	8109d9c <prvInitialiseNewTask+0x56>
 8109d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109d8c:	f383 8811 	msr	BASEPRI, r3
 8109d90:	f3bf 8f6f 	isb	sy
 8109d94:	f3bf 8f4f 	dsb	sy
 8109d98:	617b      	str	r3, [r7, #20]
 8109d9a:	e7fe      	b.n	8109d9a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8109d9c:	68bb      	ldr	r3, [r7, #8]
 8109d9e:	2b00      	cmp	r3, #0
 8109da0:	d01f      	beq.n	8109de2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109da2:	2300      	movs	r3, #0
 8109da4:	61fb      	str	r3, [r7, #28]
 8109da6:	e012      	b.n	8109dce <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8109da8:	68ba      	ldr	r2, [r7, #8]
 8109daa:	69fb      	ldr	r3, [r7, #28]
 8109dac:	4413      	add	r3, r2
 8109dae:	7819      	ldrb	r1, [r3, #0]
 8109db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109db2:	69fb      	ldr	r3, [r7, #28]
 8109db4:	4413      	add	r3, r2
 8109db6:	3334      	adds	r3, #52	; 0x34
 8109db8:	460a      	mov	r2, r1
 8109dba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8109dbc:	68ba      	ldr	r2, [r7, #8]
 8109dbe:	69fb      	ldr	r3, [r7, #28]
 8109dc0:	4413      	add	r3, r2
 8109dc2:	781b      	ldrb	r3, [r3, #0]
 8109dc4:	2b00      	cmp	r3, #0
 8109dc6:	d006      	beq.n	8109dd6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8109dc8:	69fb      	ldr	r3, [r7, #28]
 8109dca:	3301      	adds	r3, #1
 8109dcc:	61fb      	str	r3, [r7, #28]
 8109dce:	69fb      	ldr	r3, [r7, #28]
 8109dd0:	2b0f      	cmp	r3, #15
 8109dd2:	d9e9      	bls.n	8109da8 <prvInitialiseNewTask+0x62>
 8109dd4:	e000      	b.n	8109dd8 <prvInitialiseNewTask+0x92>
			{
				break;
 8109dd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8109dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109dda:	2200      	movs	r2, #0
 8109ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8109de0:	e003      	b.n	8109dea <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8109de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109de4:	2200      	movs	r2, #0
 8109de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8109dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109dec:	2b37      	cmp	r3, #55	; 0x37
 8109dee:	d901      	bls.n	8109df4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8109df0:	2337      	movs	r3, #55	; 0x37
 8109df2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8109df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109df8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8109dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109dfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8109e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e02:	2200      	movs	r2, #0
 8109e04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8109e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e08:	3304      	adds	r3, #4
 8109e0a:	4618      	mov	r0, r3
 8109e0c:	f7fe ff54 	bl	8108cb8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8109e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e12:	3318      	adds	r3, #24
 8109e14:	4618      	mov	r0, r3
 8109e16:	f7fe ff4f 	bl	8108cb8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8109e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109e1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8109e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109e22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8109e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8109e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109e2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8109e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e32:	2200      	movs	r2, #0
 8109e34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8109e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e38:	2200      	movs	r2, #0
 8109e3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8109e3e:	683a      	ldr	r2, [r7, #0]
 8109e40:	68f9      	ldr	r1, [r7, #12]
 8109e42:	69b8      	ldr	r0, [r7, #24]
 8109e44:	f7fe ffcc 	bl	8108de0 <pxPortInitialiseStack>
 8109e48:	4602      	mov	r2, r0
 8109e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109e4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8109e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e50:	2b00      	cmp	r3, #0
 8109e52:	d002      	beq.n	8109e5a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8109e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109e5a:	bf00      	nop
 8109e5c:	3720      	adds	r7, #32
 8109e5e:	46bd      	mov	sp, r7
 8109e60:	bd80      	pop	{r7, pc}
	...

08109e64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8109e64:	b580      	push	{r7, lr}
 8109e66:	b082      	sub	sp, #8
 8109e68:	af00      	add	r7, sp, #0
 8109e6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8109e6c:	f7ff f8de 	bl	810902c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8109e70:	4b2d      	ldr	r3, [pc, #180]	; (8109f28 <prvAddNewTaskToReadyList+0xc4>)
 8109e72:	681b      	ldr	r3, [r3, #0]
 8109e74:	3301      	adds	r3, #1
 8109e76:	4a2c      	ldr	r2, [pc, #176]	; (8109f28 <prvAddNewTaskToReadyList+0xc4>)
 8109e78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8109e7a:	4b2c      	ldr	r3, [pc, #176]	; (8109f2c <prvAddNewTaskToReadyList+0xc8>)
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	2b00      	cmp	r3, #0
 8109e80:	d109      	bne.n	8109e96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8109e82:	4a2a      	ldr	r2, [pc, #168]	; (8109f2c <prvAddNewTaskToReadyList+0xc8>)
 8109e84:	687b      	ldr	r3, [r7, #4]
 8109e86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8109e88:	4b27      	ldr	r3, [pc, #156]	; (8109f28 <prvAddNewTaskToReadyList+0xc4>)
 8109e8a:	681b      	ldr	r3, [r3, #0]
 8109e8c:	2b01      	cmp	r3, #1
 8109e8e:	d110      	bne.n	8109eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8109e90:	f000 fc08 	bl	810a6a4 <prvInitialiseTaskLists>
 8109e94:	e00d      	b.n	8109eb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8109e96:	4b26      	ldr	r3, [pc, #152]	; (8109f30 <prvAddNewTaskToReadyList+0xcc>)
 8109e98:	681b      	ldr	r3, [r3, #0]
 8109e9a:	2b00      	cmp	r3, #0
 8109e9c:	d109      	bne.n	8109eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8109e9e:	4b23      	ldr	r3, [pc, #140]	; (8109f2c <prvAddNewTaskToReadyList+0xc8>)
 8109ea0:	681b      	ldr	r3, [r3, #0]
 8109ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109ea4:	687b      	ldr	r3, [r7, #4]
 8109ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ea8:	429a      	cmp	r2, r3
 8109eaa:	d802      	bhi.n	8109eb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8109eac:	4a1f      	ldr	r2, [pc, #124]	; (8109f2c <prvAddNewTaskToReadyList+0xc8>)
 8109eae:	687b      	ldr	r3, [r7, #4]
 8109eb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8109eb2:	4b20      	ldr	r3, [pc, #128]	; (8109f34 <prvAddNewTaskToReadyList+0xd0>)
 8109eb4:	681b      	ldr	r3, [r3, #0]
 8109eb6:	3301      	adds	r3, #1
 8109eb8:	4a1e      	ldr	r2, [pc, #120]	; (8109f34 <prvAddNewTaskToReadyList+0xd0>)
 8109eba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8109ebc:	4b1d      	ldr	r3, [pc, #116]	; (8109f34 <prvAddNewTaskToReadyList+0xd0>)
 8109ebe:	681a      	ldr	r2, [r3, #0]
 8109ec0:	687b      	ldr	r3, [r7, #4]
 8109ec2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8109ec4:	687b      	ldr	r3, [r7, #4]
 8109ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109ec8:	4b1b      	ldr	r3, [pc, #108]	; (8109f38 <prvAddNewTaskToReadyList+0xd4>)
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	429a      	cmp	r2, r3
 8109ece:	d903      	bls.n	8109ed8 <prvAddNewTaskToReadyList+0x74>
 8109ed0:	687b      	ldr	r3, [r7, #4]
 8109ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109ed4:	4a18      	ldr	r2, [pc, #96]	; (8109f38 <prvAddNewTaskToReadyList+0xd4>)
 8109ed6:	6013      	str	r3, [r2, #0]
 8109ed8:	687b      	ldr	r3, [r7, #4]
 8109eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109edc:	4613      	mov	r3, r2
 8109ede:	009b      	lsls	r3, r3, #2
 8109ee0:	4413      	add	r3, r2
 8109ee2:	009b      	lsls	r3, r3, #2
 8109ee4:	4a15      	ldr	r2, [pc, #84]	; (8109f3c <prvAddNewTaskToReadyList+0xd8>)
 8109ee6:	441a      	add	r2, r3
 8109ee8:	687b      	ldr	r3, [r7, #4]
 8109eea:	3304      	adds	r3, #4
 8109eec:	4619      	mov	r1, r3
 8109eee:	4610      	mov	r0, r2
 8109ef0:	f7fe feef 	bl	8108cd2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8109ef4:	f7ff f8c8 	bl	8109088 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8109ef8:	4b0d      	ldr	r3, [pc, #52]	; (8109f30 <prvAddNewTaskToReadyList+0xcc>)
 8109efa:	681b      	ldr	r3, [r3, #0]
 8109efc:	2b00      	cmp	r3, #0
 8109efe:	d00e      	beq.n	8109f1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8109f00:	4b0a      	ldr	r3, [pc, #40]	; (8109f2c <prvAddNewTaskToReadyList+0xc8>)
 8109f02:	681b      	ldr	r3, [r3, #0]
 8109f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109f0a:	429a      	cmp	r2, r3
 8109f0c:	d207      	bcs.n	8109f1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8109f0e:	4b0c      	ldr	r3, [pc, #48]	; (8109f40 <prvAddNewTaskToReadyList+0xdc>)
 8109f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109f14:	601a      	str	r2, [r3, #0]
 8109f16:	f3bf 8f4f 	dsb	sy
 8109f1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8109f1e:	bf00      	nop
 8109f20:	3708      	adds	r7, #8
 8109f22:	46bd      	mov	sp, r7
 8109f24:	bd80      	pop	{r7, pc}
 8109f26:	bf00      	nop
 8109f28:	100049bc 	.word	0x100049bc
 8109f2c:	100044e8 	.word	0x100044e8
 8109f30:	100049c8 	.word	0x100049c8
 8109f34:	100049d8 	.word	0x100049d8
 8109f38:	100049c4 	.word	0x100049c4
 8109f3c:	100044ec 	.word	0x100044ec
 8109f40:	e000ed04 	.word	0xe000ed04

08109f44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8109f44:	b580      	push	{r7, lr}
 8109f46:	b084      	sub	sp, #16
 8109f48:	af00      	add	r7, sp, #0
 8109f4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8109f4c:	2300      	movs	r3, #0
 8109f4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8109f50:	687b      	ldr	r3, [r7, #4]
 8109f52:	2b00      	cmp	r3, #0
 8109f54:	d016      	beq.n	8109f84 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8109f56:	4b13      	ldr	r3, [pc, #76]	; (8109fa4 <vTaskDelay+0x60>)
 8109f58:	681b      	ldr	r3, [r3, #0]
 8109f5a:	2b00      	cmp	r3, #0
 8109f5c:	d009      	beq.n	8109f72 <vTaskDelay+0x2e>
 8109f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8109f62:	f383 8811 	msr	BASEPRI, r3
 8109f66:	f3bf 8f6f 	isb	sy
 8109f6a:	f3bf 8f4f 	dsb	sy
 8109f6e:	60bb      	str	r3, [r7, #8]
 8109f70:	e7fe      	b.n	8109f70 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8109f72:	f000 f87f 	bl	810a074 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8109f76:	2100      	movs	r1, #0
 8109f78:	6878      	ldr	r0, [r7, #4]
 8109f7a:	f000 fcd7 	bl	810a92c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8109f7e:	f000 f887 	bl	810a090 <xTaskResumeAll>
 8109f82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8109f84:	68fb      	ldr	r3, [r7, #12]
 8109f86:	2b00      	cmp	r3, #0
 8109f88:	d107      	bne.n	8109f9a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8109f8a:	4b07      	ldr	r3, [pc, #28]	; (8109fa8 <vTaskDelay+0x64>)
 8109f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8109f90:	601a      	str	r2, [r3, #0]
 8109f92:	f3bf 8f4f 	dsb	sy
 8109f96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8109f9a:	bf00      	nop
 8109f9c:	3710      	adds	r7, #16
 8109f9e:	46bd      	mov	sp, r7
 8109fa0:	bd80      	pop	{r7, pc}
 8109fa2:	bf00      	nop
 8109fa4:	100049e4 	.word	0x100049e4
 8109fa8:	e000ed04 	.word	0xe000ed04

08109fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8109fac:	b580      	push	{r7, lr}
 8109fae:	b08a      	sub	sp, #40	; 0x28
 8109fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8109fb2:	2300      	movs	r3, #0
 8109fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8109fb6:	2300      	movs	r3, #0
 8109fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8109fba:	463a      	mov	r2, r7
 8109fbc:	1d39      	adds	r1, r7, #4
 8109fbe:	f107 0308 	add.w	r3, r7, #8
 8109fc2:	4618      	mov	r0, r3
 8109fc4:	f7fe fc4e 	bl	8108864 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8109fc8:	6839      	ldr	r1, [r7, #0]
 8109fca:	687b      	ldr	r3, [r7, #4]
 8109fcc:	68ba      	ldr	r2, [r7, #8]
 8109fce:	9202      	str	r2, [sp, #8]
 8109fd0:	9301      	str	r3, [sp, #4]
 8109fd2:	2300      	movs	r3, #0
 8109fd4:	9300      	str	r3, [sp, #0]
 8109fd6:	2300      	movs	r3, #0
 8109fd8:	460a      	mov	r2, r1
 8109fda:	4920      	ldr	r1, [pc, #128]	; (810a05c <vTaskStartScheduler+0xb0>)
 8109fdc:	4820      	ldr	r0, [pc, #128]	; (810a060 <vTaskStartScheduler+0xb4>)
 8109fde:	f7ff fe13 	bl	8109c08 <xTaskCreateStatic>
 8109fe2:	4602      	mov	r2, r0
 8109fe4:	4b1f      	ldr	r3, [pc, #124]	; (810a064 <vTaskStartScheduler+0xb8>)
 8109fe6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8109fe8:	4b1e      	ldr	r3, [pc, #120]	; (810a064 <vTaskStartScheduler+0xb8>)
 8109fea:	681b      	ldr	r3, [r3, #0]
 8109fec:	2b00      	cmp	r3, #0
 8109fee:	d002      	beq.n	8109ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8109ff0:	2301      	movs	r3, #1
 8109ff2:	617b      	str	r3, [r7, #20]
 8109ff4:	e001      	b.n	8109ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8109ff6:	2300      	movs	r3, #0
 8109ff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8109ffa:	697b      	ldr	r3, [r7, #20]
 8109ffc:	2b01      	cmp	r3, #1
 8109ffe:	d102      	bne.n	810a006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810a000:	f000 fce8 	bl	810a9d4 <xTimerCreateTimerTask>
 810a004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810a006:	697b      	ldr	r3, [r7, #20]
 810a008:	2b01      	cmp	r3, #1
 810a00a:	d115      	bne.n	810a038 <vTaskStartScheduler+0x8c>
 810a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a010:	f383 8811 	msr	BASEPRI, r3
 810a014:	f3bf 8f6f 	isb	sy
 810a018:	f3bf 8f4f 	dsb	sy
 810a01c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810a01e:	4b12      	ldr	r3, [pc, #72]	; (810a068 <vTaskStartScheduler+0xbc>)
 810a020:	f04f 32ff 	mov.w	r2, #4294967295
 810a024:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810a026:	4b11      	ldr	r3, [pc, #68]	; (810a06c <vTaskStartScheduler+0xc0>)
 810a028:	2201      	movs	r2, #1
 810a02a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810a02c:	4b10      	ldr	r3, [pc, #64]	; (810a070 <vTaskStartScheduler+0xc4>)
 810a02e:	2200      	movs	r2, #0
 810a030:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810a032:	f7fe ff5d 	bl	8108ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810a036:	e00d      	b.n	810a054 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810a038:	697b      	ldr	r3, [r7, #20]
 810a03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a03e:	d109      	bne.n	810a054 <vTaskStartScheduler+0xa8>
 810a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a044:	f383 8811 	msr	BASEPRI, r3
 810a048:	f3bf 8f6f 	isb	sy
 810a04c:	f3bf 8f4f 	dsb	sy
 810a050:	60fb      	str	r3, [r7, #12]
 810a052:	e7fe      	b.n	810a052 <vTaskStartScheduler+0xa6>
}
 810a054:	bf00      	nop
 810a056:	3718      	adds	r7, #24
 810a058:	46bd      	mov	sp, r7
 810a05a:	bd80      	pop	{r7, pc}
 810a05c:	0810cbc8 	.word	0x0810cbc8
 810a060:	0810a675 	.word	0x0810a675
 810a064:	100049e0 	.word	0x100049e0
 810a068:	100049dc 	.word	0x100049dc
 810a06c:	100049c8 	.word	0x100049c8
 810a070:	100049c0 	.word	0x100049c0

0810a074 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810a074:	b480      	push	{r7}
 810a076:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 810a078:	4b04      	ldr	r3, [pc, #16]	; (810a08c <vTaskSuspendAll+0x18>)
 810a07a:	681b      	ldr	r3, [r3, #0]
 810a07c:	3301      	adds	r3, #1
 810a07e:	4a03      	ldr	r2, [pc, #12]	; (810a08c <vTaskSuspendAll+0x18>)
 810a080:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 810a082:	bf00      	nop
 810a084:	46bd      	mov	sp, r7
 810a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a08a:	4770      	bx	lr
 810a08c:	100049e4 	.word	0x100049e4

0810a090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810a090:	b580      	push	{r7, lr}
 810a092:	b084      	sub	sp, #16
 810a094:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810a096:	2300      	movs	r3, #0
 810a098:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810a09a:	2300      	movs	r3, #0
 810a09c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810a09e:	4b41      	ldr	r3, [pc, #260]	; (810a1a4 <xTaskResumeAll+0x114>)
 810a0a0:	681b      	ldr	r3, [r3, #0]
 810a0a2:	2b00      	cmp	r3, #0
 810a0a4:	d109      	bne.n	810a0ba <xTaskResumeAll+0x2a>
 810a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a0aa:	f383 8811 	msr	BASEPRI, r3
 810a0ae:	f3bf 8f6f 	isb	sy
 810a0b2:	f3bf 8f4f 	dsb	sy
 810a0b6:	603b      	str	r3, [r7, #0]
 810a0b8:	e7fe      	b.n	810a0b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810a0ba:	f7fe ffb7 	bl	810902c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810a0be:	4b39      	ldr	r3, [pc, #228]	; (810a1a4 <xTaskResumeAll+0x114>)
 810a0c0:	681b      	ldr	r3, [r3, #0]
 810a0c2:	3b01      	subs	r3, #1
 810a0c4:	4a37      	ldr	r2, [pc, #220]	; (810a1a4 <xTaskResumeAll+0x114>)
 810a0c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a0c8:	4b36      	ldr	r3, [pc, #216]	; (810a1a4 <xTaskResumeAll+0x114>)
 810a0ca:	681b      	ldr	r3, [r3, #0]
 810a0cc:	2b00      	cmp	r3, #0
 810a0ce:	d162      	bne.n	810a196 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810a0d0:	4b35      	ldr	r3, [pc, #212]	; (810a1a8 <xTaskResumeAll+0x118>)
 810a0d2:	681b      	ldr	r3, [r3, #0]
 810a0d4:	2b00      	cmp	r3, #0
 810a0d6:	d05e      	beq.n	810a196 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a0d8:	e02f      	b.n	810a13a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a0da:	4b34      	ldr	r3, [pc, #208]	; (810a1ac <xTaskResumeAll+0x11c>)
 810a0dc:	68db      	ldr	r3, [r3, #12]
 810a0de:	68db      	ldr	r3, [r3, #12]
 810a0e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a0e2:	68fb      	ldr	r3, [r7, #12]
 810a0e4:	3318      	adds	r3, #24
 810a0e6:	4618      	mov	r0, r3
 810a0e8:	f7fe fe50 	bl	8108d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a0ec:	68fb      	ldr	r3, [r7, #12]
 810a0ee:	3304      	adds	r3, #4
 810a0f0:	4618      	mov	r0, r3
 810a0f2:	f7fe fe4b 	bl	8108d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810a0f6:	68fb      	ldr	r3, [r7, #12]
 810a0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a0fa:	4b2d      	ldr	r3, [pc, #180]	; (810a1b0 <xTaskResumeAll+0x120>)
 810a0fc:	681b      	ldr	r3, [r3, #0]
 810a0fe:	429a      	cmp	r2, r3
 810a100:	d903      	bls.n	810a10a <xTaskResumeAll+0x7a>
 810a102:	68fb      	ldr	r3, [r7, #12]
 810a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a106:	4a2a      	ldr	r2, [pc, #168]	; (810a1b0 <xTaskResumeAll+0x120>)
 810a108:	6013      	str	r3, [r2, #0]
 810a10a:	68fb      	ldr	r3, [r7, #12]
 810a10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a10e:	4613      	mov	r3, r2
 810a110:	009b      	lsls	r3, r3, #2
 810a112:	4413      	add	r3, r2
 810a114:	009b      	lsls	r3, r3, #2
 810a116:	4a27      	ldr	r2, [pc, #156]	; (810a1b4 <xTaskResumeAll+0x124>)
 810a118:	441a      	add	r2, r3
 810a11a:	68fb      	ldr	r3, [r7, #12]
 810a11c:	3304      	adds	r3, #4
 810a11e:	4619      	mov	r1, r3
 810a120:	4610      	mov	r0, r2
 810a122:	f7fe fdd6 	bl	8108cd2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a126:	68fb      	ldr	r3, [r7, #12]
 810a128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a12a:	4b23      	ldr	r3, [pc, #140]	; (810a1b8 <xTaskResumeAll+0x128>)
 810a12c:	681b      	ldr	r3, [r3, #0]
 810a12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a130:	429a      	cmp	r2, r3
 810a132:	d302      	bcc.n	810a13a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 810a134:	4b21      	ldr	r3, [pc, #132]	; (810a1bc <xTaskResumeAll+0x12c>)
 810a136:	2201      	movs	r2, #1
 810a138:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810a13a:	4b1c      	ldr	r3, [pc, #112]	; (810a1ac <xTaskResumeAll+0x11c>)
 810a13c:	681b      	ldr	r3, [r3, #0]
 810a13e:	2b00      	cmp	r3, #0
 810a140:	d1cb      	bne.n	810a0da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810a142:	68fb      	ldr	r3, [r7, #12]
 810a144:	2b00      	cmp	r3, #0
 810a146:	d001      	beq.n	810a14c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810a148:	f000 fb46 	bl	810a7d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810a14c:	4b1c      	ldr	r3, [pc, #112]	; (810a1c0 <xTaskResumeAll+0x130>)
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 810a152:	687b      	ldr	r3, [r7, #4]
 810a154:	2b00      	cmp	r3, #0
 810a156:	d010      	beq.n	810a17a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810a158:	f000 f846 	bl	810a1e8 <xTaskIncrementTick>
 810a15c:	4603      	mov	r3, r0
 810a15e:	2b00      	cmp	r3, #0
 810a160:	d002      	beq.n	810a168 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 810a162:	4b16      	ldr	r3, [pc, #88]	; (810a1bc <xTaskResumeAll+0x12c>)
 810a164:	2201      	movs	r2, #1
 810a166:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 810a168:	687b      	ldr	r3, [r7, #4]
 810a16a:	3b01      	subs	r3, #1
 810a16c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810a16e:	687b      	ldr	r3, [r7, #4]
 810a170:	2b00      	cmp	r3, #0
 810a172:	d1f1      	bne.n	810a158 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 810a174:	4b12      	ldr	r3, [pc, #72]	; (810a1c0 <xTaskResumeAll+0x130>)
 810a176:	2200      	movs	r2, #0
 810a178:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810a17a:	4b10      	ldr	r3, [pc, #64]	; (810a1bc <xTaskResumeAll+0x12c>)
 810a17c:	681b      	ldr	r3, [r3, #0]
 810a17e:	2b00      	cmp	r3, #0
 810a180:	d009      	beq.n	810a196 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810a182:	2301      	movs	r3, #1
 810a184:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810a186:	4b0f      	ldr	r3, [pc, #60]	; (810a1c4 <xTaskResumeAll+0x134>)
 810a188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a18c:	601a      	str	r2, [r3, #0]
 810a18e:	f3bf 8f4f 	dsb	sy
 810a192:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810a196:	f7fe ff77 	bl	8109088 <vPortExitCritical>

	return xAlreadyYielded;
 810a19a:	68bb      	ldr	r3, [r7, #8]
}
 810a19c:	4618      	mov	r0, r3
 810a19e:	3710      	adds	r7, #16
 810a1a0:	46bd      	mov	sp, r7
 810a1a2:	bd80      	pop	{r7, pc}
 810a1a4:	100049e4 	.word	0x100049e4
 810a1a8:	100049bc 	.word	0x100049bc
 810a1ac:	1000497c 	.word	0x1000497c
 810a1b0:	100049c4 	.word	0x100049c4
 810a1b4:	100044ec 	.word	0x100044ec
 810a1b8:	100044e8 	.word	0x100044e8
 810a1bc:	100049d0 	.word	0x100049d0
 810a1c0:	100049cc 	.word	0x100049cc
 810a1c4:	e000ed04 	.word	0xe000ed04

0810a1c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810a1c8:	b480      	push	{r7}
 810a1ca:	b083      	sub	sp, #12
 810a1cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810a1ce:	4b05      	ldr	r3, [pc, #20]	; (810a1e4 <xTaskGetTickCount+0x1c>)
 810a1d0:	681b      	ldr	r3, [r3, #0]
 810a1d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810a1d4:	687b      	ldr	r3, [r7, #4]
}
 810a1d6:	4618      	mov	r0, r3
 810a1d8:	370c      	adds	r7, #12
 810a1da:	46bd      	mov	sp, r7
 810a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a1e0:	4770      	bx	lr
 810a1e2:	bf00      	nop
 810a1e4:	100049c0 	.word	0x100049c0

0810a1e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810a1e8:	b580      	push	{r7, lr}
 810a1ea:	b086      	sub	sp, #24
 810a1ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810a1ee:	2300      	movs	r3, #0
 810a1f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a1f2:	4b4e      	ldr	r3, [pc, #312]	; (810a32c <xTaskIncrementTick+0x144>)
 810a1f4:	681b      	ldr	r3, [r3, #0]
 810a1f6:	2b00      	cmp	r3, #0
 810a1f8:	f040 8088 	bne.w	810a30c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810a1fc:	4b4c      	ldr	r3, [pc, #304]	; (810a330 <xTaskIncrementTick+0x148>)
 810a1fe:	681b      	ldr	r3, [r3, #0]
 810a200:	3301      	adds	r3, #1
 810a202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810a204:	4a4a      	ldr	r2, [pc, #296]	; (810a330 <xTaskIncrementTick+0x148>)
 810a206:	693b      	ldr	r3, [r7, #16]
 810a208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810a20a:	693b      	ldr	r3, [r7, #16]
 810a20c:	2b00      	cmp	r3, #0
 810a20e:	d11f      	bne.n	810a250 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 810a210:	4b48      	ldr	r3, [pc, #288]	; (810a334 <xTaskIncrementTick+0x14c>)
 810a212:	681b      	ldr	r3, [r3, #0]
 810a214:	681b      	ldr	r3, [r3, #0]
 810a216:	2b00      	cmp	r3, #0
 810a218:	d009      	beq.n	810a22e <xTaskIncrementTick+0x46>
 810a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a21e:	f383 8811 	msr	BASEPRI, r3
 810a222:	f3bf 8f6f 	isb	sy
 810a226:	f3bf 8f4f 	dsb	sy
 810a22a:	603b      	str	r3, [r7, #0]
 810a22c:	e7fe      	b.n	810a22c <xTaskIncrementTick+0x44>
 810a22e:	4b41      	ldr	r3, [pc, #260]	; (810a334 <xTaskIncrementTick+0x14c>)
 810a230:	681b      	ldr	r3, [r3, #0]
 810a232:	60fb      	str	r3, [r7, #12]
 810a234:	4b40      	ldr	r3, [pc, #256]	; (810a338 <xTaskIncrementTick+0x150>)
 810a236:	681b      	ldr	r3, [r3, #0]
 810a238:	4a3e      	ldr	r2, [pc, #248]	; (810a334 <xTaskIncrementTick+0x14c>)
 810a23a:	6013      	str	r3, [r2, #0]
 810a23c:	4a3e      	ldr	r2, [pc, #248]	; (810a338 <xTaskIncrementTick+0x150>)
 810a23e:	68fb      	ldr	r3, [r7, #12]
 810a240:	6013      	str	r3, [r2, #0]
 810a242:	4b3e      	ldr	r3, [pc, #248]	; (810a33c <xTaskIncrementTick+0x154>)
 810a244:	681b      	ldr	r3, [r3, #0]
 810a246:	3301      	adds	r3, #1
 810a248:	4a3c      	ldr	r2, [pc, #240]	; (810a33c <xTaskIncrementTick+0x154>)
 810a24a:	6013      	str	r3, [r2, #0]
 810a24c:	f000 fac4 	bl	810a7d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810a250:	4b3b      	ldr	r3, [pc, #236]	; (810a340 <xTaskIncrementTick+0x158>)
 810a252:	681b      	ldr	r3, [r3, #0]
 810a254:	693a      	ldr	r2, [r7, #16]
 810a256:	429a      	cmp	r2, r3
 810a258:	d349      	bcc.n	810a2ee <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a25a:	4b36      	ldr	r3, [pc, #216]	; (810a334 <xTaskIncrementTick+0x14c>)
 810a25c:	681b      	ldr	r3, [r3, #0]
 810a25e:	681b      	ldr	r3, [r3, #0]
 810a260:	2b00      	cmp	r3, #0
 810a262:	d104      	bne.n	810a26e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a264:	4b36      	ldr	r3, [pc, #216]	; (810a340 <xTaskIncrementTick+0x158>)
 810a266:	f04f 32ff 	mov.w	r2, #4294967295
 810a26a:	601a      	str	r2, [r3, #0]
					break;
 810a26c:	e03f      	b.n	810a2ee <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a26e:	4b31      	ldr	r3, [pc, #196]	; (810a334 <xTaskIncrementTick+0x14c>)
 810a270:	681b      	ldr	r3, [r3, #0]
 810a272:	68db      	ldr	r3, [r3, #12]
 810a274:	68db      	ldr	r3, [r3, #12]
 810a276:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810a278:	68bb      	ldr	r3, [r7, #8]
 810a27a:	685b      	ldr	r3, [r3, #4]
 810a27c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810a27e:	693a      	ldr	r2, [r7, #16]
 810a280:	687b      	ldr	r3, [r7, #4]
 810a282:	429a      	cmp	r2, r3
 810a284:	d203      	bcs.n	810a28e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810a286:	4a2e      	ldr	r2, [pc, #184]	; (810a340 <xTaskIncrementTick+0x158>)
 810a288:	687b      	ldr	r3, [r7, #4]
 810a28a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810a28c:	e02f      	b.n	810a2ee <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a28e:	68bb      	ldr	r3, [r7, #8]
 810a290:	3304      	adds	r3, #4
 810a292:	4618      	mov	r0, r3
 810a294:	f7fe fd7a 	bl	8108d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810a298:	68bb      	ldr	r3, [r7, #8]
 810a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a29c:	2b00      	cmp	r3, #0
 810a29e:	d004      	beq.n	810a2aa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810a2a0:	68bb      	ldr	r3, [r7, #8]
 810a2a2:	3318      	adds	r3, #24
 810a2a4:	4618      	mov	r0, r3
 810a2a6:	f7fe fd71 	bl	8108d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810a2aa:	68bb      	ldr	r3, [r7, #8]
 810a2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2ae:	4b25      	ldr	r3, [pc, #148]	; (810a344 <xTaskIncrementTick+0x15c>)
 810a2b0:	681b      	ldr	r3, [r3, #0]
 810a2b2:	429a      	cmp	r2, r3
 810a2b4:	d903      	bls.n	810a2be <xTaskIncrementTick+0xd6>
 810a2b6:	68bb      	ldr	r3, [r7, #8]
 810a2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2ba:	4a22      	ldr	r2, [pc, #136]	; (810a344 <xTaskIncrementTick+0x15c>)
 810a2bc:	6013      	str	r3, [r2, #0]
 810a2be:	68bb      	ldr	r3, [r7, #8]
 810a2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2c2:	4613      	mov	r3, r2
 810a2c4:	009b      	lsls	r3, r3, #2
 810a2c6:	4413      	add	r3, r2
 810a2c8:	009b      	lsls	r3, r3, #2
 810a2ca:	4a1f      	ldr	r2, [pc, #124]	; (810a348 <xTaskIncrementTick+0x160>)
 810a2cc:	441a      	add	r2, r3
 810a2ce:	68bb      	ldr	r3, [r7, #8]
 810a2d0:	3304      	adds	r3, #4
 810a2d2:	4619      	mov	r1, r3
 810a2d4:	4610      	mov	r0, r2
 810a2d6:	f7fe fcfc 	bl	8108cd2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810a2da:	68bb      	ldr	r3, [r7, #8]
 810a2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2de:	4b1b      	ldr	r3, [pc, #108]	; (810a34c <xTaskIncrementTick+0x164>)
 810a2e0:	681b      	ldr	r3, [r3, #0]
 810a2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2e4:	429a      	cmp	r2, r3
 810a2e6:	d3b8      	bcc.n	810a25a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 810a2e8:	2301      	movs	r3, #1
 810a2ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a2ec:	e7b5      	b.n	810a25a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810a2ee:	4b17      	ldr	r3, [pc, #92]	; (810a34c <xTaskIncrementTick+0x164>)
 810a2f0:	681b      	ldr	r3, [r3, #0]
 810a2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a2f4:	4914      	ldr	r1, [pc, #80]	; (810a348 <xTaskIncrementTick+0x160>)
 810a2f6:	4613      	mov	r3, r2
 810a2f8:	009b      	lsls	r3, r3, #2
 810a2fa:	4413      	add	r3, r2
 810a2fc:	009b      	lsls	r3, r3, #2
 810a2fe:	440b      	add	r3, r1
 810a300:	681b      	ldr	r3, [r3, #0]
 810a302:	2b01      	cmp	r3, #1
 810a304:	d907      	bls.n	810a316 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 810a306:	2301      	movs	r3, #1
 810a308:	617b      	str	r3, [r7, #20]
 810a30a:	e004      	b.n	810a316 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 810a30c:	4b10      	ldr	r3, [pc, #64]	; (810a350 <xTaskIncrementTick+0x168>)
 810a30e:	681b      	ldr	r3, [r3, #0]
 810a310:	3301      	adds	r3, #1
 810a312:	4a0f      	ldr	r2, [pc, #60]	; (810a350 <xTaskIncrementTick+0x168>)
 810a314:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 810a316:	4b0f      	ldr	r3, [pc, #60]	; (810a354 <xTaskIncrementTick+0x16c>)
 810a318:	681b      	ldr	r3, [r3, #0]
 810a31a:	2b00      	cmp	r3, #0
 810a31c:	d001      	beq.n	810a322 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 810a31e:	2301      	movs	r3, #1
 810a320:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 810a322:	697b      	ldr	r3, [r7, #20]
}
 810a324:	4618      	mov	r0, r3
 810a326:	3718      	adds	r7, #24
 810a328:	46bd      	mov	sp, r7
 810a32a:	bd80      	pop	{r7, pc}
 810a32c:	100049e4 	.word	0x100049e4
 810a330:	100049c0 	.word	0x100049c0
 810a334:	10004974 	.word	0x10004974
 810a338:	10004978 	.word	0x10004978
 810a33c:	100049d4 	.word	0x100049d4
 810a340:	100049dc 	.word	0x100049dc
 810a344:	100049c4 	.word	0x100049c4
 810a348:	100044ec 	.word	0x100044ec
 810a34c:	100044e8 	.word	0x100044e8
 810a350:	100049cc 	.word	0x100049cc
 810a354:	100049d0 	.word	0x100049d0

0810a358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810a358:	b480      	push	{r7}
 810a35a:	b085      	sub	sp, #20
 810a35c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810a35e:	4b27      	ldr	r3, [pc, #156]	; (810a3fc <vTaskSwitchContext+0xa4>)
 810a360:	681b      	ldr	r3, [r3, #0]
 810a362:	2b00      	cmp	r3, #0
 810a364:	d003      	beq.n	810a36e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810a366:	4b26      	ldr	r3, [pc, #152]	; (810a400 <vTaskSwitchContext+0xa8>)
 810a368:	2201      	movs	r2, #1
 810a36a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810a36c:	e040      	b.n	810a3f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 810a36e:	4b24      	ldr	r3, [pc, #144]	; (810a400 <vTaskSwitchContext+0xa8>)
 810a370:	2200      	movs	r2, #0
 810a372:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a374:	4b23      	ldr	r3, [pc, #140]	; (810a404 <vTaskSwitchContext+0xac>)
 810a376:	681b      	ldr	r3, [r3, #0]
 810a378:	60fb      	str	r3, [r7, #12]
 810a37a:	e00f      	b.n	810a39c <vTaskSwitchContext+0x44>
 810a37c:	68fb      	ldr	r3, [r7, #12]
 810a37e:	2b00      	cmp	r3, #0
 810a380:	d109      	bne.n	810a396 <vTaskSwitchContext+0x3e>
 810a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a386:	f383 8811 	msr	BASEPRI, r3
 810a38a:	f3bf 8f6f 	isb	sy
 810a38e:	f3bf 8f4f 	dsb	sy
 810a392:	607b      	str	r3, [r7, #4]
 810a394:	e7fe      	b.n	810a394 <vTaskSwitchContext+0x3c>
 810a396:	68fb      	ldr	r3, [r7, #12]
 810a398:	3b01      	subs	r3, #1
 810a39a:	60fb      	str	r3, [r7, #12]
 810a39c:	491a      	ldr	r1, [pc, #104]	; (810a408 <vTaskSwitchContext+0xb0>)
 810a39e:	68fa      	ldr	r2, [r7, #12]
 810a3a0:	4613      	mov	r3, r2
 810a3a2:	009b      	lsls	r3, r3, #2
 810a3a4:	4413      	add	r3, r2
 810a3a6:	009b      	lsls	r3, r3, #2
 810a3a8:	440b      	add	r3, r1
 810a3aa:	681b      	ldr	r3, [r3, #0]
 810a3ac:	2b00      	cmp	r3, #0
 810a3ae:	d0e5      	beq.n	810a37c <vTaskSwitchContext+0x24>
 810a3b0:	68fa      	ldr	r2, [r7, #12]
 810a3b2:	4613      	mov	r3, r2
 810a3b4:	009b      	lsls	r3, r3, #2
 810a3b6:	4413      	add	r3, r2
 810a3b8:	009b      	lsls	r3, r3, #2
 810a3ba:	4a13      	ldr	r2, [pc, #76]	; (810a408 <vTaskSwitchContext+0xb0>)
 810a3bc:	4413      	add	r3, r2
 810a3be:	60bb      	str	r3, [r7, #8]
 810a3c0:	68bb      	ldr	r3, [r7, #8]
 810a3c2:	685b      	ldr	r3, [r3, #4]
 810a3c4:	685a      	ldr	r2, [r3, #4]
 810a3c6:	68bb      	ldr	r3, [r7, #8]
 810a3c8:	605a      	str	r2, [r3, #4]
 810a3ca:	68bb      	ldr	r3, [r7, #8]
 810a3cc:	685a      	ldr	r2, [r3, #4]
 810a3ce:	68bb      	ldr	r3, [r7, #8]
 810a3d0:	3308      	adds	r3, #8
 810a3d2:	429a      	cmp	r2, r3
 810a3d4:	d104      	bne.n	810a3e0 <vTaskSwitchContext+0x88>
 810a3d6:	68bb      	ldr	r3, [r7, #8]
 810a3d8:	685b      	ldr	r3, [r3, #4]
 810a3da:	685a      	ldr	r2, [r3, #4]
 810a3dc:	68bb      	ldr	r3, [r7, #8]
 810a3de:	605a      	str	r2, [r3, #4]
 810a3e0:	68bb      	ldr	r3, [r7, #8]
 810a3e2:	685b      	ldr	r3, [r3, #4]
 810a3e4:	68db      	ldr	r3, [r3, #12]
 810a3e6:	4a09      	ldr	r2, [pc, #36]	; (810a40c <vTaskSwitchContext+0xb4>)
 810a3e8:	6013      	str	r3, [r2, #0]
 810a3ea:	4a06      	ldr	r2, [pc, #24]	; (810a404 <vTaskSwitchContext+0xac>)
 810a3ec:	68fb      	ldr	r3, [r7, #12]
 810a3ee:	6013      	str	r3, [r2, #0]
}
 810a3f0:	bf00      	nop
 810a3f2:	3714      	adds	r7, #20
 810a3f4:	46bd      	mov	sp, r7
 810a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a3fa:	4770      	bx	lr
 810a3fc:	100049e4 	.word	0x100049e4
 810a400:	100049d0 	.word	0x100049d0
 810a404:	100049c4 	.word	0x100049c4
 810a408:	100044ec 	.word	0x100044ec
 810a40c:	100044e8 	.word	0x100044e8

0810a410 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810a410:	b580      	push	{r7, lr}
 810a412:	b084      	sub	sp, #16
 810a414:	af00      	add	r7, sp, #0
 810a416:	6078      	str	r0, [r7, #4]
 810a418:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810a41a:	687b      	ldr	r3, [r7, #4]
 810a41c:	2b00      	cmp	r3, #0
 810a41e:	d109      	bne.n	810a434 <vTaskPlaceOnEventList+0x24>
 810a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a424:	f383 8811 	msr	BASEPRI, r3
 810a428:	f3bf 8f6f 	isb	sy
 810a42c:	f3bf 8f4f 	dsb	sy
 810a430:	60fb      	str	r3, [r7, #12]
 810a432:	e7fe      	b.n	810a432 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a434:	4b07      	ldr	r3, [pc, #28]	; (810a454 <vTaskPlaceOnEventList+0x44>)
 810a436:	681b      	ldr	r3, [r3, #0]
 810a438:	3318      	adds	r3, #24
 810a43a:	4619      	mov	r1, r3
 810a43c:	6878      	ldr	r0, [r7, #4]
 810a43e:	f7fe fc6c 	bl	8108d1a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810a442:	2101      	movs	r1, #1
 810a444:	6838      	ldr	r0, [r7, #0]
 810a446:	f000 fa71 	bl	810a92c <prvAddCurrentTaskToDelayedList>
}
 810a44a:	bf00      	nop
 810a44c:	3710      	adds	r7, #16
 810a44e:	46bd      	mov	sp, r7
 810a450:	bd80      	pop	{r7, pc}
 810a452:	bf00      	nop
 810a454:	100044e8 	.word	0x100044e8

0810a458 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810a458:	b580      	push	{r7, lr}
 810a45a:	b086      	sub	sp, #24
 810a45c:	af00      	add	r7, sp, #0
 810a45e:	60f8      	str	r0, [r7, #12]
 810a460:	60b9      	str	r1, [r7, #8]
 810a462:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810a464:	68fb      	ldr	r3, [r7, #12]
 810a466:	2b00      	cmp	r3, #0
 810a468:	d109      	bne.n	810a47e <vTaskPlaceOnEventListRestricted+0x26>
 810a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a46e:	f383 8811 	msr	BASEPRI, r3
 810a472:	f3bf 8f6f 	isb	sy
 810a476:	f3bf 8f4f 	dsb	sy
 810a47a:	617b      	str	r3, [r7, #20]
 810a47c:	e7fe      	b.n	810a47c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810a47e:	4b0a      	ldr	r3, [pc, #40]	; (810a4a8 <vTaskPlaceOnEventListRestricted+0x50>)
 810a480:	681b      	ldr	r3, [r3, #0]
 810a482:	3318      	adds	r3, #24
 810a484:	4619      	mov	r1, r3
 810a486:	68f8      	ldr	r0, [r7, #12]
 810a488:	f7fe fc23 	bl	8108cd2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810a48c:	687b      	ldr	r3, [r7, #4]
 810a48e:	2b00      	cmp	r3, #0
 810a490:	d002      	beq.n	810a498 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 810a492:	f04f 33ff 	mov.w	r3, #4294967295
 810a496:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810a498:	6879      	ldr	r1, [r7, #4]
 810a49a:	68b8      	ldr	r0, [r7, #8]
 810a49c:	f000 fa46 	bl	810a92c <prvAddCurrentTaskToDelayedList>
	}
 810a4a0:	bf00      	nop
 810a4a2:	3718      	adds	r7, #24
 810a4a4:	46bd      	mov	sp, r7
 810a4a6:	bd80      	pop	{r7, pc}
 810a4a8:	100044e8 	.word	0x100044e8

0810a4ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810a4ac:	b580      	push	{r7, lr}
 810a4ae:	b086      	sub	sp, #24
 810a4b0:	af00      	add	r7, sp, #0
 810a4b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a4b4:	687b      	ldr	r3, [r7, #4]
 810a4b6:	68db      	ldr	r3, [r3, #12]
 810a4b8:	68db      	ldr	r3, [r3, #12]
 810a4ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810a4bc:	693b      	ldr	r3, [r7, #16]
 810a4be:	2b00      	cmp	r3, #0
 810a4c0:	d109      	bne.n	810a4d6 <xTaskRemoveFromEventList+0x2a>
 810a4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a4c6:	f383 8811 	msr	BASEPRI, r3
 810a4ca:	f3bf 8f6f 	isb	sy
 810a4ce:	f3bf 8f4f 	dsb	sy
 810a4d2:	60fb      	str	r3, [r7, #12]
 810a4d4:	e7fe      	b.n	810a4d4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810a4d6:	693b      	ldr	r3, [r7, #16]
 810a4d8:	3318      	adds	r3, #24
 810a4da:	4618      	mov	r0, r3
 810a4dc:	f7fe fc56 	bl	8108d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a4e0:	4b1d      	ldr	r3, [pc, #116]	; (810a558 <xTaskRemoveFromEventList+0xac>)
 810a4e2:	681b      	ldr	r3, [r3, #0]
 810a4e4:	2b00      	cmp	r3, #0
 810a4e6:	d11d      	bne.n	810a524 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810a4e8:	693b      	ldr	r3, [r7, #16]
 810a4ea:	3304      	adds	r3, #4
 810a4ec:	4618      	mov	r0, r3
 810a4ee:	f7fe fc4d 	bl	8108d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810a4f2:	693b      	ldr	r3, [r7, #16]
 810a4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a4f6:	4b19      	ldr	r3, [pc, #100]	; (810a55c <xTaskRemoveFromEventList+0xb0>)
 810a4f8:	681b      	ldr	r3, [r3, #0]
 810a4fa:	429a      	cmp	r2, r3
 810a4fc:	d903      	bls.n	810a506 <xTaskRemoveFromEventList+0x5a>
 810a4fe:	693b      	ldr	r3, [r7, #16]
 810a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a502:	4a16      	ldr	r2, [pc, #88]	; (810a55c <xTaskRemoveFromEventList+0xb0>)
 810a504:	6013      	str	r3, [r2, #0]
 810a506:	693b      	ldr	r3, [r7, #16]
 810a508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a50a:	4613      	mov	r3, r2
 810a50c:	009b      	lsls	r3, r3, #2
 810a50e:	4413      	add	r3, r2
 810a510:	009b      	lsls	r3, r3, #2
 810a512:	4a13      	ldr	r2, [pc, #76]	; (810a560 <xTaskRemoveFromEventList+0xb4>)
 810a514:	441a      	add	r2, r3
 810a516:	693b      	ldr	r3, [r7, #16]
 810a518:	3304      	adds	r3, #4
 810a51a:	4619      	mov	r1, r3
 810a51c:	4610      	mov	r0, r2
 810a51e:	f7fe fbd8 	bl	8108cd2 <vListInsertEnd>
 810a522:	e005      	b.n	810a530 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810a524:	693b      	ldr	r3, [r7, #16]
 810a526:	3318      	adds	r3, #24
 810a528:	4619      	mov	r1, r3
 810a52a:	480e      	ldr	r0, [pc, #56]	; (810a564 <xTaskRemoveFromEventList+0xb8>)
 810a52c:	f7fe fbd1 	bl	8108cd2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810a530:	693b      	ldr	r3, [r7, #16]
 810a532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a534:	4b0c      	ldr	r3, [pc, #48]	; (810a568 <xTaskRemoveFromEventList+0xbc>)
 810a536:	681b      	ldr	r3, [r3, #0]
 810a538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a53a:	429a      	cmp	r2, r3
 810a53c:	d905      	bls.n	810a54a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810a53e:	2301      	movs	r3, #1
 810a540:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810a542:	4b0a      	ldr	r3, [pc, #40]	; (810a56c <xTaskRemoveFromEventList+0xc0>)
 810a544:	2201      	movs	r2, #1
 810a546:	601a      	str	r2, [r3, #0]
 810a548:	e001      	b.n	810a54e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810a54a:	2300      	movs	r3, #0
 810a54c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810a54e:	697b      	ldr	r3, [r7, #20]
}
 810a550:	4618      	mov	r0, r3
 810a552:	3718      	adds	r7, #24
 810a554:	46bd      	mov	sp, r7
 810a556:	bd80      	pop	{r7, pc}
 810a558:	100049e4 	.word	0x100049e4
 810a55c:	100049c4 	.word	0x100049c4
 810a560:	100044ec 	.word	0x100044ec
 810a564:	1000497c 	.word	0x1000497c
 810a568:	100044e8 	.word	0x100044e8
 810a56c:	100049d0 	.word	0x100049d0

0810a570 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810a570:	b480      	push	{r7}
 810a572:	b083      	sub	sp, #12
 810a574:	af00      	add	r7, sp, #0
 810a576:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810a578:	4b06      	ldr	r3, [pc, #24]	; (810a594 <vTaskInternalSetTimeOutState+0x24>)
 810a57a:	681a      	ldr	r2, [r3, #0]
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810a580:	4b05      	ldr	r3, [pc, #20]	; (810a598 <vTaskInternalSetTimeOutState+0x28>)
 810a582:	681a      	ldr	r2, [r3, #0]
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	605a      	str	r2, [r3, #4]
}
 810a588:	bf00      	nop
 810a58a:	370c      	adds	r7, #12
 810a58c:	46bd      	mov	sp, r7
 810a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a592:	4770      	bx	lr
 810a594:	100049d4 	.word	0x100049d4
 810a598:	100049c0 	.word	0x100049c0

0810a59c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810a59c:	b580      	push	{r7, lr}
 810a59e:	b088      	sub	sp, #32
 810a5a0:	af00      	add	r7, sp, #0
 810a5a2:	6078      	str	r0, [r7, #4]
 810a5a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810a5a6:	687b      	ldr	r3, [r7, #4]
 810a5a8:	2b00      	cmp	r3, #0
 810a5aa:	d109      	bne.n	810a5c0 <xTaskCheckForTimeOut+0x24>
 810a5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5b0:	f383 8811 	msr	BASEPRI, r3
 810a5b4:	f3bf 8f6f 	isb	sy
 810a5b8:	f3bf 8f4f 	dsb	sy
 810a5bc:	613b      	str	r3, [r7, #16]
 810a5be:	e7fe      	b.n	810a5be <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 810a5c0:	683b      	ldr	r3, [r7, #0]
 810a5c2:	2b00      	cmp	r3, #0
 810a5c4:	d109      	bne.n	810a5da <xTaskCheckForTimeOut+0x3e>
 810a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a5ca:	f383 8811 	msr	BASEPRI, r3
 810a5ce:	f3bf 8f6f 	isb	sy
 810a5d2:	f3bf 8f4f 	dsb	sy
 810a5d6:	60fb      	str	r3, [r7, #12]
 810a5d8:	e7fe      	b.n	810a5d8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 810a5da:	f7fe fd27 	bl	810902c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810a5de:	4b1d      	ldr	r3, [pc, #116]	; (810a654 <xTaskCheckForTimeOut+0xb8>)
 810a5e0:	681b      	ldr	r3, [r3, #0]
 810a5e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810a5e4:	687b      	ldr	r3, [r7, #4]
 810a5e6:	685b      	ldr	r3, [r3, #4]
 810a5e8:	69ba      	ldr	r2, [r7, #24]
 810a5ea:	1ad3      	subs	r3, r2, r3
 810a5ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810a5ee:	683b      	ldr	r3, [r7, #0]
 810a5f0:	681b      	ldr	r3, [r3, #0]
 810a5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a5f6:	d102      	bne.n	810a5fe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810a5f8:	2300      	movs	r3, #0
 810a5fa:	61fb      	str	r3, [r7, #28]
 810a5fc:	e023      	b.n	810a646 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810a5fe:	687b      	ldr	r3, [r7, #4]
 810a600:	681a      	ldr	r2, [r3, #0]
 810a602:	4b15      	ldr	r3, [pc, #84]	; (810a658 <xTaskCheckForTimeOut+0xbc>)
 810a604:	681b      	ldr	r3, [r3, #0]
 810a606:	429a      	cmp	r2, r3
 810a608:	d007      	beq.n	810a61a <xTaskCheckForTimeOut+0x7e>
 810a60a:	687b      	ldr	r3, [r7, #4]
 810a60c:	685b      	ldr	r3, [r3, #4]
 810a60e:	69ba      	ldr	r2, [r7, #24]
 810a610:	429a      	cmp	r2, r3
 810a612:	d302      	bcc.n	810a61a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810a614:	2301      	movs	r3, #1
 810a616:	61fb      	str	r3, [r7, #28]
 810a618:	e015      	b.n	810a646 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810a61a:	683b      	ldr	r3, [r7, #0]
 810a61c:	681b      	ldr	r3, [r3, #0]
 810a61e:	697a      	ldr	r2, [r7, #20]
 810a620:	429a      	cmp	r2, r3
 810a622:	d20b      	bcs.n	810a63c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810a624:	683b      	ldr	r3, [r7, #0]
 810a626:	681a      	ldr	r2, [r3, #0]
 810a628:	697b      	ldr	r3, [r7, #20]
 810a62a:	1ad2      	subs	r2, r2, r3
 810a62c:	683b      	ldr	r3, [r7, #0]
 810a62e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810a630:	6878      	ldr	r0, [r7, #4]
 810a632:	f7ff ff9d 	bl	810a570 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810a636:	2300      	movs	r3, #0
 810a638:	61fb      	str	r3, [r7, #28]
 810a63a:	e004      	b.n	810a646 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810a63c:	683b      	ldr	r3, [r7, #0]
 810a63e:	2200      	movs	r2, #0
 810a640:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810a642:	2301      	movs	r3, #1
 810a644:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810a646:	f7fe fd1f 	bl	8109088 <vPortExitCritical>

	return xReturn;
 810a64a:	69fb      	ldr	r3, [r7, #28]
}
 810a64c:	4618      	mov	r0, r3
 810a64e:	3720      	adds	r7, #32
 810a650:	46bd      	mov	sp, r7
 810a652:	bd80      	pop	{r7, pc}
 810a654:	100049c0 	.word	0x100049c0
 810a658:	100049d4 	.word	0x100049d4

0810a65c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810a65c:	b480      	push	{r7}
 810a65e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810a660:	4b03      	ldr	r3, [pc, #12]	; (810a670 <vTaskMissedYield+0x14>)
 810a662:	2201      	movs	r2, #1
 810a664:	601a      	str	r2, [r3, #0]
}
 810a666:	bf00      	nop
 810a668:	46bd      	mov	sp, r7
 810a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a66e:	4770      	bx	lr
 810a670:	100049d0 	.word	0x100049d0

0810a674 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810a674:	b580      	push	{r7, lr}
 810a676:	b082      	sub	sp, #8
 810a678:	af00      	add	r7, sp, #0
 810a67a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810a67c:	f000 f852 	bl	810a724 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810a680:	4b06      	ldr	r3, [pc, #24]	; (810a69c <prvIdleTask+0x28>)
 810a682:	681b      	ldr	r3, [r3, #0]
 810a684:	2b01      	cmp	r3, #1
 810a686:	d9f9      	bls.n	810a67c <prvIdleTask+0x8>
			{
				taskYIELD();
 810a688:	4b05      	ldr	r3, [pc, #20]	; (810a6a0 <prvIdleTask+0x2c>)
 810a68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810a68e:	601a      	str	r2, [r3, #0]
 810a690:	f3bf 8f4f 	dsb	sy
 810a694:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810a698:	e7f0      	b.n	810a67c <prvIdleTask+0x8>
 810a69a:	bf00      	nop
 810a69c:	100044ec 	.word	0x100044ec
 810a6a0:	e000ed04 	.word	0xe000ed04

0810a6a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810a6a4:	b580      	push	{r7, lr}
 810a6a6:	b082      	sub	sp, #8
 810a6a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a6aa:	2300      	movs	r3, #0
 810a6ac:	607b      	str	r3, [r7, #4]
 810a6ae:	e00c      	b.n	810a6ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810a6b0:	687a      	ldr	r2, [r7, #4]
 810a6b2:	4613      	mov	r3, r2
 810a6b4:	009b      	lsls	r3, r3, #2
 810a6b6:	4413      	add	r3, r2
 810a6b8:	009b      	lsls	r3, r3, #2
 810a6ba:	4a12      	ldr	r2, [pc, #72]	; (810a704 <prvInitialiseTaskLists+0x60>)
 810a6bc:	4413      	add	r3, r2
 810a6be:	4618      	mov	r0, r3
 810a6c0:	f7fe fada 	bl	8108c78 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810a6c4:	687b      	ldr	r3, [r7, #4]
 810a6c6:	3301      	adds	r3, #1
 810a6c8:	607b      	str	r3, [r7, #4]
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	2b37      	cmp	r3, #55	; 0x37
 810a6ce:	d9ef      	bls.n	810a6b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810a6d0:	480d      	ldr	r0, [pc, #52]	; (810a708 <prvInitialiseTaskLists+0x64>)
 810a6d2:	f7fe fad1 	bl	8108c78 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810a6d6:	480d      	ldr	r0, [pc, #52]	; (810a70c <prvInitialiseTaskLists+0x68>)
 810a6d8:	f7fe face 	bl	8108c78 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810a6dc:	480c      	ldr	r0, [pc, #48]	; (810a710 <prvInitialiseTaskLists+0x6c>)
 810a6de:	f7fe facb 	bl	8108c78 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810a6e2:	480c      	ldr	r0, [pc, #48]	; (810a714 <prvInitialiseTaskLists+0x70>)
 810a6e4:	f7fe fac8 	bl	8108c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810a6e8:	480b      	ldr	r0, [pc, #44]	; (810a718 <prvInitialiseTaskLists+0x74>)
 810a6ea:	f7fe fac5 	bl	8108c78 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810a6ee:	4b0b      	ldr	r3, [pc, #44]	; (810a71c <prvInitialiseTaskLists+0x78>)
 810a6f0:	4a05      	ldr	r2, [pc, #20]	; (810a708 <prvInitialiseTaskLists+0x64>)
 810a6f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810a6f4:	4b0a      	ldr	r3, [pc, #40]	; (810a720 <prvInitialiseTaskLists+0x7c>)
 810a6f6:	4a05      	ldr	r2, [pc, #20]	; (810a70c <prvInitialiseTaskLists+0x68>)
 810a6f8:	601a      	str	r2, [r3, #0]
}
 810a6fa:	bf00      	nop
 810a6fc:	3708      	adds	r7, #8
 810a6fe:	46bd      	mov	sp, r7
 810a700:	bd80      	pop	{r7, pc}
 810a702:	bf00      	nop
 810a704:	100044ec 	.word	0x100044ec
 810a708:	1000494c 	.word	0x1000494c
 810a70c:	10004960 	.word	0x10004960
 810a710:	1000497c 	.word	0x1000497c
 810a714:	10004990 	.word	0x10004990
 810a718:	100049a8 	.word	0x100049a8
 810a71c:	10004974 	.word	0x10004974
 810a720:	10004978 	.word	0x10004978

0810a724 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810a724:	b580      	push	{r7, lr}
 810a726:	b082      	sub	sp, #8
 810a728:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a72a:	e019      	b.n	810a760 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810a72c:	f7fe fc7e 	bl	810902c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a730:	4b0f      	ldr	r3, [pc, #60]	; (810a770 <prvCheckTasksWaitingTermination+0x4c>)
 810a732:	68db      	ldr	r3, [r3, #12]
 810a734:	68db      	ldr	r3, [r3, #12]
 810a736:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810a738:	687b      	ldr	r3, [r7, #4]
 810a73a:	3304      	adds	r3, #4
 810a73c:	4618      	mov	r0, r3
 810a73e:	f7fe fb25 	bl	8108d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 810a742:	4b0c      	ldr	r3, [pc, #48]	; (810a774 <prvCheckTasksWaitingTermination+0x50>)
 810a744:	681b      	ldr	r3, [r3, #0]
 810a746:	3b01      	subs	r3, #1
 810a748:	4a0a      	ldr	r2, [pc, #40]	; (810a774 <prvCheckTasksWaitingTermination+0x50>)
 810a74a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810a74c:	4b0a      	ldr	r3, [pc, #40]	; (810a778 <prvCheckTasksWaitingTermination+0x54>)
 810a74e:	681b      	ldr	r3, [r3, #0]
 810a750:	3b01      	subs	r3, #1
 810a752:	4a09      	ldr	r2, [pc, #36]	; (810a778 <prvCheckTasksWaitingTermination+0x54>)
 810a754:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810a756:	f7fe fc97 	bl	8109088 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810a75a:	6878      	ldr	r0, [r7, #4]
 810a75c:	f000 f80e 	bl	810a77c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810a760:	4b05      	ldr	r3, [pc, #20]	; (810a778 <prvCheckTasksWaitingTermination+0x54>)
 810a762:	681b      	ldr	r3, [r3, #0]
 810a764:	2b00      	cmp	r3, #0
 810a766:	d1e1      	bne.n	810a72c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810a768:	bf00      	nop
 810a76a:	3708      	adds	r7, #8
 810a76c:	46bd      	mov	sp, r7
 810a76e:	bd80      	pop	{r7, pc}
 810a770:	10004990 	.word	0x10004990
 810a774:	100049bc 	.word	0x100049bc
 810a778:	100049a4 	.word	0x100049a4

0810a77c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810a77c:	b580      	push	{r7, lr}
 810a77e:	b084      	sub	sp, #16
 810a780:	af00      	add	r7, sp, #0
 810a782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810a784:	687b      	ldr	r3, [r7, #4]
 810a786:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810a78a:	2b00      	cmp	r3, #0
 810a78c:	d108      	bne.n	810a7a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810a78e:	687b      	ldr	r3, [r7, #4]
 810a790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a792:	4618      	mov	r0, r3
 810a794:	f7fe f95c 	bl	8108a50 <vPortFree>
				vPortFree( pxTCB );
 810a798:	6878      	ldr	r0, [r7, #4]
 810a79a:	f7fe f959 	bl	8108a50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810a79e:	e017      	b.n	810a7d0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810a7a0:	687b      	ldr	r3, [r7, #4]
 810a7a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810a7a6:	2b01      	cmp	r3, #1
 810a7a8:	d103      	bne.n	810a7b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810a7aa:	6878      	ldr	r0, [r7, #4]
 810a7ac:	f7fe f950 	bl	8108a50 <vPortFree>
	}
 810a7b0:	e00e      	b.n	810a7d0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810a7b2:	687b      	ldr	r3, [r7, #4]
 810a7b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810a7b8:	2b02      	cmp	r3, #2
 810a7ba:	d009      	beq.n	810a7d0 <prvDeleteTCB+0x54>
 810a7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a7c0:	f383 8811 	msr	BASEPRI, r3
 810a7c4:	f3bf 8f6f 	isb	sy
 810a7c8:	f3bf 8f4f 	dsb	sy
 810a7cc:	60fb      	str	r3, [r7, #12]
 810a7ce:	e7fe      	b.n	810a7ce <prvDeleteTCB+0x52>
	}
 810a7d0:	bf00      	nop
 810a7d2:	3710      	adds	r7, #16
 810a7d4:	46bd      	mov	sp, r7
 810a7d6:	bd80      	pop	{r7, pc}

0810a7d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810a7d8:	b480      	push	{r7}
 810a7da:	b083      	sub	sp, #12
 810a7dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810a7de:	4b0c      	ldr	r3, [pc, #48]	; (810a810 <prvResetNextTaskUnblockTime+0x38>)
 810a7e0:	681b      	ldr	r3, [r3, #0]
 810a7e2:	681b      	ldr	r3, [r3, #0]
 810a7e4:	2b00      	cmp	r3, #0
 810a7e6:	d104      	bne.n	810a7f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810a7e8:	4b0a      	ldr	r3, [pc, #40]	; (810a814 <prvResetNextTaskUnblockTime+0x3c>)
 810a7ea:	f04f 32ff 	mov.w	r2, #4294967295
 810a7ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810a7f0:	e008      	b.n	810a804 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810a7f2:	4b07      	ldr	r3, [pc, #28]	; (810a810 <prvResetNextTaskUnblockTime+0x38>)
 810a7f4:	681b      	ldr	r3, [r3, #0]
 810a7f6:	68db      	ldr	r3, [r3, #12]
 810a7f8:	68db      	ldr	r3, [r3, #12]
 810a7fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810a7fc:	687b      	ldr	r3, [r7, #4]
 810a7fe:	685b      	ldr	r3, [r3, #4]
 810a800:	4a04      	ldr	r2, [pc, #16]	; (810a814 <prvResetNextTaskUnblockTime+0x3c>)
 810a802:	6013      	str	r3, [r2, #0]
}
 810a804:	bf00      	nop
 810a806:	370c      	adds	r7, #12
 810a808:	46bd      	mov	sp, r7
 810a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a80e:	4770      	bx	lr
 810a810:	10004974 	.word	0x10004974
 810a814:	100049dc 	.word	0x100049dc

0810a818 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810a818:	b480      	push	{r7}
 810a81a:	b083      	sub	sp, #12
 810a81c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810a81e:	4b0b      	ldr	r3, [pc, #44]	; (810a84c <xTaskGetSchedulerState+0x34>)
 810a820:	681b      	ldr	r3, [r3, #0]
 810a822:	2b00      	cmp	r3, #0
 810a824:	d102      	bne.n	810a82c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810a826:	2301      	movs	r3, #1
 810a828:	607b      	str	r3, [r7, #4]
 810a82a:	e008      	b.n	810a83e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810a82c:	4b08      	ldr	r3, [pc, #32]	; (810a850 <xTaskGetSchedulerState+0x38>)
 810a82e:	681b      	ldr	r3, [r3, #0]
 810a830:	2b00      	cmp	r3, #0
 810a832:	d102      	bne.n	810a83a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810a834:	2302      	movs	r3, #2
 810a836:	607b      	str	r3, [r7, #4]
 810a838:	e001      	b.n	810a83e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810a83a:	2300      	movs	r3, #0
 810a83c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810a83e:	687b      	ldr	r3, [r7, #4]
	}
 810a840:	4618      	mov	r0, r3
 810a842:	370c      	adds	r7, #12
 810a844:	46bd      	mov	sp, r7
 810a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a84a:	4770      	bx	lr
 810a84c:	100049c8 	.word	0x100049c8
 810a850:	100049e4 	.word	0x100049e4

0810a854 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810a854:	b580      	push	{r7, lr}
 810a856:	b086      	sub	sp, #24
 810a858:	af00      	add	r7, sp, #0
 810a85a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810a85c:	687b      	ldr	r3, [r7, #4]
 810a85e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810a860:	2300      	movs	r3, #0
 810a862:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810a864:	687b      	ldr	r3, [r7, #4]
 810a866:	2b00      	cmp	r3, #0
 810a868:	d054      	beq.n	810a914 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810a86a:	4b2d      	ldr	r3, [pc, #180]	; (810a920 <xTaskPriorityDisinherit+0xcc>)
 810a86c:	681b      	ldr	r3, [r3, #0]
 810a86e:	693a      	ldr	r2, [r7, #16]
 810a870:	429a      	cmp	r2, r3
 810a872:	d009      	beq.n	810a888 <xTaskPriorityDisinherit+0x34>
 810a874:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a878:	f383 8811 	msr	BASEPRI, r3
 810a87c:	f3bf 8f6f 	isb	sy
 810a880:	f3bf 8f4f 	dsb	sy
 810a884:	60fb      	str	r3, [r7, #12]
 810a886:	e7fe      	b.n	810a886 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 810a888:	693b      	ldr	r3, [r7, #16]
 810a88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a88c:	2b00      	cmp	r3, #0
 810a88e:	d109      	bne.n	810a8a4 <xTaskPriorityDisinherit+0x50>
 810a890:	f04f 0350 	mov.w	r3, #80	; 0x50
 810a894:	f383 8811 	msr	BASEPRI, r3
 810a898:	f3bf 8f6f 	isb	sy
 810a89c:	f3bf 8f4f 	dsb	sy
 810a8a0:	60bb      	str	r3, [r7, #8]
 810a8a2:	e7fe      	b.n	810a8a2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 810a8a4:	693b      	ldr	r3, [r7, #16]
 810a8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a8a8:	1e5a      	subs	r2, r3, #1
 810a8aa:	693b      	ldr	r3, [r7, #16]
 810a8ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810a8ae:	693b      	ldr	r3, [r7, #16]
 810a8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a8b2:	693b      	ldr	r3, [r7, #16]
 810a8b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a8b6:	429a      	cmp	r2, r3
 810a8b8:	d02c      	beq.n	810a914 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810a8ba:	693b      	ldr	r3, [r7, #16]
 810a8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a8be:	2b00      	cmp	r3, #0
 810a8c0:	d128      	bne.n	810a914 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a8c2:	693b      	ldr	r3, [r7, #16]
 810a8c4:	3304      	adds	r3, #4
 810a8c6:	4618      	mov	r0, r3
 810a8c8:	f7fe fa60 	bl	8108d8c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810a8cc:	693b      	ldr	r3, [r7, #16]
 810a8ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810a8d0:	693b      	ldr	r3, [r7, #16]
 810a8d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810a8d4:	693b      	ldr	r3, [r7, #16]
 810a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 810a8dc:	693b      	ldr	r3, [r7, #16]
 810a8de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810a8e0:	693b      	ldr	r3, [r7, #16]
 810a8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a8e4:	4b0f      	ldr	r3, [pc, #60]	; (810a924 <xTaskPriorityDisinherit+0xd0>)
 810a8e6:	681b      	ldr	r3, [r3, #0]
 810a8e8:	429a      	cmp	r2, r3
 810a8ea:	d903      	bls.n	810a8f4 <xTaskPriorityDisinherit+0xa0>
 810a8ec:	693b      	ldr	r3, [r7, #16]
 810a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a8f0:	4a0c      	ldr	r2, [pc, #48]	; (810a924 <xTaskPriorityDisinherit+0xd0>)
 810a8f2:	6013      	str	r3, [r2, #0]
 810a8f4:	693b      	ldr	r3, [r7, #16]
 810a8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810a8f8:	4613      	mov	r3, r2
 810a8fa:	009b      	lsls	r3, r3, #2
 810a8fc:	4413      	add	r3, r2
 810a8fe:	009b      	lsls	r3, r3, #2
 810a900:	4a09      	ldr	r2, [pc, #36]	; (810a928 <xTaskPriorityDisinherit+0xd4>)
 810a902:	441a      	add	r2, r3
 810a904:	693b      	ldr	r3, [r7, #16]
 810a906:	3304      	adds	r3, #4
 810a908:	4619      	mov	r1, r3
 810a90a:	4610      	mov	r0, r2
 810a90c:	f7fe f9e1 	bl	8108cd2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810a910:	2301      	movs	r3, #1
 810a912:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810a914:	697b      	ldr	r3, [r7, #20]
	}
 810a916:	4618      	mov	r0, r3
 810a918:	3718      	adds	r7, #24
 810a91a:	46bd      	mov	sp, r7
 810a91c:	bd80      	pop	{r7, pc}
 810a91e:	bf00      	nop
 810a920:	100044e8 	.word	0x100044e8
 810a924:	100049c4 	.word	0x100049c4
 810a928:	100044ec 	.word	0x100044ec

0810a92c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810a92c:	b580      	push	{r7, lr}
 810a92e:	b084      	sub	sp, #16
 810a930:	af00      	add	r7, sp, #0
 810a932:	6078      	str	r0, [r7, #4]
 810a934:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810a936:	4b21      	ldr	r3, [pc, #132]	; (810a9bc <prvAddCurrentTaskToDelayedList+0x90>)
 810a938:	681b      	ldr	r3, [r3, #0]
 810a93a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810a93c:	4b20      	ldr	r3, [pc, #128]	; (810a9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810a93e:	681b      	ldr	r3, [r3, #0]
 810a940:	3304      	adds	r3, #4
 810a942:	4618      	mov	r0, r3
 810a944:	f7fe fa22 	bl	8108d8c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810a948:	687b      	ldr	r3, [r7, #4]
 810a94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810a94e:	d10a      	bne.n	810a966 <prvAddCurrentTaskToDelayedList+0x3a>
 810a950:	683b      	ldr	r3, [r7, #0]
 810a952:	2b00      	cmp	r3, #0
 810a954:	d007      	beq.n	810a966 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a956:	4b1a      	ldr	r3, [pc, #104]	; (810a9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810a958:	681b      	ldr	r3, [r3, #0]
 810a95a:	3304      	adds	r3, #4
 810a95c:	4619      	mov	r1, r3
 810a95e:	4819      	ldr	r0, [pc, #100]	; (810a9c4 <prvAddCurrentTaskToDelayedList+0x98>)
 810a960:	f7fe f9b7 	bl	8108cd2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810a964:	e026      	b.n	810a9b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810a966:	68fa      	ldr	r2, [r7, #12]
 810a968:	687b      	ldr	r3, [r7, #4]
 810a96a:	4413      	add	r3, r2
 810a96c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810a96e:	4b14      	ldr	r3, [pc, #80]	; (810a9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810a970:	681b      	ldr	r3, [r3, #0]
 810a972:	68ba      	ldr	r2, [r7, #8]
 810a974:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810a976:	68ba      	ldr	r2, [r7, #8]
 810a978:	68fb      	ldr	r3, [r7, #12]
 810a97a:	429a      	cmp	r2, r3
 810a97c:	d209      	bcs.n	810a992 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a97e:	4b12      	ldr	r3, [pc, #72]	; (810a9c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 810a980:	681a      	ldr	r2, [r3, #0]
 810a982:	4b0f      	ldr	r3, [pc, #60]	; (810a9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810a984:	681b      	ldr	r3, [r3, #0]
 810a986:	3304      	adds	r3, #4
 810a988:	4619      	mov	r1, r3
 810a98a:	4610      	mov	r0, r2
 810a98c:	f7fe f9c5 	bl	8108d1a <vListInsert>
}
 810a990:	e010      	b.n	810a9b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810a992:	4b0e      	ldr	r3, [pc, #56]	; (810a9cc <prvAddCurrentTaskToDelayedList+0xa0>)
 810a994:	681a      	ldr	r2, [r3, #0]
 810a996:	4b0a      	ldr	r3, [pc, #40]	; (810a9c0 <prvAddCurrentTaskToDelayedList+0x94>)
 810a998:	681b      	ldr	r3, [r3, #0]
 810a99a:	3304      	adds	r3, #4
 810a99c:	4619      	mov	r1, r3
 810a99e:	4610      	mov	r0, r2
 810a9a0:	f7fe f9bb 	bl	8108d1a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810a9a4:	4b0a      	ldr	r3, [pc, #40]	; (810a9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810a9a6:	681b      	ldr	r3, [r3, #0]
 810a9a8:	68ba      	ldr	r2, [r7, #8]
 810a9aa:	429a      	cmp	r2, r3
 810a9ac:	d202      	bcs.n	810a9b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810a9ae:	4a08      	ldr	r2, [pc, #32]	; (810a9d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 810a9b0:	68bb      	ldr	r3, [r7, #8]
 810a9b2:	6013      	str	r3, [r2, #0]
}
 810a9b4:	bf00      	nop
 810a9b6:	3710      	adds	r7, #16
 810a9b8:	46bd      	mov	sp, r7
 810a9ba:	bd80      	pop	{r7, pc}
 810a9bc:	100049c0 	.word	0x100049c0
 810a9c0:	100044e8 	.word	0x100044e8
 810a9c4:	100049a8 	.word	0x100049a8
 810a9c8:	10004978 	.word	0x10004978
 810a9cc:	10004974 	.word	0x10004974
 810a9d0:	100049dc 	.word	0x100049dc

0810a9d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810a9d4:	b580      	push	{r7, lr}
 810a9d6:	b08a      	sub	sp, #40	; 0x28
 810a9d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810a9da:	2300      	movs	r3, #0
 810a9dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810a9de:	f000 faff 	bl	810afe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810a9e2:	4b1c      	ldr	r3, [pc, #112]	; (810aa54 <xTimerCreateTimerTask+0x80>)
 810a9e4:	681b      	ldr	r3, [r3, #0]
 810a9e6:	2b00      	cmp	r3, #0
 810a9e8:	d021      	beq.n	810aa2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810a9ea:	2300      	movs	r3, #0
 810a9ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810a9ee:	2300      	movs	r3, #0
 810a9f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810a9f2:	1d3a      	adds	r2, r7, #4
 810a9f4:	f107 0108 	add.w	r1, r7, #8
 810a9f8:	f107 030c 	add.w	r3, r7, #12
 810a9fc:	4618      	mov	r0, r3
 810a9fe:	f7fd ff4b 	bl	8108898 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810aa02:	6879      	ldr	r1, [r7, #4]
 810aa04:	68bb      	ldr	r3, [r7, #8]
 810aa06:	68fa      	ldr	r2, [r7, #12]
 810aa08:	9202      	str	r2, [sp, #8]
 810aa0a:	9301      	str	r3, [sp, #4]
 810aa0c:	2302      	movs	r3, #2
 810aa0e:	9300      	str	r3, [sp, #0]
 810aa10:	2300      	movs	r3, #0
 810aa12:	460a      	mov	r2, r1
 810aa14:	4910      	ldr	r1, [pc, #64]	; (810aa58 <xTimerCreateTimerTask+0x84>)
 810aa16:	4811      	ldr	r0, [pc, #68]	; (810aa5c <xTimerCreateTimerTask+0x88>)
 810aa18:	f7ff f8f6 	bl	8109c08 <xTaskCreateStatic>
 810aa1c:	4602      	mov	r2, r0
 810aa1e:	4b10      	ldr	r3, [pc, #64]	; (810aa60 <xTimerCreateTimerTask+0x8c>)
 810aa20:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810aa22:	4b0f      	ldr	r3, [pc, #60]	; (810aa60 <xTimerCreateTimerTask+0x8c>)
 810aa24:	681b      	ldr	r3, [r3, #0]
 810aa26:	2b00      	cmp	r3, #0
 810aa28:	d001      	beq.n	810aa2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810aa2a:	2301      	movs	r3, #1
 810aa2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810aa2e:	697b      	ldr	r3, [r7, #20]
 810aa30:	2b00      	cmp	r3, #0
 810aa32:	d109      	bne.n	810aa48 <xTimerCreateTimerTask+0x74>
 810aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa38:	f383 8811 	msr	BASEPRI, r3
 810aa3c:	f3bf 8f6f 	isb	sy
 810aa40:	f3bf 8f4f 	dsb	sy
 810aa44:	613b      	str	r3, [r7, #16]
 810aa46:	e7fe      	b.n	810aa46 <xTimerCreateTimerTask+0x72>
	return xReturn;
 810aa48:	697b      	ldr	r3, [r7, #20]
}
 810aa4a:	4618      	mov	r0, r3
 810aa4c:	3718      	adds	r7, #24
 810aa4e:	46bd      	mov	sp, r7
 810aa50:	bd80      	pop	{r7, pc}
 810aa52:	bf00      	nop
 810aa54:	10004a18 	.word	0x10004a18
 810aa58:	0810cbd0 	.word	0x0810cbd0
 810aa5c:	0810ab95 	.word	0x0810ab95
 810aa60:	10004a1c 	.word	0x10004a1c

0810aa64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810aa64:	b580      	push	{r7, lr}
 810aa66:	b08a      	sub	sp, #40	; 0x28
 810aa68:	af00      	add	r7, sp, #0
 810aa6a:	60f8      	str	r0, [r7, #12]
 810aa6c:	60b9      	str	r1, [r7, #8]
 810aa6e:	607a      	str	r2, [r7, #4]
 810aa70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810aa72:	2300      	movs	r3, #0
 810aa74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810aa76:	68fb      	ldr	r3, [r7, #12]
 810aa78:	2b00      	cmp	r3, #0
 810aa7a:	d109      	bne.n	810aa90 <xTimerGenericCommand+0x2c>
 810aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aa80:	f383 8811 	msr	BASEPRI, r3
 810aa84:	f3bf 8f6f 	isb	sy
 810aa88:	f3bf 8f4f 	dsb	sy
 810aa8c:	623b      	str	r3, [r7, #32]
 810aa8e:	e7fe      	b.n	810aa8e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810aa90:	4b19      	ldr	r3, [pc, #100]	; (810aaf8 <xTimerGenericCommand+0x94>)
 810aa92:	681b      	ldr	r3, [r3, #0]
 810aa94:	2b00      	cmp	r3, #0
 810aa96:	d02a      	beq.n	810aaee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810aa98:	68bb      	ldr	r3, [r7, #8]
 810aa9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810aa9c:	687b      	ldr	r3, [r7, #4]
 810aa9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810aaa0:	68fb      	ldr	r3, [r7, #12]
 810aaa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810aaa4:	68bb      	ldr	r3, [r7, #8]
 810aaa6:	2b05      	cmp	r3, #5
 810aaa8:	dc18      	bgt.n	810aadc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810aaaa:	f7ff feb5 	bl	810a818 <xTaskGetSchedulerState>
 810aaae:	4603      	mov	r3, r0
 810aab0:	2b02      	cmp	r3, #2
 810aab2:	d109      	bne.n	810aac8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810aab4:	4b10      	ldr	r3, [pc, #64]	; (810aaf8 <xTimerGenericCommand+0x94>)
 810aab6:	6818      	ldr	r0, [r3, #0]
 810aab8:	f107 0110 	add.w	r1, r7, #16
 810aabc:	2300      	movs	r3, #0
 810aabe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810aac0:	f7fe fccc 	bl	810945c <xQueueGenericSend>
 810aac4:	6278      	str	r0, [r7, #36]	; 0x24
 810aac6:	e012      	b.n	810aaee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810aac8:	4b0b      	ldr	r3, [pc, #44]	; (810aaf8 <xTimerGenericCommand+0x94>)
 810aaca:	6818      	ldr	r0, [r3, #0]
 810aacc:	f107 0110 	add.w	r1, r7, #16
 810aad0:	2300      	movs	r3, #0
 810aad2:	2200      	movs	r2, #0
 810aad4:	f7fe fcc2 	bl	810945c <xQueueGenericSend>
 810aad8:	6278      	str	r0, [r7, #36]	; 0x24
 810aada:	e008      	b.n	810aaee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810aadc:	4b06      	ldr	r3, [pc, #24]	; (810aaf8 <xTimerGenericCommand+0x94>)
 810aade:	6818      	ldr	r0, [r3, #0]
 810aae0:	f107 0110 	add.w	r1, r7, #16
 810aae4:	2300      	movs	r3, #0
 810aae6:	683a      	ldr	r2, [r7, #0]
 810aae8:	f7fe fdb2 	bl	8109650 <xQueueGenericSendFromISR>
 810aaec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 810aaf0:	4618      	mov	r0, r3
 810aaf2:	3728      	adds	r7, #40	; 0x28
 810aaf4:	46bd      	mov	sp, r7
 810aaf6:	bd80      	pop	{r7, pc}
 810aaf8:	10004a18 	.word	0x10004a18

0810aafc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810aafc:	b580      	push	{r7, lr}
 810aafe:	b088      	sub	sp, #32
 810ab00:	af02      	add	r7, sp, #8
 810ab02:	6078      	str	r0, [r7, #4]
 810ab04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ab06:	4b22      	ldr	r3, [pc, #136]	; (810ab90 <prvProcessExpiredTimer+0x94>)
 810ab08:	681b      	ldr	r3, [r3, #0]
 810ab0a:	68db      	ldr	r3, [r3, #12]
 810ab0c:	68db      	ldr	r3, [r3, #12]
 810ab0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810ab10:	697b      	ldr	r3, [r7, #20]
 810ab12:	3304      	adds	r3, #4
 810ab14:	4618      	mov	r0, r3
 810ab16:	f7fe f939 	bl	8108d8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810ab1a:	697b      	ldr	r3, [r7, #20]
 810ab1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810ab20:	f003 0304 	and.w	r3, r3, #4
 810ab24:	2b00      	cmp	r3, #0
 810ab26:	d021      	beq.n	810ab6c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810ab28:	697b      	ldr	r3, [r7, #20]
 810ab2a:	699a      	ldr	r2, [r3, #24]
 810ab2c:	687b      	ldr	r3, [r7, #4]
 810ab2e:	18d1      	adds	r1, r2, r3
 810ab30:	687b      	ldr	r3, [r7, #4]
 810ab32:	683a      	ldr	r2, [r7, #0]
 810ab34:	6978      	ldr	r0, [r7, #20]
 810ab36:	f000 f8d1 	bl	810acdc <prvInsertTimerInActiveList>
 810ab3a:	4603      	mov	r3, r0
 810ab3c:	2b00      	cmp	r3, #0
 810ab3e:	d01e      	beq.n	810ab7e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810ab40:	2300      	movs	r3, #0
 810ab42:	9300      	str	r3, [sp, #0]
 810ab44:	2300      	movs	r3, #0
 810ab46:	687a      	ldr	r2, [r7, #4]
 810ab48:	2100      	movs	r1, #0
 810ab4a:	6978      	ldr	r0, [r7, #20]
 810ab4c:	f7ff ff8a 	bl	810aa64 <xTimerGenericCommand>
 810ab50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810ab52:	693b      	ldr	r3, [r7, #16]
 810ab54:	2b00      	cmp	r3, #0
 810ab56:	d112      	bne.n	810ab7e <prvProcessExpiredTimer+0x82>
 810ab58:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ab5c:	f383 8811 	msr	BASEPRI, r3
 810ab60:	f3bf 8f6f 	isb	sy
 810ab64:	f3bf 8f4f 	dsb	sy
 810ab68:	60fb      	str	r3, [r7, #12]
 810ab6a:	e7fe      	b.n	810ab6a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810ab6c:	697b      	ldr	r3, [r7, #20]
 810ab6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810ab72:	f023 0301 	bic.w	r3, r3, #1
 810ab76:	b2da      	uxtb	r2, r3
 810ab78:	697b      	ldr	r3, [r7, #20]
 810ab7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810ab7e:	697b      	ldr	r3, [r7, #20]
 810ab80:	6a1b      	ldr	r3, [r3, #32]
 810ab82:	6978      	ldr	r0, [r7, #20]
 810ab84:	4798      	blx	r3
}
 810ab86:	bf00      	nop
 810ab88:	3718      	adds	r7, #24
 810ab8a:	46bd      	mov	sp, r7
 810ab8c:	bd80      	pop	{r7, pc}
 810ab8e:	bf00      	nop
 810ab90:	10004a10 	.word	0x10004a10

0810ab94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810ab94:	b580      	push	{r7, lr}
 810ab96:	b084      	sub	sp, #16
 810ab98:	af00      	add	r7, sp, #0
 810ab9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810ab9c:	f107 0308 	add.w	r3, r7, #8
 810aba0:	4618      	mov	r0, r3
 810aba2:	f000 f857 	bl	810ac54 <prvGetNextExpireTime>
 810aba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810aba8:	68bb      	ldr	r3, [r7, #8]
 810abaa:	4619      	mov	r1, r3
 810abac:	68f8      	ldr	r0, [r7, #12]
 810abae:	f000 f803 	bl	810abb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810abb2:	f000 f8d5 	bl	810ad60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810abb6:	e7f1      	b.n	810ab9c <prvTimerTask+0x8>

0810abb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810abb8:	b580      	push	{r7, lr}
 810abba:	b084      	sub	sp, #16
 810abbc:	af00      	add	r7, sp, #0
 810abbe:	6078      	str	r0, [r7, #4]
 810abc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810abc2:	f7ff fa57 	bl	810a074 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810abc6:	f107 0308 	add.w	r3, r7, #8
 810abca:	4618      	mov	r0, r3
 810abcc:	f000 f866 	bl	810ac9c <prvSampleTimeNow>
 810abd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810abd2:	68bb      	ldr	r3, [r7, #8]
 810abd4:	2b00      	cmp	r3, #0
 810abd6:	d130      	bne.n	810ac3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810abd8:	683b      	ldr	r3, [r7, #0]
 810abda:	2b00      	cmp	r3, #0
 810abdc:	d10a      	bne.n	810abf4 <prvProcessTimerOrBlockTask+0x3c>
 810abde:	687a      	ldr	r2, [r7, #4]
 810abe0:	68fb      	ldr	r3, [r7, #12]
 810abe2:	429a      	cmp	r2, r3
 810abe4:	d806      	bhi.n	810abf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810abe6:	f7ff fa53 	bl	810a090 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810abea:	68f9      	ldr	r1, [r7, #12]
 810abec:	6878      	ldr	r0, [r7, #4]
 810abee:	f7ff ff85 	bl	810aafc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810abf2:	e024      	b.n	810ac3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810abf4:	683b      	ldr	r3, [r7, #0]
 810abf6:	2b00      	cmp	r3, #0
 810abf8:	d008      	beq.n	810ac0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810abfa:	4b13      	ldr	r3, [pc, #76]	; (810ac48 <prvProcessTimerOrBlockTask+0x90>)
 810abfc:	681b      	ldr	r3, [r3, #0]
 810abfe:	681b      	ldr	r3, [r3, #0]
 810ac00:	2b00      	cmp	r3, #0
 810ac02:	d101      	bne.n	810ac08 <prvProcessTimerOrBlockTask+0x50>
 810ac04:	2301      	movs	r3, #1
 810ac06:	e000      	b.n	810ac0a <prvProcessTimerOrBlockTask+0x52>
 810ac08:	2300      	movs	r3, #0
 810ac0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810ac0c:	4b0f      	ldr	r3, [pc, #60]	; (810ac4c <prvProcessTimerOrBlockTask+0x94>)
 810ac0e:	6818      	ldr	r0, [r3, #0]
 810ac10:	687a      	ldr	r2, [r7, #4]
 810ac12:	68fb      	ldr	r3, [r7, #12]
 810ac14:	1ad3      	subs	r3, r2, r3
 810ac16:	683a      	ldr	r2, [r7, #0]
 810ac18:	4619      	mov	r1, r3
 810ac1a:	f7fe ffc1 	bl	8109ba0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810ac1e:	f7ff fa37 	bl	810a090 <xTaskResumeAll>
 810ac22:	4603      	mov	r3, r0
 810ac24:	2b00      	cmp	r3, #0
 810ac26:	d10a      	bne.n	810ac3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810ac28:	4b09      	ldr	r3, [pc, #36]	; (810ac50 <prvProcessTimerOrBlockTask+0x98>)
 810ac2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810ac2e:	601a      	str	r2, [r3, #0]
 810ac30:	f3bf 8f4f 	dsb	sy
 810ac34:	f3bf 8f6f 	isb	sy
}
 810ac38:	e001      	b.n	810ac3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810ac3a:	f7ff fa29 	bl	810a090 <xTaskResumeAll>
}
 810ac3e:	bf00      	nop
 810ac40:	3710      	adds	r7, #16
 810ac42:	46bd      	mov	sp, r7
 810ac44:	bd80      	pop	{r7, pc}
 810ac46:	bf00      	nop
 810ac48:	10004a14 	.word	0x10004a14
 810ac4c:	10004a18 	.word	0x10004a18
 810ac50:	e000ed04 	.word	0xe000ed04

0810ac54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810ac54:	b480      	push	{r7}
 810ac56:	b085      	sub	sp, #20
 810ac58:	af00      	add	r7, sp, #0
 810ac5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810ac5c:	4b0e      	ldr	r3, [pc, #56]	; (810ac98 <prvGetNextExpireTime+0x44>)
 810ac5e:	681b      	ldr	r3, [r3, #0]
 810ac60:	681b      	ldr	r3, [r3, #0]
 810ac62:	2b00      	cmp	r3, #0
 810ac64:	d101      	bne.n	810ac6a <prvGetNextExpireTime+0x16>
 810ac66:	2201      	movs	r2, #1
 810ac68:	e000      	b.n	810ac6c <prvGetNextExpireTime+0x18>
 810ac6a:	2200      	movs	r2, #0
 810ac6c:	687b      	ldr	r3, [r7, #4]
 810ac6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810ac70:	687b      	ldr	r3, [r7, #4]
 810ac72:	681b      	ldr	r3, [r3, #0]
 810ac74:	2b00      	cmp	r3, #0
 810ac76:	d105      	bne.n	810ac84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810ac78:	4b07      	ldr	r3, [pc, #28]	; (810ac98 <prvGetNextExpireTime+0x44>)
 810ac7a:	681b      	ldr	r3, [r3, #0]
 810ac7c:	68db      	ldr	r3, [r3, #12]
 810ac7e:	681b      	ldr	r3, [r3, #0]
 810ac80:	60fb      	str	r3, [r7, #12]
 810ac82:	e001      	b.n	810ac88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810ac84:	2300      	movs	r3, #0
 810ac86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810ac88:	68fb      	ldr	r3, [r7, #12]
}
 810ac8a:	4618      	mov	r0, r3
 810ac8c:	3714      	adds	r7, #20
 810ac8e:	46bd      	mov	sp, r7
 810ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac94:	4770      	bx	lr
 810ac96:	bf00      	nop
 810ac98:	10004a10 	.word	0x10004a10

0810ac9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810ac9c:	b580      	push	{r7, lr}
 810ac9e:	b084      	sub	sp, #16
 810aca0:	af00      	add	r7, sp, #0
 810aca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810aca4:	f7ff fa90 	bl	810a1c8 <xTaskGetTickCount>
 810aca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810acaa:	4b0b      	ldr	r3, [pc, #44]	; (810acd8 <prvSampleTimeNow+0x3c>)
 810acac:	681b      	ldr	r3, [r3, #0]
 810acae:	68fa      	ldr	r2, [r7, #12]
 810acb0:	429a      	cmp	r2, r3
 810acb2:	d205      	bcs.n	810acc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810acb4:	f000 f930 	bl	810af18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	2201      	movs	r2, #1
 810acbc:	601a      	str	r2, [r3, #0]
 810acbe:	e002      	b.n	810acc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810acc0:	687b      	ldr	r3, [r7, #4]
 810acc2:	2200      	movs	r2, #0
 810acc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810acc6:	4a04      	ldr	r2, [pc, #16]	; (810acd8 <prvSampleTimeNow+0x3c>)
 810acc8:	68fb      	ldr	r3, [r7, #12]
 810acca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810accc:	68fb      	ldr	r3, [r7, #12]
}
 810acce:	4618      	mov	r0, r3
 810acd0:	3710      	adds	r7, #16
 810acd2:	46bd      	mov	sp, r7
 810acd4:	bd80      	pop	{r7, pc}
 810acd6:	bf00      	nop
 810acd8:	10004a20 	.word	0x10004a20

0810acdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810acdc:	b580      	push	{r7, lr}
 810acde:	b086      	sub	sp, #24
 810ace0:	af00      	add	r7, sp, #0
 810ace2:	60f8      	str	r0, [r7, #12]
 810ace4:	60b9      	str	r1, [r7, #8]
 810ace6:	607a      	str	r2, [r7, #4]
 810ace8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810acea:	2300      	movs	r3, #0
 810acec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810acee:	68fb      	ldr	r3, [r7, #12]
 810acf0:	68ba      	ldr	r2, [r7, #8]
 810acf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810acf4:	68fb      	ldr	r3, [r7, #12]
 810acf6:	68fa      	ldr	r2, [r7, #12]
 810acf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810acfa:	68ba      	ldr	r2, [r7, #8]
 810acfc:	687b      	ldr	r3, [r7, #4]
 810acfe:	429a      	cmp	r2, r3
 810ad00:	d812      	bhi.n	810ad28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ad02:	687a      	ldr	r2, [r7, #4]
 810ad04:	683b      	ldr	r3, [r7, #0]
 810ad06:	1ad2      	subs	r2, r2, r3
 810ad08:	68fb      	ldr	r3, [r7, #12]
 810ad0a:	699b      	ldr	r3, [r3, #24]
 810ad0c:	429a      	cmp	r2, r3
 810ad0e:	d302      	bcc.n	810ad16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810ad10:	2301      	movs	r3, #1
 810ad12:	617b      	str	r3, [r7, #20]
 810ad14:	e01b      	b.n	810ad4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810ad16:	4b10      	ldr	r3, [pc, #64]	; (810ad58 <prvInsertTimerInActiveList+0x7c>)
 810ad18:	681a      	ldr	r2, [r3, #0]
 810ad1a:	68fb      	ldr	r3, [r7, #12]
 810ad1c:	3304      	adds	r3, #4
 810ad1e:	4619      	mov	r1, r3
 810ad20:	4610      	mov	r0, r2
 810ad22:	f7fd fffa 	bl	8108d1a <vListInsert>
 810ad26:	e012      	b.n	810ad4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810ad28:	687a      	ldr	r2, [r7, #4]
 810ad2a:	683b      	ldr	r3, [r7, #0]
 810ad2c:	429a      	cmp	r2, r3
 810ad2e:	d206      	bcs.n	810ad3e <prvInsertTimerInActiveList+0x62>
 810ad30:	68ba      	ldr	r2, [r7, #8]
 810ad32:	683b      	ldr	r3, [r7, #0]
 810ad34:	429a      	cmp	r2, r3
 810ad36:	d302      	bcc.n	810ad3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810ad38:	2301      	movs	r3, #1
 810ad3a:	617b      	str	r3, [r7, #20]
 810ad3c:	e007      	b.n	810ad4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810ad3e:	4b07      	ldr	r3, [pc, #28]	; (810ad5c <prvInsertTimerInActiveList+0x80>)
 810ad40:	681a      	ldr	r2, [r3, #0]
 810ad42:	68fb      	ldr	r3, [r7, #12]
 810ad44:	3304      	adds	r3, #4
 810ad46:	4619      	mov	r1, r3
 810ad48:	4610      	mov	r0, r2
 810ad4a:	f7fd ffe6 	bl	8108d1a <vListInsert>
		}
	}

	return xProcessTimerNow;
 810ad4e:	697b      	ldr	r3, [r7, #20]
}
 810ad50:	4618      	mov	r0, r3
 810ad52:	3718      	adds	r7, #24
 810ad54:	46bd      	mov	sp, r7
 810ad56:	bd80      	pop	{r7, pc}
 810ad58:	10004a14 	.word	0x10004a14
 810ad5c:	10004a10 	.word	0x10004a10

0810ad60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810ad60:	b580      	push	{r7, lr}
 810ad62:	b08e      	sub	sp, #56	; 0x38
 810ad64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810ad66:	e0c6      	b.n	810aef6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	2b00      	cmp	r3, #0
 810ad6c:	da17      	bge.n	810ad9e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810ad6e:	1d3b      	adds	r3, r7, #4
 810ad70:	3304      	adds	r3, #4
 810ad72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810ad74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ad76:	2b00      	cmp	r3, #0
 810ad78:	d109      	bne.n	810ad8e <prvProcessReceivedCommands+0x2e>
 810ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ad7e:	f383 8811 	msr	BASEPRI, r3
 810ad82:	f3bf 8f6f 	isb	sy
 810ad86:	f3bf 8f4f 	dsb	sy
 810ad8a:	61fb      	str	r3, [r7, #28]
 810ad8c:	e7fe      	b.n	810ad8c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810ad8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810ad90:	681b      	ldr	r3, [r3, #0]
 810ad92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810ad94:	6850      	ldr	r0, [r2, #4]
 810ad96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810ad98:	6892      	ldr	r2, [r2, #8]
 810ad9a:	4611      	mov	r1, r2
 810ad9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810ad9e:	687b      	ldr	r3, [r7, #4]
 810ada0:	2b00      	cmp	r3, #0
 810ada2:	f2c0 80a7 	blt.w	810aef4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810ada6:	68fb      	ldr	r3, [r7, #12]
 810ada8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810adaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810adac:	695b      	ldr	r3, [r3, #20]
 810adae:	2b00      	cmp	r3, #0
 810adb0:	d004      	beq.n	810adbc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810adb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810adb4:	3304      	adds	r3, #4
 810adb6:	4618      	mov	r0, r3
 810adb8:	f7fd ffe8 	bl	8108d8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810adbc:	463b      	mov	r3, r7
 810adbe:	4618      	mov	r0, r3
 810adc0:	f7ff ff6c 	bl	810ac9c <prvSampleTimeNow>
 810adc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 810adc6:	687b      	ldr	r3, [r7, #4]
 810adc8:	2b09      	cmp	r3, #9
 810adca:	f200 8094 	bhi.w	810aef6 <prvProcessReceivedCommands+0x196>
 810adce:	a201      	add	r2, pc, #4	; (adr r2, 810add4 <prvProcessReceivedCommands+0x74>)
 810add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810add4:	0810adfd 	.word	0x0810adfd
 810add8:	0810adfd 	.word	0x0810adfd
 810addc:	0810adfd 	.word	0x0810adfd
 810ade0:	0810ae6f 	.word	0x0810ae6f
 810ade4:	0810ae83 	.word	0x0810ae83
 810ade8:	0810aecb 	.word	0x0810aecb
 810adec:	0810adfd 	.word	0x0810adfd
 810adf0:	0810adfd 	.word	0x0810adfd
 810adf4:	0810ae6f 	.word	0x0810ae6f
 810adf8:	0810ae83 	.word	0x0810ae83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810adfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810ae02:	f043 0301 	orr.w	r3, r3, #1
 810ae06:	b2da      	uxtb	r2, r3
 810ae08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810ae0e:	68ba      	ldr	r2, [r7, #8]
 810ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae12:	699b      	ldr	r3, [r3, #24]
 810ae14:	18d1      	adds	r1, r2, r3
 810ae16:	68bb      	ldr	r3, [r7, #8]
 810ae18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810ae1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810ae1c:	f7ff ff5e 	bl	810acdc <prvInsertTimerInActiveList>
 810ae20:	4603      	mov	r3, r0
 810ae22:	2b00      	cmp	r3, #0
 810ae24:	d067      	beq.n	810aef6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810ae26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae28:	6a1b      	ldr	r3, [r3, #32]
 810ae2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810ae2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810ae34:	f003 0304 	and.w	r3, r3, #4
 810ae38:	2b00      	cmp	r3, #0
 810ae3a:	d05c      	beq.n	810aef6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810ae3c:	68ba      	ldr	r2, [r7, #8]
 810ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae40:	699b      	ldr	r3, [r3, #24]
 810ae42:	441a      	add	r2, r3
 810ae44:	2300      	movs	r3, #0
 810ae46:	9300      	str	r3, [sp, #0]
 810ae48:	2300      	movs	r3, #0
 810ae4a:	2100      	movs	r1, #0
 810ae4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810ae4e:	f7ff fe09 	bl	810aa64 <xTimerGenericCommand>
 810ae52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810ae54:	6a3b      	ldr	r3, [r7, #32]
 810ae56:	2b00      	cmp	r3, #0
 810ae58:	d14d      	bne.n	810aef6 <prvProcessReceivedCommands+0x196>
 810ae5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810ae5e:	f383 8811 	msr	BASEPRI, r3
 810ae62:	f3bf 8f6f 	isb	sy
 810ae66:	f3bf 8f4f 	dsb	sy
 810ae6a:	61bb      	str	r3, [r7, #24]
 810ae6c:	e7fe      	b.n	810ae6c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810ae74:	f023 0301 	bic.w	r3, r3, #1
 810ae78:	b2da      	uxtb	r2, r3
 810ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 810ae80:	e039      	b.n	810aef6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810ae82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810ae88:	f043 0301 	orr.w	r3, r3, #1
 810ae8c:	b2da      	uxtb	r2, r3
 810ae8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810ae94:	68ba      	ldr	r2, [r7, #8]
 810ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810ae9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810ae9c:	699b      	ldr	r3, [r3, #24]
 810ae9e:	2b00      	cmp	r3, #0
 810aea0:	d109      	bne.n	810aeb6 <prvProcessReceivedCommands+0x156>
 810aea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 810aea6:	f383 8811 	msr	BASEPRI, r3
 810aeaa:	f3bf 8f6f 	isb	sy
 810aeae:	f3bf 8f4f 	dsb	sy
 810aeb2:	617b      	str	r3, [r7, #20]
 810aeb4:	e7fe      	b.n	810aeb4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810aeb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aeb8:	699a      	ldr	r2, [r3, #24]
 810aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aebc:	18d1      	adds	r1, r2, r3
 810aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810aec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810aec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810aec4:	f7ff ff0a 	bl	810acdc <prvInsertTimerInActiveList>
					break;
 810aec8:	e015      	b.n	810aef6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810aed0:	f003 0302 	and.w	r3, r3, #2
 810aed4:	2b00      	cmp	r3, #0
 810aed6:	d103      	bne.n	810aee0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 810aed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810aeda:	f7fd fdb9 	bl	8108a50 <vPortFree>
 810aede:	e00a      	b.n	810aef6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810aee6:	f023 0301 	bic.w	r3, r3, #1
 810aeea:	b2da      	uxtb	r2, r3
 810aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810aeee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810aef2:	e000      	b.n	810aef6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 810aef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810aef6:	4b07      	ldr	r3, [pc, #28]	; (810af14 <prvProcessReceivedCommands+0x1b4>)
 810aef8:	681b      	ldr	r3, [r3, #0]
 810aefa:	1d39      	adds	r1, r7, #4
 810aefc:	2200      	movs	r2, #0
 810aefe:	4618      	mov	r0, r3
 810af00:	f7fe fc3a 	bl	8109778 <xQueueReceive>
 810af04:	4603      	mov	r3, r0
 810af06:	2b00      	cmp	r3, #0
 810af08:	f47f af2e 	bne.w	810ad68 <prvProcessReceivedCommands+0x8>
	}
}
 810af0c:	bf00      	nop
 810af0e:	3730      	adds	r7, #48	; 0x30
 810af10:	46bd      	mov	sp, r7
 810af12:	bd80      	pop	{r7, pc}
 810af14:	10004a18 	.word	0x10004a18

0810af18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810af18:	b580      	push	{r7, lr}
 810af1a:	b088      	sub	sp, #32
 810af1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810af1e:	e047      	b.n	810afb0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810af20:	4b2d      	ldr	r3, [pc, #180]	; (810afd8 <prvSwitchTimerLists+0xc0>)
 810af22:	681b      	ldr	r3, [r3, #0]
 810af24:	68db      	ldr	r3, [r3, #12]
 810af26:	681b      	ldr	r3, [r3, #0]
 810af28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810af2a:	4b2b      	ldr	r3, [pc, #172]	; (810afd8 <prvSwitchTimerLists+0xc0>)
 810af2c:	681b      	ldr	r3, [r3, #0]
 810af2e:	68db      	ldr	r3, [r3, #12]
 810af30:	68db      	ldr	r3, [r3, #12]
 810af32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810af34:	68fb      	ldr	r3, [r7, #12]
 810af36:	3304      	adds	r3, #4
 810af38:	4618      	mov	r0, r3
 810af3a:	f7fd ff27 	bl	8108d8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810af3e:	68fb      	ldr	r3, [r7, #12]
 810af40:	6a1b      	ldr	r3, [r3, #32]
 810af42:	68f8      	ldr	r0, [r7, #12]
 810af44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810af46:	68fb      	ldr	r3, [r7, #12]
 810af48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810af4c:	f003 0304 	and.w	r3, r3, #4
 810af50:	2b00      	cmp	r3, #0
 810af52:	d02d      	beq.n	810afb0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810af54:	68fb      	ldr	r3, [r7, #12]
 810af56:	699b      	ldr	r3, [r3, #24]
 810af58:	693a      	ldr	r2, [r7, #16]
 810af5a:	4413      	add	r3, r2
 810af5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810af5e:	68ba      	ldr	r2, [r7, #8]
 810af60:	693b      	ldr	r3, [r7, #16]
 810af62:	429a      	cmp	r2, r3
 810af64:	d90e      	bls.n	810af84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810af66:	68fb      	ldr	r3, [r7, #12]
 810af68:	68ba      	ldr	r2, [r7, #8]
 810af6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810af6c:	68fb      	ldr	r3, [r7, #12]
 810af6e:	68fa      	ldr	r2, [r7, #12]
 810af70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810af72:	4b19      	ldr	r3, [pc, #100]	; (810afd8 <prvSwitchTimerLists+0xc0>)
 810af74:	681a      	ldr	r2, [r3, #0]
 810af76:	68fb      	ldr	r3, [r7, #12]
 810af78:	3304      	adds	r3, #4
 810af7a:	4619      	mov	r1, r3
 810af7c:	4610      	mov	r0, r2
 810af7e:	f7fd fecc 	bl	8108d1a <vListInsert>
 810af82:	e015      	b.n	810afb0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810af84:	2300      	movs	r3, #0
 810af86:	9300      	str	r3, [sp, #0]
 810af88:	2300      	movs	r3, #0
 810af8a:	693a      	ldr	r2, [r7, #16]
 810af8c:	2100      	movs	r1, #0
 810af8e:	68f8      	ldr	r0, [r7, #12]
 810af90:	f7ff fd68 	bl	810aa64 <xTimerGenericCommand>
 810af94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810af96:	687b      	ldr	r3, [r7, #4]
 810af98:	2b00      	cmp	r3, #0
 810af9a:	d109      	bne.n	810afb0 <prvSwitchTimerLists+0x98>
 810af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 810afa0:	f383 8811 	msr	BASEPRI, r3
 810afa4:	f3bf 8f6f 	isb	sy
 810afa8:	f3bf 8f4f 	dsb	sy
 810afac:	603b      	str	r3, [r7, #0]
 810afae:	e7fe      	b.n	810afae <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810afb0:	4b09      	ldr	r3, [pc, #36]	; (810afd8 <prvSwitchTimerLists+0xc0>)
 810afb2:	681b      	ldr	r3, [r3, #0]
 810afb4:	681b      	ldr	r3, [r3, #0]
 810afb6:	2b00      	cmp	r3, #0
 810afb8:	d1b2      	bne.n	810af20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810afba:	4b07      	ldr	r3, [pc, #28]	; (810afd8 <prvSwitchTimerLists+0xc0>)
 810afbc:	681b      	ldr	r3, [r3, #0]
 810afbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810afc0:	4b06      	ldr	r3, [pc, #24]	; (810afdc <prvSwitchTimerLists+0xc4>)
 810afc2:	681b      	ldr	r3, [r3, #0]
 810afc4:	4a04      	ldr	r2, [pc, #16]	; (810afd8 <prvSwitchTimerLists+0xc0>)
 810afc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810afc8:	4a04      	ldr	r2, [pc, #16]	; (810afdc <prvSwitchTimerLists+0xc4>)
 810afca:	697b      	ldr	r3, [r7, #20]
 810afcc:	6013      	str	r3, [r2, #0]
}
 810afce:	bf00      	nop
 810afd0:	3718      	adds	r7, #24
 810afd2:	46bd      	mov	sp, r7
 810afd4:	bd80      	pop	{r7, pc}
 810afd6:	bf00      	nop
 810afd8:	10004a10 	.word	0x10004a10
 810afdc:	10004a14 	.word	0x10004a14

0810afe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810afe0:	b580      	push	{r7, lr}
 810afe2:	b082      	sub	sp, #8
 810afe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810afe6:	f7fe f821 	bl	810902c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810afea:	4b15      	ldr	r3, [pc, #84]	; (810b040 <prvCheckForValidListAndQueue+0x60>)
 810afec:	681b      	ldr	r3, [r3, #0]
 810afee:	2b00      	cmp	r3, #0
 810aff0:	d120      	bne.n	810b034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810aff2:	4814      	ldr	r0, [pc, #80]	; (810b044 <prvCheckForValidListAndQueue+0x64>)
 810aff4:	f7fd fe40 	bl	8108c78 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810aff8:	4813      	ldr	r0, [pc, #76]	; (810b048 <prvCheckForValidListAndQueue+0x68>)
 810affa:	f7fd fe3d 	bl	8108c78 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810affe:	4b13      	ldr	r3, [pc, #76]	; (810b04c <prvCheckForValidListAndQueue+0x6c>)
 810b000:	4a10      	ldr	r2, [pc, #64]	; (810b044 <prvCheckForValidListAndQueue+0x64>)
 810b002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810b004:	4b12      	ldr	r3, [pc, #72]	; (810b050 <prvCheckForValidListAndQueue+0x70>)
 810b006:	4a10      	ldr	r2, [pc, #64]	; (810b048 <prvCheckForValidListAndQueue+0x68>)
 810b008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810b00a:	2300      	movs	r3, #0
 810b00c:	9300      	str	r3, [sp, #0]
 810b00e:	4b11      	ldr	r3, [pc, #68]	; (810b054 <prvCheckForValidListAndQueue+0x74>)
 810b010:	4a11      	ldr	r2, [pc, #68]	; (810b058 <prvCheckForValidListAndQueue+0x78>)
 810b012:	2110      	movs	r1, #16
 810b014:	200a      	movs	r0, #10
 810b016:	f7fe f98b 	bl	8109330 <xQueueGenericCreateStatic>
 810b01a:	4602      	mov	r2, r0
 810b01c:	4b08      	ldr	r3, [pc, #32]	; (810b040 <prvCheckForValidListAndQueue+0x60>)
 810b01e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810b020:	4b07      	ldr	r3, [pc, #28]	; (810b040 <prvCheckForValidListAndQueue+0x60>)
 810b022:	681b      	ldr	r3, [r3, #0]
 810b024:	2b00      	cmp	r3, #0
 810b026:	d005      	beq.n	810b034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810b028:	4b05      	ldr	r3, [pc, #20]	; (810b040 <prvCheckForValidListAndQueue+0x60>)
 810b02a:	681b      	ldr	r3, [r3, #0]
 810b02c:	490b      	ldr	r1, [pc, #44]	; (810b05c <prvCheckForValidListAndQueue+0x7c>)
 810b02e:	4618      	mov	r0, r3
 810b030:	f7fe fd8e 	bl	8109b50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810b034:	f7fe f828 	bl	8109088 <vPortExitCritical>
}
 810b038:	bf00      	nop
 810b03a:	46bd      	mov	sp, r7
 810b03c:	bd80      	pop	{r7, pc}
 810b03e:	bf00      	nop
 810b040:	10004a18 	.word	0x10004a18
 810b044:	100049e8 	.word	0x100049e8
 810b048:	100049fc 	.word	0x100049fc
 810b04c:	10004a10 	.word	0x10004a10
 810b050:	10004a14 	.word	0x10004a14
 810b054:	10004ac4 	.word	0x10004ac4
 810b058:	10004a24 	.word	0x10004a24
 810b05c:	0810cbd8 	.word	0x0810cbd8

0810b060 <__errno>:
 810b060:	4b01      	ldr	r3, [pc, #4]	; (810b068 <__errno+0x8>)
 810b062:	6818      	ldr	r0, [r3, #0]
 810b064:	4770      	bx	lr
 810b066:	bf00      	nop
 810b068:	10000010 	.word	0x10000010

0810b06c <__libc_init_array>:
 810b06c:	b570      	push	{r4, r5, r6, lr}
 810b06e:	4e0d      	ldr	r6, [pc, #52]	; (810b0a4 <__libc_init_array+0x38>)
 810b070:	4c0d      	ldr	r4, [pc, #52]	; (810b0a8 <__libc_init_array+0x3c>)
 810b072:	1ba4      	subs	r4, r4, r6
 810b074:	10a4      	asrs	r4, r4, #2
 810b076:	2500      	movs	r5, #0
 810b078:	42a5      	cmp	r5, r4
 810b07a:	d109      	bne.n	810b090 <__libc_init_array+0x24>
 810b07c:	4e0b      	ldr	r6, [pc, #44]	; (810b0ac <__libc_init_array+0x40>)
 810b07e:	4c0c      	ldr	r4, [pc, #48]	; (810b0b0 <__libc_init_array+0x44>)
 810b080:	f001 fd46 	bl	810cb10 <_init>
 810b084:	1ba4      	subs	r4, r4, r6
 810b086:	10a4      	asrs	r4, r4, #2
 810b088:	2500      	movs	r5, #0
 810b08a:	42a5      	cmp	r5, r4
 810b08c:	d105      	bne.n	810b09a <__libc_init_array+0x2e>
 810b08e:	bd70      	pop	{r4, r5, r6, pc}
 810b090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810b094:	4798      	blx	r3
 810b096:	3501      	adds	r5, #1
 810b098:	e7ee      	b.n	810b078 <__libc_init_array+0xc>
 810b09a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 810b09e:	4798      	blx	r3
 810b0a0:	3501      	adds	r5, #1
 810b0a2:	e7f2      	b.n	810b08a <__libc_init_array+0x1e>
 810b0a4:	0810ce68 	.word	0x0810ce68
 810b0a8:	0810ce68 	.word	0x0810ce68
 810b0ac:	0810ce68 	.word	0x0810ce68
 810b0b0:	0810ce6c 	.word	0x0810ce6c

0810b0b4 <memcpy>:
 810b0b4:	b510      	push	{r4, lr}
 810b0b6:	1e43      	subs	r3, r0, #1
 810b0b8:	440a      	add	r2, r1
 810b0ba:	4291      	cmp	r1, r2
 810b0bc:	d100      	bne.n	810b0c0 <memcpy+0xc>
 810b0be:	bd10      	pop	{r4, pc}
 810b0c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 810b0c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 810b0c8:	e7f7      	b.n	810b0ba <memcpy+0x6>

0810b0ca <memset>:
 810b0ca:	4402      	add	r2, r0
 810b0cc:	4603      	mov	r3, r0
 810b0ce:	4293      	cmp	r3, r2
 810b0d0:	d100      	bne.n	810b0d4 <memset+0xa>
 810b0d2:	4770      	bx	lr
 810b0d4:	f803 1b01 	strb.w	r1, [r3], #1
 810b0d8:	e7f9      	b.n	810b0ce <memset+0x4>

0810b0da <__cvt>:
 810b0da:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810b0de:	ec55 4b10 	vmov	r4, r5, d0
 810b0e2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 810b0e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 810b0e8:	2d00      	cmp	r5, #0
 810b0ea:	460e      	mov	r6, r1
 810b0ec:	4691      	mov	r9, r2
 810b0ee:	4619      	mov	r1, r3
 810b0f0:	bfb8      	it	lt
 810b0f2:	4622      	movlt	r2, r4
 810b0f4:	462b      	mov	r3, r5
 810b0f6:	f027 0720 	bic.w	r7, r7, #32
 810b0fa:	bfbb      	ittet	lt
 810b0fc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 810b100:	461d      	movlt	r5, r3
 810b102:	2300      	movge	r3, #0
 810b104:	232d      	movlt	r3, #45	; 0x2d
 810b106:	bfb8      	it	lt
 810b108:	4614      	movlt	r4, r2
 810b10a:	2f46      	cmp	r7, #70	; 0x46
 810b10c:	700b      	strb	r3, [r1, #0]
 810b10e:	d004      	beq.n	810b11a <__cvt+0x40>
 810b110:	2f45      	cmp	r7, #69	; 0x45
 810b112:	d100      	bne.n	810b116 <__cvt+0x3c>
 810b114:	3601      	adds	r6, #1
 810b116:	2102      	movs	r1, #2
 810b118:	e000      	b.n	810b11c <__cvt+0x42>
 810b11a:	2103      	movs	r1, #3
 810b11c:	ab03      	add	r3, sp, #12
 810b11e:	9301      	str	r3, [sp, #4]
 810b120:	ab02      	add	r3, sp, #8
 810b122:	9300      	str	r3, [sp, #0]
 810b124:	4632      	mov	r2, r6
 810b126:	4653      	mov	r3, sl
 810b128:	ec45 4b10 	vmov	d0, r4, r5
 810b12c:	f000 fbac 	bl	810b888 <_dtoa_r>
 810b130:	2f47      	cmp	r7, #71	; 0x47
 810b132:	4680      	mov	r8, r0
 810b134:	d102      	bne.n	810b13c <__cvt+0x62>
 810b136:	f019 0f01 	tst.w	r9, #1
 810b13a:	d026      	beq.n	810b18a <__cvt+0xb0>
 810b13c:	2f46      	cmp	r7, #70	; 0x46
 810b13e:	eb08 0906 	add.w	r9, r8, r6
 810b142:	d111      	bne.n	810b168 <__cvt+0x8e>
 810b144:	f898 3000 	ldrb.w	r3, [r8]
 810b148:	2b30      	cmp	r3, #48	; 0x30
 810b14a:	d10a      	bne.n	810b162 <__cvt+0x88>
 810b14c:	2200      	movs	r2, #0
 810b14e:	2300      	movs	r3, #0
 810b150:	4620      	mov	r0, r4
 810b152:	4629      	mov	r1, r5
 810b154:	f7f5 fcf0 	bl	8100b38 <__aeabi_dcmpeq>
 810b158:	b918      	cbnz	r0, 810b162 <__cvt+0x88>
 810b15a:	f1c6 0601 	rsb	r6, r6, #1
 810b15e:	f8ca 6000 	str.w	r6, [sl]
 810b162:	f8da 3000 	ldr.w	r3, [sl]
 810b166:	4499      	add	r9, r3
 810b168:	2200      	movs	r2, #0
 810b16a:	2300      	movs	r3, #0
 810b16c:	4620      	mov	r0, r4
 810b16e:	4629      	mov	r1, r5
 810b170:	f7f5 fce2 	bl	8100b38 <__aeabi_dcmpeq>
 810b174:	b938      	cbnz	r0, 810b186 <__cvt+0xac>
 810b176:	2230      	movs	r2, #48	; 0x30
 810b178:	9b03      	ldr	r3, [sp, #12]
 810b17a:	454b      	cmp	r3, r9
 810b17c:	d205      	bcs.n	810b18a <__cvt+0xb0>
 810b17e:	1c59      	adds	r1, r3, #1
 810b180:	9103      	str	r1, [sp, #12]
 810b182:	701a      	strb	r2, [r3, #0]
 810b184:	e7f8      	b.n	810b178 <__cvt+0x9e>
 810b186:	f8cd 900c 	str.w	r9, [sp, #12]
 810b18a:	9b03      	ldr	r3, [sp, #12]
 810b18c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b18e:	eba3 0308 	sub.w	r3, r3, r8
 810b192:	4640      	mov	r0, r8
 810b194:	6013      	str	r3, [r2, #0]
 810b196:	b004      	add	sp, #16
 810b198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0810b19c <__exponent>:
 810b19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810b19e:	2900      	cmp	r1, #0
 810b1a0:	4604      	mov	r4, r0
 810b1a2:	bfba      	itte	lt
 810b1a4:	4249      	neglt	r1, r1
 810b1a6:	232d      	movlt	r3, #45	; 0x2d
 810b1a8:	232b      	movge	r3, #43	; 0x2b
 810b1aa:	2909      	cmp	r1, #9
 810b1ac:	f804 2b02 	strb.w	r2, [r4], #2
 810b1b0:	7043      	strb	r3, [r0, #1]
 810b1b2:	dd20      	ble.n	810b1f6 <__exponent+0x5a>
 810b1b4:	f10d 0307 	add.w	r3, sp, #7
 810b1b8:	461f      	mov	r7, r3
 810b1ba:	260a      	movs	r6, #10
 810b1bc:	fb91 f5f6 	sdiv	r5, r1, r6
 810b1c0:	fb06 1115 	mls	r1, r6, r5, r1
 810b1c4:	3130      	adds	r1, #48	; 0x30
 810b1c6:	2d09      	cmp	r5, #9
 810b1c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 810b1cc:	f103 32ff 	add.w	r2, r3, #4294967295
 810b1d0:	4629      	mov	r1, r5
 810b1d2:	dc09      	bgt.n	810b1e8 <__exponent+0x4c>
 810b1d4:	3130      	adds	r1, #48	; 0x30
 810b1d6:	3b02      	subs	r3, #2
 810b1d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 810b1dc:	42bb      	cmp	r3, r7
 810b1de:	4622      	mov	r2, r4
 810b1e0:	d304      	bcc.n	810b1ec <__exponent+0x50>
 810b1e2:	1a10      	subs	r0, r2, r0
 810b1e4:	b003      	add	sp, #12
 810b1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810b1e8:	4613      	mov	r3, r2
 810b1ea:	e7e7      	b.n	810b1bc <__exponent+0x20>
 810b1ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b1f0:	f804 2b01 	strb.w	r2, [r4], #1
 810b1f4:	e7f2      	b.n	810b1dc <__exponent+0x40>
 810b1f6:	2330      	movs	r3, #48	; 0x30
 810b1f8:	4419      	add	r1, r3
 810b1fa:	7083      	strb	r3, [r0, #2]
 810b1fc:	1d02      	adds	r2, r0, #4
 810b1fe:	70c1      	strb	r1, [r0, #3]
 810b200:	e7ef      	b.n	810b1e2 <__exponent+0x46>
	...

0810b204 <_printf_float>:
 810b204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b208:	b08d      	sub	sp, #52	; 0x34
 810b20a:	460c      	mov	r4, r1
 810b20c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 810b210:	4616      	mov	r6, r2
 810b212:	461f      	mov	r7, r3
 810b214:	4605      	mov	r5, r0
 810b216:	f001 f8ef 	bl	810c3f8 <_localeconv_r>
 810b21a:	6803      	ldr	r3, [r0, #0]
 810b21c:	9304      	str	r3, [sp, #16]
 810b21e:	4618      	mov	r0, r3
 810b220:	f7f5 f85e 	bl	81002e0 <strlen>
 810b224:	2300      	movs	r3, #0
 810b226:	930a      	str	r3, [sp, #40]	; 0x28
 810b228:	f8d8 3000 	ldr.w	r3, [r8]
 810b22c:	9005      	str	r0, [sp, #20]
 810b22e:	3307      	adds	r3, #7
 810b230:	f023 0307 	bic.w	r3, r3, #7
 810b234:	f103 0208 	add.w	r2, r3, #8
 810b238:	f894 a018 	ldrb.w	sl, [r4, #24]
 810b23c:	f8d4 b000 	ldr.w	fp, [r4]
 810b240:	f8c8 2000 	str.w	r2, [r8]
 810b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b248:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810b24c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810b250:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810b254:	9307      	str	r3, [sp, #28]
 810b256:	f8cd 8018 	str.w	r8, [sp, #24]
 810b25a:	f04f 32ff 	mov.w	r2, #4294967295
 810b25e:	4ba7      	ldr	r3, [pc, #668]	; (810b4fc <_printf_float+0x2f8>)
 810b260:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b264:	f7f5 fc9a 	bl	8100b9c <__aeabi_dcmpun>
 810b268:	bb70      	cbnz	r0, 810b2c8 <_printf_float+0xc4>
 810b26a:	f04f 32ff 	mov.w	r2, #4294967295
 810b26e:	4ba3      	ldr	r3, [pc, #652]	; (810b4fc <_printf_float+0x2f8>)
 810b270:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810b274:	f7f5 fc74 	bl	8100b60 <__aeabi_dcmple>
 810b278:	bb30      	cbnz	r0, 810b2c8 <_printf_float+0xc4>
 810b27a:	2200      	movs	r2, #0
 810b27c:	2300      	movs	r3, #0
 810b27e:	4640      	mov	r0, r8
 810b280:	4649      	mov	r1, r9
 810b282:	f7f5 fc63 	bl	8100b4c <__aeabi_dcmplt>
 810b286:	b110      	cbz	r0, 810b28e <_printf_float+0x8a>
 810b288:	232d      	movs	r3, #45	; 0x2d
 810b28a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b28e:	4a9c      	ldr	r2, [pc, #624]	; (810b500 <_printf_float+0x2fc>)
 810b290:	4b9c      	ldr	r3, [pc, #624]	; (810b504 <_printf_float+0x300>)
 810b292:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810b296:	bf8c      	ite	hi
 810b298:	4690      	movhi	r8, r2
 810b29a:	4698      	movls	r8, r3
 810b29c:	2303      	movs	r3, #3
 810b29e:	f02b 0204 	bic.w	r2, fp, #4
 810b2a2:	6123      	str	r3, [r4, #16]
 810b2a4:	6022      	str	r2, [r4, #0]
 810b2a6:	f04f 0900 	mov.w	r9, #0
 810b2aa:	9700      	str	r7, [sp, #0]
 810b2ac:	4633      	mov	r3, r6
 810b2ae:	aa0b      	add	r2, sp, #44	; 0x2c
 810b2b0:	4621      	mov	r1, r4
 810b2b2:	4628      	mov	r0, r5
 810b2b4:	f000 f9e6 	bl	810b684 <_printf_common>
 810b2b8:	3001      	adds	r0, #1
 810b2ba:	f040 808d 	bne.w	810b3d8 <_printf_float+0x1d4>
 810b2be:	f04f 30ff 	mov.w	r0, #4294967295
 810b2c2:	b00d      	add	sp, #52	; 0x34
 810b2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b2c8:	4642      	mov	r2, r8
 810b2ca:	464b      	mov	r3, r9
 810b2cc:	4640      	mov	r0, r8
 810b2ce:	4649      	mov	r1, r9
 810b2d0:	f7f5 fc64 	bl	8100b9c <__aeabi_dcmpun>
 810b2d4:	b110      	cbz	r0, 810b2dc <_printf_float+0xd8>
 810b2d6:	4a8c      	ldr	r2, [pc, #560]	; (810b508 <_printf_float+0x304>)
 810b2d8:	4b8c      	ldr	r3, [pc, #560]	; (810b50c <_printf_float+0x308>)
 810b2da:	e7da      	b.n	810b292 <_printf_float+0x8e>
 810b2dc:	6861      	ldr	r1, [r4, #4]
 810b2de:	1c4b      	adds	r3, r1, #1
 810b2e0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 810b2e4:	a80a      	add	r0, sp, #40	; 0x28
 810b2e6:	d13e      	bne.n	810b366 <_printf_float+0x162>
 810b2e8:	2306      	movs	r3, #6
 810b2ea:	6063      	str	r3, [r4, #4]
 810b2ec:	2300      	movs	r3, #0
 810b2ee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810b2f2:	ab09      	add	r3, sp, #36	; 0x24
 810b2f4:	9300      	str	r3, [sp, #0]
 810b2f6:	ec49 8b10 	vmov	d0, r8, r9
 810b2fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810b2fe:	6022      	str	r2, [r4, #0]
 810b300:	f8cd a004 	str.w	sl, [sp, #4]
 810b304:	6861      	ldr	r1, [r4, #4]
 810b306:	4628      	mov	r0, r5
 810b308:	f7ff fee7 	bl	810b0da <__cvt>
 810b30c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 810b310:	2b47      	cmp	r3, #71	; 0x47
 810b312:	4680      	mov	r8, r0
 810b314:	d109      	bne.n	810b32a <_printf_float+0x126>
 810b316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b318:	1cd8      	adds	r0, r3, #3
 810b31a:	db02      	blt.n	810b322 <_printf_float+0x11e>
 810b31c:	6862      	ldr	r2, [r4, #4]
 810b31e:	4293      	cmp	r3, r2
 810b320:	dd47      	ble.n	810b3b2 <_printf_float+0x1ae>
 810b322:	f1aa 0a02 	sub.w	sl, sl, #2
 810b326:	fa5f fa8a 	uxtb.w	sl, sl
 810b32a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810b32e:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b330:	d824      	bhi.n	810b37c <_printf_float+0x178>
 810b332:	3901      	subs	r1, #1
 810b334:	4652      	mov	r2, sl
 810b336:	f104 0050 	add.w	r0, r4, #80	; 0x50
 810b33a:	9109      	str	r1, [sp, #36]	; 0x24
 810b33c:	f7ff ff2e 	bl	810b19c <__exponent>
 810b340:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b342:	1813      	adds	r3, r2, r0
 810b344:	2a01      	cmp	r2, #1
 810b346:	4681      	mov	r9, r0
 810b348:	6123      	str	r3, [r4, #16]
 810b34a:	dc02      	bgt.n	810b352 <_printf_float+0x14e>
 810b34c:	6822      	ldr	r2, [r4, #0]
 810b34e:	07d1      	lsls	r1, r2, #31
 810b350:	d501      	bpl.n	810b356 <_printf_float+0x152>
 810b352:	3301      	adds	r3, #1
 810b354:	6123      	str	r3, [r4, #16]
 810b356:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 810b35a:	2b00      	cmp	r3, #0
 810b35c:	d0a5      	beq.n	810b2aa <_printf_float+0xa6>
 810b35e:	232d      	movs	r3, #45	; 0x2d
 810b360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810b364:	e7a1      	b.n	810b2aa <_printf_float+0xa6>
 810b366:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 810b36a:	f000 8177 	beq.w	810b65c <_printf_float+0x458>
 810b36e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 810b372:	d1bb      	bne.n	810b2ec <_printf_float+0xe8>
 810b374:	2900      	cmp	r1, #0
 810b376:	d1b9      	bne.n	810b2ec <_printf_float+0xe8>
 810b378:	2301      	movs	r3, #1
 810b37a:	e7b6      	b.n	810b2ea <_printf_float+0xe6>
 810b37c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 810b380:	d119      	bne.n	810b3b6 <_printf_float+0x1b2>
 810b382:	2900      	cmp	r1, #0
 810b384:	6863      	ldr	r3, [r4, #4]
 810b386:	dd0c      	ble.n	810b3a2 <_printf_float+0x19e>
 810b388:	6121      	str	r1, [r4, #16]
 810b38a:	b913      	cbnz	r3, 810b392 <_printf_float+0x18e>
 810b38c:	6822      	ldr	r2, [r4, #0]
 810b38e:	07d2      	lsls	r2, r2, #31
 810b390:	d502      	bpl.n	810b398 <_printf_float+0x194>
 810b392:	3301      	adds	r3, #1
 810b394:	440b      	add	r3, r1
 810b396:	6123      	str	r3, [r4, #16]
 810b398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b39a:	65a3      	str	r3, [r4, #88]	; 0x58
 810b39c:	f04f 0900 	mov.w	r9, #0
 810b3a0:	e7d9      	b.n	810b356 <_printf_float+0x152>
 810b3a2:	b913      	cbnz	r3, 810b3aa <_printf_float+0x1a6>
 810b3a4:	6822      	ldr	r2, [r4, #0]
 810b3a6:	07d0      	lsls	r0, r2, #31
 810b3a8:	d501      	bpl.n	810b3ae <_printf_float+0x1aa>
 810b3aa:	3302      	adds	r3, #2
 810b3ac:	e7f3      	b.n	810b396 <_printf_float+0x192>
 810b3ae:	2301      	movs	r3, #1
 810b3b0:	e7f1      	b.n	810b396 <_printf_float+0x192>
 810b3b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 810b3b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810b3ba:	4293      	cmp	r3, r2
 810b3bc:	db05      	blt.n	810b3ca <_printf_float+0x1c6>
 810b3be:	6822      	ldr	r2, [r4, #0]
 810b3c0:	6123      	str	r3, [r4, #16]
 810b3c2:	07d1      	lsls	r1, r2, #31
 810b3c4:	d5e8      	bpl.n	810b398 <_printf_float+0x194>
 810b3c6:	3301      	adds	r3, #1
 810b3c8:	e7e5      	b.n	810b396 <_printf_float+0x192>
 810b3ca:	2b00      	cmp	r3, #0
 810b3cc:	bfd4      	ite	le
 810b3ce:	f1c3 0302 	rsble	r3, r3, #2
 810b3d2:	2301      	movgt	r3, #1
 810b3d4:	4413      	add	r3, r2
 810b3d6:	e7de      	b.n	810b396 <_printf_float+0x192>
 810b3d8:	6823      	ldr	r3, [r4, #0]
 810b3da:	055a      	lsls	r2, r3, #21
 810b3dc:	d407      	bmi.n	810b3ee <_printf_float+0x1ea>
 810b3de:	6923      	ldr	r3, [r4, #16]
 810b3e0:	4642      	mov	r2, r8
 810b3e2:	4631      	mov	r1, r6
 810b3e4:	4628      	mov	r0, r5
 810b3e6:	47b8      	blx	r7
 810b3e8:	3001      	adds	r0, #1
 810b3ea:	d12b      	bne.n	810b444 <_printf_float+0x240>
 810b3ec:	e767      	b.n	810b2be <_printf_float+0xba>
 810b3ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 810b3f2:	f240 80dc 	bls.w	810b5ae <_printf_float+0x3aa>
 810b3f6:	2200      	movs	r2, #0
 810b3f8:	2300      	movs	r3, #0
 810b3fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b3fe:	f7f5 fb9b 	bl	8100b38 <__aeabi_dcmpeq>
 810b402:	2800      	cmp	r0, #0
 810b404:	d033      	beq.n	810b46e <_printf_float+0x26a>
 810b406:	2301      	movs	r3, #1
 810b408:	4a41      	ldr	r2, [pc, #260]	; (810b510 <_printf_float+0x30c>)
 810b40a:	4631      	mov	r1, r6
 810b40c:	4628      	mov	r0, r5
 810b40e:	47b8      	blx	r7
 810b410:	3001      	adds	r0, #1
 810b412:	f43f af54 	beq.w	810b2be <_printf_float+0xba>
 810b416:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b41a:	429a      	cmp	r2, r3
 810b41c:	db02      	blt.n	810b424 <_printf_float+0x220>
 810b41e:	6823      	ldr	r3, [r4, #0]
 810b420:	07d8      	lsls	r0, r3, #31
 810b422:	d50f      	bpl.n	810b444 <_printf_float+0x240>
 810b424:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810b428:	4631      	mov	r1, r6
 810b42a:	4628      	mov	r0, r5
 810b42c:	47b8      	blx	r7
 810b42e:	3001      	adds	r0, #1
 810b430:	f43f af45 	beq.w	810b2be <_printf_float+0xba>
 810b434:	f04f 0800 	mov.w	r8, #0
 810b438:	f104 091a 	add.w	r9, r4, #26
 810b43c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b43e:	3b01      	subs	r3, #1
 810b440:	4543      	cmp	r3, r8
 810b442:	dc09      	bgt.n	810b458 <_printf_float+0x254>
 810b444:	6823      	ldr	r3, [r4, #0]
 810b446:	079b      	lsls	r3, r3, #30
 810b448:	f100 8103 	bmi.w	810b652 <_printf_float+0x44e>
 810b44c:	68e0      	ldr	r0, [r4, #12]
 810b44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b450:	4298      	cmp	r0, r3
 810b452:	bfb8      	it	lt
 810b454:	4618      	movlt	r0, r3
 810b456:	e734      	b.n	810b2c2 <_printf_float+0xbe>
 810b458:	2301      	movs	r3, #1
 810b45a:	464a      	mov	r2, r9
 810b45c:	4631      	mov	r1, r6
 810b45e:	4628      	mov	r0, r5
 810b460:	47b8      	blx	r7
 810b462:	3001      	adds	r0, #1
 810b464:	f43f af2b 	beq.w	810b2be <_printf_float+0xba>
 810b468:	f108 0801 	add.w	r8, r8, #1
 810b46c:	e7e6      	b.n	810b43c <_printf_float+0x238>
 810b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b470:	2b00      	cmp	r3, #0
 810b472:	dc2b      	bgt.n	810b4cc <_printf_float+0x2c8>
 810b474:	2301      	movs	r3, #1
 810b476:	4a26      	ldr	r2, [pc, #152]	; (810b510 <_printf_float+0x30c>)
 810b478:	4631      	mov	r1, r6
 810b47a:	4628      	mov	r0, r5
 810b47c:	47b8      	blx	r7
 810b47e:	3001      	adds	r0, #1
 810b480:	f43f af1d 	beq.w	810b2be <_printf_float+0xba>
 810b484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b486:	b923      	cbnz	r3, 810b492 <_printf_float+0x28e>
 810b488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b48a:	b913      	cbnz	r3, 810b492 <_printf_float+0x28e>
 810b48c:	6823      	ldr	r3, [r4, #0]
 810b48e:	07d9      	lsls	r1, r3, #31
 810b490:	d5d8      	bpl.n	810b444 <_printf_float+0x240>
 810b492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810b496:	4631      	mov	r1, r6
 810b498:	4628      	mov	r0, r5
 810b49a:	47b8      	blx	r7
 810b49c:	3001      	adds	r0, #1
 810b49e:	f43f af0e 	beq.w	810b2be <_printf_float+0xba>
 810b4a2:	f04f 0900 	mov.w	r9, #0
 810b4a6:	f104 0a1a 	add.w	sl, r4, #26
 810b4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b4ac:	425b      	negs	r3, r3
 810b4ae:	454b      	cmp	r3, r9
 810b4b0:	dc01      	bgt.n	810b4b6 <_printf_float+0x2b2>
 810b4b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b4b4:	e794      	b.n	810b3e0 <_printf_float+0x1dc>
 810b4b6:	2301      	movs	r3, #1
 810b4b8:	4652      	mov	r2, sl
 810b4ba:	4631      	mov	r1, r6
 810b4bc:	4628      	mov	r0, r5
 810b4be:	47b8      	blx	r7
 810b4c0:	3001      	adds	r0, #1
 810b4c2:	f43f aefc 	beq.w	810b2be <_printf_float+0xba>
 810b4c6:	f109 0901 	add.w	r9, r9, #1
 810b4ca:	e7ee      	b.n	810b4aa <_printf_float+0x2a6>
 810b4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b4ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810b4d0:	429a      	cmp	r2, r3
 810b4d2:	bfa8      	it	ge
 810b4d4:	461a      	movge	r2, r3
 810b4d6:	2a00      	cmp	r2, #0
 810b4d8:	4691      	mov	r9, r2
 810b4da:	dd07      	ble.n	810b4ec <_printf_float+0x2e8>
 810b4dc:	4613      	mov	r3, r2
 810b4de:	4631      	mov	r1, r6
 810b4e0:	4642      	mov	r2, r8
 810b4e2:	4628      	mov	r0, r5
 810b4e4:	47b8      	blx	r7
 810b4e6:	3001      	adds	r0, #1
 810b4e8:	f43f aee9 	beq.w	810b2be <_printf_float+0xba>
 810b4ec:	f104 031a 	add.w	r3, r4, #26
 810b4f0:	f04f 0b00 	mov.w	fp, #0
 810b4f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810b4f8:	9306      	str	r3, [sp, #24]
 810b4fa:	e015      	b.n	810b528 <_printf_float+0x324>
 810b4fc:	7fefffff 	.word	0x7fefffff
 810b500:	0810cc38 	.word	0x0810cc38
 810b504:	0810cc34 	.word	0x0810cc34
 810b508:	0810cc40 	.word	0x0810cc40
 810b50c:	0810cc3c 	.word	0x0810cc3c
 810b510:	0810cc44 	.word	0x0810cc44
 810b514:	2301      	movs	r3, #1
 810b516:	9a06      	ldr	r2, [sp, #24]
 810b518:	4631      	mov	r1, r6
 810b51a:	4628      	mov	r0, r5
 810b51c:	47b8      	blx	r7
 810b51e:	3001      	adds	r0, #1
 810b520:	f43f aecd 	beq.w	810b2be <_printf_float+0xba>
 810b524:	f10b 0b01 	add.w	fp, fp, #1
 810b528:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 810b52c:	ebaa 0309 	sub.w	r3, sl, r9
 810b530:	455b      	cmp	r3, fp
 810b532:	dcef      	bgt.n	810b514 <_printf_float+0x310>
 810b534:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b538:	429a      	cmp	r2, r3
 810b53a:	44d0      	add	r8, sl
 810b53c:	db15      	blt.n	810b56a <_printf_float+0x366>
 810b53e:	6823      	ldr	r3, [r4, #0]
 810b540:	07da      	lsls	r2, r3, #31
 810b542:	d412      	bmi.n	810b56a <_printf_float+0x366>
 810b544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b546:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b548:	eba3 020a 	sub.w	r2, r3, sl
 810b54c:	eba3 0a01 	sub.w	sl, r3, r1
 810b550:	4592      	cmp	sl, r2
 810b552:	bfa8      	it	ge
 810b554:	4692      	movge	sl, r2
 810b556:	f1ba 0f00 	cmp.w	sl, #0
 810b55a:	dc0e      	bgt.n	810b57a <_printf_float+0x376>
 810b55c:	f04f 0800 	mov.w	r8, #0
 810b560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b564:	f104 091a 	add.w	r9, r4, #26
 810b568:	e019      	b.n	810b59e <_printf_float+0x39a>
 810b56a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810b56e:	4631      	mov	r1, r6
 810b570:	4628      	mov	r0, r5
 810b572:	47b8      	blx	r7
 810b574:	3001      	adds	r0, #1
 810b576:	d1e5      	bne.n	810b544 <_printf_float+0x340>
 810b578:	e6a1      	b.n	810b2be <_printf_float+0xba>
 810b57a:	4653      	mov	r3, sl
 810b57c:	4642      	mov	r2, r8
 810b57e:	4631      	mov	r1, r6
 810b580:	4628      	mov	r0, r5
 810b582:	47b8      	blx	r7
 810b584:	3001      	adds	r0, #1
 810b586:	d1e9      	bne.n	810b55c <_printf_float+0x358>
 810b588:	e699      	b.n	810b2be <_printf_float+0xba>
 810b58a:	2301      	movs	r3, #1
 810b58c:	464a      	mov	r2, r9
 810b58e:	4631      	mov	r1, r6
 810b590:	4628      	mov	r0, r5
 810b592:	47b8      	blx	r7
 810b594:	3001      	adds	r0, #1
 810b596:	f43f ae92 	beq.w	810b2be <_printf_float+0xba>
 810b59a:	f108 0801 	add.w	r8, r8, #1
 810b59e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810b5a2:	1a9b      	subs	r3, r3, r2
 810b5a4:	eba3 030a 	sub.w	r3, r3, sl
 810b5a8:	4543      	cmp	r3, r8
 810b5aa:	dcee      	bgt.n	810b58a <_printf_float+0x386>
 810b5ac:	e74a      	b.n	810b444 <_printf_float+0x240>
 810b5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810b5b0:	2a01      	cmp	r2, #1
 810b5b2:	dc01      	bgt.n	810b5b8 <_printf_float+0x3b4>
 810b5b4:	07db      	lsls	r3, r3, #31
 810b5b6:	d53a      	bpl.n	810b62e <_printf_float+0x42a>
 810b5b8:	2301      	movs	r3, #1
 810b5ba:	4642      	mov	r2, r8
 810b5bc:	4631      	mov	r1, r6
 810b5be:	4628      	mov	r0, r5
 810b5c0:	47b8      	blx	r7
 810b5c2:	3001      	adds	r0, #1
 810b5c4:	f43f ae7b 	beq.w	810b2be <_printf_float+0xba>
 810b5c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810b5cc:	4631      	mov	r1, r6
 810b5ce:	4628      	mov	r0, r5
 810b5d0:	47b8      	blx	r7
 810b5d2:	3001      	adds	r0, #1
 810b5d4:	f108 0801 	add.w	r8, r8, #1
 810b5d8:	f43f ae71 	beq.w	810b2be <_printf_float+0xba>
 810b5dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b5de:	2200      	movs	r2, #0
 810b5e0:	f103 3aff 	add.w	sl, r3, #4294967295
 810b5e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810b5e8:	2300      	movs	r3, #0
 810b5ea:	f7f5 faa5 	bl	8100b38 <__aeabi_dcmpeq>
 810b5ee:	b9c8      	cbnz	r0, 810b624 <_printf_float+0x420>
 810b5f0:	4653      	mov	r3, sl
 810b5f2:	4642      	mov	r2, r8
 810b5f4:	4631      	mov	r1, r6
 810b5f6:	4628      	mov	r0, r5
 810b5f8:	47b8      	blx	r7
 810b5fa:	3001      	adds	r0, #1
 810b5fc:	d10e      	bne.n	810b61c <_printf_float+0x418>
 810b5fe:	e65e      	b.n	810b2be <_printf_float+0xba>
 810b600:	2301      	movs	r3, #1
 810b602:	4652      	mov	r2, sl
 810b604:	4631      	mov	r1, r6
 810b606:	4628      	mov	r0, r5
 810b608:	47b8      	blx	r7
 810b60a:	3001      	adds	r0, #1
 810b60c:	f43f ae57 	beq.w	810b2be <_printf_float+0xba>
 810b610:	f108 0801 	add.w	r8, r8, #1
 810b614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b616:	3b01      	subs	r3, #1
 810b618:	4543      	cmp	r3, r8
 810b61a:	dcf1      	bgt.n	810b600 <_printf_float+0x3fc>
 810b61c:	464b      	mov	r3, r9
 810b61e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810b622:	e6de      	b.n	810b3e2 <_printf_float+0x1de>
 810b624:	f04f 0800 	mov.w	r8, #0
 810b628:	f104 0a1a 	add.w	sl, r4, #26
 810b62c:	e7f2      	b.n	810b614 <_printf_float+0x410>
 810b62e:	2301      	movs	r3, #1
 810b630:	e7df      	b.n	810b5f2 <_printf_float+0x3ee>
 810b632:	2301      	movs	r3, #1
 810b634:	464a      	mov	r2, r9
 810b636:	4631      	mov	r1, r6
 810b638:	4628      	mov	r0, r5
 810b63a:	47b8      	blx	r7
 810b63c:	3001      	adds	r0, #1
 810b63e:	f43f ae3e 	beq.w	810b2be <_printf_float+0xba>
 810b642:	f108 0801 	add.w	r8, r8, #1
 810b646:	68e3      	ldr	r3, [r4, #12]
 810b648:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810b64a:	1a9b      	subs	r3, r3, r2
 810b64c:	4543      	cmp	r3, r8
 810b64e:	dcf0      	bgt.n	810b632 <_printf_float+0x42e>
 810b650:	e6fc      	b.n	810b44c <_printf_float+0x248>
 810b652:	f04f 0800 	mov.w	r8, #0
 810b656:	f104 0919 	add.w	r9, r4, #25
 810b65a:	e7f4      	b.n	810b646 <_printf_float+0x442>
 810b65c:	2900      	cmp	r1, #0
 810b65e:	f43f ae8b 	beq.w	810b378 <_printf_float+0x174>
 810b662:	2300      	movs	r3, #0
 810b664:	e9cd 0302 	strd	r0, r3, [sp, #8]
 810b668:	ab09      	add	r3, sp, #36	; 0x24
 810b66a:	9300      	str	r3, [sp, #0]
 810b66c:	ec49 8b10 	vmov	d0, r8, r9
 810b670:	6022      	str	r2, [r4, #0]
 810b672:	f8cd a004 	str.w	sl, [sp, #4]
 810b676:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 810b67a:	4628      	mov	r0, r5
 810b67c:	f7ff fd2d 	bl	810b0da <__cvt>
 810b680:	4680      	mov	r8, r0
 810b682:	e648      	b.n	810b316 <_printf_float+0x112>

0810b684 <_printf_common>:
 810b684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b688:	4691      	mov	r9, r2
 810b68a:	461f      	mov	r7, r3
 810b68c:	688a      	ldr	r2, [r1, #8]
 810b68e:	690b      	ldr	r3, [r1, #16]
 810b690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810b694:	4293      	cmp	r3, r2
 810b696:	bfb8      	it	lt
 810b698:	4613      	movlt	r3, r2
 810b69a:	f8c9 3000 	str.w	r3, [r9]
 810b69e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810b6a2:	4606      	mov	r6, r0
 810b6a4:	460c      	mov	r4, r1
 810b6a6:	b112      	cbz	r2, 810b6ae <_printf_common+0x2a>
 810b6a8:	3301      	adds	r3, #1
 810b6aa:	f8c9 3000 	str.w	r3, [r9]
 810b6ae:	6823      	ldr	r3, [r4, #0]
 810b6b0:	0699      	lsls	r1, r3, #26
 810b6b2:	bf42      	ittt	mi
 810b6b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 810b6b8:	3302      	addmi	r3, #2
 810b6ba:	f8c9 3000 	strmi.w	r3, [r9]
 810b6be:	6825      	ldr	r5, [r4, #0]
 810b6c0:	f015 0506 	ands.w	r5, r5, #6
 810b6c4:	d107      	bne.n	810b6d6 <_printf_common+0x52>
 810b6c6:	f104 0a19 	add.w	sl, r4, #25
 810b6ca:	68e3      	ldr	r3, [r4, #12]
 810b6cc:	f8d9 2000 	ldr.w	r2, [r9]
 810b6d0:	1a9b      	subs	r3, r3, r2
 810b6d2:	42ab      	cmp	r3, r5
 810b6d4:	dc28      	bgt.n	810b728 <_printf_common+0xa4>
 810b6d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 810b6da:	6822      	ldr	r2, [r4, #0]
 810b6dc:	3300      	adds	r3, #0
 810b6de:	bf18      	it	ne
 810b6e0:	2301      	movne	r3, #1
 810b6e2:	0692      	lsls	r2, r2, #26
 810b6e4:	d42d      	bmi.n	810b742 <_printf_common+0xbe>
 810b6e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810b6ea:	4639      	mov	r1, r7
 810b6ec:	4630      	mov	r0, r6
 810b6ee:	47c0      	blx	r8
 810b6f0:	3001      	adds	r0, #1
 810b6f2:	d020      	beq.n	810b736 <_printf_common+0xb2>
 810b6f4:	6823      	ldr	r3, [r4, #0]
 810b6f6:	68e5      	ldr	r5, [r4, #12]
 810b6f8:	f8d9 2000 	ldr.w	r2, [r9]
 810b6fc:	f003 0306 	and.w	r3, r3, #6
 810b700:	2b04      	cmp	r3, #4
 810b702:	bf08      	it	eq
 810b704:	1aad      	subeq	r5, r5, r2
 810b706:	68a3      	ldr	r3, [r4, #8]
 810b708:	6922      	ldr	r2, [r4, #16]
 810b70a:	bf0c      	ite	eq
 810b70c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810b710:	2500      	movne	r5, #0
 810b712:	4293      	cmp	r3, r2
 810b714:	bfc4      	itt	gt
 810b716:	1a9b      	subgt	r3, r3, r2
 810b718:	18ed      	addgt	r5, r5, r3
 810b71a:	f04f 0900 	mov.w	r9, #0
 810b71e:	341a      	adds	r4, #26
 810b720:	454d      	cmp	r5, r9
 810b722:	d11a      	bne.n	810b75a <_printf_common+0xd6>
 810b724:	2000      	movs	r0, #0
 810b726:	e008      	b.n	810b73a <_printf_common+0xb6>
 810b728:	2301      	movs	r3, #1
 810b72a:	4652      	mov	r2, sl
 810b72c:	4639      	mov	r1, r7
 810b72e:	4630      	mov	r0, r6
 810b730:	47c0      	blx	r8
 810b732:	3001      	adds	r0, #1
 810b734:	d103      	bne.n	810b73e <_printf_common+0xba>
 810b736:	f04f 30ff 	mov.w	r0, #4294967295
 810b73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b73e:	3501      	adds	r5, #1
 810b740:	e7c3      	b.n	810b6ca <_printf_common+0x46>
 810b742:	18e1      	adds	r1, r4, r3
 810b744:	1c5a      	adds	r2, r3, #1
 810b746:	2030      	movs	r0, #48	; 0x30
 810b748:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810b74c:	4422      	add	r2, r4
 810b74e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810b752:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810b756:	3302      	adds	r3, #2
 810b758:	e7c5      	b.n	810b6e6 <_printf_common+0x62>
 810b75a:	2301      	movs	r3, #1
 810b75c:	4622      	mov	r2, r4
 810b75e:	4639      	mov	r1, r7
 810b760:	4630      	mov	r0, r6
 810b762:	47c0      	blx	r8
 810b764:	3001      	adds	r0, #1
 810b766:	d0e6      	beq.n	810b736 <_printf_common+0xb2>
 810b768:	f109 0901 	add.w	r9, r9, #1
 810b76c:	e7d8      	b.n	810b720 <_printf_common+0x9c>

0810b76e <quorem>:
 810b76e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b772:	6903      	ldr	r3, [r0, #16]
 810b774:	690c      	ldr	r4, [r1, #16]
 810b776:	42a3      	cmp	r3, r4
 810b778:	4680      	mov	r8, r0
 810b77a:	f2c0 8082 	blt.w	810b882 <quorem+0x114>
 810b77e:	3c01      	subs	r4, #1
 810b780:	f101 0714 	add.w	r7, r1, #20
 810b784:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 810b788:	f100 0614 	add.w	r6, r0, #20
 810b78c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 810b790:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 810b794:	eb06 030c 	add.w	r3, r6, ip
 810b798:	3501      	adds	r5, #1
 810b79a:	eb07 090c 	add.w	r9, r7, ip
 810b79e:	9301      	str	r3, [sp, #4]
 810b7a0:	fbb0 f5f5 	udiv	r5, r0, r5
 810b7a4:	b395      	cbz	r5, 810b80c <quorem+0x9e>
 810b7a6:	f04f 0a00 	mov.w	sl, #0
 810b7aa:	4638      	mov	r0, r7
 810b7ac:	46b6      	mov	lr, r6
 810b7ae:	46d3      	mov	fp, sl
 810b7b0:	f850 2b04 	ldr.w	r2, [r0], #4
 810b7b4:	b293      	uxth	r3, r2
 810b7b6:	fb05 a303 	mla	r3, r5, r3, sl
 810b7ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810b7be:	b29b      	uxth	r3, r3
 810b7c0:	ebab 0303 	sub.w	r3, fp, r3
 810b7c4:	0c12      	lsrs	r2, r2, #16
 810b7c6:	f8de b000 	ldr.w	fp, [lr]
 810b7ca:	fb05 a202 	mla	r2, r5, r2, sl
 810b7ce:	fa13 f38b 	uxtah	r3, r3, fp
 810b7d2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 810b7d6:	fa1f fb82 	uxth.w	fp, r2
 810b7da:	f8de 2000 	ldr.w	r2, [lr]
 810b7de:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 810b7e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b7e6:	b29b      	uxth	r3, r3
 810b7e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b7ec:	4581      	cmp	r9, r0
 810b7ee:	ea4f 4b22 	mov.w	fp, r2, asr #16
 810b7f2:	f84e 3b04 	str.w	r3, [lr], #4
 810b7f6:	d2db      	bcs.n	810b7b0 <quorem+0x42>
 810b7f8:	f856 300c 	ldr.w	r3, [r6, ip]
 810b7fc:	b933      	cbnz	r3, 810b80c <quorem+0x9e>
 810b7fe:	9b01      	ldr	r3, [sp, #4]
 810b800:	3b04      	subs	r3, #4
 810b802:	429e      	cmp	r6, r3
 810b804:	461a      	mov	r2, r3
 810b806:	d330      	bcc.n	810b86a <quorem+0xfc>
 810b808:	f8c8 4010 	str.w	r4, [r8, #16]
 810b80c:	4640      	mov	r0, r8
 810b80e:	f001 f81f 	bl	810c850 <__mcmp>
 810b812:	2800      	cmp	r0, #0
 810b814:	db25      	blt.n	810b862 <quorem+0xf4>
 810b816:	3501      	adds	r5, #1
 810b818:	4630      	mov	r0, r6
 810b81a:	f04f 0c00 	mov.w	ip, #0
 810b81e:	f857 2b04 	ldr.w	r2, [r7], #4
 810b822:	f8d0 e000 	ldr.w	lr, [r0]
 810b826:	b293      	uxth	r3, r2
 810b828:	ebac 0303 	sub.w	r3, ip, r3
 810b82c:	0c12      	lsrs	r2, r2, #16
 810b82e:	fa13 f38e 	uxtah	r3, r3, lr
 810b832:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 810b836:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810b83a:	b29b      	uxth	r3, r3
 810b83c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810b840:	45b9      	cmp	r9, r7
 810b842:	ea4f 4c22 	mov.w	ip, r2, asr #16
 810b846:	f840 3b04 	str.w	r3, [r0], #4
 810b84a:	d2e8      	bcs.n	810b81e <quorem+0xb0>
 810b84c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 810b850:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 810b854:	b92a      	cbnz	r2, 810b862 <quorem+0xf4>
 810b856:	3b04      	subs	r3, #4
 810b858:	429e      	cmp	r6, r3
 810b85a:	461a      	mov	r2, r3
 810b85c:	d30b      	bcc.n	810b876 <quorem+0x108>
 810b85e:	f8c8 4010 	str.w	r4, [r8, #16]
 810b862:	4628      	mov	r0, r5
 810b864:	b003      	add	sp, #12
 810b866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b86a:	6812      	ldr	r2, [r2, #0]
 810b86c:	3b04      	subs	r3, #4
 810b86e:	2a00      	cmp	r2, #0
 810b870:	d1ca      	bne.n	810b808 <quorem+0x9a>
 810b872:	3c01      	subs	r4, #1
 810b874:	e7c5      	b.n	810b802 <quorem+0x94>
 810b876:	6812      	ldr	r2, [r2, #0]
 810b878:	3b04      	subs	r3, #4
 810b87a:	2a00      	cmp	r2, #0
 810b87c:	d1ef      	bne.n	810b85e <quorem+0xf0>
 810b87e:	3c01      	subs	r4, #1
 810b880:	e7ea      	b.n	810b858 <quorem+0xea>
 810b882:	2000      	movs	r0, #0
 810b884:	e7ee      	b.n	810b864 <quorem+0xf6>
	...

0810b888 <_dtoa_r>:
 810b888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b88c:	ec57 6b10 	vmov	r6, r7, d0
 810b890:	b097      	sub	sp, #92	; 0x5c
 810b892:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810b894:	9106      	str	r1, [sp, #24]
 810b896:	4604      	mov	r4, r0
 810b898:	920b      	str	r2, [sp, #44]	; 0x2c
 810b89a:	9312      	str	r3, [sp, #72]	; 0x48
 810b89c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810b8a0:	e9cd 6700 	strd	r6, r7, [sp]
 810b8a4:	b93d      	cbnz	r5, 810b8b6 <_dtoa_r+0x2e>
 810b8a6:	2010      	movs	r0, #16
 810b8a8:	f000 fdb4 	bl	810c414 <malloc>
 810b8ac:	6260      	str	r0, [r4, #36]	; 0x24
 810b8ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810b8b2:	6005      	str	r5, [r0, #0]
 810b8b4:	60c5      	str	r5, [r0, #12]
 810b8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b8b8:	6819      	ldr	r1, [r3, #0]
 810b8ba:	b151      	cbz	r1, 810b8d2 <_dtoa_r+0x4a>
 810b8bc:	685a      	ldr	r2, [r3, #4]
 810b8be:	604a      	str	r2, [r1, #4]
 810b8c0:	2301      	movs	r3, #1
 810b8c2:	4093      	lsls	r3, r2
 810b8c4:	608b      	str	r3, [r1, #8]
 810b8c6:	4620      	mov	r0, r4
 810b8c8:	f000 fde0 	bl	810c48c <_Bfree>
 810b8cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b8ce:	2200      	movs	r2, #0
 810b8d0:	601a      	str	r2, [r3, #0]
 810b8d2:	1e3b      	subs	r3, r7, #0
 810b8d4:	bfbb      	ittet	lt
 810b8d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810b8da:	9301      	strlt	r3, [sp, #4]
 810b8dc:	2300      	movge	r3, #0
 810b8de:	2201      	movlt	r2, #1
 810b8e0:	bfac      	ite	ge
 810b8e2:	f8c8 3000 	strge.w	r3, [r8]
 810b8e6:	f8c8 2000 	strlt.w	r2, [r8]
 810b8ea:	4baf      	ldr	r3, [pc, #700]	; (810bba8 <_dtoa_r+0x320>)
 810b8ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 810b8f0:	ea33 0308 	bics.w	r3, r3, r8
 810b8f4:	d114      	bne.n	810b920 <_dtoa_r+0x98>
 810b8f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810b8f8:	f242 730f 	movw	r3, #9999	; 0x270f
 810b8fc:	6013      	str	r3, [r2, #0]
 810b8fe:	9b00      	ldr	r3, [sp, #0]
 810b900:	b923      	cbnz	r3, 810b90c <_dtoa_r+0x84>
 810b902:	f3c8 0013 	ubfx	r0, r8, #0, #20
 810b906:	2800      	cmp	r0, #0
 810b908:	f000 8542 	beq.w	810c390 <_dtoa_r+0xb08>
 810b90c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b90e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 810bbbc <_dtoa_r+0x334>
 810b912:	2b00      	cmp	r3, #0
 810b914:	f000 8544 	beq.w	810c3a0 <_dtoa_r+0xb18>
 810b918:	f10b 0303 	add.w	r3, fp, #3
 810b91c:	f000 bd3e 	b.w	810c39c <_dtoa_r+0xb14>
 810b920:	e9dd 6700 	ldrd	r6, r7, [sp]
 810b924:	2200      	movs	r2, #0
 810b926:	2300      	movs	r3, #0
 810b928:	4630      	mov	r0, r6
 810b92a:	4639      	mov	r1, r7
 810b92c:	f7f5 f904 	bl	8100b38 <__aeabi_dcmpeq>
 810b930:	4681      	mov	r9, r0
 810b932:	b168      	cbz	r0, 810b950 <_dtoa_r+0xc8>
 810b934:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810b936:	2301      	movs	r3, #1
 810b938:	6013      	str	r3, [r2, #0]
 810b93a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b93c:	2b00      	cmp	r3, #0
 810b93e:	f000 8524 	beq.w	810c38a <_dtoa_r+0xb02>
 810b942:	4b9a      	ldr	r3, [pc, #616]	; (810bbac <_dtoa_r+0x324>)
 810b944:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810b946:	f103 3bff 	add.w	fp, r3, #4294967295
 810b94a:	6013      	str	r3, [r2, #0]
 810b94c:	f000 bd28 	b.w	810c3a0 <_dtoa_r+0xb18>
 810b950:	aa14      	add	r2, sp, #80	; 0x50
 810b952:	a915      	add	r1, sp, #84	; 0x54
 810b954:	ec47 6b10 	vmov	d0, r6, r7
 810b958:	4620      	mov	r0, r4
 810b95a:	f000 fff0 	bl	810c93e <__d2b>
 810b95e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810b962:	9004      	str	r0, [sp, #16]
 810b964:	2d00      	cmp	r5, #0
 810b966:	d07c      	beq.n	810ba62 <_dtoa_r+0x1da>
 810b968:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b96c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 810b970:	46b2      	mov	sl, r6
 810b972:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 810b976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810b97a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 810b97e:	2200      	movs	r2, #0
 810b980:	4b8b      	ldr	r3, [pc, #556]	; (810bbb0 <_dtoa_r+0x328>)
 810b982:	4650      	mov	r0, sl
 810b984:	4659      	mov	r1, fp
 810b986:	f7f4 fcb7 	bl	81002f8 <__aeabi_dsub>
 810b98a:	a381      	add	r3, pc, #516	; (adr r3, 810bb90 <_dtoa_r+0x308>)
 810b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b990:	f7f4 fe6a 	bl	8100668 <__aeabi_dmul>
 810b994:	a380      	add	r3, pc, #512	; (adr r3, 810bb98 <_dtoa_r+0x310>)
 810b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b99a:	f7f4 fcaf 	bl	81002fc <__adddf3>
 810b99e:	4606      	mov	r6, r0
 810b9a0:	4628      	mov	r0, r5
 810b9a2:	460f      	mov	r7, r1
 810b9a4:	f7f4 fdf6 	bl	8100594 <__aeabi_i2d>
 810b9a8:	a37d      	add	r3, pc, #500	; (adr r3, 810bba0 <_dtoa_r+0x318>)
 810b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b9ae:	f7f4 fe5b 	bl	8100668 <__aeabi_dmul>
 810b9b2:	4602      	mov	r2, r0
 810b9b4:	460b      	mov	r3, r1
 810b9b6:	4630      	mov	r0, r6
 810b9b8:	4639      	mov	r1, r7
 810b9ba:	f7f4 fc9f 	bl	81002fc <__adddf3>
 810b9be:	4606      	mov	r6, r0
 810b9c0:	460f      	mov	r7, r1
 810b9c2:	f7f5 f901 	bl	8100bc8 <__aeabi_d2iz>
 810b9c6:	2200      	movs	r2, #0
 810b9c8:	4682      	mov	sl, r0
 810b9ca:	2300      	movs	r3, #0
 810b9cc:	4630      	mov	r0, r6
 810b9ce:	4639      	mov	r1, r7
 810b9d0:	f7f5 f8bc 	bl	8100b4c <__aeabi_dcmplt>
 810b9d4:	b148      	cbz	r0, 810b9ea <_dtoa_r+0x162>
 810b9d6:	4650      	mov	r0, sl
 810b9d8:	f7f4 fddc 	bl	8100594 <__aeabi_i2d>
 810b9dc:	4632      	mov	r2, r6
 810b9de:	463b      	mov	r3, r7
 810b9e0:	f7f5 f8aa 	bl	8100b38 <__aeabi_dcmpeq>
 810b9e4:	b908      	cbnz	r0, 810b9ea <_dtoa_r+0x162>
 810b9e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810b9ea:	f1ba 0f16 	cmp.w	sl, #22
 810b9ee:	d859      	bhi.n	810baa4 <_dtoa_r+0x21c>
 810b9f0:	4970      	ldr	r1, [pc, #448]	; (810bbb4 <_dtoa_r+0x32c>)
 810b9f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810b9f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b9fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 810b9fe:	f7f5 f8c3 	bl	8100b88 <__aeabi_dcmpgt>
 810ba02:	2800      	cmp	r0, #0
 810ba04:	d050      	beq.n	810baa8 <_dtoa_r+0x220>
 810ba06:	f10a 3aff 	add.w	sl, sl, #4294967295
 810ba0a:	2300      	movs	r3, #0
 810ba0c:	930f      	str	r3, [sp, #60]	; 0x3c
 810ba0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ba10:	1b5d      	subs	r5, r3, r5
 810ba12:	f1b5 0801 	subs.w	r8, r5, #1
 810ba16:	bf49      	itett	mi
 810ba18:	f1c5 0301 	rsbmi	r3, r5, #1
 810ba1c:	2300      	movpl	r3, #0
 810ba1e:	9305      	strmi	r3, [sp, #20]
 810ba20:	f04f 0800 	movmi.w	r8, #0
 810ba24:	bf58      	it	pl
 810ba26:	9305      	strpl	r3, [sp, #20]
 810ba28:	f1ba 0f00 	cmp.w	sl, #0
 810ba2c:	db3e      	blt.n	810baac <_dtoa_r+0x224>
 810ba2e:	2300      	movs	r3, #0
 810ba30:	44d0      	add	r8, sl
 810ba32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 810ba36:	9307      	str	r3, [sp, #28]
 810ba38:	9b06      	ldr	r3, [sp, #24]
 810ba3a:	2b09      	cmp	r3, #9
 810ba3c:	f200 8090 	bhi.w	810bb60 <_dtoa_r+0x2d8>
 810ba40:	2b05      	cmp	r3, #5
 810ba42:	bfc4      	itt	gt
 810ba44:	3b04      	subgt	r3, #4
 810ba46:	9306      	strgt	r3, [sp, #24]
 810ba48:	9b06      	ldr	r3, [sp, #24]
 810ba4a:	f1a3 0302 	sub.w	r3, r3, #2
 810ba4e:	bfcc      	ite	gt
 810ba50:	2500      	movgt	r5, #0
 810ba52:	2501      	movle	r5, #1
 810ba54:	2b03      	cmp	r3, #3
 810ba56:	f200 808f 	bhi.w	810bb78 <_dtoa_r+0x2f0>
 810ba5a:	e8df f003 	tbb	[pc, r3]
 810ba5e:	7f7d      	.short	0x7f7d
 810ba60:	7131      	.short	0x7131
 810ba62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 810ba66:	441d      	add	r5, r3
 810ba68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 810ba6c:	2820      	cmp	r0, #32
 810ba6e:	dd13      	ble.n	810ba98 <_dtoa_r+0x210>
 810ba70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 810ba74:	9b00      	ldr	r3, [sp, #0]
 810ba76:	fa08 f800 	lsl.w	r8, r8, r0
 810ba7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 810ba7e:	fa23 f000 	lsr.w	r0, r3, r0
 810ba82:	ea48 0000 	orr.w	r0, r8, r0
 810ba86:	f7f4 fd75 	bl	8100574 <__aeabi_ui2d>
 810ba8a:	2301      	movs	r3, #1
 810ba8c:	4682      	mov	sl, r0
 810ba8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 810ba92:	3d01      	subs	r5, #1
 810ba94:	9313      	str	r3, [sp, #76]	; 0x4c
 810ba96:	e772      	b.n	810b97e <_dtoa_r+0xf6>
 810ba98:	9b00      	ldr	r3, [sp, #0]
 810ba9a:	f1c0 0020 	rsb	r0, r0, #32
 810ba9e:	fa03 f000 	lsl.w	r0, r3, r0
 810baa2:	e7f0      	b.n	810ba86 <_dtoa_r+0x1fe>
 810baa4:	2301      	movs	r3, #1
 810baa6:	e7b1      	b.n	810ba0c <_dtoa_r+0x184>
 810baa8:	900f      	str	r0, [sp, #60]	; 0x3c
 810baaa:	e7b0      	b.n	810ba0e <_dtoa_r+0x186>
 810baac:	9b05      	ldr	r3, [sp, #20]
 810baae:	eba3 030a 	sub.w	r3, r3, sl
 810bab2:	9305      	str	r3, [sp, #20]
 810bab4:	f1ca 0300 	rsb	r3, sl, #0
 810bab8:	9307      	str	r3, [sp, #28]
 810baba:	2300      	movs	r3, #0
 810babc:	930e      	str	r3, [sp, #56]	; 0x38
 810babe:	e7bb      	b.n	810ba38 <_dtoa_r+0x1b0>
 810bac0:	2301      	movs	r3, #1
 810bac2:	930a      	str	r3, [sp, #40]	; 0x28
 810bac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bac6:	2b00      	cmp	r3, #0
 810bac8:	dd59      	ble.n	810bb7e <_dtoa_r+0x2f6>
 810baca:	9302      	str	r3, [sp, #8]
 810bacc:	4699      	mov	r9, r3
 810bace:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810bad0:	2200      	movs	r2, #0
 810bad2:	6072      	str	r2, [r6, #4]
 810bad4:	2204      	movs	r2, #4
 810bad6:	f102 0014 	add.w	r0, r2, #20
 810bada:	4298      	cmp	r0, r3
 810badc:	6871      	ldr	r1, [r6, #4]
 810bade:	d953      	bls.n	810bb88 <_dtoa_r+0x300>
 810bae0:	4620      	mov	r0, r4
 810bae2:	f000 fc9f 	bl	810c424 <_Balloc>
 810bae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810bae8:	6030      	str	r0, [r6, #0]
 810baea:	f1b9 0f0e 	cmp.w	r9, #14
 810baee:	f8d3 b000 	ldr.w	fp, [r3]
 810baf2:	f200 80e6 	bhi.w	810bcc2 <_dtoa_r+0x43a>
 810baf6:	2d00      	cmp	r5, #0
 810baf8:	f000 80e3 	beq.w	810bcc2 <_dtoa_r+0x43a>
 810bafc:	ed9d 7b00 	vldr	d7, [sp]
 810bb00:	f1ba 0f00 	cmp.w	sl, #0
 810bb04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 810bb08:	dd74      	ble.n	810bbf4 <_dtoa_r+0x36c>
 810bb0a:	4a2a      	ldr	r2, [pc, #168]	; (810bbb4 <_dtoa_r+0x32c>)
 810bb0c:	f00a 030f 	and.w	r3, sl, #15
 810bb10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 810bb14:	ed93 7b00 	vldr	d7, [r3]
 810bb18:	ea4f 162a 	mov.w	r6, sl, asr #4
 810bb1c:	06f0      	lsls	r0, r6, #27
 810bb1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 810bb22:	d565      	bpl.n	810bbf0 <_dtoa_r+0x368>
 810bb24:	4b24      	ldr	r3, [pc, #144]	; (810bbb8 <_dtoa_r+0x330>)
 810bb26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810bb2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810bb2e:	f7f4 fec5 	bl	81008bc <__aeabi_ddiv>
 810bb32:	e9cd 0100 	strd	r0, r1, [sp]
 810bb36:	f006 060f 	and.w	r6, r6, #15
 810bb3a:	2503      	movs	r5, #3
 810bb3c:	4f1e      	ldr	r7, [pc, #120]	; (810bbb8 <_dtoa_r+0x330>)
 810bb3e:	e04c      	b.n	810bbda <_dtoa_r+0x352>
 810bb40:	2301      	movs	r3, #1
 810bb42:	930a      	str	r3, [sp, #40]	; 0x28
 810bb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bb46:	4453      	add	r3, sl
 810bb48:	f103 0901 	add.w	r9, r3, #1
 810bb4c:	9302      	str	r3, [sp, #8]
 810bb4e:	464b      	mov	r3, r9
 810bb50:	2b01      	cmp	r3, #1
 810bb52:	bfb8      	it	lt
 810bb54:	2301      	movlt	r3, #1
 810bb56:	e7ba      	b.n	810bace <_dtoa_r+0x246>
 810bb58:	2300      	movs	r3, #0
 810bb5a:	e7b2      	b.n	810bac2 <_dtoa_r+0x23a>
 810bb5c:	2300      	movs	r3, #0
 810bb5e:	e7f0      	b.n	810bb42 <_dtoa_r+0x2ba>
 810bb60:	2501      	movs	r5, #1
 810bb62:	2300      	movs	r3, #0
 810bb64:	9306      	str	r3, [sp, #24]
 810bb66:	950a      	str	r5, [sp, #40]	; 0x28
 810bb68:	f04f 33ff 	mov.w	r3, #4294967295
 810bb6c:	9302      	str	r3, [sp, #8]
 810bb6e:	4699      	mov	r9, r3
 810bb70:	2200      	movs	r2, #0
 810bb72:	2312      	movs	r3, #18
 810bb74:	920b      	str	r2, [sp, #44]	; 0x2c
 810bb76:	e7aa      	b.n	810bace <_dtoa_r+0x246>
 810bb78:	2301      	movs	r3, #1
 810bb7a:	930a      	str	r3, [sp, #40]	; 0x28
 810bb7c:	e7f4      	b.n	810bb68 <_dtoa_r+0x2e0>
 810bb7e:	2301      	movs	r3, #1
 810bb80:	9302      	str	r3, [sp, #8]
 810bb82:	4699      	mov	r9, r3
 810bb84:	461a      	mov	r2, r3
 810bb86:	e7f5      	b.n	810bb74 <_dtoa_r+0x2ec>
 810bb88:	3101      	adds	r1, #1
 810bb8a:	6071      	str	r1, [r6, #4]
 810bb8c:	0052      	lsls	r2, r2, #1
 810bb8e:	e7a2      	b.n	810bad6 <_dtoa_r+0x24e>
 810bb90:	636f4361 	.word	0x636f4361
 810bb94:	3fd287a7 	.word	0x3fd287a7
 810bb98:	8b60c8b3 	.word	0x8b60c8b3
 810bb9c:	3fc68a28 	.word	0x3fc68a28
 810bba0:	509f79fb 	.word	0x509f79fb
 810bba4:	3fd34413 	.word	0x3fd34413
 810bba8:	7ff00000 	.word	0x7ff00000
 810bbac:	0810cc45 	.word	0x0810cc45
 810bbb0:	3ff80000 	.word	0x3ff80000
 810bbb4:	0810cc80 	.word	0x0810cc80
 810bbb8:	0810cc58 	.word	0x0810cc58
 810bbbc:	0810cc4f 	.word	0x0810cc4f
 810bbc0:	07f1      	lsls	r1, r6, #31
 810bbc2:	d508      	bpl.n	810bbd6 <_dtoa_r+0x34e>
 810bbc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 810bbc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bbcc:	f7f4 fd4c 	bl	8100668 <__aeabi_dmul>
 810bbd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810bbd4:	3501      	adds	r5, #1
 810bbd6:	1076      	asrs	r6, r6, #1
 810bbd8:	3708      	adds	r7, #8
 810bbda:	2e00      	cmp	r6, #0
 810bbdc:	d1f0      	bne.n	810bbc0 <_dtoa_r+0x338>
 810bbde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 810bbe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bbe6:	f7f4 fe69 	bl	81008bc <__aeabi_ddiv>
 810bbea:	e9cd 0100 	strd	r0, r1, [sp]
 810bbee:	e01a      	b.n	810bc26 <_dtoa_r+0x39e>
 810bbf0:	2502      	movs	r5, #2
 810bbf2:	e7a3      	b.n	810bb3c <_dtoa_r+0x2b4>
 810bbf4:	f000 80a0 	beq.w	810bd38 <_dtoa_r+0x4b0>
 810bbf8:	f1ca 0600 	rsb	r6, sl, #0
 810bbfc:	4b9f      	ldr	r3, [pc, #636]	; (810be7c <_dtoa_r+0x5f4>)
 810bbfe:	4fa0      	ldr	r7, [pc, #640]	; (810be80 <_dtoa_r+0x5f8>)
 810bc00:	f006 020f 	and.w	r2, r6, #15
 810bc04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bc0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 810bc10:	f7f4 fd2a 	bl	8100668 <__aeabi_dmul>
 810bc14:	e9cd 0100 	strd	r0, r1, [sp]
 810bc18:	1136      	asrs	r6, r6, #4
 810bc1a:	2300      	movs	r3, #0
 810bc1c:	2502      	movs	r5, #2
 810bc1e:	2e00      	cmp	r6, #0
 810bc20:	d17f      	bne.n	810bd22 <_dtoa_r+0x49a>
 810bc22:	2b00      	cmp	r3, #0
 810bc24:	d1e1      	bne.n	810bbea <_dtoa_r+0x362>
 810bc26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810bc28:	2b00      	cmp	r3, #0
 810bc2a:	f000 8087 	beq.w	810bd3c <_dtoa_r+0x4b4>
 810bc2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 810bc32:	2200      	movs	r2, #0
 810bc34:	4b93      	ldr	r3, [pc, #588]	; (810be84 <_dtoa_r+0x5fc>)
 810bc36:	4630      	mov	r0, r6
 810bc38:	4639      	mov	r1, r7
 810bc3a:	f7f4 ff87 	bl	8100b4c <__aeabi_dcmplt>
 810bc3e:	2800      	cmp	r0, #0
 810bc40:	d07c      	beq.n	810bd3c <_dtoa_r+0x4b4>
 810bc42:	f1b9 0f00 	cmp.w	r9, #0
 810bc46:	d079      	beq.n	810bd3c <_dtoa_r+0x4b4>
 810bc48:	9b02      	ldr	r3, [sp, #8]
 810bc4a:	2b00      	cmp	r3, #0
 810bc4c:	dd35      	ble.n	810bcba <_dtoa_r+0x432>
 810bc4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 810bc52:	9308      	str	r3, [sp, #32]
 810bc54:	4639      	mov	r1, r7
 810bc56:	2200      	movs	r2, #0
 810bc58:	4b8b      	ldr	r3, [pc, #556]	; (810be88 <_dtoa_r+0x600>)
 810bc5a:	4630      	mov	r0, r6
 810bc5c:	f7f4 fd04 	bl	8100668 <__aeabi_dmul>
 810bc60:	e9cd 0100 	strd	r0, r1, [sp]
 810bc64:	9f02      	ldr	r7, [sp, #8]
 810bc66:	3501      	adds	r5, #1
 810bc68:	4628      	mov	r0, r5
 810bc6a:	f7f4 fc93 	bl	8100594 <__aeabi_i2d>
 810bc6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810bc72:	f7f4 fcf9 	bl	8100668 <__aeabi_dmul>
 810bc76:	2200      	movs	r2, #0
 810bc78:	4b84      	ldr	r3, [pc, #528]	; (810be8c <_dtoa_r+0x604>)
 810bc7a:	f7f4 fb3f 	bl	81002fc <__adddf3>
 810bc7e:	4605      	mov	r5, r0
 810bc80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 810bc84:	2f00      	cmp	r7, #0
 810bc86:	d15d      	bne.n	810bd44 <_dtoa_r+0x4bc>
 810bc88:	2200      	movs	r2, #0
 810bc8a:	4b81      	ldr	r3, [pc, #516]	; (810be90 <_dtoa_r+0x608>)
 810bc8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bc90:	f7f4 fb32 	bl	81002f8 <__aeabi_dsub>
 810bc94:	462a      	mov	r2, r5
 810bc96:	4633      	mov	r3, r6
 810bc98:	e9cd 0100 	strd	r0, r1, [sp]
 810bc9c:	f7f4 ff74 	bl	8100b88 <__aeabi_dcmpgt>
 810bca0:	2800      	cmp	r0, #0
 810bca2:	f040 8288 	bne.w	810c1b6 <_dtoa_r+0x92e>
 810bca6:	462a      	mov	r2, r5
 810bca8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 810bcac:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bcb0:	f7f4 ff4c 	bl	8100b4c <__aeabi_dcmplt>
 810bcb4:	2800      	cmp	r0, #0
 810bcb6:	f040 827c 	bne.w	810c1b2 <_dtoa_r+0x92a>
 810bcba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810bcbe:	e9cd 2300 	strd	r2, r3, [sp]
 810bcc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810bcc4:	2b00      	cmp	r3, #0
 810bcc6:	f2c0 8150 	blt.w	810bf6a <_dtoa_r+0x6e2>
 810bcca:	f1ba 0f0e 	cmp.w	sl, #14
 810bcce:	f300 814c 	bgt.w	810bf6a <_dtoa_r+0x6e2>
 810bcd2:	4b6a      	ldr	r3, [pc, #424]	; (810be7c <_dtoa_r+0x5f4>)
 810bcd4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810bcd8:	ed93 7b00 	vldr	d7, [r3]
 810bcdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810bcde:	2b00      	cmp	r3, #0
 810bce0:	ed8d 7b02 	vstr	d7, [sp, #8]
 810bce4:	f280 80d8 	bge.w	810be98 <_dtoa_r+0x610>
 810bce8:	f1b9 0f00 	cmp.w	r9, #0
 810bcec:	f300 80d4 	bgt.w	810be98 <_dtoa_r+0x610>
 810bcf0:	f040 825e 	bne.w	810c1b0 <_dtoa_r+0x928>
 810bcf4:	2200      	movs	r2, #0
 810bcf6:	4b66      	ldr	r3, [pc, #408]	; (810be90 <_dtoa_r+0x608>)
 810bcf8:	ec51 0b17 	vmov	r0, r1, d7
 810bcfc:	f7f4 fcb4 	bl	8100668 <__aeabi_dmul>
 810bd00:	e9dd 2300 	ldrd	r2, r3, [sp]
 810bd04:	f7f4 ff36 	bl	8100b74 <__aeabi_dcmpge>
 810bd08:	464f      	mov	r7, r9
 810bd0a:	464e      	mov	r6, r9
 810bd0c:	2800      	cmp	r0, #0
 810bd0e:	f040 8234 	bne.w	810c17a <_dtoa_r+0x8f2>
 810bd12:	2331      	movs	r3, #49	; 0x31
 810bd14:	f10b 0501 	add.w	r5, fp, #1
 810bd18:	f88b 3000 	strb.w	r3, [fp]
 810bd1c:	f10a 0a01 	add.w	sl, sl, #1
 810bd20:	e22f      	b.n	810c182 <_dtoa_r+0x8fa>
 810bd22:	07f2      	lsls	r2, r6, #31
 810bd24:	d505      	bpl.n	810bd32 <_dtoa_r+0x4aa>
 810bd26:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bd2a:	f7f4 fc9d 	bl	8100668 <__aeabi_dmul>
 810bd2e:	3501      	adds	r5, #1
 810bd30:	2301      	movs	r3, #1
 810bd32:	1076      	asrs	r6, r6, #1
 810bd34:	3708      	adds	r7, #8
 810bd36:	e772      	b.n	810bc1e <_dtoa_r+0x396>
 810bd38:	2502      	movs	r5, #2
 810bd3a:	e774      	b.n	810bc26 <_dtoa_r+0x39e>
 810bd3c:	f8cd a020 	str.w	sl, [sp, #32]
 810bd40:	464f      	mov	r7, r9
 810bd42:	e791      	b.n	810bc68 <_dtoa_r+0x3e0>
 810bd44:	4b4d      	ldr	r3, [pc, #308]	; (810be7c <_dtoa_r+0x5f4>)
 810bd46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 810bd4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 810bd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bd50:	2b00      	cmp	r3, #0
 810bd52:	d047      	beq.n	810bde4 <_dtoa_r+0x55c>
 810bd54:	4602      	mov	r2, r0
 810bd56:	460b      	mov	r3, r1
 810bd58:	2000      	movs	r0, #0
 810bd5a:	494e      	ldr	r1, [pc, #312]	; (810be94 <_dtoa_r+0x60c>)
 810bd5c:	f7f4 fdae 	bl	81008bc <__aeabi_ddiv>
 810bd60:	462a      	mov	r2, r5
 810bd62:	4633      	mov	r3, r6
 810bd64:	f7f4 fac8 	bl	81002f8 <__aeabi_dsub>
 810bd68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810bd6c:	465d      	mov	r5, fp
 810bd6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bd72:	f7f4 ff29 	bl	8100bc8 <__aeabi_d2iz>
 810bd76:	4606      	mov	r6, r0
 810bd78:	f7f4 fc0c 	bl	8100594 <__aeabi_i2d>
 810bd7c:	4602      	mov	r2, r0
 810bd7e:	460b      	mov	r3, r1
 810bd80:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bd84:	f7f4 fab8 	bl	81002f8 <__aeabi_dsub>
 810bd88:	3630      	adds	r6, #48	; 0x30
 810bd8a:	f805 6b01 	strb.w	r6, [r5], #1
 810bd8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810bd92:	e9cd 0100 	strd	r0, r1, [sp]
 810bd96:	f7f4 fed9 	bl	8100b4c <__aeabi_dcmplt>
 810bd9a:	2800      	cmp	r0, #0
 810bd9c:	d163      	bne.n	810be66 <_dtoa_r+0x5de>
 810bd9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810bda2:	2000      	movs	r0, #0
 810bda4:	4937      	ldr	r1, [pc, #220]	; (810be84 <_dtoa_r+0x5fc>)
 810bda6:	f7f4 faa7 	bl	81002f8 <__aeabi_dsub>
 810bdaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810bdae:	f7f4 fecd 	bl	8100b4c <__aeabi_dcmplt>
 810bdb2:	2800      	cmp	r0, #0
 810bdb4:	f040 80b7 	bne.w	810bf26 <_dtoa_r+0x69e>
 810bdb8:	eba5 030b 	sub.w	r3, r5, fp
 810bdbc:	429f      	cmp	r7, r3
 810bdbe:	f77f af7c 	ble.w	810bcba <_dtoa_r+0x432>
 810bdc2:	2200      	movs	r2, #0
 810bdc4:	4b30      	ldr	r3, [pc, #192]	; (810be88 <_dtoa_r+0x600>)
 810bdc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810bdca:	f7f4 fc4d 	bl	8100668 <__aeabi_dmul>
 810bdce:	2200      	movs	r2, #0
 810bdd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810bdd4:	4b2c      	ldr	r3, [pc, #176]	; (810be88 <_dtoa_r+0x600>)
 810bdd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bdda:	f7f4 fc45 	bl	8100668 <__aeabi_dmul>
 810bdde:	e9cd 0100 	strd	r0, r1, [sp]
 810bde2:	e7c4      	b.n	810bd6e <_dtoa_r+0x4e6>
 810bde4:	462a      	mov	r2, r5
 810bde6:	4633      	mov	r3, r6
 810bde8:	f7f4 fc3e 	bl	8100668 <__aeabi_dmul>
 810bdec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810bdf0:	eb0b 0507 	add.w	r5, fp, r7
 810bdf4:	465e      	mov	r6, fp
 810bdf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 810bdfa:	f7f4 fee5 	bl	8100bc8 <__aeabi_d2iz>
 810bdfe:	4607      	mov	r7, r0
 810be00:	f7f4 fbc8 	bl	8100594 <__aeabi_i2d>
 810be04:	3730      	adds	r7, #48	; 0x30
 810be06:	4602      	mov	r2, r0
 810be08:	460b      	mov	r3, r1
 810be0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 810be0e:	f7f4 fa73 	bl	81002f8 <__aeabi_dsub>
 810be12:	f806 7b01 	strb.w	r7, [r6], #1
 810be16:	42ae      	cmp	r6, r5
 810be18:	e9cd 0100 	strd	r0, r1, [sp]
 810be1c:	f04f 0200 	mov.w	r2, #0
 810be20:	d126      	bne.n	810be70 <_dtoa_r+0x5e8>
 810be22:	4b1c      	ldr	r3, [pc, #112]	; (810be94 <_dtoa_r+0x60c>)
 810be24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810be28:	f7f4 fa68 	bl	81002fc <__adddf3>
 810be2c:	4602      	mov	r2, r0
 810be2e:	460b      	mov	r3, r1
 810be30:	e9dd 0100 	ldrd	r0, r1, [sp]
 810be34:	f7f4 fea8 	bl	8100b88 <__aeabi_dcmpgt>
 810be38:	2800      	cmp	r0, #0
 810be3a:	d174      	bne.n	810bf26 <_dtoa_r+0x69e>
 810be3c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 810be40:	2000      	movs	r0, #0
 810be42:	4914      	ldr	r1, [pc, #80]	; (810be94 <_dtoa_r+0x60c>)
 810be44:	f7f4 fa58 	bl	81002f8 <__aeabi_dsub>
 810be48:	4602      	mov	r2, r0
 810be4a:	460b      	mov	r3, r1
 810be4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810be50:	f7f4 fe7c 	bl	8100b4c <__aeabi_dcmplt>
 810be54:	2800      	cmp	r0, #0
 810be56:	f43f af30 	beq.w	810bcba <_dtoa_r+0x432>
 810be5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810be5e:	2b30      	cmp	r3, #48	; 0x30
 810be60:	f105 32ff 	add.w	r2, r5, #4294967295
 810be64:	d002      	beq.n	810be6c <_dtoa_r+0x5e4>
 810be66:	f8dd a020 	ldr.w	sl, [sp, #32]
 810be6a:	e04a      	b.n	810bf02 <_dtoa_r+0x67a>
 810be6c:	4615      	mov	r5, r2
 810be6e:	e7f4      	b.n	810be5a <_dtoa_r+0x5d2>
 810be70:	4b05      	ldr	r3, [pc, #20]	; (810be88 <_dtoa_r+0x600>)
 810be72:	f7f4 fbf9 	bl	8100668 <__aeabi_dmul>
 810be76:	e9cd 0100 	strd	r0, r1, [sp]
 810be7a:	e7bc      	b.n	810bdf6 <_dtoa_r+0x56e>
 810be7c:	0810cc80 	.word	0x0810cc80
 810be80:	0810cc58 	.word	0x0810cc58
 810be84:	3ff00000 	.word	0x3ff00000
 810be88:	40240000 	.word	0x40240000
 810be8c:	401c0000 	.word	0x401c0000
 810be90:	40140000 	.word	0x40140000
 810be94:	3fe00000 	.word	0x3fe00000
 810be98:	e9dd 6700 	ldrd	r6, r7, [sp]
 810be9c:	465d      	mov	r5, fp
 810be9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810bea2:	4630      	mov	r0, r6
 810bea4:	4639      	mov	r1, r7
 810bea6:	f7f4 fd09 	bl	81008bc <__aeabi_ddiv>
 810beaa:	f7f4 fe8d 	bl	8100bc8 <__aeabi_d2iz>
 810beae:	4680      	mov	r8, r0
 810beb0:	f7f4 fb70 	bl	8100594 <__aeabi_i2d>
 810beb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810beb8:	f7f4 fbd6 	bl	8100668 <__aeabi_dmul>
 810bebc:	4602      	mov	r2, r0
 810bebe:	460b      	mov	r3, r1
 810bec0:	4630      	mov	r0, r6
 810bec2:	4639      	mov	r1, r7
 810bec4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 810bec8:	f7f4 fa16 	bl	81002f8 <__aeabi_dsub>
 810becc:	f805 6b01 	strb.w	r6, [r5], #1
 810bed0:	eba5 060b 	sub.w	r6, r5, fp
 810bed4:	45b1      	cmp	r9, r6
 810bed6:	4602      	mov	r2, r0
 810bed8:	460b      	mov	r3, r1
 810beda:	d139      	bne.n	810bf50 <_dtoa_r+0x6c8>
 810bedc:	f7f4 fa0e 	bl	81002fc <__adddf3>
 810bee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810bee4:	4606      	mov	r6, r0
 810bee6:	460f      	mov	r7, r1
 810bee8:	f7f4 fe4e 	bl	8100b88 <__aeabi_dcmpgt>
 810beec:	b9c8      	cbnz	r0, 810bf22 <_dtoa_r+0x69a>
 810beee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810bef2:	4630      	mov	r0, r6
 810bef4:	4639      	mov	r1, r7
 810bef6:	f7f4 fe1f 	bl	8100b38 <__aeabi_dcmpeq>
 810befa:	b110      	cbz	r0, 810bf02 <_dtoa_r+0x67a>
 810befc:	f018 0f01 	tst.w	r8, #1
 810bf00:	d10f      	bne.n	810bf22 <_dtoa_r+0x69a>
 810bf02:	9904      	ldr	r1, [sp, #16]
 810bf04:	4620      	mov	r0, r4
 810bf06:	f000 fac1 	bl	810c48c <_Bfree>
 810bf0a:	2300      	movs	r3, #0
 810bf0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810bf0e:	702b      	strb	r3, [r5, #0]
 810bf10:	f10a 0301 	add.w	r3, sl, #1
 810bf14:	6013      	str	r3, [r2, #0]
 810bf16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810bf18:	2b00      	cmp	r3, #0
 810bf1a:	f000 8241 	beq.w	810c3a0 <_dtoa_r+0xb18>
 810bf1e:	601d      	str	r5, [r3, #0]
 810bf20:	e23e      	b.n	810c3a0 <_dtoa_r+0xb18>
 810bf22:	f8cd a020 	str.w	sl, [sp, #32]
 810bf26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810bf2a:	2a39      	cmp	r2, #57	; 0x39
 810bf2c:	f105 33ff 	add.w	r3, r5, #4294967295
 810bf30:	d108      	bne.n	810bf44 <_dtoa_r+0x6bc>
 810bf32:	459b      	cmp	fp, r3
 810bf34:	d10a      	bne.n	810bf4c <_dtoa_r+0x6c4>
 810bf36:	9b08      	ldr	r3, [sp, #32]
 810bf38:	3301      	adds	r3, #1
 810bf3a:	9308      	str	r3, [sp, #32]
 810bf3c:	2330      	movs	r3, #48	; 0x30
 810bf3e:	f88b 3000 	strb.w	r3, [fp]
 810bf42:	465b      	mov	r3, fp
 810bf44:	781a      	ldrb	r2, [r3, #0]
 810bf46:	3201      	adds	r2, #1
 810bf48:	701a      	strb	r2, [r3, #0]
 810bf4a:	e78c      	b.n	810be66 <_dtoa_r+0x5de>
 810bf4c:	461d      	mov	r5, r3
 810bf4e:	e7ea      	b.n	810bf26 <_dtoa_r+0x69e>
 810bf50:	2200      	movs	r2, #0
 810bf52:	4b9b      	ldr	r3, [pc, #620]	; (810c1c0 <_dtoa_r+0x938>)
 810bf54:	f7f4 fb88 	bl	8100668 <__aeabi_dmul>
 810bf58:	2200      	movs	r2, #0
 810bf5a:	2300      	movs	r3, #0
 810bf5c:	4606      	mov	r6, r0
 810bf5e:	460f      	mov	r7, r1
 810bf60:	f7f4 fdea 	bl	8100b38 <__aeabi_dcmpeq>
 810bf64:	2800      	cmp	r0, #0
 810bf66:	d09a      	beq.n	810be9e <_dtoa_r+0x616>
 810bf68:	e7cb      	b.n	810bf02 <_dtoa_r+0x67a>
 810bf6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810bf6c:	2a00      	cmp	r2, #0
 810bf6e:	f000 808b 	beq.w	810c088 <_dtoa_r+0x800>
 810bf72:	9a06      	ldr	r2, [sp, #24]
 810bf74:	2a01      	cmp	r2, #1
 810bf76:	dc6e      	bgt.n	810c056 <_dtoa_r+0x7ce>
 810bf78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810bf7a:	2a00      	cmp	r2, #0
 810bf7c:	d067      	beq.n	810c04e <_dtoa_r+0x7c6>
 810bf7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810bf82:	9f07      	ldr	r7, [sp, #28]
 810bf84:	9d05      	ldr	r5, [sp, #20]
 810bf86:	9a05      	ldr	r2, [sp, #20]
 810bf88:	2101      	movs	r1, #1
 810bf8a:	441a      	add	r2, r3
 810bf8c:	4620      	mov	r0, r4
 810bf8e:	9205      	str	r2, [sp, #20]
 810bf90:	4498      	add	r8, r3
 810bf92:	f000 fb1b 	bl	810c5cc <__i2b>
 810bf96:	4606      	mov	r6, r0
 810bf98:	2d00      	cmp	r5, #0
 810bf9a:	dd0c      	ble.n	810bfb6 <_dtoa_r+0x72e>
 810bf9c:	f1b8 0f00 	cmp.w	r8, #0
 810bfa0:	dd09      	ble.n	810bfb6 <_dtoa_r+0x72e>
 810bfa2:	4545      	cmp	r5, r8
 810bfa4:	9a05      	ldr	r2, [sp, #20]
 810bfa6:	462b      	mov	r3, r5
 810bfa8:	bfa8      	it	ge
 810bfaa:	4643      	movge	r3, r8
 810bfac:	1ad2      	subs	r2, r2, r3
 810bfae:	9205      	str	r2, [sp, #20]
 810bfb0:	1aed      	subs	r5, r5, r3
 810bfb2:	eba8 0803 	sub.w	r8, r8, r3
 810bfb6:	9b07      	ldr	r3, [sp, #28]
 810bfb8:	b1eb      	cbz	r3, 810bff6 <_dtoa_r+0x76e>
 810bfba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810bfbc:	2b00      	cmp	r3, #0
 810bfbe:	d067      	beq.n	810c090 <_dtoa_r+0x808>
 810bfc0:	b18f      	cbz	r7, 810bfe6 <_dtoa_r+0x75e>
 810bfc2:	4631      	mov	r1, r6
 810bfc4:	463a      	mov	r2, r7
 810bfc6:	4620      	mov	r0, r4
 810bfc8:	f000 fba0 	bl	810c70c <__pow5mult>
 810bfcc:	9a04      	ldr	r2, [sp, #16]
 810bfce:	4601      	mov	r1, r0
 810bfd0:	4606      	mov	r6, r0
 810bfd2:	4620      	mov	r0, r4
 810bfd4:	f000 fb03 	bl	810c5de <__multiply>
 810bfd8:	9904      	ldr	r1, [sp, #16]
 810bfda:	9008      	str	r0, [sp, #32]
 810bfdc:	4620      	mov	r0, r4
 810bfde:	f000 fa55 	bl	810c48c <_Bfree>
 810bfe2:	9b08      	ldr	r3, [sp, #32]
 810bfe4:	9304      	str	r3, [sp, #16]
 810bfe6:	9b07      	ldr	r3, [sp, #28]
 810bfe8:	1bda      	subs	r2, r3, r7
 810bfea:	d004      	beq.n	810bff6 <_dtoa_r+0x76e>
 810bfec:	9904      	ldr	r1, [sp, #16]
 810bfee:	4620      	mov	r0, r4
 810bff0:	f000 fb8c 	bl	810c70c <__pow5mult>
 810bff4:	9004      	str	r0, [sp, #16]
 810bff6:	2101      	movs	r1, #1
 810bff8:	4620      	mov	r0, r4
 810bffa:	f000 fae7 	bl	810c5cc <__i2b>
 810bffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c000:	4607      	mov	r7, r0
 810c002:	2b00      	cmp	r3, #0
 810c004:	f000 81d0 	beq.w	810c3a8 <_dtoa_r+0xb20>
 810c008:	461a      	mov	r2, r3
 810c00a:	4601      	mov	r1, r0
 810c00c:	4620      	mov	r0, r4
 810c00e:	f000 fb7d 	bl	810c70c <__pow5mult>
 810c012:	9b06      	ldr	r3, [sp, #24]
 810c014:	2b01      	cmp	r3, #1
 810c016:	4607      	mov	r7, r0
 810c018:	dc40      	bgt.n	810c09c <_dtoa_r+0x814>
 810c01a:	9b00      	ldr	r3, [sp, #0]
 810c01c:	2b00      	cmp	r3, #0
 810c01e:	d139      	bne.n	810c094 <_dtoa_r+0x80c>
 810c020:	9b01      	ldr	r3, [sp, #4]
 810c022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810c026:	2b00      	cmp	r3, #0
 810c028:	d136      	bne.n	810c098 <_dtoa_r+0x810>
 810c02a:	9b01      	ldr	r3, [sp, #4]
 810c02c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810c030:	0d1b      	lsrs	r3, r3, #20
 810c032:	051b      	lsls	r3, r3, #20
 810c034:	b12b      	cbz	r3, 810c042 <_dtoa_r+0x7ba>
 810c036:	9b05      	ldr	r3, [sp, #20]
 810c038:	3301      	adds	r3, #1
 810c03a:	9305      	str	r3, [sp, #20]
 810c03c:	f108 0801 	add.w	r8, r8, #1
 810c040:	2301      	movs	r3, #1
 810c042:	9307      	str	r3, [sp, #28]
 810c044:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c046:	2b00      	cmp	r3, #0
 810c048:	d12a      	bne.n	810c0a0 <_dtoa_r+0x818>
 810c04a:	2001      	movs	r0, #1
 810c04c:	e030      	b.n	810c0b0 <_dtoa_r+0x828>
 810c04e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810c050:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810c054:	e795      	b.n	810bf82 <_dtoa_r+0x6fa>
 810c056:	9b07      	ldr	r3, [sp, #28]
 810c058:	f109 37ff 	add.w	r7, r9, #4294967295
 810c05c:	42bb      	cmp	r3, r7
 810c05e:	bfbf      	itttt	lt
 810c060:	9b07      	ldrlt	r3, [sp, #28]
 810c062:	9707      	strlt	r7, [sp, #28]
 810c064:	1afa      	sublt	r2, r7, r3
 810c066:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 810c068:	bfbb      	ittet	lt
 810c06a:	189b      	addlt	r3, r3, r2
 810c06c:	930e      	strlt	r3, [sp, #56]	; 0x38
 810c06e:	1bdf      	subge	r7, r3, r7
 810c070:	2700      	movlt	r7, #0
 810c072:	f1b9 0f00 	cmp.w	r9, #0
 810c076:	bfb5      	itete	lt
 810c078:	9b05      	ldrlt	r3, [sp, #20]
 810c07a:	9d05      	ldrge	r5, [sp, #20]
 810c07c:	eba3 0509 	sublt.w	r5, r3, r9
 810c080:	464b      	movge	r3, r9
 810c082:	bfb8      	it	lt
 810c084:	2300      	movlt	r3, #0
 810c086:	e77e      	b.n	810bf86 <_dtoa_r+0x6fe>
 810c088:	9f07      	ldr	r7, [sp, #28]
 810c08a:	9d05      	ldr	r5, [sp, #20]
 810c08c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 810c08e:	e783      	b.n	810bf98 <_dtoa_r+0x710>
 810c090:	9a07      	ldr	r2, [sp, #28]
 810c092:	e7ab      	b.n	810bfec <_dtoa_r+0x764>
 810c094:	2300      	movs	r3, #0
 810c096:	e7d4      	b.n	810c042 <_dtoa_r+0x7ba>
 810c098:	9b00      	ldr	r3, [sp, #0]
 810c09a:	e7d2      	b.n	810c042 <_dtoa_r+0x7ba>
 810c09c:	2300      	movs	r3, #0
 810c09e:	9307      	str	r3, [sp, #28]
 810c0a0:	693b      	ldr	r3, [r7, #16]
 810c0a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 810c0a6:	6918      	ldr	r0, [r3, #16]
 810c0a8:	f000 fa42 	bl	810c530 <__hi0bits>
 810c0ac:	f1c0 0020 	rsb	r0, r0, #32
 810c0b0:	4440      	add	r0, r8
 810c0b2:	f010 001f 	ands.w	r0, r0, #31
 810c0b6:	d047      	beq.n	810c148 <_dtoa_r+0x8c0>
 810c0b8:	f1c0 0320 	rsb	r3, r0, #32
 810c0bc:	2b04      	cmp	r3, #4
 810c0be:	dd3b      	ble.n	810c138 <_dtoa_r+0x8b0>
 810c0c0:	9b05      	ldr	r3, [sp, #20]
 810c0c2:	f1c0 001c 	rsb	r0, r0, #28
 810c0c6:	4403      	add	r3, r0
 810c0c8:	9305      	str	r3, [sp, #20]
 810c0ca:	4405      	add	r5, r0
 810c0cc:	4480      	add	r8, r0
 810c0ce:	9b05      	ldr	r3, [sp, #20]
 810c0d0:	2b00      	cmp	r3, #0
 810c0d2:	dd05      	ble.n	810c0e0 <_dtoa_r+0x858>
 810c0d4:	461a      	mov	r2, r3
 810c0d6:	9904      	ldr	r1, [sp, #16]
 810c0d8:	4620      	mov	r0, r4
 810c0da:	f000 fb65 	bl	810c7a8 <__lshift>
 810c0de:	9004      	str	r0, [sp, #16]
 810c0e0:	f1b8 0f00 	cmp.w	r8, #0
 810c0e4:	dd05      	ble.n	810c0f2 <_dtoa_r+0x86a>
 810c0e6:	4639      	mov	r1, r7
 810c0e8:	4642      	mov	r2, r8
 810c0ea:	4620      	mov	r0, r4
 810c0ec:	f000 fb5c 	bl	810c7a8 <__lshift>
 810c0f0:	4607      	mov	r7, r0
 810c0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810c0f4:	b353      	cbz	r3, 810c14c <_dtoa_r+0x8c4>
 810c0f6:	4639      	mov	r1, r7
 810c0f8:	9804      	ldr	r0, [sp, #16]
 810c0fa:	f000 fba9 	bl	810c850 <__mcmp>
 810c0fe:	2800      	cmp	r0, #0
 810c100:	da24      	bge.n	810c14c <_dtoa_r+0x8c4>
 810c102:	2300      	movs	r3, #0
 810c104:	220a      	movs	r2, #10
 810c106:	9904      	ldr	r1, [sp, #16]
 810c108:	4620      	mov	r0, r4
 810c10a:	f000 f9d6 	bl	810c4ba <__multadd>
 810c10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c110:	9004      	str	r0, [sp, #16]
 810c112:	f10a 3aff 	add.w	sl, sl, #4294967295
 810c116:	2b00      	cmp	r3, #0
 810c118:	f000 814d 	beq.w	810c3b6 <_dtoa_r+0xb2e>
 810c11c:	2300      	movs	r3, #0
 810c11e:	4631      	mov	r1, r6
 810c120:	220a      	movs	r2, #10
 810c122:	4620      	mov	r0, r4
 810c124:	f000 f9c9 	bl	810c4ba <__multadd>
 810c128:	9b02      	ldr	r3, [sp, #8]
 810c12a:	2b00      	cmp	r3, #0
 810c12c:	4606      	mov	r6, r0
 810c12e:	dc4f      	bgt.n	810c1d0 <_dtoa_r+0x948>
 810c130:	9b06      	ldr	r3, [sp, #24]
 810c132:	2b02      	cmp	r3, #2
 810c134:	dd4c      	ble.n	810c1d0 <_dtoa_r+0x948>
 810c136:	e011      	b.n	810c15c <_dtoa_r+0x8d4>
 810c138:	d0c9      	beq.n	810c0ce <_dtoa_r+0x846>
 810c13a:	9a05      	ldr	r2, [sp, #20]
 810c13c:	331c      	adds	r3, #28
 810c13e:	441a      	add	r2, r3
 810c140:	9205      	str	r2, [sp, #20]
 810c142:	441d      	add	r5, r3
 810c144:	4498      	add	r8, r3
 810c146:	e7c2      	b.n	810c0ce <_dtoa_r+0x846>
 810c148:	4603      	mov	r3, r0
 810c14a:	e7f6      	b.n	810c13a <_dtoa_r+0x8b2>
 810c14c:	f1b9 0f00 	cmp.w	r9, #0
 810c150:	dc38      	bgt.n	810c1c4 <_dtoa_r+0x93c>
 810c152:	9b06      	ldr	r3, [sp, #24]
 810c154:	2b02      	cmp	r3, #2
 810c156:	dd35      	ble.n	810c1c4 <_dtoa_r+0x93c>
 810c158:	f8cd 9008 	str.w	r9, [sp, #8]
 810c15c:	9b02      	ldr	r3, [sp, #8]
 810c15e:	b963      	cbnz	r3, 810c17a <_dtoa_r+0x8f2>
 810c160:	4639      	mov	r1, r7
 810c162:	2205      	movs	r2, #5
 810c164:	4620      	mov	r0, r4
 810c166:	f000 f9a8 	bl	810c4ba <__multadd>
 810c16a:	4601      	mov	r1, r0
 810c16c:	4607      	mov	r7, r0
 810c16e:	9804      	ldr	r0, [sp, #16]
 810c170:	f000 fb6e 	bl	810c850 <__mcmp>
 810c174:	2800      	cmp	r0, #0
 810c176:	f73f adcc 	bgt.w	810bd12 <_dtoa_r+0x48a>
 810c17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810c17c:	465d      	mov	r5, fp
 810c17e:	ea6f 0a03 	mvn.w	sl, r3
 810c182:	f04f 0900 	mov.w	r9, #0
 810c186:	4639      	mov	r1, r7
 810c188:	4620      	mov	r0, r4
 810c18a:	f000 f97f 	bl	810c48c <_Bfree>
 810c18e:	2e00      	cmp	r6, #0
 810c190:	f43f aeb7 	beq.w	810bf02 <_dtoa_r+0x67a>
 810c194:	f1b9 0f00 	cmp.w	r9, #0
 810c198:	d005      	beq.n	810c1a6 <_dtoa_r+0x91e>
 810c19a:	45b1      	cmp	r9, r6
 810c19c:	d003      	beq.n	810c1a6 <_dtoa_r+0x91e>
 810c19e:	4649      	mov	r1, r9
 810c1a0:	4620      	mov	r0, r4
 810c1a2:	f000 f973 	bl	810c48c <_Bfree>
 810c1a6:	4631      	mov	r1, r6
 810c1a8:	4620      	mov	r0, r4
 810c1aa:	f000 f96f 	bl	810c48c <_Bfree>
 810c1ae:	e6a8      	b.n	810bf02 <_dtoa_r+0x67a>
 810c1b0:	2700      	movs	r7, #0
 810c1b2:	463e      	mov	r6, r7
 810c1b4:	e7e1      	b.n	810c17a <_dtoa_r+0x8f2>
 810c1b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 810c1ba:	463e      	mov	r6, r7
 810c1bc:	e5a9      	b.n	810bd12 <_dtoa_r+0x48a>
 810c1be:	bf00      	nop
 810c1c0:	40240000 	.word	0x40240000
 810c1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c1c6:	f8cd 9008 	str.w	r9, [sp, #8]
 810c1ca:	2b00      	cmp	r3, #0
 810c1cc:	f000 80fa 	beq.w	810c3c4 <_dtoa_r+0xb3c>
 810c1d0:	2d00      	cmp	r5, #0
 810c1d2:	dd05      	ble.n	810c1e0 <_dtoa_r+0x958>
 810c1d4:	4631      	mov	r1, r6
 810c1d6:	462a      	mov	r2, r5
 810c1d8:	4620      	mov	r0, r4
 810c1da:	f000 fae5 	bl	810c7a8 <__lshift>
 810c1de:	4606      	mov	r6, r0
 810c1e0:	9b07      	ldr	r3, [sp, #28]
 810c1e2:	2b00      	cmp	r3, #0
 810c1e4:	d04c      	beq.n	810c280 <_dtoa_r+0x9f8>
 810c1e6:	6871      	ldr	r1, [r6, #4]
 810c1e8:	4620      	mov	r0, r4
 810c1ea:	f000 f91b 	bl	810c424 <_Balloc>
 810c1ee:	6932      	ldr	r2, [r6, #16]
 810c1f0:	3202      	adds	r2, #2
 810c1f2:	4605      	mov	r5, r0
 810c1f4:	0092      	lsls	r2, r2, #2
 810c1f6:	f106 010c 	add.w	r1, r6, #12
 810c1fa:	300c      	adds	r0, #12
 810c1fc:	f7fe ff5a 	bl	810b0b4 <memcpy>
 810c200:	2201      	movs	r2, #1
 810c202:	4629      	mov	r1, r5
 810c204:	4620      	mov	r0, r4
 810c206:	f000 facf 	bl	810c7a8 <__lshift>
 810c20a:	9b00      	ldr	r3, [sp, #0]
 810c20c:	f8cd b014 	str.w	fp, [sp, #20]
 810c210:	f003 0301 	and.w	r3, r3, #1
 810c214:	46b1      	mov	r9, r6
 810c216:	9307      	str	r3, [sp, #28]
 810c218:	4606      	mov	r6, r0
 810c21a:	4639      	mov	r1, r7
 810c21c:	9804      	ldr	r0, [sp, #16]
 810c21e:	f7ff faa6 	bl	810b76e <quorem>
 810c222:	4649      	mov	r1, r9
 810c224:	4605      	mov	r5, r0
 810c226:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810c22a:	9804      	ldr	r0, [sp, #16]
 810c22c:	f000 fb10 	bl	810c850 <__mcmp>
 810c230:	4632      	mov	r2, r6
 810c232:	9000      	str	r0, [sp, #0]
 810c234:	4639      	mov	r1, r7
 810c236:	4620      	mov	r0, r4
 810c238:	f000 fb24 	bl	810c884 <__mdiff>
 810c23c:	68c3      	ldr	r3, [r0, #12]
 810c23e:	4602      	mov	r2, r0
 810c240:	bb03      	cbnz	r3, 810c284 <_dtoa_r+0x9fc>
 810c242:	4601      	mov	r1, r0
 810c244:	9008      	str	r0, [sp, #32]
 810c246:	9804      	ldr	r0, [sp, #16]
 810c248:	f000 fb02 	bl	810c850 <__mcmp>
 810c24c:	9a08      	ldr	r2, [sp, #32]
 810c24e:	4603      	mov	r3, r0
 810c250:	4611      	mov	r1, r2
 810c252:	4620      	mov	r0, r4
 810c254:	9308      	str	r3, [sp, #32]
 810c256:	f000 f919 	bl	810c48c <_Bfree>
 810c25a:	9b08      	ldr	r3, [sp, #32]
 810c25c:	b9a3      	cbnz	r3, 810c288 <_dtoa_r+0xa00>
 810c25e:	9a06      	ldr	r2, [sp, #24]
 810c260:	b992      	cbnz	r2, 810c288 <_dtoa_r+0xa00>
 810c262:	9a07      	ldr	r2, [sp, #28]
 810c264:	b982      	cbnz	r2, 810c288 <_dtoa_r+0xa00>
 810c266:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810c26a:	d029      	beq.n	810c2c0 <_dtoa_r+0xa38>
 810c26c:	9b00      	ldr	r3, [sp, #0]
 810c26e:	2b00      	cmp	r3, #0
 810c270:	dd01      	ble.n	810c276 <_dtoa_r+0x9ee>
 810c272:	f105 0831 	add.w	r8, r5, #49	; 0x31
 810c276:	9b05      	ldr	r3, [sp, #20]
 810c278:	1c5d      	adds	r5, r3, #1
 810c27a:	f883 8000 	strb.w	r8, [r3]
 810c27e:	e782      	b.n	810c186 <_dtoa_r+0x8fe>
 810c280:	4630      	mov	r0, r6
 810c282:	e7c2      	b.n	810c20a <_dtoa_r+0x982>
 810c284:	2301      	movs	r3, #1
 810c286:	e7e3      	b.n	810c250 <_dtoa_r+0x9c8>
 810c288:	9a00      	ldr	r2, [sp, #0]
 810c28a:	2a00      	cmp	r2, #0
 810c28c:	db04      	blt.n	810c298 <_dtoa_r+0xa10>
 810c28e:	d125      	bne.n	810c2dc <_dtoa_r+0xa54>
 810c290:	9a06      	ldr	r2, [sp, #24]
 810c292:	bb1a      	cbnz	r2, 810c2dc <_dtoa_r+0xa54>
 810c294:	9a07      	ldr	r2, [sp, #28]
 810c296:	bb0a      	cbnz	r2, 810c2dc <_dtoa_r+0xa54>
 810c298:	2b00      	cmp	r3, #0
 810c29a:	ddec      	ble.n	810c276 <_dtoa_r+0x9ee>
 810c29c:	2201      	movs	r2, #1
 810c29e:	9904      	ldr	r1, [sp, #16]
 810c2a0:	4620      	mov	r0, r4
 810c2a2:	f000 fa81 	bl	810c7a8 <__lshift>
 810c2a6:	4639      	mov	r1, r7
 810c2a8:	9004      	str	r0, [sp, #16]
 810c2aa:	f000 fad1 	bl	810c850 <__mcmp>
 810c2ae:	2800      	cmp	r0, #0
 810c2b0:	dc03      	bgt.n	810c2ba <_dtoa_r+0xa32>
 810c2b2:	d1e0      	bne.n	810c276 <_dtoa_r+0x9ee>
 810c2b4:	f018 0f01 	tst.w	r8, #1
 810c2b8:	d0dd      	beq.n	810c276 <_dtoa_r+0x9ee>
 810c2ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810c2be:	d1d8      	bne.n	810c272 <_dtoa_r+0x9ea>
 810c2c0:	9b05      	ldr	r3, [sp, #20]
 810c2c2:	9a05      	ldr	r2, [sp, #20]
 810c2c4:	1c5d      	adds	r5, r3, #1
 810c2c6:	2339      	movs	r3, #57	; 0x39
 810c2c8:	7013      	strb	r3, [r2, #0]
 810c2ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810c2ce:	2b39      	cmp	r3, #57	; 0x39
 810c2d0:	f105 32ff 	add.w	r2, r5, #4294967295
 810c2d4:	d04f      	beq.n	810c376 <_dtoa_r+0xaee>
 810c2d6:	3301      	adds	r3, #1
 810c2d8:	7013      	strb	r3, [r2, #0]
 810c2da:	e754      	b.n	810c186 <_dtoa_r+0x8fe>
 810c2dc:	9a05      	ldr	r2, [sp, #20]
 810c2de:	2b00      	cmp	r3, #0
 810c2e0:	f102 0501 	add.w	r5, r2, #1
 810c2e4:	dd06      	ble.n	810c2f4 <_dtoa_r+0xa6c>
 810c2e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 810c2ea:	d0e9      	beq.n	810c2c0 <_dtoa_r+0xa38>
 810c2ec:	f108 0801 	add.w	r8, r8, #1
 810c2f0:	9b05      	ldr	r3, [sp, #20]
 810c2f2:	e7c2      	b.n	810c27a <_dtoa_r+0x9f2>
 810c2f4:	9a02      	ldr	r2, [sp, #8]
 810c2f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 810c2fa:	eba5 030b 	sub.w	r3, r5, fp
 810c2fe:	4293      	cmp	r3, r2
 810c300:	d021      	beq.n	810c346 <_dtoa_r+0xabe>
 810c302:	2300      	movs	r3, #0
 810c304:	220a      	movs	r2, #10
 810c306:	9904      	ldr	r1, [sp, #16]
 810c308:	4620      	mov	r0, r4
 810c30a:	f000 f8d6 	bl	810c4ba <__multadd>
 810c30e:	45b1      	cmp	r9, r6
 810c310:	9004      	str	r0, [sp, #16]
 810c312:	f04f 0300 	mov.w	r3, #0
 810c316:	f04f 020a 	mov.w	r2, #10
 810c31a:	4649      	mov	r1, r9
 810c31c:	4620      	mov	r0, r4
 810c31e:	d105      	bne.n	810c32c <_dtoa_r+0xaa4>
 810c320:	f000 f8cb 	bl	810c4ba <__multadd>
 810c324:	4681      	mov	r9, r0
 810c326:	4606      	mov	r6, r0
 810c328:	9505      	str	r5, [sp, #20]
 810c32a:	e776      	b.n	810c21a <_dtoa_r+0x992>
 810c32c:	f000 f8c5 	bl	810c4ba <__multadd>
 810c330:	4631      	mov	r1, r6
 810c332:	4681      	mov	r9, r0
 810c334:	2300      	movs	r3, #0
 810c336:	220a      	movs	r2, #10
 810c338:	4620      	mov	r0, r4
 810c33a:	f000 f8be 	bl	810c4ba <__multadd>
 810c33e:	4606      	mov	r6, r0
 810c340:	e7f2      	b.n	810c328 <_dtoa_r+0xaa0>
 810c342:	f04f 0900 	mov.w	r9, #0
 810c346:	2201      	movs	r2, #1
 810c348:	9904      	ldr	r1, [sp, #16]
 810c34a:	4620      	mov	r0, r4
 810c34c:	f000 fa2c 	bl	810c7a8 <__lshift>
 810c350:	4639      	mov	r1, r7
 810c352:	9004      	str	r0, [sp, #16]
 810c354:	f000 fa7c 	bl	810c850 <__mcmp>
 810c358:	2800      	cmp	r0, #0
 810c35a:	dcb6      	bgt.n	810c2ca <_dtoa_r+0xa42>
 810c35c:	d102      	bne.n	810c364 <_dtoa_r+0xadc>
 810c35e:	f018 0f01 	tst.w	r8, #1
 810c362:	d1b2      	bne.n	810c2ca <_dtoa_r+0xa42>
 810c364:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810c368:	2b30      	cmp	r3, #48	; 0x30
 810c36a:	f105 32ff 	add.w	r2, r5, #4294967295
 810c36e:	f47f af0a 	bne.w	810c186 <_dtoa_r+0x8fe>
 810c372:	4615      	mov	r5, r2
 810c374:	e7f6      	b.n	810c364 <_dtoa_r+0xadc>
 810c376:	4593      	cmp	fp, r2
 810c378:	d105      	bne.n	810c386 <_dtoa_r+0xafe>
 810c37a:	2331      	movs	r3, #49	; 0x31
 810c37c:	f10a 0a01 	add.w	sl, sl, #1
 810c380:	f88b 3000 	strb.w	r3, [fp]
 810c384:	e6ff      	b.n	810c186 <_dtoa_r+0x8fe>
 810c386:	4615      	mov	r5, r2
 810c388:	e79f      	b.n	810c2ca <_dtoa_r+0xa42>
 810c38a:	f8df b064 	ldr.w	fp, [pc, #100]	; 810c3f0 <_dtoa_r+0xb68>
 810c38e:	e007      	b.n	810c3a0 <_dtoa_r+0xb18>
 810c390:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810c392:	f8df b060 	ldr.w	fp, [pc, #96]	; 810c3f4 <_dtoa_r+0xb6c>
 810c396:	b11b      	cbz	r3, 810c3a0 <_dtoa_r+0xb18>
 810c398:	f10b 0308 	add.w	r3, fp, #8
 810c39c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810c39e:	6013      	str	r3, [r2, #0]
 810c3a0:	4658      	mov	r0, fp
 810c3a2:	b017      	add	sp, #92	; 0x5c
 810c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c3a8:	9b06      	ldr	r3, [sp, #24]
 810c3aa:	2b01      	cmp	r3, #1
 810c3ac:	f77f ae35 	ble.w	810c01a <_dtoa_r+0x792>
 810c3b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810c3b2:	9307      	str	r3, [sp, #28]
 810c3b4:	e649      	b.n	810c04a <_dtoa_r+0x7c2>
 810c3b6:	9b02      	ldr	r3, [sp, #8]
 810c3b8:	2b00      	cmp	r3, #0
 810c3ba:	dc03      	bgt.n	810c3c4 <_dtoa_r+0xb3c>
 810c3bc:	9b06      	ldr	r3, [sp, #24]
 810c3be:	2b02      	cmp	r3, #2
 810c3c0:	f73f aecc 	bgt.w	810c15c <_dtoa_r+0x8d4>
 810c3c4:	465d      	mov	r5, fp
 810c3c6:	4639      	mov	r1, r7
 810c3c8:	9804      	ldr	r0, [sp, #16]
 810c3ca:	f7ff f9d0 	bl	810b76e <quorem>
 810c3ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 810c3d2:	f805 8b01 	strb.w	r8, [r5], #1
 810c3d6:	9a02      	ldr	r2, [sp, #8]
 810c3d8:	eba5 030b 	sub.w	r3, r5, fp
 810c3dc:	429a      	cmp	r2, r3
 810c3de:	ddb0      	ble.n	810c342 <_dtoa_r+0xaba>
 810c3e0:	2300      	movs	r3, #0
 810c3e2:	220a      	movs	r2, #10
 810c3e4:	9904      	ldr	r1, [sp, #16]
 810c3e6:	4620      	mov	r0, r4
 810c3e8:	f000 f867 	bl	810c4ba <__multadd>
 810c3ec:	9004      	str	r0, [sp, #16]
 810c3ee:	e7ea      	b.n	810c3c6 <_dtoa_r+0xb3e>
 810c3f0:	0810cc44 	.word	0x0810cc44
 810c3f4:	0810cc46 	.word	0x0810cc46

0810c3f8 <_localeconv_r>:
 810c3f8:	4b04      	ldr	r3, [pc, #16]	; (810c40c <_localeconv_r+0x14>)
 810c3fa:	681b      	ldr	r3, [r3, #0]
 810c3fc:	6a18      	ldr	r0, [r3, #32]
 810c3fe:	4b04      	ldr	r3, [pc, #16]	; (810c410 <_localeconv_r+0x18>)
 810c400:	2800      	cmp	r0, #0
 810c402:	bf08      	it	eq
 810c404:	4618      	moveq	r0, r3
 810c406:	30f0      	adds	r0, #240	; 0xf0
 810c408:	4770      	bx	lr
 810c40a:	bf00      	nop
 810c40c:	10000010 	.word	0x10000010
 810c410:	10000074 	.word	0x10000074

0810c414 <malloc>:
 810c414:	4b02      	ldr	r3, [pc, #8]	; (810c420 <malloc+0xc>)
 810c416:	4601      	mov	r1, r0
 810c418:	6818      	ldr	r0, [r3, #0]
 810c41a:	f000 baed 	b.w	810c9f8 <_malloc_r>
 810c41e:	bf00      	nop
 810c420:	10000010 	.word	0x10000010

0810c424 <_Balloc>:
 810c424:	b570      	push	{r4, r5, r6, lr}
 810c426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 810c428:	4604      	mov	r4, r0
 810c42a:	460e      	mov	r6, r1
 810c42c:	b93d      	cbnz	r5, 810c43e <_Balloc+0x1a>
 810c42e:	2010      	movs	r0, #16
 810c430:	f7ff fff0 	bl	810c414 <malloc>
 810c434:	6260      	str	r0, [r4, #36]	; 0x24
 810c436:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810c43a:	6005      	str	r5, [r0, #0]
 810c43c:	60c5      	str	r5, [r0, #12]
 810c43e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810c440:	68eb      	ldr	r3, [r5, #12]
 810c442:	b183      	cbz	r3, 810c466 <_Balloc+0x42>
 810c444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c446:	68db      	ldr	r3, [r3, #12]
 810c448:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 810c44c:	b9b8      	cbnz	r0, 810c47e <_Balloc+0x5a>
 810c44e:	2101      	movs	r1, #1
 810c450:	fa01 f506 	lsl.w	r5, r1, r6
 810c454:	1d6a      	adds	r2, r5, #5
 810c456:	0092      	lsls	r2, r2, #2
 810c458:	4620      	mov	r0, r4
 810c45a:	f000 fabf 	bl	810c9dc <_calloc_r>
 810c45e:	b160      	cbz	r0, 810c47a <_Balloc+0x56>
 810c460:	e9c0 6501 	strd	r6, r5, [r0, #4]
 810c464:	e00e      	b.n	810c484 <_Balloc+0x60>
 810c466:	2221      	movs	r2, #33	; 0x21
 810c468:	2104      	movs	r1, #4
 810c46a:	4620      	mov	r0, r4
 810c46c:	f000 fab6 	bl	810c9dc <_calloc_r>
 810c470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810c472:	60e8      	str	r0, [r5, #12]
 810c474:	68db      	ldr	r3, [r3, #12]
 810c476:	2b00      	cmp	r3, #0
 810c478:	d1e4      	bne.n	810c444 <_Balloc+0x20>
 810c47a:	2000      	movs	r0, #0
 810c47c:	bd70      	pop	{r4, r5, r6, pc}
 810c47e:	6802      	ldr	r2, [r0, #0]
 810c480:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 810c484:	2300      	movs	r3, #0
 810c486:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810c48a:	e7f7      	b.n	810c47c <_Balloc+0x58>

0810c48c <_Bfree>:
 810c48c:	b570      	push	{r4, r5, r6, lr}
 810c48e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 810c490:	4606      	mov	r6, r0
 810c492:	460d      	mov	r5, r1
 810c494:	b93c      	cbnz	r4, 810c4a6 <_Bfree+0x1a>
 810c496:	2010      	movs	r0, #16
 810c498:	f7ff ffbc 	bl	810c414 <malloc>
 810c49c:	6270      	str	r0, [r6, #36]	; 0x24
 810c49e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c4a2:	6004      	str	r4, [r0, #0]
 810c4a4:	60c4      	str	r4, [r0, #12]
 810c4a6:	b13d      	cbz	r5, 810c4b8 <_Bfree+0x2c>
 810c4a8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 810c4aa:	686a      	ldr	r2, [r5, #4]
 810c4ac:	68db      	ldr	r3, [r3, #12]
 810c4ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810c4b2:	6029      	str	r1, [r5, #0]
 810c4b4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 810c4b8:	bd70      	pop	{r4, r5, r6, pc}

0810c4ba <__multadd>:
 810c4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c4be:	690d      	ldr	r5, [r1, #16]
 810c4c0:	461f      	mov	r7, r3
 810c4c2:	4606      	mov	r6, r0
 810c4c4:	460c      	mov	r4, r1
 810c4c6:	f101 0c14 	add.w	ip, r1, #20
 810c4ca:	2300      	movs	r3, #0
 810c4cc:	f8dc 0000 	ldr.w	r0, [ip]
 810c4d0:	b281      	uxth	r1, r0
 810c4d2:	fb02 7101 	mla	r1, r2, r1, r7
 810c4d6:	0c0f      	lsrs	r7, r1, #16
 810c4d8:	0c00      	lsrs	r0, r0, #16
 810c4da:	fb02 7000 	mla	r0, r2, r0, r7
 810c4de:	b289      	uxth	r1, r1
 810c4e0:	3301      	adds	r3, #1
 810c4e2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 810c4e6:	429d      	cmp	r5, r3
 810c4e8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 810c4ec:	f84c 1b04 	str.w	r1, [ip], #4
 810c4f0:	dcec      	bgt.n	810c4cc <__multadd+0x12>
 810c4f2:	b1d7      	cbz	r7, 810c52a <__multadd+0x70>
 810c4f4:	68a3      	ldr	r3, [r4, #8]
 810c4f6:	42ab      	cmp	r3, r5
 810c4f8:	dc12      	bgt.n	810c520 <__multadd+0x66>
 810c4fa:	6861      	ldr	r1, [r4, #4]
 810c4fc:	4630      	mov	r0, r6
 810c4fe:	3101      	adds	r1, #1
 810c500:	f7ff ff90 	bl	810c424 <_Balloc>
 810c504:	6922      	ldr	r2, [r4, #16]
 810c506:	3202      	adds	r2, #2
 810c508:	f104 010c 	add.w	r1, r4, #12
 810c50c:	4680      	mov	r8, r0
 810c50e:	0092      	lsls	r2, r2, #2
 810c510:	300c      	adds	r0, #12
 810c512:	f7fe fdcf 	bl	810b0b4 <memcpy>
 810c516:	4621      	mov	r1, r4
 810c518:	4630      	mov	r0, r6
 810c51a:	f7ff ffb7 	bl	810c48c <_Bfree>
 810c51e:	4644      	mov	r4, r8
 810c520:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810c524:	3501      	adds	r5, #1
 810c526:	615f      	str	r7, [r3, #20]
 810c528:	6125      	str	r5, [r4, #16]
 810c52a:	4620      	mov	r0, r4
 810c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810c530 <__hi0bits>:
 810c530:	0c02      	lsrs	r2, r0, #16
 810c532:	0412      	lsls	r2, r2, #16
 810c534:	4603      	mov	r3, r0
 810c536:	b9b2      	cbnz	r2, 810c566 <__hi0bits+0x36>
 810c538:	0403      	lsls	r3, r0, #16
 810c53a:	2010      	movs	r0, #16
 810c53c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 810c540:	bf04      	itt	eq
 810c542:	021b      	lsleq	r3, r3, #8
 810c544:	3008      	addeq	r0, #8
 810c546:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 810c54a:	bf04      	itt	eq
 810c54c:	011b      	lsleq	r3, r3, #4
 810c54e:	3004      	addeq	r0, #4
 810c550:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 810c554:	bf04      	itt	eq
 810c556:	009b      	lsleq	r3, r3, #2
 810c558:	3002      	addeq	r0, #2
 810c55a:	2b00      	cmp	r3, #0
 810c55c:	db06      	blt.n	810c56c <__hi0bits+0x3c>
 810c55e:	005b      	lsls	r3, r3, #1
 810c560:	d503      	bpl.n	810c56a <__hi0bits+0x3a>
 810c562:	3001      	adds	r0, #1
 810c564:	4770      	bx	lr
 810c566:	2000      	movs	r0, #0
 810c568:	e7e8      	b.n	810c53c <__hi0bits+0xc>
 810c56a:	2020      	movs	r0, #32
 810c56c:	4770      	bx	lr

0810c56e <__lo0bits>:
 810c56e:	6803      	ldr	r3, [r0, #0]
 810c570:	f013 0207 	ands.w	r2, r3, #7
 810c574:	4601      	mov	r1, r0
 810c576:	d00b      	beq.n	810c590 <__lo0bits+0x22>
 810c578:	07da      	lsls	r2, r3, #31
 810c57a:	d423      	bmi.n	810c5c4 <__lo0bits+0x56>
 810c57c:	0798      	lsls	r0, r3, #30
 810c57e:	bf49      	itett	mi
 810c580:	085b      	lsrmi	r3, r3, #1
 810c582:	089b      	lsrpl	r3, r3, #2
 810c584:	2001      	movmi	r0, #1
 810c586:	600b      	strmi	r3, [r1, #0]
 810c588:	bf5c      	itt	pl
 810c58a:	600b      	strpl	r3, [r1, #0]
 810c58c:	2002      	movpl	r0, #2
 810c58e:	4770      	bx	lr
 810c590:	b298      	uxth	r0, r3
 810c592:	b9a8      	cbnz	r0, 810c5c0 <__lo0bits+0x52>
 810c594:	0c1b      	lsrs	r3, r3, #16
 810c596:	2010      	movs	r0, #16
 810c598:	f013 0fff 	tst.w	r3, #255	; 0xff
 810c59c:	bf04      	itt	eq
 810c59e:	0a1b      	lsreq	r3, r3, #8
 810c5a0:	3008      	addeq	r0, #8
 810c5a2:	071a      	lsls	r2, r3, #28
 810c5a4:	bf04      	itt	eq
 810c5a6:	091b      	lsreq	r3, r3, #4
 810c5a8:	3004      	addeq	r0, #4
 810c5aa:	079a      	lsls	r2, r3, #30
 810c5ac:	bf04      	itt	eq
 810c5ae:	089b      	lsreq	r3, r3, #2
 810c5b0:	3002      	addeq	r0, #2
 810c5b2:	07da      	lsls	r2, r3, #31
 810c5b4:	d402      	bmi.n	810c5bc <__lo0bits+0x4e>
 810c5b6:	085b      	lsrs	r3, r3, #1
 810c5b8:	d006      	beq.n	810c5c8 <__lo0bits+0x5a>
 810c5ba:	3001      	adds	r0, #1
 810c5bc:	600b      	str	r3, [r1, #0]
 810c5be:	4770      	bx	lr
 810c5c0:	4610      	mov	r0, r2
 810c5c2:	e7e9      	b.n	810c598 <__lo0bits+0x2a>
 810c5c4:	2000      	movs	r0, #0
 810c5c6:	4770      	bx	lr
 810c5c8:	2020      	movs	r0, #32
 810c5ca:	4770      	bx	lr

0810c5cc <__i2b>:
 810c5cc:	b510      	push	{r4, lr}
 810c5ce:	460c      	mov	r4, r1
 810c5d0:	2101      	movs	r1, #1
 810c5d2:	f7ff ff27 	bl	810c424 <_Balloc>
 810c5d6:	2201      	movs	r2, #1
 810c5d8:	6144      	str	r4, [r0, #20]
 810c5da:	6102      	str	r2, [r0, #16]
 810c5dc:	bd10      	pop	{r4, pc}

0810c5de <__multiply>:
 810c5de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c5e2:	4614      	mov	r4, r2
 810c5e4:	690a      	ldr	r2, [r1, #16]
 810c5e6:	6923      	ldr	r3, [r4, #16]
 810c5e8:	429a      	cmp	r2, r3
 810c5ea:	bfb8      	it	lt
 810c5ec:	460b      	movlt	r3, r1
 810c5ee:	4688      	mov	r8, r1
 810c5f0:	bfbc      	itt	lt
 810c5f2:	46a0      	movlt	r8, r4
 810c5f4:	461c      	movlt	r4, r3
 810c5f6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c5fa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810c5fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810c602:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c606:	eb07 0609 	add.w	r6, r7, r9
 810c60a:	42b3      	cmp	r3, r6
 810c60c:	bfb8      	it	lt
 810c60e:	3101      	addlt	r1, #1
 810c610:	f7ff ff08 	bl	810c424 <_Balloc>
 810c614:	f100 0514 	add.w	r5, r0, #20
 810c618:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 810c61c:	462b      	mov	r3, r5
 810c61e:	2200      	movs	r2, #0
 810c620:	4573      	cmp	r3, lr
 810c622:	d316      	bcc.n	810c652 <__multiply+0x74>
 810c624:	f104 0214 	add.w	r2, r4, #20
 810c628:	f108 0114 	add.w	r1, r8, #20
 810c62c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 810c630:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 810c634:	9300      	str	r3, [sp, #0]
 810c636:	9b00      	ldr	r3, [sp, #0]
 810c638:	9201      	str	r2, [sp, #4]
 810c63a:	4293      	cmp	r3, r2
 810c63c:	d80c      	bhi.n	810c658 <__multiply+0x7a>
 810c63e:	2e00      	cmp	r6, #0
 810c640:	dd03      	ble.n	810c64a <__multiply+0x6c>
 810c642:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 810c646:	2b00      	cmp	r3, #0
 810c648:	d05d      	beq.n	810c706 <__multiply+0x128>
 810c64a:	6106      	str	r6, [r0, #16]
 810c64c:	b003      	add	sp, #12
 810c64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c652:	f843 2b04 	str.w	r2, [r3], #4
 810c656:	e7e3      	b.n	810c620 <__multiply+0x42>
 810c658:	f8b2 b000 	ldrh.w	fp, [r2]
 810c65c:	f1bb 0f00 	cmp.w	fp, #0
 810c660:	d023      	beq.n	810c6aa <__multiply+0xcc>
 810c662:	4689      	mov	r9, r1
 810c664:	46ac      	mov	ip, r5
 810c666:	f04f 0800 	mov.w	r8, #0
 810c66a:	f859 4b04 	ldr.w	r4, [r9], #4
 810c66e:	f8dc a000 	ldr.w	sl, [ip]
 810c672:	b2a3      	uxth	r3, r4
 810c674:	fa1f fa8a 	uxth.w	sl, sl
 810c678:	fb0b a303 	mla	r3, fp, r3, sl
 810c67c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810c680:	f8dc 4000 	ldr.w	r4, [ip]
 810c684:	4443      	add	r3, r8
 810c686:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810c68a:	fb0b 840a 	mla	r4, fp, sl, r8
 810c68e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 810c692:	46e2      	mov	sl, ip
 810c694:	b29b      	uxth	r3, r3
 810c696:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810c69a:	454f      	cmp	r7, r9
 810c69c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 810c6a0:	f84a 3b04 	str.w	r3, [sl], #4
 810c6a4:	d82b      	bhi.n	810c6fe <__multiply+0x120>
 810c6a6:	f8cc 8004 	str.w	r8, [ip, #4]
 810c6aa:	9b01      	ldr	r3, [sp, #4]
 810c6ac:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 810c6b0:	3204      	adds	r2, #4
 810c6b2:	f1ba 0f00 	cmp.w	sl, #0
 810c6b6:	d020      	beq.n	810c6fa <__multiply+0x11c>
 810c6b8:	682b      	ldr	r3, [r5, #0]
 810c6ba:	4689      	mov	r9, r1
 810c6bc:	46a8      	mov	r8, r5
 810c6be:	f04f 0b00 	mov.w	fp, #0
 810c6c2:	f8b9 c000 	ldrh.w	ip, [r9]
 810c6c6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 810c6ca:	fb0a 440c 	mla	r4, sl, ip, r4
 810c6ce:	445c      	add	r4, fp
 810c6d0:	46c4      	mov	ip, r8
 810c6d2:	b29b      	uxth	r3, r3
 810c6d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810c6d8:	f84c 3b04 	str.w	r3, [ip], #4
 810c6dc:	f859 3b04 	ldr.w	r3, [r9], #4
 810c6e0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 810c6e4:	0c1b      	lsrs	r3, r3, #16
 810c6e6:	fb0a b303 	mla	r3, sl, r3, fp
 810c6ea:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 810c6ee:	454f      	cmp	r7, r9
 810c6f0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 810c6f4:	d805      	bhi.n	810c702 <__multiply+0x124>
 810c6f6:	f8c8 3004 	str.w	r3, [r8, #4]
 810c6fa:	3504      	adds	r5, #4
 810c6fc:	e79b      	b.n	810c636 <__multiply+0x58>
 810c6fe:	46d4      	mov	ip, sl
 810c700:	e7b3      	b.n	810c66a <__multiply+0x8c>
 810c702:	46e0      	mov	r8, ip
 810c704:	e7dd      	b.n	810c6c2 <__multiply+0xe4>
 810c706:	3e01      	subs	r6, #1
 810c708:	e799      	b.n	810c63e <__multiply+0x60>
	...

0810c70c <__pow5mult>:
 810c70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c710:	4615      	mov	r5, r2
 810c712:	f012 0203 	ands.w	r2, r2, #3
 810c716:	4606      	mov	r6, r0
 810c718:	460f      	mov	r7, r1
 810c71a:	d007      	beq.n	810c72c <__pow5mult+0x20>
 810c71c:	3a01      	subs	r2, #1
 810c71e:	4c21      	ldr	r4, [pc, #132]	; (810c7a4 <__pow5mult+0x98>)
 810c720:	2300      	movs	r3, #0
 810c722:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c726:	f7ff fec8 	bl	810c4ba <__multadd>
 810c72a:	4607      	mov	r7, r0
 810c72c:	10ad      	asrs	r5, r5, #2
 810c72e:	d035      	beq.n	810c79c <__pow5mult+0x90>
 810c730:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810c732:	b93c      	cbnz	r4, 810c744 <__pow5mult+0x38>
 810c734:	2010      	movs	r0, #16
 810c736:	f7ff fe6d 	bl	810c414 <malloc>
 810c73a:	6270      	str	r0, [r6, #36]	; 0x24
 810c73c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c740:	6004      	str	r4, [r0, #0]
 810c742:	60c4      	str	r4, [r0, #12]
 810c744:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810c748:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c74c:	b94c      	cbnz	r4, 810c762 <__pow5mult+0x56>
 810c74e:	f240 2171 	movw	r1, #625	; 0x271
 810c752:	4630      	mov	r0, r6
 810c754:	f7ff ff3a 	bl	810c5cc <__i2b>
 810c758:	2300      	movs	r3, #0
 810c75a:	f8c8 0008 	str.w	r0, [r8, #8]
 810c75e:	4604      	mov	r4, r0
 810c760:	6003      	str	r3, [r0, #0]
 810c762:	f04f 0800 	mov.w	r8, #0
 810c766:	07eb      	lsls	r3, r5, #31
 810c768:	d50a      	bpl.n	810c780 <__pow5mult+0x74>
 810c76a:	4639      	mov	r1, r7
 810c76c:	4622      	mov	r2, r4
 810c76e:	4630      	mov	r0, r6
 810c770:	f7ff ff35 	bl	810c5de <__multiply>
 810c774:	4639      	mov	r1, r7
 810c776:	4681      	mov	r9, r0
 810c778:	4630      	mov	r0, r6
 810c77a:	f7ff fe87 	bl	810c48c <_Bfree>
 810c77e:	464f      	mov	r7, r9
 810c780:	106d      	asrs	r5, r5, #1
 810c782:	d00b      	beq.n	810c79c <__pow5mult+0x90>
 810c784:	6820      	ldr	r0, [r4, #0]
 810c786:	b938      	cbnz	r0, 810c798 <__pow5mult+0x8c>
 810c788:	4622      	mov	r2, r4
 810c78a:	4621      	mov	r1, r4
 810c78c:	4630      	mov	r0, r6
 810c78e:	f7ff ff26 	bl	810c5de <__multiply>
 810c792:	6020      	str	r0, [r4, #0]
 810c794:	f8c0 8000 	str.w	r8, [r0]
 810c798:	4604      	mov	r4, r0
 810c79a:	e7e4      	b.n	810c766 <__pow5mult+0x5a>
 810c79c:	4638      	mov	r0, r7
 810c79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c7a2:	bf00      	nop
 810c7a4:	0810cd48 	.word	0x0810cd48

0810c7a8 <__lshift>:
 810c7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c7ac:	460c      	mov	r4, r1
 810c7ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c7b2:	6923      	ldr	r3, [r4, #16]
 810c7b4:	6849      	ldr	r1, [r1, #4]
 810c7b6:	eb0a 0903 	add.w	r9, sl, r3
 810c7ba:	68a3      	ldr	r3, [r4, #8]
 810c7bc:	4607      	mov	r7, r0
 810c7be:	4616      	mov	r6, r2
 810c7c0:	f109 0501 	add.w	r5, r9, #1
 810c7c4:	42ab      	cmp	r3, r5
 810c7c6:	db32      	blt.n	810c82e <__lshift+0x86>
 810c7c8:	4638      	mov	r0, r7
 810c7ca:	f7ff fe2b 	bl	810c424 <_Balloc>
 810c7ce:	2300      	movs	r3, #0
 810c7d0:	4680      	mov	r8, r0
 810c7d2:	f100 0114 	add.w	r1, r0, #20
 810c7d6:	461a      	mov	r2, r3
 810c7d8:	4553      	cmp	r3, sl
 810c7da:	db2b      	blt.n	810c834 <__lshift+0x8c>
 810c7dc:	6920      	ldr	r0, [r4, #16]
 810c7de:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c7e2:	f104 0314 	add.w	r3, r4, #20
 810c7e6:	f016 021f 	ands.w	r2, r6, #31
 810c7ea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c7ee:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810c7f2:	d025      	beq.n	810c840 <__lshift+0x98>
 810c7f4:	f1c2 0e20 	rsb	lr, r2, #32
 810c7f8:	2000      	movs	r0, #0
 810c7fa:	681e      	ldr	r6, [r3, #0]
 810c7fc:	468a      	mov	sl, r1
 810c7fe:	4096      	lsls	r6, r2
 810c800:	4330      	orrs	r0, r6
 810c802:	f84a 0b04 	str.w	r0, [sl], #4
 810c806:	f853 0b04 	ldr.w	r0, [r3], #4
 810c80a:	459c      	cmp	ip, r3
 810c80c:	fa20 f00e 	lsr.w	r0, r0, lr
 810c810:	d814      	bhi.n	810c83c <__lshift+0x94>
 810c812:	6048      	str	r0, [r1, #4]
 810c814:	b108      	cbz	r0, 810c81a <__lshift+0x72>
 810c816:	f109 0502 	add.w	r5, r9, #2
 810c81a:	3d01      	subs	r5, #1
 810c81c:	4638      	mov	r0, r7
 810c81e:	f8c8 5010 	str.w	r5, [r8, #16]
 810c822:	4621      	mov	r1, r4
 810c824:	f7ff fe32 	bl	810c48c <_Bfree>
 810c828:	4640      	mov	r0, r8
 810c82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c82e:	3101      	adds	r1, #1
 810c830:	005b      	lsls	r3, r3, #1
 810c832:	e7c7      	b.n	810c7c4 <__lshift+0x1c>
 810c834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 810c838:	3301      	adds	r3, #1
 810c83a:	e7cd      	b.n	810c7d8 <__lshift+0x30>
 810c83c:	4651      	mov	r1, sl
 810c83e:	e7dc      	b.n	810c7fa <__lshift+0x52>
 810c840:	3904      	subs	r1, #4
 810c842:	f853 2b04 	ldr.w	r2, [r3], #4
 810c846:	f841 2f04 	str.w	r2, [r1, #4]!
 810c84a:	459c      	cmp	ip, r3
 810c84c:	d8f9      	bhi.n	810c842 <__lshift+0x9a>
 810c84e:	e7e4      	b.n	810c81a <__lshift+0x72>

0810c850 <__mcmp>:
 810c850:	6903      	ldr	r3, [r0, #16]
 810c852:	690a      	ldr	r2, [r1, #16]
 810c854:	1a9b      	subs	r3, r3, r2
 810c856:	b530      	push	{r4, r5, lr}
 810c858:	d10c      	bne.n	810c874 <__mcmp+0x24>
 810c85a:	0092      	lsls	r2, r2, #2
 810c85c:	3014      	adds	r0, #20
 810c85e:	3114      	adds	r1, #20
 810c860:	1884      	adds	r4, r0, r2
 810c862:	4411      	add	r1, r2
 810c864:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 810c868:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 810c86c:	4295      	cmp	r5, r2
 810c86e:	d003      	beq.n	810c878 <__mcmp+0x28>
 810c870:	d305      	bcc.n	810c87e <__mcmp+0x2e>
 810c872:	2301      	movs	r3, #1
 810c874:	4618      	mov	r0, r3
 810c876:	bd30      	pop	{r4, r5, pc}
 810c878:	42a0      	cmp	r0, r4
 810c87a:	d3f3      	bcc.n	810c864 <__mcmp+0x14>
 810c87c:	e7fa      	b.n	810c874 <__mcmp+0x24>
 810c87e:	f04f 33ff 	mov.w	r3, #4294967295
 810c882:	e7f7      	b.n	810c874 <__mcmp+0x24>

0810c884 <__mdiff>:
 810c884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c888:	460d      	mov	r5, r1
 810c88a:	4607      	mov	r7, r0
 810c88c:	4611      	mov	r1, r2
 810c88e:	4628      	mov	r0, r5
 810c890:	4614      	mov	r4, r2
 810c892:	f7ff ffdd 	bl	810c850 <__mcmp>
 810c896:	1e06      	subs	r6, r0, #0
 810c898:	d108      	bne.n	810c8ac <__mdiff+0x28>
 810c89a:	4631      	mov	r1, r6
 810c89c:	4638      	mov	r0, r7
 810c89e:	f7ff fdc1 	bl	810c424 <_Balloc>
 810c8a2:	2301      	movs	r3, #1
 810c8a4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 810c8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c8ac:	bfa4      	itt	ge
 810c8ae:	4623      	movge	r3, r4
 810c8b0:	462c      	movge	r4, r5
 810c8b2:	4638      	mov	r0, r7
 810c8b4:	6861      	ldr	r1, [r4, #4]
 810c8b6:	bfa6      	itte	ge
 810c8b8:	461d      	movge	r5, r3
 810c8ba:	2600      	movge	r6, #0
 810c8bc:	2601      	movlt	r6, #1
 810c8be:	f7ff fdb1 	bl	810c424 <_Balloc>
 810c8c2:	692b      	ldr	r3, [r5, #16]
 810c8c4:	60c6      	str	r6, [r0, #12]
 810c8c6:	6926      	ldr	r6, [r4, #16]
 810c8c8:	f105 0914 	add.w	r9, r5, #20
 810c8cc:	f104 0214 	add.w	r2, r4, #20
 810c8d0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 810c8d4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 810c8d8:	f100 0514 	add.w	r5, r0, #20
 810c8dc:	f04f 0e00 	mov.w	lr, #0
 810c8e0:	f852 ab04 	ldr.w	sl, [r2], #4
 810c8e4:	f859 4b04 	ldr.w	r4, [r9], #4
 810c8e8:	fa1e f18a 	uxtah	r1, lr, sl
 810c8ec:	b2a3      	uxth	r3, r4
 810c8ee:	1ac9      	subs	r1, r1, r3
 810c8f0:	0c23      	lsrs	r3, r4, #16
 810c8f2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 810c8f6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 810c8fa:	b289      	uxth	r1, r1
 810c8fc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 810c900:	45c8      	cmp	r8, r9
 810c902:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 810c906:	4694      	mov	ip, r2
 810c908:	f845 3b04 	str.w	r3, [r5], #4
 810c90c:	d8e8      	bhi.n	810c8e0 <__mdiff+0x5c>
 810c90e:	45bc      	cmp	ip, r7
 810c910:	d304      	bcc.n	810c91c <__mdiff+0x98>
 810c912:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 810c916:	b183      	cbz	r3, 810c93a <__mdiff+0xb6>
 810c918:	6106      	str	r6, [r0, #16]
 810c91a:	e7c5      	b.n	810c8a8 <__mdiff+0x24>
 810c91c:	f85c 1b04 	ldr.w	r1, [ip], #4
 810c920:	fa1e f381 	uxtah	r3, lr, r1
 810c924:	141a      	asrs	r2, r3, #16
 810c926:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810c92a:	b29b      	uxth	r3, r3
 810c92c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810c930:	ea4f 4e22 	mov.w	lr, r2, asr #16
 810c934:	f845 3b04 	str.w	r3, [r5], #4
 810c938:	e7e9      	b.n	810c90e <__mdiff+0x8a>
 810c93a:	3e01      	subs	r6, #1
 810c93c:	e7e9      	b.n	810c912 <__mdiff+0x8e>

0810c93e <__d2b>:
 810c93e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c942:	460e      	mov	r6, r1
 810c944:	2101      	movs	r1, #1
 810c946:	ec59 8b10 	vmov	r8, r9, d0
 810c94a:	4615      	mov	r5, r2
 810c94c:	f7ff fd6a 	bl	810c424 <_Balloc>
 810c950:	f3c9 540a 	ubfx	r4, r9, #20, #11
 810c954:	4607      	mov	r7, r0
 810c956:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c95a:	bb34      	cbnz	r4, 810c9aa <__d2b+0x6c>
 810c95c:	9301      	str	r3, [sp, #4]
 810c95e:	f1b8 0300 	subs.w	r3, r8, #0
 810c962:	d027      	beq.n	810c9b4 <__d2b+0x76>
 810c964:	a802      	add	r0, sp, #8
 810c966:	f840 3d08 	str.w	r3, [r0, #-8]!
 810c96a:	f7ff fe00 	bl	810c56e <__lo0bits>
 810c96e:	9900      	ldr	r1, [sp, #0]
 810c970:	b1f0      	cbz	r0, 810c9b0 <__d2b+0x72>
 810c972:	9a01      	ldr	r2, [sp, #4]
 810c974:	f1c0 0320 	rsb	r3, r0, #32
 810c978:	fa02 f303 	lsl.w	r3, r2, r3
 810c97c:	430b      	orrs	r3, r1
 810c97e:	40c2      	lsrs	r2, r0
 810c980:	617b      	str	r3, [r7, #20]
 810c982:	9201      	str	r2, [sp, #4]
 810c984:	9b01      	ldr	r3, [sp, #4]
 810c986:	61bb      	str	r3, [r7, #24]
 810c988:	2b00      	cmp	r3, #0
 810c98a:	bf14      	ite	ne
 810c98c:	2102      	movne	r1, #2
 810c98e:	2101      	moveq	r1, #1
 810c990:	6139      	str	r1, [r7, #16]
 810c992:	b1c4      	cbz	r4, 810c9c6 <__d2b+0x88>
 810c994:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 810c998:	4404      	add	r4, r0
 810c99a:	6034      	str	r4, [r6, #0]
 810c99c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c9a0:	6028      	str	r0, [r5, #0]
 810c9a2:	4638      	mov	r0, r7
 810c9a4:	b003      	add	sp, #12
 810c9a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c9aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c9ae:	e7d5      	b.n	810c95c <__d2b+0x1e>
 810c9b0:	6179      	str	r1, [r7, #20]
 810c9b2:	e7e7      	b.n	810c984 <__d2b+0x46>
 810c9b4:	a801      	add	r0, sp, #4
 810c9b6:	f7ff fdda 	bl	810c56e <__lo0bits>
 810c9ba:	9b01      	ldr	r3, [sp, #4]
 810c9bc:	617b      	str	r3, [r7, #20]
 810c9be:	2101      	movs	r1, #1
 810c9c0:	6139      	str	r1, [r7, #16]
 810c9c2:	3020      	adds	r0, #32
 810c9c4:	e7e5      	b.n	810c992 <__d2b+0x54>
 810c9c6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 810c9ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c9ce:	6030      	str	r0, [r6, #0]
 810c9d0:	6918      	ldr	r0, [r3, #16]
 810c9d2:	f7ff fdad 	bl	810c530 <__hi0bits>
 810c9d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 810c9da:	e7e1      	b.n	810c9a0 <__d2b+0x62>

0810c9dc <_calloc_r>:
 810c9dc:	b538      	push	{r3, r4, r5, lr}
 810c9de:	fb02 f401 	mul.w	r4, r2, r1
 810c9e2:	4621      	mov	r1, r4
 810c9e4:	f000 f808 	bl	810c9f8 <_malloc_r>
 810c9e8:	4605      	mov	r5, r0
 810c9ea:	b118      	cbz	r0, 810c9f4 <_calloc_r+0x18>
 810c9ec:	4622      	mov	r2, r4
 810c9ee:	2100      	movs	r1, #0
 810c9f0:	f7fe fb6b 	bl	810b0ca <memset>
 810c9f4:	4628      	mov	r0, r5
 810c9f6:	bd38      	pop	{r3, r4, r5, pc}

0810c9f8 <_malloc_r>:
 810c9f8:	b570      	push	{r4, r5, r6, lr}
 810c9fa:	1ccd      	adds	r5, r1, #3
 810c9fc:	f025 0503 	bic.w	r5, r5, #3
 810ca00:	3508      	adds	r5, #8
 810ca02:	2d0c      	cmp	r5, #12
 810ca04:	bf38      	it	cc
 810ca06:	250c      	movcc	r5, #12
 810ca08:	2d00      	cmp	r5, #0
 810ca0a:	4606      	mov	r6, r0
 810ca0c:	db01      	blt.n	810ca12 <_malloc_r+0x1a>
 810ca0e:	42a9      	cmp	r1, r5
 810ca10:	d903      	bls.n	810ca1a <_malloc_r+0x22>
 810ca12:	230c      	movs	r3, #12
 810ca14:	6033      	str	r3, [r6, #0]
 810ca16:	2000      	movs	r0, #0
 810ca18:	bd70      	pop	{r4, r5, r6, pc}
 810ca1a:	f000 f869 	bl	810caf0 <__malloc_lock>
 810ca1e:	4a21      	ldr	r2, [pc, #132]	; (810caa4 <_malloc_r+0xac>)
 810ca20:	6814      	ldr	r4, [r2, #0]
 810ca22:	4621      	mov	r1, r4
 810ca24:	b991      	cbnz	r1, 810ca4c <_malloc_r+0x54>
 810ca26:	4c20      	ldr	r4, [pc, #128]	; (810caa8 <_malloc_r+0xb0>)
 810ca28:	6823      	ldr	r3, [r4, #0]
 810ca2a:	b91b      	cbnz	r3, 810ca34 <_malloc_r+0x3c>
 810ca2c:	4630      	mov	r0, r6
 810ca2e:	f000 f83d 	bl	810caac <_sbrk_r>
 810ca32:	6020      	str	r0, [r4, #0]
 810ca34:	4629      	mov	r1, r5
 810ca36:	4630      	mov	r0, r6
 810ca38:	f000 f838 	bl	810caac <_sbrk_r>
 810ca3c:	1c43      	adds	r3, r0, #1
 810ca3e:	d124      	bne.n	810ca8a <_malloc_r+0x92>
 810ca40:	230c      	movs	r3, #12
 810ca42:	6033      	str	r3, [r6, #0]
 810ca44:	4630      	mov	r0, r6
 810ca46:	f000 f854 	bl	810caf2 <__malloc_unlock>
 810ca4a:	e7e4      	b.n	810ca16 <_malloc_r+0x1e>
 810ca4c:	680b      	ldr	r3, [r1, #0]
 810ca4e:	1b5b      	subs	r3, r3, r5
 810ca50:	d418      	bmi.n	810ca84 <_malloc_r+0x8c>
 810ca52:	2b0b      	cmp	r3, #11
 810ca54:	d90f      	bls.n	810ca76 <_malloc_r+0x7e>
 810ca56:	600b      	str	r3, [r1, #0]
 810ca58:	50cd      	str	r5, [r1, r3]
 810ca5a:	18cc      	adds	r4, r1, r3
 810ca5c:	4630      	mov	r0, r6
 810ca5e:	f000 f848 	bl	810caf2 <__malloc_unlock>
 810ca62:	f104 000b 	add.w	r0, r4, #11
 810ca66:	1d23      	adds	r3, r4, #4
 810ca68:	f020 0007 	bic.w	r0, r0, #7
 810ca6c:	1ac3      	subs	r3, r0, r3
 810ca6e:	d0d3      	beq.n	810ca18 <_malloc_r+0x20>
 810ca70:	425a      	negs	r2, r3
 810ca72:	50e2      	str	r2, [r4, r3]
 810ca74:	e7d0      	b.n	810ca18 <_malloc_r+0x20>
 810ca76:	428c      	cmp	r4, r1
 810ca78:	684b      	ldr	r3, [r1, #4]
 810ca7a:	bf16      	itet	ne
 810ca7c:	6063      	strne	r3, [r4, #4]
 810ca7e:	6013      	streq	r3, [r2, #0]
 810ca80:	460c      	movne	r4, r1
 810ca82:	e7eb      	b.n	810ca5c <_malloc_r+0x64>
 810ca84:	460c      	mov	r4, r1
 810ca86:	6849      	ldr	r1, [r1, #4]
 810ca88:	e7cc      	b.n	810ca24 <_malloc_r+0x2c>
 810ca8a:	1cc4      	adds	r4, r0, #3
 810ca8c:	f024 0403 	bic.w	r4, r4, #3
 810ca90:	42a0      	cmp	r0, r4
 810ca92:	d005      	beq.n	810caa0 <_malloc_r+0xa8>
 810ca94:	1a21      	subs	r1, r4, r0
 810ca96:	4630      	mov	r0, r6
 810ca98:	f000 f808 	bl	810caac <_sbrk_r>
 810ca9c:	3001      	adds	r0, #1
 810ca9e:	d0cf      	beq.n	810ca40 <_malloc_r+0x48>
 810caa0:	6025      	str	r5, [r4, #0]
 810caa2:	e7db      	b.n	810ca5c <_malloc_r+0x64>
 810caa4:	10004b14 	.word	0x10004b14
 810caa8:	10004b18 	.word	0x10004b18

0810caac <_sbrk_r>:
 810caac:	b538      	push	{r3, r4, r5, lr}
 810caae:	4c06      	ldr	r4, [pc, #24]	; (810cac8 <_sbrk_r+0x1c>)
 810cab0:	2300      	movs	r3, #0
 810cab2:	4605      	mov	r5, r0
 810cab4:	4608      	mov	r0, r1
 810cab6:	6023      	str	r3, [r4, #0]
 810cab8:	f7f4 fe7a 	bl	81017b0 <_sbrk>
 810cabc:	1c43      	adds	r3, r0, #1
 810cabe:	d102      	bne.n	810cac6 <_sbrk_r+0x1a>
 810cac0:	6823      	ldr	r3, [r4, #0]
 810cac2:	b103      	cbz	r3, 810cac6 <_sbrk_r+0x1a>
 810cac4:	602b      	str	r3, [r5, #0]
 810cac6:	bd38      	pop	{r3, r4, r5, pc}
 810cac8:	10004eb0 	.word	0x10004eb0

0810cacc <__ascii_mbtowc>:
 810cacc:	b082      	sub	sp, #8
 810cace:	b901      	cbnz	r1, 810cad2 <__ascii_mbtowc+0x6>
 810cad0:	a901      	add	r1, sp, #4
 810cad2:	b142      	cbz	r2, 810cae6 <__ascii_mbtowc+0x1a>
 810cad4:	b14b      	cbz	r3, 810caea <__ascii_mbtowc+0x1e>
 810cad6:	7813      	ldrb	r3, [r2, #0]
 810cad8:	600b      	str	r3, [r1, #0]
 810cada:	7812      	ldrb	r2, [r2, #0]
 810cadc:	1c10      	adds	r0, r2, #0
 810cade:	bf18      	it	ne
 810cae0:	2001      	movne	r0, #1
 810cae2:	b002      	add	sp, #8
 810cae4:	4770      	bx	lr
 810cae6:	4610      	mov	r0, r2
 810cae8:	e7fb      	b.n	810cae2 <__ascii_mbtowc+0x16>
 810caea:	f06f 0001 	mvn.w	r0, #1
 810caee:	e7f8      	b.n	810cae2 <__ascii_mbtowc+0x16>

0810caf0 <__malloc_lock>:
 810caf0:	4770      	bx	lr

0810caf2 <__malloc_unlock>:
 810caf2:	4770      	bx	lr

0810caf4 <__ascii_wctomb>:
 810caf4:	b149      	cbz	r1, 810cb0a <__ascii_wctomb+0x16>
 810caf6:	2aff      	cmp	r2, #255	; 0xff
 810caf8:	bf85      	ittet	hi
 810cafa:	238a      	movhi	r3, #138	; 0x8a
 810cafc:	6003      	strhi	r3, [r0, #0]
 810cafe:	700a      	strbls	r2, [r1, #0]
 810cb00:	f04f 30ff 	movhi.w	r0, #4294967295
 810cb04:	bf98      	it	ls
 810cb06:	2001      	movls	r0, #1
 810cb08:	4770      	bx	lr
 810cb0a:	4608      	mov	r0, r1
 810cb0c:	4770      	bx	lr
	...

0810cb10 <_init>:
 810cb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cb12:	bf00      	nop
 810cb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cb16:	bc08      	pop	{r3}
 810cb18:	469e      	mov	lr, r3
 810cb1a:	4770      	bx	lr

0810cb1c <_fini>:
 810cb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cb1e:	bf00      	nop
 810cb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cb22:	bc08      	pop	{r3}
 810cb24:	469e      	mov	lr, r3
 810cb26:	4770      	bx	lr
