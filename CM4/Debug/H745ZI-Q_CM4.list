
H745ZI-Q_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f28  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  081071c8  081071c8  000171c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08107248  08107248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08107250  08107250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08107254  08107254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  10000000  08107258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004aa0  10000010  08107268  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10004ab0  08107268  00024ab0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ca38  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004861  00000000  00000000  0004ca78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000018a8  00000000  00000000  000512e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016e0  00000000  00000000  00052b88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003bebc  00000000  00000000  00054268  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001715c  00000000  00000000  00090124  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00189f43  00000000  00000000  000a7280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  002311c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066b0  00000000  00000000  00231240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000010 	.word	0x10000010
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081071b0 	.word	0x081071b0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000014 	.word	0x10000014
 81002dc:	081071b0 	.word	0x081071b0

081002e0 <__aeabi_uldivmod>:
 81002e0:	b953      	cbnz	r3, 81002f8 <__aeabi_uldivmod+0x18>
 81002e2:	b94a      	cbnz	r2, 81002f8 <__aeabi_uldivmod+0x18>
 81002e4:	2900      	cmp	r1, #0
 81002e6:	bf08      	it	eq
 81002e8:	2800      	cmpeq	r0, #0
 81002ea:	bf1c      	itt	ne
 81002ec:	f04f 31ff 	movne.w	r1, #4294967295
 81002f0:	f04f 30ff 	movne.w	r0, #4294967295
 81002f4:	f000 b972 	b.w	81005dc <__aeabi_idiv0>
 81002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 81002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100300:	f000 f806 	bl	8100310 <__udivmoddi4>
 8100304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810030c:	b004      	add	sp, #16
 810030e:	4770      	bx	lr

08100310 <__udivmoddi4>:
 8100310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100314:	9e08      	ldr	r6, [sp, #32]
 8100316:	4604      	mov	r4, r0
 8100318:	4688      	mov	r8, r1
 810031a:	2b00      	cmp	r3, #0
 810031c:	d14b      	bne.n	81003b6 <__udivmoddi4+0xa6>
 810031e:	428a      	cmp	r2, r1
 8100320:	4615      	mov	r5, r2
 8100322:	d967      	bls.n	81003f4 <__udivmoddi4+0xe4>
 8100324:	fab2 f282 	clz	r2, r2
 8100328:	b14a      	cbz	r2, 810033e <__udivmoddi4+0x2e>
 810032a:	f1c2 0720 	rsb	r7, r2, #32
 810032e:	fa01 f302 	lsl.w	r3, r1, r2
 8100332:	fa20 f707 	lsr.w	r7, r0, r7
 8100336:	4095      	lsls	r5, r2
 8100338:	ea47 0803 	orr.w	r8, r7, r3
 810033c:	4094      	lsls	r4, r2
 810033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100342:	0c23      	lsrs	r3, r4, #16
 8100344:	fbb8 f7fe 	udiv	r7, r8, lr
 8100348:	fa1f fc85 	uxth.w	ip, r5
 810034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8100350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8100354:	fb07 f10c 	mul.w	r1, r7, ip
 8100358:	4299      	cmp	r1, r3
 810035a:	d909      	bls.n	8100370 <__udivmoddi4+0x60>
 810035c:	18eb      	adds	r3, r5, r3
 810035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8100362:	f080 811b 	bcs.w	810059c <__udivmoddi4+0x28c>
 8100366:	4299      	cmp	r1, r3
 8100368:	f240 8118 	bls.w	810059c <__udivmoddi4+0x28c>
 810036c:	3f02      	subs	r7, #2
 810036e:	442b      	add	r3, r5
 8100370:	1a5b      	subs	r3, r3, r1
 8100372:	b2a4      	uxth	r4, r4
 8100374:	fbb3 f0fe 	udiv	r0, r3, lr
 8100378:	fb0e 3310 	mls	r3, lr, r0, r3
 810037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100380:	fb00 fc0c 	mul.w	ip, r0, ip
 8100384:	45a4      	cmp	ip, r4
 8100386:	d909      	bls.n	810039c <__udivmoddi4+0x8c>
 8100388:	192c      	adds	r4, r5, r4
 810038a:	f100 33ff 	add.w	r3, r0, #4294967295
 810038e:	f080 8107 	bcs.w	81005a0 <__udivmoddi4+0x290>
 8100392:	45a4      	cmp	ip, r4
 8100394:	f240 8104 	bls.w	81005a0 <__udivmoddi4+0x290>
 8100398:	3802      	subs	r0, #2
 810039a:	442c      	add	r4, r5
 810039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 81003a0:	eba4 040c 	sub.w	r4, r4, ip
 81003a4:	2700      	movs	r7, #0
 81003a6:	b11e      	cbz	r6, 81003b0 <__udivmoddi4+0xa0>
 81003a8:	40d4      	lsrs	r4, r2
 81003aa:	2300      	movs	r3, #0
 81003ac:	e9c6 4300 	strd	r4, r3, [r6]
 81003b0:	4639      	mov	r1, r7
 81003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b6:	428b      	cmp	r3, r1
 81003b8:	d909      	bls.n	81003ce <__udivmoddi4+0xbe>
 81003ba:	2e00      	cmp	r6, #0
 81003bc:	f000 80eb 	beq.w	8100596 <__udivmoddi4+0x286>
 81003c0:	2700      	movs	r7, #0
 81003c2:	e9c6 0100 	strd	r0, r1, [r6]
 81003c6:	4638      	mov	r0, r7
 81003c8:	4639      	mov	r1, r7
 81003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ce:	fab3 f783 	clz	r7, r3
 81003d2:	2f00      	cmp	r7, #0
 81003d4:	d147      	bne.n	8100466 <__udivmoddi4+0x156>
 81003d6:	428b      	cmp	r3, r1
 81003d8:	d302      	bcc.n	81003e0 <__udivmoddi4+0xd0>
 81003da:	4282      	cmp	r2, r0
 81003dc:	f200 80fa 	bhi.w	81005d4 <__udivmoddi4+0x2c4>
 81003e0:	1a84      	subs	r4, r0, r2
 81003e2:	eb61 0303 	sbc.w	r3, r1, r3
 81003e6:	2001      	movs	r0, #1
 81003e8:	4698      	mov	r8, r3
 81003ea:	2e00      	cmp	r6, #0
 81003ec:	d0e0      	beq.n	81003b0 <__udivmoddi4+0xa0>
 81003ee:	e9c6 4800 	strd	r4, r8, [r6]
 81003f2:	e7dd      	b.n	81003b0 <__udivmoddi4+0xa0>
 81003f4:	b902      	cbnz	r2, 81003f8 <__udivmoddi4+0xe8>
 81003f6:	deff      	udf	#255	; 0xff
 81003f8:	fab2 f282 	clz	r2, r2
 81003fc:	2a00      	cmp	r2, #0
 81003fe:	f040 808f 	bne.w	8100520 <__udivmoddi4+0x210>
 8100402:	1b49      	subs	r1, r1, r5
 8100404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100408:	fa1f f885 	uxth.w	r8, r5
 810040c:	2701      	movs	r7, #1
 810040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8100412:	0c23      	lsrs	r3, r4, #16
 8100414:	fb0e 111c 	mls	r1, lr, ip, r1
 8100418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810041c:	fb08 f10c 	mul.w	r1, r8, ip
 8100420:	4299      	cmp	r1, r3
 8100422:	d907      	bls.n	8100434 <__udivmoddi4+0x124>
 8100424:	18eb      	adds	r3, r5, r3
 8100426:	f10c 30ff 	add.w	r0, ip, #4294967295
 810042a:	d202      	bcs.n	8100432 <__udivmoddi4+0x122>
 810042c:	4299      	cmp	r1, r3
 810042e:	f200 80cd 	bhi.w	81005cc <__udivmoddi4+0x2bc>
 8100432:	4684      	mov	ip, r0
 8100434:	1a59      	subs	r1, r3, r1
 8100436:	b2a3      	uxth	r3, r4
 8100438:	fbb1 f0fe 	udiv	r0, r1, lr
 810043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8100440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8100444:	fb08 f800 	mul.w	r8, r8, r0
 8100448:	45a0      	cmp	r8, r4
 810044a:	d907      	bls.n	810045c <__udivmoddi4+0x14c>
 810044c:	192c      	adds	r4, r5, r4
 810044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8100452:	d202      	bcs.n	810045a <__udivmoddi4+0x14a>
 8100454:	45a0      	cmp	r8, r4
 8100456:	f200 80b6 	bhi.w	81005c6 <__udivmoddi4+0x2b6>
 810045a:	4618      	mov	r0, r3
 810045c:	eba4 0408 	sub.w	r4, r4, r8
 8100460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100464:	e79f      	b.n	81003a6 <__udivmoddi4+0x96>
 8100466:	f1c7 0c20 	rsb	ip, r7, #32
 810046a:	40bb      	lsls	r3, r7
 810046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8100470:	ea4e 0e03 	orr.w	lr, lr, r3
 8100474:	fa01 f407 	lsl.w	r4, r1, r7
 8100478:	fa20 f50c 	lsr.w	r5, r0, ip
 810047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8100480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8100484:	4325      	orrs	r5, r4
 8100486:	fbb3 f9f8 	udiv	r9, r3, r8
 810048a:	0c2c      	lsrs	r4, r5, #16
 810048c:	fb08 3319 	mls	r3, r8, r9, r3
 8100490:	fa1f fa8e 	uxth.w	sl, lr
 8100494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8100498:	fb09 f40a 	mul.w	r4, r9, sl
 810049c:	429c      	cmp	r4, r3
 810049e:	fa02 f207 	lsl.w	r2, r2, r7
 81004a2:	fa00 f107 	lsl.w	r1, r0, r7
 81004a6:	d90b      	bls.n	81004c0 <__udivmoddi4+0x1b0>
 81004a8:	eb1e 0303 	adds.w	r3, lr, r3
 81004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 81004b0:	f080 8087 	bcs.w	81005c2 <__udivmoddi4+0x2b2>
 81004b4:	429c      	cmp	r4, r3
 81004b6:	f240 8084 	bls.w	81005c2 <__udivmoddi4+0x2b2>
 81004ba:	f1a9 0902 	sub.w	r9, r9, #2
 81004be:	4473      	add	r3, lr
 81004c0:	1b1b      	subs	r3, r3, r4
 81004c2:	b2ad      	uxth	r5, r5
 81004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 81004c8:	fb08 3310 	mls	r3, r8, r0, r3
 81004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 81004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 81004d4:	45a2      	cmp	sl, r4
 81004d6:	d908      	bls.n	81004ea <__udivmoddi4+0x1da>
 81004d8:	eb1e 0404 	adds.w	r4, lr, r4
 81004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 81004e0:	d26b      	bcs.n	81005ba <__udivmoddi4+0x2aa>
 81004e2:	45a2      	cmp	sl, r4
 81004e4:	d969      	bls.n	81005ba <__udivmoddi4+0x2aa>
 81004e6:	3802      	subs	r0, #2
 81004e8:	4474      	add	r4, lr
 81004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81004ee:	fba0 8902 	umull	r8, r9, r0, r2
 81004f2:	eba4 040a 	sub.w	r4, r4, sl
 81004f6:	454c      	cmp	r4, r9
 81004f8:	46c2      	mov	sl, r8
 81004fa:	464b      	mov	r3, r9
 81004fc:	d354      	bcc.n	81005a8 <__udivmoddi4+0x298>
 81004fe:	d051      	beq.n	81005a4 <__udivmoddi4+0x294>
 8100500:	2e00      	cmp	r6, #0
 8100502:	d069      	beq.n	81005d8 <__udivmoddi4+0x2c8>
 8100504:	ebb1 050a 	subs.w	r5, r1, sl
 8100508:	eb64 0403 	sbc.w	r4, r4, r3
 810050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8100510:	40fd      	lsrs	r5, r7
 8100512:	40fc      	lsrs	r4, r7
 8100514:	ea4c 0505 	orr.w	r5, ip, r5
 8100518:	e9c6 5400 	strd	r5, r4, [r6]
 810051c:	2700      	movs	r7, #0
 810051e:	e747      	b.n	81003b0 <__udivmoddi4+0xa0>
 8100520:	f1c2 0320 	rsb	r3, r2, #32
 8100524:	fa20 f703 	lsr.w	r7, r0, r3
 8100528:	4095      	lsls	r5, r2
 810052a:	fa01 f002 	lsl.w	r0, r1, r2
 810052e:	fa21 f303 	lsr.w	r3, r1, r3
 8100532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8100536:	4338      	orrs	r0, r7
 8100538:	0c01      	lsrs	r1, r0, #16
 810053a:	fbb3 f7fe 	udiv	r7, r3, lr
 810053e:	fa1f f885 	uxth.w	r8, r5
 8100542:	fb0e 3317 	mls	r3, lr, r7, r3
 8100546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810054a:	fb07 f308 	mul.w	r3, r7, r8
 810054e:	428b      	cmp	r3, r1
 8100550:	fa04 f402 	lsl.w	r4, r4, r2
 8100554:	d907      	bls.n	8100566 <__udivmoddi4+0x256>
 8100556:	1869      	adds	r1, r5, r1
 8100558:	f107 3cff 	add.w	ip, r7, #4294967295
 810055c:	d22f      	bcs.n	81005be <__udivmoddi4+0x2ae>
 810055e:	428b      	cmp	r3, r1
 8100560:	d92d      	bls.n	81005be <__udivmoddi4+0x2ae>
 8100562:	3f02      	subs	r7, #2
 8100564:	4429      	add	r1, r5
 8100566:	1acb      	subs	r3, r1, r3
 8100568:	b281      	uxth	r1, r0
 810056a:	fbb3 f0fe 	udiv	r0, r3, lr
 810056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8100572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100576:	fb00 f308 	mul.w	r3, r0, r8
 810057a:	428b      	cmp	r3, r1
 810057c:	d907      	bls.n	810058e <__udivmoddi4+0x27e>
 810057e:	1869      	adds	r1, r5, r1
 8100580:	f100 3cff 	add.w	ip, r0, #4294967295
 8100584:	d217      	bcs.n	81005b6 <__udivmoddi4+0x2a6>
 8100586:	428b      	cmp	r3, r1
 8100588:	d915      	bls.n	81005b6 <__udivmoddi4+0x2a6>
 810058a:	3802      	subs	r0, #2
 810058c:	4429      	add	r1, r5
 810058e:	1ac9      	subs	r1, r1, r3
 8100590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8100594:	e73b      	b.n	810040e <__udivmoddi4+0xfe>
 8100596:	4637      	mov	r7, r6
 8100598:	4630      	mov	r0, r6
 810059a:	e709      	b.n	81003b0 <__udivmoddi4+0xa0>
 810059c:	4607      	mov	r7, r0
 810059e:	e6e7      	b.n	8100370 <__udivmoddi4+0x60>
 81005a0:	4618      	mov	r0, r3
 81005a2:	e6fb      	b.n	810039c <__udivmoddi4+0x8c>
 81005a4:	4541      	cmp	r1, r8
 81005a6:	d2ab      	bcs.n	8100500 <__udivmoddi4+0x1f0>
 81005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 81005ac:	eb69 020e 	sbc.w	r2, r9, lr
 81005b0:	3801      	subs	r0, #1
 81005b2:	4613      	mov	r3, r2
 81005b4:	e7a4      	b.n	8100500 <__udivmoddi4+0x1f0>
 81005b6:	4660      	mov	r0, ip
 81005b8:	e7e9      	b.n	810058e <__udivmoddi4+0x27e>
 81005ba:	4618      	mov	r0, r3
 81005bc:	e795      	b.n	81004ea <__udivmoddi4+0x1da>
 81005be:	4667      	mov	r7, ip
 81005c0:	e7d1      	b.n	8100566 <__udivmoddi4+0x256>
 81005c2:	4681      	mov	r9, r0
 81005c4:	e77c      	b.n	81004c0 <__udivmoddi4+0x1b0>
 81005c6:	3802      	subs	r0, #2
 81005c8:	442c      	add	r4, r5
 81005ca:	e747      	b.n	810045c <__udivmoddi4+0x14c>
 81005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 81005d0:	442b      	add	r3, r5
 81005d2:	e72f      	b.n	8100434 <__udivmoddi4+0x124>
 81005d4:	4638      	mov	r0, r7
 81005d6:	e708      	b.n	81003ea <__udivmoddi4+0xda>
 81005d8:	4637      	mov	r7, r6
 81005da:	e6e9      	b.n	81003b0 <__udivmoddi4+0xa0>

081005dc <__aeabi_idiv0>:
 81005dc:	4770      	bx	lr
 81005de:	bf00      	nop

081005e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005e0:	b480      	push	{r7}
 81005e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005e4:	4b0b      	ldr	r3, [pc, #44]	; (8100614 <SystemInit+0x34>)
 81005e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005ea:	4a0a      	ldr	r2, [pc, #40]	; (8100614 <SystemInit+0x34>)
 81005ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 81005f4:	4b07      	ldr	r3, [pc, #28]	; (8100614 <SystemInit+0x34>)
 81005f6:	691b      	ldr	r3, [r3, #16]
 81005f8:	4a06      	ldr	r2, [pc, #24]	; (8100614 <SystemInit+0x34>)
 81005fa:	f043 0304 	orr.w	r3, r3, #4
 81005fe:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AHBSRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100600:	4b04      	ldr	r3, [pc, #16]	; (8100614 <SystemInit+0x34>)
 8100602:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100606:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100608:	bf00      	nop
 810060a:	46bd      	mov	sp, r7
 810060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100610:	4770      	bx	lr
 8100612:	bf00      	nop
 8100614:	e000ed00 	.word	0xe000ed00

08100618 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8100618:	b580      	push	{r7, lr}
 810061a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 810061c:	4a04      	ldr	r2, [pc, #16]	; (8100630 <MX_FREERTOS_Init+0x18>)
 810061e:	2100      	movs	r1, #0
 8100620:	4804      	ldr	r0, [pc, #16]	; (8100634 <MX_FREERTOS_Init+0x1c>)
 8100622:	f004 f8bd 	bl	81047a0 <osThreadNew>
 8100626:	4602      	mov	r2, r0
 8100628:	4b03      	ldr	r3, [pc, #12]	; (8100638 <MX_FREERTOS_Init+0x20>)
 810062a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 810062c:	bf00      	nop
 810062e:	bd80      	pop	{r7, pc}
 8100630:	0810720c 	.word	0x0810720c
 8100634:	0810063d 	.word	0x0810063d
 8100638:	10004934 	.word	0x10004934

0810063c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 810063c:	b580      	push	{r7, lr}
 810063e:	b082      	sub	sp, #8
 8100640:	af00      	add	r7, sp, #0
 8100642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  motor_pwm.motor1 = duty_cycle;
 8100644:	4b10      	ldr	r3, [pc, #64]	; (8100688 <StartDefaultTask+0x4c>)
 8100646:	881b      	ldrh	r3, [r3, #0]
 8100648:	ee07 3a90 	vmov	s15, r3
 810064c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100650:	4b0e      	ldr	r3, [pc, #56]	; (810068c <StartDefaultTask+0x50>)
 8100652:	edc3 7a00 	vstr	s15, [r3]
	  SetMotorPWM(&motor_pwm);
 8100656:	480d      	ldr	r0, [pc, #52]	; (810068c <StartDefaultTask+0x50>)
 8100658:	f000 f8e4 	bl	8100824 <SetMotorPWM>
	  duty_cycle+=50;
 810065c:	4b0a      	ldr	r3, [pc, #40]	; (8100688 <StartDefaultTask+0x4c>)
 810065e:	881b      	ldrh	r3, [r3, #0]
 8100660:	3332      	adds	r3, #50	; 0x32
 8100662:	b29a      	uxth	r2, r3
 8100664:	4b08      	ldr	r3, [pc, #32]	; (8100688 <StartDefaultTask+0x4c>)
 8100666:	801a      	strh	r2, [r3, #0]
	 if(duty_cycle > 1900)
 8100668:	4b07      	ldr	r3, [pc, #28]	; (8100688 <StartDefaultTask+0x4c>)
 810066a:	881b      	ldrh	r3, [r3, #0]
 810066c:	f240 726c 	movw	r2, #1900	; 0x76c
 8100670:	4293      	cmp	r3, r2
 8100672:	d903      	bls.n	810067c <StartDefaultTask+0x40>
	 {
		 duty_cycle = 1000;
 8100674:	4b04      	ldr	r3, [pc, #16]	; (8100688 <StartDefaultTask+0x4c>)
 8100676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 810067a:	801a      	strh	r2, [r3, #0]
	 }

    osDelay(1000);
 810067c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8100680:	f004 f934 	bl	81048ec <osDelay>
	  motor_pwm.motor1 = duty_cycle;
 8100684:	e7de      	b.n	8100644 <StartDefaultTask+0x8>
 8100686:	bf00      	nop
 8100688:	10000008 	.word	0x10000008
 810068c:	10004938 	.word	0x10004938

08100690 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100690:	b580      	push	{r7, lr}
 8100692:	b088      	sub	sp, #32
 8100694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100696:	f107 030c 	add.w	r3, r7, #12
 810069a:	2200      	movs	r2, #0
 810069c:	601a      	str	r2, [r3, #0]
 810069e:	605a      	str	r2, [r3, #4]
 81006a0:	609a      	str	r2, [r3, #8]
 81006a2:	60da      	str	r2, [r3, #12]
 81006a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81006a6:	4b22      	ldr	r3, [pc, #136]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006ac:	4a20      	ldr	r2, [pc, #128]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006ae:	f043 0310 	orr.w	r3, r3, #16
 81006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006b6:	4b1e      	ldr	r3, [pc, #120]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006bc:	f003 0310 	and.w	r3, r3, #16
 81006c0:	60bb      	str	r3, [r7, #8]
 81006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81006c4:	4b1a      	ldr	r3, [pc, #104]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006ca:	4a19      	ldr	r2, [pc, #100]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006cc:	f043 0302 	orr.w	r3, r3, #2
 81006d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006d4:	4b16      	ldr	r3, [pc, #88]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006da:	f003 0302 	and.w	r3, r3, #2
 81006de:	607b      	str	r3, [r7, #4]
 81006e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81006e2:	4b13      	ldr	r3, [pc, #76]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006e8:	4a11      	ldr	r2, [pc, #68]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006ea:	f043 0301 	orr.w	r3, r3, #1
 81006ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006f2:	4b0f      	ldr	r3, [pc, #60]	; (8100730 <MX_GPIO_Init+0xa0>)
 81006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006f8:	f003 0301 	and.w	r3, r3, #1
 81006fc:	603b      	str	r3, [r7, #0]
 81006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100700:	2200      	movs	r2, #0
 8100702:	2102      	movs	r1, #2
 8100704:	480b      	ldr	r0, [pc, #44]	; (8100734 <MX_GPIO_Init+0xa4>)
 8100706:	f000 ff85 	bl	8101614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 810070a:	2302      	movs	r3, #2
 810070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810070e:	2301      	movs	r3, #1
 8100710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100712:	2300      	movs	r3, #0
 8100714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100716:	2300      	movs	r3, #0
 8100718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 810071a:	f107 030c 	add.w	r3, r7, #12
 810071e:	4619      	mov	r1, r3
 8100720:	4804      	ldr	r0, [pc, #16]	; (8100734 <MX_GPIO_Init+0xa4>)
 8100722:	f000 fdc7 	bl	81012b4 <HAL_GPIO_Init>

}
 8100726:	bf00      	nop
 8100728:	3720      	adds	r7, #32
 810072a:	46bd      	mov	sp, r7
 810072c:	bd80      	pop	{r7, pc}
 810072e:	bf00      	nop
 8100730:	58024400 	.word	0x58024400
 8100734:	58021000 	.word	0x58021000

08100738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100738:	b580      	push	{r7, lr}
 810073a:	b082      	sub	sp, #8
 810073c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810073e:	4b28      	ldr	r3, [pc, #160]	; (81007e0 <main+0xa8>)
 8100740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100744:	4a26      	ldr	r2, [pc, #152]	; (81007e0 <main+0xa8>)
 8100746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810074e:	4b24      	ldr	r3, [pc, #144]	; (81007e0 <main+0xa8>)
 8100750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100758:	607b      	str	r3, [r7, #4]
 810075a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810075c:	2001      	movs	r0, #1
 810075e:	f000 ff73 	bl	8101648 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100762:	f001 f81d 	bl	81017a0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100766:	2201      	movs	r2, #1
 8100768:	2102      	movs	r1, #2
 810076a:	2000      	movs	r0, #0
 810076c:	f000 ffa2 	bl	81016b4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100770:	4b1c      	ldr	r3, [pc, #112]	; (81007e4 <main+0xac>)
 8100772:	681b      	ldr	r3, [r3, #0]
 8100774:	091b      	lsrs	r3, r3, #4
 8100776:	f003 030f 	and.w	r3, r3, #15
 810077a:	2b07      	cmp	r3, #7
 810077c:	d108      	bne.n	8100790 <main+0x58>
 810077e:	4b1a      	ldr	r3, [pc, #104]	; (81007e8 <main+0xb0>)
 8100780:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100784:	4a18      	ldr	r2, [pc, #96]	; (81007e8 <main+0xb0>)
 8100786:	f043 0301 	orr.w	r3, r3, #1
 810078a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810078e:	e007      	b.n	81007a0 <main+0x68>
 8100790:	4b15      	ldr	r3, [pc, #84]	; (81007e8 <main+0xb0>)
 8100792:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100796:	4a14      	ldr	r2, [pc, #80]	; (81007e8 <main+0xb0>)
 8100798:	f043 0301 	orr.w	r3, r3, #1
 810079c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81007a0:	f000 fc16 	bl	8100fd0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81007a4:	f7ff ff74 	bl	8100690 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81007a8:	f000 fb52 	bl	8100e50 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 81007ac:	f000 f9f8 	bl	8100ba0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 81007b0:	2100      	movs	r1, #0
 81007b2:	480e      	ldr	r0, [pc, #56]	; (81007ec <main+0xb4>)
 81007b4:	f001 fdb2 	bl	810231c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 81007b8:	2104      	movs	r1, #4
 81007ba:	480c      	ldr	r0, [pc, #48]	; (81007ec <main+0xb4>)
 81007bc:	f001 fdae 	bl	810231c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 81007c0:	2108      	movs	r1, #8
 81007c2:	480a      	ldr	r0, [pc, #40]	; (81007ec <main+0xb4>)
 81007c4:	f001 fdaa 	bl	810231c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 81007c8:	210c      	movs	r1, #12
 81007ca:	4808      	ldr	r0, [pc, #32]	; (81007ec <main+0xb4>)
 81007cc:	f001 fda6 	bl	810231c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 81007d0:	f003 ff7c 	bl	81046cc <osKernelInitialize>
  MX_FREERTOS_Init();
 81007d4:	f7ff ff20 	bl	8100618 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 81007d8:	f003 ffac 	bl	8104734 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81007dc:	e7fe      	b.n	81007dc <main+0xa4>
 81007de:	bf00      	nop
 81007e0:	58024400 	.word	0x58024400
 81007e4:	e000ed00 	.word	0xe000ed00
 81007e8:	58026400 	.word	0x58026400
 81007ec:	10004994 	.word	0x10004994

081007f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81007f0:	b580      	push	{r7, lr}
 81007f2:	b082      	sub	sp, #8
 81007f4:	af00      	add	r7, sp, #0
 81007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 81007f8:	687b      	ldr	r3, [r7, #4]
 81007fa:	681b      	ldr	r3, [r3, #0]
 81007fc:	4a04      	ldr	r2, [pc, #16]	; (8100810 <HAL_TIM_PeriodElapsedCallback+0x20>)
 81007fe:	4293      	cmp	r3, r2
 8100800:	d101      	bne.n	8100806 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100802:	f000 fc43 	bl	810108c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100806:	bf00      	nop
 8100808:	3708      	adds	r7, #8
 810080a:	46bd      	mov	sp, r7
 810080c:	bd80      	pop	{r7, pc}
 810080e:	bf00      	nop
 8100810:	40001400 	.word	0x40001400

08100814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100814:	b480      	push	{r7}
 8100816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8100818:	bf00      	nop
 810081a:	46bd      	mov	sp, r7
 810081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100820:	4770      	bx	lr
	...

08100824 <SetMotorPWM>:
#include "tim.h"
#include "pwm.h"


void SetMotorPWM(Motor *motor)
{
 8100824:	b580      	push	{r7, lr}
 8100826:	b084      	sub	sp, #16
 8100828:	af00      	add	r7, sp, #0
 810082a:	6078      	str	r0, [r7, #4]
	uint32_t pwm_value;

	if(motor->motor1 >= MAX_MOTOR_PWM)
 810082c:	687b      	ldr	r3, [r7, #4]
 810082e:	edd3 7a00 	vldr	s15, [r3]
 8100832:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 81009e4 <SetMotorPWM+0x1c0>
 8100836:	eef4 7ac7 	vcmpe.f32	s15, s14
 810083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810083e:	db09      	blt.n	8100854 <SetMotorPWM+0x30>
	{
		pwm_value = MicrosToTicks(MAX_MOTOR_PWM);
 8100840:	f240 7044 	movw	r0, #1860	; 0x744
 8100844:	f000 f8d4 	bl	81009f0 <MicrosToTicks>
 8100848:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR1 = pwm_value;
 810084a:	4b67      	ldr	r3, [pc, #412]	; (81009e8 <SetMotorPWM+0x1c4>)
 810084c:	681b      	ldr	r3, [r3, #0]
 810084e:	68fa      	ldr	r2, [r7, #12]
 8100850:	635a      	str	r2, [r3, #52]	; 0x34
 8100852:	e021      	b.n	8100898 <SetMotorPWM+0x74>
	}
	else if(motor->motor1 <= MIN_MOTOR_PWM)
 8100854:	687b      	ldr	r3, [r7, #4]
 8100856:	edd3 7a00 	vldr	s15, [r3]
 810085a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 81009ec <SetMotorPWM+0x1c8>
 810085e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100866:	d809      	bhi.n	810087c <SetMotorPWM+0x58>
	{
		pwm_value = MicrosToTicks(MIN_MOTOR_PWM);
 8100868:	f240 4024 	movw	r0, #1060	; 0x424
 810086c:	f000 f8c0 	bl	81009f0 <MicrosToTicks>
 8100870:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR1 = pwm_value;
 8100872:	4b5d      	ldr	r3, [pc, #372]	; (81009e8 <SetMotorPWM+0x1c4>)
 8100874:	681b      	ldr	r3, [r3, #0]
 8100876:	68fa      	ldr	r2, [r7, #12]
 8100878:	635a      	str	r2, [r3, #52]	; 0x34
 810087a:	e00d      	b.n	8100898 <SetMotorPWM+0x74>
	}
	else
	{
		pwm_value = MicrosToTicks(motor->motor1);
 810087c:	687b      	ldr	r3, [r7, #4]
 810087e:	edd3 7a00 	vldr	s15, [r3]
 8100882:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100886:	ee17 0a90 	vmov	r0, s15
 810088a:	f000 f8b1 	bl	81009f0 <MicrosToTicks>
 810088e:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR1 = pwm_value;
 8100890:	4b55      	ldr	r3, [pc, #340]	; (81009e8 <SetMotorPWM+0x1c4>)
 8100892:	681b      	ldr	r3, [r3, #0]
 8100894:	68fa      	ldr	r2, [r7, #12]
 8100896:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(motor->motor2 >= MAX_MOTOR_PWM)
 8100898:	687b      	ldr	r3, [r7, #4]
 810089a:	edd3 7a01 	vldr	s15, [r3, #4]
 810089e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 81009e4 <SetMotorPWM+0x1c0>
 81008a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81008a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81008aa:	db09      	blt.n	81008c0 <SetMotorPWM+0x9c>
	{
		pwm_value = MicrosToTicks(MAX_MOTOR_PWM);
 81008ac:	f240 7044 	movw	r0, #1860	; 0x744
 81008b0:	f000 f89e 	bl	81009f0 <MicrosToTicks>
 81008b4:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR2 = pwm_value;
 81008b6:	4b4c      	ldr	r3, [pc, #304]	; (81009e8 <SetMotorPWM+0x1c4>)
 81008b8:	681b      	ldr	r3, [r3, #0]
 81008ba:	68fa      	ldr	r2, [r7, #12]
 81008bc:	639a      	str	r2, [r3, #56]	; 0x38
 81008be:	e021      	b.n	8100904 <SetMotorPWM+0xe0>
	}
	else if(motor->motor2 <= MIN_MOTOR_PWM)
 81008c0:	687b      	ldr	r3, [r7, #4]
 81008c2:	edd3 7a01 	vldr	s15, [r3, #4]
 81008c6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 81009ec <SetMotorPWM+0x1c8>
 81008ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 81008ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81008d2:	d809      	bhi.n	81008e8 <SetMotorPWM+0xc4>
	{
		pwm_value = MicrosToTicks(MIN_MOTOR_PWM);
 81008d4:	f240 4024 	movw	r0, #1060	; 0x424
 81008d8:	f000 f88a 	bl	81009f0 <MicrosToTicks>
 81008dc:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR2 = pwm_value;
 81008de:	4b42      	ldr	r3, [pc, #264]	; (81009e8 <SetMotorPWM+0x1c4>)
 81008e0:	681b      	ldr	r3, [r3, #0]
 81008e2:	68fa      	ldr	r2, [r7, #12]
 81008e4:	639a      	str	r2, [r3, #56]	; 0x38
 81008e6:	e00d      	b.n	8100904 <SetMotorPWM+0xe0>
	}
	else
	{
		pwm_value = MicrosToTicks(motor->motor2);
 81008e8:	687b      	ldr	r3, [r7, #4]
 81008ea:	edd3 7a01 	vldr	s15, [r3, #4]
 81008ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81008f2:	ee17 0a90 	vmov	r0, s15
 81008f6:	f000 f87b 	bl	81009f0 <MicrosToTicks>
 81008fa:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR2 = pwm_value;
 81008fc:	4b3a      	ldr	r3, [pc, #232]	; (81009e8 <SetMotorPWM+0x1c4>)
 81008fe:	681b      	ldr	r3, [r3, #0]
 8100900:	68fa      	ldr	r2, [r7, #12]
 8100902:	639a      	str	r2, [r3, #56]	; 0x38
	}

	if(motor->motor3 >= MAX_MOTOR_PWM)
 8100904:	687b      	ldr	r3, [r7, #4]
 8100906:	edd3 7a02 	vldr	s15, [r3, #8]
 810090a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 81009e4 <SetMotorPWM+0x1c0>
 810090e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8100912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100916:	db09      	blt.n	810092c <SetMotorPWM+0x108>
	{
		pwm_value = MicrosToTicks(MAX_MOTOR_PWM);
 8100918:	f240 7044 	movw	r0, #1860	; 0x744
 810091c:	f000 f868 	bl	81009f0 <MicrosToTicks>
 8100920:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR3 = pwm_value;
 8100922:	4b31      	ldr	r3, [pc, #196]	; (81009e8 <SetMotorPWM+0x1c4>)
 8100924:	681b      	ldr	r3, [r3, #0]
 8100926:	68fa      	ldr	r2, [r7, #12]
 8100928:	63da      	str	r2, [r3, #60]	; 0x3c
 810092a:	e021      	b.n	8100970 <SetMotorPWM+0x14c>
	}
	else if(motor->motor3 <= MIN_MOTOR_PWM)
 810092c:	687b      	ldr	r3, [r7, #4]
 810092e:	edd3 7a02 	vldr	s15, [r3, #8]
 8100932:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 81009ec <SetMotorPWM+0x1c8>
 8100936:	eef4 7ac7 	vcmpe.f32	s15, s14
 810093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 810093e:	d809      	bhi.n	8100954 <SetMotorPWM+0x130>
	{
		pwm_value = MicrosToTicks(MIN_MOTOR_PWM);
 8100940:	f240 4024 	movw	r0, #1060	; 0x424
 8100944:	f000 f854 	bl	81009f0 <MicrosToTicks>
 8100948:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR3 = pwm_value;
 810094a:	4b27      	ldr	r3, [pc, #156]	; (81009e8 <SetMotorPWM+0x1c4>)
 810094c:	681b      	ldr	r3, [r3, #0]
 810094e:	68fa      	ldr	r2, [r7, #12]
 8100950:	63da      	str	r2, [r3, #60]	; 0x3c
 8100952:	e00d      	b.n	8100970 <SetMotorPWM+0x14c>
	}
	else
	{
		pwm_value = MicrosToTicks(motor->motor3);
 8100954:	687b      	ldr	r3, [r7, #4]
 8100956:	edd3 7a02 	vldr	s15, [r3, #8]
 810095a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810095e:	ee17 0a90 	vmov	r0, s15
 8100962:	f000 f845 	bl	81009f0 <MicrosToTicks>
 8100966:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR3 = pwm_value;
 8100968:	4b1f      	ldr	r3, [pc, #124]	; (81009e8 <SetMotorPWM+0x1c4>)
 810096a:	681b      	ldr	r3, [r3, #0]
 810096c:	68fa      	ldr	r2, [r7, #12]
 810096e:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	if(motor->motor4 >= MAX_MOTOR_PWM)
 8100970:	687b      	ldr	r3, [r7, #4]
 8100972:	edd3 7a03 	vldr	s15, [r3, #12]
 8100976:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 81009e4 <SetMotorPWM+0x1c0>
 810097a:	eef4 7ac7 	vcmpe.f32	s15, s14
 810097e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100982:	db09      	blt.n	8100998 <SetMotorPWM+0x174>
	{
		pwm_value = MicrosToTicks(MAX_MOTOR_PWM);
 8100984:	f240 7044 	movw	r0, #1860	; 0x744
 8100988:	f000 f832 	bl	81009f0 <MicrosToTicks>
 810098c:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR4 = pwm_value;
 810098e:	4b16      	ldr	r3, [pc, #88]	; (81009e8 <SetMotorPWM+0x1c4>)
 8100990:	681b      	ldr	r3, [r3, #0]
 8100992:	68fa      	ldr	r2, [r7, #12]
 8100994:	641a      	str	r2, [r3, #64]	; 0x40
		pwm_value = MicrosToTicks(motor->motor4);
		htim1.Instance->CCR4 = pwm_value;
	}


}
 8100996:	e021      	b.n	81009dc <SetMotorPWM+0x1b8>
	else if(motor->motor4 <= MIN_MOTOR_PWM)
 8100998:	687b      	ldr	r3, [r7, #4]
 810099a:	edd3 7a03 	vldr	s15, [r3, #12]
 810099e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 81009ec <SetMotorPWM+0x1c8>
 81009a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 81009a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81009aa:	d809      	bhi.n	81009c0 <SetMotorPWM+0x19c>
		pwm_value = MicrosToTicks(MIN_MOTOR_PWM);
 81009ac:	f240 4024 	movw	r0, #1060	; 0x424
 81009b0:	f000 f81e 	bl	81009f0 <MicrosToTicks>
 81009b4:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR4 = pwm_value;
 81009b6:	4b0c      	ldr	r3, [pc, #48]	; (81009e8 <SetMotorPWM+0x1c4>)
 81009b8:	681b      	ldr	r3, [r3, #0]
 81009ba:	68fa      	ldr	r2, [r7, #12]
 81009bc:	641a      	str	r2, [r3, #64]	; 0x40
}
 81009be:	e00d      	b.n	81009dc <SetMotorPWM+0x1b8>
		pwm_value = MicrosToTicks(motor->motor4);
 81009c0:	687b      	ldr	r3, [r7, #4]
 81009c2:	edd3 7a03 	vldr	s15, [r3, #12]
 81009c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81009ca:	ee17 0a90 	vmov	r0, s15
 81009ce:	f000 f80f 	bl	81009f0 <MicrosToTicks>
 81009d2:	60f8      	str	r0, [r7, #12]
		htim1.Instance->CCR4 = pwm_value;
 81009d4:	4b04      	ldr	r3, [pc, #16]	; (81009e8 <SetMotorPWM+0x1c4>)
 81009d6:	681b      	ldr	r3, [r3, #0]
 81009d8:	68fa      	ldr	r2, [r7, #12]
 81009da:	641a      	str	r2, [r3, #64]	; 0x40
}
 81009dc:	bf00      	nop
 81009de:	3710      	adds	r7, #16
 81009e0:	46bd      	mov	sp, r7
 81009e2:	bd80      	pop	{r7, pc}
 81009e4:	44e88000 	.word	0x44e88000
 81009e8:	10004994 	.word	0x10004994
 81009ec:	44848000 	.word	0x44848000

081009f0 <MicrosToTicks>:
	motor->motor3 = pwm_value;
	motor->motor4 = pwm_value;

}
uint32_t MicrosToTicks(uint32_t pulse_width)
{
 81009f0:	b480      	push	{r7}
 81009f2:	b085      	sub	sp, #20
 81009f4:	af00      	add	r7, sp, #0
 81009f6:	6078      	str	r0, [r7, #4]

	 uint32_t ticks = pulse_width/ TICKS_PER_US;
 81009f8:	687b      	ldr	r3, [r7, #4]
 81009fa:	ee07 3a90 	vmov	s15, r3
 81009fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100a02:	eddf 6a08 	vldr	s13, [pc, #32]	; 8100a24 <MicrosToTicks+0x34>
 8100a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8100a0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100a0e:	ee17 3a90 	vmov	r3, s15
 8100a12:	60fb      	str	r3, [r7, #12]

	 return ticks;
 8100a14:	68fb      	ldr	r3, [r7, #12]

}
 8100a16:	4618      	mov	r0, r3
 8100a18:	3714      	adds	r7, #20
 8100a1a:	46bd      	mov	sp, r7
 8100a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a20:	4770      	bx	lr
 8100a22:	bf00      	nop
 8100a24:	3e68ba2f 	.word	0x3e68ba2f

08100a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100a28:	b580      	push	{r7, lr}
 8100a2a:	b082      	sub	sp, #8
 8100a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100a2e:	4b14      	ldr	r3, [pc, #80]	; (8100a80 <HAL_MspInit+0x58>)
 8100a30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a34:	4a12      	ldr	r2, [pc, #72]	; (8100a80 <HAL_MspInit+0x58>)
 8100a36:	f043 0302 	orr.w	r3, r3, #2
 8100a3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100a3e:	4b10      	ldr	r3, [pc, #64]	; (8100a80 <HAL_MspInit+0x58>)
 8100a40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100a44:	f003 0302 	and.w	r3, r3, #2
 8100a48:	607b      	str	r3, [r7, #4]
 8100a4a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8100a4c:	2200      	movs	r2, #0
 8100a4e:	210f      	movs	r1, #15
 8100a50:	f06f 0001 	mvn.w	r0, #1
 8100a54:	f000 fbf2 	bl	810123c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM7_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM7_SEV_IRQn, 0, 0);
 8100a58:	2200      	movs	r2, #0
 8100a5a:	2100      	movs	r1, #0
 8100a5c:	2040      	movs	r0, #64	; 0x40
 8100a5e:	f000 fbed 	bl	810123c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM7_SEV_IRQn);
 8100a62:	2040      	movs	r0, #64	; 0x40
 8100a64:	f000 fc04 	bl	8101270 <HAL_NVIC_EnableIRQ>
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 5, 0);
 8100a68:	2200      	movs	r2, #0
 8100a6a:	2105      	movs	r1, #5
 8100a6c:	207e      	movs	r0, #126	; 0x7e
 8100a6e:	f000 fbe5 	bl	810123c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100a72:	207e      	movs	r0, #126	; 0x7e
 8100a74:	f000 fbfc 	bl	8101270 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100a78:	bf00      	nop
 8100a7a:	3708      	adds	r7, #8
 8100a7c:	46bd      	mov	sp, r7
 8100a7e:	bd80      	pop	{r7, pc}
 8100a80:	58024400 	.word	0x58024400

08100a84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a84:	b580      	push	{r7, lr}
 8100a86:	b08e      	sub	sp, #56	; 0x38
 8100a88:	af00      	add	r7, sp, #0
 8100a8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8100a8c:	2300      	movs	r3, #0
 8100a8e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8100a90:	2300      	movs	r3, #0
 8100a92:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8100a94:	2200      	movs	r2, #0
 8100a96:	6879      	ldr	r1, [r7, #4]
 8100a98:	2037      	movs	r0, #55	; 0x37
 8100a9a:	f000 fbcf 	bl	810123c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8100a9e:	2037      	movs	r0, #55	; 0x37
 8100aa0:	f000 fbe6 	bl	8101270 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8100aa4:	4b21      	ldr	r3, [pc, #132]	; (8100b2c <HAL_InitTick+0xa8>)
 8100aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100aaa:	4a20      	ldr	r2, [pc, #128]	; (8100b2c <HAL_InitTick+0xa8>)
 8100aac:	f043 0320 	orr.w	r3, r3, #32
 8100ab0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100ab4:	4b1d      	ldr	r3, [pc, #116]	; (8100b2c <HAL_InitTick+0xa8>)
 8100ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100aba:	f003 0320 	and.w	r3, r3, #32
 8100abe:	60bb      	str	r3, [r7, #8]
 8100ac0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8100ac2:	f107 020c 	add.w	r2, r7, #12
 8100ac6:	f107 0310 	add.w	r3, r7, #16
 8100aca:	4611      	mov	r1, r2
 8100acc:	4618      	mov	r0, r3
 8100ace:	f001 f845 	bl	8101b5c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8100ad2:	f001 f817 	bl	8101b04 <HAL_RCC_GetPCLK1Freq>
 8100ad6:	4603      	mov	r3, r0
 8100ad8:	005b      	lsls	r3, r3, #1
 8100ada:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8100adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100ade:	4a14      	ldr	r2, [pc, #80]	; (8100b30 <HAL_InitTick+0xac>)
 8100ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8100ae4:	0c9b      	lsrs	r3, r3, #18
 8100ae6:	3b01      	subs	r3, #1
 8100ae8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8100aea:	4b12      	ldr	r3, [pc, #72]	; (8100b34 <HAL_InitTick+0xb0>)
 8100aec:	4a12      	ldr	r2, [pc, #72]	; (8100b38 <HAL_InitTick+0xb4>)
 8100aee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8100af0:	4b10      	ldr	r3, [pc, #64]	; (8100b34 <HAL_InitTick+0xb0>)
 8100af2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8100af6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8100af8:	4a0e      	ldr	r2, [pc, #56]	; (8100b34 <HAL_InitTick+0xb0>)
 8100afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100afc:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8100afe:	4b0d      	ldr	r3, [pc, #52]	; (8100b34 <HAL_InitTick+0xb0>)
 8100b00:	2200      	movs	r2, #0
 8100b02:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100b04:	4b0b      	ldr	r3, [pc, #44]	; (8100b34 <HAL_InitTick+0xb0>)
 8100b06:	2200      	movs	r2, #0
 8100b08:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8100b0a:	480a      	ldr	r0, [pc, #40]	; (8100b34 <HAL_InitTick+0xb0>)
 8100b0c:	f001 fb16 	bl	810213c <HAL_TIM_Base_Init>
 8100b10:	4603      	mov	r3, r0
 8100b12:	2b00      	cmp	r3, #0
 8100b14:	d104      	bne.n	8100b20 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8100b16:	4807      	ldr	r0, [pc, #28]	; (8100b34 <HAL_InitTick+0xb0>)
 8100b18:	f001 fb68 	bl	81021ec <HAL_TIM_Base_Start_IT>
 8100b1c:	4603      	mov	r3, r0
 8100b1e:	e000      	b.n	8100b22 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8100b20:	2301      	movs	r3, #1
}
 8100b22:	4618      	mov	r0, r3
 8100b24:	3738      	adds	r7, #56	; 0x38
 8100b26:	46bd      	mov	sp, r7
 8100b28:	bd80      	pop	{r7, pc}
 8100b2a:	bf00      	nop
 8100b2c:	58024400 	.word	0x58024400
 8100b30:	431bde83 	.word	0x431bde83
 8100b34:	10004948 	.word	0x10004948
 8100b38:	40001400 	.word	0x40001400

08100b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100b3c:	b480      	push	{r7}
 8100b3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8100b40:	bf00      	nop
 8100b42:	46bd      	mov	sp, r7
 8100b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b48:	4770      	bx	lr

08100b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100b4a:	b480      	push	{r7}
 8100b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100b4e:	e7fe      	b.n	8100b4e <HardFault_Handler+0x4>

08100b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100b50:	b480      	push	{r7}
 8100b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100b54:	e7fe      	b.n	8100b54 <MemManage_Handler+0x4>

08100b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100b56:	b480      	push	{r7}
 8100b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100b5a:	e7fe      	b.n	8100b5a <BusFault_Handler+0x4>

08100b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100b5c:	b480      	push	{r7}
 8100b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100b60:	e7fe      	b.n	8100b60 <UsageFault_Handler+0x4>

08100b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100b62:	b480      	push	{r7}
 8100b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100b66:	bf00      	nop
 8100b68:	46bd      	mov	sp, r7
 8100b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b6e:	4770      	bx	lr

08100b70 <CM7_SEV_IRQHandler>:

/**
  * @brief This function handles CM7 send event interrupt for CM4.
  */
void CM7_SEV_IRQHandler(void)
{
 8100b70:	b480      	push	{r7}
 8100b72:	af00      	add	r7, sp, #0

  /* USER CODE END CM7_SEV_IRQn 0 */
  /* USER CODE BEGIN CM7_SEV_IRQn 1 */

  /* USER CODE END CM7_SEV_IRQn 1 */
}
 8100b74:	bf00      	nop
 8100b76:	46bd      	mov	sp, r7
 8100b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b7c:	4770      	bx	lr

08100b7e <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100b7e:	b580      	push	{r7, lr}
 8100b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8100b82:	f000 fd73 	bl	810166c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100b86:	bf00      	nop
 8100b88:	bd80      	pop	{r7, pc}
	...

08100b8c <TIM7_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8100b8c:	b580      	push	{r7, lr}
 8100b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8100b90:	4802      	ldr	r0, [pc, #8]	; (8100b9c <TIM7_IRQHandler+0x10>)
 8100b92:	f001 fc95 	bl	81024c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8100b96:	bf00      	nop
 8100b98:	bd80      	pop	{r7, pc}
 8100b9a:	bf00      	nop
 8100b9c:	10004948 	.word	0x10004948

08100ba0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8100ba0:	b580      	push	{r7, lr}
 8100ba2:	b09a      	sub	sp, #104	; 0x68
 8100ba4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8100ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100baa:	2200      	movs	r2, #0
 8100bac:	601a      	str	r2, [r3, #0]
 8100bae:	605a      	str	r2, [r3, #4]
 8100bb0:	609a      	str	r2, [r3, #8]
 8100bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100bb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100bb8:	2200      	movs	r2, #0
 8100bba:	601a      	str	r2, [r3, #0]
 8100bbc:	605a      	str	r2, [r3, #4]
 8100bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100bc4:	2200      	movs	r2, #0
 8100bc6:	601a      	str	r2, [r3, #0]
 8100bc8:	605a      	str	r2, [r3, #4]
 8100bca:	609a      	str	r2, [r3, #8]
 8100bcc:	60da      	str	r2, [r3, #12]
 8100bce:	611a      	str	r2, [r3, #16]
 8100bd0:	615a      	str	r2, [r3, #20]
 8100bd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100bd4:	1d3b      	adds	r3, r7, #4
 8100bd6:	222c      	movs	r2, #44	; 0x2c
 8100bd8:	2100      	movs	r1, #0
 8100bda:	4618      	mov	r0, r3
 8100bdc:	f006 fadf 	bl	810719e <memset>

  htim1.Instance = TIM1;
 8100be0:	4b58      	ldr	r3, [pc, #352]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100be2:	4a59      	ldr	r2, [pc, #356]	; (8100d48 <MX_TIM1_Init+0x1a8>)
 8100be4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54; //2400;//54;
 8100be6:	4b57      	ldr	r3, [pc, #348]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100be8:	2236      	movs	r2, #54	; 0x36
 8100bea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100bec:	4b55      	ldr	r3, [pc, #340]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100bee:	2200      	movs	r2, #0
 8100bf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11000, //2000; //11000
 8100bf2:	4b54      	ldr	r3, [pc, #336]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100bf4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8100bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100bfa:	4b52      	ldr	r3, [pc, #328]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100bfc:	2200      	movs	r2, #0
 8100bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8100c00:	4b50      	ldr	r3, [pc, #320]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c02:	2200      	movs	r2, #0
 8100c04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100c06:	4b4f      	ldr	r3, [pc, #316]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c08:	2200      	movs	r2, #0
 8100c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8100c0c:	484d      	ldr	r0, [pc, #308]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c0e:	f001 fa95 	bl	810213c <HAL_TIM_Base_Init>
 8100c12:	4603      	mov	r3, r0
 8100c14:	2b00      	cmp	r3, #0
 8100c16:	d001      	beq.n	8100c1c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8100c18:	f7ff fdfc 	bl	8100814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8100c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100c20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8100c22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8100c26:	4619      	mov	r1, r3
 8100c28:	4846      	ldr	r0, [pc, #280]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c2a:	f001 fe79 	bl	8102920 <HAL_TIM_ConfigClockSource>
 8100c2e:	4603      	mov	r3, r0
 8100c30:	2b00      	cmp	r3, #0
 8100c32:	d001      	beq.n	8100c38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8100c34:	f7ff fdee 	bl	8100814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8100c38:	4842      	ldr	r0, [pc, #264]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c3a:	f001 fb0d 	bl	8102258 <HAL_TIM_PWM_Init>
 8100c3e:	4603      	mov	r3, r0
 8100c40:	2b00      	cmp	r3, #0
 8100c42:	d001      	beq.n	8100c48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8100c44:	f7ff fde6 	bl	8100814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100c48:	2300      	movs	r3, #0
 8100c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100c4c:	2300      	movs	r3, #0
 8100c4e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100c50:	2300      	movs	r3, #0
 8100c52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8100c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100c58:	4619      	mov	r1, r3
 8100c5a:	483a      	ldr	r0, [pc, #232]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c5c:	f002 fb82 	bl	8103364 <HAL_TIMEx_MasterConfigSynchronization>
 8100c60:	4603      	mov	r3, r0
 8100c62:	2b00      	cmp	r3, #0
 8100c64:	d001      	beq.n	8100c6a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8100c66:	f7ff fdd5 	bl	8100814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8100c6a:	2360      	movs	r3, #96	; 0x60
 8100c6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = htim1.Init.Period /12;
 8100c6e:	4b35      	ldr	r3, [pc, #212]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c70:	68db      	ldr	r3, [r3, #12]
 8100c72:	4a36      	ldr	r2, [pc, #216]	; (8100d4c <MX_TIM1_Init+0x1ac>)
 8100c74:	fba2 2303 	umull	r2, r3, r2, r3
 8100c78:	08db      	lsrs	r3, r3, #3
 8100c7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100c7c:	2300      	movs	r3, #0
 8100c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100c80:	2300      	movs	r3, #0
 8100c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100c84:	2300      	movs	r3, #0
 8100c86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100c88:	2300      	movs	r3, #0
 8100c8a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100c8c:	2300      	movs	r3, #0
 8100c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8100c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100c94:	2200      	movs	r2, #0
 8100c96:	4619      	mov	r1, r3
 8100c98:	482a      	ldr	r0, [pc, #168]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100c9a:	f001 fd31 	bl	8102700 <HAL_TIM_PWM_ConfigChannel>
 8100c9e:	4603      	mov	r3, r0
 8100ca0:	2b00      	cmp	r3, #0
 8100ca2:	d001      	beq.n	8100ca8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8100ca4:	f7ff fdb6 	bl	8100814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100ca8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100cac:	2204      	movs	r2, #4
 8100cae:	4619      	mov	r1, r3
 8100cb0:	4824      	ldr	r0, [pc, #144]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100cb2:	f001 fd25 	bl	8102700 <HAL_TIM_PWM_ConfigChannel>
 8100cb6:	4603      	mov	r3, r0
 8100cb8:	2b00      	cmp	r3, #0
 8100cba:	d001      	beq.n	8100cc0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8100cbc:	f7ff fdaa 	bl	8100814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8100cc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100cc4:	2208      	movs	r2, #8
 8100cc6:	4619      	mov	r1, r3
 8100cc8:	481e      	ldr	r0, [pc, #120]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100cca:	f001 fd19 	bl	8102700 <HAL_TIM_PWM_ConfigChannel>
 8100cce:	4603      	mov	r3, r0
 8100cd0:	2b00      	cmp	r3, #0
 8100cd2:	d001      	beq.n	8100cd8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8100cd4:	f7ff fd9e 	bl	8100814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8100cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100cdc:	220c      	movs	r2, #12
 8100cde:	4619      	mov	r1, r3
 8100ce0:	4818      	ldr	r0, [pc, #96]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100ce2:	f001 fd0d 	bl	8102700 <HAL_TIM_PWM_ConfigChannel>
 8100ce6:	4603      	mov	r3, r0
 8100ce8:	2b00      	cmp	r3, #0
 8100cea:	d001      	beq.n	8100cf0 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8100cec:	f7ff fd92 	bl	8100814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100cf0:	2300      	movs	r3, #0
 8100cf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100cf4:	2300      	movs	r3, #0
 8100cf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100cf8:	2300      	movs	r3, #0
 8100cfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100cfc:	2300      	movs	r3, #0
 8100cfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100d00:	2300      	movs	r3, #0
 8100d02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100d08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100d0a:	2300      	movs	r3, #0
 8100d0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100d0e:	2300      	movs	r3, #0
 8100d10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100d16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100d18:	2300      	movs	r3, #0
 8100d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100d1c:	2300      	movs	r3, #0
 8100d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8100d20:	1d3b      	adds	r3, r7, #4
 8100d22:	4619      	mov	r1, r3
 8100d24:	4807      	ldr	r0, [pc, #28]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100d26:	f002 fba5 	bl	8103474 <HAL_TIMEx_ConfigBreakDeadTime>
 8100d2a:	4603      	mov	r3, r0
 8100d2c:	2b00      	cmp	r3, #0
 8100d2e:	d001      	beq.n	8100d34 <MX_TIM1_Init+0x194>
  {
    Error_Handler();
 8100d30:	f7ff fd70 	bl	8100814 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8100d34:	4803      	ldr	r0, [pc, #12]	; (8100d44 <MX_TIM1_Init+0x1a4>)
 8100d36:	f000 f82d 	bl	8100d94 <HAL_TIM_MspPostInit>

}
 8100d3a:	bf00      	nop
 8100d3c:	3768      	adds	r7, #104	; 0x68
 8100d3e:	46bd      	mov	sp, r7
 8100d40:	bd80      	pop	{r7, pc}
 8100d42:	bf00      	nop
 8100d44:	10004994 	.word	0x10004994
 8100d48:	40010000 	.word	0x40010000
 8100d4c:	aaaaaaab 	.word	0xaaaaaaab

08100d50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8100d50:	b480      	push	{r7}
 8100d52:	b085      	sub	sp, #20
 8100d54:	af00      	add	r7, sp, #0
 8100d56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	681b      	ldr	r3, [r3, #0]
 8100d5c:	4a0b      	ldr	r2, [pc, #44]	; (8100d8c <HAL_TIM_Base_MspInit+0x3c>)
 8100d5e:	4293      	cmp	r3, r2
 8100d60:	d10e      	bne.n	8100d80 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8100d62:	4b0b      	ldr	r3, [pc, #44]	; (8100d90 <HAL_TIM_Base_MspInit+0x40>)
 8100d64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100d68:	4a09      	ldr	r2, [pc, #36]	; (8100d90 <HAL_TIM_Base_MspInit+0x40>)
 8100d6a:	f043 0301 	orr.w	r3, r3, #1
 8100d6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100d72:	4b07      	ldr	r3, [pc, #28]	; (8100d90 <HAL_TIM_Base_MspInit+0x40>)
 8100d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100d78:	f003 0301 	and.w	r3, r3, #1
 8100d7c:	60fb      	str	r3, [r7, #12]
 8100d7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8100d80:	bf00      	nop
 8100d82:	3714      	adds	r7, #20
 8100d84:	46bd      	mov	sp, r7
 8100d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d8a:	4770      	bx	lr
 8100d8c:	40010000 	.word	0x40010000
 8100d90:	58024400 	.word	0x58024400

08100d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8100d94:	b580      	push	{r7, lr}
 8100d96:	b08a      	sub	sp, #40	; 0x28
 8100d98:	af00      	add	r7, sp, #0
 8100d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100d9c:	f107 0314 	add.w	r3, r7, #20
 8100da0:	2200      	movs	r2, #0
 8100da2:	601a      	str	r2, [r3, #0]
 8100da4:	605a      	str	r2, [r3, #4]
 8100da6:	609a      	str	r2, [r3, #8]
 8100da8:	60da      	str	r2, [r3, #12]
 8100daa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8100dac:	687b      	ldr	r3, [r7, #4]
 8100dae:	681b      	ldr	r3, [r3, #0]
 8100db0:	4a23      	ldr	r2, [pc, #140]	; (8100e40 <HAL_TIM_MspPostInit+0xac>)
 8100db2:	4293      	cmp	r3, r2
 8100db4:	d13f      	bne.n	8100e36 <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8100db6:	4b23      	ldr	r3, [pc, #140]	; (8100e44 <HAL_TIM_MspPostInit+0xb0>)
 8100db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dbc:	4a21      	ldr	r2, [pc, #132]	; (8100e44 <HAL_TIM_MspPostInit+0xb0>)
 8100dbe:	f043 0310 	orr.w	r3, r3, #16
 8100dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100dc6:	4b1f      	ldr	r3, [pc, #124]	; (8100e44 <HAL_TIM_MspPostInit+0xb0>)
 8100dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dcc:	f003 0310 	and.w	r3, r3, #16
 8100dd0:	613b      	str	r3, [r7, #16]
 8100dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100dd4:	4b1b      	ldr	r3, [pc, #108]	; (8100e44 <HAL_TIM_MspPostInit+0xb0>)
 8100dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dda:	4a1a      	ldr	r2, [pc, #104]	; (8100e44 <HAL_TIM_MspPostInit+0xb0>)
 8100ddc:	f043 0301 	orr.w	r3, r3, #1
 8100de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100de4:	4b17      	ldr	r3, [pc, #92]	; (8100e44 <HAL_TIM_MspPostInit+0xb0>)
 8100de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100dea:	f003 0301 	and.w	r3, r3, #1
 8100dee:	60fb      	str	r3, [r7, #12]
 8100df0:	68fb      	ldr	r3, [r7, #12]
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8100df2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8100df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100df8:	2302      	movs	r3, #2
 8100dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100dfc:	2300      	movs	r3, #0
 8100dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e00:	2300      	movs	r3, #0
 8100e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8100e04:	2301      	movs	r3, #1
 8100e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100e08:	f107 0314 	add.w	r3, r7, #20
 8100e0c:	4619      	mov	r1, r3
 8100e0e:	480e      	ldr	r0, [pc, #56]	; (8100e48 <HAL_TIM_MspPostInit+0xb4>)
 8100e10:	f000 fa50 	bl	81012b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8100e14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8100e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e1a:	2302      	movs	r3, #2
 8100e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e1e:	2300      	movs	r3, #0
 8100e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e22:	2300      	movs	r3, #0
 8100e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8100e26:	2301      	movs	r3, #1
 8100e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8100e2a:	f107 0314 	add.w	r3, r7, #20
 8100e2e:	4619      	mov	r1, r3
 8100e30:	4806      	ldr	r0, [pc, #24]	; (8100e4c <HAL_TIM_MspPostInit+0xb8>)
 8100e32:	f000 fa3f 	bl	81012b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8100e36:	bf00      	nop
 8100e38:	3728      	adds	r7, #40	; 0x28
 8100e3a:	46bd      	mov	sp, r7
 8100e3c:	bd80      	pop	{r7, pc}
 8100e3e:	bf00      	nop
 8100e40:	40010000 	.word	0x40010000
 8100e44:	58024400 	.word	0x58024400
 8100e48:	58021000 	.word	0x58021000
 8100e4c:	58020000 	.word	0x58020000

08100e50 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8100e50:	b580      	push	{r7, lr}
 8100e52:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8100e54:	4b22      	ldr	r3, [pc, #136]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e56:	4a23      	ldr	r2, [pc, #140]	; (8100ee4 <MX_USART3_UART_Init+0x94>)
 8100e58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100e5a:	4b21      	ldr	r3, [pc, #132]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100e60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100e62:	4b1f      	ldr	r3, [pc, #124]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e64:	2200      	movs	r2, #0
 8100e66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100e68:	4b1d      	ldr	r3, [pc, #116]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e6a:	2200      	movs	r2, #0
 8100e6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100e6e:	4b1c      	ldr	r3, [pc, #112]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e70:	2200      	movs	r2, #0
 8100e72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100e74:	4b1a      	ldr	r3, [pc, #104]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e76:	220c      	movs	r2, #12
 8100e78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100e7a:	4b19      	ldr	r3, [pc, #100]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100e80:	4b17      	ldr	r3, [pc, #92]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e82:	2200      	movs	r2, #0
 8100e84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100e86:	4b16      	ldr	r3, [pc, #88]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e88:	2200      	movs	r2, #0
 8100e8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100e8c:	4b14      	ldr	r3, [pc, #80]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e8e:	2200      	movs	r2, #0
 8100e90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100e92:	4b13      	ldr	r3, [pc, #76]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e94:	2200      	movs	r2, #0
 8100e96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100e98:	4811      	ldr	r0, [pc, #68]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100e9a:	f002 fb87 	bl	81035ac <HAL_UART_Init>
 8100e9e:	4603      	mov	r3, r0
 8100ea0:	2b00      	cmp	r3, #0
 8100ea2:	d001      	beq.n	8100ea8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100ea4:	f7ff fcb6 	bl	8100814 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100ea8:	2100      	movs	r1, #0
 8100eaa:	480d      	ldr	r0, [pc, #52]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100eac:	f003 fb21 	bl	81044f2 <HAL_UARTEx_SetTxFifoThreshold>
 8100eb0:	4603      	mov	r3, r0
 8100eb2:	2b00      	cmp	r3, #0
 8100eb4:	d001      	beq.n	8100eba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100eb6:	f7ff fcad 	bl	8100814 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100eba:	2100      	movs	r1, #0
 8100ebc:	4808      	ldr	r0, [pc, #32]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100ebe:	f003 fb56 	bl	810456e <HAL_UARTEx_SetRxFifoThreshold>
 8100ec2:	4603      	mov	r3, r0
 8100ec4:	2b00      	cmp	r3, #0
 8100ec6:	d001      	beq.n	8100ecc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100ec8:	f7ff fca4 	bl	8100814 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100ecc:	4804      	ldr	r0, [pc, #16]	; (8100ee0 <MX_USART3_UART_Init+0x90>)
 8100ece:	f003 fad7 	bl	8104480 <HAL_UARTEx_DisableFifoMode>
 8100ed2:	4603      	mov	r3, r0
 8100ed4:	2b00      	cmp	r3, #0
 8100ed6:	d001      	beq.n	8100edc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100ed8:	f7ff fc9c 	bl	8100814 <Error_Handler>
  }

}
 8100edc:	bf00      	nop
 8100ede:	bd80      	pop	{r7, pc}
 8100ee0:	100049e0 	.word	0x100049e0
 8100ee4:	40004800 	.word	0x40004800

08100ee8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	b08a      	sub	sp, #40	; 0x28
 8100eec:	af00      	add	r7, sp, #0
 8100eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ef0:	f107 0314 	add.w	r3, r7, #20
 8100ef4:	2200      	movs	r2, #0
 8100ef6:	601a      	str	r2, [r3, #0]
 8100ef8:	605a      	str	r2, [r3, #4]
 8100efa:	609a      	str	r2, [r3, #8]
 8100efc:	60da      	str	r2, [r3, #12]
 8100efe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8100f00:	687b      	ldr	r3, [r7, #4]
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	4a1a      	ldr	r2, [pc, #104]	; (8100f70 <HAL_UART_MspInit+0x88>)
 8100f06:	4293      	cmp	r3, r2
 8100f08:	d12e      	bne.n	8100f68 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100f0a:	4b1a      	ldr	r3, [pc, #104]	; (8100f74 <HAL_UART_MspInit+0x8c>)
 8100f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f10:	4a18      	ldr	r2, [pc, #96]	; (8100f74 <HAL_UART_MspInit+0x8c>)
 8100f12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100f16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f1a:	4b16      	ldr	r3, [pc, #88]	; (8100f74 <HAL_UART_MspInit+0x8c>)
 8100f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100f24:	613b      	str	r3, [r7, #16]
 8100f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f28:	4b12      	ldr	r3, [pc, #72]	; (8100f74 <HAL_UART_MspInit+0x8c>)
 8100f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f2e:	4a11      	ldr	r2, [pc, #68]	; (8100f74 <HAL_UART_MspInit+0x8c>)
 8100f30:	f043 0302 	orr.w	r3, r3, #2
 8100f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f38:	4b0e      	ldr	r3, [pc, #56]	; (8100f74 <HAL_UART_MspInit+0x8c>)
 8100f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f3e:	f003 0302 	and.w	r3, r3, #2
 8100f42:	60fb      	str	r3, [r7, #12]
 8100f44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8100f46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f4c:	2302      	movs	r3, #2
 8100f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f50:	2300      	movs	r3, #0
 8100f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f54:	2300      	movs	r3, #0
 8100f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100f58:	2307      	movs	r3, #7
 8100f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100f5c:	f107 0314 	add.w	r3, r7, #20
 8100f60:	4619      	mov	r1, r3
 8100f62:	4805      	ldr	r0, [pc, #20]	; (8100f78 <HAL_UART_MspInit+0x90>)
 8100f64:	f000 f9a6 	bl	81012b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8100f68:	bf00      	nop
 8100f6a:	3728      	adds	r7, #40	; 0x28
 8100f6c:	46bd      	mov	sp, r7
 8100f6e:	bd80      	pop	{r7, pc}
 8100f70:	40004800 	.word	0x40004800
 8100f74:	58024400 	.word	0x58024400
 8100f78:	58020400 	.word	0x58020400

08100f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8100f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100fb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8100f80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8100f82:	e003      	b.n	8100f8c <LoopCopyDataInit>

08100f84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8100f84:	4b0c      	ldr	r3, [pc, #48]	; (8100fb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8100f86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8100f88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8100f8a:	3104      	adds	r1, #4

08100f8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8100f8c:	480b      	ldr	r0, [pc, #44]	; (8100fbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8100f8e:	4b0c      	ldr	r3, [pc, #48]	; (8100fc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8100f90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8100f92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8100f94:	d3f6      	bcc.n	8100f84 <CopyDataInit>
  ldr  r2, =_sbss
 8100f96:	4a0b      	ldr	r2, [pc, #44]	; (8100fc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8100f98:	e002      	b.n	8100fa0 <LoopFillZerobss>

08100f9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8100f9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8100f9c:	f842 3b04 	str.w	r3, [r2], #4

08100fa0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8100fa0:	4b09      	ldr	r3, [pc, #36]	; (8100fc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8100fa2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8100fa4:	d3f9      	bcc.n	8100f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8100fa6:	f7ff fb1b 	bl	81005e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8100faa:	f006 f8c9 	bl	8107140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100fae:	f7ff fbc3 	bl	8100738 <main>
  bx  lr    
 8100fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100fb4:	10048000 	.word	0x10048000
  ldr  r3, =_sidata
 8100fb8:	08107258 	.word	0x08107258
  ldr  r0, =_sdata
 8100fbc:	10000000 	.word	0x10000000
  ldr  r3, =_edata
 8100fc0:	10000010 	.word	0x10000010
  ldr  r2, =_sbss
 8100fc4:	10000010 	.word	0x10000010
  ldr  r3, = _ebss
 8100fc8:	10004ab0 	.word	0x10004ab0

08100fcc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100fcc:	e7fe      	b.n	8100fcc <ADC3_IRQHandler>
	...

08100fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100fd0:	b580      	push	{r7, lr}
 8100fd2:	b082      	sub	sp, #8
 8100fd4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100fd6:	4b28      	ldr	r3, [pc, #160]	; (8101078 <HAL_Init+0xa8>)
 8100fd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100fdc:	4a26      	ldr	r2, [pc, #152]	; (8101078 <HAL_Init+0xa8>)
 8100fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100fe2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100fe6:	4b24      	ldr	r3, [pc, #144]	; (8101078 <HAL_Init+0xa8>)
 8100fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100ff0:	603b      	str	r3, [r7, #0]
 8100ff2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100ff4:	4b21      	ldr	r3, [pc, #132]	; (810107c <HAL_Init+0xac>)
 8100ff6:	681b      	ldr	r3, [r3, #0]
 8100ff8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100ffc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101000:	4a1e      	ldr	r2, [pc, #120]	; (810107c <HAL_Init+0xac>)
 8101002:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101006:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101008:	4b1c      	ldr	r3, [pc, #112]	; (810107c <HAL_Init+0xac>)
 810100a:	681b      	ldr	r3, [r3, #0]
 810100c:	4a1b      	ldr	r2, [pc, #108]	; (810107c <HAL_Init+0xac>)
 810100e:	f043 0301 	orr.w	r3, r3, #1
 8101012:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101014:	2003      	movs	r0, #3
 8101016:	f000 f906 	bl	8101226 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810101a:	f000 fbcf 	bl	81017bc <HAL_RCC_GetSysClockFreq>
 810101e:	4601      	mov	r1, r0
 8101020:	4b15      	ldr	r3, [pc, #84]	; (8101078 <HAL_Init+0xa8>)
 8101022:	699b      	ldr	r3, [r3, #24]
 8101024:	0a1b      	lsrs	r3, r3, #8
 8101026:	f003 030f 	and.w	r3, r3, #15
 810102a:	4a15      	ldr	r2, [pc, #84]	; (8101080 <HAL_Init+0xb0>)
 810102c:	5cd3      	ldrb	r3, [r2, r3]
 810102e:	f003 031f 	and.w	r3, r3, #31
 8101032:	fa21 f303 	lsr.w	r3, r1, r3
 8101036:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101038:	4b0f      	ldr	r3, [pc, #60]	; (8101078 <HAL_Init+0xa8>)
 810103a:	699b      	ldr	r3, [r3, #24]
 810103c:	f003 030f 	and.w	r3, r3, #15
 8101040:	4a0f      	ldr	r2, [pc, #60]	; (8101080 <HAL_Init+0xb0>)
 8101042:	5cd3      	ldrb	r3, [r2, r3]
 8101044:	f003 031f 	and.w	r3, r3, #31
 8101048:	687a      	ldr	r2, [r7, #4]
 810104a:	fa22 f303 	lsr.w	r3, r2, r3
 810104e:	4a0d      	ldr	r2, [pc, #52]	; (8101084 <HAL_Init+0xb4>)
 8101050:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101052:	4b0c      	ldr	r3, [pc, #48]	; (8101084 <HAL_Init+0xb4>)
 8101054:	681b      	ldr	r3, [r3, #0]
 8101056:	4a0c      	ldr	r2, [pc, #48]	; (8101088 <HAL_Init+0xb8>)
 8101058:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810105a:	2000      	movs	r0, #0
 810105c:	f7ff fd12 	bl	8100a84 <HAL_InitTick>
 8101060:	4603      	mov	r3, r0
 8101062:	2b00      	cmp	r3, #0
 8101064:	d001      	beq.n	810106a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101066:	2301      	movs	r3, #1
 8101068:	e002      	b.n	8101070 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810106a:	f7ff fcdd 	bl	8100a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810106e:	2300      	movs	r3, #0
}
 8101070:	4618      	mov	r0, r3
 8101072:	3708      	adds	r7, #8
 8101074:	46bd      	mov	sp, r7
 8101076:	bd80      	pop	{r7, pc}
 8101078:	58024400 	.word	0x58024400
 810107c:	40024400 	.word	0x40024400
 8101080:	081071fc 	.word	0x081071fc
 8101084:	10000004 	.word	0x10000004
 8101088:	10000000 	.word	0x10000000

0810108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810108c:	b480      	push	{r7}
 810108e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101090:	4b06      	ldr	r3, [pc, #24]	; (81010ac <HAL_IncTick+0x20>)
 8101092:	781b      	ldrb	r3, [r3, #0]
 8101094:	461a      	mov	r2, r3
 8101096:	4b06      	ldr	r3, [pc, #24]	; (81010b0 <HAL_IncTick+0x24>)
 8101098:	681b      	ldr	r3, [r3, #0]
 810109a:	4413      	add	r3, r2
 810109c:	4a04      	ldr	r2, [pc, #16]	; (81010b0 <HAL_IncTick+0x24>)
 810109e:	6013      	str	r3, [r2, #0]
}
 81010a0:	bf00      	nop
 81010a2:	46bd      	mov	sp, r7
 81010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010a8:	4770      	bx	lr
 81010aa:	bf00      	nop
 81010ac:	1000000a 	.word	0x1000000a
 81010b0:	10004a6c 	.word	0x10004a6c

081010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81010b4:	b480      	push	{r7}
 81010b6:	af00      	add	r7, sp, #0
  return uwTick;
 81010b8:	4b03      	ldr	r3, [pc, #12]	; (81010c8 <HAL_GetTick+0x14>)
 81010ba:	681b      	ldr	r3, [r3, #0]
}
 81010bc:	4618      	mov	r0, r3
 81010be:	46bd      	mov	sp, r7
 81010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010c4:	4770      	bx	lr
 81010c6:	bf00      	nop
 81010c8:	10004a6c 	.word	0x10004a6c

081010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81010cc:	b480      	push	{r7}
 81010ce:	b085      	sub	sp, #20
 81010d0:	af00      	add	r7, sp, #0
 81010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81010d4:	687b      	ldr	r3, [r7, #4]
 81010d6:	f003 0307 	and.w	r3, r3, #7
 81010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81010dc:	4b0c      	ldr	r3, [pc, #48]	; (8101110 <__NVIC_SetPriorityGrouping+0x44>)
 81010de:	68db      	ldr	r3, [r3, #12]
 81010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81010e2:	68ba      	ldr	r2, [r7, #8]
 81010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81010e8:	4013      	ands	r3, r2
 81010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81010ec:	68fb      	ldr	r3, [r7, #12]
 81010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81010f0:	68bb      	ldr	r3, [r7, #8]
 81010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81010fe:	4a04      	ldr	r2, [pc, #16]	; (8101110 <__NVIC_SetPriorityGrouping+0x44>)
 8101100:	68bb      	ldr	r3, [r7, #8]
 8101102:	60d3      	str	r3, [r2, #12]
}
 8101104:	bf00      	nop
 8101106:	3714      	adds	r7, #20
 8101108:	46bd      	mov	sp, r7
 810110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810110e:	4770      	bx	lr
 8101110:	e000ed00 	.word	0xe000ed00

08101114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101114:	b480      	push	{r7}
 8101116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101118:	4b04      	ldr	r3, [pc, #16]	; (810112c <__NVIC_GetPriorityGrouping+0x18>)
 810111a:	68db      	ldr	r3, [r3, #12]
 810111c:	0a1b      	lsrs	r3, r3, #8
 810111e:	f003 0307 	and.w	r3, r3, #7
}
 8101122:	4618      	mov	r0, r3
 8101124:	46bd      	mov	sp, r7
 8101126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810112a:	4770      	bx	lr
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101130:	b480      	push	{r7}
 8101132:	b083      	sub	sp, #12
 8101134:	af00      	add	r7, sp, #0
 8101136:	4603      	mov	r3, r0
 8101138:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810113a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810113e:	2b00      	cmp	r3, #0
 8101140:	db0b      	blt.n	810115a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101142:	88fb      	ldrh	r3, [r7, #6]
 8101144:	f003 021f 	and.w	r2, r3, #31
 8101148:	4907      	ldr	r1, [pc, #28]	; (8101168 <__NVIC_EnableIRQ+0x38>)
 810114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810114e:	095b      	lsrs	r3, r3, #5
 8101150:	2001      	movs	r0, #1
 8101152:	fa00 f202 	lsl.w	r2, r0, r2
 8101156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 810115a:	bf00      	nop
 810115c:	370c      	adds	r7, #12
 810115e:	46bd      	mov	sp, r7
 8101160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101164:	4770      	bx	lr
 8101166:	bf00      	nop
 8101168:	e000e100 	.word	0xe000e100

0810116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810116c:	b480      	push	{r7}
 810116e:	b083      	sub	sp, #12
 8101170:	af00      	add	r7, sp, #0
 8101172:	4603      	mov	r3, r0
 8101174:	6039      	str	r1, [r7, #0]
 8101176:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810117c:	2b00      	cmp	r3, #0
 810117e:	db0a      	blt.n	8101196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101180:	683b      	ldr	r3, [r7, #0]
 8101182:	b2da      	uxtb	r2, r3
 8101184:	490c      	ldr	r1, [pc, #48]	; (81011b8 <__NVIC_SetPriority+0x4c>)
 8101186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810118a:	0112      	lsls	r2, r2, #4
 810118c:	b2d2      	uxtb	r2, r2
 810118e:	440b      	add	r3, r1
 8101190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101194:	e00a      	b.n	81011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101196:	683b      	ldr	r3, [r7, #0]
 8101198:	b2da      	uxtb	r2, r3
 810119a:	4908      	ldr	r1, [pc, #32]	; (81011bc <__NVIC_SetPriority+0x50>)
 810119c:	88fb      	ldrh	r3, [r7, #6]
 810119e:	f003 030f 	and.w	r3, r3, #15
 81011a2:	3b04      	subs	r3, #4
 81011a4:	0112      	lsls	r2, r2, #4
 81011a6:	b2d2      	uxtb	r2, r2
 81011a8:	440b      	add	r3, r1
 81011aa:	761a      	strb	r2, [r3, #24]
}
 81011ac:	bf00      	nop
 81011ae:	370c      	adds	r7, #12
 81011b0:	46bd      	mov	sp, r7
 81011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b6:	4770      	bx	lr
 81011b8:	e000e100 	.word	0xe000e100
 81011bc:	e000ed00 	.word	0xe000ed00

081011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81011c0:	b480      	push	{r7}
 81011c2:	b089      	sub	sp, #36	; 0x24
 81011c4:	af00      	add	r7, sp, #0
 81011c6:	60f8      	str	r0, [r7, #12]
 81011c8:	60b9      	str	r1, [r7, #8]
 81011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81011cc:	68fb      	ldr	r3, [r7, #12]
 81011ce:	f003 0307 	and.w	r3, r3, #7
 81011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81011d4:	69fb      	ldr	r3, [r7, #28]
 81011d6:	f1c3 0307 	rsb	r3, r3, #7
 81011da:	2b04      	cmp	r3, #4
 81011dc:	bf28      	it	cs
 81011de:	2304      	movcs	r3, #4
 81011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81011e2:	69fb      	ldr	r3, [r7, #28]
 81011e4:	3304      	adds	r3, #4
 81011e6:	2b06      	cmp	r3, #6
 81011e8:	d902      	bls.n	81011f0 <NVIC_EncodePriority+0x30>
 81011ea:	69fb      	ldr	r3, [r7, #28]
 81011ec:	3b03      	subs	r3, #3
 81011ee:	e000      	b.n	81011f2 <NVIC_EncodePriority+0x32>
 81011f0:	2300      	movs	r3, #0
 81011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81011f4:	f04f 32ff 	mov.w	r2, #4294967295
 81011f8:	69bb      	ldr	r3, [r7, #24]
 81011fa:	fa02 f303 	lsl.w	r3, r2, r3
 81011fe:	43da      	mvns	r2, r3
 8101200:	68bb      	ldr	r3, [r7, #8]
 8101202:	401a      	ands	r2, r3
 8101204:	697b      	ldr	r3, [r7, #20]
 8101206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101208:	f04f 31ff 	mov.w	r1, #4294967295
 810120c:	697b      	ldr	r3, [r7, #20]
 810120e:	fa01 f303 	lsl.w	r3, r1, r3
 8101212:	43d9      	mvns	r1, r3
 8101214:	687b      	ldr	r3, [r7, #4]
 8101216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101218:	4313      	orrs	r3, r2
         );
}
 810121a:	4618      	mov	r0, r3
 810121c:	3724      	adds	r7, #36	; 0x24
 810121e:	46bd      	mov	sp, r7
 8101220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101224:	4770      	bx	lr

08101226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101226:	b580      	push	{r7, lr}
 8101228:	b082      	sub	sp, #8
 810122a:	af00      	add	r7, sp, #0
 810122c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810122e:	6878      	ldr	r0, [r7, #4]
 8101230:	f7ff ff4c 	bl	81010cc <__NVIC_SetPriorityGrouping>
}
 8101234:	bf00      	nop
 8101236:	3708      	adds	r7, #8
 8101238:	46bd      	mov	sp, r7
 810123a:	bd80      	pop	{r7, pc}

0810123c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b086      	sub	sp, #24
 8101240:	af00      	add	r7, sp, #0
 8101242:	4603      	mov	r3, r0
 8101244:	60b9      	str	r1, [r7, #8]
 8101246:	607a      	str	r2, [r7, #4]
 8101248:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810124a:	f7ff ff63 	bl	8101114 <__NVIC_GetPriorityGrouping>
 810124e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101250:	687a      	ldr	r2, [r7, #4]
 8101252:	68b9      	ldr	r1, [r7, #8]
 8101254:	6978      	ldr	r0, [r7, #20]
 8101256:	f7ff ffb3 	bl	81011c0 <NVIC_EncodePriority>
 810125a:	4602      	mov	r2, r0
 810125c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101260:	4611      	mov	r1, r2
 8101262:	4618      	mov	r0, r3
 8101264:	f7ff ff82 	bl	810116c <__NVIC_SetPriority>
}
 8101268:	bf00      	nop
 810126a:	3718      	adds	r7, #24
 810126c:	46bd      	mov	sp, r7
 810126e:	bd80      	pop	{r7, pc}

08101270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101270:	b580      	push	{r7, lr}
 8101272:	b082      	sub	sp, #8
 8101274:	af00      	add	r7, sp, #0
 8101276:	4603      	mov	r3, r0
 8101278:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 810127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810127e:	4618      	mov	r0, r3
 8101280:	f7ff ff56 	bl	8101130 <__NVIC_EnableIRQ>
}
 8101284:	bf00      	nop
 8101286:	3708      	adds	r7, #8
 8101288:	46bd      	mov	sp, r7
 810128a:	bd80      	pop	{r7, pc}

0810128c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810128c:	b480      	push	{r7}
 810128e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101290:	4b07      	ldr	r3, [pc, #28]	; (81012b0 <HAL_GetCurrentCPUID+0x24>)
 8101292:	681b      	ldr	r3, [r3, #0]
 8101294:	091b      	lsrs	r3, r3, #4
 8101296:	f003 030f 	and.w	r3, r3, #15
 810129a:	2b07      	cmp	r3, #7
 810129c:	d101      	bne.n	81012a2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810129e:	2303      	movs	r3, #3
 81012a0:	e000      	b.n	81012a4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81012a2:	2301      	movs	r3, #1
  }
}
 81012a4:	4618      	mov	r0, r3
 81012a6:	46bd      	mov	sp, r7
 81012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012ac:	4770      	bx	lr
 81012ae:	bf00      	nop
 81012b0:	e000ed00 	.word	0xe000ed00

081012b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81012b4:	b480      	push	{r7}
 81012b6:	b089      	sub	sp, #36	; 0x24
 81012b8:	af00      	add	r7, sp, #0
 81012ba:	6078      	str	r0, [r7, #4]
 81012bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81012be:	2300      	movs	r3, #0
 81012c0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81012c2:	4b89      	ldr	r3, [pc, #548]	; (81014e8 <HAL_GPIO_Init+0x234>)
 81012c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81012c6:	e194      	b.n	81015f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81012c8:	683b      	ldr	r3, [r7, #0]
 81012ca:	681a      	ldr	r2, [r3, #0]
 81012cc:	2101      	movs	r1, #1
 81012ce:	69fb      	ldr	r3, [r7, #28]
 81012d0:	fa01 f303 	lsl.w	r3, r1, r3
 81012d4:	4013      	ands	r3, r2
 81012d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81012d8:	693b      	ldr	r3, [r7, #16]
 81012da:	2b00      	cmp	r3, #0
 81012dc:	f000 8186 	beq.w	81015ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81012e0:	683b      	ldr	r3, [r7, #0]
 81012e2:	685b      	ldr	r3, [r3, #4]
 81012e4:	2b01      	cmp	r3, #1
 81012e6:	d00b      	beq.n	8101300 <HAL_GPIO_Init+0x4c>
 81012e8:	683b      	ldr	r3, [r7, #0]
 81012ea:	685b      	ldr	r3, [r3, #4]
 81012ec:	2b02      	cmp	r3, #2
 81012ee:	d007      	beq.n	8101300 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81012f0:	683b      	ldr	r3, [r7, #0]
 81012f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81012f4:	2b11      	cmp	r3, #17
 81012f6:	d003      	beq.n	8101300 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81012f8:	683b      	ldr	r3, [r7, #0]
 81012fa:	685b      	ldr	r3, [r3, #4]
 81012fc:	2b12      	cmp	r3, #18
 81012fe:	d130      	bne.n	8101362 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	689b      	ldr	r3, [r3, #8]
 8101304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101306:	69fb      	ldr	r3, [r7, #28]
 8101308:	005b      	lsls	r3, r3, #1
 810130a:	2203      	movs	r2, #3
 810130c:	fa02 f303 	lsl.w	r3, r2, r3
 8101310:	43db      	mvns	r3, r3
 8101312:	69ba      	ldr	r2, [r7, #24]
 8101314:	4013      	ands	r3, r2
 8101316:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101318:	683b      	ldr	r3, [r7, #0]
 810131a:	68da      	ldr	r2, [r3, #12]
 810131c:	69fb      	ldr	r3, [r7, #28]
 810131e:	005b      	lsls	r3, r3, #1
 8101320:	fa02 f303 	lsl.w	r3, r2, r3
 8101324:	69ba      	ldr	r2, [r7, #24]
 8101326:	4313      	orrs	r3, r2
 8101328:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	69ba      	ldr	r2, [r7, #24]
 810132e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	685b      	ldr	r3, [r3, #4]
 8101334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101336:	2201      	movs	r2, #1
 8101338:	69fb      	ldr	r3, [r7, #28]
 810133a:	fa02 f303 	lsl.w	r3, r2, r3
 810133e:	43db      	mvns	r3, r3
 8101340:	69ba      	ldr	r2, [r7, #24]
 8101342:	4013      	ands	r3, r2
 8101344:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8101346:	683b      	ldr	r3, [r7, #0]
 8101348:	685b      	ldr	r3, [r3, #4]
 810134a:	091b      	lsrs	r3, r3, #4
 810134c:	f003 0201 	and.w	r2, r3, #1
 8101350:	69fb      	ldr	r3, [r7, #28]
 8101352:	fa02 f303 	lsl.w	r3, r2, r3
 8101356:	69ba      	ldr	r2, [r7, #24]
 8101358:	4313      	orrs	r3, r2
 810135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	69ba      	ldr	r2, [r7, #24]
 8101360:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	68db      	ldr	r3, [r3, #12]
 8101366:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101368:	69fb      	ldr	r3, [r7, #28]
 810136a:	005b      	lsls	r3, r3, #1
 810136c:	2203      	movs	r2, #3
 810136e:	fa02 f303 	lsl.w	r3, r2, r3
 8101372:	43db      	mvns	r3, r3
 8101374:	69ba      	ldr	r2, [r7, #24]
 8101376:	4013      	ands	r3, r2
 8101378:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810137a:	683b      	ldr	r3, [r7, #0]
 810137c:	689a      	ldr	r2, [r3, #8]
 810137e:	69fb      	ldr	r3, [r7, #28]
 8101380:	005b      	lsls	r3, r3, #1
 8101382:	fa02 f303 	lsl.w	r3, r2, r3
 8101386:	69ba      	ldr	r2, [r7, #24]
 8101388:	4313      	orrs	r3, r2
 810138a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	69ba      	ldr	r2, [r7, #24]
 8101390:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8101392:	683b      	ldr	r3, [r7, #0]
 8101394:	685b      	ldr	r3, [r3, #4]
 8101396:	2b02      	cmp	r3, #2
 8101398:	d003      	beq.n	81013a2 <HAL_GPIO_Init+0xee>
 810139a:	683b      	ldr	r3, [r7, #0]
 810139c:	685b      	ldr	r3, [r3, #4]
 810139e:	2b12      	cmp	r3, #18
 81013a0:	d123      	bne.n	81013ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81013a2:	69fb      	ldr	r3, [r7, #28]
 81013a4:	08da      	lsrs	r2, r3, #3
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	3208      	adds	r2, #8
 81013aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81013b0:	69fb      	ldr	r3, [r7, #28]
 81013b2:	f003 0307 	and.w	r3, r3, #7
 81013b6:	009b      	lsls	r3, r3, #2
 81013b8:	220f      	movs	r2, #15
 81013ba:	fa02 f303 	lsl.w	r3, r2, r3
 81013be:	43db      	mvns	r3, r3
 81013c0:	69ba      	ldr	r2, [r7, #24]
 81013c2:	4013      	ands	r3, r2
 81013c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81013c6:	683b      	ldr	r3, [r7, #0]
 81013c8:	691a      	ldr	r2, [r3, #16]
 81013ca:	69fb      	ldr	r3, [r7, #28]
 81013cc:	f003 0307 	and.w	r3, r3, #7
 81013d0:	009b      	lsls	r3, r3, #2
 81013d2:	fa02 f303 	lsl.w	r3, r2, r3
 81013d6:	69ba      	ldr	r2, [r7, #24]
 81013d8:	4313      	orrs	r3, r2
 81013da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81013dc:	69fb      	ldr	r3, [r7, #28]
 81013de:	08da      	lsrs	r2, r3, #3
 81013e0:	687b      	ldr	r3, [r7, #4]
 81013e2:	3208      	adds	r2, #8
 81013e4:	69b9      	ldr	r1, [r7, #24]
 81013e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81013ea:	687b      	ldr	r3, [r7, #4]
 81013ec:	681b      	ldr	r3, [r3, #0]
 81013ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81013f0:	69fb      	ldr	r3, [r7, #28]
 81013f2:	005b      	lsls	r3, r3, #1
 81013f4:	2203      	movs	r2, #3
 81013f6:	fa02 f303 	lsl.w	r3, r2, r3
 81013fa:	43db      	mvns	r3, r3
 81013fc:	69ba      	ldr	r2, [r7, #24]
 81013fe:	4013      	ands	r3, r2
 8101400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101402:	683b      	ldr	r3, [r7, #0]
 8101404:	685b      	ldr	r3, [r3, #4]
 8101406:	f003 0203 	and.w	r2, r3, #3
 810140a:	69fb      	ldr	r3, [r7, #28]
 810140c:	005b      	lsls	r3, r3, #1
 810140e:	fa02 f303 	lsl.w	r3, r2, r3
 8101412:	69ba      	ldr	r2, [r7, #24]
 8101414:	4313      	orrs	r3, r2
 8101416:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	69ba      	ldr	r2, [r7, #24]
 810141c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810141e:	683b      	ldr	r3, [r7, #0]
 8101420:	685b      	ldr	r3, [r3, #4]
 8101422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101426:	2b00      	cmp	r3, #0
 8101428:	f000 80e0 	beq.w	81015ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810142c:	4b2f      	ldr	r3, [pc, #188]	; (81014ec <HAL_GPIO_Init+0x238>)
 810142e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101432:	4a2e      	ldr	r2, [pc, #184]	; (81014ec <HAL_GPIO_Init+0x238>)
 8101434:	f043 0302 	orr.w	r3, r3, #2
 8101438:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810143c:	4b2b      	ldr	r3, [pc, #172]	; (81014ec <HAL_GPIO_Init+0x238>)
 810143e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101442:	f003 0302 	and.w	r3, r3, #2
 8101446:	60fb      	str	r3, [r7, #12]
 8101448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810144a:	4a29      	ldr	r2, [pc, #164]	; (81014f0 <HAL_GPIO_Init+0x23c>)
 810144c:	69fb      	ldr	r3, [r7, #28]
 810144e:	089b      	lsrs	r3, r3, #2
 8101450:	3302      	adds	r3, #2
 8101452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101458:	69fb      	ldr	r3, [r7, #28]
 810145a:	f003 0303 	and.w	r3, r3, #3
 810145e:	009b      	lsls	r3, r3, #2
 8101460:	220f      	movs	r2, #15
 8101462:	fa02 f303 	lsl.w	r3, r2, r3
 8101466:	43db      	mvns	r3, r3
 8101468:	69ba      	ldr	r2, [r7, #24]
 810146a:	4013      	ands	r3, r2
 810146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810146e:	687b      	ldr	r3, [r7, #4]
 8101470:	4a20      	ldr	r2, [pc, #128]	; (81014f4 <HAL_GPIO_Init+0x240>)
 8101472:	4293      	cmp	r3, r2
 8101474:	d052      	beq.n	810151c <HAL_GPIO_Init+0x268>
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	4a1f      	ldr	r2, [pc, #124]	; (81014f8 <HAL_GPIO_Init+0x244>)
 810147a:	4293      	cmp	r3, r2
 810147c:	d031      	beq.n	81014e2 <HAL_GPIO_Init+0x22e>
 810147e:	687b      	ldr	r3, [r7, #4]
 8101480:	4a1e      	ldr	r2, [pc, #120]	; (81014fc <HAL_GPIO_Init+0x248>)
 8101482:	4293      	cmp	r3, r2
 8101484:	d02b      	beq.n	81014de <HAL_GPIO_Init+0x22a>
 8101486:	687b      	ldr	r3, [r7, #4]
 8101488:	4a1d      	ldr	r2, [pc, #116]	; (8101500 <HAL_GPIO_Init+0x24c>)
 810148a:	4293      	cmp	r3, r2
 810148c:	d025      	beq.n	81014da <HAL_GPIO_Init+0x226>
 810148e:	687b      	ldr	r3, [r7, #4]
 8101490:	4a1c      	ldr	r2, [pc, #112]	; (8101504 <HAL_GPIO_Init+0x250>)
 8101492:	4293      	cmp	r3, r2
 8101494:	d01f      	beq.n	81014d6 <HAL_GPIO_Init+0x222>
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	4a1b      	ldr	r2, [pc, #108]	; (8101508 <HAL_GPIO_Init+0x254>)
 810149a:	4293      	cmp	r3, r2
 810149c:	d019      	beq.n	81014d2 <HAL_GPIO_Init+0x21e>
 810149e:	687b      	ldr	r3, [r7, #4]
 81014a0:	4a1a      	ldr	r2, [pc, #104]	; (810150c <HAL_GPIO_Init+0x258>)
 81014a2:	4293      	cmp	r3, r2
 81014a4:	d013      	beq.n	81014ce <HAL_GPIO_Init+0x21a>
 81014a6:	687b      	ldr	r3, [r7, #4]
 81014a8:	4a19      	ldr	r2, [pc, #100]	; (8101510 <HAL_GPIO_Init+0x25c>)
 81014aa:	4293      	cmp	r3, r2
 81014ac:	d00d      	beq.n	81014ca <HAL_GPIO_Init+0x216>
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	4a18      	ldr	r2, [pc, #96]	; (8101514 <HAL_GPIO_Init+0x260>)
 81014b2:	4293      	cmp	r3, r2
 81014b4:	d007      	beq.n	81014c6 <HAL_GPIO_Init+0x212>
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	4a17      	ldr	r2, [pc, #92]	; (8101518 <HAL_GPIO_Init+0x264>)
 81014ba:	4293      	cmp	r3, r2
 81014bc:	d101      	bne.n	81014c2 <HAL_GPIO_Init+0x20e>
 81014be:	2309      	movs	r3, #9
 81014c0:	e02d      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014c2:	230a      	movs	r3, #10
 81014c4:	e02b      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014c6:	2308      	movs	r3, #8
 81014c8:	e029      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014ca:	2307      	movs	r3, #7
 81014cc:	e027      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014ce:	2306      	movs	r3, #6
 81014d0:	e025      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014d2:	2305      	movs	r3, #5
 81014d4:	e023      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014d6:	2304      	movs	r3, #4
 81014d8:	e021      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014da:	2303      	movs	r3, #3
 81014dc:	e01f      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014de:	2302      	movs	r3, #2
 81014e0:	e01d      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014e2:	2301      	movs	r3, #1
 81014e4:	e01b      	b.n	810151e <HAL_GPIO_Init+0x26a>
 81014e6:	bf00      	nop
 81014e8:	580000c0 	.word	0x580000c0
 81014ec:	58024400 	.word	0x58024400
 81014f0:	58000400 	.word	0x58000400
 81014f4:	58020000 	.word	0x58020000
 81014f8:	58020400 	.word	0x58020400
 81014fc:	58020800 	.word	0x58020800
 8101500:	58020c00 	.word	0x58020c00
 8101504:	58021000 	.word	0x58021000
 8101508:	58021400 	.word	0x58021400
 810150c:	58021800 	.word	0x58021800
 8101510:	58021c00 	.word	0x58021c00
 8101514:	58022000 	.word	0x58022000
 8101518:	58022400 	.word	0x58022400
 810151c:	2300      	movs	r3, #0
 810151e:	69fa      	ldr	r2, [r7, #28]
 8101520:	f002 0203 	and.w	r2, r2, #3
 8101524:	0092      	lsls	r2, r2, #2
 8101526:	4093      	lsls	r3, r2
 8101528:	69ba      	ldr	r2, [r7, #24]
 810152a:	4313      	orrs	r3, r2
 810152c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810152e:	4938      	ldr	r1, [pc, #224]	; (8101610 <HAL_GPIO_Init+0x35c>)
 8101530:	69fb      	ldr	r3, [r7, #28]
 8101532:	089b      	lsrs	r3, r3, #2
 8101534:	3302      	adds	r3, #2
 8101536:	69ba      	ldr	r2, [r7, #24]
 8101538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810153c:	697b      	ldr	r3, [r7, #20]
 810153e:	681b      	ldr	r3, [r3, #0]
 8101540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101542:	693b      	ldr	r3, [r7, #16]
 8101544:	43db      	mvns	r3, r3
 8101546:	69ba      	ldr	r2, [r7, #24]
 8101548:	4013      	ands	r3, r2
 810154a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810154c:	683b      	ldr	r3, [r7, #0]
 810154e:	685b      	ldr	r3, [r3, #4]
 8101550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101554:	2b00      	cmp	r3, #0
 8101556:	d003      	beq.n	8101560 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8101558:	69ba      	ldr	r2, [r7, #24]
 810155a:	693b      	ldr	r3, [r7, #16]
 810155c:	4313      	orrs	r3, r2
 810155e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101560:	697b      	ldr	r3, [r7, #20]
 8101562:	69ba      	ldr	r2, [r7, #24]
 8101564:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8101566:	697b      	ldr	r3, [r7, #20]
 8101568:	685b      	ldr	r3, [r3, #4]
 810156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810156c:	693b      	ldr	r3, [r7, #16]
 810156e:	43db      	mvns	r3, r3
 8101570:	69ba      	ldr	r2, [r7, #24]
 8101572:	4013      	ands	r3, r2
 8101574:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8101576:	683b      	ldr	r3, [r7, #0]
 8101578:	685b      	ldr	r3, [r3, #4]
 810157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810157e:	2b00      	cmp	r3, #0
 8101580:	d003      	beq.n	810158a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8101582:	69ba      	ldr	r2, [r7, #24]
 8101584:	693b      	ldr	r3, [r7, #16]
 8101586:	4313      	orrs	r3, r2
 8101588:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810158a:	697b      	ldr	r3, [r7, #20]
 810158c:	69ba      	ldr	r2, [r7, #24]
 810158e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101594:	681b      	ldr	r3, [r3, #0]
 8101596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101598:	693b      	ldr	r3, [r7, #16]
 810159a:	43db      	mvns	r3, r3
 810159c:	69ba      	ldr	r2, [r7, #24]
 810159e:	4013      	ands	r3, r2
 81015a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81015a2:	683b      	ldr	r3, [r7, #0]
 81015a4:	685b      	ldr	r3, [r3, #4]
 81015a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81015aa:	2b00      	cmp	r3, #0
 81015ac:	d003      	beq.n	81015b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81015ae:	69ba      	ldr	r2, [r7, #24]
 81015b0:	693b      	ldr	r3, [r7, #16]
 81015b2:	4313      	orrs	r3, r2
 81015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81015b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81015ba:	69bb      	ldr	r3, [r7, #24]
 81015bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81015c2:	685b      	ldr	r3, [r3, #4]
 81015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81015c6:	693b      	ldr	r3, [r7, #16]
 81015c8:	43db      	mvns	r3, r3
 81015ca:	69ba      	ldr	r2, [r7, #24]
 81015cc:	4013      	ands	r3, r2
 81015ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81015d0:	683b      	ldr	r3, [r7, #0]
 81015d2:	685b      	ldr	r3, [r3, #4]
 81015d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81015d8:	2b00      	cmp	r3, #0
 81015da:	d003      	beq.n	81015e4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81015dc:	69ba      	ldr	r2, [r7, #24]
 81015de:	693b      	ldr	r3, [r7, #16]
 81015e0:	4313      	orrs	r3, r2
 81015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81015e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81015e8:	69bb      	ldr	r3, [r7, #24]
 81015ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81015ec:	69fb      	ldr	r3, [r7, #28]
 81015ee:	3301      	adds	r3, #1
 81015f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81015f2:	683b      	ldr	r3, [r7, #0]
 81015f4:	681a      	ldr	r2, [r3, #0]
 81015f6:	69fb      	ldr	r3, [r7, #28]
 81015f8:	fa22 f303 	lsr.w	r3, r2, r3
 81015fc:	2b00      	cmp	r3, #0
 81015fe:	f47f ae63 	bne.w	81012c8 <HAL_GPIO_Init+0x14>
  }
}
 8101602:	bf00      	nop
 8101604:	3724      	adds	r7, #36	; 0x24
 8101606:	46bd      	mov	sp, r7
 8101608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810160c:	4770      	bx	lr
 810160e:	bf00      	nop
 8101610:	58000400 	.word	0x58000400

08101614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101614:	b480      	push	{r7}
 8101616:	b083      	sub	sp, #12
 8101618:	af00      	add	r7, sp, #0
 810161a:	6078      	str	r0, [r7, #4]
 810161c:	460b      	mov	r3, r1
 810161e:	807b      	strh	r3, [r7, #2]
 8101620:	4613      	mov	r3, r2
 8101622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101624:	787b      	ldrb	r3, [r7, #1]
 8101626:	2b00      	cmp	r3, #0
 8101628:	d003      	beq.n	8101632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810162a:	887a      	ldrh	r2, [r7, #2]
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101630:	e003      	b.n	810163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101632:	887b      	ldrh	r3, [r7, #2]
 8101634:	041a      	lsls	r2, r3, #16
 8101636:	687b      	ldr	r3, [r7, #4]
 8101638:	619a      	str	r2, [r3, #24]
}
 810163a:	bf00      	nop
 810163c:	370c      	adds	r7, #12
 810163e:	46bd      	mov	sp, r7
 8101640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101644:	4770      	bx	lr
	...

08101648 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101648:	b480      	push	{r7}
 810164a:	b083      	sub	sp, #12
 810164c:	af00      	add	r7, sp, #0
 810164e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101650:	4b05      	ldr	r3, [pc, #20]	; (8101668 <HAL_HSEM_ActivateNotification+0x20>)
 8101652:	681a      	ldr	r2, [r3, #0]
 8101654:	4904      	ldr	r1, [pc, #16]	; (8101668 <HAL_HSEM_ActivateNotification+0x20>)
 8101656:	687b      	ldr	r3, [r7, #4]
 8101658:	4313      	orrs	r3, r2
 810165a:	600b      	str	r3, [r1, #0]
#endif
}
 810165c:	bf00      	nop
 810165e:	370c      	adds	r7, #12
 8101660:	46bd      	mov	sp, r7
 8101662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101666:	4770      	bx	lr
 8101668:	58026510 	.word	0x58026510

0810166c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 810166c:	b580      	push	{r7, lr}
 810166e:	b082      	sub	sp, #8
 8101670:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8101672:	4b0a      	ldr	r3, [pc, #40]	; (810169c <HAL_HSEM_IRQHandler+0x30>)
 8101674:	68db      	ldr	r3, [r3, #12]
 8101676:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8101678:	4b08      	ldr	r3, [pc, #32]	; (810169c <HAL_HSEM_IRQHandler+0x30>)
 810167a:	681a      	ldr	r2, [r3, #0]
 810167c:	687b      	ldr	r3, [r7, #4]
 810167e:	43db      	mvns	r3, r3
 8101680:	4906      	ldr	r1, [pc, #24]	; (810169c <HAL_HSEM_IRQHandler+0x30>)
 8101682:	4013      	ands	r3, r2
 8101684:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8101686:	4a05      	ldr	r2, [pc, #20]	; (810169c <HAL_HSEM_IRQHandler+0x30>)
 8101688:	687b      	ldr	r3, [r7, #4]
 810168a:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 810168c:	6878      	ldr	r0, [r7, #4]
 810168e:	f000 f807 	bl	81016a0 <HAL_HSEM_FreeCallback>
}
 8101692:	bf00      	nop
 8101694:	3708      	adds	r7, #8
 8101696:	46bd      	mov	sp, r7
 8101698:	bd80      	pop	{r7, pc}
 810169a:	bf00      	nop
 810169c:	58026510 	.word	0x58026510

081016a0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81016a0:	b480      	push	{r7}
 81016a2:	b083      	sub	sp, #12
 81016a4:	af00      	add	r7, sp, #0
 81016a6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 81016a8:	bf00      	nop
 81016aa:	370c      	adds	r7, #12
 81016ac:	46bd      	mov	sp, r7
 81016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016b2:	4770      	bx	lr

081016b4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81016b4:	b580      	push	{r7, lr}
 81016b6:	b084      	sub	sp, #16
 81016b8:	af00      	add	r7, sp, #0
 81016ba:	60f8      	str	r0, [r7, #12]
 81016bc:	460b      	mov	r3, r1
 81016be:	607a      	str	r2, [r7, #4]
 81016c0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81016c2:	4b35      	ldr	r3, [pc, #212]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016c4:	681b      	ldr	r3, [r3, #0]
 81016c6:	f023 0201 	bic.w	r2, r3, #1
 81016ca:	4933      	ldr	r1, [pc, #204]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016cc:	68fb      	ldr	r3, [r7, #12]
 81016ce:	4313      	orrs	r3, r2
 81016d0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81016d2:	687b      	ldr	r3, [r7, #4]
 81016d4:	2b00      	cmp	r3, #0
 81016d6:	d121      	bne.n	810171c <HAL_PWREx_EnterSTOPMode+0x68>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81016d8:	f7ff fdd8 	bl	810128c <HAL_GetCurrentCPUID>
 81016dc:	4603      	mov	r3, r0
 81016de:	2b03      	cmp	r3, #3
 81016e0:	d154      	bne.n	810178c <HAL_PWREx_EnterSTOPMode+0xd8>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81016e2:	4b2d      	ldr	r3, [pc, #180]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016e4:	691b      	ldr	r3, [r3, #16]
 81016e6:	4a2c      	ldr	r2, [pc, #176]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 81016e8:	f023 0301 	bic.w	r3, r3, #1
 81016ec:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81016ee:	4b2b      	ldr	r3, [pc, #172]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81016f0:	691b      	ldr	r3, [r3, #16]
 81016f2:	4a2a      	ldr	r2, [pc, #168]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 81016f4:	f043 0304 	orr.w	r3, r3, #4
 81016f8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81016fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 81016fe:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101702:	7afb      	ldrb	r3, [r7, #11]
 8101704:	2b01      	cmp	r3, #1
 8101706:	d101      	bne.n	810170c <HAL_PWREx_EnterSTOPMode+0x58>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101708:	bf30      	wfi
 810170a:	e000      	b.n	810170e <HAL_PWREx_EnterSTOPMode+0x5a>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810170c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810170e:	4b23      	ldr	r3, [pc, #140]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8101710:	691b      	ldr	r3, [r3, #16]
 8101712:	4a22      	ldr	r2, [pc, #136]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 8101714:	f023 0304 	bic.w	r3, r3, #4
 8101718:	6113      	str	r3, [r2, #16]
 810171a:	e03a      	b.n	8101792 <HAL_PWREx_EnterSTOPMode+0xde>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	2b01      	cmp	r3, #1
 8101720:	d121      	bne.n	8101766 <HAL_PWREx_EnterSTOPMode+0xb2>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101722:	f7ff fdb3 	bl	810128c <HAL_GetCurrentCPUID>
 8101726:	4603      	mov	r3, r0
 8101728:	2b01      	cmp	r3, #1
 810172a:	d131      	bne.n	8101790 <HAL_PWREx_EnterSTOPMode+0xdc>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810172c:	4b1a      	ldr	r3, [pc, #104]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 810172e:	695b      	ldr	r3, [r3, #20]
 8101730:	4a19      	ldr	r2, [pc, #100]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101732:	f023 0302 	bic.w	r3, r3, #2
 8101736:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101738:	4b18      	ldr	r3, [pc, #96]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 810173a:	691b      	ldr	r3, [r3, #16]
 810173c:	4a17      	ldr	r2, [pc, #92]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 810173e:	f043 0304 	orr.w	r3, r3, #4
 8101742:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8101748:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810174c:	7afb      	ldrb	r3, [r7, #11]
 810174e:	2b01      	cmp	r3, #1
 8101750:	d101      	bne.n	8101756 <HAL_PWREx_EnterSTOPMode+0xa2>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101752:	bf30      	wfi
 8101754:	e000      	b.n	8101758 <HAL_PWREx_EnterSTOPMode+0xa4>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101756:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101758:	4b10      	ldr	r3, [pc, #64]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 810175a:	691b      	ldr	r3, [r3, #16]
 810175c:	4a0f      	ldr	r2, [pc, #60]	; (810179c <HAL_PWREx_EnterSTOPMode+0xe8>)
 810175e:	f023 0304 	bic.w	r3, r3, #4
 8101762:	6113      	str	r3, [r2, #16]
 8101764:	e015      	b.n	8101792 <HAL_PWREx_EnterSTOPMode+0xde>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101766:	f7ff fd91 	bl	810128c <HAL_GetCurrentCPUID>
 810176a:	4603      	mov	r3, r0
 810176c:	2b03      	cmp	r3, #3
 810176e:	d106      	bne.n	810177e <HAL_PWREx_EnterSTOPMode+0xca>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101770:	4b09      	ldr	r3, [pc, #36]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101772:	691b      	ldr	r3, [r3, #16]
 8101774:	4a08      	ldr	r2, [pc, #32]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101776:	f023 0304 	bic.w	r3, r3, #4
 810177a:	6113      	str	r3, [r2, #16]
 810177c:	e009      	b.n	8101792 <HAL_PWREx_EnterSTOPMode+0xde>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810177e:	4b06      	ldr	r3, [pc, #24]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101780:	695b      	ldr	r3, [r3, #20]
 8101782:	4a05      	ldr	r2, [pc, #20]	; (8101798 <HAL_PWREx_EnterSTOPMode+0xe4>)
 8101784:	f023 0304 	bic.w	r3, r3, #4
 8101788:	6153      	str	r3, [r2, #20]
 810178a:	e002      	b.n	8101792 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 810178c:	bf00      	nop
 810178e:	e000      	b.n	8101792 <HAL_PWREx_EnterSTOPMode+0xde>
      return;
 8101790:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101792:	3710      	adds	r7, #16
 8101794:	46bd      	mov	sp, r7
 8101796:	bd80      	pop	{r7, pc}
 8101798:	58024800 	.word	0x58024800
 810179c:	e000ed00 	.word	0xe000ed00

081017a0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81017a0:	b580      	push	{r7, lr}
 81017a2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81017a4:	f7ff fd72 	bl	810128c <HAL_GetCurrentCPUID>
 81017a8:	4603      	mov	r3, r0
 81017aa:	2b03      	cmp	r3, #3
 81017ac:	d101      	bne.n	81017b2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81017ae:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81017b0:	e001      	b.n	81017b6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81017b2:	bf40      	sev
    __WFE ();
 81017b4:	bf20      	wfe
}
 81017b6:	bf00      	nop
 81017b8:	bd80      	pop	{r7, pc}
	...

081017bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81017bc:	b480      	push	{r7}
 81017be:	b089      	sub	sp, #36	; 0x24
 81017c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81017c2:	4baf      	ldr	r3, [pc, #700]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81017c4:	691b      	ldr	r3, [r3, #16]
 81017c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81017ca:	2b18      	cmp	r3, #24
 81017cc:	f200 814e 	bhi.w	8101a6c <HAL_RCC_GetSysClockFreq+0x2b0>
 81017d0:	a201      	add	r2, pc, #4	; (adr r2, 81017d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81017d6:	bf00      	nop
 81017d8:	0810183d 	.word	0x0810183d
 81017dc:	08101a6d 	.word	0x08101a6d
 81017e0:	08101a6d 	.word	0x08101a6d
 81017e4:	08101a6d 	.word	0x08101a6d
 81017e8:	08101a6d 	.word	0x08101a6d
 81017ec:	08101a6d 	.word	0x08101a6d
 81017f0:	08101a6d 	.word	0x08101a6d
 81017f4:	08101a6d 	.word	0x08101a6d
 81017f8:	08101863 	.word	0x08101863
 81017fc:	08101a6d 	.word	0x08101a6d
 8101800:	08101a6d 	.word	0x08101a6d
 8101804:	08101a6d 	.word	0x08101a6d
 8101808:	08101a6d 	.word	0x08101a6d
 810180c:	08101a6d 	.word	0x08101a6d
 8101810:	08101a6d 	.word	0x08101a6d
 8101814:	08101a6d 	.word	0x08101a6d
 8101818:	08101869 	.word	0x08101869
 810181c:	08101a6d 	.word	0x08101a6d
 8101820:	08101a6d 	.word	0x08101a6d
 8101824:	08101a6d 	.word	0x08101a6d
 8101828:	08101a6d 	.word	0x08101a6d
 810182c:	08101a6d 	.word	0x08101a6d
 8101830:	08101a6d 	.word	0x08101a6d
 8101834:	08101a6d 	.word	0x08101a6d
 8101838:	0810186f 	.word	0x0810186f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810183c:	4b90      	ldr	r3, [pc, #576]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810183e:	681b      	ldr	r3, [r3, #0]
 8101840:	f003 0320 	and.w	r3, r3, #32
 8101844:	2b00      	cmp	r3, #0
 8101846:	d009      	beq.n	810185c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101848:	4b8d      	ldr	r3, [pc, #564]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810184a:	681b      	ldr	r3, [r3, #0]
 810184c:	08db      	lsrs	r3, r3, #3
 810184e:	f003 0303 	and.w	r3, r3, #3
 8101852:	4a8c      	ldr	r2, [pc, #560]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8101854:	fa22 f303 	lsr.w	r3, r2, r3
 8101858:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810185a:	e10a      	b.n	8101a72 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810185c:	4b89      	ldr	r3, [pc, #548]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 810185e:	61bb      	str	r3, [r7, #24]
    break;
 8101860:	e107      	b.n	8101a72 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101862:	4b89      	ldr	r3, [pc, #548]	; (8101a88 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8101864:	61bb      	str	r3, [r7, #24]
    break;
 8101866:	e104      	b.n	8101a72 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101868:	4b88      	ldr	r3, [pc, #544]	; (8101a8c <HAL_RCC_GetSysClockFreq+0x2d0>)
 810186a:	61bb      	str	r3, [r7, #24]
    break;
 810186c:	e101      	b.n	8101a72 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810186e:	4b84      	ldr	r3, [pc, #528]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101872:	f003 0303 	and.w	r3, r3, #3
 8101876:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101878:	4b81      	ldr	r3, [pc, #516]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810187c:	091b      	lsrs	r3, r3, #4
 810187e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101882:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101884:	4b7e      	ldr	r3, [pc, #504]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101888:	f003 0301 	and.w	r3, r3, #1
 810188c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810188e:	4b7c      	ldr	r3, [pc, #496]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101892:	08db      	lsrs	r3, r3, #3
 8101894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101898:	68fa      	ldr	r2, [r7, #12]
 810189a:	fb02 f303 	mul.w	r3, r2, r3
 810189e:	ee07 3a90 	vmov	s15, r3
 81018a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81018aa:	693b      	ldr	r3, [r7, #16]
 81018ac:	2b00      	cmp	r3, #0
 81018ae:	f000 80da 	beq.w	8101a66 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 81018b2:	697b      	ldr	r3, [r7, #20]
 81018b4:	2b01      	cmp	r3, #1
 81018b6:	d05a      	beq.n	810196e <HAL_RCC_GetSysClockFreq+0x1b2>
 81018b8:	2b01      	cmp	r3, #1
 81018ba:	d302      	bcc.n	81018c2 <HAL_RCC_GetSysClockFreq+0x106>
 81018bc:	2b02      	cmp	r3, #2
 81018be:	d078      	beq.n	81019b2 <HAL_RCC_GetSysClockFreq+0x1f6>
 81018c0:	e099      	b.n	81019f6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81018c2:	4b6f      	ldr	r3, [pc, #444]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81018c4:	681b      	ldr	r3, [r3, #0]
 81018c6:	f003 0320 	and.w	r3, r3, #32
 81018ca:	2b00      	cmp	r3, #0
 81018cc:	d02d      	beq.n	810192a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81018ce:	4b6c      	ldr	r3, [pc, #432]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81018d0:	681b      	ldr	r3, [r3, #0]
 81018d2:	08db      	lsrs	r3, r3, #3
 81018d4:	f003 0303 	and.w	r3, r3, #3
 81018d8:	4a6a      	ldr	r2, [pc, #424]	; (8101a84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 81018da:	fa22 f303 	lsr.w	r3, r2, r3
 81018de:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81018e0:	687b      	ldr	r3, [r7, #4]
 81018e2:	ee07 3a90 	vmov	s15, r3
 81018e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81018ea:	693b      	ldr	r3, [r7, #16]
 81018ec:	ee07 3a90 	vmov	s15, r3
 81018f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81018f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81018f8:	4b61      	ldr	r3, [pc, #388]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101900:	ee07 3a90 	vmov	s15, r3
 8101904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101908:	ed97 6a02 	vldr	s12, [r7, #8]
 810190c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8101a90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101910:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101914:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101918:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810191c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101924:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101928:	e087      	b.n	8101a3a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810192a:	693b      	ldr	r3, [r7, #16]
 810192c:	ee07 3a90 	vmov	s15, r3
 8101930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101934:	eddf 6a57 	vldr	s13, [pc, #348]	; 8101a94 <HAL_RCC_GetSysClockFreq+0x2d8>
 8101938:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810193c:	4b50      	ldr	r3, [pc, #320]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 810193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101944:	ee07 3a90 	vmov	s15, r3
 8101948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810194c:	ed97 6a02 	vldr	s12, [r7, #8]
 8101950:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8101a90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101954:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101958:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810195c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101964:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101968:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810196c:	e065      	b.n	8101a3a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810196e:	693b      	ldr	r3, [r7, #16]
 8101970:	ee07 3a90 	vmov	s15, r3
 8101974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101978:	eddf 6a47 	vldr	s13, [pc, #284]	; 8101a98 <HAL_RCC_GetSysClockFreq+0x2dc>
 810197c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101980:	4b3f      	ldr	r3, [pc, #252]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101988:	ee07 3a90 	vmov	s15, r3
 810198c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101990:	ed97 6a02 	vldr	s12, [r7, #8]
 8101994:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8101a90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101998:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810199c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81019b0:	e043      	b.n	8101a3a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81019b2:	693b      	ldr	r3, [r7, #16]
 81019b4:	ee07 3a90 	vmov	s15, r3
 81019b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019bc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8101a9c <HAL_RCC_GetSysClockFreq+0x2e0>
 81019c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81019c4:	4b2e      	ldr	r3, [pc, #184]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 81019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81019cc:	ee07 3a90 	vmov	s15, r3
 81019d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81019d4:	ed97 6a02 	vldr	s12, [r7, #8]
 81019d8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8101a90 <HAL_RCC_GetSysClockFreq+0x2d4>
 81019dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81019e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81019e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81019e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81019ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81019f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81019f4:	e021      	b.n	8101a3a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81019f6:	693b      	ldr	r3, [r7, #16]
 81019f8:	ee07 3a90 	vmov	s15, r3
 81019fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a00:	eddf 6a25 	vldr	s13, [pc, #148]	; 8101a98 <HAL_RCC_GetSysClockFreq+0x2dc>
 8101a04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a08:	4b1d      	ldr	r3, [pc, #116]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a10:	ee07 3a90 	vmov	s15, r3
 8101a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a18:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a1c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8101a90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8101a20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101a38:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101a3a:	4b11      	ldr	r3, [pc, #68]	; (8101a80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8101a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a3e:	0a5b      	lsrs	r3, r3, #9
 8101a40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101a44:	3301      	adds	r3, #1
 8101a46:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101a48:	683b      	ldr	r3, [r7, #0]
 8101a4a:	ee07 3a90 	vmov	s15, r3
 8101a4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101a52:	edd7 6a07 	vldr	s13, [r7, #28]
 8101a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101a5e:	ee17 3a90 	vmov	r3, s15
 8101a62:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101a64:	e005      	b.n	8101a72 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8101a66:	2300      	movs	r3, #0
 8101a68:	61bb      	str	r3, [r7, #24]
    break;
 8101a6a:	e002      	b.n	8101a72 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8101a6c:	4b06      	ldr	r3, [pc, #24]	; (8101a88 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8101a6e:	61bb      	str	r3, [r7, #24]
    break;
 8101a70:	bf00      	nop
  }

  return sysclockfreq;
 8101a72:	69bb      	ldr	r3, [r7, #24]
}
 8101a74:	4618      	mov	r0, r3
 8101a76:	3724      	adds	r7, #36	; 0x24
 8101a78:	46bd      	mov	sp, r7
 8101a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a7e:	4770      	bx	lr
 8101a80:	58024400 	.word	0x58024400
 8101a84:	03d09000 	.word	0x03d09000
 8101a88:	003d0900 	.word	0x003d0900
 8101a8c:	007a1200 	.word	0x007a1200
 8101a90:	46000000 	.word	0x46000000
 8101a94:	4c742400 	.word	0x4c742400
 8101a98:	4a742400 	.word	0x4a742400
 8101a9c:	4af42400 	.word	0x4af42400

08101aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101aa0:	b580      	push	{r7, lr}
 8101aa2:	b082      	sub	sp, #8
 8101aa4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101aa6:	f7ff fe89 	bl	81017bc <HAL_RCC_GetSysClockFreq>
 8101aaa:	4601      	mov	r1, r0
 8101aac:	4b11      	ldr	r3, [pc, #68]	; (8101af4 <HAL_RCC_GetHCLKFreq+0x54>)
 8101aae:	699b      	ldr	r3, [r3, #24]
 8101ab0:	0a1b      	lsrs	r3, r3, #8
 8101ab2:	f003 030f 	and.w	r3, r3, #15
 8101ab6:	4a10      	ldr	r2, [pc, #64]	; (8101af8 <HAL_RCC_GetHCLKFreq+0x58>)
 8101ab8:	5cd3      	ldrb	r3, [r2, r3]
 8101aba:	f003 031f 	and.w	r3, r3, #31
 8101abe:	fa21 f303 	lsr.w	r3, r1, r3
 8101ac2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101ac4:	4b0b      	ldr	r3, [pc, #44]	; (8101af4 <HAL_RCC_GetHCLKFreq+0x54>)
 8101ac6:	699b      	ldr	r3, [r3, #24]
 8101ac8:	f003 030f 	and.w	r3, r3, #15
 8101acc:	4a0a      	ldr	r2, [pc, #40]	; (8101af8 <HAL_RCC_GetHCLKFreq+0x58>)
 8101ace:	5cd3      	ldrb	r3, [r2, r3]
 8101ad0:	f003 031f 	and.w	r3, r3, #31
 8101ad4:	687a      	ldr	r2, [r7, #4]
 8101ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8101ada:	4a08      	ldr	r2, [pc, #32]	; (8101afc <HAL_RCC_GetHCLKFreq+0x5c>)
 8101adc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101ade:	4b07      	ldr	r3, [pc, #28]	; (8101afc <HAL_RCC_GetHCLKFreq+0x5c>)
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	4a07      	ldr	r2, [pc, #28]	; (8101b00 <HAL_RCC_GetHCLKFreq+0x60>)
 8101ae4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101ae6:	4b05      	ldr	r3, [pc, #20]	; (8101afc <HAL_RCC_GetHCLKFreq+0x5c>)
 8101ae8:	681b      	ldr	r3, [r3, #0]
}
 8101aea:	4618      	mov	r0, r3
 8101aec:	3708      	adds	r7, #8
 8101aee:	46bd      	mov	sp, r7
 8101af0:	bd80      	pop	{r7, pc}
 8101af2:	bf00      	nop
 8101af4:	58024400 	.word	0x58024400
 8101af8:	081071fc 	.word	0x081071fc
 8101afc:	10000004 	.word	0x10000004
 8101b00:	10000000 	.word	0x10000000

08101b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101b04:	b580      	push	{r7, lr}
 8101b06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101b08:	f7ff ffca 	bl	8101aa0 <HAL_RCC_GetHCLKFreq>
 8101b0c:	4601      	mov	r1, r0
 8101b0e:	4b06      	ldr	r3, [pc, #24]	; (8101b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101b10:	69db      	ldr	r3, [r3, #28]
 8101b12:	091b      	lsrs	r3, r3, #4
 8101b14:	f003 0307 	and.w	r3, r3, #7
 8101b18:	4a04      	ldr	r2, [pc, #16]	; (8101b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8101b1a:	5cd3      	ldrb	r3, [r2, r3]
 8101b1c:	f003 031f 	and.w	r3, r3, #31
 8101b20:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101b24:	4618      	mov	r0, r3
 8101b26:	bd80      	pop	{r7, pc}
 8101b28:	58024400 	.word	0x58024400
 8101b2c:	081071fc 	.word	0x081071fc

08101b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101b30:	b580      	push	{r7, lr}
 8101b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101b34:	f7ff ffb4 	bl	8101aa0 <HAL_RCC_GetHCLKFreq>
 8101b38:	4601      	mov	r1, r0
 8101b3a:	4b06      	ldr	r3, [pc, #24]	; (8101b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101b3c:	69db      	ldr	r3, [r3, #28]
 8101b3e:	0a1b      	lsrs	r3, r3, #8
 8101b40:	f003 0307 	and.w	r3, r3, #7
 8101b44:	4a04      	ldr	r2, [pc, #16]	; (8101b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101b46:	5cd3      	ldrb	r3, [r2, r3]
 8101b48:	f003 031f 	and.w	r3, r3, #31
 8101b4c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101b50:	4618      	mov	r0, r3
 8101b52:	bd80      	pop	{r7, pc}
 8101b54:	58024400 	.word	0x58024400
 8101b58:	081071fc 	.word	0x081071fc

08101b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8101b5c:	b480      	push	{r7}
 8101b5e:	b083      	sub	sp, #12
 8101b60:	af00      	add	r7, sp, #0
 8101b62:	6078      	str	r0, [r7, #4]
 8101b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8101b66:	687b      	ldr	r3, [r7, #4]
 8101b68:	223f      	movs	r2, #63	; 0x3f
 8101b6a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8101b6c:	4b1a      	ldr	r3, [pc, #104]	; (8101bd8 <HAL_RCC_GetClockConfig+0x7c>)
 8101b6e:	691b      	ldr	r3, [r3, #16]
 8101b70:	f003 0207 	and.w	r2, r3, #7
 8101b74:	687b      	ldr	r3, [r7, #4]
 8101b76:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8101b78:	4b17      	ldr	r3, [pc, #92]	; (8101bd8 <HAL_RCC_GetClockConfig+0x7c>)
 8101b7a:	699b      	ldr	r3, [r3, #24]
 8101b7c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8101b80:	687b      	ldr	r3, [r7, #4]
 8101b82:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8101b84:	4b14      	ldr	r3, [pc, #80]	; (8101bd8 <HAL_RCC_GetClockConfig+0x7c>)
 8101b86:	699b      	ldr	r3, [r3, #24]
 8101b88:	f003 020f 	and.w	r2, r3, #15
 8101b8c:	687b      	ldr	r3, [r7, #4]
 8101b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8101b90:	4b11      	ldr	r3, [pc, #68]	; (8101bd8 <HAL_RCC_GetClockConfig+0x7c>)
 8101b92:	699b      	ldr	r3, [r3, #24]
 8101b94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8101b9c:	4b0e      	ldr	r3, [pc, #56]	; (8101bd8 <HAL_RCC_GetClockConfig+0x7c>)
 8101b9e:	69db      	ldr	r3, [r3, #28]
 8101ba0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101ba4:	687b      	ldr	r3, [r7, #4]
 8101ba6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8101ba8:	4b0b      	ldr	r3, [pc, #44]	; (8101bd8 <HAL_RCC_GetClockConfig+0x7c>)
 8101baa:	69db      	ldr	r3, [r3, #28]
 8101bac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8101bb0:	687b      	ldr	r3, [r7, #4]
 8101bb2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8101bb4:	4b08      	ldr	r3, [pc, #32]	; (8101bd8 <HAL_RCC_GetClockConfig+0x7c>)
 8101bb6:	6a1b      	ldr	r3, [r3, #32]
 8101bb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8101bbc:	687b      	ldr	r3, [r7, #4]
 8101bbe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8101bc0:	4b06      	ldr	r3, [pc, #24]	; (8101bdc <HAL_RCC_GetClockConfig+0x80>)
 8101bc2:	681b      	ldr	r3, [r3, #0]
 8101bc4:	f003 020f 	and.w	r2, r3, #15
 8101bc8:	683b      	ldr	r3, [r7, #0]
 8101bca:	601a      	str	r2, [r3, #0]
}
 8101bcc:	bf00      	nop
 8101bce:	370c      	adds	r7, #12
 8101bd0:	46bd      	mov	sp, r7
 8101bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bd6:	4770      	bx	lr
 8101bd8:	58024400 	.word	0x58024400
 8101bdc:	52002000 	.word	0x52002000

08101be0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8101be0:	b580      	push	{r7, lr}
 8101be2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8101be4:	f7ff ff5c 	bl	8101aa0 <HAL_RCC_GetHCLKFreq>
 8101be8:	4601      	mov	r1, r0
 8101bea:	4b06      	ldr	r3, [pc, #24]	; (8101c04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8101bec:	6a1b      	ldr	r3, [r3, #32]
 8101bee:	091b      	lsrs	r3, r3, #4
 8101bf0:	f003 0307 	and.w	r3, r3, #7
 8101bf4:	4a04      	ldr	r2, [pc, #16]	; (8101c08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8101bf6:	5cd3      	ldrb	r3, [r2, r3]
 8101bf8:	f003 031f 	and.w	r3, r3, #31
 8101bfc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8101c00:	4618      	mov	r0, r3
 8101c02:	bd80      	pop	{r7, pc}
 8101c04:	58024400 	.word	0x58024400
 8101c08:	081071fc 	.word	0x081071fc

08101c0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8101c0c:	b480      	push	{r7}
 8101c0e:	b089      	sub	sp, #36	; 0x24
 8101c10:	af00      	add	r7, sp, #0
 8101c12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101c14:	4b9d      	ldr	r3, [pc, #628]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101c18:	f003 0303 	and.w	r3, r3, #3
 8101c1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8101c1e:	4b9b      	ldr	r3, [pc, #620]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101c22:	0b1b      	lsrs	r3, r3, #12
 8101c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101c28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8101c2a:	4b98      	ldr	r3, [pc, #608]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101c2e:	091b      	lsrs	r3, r3, #4
 8101c30:	f003 0301 	and.w	r3, r3, #1
 8101c34:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8101c36:	4b95      	ldr	r3, [pc, #596]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8101c3a:	08db      	lsrs	r3, r3, #3
 8101c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101c40:	693a      	ldr	r2, [r7, #16]
 8101c42:	fb02 f303 	mul.w	r3, r2, r3
 8101c46:	ee07 3a90 	vmov	s15, r3
 8101c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8101c52:	697b      	ldr	r3, [r7, #20]
 8101c54:	2b00      	cmp	r3, #0
 8101c56:	f000 810a 	beq.w	8101e6e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8101c5a:	69bb      	ldr	r3, [r7, #24]
 8101c5c:	2b01      	cmp	r3, #1
 8101c5e:	d05a      	beq.n	8101d16 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8101c60:	2b01      	cmp	r3, #1
 8101c62:	d302      	bcc.n	8101c6a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8101c64:	2b02      	cmp	r3, #2
 8101c66:	d078      	beq.n	8101d5a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8101c68:	e099      	b.n	8101d9e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101c6a:	4b88      	ldr	r3, [pc, #544]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101c6c:	681b      	ldr	r3, [r3, #0]
 8101c6e:	f003 0320 	and.w	r3, r3, #32
 8101c72:	2b00      	cmp	r3, #0
 8101c74:	d02d      	beq.n	8101cd2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101c76:	4b85      	ldr	r3, [pc, #532]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	08db      	lsrs	r3, r3, #3
 8101c7c:	f003 0303 	and.w	r3, r3, #3
 8101c80:	4a83      	ldr	r2, [pc, #524]	; (8101e90 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8101c82:	fa22 f303 	lsr.w	r3, r2, r3
 8101c86:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101c88:	68bb      	ldr	r3, [r7, #8]
 8101c8a:	ee07 3a90 	vmov	s15, r3
 8101c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101c92:	697b      	ldr	r3, [r7, #20]
 8101c94:	ee07 3a90 	vmov	s15, r3
 8101c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ca0:	4b7a      	ldr	r3, [pc, #488]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ca8:	ee07 3a90 	vmov	s15, r3
 8101cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8101cb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8101e94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ccc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8101cd0:	e087      	b.n	8101de2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101cd2:	697b      	ldr	r3, [r7, #20]
 8101cd4:	ee07 3a90 	vmov	s15, r3
 8101cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101cdc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8101e98 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8101ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ce4:	4b69      	ldr	r3, [pc, #420]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101cec:	ee07 3a90 	vmov	s15, r3
 8101cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101cf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8101cf8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8101e94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101d14:	e065      	b.n	8101de2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101d16:	697b      	ldr	r3, [r7, #20]
 8101d18:	ee07 3a90 	vmov	s15, r3
 8101d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d20:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8101e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8101d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d28:	4b58      	ldr	r3, [pc, #352]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101d30:	ee07 3a90 	vmov	s15, r3
 8101d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8101d3c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8101e94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101d58:	e043      	b.n	8101de2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101d5a:	697b      	ldr	r3, [r7, #20]
 8101d5c:	ee07 3a90 	vmov	s15, r3
 8101d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101d64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8101ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8101d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101d6c:	4b47      	ldr	r3, [pc, #284]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101d74:	ee07 3a90 	vmov	s15, r3
 8101d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8101d80:	eddf 5a44 	vldr	s11, [pc, #272]	; 8101e94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101d98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101d9c:	e021      	b.n	8101de2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	ee07 3a90 	vmov	s15, r3
 8101da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101da8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8101e9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8101dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101db0:	4b36      	ldr	r3, [pc, #216]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101db8:	ee07 3a90 	vmov	s15, r3
 8101dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8101dc4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8101e94 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8101dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101de0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8101de2:	4b2a      	ldr	r3, [pc, #168]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101de6:	0a5b      	lsrs	r3, r3, #9
 8101de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101dec:	ee07 3a90 	vmov	s15, r3
 8101df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101df4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101df8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8101e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101e08:	ee17 2a90 	vmov	r2, s15
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8101e10:	4b1e      	ldr	r3, [pc, #120]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101e14:	0c1b      	lsrs	r3, r3, #16
 8101e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101e1a:	ee07 3a90 	vmov	s15, r3
 8101e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101e26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101e2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8101e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101e36:	ee17 2a90 	vmov	r2, s15
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8101e3e:	4b13      	ldr	r3, [pc, #76]	; (8101e8c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8101e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8101e42:	0e1b      	lsrs	r3, r3, #24
 8101e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101e48:	ee07 3a90 	vmov	s15, r3
 8101e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101e54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8101e58:	edd7 6a07 	vldr	s13, [r7, #28]
 8101e5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101e60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101e64:	ee17 2a90 	vmov	r2, s15
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8101e6c:	e008      	b.n	8101e80 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	2200      	movs	r2, #0
 8101e72:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8101e74:	687b      	ldr	r3, [r7, #4]
 8101e76:	2200      	movs	r2, #0
 8101e78:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8101e7a:	687b      	ldr	r3, [r7, #4]
 8101e7c:	2200      	movs	r2, #0
 8101e7e:	609a      	str	r2, [r3, #8]
}
 8101e80:	bf00      	nop
 8101e82:	3724      	adds	r7, #36	; 0x24
 8101e84:	46bd      	mov	sp, r7
 8101e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e8a:	4770      	bx	lr
 8101e8c:	58024400 	.word	0x58024400
 8101e90:	03d09000 	.word	0x03d09000
 8101e94:	46000000 	.word	0x46000000
 8101e98:	4c742400 	.word	0x4c742400
 8101e9c:	4a742400 	.word	0x4a742400
 8101ea0:	4af42400 	.word	0x4af42400

08101ea4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8101ea4:	b480      	push	{r7}
 8101ea6:	b089      	sub	sp, #36	; 0x24
 8101ea8:	af00      	add	r7, sp, #0
 8101eaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101eac:	4b9d      	ldr	r3, [pc, #628]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101eb0:	f003 0303 	and.w	r3, r3, #3
 8101eb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8101eb6:	4b9b      	ldr	r3, [pc, #620]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101eba:	0d1b      	lsrs	r3, r3, #20
 8101ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101ec0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8101ec2:	4b98      	ldr	r3, [pc, #608]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ec6:	0a1b      	lsrs	r3, r3, #8
 8101ec8:	f003 0301 	and.w	r3, r3, #1
 8101ecc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8101ece:	4b95      	ldr	r3, [pc, #596]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8101ed2:	08db      	lsrs	r3, r3, #3
 8101ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101ed8:	693a      	ldr	r2, [r7, #16]
 8101eda:	fb02 f303 	mul.w	r3, r2, r3
 8101ede:	ee07 3a90 	vmov	s15, r3
 8101ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ee6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8101eea:	697b      	ldr	r3, [r7, #20]
 8101eec:	2b00      	cmp	r3, #0
 8101eee:	f000 810a 	beq.w	8102106 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8101ef2:	69bb      	ldr	r3, [r7, #24]
 8101ef4:	2b01      	cmp	r3, #1
 8101ef6:	d05a      	beq.n	8101fae <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8101ef8:	2b01      	cmp	r3, #1
 8101efa:	d302      	bcc.n	8101f02 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8101efc:	2b02      	cmp	r3, #2
 8101efe:	d078      	beq.n	8101ff2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8101f00:	e099      	b.n	8102036 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101f02:	4b88      	ldr	r3, [pc, #544]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101f04:	681b      	ldr	r3, [r3, #0]
 8101f06:	f003 0320 	and.w	r3, r3, #32
 8101f0a:	2b00      	cmp	r3, #0
 8101f0c:	d02d      	beq.n	8101f6a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101f0e:	4b85      	ldr	r3, [pc, #532]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101f10:	681b      	ldr	r3, [r3, #0]
 8101f12:	08db      	lsrs	r3, r3, #3
 8101f14:	f003 0303 	and.w	r3, r3, #3
 8101f18:	4a83      	ldr	r2, [pc, #524]	; (8102128 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8101f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8101f1e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101f20:	68bb      	ldr	r3, [r7, #8]
 8101f22:	ee07 3a90 	vmov	s15, r3
 8101f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f2a:	697b      	ldr	r3, [r7, #20]
 8101f2c:	ee07 3a90 	vmov	s15, r3
 8101f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f38:	4b7a      	ldr	r3, [pc, #488]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f40:	ee07 3a90 	vmov	s15, r3
 8101f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8101f4c:	eddf 5a77 	vldr	s11, [pc, #476]	; 810212c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f64:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8101f68:	e087      	b.n	810207a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101f6a:	697b      	ldr	r3, [r7, #20]
 8101f6c:	ee07 3a90 	vmov	s15, r3
 8101f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f74:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8102130 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8101f78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f7c:	4b69      	ldr	r3, [pc, #420]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f84:	ee07 3a90 	vmov	s15, r3
 8101f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8101f90:	eddf 5a66 	vldr	s11, [pc, #408]	; 810212c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101f94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fa8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101fac:	e065      	b.n	810207a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101fae:	697b      	ldr	r3, [r7, #20]
 8101fb0:	ee07 3a90 	vmov	s15, r3
 8101fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101fb8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8102134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8101fbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fc0:	4b58      	ldr	r3, [pc, #352]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8101fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8101fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101fc8:	ee07 3a90 	vmov	s15, r3
 8101fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101fd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8101fd4:	eddf 5a55 	vldr	s11, [pc, #340]	; 810212c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8101fd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101fdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101fe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8101ff0:	e043      	b.n	810207a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8101ff2:	697b      	ldr	r3, [r7, #20]
 8101ff4:	ee07 3a90 	vmov	s15, r3
 8101ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ffc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8102138 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8102000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102004:	4b47      	ldr	r3, [pc, #284]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8102006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810200c:	ee07 3a90 	vmov	s15, r3
 8102010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102014:	ed97 6a03 	vldr	s12, [r7, #12]
 8102018:	eddf 5a44 	vldr	s11, [pc, #272]	; 810212c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 810201c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102020:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102030:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102034:	e021      	b.n	810207a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102036:	697b      	ldr	r3, [r7, #20]
 8102038:	ee07 3a90 	vmov	s15, r3
 810203c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102040:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8102134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8102044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102048:	4b36      	ldr	r3, [pc, #216]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810204c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102050:	ee07 3a90 	vmov	s15, r3
 8102054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102058:	ed97 6a03 	vldr	s12, [r7, #12]
 810205c:	eddf 5a33 	vldr	s11, [pc, #204]	; 810212c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8102060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810206c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102070:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102074:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102078:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810207a:	4b2a      	ldr	r3, [pc, #168]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 810207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810207e:	0a5b      	lsrs	r3, r3, #9
 8102080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102084:	ee07 3a90 	vmov	s15, r3
 8102088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810208c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102090:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102094:	edd7 6a07 	vldr	s13, [r7, #28]
 8102098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810209c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020a0:	ee17 2a90 	vmov	r2, s15
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81020a8:	4b1e      	ldr	r3, [pc, #120]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81020ac:	0c1b      	lsrs	r3, r3, #16
 81020ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81020b2:	ee07 3a90 	vmov	s15, r3
 81020b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81020ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81020be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81020c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81020c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81020ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020ce:	ee17 2a90 	vmov	r2, s15
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81020d6:	4b13      	ldr	r3, [pc, #76]	; (8102124 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 81020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81020da:	0e1b      	lsrs	r3, r3, #24
 81020dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81020e0:	ee07 3a90 	vmov	s15, r3
 81020e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81020e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81020ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81020f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81020f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81020f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020fc:	ee17 2a90 	vmov	r2, s15
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102104:	e008      	b.n	8102118 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	2200      	movs	r2, #0
 810210a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	2200      	movs	r2, #0
 8102110:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	2200      	movs	r2, #0
 8102116:	609a      	str	r2, [r3, #8]
}
 8102118:	bf00      	nop
 810211a:	3724      	adds	r7, #36	; 0x24
 810211c:	46bd      	mov	sp, r7
 810211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102122:	4770      	bx	lr
 8102124:	58024400 	.word	0x58024400
 8102128:	03d09000 	.word	0x03d09000
 810212c:	46000000 	.word	0x46000000
 8102130:	4c742400 	.word	0x4c742400
 8102134:	4a742400 	.word	0x4a742400
 8102138:	4af42400 	.word	0x4af42400

0810213c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	b082      	sub	sp, #8
 8102140:	af00      	add	r7, sp, #0
 8102142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102144:	687b      	ldr	r3, [r7, #4]
 8102146:	2b00      	cmp	r3, #0
 8102148:	d101      	bne.n	810214e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810214a:	2301      	movs	r3, #1
 810214c:	e049      	b.n	81021e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102154:	b2db      	uxtb	r3, r3
 8102156:	2b00      	cmp	r3, #0
 8102158:	d106      	bne.n	8102168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810215a:	687b      	ldr	r3, [r7, #4]
 810215c:	2200      	movs	r2, #0
 810215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8102162:	6878      	ldr	r0, [r7, #4]
 8102164:	f7fe fdf4 	bl	8100d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102168:	687b      	ldr	r3, [r7, #4]
 810216a:	2202      	movs	r2, #2
 810216c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	681a      	ldr	r2, [r3, #0]
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	3304      	adds	r3, #4
 8102178:	4619      	mov	r1, r3
 810217a:	4610      	mov	r0, r2
 810217c:	f000 fcc8 	bl	8102b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8102180:	687b      	ldr	r3, [r7, #4]
 8102182:	2201      	movs	r2, #1
 8102184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	2201      	movs	r2, #1
 810218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	2201      	movs	r2, #1
 8102194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	2201      	movs	r2, #1
 810219c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	2201      	movs	r2, #1
 81021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	2201      	movs	r2, #1
 81021ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81021b0:	687b      	ldr	r3, [r7, #4]
 81021b2:	2201      	movs	r2, #1
 81021b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81021b8:	687b      	ldr	r3, [r7, #4]
 81021ba:	2201      	movs	r2, #1
 81021bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81021c0:	687b      	ldr	r3, [r7, #4]
 81021c2:	2201      	movs	r2, #1
 81021c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	2201      	movs	r2, #1
 81021cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	2201      	movs	r2, #1
 81021d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81021d8:	687b      	ldr	r3, [r7, #4]
 81021da:	2201      	movs	r2, #1
 81021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81021e0:	2300      	movs	r3, #0
}
 81021e2:	4618      	mov	r0, r3
 81021e4:	3708      	adds	r7, #8
 81021e6:	46bd      	mov	sp, r7
 81021e8:	bd80      	pop	{r7, pc}
	...

081021ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81021ec:	b480      	push	{r7}
 81021ee:	b085      	sub	sp, #20
 81021f0:	af00      	add	r7, sp, #0
 81021f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81021fa:	b2db      	uxtb	r3, r3
 81021fc:	2b01      	cmp	r3, #1
 81021fe:	d001      	beq.n	8102204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8102200:	2301      	movs	r3, #1
 8102202:	e021      	b.n	8102248 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	2202      	movs	r2, #2
 8102208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810220c:	687b      	ldr	r3, [r7, #4]
 810220e:	681b      	ldr	r3, [r3, #0]
 8102210:	68da      	ldr	r2, [r3, #12]
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	681b      	ldr	r3, [r3, #0]
 8102216:	f042 0201 	orr.w	r2, r2, #1
 810221a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810221c:	687b      	ldr	r3, [r7, #4]
 810221e:	681b      	ldr	r3, [r3, #0]
 8102220:	689a      	ldr	r2, [r3, #8]
 8102222:	4b0c      	ldr	r3, [pc, #48]	; (8102254 <HAL_TIM_Base_Start_IT+0x68>)
 8102224:	4013      	ands	r3, r2
 8102226:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102228:	68fb      	ldr	r3, [r7, #12]
 810222a:	2b06      	cmp	r3, #6
 810222c:	d00b      	beq.n	8102246 <HAL_TIM_Base_Start_IT+0x5a>
 810222e:	68fb      	ldr	r3, [r7, #12]
 8102230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102234:	d007      	beq.n	8102246 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	681b      	ldr	r3, [r3, #0]
 810223a:	681a      	ldr	r2, [r3, #0]
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	f042 0201 	orr.w	r2, r2, #1
 8102244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8102246:	2300      	movs	r3, #0
}
 8102248:	4618      	mov	r0, r3
 810224a:	3714      	adds	r7, #20
 810224c:	46bd      	mov	sp, r7
 810224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102252:	4770      	bx	lr
 8102254:	00010007 	.word	0x00010007

08102258 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8102258:	b580      	push	{r7, lr}
 810225a:	b082      	sub	sp, #8
 810225c:	af00      	add	r7, sp, #0
 810225e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	2b00      	cmp	r3, #0
 8102264:	d101      	bne.n	810226a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8102266:	2301      	movs	r3, #1
 8102268:	e049      	b.n	81022fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8102270:	b2db      	uxtb	r3, r3
 8102272:	2b00      	cmp	r3, #0
 8102274:	d106      	bne.n	8102284 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	2200      	movs	r2, #0
 810227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 810227e:	6878      	ldr	r0, [r7, #4]
 8102280:	f000 f841 	bl	8102306 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	2202      	movs	r2, #2
 8102288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	681a      	ldr	r2, [r3, #0]
 8102290:	687b      	ldr	r3, [r7, #4]
 8102292:	3304      	adds	r3, #4
 8102294:	4619      	mov	r1, r3
 8102296:	4610      	mov	r0, r2
 8102298:	f000 fc3a 	bl	8102b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810229c:	687b      	ldr	r3, [r7, #4]
 810229e:	2201      	movs	r2, #1
 81022a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	2201      	movs	r2, #1
 81022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	2201      	movs	r2, #1
 81022b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	2201      	movs	r2, #1
 81022b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81022bc:	687b      	ldr	r3, [r7, #4]
 81022be:	2201      	movs	r2, #1
 81022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81022c4:	687b      	ldr	r3, [r7, #4]
 81022c6:	2201      	movs	r2, #1
 81022c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	2201      	movs	r2, #1
 81022d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81022d4:	687b      	ldr	r3, [r7, #4]
 81022d6:	2201      	movs	r2, #1
 81022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	2201      	movs	r2, #1
 81022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81022e4:	687b      	ldr	r3, [r7, #4]
 81022e6:	2201      	movs	r2, #1
 81022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	2201      	movs	r2, #1
 81022f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	2201      	movs	r2, #1
 81022f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81022fc:	2300      	movs	r3, #0
}
 81022fe:	4618      	mov	r0, r3
 8102300:	3708      	adds	r7, #8
 8102302:	46bd      	mov	sp, r7
 8102304:	bd80      	pop	{r7, pc}

08102306 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8102306:	b480      	push	{r7}
 8102308:	b083      	sub	sp, #12
 810230a:	af00      	add	r7, sp, #0
 810230c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 810230e:	bf00      	nop
 8102310:	370c      	adds	r7, #12
 8102312:	46bd      	mov	sp, r7
 8102314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102318:	4770      	bx	lr
	...

0810231c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 810231c:	b580      	push	{r7, lr}
 810231e:	b084      	sub	sp, #16
 8102320:	af00      	add	r7, sp, #0
 8102322:	6078      	str	r0, [r7, #4]
 8102324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8102326:	683b      	ldr	r3, [r7, #0]
 8102328:	2b00      	cmp	r3, #0
 810232a:	d109      	bne.n	8102340 <HAL_TIM_PWM_Start+0x24>
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8102332:	b2db      	uxtb	r3, r3
 8102334:	2b01      	cmp	r3, #1
 8102336:	bf14      	ite	ne
 8102338:	2301      	movne	r3, #1
 810233a:	2300      	moveq	r3, #0
 810233c:	b2db      	uxtb	r3, r3
 810233e:	e03c      	b.n	81023ba <HAL_TIM_PWM_Start+0x9e>
 8102340:	683b      	ldr	r3, [r7, #0]
 8102342:	2b04      	cmp	r3, #4
 8102344:	d109      	bne.n	810235a <HAL_TIM_PWM_Start+0x3e>
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 810234c:	b2db      	uxtb	r3, r3
 810234e:	2b01      	cmp	r3, #1
 8102350:	bf14      	ite	ne
 8102352:	2301      	movne	r3, #1
 8102354:	2300      	moveq	r3, #0
 8102356:	b2db      	uxtb	r3, r3
 8102358:	e02f      	b.n	81023ba <HAL_TIM_PWM_Start+0x9e>
 810235a:	683b      	ldr	r3, [r7, #0]
 810235c:	2b08      	cmp	r3, #8
 810235e:	d109      	bne.n	8102374 <HAL_TIM_PWM_Start+0x58>
 8102360:	687b      	ldr	r3, [r7, #4]
 8102362:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8102366:	b2db      	uxtb	r3, r3
 8102368:	2b01      	cmp	r3, #1
 810236a:	bf14      	ite	ne
 810236c:	2301      	movne	r3, #1
 810236e:	2300      	moveq	r3, #0
 8102370:	b2db      	uxtb	r3, r3
 8102372:	e022      	b.n	81023ba <HAL_TIM_PWM_Start+0x9e>
 8102374:	683b      	ldr	r3, [r7, #0]
 8102376:	2b0c      	cmp	r3, #12
 8102378:	d109      	bne.n	810238e <HAL_TIM_PWM_Start+0x72>
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102380:	b2db      	uxtb	r3, r3
 8102382:	2b01      	cmp	r3, #1
 8102384:	bf14      	ite	ne
 8102386:	2301      	movne	r3, #1
 8102388:	2300      	moveq	r3, #0
 810238a:	b2db      	uxtb	r3, r3
 810238c:	e015      	b.n	81023ba <HAL_TIM_PWM_Start+0x9e>
 810238e:	683b      	ldr	r3, [r7, #0]
 8102390:	2b10      	cmp	r3, #16
 8102392:	d109      	bne.n	81023a8 <HAL_TIM_PWM_Start+0x8c>
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 810239a:	b2db      	uxtb	r3, r3
 810239c:	2b01      	cmp	r3, #1
 810239e:	bf14      	ite	ne
 81023a0:	2301      	movne	r3, #1
 81023a2:	2300      	moveq	r3, #0
 81023a4:	b2db      	uxtb	r3, r3
 81023a6:	e008      	b.n	81023ba <HAL_TIM_PWM_Start+0x9e>
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81023ae:	b2db      	uxtb	r3, r3
 81023b0:	2b01      	cmp	r3, #1
 81023b2:	bf14      	ite	ne
 81023b4:	2301      	movne	r3, #1
 81023b6:	2300      	moveq	r3, #0
 81023b8:	b2db      	uxtb	r3, r3
 81023ba:	2b00      	cmp	r3, #0
 81023bc:	d001      	beq.n	81023c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 81023be:	2301      	movs	r3, #1
 81023c0:	e06e      	b.n	81024a0 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 81023c2:	683b      	ldr	r3, [r7, #0]
 81023c4:	2b00      	cmp	r3, #0
 81023c6:	d104      	bne.n	81023d2 <HAL_TIM_PWM_Start+0xb6>
 81023c8:	687b      	ldr	r3, [r7, #4]
 81023ca:	2202      	movs	r2, #2
 81023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81023d0:	e023      	b.n	810241a <HAL_TIM_PWM_Start+0xfe>
 81023d2:	683b      	ldr	r3, [r7, #0]
 81023d4:	2b04      	cmp	r3, #4
 81023d6:	d104      	bne.n	81023e2 <HAL_TIM_PWM_Start+0xc6>
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	2202      	movs	r2, #2
 81023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81023e0:	e01b      	b.n	810241a <HAL_TIM_PWM_Start+0xfe>
 81023e2:	683b      	ldr	r3, [r7, #0]
 81023e4:	2b08      	cmp	r3, #8
 81023e6:	d104      	bne.n	81023f2 <HAL_TIM_PWM_Start+0xd6>
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	2202      	movs	r2, #2
 81023ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81023f0:	e013      	b.n	810241a <HAL_TIM_PWM_Start+0xfe>
 81023f2:	683b      	ldr	r3, [r7, #0]
 81023f4:	2b0c      	cmp	r3, #12
 81023f6:	d104      	bne.n	8102402 <HAL_TIM_PWM_Start+0xe6>
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	2202      	movs	r2, #2
 81023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8102400:	e00b      	b.n	810241a <HAL_TIM_PWM_Start+0xfe>
 8102402:	683b      	ldr	r3, [r7, #0]
 8102404:	2b10      	cmp	r3, #16
 8102406:	d104      	bne.n	8102412 <HAL_TIM_PWM_Start+0xf6>
 8102408:	687b      	ldr	r3, [r7, #4]
 810240a:	2202      	movs	r2, #2
 810240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8102410:	e003      	b.n	810241a <HAL_TIM_PWM_Start+0xfe>
 8102412:	687b      	ldr	r3, [r7, #4]
 8102414:	2202      	movs	r2, #2
 8102416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	681b      	ldr	r3, [r3, #0]
 810241e:	2201      	movs	r2, #1
 8102420:	6839      	ldr	r1, [r7, #0]
 8102422:	4618      	mov	r0, r3
 8102424:	f000 ff78 	bl	8103318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	4a1e      	ldr	r2, [pc, #120]	; (81024a8 <HAL_TIM_PWM_Start+0x18c>)
 810242e:	4293      	cmp	r3, r2
 8102430:	d013      	beq.n	810245a <HAL_TIM_PWM_Start+0x13e>
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	4a1d      	ldr	r2, [pc, #116]	; (81024ac <HAL_TIM_PWM_Start+0x190>)
 8102438:	4293      	cmp	r3, r2
 810243a:	d00e      	beq.n	810245a <HAL_TIM_PWM_Start+0x13e>
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	681b      	ldr	r3, [r3, #0]
 8102440:	4a1b      	ldr	r2, [pc, #108]	; (81024b0 <HAL_TIM_PWM_Start+0x194>)
 8102442:	4293      	cmp	r3, r2
 8102444:	d009      	beq.n	810245a <HAL_TIM_PWM_Start+0x13e>
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	681b      	ldr	r3, [r3, #0]
 810244a:	4a1a      	ldr	r2, [pc, #104]	; (81024b4 <HAL_TIM_PWM_Start+0x198>)
 810244c:	4293      	cmp	r3, r2
 810244e:	d004      	beq.n	810245a <HAL_TIM_PWM_Start+0x13e>
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	4a18      	ldr	r2, [pc, #96]	; (81024b8 <HAL_TIM_PWM_Start+0x19c>)
 8102456:	4293      	cmp	r3, r2
 8102458:	d101      	bne.n	810245e <HAL_TIM_PWM_Start+0x142>
 810245a:	2301      	movs	r3, #1
 810245c:	e000      	b.n	8102460 <HAL_TIM_PWM_Start+0x144>
 810245e:	2300      	movs	r3, #0
 8102460:	2b00      	cmp	r3, #0
 8102462:	d007      	beq.n	8102474 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	681b      	ldr	r3, [r3, #0]
 8102468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810246a:	687b      	ldr	r3, [r7, #4]
 810246c:	681b      	ldr	r3, [r3, #0]
 810246e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8102472:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	681b      	ldr	r3, [r3, #0]
 8102478:	689a      	ldr	r2, [r3, #8]
 810247a:	4b10      	ldr	r3, [pc, #64]	; (81024bc <HAL_TIM_PWM_Start+0x1a0>)
 810247c:	4013      	ands	r3, r2
 810247e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8102480:	68fb      	ldr	r3, [r7, #12]
 8102482:	2b06      	cmp	r3, #6
 8102484:	d00b      	beq.n	810249e <HAL_TIM_PWM_Start+0x182>
 8102486:	68fb      	ldr	r3, [r7, #12]
 8102488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810248c:	d007      	beq.n	810249e <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	681b      	ldr	r3, [r3, #0]
 8102492:	681a      	ldr	r2, [r3, #0]
 8102494:	687b      	ldr	r3, [r7, #4]
 8102496:	681b      	ldr	r3, [r3, #0]
 8102498:	f042 0201 	orr.w	r2, r2, #1
 810249c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810249e:	2300      	movs	r3, #0
}
 81024a0:	4618      	mov	r0, r3
 81024a2:	3710      	adds	r7, #16
 81024a4:	46bd      	mov	sp, r7
 81024a6:	bd80      	pop	{r7, pc}
 81024a8:	40010000 	.word	0x40010000
 81024ac:	40010400 	.word	0x40010400
 81024b0:	40014000 	.word	0x40014000
 81024b4:	40014400 	.word	0x40014400
 81024b8:	40014800 	.word	0x40014800
 81024bc:	00010007 	.word	0x00010007

081024c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81024c0:	b580      	push	{r7, lr}
 81024c2:	b082      	sub	sp, #8
 81024c4:	af00      	add	r7, sp, #0
 81024c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	681b      	ldr	r3, [r3, #0]
 81024cc:	691b      	ldr	r3, [r3, #16]
 81024ce:	f003 0302 	and.w	r3, r3, #2
 81024d2:	2b02      	cmp	r3, #2
 81024d4:	d122      	bne.n	810251c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	68db      	ldr	r3, [r3, #12]
 81024dc:	f003 0302 	and.w	r3, r3, #2
 81024e0:	2b02      	cmp	r3, #2
 81024e2:	d11b      	bne.n	810251c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	f06f 0202 	mvn.w	r2, #2
 81024ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	2201      	movs	r2, #1
 81024f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	681b      	ldr	r3, [r3, #0]
 81024f8:	699b      	ldr	r3, [r3, #24]
 81024fa:	f003 0303 	and.w	r3, r3, #3
 81024fe:	2b00      	cmp	r3, #0
 8102500:	d003      	beq.n	810250a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8102502:	6878      	ldr	r0, [r7, #4]
 8102504:	f000 fae6 	bl	8102ad4 <HAL_TIM_IC_CaptureCallback>
 8102508:	e005      	b.n	8102516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810250a:	6878      	ldr	r0, [r7, #4]
 810250c:	f000 fad8 	bl	8102ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102510:	6878      	ldr	r0, [r7, #4]
 8102512:	f000 fae9 	bl	8102ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	2200      	movs	r2, #0
 810251a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	691b      	ldr	r3, [r3, #16]
 8102522:	f003 0304 	and.w	r3, r3, #4
 8102526:	2b04      	cmp	r3, #4
 8102528:	d122      	bne.n	8102570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810252a:	687b      	ldr	r3, [r7, #4]
 810252c:	681b      	ldr	r3, [r3, #0]
 810252e:	68db      	ldr	r3, [r3, #12]
 8102530:	f003 0304 	and.w	r3, r3, #4
 8102534:	2b04      	cmp	r3, #4
 8102536:	d11b      	bne.n	8102570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	f06f 0204 	mvn.w	r2, #4
 8102540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	2202      	movs	r2, #2
 8102546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	699b      	ldr	r3, [r3, #24]
 810254e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102552:	2b00      	cmp	r3, #0
 8102554:	d003      	beq.n	810255e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8102556:	6878      	ldr	r0, [r7, #4]
 8102558:	f000 fabc 	bl	8102ad4 <HAL_TIM_IC_CaptureCallback>
 810255c:	e005      	b.n	810256a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810255e:	6878      	ldr	r0, [r7, #4]
 8102560:	f000 faae 	bl	8102ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8102564:	6878      	ldr	r0, [r7, #4]
 8102566:	f000 fabf 	bl	8102ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810256a:	687b      	ldr	r3, [r7, #4]
 810256c:	2200      	movs	r2, #0
 810256e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	691b      	ldr	r3, [r3, #16]
 8102576:	f003 0308 	and.w	r3, r3, #8
 810257a:	2b08      	cmp	r3, #8
 810257c:	d122      	bne.n	81025c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810257e:	687b      	ldr	r3, [r7, #4]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	68db      	ldr	r3, [r3, #12]
 8102584:	f003 0308 	and.w	r3, r3, #8
 8102588:	2b08      	cmp	r3, #8
 810258a:	d11b      	bne.n	81025c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810258c:	687b      	ldr	r3, [r7, #4]
 810258e:	681b      	ldr	r3, [r3, #0]
 8102590:	f06f 0208 	mvn.w	r2, #8
 8102594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	2204      	movs	r2, #4
 810259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	69db      	ldr	r3, [r3, #28]
 81025a2:	f003 0303 	and.w	r3, r3, #3
 81025a6:	2b00      	cmp	r3, #0
 81025a8:	d003      	beq.n	81025b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81025aa:	6878      	ldr	r0, [r7, #4]
 81025ac:	f000 fa92 	bl	8102ad4 <HAL_TIM_IC_CaptureCallback>
 81025b0:	e005      	b.n	81025be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81025b2:	6878      	ldr	r0, [r7, #4]
 81025b4:	f000 fa84 	bl	8102ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81025b8:	6878      	ldr	r0, [r7, #4]
 81025ba:	f000 fa95 	bl	8102ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	2200      	movs	r2, #0
 81025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	691b      	ldr	r3, [r3, #16]
 81025ca:	f003 0310 	and.w	r3, r3, #16
 81025ce:	2b10      	cmp	r3, #16
 81025d0:	d122      	bne.n	8102618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	68db      	ldr	r3, [r3, #12]
 81025d8:	f003 0310 	and.w	r3, r3, #16
 81025dc:	2b10      	cmp	r3, #16
 81025de:	d11b      	bne.n	8102618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 81025e0:	687b      	ldr	r3, [r7, #4]
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	f06f 0210 	mvn.w	r2, #16
 81025e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	2208      	movs	r2, #8
 81025ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 81025f0:	687b      	ldr	r3, [r7, #4]
 81025f2:	681b      	ldr	r3, [r3, #0]
 81025f4:	69db      	ldr	r3, [r3, #28]
 81025f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81025fa:	2b00      	cmp	r3, #0
 81025fc:	d003      	beq.n	8102606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81025fe:	6878      	ldr	r0, [r7, #4]
 8102600:	f000 fa68 	bl	8102ad4 <HAL_TIM_IC_CaptureCallback>
 8102604:	e005      	b.n	8102612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8102606:	6878      	ldr	r0, [r7, #4]
 8102608:	f000 fa5a 	bl	8102ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810260c:	6878      	ldr	r0, [r7, #4]
 810260e:	f000 fa6b 	bl	8102ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	2200      	movs	r2, #0
 8102616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	691b      	ldr	r3, [r3, #16]
 810261e:	f003 0301 	and.w	r3, r3, #1
 8102622:	2b01      	cmp	r3, #1
 8102624:	d10e      	bne.n	8102644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	681b      	ldr	r3, [r3, #0]
 810262a:	68db      	ldr	r3, [r3, #12]
 810262c:	f003 0301 	and.w	r3, r3, #1
 8102630:	2b01      	cmp	r3, #1
 8102632:	d107      	bne.n	8102644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	681b      	ldr	r3, [r3, #0]
 8102638:	f06f 0201 	mvn.w	r2, #1
 810263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810263e:	6878      	ldr	r0, [r7, #4]
 8102640:	f7fe f8d6 	bl	81007f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8102644:	687b      	ldr	r3, [r7, #4]
 8102646:	681b      	ldr	r3, [r3, #0]
 8102648:	691b      	ldr	r3, [r3, #16]
 810264a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810264e:	2b80      	cmp	r3, #128	; 0x80
 8102650:	d10e      	bne.n	8102670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	68db      	ldr	r3, [r3, #12]
 8102658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810265c:	2b80      	cmp	r3, #128	; 0x80
 810265e:	d107      	bne.n	8102670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8102660:	687b      	ldr	r3, [r7, #4]
 8102662:	681b      	ldr	r3, [r3, #0]
 8102664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8102668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810266a:	6878      	ldr	r0, [r7, #4]
 810266c:	f000 ff8a 	bl	8103584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8102670:	687b      	ldr	r3, [r7, #4]
 8102672:	681b      	ldr	r3, [r3, #0]
 8102674:	691b      	ldr	r3, [r3, #16]
 8102676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810267a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810267e:	d10e      	bne.n	810269e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	681b      	ldr	r3, [r3, #0]
 8102684:	68db      	ldr	r3, [r3, #12]
 8102686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810268a:	2b80      	cmp	r3, #128	; 0x80
 810268c:	d107      	bne.n	810269e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	681b      	ldr	r3, [r3, #0]
 8102692:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8102696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8102698:	6878      	ldr	r0, [r7, #4]
 810269a:	f000 ff7d 	bl	8103598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	681b      	ldr	r3, [r3, #0]
 81026a2:	691b      	ldr	r3, [r3, #16]
 81026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81026a8:	2b40      	cmp	r3, #64	; 0x40
 81026aa:	d10e      	bne.n	81026ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	68db      	ldr	r3, [r3, #12]
 81026b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81026b6:	2b40      	cmp	r3, #64	; 0x40
 81026b8:	d107      	bne.n	81026ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 81026c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81026c4:	6878      	ldr	r0, [r7, #4]
 81026c6:	f000 fa19 	bl	8102afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 81026ca:	687b      	ldr	r3, [r7, #4]
 81026cc:	681b      	ldr	r3, [r3, #0]
 81026ce:	691b      	ldr	r3, [r3, #16]
 81026d0:	f003 0320 	and.w	r3, r3, #32
 81026d4:	2b20      	cmp	r3, #32
 81026d6:	d10e      	bne.n	81026f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	681b      	ldr	r3, [r3, #0]
 81026dc:	68db      	ldr	r3, [r3, #12]
 81026de:	f003 0320 	and.w	r3, r3, #32
 81026e2:	2b20      	cmp	r3, #32
 81026e4:	d107      	bne.n	81026f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	f06f 0220 	mvn.w	r2, #32
 81026ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81026f0:	6878      	ldr	r0, [r7, #4]
 81026f2:	f000 ff3d 	bl	8103570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81026f6:	bf00      	nop
 81026f8:	3708      	adds	r7, #8
 81026fa:	46bd      	mov	sp, r7
 81026fc:	bd80      	pop	{r7, pc}
	...

08102700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8102700:	b580      	push	{r7, lr}
 8102702:	b084      	sub	sp, #16
 8102704:	af00      	add	r7, sp, #0
 8102706:	60f8      	str	r0, [r7, #12]
 8102708:	60b9      	str	r1, [r7, #8]
 810270a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 810270c:	68fb      	ldr	r3, [r7, #12]
 810270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102712:	2b01      	cmp	r3, #1
 8102714:	d101      	bne.n	810271a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8102716:	2302      	movs	r3, #2
 8102718:	e0fd      	b.n	8102916 <HAL_TIM_PWM_ConfigChannel+0x216>
 810271a:	68fb      	ldr	r3, [r7, #12]
 810271c:	2201      	movs	r2, #1
 810271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	2b14      	cmp	r3, #20
 8102726:	f200 80f0 	bhi.w	810290a <HAL_TIM_PWM_ConfigChannel+0x20a>
 810272a:	a201      	add	r2, pc, #4	; (adr r2, 8102730 <HAL_TIM_PWM_ConfigChannel+0x30>)
 810272c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102730:	08102785 	.word	0x08102785
 8102734:	0810290b 	.word	0x0810290b
 8102738:	0810290b 	.word	0x0810290b
 810273c:	0810290b 	.word	0x0810290b
 8102740:	081027c5 	.word	0x081027c5
 8102744:	0810290b 	.word	0x0810290b
 8102748:	0810290b 	.word	0x0810290b
 810274c:	0810290b 	.word	0x0810290b
 8102750:	08102807 	.word	0x08102807
 8102754:	0810290b 	.word	0x0810290b
 8102758:	0810290b 	.word	0x0810290b
 810275c:	0810290b 	.word	0x0810290b
 8102760:	08102847 	.word	0x08102847
 8102764:	0810290b 	.word	0x0810290b
 8102768:	0810290b 	.word	0x0810290b
 810276c:	0810290b 	.word	0x0810290b
 8102770:	08102889 	.word	0x08102889
 8102774:	0810290b 	.word	0x0810290b
 8102778:	0810290b 	.word	0x0810290b
 810277c:	0810290b 	.word	0x0810290b
 8102780:	081028c9 	.word	0x081028c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8102784:	68fb      	ldr	r3, [r7, #12]
 8102786:	681b      	ldr	r3, [r3, #0]
 8102788:	68b9      	ldr	r1, [r7, #8]
 810278a:	4618      	mov	r0, r3
 810278c:	f000 fa5a 	bl	8102c44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8102790:	68fb      	ldr	r3, [r7, #12]
 8102792:	681b      	ldr	r3, [r3, #0]
 8102794:	699a      	ldr	r2, [r3, #24]
 8102796:	68fb      	ldr	r3, [r7, #12]
 8102798:	681b      	ldr	r3, [r3, #0]
 810279a:	f042 0208 	orr.w	r2, r2, #8
 810279e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81027a0:	68fb      	ldr	r3, [r7, #12]
 81027a2:	681b      	ldr	r3, [r3, #0]
 81027a4:	699a      	ldr	r2, [r3, #24]
 81027a6:	68fb      	ldr	r3, [r7, #12]
 81027a8:	681b      	ldr	r3, [r3, #0]
 81027aa:	f022 0204 	bic.w	r2, r2, #4
 81027ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	6999      	ldr	r1, [r3, #24]
 81027b6:	68bb      	ldr	r3, [r7, #8]
 81027b8:	691a      	ldr	r2, [r3, #16]
 81027ba:	68fb      	ldr	r3, [r7, #12]
 81027bc:	681b      	ldr	r3, [r3, #0]
 81027be:	430a      	orrs	r2, r1
 81027c0:	619a      	str	r2, [r3, #24]
      break;
 81027c2:	e0a3      	b.n	810290c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81027c4:	68fb      	ldr	r3, [r7, #12]
 81027c6:	681b      	ldr	r3, [r3, #0]
 81027c8:	68b9      	ldr	r1, [r7, #8]
 81027ca:	4618      	mov	r0, r3
 81027cc:	f000 faca 	bl	8102d64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81027d0:	68fb      	ldr	r3, [r7, #12]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	699a      	ldr	r2, [r3, #24]
 81027d6:	68fb      	ldr	r3, [r7, #12]
 81027d8:	681b      	ldr	r3, [r3, #0]
 81027da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81027de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81027e0:	68fb      	ldr	r3, [r7, #12]
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	699a      	ldr	r2, [r3, #24]
 81027e6:	68fb      	ldr	r3, [r7, #12]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81027ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81027f0:	68fb      	ldr	r3, [r7, #12]
 81027f2:	681b      	ldr	r3, [r3, #0]
 81027f4:	6999      	ldr	r1, [r3, #24]
 81027f6:	68bb      	ldr	r3, [r7, #8]
 81027f8:	691b      	ldr	r3, [r3, #16]
 81027fa:	021a      	lsls	r2, r3, #8
 81027fc:	68fb      	ldr	r3, [r7, #12]
 81027fe:	681b      	ldr	r3, [r3, #0]
 8102800:	430a      	orrs	r2, r1
 8102802:	619a      	str	r2, [r3, #24]
      break;
 8102804:	e082      	b.n	810290c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8102806:	68fb      	ldr	r3, [r7, #12]
 8102808:	681b      	ldr	r3, [r3, #0]
 810280a:	68b9      	ldr	r1, [r7, #8]
 810280c:	4618      	mov	r0, r3
 810280e:	f000 fb33 	bl	8102e78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8102812:	68fb      	ldr	r3, [r7, #12]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	69da      	ldr	r2, [r3, #28]
 8102818:	68fb      	ldr	r3, [r7, #12]
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	f042 0208 	orr.w	r2, r2, #8
 8102820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8102822:	68fb      	ldr	r3, [r7, #12]
 8102824:	681b      	ldr	r3, [r3, #0]
 8102826:	69da      	ldr	r2, [r3, #28]
 8102828:	68fb      	ldr	r3, [r7, #12]
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	f022 0204 	bic.w	r2, r2, #4
 8102830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8102832:	68fb      	ldr	r3, [r7, #12]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	69d9      	ldr	r1, [r3, #28]
 8102838:	68bb      	ldr	r3, [r7, #8]
 810283a:	691a      	ldr	r2, [r3, #16]
 810283c:	68fb      	ldr	r3, [r7, #12]
 810283e:	681b      	ldr	r3, [r3, #0]
 8102840:	430a      	orrs	r2, r1
 8102842:	61da      	str	r2, [r3, #28]
      break;
 8102844:	e062      	b.n	810290c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8102846:	68fb      	ldr	r3, [r7, #12]
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	68b9      	ldr	r1, [r7, #8]
 810284c:	4618      	mov	r0, r3
 810284e:	f000 fb99 	bl	8102f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8102852:	68fb      	ldr	r3, [r7, #12]
 8102854:	681b      	ldr	r3, [r3, #0]
 8102856:	69da      	ldr	r2, [r3, #28]
 8102858:	68fb      	ldr	r3, [r7, #12]
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8102860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8102862:	68fb      	ldr	r3, [r7, #12]
 8102864:	681b      	ldr	r3, [r3, #0]
 8102866:	69da      	ldr	r2, [r3, #28]
 8102868:	68fb      	ldr	r3, [r7, #12]
 810286a:	681b      	ldr	r3, [r3, #0]
 810286c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8102870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8102872:	68fb      	ldr	r3, [r7, #12]
 8102874:	681b      	ldr	r3, [r3, #0]
 8102876:	69d9      	ldr	r1, [r3, #28]
 8102878:	68bb      	ldr	r3, [r7, #8]
 810287a:	691b      	ldr	r3, [r3, #16]
 810287c:	021a      	lsls	r2, r3, #8
 810287e:	68fb      	ldr	r3, [r7, #12]
 8102880:	681b      	ldr	r3, [r3, #0]
 8102882:	430a      	orrs	r2, r1
 8102884:	61da      	str	r2, [r3, #28]
      break;
 8102886:	e041      	b.n	810290c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8102888:	68fb      	ldr	r3, [r7, #12]
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	68b9      	ldr	r1, [r7, #8]
 810288e:	4618      	mov	r0, r3
 8102890:	f000 fbe0 	bl	8103054 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8102894:	68fb      	ldr	r3, [r7, #12]
 8102896:	681b      	ldr	r3, [r3, #0]
 8102898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810289a:	68fb      	ldr	r3, [r7, #12]
 810289c:	681b      	ldr	r3, [r3, #0]
 810289e:	f042 0208 	orr.w	r2, r2, #8
 81028a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81028a4:	68fb      	ldr	r3, [r7, #12]
 81028a6:	681b      	ldr	r3, [r3, #0]
 81028a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81028aa:	68fb      	ldr	r3, [r7, #12]
 81028ac:	681b      	ldr	r3, [r3, #0]
 81028ae:	f022 0204 	bic.w	r2, r2, #4
 81028b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	681b      	ldr	r3, [r3, #0]
 81028b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81028ba:	68bb      	ldr	r3, [r7, #8]
 81028bc:	691a      	ldr	r2, [r3, #16]
 81028be:	68fb      	ldr	r3, [r7, #12]
 81028c0:	681b      	ldr	r3, [r3, #0]
 81028c2:	430a      	orrs	r2, r1
 81028c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 81028c6:	e021      	b.n	810290c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81028c8:	68fb      	ldr	r3, [r7, #12]
 81028ca:	681b      	ldr	r3, [r3, #0]
 81028cc:	68b9      	ldr	r1, [r7, #8]
 81028ce:	4618      	mov	r0, r3
 81028d0:	f000 fc22 	bl	8103118 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81028d4:	68fb      	ldr	r3, [r7, #12]
 81028d6:	681b      	ldr	r3, [r3, #0]
 81028d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81028da:	68fb      	ldr	r3, [r7, #12]
 81028dc:	681b      	ldr	r3, [r3, #0]
 81028de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81028e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81028e4:	68fb      	ldr	r3, [r7, #12]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81028ea:	68fb      	ldr	r3, [r7, #12]
 81028ec:	681b      	ldr	r3, [r3, #0]
 81028ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81028f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81028f4:	68fb      	ldr	r3, [r7, #12]
 81028f6:	681b      	ldr	r3, [r3, #0]
 81028f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81028fa:	68bb      	ldr	r3, [r7, #8]
 81028fc:	691b      	ldr	r3, [r3, #16]
 81028fe:	021a      	lsls	r2, r3, #8
 8102900:	68fb      	ldr	r3, [r7, #12]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	430a      	orrs	r2, r1
 8102906:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8102908:	e000      	b.n	810290c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810290a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810290c:	68fb      	ldr	r3, [r7, #12]
 810290e:	2200      	movs	r2, #0
 8102910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102914:	2300      	movs	r3, #0
}
 8102916:	4618      	mov	r0, r3
 8102918:	3710      	adds	r7, #16
 810291a:	46bd      	mov	sp, r7
 810291c:	bd80      	pop	{r7, pc}
 810291e:	bf00      	nop

08102920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8102920:	b580      	push	{r7, lr}
 8102922:	b084      	sub	sp, #16
 8102924:	af00      	add	r7, sp, #0
 8102926:	6078      	str	r0, [r7, #4]
 8102928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8102930:	2b01      	cmp	r3, #1
 8102932:	d101      	bne.n	8102938 <HAL_TIM_ConfigClockSource+0x18>
 8102934:	2302      	movs	r3, #2
 8102936:	e0b9      	b.n	8102aac <HAL_TIM_ConfigClockSource+0x18c>
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	2201      	movs	r2, #1
 810293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8102940:	687b      	ldr	r3, [r7, #4]
 8102942:	2202      	movs	r2, #2
 8102944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	689b      	ldr	r3, [r3, #8]
 810294e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8102950:	68fb      	ldr	r3, [r7, #12]
 8102952:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8102956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810295a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 810295c:	68fb      	ldr	r3, [r7, #12]
 810295e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8102962:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	681b      	ldr	r3, [r3, #0]
 8102968:	68fa      	ldr	r2, [r7, #12]
 810296a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 810296c:	683b      	ldr	r3, [r7, #0]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	2b70      	cmp	r3, #112	; 0x70
 8102972:	d02e      	beq.n	81029d2 <HAL_TIM_ConfigClockSource+0xb2>
 8102974:	2b70      	cmp	r3, #112	; 0x70
 8102976:	d812      	bhi.n	810299e <HAL_TIM_ConfigClockSource+0x7e>
 8102978:	2b30      	cmp	r3, #48	; 0x30
 810297a:	f000 8084 	beq.w	8102a86 <HAL_TIM_ConfigClockSource+0x166>
 810297e:	2b30      	cmp	r3, #48	; 0x30
 8102980:	d806      	bhi.n	8102990 <HAL_TIM_ConfigClockSource+0x70>
 8102982:	2b10      	cmp	r3, #16
 8102984:	d07f      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
 8102986:	2b20      	cmp	r3, #32
 8102988:	d07d      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
 810298a:	2b00      	cmp	r3, #0
 810298c:	d07b      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 810298e:	e084      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 8102990:	2b50      	cmp	r3, #80	; 0x50
 8102992:	d048      	beq.n	8102a26 <HAL_TIM_ConfigClockSource+0x106>
 8102994:	2b60      	cmp	r3, #96	; 0x60
 8102996:	d056      	beq.n	8102a46 <HAL_TIM_ConfigClockSource+0x126>
 8102998:	2b40      	cmp	r3, #64	; 0x40
 810299a:	d064      	beq.n	8102a66 <HAL_TIM_ConfigClockSource+0x146>
      break;
 810299c:	e07d      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 810299e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81029a2:	d070      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
 81029a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81029a8:	d809      	bhi.n	81029be <HAL_TIM_ConfigClockSource+0x9e>
 81029aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81029ae:	d027      	beq.n	8102a00 <HAL_TIM_ConfigClockSource+0xe0>
 81029b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81029b4:	d067      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
 81029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81029ba:	d06d      	beq.n	8102a98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 81029bc:	e06d      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
  switch (sClockSourceConfig->ClockSource)
 81029be:	4a3d      	ldr	r2, [pc, #244]	; (8102ab4 <HAL_TIM_ConfigClockSource+0x194>)
 81029c0:	4293      	cmp	r3, r2
 81029c2:	d060      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
 81029c4:	4a3c      	ldr	r2, [pc, #240]	; (8102ab8 <HAL_TIM_ConfigClockSource+0x198>)
 81029c6:	4293      	cmp	r3, r2
 81029c8:	d05d      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
 81029ca:	4a3c      	ldr	r2, [pc, #240]	; (8102abc <HAL_TIM_ConfigClockSource+0x19c>)
 81029cc:	4293      	cmp	r3, r2
 81029ce:	d05a      	beq.n	8102a86 <HAL_TIM_ConfigClockSource+0x166>
      break;
 81029d0:	e063      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	6818      	ldr	r0, [r3, #0]
 81029d6:	683b      	ldr	r3, [r7, #0]
 81029d8:	6899      	ldr	r1, [r3, #8]
 81029da:	683b      	ldr	r3, [r7, #0]
 81029dc:	685a      	ldr	r2, [r3, #4]
 81029de:	683b      	ldr	r3, [r7, #0]
 81029e0:	68db      	ldr	r3, [r3, #12]
 81029e2:	f000 fc79 	bl	81032d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	689b      	ldr	r3, [r3, #8]
 81029ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81029ee:	68fb      	ldr	r3, [r7, #12]
 81029f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81029f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	681b      	ldr	r3, [r3, #0]
 81029fa:	68fa      	ldr	r2, [r7, #12]
 81029fc:	609a      	str	r2, [r3, #8]
      break;
 81029fe:	e04c      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ETR_SetConfig(htim->Instance,
 8102a00:	687b      	ldr	r3, [r7, #4]
 8102a02:	6818      	ldr	r0, [r3, #0]
 8102a04:	683b      	ldr	r3, [r7, #0]
 8102a06:	6899      	ldr	r1, [r3, #8]
 8102a08:	683b      	ldr	r3, [r7, #0]
 8102a0a:	685a      	ldr	r2, [r3, #4]
 8102a0c:	683b      	ldr	r3, [r7, #0]
 8102a0e:	68db      	ldr	r3, [r3, #12]
 8102a10:	f000 fc62 	bl	81032d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8102a14:	687b      	ldr	r3, [r7, #4]
 8102a16:	681b      	ldr	r3, [r3, #0]
 8102a18:	689a      	ldr	r2, [r3, #8]
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102a22:	609a      	str	r2, [r3, #8]
      break;
 8102a24:	e039      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	6818      	ldr	r0, [r3, #0]
 8102a2a:	683b      	ldr	r3, [r7, #0]
 8102a2c:	6859      	ldr	r1, [r3, #4]
 8102a2e:	683b      	ldr	r3, [r7, #0]
 8102a30:	68db      	ldr	r3, [r3, #12]
 8102a32:	461a      	mov	r2, r3
 8102a34:	f000 fbd4 	bl	81031e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	2150      	movs	r1, #80	; 0x50
 8102a3e:	4618      	mov	r0, r3
 8102a40:	f000 fc2d 	bl	810329e <TIM_ITRx_SetConfig>
      break;
 8102a44:	e029      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	6818      	ldr	r0, [r3, #0]
 8102a4a:	683b      	ldr	r3, [r7, #0]
 8102a4c:	6859      	ldr	r1, [r3, #4]
 8102a4e:	683b      	ldr	r3, [r7, #0]
 8102a50:	68db      	ldr	r3, [r3, #12]
 8102a52:	461a      	mov	r2, r3
 8102a54:	f000 fbf3 	bl	810323e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8102a58:	687b      	ldr	r3, [r7, #4]
 8102a5a:	681b      	ldr	r3, [r3, #0]
 8102a5c:	2160      	movs	r1, #96	; 0x60
 8102a5e:	4618      	mov	r0, r3
 8102a60:	f000 fc1d 	bl	810329e <TIM_ITRx_SetConfig>
      break;
 8102a64:	e019      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	6818      	ldr	r0, [r3, #0]
 8102a6a:	683b      	ldr	r3, [r7, #0]
 8102a6c:	6859      	ldr	r1, [r3, #4]
 8102a6e:	683b      	ldr	r3, [r7, #0]
 8102a70:	68db      	ldr	r3, [r3, #12]
 8102a72:	461a      	mov	r2, r3
 8102a74:	f000 fbb4 	bl	81031e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	681b      	ldr	r3, [r3, #0]
 8102a7c:	2140      	movs	r1, #64	; 0x40
 8102a7e:	4618      	mov	r0, r3
 8102a80:	f000 fc0d 	bl	810329e <TIM_ITRx_SetConfig>
      break;
 8102a84:	e009      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	681a      	ldr	r2, [r3, #0]
 8102a8a:	683b      	ldr	r3, [r7, #0]
 8102a8c:	681b      	ldr	r3, [r3, #0]
 8102a8e:	4619      	mov	r1, r3
 8102a90:	4610      	mov	r0, r2
 8102a92:	f000 fc04 	bl	810329e <TIM_ITRx_SetConfig>
      break;
 8102a96:	e000      	b.n	8102a9a <HAL_TIM_ConfigClockSource+0x17a>
      break;
 8102a98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	2201      	movs	r2, #1
 8102a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	2200      	movs	r2, #0
 8102aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102aaa:	2300      	movs	r3, #0
}
 8102aac:	4618      	mov	r0, r3
 8102aae:	3710      	adds	r7, #16
 8102ab0:	46bd      	mov	sp, r7
 8102ab2:	bd80      	pop	{r7, pc}
 8102ab4:	00100030 	.word	0x00100030
 8102ab8:	00100040 	.word	0x00100040
 8102abc:	00100020 	.word	0x00100020

08102ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102ac0:	b480      	push	{r7}
 8102ac2:	b083      	sub	sp, #12
 8102ac4:	af00      	add	r7, sp, #0
 8102ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8102ac8:	bf00      	nop
 8102aca:	370c      	adds	r7, #12
 8102acc:	46bd      	mov	sp, r7
 8102ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ad2:	4770      	bx	lr

08102ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102ad4:	b480      	push	{r7}
 8102ad6:	b083      	sub	sp, #12
 8102ad8:	af00      	add	r7, sp, #0
 8102ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8102adc:	bf00      	nop
 8102ade:	370c      	adds	r7, #12
 8102ae0:	46bd      	mov	sp, r7
 8102ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ae6:	4770      	bx	lr

08102ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8102ae8:	b480      	push	{r7}
 8102aea:	b083      	sub	sp, #12
 8102aec:	af00      	add	r7, sp, #0
 8102aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8102af0:	bf00      	nop
 8102af2:	370c      	adds	r7, #12
 8102af4:	46bd      	mov	sp, r7
 8102af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102afa:	4770      	bx	lr

08102afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8102afc:	b480      	push	{r7}
 8102afe:	b083      	sub	sp, #12
 8102b00:	af00      	add	r7, sp, #0
 8102b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8102b04:	bf00      	nop
 8102b06:	370c      	adds	r7, #12
 8102b08:	46bd      	mov	sp, r7
 8102b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b0e:	4770      	bx	lr

08102b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8102b10:	b480      	push	{r7}
 8102b12:	b085      	sub	sp, #20
 8102b14:	af00      	add	r7, sp, #0
 8102b16:	6078      	str	r0, [r7, #4]
 8102b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8102b1a:	687b      	ldr	r3, [r7, #4]
 8102b1c:	681b      	ldr	r3, [r3, #0]
 8102b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	4a40      	ldr	r2, [pc, #256]	; (8102c24 <TIM_Base_SetConfig+0x114>)
 8102b24:	4293      	cmp	r3, r2
 8102b26:	d013      	beq.n	8102b50 <TIM_Base_SetConfig+0x40>
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102b2e:	d00f      	beq.n	8102b50 <TIM_Base_SetConfig+0x40>
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	4a3d      	ldr	r2, [pc, #244]	; (8102c28 <TIM_Base_SetConfig+0x118>)
 8102b34:	4293      	cmp	r3, r2
 8102b36:	d00b      	beq.n	8102b50 <TIM_Base_SetConfig+0x40>
 8102b38:	687b      	ldr	r3, [r7, #4]
 8102b3a:	4a3c      	ldr	r2, [pc, #240]	; (8102c2c <TIM_Base_SetConfig+0x11c>)
 8102b3c:	4293      	cmp	r3, r2
 8102b3e:	d007      	beq.n	8102b50 <TIM_Base_SetConfig+0x40>
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	4a3b      	ldr	r2, [pc, #236]	; (8102c30 <TIM_Base_SetConfig+0x120>)
 8102b44:	4293      	cmp	r3, r2
 8102b46:	d003      	beq.n	8102b50 <TIM_Base_SetConfig+0x40>
 8102b48:	687b      	ldr	r3, [r7, #4]
 8102b4a:	4a3a      	ldr	r2, [pc, #232]	; (8102c34 <TIM_Base_SetConfig+0x124>)
 8102b4c:	4293      	cmp	r3, r2
 8102b4e:	d108      	bne.n	8102b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8102b50:	68fb      	ldr	r3, [r7, #12]
 8102b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8102b58:	683b      	ldr	r3, [r7, #0]
 8102b5a:	685b      	ldr	r3, [r3, #4]
 8102b5c:	68fa      	ldr	r2, [r7, #12]
 8102b5e:	4313      	orrs	r3, r2
 8102b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	4a2f      	ldr	r2, [pc, #188]	; (8102c24 <TIM_Base_SetConfig+0x114>)
 8102b66:	4293      	cmp	r3, r2
 8102b68:	d01f      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102b6a:	687b      	ldr	r3, [r7, #4]
 8102b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102b70:	d01b      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	4a2c      	ldr	r2, [pc, #176]	; (8102c28 <TIM_Base_SetConfig+0x118>)
 8102b76:	4293      	cmp	r3, r2
 8102b78:	d017      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102b7a:	687b      	ldr	r3, [r7, #4]
 8102b7c:	4a2b      	ldr	r2, [pc, #172]	; (8102c2c <TIM_Base_SetConfig+0x11c>)
 8102b7e:	4293      	cmp	r3, r2
 8102b80:	d013      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	4a2a      	ldr	r2, [pc, #168]	; (8102c30 <TIM_Base_SetConfig+0x120>)
 8102b86:	4293      	cmp	r3, r2
 8102b88:	d00f      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	4a29      	ldr	r2, [pc, #164]	; (8102c34 <TIM_Base_SetConfig+0x124>)
 8102b8e:	4293      	cmp	r3, r2
 8102b90:	d00b      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102b92:	687b      	ldr	r3, [r7, #4]
 8102b94:	4a28      	ldr	r2, [pc, #160]	; (8102c38 <TIM_Base_SetConfig+0x128>)
 8102b96:	4293      	cmp	r3, r2
 8102b98:	d007      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	4a27      	ldr	r2, [pc, #156]	; (8102c3c <TIM_Base_SetConfig+0x12c>)
 8102b9e:	4293      	cmp	r3, r2
 8102ba0:	d003      	beq.n	8102baa <TIM_Base_SetConfig+0x9a>
 8102ba2:	687b      	ldr	r3, [r7, #4]
 8102ba4:	4a26      	ldr	r2, [pc, #152]	; (8102c40 <TIM_Base_SetConfig+0x130>)
 8102ba6:	4293      	cmp	r3, r2
 8102ba8:	d108      	bne.n	8102bbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8102baa:	68fb      	ldr	r3, [r7, #12]
 8102bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8102bb2:	683b      	ldr	r3, [r7, #0]
 8102bb4:	68db      	ldr	r3, [r3, #12]
 8102bb6:	68fa      	ldr	r2, [r7, #12]
 8102bb8:	4313      	orrs	r3, r2
 8102bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8102bc2:	683b      	ldr	r3, [r7, #0]
 8102bc4:	695b      	ldr	r3, [r3, #20]
 8102bc6:	4313      	orrs	r3, r2
 8102bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	68fa      	ldr	r2, [r7, #12]
 8102bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8102bd0:	683b      	ldr	r3, [r7, #0]
 8102bd2:	689a      	ldr	r2, [r3, #8]
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8102bd8:	683b      	ldr	r3, [r7, #0]
 8102bda:	681a      	ldr	r2, [r3, #0]
 8102bdc:	687b      	ldr	r3, [r7, #4]
 8102bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	4a10      	ldr	r2, [pc, #64]	; (8102c24 <TIM_Base_SetConfig+0x114>)
 8102be4:	4293      	cmp	r3, r2
 8102be6:	d00f      	beq.n	8102c08 <TIM_Base_SetConfig+0xf8>
 8102be8:	687b      	ldr	r3, [r7, #4]
 8102bea:	4a12      	ldr	r2, [pc, #72]	; (8102c34 <TIM_Base_SetConfig+0x124>)
 8102bec:	4293      	cmp	r3, r2
 8102bee:	d00b      	beq.n	8102c08 <TIM_Base_SetConfig+0xf8>
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	4a11      	ldr	r2, [pc, #68]	; (8102c38 <TIM_Base_SetConfig+0x128>)
 8102bf4:	4293      	cmp	r3, r2
 8102bf6:	d007      	beq.n	8102c08 <TIM_Base_SetConfig+0xf8>
 8102bf8:	687b      	ldr	r3, [r7, #4]
 8102bfa:	4a10      	ldr	r2, [pc, #64]	; (8102c3c <TIM_Base_SetConfig+0x12c>)
 8102bfc:	4293      	cmp	r3, r2
 8102bfe:	d003      	beq.n	8102c08 <TIM_Base_SetConfig+0xf8>
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	4a0f      	ldr	r2, [pc, #60]	; (8102c40 <TIM_Base_SetConfig+0x130>)
 8102c04:	4293      	cmp	r3, r2
 8102c06:	d103      	bne.n	8102c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8102c08:	683b      	ldr	r3, [r7, #0]
 8102c0a:	691a      	ldr	r2, [r3, #16]
 8102c0c:	687b      	ldr	r3, [r7, #4]
 8102c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	2201      	movs	r2, #1
 8102c14:	615a      	str	r2, [r3, #20]
}
 8102c16:	bf00      	nop
 8102c18:	3714      	adds	r7, #20
 8102c1a:	46bd      	mov	sp, r7
 8102c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c20:	4770      	bx	lr
 8102c22:	bf00      	nop
 8102c24:	40010000 	.word	0x40010000
 8102c28:	40000400 	.word	0x40000400
 8102c2c:	40000800 	.word	0x40000800
 8102c30:	40000c00 	.word	0x40000c00
 8102c34:	40010400 	.word	0x40010400
 8102c38:	40014000 	.word	0x40014000
 8102c3c:	40014400 	.word	0x40014400
 8102c40:	40014800 	.word	0x40014800

08102c44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102c44:	b480      	push	{r7}
 8102c46:	b087      	sub	sp, #28
 8102c48:	af00      	add	r7, sp, #0
 8102c4a:	6078      	str	r0, [r7, #4]
 8102c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	6a1b      	ldr	r3, [r3, #32]
 8102c52:	f023 0201 	bic.w	r2, r3, #1
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	6a1b      	ldr	r3, [r3, #32]
 8102c5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	685b      	ldr	r3, [r3, #4]
 8102c64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8102c66:	687b      	ldr	r3, [r7, #4]
 8102c68:	699b      	ldr	r3, [r3, #24]
 8102c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8102c6c:	68fb      	ldr	r3, [r7, #12]
 8102c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102c76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8102c78:	68fb      	ldr	r3, [r7, #12]
 8102c7a:	f023 0303 	bic.w	r3, r3, #3
 8102c7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102c80:	683b      	ldr	r3, [r7, #0]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	68fa      	ldr	r2, [r7, #12]
 8102c86:	4313      	orrs	r3, r2
 8102c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8102c8a:	697b      	ldr	r3, [r7, #20]
 8102c8c:	f023 0302 	bic.w	r3, r3, #2
 8102c90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8102c92:	683b      	ldr	r3, [r7, #0]
 8102c94:	689b      	ldr	r3, [r3, #8]
 8102c96:	697a      	ldr	r2, [r7, #20]
 8102c98:	4313      	orrs	r3, r2
 8102c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	4a2c      	ldr	r2, [pc, #176]	; (8102d50 <TIM_OC1_SetConfig+0x10c>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d00f      	beq.n	8102cc4 <TIM_OC1_SetConfig+0x80>
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	4a2b      	ldr	r2, [pc, #172]	; (8102d54 <TIM_OC1_SetConfig+0x110>)
 8102ca8:	4293      	cmp	r3, r2
 8102caa:	d00b      	beq.n	8102cc4 <TIM_OC1_SetConfig+0x80>
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	4a2a      	ldr	r2, [pc, #168]	; (8102d58 <TIM_OC1_SetConfig+0x114>)
 8102cb0:	4293      	cmp	r3, r2
 8102cb2:	d007      	beq.n	8102cc4 <TIM_OC1_SetConfig+0x80>
 8102cb4:	687b      	ldr	r3, [r7, #4]
 8102cb6:	4a29      	ldr	r2, [pc, #164]	; (8102d5c <TIM_OC1_SetConfig+0x118>)
 8102cb8:	4293      	cmp	r3, r2
 8102cba:	d003      	beq.n	8102cc4 <TIM_OC1_SetConfig+0x80>
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	4a28      	ldr	r2, [pc, #160]	; (8102d60 <TIM_OC1_SetConfig+0x11c>)
 8102cc0:	4293      	cmp	r3, r2
 8102cc2:	d10c      	bne.n	8102cde <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8102cc4:	697b      	ldr	r3, [r7, #20]
 8102cc6:	f023 0308 	bic.w	r3, r3, #8
 8102cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8102ccc:	683b      	ldr	r3, [r7, #0]
 8102cce:	68db      	ldr	r3, [r3, #12]
 8102cd0:	697a      	ldr	r2, [r7, #20]
 8102cd2:	4313      	orrs	r3, r2
 8102cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8102cd6:	697b      	ldr	r3, [r7, #20]
 8102cd8:	f023 0304 	bic.w	r3, r3, #4
 8102cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102cde:	687b      	ldr	r3, [r7, #4]
 8102ce0:	4a1b      	ldr	r2, [pc, #108]	; (8102d50 <TIM_OC1_SetConfig+0x10c>)
 8102ce2:	4293      	cmp	r3, r2
 8102ce4:	d00f      	beq.n	8102d06 <TIM_OC1_SetConfig+0xc2>
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	4a1a      	ldr	r2, [pc, #104]	; (8102d54 <TIM_OC1_SetConfig+0x110>)
 8102cea:	4293      	cmp	r3, r2
 8102cec:	d00b      	beq.n	8102d06 <TIM_OC1_SetConfig+0xc2>
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	4a19      	ldr	r2, [pc, #100]	; (8102d58 <TIM_OC1_SetConfig+0x114>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d007      	beq.n	8102d06 <TIM_OC1_SetConfig+0xc2>
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	4a18      	ldr	r2, [pc, #96]	; (8102d5c <TIM_OC1_SetConfig+0x118>)
 8102cfa:	4293      	cmp	r3, r2
 8102cfc:	d003      	beq.n	8102d06 <TIM_OC1_SetConfig+0xc2>
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	4a17      	ldr	r2, [pc, #92]	; (8102d60 <TIM_OC1_SetConfig+0x11c>)
 8102d02:	4293      	cmp	r3, r2
 8102d04:	d111      	bne.n	8102d2a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8102d06:	693b      	ldr	r3, [r7, #16]
 8102d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8102d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8102d0e:	693b      	ldr	r3, [r7, #16]
 8102d10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8102d16:	683b      	ldr	r3, [r7, #0]
 8102d18:	695b      	ldr	r3, [r3, #20]
 8102d1a:	693a      	ldr	r2, [r7, #16]
 8102d1c:	4313      	orrs	r3, r2
 8102d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8102d20:	683b      	ldr	r3, [r7, #0]
 8102d22:	699b      	ldr	r3, [r3, #24]
 8102d24:	693a      	ldr	r2, [r7, #16]
 8102d26:	4313      	orrs	r3, r2
 8102d28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102d2a:	687b      	ldr	r3, [r7, #4]
 8102d2c:	693a      	ldr	r2, [r7, #16]
 8102d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	68fa      	ldr	r2, [r7, #12]
 8102d34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8102d36:	683b      	ldr	r3, [r7, #0]
 8102d38:	685a      	ldr	r2, [r3, #4]
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	697a      	ldr	r2, [r7, #20]
 8102d42:	621a      	str	r2, [r3, #32]
}
 8102d44:	bf00      	nop
 8102d46:	371c      	adds	r7, #28
 8102d48:	46bd      	mov	sp, r7
 8102d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d4e:	4770      	bx	lr
 8102d50:	40010000 	.word	0x40010000
 8102d54:	40010400 	.word	0x40010400
 8102d58:	40014000 	.word	0x40014000
 8102d5c:	40014400 	.word	0x40014400
 8102d60:	40014800 	.word	0x40014800

08102d64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102d64:	b480      	push	{r7}
 8102d66:	b087      	sub	sp, #28
 8102d68:	af00      	add	r7, sp, #0
 8102d6a:	6078      	str	r0, [r7, #4]
 8102d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	6a1b      	ldr	r3, [r3, #32]
 8102d72:	f023 0210 	bic.w	r2, r3, #16
 8102d76:	687b      	ldr	r3, [r7, #4]
 8102d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102d7a:	687b      	ldr	r3, [r7, #4]
 8102d7c:	6a1b      	ldr	r3, [r3, #32]
 8102d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102d80:	687b      	ldr	r3, [r7, #4]
 8102d82:	685b      	ldr	r3, [r3, #4]
 8102d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	699b      	ldr	r3, [r3, #24]
 8102d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8102d8c:	68fb      	ldr	r3, [r7, #12]
 8102d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8102d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8102d98:	68fb      	ldr	r3, [r7, #12]
 8102d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102da0:	683b      	ldr	r3, [r7, #0]
 8102da2:	681b      	ldr	r3, [r3, #0]
 8102da4:	021b      	lsls	r3, r3, #8
 8102da6:	68fa      	ldr	r2, [r7, #12]
 8102da8:	4313      	orrs	r3, r2
 8102daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8102dac:	697b      	ldr	r3, [r7, #20]
 8102dae:	f023 0320 	bic.w	r3, r3, #32
 8102db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8102db4:	683b      	ldr	r3, [r7, #0]
 8102db6:	689b      	ldr	r3, [r3, #8]
 8102db8:	011b      	lsls	r3, r3, #4
 8102dba:	697a      	ldr	r2, [r7, #20]
 8102dbc:	4313      	orrs	r3, r2
 8102dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	4a28      	ldr	r2, [pc, #160]	; (8102e64 <TIM_OC2_SetConfig+0x100>)
 8102dc4:	4293      	cmp	r3, r2
 8102dc6:	d003      	beq.n	8102dd0 <TIM_OC2_SetConfig+0x6c>
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	4a27      	ldr	r2, [pc, #156]	; (8102e68 <TIM_OC2_SetConfig+0x104>)
 8102dcc:	4293      	cmp	r3, r2
 8102dce:	d10d      	bne.n	8102dec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8102dd0:	697b      	ldr	r3, [r7, #20]
 8102dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8102dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8102dd8:	683b      	ldr	r3, [r7, #0]
 8102dda:	68db      	ldr	r3, [r3, #12]
 8102ddc:	011b      	lsls	r3, r3, #4
 8102dde:	697a      	ldr	r2, [r7, #20]
 8102de0:	4313      	orrs	r3, r2
 8102de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8102de4:	697b      	ldr	r3, [r7, #20]
 8102de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8102dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	4a1d      	ldr	r2, [pc, #116]	; (8102e64 <TIM_OC2_SetConfig+0x100>)
 8102df0:	4293      	cmp	r3, r2
 8102df2:	d00f      	beq.n	8102e14 <TIM_OC2_SetConfig+0xb0>
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	4a1c      	ldr	r2, [pc, #112]	; (8102e68 <TIM_OC2_SetConfig+0x104>)
 8102df8:	4293      	cmp	r3, r2
 8102dfa:	d00b      	beq.n	8102e14 <TIM_OC2_SetConfig+0xb0>
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	4a1b      	ldr	r2, [pc, #108]	; (8102e6c <TIM_OC2_SetConfig+0x108>)
 8102e00:	4293      	cmp	r3, r2
 8102e02:	d007      	beq.n	8102e14 <TIM_OC2_SetConfig+0xb0>
 8102e04:	687b      	ldr	r3, [r7, #4]
 8102e06:	4a1a      	ldr	r2, [pc, #104]	; (8102e70 <TIM_OC2_SetConfig+0x10c>)
 8102e08:	4293      	cmp	r3, r2
 8102e0a:	d003      	beq.n	8102e14 <TIM_OC2_SetConfig+0xb0>
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	4a19      	ldr	r2, [pc, #100]	; (8102e74 <TIM_OC2_SetConfig+0x110>)
 8102e10:	4293      	cmp	r3, r2
 8102e12:	d113      	bne.n	8102e3c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8102e14:	693b      	ldr	r3, [r7, #16]
 8102e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8102e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8102e1c:	693b      	ldr	r3, [r7, #16]
 8102e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8102e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8102e24:	683b      	ldr	r3, [r7, #0]
 8102e26:	695b      	ldr	r3, [r3, #20]
 8102e28:	009b      	lsls	r3, r3, #2
 8102e2a:	693a      	ldr	r2, [r7, #16]
 8102e2c:	4313      	orrs	r3, r2
 8102e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8102e30:	683b      	ldr	r3, [r7, #0]
 8102e32:	699b      	ldr	r3, [r3, #24]
 8102e34:	009b      	lsls	r3, r3, #2
 8102e36:	693a      	ldr	r2, [r7, #16]
 8102e38:	4313      	orrs	r3, r2
 8102e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	693a      	ldr	r2, [r7, #16]
 8102e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	68fa      	ldr	r2, [r7, #12]
 8102e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8102e48:	683b      	ldr	r3, [r7, #0]
 8102e4a:	685a      	ldr	r2, [r3, #4]
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	697a      	ldr	r2, [r7, #20]
 8102e54:	621a      	str	r2, [r3, #32]
}
 8102e56:	bf00      	nop
 8102e58:	371c      	adds	r7, #28
 8102e5a:	46bd      	mov	sp, r7
 8102e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e60:	4770      	bx	lr
 8102e62:	bf00      	nop
 8102e64:	40010000 	.word	0x40010000
 8102e68:	40010400 	.word	0x40010400
 8102e6c:	40014000 	.word	0x40014000
 8102e70:	40014400 	.word	0x40014400
 8102e74:	40014800 	.word	0x40014800

08102e78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102e78:	b480      	push	{r7}
 8102e7a:	b087      	sub	sp, #28
 8102e7c:	af00      	add	r7, sp, #0
 8102e7e:	6078      	str	r0, [r7, #4]
 8102e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	6a1b      	ldr	r3, [r3, #32]
 8102e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	6a1b      	ldr	r3, [r3, #32]
 8102e92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102e94:	687b      	ldr	r3, [r7, #4]
 8102e96:	685b      	ldr	r3, [r3, #4]
 8102e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	69db      	ldr	r3, [r3, #28]
 8102e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8102ea0:	68fb      	ldr	r3, [r7, #12]
 8102ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8102ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8102ea8:	68fb      	ldr	r3, [r7, #12]
 8102eaa:	f023 0303 	bic.w	r3, r3, #3
 8102eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8102eb0:	683b      	ldr	r3, [r7, #0]
 8102eb2:	681b      	ldr	r3, [r3, #0]
 8102eb4:	68fa      	ldr	r2, [r7, #12]
 8102eb6:	4313      	orrs	r3, r2
 8102eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8102eba:	697b      	ldr	r3, [r7, #20]
 8102ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8102ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8102ec2:	683b      	ldr	r3, [r7, #0]
 8102ec4:	689b      	ldr	r3, [r3, #8]
 8102ec6:	021b      	lsls	r3, r3, #8
 8102ec8:	697a      	ldr	r2, [r7, #20]
 8102eca:	4313      	orrs	r3, r2
 8102ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8102ece:	687b      	ldr	r3, [r7, #4]
 8102ed0:	4a27      	ldr	r2, [pc, #156]	; (8102f70 <TIM_OC3_SetConfig+0xf8>)
 8102ed2:	4293      	cmp	r3, r2
 8102ed4:	d003      	beq.n	8102ede <TIM_OC3_SetConfig+0x66>
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	4a26      	ldr	r2, [pc, #152]	; (8102f74 <TIM_OC3_SetConfig+0xfc>)
 8102eda:	4293      	cmp	r3, r2
 8102edc:	d10d      	bne.n	8102efa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8102ede:	697b      	ldr	r3, [r7, #20]
 8102ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8102ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8102ee6:	683b      	ldr	r3, [r7, #0]
 8102ee8:	68db      	ldr	r3, [r3, #12]
 8102eea:	021b      	lsls	r3, r3, #8
 8102eec:	697a      	ldr	r2, [r7, #20]
 8102eee:	4313      	orrs	r3, r2
 8102ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8102ef2:	697b      	ldr	r3, [r7, #20]
 8102ef4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8102ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	4a1c      	ldr	r2, [pc, #112]	; (8102f70 <TIM_OC3_SetConfig+0xf8>)
 8102efe:	4293      	cmp	r3, r2
 8102f00:	d00f      	beq.n	8102f22 <TIM_OC3_SetConfig+0xaa>
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	4a1b      	ldr	r2, [pc, #108]	; (8102f74 <TIM_OC3_SetConfig+0xfc>)
 8102f06:	4293      	cmp	r3, r2
 8102f08:	d00b      	beq.n	8102f22 <TIM_OC3_SetConfig+0xaa>
 8102f0a:	687b      	ldr	r3, [r7, #4]
 8102f0c:	4a1a      	ldr	r2, [pc, #104]	; (8102f78 <TIM_OC3_SetConfig+0x100>)
 8102f0e:	4293      	cmp	r3, r2
 8102f10:	d007      	beq.n	8102f22 <TIM_OC3_SetConfig+0xaa>
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	4a19      	ldr	r2, [pc, #100]	; (8102f7c <TIM_OC3_SetConfig+0x104>)
 8102f16:	4293      	cmp	r3, r2
 8102f18:	d003      	beq.n	8102f22 <TIM_OC3_SetConfig+0xaa>
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	4a18      	ldr	r2, [pc, #96]	; (8102f80 <TIM_OC3_SetConfig+0x108>)
 8102f1e:	4293      	cmp	r3, r2
 8102f20:	d113      	bne.n	8102f4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8102f22:	693b      	ldr	r3, [r7, #16]
 8102f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8102f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8102f2a:	693b      	ldr	r3, [r7, #16]
 8102f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8102f32:	683b      	ldr	r3, [r7, #0]
 8102f34:	695b      	ldr	r3, [r3, #20]
 8102f36:	011b      	lsls	r3, r3, #4
 8102f38:	693a      	ldr	r2, [r7, #16]
 8102f3a:	4313      	orrs	r3, r2
 8102f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8102f3e:	683b      	ldr	r3, [r7, #0]
 8102f40:	699b      	ldr	r3, [r3, #24]
 8102f42:	011b      	lsls	r3, r3, #4
 8102f44:	693a      	ldr	r2, [r7, #16]
 8102f46:	4313      	orrs	r3, r2
 8102f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	693a      	ldr	r2, [r7, #16]
 8102f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8102f50:	687b      	ldr	r3, [r7, #4]
 8102f52:	68fa      	ldr	r2, [r7, #12]
 8102f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8102f56:	683b      	ldr	r3, [r7, #0]
 8102f58:	685a      	ldr	r2, [r3, #4]
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	697a      	ldr	r2, [r7, #20]
 8102f62:	621a      	str	r2, [r3, #32]
}
 8102f64:	bf00      	nop
 8102f66:	371c      	adds	r7, #28
 8102f68:	46bd      	mov	sp, r7
 8102f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f6e:	4770      	bx	lr
 8102f70:	40010000 	.word	0x40010000
 8102f74:	40010400 	.word	0x40010400
 8102f78:	40014000 	.word	0x40014000
 8102f7c:	40014400 	.word	0x40014400
 8102f80:	40014800 	.word	0x40014800

08102f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8102f84:	b480      	push	{r7}
 8102f86:	b087      	sub	sp, #28
 8102f88:	af00      	add	r7, sp, #0
 8102f8a:	6078      	str	r0, [r7, #4]
 8102f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8102f8e:	687b      	ldr	r3, [r7, #4]
 8102f90:	6a1b      	ldr	r3, [r3, #32]
 8102f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	6a1b      	ldr	r3, [r3, #32]
 8102f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	685b      	ldr	r3, [r3, #4]
 8102fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8102fa6:	687b      	ldr	r3, [r7, #4]
 8102fa8:	69db      	ldr	r3, [r3, #28]
 8102faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8102fac:	68fb      	ldr	r3, [r7, #12]
 8102fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8102fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8102fb4:	68fb      	ldr	r3, [r7, #12]
 8102fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8102fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8102fbc:	683b      	ldr	r3, [r7, #0]
 8102fbe:	681b      	ldr	r3, [r3, #0]
 8102fc0:	021b      	lsls	r3, r3, #8
 8102fc2:	68fa      	ldr	r2, [r7, #12]
 8102fc4:	4313      	orrs	r3, r2
 8102fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8102fc8:	693b      	ldr	r3, [r7, #16]
 8102fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8102fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8102fd0:	683b      	ldr	r3, [r7, #0]
 8102fd2:	689b      	ldr	r3, [r3, #8]
 8102fd4:	031b      	lsls	r3, r3, #12
 8102fd6:	693a      	ldr	r2, [r7, #16]
 8102fd8:	4313      	orrs	r3, r2
 8102fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	4a18      	ldr	r2, [pc, #96]	; (8103040 <TIM_OC4_SetConfig+0xbc>)
 8102fe0:	4293      	cmp	r3, r2
 8102fe2:	d00f      	beq.n	8103004 <TIM_OC4_SetConfig+0x80>
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	4a17      	ldr	r2, [pc, #92]	; (8103044 <TIM_OC4_SetConfig+0xc0>)
 8102fe8:	4293      	cmp	r3, r2
 8102fea:	d00b      	beq.n	8103004 <TIM_OC4_SetConfig+0x80>
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	4a16      	ldr	r2, [pc, #88]	; (8103048 <TIM_OC4_SetConfig+0xc4>)
 8102ff0:	4293      	cmp	r3, r2
 8102ff2:	d007      	beq.n	8103004 <TIM_OC4_SetConfig+0x80>
 8102ff4:	687b      	ldr	r3, [r7, #4]
 8102ff6:	4a15      	ldr	r2, [pc, #84]	; (810304c <TIM_OC4_SetConfig+0xc8>)
 8102ff8:	4293      	cmp	r3, r2
 8102ffa:	d003      	beq.n	8103004 <TIM_OC4_SetConfig+0x80>
 8102ffc:	687b      	ldr	r3, [r7, #4]
 8102ffe:	4a14      	ldr	r2, [pc, #80]	; (8103050 <TIM_OC4_SetConfig+0xcc>)
 8103000:	4293      	cmp	r3, r2
 8103002:	d109      	bne.n	8103018 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8103004:	697b      	ldr	r3, [r7, #20]
 8103006:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810300a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810300c:	683b      	ldr	r3, [r7, #0]
 810300e:	695b      	ldr	r3, [r3, #20]
 8103010:	019b      	lsls	r3, r3, #6
 8103012:	697a      	ldr	r2, [r7, #20]
 8103014:	4313      	orrs	r3, r2
 8103016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	697a      	ldr	r2, [r7, #20]
 810301c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810301e:	687b      	ldr	r3, [r7, #4]
 8103020:	68fa      	ldr	r2, [r7, #12]
 8103022:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8103024:	683b      	ldr	r3, [r7, #0]
 8103026:	685a      	ldr	r2, [r3, #4]
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810302c:	687b      	ldr	r3, [r7, #4]
 810302e:	693a      	ldr	r2, [r7, #16]
 8103030:	621a      	str	r2, [r3, #32]
}
 8103032:	bf00      	nop
 8103034:	371c      	adds	r7, #28
 8103036:	46bd      	mov	sp, r7
 8103038:	f85d 7b04 	ldr.w	r7, [sp], #4
 810303c:	4770      	bx	lr
 810303e:	bf00      	nop
 8103040:	40010000 	.word	0x40010000
 8103044:	40010400 	.word	0x40010400
 8103048:	40014000 	.word	0x40014000
 810304c:	40014400 	.word	0x40014400
 8103050:	40014800 	.word	0x40014800

08103054 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8103054:	b480      	push	{r7}
 8103056:	b087      	sub	sp, #28
 8103058:	af00      	add	r7, sp, #0
 810305a:	6078      	str	r0, [r7, #4]
 810305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	6a1b      	ldr	r3, [r3, #32]
 8103062:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810306a:	687b      	ldr	r3, [r7, #4]
 810306c:	6a1b      	ldr	r3, [r3, #32]
 810306e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103070:	687b      	ldr	r3, [r7, #4]
 8103072:	685b      	ldr	r3, [r3, #4]
 8103074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810307c:	68fb      	ldr	r3, [r7, #12]
 810307e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8103084:	683b      	ldr	r3, [r7, #0]
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	68fa      	ldr	r2, [r7, #12]
 810308a:	4313      	orrs	r3, r2
 810308c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810308e:	693b      	ldr	r3, [r7, #16]
 8103090:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8103094:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8103096:	683b      	ldr	r3, [r7, #0]
 8103098:	689b      	ldr	r3, [r3, #8]
 810309a:	041b      	lsls	r3, r3, #16
 810309c:	693a      	ldr	r2, [r7, #16]
 810309e:	4313      	orrs	r3, r2
 81030a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	4a17      	ldr	r2, [pc, #92]	; (8103104 <TIM_OC5_SetConfig+0xb0>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d00f      	beq.n	81030ca <TIM_OC5_SetConfig+0x76>
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	4a16      	ldr	r2, [pc, #88]	; (8103108 <TIM_OC5_SetConfig+0xb4>)
 81030ae:	4293      	cmp	r3, r2
 81030b0:	d00b      	beq.n	81030ca <TIM_OC5_SetConfig+0x76>
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	4a15      	ldr	r2, [pc, #84]	; (810310c <TIM_OC5_SetConfig+0xb8>)
 81030b6:	4293      	cmp	r3, r2
 81030b8:	d007      	beq.n	81030ca <TIM_OC5_SetConfig+0x76>
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	4a14      	ldr	r2, [pc, #80]	; (8103110 <TIM_OC5_SetConfig+0xbc>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d003      	beq.n	81030ca <TIM_OC5_SetConfig+0x76>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	4a13      	ldr	r2, [pc, #76]	; (8103114 <TIM_OC5_SetConfig+0xc0>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d109      	bne.n	81030de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81030ca:	697b      	ldr	r3, [r7, #20]
 81030cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81030d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81030d2:	683b      	ldr	r3, [r7, #0]
 81030d4:	695b      	ldr	r3, [r3, #20]
 81030d6:	021b      	lsls	r3, r3, #8
 81030d8:	697a      	ldr	r2, [r7, #20]
 81030da:	4313      	orrs	r3, r2
 81030dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	697a      	ldr	r2, [r7, #20]
 81030e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81030e4:	687b      	ldr	r3, [r7, #4]
 81030e6:	68fa      	ldr	r2, [r7, #12]
 81030e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81030ea:	683b      	ldr	r3, [r7, #0]
 81030ec:	685a      	ldr	r2, [r3, #4]
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	693a      	ldr	r2, [r7, #16]
 81030f6:	621a      	str	r2, [r3, #32]
}
 81030f8:	bf00      	nop
 81030fa:	371c      	adds	r7, #28
 81030fc:	46bd      	mov	sp, r7
 81030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103102:	4770      	bx	lr
 8103104:	40010000 	.word	0x40010000
 8103108:	40010400 	.word	0x40010400
 810310c:	40014000 	.word	0x40014000
 8103110:	40014400 	.word	0x40014400
 8103114:	40014800 	.word	0x40014800

08103118 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8103118:	b480      	push	{r7}
 810311a:	b087      	sub	sp, #28
 810311c:	af00      	add	r7, sp, #0
 810311e:	6078      	str	r0, [r7, #4]
 8103120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8103122:	687b      	ldr	r3, [r7, #4]
 8103124:	6a1b      	ldr	r3, [r3, #32]
 8103126:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	6a1b      	ldr	r3, [r3, #32]
 8103132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8103134:	687b      	ldr	r3, [r7, #4]
 8103136:	685b      	ldr	r3, [r3, #4]
 8103138:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8103140:	68fb      	ldr	r3, [r7, #12]
 8103142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8103146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8103148:	683b      	ldr	r3, [r7, #0]
 810314a:	681b      	ldr	r3, [r3, #0]
 810314c:	021b      	lsls	r3, r3, #8
 810314e:	68fa      	ldr	r2, [r7, #12]
 8103150:	4313      	orrs	r3, r2
 8103152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8103154:	693b      	ldr	r3, [r7, #16]
 8103156:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810315a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810315c:	683b      	ldr	r3, [r7, #0]
 810315e:	689b      	ldr	r3, [r3, #8]
 8103160:	051b      	lsls	r3, r3, #20
 8103162:	693a      	ldr	r2, [r7, #16]
 8103164:	4313      	orrs	r3, r2
 8103166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	4a18      	ldr	r2, [pc, #96]	; (81031cc <TIM_OC6_SetConfig+0xb4>)
 810316c:	4293      	cmp	r3, r2
 810316e:	d00f      	beq.n	8103190 <TIM_OC6_SetConfig+0x78>
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	4a17      	ldr	r2, [pc, #92]	; (81031d0 <TIM_OC6_SetConfig+0xb8>)
 8103174:	4293      	cmp	r3, r2
 8103176:	d00b      	beq.n	8103190 <TIM_OC6_SetConfig+0x78>
 8103178:	687b      	ldr	r3, [r7, #4]
 810317a:	4a16      	ldr	r2, [pc, #88]	; (81031d4 <TIM_OC6_SetConfig+0xbc>)
 810317c:	4293      	cmp	r3, r2
 810317e:	d007      	beq.n	8103190 <TIM_OC6_SetConfig+0x78>
 8103180:	687b      	ldr	r3, [r7, #4]
 8103182:	4a15      	ldr	r2, [pc, #84]	; (81031d8 <TIM_OC6_SetConfig+0xc0>)
 8103184:	4293      	cmp	r3, r2
 8103186:	d003      	beq.n	8103190 <TIM_OC6_SetConfig+0x78>
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	4a14      	ldr	r2, [pc, #80]	; (81031dc <TIM_OC6_SetConfig+0xc4>)
 810318c:	4293      	cmp	r3, r2
 810318e:	d109      	bne.n	81031a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8103190:	697b      	ldr	r3, [r7, #20]
 8103192:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8103196:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8103198:	683b      	ldr	r3, [r7, #0]
 810319a:	695b      	ldr	r3, [r3, #20]
 810319c:	029b      	lsls	r3, r3, #10
 810319e:	697a      	ldr	r2, [r7, #20]
 81031a0:	4313      	orrs	r3, r2
 81031a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	697a      	ldr	r2, [r7, #20]
 81031a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	68fa      	ldr	r2, [r7, #12]
 81031ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81031b0:	683b      	ldr	r3, [r7, #0]
 81031b2:	685a      	ldr	r2, [r3, #4]
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81031b8:	687b      	ldr	r3, [r7, #4]
 81031ba:	693a      	ldr	r2, [r7, #16]
 81031bc:	621a      	str	r2, [r3, #32]
}
 81031be:	bf00      	nop
 81031c0:	371c      	adds	r7, #28
 81031c2:	46bd      	mov	sp, r7
 81031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031c8:	4770      	bx	lr
 81031ca:	bf00      	nop
 81031cc:	40010000 	.word	0x40010000
 81031d0:	40010400 	.word	0x40010400
 81031d4:	40014000 	.word	0x40014000
 81031d8:	40014400 	.word	0x40014400
 81031dc:	40014800 	.word	0x40014800

081031e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81031e0:	b480      	push	{r7}
 81031e2:	b087      	sub	sp, #28
 81031e4:	af00      	add	r7, sp, #0
 81031e6:	60f8      	str	r0, [r7, #12]
 81031e8:	60b9      	str	r1, [r7, #8]
 81031ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81031ec:	68fb      	ldr	r3, [r7, #12]
 81031ee:	6a1b      	ldr	r3, [r3, #32]
 81031f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81031f2:	68fb      	ldr	r3, [r7, #12]
 81031f4:	6a1b      	ldr	r3, [r3, #32]
 81031f6:	f023 0201 	bic.w	r2, r3, #1
 81031fa:	68fb      	ldr	r3, [r7, #12]
 81031fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81031fe:	68fb      	ldr	r3, [r7, #12]
 8103200:	699b      	ldr	r3, [r3, #24]
 8103202:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8103204:	693b      	ldr	r3, [r7, #16]
 8103206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810320a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	011b      	lsls	r3, r3, #4
 8103210:	693a      	ldr	r2, [r7, #16]
 8103212:	4313      	orrs	r3, r2
 8103214:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8103216:	697b      	ldr	r3, [r7, #20]
 8103218:	f023 030a 	bic.w	r3, r3, #10
 810321c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 810321e:	697a      	ldr	r2, [r7, #20]
 8103220:	68bb      	ldr	r3, [r7, #8]
 8103222:	4313      	orrs	r3, r2
 8103224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8103226:	68fb      	ldr	r3, [r7, #12]
 8103228:	693a      	ldr	r2, [r7, #16]
 810322a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810322c:	68fb      	ldr	r3, [r7, #12]
 810322e:	697a      	ldr	r2, [r7, #20]
 8103230:	621a      	str	r2, [r3, #32]
}
 8103232:	bf00      	nop
 8103234:	371c      	adds	r7, #28
 8103236:	46bd      	mov	sp, r7
 8103238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810323c:	4770      	bx	lr

0810323e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810323e:	b480      	push	{r7}
 8103240:	b087      	sub	sp, #28
 8103242:	af00      	add	r7, sp, #0
 8103244:	60f8      	str	r0, [r7, #12]
 8103246:	60b9      	str	r1, [r7, #8]
 8103248:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810324a:	68fb      	ldr	r3, [r7, #12]
 810324c:	6a1b      	ldr	r3, [r3, #32]
 810324e:	f023 0210 	bic.w	r2, r3, #16
 8103252:	68fb      	ldr	r3, [r7, #12]
 8103254:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8103256:	68fb      	ldr	r3, [r7, #12]
 8103258:	699b      	ldr	r3, [r3, #24]
 810325a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810325c:	68fb      	ldr	r3, [r7, #12]
 810325e:	6a1b      	ldr	r3, [r3, #32]
 8103260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8103262:	697b      	ldr	r3, [r7, #20]
 8103264:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8103268:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	031b      	lsls	r3, r3, #12
 810326e:	697a      	ldr	r2, [r7, #20]
 8103270:	4313      	orrs	r3, r2
 8103272:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8103274:	693b      	ldr	r3, [r7, #16]
 8103276:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810327a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 810327c:	68bb      	ldr	r3, [r7, #8]
 810327e:	011b      	lsls	r3, r3, #4
 8103280:	693a      	ldr	r2, [r7, #16]
 8103282:	4313      	orrs	r3, r2
 8103284:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8103286:	68fb      	ldr	r3, [r7, #12]
 8103288:	697a      	ldr	r2, [r7, #20]
 810328a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810328c:	68fb      	ldr	r3, [r7, #12]
 810328e:	693a      	ldr	r2, [r7, #16]
 8103290:	621a      	str	r2, [r3, #32]
}
 8103292:	bf00      	nop
 8103294:	371c      	adds	r7, #28
 8103296:	46bd      	mov	sp, r7
 8103298:	f85d 7b04 	ldr.w	r7, [sp], #4
 810329c:	4770      	bx	lr

0810329e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810329e:	b480      	push	{r7}
 81032a0:	b085      	sub	sp, #20
 81032a2:	af00      	add	r7, sp, #0
 81032a4:	6078      	str	r0, [r7, #4]
 81032a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81032a8:	687b      	ldr	r3, [r7, #4]
 81032aa:	689b      	ldr	r3, [r3, #8]
 81032ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81032ae:	68fb      	ldr	r3, [r7, #12]
 81032b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81032b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81032b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81032ba:	683a      	ldr	r2, [r7, #0]
 81032bc:	68fb      	ldr	r3, [r7, #12]
 81032be:	4313      	orrs	r3, r2
 81032c0:	f043 0307 	orr.w	r3, r3, #7
 81032c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81032c6:	687b      	ldr	r3, [r7, #4]
 81032c8:	68fa      	ldr	r2, [r7, #12]
 81032ca:	609a      	str	r2, [r3, #8]
}
 81032cc:	bf00      	nop
 81032ce:	3714      	adds	r7, #20
 81032d0:	46bd      	mov	sp, r7
 81032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032d6:	4770      	bx	lr

081032d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81032d8:	b480      	push	{r7}
 81032da:	b087      	sub	sp, #28
 81032dc:	af00      	add	r7, sp, #0
 81032de:	60f8      	str	r0, [r7, #12]
 81032e0:	60b9      	str	r1, [r7, #8]
 81032e2:	607a      	str	r2, [r7, #4]
 81032e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81032e6:	68fb      	ldr	r3, [r7, #12]
 81032e8:	689b      	ldr	r3, [r3, #8]
 81032ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81032ec:	697b      	ldr	r3, [r7, #20]
 81032ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81032f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 81032f4:	683b      	ldr	r3, [r7, #0]
 81032f6:	021a      	lsls	r2, r3, #8
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	431a      	orrs	r2, r3
 81032fc:	68bb      	ldr	r3, [r7, #8]
 81032fe:	4313      	orrs	r3, r2
 8103300:	697a      	ldr	r2, [r7, #20]
 8103302:	4313      	orrs	r3, r2
 8103304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8103306:	68fb      	ldr	r3, [r7, #12]
 8103308:	697a      	ldr	r2, [r7, #20]
 810330a:	609a      	str	r2, [r3, #8]
}
 810330c:	bf00      	nop
 810330e:	371c      	adds	r7, #28
 8103310:	46bd      	mov	sp, r7
 8103312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103316:	4770      	bx	lr

08103318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8103318:	b480      	push	{r7}
 810331a:	b087      	sub	sp, #28
 810331c:	af00      	add	r7, sp, #0
 810331e:	60f8      	str	r0, [r7, #12]
 8103320:	60b9      	str	r1, [r7, #8]
 8103322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8103324:	68bb      	ldr	r3, [r7, #8]
 8103326:	f003 031f 	and.w	r3, r3, #31
 810332a:	2201      	movs	r2, #1
 810332c:	fa02 f303 	lsl.w	r3, r2, r3
 8103330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8103332:	68fb      	ldr	r3, [r7, #12]
 8103334:	6a1a      	ldr	r2, [r3, #32]
 8103336:	697b      	ldr	r3, [r7, #20]
 8103338:	43db      	mvns	r3, r3
 810333a:	401a      	ands	r2, r3
 810333c:	68fb      	ldr	r3, [r7, #12]
 810333e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8103340:	68fb      	ldr	r3, [r7, #12]
 8103342:	6a1a      	ldr	r2, [r3, #32]
 8103344:	68bb      	ldr	r3, [r7, #8]
 8103346:	f003 031f 	and.w	r3, r3, #31
 810334a:	6879      	ldr	r1, [r7, #4]
 810334c:	fa01 f303 	lsl.w	r3, r1, r3
 8103350:	431a      	orrs	r2, r3
 8103352:	68fb      	ldr	r3, [r7, #12]
 8103354:	621a      	str	r2, [r3, #32]
}
 8103356:	bf00      	nop
 8103358:	371c      	adds	r7, #28
 810335a:	46bd      	mov	sp, r7
 810335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103360:	4770      	bx	lr
	...

08103364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8103364:	b480      	push	{r7}
 8103366:	b085      	sub	sp, #20
 8103368:	af00      	add	r7, sp, #0
 810336a:	6078      	str	r0, [r7, #4]
 810336c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103374:	2b01      	cmp	r3, #1
 8103376:	d101      	bne.n	810337c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8103378:	2302      	movs	r3, #2
 810337a:	e068      	b.n	810344e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	2201      	movs	r2, #1
 8103380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	2202      	movs	r2, #2
 8103388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	685b      	ldr	r3, [r3, #4]
 8103392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8103394:	687b      	ldr	r3, [r7, #4]
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	689b      	ldr	r3, [r3, #8]
 810339a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810339c:	687b      	ldr	r3, [r7, #4]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	4a2e      	ldr	r2, [pc, #184]	; (810345c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 81033a2:	4293      	cmp	r3, r2
 81033a4:	d004      	beq.n	81033b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81033a6:	687b      	ldr	r3, [r7, #4]
 81033a8:	681b      	ldr	r3, [r3, #0]
 81033aa:	4a2d      	ldr	r2, [pc, #180]	; (8103460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 81033ac:	4293      	cmp	r3, r2
 81033ae:	d108      	bne.n	81033c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81033b0:	68fb      	ldr	r3, [r7, #12]
 81033b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81033b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81033b8:	683b      	ldr	r3, [r7, #0]
 81033ba:	685b      	ldr	r3, [r3, #4]
 81033bc:	68fa      	ldr	r2, [r7, #12]
 81033be:	4313      	orrs	r3, r2
 81033c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81033c2:	68fb      	ldr	r3, [r7, #12]
 81033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81033c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81033ca:	683b      	ldr	r3, [r7, #0]
 81033cc:	681b      	ldr	r3, [r3, #0]
 81033ce:	68fa      	ldr	r2, [r7, #12]
 81033d0:	4313      	orrs	r3, r2
 81033d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	68fa      	ldr	r2, [r7, #12]
 81033da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	681b      	ldr	r3, [r3, #0]
 81033e0:	4a1e      	ldr	r2, [pc, #120]	; (810345c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 81033e2:	4293      	cmp	r3, r2
 81033e4:	d01d      	beq.n	8103422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	681b      	ldr	r3, [r3, #0]
 81033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81033ee:	d018      	beq.n	8103422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81033f0:	687b      	ldr	r3, [r7, #4]
 81033f2:	681b      	ldr	r3, [r3, #0]
 81033f4:	4a1b      	ldr	r2, [pc, #108]	; (8103464 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81033f6:	4293      	cmp	r3, r2
 81033f8:	d013      	beq.n	8103422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	681b      	ldr	r3, [r3, #0]
 81033fe:	4a1a      	ldr	r2, [pc, #104]	; (8103468 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8103400:	4293      	cmp	r3, r2
 8103402:	d00e      	beq.n	8103422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103404:	687b      	ldr	r3, [r7, #4]
 8103406:	681b      	ldr	r3, [r3, #0]
 8103408:	4a18      	ldr	r2, [pc, #96]	; (810346c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810340a:	4293      	cmp	r3, r2
 810340c:	d009      	beq.n	8103422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	4a13      	ldr	r2, [pc, #76]	; (8103460 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8103414:	4293      	cmp	r3, r2
 8103416:	d004      	beq.n	8103422 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	4a14      	ldr	r2, [pc, #80]	; (8103470 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810341e:	4293      	cmp	r3, r2
 8103420:	d10c      	bne.n	810343c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8103422:	68bb      	ldr	r3, [r7, #8]
 8103424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8103428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810342a:	683b      	ldr	r3, [r7, #0]
 810342c:	689b      	ldr	r3, [r3, #8]
 810342e:	68ba      	ldr	r2, [r7, #8]
 8103430:	4313      	orrs	r3, r2
 8103432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	68ba      	ldr	r2, [r7, #8]
 810343a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810343c:	687b      	ldr	r3, [r7, #4]
 810343e:	2201      	movs	r2, #1
 8103440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8103444:	687b      	ldr	r3, [r7, #4]
 8103446:	2200      	movs	r2, #0
 8103448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810344c:	2300      	movs	r3, #0
}
 810344e:	4618      	mov	r0, r3
 8103450:	3714      	adds	r7, #20
 8103452:	46bd      	mov	sp, r7
 8103454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103458:	4770      	bx	lr
 810345a:	bf00      	nop
 810345c:	40010000 	.word	0x40010000
 8103460:	40010400 	.word	0x40010400
 8103464:	40000400 	.word	0x40000400
 8103468:	40000800 	.word	0x40000800
 810346c:	40000c00 	.word	0x40000c00
 8103470:	40001800 	.word	0x40001800

08103474 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8103474:	b480      	push	{r7}
 8103476:	b085      	sub	sp, #20
 8103478:	af00      	add	r7, sp, #0
 810347a:	6078      	str	r0, [r7, #4]
 810347c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810347e:	2300      	movs	r3, #0
 8103480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8103488:	2b01      	cmp	r3, #1
 810348a:	d101      	bne.n	8103490 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810348c:	2302      	movs	r3, #2
 810348e:	e065      	b.n	810355c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	2201      	movs	r2, #1
 8103494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8103498:	68fb      	ldr	r3, [r7, #12]
 810349a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810349e:	683b      	ldr	r3, [r7, #0]
 81034a0:	68db      	ldr	r3, [r3, #12]
 81034a2:	4313      	orrs	r3, r2
 81034a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 81034a6:	68fb      	ldr	r3, [r7, #12]
 81034a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81034ac:	683b      	ldr	r3, [r7, #0]
 81034ae:	689b      	ldr	r3, [r3, #8]
 81034b0:	4313      	orrs	r3, r2
 81034b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81034b4:	68fb      	ldr	r3, [r7, #12]
 81034b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 81034ba:	683b      	ldr	r3, [r7, #0]
 81034bc:	685b      	ldr	r3, [r3, #4]
 81034be:	4313      	orrs	r3, r2
 81034c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81034c2:	68fb      	ldr	r3, [r7, #12]
 81034c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 81034c8:	683b      	ldr	r3, [r7, #0]
 81034ca:	681b      	ldr	r3, [r3, #0]
 81034cc:	4313      	orrs	r3, r2
 81034ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 81034d0:	68fb      	ldr	r3, [r7, #12]
 81034d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81034d6:	683b      	ldr	r3, [r7, #0]
 81034d8:	691b      	ldr	r3, [r3, #16]
 81034da:	4313      	orrs	r3, r2
 81034dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81034de:	68fb      	ldr	r3, [r7, #12]
 81034e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 81034e4:	683b      	ldr	r3, [r7, #0]
 81034e6:	695b      	ldr	r3, [r3, #20]
 81034e8:	4313      	orrs	r3, r2
 81034ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81034ec:	68fb      	ldr	r3, [r7, #12]
 81034ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81034f2:	683b      	ldr	r3, [r7, #0]
 81034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81034f6:	4313      	orrs	r3, r2
 81034f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81034fa:	68fb      	ldr	r3, [r7, #12]
 81034fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8103500:	683b      	ldr	r3, [r7, #0]
 8103502:	699b      	ldr	r3, [r3, #24]
 8103504:	041b      	lsls	r3, r3, #16
 8103506:	4313      	orrs	r3, r2
 8103508:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	4a16      	ldr	r2, [pc, #88]	; (8103568 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8103510:	4293      	cmp	r3, r2
 8103512:	d004      	beq.n	810351e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	4a14      	ldr	r2, [pc, #80]	; (810356c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810351a:	4293      	cmp	r3, r2
 810351c:	d115      	bne.n	810354a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810351e:	68fb      	ldr	r3, [r7, #12]
 8103520:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8103524:	683b      	ldr	r3, [r7, #0]
 8103526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103528:	051b      	lsls	r3, r3, #20
 810352a:	4313      	orrs	r3, r2
 810352c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810352e:	68fb      	ldr	r3, [r7, #12]
 8103530:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103534:	683b      	ldr	r3, [r7, #0]
 8103536:	69db      	ldr	r3, [r3, #28]
 8103538:	4313      	orrs	r3, r2
 810353a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810353c:	68fb      	ldr	r3, [r7, #12]
 810353e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8103542:	683b      	ldr	r3, [r7, #0]
 8103544:	6a1b      	ldr	r3, [r3, #32]
 8103546:	4313      	orrs	r3, r2
 8103548:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810354a:	687b      	ldr	r3, [r7, #4]
 810354c:	681b      	ldr	r3, [r3, #0]
 810354e:	68fa      	ldr	r2, [r7, #12]
 8103550:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	2200      	movs	r2, #0
 8103556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810355a:	2300      	movs	r3, #0
}
 810355c:	4618      	mov	r0, r3
 810355e:	3714      	adds	r7, #20
 8103560:	46bd      	mov	sp, r7
 8103562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103566:	4770      	bx	lr
 8103568:	40010000 	.word	0x40010000
 810356c:	40010400 	.word	0x40010400

08103570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103570:	b480      	push	{r7}
 8103572:	b083      	sub	sp, #12
 8103574:	af00      	add	r7, sp, #0
 8103576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8103578:	bf00      	nop
 810357a:	370c      	adds	r7, #12
 810357c:	46bd      	mov	sp, r7
 810357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103582:	4770      	bx	lr

08103584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103584:	b480      	push	{r7}
 8103586:	b083      	sub	sp, #12
 8103588:	af00      	add	r7, sp, #0
 810358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810358c:	bf00      	nop
 810358e:	370c      	adds	r7, #12
 8103590:	46bd      	mov	sp, r7
 8103592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103596:	4770      	bx	lr

08103598 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8103598:	b480      	push	{r7}
 810359a:	b083      	sub	sp, #12
 810359c:	af00      	add	r7, sp, #0
 810359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81035a0:	bf00      	nop
 81035a2:	370c      	adds	r7, #12
 81035a4:	46bd      	mov	sp, r7
 81035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035aa:	4770      	bx	lr

081035ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81035ac:	b580      	push	{r7, lr}
 81035ae:	b082      	sub	sp, #8
 81035b0:	af00      	add	r7, sp, #0
 81035b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	2b00      	cmp	r3, #0
 81035b8:	d101      	bne.n	81035be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81035ba:	2301      	movs	r3, #1
 81035bc:	e042      	b.n	8103644 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81035be:	687b      	ldr	r3, [r7, #4]
 81035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81035c4:	2b00      	cmp	r3, #0
 81035c6:	d106      	bne.n	81035d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81035c8:	687b      	ldr	r3, [r7, #4]
 81035ca:	2200      	movs	r2, #0
 81035cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81035d0:	6878      	ldr	r0, [r7, #4]
 81035d2:	f7fd fc89 	bl	8100ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81035d6:	687b      	ldr	r3, [r7, #4]
 81035d8:	2224      	movs	r2, #36	; 0x24
 81035da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	681a      	ldr	r2, [r3, #0]
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	681b      	ldr	r3, [r3, #0]
 81035e8:	f022 0201 	bic.w	r2, r2, #1
 81035ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81035ee:	6878      	ldr	r0, [r7, #4]
 81035f0:	f000 f82c 	bl	810364c <UART_SetConfig>
 81035f4:	4603      	mov	r3, r0
 81035f6:	2b01      	cmp	r3, #1
 81035f8:	d101      	bne.n	81035fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81035fa:	2301      	movs	r3, #1
 81035fc:	e022      	b.n	8103644 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103602:	2b00      	cmp	r3, #0
 8103604:	d002      	beq.n	810360c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8103606:	6878      	ldr	r0, [r7, #4]
 8103608:	f000 fdd0 	bl	81041ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810360c:	687b      	ldr	r3, [r7, #4]
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	685a      	ldr	r2, [r3, #4]
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	681b      	ldr	r3, [r3, #0]
 8103616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810361a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	689a      	ldr	r2, [r3, #8]
 8103622:	687b      	ldr	r3, [r7, #4]
 8103624:	681b      	ldr	r3, [r3, #0]
 8103626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810362a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	681b      	ldr	r3, [r3, #0]
 8103630:	681a      	ldr	r2, [r3, #0]
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	f042 0201 	orr.w	r2, r2, #1
 810363a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810363c:	6878      	ldr	r0, [r7, #4]
 810363e:	f000 fe57 	bl	81042f0 <UART_CheckIdleState>
 8103642:	4603      	mov	r3, r0
}
 8103644:	4618      	mov	r0, r3
 8103646:	3708      	adds	r7, #8
 8103648:	46bd      	mov	sp, r7
 810364a:	bd80      	pop	{r7, pc}

0810364c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810364c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8103650:	b08e      	sub	sp, #56	; 0x38
 8103652:	af00      	add	r7, sp, #0
 8103654:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8103656:	2300      	movs	r3, #0
 8103658:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	689a      	ldr	r2, [r3, #8]
 8103660:	687b      	ldr	r3, [r7, #4]
 8103662:	691b      	ldr	r3, [r3, #16]
 8103664:	431a      	orrs	r2, r3
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	695b      	ldr	r3, [r3, #20]
 810366a:	431a      	orrs	r2, r3
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	69db      	ldr	r3, [r3, #28]
 8103670:	4313      	orrs	r3, r2
 8103672:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810367a:	4313      	orrs	r3, r2
 810367c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	681a      	ldr	r2, [r3, #0]
 8103684:	4bc2      	ldr	r3, [pc, #776]	; (8103990 <UART_SetConfig+0x344>)
 8103686:	4013      	ands	r3, r2
 8103688:	687a      	ldr	r2, [r7, #4]
 810368a:	6812      	ldr	r2, [r2, #0]
 810368c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810368e:	430b      	orrs	r3, r1
 8103690:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	681b      	ldr	r3, [r3, #0]
 8103696:	685b      	ldr	r3, [r3, #4]
 8103698:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	68da      	ldr	r2, [r3, #12]
 81036a0:	687b      	ldr	r3, [r7, #4]
 81036a2:	681b      	ldr	r3, [r3, #0]
 81036a4:	430a      	orrs	r2, r1
 81036a6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	699b      	ldr	r3, [r3, #24]
 81036ac:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81036ae:	687b      	ldr	r3, [r7, #4]
 81036b0:	681b      	ldr	r3, [r3, #0]
 81036b2:	4ab8      	ldr	r2, [pc, #736]	; (8103994 <UART_SetConfig+0x348>)
 81036b4:	4293      	cmp	r3, r2
 81036b6:	d004      	beq.n	81036c2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	6a1b      	ldr	r3, [r3, #32]
 81036bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81036be:	4313      	orrs	r3, r2
 81036c0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81036c2:	687b      	ldr	r3, [r7, #4]
 81036c4:	681b      	ldr	r3, [r3, #0]
 81036c6:	689b      	ldr	r3, [r3, #8]
 81036c8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81036cc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81036d0:	687a      	ldr	r2, [r7, #4]
 81036d2:	6812      	ldr	r2, [r2, #0]
 81036d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81036d6:	430b      	orrs	r3, r1
 81036d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81036da:	687b      	ldr	r3, [r7, #4]
 81036dc:	681b      	ldr	r3, [r3, #0]
 81036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036e0:	f023 010f 	bic.w	r1, r3, #15
 81036e4:	687b      	ldr	r3, [r7, #4]
 81036e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	681b      	ldr	r3, [r3, #0]
 81036ec:	430a      	orrs	r2, r1
 81036ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	681b      	ldr	r3, [r3, #0]
 81036f4:	4aa8      	ldr	r2, [pc, #672]	; (8103998 <UART_SetConfig+0x34c>)
 81036f6:	4293      	cmp	r3, r2
 81036f8:	d177      	bne.n	81037ea <UART_SetConfig+0x19e>
 81036fa:	4ba8      	ldr	r3, [pc, #672]	; (810399c <UART_SetConfig+0x350>)
 81036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103702:	2b28      	cmp	r3, #40	; 0x28
 8103704:	d86c      	bhi.n	81037e0 <UART_SetConfig+0x194>
 8103706:	a201      	add	r2, pc, #4	; (adr r2, 810370c <UART_SetConfig+0xc0>)
 8103708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810370c:	081037b1 	.word	0x081037b1
 8103710:	081037e1 	.word	0x081037e1
 8103714:	081037e1 	.word	0x081037e1
 8103718:	081037e1 	.word	0x081037e1
 810371c:	081037e1 	.word	0x081037e1
 8103720:	081037e1 	.word	0x081037e1
 8103724:	081037e1 	.word	0x081037e1
 8103728:	081037e1 	.word	0x081037e1
 810372c:	081037b9 	.word	0x081037b9
 8103730:	081037e1 	.word	0x081037e1
 8103734:	081037e1 	.word	0x081037e1
 8103738:	081037e1 	.word	0x081037e1
 810373c:	081037e1 	.word	0x081037e1
 8103740:	081037e1 	.word	0x081037e1
 8103744:	081037e1 	.word	0x081037e1
 8103748:	081037e1 	.word	0x081037e1
 810374c:	081037c1 	.word	0x081037c1
 8103750:	081037e1 	.word	0x081037e1
 8103754:	081037e1 	.word	0x081037e1
 8103758:	081037e1 	.word	0x081037e1
 810375c:	081037e1 	.word	0x081037e1
 8103760:	081037e1 	.word	0x081037e1
 8103764:	081037e1 	.word	0x081037e1
 8103768:	081037e1 	.word	0x081037e1
 810376c:	081037c9 	.word	0x081037c9
 8103770:	081037e1 	.word	0x081037e1
 8103774:	081037e1 	.word	0x081037e1
 8103778:	081037e1 	.word	0x081037e1
 810377c:	081037e1 	.word	0x081037e1
 8103780:	081037e1 	.word	0x081037e1
 8103784:	081037e1 	.word	0x081037e1
 8103788:	081037e1 	.word	0x081037e1
 810378c:	081037d1 	.word	0x081037d1
 8103790:	081037e1 	.word	0x081037e1
 8103794:	081037e1 	.word	0x081037e1
 8103798:	081037e1 	.word	0x081037e1
 810379c:	081037e1 	.word	0x081037e1
 81037a0:	081037e1 	.word	0x081037e1
 81037a4:	081037e1 	.word	0x081037e1
 81037a8:	081037e1 	.word	0x081037e1
 81037ac:	081037d9 	.word	0x081037d9
 81037b0:	2301      	movs	r3, #1
 81037b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81037b6:	e231      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81037b8:	2304      	movs	r3, #4
 81037ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81037be:	e22d      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81037c0:	2308      	movs	r3, #8
 81037c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81037c6:	e229      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81037c8:	2310      	movs	r3, #16
 81037ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81037ce:	e225      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81037d0:	2320      	movs	r3, #32
 81037d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81037d6:	e221      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81037d8:	2340      	movs	r3, #64	; 0x40
 81037da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81037de:	e21d      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81037e0:	2380      	movs	r3, #128	; 0x80
 81037e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81037e6:	bf00      	nop
 81037e8:	e218      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a6c      	ldr	r2, [pc, #432]	; (81039a0 <UART_SetConfig+0x354>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d132      	bne.n	810385a <UART_SetConfig+0x20e>
 81037f4:	4b69      	ldr	r3, [pc, #420]	; (810399c <UART_SetConfig+0x350>)
 81037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037f8:	f003 0307 	and.w	r3, r3, #7
 81037fc:	2b05      	cmp	r3, #5
 81037fe:	d827      	bhi.n	8103850 <UART_SetConfig+0x204>
 8103800:	a201      	add	r2, pc, #4	; (adr r2, 8103808 <UART_SetConfig+0x1bc>)
 8103802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103806:	bf00      	nop
 8103808:	08103821 	.word	0x08103821
 810380c:	08103829 	.word	0x08103829
 8103810:	08103831 	.word	0x08103831
 8103814:	08103839 	.word	0x08103839
 8103818:	08103841 	.word	0x08103841
 810381c:	08103849 	.word	0x08103849
 8103820:	2300      	movs	r3, #0
 8103822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103826:	e1f9      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103828:	2304      	movs	r3, #4
 810382a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810382e:	e1f5      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103830:	2308      	movs	r3, #8
 8103832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103836:	e1f1      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103838:	2310      	movs	r3, #16
 810383a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810383e:	e1ed      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103840:	2320      	movs	r3, #32
 8103842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103846:	e1e9      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103848:	2340      	movs	r3, #64	; 0x40
 810384a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810384e:	e1e5      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103850:	2380      	movs	r3, #128	; 0x80
 8103852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103856:	bf00      	nop
 8103858:	e1e0      	b.n	8103c1c <UART_SetConfig+0x5d0>
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	4a51      	ldr	r2, [pc, #324]	; (81039a4 <UART_SetConfig+0x358>)
 8103860:	4293      	cmp	r3, r2
 8103862:	d132      	bne.n	81038ca <UART_SetConfig+0x27e>
 8103864:	4b4d      	ldr	r3, [pc, #308]	; (810399c <UART_SetConfig+0x350>)
 8103866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103868:	f003 0307 	and.w	r3, r3, #7
 810386c:	2b05      	cmp	r3, #5
 810386e:	d827      	bhi.n	81038c0 <UART_SetConfig+0x274>
 8103870:	a201      	add	r2, pc, #4	; (adr r2, 8103878 <UART_SetConfig+0x22c>)
 8103872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103876:	bf00      	nop
 8103878:	08103891 	.word	0x08103891
 810387c:	08103899 	.word	0x08103899
 8103880:	081038a1 	.word	0x081038a1
 8103884:	081038a9 	.word	0x081038a9
 8103888:	081038b1 	.word	0x081038b1
 810388c:	081038b9 	.word	0x081038b9
 8103890:	2300      	movs	r3, #0
 8103892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103896:	e1c1      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103898:	2304      	movs	r3, #4
 810389a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810389e:	e1bd      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81038a0:	2308      	movs	r3, #8
 81038a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81038a6:	e1b9      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81038a8:	2310      	movs	r3, #16
 81038aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81038ae:	e1b5      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81038b0:	2320      	movs	r3, #32
 81038b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81038b6:	e1b1      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81038b8:	2340      	movs	r3, #64	; 0x40
 81038ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81038be:	e1ad      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81038c0:	2380      	movs	r3, #128	; 0x80
 81038c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81038c6:	bf00      	nop
 81038c8:	e1a8      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	4a36      	ldr	r2, [pc, #216]	; (81039a8 <UART_SetConfig+0x35c>)
 81038d0:	4293      	cmp	r3, r2
 81038d2:	d132      	bne.n	810393a <UART_SetConfig+0x2ee>
 81038d4:	4b31      	ldr	r3, [pc, #196]	; (810399c <UART_SetConfig+0x350>)
 81038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81038d8:	f003 0307 	and.w	r3, r3, #7
 81038dc:	2b05      	cmp	r3, #5
 81038de:	d827      	bhi.n	8103930 <UART_SetConfig+0x2e4>
 81038e0:	a201      	add	r2, pc, #4	; (adr r2, 81038e8 <UART_SetConfig+0x29c>)
 81038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038e6:	bf00      	nop
 81038e8:	08103901 	.word	0x08103901
 81038ec:	08103909 	.word	0x08103909
 81038f0:	08103911 	.word	0x08103911
 81038f4:	08103919 	.word	0x08103919
 81038f8:	08103921 	.word	0x08103921
 81038fc:	08103929 	.word	0x08103929
 8103900:	2300      	movs	r3, #0
 8103902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103906:	e189      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103908:	2304      	movs	r3, #4
 810390a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810390e:	e185      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103910:	2308      	movs	r3, #8
 8103912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103916:	e181      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103918:	2310      	movs	r3, #16
 810391a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810391e:	e17d      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103920:	2320      	movs	r3, #32
 8103922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103926:	e179      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103928:	2340      	movs	r3, #64	; 0x40
 810392a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810392e:	e175      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103930:	2380      	movs	r3, #128	; 0x80
 8103932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103936:	bf00      	nop
 8103938:	e170      	b.n	8103c1c <UART_SetConfig+0x5d0>
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	681b      	ldr	r3, [r3, #0]
 810393e:	4a1b      	ldr	r2, [pc, #108]	; (81039ac <UART_SetConfig+0x360>)
 8103940:	4293      	cmp	r3, r2
 8103942:	d142      	bne.n	81039ca <UART_SetConfig+0x37e>
 8103944:	4b15      	ldr	r3, [pc, #84]	; (810399c <UART_SetConfig+0x350>)
 8103946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103948:	f003 0307 	and.w	r3, r3, #7
 810394c:	2b05      	cmp	r3, #5
 810394e:	d837      	bhi.n	81039c0 <UART_SetConfig+0x374>
 8103950:	a201      	add	r2, pc, #4	; (adr r2, 8103958 <UART_SetConfig+0x30c>)
 8103952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103956:	bf00      	nop
 8103958:	08103971 	.word	0x08103971
 810395c:	08103979 	.word	0x08103979
 8103960:	08103981 	.word	0x08103981
 8103964:	08103989 	.word	0x08103989
 8103968:	081039b1 	.word	0x081039b1
 810396c:	081039b9 	.word	0x081039b9
 8103970:	2300      	movs	r3, #0
 8103972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103976:	e151      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103978:	2304      	movs	r3, #4
 810397a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810397e:	e14d      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103980:	2308      	movs	r3, #8
 8103982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103986:	e149      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103988:	2310      	movs	r3, #16
 810398a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810398e:	e145      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103990:	cfff69f3 	.word	0xcfff69f3
 8103994:	58000c00 	.word	0x58000c00
 8103998:	40011000 	.word	0x40011000
 810399c:	58024400 	.word	0x58024400
 81039a0:	40004400 	.word	0x40004400
 81039a4:	40004800 	.word	0x40004800
 81039a8:	40004c00 	.word	0x40004c00
 81039ac:	40005000 	.word	0x40005000
 81039b0:	2320      	movs	r3, #32
 81039b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81039b6:	e131      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81039b8:	2340      	movs	r3, #64	; 0x40
 81039ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81039be:	e12d      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81039c0:	2380      	movs	r3, #128	; 0x80
 81039c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81039c6:	bf00      	nop
 81039c8:	e128      	b.n	8103c1c <UART_SetConfig+0x5d0>
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	4ab6      	ldr	r2, [pc, #728]	; (8103ca8 <UART_SetConfig+0x65c>)
 81039d0:	4293      	cmp	r3, r2
 81039d2:	d178      	bne.n	8103ac6 <UART_SetConfig+0x47a>
 81039d4:	4bb5      	ldr	r3, [pc, #724]	; (8103cac <UART_SetConfig+0x660>)
 81039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81039dc:	2b28      	cmp	r3, #40	; 0x28
 81039de:	d86d      	bhi.n	8103abc <UART_SetConfig+0x470>
 81039e0:	a201      	add	r2, pc, #4	; (adr r2, 81039e8 <UART_SetConfig+0x39c>)
 81039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039e6:	bf00      	nop
 81039e8:	08103a8d 	.word	0x08103a8d
 81039ec:	08103abd 	.word	0x08103abd
 81039f0:	08103abd 	.word	0x08103abd
 81039f4:	08103abd 	.word	0x08103abd
 81039f8:	08103abd 	.word	0x08103abd
 81039fc:	08103abd 	.word	0x08103abd
 8103a00:	08103abd 	.word	0x08103abd
 8103a04:	08103abd 	.word	0x08103abd
 8103a08:	08103a95 	.word	0x08103a95
 8103a0c:	08103abd 	.word	0x08103abd
 8103a10:	08103abd 	.word	0x08103abd
 8103a14:	08103abd 	.word	0x08103abd
 8103a18:	08103abd 	.word	0x08103abd
 8103a1c:	08103abd 	.word	0x08103abd
 8103a20:	08103abd 	.word	0x08103abd
 8103a24:	08103abd 	.word	0x08103abd
 8103a28:	08103a9d 	.word	0x08103a9d
 8103a2c:	08103abd 	.word	0x08103abd
 8103a30:	08103abd 	.word	0x08103abd
 8103a34:	08103abd 	.word	0x08103abd
 8103a38:	08103abd 	.word	0x08103abd
 8103a3c:	08103abd 	.word	0x08103abd
 8103a40:	08103abd 	.word	0x08103abd
 8103a44:	08103abd 	.word	0x08103abd
 8103a48:	08103aa5 	.word	0x08103aa5
 8103a4c:	08103abd 	.word	0x08103abd
 8103a50:	08103abd 	.word	0x08103abd
 8103a54:	08103abd 	.word	0x08103abd
 8103a58:	08103abd 	.word	0x08103abd
 8103a5c:	08103abd 	.word	0x08103abd
 8103a60:	08103abd 	.word	0x08103abd
 8103a64:	08103abd 	.word	0x08103abd
 8103a68:	08103aad 	.word	0x08103aad
 8103a6c:	08103abd 	.word	0x08103abd
 8103a70:	08103abd 	.word	0x08103abd
 8103a74:	08103abd 	.word	0x08103abd
 8103a78:	08103abd 	.word	0x08103abd
 8103a7c:	08103abd 	.word	0x08103abd
 8103a80:	08103abd 	.word	0x08103abd
 8103a84:	08103abd 	.word	0x08103abd
 8103a88:	08103ab5 	.word	0x08103ab5
 8103a8c:	2301      	movs	r3, #1
 8103a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103a92:	e0c3      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103a94:	2304      	movs	r3, #4
 8103a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103a9a:	e0bf      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103a9c:	2308      	movs	r3, #8
 8103a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103aa2:	e0bb      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103aa4:	2310      	movs	r3, #16
 8103aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103aaa:	e0b7      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103aac:	2320      	movs	r3, #32
 8103aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103ab2:	e0b3      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103ab4:	2340      	movs	r3, #64	; 0x40
 8103ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103aba:	e0af      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103abc:	2380      	movs	r3, #128	; 0x80
 8103abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103ac2:	bf00      	nop
 8103ac4:	e0aa      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103ac6:	687b      	ldr	r3, [r7, #4]
 8103ac8:	681b      	ldr	r3, [r3, #0]
 8103aca:	4a79      	ldr	r2, [pc, #484]	; (8103cb0 <UART_SetConfig+0x664>)
 8103acc:	4293      	cmp	r3, r2
 8103ace:	d132      	bne.n	8103b36 <UART_SetConfig+0x4ea>
 8103ad0:	4b76      	ldr	r3, [pc, #472]	; (8103cac <UART_SetConfig+0x660>)
 8103ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ad4:	f003 0307 	and.w	r3, r3, #7
 8103ad8:	2b05      	cmp	r3, #5
 8103ada:	d827      	bhi.n	8103b2c <UART_SetConfig+0x4e0>
 8103adc:	a201      	add	r2, pc, #4	; (adr r2, 8103ae4 <UART_SetConfig+0x498>)
 8103ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ae2:	bf00      	nop
 8103ae4:	08103afd 	.word	0x08103afd
 8103ae8:	08103b05 	.word	0x08103b05
 8103aec:	08103b0d 	.word	0x08103b0d
 8103af0:	08103b15 	.word	0x08103b15
 8103af4:	08103b1d 	.word	0x08103b1d
 8103af8:	08103b25 	.word	0x08103b25
 8103afc:	2300      	movs	r3, #0
 8103afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b02:	e08b      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b04:	2304      	movs	r3, #4
 8103b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b0a:	e087      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b0c:	2308      	movs	r3, #8
 8103b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b12:	e083      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b14:	2310      	movs	r3, #16
 8103b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b1a:	e07f      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b1c:	2320      	movs	r3, #32
 8103b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b22:	e07b      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b24:	2340      	movs	r3, #64	; 0x40
 8103b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b2a:	e077      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b2c:	2380      	movs	r3, #128	; 0x80
 8103b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b32:	bf00      	nop
 8103b34:	e072      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	4a5e      	ldr	r2, [pc, #376]	; (8103cb4 <UART_SetConfig+0x668>)
 8103b3c:	4293      	cmp	r3, r2
 8103b3e:	d132      	bne.n	8103ba6 <UART_SetConfig+0x55a>
 8103b40:	4b5a      	ldr	r3, [pc, #360]	; (8103cac <UART_SetConfig+0x660>)
 8103b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b44:	f003 0307 	and.w	r3, r3, #7
 8103b48:	2b05      	cmp	r3, #5
 8103b4a:	d827      	bhi.n	8103b9c <UART_SetConfig+0x550>
 8103b4c:	a201      	add	r2, pc, #4	; (adr r2, 8103b54 <UART_SetConfig+0x508>)
 8103b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b52:	bf00      	nop
 8103b54:	08103b6d 	.word	0x08103b6d
 8103b58:	08103b75 	.word	0x08103b75
 8103b5c:	08103b7d 	.word	0x08103b7d
 8103b60:	08103b85 	.word	0x08103b85
 8103b64:	08103b8d 	.word	0x08103b8d
 8103b68:	08103b95 	.word	0x08103b95
 8103b6c:	2300      	movs	r3, #0
 8103b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b72:	e053      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b74:	2304      	movs	r3, #4
 8103b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b7a:	e04f      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b7c:	2308      	movs	r3, #8
 8103b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b82:	e04b      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b84:	2310      	movs	r3, #16
 8103b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b8a:	e047      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b8c:	2320      	movs	r3, #32
 8103b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b92:	e043      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b94:	2340      	movs	r3, #64	; 0x40
 8103b96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103b9a:	e03f      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103b9c:	2380      	movs	r3, #128	; 0x80
 8103b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103ba2:	bf00      	nop
 8103ba4:	e03a      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4a43      	ldr	r2, [pc, #268]	; (8103cb8 <UART_SetConfig+0x66c>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d132      	bne.n	8103c16 <UART_SetConfig+0x5ca>
 8103bb0:	4b3e      	ldr	r3, [pc, #248]	; (8103cac <UART_SetConfig+0x660>)
 8103bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103bb4:	f003 0307 	and.w	r3, r3, #7
 8103bb8:	2b05      	cmp	r3, #5
 8103bba:	d827      	bhi.n	8103c0c <UART_SetConfig+0x5c0>
 8103bbc:	a201      	add	r2, pc, #4	; (adr r2, 8103bc4 <UART_SetConfig+0x578>)
 8103bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bc2:	bf00      	nop
 8103bc4:	08103bdd 	.word	0x08103bdd
 8103bc8:	08103be5 	.word	0x08103be5
 8103bcc:	08103bed 	.word	0x08103bed
 8103bd0:	08103bf5 	.word	0x08103bf5
 8103bd4:	08103bfd 	.word	0x08103bfd
 8103bd8:	08103c05 	.word	0x08103c05
 8103bdc:	2302      	movs	r3, #2
 8103bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103be2:	e01b      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103be4:	2304      	movs	r3, #4
 8103be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103bea:	e017      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103bec:	2308      	movs	r3, #8
 8103bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103bf2:	e013      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103bf4:	2310      	movs	r3, #16
 8103bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103bfa:	e00f      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103bfc:	2320      	movs	r3, #32
 8103bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103c02:	e00b      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103c04:	2340      	movs	r3, #64	; 0x40
 8103c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103c0a:	e007      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103c0c:	2380      	movs	r3, #128	; 0x80
 8103c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8103c12:	bf00      	nop
 8103c14:	e002      	b.n	8103c1c <UART_SetConfig+0x5d0>
 8103c16:	2380      	movs	r3, #128	; 0x80
 8103c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8103c1c:	687b      	ldr	r3, [r7, #4]
 8103c1e:	681b      	ldr	r3, [r3, #0]
 8103c20:	4a25      	ldr	r2, [pc, #148]	; (8103cb8 <UART_SetConfig+0x66c>)
 8103c22:	4293      	cmp	r3, r2
 8103c24:	f040 80b8 	bne.w	8103d98 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8103c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103c2c:	2b08      	cmp	r3, #8
 8103c2e:	d019      	beq.n	8103c64 <UART_SetConfig+0x618>
 8103c30:	2b08      	cmp	r3, #8
 8103c32:	dc04      	bgt.n	8103c3e <UART_SetConfig+0x5f2>
 8103c34:	2b02      	cmp	r3, #2
 8103c36:	d009      	beq.n	8103c4c <UART_SetConfig+0x600>
 8103c38:	2b04      	cmp	r3, #4
 8103c3a:	d00b      	beq.n	8103c54 <UART_SetConfig+0x608>
 8103c3c:	e042      	b.n	8103cc4 <UART_SetConfig+0x678>
 8103c3e:	2b20      	cmp	r3, #32
 8103c40:	d02b      	beq.n	8103c9a <UART_SetConfig+0x64e>
 8103c42:	2b40      	cmp	r3, #64	; 0x40
 8103c44:	d02c      	beq.n	8103ca0 <UART_SetConfig+0x654>
 8103c46:	2b10      	cmp	r3, #16
 8103c48:	d014      	beq.n	8103c74 <UART_SetConfig+0x628>
 8103c4a:	e03b      	b.n	8103cc4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103c4c:	f7fd ffc8 	bl	8101be0 <HAL_RCCEx_GetD3PCLK1Freq>
 8103c50:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103c52:	e03d      	b.n	8103cd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103c54:	f107 0314 	add.w	r3, r7, #20
 8103c58:	4618      	mov	r0, r3
 8103c5a:	f7fd ffd7 	bl	8101c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103c5e:	69bb      	ldr	r3, [r7, #24]
 8103c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103c62:	e035      	b.n	8103cd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103c64:	f107 0308 	add.w	r3, r7, #8
 8103c68:	4618      	mov	r0, r3
 8103c6a:	f7fe f91b 	bl	8101ea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103c72:	e02d      	b.n	8103cd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103c74:	4b0d      	ldr	r3, [pc, #52]	; (8103cac <UART_SetConfig+0x660>)
 8103c76:	681b      	ldr	r3, [r3, #0]
 8103c78:	f003 0320 	and.w	r3, r3, #32
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d009      	beq.n	8103c94 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103c80:	4b0a      	ldr	r3, [pc, #40]	; (8103cac <UART_SetConfig+0x660>)
 8103c82:	681b      	ldr	r3, [r3, #0]
 8103c84:	08db      	lsrs	r3, r3, #3
 8103c86:	f003 0303 	and.w	r3, r3, #3
 8103c8a:	4a0c      	ldr	r2, [pc, #48]	; (8103cbc <UART_SetConfig+0x670>)
 8103c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8103c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103c92:	e01d      	b.n	8103cd0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8103c94:	4b09      	ldr	r3, [pc, #36]	; (8103cbc <UART_SetConfig+0x670>)
 8103c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103c98:	e01a      	b.n	8103cd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103c9a:	4b09      	ldr	r3, [pc, #36]	; (8103cc0 <UART_SetConfig+0x674>)
 8103c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103c9e:	e017      	b.n	8103cd0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103ca6:	e013      	b.n	8103cd0 <UART_SetConfig+0x684>
 8103ca8:	40011400 	.word	0x40011400
 8103cac:	58024400 	.word	0x58024400
 8103cb0:	40007800 	.word	0x40007800
 8103cb4:	40007c00 	.word	0x40007c00
 8103cb8:	58000c00 	.word	0x58000c00
 8103cbc:	03d09000 	.word	0x03d09000
 8103cc0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8103cc4:	2300      	movs	r3, #0
 8103cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8103cc8:	2301      	movs	r3, #1
 8103cca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8103cce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103cd2:	2b00      	cmp	r3, #0
 8103cd4:	f000 824d 	beq.w	8104172 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103cdc:	4aad      	ldr	r2, [pc, #692]	; (8103f94 <UART_SetConfig+0x948>)
 8103cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103ce2:	461a      	mov	r2, r3
 8103ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8103cea:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	685a      	ldr	r2, [r3, #4]
 8103cf0:	4613      	mov	r3, r2
 8103cf2:	005b      	lsls	r3, r3, #1
 8103cf4:	4413      	add	r3, r2
 8103cf6:	6a3a      	ldr	r2, [r7, #32]
 8103cf8:	429a      	cmp	r2, r3
 8103cfa:	d305      	bcc.n	8103d08 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	685b      	ldr	r3, [r3, #4]
 8103d00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103d02:	6a3a      	ldr	r2, [r7, #32]
 8103d04:	429a      	cmp	r2, r3
 8103d06:	d903      	bls.n	8103d10 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8103d08:	2301      	movs	r3, #1
 8103d0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8103d0e:	e230      	b.n	8104172 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103d12:	4618      	mov	r0, r3
 8103d14:	f04f 0100 	mov.w	r1, #0
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103d1c:	4a9d      	ldr	r2, [pc, #628]	; (8103f94 <UART_SetConfig+0x948>)
 8103d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103d22:	b29b      	uxth	r3, r3
 8103d24:	f04f 0400 	mov.w	r4, #0
 8103d28:	461a      	mov	r2, r3
 8103d2a:	4623      	mov	r3, r4
 8103d2c:	f7fc fad8 	bl	81002e0 <__aeabi_uldivmod>
 8103d30:	4603      	mov	r3, r0
 8103d32:	460c      	mov	r4, r1
 8103d34:	4619      	mov	r1, r3
 8103d36:	4622      	mov	r2, r4
 8103d38:	f04f 0300 	mov.w	r3, #0
 8103d3c:	f04f 0400 	mov.w	r4, #0
 8103d40:	0214      	lsls	r4, r2, #8
 8103d42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8103d46:	020b      	lsls	r3, r1, #8
 8103d48:	687a      	ldr	r2, [r7, #4]
 8103d4a:	6852      	ldr	r2, [r2, #4]
 8103d4c:	0852      	lsrs	r2, r2, #1
 8103d4e:	4611      	mov	r1, r2
 8103d50:	f04f 0200 	mov.w	r2, #0
 8103d54:	eb13 0b01 	adds.w	fp, r3, r1
 8103d58:	eb44 0c02 	adc.w	ip, r4, r2
 8103d5c:	4658      	mov	r0, fp
 8103d5e:	4661      	mov	r1, ip
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	685b      	ldr	r3, [r3, #4]
 8103d64:	f04f 0400 	mov.w	r4, #0
 8103d68:	461a      	mov	r2, r3
 8103d6a:	4623      	mov	r3, r4
 8103d6c:	f7fc fab8 	bl	81002e0 <__aeabi_uldivmod>
 8103d70:	4603      	mov	r3, r0
 8103d72:	460c      	mov	r4, r1
 8103d74:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8103d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103d7c:	d308      	bcc.n	8103d90 <UART_SetConfig+0x744>
 8103d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103d84:	d204      	bcs.n	8103d90 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8103d86:	687b      	ldr	r3, [r7, #4]
 8103d88:	681b      	ldr	r3, [r3, #0]
 8103d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103d8c:	60da      	str	r2, [r3, #12]
 8103d8e:	e1f0      	b.n	8104172 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8103d90:	2301      	movs	r3, #1
 8103d92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8103d96:	e1ec      	b.n	8104172 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	69db      	ldr	r3, [r3, #28]
 8103d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103da0:	f040 8100 	bne.w	8103fa4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8103da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103da8:	2b40      	cmp	r3, #64	; 0x40
 8103daa:	f200 80b7 	bhi.w	8103f1c <UART_SetConfig+0x8d0>
 8103dae:	a201      	add	r2, pc, #4	; (adr r2, 8103db4 <UART_SetConfig+0x768>)
 8103db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103db4:	08103eb9 	.word	0x08103eb9
 8103db8:	08103ec1 	.word	0x08103ec1
 8103dbc:	08103f1d 	.word	0x08103f1d
 8103dc0:	08103f1d 	.word	0x08103f1d
 8103dc4:	08103ec9 	.word	0x08103ec9
 8103dc8:	08103f1d 	.word	0x08103f1d
 8103dcc:	08103f1d 	.word	0x08103f1d
 8103dd0:	08103f1d 	.word	0x08103f1d
 8103dd4:	08103ed9 	.word	0x08103ed9
 8103dd8:	08103f1d 	.word	0x08103f1d
 8103ddc:	08103f1d 	.word	0x08103f1d
 8103de0:	08103f1d 	.word	0x08103f1d
 8103de4:	08103f1d 	.word	0x08103f1d
 8103de8:	08103f1d 	.word	0x08103f1d
 8103dec:	08103f1d 	.word	0x08103f1d
 8103df0:	08103f1d 	.word	0x08103f1d
 8103df4:	08103ee9 	.word	0x08103ee9
 8103df8:	08103f1d 	.word	0x08103f1d
 8103dfc:	08103f1d 	.word	0x08103f1d
 8103e00:	08103f1d 	.word	0x08103f1d
 8103e04:	08103f1d 	.word	0x08103f1d
 8103e08:	08103f1d 	.word	0x08103f1d
 8103e0c:	08103f1d 	.word	0x08103f1d
 8103e10:	08103f1d 	.word	0x08103f1d
 8103e14:	08103f1d 	.word	0x08103f1d
 8103e18:	08103f1d 	.word	0x08103f1d
 8103e1c:	08103f1d 	.word	0x08103f1d
 8103e20:	08103f1d 	.word	0x08103f1d
 8103e24:	08103f1d 	.word	0x08103f1d
 8103e28:	08103f1d 	.word	0x08103f1d
 8103e2c:	08103f1d 	.word	0x08103f1d
 8103e30:	08103f1d 	.word	0x08103f1d
 8103e34:	08103f0f 	.word	0x08103f0f
 8103e38:	08103f1d 	.word	0x08103f1d
 8103e3c:	08103f1d 	.word	0x08103f1d
 8103e40:	08103f1d 	.word	0x08103f1d
 8103e44:	08103f1d 	.word	0x08103f1d
 8103e48:	08103f1d 	.word	0x08103f1d
 8103e4c:	08103f1d 	.word	0x08103f1d
 8103e50:	08103f1d 	.word	0x08103f1d
 8103e54:	08103f1d 	.word	0x08103f1d
 8103e58:	08103f1d 	.word	0x08103f1d
 8103e5c:	08103f1d 	.word	0x08103f1d
 8103e60:	08103f1d 	.word	0x08103f1d
 8103e64:	08103f1d 	.word	0x08103f1d
 8103e68:	08103f1d 	.word	0x08103f1d
 8103e6c:	08103f1d 	.word	0x08103f1d
 8103e70:	08103f1d 	.word	0x08103f1d
 8103e74:	08103f1d 	.word	0x08103f1d
 8103e78:	08103f1d 	.word	0x08103f1d
 8103e7c:	08103f1d 	.word	0x08103f1d
 8103e80:	08103f1d 	.word	0x08103f1d
 8103e84:	08103f1d 	.word	0x08103f1d
 8103e88:	08103f1d 	.word	0x08103f1d
 8103e8c:	08103f1d 	.word	0x08103f1d
 8103e90:	08103f1d 	.word	0x08103f1d
 8103e94:	08103f1d 	.word	0x08103f1d
 8103e98:	08103f1d 	.word	0x08103f1d
 8103e9c:	08103f1d 	.word	0x08103f1d
 8103ea0:	08103f1d 	.word	0x08103f1d
 8103ea4:	08103f1d 	.word	0x08103f1d
 8103ea8:	08103f1d 	.word	0x08103f1d
 8103eac:	08103f1d 	.word	0x08103f1d
 8103eb0:	08103f1d 	.word	0x08103f1d
 8103eb4:	08103f15 	.word	0x08103f15
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103eb8:	f7fd fe24 	bl	8101b04 <HAL_RCC_GetPCLK1Freq>
 8103ebc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103ebe:	e033      	b.n	8103f28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103ec0:	f7fd fe36 	bl	8101b30 <HAL_RCC_GetPCLK2Freq>
 8103ec4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8103ec6:	e02f      	b.n	8103f28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103ec8:	f107 0314 	add.w	r3, r7, #20
 8103ecc:	4618      	mov	r0, r3
 8103ece:	f7fd fe9d 	bl	8101c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103ed2:	69bb      	ldr	r3, [r7, #24]
 8103ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103ed6:	e027      	b.n	8103f28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103ed8:	f107 0308 	add.w	r3, r7, #8
 8103edc:	4618      	mov	r0, r3
 8103ede:	f7fd ffe1 	bl	8101ea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103ee2:	68fb      	ldr	r3, [r7, #12]
 8103ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103ee6:	e01f      	b.n	8103f28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ee8:	4b2b      	ldr	r3, [pc, #172]	; (8103f98 <UART_SetConfig+0x94c>)
 8103eea:	681b      	ldr	r3, [r3, #0]
 8103eec:	f003 0320 	and.w	r3, r3, #32
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d009      	beq.n	8103f08 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103ef4:	4b28      	ldr	r3, [pc, #160]	; (8103f98 <UART_SetConfig+0x94c>)
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	08db      	lsrs	r3, r3, #3
 8103efa:	f003 0303 	and.w	r3, r3, #3
 8103efe:	4a27      	ldr	r2, [pc, #156]	; (8103f9c <UART_SetConfig+0x950>)
 8103f00:	fa22 f303 	lsr.w	r3, r2, r3
 8103f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103f06:	e00f      	b.n	8103f28 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8103f08:	4b24      	ldr	r3, [pc, #144]	; (8103f9c <UART_SetConfig+0x950>)
 8103f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103f0c:	e00c      	b.n	8103f28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103f0e:	4b24      	ldr	r3, [pc, #144]	; (8103fa0 <UART_SetConfig+0x954>)
 8103f10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103f12:	e009      	b.n	8103f28 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103f14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8103f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8103f1a:	e005      	b.n	8103f28 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8103f1c:	2300      	movs	r3, #0
 8103f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8103f20:	2301      	movs	r3, #1
 8103f22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8103f26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8103f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103f2a:	2b00      	cmp	r3, #0
 8103f2c:	f000 8121 	beq.w	8104172 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103f34:	4a17      	ldr	r2, [pc, #92]	; (8103f94 <UART_SetConfig+0x948>)
 8103f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103f3a:	461a      	mov	r2, r3
 8103f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8103f42:	005a      	lsls	r2, r3, #1
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	685b      	ldr	r3, [r3, #4]
 8103f48:	085b      	lsrs	r3, r3, #1
 8103f4a:	441a      	add	r2, r3
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	685b      	ldr	r3, [r3, #4]
 8103f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8103f54:	b29b      	uxth	r3, r3
 8103f56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f5a:	2b0f      	cmp	r3, #15
 8103f5c:	d916      	bls.n	8103f8c <UART_SetConfig+0x940>
 8103f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103f64:	d212      	bcs.n	8103f8c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f68:	b29b      	uxth	r3, r3
 8103f6a:	f023 030f 	bic.w	r3, r3, #15
 8103f6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8103f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f72:	085b      	lsrs	r3, r3, #1
 8103f74:	b29b      	uxth	r3, r3
 8103f76:	f003 0307 	and.w	r3, r3, #7
 8103f7a:	b29a      	uxth	r2, r3
 8103f7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103f7e:	4313      	orrs	r3, r2
 8103f80:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	681b      	ldr	r3, [r3, #0]
 8103f86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8103f88:	60da      	str	r2, [r3, #12]
 8103f8a:	e0f2      	b.n	8104172 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8103f8c:	2301      	movs	r3, #1
 8103f8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8103f92:	e0ee      	b.n	8104172 <UART_SetConfig+0xb26>
 8103f94:	08107230 	.word	0x08107230
 8103f98:	58024400 	.word	0x58024400
 8103f9c:	03d09000 	.word	0x03d09000
 8103fa0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8103fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8103fa8:	2b40      	cmp	r3, #64	; 0x40
 8103faa:	f200 80b7 	bhi.w	810411c <UART_SetConfig+0xad0>
 8103fae:	a201      	add	r2, pc, #4	; (adr r2, 8103fb4 <UART_SetConfig+0x968>)
 8103fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fb4:	081040b9 	.word	0x081040b9
 8103fb8:	081040c1 	.word	0x081040c1
 8103fbc:	0810411d 	.word	0x0810411d
 8103fc0:	0810411d 	.word	0x0810411d
 8103fc4:	081040c9 	.word	0x081040c9
 8103fc8:	0810411d 	.word	0x0810411d
 8103fcc:	0810411d 	.word	0x0810411d
 8103fd0:	0810411d 	.word	0x0810411d
 8103fd4:	081040d9 	.word	0x081040d9
 8103fd8:	0810411d 	.word	0x0810411d
 8103fdc:	0810411d 	.word	0x0810411d
 8103fe0:	0810411d 	.word	0x0810411d
 8103fe4:	0810411d 	.word	0x0810411d
 8103fe8:	0810411d 	.word	0x0810411d
 8103fec:	0810411d 	.word	0x0810411d
 8103ff0:	0810411d 	.word	0x0810411d
 8103ff4:	081040e9 	.word	0x081040e9
 8103ff8:	0810411d 	.word	0x0810411d
 8103ffc:	0810411d 	.word	0x0810411d
 8104000:	0810411d 	.word	0x0810411d
 8104004:	0810411d 	.word	0x0810411d
 8104008:	0810411d 	.word	0x0810411d
 810400c:	0810411d 	.word	0x0810411d
 8104010:	0810411d 	.word	0x0810411d
 8104014:	0810411d 	.word	0x0810411d
 8104018:	0810411d 	.word	0x0810411d
 810401c:	0810411d 	.word	0x0810411d
 8104020:	0810411d 	.word	0x0810411d
 8104024:	0810411d 	.word	0x0810411d
 8104028:	0810411d 	.word	0x0810411d
 810402c:	0810411d 	.word	0x0810411d
 8104030:	0810411d 	.word	0x0810411d
 8104034:	0810410f 	.word	0x0810410f
 8104038:	0810411d 	.word	0x0810411d
 810403c:	0810411d 	.word	0x0810411d
 8104040:	0810411d 	.word	0x0810411d
 8104044:	0810411d 	.word	0x0810411d
 8104048:	0810411d 	.word	0x0810411d
 810404c:	0810411d 	.word	0x0810411d
 8104050:	0810411d 	.word	0x0810411d
 8104054:	0810411d 	.word	0x0810411d
 8104058:	0810411d 	.word	0x0810411d
 810405c:	0810411d 	.word	0x0810411d
 8104060:	0810411d 	.word	0x0810411d
 8104064:	0810411d 	.word	0x0810411d
 8104068:	0810411d 	.word	0x0810411d
 810406c:	0810411d 	.word	0x0810411d
 8104070:	0810411d 	.word	0x0810411d
 8104074:	0810411d 	.word	0x0810411d
 8104078:	0810411d 	.word	0x0810411d
 810407c:	0810411d 	.word	0x0810411d
 8104080:	0810411d 	.word	0x0810411d
 8104084:	0810411d 	.word	0x0810411d
 8104088:	0810411d 	.word	0x0810411d
 810408c:	0810411d 	.word	0x0810411d
 8104090:	0810411d 	.word	0x0810411d
 8104094:	0810411d 	.word	0x0810411d
 8104098:	0810411d 	.word	0x0810411d
 810409c:	0810411d 	.word	0x0810411d
 81040a0:	0810411d 	.word	0x0810411d
 81040a4:	0810411d 	.word	0x0810411d
 81040a8:	0810411d 	.word	0x0810411d
 81040ac:	0810411d 	.word	0x0810411d
 81040b0:	0810411d 	.word	0x0810411d
 81040b4:	08104115 	.word	0x08104115
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81040b8:	f7fd fd24 	bl	8101b04 <HAL_RCC_GetPCLK1Freq>
 81040bc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81040be:	e033      	b.n	8104128 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81040c0:	f7fd fd36 	bl	8101b30 <HAL_RCC_GetPCLK2Freq>
 81040c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81040c6:	e02f      	b.n	8104128 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81040c8:	f107 0314 	add.w	r3, r7, #20
 81040cc:	4618      	mov	r0, r3
 81040ce:	f7fd fd9d 	bl	8101c0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81040d2:	69bb      	ldr	r3, [r7, #24]
 81040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81040d6:	e027      	b.n	8104128 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81040d8:	f107 0308 	add.w	r3, r7, #8
 81040dc:	4618      	mov	r0, r3
 81040de:	f7fd fee1 	bl	8101ea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81040e2:	68fb      	ldr	r3, [r7, #12]
 81040e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81040e6:	e01f      	b.n	8104128 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81040e8:	4b2c      	ldr	r3, [pc, #176]	; (810419c <UART_SetConfig+0xb50>)
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	f003 0320 	and.w	r3, r3, #32
 81040f0:	2b00      	cmp	r3, #0
 81040f2:	d009      	beq.n	8104108 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81040f4:	4b29      	ldr	r3, [pc, #164]	; (810419c <UART_SetConfig+0xb50>)
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	08db      	lsrs	r3, r3, #3
 81040fa:	f003 0303 	and.w	r3, r3, #3
 81040fe:	4a28      	ldr	r2, [pc, #160]	; (81041a0 <UART_SetConfig+0xb54>)
 8104100:	fa22 f303 	lsr.w	r3, r2, r3
 8104104:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104106:	e00f      	b.n	8104128 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8104108:	4b25      	ldr	r3, [pc, #148]	; (81041a0 <UART_SetConfig+0xb54>)
 810410a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810410c:	e00c      	b.n	8104128 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810410e:	4b25      	ldr	r3, [pc, #148]	; (81041a4 <UART_SetConfig+0xb58>)
 8104110:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104112:	e009      	b.n	8104128 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810411a:	e005      	b.n	8104128 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 810411c:	2300      	movs	r3, #0
 810411e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8104120:	2301      	movs	r3, #1
 8104122:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8104126:	bf00      	nop
    }

    if (pclk != 0U)
 8104128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810412a:	2b00      	cmp	r3, #0
 810412c:	d021      	beq.n	8104172 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810412e:	687b      	ldr	r3, [r7, #4]
 8104130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104132:	4a1d      	ldr	r2, [pc, #116]	; (81041a8 <UART_SetConfig+0xb5c>)
 8104134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104138:	461a      	mov	r2, r3
 810413a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810413c:	fbb3 f2f2 	udiv	r2, r3, r2
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	685b      	ldr	r3, [r3, #4]
 8104144:	085b      	lsrs	r3, r3, #1
 8104146:	441a      	add	r2, r3
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	685b      	ldr	r3, [r3, #4]
 810414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8104150:	b29b      	uxth	r3, r3
 8104152:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104156:	2b0f      	cmp	r3, #15
 8104158:	d908      	bls.n	810416c <UART_SetConfig+0xb20>
 810415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810415c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104160:	d204      	bcs.n	810416c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8104162:	687b      	ldr	r3, [r7, #4]
 8104164:	681b      	ldr	r3, [r3, #0]
 8104166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104168:	60da      	str	r2, [r3, #12]
 810416a:	e002      	b.n	8104172 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 810416c:	2301      	movs	r3, #1
 810416e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8104172:	687b      	ldr	r3, [r7, #4]
 8104174:	2201      	movs	r2, #1
 8104176:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	2201      	movs	r2, #1
 810417e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	2200      	movs	r2, #0
 8104186:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8104188:	687b      	ldr	r3, [r7, #4]
 810418a:	2200      	movs	r2, #0
 810418c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 810418e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8104192:	4618      	mov	r0, r3
 8104194:	3738      	adds	r7, #56	; 0x38
 8104196:	46bd      	mov	sp, r7
 8104198:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 810419c:	58024400 	.word	0x58024400
 81041a0:	03d09000 	.word	0x03d09000
 81041a4:	003d0900 	.word	0x003d0900
 81041a8:	08107230 	.word	0x08107230

081041ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81041ac:	b480      	push	{r7}
 81041ae:	b083      	sub	sp, #12
 81041b0:	af00      	add	r7, sp, #0
 81041b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81041b4:	687b      	ldr	r3, [r7, #4]
 81041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041b8:	f003 0301 	and.w	r3, r3, #1
 81041bc:	2b00      	cmp	r3, #0
 81041be:	d00a      	beq.n	81041d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	681b      	ldr	r3, [r3, #0]
 81041c4:	685b      	ldr	r3, [r3, #4]
 81041c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	430a      	orrs	r2, r1
 81041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041da:	f003 0302 	and.w	r3, r3, #2
 81041de:	2b00      	cmp	r3, #0
 81041e0:	d00a      	beq.n	81041f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81041e2:	687b      	ldr	r3, [r7, #4]
 81041e4:	681b      	ldr	r3, [r3, #0]
 81041e6:	685b      	ldr	r3, [r3, #4]
 81041e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81041f0:	687b      	ldr	r3, [r7, #4]
 81041f2:	681b      	ldr	r3, [r3, #0]
 81041f4:	430a      	orrs	r2, r1
 81041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041fc:	f003 0304 	and.w	r3, r3, #4
 8104200:	2b00      	cmp	r3, #0
 8104202:	d00a      	beq.n	810421a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	685b      	ldr	r3, [r3, #4]
 810420a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	430a      	orrs	r2, r1
 8104218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810421e:	f003 0308 	and.w	r3, r3, #8
 8104222:	2b00      	cmp	r3, #0
 8104224:	d00a      	beq.n	810423c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	685b      	ldr	r3, [r3, #4]
 810422c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	681b      	ldr	r3, [r3, #0]
 8104238:	430a      	orrs	r2, r1
 810423a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104240:	f003 0310 	and.w	r3, r3, #16
 8104244:	2b00      	cmp	r3, #0
 8104246:	d00a      	beq.n	810425e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	681b      	ldr	r3, [r3, #0]
 810424c:	689b      	ldr	r3, [r3, #8]
 810424e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8104256:	687b      	ldr	r3, [r7, #4]
 8104258:	681b      	ldr	r3, [r3, #0]
 810425a:	430a      	orrs	r2, r1
 810425c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104262:	f003 0320 	and.w	r3, r3, #32
 8104266:	2b00      	cmp	r3, #0
 8104268:	d00a      	beq.n	8104280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810426a:	687b      	ldr	r3, [r7, #4]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	689b      	ldr	r3, [r3, #8]
 8104270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8104278:	687b      	ldr	r3, [r7, #4]
 810427a:	681b      	ldr	r3, [r3, #0]
 810427c:	430a      	orrs	r2, r1
 810427e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104288:	2b00      	cmp	r3, #0
 810428a:	d01a      	beq.n	81042c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810428c:	687b      	ldr	r3, [r7, #4]
 810428e:	681b      	ldr	r3, [r3, #0]
 8104290:	685b      	ldr	r3, [r3, #4]
 8104292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8104296:	687b      	ldr	r3, [r7, #4]
 8104298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	430a      	orrs	r2, r1
 81042a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81042a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81042aa:	d10a      	bne.n	81042c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	681b      	ldr	r3, [r3, #0]
 81042b0:	685b      	ldr	r3, [r3, #4]
 81042b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	681b      	ldr	r3, [r3, #0]
 81042be:	430a      	orrs	r2, r1
 81042c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81042c2:	687b      	ldr	r3, [r7, #4]
 81042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81042ca:	2b00      	cmp	r3, #0
 81042cc:	d00a      	beq.n	81042e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81042ce:	687b      	ldr	r3, [r7, #4]
 81042d0:	681b      	ldr	r3, [r3, #0]
 81042d2:	685b      	ldr	r3, [r3, #4]
 81042d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81042d8:	687b      	ldr	r3, [r7, #4]
 81042da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81042dc:	687b      	ldr	r3, [r7, #4]
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	430a      	orrs	r2, r1
 81042e2:	605a      	str	r2, [r3, #4]
  }
}
 81042e4:	bf00      	nop
 81042e6:	370c      	adds	r7, #12
 81042e8:	46bd      	mov	sp, r7
 81042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042ee:	4770      	bx	lr

081042f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81042f0:	b580      	push	{r7, lr}
 81042f2:	b086      	sub	sp, #24
 81042f4:	af02      	add	r7, sp, #8
 81042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	2200      	movs	r2, #0
 81042fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8104300:	f7fc fed8 	bl	81010b4 <HAL_GetTick>
 8104304:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	681b      	ldr	r3, [r3, #0]
 810430c:	f003 0308 	and.w	r3, r3, #8
 8104310:	2b08      	cmp	r3, #8
 8104312:	d10e      	bne.n	8104332 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8104318:	9300      	str	r3, [sp, #0]
 810431a:	68fb      	ldr	r3, [r7, #12]
 810431c:	2200      	movs	r2, #0
 810431e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8104322:	6878      	ldr	r0, [r7, #4]
 8104324:	f000 f82c 	bl	8104380 <UART_WaitOnFlagUntilTimeout>
 8104328:	4603      	mov	r3, r0
 810432a:	2b00      	cmp	r3, #0
 810432c:	d001      	beq.n	8104332 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810432e:	2303      	movs	r3, #3
 8104330:	e022      	b.n	8104378 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	681b      	ldr	r3, [r3, #0]
 8104336:	681b      	ldr	r3, [r3, #0]
 8104338:	f003 0304 	and.w	r3, r3, #4
 810433c:	2b04      	cmp	r3, #4
 810433e:	d10e      	bne.n	810435e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8104340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8104344:	9300      	str	r3, [sp, #0]
 8104346:	68fb      	ldr	r3, [r7, #12]
 8104348:	2200      	movs	r2, #0
 810434a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810434e:	6878      	ldr	r0, [r7, #4]
 8104350:	f000 f816 	bl	8104380 <UART_WaitOnFlagUntilTimeout>
 8104354:	4603      	mov	r3, r0
 8104356:	2b00      	cmp	r3, #0
 8104358:	d001      	beq.n	810435e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810435a:	2303      	movs	r3, #3
 810435c:	e00c      	b.n	8104378 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810435e:	687b      	ldr	r3, [r7, #4]
 8104360:	2220      	movs	r2, #32
 8104362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	2220      	movs	r2, #32
 810436a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	2200      	movs	r2, #0
 8104372:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8104376:	2300      	movs	r3, #0
}
 8104378:	4618      	mov	r0, r3
 810437a:	3710      	adds	r7, #16
 810437c:	46bd      	mov	sp, r7
 810437e:	bd80      	pop	{r7, pc}

08104380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8104380:	b580      	push	{r7, lr}
 8104382:	b084      	sub	sp, #16
 8104384:	af00      	add	r7, sp, #0
 8104386:	60f8      	str	r0, [r7, #12]
 8104388:	60b9      	str	r1, [r7, #8]
 810438a:	603b      	str	r3, [r7, #0]
 810438c:	4613      	mov	r3, r2
 810438e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104390:	e062      	b.n	8104458 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8104392:	69bb      	ldr	r3, [r7, #24]
 8104394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104398:	d05e      	beq.n	8104458 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810439a:	f7fc fe8b 	bl	81010b4 <HAL_GetTick>
 810439e:	4602      	mov	r2, r0
 81043a0:	683b      	ldr	r3, [r7, #0]
 81043a2:	1ad3      	subs	r3, r2, r3
 81043a4:	69ba      	ldr	r2, [r7, #24]
 81043a6:	429a      	cmp	r2, r3
 81043a8:	d302      	bcc.n	81043b0 <UART_WaitOnFlagUntilTimeout+0x30>
 81043aa:	69bb      	ldr	r3, [r7, #24]
 81043ac:	2b00      	cmp	r3, #0
 81043ae:	d11d      	bne.n	81043ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 81043b0:	68fb      	ldr	r3, [r7, #12]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	681a      	ldr	r2, [r3, #0]
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 81043be:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81043c0:	68fb      	ldr	r3, [r7, #12]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	689a      	ldr	r2, [r3, #8]
 81043c6:	68fb      	ldr	r3, [r7, #12]
 81043c8:	681b      	ldr	r3, [r3, #0]
 81043ca:	f022 0201 	bic.w	r2, r2, #1
 81043ce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 81043d0:	68fb      	ldr	r3, [r7, #12]
 81043d2:	2220      	movs	r2, #32
 81043d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 81043d8:	68fb      	ldr	r3, [r7, #12]
 81043da:	2220      	movs	r2, #32
 81043dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	2200      	movs	r2, #0
 81043e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 81043e8:	2303      	movs	r3, #3
 81043ea:	e045      	b.n	8104478 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81043ec:	68fb      	ldr	r3, [r7, #12]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	681b      	ldr	r3, [r3, #0]
 81043f2:	f003 0304 	and.w	r3, r3, #4
 81043f6:	2b00      	cmp	r3, #0
 81043f8:	d02e      	beq.n	8104458 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	69db      	ldr	r3, [r3, #28]
 8104400:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8104404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104408:	d126      	bne.n	8104458 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810440a:	68fb      	ldr	r3, [r7, #12]
 810440c:	681b      	ldr	r3, [r3, #0]
 810440e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104412:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	681a      	ldr	r2, [r3, #0]
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	681b      	ldr	r3, [r3, #0]
 810441e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8104422:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	681b      	ldr	r3, [r3, #0]
 8104428:	689a      	ldr	r2, [r3, #8]
 810442a:	68fb      	ldr	r3, [r7, #12]
 810442c:	681b      	ldr	r3, [r3, #0]
 810442e:	f022 0201 	bic.w	r2, r2, #1
 8104432:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	2220      	movs	r2, #32
 8104438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 810443c:	68fb      	ldr	r3, [r7, #12]
 810443e:	2220      	movs	r2, #32
 8104440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	2220      	movs	r2, #32
 8104448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810444c:	68fb      	ldr	r3, [r7, #12]
 810444e:	2200      	movs	r2, #0
 8104450:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8104454:	2303      	movs	r3, #3
 8104456:	e00f      	b.n	8104478 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8104458:	68fb      	ldr	r3, [r7, #12]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	69da      	ldr	r2, [r3, #28]
 810445e:	68bb      	ldr	r3, [r7, #8]
 8104460:	4013      	ands	r3, r2
 8104462:	68ba      	ldr	r2, [r7, #8]
 8104464:	429a      	cmp	r2, r3
 8104466:	bf0c      	ite	eq
 8104468:	2301      	moveq	r3, #1
 810446a:	2300      	movne	r3, #0
 810446c:	b2db      	uxtb	r3, r3
 810446e:	461a      	mov	r2, r3
 8104470:	79fb      	ldrb	r3, [r7, #7]
 8104472:	429a      	cmp	r2, r3
 8104474:	d08d      	beq.n	8104392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8104476:	2300      	movs	r3, #0
}
 8104478:	4618      	mov	r0, r3
 810447a:	3710      	adds	r7, #16
 810447c:	46bd      	mov	sp, r7
 810447e:	bd80      	pop	{r7, pc}

08104480 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8104480:	b480      	push	{r7}
 8104482:	b085      	sub	sp, #20
 8104484:	af00      	add	r7, sp, #0
 8104486:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810448e:	2b01      	cmp	r3, #1
 8104490:	d101      	bne.n	8104496 <HAL_UARTEx_DisableFifoMode+0x16>
 8104492:	2302      	movs	r3, #2
 8104494:	e027      	b.n	81044e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	2201      	movs	r2, #1
 810449a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	2224      	movs	r2, #36	; 0x24
 81044a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	681b      	ldr	r3, [r3, #0]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	681a      	ldr	r2, [r3, #0]
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	681b      	ldr	r3, [r3, #0]
 81044b8:	f022 0201 	bic.w	r2, r2, #1
 81044bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81044be:	68fb      	ldr	r3, [r7, #12]
 81044c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81044c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81044c6:	687b      	ldr	r3, [r7, #4]
 81044c8:	2200      	movs	r2, #0
 81044ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	68fa      	ldr	r2, [r7, #12]
 81044d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	2220      	movs	r2, #32
 81044d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	2200      	movs	r2, #0
 81044e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81044e4:	2300      	movs	r3, #0
}
 81044e6:	4618      	mov	r0, r3
 81044e8:	3714      	adds	r7, #20
 81044ea:	46bd      	mov	sp, r7
 81044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044f0:	4770      	bx	lr

081044f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81044f2:	b580      	push	{r7, lr}
 81044f4:	b084      	sub	sp, #16
 81044f6:	af00      	add	r7, sp, #0
 81044f8:	6078      	str	r0, [r7, #4]
 81044fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8104502:	2b01      	cmp	r3, #1
 8104504:	d101      	bne.n	810450a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8104506:	2302      	movs	r3, #2
 8104508:	e02d      	b.n	8104566 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	2201      	movs	r2, #1
 810450e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	2224      	movs	r2, #36	; 0x24
 8104516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	681a      	ldr	r2, [r3, #0]
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	681b      	ldr	r3, [r3, #0]
 810452c:	f022 0201 	bic.w	r2, r2, #1
 8104530:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	689b      	ldr	r3, [r3, #8]
 8104538:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	683a      	ldr	r2, [r7, #0]
 8104542:	430a      	orrs	r2, r1
 8104544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104546:	6878      	ldr	r0, [r7, #4]
 8104548:	f000 f850 	bl	81045ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	68fa      	ldr	r2, [r7, #12]
 8104552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104554:	687b      	ldr	r3, [r7, #4]
 8104556:	2220      	movs	r2, #32
 8104558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	2200      	movs	r2, #0
 8104560:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8104564:	2300      	movs	r3, #0
}
 8104566:	4618      	mov	r0, r3
 8104568:	3710      	adds	r7, #16
 810456a:	46bd      	mov	sp, r7
 810456c:	bd80      	pop	{r7, pc}

0810456e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810456e:	b580      	push	{r7, lr}
 8104570:	b084      	sub	sp, #16
 8104572:	af00      	add	r7, sp, #0
 8104574:	6078      	str	r0, [r7, #4]
 8104576:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810457e:	2b01      	cmp	r3, #1
 8104580:	d101      	bne.n	8104586 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8104582:	2302      	movs	r3, #2
 8104584:	e02d      	b.n	81045e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	2201      	movs	r2, #1
 810458a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 810458e:	687b      	ldr	r3, [r7, #4]
 8104590:	2224      	movs	r2, #36	; 0x24
 8104592:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	681b      	ldr	r3, [r3, #0]
 810459c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	681b      	ldr	r3, [r3, #0]
 81045a2:	681a      	ldr	r2, [r3, #0]
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	681b      	ldr	r3, [r3, #0]
 81045a8:	f022 0201 	bic.w	r2, r2, #1
 81045ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	689b      	ldr	r3, [r3, #8]
 81045b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	683a      	ldr	r2, [r7, #0]
 81045be:	430a      	orrs	r2, r1
 81045c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81045c2:	6878      	ldr	r0, [r7, #4]
 81045c4:	f000 f812 	bl	81045ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	68fa      	ldr	r2, [r7, #12]
 81045ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	2220      	movs	r2, #32
 81045d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	2200      	movs	r2, #0
 81045dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 81045e0:	2300      	movs	r3, #0
}
 81045e2:	4618      	mov	r0, r3
 81045e4:	3710      	adds	r7, #16
 81045e6:	46bd      	mov	sp, r7
 81045e8:	bd80      	pop	{r7, pc}
	...

081045ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81045ec:	b480      	push	{r7}
 81045ee:	b089      	sub	sp, #36	; 0x24
 81045f0:	af00      	add	r7, sp, #0
 81045f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 81045f4:	4a2f      	ldr	r2, [pc, #188]	; (81046b4 <UARTEx_SetNbDataToProcess+0xc8>)
 81045f6:	f107 0314 	add.w	r3, r7, #20
 81045fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 81045fe:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8104602:	4a2d      	ldr	r2, [pc, #180]	; (81046b8 <UARTEx_SetNbDataToProcess+0xcc>)
 8104604:	f107 030c 	add.w	r3, r7, #12
 8104608:	e892 0003 	ldmia.w	r2, {r0, r1}
 810460c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8104610:	687b      	ldr	r3, [r7, #4]
 8104612:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104614:	2b00      	cmp	r3, #0
 8104616:	d108      	bne.n	810462a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	2201      	movs	r2, #1
 810461c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	2201      	movs	r2, #1
 8104624:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8104628:	e03d      	b.n	81046a6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810462a:	2310      	movs	r3, #16
 810462c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810462e:	2310      	movs	r3, #16
 8104630:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	681b      	ldr	r3, [r3, #0]
 8104636:	689b      	ldr	r3, [r3, #8]
 8104638:	0e5b      	lsrs	r3, r3, #25
 810463a:	b2db      	uxtb	r3, r3
 810463c:	f003 0307 	and.w	r3, r3, #7
 8104640:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	689b      	ldr	r3, [r3, #8]
 8104648:	0f5b      	lsrs	r3, r3, #29
 810464a:	b2db      	uxtb	r3, r3
 810464c:	f003 0307 	and.w	r3, r3, #7
 8104650:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8104652:	7fbb      	ldrb	r3, [r7, #30]
 8104654:	7f3a      	ldrb	r2, [r7, #28]
 8104656:	f107 0120 	add.w	r1, r7, #32
 810465a:	440a      	add	r2, r1
 810465c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8104660:	fb02 f303 	mul.w	r3, r2, r3
 8104664:	7f3a      	ldrb	r2, [r7, #28]
 8104666:	f107 0120 	add.w	r1, r7, #32
 810466a:	440a      	add	r2, r1
 810466c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8104670:	fb93 f3f2 	sdiv	r3, r3, r2
 8104674:	b29a      	uxth	r2, r3
 8104676:	687b      	ldr	r3, [r7, #4]
 8104678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 810467c:	7ffb      	ldrb	r3, [r7, #31]
 810467e:	7f7a      	ldrb	r2, [r7, #29]
 8104680:	f107 0120 	add.w	r1, r7, #32
 8104684:	440a      	add	r2, r1
 8104686:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 810468a:	fb02 f303 	mul.w	r3, r2, r3
 810468e:	7f7a      	ldrb	r2, [r7, #29]
 8104690:	f107 0120 	add.w	r1, r7, #32
 8104694:	440a      	add	r2, r1
 8104696:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 810469a:	fb93 f3f2 	sdiv	r3, r3, r2
 810469e:	b29a      	uxth	r2, r3
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81046a6:	bf00      	nop
 81046a8:	3724      	adds	r7, #36	; 0x24
 81046aa:	46bd      	mov	sp, r7
 81046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046b0:	4770      	bx	lr
 81046b2:	bf00      	nop
 81046b4:	081071d4 	.word	0x081071d4
 81046b8:	081071dc 	.word	0x081071dc

081046bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 81046bc:	b480      	push	{r7}
 81046be:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 81046c0:	bf00      	nop
 81046c2:	46bd      	mov	sp, r7
 81046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046c8:	4770      	bx	lr
	...

081046cc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 81046cc:	b480      	push	{r7}
 81046ce:	b085      	sub	sp, #20
 81046d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81046d2:	f3ef 8305 	mrs	r3, IPSR
 81046d6:	60bb      	str	r3, [r7, #8]
  return(result);
 81046d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 81046da:	2b00      	cmp	r3, #0
 81046dc:	d10f      	bne.n	81046fe <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81046de:	f3ef 8310 	mrs	r3, PRIMASK
 81046e2:	607b      	str	r3, [r7, #4]
  return(result);
 81046e4:	687b      	ldr	r3, [r7, #4]
 81046e6:	2b00      	cmp	r3, #0
 81046e8:	d105      	bne.n	81046f6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81046ea:	f3ef 8311 	mrs	r3, BASEPRI
 81046ee:	603b      	str	r3, [r7, #0]
  return(result);
 81046f0:	683b      	ldr	r3, [r7, #0]
 81046f2:	2b00      	cmp	r3, #0
 81046f4:	d007      	beq.n	8104706 <osKernelInitialize+0x3a>
 81046f6:	4b0e      	ldr	r3, [pc, #56]	; (8104730 <osKernelInitialize+0x64>)
 81046f8:	681b      	ldr	r3, [r3, #0]
 81046fa:	2b02      	cmp	r3, #2
 81046fc:	d103      	bne.n	8104706 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 81046fe:	f06f 0305 	mvn.w	r3, #5
 8104702:	60fb      	str	r3, [r7, #12]
 8104704:	e00c      	b.n	8104720 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8104706:	4b0a      	ldr	r3, [pc, #40]	; (8104730 <osKernelInitialize+0x64>)
 8104708:	681b      	ldr	r3, [r3, #0]
 810470a:	2b00      	cmp	r3, #0
 810470c:	d105      	bne.n	810471a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810470e:	4b08      	ldr	r3, [pc, #32]	; (8104730 <osKernelInitialize+0x64>)
 8104710:	2201      	movs	r2, #1
 8104712:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8104714:	2300      	movs	r3, #0
 8104716:	60fb      	str	r3, [r7, #12]
 8104718:	e002      	b.n	8104720 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 810471a:	f04f 33ff 	mov.w	r3, #4294967295
 810471e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8104720:	68fb      	ldr	r3, [r7, #12]
}
 8104722:	4618      	mov	r0, r3
 8104724:	3714      	adds	r7, #20
 8104726:	46bd      	mov	sp, r7
 8104728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810472c:	4770      	bx	lr
 810472e:	bf00      	nop
 8104730:	1000002c 	.word	0x1000002c

08104734 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8104734:	b580      	push	{r7, lr}
 8104736:	b084      	sub	sp, #16
 8104738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810473a:	f3ef 8305 	mrs	r3, IPSR
 810473e:	60bb      	str	r3, [r7, #8]
  return(result);
 8104740:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8104742:	2b00      	cmp	r3, #0
 8104744:	d10f      	bne.n	8104766 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8104746:	f3ef 8310 	mrs	r3, PRIMASK
 810474a:	607b      	str	r3, [r7, #4]
  return(result);
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	2b00      	cmp	r3, #0
 8104750:	d105      	bne.n	810475e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8104752:	f3ef 8311 	mrs	r3, BASEPRI
 8104756:	603b      	str	r3, [r7, #0]
  return(result);
 8104758:	683b      	ldr	r3, [r7, #0]
 810475a:	2b00      	cmp	r3, #0
 810475c:	d007      	beq.n	810476e <osKernelStart+0x3a>
 810475e:	4b0f      	ldr	r3, [pc, #60]	; (810479c <osKernelStart+0x68>)
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	2b02      	cmp	r3, #2
 8104764:	d103      	bne.n	810476e <osKernelStart+0x3a>
    stat = osErrorISR;
 8104766:	f06f 0305 	mvn.w	r3, #5
 810476a:	60fb      	str	r3, [r7, #12]
 810476c:	e010      	b.n	8104790 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 810476e:	4b0b      	ldr	r3, [pc, #44]	; (810479c <osKernelStart+0x68>)
 8104770:	681b      	ldr	r3, [r3, #0]
 8104772:	2b01      	cmp	r3, #1
 8104774:	d109      	bne.n	810478a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8104776:	f7ff ffa1 	bl	81046bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810477a:	4b08      	ldr	r3, [pc, #32]	; (810479c <osKernelStart+0x68>)
 810477c:	2202      	movs	r2, #2
 810477e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8104780:	f001 fc84 	bl	810608c <vTaskStartScheduler>
      stat = osOK;
 8104784:	2300      	movs	r3, #0
 8104786:	60fb      	str	r3, [r7, #12]
 8104788:	e002      	b.n	8104790 <osKernelStart+0x5c>
    } else {
      stat = osError;
 810478a:	f04f 33ff 	mov.w	r3, #4294967295
 810478e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8104790:	68fb      	ldr	r3, [r7, #12]
}
 8104792:	4618      	mov	r0, r3
 8104794:	3710      	adds	r7, #16
 8104796:	46bd      	mov	sp, r7
 8104798:	bd80      	pop	{r7, pc}
 810479a:	bf00      	nop
 810479c:	1000002c 	.word	0x1000002c

081047a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 81047a0:	b580      	push	{r7, lr}
 81047a2:	b090      	sub	sp, #64	; 0x40
 81047a4:	af04      	add	r7, sp, #16
 81047a6:	60f8      	str	r0, [r7, #12]
 81047a8:	60b9      	str	r1, [r7, #8]
 81047aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 81047ac:	2300      	movs	r3, #0
 81047ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81047b0:	f3ef 8305 	mrs	r3, IPSR
 81047b4:	61fb      	str	r3, [r7, #28]
  return(result);
 81047b6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 81047b8:	2b00      	cmp	r3, #0
 81047ba:	f040 808f 	bne.w	81048dc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 81047be:	f3ef 8310 	mrs	r3, PRIMASK
 81047c2:	61bb      	str	r3, [r7, #24]
  return(result);
 81047c4:	69bb      	ldr	r3, [r7, #24]
 81047c6:	2b00      	cmp	r3, #0
 81047c8:	d105      	bne.n	81047d6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 81047ca:	f3ef 8311 	mrs	r3, BASEPRI
 81047ce:	617b      	str	r3, [r7, #20]
  return(result);
 81047d0:	697b      	ldr	r3, [r7, #20]
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d003      	beq.n	81047de <osThreadNew+0x3e>
 81047d6:	4b44      	ldr	r3, [pc, #272]	; (81048e8 <osThreadNew+0x148>)
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	2b02      	cmp	r3, #2
 81047dc:	d07e      	beq.n	81048dc <osThreadNew+0x13c>
 81047de:	68fb      	ldr	r3, [r7, #12]
 81047e0:	2b00      	cmp	r3, #0
 81047e2:	d07b      	beq.n	81048dc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 81047e4:	2380      	movs	r3, #128	; 0x80
 81047e6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 81047e8:	2318      	movs	r3, #24
 81047ea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 81047ec:	2300      	movs	r3, #0
 81047ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 81047f0:	f04f 33ff 	mov.w	r3, #4294967295
 81047f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	2b00      	cmp	r3, #0
 81047fa:	d045      	beq.n	8104888 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 81047fc:	687b      	ldr	r3, [r7, #4]
 81047fe:	681b      	ldr	r3, [r3, #0]
 8104800:	2b00      	cmp	r3, #0
 8104802:	d002      	beq.n	810480a <osThreadNew+0x6a>
        name = attr->name;
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 810480a:	687b      	ldr	r3, [r7, #4]
 810480c:	699b      	ldr	r3, [r3, #24]
 810480e:	2b00      	cmp	r3, #0
 8104810:	d002      	beq.n	8104818 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	699b      	ldr	r3, [r3, #24]
 8104816:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8104818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810481a:	2b00      	cmp	r3, #0
 810481c:	d008      	beq.n	8104830 <osThreadNew+0x90>
 810481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104820:	2b38      	cmp	r3, #56	; 0x38
 8104822:	d805      	bhi.n	8104830 <osThreadNew+0x90>
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	685b      	ldr	r3, [r3, #4]
 8104828:	f003 0301 	and.w	r3, r3, #1
 810482c:	2b00      	cmp	r3, #0
 810482e:	d001      	beq.n	8104834 <osThreadNew+0x94>
        return (NULL);
 8104830:	2300      	movs	r3, #0
 8104832:	e054      	b.n	81048de <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	695b      	ldr	r3, [r3, #20]
 8104838:	2b00      	cmp	r3, #0
 810483a:	d003      	beq.n	8104844 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	695b      	ldr	r3, [r3, #20]
 8104840:	089b      	lsrs	r3, r3, #2
 8104842:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8104844:	687b      	ldr	r3, [r7, #4]
 8104846:	689b      	ldr	r3, [r3, #8]
 8104848:	2b00      	cmp	r3, #0
 810484a:	d00e      	beq.n	810486a <osThreadNew+0xca>
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	68db      	ldr	r3, [r3, #12]
 8104850:	2b5b      	cmp	r3, #91	; 0x5b
 8104852:	d90a      	bls.n	810486a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8104858:	2b00      	cmp	r3, #0
 810485a:	d006      	beq.n	810486a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	695b      	ldr	r3, [r3, #20]
 8104860:	2b00      	cmp	r3, #0
 8104862:	d002      	beq.n	810486a <osThreadNew+0xca>
        mem = 1;
 8104864:	2301      	movs	r3, #1
 8104866:	623b      	str	r3, [r7, #32]
 8104868:	e010      	b.n	810488c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810486a:	687b      	ldr	r3, [r7, #4]
 810486c:	689b      	ldr	r3, [r3, #8]
 810486e:	2b00      	cmp	r3, #0
 8104870:	d10c      	bne.n	810488c <osThreadNew+0xec>
 8104872:	687b      	ldr	r3, [r7, #4]
 8104874:	68db      	ldr	r3, [r3, #12]
 8104876:	2b00      	cmp	r3, #0
 8104878:	d108      	bne.n	810488c <osThreadNew+0xec>
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	691b      	ldr	r3, [r3, #16]
 810487e:	2b00      	cmp	r3, #0
 8104880:	d104      	bne.n	810488c <osThreadNew+0xec>
          mem = 0;
 8104882:	2300      	movs	r3, #0
 8104884:	623b      	str	r3, [r7, #32]
 8104886:	e001      	b.n	810488c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8104888:	2300      	movs	r3, #0
 810488a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 810488c:	6a3b      	ldr	r3, [r7, #32]
 810488e:	2b01      	cmp	r3, #1
 8104890:	d110      	bne.n	81048b4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8104896:	687a      	ldr	r2, [r7, #4]
 8104898:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810489a:	9202      	str	r2, [sp, #8]
 810489c:	9301      	str	r3, [sp, #4]
 810489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81048a0:	9300      	str	r3, [sp, #0]
 81048a2:	68bb      	ldr	r3, [r7, #8]
 81048a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81048a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81048a8:	68f8      	ldr	r0, [r7, #12]
 81048aa:	f001 fa1d 	bl	8105ce8 <xTaskCreateStatic>
 81048ae:	4603      	mov	r3, r0
 81048b0:	613b      	str	r3, [r7, #16]
 81048b2:	e013      	b.n	81048dc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 81048b4:	6a3b      	ldr	r3, [r7, #32]
 81048b6:	2b00      	cmp	r3, #0
 81048b8:	d110      	bne.n	81048dc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 81048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81048bc:	b29a      	uxth	r2, r3
 81048be:	f107 0310 	add.w	r3, r7, #16
 81048c2:	9301      	str	r3, [sp, #4]
 81048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81048c6:	9300      	str	r3, [sp, #0]
 81048c8:	68bb      	ldr	r3, [r7, #8]
 81048ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81048cc:	68f8      	ldr	r0, [r7, #12]
 81048ce:	f001 fa65 	bl	8105d9c <xTaskCreate>
 81048d2:	4603      	mov	r3, r0
 81048d4:	2b01      	cmp	r3, #1
 81048d6:	d001      	beq.n	81048dc <osThreadNew+0x13c>
          hTask = NULL;
 81048d8:	2300      	movs	r3, #0
 81048da:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 81048dc:	693b      	ldr	r3, [r7, #16]
}
 81048de:	4618      	mov	r0, r3
 81048e0:	3730      	adds	r7, #48	; 0x30
 81048e2:	46bd      	mov	sp, r7
 81048e4:	bd80      	pop	{r7, pc}
 81048e6:	bf00      	nop
 81048e8:	1000002c 	.word	0x1000002c

081048ec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 81048ec:	b580      	push	{r7, lr}
 81048ee:	b086      	sub	sp, #24
 81048f0:	af00      	add	r7, sp, #0
 81048f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 81048f4:	f3ef 8305 	mrs	r3, IPSR
 81048f8:	613b      	str	r3, [r7, #16]
  return(result);
 81048fa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 81048fc:	2b00      	cmp	r3, #0
 81048fe:	d10f      	bne.n	8104920 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8104900:	f3ef 8310 	mrs	r3, PRIMASK
 8104904:	60fb      	str	r3, [r7, #12]
  return(result);
 8104906:	68fb      	ldr	r3, [r7, #12]
 8104908:	2b00      	cmp	r3, #0
 810490a:	d105      	bne.n	8104918 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 810490c:	f3ef 8311 	mrs	r3, BASEPRI
 8104910:	60bb      	str	r3, [r7, #8]
  return(result);
 8104912:	68bb      	ldr	r3, [r7, #8]
 8104914:	2b00      	cmp	r3, #0
 8104916:	d007      	beq.n	8104928 <osDelay+0x3c>
 8104918:	4b0a      	ldr	r3, [pc, #40]	; (8104944 <osDelay+0x58>)
 810491a:	681b      	ldr	r3, [r3, #0]
 810491c:	2b02      	cmp	r3, #2
 810491e:	d103      	bne.n	8104928 <osDelay+0x3c>
    stat = osErrorISR;
 8104920:	f06f 0305 	mvn.w	r3, #5
 8104924:	617b      	str	r3, [r7, #20]
 8104926:	e007      	b.n	8104938 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8104928:	2300      	movs	r3, #0
 810492a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	2b00      	cmp	r3, #0
 8104930:	d002      	beq.n	8104938 <osDelay+0x4c>
      vTaskDelay(ticks);
 8104932:	6878      	ldr	r0, [r7, #4]
 8104934:	f001 fb76 	bl	8106024 <vTaskDelay>
    }
  }

  return (stat);
 8104938:	697b      	ldr	r3, [r7, #20]
}
 810493a:	4618      	mov	r0, r3
 810493c:	3718      	adds	r7, #24
 810493e:	46bd      	mov	sp, r7
 8104940:	bd80      	pop	{r7, pc}
 8104942:	bf00      	nop
 8104944:	1000002c 	.word	0x1000002c

08104948 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8104948:	b480      	push	{r7}
 810494a:	b085      	sub	sp, #20
 810494c:	af00      	add	r7, sp, #0
 810494e:	60f8      	str	r0, [r7, #12]
 8104950:	60b9      	str	r1, [r7, #8]
 8104952:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8104954:	68fb      	ldr	r3, [r7, #12]
 8104956:	4a07      	ldr	r2, [pc, #28]	; (8104974 <vApplicationGetIdleTaskMemory+0x2c>)
 8104958:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810495a:	68bb      	ldr	r3, [r7, #8]
 810495c:	4a06      	ldr	r2, [pc, #24]	; (8104978 <vApplicationGetIdleTaskMemory+0x30>)
 810495e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8104960:	687b      	ldr	r3, [r7, #4]
 8104962:	2280      	movs	r2, #128	; 0x80
 8104964:	601a      	str	r2, [r3, #0]
}
 8104966:	bf00      	nop
 8104968:	3714      	adds	r7, #20
 810496a:	46bd      	mov	sp, r7
 810496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104970:	4770      	bx	lr
 8104972:	bf00      	nop
 8104974:	10000030 	.word	0x10000030
 8104978:	1000008c 	.word	0x1000008c

0810497c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810497c:	b480      	push	{r7}
 810497e:	b085      	sub	sp, #20
 8104980:	af00      	add	r7, sp, #0
 8104982:	60f8      	str	r0, [r7, #12]
 8104984:	60b9      	str	r1, [r7, #8]
 8104986:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8104988:	68fb      	ldr	r3, [r7, #12]
 810498a:	4a07      	ldr	r2, [pc, #28]	; (81049a8 <vApplicationGetTimerTaskMemory+0x2c>)
 810498c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810498e:	68bb      	ldr	r3, [r7, #8]
 8104990:	4a06      	ldr	r2, [pc, #24]	; (81049ac <vApplicationGetTimerTaskMemory+0x30>)
 8104992:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8104994:	687b      	ldr	r3, [r7, #4]
 8104996:	f44f 7280 	mov.w	r2, #256	; 0x100
 810499a:	601a      	str	r2, [r3, #0]
}
 810499c:	bf00      	nop
 810499e:	3714      	adds	r7, #20
 81049a0:	46bd      	mov	sp, r7
 81049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049a6:	4770      	bx	lr
 81049a8:	1000028c 	.word	0x1000028c
 81049ac:	100002e8 	.word	0x100002e8

081049b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 81049b0:	b580      	push	{r7, lr}
 81049b2:	b08a      	sub	sp, #40	; 0x28
 81049b4:	af00      	add	r7, sp, #0
 81049b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 81049b8:	2300      	movs	r3, #0
 81049ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 81049bc:	f001 fbca 	bl	8106154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 81049c0:	4b57      	ldr	r3, [pc, #348]	; (8104b20 <pvPortMalloc+0x170>)
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	2b00      	cmp	r3, #0
 81049c6:	d101      	bne.n	81049cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 81049c8:	f000 f90c 	bl	8104be4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 81049cc:	4b55      	ldr	r3, [pc, #340]	; (8104b24 <pvPortMalloc+0x174>)
 81049ce:	681a      	ldr	r2, [r3, #0]
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	4013      	ands	r3, r2
 81049d4:	2b00      	cmp	r3, #0
 81049d6:	f040 808c 	bne.w	8104af2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 81049da:	687b      	ldr	r3, [r7, #4]
 81049dc:	2b00      	cmp	r3, #0
 81049de:	d01c      	beq.n	8104a1a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 81049e0:	2208      	movs	r2, #8
 81049e2:	687b      	ldr	r3, [r7, #4]
 81049e4:	4413      	add	r3, r2
 81049e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 81049e8:	687b      	ldr	r3, [r7, #4]
 81049ea:	f003 0307 	and.w	r3, r3, #7
 81049ee:	2b00      	cmp	r3, #0
 81049f0:	d013      	beq.n	8104a1a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 81049f2:	687b      	ldr	r3, [r7, #4]
 81049f4:	f023 0307 	bic.w	r3, r3, #7
 81049f8:	3308      	adds	r3, #8
 81049fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 81049fc:	687b      	ldr	r3, [r7, #4]
 81049fe:	f003 0307 	and.w	r3, r3, #7
 8104a02:	2b00      	cmp	r3, #0
 8104a04:	d009      	beq.n	8104a1a <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8104a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a0a:	f383 8811 	msr	BASEPRI, r3
 8104a0e:	f3bf 8f6f 	isb	sy
 8104a12:	f3bf 8f4f 	dsb	sy
 8104a16:	617b      	str	r3, [r7, #20]
 8104a18:	e7fe      	b.n	8104a18 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8104a1a:	687b      	ldr	r3, [r7, #4]
 8104a1c:	2b00      	cmp	r3, #0
 8104a1e:	d068      	beq.n	8104af2 <pvPortMalloc+0x142>
 8104a20:	4b41      	ldr	r3, [pc, #260]	; (8104b28 <pvPortMalloc+0x178>)
 8104a22:	681b      	ldr	r3, [r3, #0]
 8104a24:	687a      	ldr	r2, [r7, #4]
 8104a26:	429a      	cmp	r2, r3
 8104a28:	d863      	bhi.n	8104af2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8104a2a:	4b40      	ldr	r3, [pc, #256]	; (8104b2c <pvPortMalloc+0x17c>)
 8104a2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8104a2e:	4b3f      	ldr	r3, [pc, #252]	; (8104b2c <pvPortMalloc+0x17c>)
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104a34:	e004      	b.n	8104a40 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8104a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104a38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8104a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8104a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104a42:	685b      	ldr	r3, [r3, #4]
 8104a44:	687a      	ldr	r2, [r7, #4]
 8104a46:	429a      	cmp	r2, r3
 8104a48:	d903      	bls.n	8104a52 <pvPortMalloc+0xa2>
 8104a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104a4c:	681b      	ldr	r3, [r3, #0]
 8104a4e:	2b00      	cmp	r3, #0
 8104a50:	d1f1      	bne.n	8104a36 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8104a52:	4b33      	ldr	r3, [pc, #204]	; (8104b20 <pvPortMalloc+0x170>)
 8104a54:	681b      	ldr	r3, [r3, #0]
 8104a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104a58:	429a      	cmp	r2, r3
 8104a5a:	d04a      	beq.n	8104af2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8104a5c:	6a3b      	ldr	r3, [r7, #32]
 8104a5e:	681b      	ldr	r3, [r3, #0]
 8104a60:	2208      	movs	r2, #8
 8104a62:	4413      	add	r3, r2
 8104a64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8104a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104a68:	681a      	ldr	r2, [r3, #0]
 8104a6a:	6a3b      	ldr	r3, [r7, #32]
 8104a6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8104a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104a70:	685a      	ldr	r2, [r3, #4]
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	1ad2      	subs	r2, r2, r3
 8104a76:	2308      	movs	r3, #8
 8104a78:	005b      	lsls	r3, r3, #1
 8104a7a:	429a      	cmp	r2, r3
 8104a7c:	d91e      	bls.n	8104abc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8104a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8104a80:	687b      	ldr	r3, [r7, #4]
 8104a82:	4413      	add	r3, r2
 8104a84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8104a86:	69bb      	ldr	r3, [r7, #24]
 8104a88:	f003 0307 	and.w	r3, r3, #7
 8104a8c:	2b00      	cmp	r3, #0
 8104a8e:	d009      	beq.n	8104aa4 <pvPortMalloc+0xf4>
 8104a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104a94:	f383 8811 	msr	BASEPRI, r3
 8104a98:	f3bf 8f6f 	isb	sy
 8104a9c:	f3bf 8f4f 	dsb	sy
 8104aa0:	613b      	str	r3, [r7, #16]
 8104aa2:	e7fe      	b.n	8104aa2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8104aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104aa6:	685a      	ldr	r2, [r3, #4]
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	1ad2      	subs	r2, r2, r3
 8104aac:	69bb      	ldr	r3, [r7, #24]
 8104aae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8104ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ab2:	687a      	ldr	r2, [r7, #4]
 8104ab4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8104ab6:	69b8      	ldr	r0, [r7, #24]
 8104ab8:	f000 f8f6 	bl	8104ca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8104abc:	4b1a      	ldr	r3, [pc, #104]	; (8104b28 <pvPortMalloc+0x178>)
 8104abe:	681a      	ldr	r2, [r3, #0]
 8104ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ac2:	685b      	ldr	r3, [r3, #4]
 8104ac4:	1ad3      	subs	r3, r2, r3
 8104ac6:	4a18      	ldr	r2, [pc, #96]	; (8104b28 <pvPortMalloc+0x178>)
 8104ac8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8104aca:	4b17      	ldr	r3, [pc, #92]	; (8104b28 <pvPortMalloc+0x178>)
 8104acc:	681a      	ldr	r2, [r3, #0]
 8104ace:	4b18      	ldr	r3, [pc, #96]	; (8104b30 <pvPortMalloc+0x180>)
 8104ad0:	681b      	ldr	r3, [r3, #0]
 8104ad2:	429a      	cmp	r2, r3
 8104ad4:	d203      	bcs.n	8104ade <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8104ad6:	4b14      	ldr	r3, [pc, #80]	; (8104b28 <pvPortMalloc+0x178>)
 8104ad8:	681b      	ldr	r3, [r3, #0]
 8104ada:	4a15      	ldr	r2, [pc, #84]	; (8104b30 <pvPortMalloc+0x180>)
 8104adc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8104ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ae0:	685a      	ldr	r2, [r3, #4]
 8104ae2:	4b10      	ldr	r3, [pc, #64]	; (8104b24 <pvPortMalloc+0x174>)
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	431a      	orrs	r2, r3
 8104ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104aea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8104aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104aee:	2200      	movs	r2, #0
 8104af0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8104af2:	f001 fb3d 	bl	8106170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8104af6:	69fb      	ldr	r3, [r7, #28]
 8104af8:	f003 0307 	and.w	r3, r3, #7
 8104afc:	2b00      	cmp	r3, #0
 8104afe:	d009      	beq.n	8104b14 <pvPortMalloc+0x164>
 8104b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b04:	f383 8811 	msr	BASEPRI, r3
 8104b08:	f3bf 8f6f 	isb	sy
 8104b0c:	f3bf 8f4f 	dsb	sy
 8104b10:	60fb      	str	r3, [r7, #12]
 8104b12:	e7fe      	b.n	8104b12 <pvPortMalloc+0x162>
	return pvReturn;
 8104b14:	69fb      	ldr	r3, [r7, #28]
}
 8104b16:	4618      	mov	r0, r3
 8104b18:	3728      	adds	r7, #40	; 0x28
 8104b1a:	46bd      	mov	sp, r7
 8104b1c:	bd80      	pop	{r7, pc}
 8104b1e:	bf00      	nop
 8104b20:	100042f0 	.word	0x100042f0
 8104b24:	100042fc 	.word	0x100042fc
 8104b28:	100042f4 	.word	0x100042f4
 8104b2c:	100042e8 	.word	0x100042e8
 8104b30:	100042f8 	.word	0x100042f8

08104b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8104b34:	b580      	push	{r7, lr}
 8104b36:	b086      	sub	sp, #24
 8104b38:	af00      	add	r7, sp, #0
 8104b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8104b3c:	687b      	ldr	r3, [r7, #4]
 8104b3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	d046      	beq.n	8104bd4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8104b46:	2308      	movs	r3, #8
 8104b48:	425b      	negs	r3, r3
 8104b4a:	697a      	ldr	r2, [r7, #20]
 8104b4c:	4413      	add	r3, r2
 8104b4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8104b50:	697b      	ldr	r3, [r7, #20]
 8104b52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8104b54:	693b      	ldr	r3, [r7, #16]
 8104b56:	685a      	ldr	r2, [r3, #4]
 8104b58:	4b20      	ldr	r3, [pc, #128]	; (8104bdc <vPortFree+0xa8>)
 8104b5a:	681b      	ldr	r3, [r3, #0]
 8104b5c:	4013      	ands	r3, r2
 8104b5e:	2b00      	cmp	r3, #0
 8104b60:	d109      	bne.n	8104b76 <vPortFree+0x42>
 8104b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b66:	f383 8811 	msr	BASEPRI, r3
 8104b6a:	f3bf 8f6f 	isb	sy
 8104b6e:	f3bf 8f4f 	dsb	sy
 8104b72:	60fb      	str	r3, [r7, #12]
 8104b74:	e7fe      	b.n	8104b74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8104b76:	693b      	ldr	r3, [r7, #16]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	2b00      	cmp	r3, #0
 8104b7c:	d009      	beq.n	8104b92 <vPortFree+0x5e>
 8104b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104b82:	f383 8811 	msr	BASEPRI, r3
 8104b86:	f3bf 8f6f 	isb	sy
 8104b8a:	f3bf 8f4f 	dsb	sy
 8104b8e:	60bb      	str	r3, [r7, #8]
 8104b90:	e7fe      	b.n	8104b90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8104b92:	693b      	ldr	r3, [r7, #16]
 8104b94:	685a      	ldr	r2, [r3, #4]
 8104b96:	4b11      	ldr	r3, [pc, #68]	; (8104bdc <vPortFree+0xa8>)
 8104b98:	681b      	ldr	r3, [r3, #0]
 8104b9a:	4013      	ands	r3, r2
 8104b9c:	2b00      	cmp	r3, #0
 8104b9e:	d019      	beq.n	8104bd4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8104ba0:	693b      	ldr	r3, [r7, #16]
 8104ba2:	681b      	ldr	r3, [r3, #0]
 8104ba4:	2b00      	cmp	r3, #0
 8104ba6:	d115      	bne.n	8104bd4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8104ba8:	693b      	ldr	r3, [r7, #16]
 8104baa:	685a      	ldr	r2, [r3, #4]
 8104bac:	4b0b      	ldr	r3, [pc, #44]	; (8104bdc <vPortFree+0xa8>)
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	43db      	mvns	r3, r3
 8104bb2:	401a      	ands	r2, r3
 8104bb4:	693b      	ldr	r3, [r7, #16]
 8104bb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8104bb8:	f001 facc 	bl	8106154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8104bbc:	693b      	ldr	r3, [r7, #16]
 8104bbe:	685a      	ldr	r2, [r3, #4]
 8104bc0:	4b07      	ldr	r3, [pc, #28]	; (8104be0 <vPortFree+0xac>)
 8104bc2:	681b      	ldr	r3, [r3, #0]
 8104bc4:	4413      	add	r3, r2
 8104bc6:	4a06      	ldr	r2, [pc, #24]	; (8104be0 <vPortFree+0xac>)
 8104bc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8104bca:	6938      	ldr	r0, [r7, #16]
 8104bcc:	f000 f86c 	bl	8104ca8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8104bd0:	f001 face 	bl	8106170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8104bd4:	bf00      	nop
 8104bd6:	3718      	adds	r7, #24
 8104bd8:	46bd      	mov	sp, r7
 8104bda:	bd80      	pop	{r7, pc}
 8104bdc:	100042fc 	.word	0x100042fc
 8104be0:	100042f4 	.word	0x100042f4

08104be4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8104be4:	b480      	push	{r7}
 8104be6:	b085      	sub	sp, #20
 8104be8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8104bea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8104bee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8104bf0:	4b27      	ldr	r3, [pc, #156]	; (8104c90 <prvHeapInit+0xac>)
 8104bf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8104bf4:	68fb      	ldr	r3, [r7, #12]
 8104bf6:	f003 0307 	and.w	r3, r3, #7
 8104bfa:	2b00      	cmp	r3, #0
 8104bfc:	d00c      	beq.n	8104c18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8104bfe:	68fb      	ldr	r3, [r7, #12]
 8104c00:	3307      	adds	r3, #7
 8104c02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104c04:	68fb      	ldr	r3, [r7, #12]
 8104c06:	f023 0307 	bic.w	r3, r3, #7
 8104c0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8104c0c:	68ba      	ldr	r2, [r7, #8]
 8104c0e:	68fb      	ldr	r3, [r7, #12]
 8104c10:	1ad3      	subs	r3, r2, r3
 8104c12:	4a1f      	ldr	r2, [pc, #124]	; (8104c90 <prvHeapInit+0xac>)
 8104c14:	4413      	add	r3, r2
 8104c16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8104c18:	68fb      	ldr	r3, [r7, #12]
 8104c1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8104c1c:	4a1d      	ldr	r2, [pc, #116]	; (8104c94 <prvHeapInit+0xb0>)
 8104c1e:	687b      	ldr	r3, [r7, #4]
 8104c20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8104c22:	4b1c      	ldr	r3, [pc, #112]	; (8104c94 <prvHeapInit+0xb0>)
 8104c24:	2200      	movs	r2, #0
 8104c26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8104c28:	687b      	ldr	r3, [r7, #4]
 8104c2a:	68ba      	ldr	r2, [r7, #8]
 8104c2c:	4413      	add	r3, r2
 8104c2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8104c30:	2208      	movs	r2, #8
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	1a9b      	subs	r3, r3, r2
 8104c36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	f023 0307 	bic.w	r3, r3, #7
 8104c3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8104c40:	68fb      	ldr	r3, [r7, #12]
 8104c42:	4a15      	ldr	r2, [pc, #84]	; (8104c98 <prvHeapInit+0xb4>)
 8104c44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8104c46:	4b14      	ldr	r3, [pc, #80]	; (8104c98 <prvHeapInit+0xb4>)
 8104c48:	681b      	ldr	r3, [r3, #0]
 8104c4a:	2200      	movs	r2, #0
 8104c4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8104c4e:	4b12      	ldr	r3, [pc, #72]	; (8104c98 <prvHeapInit+0xb4>)
 8104c50:	681b      	ldr	r3, [r3, #0]
 8104c52:	2200      	movs	r2, #0
 8104c54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8104c5a:	683b      	ldr	r3, [r7, #0]
 8104c5c:	68fa      	ldr	r2, [r7, #12]
 8104c5e:	1ad2      	subs	r2, r2, r3
 8104c60:	683b      	ldr	r3, [r7, #0]
 8104c62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8104c64:	4b0c      	ldr	r3, [pc, #48]	; (8104c98 <prvHeapInit+0xb4>)
 8104c66:	681a      	ldr	r2, [r3, #0]
 8104c68:	683b      	ldr	r3, [r7, #0]
 8104c6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8104c6c:	683b      	ldr	r3, [r7, #0]
 8104c6e:	685b      	ldr	r3, [r3, #4]
 8104c70:	4a0a      	ldr	r2, [pc, #40]	; (8104c9c <prvHeapInit+0xb8>)
 8104c72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8104c74:	683b      	ldr	r3, [r7, #0]
 8104c76:	685b      	ldr	r3, [r3, #4]
 8104c78:	4a09      	ldr	r2, [pc, #36]	; (8104ca0 <prvHeapInit+0xbc>)
 8104c7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8104c7c:	4b09      	ldr	r3, [pc, #36]	; (8104ca4 <prvHeapInit+0xc0>)
 8104c7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8104c82:	601a      	str	r2, [r3, #0]
}
 8104c84:	bf00      	nop
 8104c86:	3714      	adds	r7, #20
 8104c88:	46bd      	mov	sp, r7
 8104c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c8e:	4770      	bx	lr
 8104c90:	100006e8 	.word	0x100006e8
 8104c94:	100042e8 	.word	0x100042e8
 8104c98:	100042f0 	.word	0x100042f0
 8104c9c:	100042f8 	.word	0x100042f8
 8104ca0:	100042f4 	.word	0x100042f4
 8104ca4:	100042fc 	.word	0x100042fc

08104ca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8104ca8:	b480      	push	{r7}
 8104caa:	b085      	sub	sp, #20
 8104cac:	af00      	add	r7, sp, #0
 8104cae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8104cb0:	4b28      	ldr	r3, [pc, #160]	; (8104d54 <prvInsertBlockIntoFreeList+0xac>)
 8104cb2:	60fb      	str	r3, [r7, #12]
 8104cb4:	e002      	b.n	8104cbc <prvInsertBlockIntoFreeList+0x14>
 8104cb6:	68fb      	ldr	r3, [r7, #12]
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	60fb      	str	r3, [r7, #12]
 8104cbc:	68fb      	ldr	r3, [r7, #12]
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	687a      	ldr	r2, [r7, #4]
 8104cc2:	429a      	cmp	r2, r3
 8104cc4:	d8f7      	bhi.n	8104cb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8104cc6:	68fb      	ldr	r3, [r7, #12]
 8104cc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8104cca:	68fb      	ldr	r3, [r7, #12]
 8104ccc:	685b      	ldr	r3, [r3, #4]
 8104cce:	68ba      	ldr	r2, [r7, #8]
 8104cd0:	4413      	add	r3, r2
 8104cd2:	687a      	ldr	r2, [r7, #4]
 8104cd4:	429a      	cmp	r2, r3
 8104cd6:	d108      	bne.n	8104cea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8104cd8:	68fb      	ldr	r3, [r7, #12]
 8104cda:	685a      	ldr	r2, [r3, #4]
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	685b      	ldr	r3, [r3, #4]
 8104ce0:	441a      	add	r2, r3
 8104ce2:	68fb      	ldr	r3, [r7, #12]
 8104ce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8104ce6:	68fb      	ldr	r3, [r7, #12]
 8104ce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8104cea:	687b      	ldr	r3, [r7, #4]
 8104cec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8104cee:	687b      	ldr	r3, [r7, #4]
 8104cf0:	685b      	ldr	r3, [r3, #4]
 8104cf2:	68ba      	ldr	r2, [r7, #8]
 8104cf4:	441a      	add	r2, r3
 8104cf6:	68fb      	ldr	r3, [r7, #12]
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	429a      	cmp	r2, r3
 8104cfc:	d118      	bne.n	8104d30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8104cfe:	68fb      	ldr	r3, [r7, #12]
 8104d00:	681a      	ldr	r2, [r3, #0]
 8104d02:	4b15      	ldr	r3, [pc, #84]	; (8104d58 <prvInsertBlockIntoFreeList+0xb0>)
 8104d04:	681b      	ldr	r3, [r3, #0]
 8104d06:	429a      	cmp	r2, r3
 8104d08:	d00d      	beq.n	8104d26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8104d0a:	687b      	ldr	r3, [r7, #4]
 8104d0c:	685a      	ldr	r2, [r3, #4]
 8104d0e:	68fb      	ldr	r3, [r7, #12]
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	685b      	ldr	r3, [r3, #4]
 8104d14:	441a      	add	r2, r3
 8104d16:	687b      	ldr	r3, [r7, #4]
 8104d18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	681b      	ldr	r3, [r3, #0]
 8104d1e:	681a      	ldr	r2, [r3, #0]
 8104d20:	687b      	ldr	r3, [r7, #4]
 8104d22:	601a      	str	r2, [r3, #0]
 8104d24:	e008      	b.n	8104d38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8104d26:	4b0c      	ldr	r3, [pc, #48]	; (8104d58 <prvInsertBlockIntoFreeList+0xb0>)
 8104d28:	681a      	ldr	r2, [r3, #0]
 8104d2a:	687b      	ldr	r3, [r7, #4]
 8104d2c:	601a      	str	r2, [r3, #0]
 8104d2e:	e003      	b.n	8104d38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8104d30:	68fb      	ldr	r3, [r7, #12]
 8104d32:	681a      	ldr	r2, [r3, #0]
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8104d38:	68fa      	ldr	r2, [r7, #12]
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	429a      	cmp	r2, r3
 8104d3e:	d002      	beq.n	8104d46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8104d40:	68fb      	ldr	r3, [r7, #12]
 8104d42:	687a      	ldr	r2, [r7, #4]
 8104d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8104d46:	bf00      	nop
 8104d48:	3714      	adds	r7, #20
 8104d4a:	46bd      	mov	sp, r7
 8104d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d50:	4770      	bx	lr
 8104d52:	bf00      	nop
 8104d54:	100042e8 	.word	0x100042e8
 8104d58:	100042f0 	.word	0x100042f0

08104d5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8104d5c:	b480      	push	{r7}
 8104d5e:	b083      	sub	sp, #12
 8104d60:	af00      	add	r7, sp, #0
 8104d62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	f103 0208 	add.w	r2, r3, #8
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	f04f 32ff 	mov.w	r2, #4294967295
 8104d74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104d76:	687b      	ldr	r3, [r7, #4]
 8104d78:	f103 0208 	add.w	r2, r3, #8
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8104d80:	687b      	ldr	r3, [r7, #4]
 8104d82:	f103 0208 	add.w	r2, r3, #8
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	2200      	movs	r2, #0
 8104d8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8104d90:	bf00      	nop
 8104d92:	370c      	adds	r7, #12
 8104d94:	46bd      	mov	sp, r7
 8104d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d9a:	4770      	bx	lr

08104d9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8104d9c:	b480      	push	{r7}
 8104d9e:	b083      	sub	sp, #12
 8104da0:	af00      	add	r7, sp, #0
 8104da2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	2200      	movs	r2, #0
 8104da8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8104daa:	bf00      	nop
 8104dac:	370c      	adds	r7, #12
 8104dae:	46bd      	mov	sp, r7
 8104db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104db4:	4770      	bx	lr

08104db6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104db6:	b480      	push	{r7}
 8104db8:	b085      	sub	sp, #20
 8104dba:	af00      	add	r7, sp, #0
 8104dbc:	6078      	str	r0, [r7, #4]
 8104dbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	685b      	ldr	r3, [r3, #4]
 8104dc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8104dc6:	683b      	ldr	r3, [r7, #0]
 8104dc8:	68fa      	ldr	r2, [r7, #12]
 8104dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8104dcc:	68fb      	ldr	r3, [r7, #12]
 8104dce:	689a      	ldr	r2, [r3, #8]
 8104dd0:	683b      	ldr	r3, [r7, #0]
 8104dd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8104dd4:	68fb      	ldr	r3, [r7, #12]
 8104dd6:	689b      	ldr	r3, [r3, #8]
 8104dd8:	683a      	ldr	r2, [r7, #0]
 8104dda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8104ddc:	68fb      	ldr	r3, [r7, #12]
 8104dde:	683a      	ldr	r2, [r7, #0]
 8104de0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8104de2:	683b      	ldr	r3, [r7, #0]
 8104de4:	687a      	ldr	r2, [r7, #4]
 8104de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104de8:	687b      	ldr	r3, [r7, #4]
 8104dea:	681b      	ldr	r3, [r3, #0]
 8104dec:	1c5a      	adds	r2, r3, #1
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	601a      	str	r2, [r3, #0]
}
 8104df2:	bf00      	nop
 8104df4:	3714      	adds	r7, #20
 8104df6:	46bd      	mov	sp, r7
 8104df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dfc:	4770      	bx	lr

08104dfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8104dfe:	b480      	push	{r7}
 8104e00:	b085      	sub	sp, #20
 8104e02:	af00      	add	r7, sp, #0
 8104e04:	6078      	str	r0, [r7, #4]
 8104e06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8104e08:	683b      	ldr	r3, [r7, #0]
 8104e0a:	681b      	ldr	r3, [r3, #0]
 8104e0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8104e0e:	68bb      	ldr	r3, [r7, #8]
 8104e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104e14:	d103      	bne.n	8104e1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8104e16:	687b      	ldr	r3, [r7, #4]
 8104e18:	691b      	ldr	r3, [r3, #16]
 8104e1a:	60fb      	str	r3, [r7, #12]
 8104e1c:	e00c      	b.n	8104e38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8104e1e:	687b      	ldr	r3, [r7, #4]
 8104e20:	3308      	adds	r3, #8
 8104e22:	60fb      	str	r3, [r7, #12]
 8104e24:	e002      	b.n	8104e2c <vListInsert+0x2e>
 8104e26:	68fb      	ldr	r3, [r7, #12]
 8104e28:	685b      	ldr	r3, [r3, #4]
 8104e2a:	60fb      	str	r3, [r7, #12]
 8104e2c:	68fb      	ldr	r3, [r7, #12]
 8104e2e:	685b      	ldr	r3, [r3, #4]
 8104e30:	681b      	ldr	r3, [r3, #0]
 8104e32:	68ba      	ldr	r2, [r7, #8]
 8104e34:	429a      	cmp	r2, r3
 8104e36:	d2f6      	bcs.n	8104e26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8104e38:	68fb      	ldr	r3, [r7, #12]
 8104e3a:	685a      	ldr	r2, [r3, #4]
 8104e3c:	683b      	ldr	r3, [r7, #0]
 8104e3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8104e40:	683b      	ldr	r3, [r7, #0]
 8104e42:	685b      	ldr	r3, [r3, #4]
 8104e44:	683a      	ldr	r2, [r7, #0]
 8104e46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8104e48:	683b      	ldr	r3, [r7, #0]
 8104e4a:	68fa      	ldr	r2, [r7, #12]
 8104e4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8104e4e:	68fb      	ldr	r3, [r7, #12]
 8104e50:	683a      	ldr	r2, [r7, #0]
 8104e52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8104e54:	683b      	ldr	r3, [r7, #0]
 8104e56:	687a      	ldr	r2, [r7, #4]
 8104e58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8104e5a:	687b      	ldr	r3, [r7, #4]
 8104e5c:	681b      	ldr	r3, [r3, #0]
 8104e5e:	1c5a      	adds	r2, r3, #1
 8104e60:	687b      	ldr	r3, [r7, #4]
 8104e62:	601a      	str	r2, [r3, #0]
}
 8104e64:	bf00      	nop
 8104e66:	3714      	adds	r7, #20
 8104e68:	46bd      	mov	sp, r7
 8104e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e6e:	4770      	bx	lr

08104e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8104e70:	b480      	push	{r7}
 8104e72:	b085      	sub	sp, #20
 8104e74:	af00      	add	r7, sp, #0
 8104e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8104e78:	687b      	ldr	r3, [r7, #4]
 8104e7a:	691b      	ldr	r3, [r3, #16]
 8104e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8104e7e:	687b      	ldr	r3, [r7, #4]
 8104e80:	685b      	ldr	r3, [r3, #4]
 8104e82:	687a      	ldr	r2, [r7, #4]
 8104e84:	6892      	ldr	r2, [r2, #8]
 8104e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8104e88:	687b      	ldr	r3, [r7, #4]
 8104e8a:	689b      	ldr	r3, [r3, #8]
 8104e8c:	687a      	ldr	r2, [r7, #4]
 8104e8e:	6852      	ldr	r2, [r2, #4]
 8104e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8104e92:	68fb      	ldr	r3, [r7, #12]
 8104e94:	685b      	ldr	r3, [r3, #4]
 8104e96:	687a      	ldr	r2, [r7, #4]
 8104e98:	429a      	cmp	r2, r3
 8104e9a:	d103      	bne.n	8104ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	689a      	ldr	r2, [r3, #8]
 8104ea0:	68fb      	ldr	r3, [r7, #12]
 8104ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8104ea4:	687b      	ldr	r3, [r7, #4]
 8104ea6:	2200      	movs	r2, #0
 8104ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8104eaa:	68fb      	ldr	r3, [r7, #12]
 8104eac:	681b      	ldr	r3, [r3, #0]
 8104eae:	1e5a      	subs	r2, r3, #1
 8104eb0:	68fb      	ldr	r3, [r7, #12]
 8104eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8104eb4:	68fb      	ldr	r3, [r7, #12]
 8104eb6:	681b      	ldr	r3, [r3, #0]
}
 8104eb8:	4618      	mov	r0, r3
 8104eba:	3714      	adds	r7, #20
 8104ebc:	46bd      	mov	sp, r7
 8104ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ec2:	4770      	bx	lr

08104ec4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8104ec4:	b480      	push	{r7}
 8104ec6:	b085      	sub	sp, #20
 8104ec8:	af00      	add	r7, sp, #0
 8104eca:	60f8      	str	r0, [r7, #12]
 8104ecc:	60b9      	str	r1, [r7, #8]
 8104ece:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	3b04      	subs	r3, #4
 8104ed4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8104ed6:	68fb      	ldr	r3, [r7, #12]
 8104ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8104edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8104ede:	68fb      	ldr	r3, [r7, #12]
 8104ee0:	3b04      	subs	r3, #4
 8104ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8104ee4:	68bb      	ldr	r3, [r7, #8]
 8104ee6:	f023 0201 	bic.w	r2, r3, #1
 8104eea:	68fb      	ldr	r3, [r7, #12]
 8104eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8104eee:	68fb      	ldr	r3, [r7, #12]
 8104ef0:	3b04      	subs	r3, #4
 8104ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8104ef4:	4a0c      	ldr	r2, [pc, #48]	; (8104f28 <pxPortInitialiseStack+0x64>)
 8104ef6:	68fb      	ldr	r3, [r7, #12]
 8104ef8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8104efa:	68fb      	ldr	r3, [r7, #12]
 8104efc:	3b14      	subs	r3, #20
 8104efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8104f00:	687a      	ldr	r2, [r7, #4]
 8104f02:	68fb      	ldr	r3, [r7, #12]
 8104f04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8104f06:	68fb      	ldr	r3, [r7, #12]
 8104f08:	3b04      	subs	r3, #4
 8104f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8104f0c:	68fb      	ldr	r3, [r7, #12]
 8104f0e:	f06f 0202 	mvn.w	r2, #2
 8104f12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8104f14:	68fb      	ldr	r3, [r7, #12]
 8104f16:	3b20      	subs	r3, #32
 8104f18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8104f1a:	68fb      	ldr	r3, [r7, #12]
}
 8104f1c:	4618      	mov	r0, r3
 8104f1e:	3714      	adds	r7, #20
 8104f20:	46bd      	mov	sp, r7
 8104f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f26:	4770      	bx	lr
 8104f28:	08104f2d 	.word	0x08104f2d

08104f2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8104f2c:	b480      	push	{r7}
 8104f2e:	b085      	sub	sp, #20
 8104f30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8104f32:	2300      	movs	r3, #0
 8104f34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8104f36:	4b11      	ldr	r3, [pc, #68]	; (8104f7c <prvTaskExitError+0x50>)
 8104f38:	681b      	ldr	r3, [r3, #0]
 8104f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104f3e:	d009      	beq.n	8104f54 <prvTaskExitError+0x28>
 8104f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104f44:	f383 8811 	msr	BASEPRI, r3
 8104f48:	f3bf 8f6f 	isb	sy
 8104f4c:	f3bf 8f4f 	dsb	sy
 8104f50:	60fb      	str	r3, [r7, #12]
 8104f52:	e7fe      	b.n	8104f52 <prvTaskExitError+0x26>
 8104f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104f58:	f383 8811 	msr	BASEPRI, r3
 8104f5c:	f3bf 8f6f 	isb	sy
 8104f60:	f3bf 8f4f 	dsb	sy
 8104f64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8104f66:	bf00      	nop
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	2b00      	cmp	r3, #0
 8104f6c:	d0fc      	beq.n	8104f68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8104f6e:	bf00      	nop
 8104f70:	3714      	adds	r7, #20
 8104f72:	46bd      	mov	sp, r7
 8104f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f78:	4770      	bx	lr
 8104f7a:	bf00      	nop
 8104f7c:	1000000c 	.word	0x1000000c

08104f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8104f80:	4b07      	ldr	r3, [pc, #28]	; (8104fa0 <pxCurrentTCBConst2>)
 8104f82:	6819      	ldr	r1, [r3, #0]
 8104f84:	6808      	ldr	r0, [r1, #0]
 8104f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104f8a:	f380 8809 	msr	PSP, r0
 8104f8e:	f3bf 8f6f 	isb	sy
 8104f92:	f04f 0000 	mov.w	r0, #0
 8104f96:	f380 8811 	msr	BASEPRI, r0
 8104f9a:	4770      	bx	lr
 8104f9c:	f3af 8000 	nop.w

08104fa0 <pxCurrentTCBConst2>:
 8104fa0:	10004308 	.word	0x10004308
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8104fa4:	bf00      	nop
 8104fa6:	bf00      	nop

08104fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8104fa8:	4808      	ldr	r0, [pc, #32]	; (8104fcc <prvPortStartFirstTask+0x24>)
 8104faa:	6800      	ldr	r0, [r0, #0]
 8104fac:	6800      	ldr	r0, [r0, #0]
 8104fae:	f380 8808 	msr	MSP, r0
 8104fb2:	f04f 0000 	mov.w	r0, #0
 8104fb6:	f380 8814 	msr	CONTROL, r0
 8104fba:	b662      	cpsie	i
 8104fbc:	b661      	cpsie	f
 8104fbe:	f3bf 8f4f 	dsb	sy
 8104fc2:	f3bf 8f6f 	isb	sy
 8104fc6:	df00      	svc	0
 8104fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8104fca:	bf00      	nop
 8104fcc:	e000ed08 	.word	0xe000ed08

08104fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8104fd0:	b580      	push	{r7, lr}
 8104fd2:	b086      	sub	sp, #24
 8104fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8104fd6:	4b44      	ldr	r3, [pc, #272]	; (81050e8 <xPortStartScheduler+0x118>)
 8104fd8:	681b      	ldr	r3, [r3, #0]
 8104fda:	4a44      	ldr	r2, [pc, #272]	; (81050ec <xPortStartScheduler+0x11c>)
 8104fdc:	4293      	cmp	r3, r2
 8104fde:	d109      	bne.n	8104ff4 <xPortStartScheduler+0x24>
 8104fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8104fe4:	f383 8811 	msr	BASEPRI, r3
 8104fe8:	f3bf 8f6f 	isb	sy
 8104fec:	f3bf 8f4f 	dsb	sy
 8104ff0:	613b      	str	r3, [r7, #16]
 8104ff2:	e7fe      	b.n	8104ff2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8104ff4:	4b3c      	ldr	r3, [pc, #240]	; (81050e8 <xPortStartScheduler+0x118>)
 8104ff6:	681b      	ldr	r3, [r3, #0]
 8104ff8:	4a3d      	ldr	r2, [pc, #244]	; (81050f0 <xPortStartScheduler+0x120>)
 8104ffa:	4293      	cmp	r3, r2
 8104ffc:	d109      	bne.n	8105012 <xPortStartScheduler+0x42>
 8104ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105002:	f383 8811 	msr	BASEPRI, r3
 8105006:	f3bf 8f6f 	isb	sy
 810500a:	f3bf 8f4f 	dsb	sy
 810500e:	60fb      	str	r3, [r7, #12]
 8105010:	e7fe      	b.n	8105010 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8105012:	4b38      	ldr	r3, [pc, #224]	; (81050f4 <xPortStartScheduler+0x124>)
 8105014:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8105016:	697b      	ldr	r3, [r7, #20]
 8105018:	781b      	ldrb	r3, [r3, #0]
 810501a:	b2db      	uxtb	r3, r3
 810501c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810501e:	697b      	ldr	r3, [r7, #20]
 8105020:	22ff      	movs	r2, #255	; 0xff
 8105022:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8105024:	697b      	ldr	r3, [r7, #20]
 8105026:	781b      	ldrb	r3, [r3, #0]
 8105028:	b2db      	uxtb	r3, r3
 810502a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810502c:	78fb      	ldrb	r3, [r7, #3]
 810502e:	b2db      	uxtb	r3, r3
 8105030:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8105034:	b2da      	uxtb	r2, r3
 8105036:	4b30      	ldr	r3, [pc, #192]	; (81050f8 <xPortStartScheduler+0x128>)
 8105038:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810503a:	4b30      	ldr	r3, [pc, #192]	; (81050fc <xPortStartScheduler+0x12c>)
 810503c:	2207      	movs	r2, #7
 810503e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8105040:	e009      	b.n	8105056 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8105042:	4b2e      	ldr	r3, [pc, #184]	; (81050fc <xPortStartScheduler+0x12c>)
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	3b01      	subs	r3, #1
 8105048:	4a2c      	ldr	r2, [pc, #176]	; (81050fc <xPortStartScheduler+0x12c>)
 810504a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810504c:	78fb      	ldrb	r3, [r7, #3]
 810504e:	b2db      	uxtb	r3, r3
 8105050:	005b      	lsls	r3, r3, #1
 8105052:	b2db      	uxtb	r3, r3
 8105054:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8105056:	78fb      	ldrb	r3, [r7, #3]
 8105058:	b2db      	uxtb	r3, r3
 810505a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810505e:	2b80      	cmp	r3, #128	; 0x80
 8105060:	d0ef      	beq.n	8105042 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8105062:	4b26      	ldr	r3, [pc, #152]	; (81050fc <xPortStartScheduler+0x12c>)
 8105064:	681b      	ldr	r3, [r3, #0]
 8105066:	f1c3 0307 	rsb	r3, r3, #7
 810506a:	2b04      	cmp	r3, #4
 810506c:	d009      	beq.n	8105082 <xPortStartScheduler+0xb2>
 810506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105072:	f383 8811 	msr	BASEPRI, r3
 8105076:	f3bf 8f6f 	isb	sy
 810507a:	f3bf 8f4f 	dsb	sy
 810507e:	60bb      	str	r3, [r7, #8]
 8105080:	e7fe      	b.n	8105080 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8105082:	4b1e      	ldr	r3, [pc, #120]	; (81050fc <xPortStartScheduler+0x12c>)
 8105084:	681b      	ldr	r3, [r3, #0]
 8105086:	021b      	lsls	r3, r3, #8
 8105088:	4a1c      	ldr	r2, [pc, #112]	; (81050fc <xPortStartScheduler+0x12c>)
 810508a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810508c:	4b1b      	ldr	r3, [pc, #108]	; (81050fc <xPortStartScheduler+0x12c>)
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8105094:	4a19      	ldr	r2, [pc, #100]	; (81050fc <xPortStartScheduler+0x12c>)
 8105096:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8105098:	687b      	ldr	r3, [r7, #4]
 810509a:	b2da      	uxtb	r2, r3
 810509c:	697b      	ldr	r3, [r7, #20]
 810509e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 81050a0:	4b17      	ldr	r3, [pc, #92]	; (8105100 <xPortStartScheduler+0x130>)
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	4a16      	ldr	r2, [pc, #88]	; (8105100 <xPortStartScheduler+0x130>)
 81050a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81050aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 81050ac:	4b14      	ldr	r3, [pc, #80]	; (8105100 <xPortStartScheduler+0x130>)
 81050ae:	681b      	ldr	r3, [r3, #0]
 81050b0:	4a13      	ldr	r2, [pc, #76]	; (8105100 <xPortStartScheduler+0x130>)
 81050b2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 81050b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 81050b8:	f000 f8d6 	bl	8105268 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 81050bc:	4b11      	ldr	r3, [pc, #68]	; (8105104 <xPortStartScheduler+0x134>)
 81050be:	2200      	movs	r2, #0
 81050c0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 81050c2:	f000 f8f5 	bl	81052b0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 81050c6:	4b10      	ldr	r3, [pc, #64]	; (8105108 <xPortStartScheduler+0x138>)
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	4a0f      	ldr	r2, [pc, #60]	; (8105108 <xPortStartScheduler+0x138>)
 81050cc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 81050d0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 81050d2:	f7ff ff69 	bl	8104fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 81050d6:	f001 f9af 	bl	8106438 <vTaskSwitchContext>
	prvTaskExitError();
 81050da:	f7ff ff27 	bl	8104f2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 81050de:	2300      	movs	r3, #0
}
 81050e0:	4618      	mov	r0, r3
 81050e2:	3718      	adds	r7, #24
 81050e4:	46bd      	mov	sp, r7
 81050e6:	bd80      	pop	{r7, pc}
 81050e8:	e000ed00 	.word	0xe000ed00
 81050ec:	410fc271 	.word	0x410fc271
 81050f0:	410fc270 	.word	0x410fc270
 81050f4:	e000e400 	.word	0xe000e400
 81050f8:	10004300 	.word	0x10004300
 81050fc:	10004304 	.word	0x10004304
 8105100:	e000ed20 	.word	0xe000ed20
 8105104:	1000000c 	.word	0x1000000c
 8105108:	e000ef34 	.word	0xe000ef34

0810510c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810510c:	b480      	push	{r7}
 810510e:	b083      	sub	sp, #12
 8105110:	af00      	add	r7, sp, #0
 8105112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105116:	f383 8811 	msr	BASEPRI, r3
 810511a:	f3bf 8f6f 	isb	sy
 810511e:	f3bf 8f4f 	dsb	sy
 8105122:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8105124:	4b0e      	ldr	r3, [pc, #56]	; (8105160 <vPortEnterCritical+0x54>)
 8105126:	681b      	ldr	r3, [r3, #0]
 8105128:	3301      	adds	r3, #1
 810512a:	4a0d      	ldr	r2, [pc, #52]	; (8105160 <vPortEnterCritical+0x54>)
 810512c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810512e:	4b0c      	ldr	r3, [pc, #48]	; (8105160 <vPortEnterCritical+0x54>)
 8105130:	681b      	ldr	r3, [r3, #0]
 8105132:	2b01      	cmp	r3, #1
 8105134:	d10e      	bne.n	8105154 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8105136:	4b0b      	ldr	r3, [pc, #44]	; (8105164 <vPortEnterCritical+0x58>)
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	b2db      	uxtb	r3, r3
 810513c:	2b00      	cmp	r3, #0
 810513e:	d009      	beq.n	8105154 <vPortEnterCritical+0x48>
 8105140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105144:	f383 8811 	msr	BASEPRI, r3
 8105148:	f3bf 8f6f 	isb	sy
 810514c:	f3bf 8f4f 	dsb	sy
 8105150:	603b      	str	r3, [r7, #0]
 8105152:	e7fe      	b.n	8105152 <vPortEnterCritical+0x46>
	}
}
 8105154:	bf00      	nop
 8105156:	370c      	adds	r7, #12
 8105158:	46bd      	mov	sp, r7
 810515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810515e:	4770      	bx	lr
 8105160:	1000000c 	.word	0x1000000c
 8105164:	e000ed04 	.word	0xe000ed04

08105168 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8105168:	b480      	push	{r7}
 810516a:	b083      	sub	sp, #12
 810516c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810516e:	4b11      	ldr	r3, [pc, #68]	; (81051b4 <vPortExitCritical+0x4c>)
 8105170:	681b      	ldr	r3, [r3, #0]
 8105172:	2b00      	cmp	r3, #0
 8105174:	d109      	bne.n	810518a <vPortExitCritical+0x22>
 8105176:	f04f 0350 	mov.w	r3, #80	; 0x50
 810517a:	f383 8811 	msr	BASEPRI, r3
 810517e:	f3bf 8f6f 	isb	sy
 8105182:	f3bf 8f4f 	dsb	sy
 8105186:	607b      	str	r3, [r7, #4]
 8105188:	e7fe      	b.n	8105188 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 810518a:	4b0a      	ldr	r3, [pc, #40]	; (81051b4 <vPortExitCritical+0x4c>)
 810518c:	681b      	ldr	r3, [r3, #0]
 810518e:	3b01      	subs	r3, #1
 8105190:	4a08      	ldr	r2, [pc, #32]	; (81051b4 <vPortExitCritical+0x4c>)
 8105192:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8105194:	4b07      	ldr	r3, [pc, #28]	; (81051b4 <vPortExitCritical+0x4c>)
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	2b00      	cmp	r3, #0
 810519a:	d104      	bne.n	81051a6 <vPortExitCritical+0x3e>
 810519c:	2300      	movs	r3, #0
 810519e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 81051a0:	683b      	ldr	r3, [r7, #0]
 81051a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 81051a6:	bf00      	nop
 81051a8:	370c      	adds	r7, #12
 81051aa:	46bd      	mov	sp, r7
 81051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051b0:	4770      	bx	lr
 81051b2:	bf00      	nop
 81051b4:	1000000c 	.word	0x1000000c
	...

081051c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 81051c0:	f3ef 8009 	mrs	r0, PSP
 81051c4:	f3bf 8f6f 	isb	sy
 81051c8:	4b15      	ldr	r3, [pc, #84]	; (8105220 <pxCurrentTCBConst>)
 81051ca:	681a      	ldr	r2, [r3, #0]
 81051cc:	f01e 0f10 	tst.w	lr, #16
 81051d0:	bf08      	it	eq
 81051d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 81051d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81051da:	6010      	str	r0, [r2, #0]
 81051dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 81051e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 81051e4:	f380 8811 	msr	BASEPRI, r0
 81051e8:	f3bf 8f4f 	dsb	sy
 81051ec:	f3bf 8f6f 	isb	sy
 81051f0:	f001 f922 	bl	8106438 <vTaskSwitchContext>
 81051f4:	f04f 0000 	mov.w	r0, #0
 81051f8:	f380 8811 	msr	BASEPRI, r0
 81051fc:	bc09      	pop	{r0, r3}
 81051fe:	6819      	ldr	r1, [r3, #0]
 8105200:	6808      	ldr	r0, [r1, #0]
 8105202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105206:	f01e 0f10 	tst.w	lr, #16
 810520a:	bf08      	it	eq
 810520c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8105210:	f380 8809 	msr	PSP, r0
 8105214:	f3bf 8f6f 	isb	sy
 8105218:	4770      	bx	lr
 810521a:	bf00      	nop
 810521c:	f3af 8000 	nop.w

08105220 <pxCurrentTCBConst>:
 8105220:	10004308 	.word	0x10004308
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8105224:	bf00      	nop
 8105226:	bf00      	nop

08105228 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8105228:	b580      	push	{r7, lr}
 810522a:	b082      	sub	sp, #8
 810522c:	af00      	add	r7, sp, #0
	__asm volatile
 810522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105232:	f383 8811 	msr	BASEPRI, r3
 8105236:	f3bf 8f6f 	isb	sy
 810523a:	f3bf 8f4f 	dsb	sy
 810523e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8105240:	f001 f842 	bl	81062c8 <xTaskIncrementTick>
 8105244:	4603      	mov	r3, r0
 8105246:	2b00      	cmp	r3, #0
 8105248:	d003      	beq.n	8105252 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810524a:	4b06      	ldr	r3, [pc, #24]	; (8105264 <SysTick_Handler+0x3c>)
 810524c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105250:	601a      	str	r2, [r3, #0]
 8105252:	2300      	movs	r3, #0
 8105254:	603b      	str	r3, [r7, #0]
	__asm volatile
 8105256:	683b      	ldr	r3, [r7, #0]
 8105258:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 810525c:	bf00      	nop
 810525e:	3708      	adds	r7, #8
 8105260:	46bd      	mov	sp, r7
 8105262:	bd80      	pop	{r7, pc}
 8105264:	e000ed04 	.word	0xe000ed04

08105268 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8105268:	b480      	push	{r7}
 810526a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810526c:	4b0b      	ldr	r3, [pc, #44]	; (810529c <vPortSetupTimerInterrupt+0x34>)
 810526e:	2200      	movs	r2, #0
 8105270:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8105272:	4b0b      	ldr	r3, [pc, #44]	; (81052a0 <vPortSetupTimerInterrupt+0x38>)
 8105274:	2200      	movs	r2, #0
 8105276:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8105278:	4b0a      	ldr	r3, [pc, #40]	; (81052a4 <vPortSetupTimerInterrupt+0x3c>)
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	4a0a      	ldr	r2, [pc, #40]	; (81052a8 <vPortSetupTimerInterrupt+0x40>)
 810527e:	fba2 2303 	umull	r2, r3, r2, r3
 8105282:	099b      	lsrs	r3, r3, #6
 8105284:	4a09      	ldr	r2, [pc, #36]	; (81052ac <vPortSetupTimerInterrupt+0x44>)
 8105286:	3b01      	subs	r3, #1
 8105288:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810528a:	4b04      	ldr	r3, [pc, #16]	; (810529c <vPortSetupTimerInterrupt+0x34>)
 810528c:	2207      	movs	r2, #7
 810528e:	601a      	str	r2, [r3, #0]
}
 8105290:	bf00      	nop
 8105292:	46bd      	mov	sp, r7
 8105294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105298:	4770      	bx	lr
 810529a:	bf00      	nop
 810529c:	e000e010 	.word	0xe000e010
 81052a0:	e000e018 	.word	0xe000e018
 81052a4:	10000004 	.word	0x10000004
 81052a8:	10624dd3 	.word	0x10624dd3
 81052ac:	e000e014 	.word	0xe000e014

081052b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 81052b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 81052c0 <vPortEnableVFP+0x10>
 81052b4:	6801      	ldr	r1, [r0, #0]
 81052b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81052ba:	6001      	str	r1, [r0, #0]
 81052bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 81052be:	bf00      	nop
 81052c0:	e000ed88 	.word	0xe000ed88

081052c4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 81052c4:	b480      	push	{r7}
 81052c6:	b085      	sub	sp, #20
 81052c8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 81052ca:	f3ef 8305 	mrs	r3, IPSR
 81052ce:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 81052d0:	68fb      	ldr	r3, [r7, #12]
 81052d2:	2b0f      	cmp	r3, #15
 81052d4:	d913      	bls.n	81052fe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 81052d6:	4a16      	ldr	r2, [pc, #88]	; (8105330 <vPortValidateInterruptPriority+0x6c>)
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	4413      	add	r3, r2
 81052dc:	781b      	ldrb	r3, [r3, #0]
 81052de:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 81052e0:	4b14      	ldr	r3, [pc, #80]	; (8105334 <vPortValidateInterruptPriority+0x70>)
 81052e2:	781b      	ldrb	r3, [r3, #0]
 81052e4:	7afa      	ldrb	r2, [r7, #11]
 81052e6:	429a      	cmp	r2, r3
 81052e8:	d209      	bcs.n	81052fe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 81052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 81052ee:	f383 8811 	msr	BASEPRI, r3
 81052f2:	f3bf 8f6f 	isb	sy
 81052f6:	f3bf 8f4f 	dsb	sy
 81052fa:	607b      	str	r3, [r7, #4]
 81052fc:	e7fe      	b.n	81052fc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 81052fe:	4b0e      	ldr	r3, [pc, #56]	; (8105338 <vPortValidateInterruptPriority+0x74>)
 8105300:	681b      	ldr	r3, [r3, #0]
 8105302:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8105306:	4b0d      	ldr	r3, [pc, #52]	; (810533c <vPortValidateInterruptPriority+0x78>)
 8105308:	681b      	ldr	r3, [r3, #0]
 810530a:	429a      	cmp	r2, r3
 810530c:	d909      	bls.n	8105322 <vPortValidateInterruptPriority+0x5e>
 810530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105312:	f383 8811 	msr	BASEPRI, r3
 8105316:	f3bf 8f6f 	isb	sy
 810531a:	f3bf 8f4f 	dsb	sy
 810531e:	603b      	str	r3, [r7, #0]
 8105320:	e7fe      	b.n	8105320 <vPortValidateInterruptPriority+0x5c>
	}
 8105322:	bf00      	nop
 8105324:	3714      	adds	r7, #20
 8105326:	46bd      	mov	sp, r7
 8105328:	f85d 7b04 	ldr.w	r7, [sp], #4
 810532c:	4770      	bx	lr
 810532e:	bf00      	nop
 8105330:	e000e3f0 	.word	0xe000e3f0
 8105334:	10004300 	.word	0x10004300
 8105338:	e000ed0c 	.word	0xe000ed0c
 810533c:	10004304 	.word	0x10004304

08105340 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8105340:	b580      	push	{r7, lr}
 8105342:	b084      	sub	sp, #16
 8105344:	af00      	add	r7, sp, #0
 8105346:	6078      	str	r0, [r7, #4]
 8105348:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810534e:	68fb      	ldr	r3, [r7, #12]
 8105350:	2b00      	cmp	r3, #0
 8105352:	d109      	bne.n	8105368 <xQueueGenericReset+0x28>
 8105354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105358:	f383 8811 	msr	BASEPRI, r3
 810535c:	f3bf 8f6f 	isb	sy
 8105360:	f3bf 8f4f 	dsb	sy
 8105364:	60bb      	str	r3, [r7, #8]
 8105366:	e7fe      	b.n	8105366 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8105368:	f7ff fed0 	bl	810510c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810536c:	68fb      	ldr	r3, [r7, #12]
 810536e:	681a      	ldr	r2, [r3, #0]
 8105370:	68fb      	ldr	r3, [r7, #12]
 8105372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105374:	68f9      	ldr	r1, [r7, #12]
 8105376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8105378:	fb01 f303 	mul.w	r3, r1, r3
 810537c:	441a      	add	r2, r3
 810537e:	68fb      	ldr	r3, [r7, #12]
 8105380:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8105382:	68fb      	ldr	r3, [r7, #12]
 8105384:	2200      	movs	r2, #0
 8105386:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8105388:	68fb      	ldr	r3, [r7, #12]
 810538a:	681a      	ldr	r2, [r3, #0]
 810538c:	68fb      	ldr	r3, [r7, #12]
 810538e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8105390:	68fb      	ldr	r3, [r7, #12]
 8105392:	681a      	ldr	r2, [r3, #0]
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105398:	3b01      	subs	r3, #1
 810539a:	68f9      	ldr	r1, [r7, #12]
 810539c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 810539e:	fb01 f303 	mul.w	r3, r1, r3
 81053a2:	441a      	add	r2, r3
 81053a4:	68fb      	ldr	r3, [r7, #12]
 81053a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 81053a8:	68fb      	ldr	r3, [r7, #12]
 81053aa:	22ff      	movs	r2, #255	; 0xff
 81053ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 81053b0:	68fb      	ldr	r3, [r7, #12]
 81053b2:	22ff      	movs	r2, #255	; 0xff
 81053b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 81053b8:	683b      	ldr	r3, [r7, #0]
 81053ba:	2b00      	cmp	r3, #0
 81053bc:	d114      	bne.n	81053e8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 81053be:	68fb      	ldr	r3, [r7, #12]
 81053c0:	691b      	ldr	r3, [r3, #16]
 81053c2:	2b00      	cmp	r3, #0
 81053c4:	d01a      	beq.n	81053fc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 81053c6:	68fb      	ldr	r3, [r7, #12]
 81053c8:	3310      	adds	r3, #16
 81053ca:	4618      	mov	r0, r3
 81053cc:	f001 f8de 	bl	810658c <xTaskRemoveFromEventList>
 81053d0:	4603      	mov	r3, r0
 81053d2:	2b00      	cmp	r3, #0
 81053d4:	d012      	beq.n	81053fc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 81053d6:	4b0d      	ldr	r3, [pc, #52]	; (810540c <xQueueGenericReset+0xcc>)
 81053d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81053dc:	601a      	str	r2, [r3, #0]
 81053de:	f3bf 8f4f 	dsb	sy
 81053e2:	f3bf 8f6f 	isb	sy
 81053e6:	e009      	b.n	81053fc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 81053e8:	68fb      	ldr	r3, [r7, #12]
 81053ea:	3310      	adds	r3, #16
 81053ec:	4618      	mov	r0, r3
 81053ee:	f7ff fcb5 	bl	8104d5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 81053f2:	68fb      	ldr	r3, [r7, #12]
 81053f4:	3324      	adds	r3, #36	; 0x24
 81053f6:	4618      	mov	r0, r3
 81053f8:	f7ff fcb0 	bl	8104d5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 81053fc:	f7ff feb4 	bl	8105168 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8105400:	2301      	movs	r3, #1
}
 8105402:	4618      	mov	r0, r3
 8105404:	3710      	adds	r7, #16
 8105406:	46bd      	mov	sp, r7
 8105408:	bd80      	pop	{r7, pc}
 810540a:	bf00      	nop
 810540c:	e000ed04 	.word	0xe000ed04

08105410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8105410:	b580      	push	{r7, lr}
 8105412:	b08e      	sub	sp, #56	; 0x38
 8105414:	af02      	add	r7, sp, #8
 8105416:	60f8      	str	r0, [r7, #12]
 8105418:	60b9      	str	r1, [r7, #8]
 810541a:	607a      	str	r2, [r7, #4]
 810541c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810541e:	68fb      	ldr	r3, [r7, #12]
 8105420:	2b00      	cmp	r3, #0
 8105422:	d109      	bne.n	8105438 <xQueueGenericCreateStatic+0x28>
 8105424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105428:	f383 8811 	msr	BASEPRI, r3
 810542c:	f3bf 8f6f 	isb	sy
 8105430:	f3bf 8f4f 	dsb	sy
 8105434:	62bb      	str	r3, [r7, #40]	; 0x28
 8105436:	e7fe      	b.n	8105436 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8105438:	683b      	ldr	r3, [r7, #0]
 810543a:	2b00      	cmp	r3, #0
 810543c:	d109      	bne.n	8105452 <xQueueGenericCreateStatic+0x42>
 810543e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105442:	f383 8811 	msr	BASEPRI, r3
 8105446:	f3bf 8f6f 	isb	sy
 810544a:	f3bf 8f4f 	dsb	sy
 810544e:	627b      	str	r3, [r7, #36]	; 0x24
 8105450:	e7fe      	b.n	8105450 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8105452:	687b      	ldr	r3, [r7, #4]
 8105454:	2b00      	cmp	r3, #0
 8105456:	d002      	beq.n	810545e <xQueueGenericCreateStatic+0x4e>
 8105458:	68bb      	ldr	r3, [r7, #8]
 810545a:	2b00      	cmp	r3, #0
 810545c:	d001      	beq.n	8105462 <xQueueGenericCreateStatic+0x52>
 810545e:	2301      	movs	r3, #1
 8105460:	e000      	b.n	8105464 <xQueueGenericCreateStatic+0x54>
 8105462:	2300      	movs	r3, #0
 8105464:	2b00      	cmp	r3, #0
 8105466:	d109      	bne.n	810547c <xQueueGenericCreateStatic+0x6c>
 8105468:	f04f 0350 	mov.w	r3, #80	; 0x50
 810546c:	f383 8811 	msr	BASEPRI, r3
 8105470:	f3bf 8f6f 	isb	sy
 8105474:	f3bf 8f4f 	dsb	sy
 8105478:	623b      	str	r3, [r7, #32]
 810547a:	e7fe      	b.n	810547a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810547c:	687b      	ldr	r3, [r7, #4]
 810547e:	2b00      	cmp	r3, #0
 8105480:	d102      	bne.n	8105488 <xQueueGenericCreateStatic+0x78>
 8105482:	68bb      	ldr	r3, [r7, #8]
 8105484:	2b00      	cmp	r3, #0
 8105486:	d101      	bne.n	810548c <xQueueGenericCreateStatic+0x7c>
 8105488:	2301      	movs	r3, #1
 810548a:	e000      	b.n	810548e <xQueueGenericCreateStatic+0x7e>
 810548c:	2300      	movs	r3, #0
 810548e:	2b00      	cmp	r3, #0
 8105490:	d109      	bne.n	81054a6 <xQueueGenericCreateStatic+0x96>
 8105492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105496:	f383 8811 	msr	BASEPRI, r3
 810549a:	f3bf 8f6f 	isb	sy
 810549e:	f3bf 8f4f 	dsb	sy
 81054a2:	61fb      	str	r3, [r7, #28]
 81054a4:	e7fe      	b.n	81054a4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 81054a6:	2350      	movs	r3, #80	; 0x50
 81054a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 81054aa:	697b      	ldr	r3, [r7, #20]
 81054ac:	2b50      	cmp	r3, #80	; 0x50
 81054ae:	d009      	beq.n	81054c4 <xQueueGenericCreateStatic+0xb4>
 81054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81054b4:	f383 8811 	msr	BASEPRI, r3
 81054b8:	f3bf 8f6f 	isb	sy
 81054bc:	f3bf 8f4f 	dsb	sy
 81054c0:	61bb      	str	r3, [r7, #24]
 81054c2:	e7fe      	b.n	81054c2 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 81054c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 81054c6:	683b      	ldr	r3, [r7, #0]
 81054c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 81054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d00d      	beq.n	81054ec <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 81054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054d2:	2201      	movs	r2, #1
 81054d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 81054d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 81054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054de:	9300      	str	r3, [sp, #0]
 81054e0:	4613      	mov	r3, r2
 81054e2:	687a      	ldr	r2, [r7, #4]
 81054e4:	68b9      	ldr	r1, [r7, #8]
 81054e6:	68f8      	ldr	r0, [r7, #12]
 81054e8:	f000 f805 	bl	81054f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 81054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 81054ee:	4618      	mov	r0, r3
 81054f0:	3730      	adds	r7, #48	; 0x30
 81054f2:	46bd      	mov	sp, r7
 81054f4:	bd80      	pop	{r7, pc}

081054f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 81054f6:	b580      	push	{r7, lr}
 81054f8:	b084      	sub	sp, #16
 81054fa:	af00      	add	r7, sp, #0
 81054fc:	60f8      	str	r0, [r7, #12]
 81054fe:	60b9      	str	r1, [r7, #8]
 8105500:	607a      	str	r2, [r7, #4]
 8105502:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8105504:	68bb      	ldr	r3, [r7, #8]
 8105506:	2b00      	cmp	r3, #0
 8105508:	d103      	bne.n	8105512 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810550a:	69bb      	ldr	r3, [r7, #24]
 810550c:	69ba      	ldr	r2, [r7, #24]
 810550e:	601a      	str	r2, [r3, #0]
 8105510:	e002      	b.n	8105518 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8105512:	69bb      	ldr	r3, [r7, #24]
 8105514:	687a      	ldr	r2, [r7, #4]
 8105516:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8105518:	69bb      	ldr	r3, [r7, #24]
 810551a:	68fa      	ldr	r2, [r7, #12]
 810551c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810551e:	69bb      	ldr	r3, [r7, #24]
 8105520:	68ba      	ldr	r2, [r7, #8]
 8105522:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8105524:	2101      	movs	r1, #1
 8105526:	69b8      	ldr	r0, [r7, #24]
 8105528:	f7ff ff0a 	bl	8105340 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810552c:	69bb      	ldr	r3, [r7, #24]
 810552e:	78fa      	ldrb	r2, [r7, #3]
 8105530:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8105534:	bf00      	nop
 8105536:	3710      	adds	r7, #16
 8105538:	46bd      	mov	sp, r7
 810553a:	bd80      	pop	{r7, pc}

0810553c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810553c:	b580      	push	{r7, lr}
 810553e:	b08e      	sub	sp, #56	; 0x38
 8105540:	af00      	add	r7, sp, #0
 8105542:	60f8      	str	r0, [r7, #12]
 8105544:	60b9      	str	r1, [r7, #8]
 8105546:	607a      	str	r2, [r7, #4]
 8105548:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810554a:	2300      	movs	r3, #0
 810554c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810554e:	68fb      	ldr	r3, [r7, #12]
 8105550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8105552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105554:	2b00      	cmp	r3, #0
 8105556:	d109      	bne.n	810556c <xQueueGenericSend+0x30>
 8105558:	f04f 0350 	mov.w	r3, #80	; 0x50
 810555c:	f383 8811 	msr	BASEPRI, r3
 8105560:	f3bf 8f6f 	isb	sy
 8105564:	f3bf 8f4f 	dsb	sy
 8105568:	62bb      	str	r3, [r7, #40]	; 0x28
 810556a:	e7fe      	b.n	810556a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810556c:	68bb      	ldr	r3, [r7, #8]
 810556e:	2b00      	cmp	r3, #0
 8105570:	d103      	bne.n	810557a <xQueueGenericSend+0x3e>
 8105572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105576:	2b00      	cmp	r3, #0
 8105578:	d101      	bne.n	810557e <xQueueGenericSend+0x42>
 810557a:	2301      	movs	r3, #1
 810557c:	e000      	b.n	8105580 <xQueueGenericSend+0x44>
 810557e:	2300      	movs	r3, #0
 8105580:	2b00      	cmp	r3, #0
 8105582:	d109      	bne.n	8105598 <xQueueGenericSend+0x5c>
 8105584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105588:	f383 8811 	msr	BASEPRI, r3
 810558c:	f3bf 8f6f 	isb	sy
 8105590:	f3bf 8f4f 	dsb	sy
 8105594:	627b      	str	r3, [r7, #36]	; 0x24
 8105596:	e7fe      	b.n	8105596 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8105598:	683b      	ldr	r3, [r7, #0]
 810559a:	2b02      	cmp	r3, #2
 810559c:	d103      	bne.n	81055a6 <xQueueGenericSend+0x6a>
 810559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81055a2:	2b01      	cmp	r3, #1
 81055a4:	d101      	bne.n	81055aa <xQueueGenericSend+0x6e>
 81055a6:	2301      	movs	r3, #1
 81055a8:	e000      	b.n	81055ac <xQueueGenericSend+0x70>
 81055aa:	2300      	movs	r3, #0
 81055ac:	2b00      	cmp	r3, #0
 81055ae:	d109      	bne.n	81055c4 <xQueueGenericSend+0x88>
 81055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81055b4:	f383 8811 	msr	BASEPRI, r3
 81055b8:	f3bf 8f6f 	isb	sy
 81055bc:	f3bf 8f4f 	dsb	sy
 81055c0:	623b      	str	r3, [r7, #32]
 81055c2:	e7fe      	b.n	81055c2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81055c4:	f001 f998 	bl	81068f8 <xTaskGetSchedulerState>
 81055c8:	4603      	mov	r3, r0
 81055ca:	2b00      	cmp	r3, #0
 81055cc:	d102      	bne.n	81055d4 <xQueueGenericSend+0x98>
 81055ce:	687b      	ldr	r3, [r7, #4]
 81055d0:	2b00      	cmp	r3, #0
 81055d2:	d101      	bne.n	81055d8 <xQueueGenericSend+0x9c>
 81055d4:	2301      	movs	r3, #1
 81055d6:	e000      	b.n	81055da <xQueueGenericSend+0x9e>
 81055d8:	2300      	movs	r3, #0
 81055da:	2b00      	cmp	r3, #0
 81055dc:	d109      	bne.n	81055f2 <xQueueGenericSend+0xb6>
 81055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 81055e2:	f383 8811 	msr	BASEPRI, r3
 81055e6:	f3bf 8f6f 	isb	sy
 81055ea:	f3bf 8f4f 	dsb	sy
 81055ee:	61fb      	str	r3, [r7, #28]
 81055f0:	e7fe      	b.n	81055f0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81055f2:	f7ff fd8b 	bl	810510c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81055f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81055fe:	429a      	cmp	r2, r3
 8105600:	d302      	bcc.n	8105608 <xQueueGenericSend+0xcc>
 8105602:	683b      	ldr	r3, [r7, #0]
 8105604:	2b02      	cmp	r3, #2
 8105606:	d129      	bne.n	810565c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8105608:	683a      	ldr	r2, [r7, #0]
 810560a:	68b9      	ldr	r1, [r7, #8]
 810560c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810560e:	f000 f9ff 	bl	8105a10 <prvCopyDataToQueue>
 8105612:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105618:	2b00      	cmp	r3, #0
 810561a:	d010      	beq.n	810563e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810561e:	3324      	adds	r3, #36	; 0x24
 8105620:	4618      	mov	r0, r3
 8105622:	f000 ffb3 	bl	810658c <xTaskRemoveFromEventList>
 8105626:	4603      	mov	r3, r0
 8105628:	2b00      	cmp	r3, #0
 810562a:	d013      	beq.n	8105654 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810562c:	4b3f      	ldr	r3, [pc, #252]	; (810572c <xQueueGenericSend+0x1f0>)
 810562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105632:	601a      	str	r2, [r3, #0]
 8105634:	f3bf 8f4f 	dsb	sy
 8105638:	f3bf 8f6f 	isb	sy
 810563c:	e00a      	b.n	8105654 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105640:	2b00      	cmp	r3, #0
 8105642:	d007      	beq.n	8105654 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8105644:	4b39      	ldr	r3, [pc, #228]	; (810572c <xQueueGenericSend+0x1f0>)
 8105646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810564a:	601a      	str	r2, [r3, #0]
 810564c:	f3bf 8f4f 	dsb	sy
 8105650:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8105654:	f7ff fd88 	bl	8105168 <vPortExitCritical>
				return pdPASS;
 8105658:	2301      	movs	r3, #1
 810565a:	e063      	b.n	8105724 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810565c:	687b      	ldr	r3, [r7, #4]
 810565e:	2b00      	cmp	r3, #0
 8105660:	d103      	bne.n	810566a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8105662:	f7ff fd81 	bl	8105168 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8105666:	2300      	movs	r3, #0
 8105668:	e05c      	b.n	8105724 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810566c:	2b00      	cmp	r3, #0
 810566e:	d106      	bne.n	810567e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8105670:	f107 0314 	add.w	r3, r7, #20
 8105674:	4618      	mov	r0, r3
 8105676:	f000 ffeb 	bl	8106650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810567a:	2301      	movs	r3, #1
 810567c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810567e:	f7ff fd73 	bl	8105168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8105682:	f000 fd67 	bl	8106154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8105686:	f7ff fd41 	bl	810510c <vPortEnterCritical>
 810568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810568c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8105690:	b25b      	sxtb	r3, r3
 8105692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105696:	d103      	bne.n	81056a0 <xQueueGenericSend+0x164>
 8105698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810569a:	2200      	movs	r2, #0
 810569c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81056a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81056a6:	b25b      	sxtb	r3, r3
 81056a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81056ac:	d103      	bne.n	81056b6 <xQueueGenericSend+0x17a>
 81056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81056b0:	2200      	movs	r2, #0
 81056b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81056b6:	f7ff fd57 	bl	8105168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 81056ba:	1d3a      	adds	r2, r7, #4
 81056bc:	f107 0314 	add.w	r3, r7, #20
 81056c0:	4611      	mov	r1, r2
 81056c2:	4618      	mov	r0, r3
 81056c4:	f000 ffda 	bl	810667c <xTaskCheckForTimeOut>
 81056c8:	4603      	mov	r3, r0
 81056ca:	2b00      	cmp	r3, #0
 81056cc:	d124      	bne.n	8105718 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 81056ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81056d0:	f000 fa96 	bl	8105c00 <prvIsQueueFull>
 81056d4:	4603      	mov	r3, r0
 81056d6:	2b00      	cmp	r3, #0
 81056d8:	d018      	beq.n	810570c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 81056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81056dc:	3310      	adds	r3, #16
 81056de:	687a      	ldr	r2, [r7, #4]
 81056e0:	4611      	mov	r1, r2
 81056e2:	4618      	mov	r0, r3
 81056e4:	f000 ff04 	bl	81064f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 81056e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81056ea:	f000 fa21 	bl	8105b30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 81056ee:	f000 fd3f 	bl	8106170 <xTaskResumeAll>
 81056f2:	4603      	mov	r3, r0
 81056f4:	2b00      	cmp	r3, #0
 81056f6:	f47f af7c 	bne.w	81055f2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 81056fa:	4b0c      	ldr	r3, [pc, #48]	; (810572c <xQueueGenericSend+0x1f0>)
 81056fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105700:	601a      	str	r2, [r3, #0]
 8105702:	f3bf 8f4f 	dsb	sy
 8105706:	f3bf 8f6f 	isb	sy
 810570a:	e772      	b.n	81055f2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810570c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810570e:	f000 fa0f 	bl	8105b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8105712:	f000 fd2d 	bl	8106170 <xTaskResumeAll>
 8105716:	e76c      	b.n	81055f2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8105718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810571a:	f000 fa09 	bl	8105b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810571e:	f000 fd27 	bl	8106170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8105722:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8105724:	4618      	mov	r0, r3
 8105726:	3738      	adds	r7, #56	; 0x38
 8105728:	46bd      	mov	sp, r7
 810572a:	bd80      	pop	{r7, pc}
 810572c:	e000ed04 	.word	0xe000ed04

08105730 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8105730:	b580      	push	{r7, lr}
 8105732:	b08e      	sub	sp, #56	; 0x38
 8105734:	af00      	add	r7, sp, #0
 8105736:	60f8      	str	r0, [r7, #12]
 8105738:	60b9      	str	r1, [r7, #8]
 810573a:	607a      	str	r2, [r7, #4]
 810573c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810573e:	68fb      	ldr	r3, [r7, #12]
 8105740:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8105742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105744:	2b00      	cmp	r3, #0
 8105746:	d109      	bne.n	810575c <xQueueGenericSendFromISR+0x2c>
 8105748:	f04f 0350 	mov.w	r3, #80	; 0x50
 810574c:	f383 8811 	msr	BASEPRI, r3
 8105750:	f3bf 8f6f 	isb	sy
 8105754:	f3bf 8f4f 	dsb	sy
 8105758:	627b      	str	r3, [r7, #36]	; 0x24
 810575a:	e7fe      	b.n	810575a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810575c:	68bb      	ldr	r3, [r7, #8]
 810575e:	2b00      	cmp	r3, #0
 8105760:	d103      	bne.n	810576a <xQueueGenericSendFromISR+0x3a>
 8105762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105766:	2b00      	cmp	r3, #0
 8105768:	d101      	bne.n	810576e <xQueueGenericSendFromISR+0x3e>
 810576a:	2301      	movs	r3, #1
 810576c:	e000      	b.n	8105770 <xQueueGenericSendFromISR+0x40>
 810576e:	2300      	movs	r3, #0
 8105770:	2b00      	cmp	r3, #0
 8105772:	d109      	bne.n	8105788 <xQueueGenericSendFromISR+0x58>
 8105774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105778:	f383 8811 	msr	BASEPRI, r3
 810577c:	f3bf 8f6f 	isb	sy
 8105780:	f3bf 8f4f 	dsb	sy
 8105784:	623b      	str	r3, [r7, #32]
 8105786:	e7fe      	b.n	8105786 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8105788:	683b      	ldr	r3, [r7, #0]
 810578a:	2b02      	cmp	r3, #2
 810578c:	d103      	bne.n	8105796 <xQueueGenericSendFromISR+0x66>
 810578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105792:	2b01      	cmp	r3, #1
 8105794:	d101      	bne.n	810579a <xQueueGenericSendFromISR+0x6a>
 8105796:	2301      	movs	r3, #1
 8105798:	e000      	b.n	810579c <xQueueGenericSendFromISR+0x6c>
 810579a:	2300      	movs	r3, #0
 810579c:	2b00      	cmp	r3, #0
 810579e:	d109      	bne.n	81057b4 <xQueueGenericSendFromISR+0x84>
 81057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 81057a4:	f383 8811 	msr	BASEPRI, r3
 81057a8:	f3bf 8f6f 	isb	sy
 81057ac:	f3bf 8f4f 	dsb	sy
 81057b0:	61fb      	str	r3, [r7, #28]
 81057b2:	e7fe      	b.n	81057b2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 81057b4:	f7ff fd86 	bl	81052c4 <vPortValidateInterruptPriority>
	__asm volatile
 81057b8:	f3ef 8211 	mrs	r2, BASEPRI
 81057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81057c0:	f383 8811 	msr	BASEPRI, r3
 81057c4:	f3bf 8f6f 	isb	sy
 81057c8:	f3bf 8f4f 	dsb	sy
 81057cc:	61ba      	str	r2, [r7, #24]
 81057ce:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 81057d0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 81057d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 81057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81057d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81057da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81057dc:	429a      	cmp	r2, r3
 81057de:	d302      	bcc.n	81057e6 <xQueueGenericSendFromISR+0xb6>
 81057e0:	683b      	ldr	r3, [r7, #0]
 81057e2:	2b02      	cmp	r3, #2
 81057e4:	d12c      	bne.n	8105840 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 81057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81057e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 81057ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 81057f0:	683a      	ldr	r2, [r7, #0]
 81057f2:	68b9      	ldr	r1, [r7, #8]
 81057f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81057f6:	f000 f90b 	bl	8105a10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 81057fa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 81057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105802:	d112      	bne.n	810582a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105808:	2b00      	cmp	r3, #0
 810580a:	d016      	beq.n	810583a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810580e:	3324      	adds	r3, #36	; 0x24
 8105810:	4618      	mov	r0, r3
 8105812:	f000 febb 	bl	810658c <xTaskRemoveFromEventList>
 8105816:	4603      	mov	r3, r0
 8105818:	2b00      	cmp	r3, #0
 810581a:	d00e      	beq.n	810583a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810581c:	687b      	ldr	r3, [r7, #4]
 810581e:	2b00      	cmp	r3, #0
 8105820:	d00b      	beq.n	810583a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8105822:	687b      	ldr	r3, [r7, #4]
 8105824:	2201      	movs	r2, #1
 8105826:	601a      	str	r2, [r3, #0]
 8105828:	e007      	b.n	810583a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810582a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810582e:	3301      	adds	r3, #1
 8105830:	b2db      	uxtb	r3, r3
 8105832:	b25a      	sxtb	r2, r3
 8105834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 810583a:	2301      	movs	r3, #1
 810583c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 810583e:	e001      	b.n	8105844 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8105840:	2300      	movs	r3, #0
 8105842:	637b      	str	r3, [r7, #52]	; 0x34
 8105844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105846:	613b      	str	r3, [r7, #16]
	__asm volatile
 8105848:	693b      	ldr	r3, [r7, #16]
 810584a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8105850:	4618      	mov	r0, r3
 8105852:	3738      	adds	r7, #56	; 0x38
 8105854:	46bd      	mov	sp, r7
 8105856:	bd80      	pop	{r7, pc}

08105858 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8105858:	b580      	push	{r7, lr}
 810585a:	b08c      	sub	sp, #48	; 0x30
 810585c:	af00      	add	r7, sp, #0
 810585e:	60f8      	str	r0, [r7, #12]
 8105860:	60b9      	str	r1, [r7, #8]
 8105862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8105864:	2300      	movs	r3, #0
 8105866:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810586e:	2b00      	cmp	r3, #0
 8105870:	d109      	bne.n	8105886 <xQueueReceive+0x2e>
	__asm volatile
 8105872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105876:	f383 8811 	msr	BASEPRI, r3
 810587a:	f3bf 8f6f 	isb	sy
 810587e:	f3bf 8f4f 	dsb	sy
 8105882:	623b      	str	r3, [r7, #32]
 8105884:	e7fe      	b.n	8105884 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8105886:	68bb      	ldr	r3, [r7, #8]
 8105888:	2b00      	cmp	r3, #0
 810588a:	d103      	bne.n	8105894 <xQueueReceive+0x3c>
 810588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810588e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105890:	2b00      	cmp	r3, #0
 8105892:	d101      	bne.n	8105898 <xQueueReceive+0x40>
 8105894:	2301      	movs	r3, #1
 8105896:	e000      	b.n	810589a <xQueueReceive+0x42>
 8105898:	2300      	movs	r3, #0
 810589a:	2b00      	cmp	r3, #0
 810589c:	d109      	bne.n	81058b2 <xQueueReceive+0x5a>
 810589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 81058a2:	f383 8811 	msr	BASEPRI, r3
 81058a6:	f3bf 8f6f 	isb	sy
 81058aa:	f3bf 8f4f 	dsb	sy
 81058ae:	61fb      	str	r3, [r7, #28]
 81058b0:	e7fe      	b.n	81058b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 81058b2:	f001 f821 	bl	81068f8 <xTaskGetSchedulerState>
 81058b6:	4603      	mov	r3, r0
 81058b8:	2b00      	cmp	r3, #0
 81058ba:	d102      	bne.n	81058c2 <xQueueReceive+0x6a>
 81058bc:	687b      	ldr	r3, [r7, #4]
 81058be:	2b00      	cmp	r3, #0
 81058c0:	d101      	bne.n	81058c6 <xQueueReceive+0x6e>
 81058c2:	2301      	movs	r3, #1
 81058c4:	e000      	b.n	81058c8 <xQueueReceive+0x70>
 81058c6:	2300      	movs	r3, #0
 81058c8:	2b00      	cmp	r3, #0
 81058ca:	d109      	bne.n	81058e0 <xQueueReceive+0x88>
 81058cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 81058d0:	f383 8811 	msr	BASEPRI, r3
 81058d4:	f3bf 8f6f 	isb	sy
 81058d8:	f3bf 8f4f 	dsb	sy
 81058dc:	61bb      	str	r3, [r7, #24]
 81058de:	e7fe      	b.n	81058de <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 81058e0:	f7ff fc14 	bl	810510c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 81058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 81058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81058ec:	2b00      	cmp	r3, #0
 81058ee:	d01f      	beq.n	8105930 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 81058f0:	68b9      	ldr	r1, [r7, #8]
 81058f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81058f4:	f000 f8f6 	bl	8105ae4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 81058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81058fa:	1e5a      	subs	r2, r3, #1
 81058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8105900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105902:	691b      	ldr	r3, [r3, #16]
 8105904:	2b00      	cmp	r3, #0
 8105906:	d00f      	beq.n	8105928 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810590a:	3310      	adds	r3, #16
 810590c:	4618      	mov	r0, r3
 810590e:	f000 fe3d 	bl	810658c <xTaskRemoveFromEventList>
 8105912:	4603      	mov	r3, r0
 8105914:	2b00      	cmp	r3, #0
 8105916:	d007      	beq.n	8105928 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8105918:	4b3c      	ldr	r3, [pc, #240]	; (8105a0c <xQueueReceive+0x1b4>)
 810591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810591e:	601a      	str	r2, [r3, #0]
 8105920:	f3bf 8f4f 	dsb	sy
 8105924:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8105928:	f7ff fc1e 	bl	8105168 <vPortExitCritical>
				return pdPASS;
 810592c:	2301      	movs	r3, #1
 810592e:	e069      	b.n	8105a04 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8105930:	687b      	ldr	r3, [r7, #4]
 8105932:	2b00      	cmp	r3, #0
 8105934:	d103      	bne.n	810593e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8105936:	f7ff fc17 	bl	8105168 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810593a:	2300      	movs	r3, #0
 810593c:	e062      	b.n	8105a04 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 810593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105940:	2b00      	cmp	r3, #0
 8105942:	d106      	bne.n	8105952 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8105944:	f107 0310 	add.w	r3, r7, #16
 8105948:	4618      	mov	r0, r3
 810594a:	f000 fe81 	bl	8106650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810594e:	2301      	movs	r3, #1
 8105950:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8105952:	f7ff fc09 	bl	8105168 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8105956:	f000 fbfd 	bl	8106154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810595a:	f7ff fbd7 	bl	810510c <vPortEnterCritical>
 810595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8105964:	b25b      	sxtb	r3, r3
 8105966:	f1b3 3fff 	cmp.w	r3, #4294967295
 810596a:	d103      	bne.n	8105974 <xQueueReceive+0x11c>
 810596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810596e:	2200      	movs	r2, #0
 8105970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810597a:	b25b      	sxtb	r3, r3
 810597c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105980:	d103      	bne.n	810598a <xQueueReceive+0x132>
 8105982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105984:	2200      	movs	r2, #0
 8105986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810598a:	f7ff fbed 	bl	8105168 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810598e:	1d3a      	adds	r2, r7, #4
 8105990:	f107 0310 	add.w	r3, r7, #16
 8105994:	4611      	mov	r1, r2
 8105996:	4618      	mov	r0, r3
 8105998:	f000 fe70 	bl	810667c <xTaskCheckForTimeOut>
 810599c:	4603      	mov	r3, r0
 810599e:	2b00      	cmp	r3, #0
 81059a0:	d123      	bne.n	81059ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81059a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81059a4:	f000 f916 	bl	8105bd4 <prvIsQueueEmpty>
 81059a8:	4603      	mov	r3, r0
 81059aa:	2b00      	cmp	r3, #0
 81059ac:	d017      	beq.n	81059de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 81059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81059b0:	3324      	adds	r3, #36	; 0x24
 81059b2:	687a      	ldr	r2, [r7, #4]
 81059b4:	4611      	mov	r1, r2
 81059b6:	4618      	mov	r0, r3
 81059b8:	f000 fd9a 	bl	81064f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 81059bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81059be:	f000 f8b7 	bl	8105b30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 81059c2:	f000 fbd5 	bl	8106170 <xTaskResumeAll>
 81059c6:	4603      	mov	r3, r0
 81059c8:	2b00      	cmp	r3, #0
 81059ca:	d189      	bne.n	81058e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 81059cc:	4b0f      	ldr	r3, [pc, #60]	; (8105a0c <xQueueReceive+0x1b4>)
 81059ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 81059d2:	601a      	str	r2, [r3, #0]
 81059d4:	f3bf 8f4f 	dsb	sy
 81059d8:	f3bf 8f6f 	isb	sy
 81059dc:	e780      	b.n	81058e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 81059de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81059e0:	f000 f8a6 	bl	8105b30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 81059e4:	f000 fbc4 	bl	8106170 <xTaskResumeAll>
 81059e8:	e77a      	b.n	81058e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 81059ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81059ec:	f000 f8a0 	bl	8105b30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 81059f0:	f000 fbbe 	bl	8106170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 81059f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81059f6:	f000 f8ed 	bl	8105bd4 <prvIsQueueEmpty>
 81059fa:	4603      	mov	r3, r0
 81059fc:	2b00      	cmp	r3, #0
 81059fe:	f43f af6f 	beq.w	81058e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8105a02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8105a04:	4618      	mov	r0, r3
 8105a06:	3730      	adds	r7, #48	; 0x30
 8105a08:	46bd      	mov	sp, r7
 8105a0a:	bd80      	pop	{r7, pc}
 8105a0c:	e000ed04 	.word	0xe000ed04

08105a10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8105a10:	b580      	push	{r7, lr}
 8105a12:	b086      	sub	sp, #24
 8105a14:	af00      	add	r7, sp, #0
 8105a16:	60f8      	str	r0, [r7, #12]
 8105a18:	60b9      	str	r1, [r7, #8]
 8105a1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8105a1c:	2300      	movs	r3, #0
 8105a1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8105a20:	68fb      	ldr	r3, [r7, #12]
 8105a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105a24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8105a26:	68fb      	ldr	r3, [r7, #12]
 8105a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a2a:	2b00      	cmp	r3, #0
 8105a2c:	d10d      	bne.n	8105a4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8105a2e:	68fb      	ldr	r3, [r7, #12]
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	2b00      	cmp	r3, #0
 8105a34:	d14d      	bne.n	8105ad2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8105a36:	68fb      	ldr	r3, [r7, #12]
 8105a38:	689b      	ldr	r3, [r3, #8]
 8105a3a:	4618      	mov	r0, r3
 8105a3c:	f000 ff7a 	bl	8106934 <xTaskPriorityDisinherit>
 8105a40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8105a42:	68fb      	ldr	r3, [r7, #12]
 8105a44:	2200      	movs	r2, #0
 8105a46:	609a      	str	r2, [r3, #8]
 8105a48:	e043      	b.n	8105ad2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	2b00      	cmp	r3, #0
 8105a4e:	d119      	bne.n	8105a84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8105a50:	68fb      	ldr	r3, [r7, #12]
 8105a52:	6858      	ldr	r0, [r3, #4]
 8105a54:	68fb      	ldr	r3, [r7, #12]
 8105a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a58:	461a      	mov	r2, r3
 8105a5a:	68b9      	ldr	r1, [r7, #8]
 8105a5c:	f001 fb94 	bl	8107188 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8105a60:	68fb      	ldr	r3, [r7, #12]
 8105a62:	685a      	ldr	r2, [r3, #4]
 8105a64:	68fb      	ldr	r3, [r7, #12]
 8105a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a68:	441a      	add	r2, r3
 8105a6a:	68fb      	ldr	r3, [r7, #12]
 8105a6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8105a6e:	68fb      	ldr	r3, [r7, #12]
 8105a70:	685a      	ldr	r2, [r3, #4]
 8105a72:	68fb      	ldr	r3, [r7, #12]
 8105a74:	689b      	ldr	r3, [r3, #8]
 8105a76:	429a      	cmp	r2, r3
 8105a78:	d32b      	bcc.n	8105ad2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8105a7a:	68fb      	ldr	r3, [r7, #12]
 8105a7c:	681a      	ldr	r2, [r3, #0]
 8105a7e:	68fb      	ldr	r3, [r7, #12]
 8105a80:	605a      	str	r2, [r3, #4]
 8105a82:	e026      	b.n	8105ad2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8105a84:	68fb      	ldr	r3, [r7, #12]
 8105a86:	68d8      	ldr	r0, [r3, #12]
 8105a88:	68fb      	ldr	r3, [r7, #12]
 8105a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a8c:	461a      	mov	r2, r3
 8105a8e:	68b9      	ldr	r1, [r7, #8]
 8105a90:	f001 fb7a 	bl	8107188 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	68da      	ldr	r2, [r3, #12]
 8105a98:	68fb      	ldr	r3, [r7, #12]
 8105a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a9c:	425b      	negs	r3, r3
 8105a9e:	441a      	add	r2, r3
 8105aa0:	68fb      	ldr	r3, [r7, #12]
 8105aa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8105aa4:	68fb      	ldr	r3, [r7, #12]
 8105aa6:	68da      	ldr	r2, [r3, #12]
 8105aa8:	68fb      	ldr	r3, [r7, #12]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	429a      	cmp	r2, r3
 8105aae:	d207      	bcs.n	8105ac0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8105ab0:	68fb      	ldr	r3, [r7, #12]
 8105ab2:	689a      	ldr	r2, [r3, #8]
 8105ab4:	68fb      	ldr	r3, [r7, #12]
 8105ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ab8:	425b      	negs	r3, r3
 8105aba:	441a      	add	r2, r3
 8105abc:	68fb      	ldr	r3, [r7, #12]
 8105abe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	2b02      	cmp	r3, #2
 8105ac4:	d105      	bne.n	8105ad2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8105ac6:	693b      	ldr	r3, [r7, #16]
 8105ac8:	2b00      	cmp	r3, #0
 8105aca:	d002      	beq.n	8105ad2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8105acc:	693b      	ldr	r3, [r7, #16]
 8105ace:	3b01      	subs	r3, #1
 8105ad0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8105ad2:	693b      	ldr	r3, [r7, #16]
 8105ad4:	1c5a      	adds	r2, r3, #1
 8105ad6:	68fb      	ldr	r3, [r7, #12]
 8105ad8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8105ada:	697b      	ldr	r3, [r7, #20]
}
 8105adc:	4618      	mov	r0, r3
 8105ade:	3718      	adds	r7, #24
 8105ae0:	46bd      	mov	sp, r7
 8105ae2:	bd80      	pop	{r7, pc}

08105ae4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8105ae4:	b580      	push	{r7, lr}
 8105ae6:	b082      	sub	sp, #8
 8105ae8:	af00      	add	r7, sp, #0
 8105aea:	6078      	str	r0, [r7, #4]
 8105aec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8105aee:	687b      	ldr	r3, [r7, #4]
 8105af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105af2:	2b00      	cmp	r3, #0
 8105af4:	d018      	beq.n	8105b28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	68da      	ldr	r2, [r3, #12]
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105afe:	441a      	add	r2, r3
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	68da      	ldr	r2, [r3, #12]
 8105b08:	687b      	ldr	r3, [r7, #4]
 8105b0a:	689b      	ldr	r3, [r3, #8]
 8105b0c:	429a      	cmp	r2, r3
 8105b0e:	d303      	bcc.n	8105b18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8105b10:	687b      	ldr	r3, [r7, #4]
 8105b12:	681a      	ldr	r2, [r3, #0]
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	68d9      	ldr	r1, [r3, #12]
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105b20:	461a      	mov	r2, r3
 8105b22:	6838      	ldr	r0, [r7, #0]
 8105b24:	f001 fb30 	bl	8107188 <memcpy>
	}
}
 8105b28:	bf00      	nop
 8105b2a:	3708      	adds	r7, #8
 8105b2c:	46bd      	mov	sp, r7
 8105b2e:	bd80      	pop	{r7, pc}

08105b30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8105b30:	b580      	push	{r7, lr}
 8105b32:	b084      	sub	sp, #16
 8105b34:	af00      	add	r7, sp, #0
 8105b36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8105b38:	f7ff fae8 	bl	810510c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8105b42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105b44:	e011      	b.n	8105b6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105b4a:	2b00      	cmp	r3, #0
 8105b4c:	d012      	beq.n	8105b74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	3324      	adds	r3, #36	; 0x24
 8105b52:	4618      	mov	r0, r3
 8105b54:	f000 fd1a 	bl	810658c <xTaskRemoveFromEventList>
 8105b58:	4603      	mov	r3, r0
 8105b5a:	2b00      	cmp	r3, #0
 8105b5c:	d001      	beq.n	8105b62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8105b5e:	f000 fded 	bl	810673c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8105b62:	7bfb      	ldrb	r3, [r7, #15]
 8105b64:	3b01      	subs	r3, #1
 8105b66:	b2db      	uxtb	r3, r3
 8105b68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8105b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8105b6e:	2b00      	cmp	r3, #0
 8105b70:	dce9      	bgt.n	8105b46 <prvUnlockQueue+0x16>
 8105b72:	e000      	b.n	8105b76 <prvUnlockQueue+0x46>
					break;
 8105b74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8105b76:	687b      	ldr	r3, [r7, #4]
 8105b78:	22ff      	movs	r2, #255	; 0xff
 8105b7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8105b7e:	f7ff faf3 	bl	8105168 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8105b82:	f7ff fac3 	bl	810510c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8105b86:	687b      	ldr	r3, [r7, #4]
 8105b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8105b8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8105b8e:	e011      	b.n	8105bb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	691b      	ldr	r3, [r3, #16]
 8105b94:	2b00      	cmp	r3, #0
 8105b96:	d012      	beq.n	8105bbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	3310      	adds	r3, #16
 8105b9c:	4618      	mov	r0, r3
 8105b9e:	f000 fcf5 	bl	810658c <xTaskRemoveFromEventList>
 8105ba2:	4603      	mov	r3, r0
 8105ba4:	2b00      	cmp	r3, #0
 8105ba6:	d001      	beq.n	8105bac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8105ba8:	f000 fdc8 	bl	810673c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8105bac:	7bbb      	ldrb	r3, [r7, #14]
 8105bae:	3b01      	subs	r3, #1
 8105bb0:	b2db      	uxtb	r3, r3
 8105bb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8105bb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8105bb8:	2b00      	cmp	r3, #0
 8105bba:	dce9      	bgt.n	8105b90 <prvUnlockQueue+0x60>
 8105bbc:	e000      	b.n	8105bc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8105bbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8105bc0:	687b      	ldr	r3, [r7, #4]
 8105bc2:	22ff      	movs	r2, #255	; 0xff
 8105bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8105bc8:	f7ff face 	bl	8105168 <vPortExitCritical>
}
 8105bcc:	bf00      	nop
 8105bce:	3710      	adds	r7, #16
 8105bd0:	46bd      	mov	sp, r7
 8105bd2:	bd80      	pop	{r7, pc}

08105bd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8105bd4:	b580      	push	{r7, lr}
 8105bd6:	b084      	sub	sp, #16
 8105bd8:	af00      	add	r7, sp, #0
 8105bda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105bdc:	f7ff fa96 	bl	810510c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105be4:	2b00      	cmp	r3, #0
 8105be6:	d102      	bne.n	8105bee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8105be8:	2301      	movs	r3, #1
 8105bea:	60fb      	str	r3, [r7, #12]
 8105bec:	e001      	b.n	8105bf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8105bee:	2300      	movs	r3, #0
 8105bf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8105bf2:	f7ff fab9 	bl	8105168 <vPortExitCritical>

	return xReturn;
 8105bf6:	68fb      	ldr	r3, [r7, #12]
}
 8105bf8:	4618      	mov	r0, r3
 8105bfa:	3710      	adds	r7, #16
 8105bfc:	46bd      	mov	sp, r7
 8105bfe:	bd80      	pop	{r7, pc}

08105c00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8105c00:	b580      	push	{r7, lr}
 8105c02:	b084      	sub	sp, #16
 8105c04:	af00      	add	r7, sp, #0
 8105c06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8105c08:	f7ff fa80 	bl	810510c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c14:	429a      	cmp	r2, r3
 8105c16:	d102      	bne.n	8105c1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8105c18:	2301      	movs	r3, #1
 8105c1a:	60fb      	str	r3, [r7, #12]
 8105c1c:	e001      	b.n	8105c22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8105c1e:	2300      	movs	r3, #0
 8105c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8105c22:	f7ff faa1 	bl	8105168 <vPortExitCritical>

	return xReturn;
 8105c26:	68fb      	ldr	r3, [r7, #12]
}
 8105c28:	4618      	mov	r0, r3
 8105c2a:	3710      	adds	r7, #16
 8105c2c:	46bd      	mov	sp, r7
 8105c2e:	bd80      	pop	{r7, pc}

08105c30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8105c30:	b480      	push	{r7}
 8105c32:	b085      	sub	sp, #20
 8105c34:	af00      	add	r7, sp, #0
 8105c36:	6078      	str	r0, [r7, #4]
 8105c38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105c3a:	2300      	movs	r3, #0
 8105c3c:	60fb      	str	r3, [r7, #12]
 8105c3e:	e014      	b.n	8105c6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8105c40:	4a0e      	ldr	r2, [pc, #56]	; (8105c7c <vQueueAddToRegistry+0x4c>)
 8105c42:	68fb      	ldr	r3, [r7, #12]
 8105c44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8105c48:	2b00      	cmp	r3, #0
 8105c4a:	d10b      	bne.n	8105c64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8105c4c:	490b      	ldr	r1, [pc, #44]	; (8105c7c <vQueueAddToRegistry+0x4c>)
 8105c4e:	68fb      	ldr	r3, [r7, #12]
 8105c50:	683a      	ldr	r2, [r7, #0]
 8105c52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8105c56:	4a09      	ldr	r2, [pc, #36]	; (8105c7c <vQueueAddToRegistry+0x4c>)
 8105c58:	68fb      	ldr	r3, [r7, #12]
 8105c5a:	00db      	lsls	r3, r3, #3
 8105c5c:	4413      	add	r3, r2
 8105c5e:	687a      	ldr	r2, [r7, #4]
 8105c60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8105c62:	e005      	b.n	8105c70 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8105c64:	68fb      	ldr	r3, [r7, #12]
 8105c66:	3301      	adds	r3, #1
 8105c68:	60fb      	str	r3, [r7, #12]
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	2b07      	cmp	r3, #7
 8105c6e:	d9e7      	bls.n	8105c40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8105c70:	bf00      	nop
 8105c72:	3714      	adds	r7, #20
 8105c74:	46bd      	mov	sp, r7
 8105c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c7a:	4770      	bx	lr
 8105c7c:	10004a70 	.word	0x10004a70

08105c80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8105c80:	b580      	push	{r7, lr}
 8105c82:	b086      	sub	sp, #24
 8105c84:	af00      	add	r7, sp, #0
 8105c86:	60f8      	str	r0, [r7, #12]
 8105c88:	60b9      	str	r1, [r7, #8]
 8105c8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8105c8c:	68fb      	ldr	r3, [r7, #12]
 8105c8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8105c90:	f7ff fa3c 	bl	810510c <vPortEnterCritical>
 8105c94:	697b      	ldr	r3, [r7, #20]
 8105c96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8105c9a:	b25b      	sxtb	r3, r3
 8105c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105ca0:	d103      	bne.n	8105caa <vQueueWaitForMessageRestricted+0x2a>
 8105ca2:	697b      	ldr	r3, [r7, #20]
 8105ca4:	2200      	movs	r2, #0
 8105ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8105caa:	697b      	ldr	r3, [r7, #20]
 8105cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8105cb0:	b25b      	sxtb	r3, r3
 8105cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105cb6:	d103      	bne.n	8105cc0 <vQueueWaitForMessageRestricted+0x40>
 8105cb8:	697b      	ldr	r3, [r7, #20]
 8105cba:	2200      	movs	r2, #0
 8105cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8105cc0:	f7ff fa52 	bl	8105168 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8105cc4:	697b      	ldr	r3, [r7, #20]
 8105cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105cc8:	2b00      	cmp	r3, #0
 8105cca:	d106      	bne.n	8105cda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8105ccc:	697b      	ldr	r3, [r7, #20]
 8105cce:	3324      	adds	r3, #36	; 0x24
 8105cd0:	687a      	ldr	r2, [r7, #4]
 8105cd2:	68b9      	ldr	r1, [r7, #8]
 8105cd4:	4618      	mov	r0, r3
 8105cd6:	f000 fc2f 	bl	8106538 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8105cda:	6978      	ldr	r0, [r7, #20]
 8105cdc:	f7ff ff28 	bl	8105b30 <prvUnlockQueue>
	}
 8105ce0:	bf00      	nop
 8105ce2:	3718      	adds	r7, #24
 8105ce4:	46bd      	mov	sp, r7
 8105ce6:	bd80      	pop	{r7, pc}

08105ce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8105ce8:	b580      	push	{r7, lr}
 8105cea:	b08e      	sub	sp, #56	; 0x38
 8105cec:	af04      	add	r7, sp, #16
 8105cee:	60f8      	str	r0, [r7, #12]
 8105cf0:	60b9      	str	r1, [r7, #8]
 8105cf2:	607a      	str	r2, [r7, #4]
 8105cf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8105cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105cf8:	2b00      	cmp	r3, #0
 8105cfa:	d109      	bne.n	8105d10 <xTaskCreateStatic+0x28>
 8105cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105d00:	f383 8811 	msr	BASEPRI, r3
 8105d04:	f3bf 8f6f 	isb	sy
 8105d08:	f3bf 8f4f 	dsb	sy
 8105d0c:	623b      	str	r3, [r7, #32]
 8105d0e:	e7fe      	b.n	8105d0e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8105d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d109      	bne.n	8105d2a <xTaskCreateStatic+0x42>
 8105d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105d1a:	f383 8811 	msr	BASEPRI, r3
 8105d1e:	f3bf 8f6f 	isb	sy
 8105d22:	f3bf 8f4f 	dsb	sy
 8105d26:	61fb      	str	r3, [r7, #28]
 8105d28:	e7fe      	b.n	8105d28 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8105d2a:	235c      	movs	r3, #92	; 0x5c
 8105d2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8105d2e:	693b      	ldr	r3, [r7, #16]
 8105d30:	2b5c      	cmp	r3, #92	; 0x5c
 8105d32:	d009      	beq.n	8105d48 <xTaskCreateStatic+0x60>
 8105d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105d38:	f383 8811 	msr	BASEPRI, r3
 8105d3c:	f3bf 8f6f 	isb	sy
 8105d40:	f3bf 8f4f 	dsb	sy
 8105d44:	61bb      	str	r3, [r7, #24]
 8105d46:	e7fe      	b.n	8105d46 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8105d48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8105d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d4c:	2b00      	cmp	r3, #0
 8105d4e:	d01e      	beq.n	8105d8e <xTaskCreateStatic+0xa6>
 8105d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105d52:	2b00      	cmp	r3, #0
 8105d54:	d01b      	beq.n	8105d8e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8105d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8105d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105d5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8105d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d62:	2202      	movs	r2, #2
 8105d64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8105d68:	2300      	movs	r3, #0
 8105d6a:	9303      	str	r3, [sp, #12]
 8105d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d6e:	9302      	str	r3, [sp, #8]
 8105d70:	f107 0314 	add.w	r3, r7, #20
 8105d74:	9301      	str	r3, [sp, #4]
 8105d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105d78:	9300      	str	r3, [sp, #0]
 8105d7a:	683b      	ldr	r3, [r7, #0]
 8105d7c:	687a      	ldr	r2, [r7, #4]
 8105d7e:	68b9      	ldr	r1, [r7, #8]
 8105d80:	68f8      	ldr	r0, [r7, #12]
 8105d82:	f000 f850 	bl	8105e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8105d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105d88:	f000 f8dc 	bl	8105f44 <prvAddNewTaskToReadyList>
 8105d8c:	e001      	b.n	8105d92 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8105d8e:	2300      	movs	r3, #0
 8105d90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8105d92:	697b      	ldr	r3, [r7, #20]
	}
 8105d94:	4618      	mov	r0, r3
 8105d96:	3728      	adds	r7, #40	; 0x28
 8105d98:	46bd      	mov	sp, r7
 8105d9a:	bd80      	pop	{r7, pc}

08105d9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8105d9c:	b580      	push	{r7, lr}
 8105d9e:	b08c      	sub	sp, #48	; 0x30
 8105da0:	af04      	add	r7, sp, #16
 8105da2:	60f8      	str	r0, [r7, #12]
 8105da4:	60b9      	str	r1, [r7, #8]
 8105da6:	603b      	str	r3, [r7, #0]
 8105da8:	4613      	mov	r3, r2
 8105daa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8105dac:	88fb      	ldrh	r3, [r7, #6]
 8105dae:	009b      	lsls	r3, r3, #2
 8105db0:	4618      	mov	r0, r3
 8105db2:	f7fe fdfd 	bl	81049b0 <pvPortMalloc>
 8105db6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8105db8:	697b      	ldr	r3, [r7, #20]
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	d00e      	beq.n	8105ddc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8105dbe:	205c      	movs	r0, #92	; 0x5c
 8105dc0:	f7fe fdf6 	bl	81049b0 <pvPortMalloc>
 8105dc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8105dc6:	69fb      	ldr	r3, [r7, #28]
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	d003      	beq.n	8105dd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8105dcc:	69fb      	ldr	r3, [r7, #28]
 8105dce:	697a      	ldr	r2, [r7, #20]
 8105dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8105dd2:	e005      	b.n	8105de0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8105dd4:	6978      	ldr	r0, [r7, #20]
 8105dd6:	f7fe fead 	bl	8104b34 <vPortFree>
 8105dda:	e001      	b.n	8105de0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8105ddc:	2300      	movs	r3, #0
 8105dde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8105de0:	69fb      	ldr	r3, [r7, #28]
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d017      	beq.n	8105e16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8105de6:	69fb      	ldr	r3, [r7, #28]
 8105de8:	2200      	movs	r2, #0
 8105dea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8105dee:	88fa      	ldrh	r2, [r7, #6]
 8105df0:	2300      	movs	r3, #0
 8105df2:	9303      	str	r3, [sp, #12]
 8105df4:	69fb      	ldr	r3, [r7, #28]
 8105df6:	9302      	str	r3, [sp, #8]
 8105df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105dfa:	9301      	str	r3, [sp, #4]
 8105dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105dfe:	9300      	str	r3, [sp, #0]
 8105e00:	683b      	ldr	r3, [r7, #0]
 8105e02:	68b9      	ldr	r1, [r7, #8]
 8105e04:	68f8      	ldr	r0, [r7, #12]
 8105e06:	f000 f80e 	bl	8105e26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8105e0a:	69f8      	ldr	r0, [r7, #28]
 8105e0c:	f000 f89a 	bl	8105f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8105e10:	2301      	movs	r3, #1
 8105e12:	61bb      	str	r3, [r7, #24]
 8105e14:	e002      	b.n	8105e1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8105e16:	f04f 33ff 	mov.w	r3, #4294967295
 8105e1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8105e1c:	69bb      	ldr	r3, [r7, #24]
	}
 8105e1e:	4618      	mov	r0, r3
 8105e20:	3720      	adds	r7, #32
 8105e22:	46bd      	mov	sp, r7
 8105e24:	bd80      	pop	{r7, pc}

08105e26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8105e26:	b580      	push	{r7, lr}
 8105e28:	b088      	sub	sp, #32
 8105e2a:	af00      	add	r7, sp, #0
 8105e2c:	60f8      	str	r0, [r7, #12]
 8105e2e:	60b9      	str	r1, [r7, #8]
 8105e30:	607a      	str	r2, [r7, #4]
 8105e32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8105e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	009b      	lsls	r3, r3, #2
 8105e3c:	461a      	mov	r2, r3
 8105e3e:	21a5      	movs	r1, #165	; 0xa5
 8105e40:	f001 f9ad 	bl	810719e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8105e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105e48:	687b      	ldr	r3, [r7, #4]
 8105e4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8105e4e:	3b01      	subs	r3, #1
 8105e50:	009b      	lsls	r3, r3, #2
 8105e52:	4413      	add	r3, r2
 8105e54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8105e56:	69bb      	ldr	r3, [r7, #24]
 8105e58:	f023 0307 	bic.w	r3, r3, #7
 8105e5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8105e5e:	69bb      	ldr	r3, [r7, #24]
 8105e60:	f003 0307 	and.w	r3, r3, #7
 8105e64:	2b00      	cmp	r3, #0
 8105e66:	d009      	beq.n	8105e7c <prvInitialiseNewTask+0x56>
 8105e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8105e6c:	f383 8811 	msr	BASEPRI, r3
 8105e70:	f3bf 8f6f 	isb	sy
 8105e74:	f3bf 8f4f 	dsb	sy
 8105e78:	617b      	str	r3, [r7, #20]
 8105e7a:	e7fe      	b.n	8105e7a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8105e7c:	68bb      	ldr	r3, [r7, #8]
 8105e7e:	2b00      	cmp	r3, #0
 8105e80:	d01f      	beq.n	8105ec2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8105e82:	2300      	movs	r3, #0
 8105e84:	61fb      	str	r3, [r7, #28]
 8105e86:	e012      	b.n	8105eae <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8105e88:	68ba      	ldr	r2, [r7, #8]
 8105e8a:	69fb      	ldr	r3, [r7, #28]
 8105e8c:	4413      	add	r3, r2
 8105e8e:	7819      	ldrb	r1, [r3, #0]
 8105e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105e92:	69fb      	ldr	r3, [r7, #28]
 8105e94:	4413      	add	r3, r2
 8105e96:	3334      	adds	r3, #52	; 0x34
 8105e98:	460a      	mov	r2, r1
 8105e9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8105e9c:	68ba      	ldr	r2, [r7, #8]
 8105e9e:	69fb      	ldr	r3, [r7, #28]
 8105ea0:	4413      	add	r3, r2
 8105ea2:	781b      	ldrb	r3, [r3, #0]
 8105ea4:	2b00      	cmp	r3, #0
 8105ea6:	d006      	beq.n	8105eb6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8105ea8:	69fb      	ldr	r3, [r7, #28]
 8105eaa:	3301      	adds	r3, #1
 8105eac:	61fb      	str	r3, [r7, #28]
 8105eae:	69fb      	ldr	r3, [r7, #28]
 8105eb0:	2b0f      	cmp	r3, #15
 8105eb2:	d9e9      	bls.n	8105e88 <prvInitialiseNewTask+0x62>
 8105eb4:	e000      	b.n	8105eb8 <prvInitialiseNewTask+0x92>
			{
				break;
 8105eb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8105eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105eba:	2200      	movs	r2, #0
 8105ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8105ec0:	e003      	b.n	8105eca <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8105ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105ec4:	2200      	movs	r2, #0
 8105ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8105eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ecc:	2b37      	cmp	r3, #55	; 0x37
 8105ece:	d901      	bls.n	8105ed4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8105ed0:	2337      	movs	r3, #55	; 0x37
 8105ed2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8105ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105ed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105ed8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8105eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105ede:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8105ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105ee2:	2200      	movs	r2, #0
 8105ee4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8105ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105ee8:	3304      	adds	r3, #4
 8105eea:	4618      	mov	r0, r3
 8105eec:	f7fe ff56 	bl	8104d9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8105ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105ef2:	3318      	adds	r3, #24
 8105ef4:	4618      	mov	r0, r3
 8105ef6:	f7fe ff51 	bl	8104d9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8105efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105efe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8105f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8105f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8105f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105f0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8105f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f12:	2200      	movs	r2, #0
 8105f14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8105f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f18:	2200      	movs	r2, #0
 8105f1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8105f1e:	683a      	ldr	r2, [r7, #0]
 8105f20:	68f9      	ldr	r1, [r7, #12]
 8105f22:	69b8      	ldr	r0, [r7, #24]
 8105f24:	f7fe ffce 	bl	8104ec4 <pxPortInitialiseStack>
 8105f28:	4602      	mov	r2, r0
 8105f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8105f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f30:	2b00      	cmp	r3, #0
 8105f32:	d002      	beq.n	8105f3a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8105f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8105f3a:	bf00      	nop
 8105f3c:	3720      	adds	r7, #32
 8105f3e:	46bd      	mov	sp, r7
 8105f40:	bd80      	pop	{r7, pc}
	...

08105f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8105f44:	b580      	push	{r7, lr}
 8105f46:	b082      	sub	sp, #8
 8105f48:	af00      	add	r7, sp, #0
 8105f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8105f4c:	f7ff f8de 	bl	810510c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8105f50:	4b2d      	ldr	r3, [pc, #180]	; (8106008 <prvAddNewTaskToReadyList+0xc4>)
 8105f52:	681b      	ldr	r3, [r3, #0]
 8105f54:	3301      	adds	r3, #1
 8105f56:	4a2c      	ldr	r2, [pc, #176]	; (8106008 <prvAddNewTaskToReadyList+0xc4>)
 8105f58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8105f5a:	4b2c      	ldr	r3, [pc, #176]	; (810600c <prvAddNewTaskToReadyList+0xc8>)
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	2b00      	cmp	r3, #0
 8105f60:	d109      	bne.n	8105f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8105f62:	4a2a      	ldr	r2, [pc, #168]	; (810600c <prvAddNewTaskToReadyList+0xc8>)
 8105f64:	687b      	ldr	r3, [r7, #4]
 8105f66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8105f68:	4b27      	ldr	r3, [pc, #156]	; (8106008 <prvAddNewTaskToReadyList+0xc4>)
 8105f6a:	681b      	ldr	r3, [r3, #0]
 8105f6c:	2b01      	cmp	r3, #1
 8105f6e:	d110      	bne.n	8105f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8105f70:	f000 fc08 	bl	8106784 <prvInitialiseTaskLists>
 8105f74:	e00d      	b.n	8105f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8105f76:	4b26      	ldr	r3, [pc, #152]	; (8106010 <prvAddNewTaskToReadyList+0xcc>)
 8105f78:	681b      	ldr	r3, [r3, #0]
 8105f7a:	2b00      	cmp	r3, #0
 8105f7c:	d109      	bne.n	8105f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8105f7e:	4b23      	ldr	r3, [pc, #140]	; (810600c <prvAddNewTaskToReadyList+0xc8>)
 8105f80:	681b      	ldr	r3, [r3, #0]
 8105f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105f84:	687b      	ldr	r3, [r7, #4]
 8105f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f88:	429a      	cmp	r2, r3
 8105f8a:	d802      	bhi.n	8105f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8105f8c:	4a1f      	ldr	r2, [pc, #124]	; (810600c <prvAddNewTaskToReadyList+0xc8>)
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8105f92:	4b20      	ldr	r3, [pc, #128]	; (8106014 <prvAddNewTaskToReadyList+0xd0>)
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	3301      	adds	r3, #1
 8105f98:	4a1e      	ldr	r2, [pc, #120]	; (8106014 <prvAddNewTaskToReadyList+0xd0>)
 8105f9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8105f9c:	4b1d      	ldr	r3, [pc, #116]	; (8106014 <prvAddNewTaskToReadyList+0xd0>)
 8105f9e:	681a      	ldr	r2, [r3, #0]
 8105fa0:	687b      	ldr	r3, [r7, #4]
 8105fa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105fa8:	4b1b      	ldr	r3, [pc, #108]	; (8106018 <prvAddNewTaskToReadyList+0xd4>)
 8105faa:	681b      	ldr	r3, [r3, #0]
 8105fac:	429a      	cmp	r2, r3
 8105fae:	d903      	bls.n	8105fb8 <prvAddNewTaskToReadyList+0x74>
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fb4:	4a18      	ldr	r2, [pc, #96]	; (8106018 <prvAddNewTaskToReadyList+0xd4>)
 8105fb6:	6013      	str	r3, [r2, #0]
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105fbc:	4613      	mov	r3, r2
 8105fbe:	009b      	lsls	r3, r3, #2
 8105fc0:	4413      	add	r3, r2
 8105fc2:	009b      	lsls	r3, r3, #2
 8105fc4:	4a15      	ldr	r2, [pc, #84]	; (810601c <prvAddNewTaskToReadyList+0xd8>)
 8105fc6:	441a      	add	r2, r3
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	3304      	adds	r3, #4
 8105fcc:	4619      	mov	r1, r3
 8105fce:	4610      	mov	r0, r2
 8105fd0:	f7fe fef1 	bl	8104db6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8105fd4:	f7ff f8c8 	bl	8105168 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8105fd8:	4b0d      	ldr	r3, [pc, #52]	; (8106010 <prvAddNewTaskToReadyList+0xcc>)
 8105fda:	681b      	ldr	r3, [r3, #0]
 8105fdc:	2b00      	cmp	r3, #0
 8105fde:	d00e      	beq.n	8105ffe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8105fe0:	4b0a      	ldr	r3, [pc, #40]	; (810600c <prvAddNewTaskToReadyList+0xc8>)
 8105fe2:	681b      	ldr	r3, [r3, #0]
 8105fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fea:	429a      	cmp	r2, r3
 8105fec:	d207      	bcs.n	8105ffe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8105fee:	4b0c      	ldr	r3, [pc, #48]	; (8106020 <prvAddNewTaskToReadyList+0xdc>)
 8105ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8105ff4:	601a      	str	r2, [r3, #0]
 8105ff6:	f3bf 8f4f 	dsb	sy
 8105ffa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8105ffe:	bf00      	nop
 8106000:	3708      	adds	r7, #8
 8106002:	46bd      	mov	sp, r7
 8106004:	bd80      	pop	{r7, pc}
 8106006:	bf00      	nop
 8106008:	100047dc 	.word	0x100047dc
 810600c:	10004308 	.word	0x10004308
 8106010:	100047e8 	.word	0x100047e8
 8106014:	100047f8 	.word	0x100047f8
 8106018:	100047e4 	.word	0x100047e4
 810601c:	1000430c 	.word	0x1000430c
 8106020:	e000ed04 	.word	0xe000ed04

08106024 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8106024:	b580      	push	{r7, lr}
 8106026:	b084      	sub	sp, #16
 8106028:	af00      	add	r7, sp, #0
 810602a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810602c:	2300      	movs	r3, #0
 810602e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	2b00      	cmp	r3, #0
 8106034:	d016      	beq.n	8106064 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8106036:	4b13      	ldr	r3, [pc, #76]	; (8106084 <vTaskDelay+0x60>)
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	2b00      	cmp	r3, #0
 810603c:	d009      	beq.n	8106052 <vTaskDelay+0x2e>
 810603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106042:	f383 8811 	msr	BASEPRI, r3
 8106046:	f3bf 8f6f 	isb	sy
 810604a:	f3bf 8f4f 	dsb	sy
 810604e:	60bb      	str	r3, [r7, #8]
 8106050:	e7fe      	b.n	8106050 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8106052:	f000 f87f 	bl	8106154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8106056:	2100      	movs	r1, #0
 8106058:	6878      	ldr	r0, [r7, #4]
 810605a:	f000 fcd7 	bl	8106a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810605e:	f000 f887 	bl	8106170 <xTaskResumeAll>
 8106062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8106064:	68fb      	ldr	r3, [r7, #12]
 8106066:	2b00      	cmp	r3, #0
 8106068:	d107      	bne.n	810607a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 810606a:	4b07      	ldr	r3, [pc, #28]	; (8106088 <vTaskDelay+0x64>)
 810606c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106070:	601a      	str	r2, [r3, #0]
 8106072:	f3bf 8f4f 	dsb	sy
 8106076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810607a:	bf00      	nop
 810607c:	3710      	adds	r7, #16
 810607e:	46bd      	mov	sp, r7
 8106080:	bd80      	pop	{r7, pc}
 8106082:	bf00      	nop
 8106084:	10004804 	.word	0x10004804
 8106088:	e000ed04 	.word	0xe000ed04

0810608c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810608c:	b580      	push	{r7, lr}
 810608e:	b08a      	sub	sp, #40	; 0x28
 8106090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8106092:	2300      	movs	r3, #0
 8106094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8106096:	2300      	movs	r3, #0
 8106098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810609a:	463a      	mov	r2, r7
 810609c:	1d39      	adds	r1, r7, #4
 810609e:	f107 0308 	add.w	r3, r7, #8
 81060a2:	4618      	mov	r0, r3
 81060a4:	f7fe fc50 	bl	8104948 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 81060a8:	6839      	ldr	r1, [r7, #0]
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	68ba      	ldr	r2, [r7, #8]
 81060ae:	9202      	str	r2, [sp, #8]
 81060b0:	9301      	str	r3, [sp, #4]
 81060b2:	2300      	movs	r3, #0
 81060b4:	9300      	str	r3, [sp, #0]
 81060b6:	2300      	movs	r3, #0
 81060b8:	460a      	mov	r2, r1
 81060ba:	4920      	ldr	r1, [pc, #128]	; (810613c <vTaskStartScheduler+0xb0>)
 81060bc:	4820      	ldr	r0, [pc, #128]	; (8106140 <vTaskStartScheduler+0xb4>)
 81060be:	f7ff fe13 	bl	8105ce8 <xTaskCreateStatic>
 81060c2:	4602      	mov	r2, r0
 81060c4:	4b1f      	ldr	r3, [pc, #124]	; (8106144 <vTaskStartScheduler+0xb8>)
 81060c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 81060c8:	4b1e      	ldr	r3, [pc, #120]	; (8106144 <vTaskStartScheduler+0xb8>)
 81060ca:	681b      	ldr	r3, [r3, #0]
 81060cc:	2b00      	cmp	r3, #0
 81060ce:	d002      	beq.n	81060d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 81060d0:	2301      	movs	r3, #1
 81060d2:	617b      	str	r3, [r7, #20]
 81060d4:	e001      	b.n	81060da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 81060d6:	2300      	movs	r3, #0
 81060d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 81060da:	697b      	ldr	r3, [r7, #20]
 81060dc:	2b01      	cmp	r3, #1
 81060de:	d102      	bne.n	81060e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 81060e0:	f000 fce8 	bl	8106ab4 <xTimerCreateTimerTask>
 81060e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 81060e6:	697b      	ldr	r3, [r7, #20]
 81060e8:	2b01      	cmp	r3, #1
 81060ea:	d115      	bne.n	8106118 <vTaskStartScheduler+0x8c>
 81060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 81060f0:	f383 8811 	msr	BASEPRI, r3
 81060f4:	f3bf 8f6f 	isb	sy
 81060f8:	f3bf 8f4f 	dsb	sy
 81060fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 81060fe:	4b12      	ldr	r3, [pc, #72]	; (8106148 <vTaskStartScheduler+0xbc>)
 8106100:	f04f 32ff 	mov.w	r2, #4294967295
 8106104:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8106106:	4b11      	ldr	r3, [pc, #68]	; (810614c <vTaskStartScheduler+0xc0>)
 8106108:	2201      	movs	r2, #1
 810610a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810610c:	4b10      	ldr	r3, [pc, #64]	; (8106150 <vTaskStartScheduler+0xc4>)
 810610e:	2200      	movs	r2, #0
 8106110:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8106112:	f7fe ff5d 	bl	8104fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8106116:	e00d      	b.n	8106134 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8106118:	697b      	ldr	r3, [r7, #20]
 810611a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810611e:	d109      	bne.n	8106134 <vTaskStartScheduler+0xa8>
 8106120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106124:	f383 8811 	msr	BASEPRI, r3
 8106128:	f3bf 8f6f 	isb	sy
 810612c:	f3bf 8f4f 	dsb	sy
 8106130:	60fb      	str	r3, [r7, #12]
 8106132:	e7fe      	b.n	8106132 <vTaskStartScheduler+0xa6>
}
 8106134:	bf00      	nop
 8106136:	3718      	adds	r7, #24
 8106138:	46bd      	mov	sp, r7
 810613a:	bd80      	pop	{r7, pc}
 810613c:	081071e4 	.word	0x081071e4
 8106140:	08106755 	.word	0x08106755
 8106144:	10004800 	.word	0x10004800
 8106148:	100047fc 	.word	0x100047fc
 810614c:	100047e8 	.word	0x100047e8
 8106150:	100047e0 	.word	0x100047e0

08106154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8106154:	b480      	push	{r7}
 8106156:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8106158:	4b04      	ldr	r3, [pc, #16]	; (810616c <vTaskSuspendAll+0x18>)
 810615a:	681b      	ldr	r3, [r3, #0]
 810615c:	3301      	adds	r3, #1
 810615e:	4a03      	ldr	r2, [pc, #12]	; (810616c <vTaskSuspendAll+0x18>)
 8106160:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8106162:	bf00      	nop
 8106164:	46bd      	mov	sp, r7
 8106166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810616a:	4770      	bx	lr
 810616c:	10004804 	.word	0x10004804

08106170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8106170:	b580      	push	{r7, lr}
 8106172:	b084      	sub	sp, #16
 8106174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8106176:	2300      	movs	r3, #0
 8106178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810617a:	2300      	movs	r3, #0
 810617c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810617e:	4b41      	ldr	r3, [pc, #260]	; (8106284 <xTaskResumeAll+0x114>)
 8106180:	681b      	ldr	r3, [r3, #0]
 8106182:	2b00      	cmp	r3, #0
 8106184:	d109      	bne.n	810619a <xTaskResumeAll+0x2a>
 8106186:	f04f 0350 	mov.w	r3, #80	; 0x50
 810618a:	f383 8811 	msr	BASEPRI, r3
 810618e:	f3bf 8f6f 	isb	sy
 8106192:	f3bf 8f4f 	dsb	sy
 8106196:	603b      	str	r3, [r7, #0]
 8106198:	e7fe      	b.n	8106198 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810619a:	f7fe ffb7 	bl	810510c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810619e:	4b39      	ldr	r3, [pc, #228]	; (8106284 <xTaskResumeAll+0x114>)
 81061a0:	681b      	ldr	r3, [r3, #0]
 81061a2:	3b01      	subs	r3, #1
 81061a4:	4a37      	ldr	r2, [pc, #220]	; (8106284 <xTaskResumeAll+0x114>)
 81061a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81061a8:	4b36      	ldr	r3, [pc, #216]	; (8106284 <xTaskResumeAll+0x114>)
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	2b00      	cmp	r3, #0
 81061ae:	d162      	bne.n	8106276 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 81061b0:	4b35      	ldr	r3, [pc, #212]	; (8106288 <xTaskResumeAll+0x118>)
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	d05e      	beq.n	8106276 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 81061b8:	e02f      	b.n	810621a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81061ba:	4b34      	ldr	r3, [pc, #208]	; (810628c <xTaskResumeAll+0x11c>)
 81061bc:	68db      	ldr	r3, [r3, #12]
 81061be:	68db      	ldr	r3, [r3, #12]
 81061c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 81061c2:	68fb      	ldr	r3, [r7, #12]
 81061c4:	3318      	adds	r3, #24
 81061c6:	4618      	mov	r0, r3
 81061c8:	f7fe fe52 	bl	8104e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 81061cc:	68fb      	ldr	r3, [r7, #12]
 81061ce:	3304      	adds	r3, #4
 81061d0:	4618      	mov	r0, r3
 81061d2:	f7fe fe4d 	bl	8104e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 81061d6:	68fb      	ldr	r3, [r7, #12]
 81061d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81061da:	4b2d      	ldr	r3, [pc, #180]	; (8106290 <xTaskResumeAll+0x120>)
 81061dc:	681b      	ldr	r3, [r3, #0]
 81061de:	429a      	cmp	r2, r3
 81061e0:	d903      	bls.n	81061ea <xTaskResumeAll+0x7a>
 81061e2:	68fb      	ldr	r3, [r7, #12]
 81061e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81061e6:	4a2a      	ldr	r2, [pc, #168]	; (8106290 <xTaskResumeAll+0x120>)
 81061e8:	6013      	str	r3, [r2, #0]
 81061ea:	68fb      	ldr	r3, [r7, #12]
 81061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81061ee:	4613      	mov	r3, r2
 81061f0:	009b      	lsls	r3, r3, #2
 81061f2:	4413      	add	r3, r2
 81061f4:	009b      	lsls	r3, r3, #2
 81061f6:	4a27      	ldr	r2, [pc, #156]	; (8106294 <xTaskResumeAll+0x124>)
 81061f8:	441a      	add	r2, r3
 81061fa:	68fb      	ldr	r3, [r7, #12]
 81061fc:	3304      	adds	r3, #4
 81061fe:	4619      	mov	r1, r3
 8106200:	4610      	mov	r0, r2
 8106202:	f7fe fdd8 	bl	8104db6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8106206:	68fb      	ldr	r3, [r7, #12]
 8106208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810620a:	4b23      	ldr	r3, [pc, #140]	; (8106298 <xTaskResumeAll+0x128>)
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106210:	429a      	cmp	r2, r3
 8106212:	d302      	bcc.n	810621a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8106214:	4b21      	ldr	r3, [pc, #132]	; (810629c <xTaskResumeAll+0x12c>)
 8106216:	2201      	movs	r2, #1
 8106218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810621a:	4b1c      	ldr	r3, [pc, #112]	; (810628c <xTaskResumeAll+0x11c>)
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	2b00      	cmp	r3, #0
 8106220:	d1cb      	bne.n	81061ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8106222:	68fb      	ldr	r3, [r7, #12]
 8106224:	2b00      	cmp	r3, #0
 8106226:	d001      	beq.n	810622c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8106228:	f000 fb46 	bl	81068b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 810622c:	4b1c      	ldr	r3, [pc, #112]	; (81062a0 <xTaskResumeAll+0x130>)
 810622e:	681b      	ldr	r3, [r3, #0]
 8106230:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	2b00      	cmp	r3, #0
 8106236:	d010      	beq.n	810625a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8106238:	f000 f846 	bl	81062c8 <xTaskIncrementTick>
 810623c:	4603      	mov	r3, r0
 810623e:	2b00      	cmp	r3, #0
 8106240:	d002      	beq.n	8106248 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8106242:	4b16      	ldr	r3, [pc, #88]	; (810629c <xTaskResumeAll+0x12c>)
 8106244:	2201      	movs	r2, #1
 8106246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8106248:	687b      	ldr	r3, [r7, #4]
 810624a:	3b01      	subs	r3, #1
 810624c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 810624e:	687b      	ldr	r3, [r7, #4]
 8106250:	2b00      	cmp	r3, #0
 8106252:	d1f1      	bne.n	8106238 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8106254:	4b12      	ldr	r3, [pc, #72]	; (81062a0 <xTaskResumeAll+0x130>)
 8106256:	2200      	movs	r2, #0
 8106258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810625a:	4b10      	ldr	r3, [pc, #64]	; (810629c <xTaskResumeAll+0x12c>)
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	2b00      	cmp	r3, #0
 8106260:	d009      	beq.n	8106276 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8106262:	2301      	movs	r3, #1
 8106264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8106266:	4b0f      	ldr	r3, [pc, #60]	; (81062a4 <xTaskResumeAll+0x134>)
 8106268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810626c:	601a      	str	r2, [r3, #0]
 810626e:	f3bf 8f4f 	dsb	sy
 8106272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8106276:	f7fe ff77 	bl	8105168 <vPortExitCritical>

	return xAlreadyYielded;
 810627a:	68bb      	ldr	r3, [r7, #8]
}
 810627c:	4618      	mov	r0, r3
 810627e:	3710      	adds	r7, #16
 8106280:	46bd      	mov	sp, r7
 8106282:	bd80      	pop	{r7, pc}
 8106284:	10004804 	.word	0x10004804
 8106288:	100047dc 	.word	0x100047dc
 810628c:	1000479c 	.word	0x1000479c
 8106290:	100047e4 	.word	0x100047e4
 8106294:	1000430c 	.word	0x1000430c
 8106298:	10004308 	.word	0x10004308
 810629c:	100047f0 	.word	0x100047f0
 81062a0:	100047ec 	.word	0x100047ec
 81062a4:	e000ed04 	.word	0xe000ed04

081062a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 81062a8:	b480      	push	{r7}
 81062aa:	b083      	sub	sp, #12
 81062ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 81062ae:	4b05      	ldr	r3, [pc, #20]	; (81062c4 <xTaskGetTickCount+0x1c>)
 81062b0:	681b      	ldr	r3, [r3, #0]
 81062b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 81062b4:	687b      	ldr	r3, [r7, #4]
}
 81062b6:	4618      	mov	r0, r3
 81062b8:	370c      	adds	r7, #12
 81062ba:	46bd      	mov	sp, r7
 81062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062c0:	4770      	bx	lr
 81062c2:	bf00      	nop
 81062c4:	100047e0 	.word	0x100047e0

081062c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 81062c8:	b580      	push	{r7, lr}
 81062ca:	b086      	sub	sp, #24
 81062cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 81062ce:	2300      	movs	r3, #0
 81062d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81062d2:	4b4e      	ldr	r3, [pc, #312]	; (810640c <xTaskIncrementTick+0x144>)
 81062d4:	681b      	ldr	r3, [r3, #0]
 81062d6:	2b00      	cmp	r3, #0
 81062d8:	f040 8088 	bne.w	81063ec <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 81062dc:	4b4c      	ldr	r3, [pc, #304]	; (8106410 <xTaskIncrementTick+0x148>)
 81062de:	681b      	ldr	r3, [r3, #0]
 81062e0:	3301      	adds	r3, #1
 81062e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 81062e4:	4a4a      	ldr	r2, [pc, #296]	; (8106410 <xTaskIncrementTick+0x148>)
 81062e6:	693b      	ldr	r3, [r7, #16]
 81062e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 81062ea:	693b      	ldr	r3, [r7, #16]
 81062ec:	2b00      	cmp	r3, #0
 81062ee:	d11f      	bne.n	8106330 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 81062f0:	4b48      	ldr	r3, [pc, #288]	; (8106414 <xTaskIncrementTick+0x14c>)
 81062f2:	681b      	ldr	r3, [r3, #0]
 81062f4:	681b      	ldr	r3, [r3, #0]
 81062f6:	2b00      	cmp	r3, #0
 81062f8:	d009      	beq.n	810630e <xTaskIncrementTick+0x46>
 81062fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 81062fe:	f383 8811 	msr	BASEPRI, r3
 8106302:	f3bf 8f6f 	isb	sy
 8106306:	f3bf 8f4f 	dsb	sy
 810630a:	603b      	str	r3, [r7, #0]
 810630c:	e7fe      	b.n	810630c <xTaskIncrementTick+0x44>
 810630e:	4b41      	ldr	r3, [pc, #260]	; (8106414 <xTaskIncrementTick+0x14c>)
 8106310:	681b      	ldr	r3, [r3, #0]
 8106312:	60fb      	str	r3, [r7, #12]
 8106314:	4b40      	ldr	r3, [pc, #256]	; (8106418 <xTaskIncrementTick+0x150>)
 8106316:	681b      	ldr	r3, [r3, #0]
 8106318:	4a3e      	ldr	r2, [pc, #248]	; (8106414 <xTaskIncrementTick+0x14c>)
 810631a:	6013      	str	r3, [r2, #0]
 810631c:	4a3e      	ldr	r2, [pc, #248]	; (8106418 <xTaskIncrementTick+0x150>)
 810631e:	68fb      	ldr	r3, [r7, #12]
 8106320:	6013      	str	r3, [r2, #0]
 8106322:	4b3e      	ldr	r3, [pc, #248]	; (810641c <xTaskIncrementTick+0x154>)
 8106324:	681b      	ldr	r3, [r3, #0]
 8106326:	3301      	adds	r3, #1
 8106328:	4a3c      	ldr	r2, [pc, #240]	; (810641c <xTaskIncrementTick+0x154>)
 810632a:	6013      	str	r3, [r2, #0]
 810632c:	f000 fac4 	bl	81068b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8106330:	4b3b      	ldr	r3, [pc, #236]	; (8106420 <xTaskIncrementTick+0x158>)
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	693a      	ldr	r2, [r7, #16]
 8106336:	429a      	cmp	r2, r3
 8106338:	d349      	bcc.n	81063ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810633a:	4b36      	ldr	r3, [pc, #216]	; (8106414 <xTaskIncrementTick+0x14c>)
 810633c:	681b      	ldr	r3, [r3, #0]
 810633e:	681b      	ldr	r3, [r3, #0]
 8106340:	2b00      	cmp	r3, #0
 8106342:	d104      	bne.n	810634e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106344:	4b36      	ldr	r3, [pc, #216]	; (8106420 <xTaskIncrementTick+0x158>)
 8106346:	f04f 32ff 	mov.w	r2, #4294967295
 810634a:	601a      	str	r2, [r3, #0]
					break;
 810634c:	e03f      	b.n	81063ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810634e:	4b31      	ldr	r3, [pc, #196]	; (8106414 <xTaskIncrementTick+0x14c>)
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	68db      	ldr	r3, [r3, #12]
 8106354:	68db      	ldr	r3, [r3, #12]
 8106356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8106358:	68bb      	ldr	r3, [r7, #8]
 810635a:	685b      	ldr	r3, [r3, #4]
 810635c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810635e:	693a      	ldr	r2, [r7, #16]
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	429a      	cmp	r2, r3
 8106364:	d203      	bcs.n	810636e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8106366:	4a2e      	ldr	r2, [pc, #184]	; (8106420 <xTaskIncrementTick+0x158>)
 8106368:	687b      	ldr	r3, [r7, #4]
 810636a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810636c:	e02f      	b.n	81063ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810636e:	68bb      	ldr	r3, [r7, #8]
 8106370:	3304      	adds	r3, #4
 8106372:	4618      	mov	r0, r3
 8106374:	f7fe fd7c 	bl	8104e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8106378:	68bb      	ldr	r3, [r7, #8]
 810637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810637c:	2b00      	cmp	r3, #0
 810637e:	d004      	beq.n	810638a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8106380:	68bb      	ldr	r3, [r7, #8]
 8106382:	3318      	adds	r3, #24
 8106384:	4618      	mov	r0, r3
 8106386:	f7fe fd73 	bl	8104e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810638a:	68bb      	ldr	r3, [r7, #8]
 810638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810638e:	4b25      	ldr	r3, [pc, #148]	; (8106424 <xTaskIncrementTick+0x15c>)
 8106390:	681b      	ldr	r3, [r3, #0]
 8106392:	429a      	cmp	r2, r3
 8106394:	d903      	bls.n	810639e <xTaskIncrementTick+0xd6>
 8106396:	68bb      	ldr	r3, [r7, #8]
 8106398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810639a:	4a22      	ldr	r2, [pc, #136]	; (8106424 <xTaskIncrementTick+0x15c>)
 810639c:	6013      	str	r3, [r2, #0]
 810639e:	68bb      	ldr	r3, [r7, #8]
 81063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81063a2:	4613      	mov	r3, r2
 81063a4:	009b      	lsls	r3, r3, #2
 81063a6:	4413      	add	r3, r2
 81063a8:	009b      	lsls	r3, r3, #2
 81063aa:	4a1f      	ldr	r2, [pc, #124]	; (8106428 <xTaskIncrementTick+0x160>)
 81063ac:	441a      	add	r2, r3
 81063ae:	68bb      	ldr	r3, [r7, #8]
 81063b0:	3304      	adds	r3, #4
 81063b2:	4619      	mov	r1, r3
 81063b4:	4610      	mov	r0, r2
 81063b6:	f7fe fcfe 	bl	8104db6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 81063ba:	68bb      	ldr	r3, [r7, #8]
 81063bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81063be:	4b1b      	ldr	r3, [pc, #108]	; (810642c <xTaskIncrementTick+0x164>)
 81063c0:	681b      	ldr	r3, [r3, #0]
 81063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063c4:	429a      	cmp	r2, r3
 81063c6:	d3b8      	bcc.n	810633a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 81063c8:	2301      	movs	r3, #1
 81063ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81063cc:	e7b5      	b.n	810633a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 81063ce:	4b17      	ldr	r3, [pc, #92]	; (810642c <xTaskIncrementTick+0x164>)
 81063d0:	681b      	ldr	r3, [r3, #0]
 81063d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81063d4:	4914      	ldr	r1, [pc, #80]	; (8106428 <xTaskIncrementTick+0x160>)
 81063d6:	4613      	mov	r3, r2
 81063d8:	009b      	lsls	r3, r3, #2
 81063da:	4413      	add	r3, r2
 81063dc:	009b      	lsls	r3, r3, #2
 81063de:	440b      	add	r3, r1
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	2b01      	cmp	r3, #1
 81063e4:	d907      	bls.n	81063f6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 81063e6:	2301      	movs	r3, #1
 81063e8:	617b      	str	r3, [r7, #20]
 81063ea:	e004      	b.n	81063f6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 81063ec:	4b10      	ldr	r3, [pc, #64]	; (8106430 <xTaskIncrementTick+0x168>)
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	3301      	adds	r3, #1
 81063f2:	4a0f      	ldr	r2, [pc, #60]	; (8106430 <xTaskIncrementTick+0x168>)
 81063f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 81063f6:	4b0f      	ldr	r3, [pc, #60]	; (8106434 <xTaskIncrementTick+0x16c>)
 81063f8:	681b      	ldr	r3, [r3, #0]
 81063fa:	2b00      	cmp	r3, #0
 81063fc:	d001      	beq.n	8106402 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 81063fe:	2301      	movs	r3, #1
 8106400:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8106402:	697b      	ldr	r3, [r7, #20]
}
 8106404:	4618      	mov	r0, r3
 8106406:	3718      	adds	r7, #24
 8106408:	46bd      	mov	sp, r7
 810640a:	bd80      	pop	{r7, pc}
 810640c:	10004804 	.word	0x10004804
 8106410:	100047e0 	.word	0x100047e0
 8106414:	10004794 	.word	0x10004794
 8106418:	10004798 	.word	0x10004798
 810641c:	100047f4 	.word	0x100047f4
 8106420:	100047fc 	.word	0x100047fc
 8106424:	100047e4 	.word	0x100047e4
 8106428:	1000430c 	.word	0x1000430c
 810642c:	10004308 	.word	0x10004308
 8106430:	100047ec 	.word	0x100047ec
 8106434:	100047f0 	.word	0x100047f0

08106438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8106438:	b480      	push	{r7}
 810643a:	b085      	sub	sp, #20
 810643c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810643e:	4b27      	ldr	r3, [pc, #156]	; (81064dc <vTaskSwitchContext+0xa4>)
 8106440:	681b      	ldr	r3, [r3, #0]
 8106442:	2b00      	cmp	r3, #0
 8106444:	d003      	beq.n	810644e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8106446:	4b26      	ldr	r3, [pc, #152]	; (81064e0 <vTaskSwitchContext+0xa8>)
 8106448:	2201      	movs	r2, #1
 810644a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810644c:	e040      	b.n	81064d0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 810644e:	4b24      	ldr	r3, [pc, #144]	; (81064e0 <vTaskSwitchContext+0xa8>)
 8106450:	2200      	movs	r2, #0
 8106452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106454:	4b23      	ldr	r3, [pc, #140]	; (81064e4 <vTaskSwitchContext+0xac>)
 8106456:	681b      	ldr	r3, [r3, #0]
 8106458:	60fb      	str	r3, [r7, #12]
 810645a:	e00f      	b.n	810647c <vTaskSwitchContext+0x44>
 810645c:	68fb      	ldr	r3, [r7, #12]
 810645e:	2b00      	cmp	r3, #0
 8106460:	d109      	bne.n	8106476 <vTaskSwitchContext+0x3e>
 8106462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106466:	f383 8811 	msr	BASEPRI, r3
 810646a:	f3bf 8f6f 	isb	sy
 810646e:	f3bf 8f4f 	dsb	sy
 8106472:	607b      	str	r3, [r7, #4]
 8106474:	e7fe      	b.n	8106474 <vTaskSwitchContext+0x3c>
 8106476:	68fb      	ldr	r3, [r7, #12]
 8106478:	3b01      	subs	r3, #1
 810647a:	60fb      	str	r3, [r7, #12]
 810647c:	491a      	ldr	r1, [pc, #104]	; (81064e8 <vTaskSwitchContext+0xb0>)
 810647e:	68fa      	ldr	r2, [r7, #12]
 8106480:	4613      	mov	r3, r2
 8106482:	009b      	lsls	r3, r3, #2
 8106484:	4413      	add	r3, r2
 8106486:	009b      	lsls	r3, r3, #2
 8106488:	440b      	add	r3, r1
 810648a:	681b      	ldr	r3, [r3, #0]
 810648c:	2b00      	cmp	r3, #0
 810648e:	d0e5      	beq.n	810645c <vTaskSwitchContext+0x24>
 8106490:	68fa      	ldr	r2, [r7, #12]
 8106492:	4613      	mov	r3, r2
 8106494:	009b      	lsls	r3, r3, #2
 8106496:	4413      	add	r3, r2
 8106498:	009b      	lsls	r3, r3, #2
 810649a:	4a13      	ldr	r2, [pc, #76]	; (81064e8 <vTaskSwitchContext+0xb0>)
 810649c:	4413      	add	r3, r2
 810649e:	60bb      	str	r3, [r7, #8]
 81064a0:	68bb      	ldr	r3, [r7, #8]
 81064a2:	685b      	ldr	r3, [r3, #4]
 81064a4:	685a      	ldr	r2, [r3, #4]
 81064a6:	68bb      	ldr	r3, [r7, #8]
 81064a8:	605a      	str	r2, [r3, #4]
 81064aa:	68bb      	ldr	r3, [r7, #8]
 81064ac:	685a      	ldr	r2, [r3, #4]
 81064ae:	68bb      	ldr	r3, [r7, #8]
 81064b0:	3308      	adds	r3, #8
 81064b2:	429a      	cmp	r2, r3
 81064b4:	d104      	bne.n	81064c0 <vTaskSwitchContext+0x88>
 81064b6:	68bb      	ldr	r3, [r7, #8]
 81064b8:	685b      	ldr	r3, [r3, #4]
 81064ba:	685a      	ldr	r2, [r3, #4]
 81064bc:	68bb      	ldr	r3, [r7, #8]
 81064be:	605a      	str	r2, [r3, #4]
 81064c0:	68bb      	ldr	r3, [r7, #8]
 81064c2:	685b      	ldr	r3, [r3, #4]
 81064c4:	68db      	ldr	r3, [r3, #12]
 81064c6:	4a09      	ldr	r2, [pc, #36]	; (81064ec <vTaskSwitchContext+0xb4>)
 81064c8:	6013      	str	r3, [r2, #0]
 81064ca:	4a06      	ldr	r2, [pc, #24]	; (81064e4 <vTaskSwitchContext+0xac>)
 81064cc:	68fb      	ldr	r3, [r7, #12]
 81064ce:	6013      	str	r3, [r2, #0]
}
 81064d0:	bf00      	nop
 81064d2:	3714      	adds	r7, #20
 81064d4:	46bd      	mov	sp, r7
 81064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064da:	4770      	bx	lr
 81064dc:	10004804 	.word	0x10004804
 81064e0:	100047f0 	.word	0x100047f0
 81064e4:	100047e4 	.word	0x100047e4
 81064e8:	1000430c 	.word	0x1000430c
 81064ec:	10004308 	.word	0x10004308

081064f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 81064f0:	b580      	push	{r7, lr}
 81064f2:	b084      	sub	sp, #16
 81064f4:	af00      	add	r7, sp, #0
 81064f6:	6078      	str	r0, [r7, #4]
 81064f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	2b00      	cmp	r3, #0
 81064fe:	d109      	bne.n	8106514 <vTaskPlaceOnEventList+0x24>
 8106500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106504:	f383 8811 	msr	BASEPRI, r3
 8106508:	f3bf 8f6f 	isb	sy
 810650c:	f3bf 8f4f 	dsb	sy
 8106510:	60fb      	str	r3, [r7, #12]
 8106512:	e7fe      	b.n	8106512 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8106514:	4b07      	ldr	r3, [pc, #28]	; (8106534 <vTaskPlaceOnEventList+0x44>)
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	3318      	adds	r3, #24
 810651a:	4619      	mov	r1, r3
 810651c:	6878      	ldr	r0, [r7, #4]
 810651e:	f7fe fc6e 	bl	8104dfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8106522:	2101      	movs	r1, #1
 8106524:	6838      	ldr	r0, [r7, #0]
 8106526:	f000 fa71 	bl	8106a0c <prvAddCurrentTaskToDelayedList>
}
 810652a:	bf00      	nop
 810652c:	3710      	adds	r7, #16
 810652e:	46bd      	mov	sp, r7
 8106530:	bd80      	pop	{r7, pc}
 8106532:	bf00      	nop
 8106534:	10004308 	.word	0x10004308

08106538 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8106538:	b580      	push	{r7, lr}
 810653a:	b086      	sub	sp, #24
 810653c:	af00      	add	r7, sp, #0
 810653e:	60f8      	str	r0, [r7, #12]
 8106540:	60b9      	str	r1, [r7, #8]
 8106542:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8106544:	68fb      	ldr	r3, [r7, #12]
 8106546:	2b00      	cmp	r3, #0
 8106548:	d109      	bne.n	810655e <vTaskPlaceOnEventListRestricted+0x26>
 810654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 810654e:	f383 8811 	msr	BASEPRI, r3
 8106552:	f3bf 8f6f 	isb	sy
 8106556:	f3bf 8f4f 	dsb	sy
 810655a:	617b      	str	r3, [r7, #20]
 810655c:	e7fe      	b.n	810655c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810655e:	4b0a      	ldr	r3, [pc, #40]	; (8106588 <vTaskPlaceOnEventListRestricted+0x50>)
 8106560:	681b      	ldr	r3, [r3, #0]
 8106562:	3318      	adds	r3, #24
 8106564:	4619      	mov	r1, r3
 8106566:	68f8      	ldr	r0, [r7, #12]
 8106568:	f7fe fc25 	bl	8104db6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810656c:	687b      	ldr	r3, [r7, #4]
 810656e:	2b00      	cmp	r3, #0
 8106570:	d002      	beq.n	8106578 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8106572:	f04f 33ff 	mov.w	r3, #4294967295
 8106576:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8106578:	6879      	ldr	r1, [r7, #4]
 810657a:	68b8      	ldr	r0, [r7, #8]
 810657c:	f000 fa46 	bl	8106a0c <prvAddCurrentTaskToDelayedList>
	}
 8106580:	bf00      	nop
 8106582:	3718      	adds	r7, #24
 8106584:	46bd      	mov	sp, r7
 8106586:	bd80      	pop	{r7, pc}
 8106588:	10004308 	.word	0x10004308

0810658c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810658c:	b580      	push	{r7, lr}
 810658e:	b086      	sub	sp, #24
 8106590:	af00      	add	r7, sp, #0
 8106592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	68db      	ldr	r3, [r3, #12]
 8106598:	68db      	ldr	r3, [r3, #12]
 810659a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810659c:	693b      	ldr	r3, [r7, #16]
 810659e:	2b00      	cmp	r3, #0
 81065a0:	d109      	bne.n	81065b6 <xTaskRemoveFromEventList+0x2a>
 81065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 81065a6:	f383 8811 	msr	BASEPRI, r3
 81065aa:	f3bf 8f6f 	isb	sy
 81065ae:	f3bf 8f4f 	dsb	sy
 81065b2:	60fb      	str	r3, [r7, #12]
 81065b4:	e7fe      	b.n	81065b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 81065b6:	693b      	ldr	r3, [r7, #16]
 81065b8:	3318      	adds	r3, #24
 81065ba:	4618      	mov	r0, r3
 81065bc:	f7fe fc58 	bl	8104e70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 81065c0:	4b1d      	ldr	r3, [pc, #116]	; (8106638 <xTaskRemoveFromEventList+0xac>)
 81065c2:	681b      	ldr	r3, [r3, #0]
 81065c4:	2b00      	cmp	r3, #0
 81065c6:	d11d      	bne.n	8106604 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 81065c8:	693b      	ldr	r3, [r7, #16]
 81065ca:	3304      	adds	r3, #4
 81065cc:	4618      	mov	r0, r3
 81065ce:	f7fe fc4f 	bl	8104e70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 81065d2:	693b      	ldr	r3, [r7, #16]
 81065d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81065d6:	4b19      	ldr	r3, [pc, #100]	; (810663c <xTaskRemoveFromEventList+0xb0>)
 81065d8:	681b      	ldr	r3, [r3, #0]
 81065da:	429a      	cmp	r2, r3
 81065dc:	d903      	bls.n	81065e6 <xTaskRemoveFromEventList+0x5a>
 81065de:	693b      	ldr	r3, [r7, #16]
 81065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065e2:	4a16      	ldr	r2, [pc, #88]	; (810663c <xTaskRemoveFromEventList+0xb0>)
 81065e4:	6013      	str	r3, [r2, #0]
 81065e6:	693b      	ldr	r3, [r7, #16]
 81065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81065ea:	4613      	mov	r3, r2
 81065ec:	009b      	lsls	r3, r3, #2
 81065ee:	4413      	add	r3, r2
 81065f0:	009b      	lsls	r3, r3, #2
 81065f2:	4a13      	ldr	r2, [pc, #76]	; (8106640 <xTaskRemoveFromEventList+0xb4>)
 81065f4:	441a      	add	r2, r3
 81065f6:	693b      	ldr	r3, [r7, #16]
 81065f8:	3304      	adds	r3, #4
 81065fa:	4619      	mov	r1, r3
 81065fc:	4610      	mov	r0, r2
 81065fe:	f7fe fbda 	bl	8104db6 <vListInsertEnd>
 8106602:	e005      	b.n	8106610 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8106604:	693b      	ldr	r3, [r7, #16]
 8106606:	3318      	adds	r3, #24
 8106608:	4619      	mov	r1, r3
 810660a:	480e      	ldr	r0, [pc, #56]	; (8106644 <xTaskRemoveFromEventList+0xb8>)
 810660c:	f7fe fbd3 	bl	8104db6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8106610:	693b      	ldr	r3, [r7, #16]
 8106612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106614:	4b0c      	ldr	r3, [pc, #48]	; (8106648 <xTaskRemoveFromEventList+0xbc>)
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810661a:	429a      	cmp	r2, r3
 810661c:	d905      	bls.n	810662a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810661e:	2301      	movs	r3, #1
 8106620:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8106622:	4b0a      	ldr	r3, [pc, #40]	; (810664c <xTaskRemoveFromEventList+0xc0>)
 8106624:	2201      	movs	r2, #1
 8106626:	601a      	str	r2, [r3, #0]
 8106628:	e001      	b.n	810662e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 810662a:	2300      	movs	r3, #0
 810662c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810662e:	697b      	ldr	r3, [r7, #20]
}
 8106630:	4618      	mov	r0, r3
 8106632:	3718      	adds	r7, #24
 8106634:	46bd      	mov	sp, r7
 8106636:	bd80      	pop	{r7, pc}
 8106638:	10004804 	.word	0x10004804
 810663c:	100047e4 	.word	0x100047e4
 8106640:	1000430c 	.word	0x1000430c
 8106644:	1000479c 	.word	0x1000479c
 8106648:	10004308 	.word	0x10004308
 810664c:	100047f0 	.word	0x100047f0

08106650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8106650:	b480      	push	{r7}
 8106652:	b083      	sub	sp, #12
 8106654:	af00      	add	r7, sp, #0
 8106656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8106658:	4b06      	ldr	r3, [pc, #24]	; (8106674 <vTaskInternalSetTimeOutState+0x24>)
 810665a:	681a      	ldr	r2, [r3, #0]
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8106660:	4b05      	ldr	r3, [pc, #20]	; (8106678 <vTaskInternalSetTimeOutState+0x28>)
 8106662:	681a      	ldr	r2, [r3, #0]
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	605a      	str	r2, [r3, #4]
}
 8106668:	bf00      	nop
 810666a:	370c      	adds	r7, #12
 810666c:	46bd      	mov	sp, r7
 810666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106672:	4770      	bx	lr
 8106674:	100047f4 	.word	0x100047f4
 8106678:	100047e0 	.word	0x100047e0

0810667c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810667c:	b580      	push	{r7, lr}
 810667e:	b088      	sub	sp, #32
 8106680:	af00      	add	r7, sp, #0
 8106682:	6078      	str	r0, [r7, #4]
 8106684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	2b00      	cmp	r3, #0
 810668a:	d109      	bne.n	81066a0 <xTaskCheckForTimeOut+0x24>
 810668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106690:	f383 8811 	msr	BASEPRI, r3
 8106694:	f3bf 8f6f 	isb	sy
 8106698:	f3bf 8f4f 	dsb	sy
 810669c:	613b      	str	r3, [r7, #16]
 810669e:	e7fe      	b.n	810669e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 81066a0:	683b      	ldr	r3, [r7, #0]
 81066a2:	2b00      	cmp	r3, #0
 81066a4:	d109      	bne.n	81066ba <xTaskCheckForTimeOut+0x3e>
 81066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 81066aa:	f383 8811 	msr	BASEPRI, r3
 81066ae:	f3bf 8f6f 	isb	sy
 81066b2:	f3bf 8f4f 	dsb	sy
 81066b6:	60fb      	str	r3, [r7, #12]
 81066b8:	e7fe      	b.n	81066b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 81066ba:	f7fe fd27 	bl	810510c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 81066be:	4b1d      	ldr	r3, [pc, #116]	; (8106734 <xTaskCheckForTimeOut+0xb8>)
 81066c0:	681b      	ldr	r3, [r3, #0]
 81066c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	685b      	ldr	r3, [r3, #4]
 81066c8:	69ba      	ldr	r2, [r7, #24]
 81066ca:	1ad3      	subs	r3, r2, r3
 81066cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 81066ce:	683b      	ldr	r3, [r7, #0]
 81066d0:	681b      	ldr	r3, [r3, #0]
 81066d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81066d6:	d102      	bne.n	81066de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 81066d8:	2300      	movs	r3, #0
 81066da:	61fb      	str	r3, [r7, #28]
 81066dc:	e023      	b.n	8106726 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681a      	ldr	r2, [r3, #0]
 81066e2:	4b15      	ldr	r3, [pc, #84]	; (8106738 <xTaskCheckForTimeOut+0xbc>)
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	429a      	cmp	r2, r3
 81066e8:	d007      	beq.n	81066fa <xTaskCheckForTimeOut+0x7e>
 81066ea:	687b      	ldr	r3, [r7, #4]
 81066ec:	685b      	ldr	r3, [r3, #4]
 81066ee:	69ba      	ldr	r2, [r7, #24]
 81066f0:	429a      	cmp	r2, r3
 81066f2:	d302      	bcc.n	81066fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 81066f4:	2301      	movs	r3, #1
 81066f6:	61fb      	str	r3, [r7, #28]
 81066f8:	e015      	b.n	8106726 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 81066fa:	683b      	ldr	r3, [r7, #0]
 81066fc:	681b      	ldr	r3, [r3, #0]
 81066fe:	697a      	ldr	r2, [r7, #20]
 8106700:	429a      	cmp	r2, r3
 8106702:	d20b      	bcs.n	810671c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8106704:	683b      	ldr	r3, [r7, #0]
 8106706:	681a      	ldr	r2, [r3, #0]
 8106708:	697b      	ldr	r3, [r7, #20]
 810670a:	1ad2      	subs	r2, r2, r3
 810670c:	683b      	ldr	r3, [r7, #0]
 810670e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8106710:	6878      	ldr	r0, [r7, #4]
 8106712:	f7ff ff9d 	bl	8106650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8106716:	2300      	movs	r3, #0
 8106718:	61fb      	str	r3, [r7, #28]
 810671a:	e004      	b.n	8106726 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 810671c:	683b      	ldr	r3, [r7, #0]
 810671e:	2200      	movs	r2, #0
 8106720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8106722:	2301      	movs	r3, #1
 8106724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8106726:	f7fe fd1f 	bl	8105168 <vPortExitCritical>

	return xReturn;
 810672a:	69fb      	ldr	r3, [r7, #28]
}
 810672c:	4618      	mov	r0, r3
 810672e:	3720      	adds	r7, #32
 8106730:	46bd      	mov	sp, r7
 8106732:	bd80      	pop	{r7, pc}
 8106734:	100047e0 	.word	0x100047e0
 8106738:	100047f4 	.word	0x100047f4

0810673c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810673c:	b480      	push	{r7}
 810673e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8106740:	4b03      	ldr	r3, [pc, #12]	; (8106750 <vTaskMissedYield+0x14>)
 8106742:	2201      	movs	r2, #1
 8106744:	601a      	str	r2, [r3, #0]
}
 8106746:	bf00      	nop
 8106748:	46bd      	mov	sp, r7
 810674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810674e:	4770      	bx	lr
 8106750:	100047f0 	.word	0x100047f0

08106754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8106754:	b580      	push	{r7, lr}
 8106756:	b082      	sub	sp, #8
 8106758:	af00      	add	r7, sp, #0
 810675a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810675c:	f000 f852 	bl	8106804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8106760:	4b06      	ldr	r3, [pc, #24]	; (810677c <prvIdleTask+0x28>)
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	2b01      	cmp	r3, #1
 8106766:	d9f9      	bls.n	810675c <prvIdleTask+0x8>
			{
				taskYIELD();
 8106768:	4b05      	ldr	r3, [pc, #20]	; (8106780 <prvIdleTask+0x2c>)
 810676a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 810676e:	601a      	str	r2, [r3, #0]
 8106770:	f3bf 8f4f 	dsb	sy
 8106774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8106778:	e7f0      	b.n	810675c <prvIdleTask+0x8>
 810677a:	bf00      	nop
 810677c:	1000430c 	.word	0x1000430c
 8106780:	e000ed04 	.word	0xe000ed04

08106784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8106784:	b580      	push	{r7, lr}
 8106786:	b082      	sub	sp, #8
 8106788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810678a:	2300      	movs	r3, #0
 810678c:	607b      	str	r3, [r7, #4]
 810678e:	e00c      	b.n	81067aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8106790:	687a      	ldr	r2, [r7, #4]
 8106792:	4613      	mov	r3, r2
 8106794:	009b      	lsls	r3, r3, #2
 8106796:	4413      	add	r3, r2
 8106798:	009b      	lsls	r3, r3, #2
 810679a:	4a12      	ldr	r2, [pc, #72]	; (81067e4 <prvInitialiseTaskLists+0x60>)
 810679c:	4413      	add	r3, r2
 810679e:	4618      	mov	r0, r3
 81067a0:	f7fe fadc 	bl	8104d5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	3301      	adds	r3, #1
 81067a8:	607b      	str	r3, [r7, #4]
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	2b37      	cmp	r3, #55	; 0x37
 81067ae:	d9ef      	bls.n	8106790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 81067b0:	480d      	ldr	r0, [pc, #52]	; (81067e8 <prvInitialiseTaskLists+0x64>)
 81067b2:	f7fe fad3 	bl	8104d5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 81067b6:	480d      	ldr	r0, [pc, #52]	; (81067ec <prvInitialiseTaskLists+0x68>)
 81067b8:	f7fe fad0 	bl	8104d5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 81067bc:	480c      	ldr	r0, [pc, #48]	; (81067f0 <prvInitialiseTaskLists+0x6c>)
 81067be:	f7fe facd 	bl	8104d5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 81067c2:	480c      	ldr	r0, [pc, #48]	; (81067f4 <prvInitialiseTaskLists+0x70>)
 81067c4:	f7fe faca 	bl	8104d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 81067c8:	480b      	ldr	r0, [pc, #44]	; (81067f8 <prvInitialiseTaskLists+0x74>)
 81067ca:	f7fe fac7 	bl	8104d5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 81067ce:	4b0b      	ldr	r3, [pc, #44]	; (81067fc <prvInitialiseTaskLists+0x78>)
 81067d0:	4a05      	ldr	r2, [pc, #20]	; (81067e8 <prvInitialiseTaskLists+0x64>)
 81067d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 81067d4:	4b0a      	ldr	r3, [pc, #40]	; (8106800 <prvInitialiseTaskLists+0x7c>)
 81067d6:	4a05      	ldr	r2, [pc, #20]	; (81067ec <prvInitialiseTaskLists+0x68>)
 81067d8:	601a      	str	r2, [r3, #0]
}
 81067da:	bf00      	nop
 81067dc:	3708      	adds	r7, #8
 81067de:	46bd      	mov	sp, r7
 81067e0:	bd80      	pop	{r7, pc}
 81067e2:	bf00      	nop
 81067e4:	1000430c 	.word	0x1000430c
 81067e8:	1000476c 	.word	0x1000476c
 81067ec:	10004780 	.word	0x10004780
 81067f0:	1000479c 	.word	0x1000479c
 81067f4:	100047b0 	.word	0x100047b0
 81067f8:	100047c8 	.word	0x100047c8
 81067fc:	10004794 	.word	0x10004794
 8106800:	10004798 	.word	0x10004798

08106804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8106804:	b580      	push	{r7, lr}
 8106806:	b082      	sub	sp, #8
 8106808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810680a:	e019      	b.n	8106840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810680c:	f7fe fc7e 	bl	810510c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106810:	4b0f      	ldr	r3, [pc, #60]	; (8106850 <prvCheckTasksWaitingTermination+0x4c>)
 8106812:	68db      	ldr	r3, [r3, #12]
 8106814:	68db      	ldr	r3, [r3, #12]
 8106816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	3304      	adds	r3, #4
 810681c:	4618      	mov	r0, r3
 810681e:	f7fe fb27 	bl	8104e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8106822:	4b0c      	ldr	r3, [pc, #48]	; (8106854 <prvCheckTasksWaitingTermination+0x50>)
 8106824:	681b      	ldr	r3, [r3, #0]
 8106826:	3b01      	subs	r3, #1
 8106828:	4a0a      	ldr	r2, [pc, #40]	; (8106854 <prvCheckTasksWaitingTermination+0x50>)
 810682a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810682c:	4b0a      	ldr	r3, [pc, #40]	; (8106858 <prvCheckTasksWaitingTermination+0x54>)
 810682e:	681b      	ldr	r3, [r3, #0]
 8106830:	3b01      	subs	r3, #1
 8106832:	4a09      	ldr	r2, [pc, #36]	; (8106858 <prvCheckTasksWaitingTermination+0x54>)
 8106834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8106836:	f7fe fc97 	bl	8105168 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810683a:	6878      	ldr	r0, [r7, #4]
 810683c:	f000 f80e 	bl	810685c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8106840:	4b05      	ldr	r3, [pc, #20]	; (8106858 <prvCheckTasksWaitingTermination+0x54>)
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	2b00      	cmp	r3, #0
 8106846:	d1e1      	bne.n	810680c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8106848:	bf00      	nop
 810684a:	3708      	adds	r7, #8
 810684c:	46bd      	mov	sp, r7
 810684e:	bd80      	pop	{r7, pc}
 8106850:	100047b0 	.word	0x100047b0
 8106854:	100047dc 	.word	0x100047dc
 8106858:	100047c4 	.word	0x100047c4

0810685c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810685c:	b580      	push	{r7, lr}
 810685e:	b084      	sub	sp, #16
 8106860:	af00      	add	r7, sp, #0
 8106862:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8106864:	687b      	ldr	r3, [r7, #4]
 8106866:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 810686a:	2b00      	cmp	r3, #0
 810686c:	d108      	bne.n	8106880 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106872:	4618      	mov	r0, r3
 8106874:	f7fe f95e 	bl	8104b34 <vPortFree>
				vPortFree( pxTCB );
 8106878:	6878      	ldr	r0, [r7, #4]
 810687a:	f7fe f95b 	bl	8104b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810687e:	e017      	b.n	81068b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8106886:	2b01      	cmp	r3, #1
 8106888:	d103      	bne.n	8106892 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 810688a:	6878      	ldr	r0, [r7, #4]
 810688c:	f7fe f952 	bl	8104b34 <vPortFree>
	}
 8106890:	e00e      	b.n	81068b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8106892:	687b      	ldr	r3, [r7, #4]
 8106894:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8106898:	2b02      	cmp	r3, #2
 810689a:	d009      	beq.n	81068b0 <prvDeleteTCB+0x54>
 810689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 81068a0:	f383 8811 	msr	BASEPRI, r3
 81068a4:	f3bf 8f6f 	isb	sy
 81068a8:	f3bf 8f4f 	dsb	sy
 81068ac:	60fb      	str	r3, [r7, #12]
 81068ae:	e7fe      	b.n	81068ae <prvDeleteTCB+0x52>
	}
 81068b0:	bf00      	nop
 81068b2:	3710      	adds	r7, #16
 81068b4:	46bd      	mov	sp, r7
 81068b6:	bd80      	pop	{r7, pc}

081068b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 81068b8:	b480      	push	{r7}
 81068ba:	b083      	sub	sp, #12
 81068bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 81068be:	4b0c      	ldr	r3, [pc, #48]	; (81068f0 <prvResetNextTaskUnblockTime+0x38>)
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	681b      	ldr	r3, [r3, #0]
 81068c4:	2b00      	cmp	r3, #0
 81068c6:	d104      	bne.n	81068d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 81068c8:	4b0a      	ldr	r3, [pc, #40]	; (81068f4 <prvResetNextTaskUnblockTime+0x3c>)
 81068ca:	f04f 32ff 	mov.w	r2, #4294967295
 81068ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 81068d0:	e008      	b.n	81068e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 81068d2:	4b07      	ldr	r3, [pc, #28]	; (81068f0 <prvResetNextTaskUnblockTime+0x38>)
 81068d4:	681b      	ldr	r3, [r3, #0]
 81068d6:	68db      	ldr	r3, [r3, #12]
 81068d8:	68db      	ldr	r3, [r3, #12]
 81068da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	685b      	ldr	r3, [r3, #4]
 81068e0:	4a04      	ldr	r2, [pc, #16]	; (81068f4 <prvResetNextTaskUnblockTime+0x3c>)
 81068e2:	6013      	str	r3, [r2, #0]
}
 81068e4:	bf00      	nop
 81068e6:	370c      	adds	r7, #12
 81068e8:	46bd      	mov	sp, r7
 81068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068ee:	4770      	bx	lr
 81068f0:	10004794 	.word	0x10004794
 81068f4:	100047fc 	.word	0x100047fc

081068f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 81068f8:	b480      	push	{r7}
 81068fa:	b083      	sub	sp, #12
 81068fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 81068fe:	4b0b      	ldr	r3, [pc, #44]	; (810692c <xTaskGetSchedulerState+0x34>)
 8106900:	681b      	ldr	r3, [r3, #0]
 8106902:	2b00      	cmp	r3, #0
 8106904:	d102      	bne.n	810690c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8106906:	2301      	movs	r3, #1
 8106908:	607b      	str	r3, [r7, #4]
 810690a:	e008      	b.n	810691e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810690c:	4b08      	ldr	r3, [pc, #32]	; (8106930 <xTaskGetSchedulerState+0x38>)
 810690e:	681b      	ldr	r3, [r3, #0]
 8106910:	2b00      	cmp	r3, #0
 8106912:	d102      	bne.n	810691a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8106914:	2302      	movs	r3, #2
 8106916:	607b      	str	r3, [r7, #4]
 8106918:	e001      	b.n	810691e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810691a:	2300      	movs	r3, #0
 810691c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810691e:	687b      	ldr	r3, [r7, #4]
	}
 8106920:	4618      	mov	r0, r3
 8106922:	370c      	adds	r7, #12
 8106924:	46bd      	mov	sp, r7
 8106926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810692a:	4770      	bx	lr
 810692c:	100047e8 	.word	0x100047e8
 8106930:	10004804 	.word	0x10004804

08106934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8106934:	b580      	push	{r7, lr}
 8106936:	b086      	sub	sp, #24
 8106938:	af00      	add	r7, sp, #0
 810693a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8106940:	2300      	movs	r3, #0
 8106942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8106944:	687b      	ldr	r3, [r7, #4]
 8106946:	2b00      	cmp	r3, #0
 8106948:	d054      	beq.n	81069f4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810694a:	4b2d      	ldr	r3, [pc, #180]	; (8106a00 <xTaskPriorityDisinherit+0xcc>)
 810694c:	681b      	ldr	r3, [r3, #0]
 810694e:	693a      	ldr	r2, [r7, #16]
 8106950:	429a      	cmp	r2, r3
 8106952:	d009      	beq.n	8106968 <xTaskPriorityDisinherit+0x34>
 8106954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106958:	f383 8811 	msr	BASEPRI, r3
 810695c:	f3bf 8f6f 	isb	sy
 8106960:	f3bf 8f4f 	dsb	sy
 8106964:	60fb      	str	r3, [r7, #12]
 8106966:	e7fe      	b.n	8106966 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8106968:	693b      	ldr	r3, [r7, #16]
 810696a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810696c:	2b00      	cmp	r3, #0
 810696e:	d109      	bne.n	8106984 <xTaskPriorityDisinherit+0x50>
 8106970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106974:	f383 8811 	msr	BASEPRI, r3
 8106978:	f3bf 8f6f 	isb	sy
 810697c:	f3bf 8f4f 	dsb	sy
 8106980:	60bb      	str	r3, [r7, #8]
 8106982:	e7fe      	b.n	8106982 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8106984:	693b      	ldr	r3, [r7, #16]
 8106986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106988:	1e5a      	subs	r2, r3, #1
 810698a:	693b      	ldr	r3, [r7, #16]
 810698c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810698e:	693b      	ldr	r3, [r7, #16]
 8106990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106992:	693b      	ldr	r3, [r7, #16]
 8106994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106996:	429a      	cmp	r2, r3
 8106998:	d02c      	beq.n	81069f4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810699a:	693b      	ldr	r3, [r7, #16]
 810699c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810699e:	2b00      	cmp	r3, #0
 81069a0:	d128      	bne.n	81069f4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 81069a2:	693b      	ldr	r3, [r7, #16]
 81069a4:	3304      	adds	r3, #4
 81069a6:	4618      	mov	r0, r3
 81069a8:	f7fe fa62 	bl	8104e70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 81069ac:	693b      	ldr	r3, [r7, #16]
 81069ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81069b0:	693b      	ldr	r3, [r7, #16]
 81069b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 81069b4:	693b      	ldr	r3, [r7, #16]
 81069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 81069bc:	693b      	ldr	r3, [r7, #16]
 81069be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 81069c0:	693b      	ldr	r3, [r7, #16]
 81069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81069c4:	4b0f      	ldr	r3, [pc, #60]	; (8106a04 <xTaskPriorityDisinherit+0xd0>)
 81069c6:	681b      	ldr	r3, [r3, #0]
 81069c8:	429a      	cmp	r2, r3
 81069ca:	d903      	bls.n	81069d4 <xTaskPriorityDisinherit+0xa0>
 81069cc:	693b      	ldr	r3, [r7, #16]
 81069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81069d0:	4a0c      	ldr	r2, [pc, #48]	; (8106a04 <xTaskPriorityDisinherit+0xd0>)
 81069d2:	6013      	str	r3, [r2, #0]
 81069d4:	693b      	ldr	r3, [r7, #16]
 81069d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81069d8:	4613      	mov	r3, r2
 81069da:	009b      	lsls	r3, r3, #2
 81069dc:	4413      	add	r3, r2
 81069de:	009b      	lsls	r3, r3, #2
 81069e0:	4a09      	ldr	r2, [pc, #36]	; (8106a08 <xTaskPriorityDisinherit+0xd4>)
 81069e2:	441a      	add	r2, r3
 81069e4:	693b      	ldr	r3, [r7, #16]
 81069e6:	3304      	adds	r3, #4
 81069e8:	4619      	mov	r1, r3
 81069ea:	4610      	mov	r0, r2
 81069ec:	f7fe f9e3 	bl	8104db6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 81069f0:	2301      	movs	r3, #1
 81069f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 81069f4:	697b      	ldr	r3, [r7, #20]
	}
 81069f6:	4618      	mov	r0, r3
 81069f8:	3718      	adds	r7, #24
 81069fa:	46bd      	mov	sp, r7
 81069fc:	bd80      	pop	{r7, pc}
 81069fe:	bf00      	nop
 8106a00:	10004308 	.word	0x10004308
 8106a04:	100047e4 	.word	0x100047e4
 8106a08:	1000430c 	.word	0x1000430c

08106a0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8106a0c:	b580      	push	{r7, lr}
 8106a0e:	b084      	sub	sp, #16
 8106a10:	af00      	add	r7, sp, #0
 8106a12:	6078      	str	r0, [r7, #4]
 8106a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8106a16:	4b21      	ldr	r3, [pc, #132]	; (8106a9c <prvAddCurrentTaskToDelayedList+0x90>)
 8106a18:	681b      	ldr	r3, [r3, #0]
 8106a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8106a1c:	4b20      	ldr	r3, [pc, #128]	; (8106aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8106a1e:	681b      	ldr	r3, [r3, #0]
 8106a20:	3304      	adds	r3, #4
 8106a22:	4618      	mov	r0, r3
 8106a24:	f7fe fa24 	bl	8104e70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106a2e:	d10a      	bne.n	8106a46 <prvAddCurrentTaskToDelayedList+0x3a>
 8106a30:	683b      	ldr	r3, [r7, #0]
 8106a32:	2b00      	cmp	r3, #0
 8106a34:	d007      	beq.n	8106a46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8106a36:	4b1a      	ldr	r3, [pc, #104]	; (8106aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	3304      	adds	r3, #4
 8106a3c:	4619      	mov	r1, r3
 8106a3e:	4819      	ldr	r0, [pc, #100]	; (8106aa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8106a40:	f7fe f9b9 	bl	8104db6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8106a44:	e026      	b.n	8106a94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8106a46:	68fa      	ldr	r2, [r7, #12]
 8106a48:	687b      	ldr	r3, [r7, #4]
 8106a4a:	4413      	add	r3, r2
 8106a4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8106a4e:	4b14      	ldr	r3, [pc, #80]	; (8106aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	68ba      	ldr	r2, [r7, #8]
 8106a54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8106a56:	68ba      	ldr	r2, [r7, #8]
 8106a58:	68fb      	ldr	r3, [r7, #12]
 8106a5a:	429a      	cmp	r2, r3
 8106a5c:	d209      	bcs.n	8106a72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8106a5e:	4b12      	ldr	r3, [pc, #72]	; (8106aa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8106a60:	681a      	ldr	r2, [r3, #0]
 8106a62:	4b0f      	ldr	r3, [pc, #60]	; (8106aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	3304      	adds	r3, #4
 8106a68:	4619      	mov	r1, r3
 8106a6a:	4610      	mov	r0, r2
 8106a6c:	f7fe f9c7 	bl	8104dfe <vListInsert>
}
 8106a70:	e010      	b.n	8106a94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8106a72:	4b0e      	ldr	r3, [pc, #56]	; (8106aac <prvAddCurrentTaskToDelayedList+0xa0>)
 8106a74:	681a      	ldr	r2, [r3, #0]
 8106a76:	4b0a      	ldr	r3, [pc, #40]	; (8106aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8106a78:	681b      	ldr	r3, [r3, #0]
 8106a7a:	3304      	adds	r3, #4
 8106a7c:	4619      	mov	r1, r3
 8106a7e:	4610      	mov	r0, r2
 8106a80:	f7fe f9bd 	bl	8104dfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8106a84:	4b0a      	ldr	r3, [pc, #40]	; (8106ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8106a86:	681b      	ldr	r3, [r3, #0]
 8106a88:	68ba      	ldr	r2, [r7, #8]
 8106a8a:	429a      	cmp	r2, r3
 8106a8c:	d202      	bcs.n	8106a94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8106a8e:	4a08      	ldr	r2, [pc, #32]	; (8106ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8106a90:	68bb      	ldr	r3, [r7, #8]
 8106a92:	6013      	str	r3, [r2, #0]
}
 8106a94:	bf00      	nop
 8106a96:	3710      	adds	r7, #16
 8106a98:	46bd      	mov	sp, r7
 8106a9a:	bd80      	pop	{r7, pc}
 8106a9c:	100047e0 	.word	0x100047e0
 8106aa0:	10004308 	.word	0x10004308
 8106aa4:	100047c8 	.word	0x100047c8
 8106aa8:	10004798 	.word	0x10004798
 8106aac:	10004794 	.word	0x10004794
 8106ab0:	100047fc 	.word	0x100047fc

08106ab4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8106ab4:	b580      	push	{r7, lr}
 8106ab6:	b08a      	sub	sp, #40	; 0x28
 8106ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8106aba:	2300      	movs	r3, #0
 8106abc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8106abe:	f000 faff 	bl	81070c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8106ac2:	4b1c      	ldr	r3, [pc, #112]	; (8106b34 <xTimerCreateTimerTask+0x80>)
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	2b00      	cmp	r3, #0
 8106ac8:	d021      	beq.n	8106b0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8106aca:	2300      	movs	r3, #0
 8106acc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8106ace:	2300      	movs	r3, #0
 8106ad0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8106ad2:	1d3a      	adds	r2, r7, #4
 8106ad4:	f107 0108 	add.w	r1, r7, #8
 8106ad8:	f107 030c 	add.w	r3, r7, #12
 8106adc:	4618      	mov	r0, r3
 8106ade:	f7fd ff4d 	bl	810497c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8106ae2:	6879      	ldr	r1, [r7, #4]
 8106ae4:	68bb      	ldr	r3, [r7, #8]
 8106ae6:	68fa      	ldr	r2, [r7, #12]
 8106ae8:	9202      	str	r2, [sp, #8]
 8106aea:	9301      	str	r3, [sp, #4]
 8106aec:	2302      	movs	r3, #2
 8106aee:	9300      	str	r3, [sp, #0]
 8106af0:	2300      	movs	r3, #0
 8106af2:	460a      	mov	r2, r1
 8106af4:	4910      	ldr	r1, [pc, #64]	; (8106b38 <xTimerCreateTimerTask+0x84>)
 8106af6:	4811      	ldr	r0, [pc, #68]	; (8106b3c <xTimerCreateTimerTask+0x88>)
 8106af8:	f7ff f8f6 	bl	8105ce8 <xTaskCreateStatic>
 8106afc:	4602      	mov	r2, r0
 8106afe:	4b10      	ldr	r3, [pc, #64]	; (8106b40 <xTimerCreateTimerTask+0x8c>)
 8106b00:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8106b02:	4b0f      	ldr	r3, [pc, #60]	; (8106b40 <xTimerCreateTimerTask+0x8c>)
 8106b04:	681b      	ldr	r3, [r3, #0]
 8106b06:	2b00      	cmp	r3, #0
 8106b08:	d001      	beq.n	8106b0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8106b0a:	2301      	movs	r3, #1
 8106b0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8106b0e:	697b      	ldr	r3, [r7, #20]
 8106b10:	2b00      	cmp	r3, #0
 8106b12:	d109      	bne.n	8106b28 <xTimerCreateTimerTask+0x74>
 8106b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106b18:	f383 8811 	msr	BASEPRI, r3
 8106b1c:	f3bf 8f6f 	isb	sy
 8106b20:	f3bf 8f4f 	dsb	sy
 8106b24:	613b      	str	r3, [r7, #16]
 8106b26:	e7fe      	b.n	8106b26 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8106b28:	697b      	ldr	r3, [r7, #20]
}
 8106b2a:	4618      	mov	r0, r3
 8106b2c:	3718      	adds	r7, #24
 8106b2e:	46bd      	mov	sp, r7
 8106b30:	bd80      	pop	{r7, pc}
 8106b32:	bf00      	nop
 8106b34:	10004838 	.word	0x10004838
 8106b38:	081071ec 	.word	0x081071ec
 8106b3c:	08106c75 	.word	0x08106c75
 8106b40:	1000483c 	.word	0x1000483c

08106b44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8106b44:	b580      	push	{r7, lr}
 8106b46:	b08a      	sub	sp, #40	; 0x28
 8106b48:	af00      	add	r7, sp, #0
 8106b4a:	60f8      	str	r0, [r7, #12]
 8106b4c:	60b9      	str	r1, [r7, #8]
 8106b4e:	607a      	str	r2, [r7, #4]
 8106b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8106b52:	2300      	movs	r3, #0
 8106b54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8106b56:	68fb      	ldr	r3, [r7, #12]
 8106b58:	2b00      	cmp	r3, #0
 8106b5a:	d109      	bne.n	8106b70 <xTimerGenericCommand+0x2c>
 8106b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106b60:	f383 8811 	msr	BASEPRI, r3
 8106b64:	f3bf 8f6f 	isb	sy
 8106b68:	f3bf 8f4f 	dsb	sy
 8106b6c:	623b      	str	r3, [r7, #32]
 8106b6e:	e7fe      	b.n	8106b6e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8106b70:	4b19      	ldr	r3, [pc, #100]	; (8106bd8 <xTimerGenericCommand+0x94>)
 8106b72:	681b      	ldr	r3, [r3, #0]
 8106b74:	2b00      	cmp	r3, #0
 8106b76:	d02a      	beq.n	8106bce <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8106b78:	68bb      	ldr	r3, [r7, #8]
 8106b7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8106b80:	68fb      	ldr	r3, [r7, #12]
 8106b82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8106b84:	68bb      	ldr	r3, [r7, #8]
 8106b86:	2b05      	cmp	r3, #5
 8106b88:	dc18      	bgt.n	8106bbc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8106b8a:	f7ff feb5 	bl	81068f8 <xTaskGetSchedulerState>
 8106b8e:	4603      	mov	r3, r0
 8106b90:	2b02      	cmp	r3, #2
 8106b92:	d109      	bne.n	8106ba8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8106b94:	4b10      	ldr	r3, [pc, #64]	; (8106bd8 <xTimerGenericCommand+0x94>)
 8106b96:	6818      	ldr	r0, [r3, #0]
 8106b98:	f107 0110 	add.w	r1, r7, #16
 8106b9c:	2300      	movs	r3, #0
 8106b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106ba0:	f7fe fccc 	bl	810553c <xQueueGenericSend>
 8106ba4:	6278      	str	r0, [r7, #36]	; 0x24
 8106ba6:	e012      	b.n	8106bce <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8106ba8:	4b0b      	ldr	r3, [pc, #44]	; (8106bd8 <xTimerGenericCommand+0x94>)
 8106baa:	6818      	ldr	r0, [r3, #0]
 8106bac:	f107 0110 	add.w	r1, r7, #16
 8106bb0:	2300      	movs	r3, #0
 8106bb2:	2200      	movs	r2, #0
 8106bb4:	f7fe fcc2 	bl	810553c <xQueueGenericSend>
 8106bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8106bba:	e008      	b.n	8106bce <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8106bbc:	4b06      	ldr	r3, [pc, #24]	; (8106bd8 <xTimerGenericCommand+0x94>)
 8106bbe:	6818      	ldr	r0, [r3, #0]
 8106bc0:	f107 0110 	add.w	r1, r7, #16
 8106bc4:	2300      	movs	r3, #0
 8106bc6:	683a      	ldr	r2, [r7, #0]
 8106bc8:	f7fe fdb2 	bl	8105730 <xQueueGenericSendFromISR>
 8106bcc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8106bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8106bd0:	4618      	mov	r0, r3
 8106bd2:	3728      	adds	r7, #40	; 0x28
 8106bd4:	46bd      	mov	sp, r7
 8106bd6:	bd80      	pop	{r7, pc}
 8106bd8:	10004838 	.word	0x10004838

08106bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8106bdc:	b580      	push	{r7, lr}
 8106bde:	b088      	sub	sp, #32
 8106be0:	af02      	add	r7, sp, #8
 8106be2:	6078      	str	r0, [r7, #4]
 8106be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8106be6:	4b22      	ldr	r3, [pc, #136]	; (8106c70 <prvProcessExpiredTimer+0x94>)
 8106be8:	681b      	ldr	r3, [r3, #0]
 8106bea:	68db      	ldr	r3, [r3, #12]
 8106bec:	68db      	ldr	r3, [r3, #12]
 8106bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8106bf0:	697b      	ldr	r3, [r7, #20]
 8106bf2:	3304      	adds	r3, #4
 8106bf4:	4618      	mov	r0, r3
 8106bf6:	f7fe f93b 	bl	8104e70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8106bfa:	697b      	ldr	r3, [r7, #20]
 8106bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106c00:	f003 0304 	and.w	r3, r3, #4
 8106c04:	2b00      	cmp	r3, #0
 8106c06:	d021      	beq.n	8106c4c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8106c08:	697b      	ldr	r3, [r7, #20]
 8106c0a:	699a      	ldr	r2, [r3, #24]
 8106c0c:	687b      	ldr	r3, [r7, #4]
 8106c0e:	18d1      	adds	r1, r2, r3
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	683a      	ldr	r2, [r7, #0]
 8106c14:	6978      	ldr	r0, [r7, #20]
 8106c16:	f000 f8d1 	bl	8106dbc <prvInsertTimerInActiveList>
 8106c1a:	4603      	mov	r3, r0
 8106c1c:	2b00      	cmp	r3, #0
 8106c1e:	d01e      	beq.n	8106c5e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8106c20:	2300      	movs	r3, #0
 8106c22:	9300      	str	r3, [sp, #0]
 8106c24:	2300      	movs	r3, #0
 8106c26:	687a      	ldr	r2, [r7, #4]
 8106c28:	2100      	movs	r1, #0
 8106c2a:	6978      	ldr	r0, [r7, #20]
 8106c2c:	f7ff ff8a 	bl	8106b44 <xTimerGenericCommand>
 8106c30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8106c32:	693b      	ldr	r3, [r7, #16]
 8106c34:	2b00      	cmp	r3, #0
 8106c36:	d112      	bne.n	8106c5e <prvProcessExpiredTimer+0x82>
 8106c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106c3c:	f383 8811 	msr	BASEPRI, r3
 8106c40:	f3bf 8f6f 	isb	sy
 8106c44:	f3bf 8f4f 	dsb	sy
 8106c48:	60fb      	str	r3, [r7, #12]
 8106c4a:	e7fe      	b.n	8106c4a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8106c4c:	697b      	ldr	r3, [r7, #20]
 8106c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106c52:	f023 0301 	bic.w	r3, r3, #1
 8106c56:	b2da      	uxtb	r2, r3
 8106c58:	697b      	ldr	r3, [r7, #20]
 8106c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8106c5e:	697b      	ldr	r3, [r7, #20]
 8106c60:	6a1b      	ldr	r3, [r3, #32]
 8106c62:	6978      	ldr	r0, [r7, #20]
 8106c64:	4798      	blx	r3
}
 8106c66:	bf00      	nop
 8106c68:	3718      	adds	r7, #24
 8106c6a:	46bd      	mov	sp, r7
 8106c6c:	bd80      	pop	{r7, pc}
 8106c6e:	bf00      	nop
 8106c70:	10004830 	.word	0x10004830

08106c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8106c74:	b580      	push	{r7, lr}
 8106c76:	b084      	sub	sp, #16
 8106c78:	af00      	add	r7, sp, #0
 8106c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8106c7c:	f107 0308 	add.w	r3, r7, #8
 8106c80:	4618      	mov	r0, r3
 8106c82:	f000 f857 	bl	8106d34 <prvGetNextExpireTime>
 8106c86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8106c88:	68bb      	ldr	r3, [r7, #8]
 8106c8a:	4619      	mov	r1, r3
 8106c8c:	68f8      	ldr	r0, [r7, #12]
 8106c8e:	f000 f803 	bl	8106c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8106c92:	f000 f8d5 	bl	8106e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8106c96:	e7f1      	b.n	8106c7c <prvTimerTask+0x8>

08106c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8106c98:	b580      	push	{r7, lr}
 8106c9a:	b084      	sub	sp, #16
 8106c9c:	af00      	add	r7, sp, #0
 8106c9e:	6078      	str	r0, [r7, #4]
 8106ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8106ca2:	f7ff fa57 	bl	8106154 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8106ca6:	f107 0308 	add.w	r3, r7, #8
 8106caa:	4618      	mov	r0, r3
 8106cac:	f000 f866 	bl	8106d7c <prvSampleTimeNow>
 8106cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8106cb2:	68bb      	ldr	r3, [r7, #8]
 8106cb4:	2b00      	cmp	r3, #0
 8106cb6:	d130      	bne.n	8106d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8106cb8:	683b      	ldr	r3, [r7, #0]
 8106cba:	2b00      	cmp	r3, #0
 8106cbc:	d10a      	bne.n	8106cd4 <prvProcessTimerOrBlockTask+0x3c>
 8106cbe:	687a      	ldr	r2, [r7, #4]
 8106cc0:	68fb      	ldr	r3, [r7, #12]
 8106cc2:	429a      	cmp	r2, r3
 8106cc4:	d806      	bhi.n	8106cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8106cc6:	f7ff fa53 	bl	8106170 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8106cca:	68f9      	ldr	r1, [r7, #12]
 8106ccc:	6878      	ldr	r0, [r7, #4]
 8106cce:	f7ff ff85 	bl	8106bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8106cd2:	e024      	b.n	8106d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8106cd4:	683b      	ldr	r3, [r7, #0]
 8106cd6:	2b00      	cmp	r3, #0
 8106cd8:	d008      	beq.n	8106cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8106cda:	4b13      	ldr	r3, [pc, #76]	; (8106d28 <prvProcessTimerOrBlockTask+0x90>)
 8106cdc:	681b      	ldr	r3, [r3, #0]
 8106cde:	681b      	ldr	r3, [r3, #0]
 8106ce0:	2b00      	cmp	r3, #0
 8106ce2:	d101      	bne.n	8106ce8 <prvProcessTimerOrBlockTask+0x50>
 8106ce4:	2301      	movs	r3, #1
 8106ce6:	e000      	b.n	8106cea <prvProcessTimerOrBlockTask+0x52>
 8106ce8:	2300      	movs	r3, #0
 8106cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8106cec:	4b0f      	ldr	r3, [pc, #60]	; (8106d2c <prvProcessTimerOrBlockTask+0x94>)
 8106cee:	6818      	ldr	r0, [r3, #0]
 8106cf0:	687a      	ldr	r2, [r7, #4]
 8106cf2:	68fb      	ldr	r3, [r7, #12]
 8106cf4:	1ad3      	subs	r3, r2, r3
 8106cf6:	683a      	ldr	r2, [r7, #0]
 8106cf8:	4619      	mov	r1, r3
 8106cfa:	f7fe ffc1 	bl	8105c80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8106cfe:	f7ff fa37 	bl	8106170 <xTaskResumeAll>
 8106d02:	4603      	mov	r3, r0
 8106d04:	2b00      	cmp	r3, #0
 8106d06:	d10a      	bne.n	8106d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8106d08:	4b09      	ldr	r3, [pc, #36]	; (8106d30 <prvProcessTimerOrBlockTask+0x98>)
 8106d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8106d0e:	601a      	str	r2, [r3, #0]
 8106d10:	f3bf 8f4f 	dsb	sy
 8106d14:	f3bf 8f6f 	isb	sy
}
 8106d18:	e001      	b.n	8106d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8106d1a:	f7ff fa29 	bl	8106170 <xTaskResumeAll>
}
 8106d1e:	bf00      	nop
 8106d20:	3710      	adds	r7, #16
 8106d22:	46bd      	mov	sp, r7
 8106d24:	bd80      	pop	{r7, pc}
 8106d26:	bf00      	nop
 8106d28:	10004834 	.word	0x10004834
 8106d2c:	10004838 	.word	0x10004838
 8106d30:	e000ed04 	.word	0xe000ed04

08106d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8106d34:	b480      	push	{r7}
 8106d36:	b085      	sub	sp, #20
 8106d38:	af00      	add	r7, sp, #0
 8106d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8106d3c:	4b0e      	ldr	r3, [pc, #56]	; (8106d78 <prvGetNextExpireTime+0x44>)
 8106d3e:	681b      	ldr	r3, [r3, #0]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	2b00      	cmp	r3, #0
 8106d44:	d101      	bne.n	8106d4a <prvGetNextExpireTime+0x16>
 8106d46:	2201      	movs	r2, #1
 8106d48:	e000      	b.n	8106d4c <prvGetNextExpireTime+0x18>
 8106d4a:	2200      	movs	r2, #0
 8106d4c:	687b      	ldr	r3, [r7, #4]
 8106d4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8106d50:	687b      	ldr	r3, [r7, #4]
 8106d52:	681b      	ldr	r3, [r3, #0]
 8106d54:	2b00      	cmp	r3, #0
 8106d56:	d105      	bne.n	8106d64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8106d58:	4b07      	ldr	r3, [pc, #28]	; (8106d78 <prvGetNextExpireTime+0x44>)
 8106d5a:	681b      	ldr	r3, [r3, #0]
 8106d5c:	68db      	ldr	r3, [r3, #12]
 8106d5e:	681b      	ldr	r3, [r3, #0]
 8106d60:	60fb      	str	r3, [r7, #12]
 8106d62:	e001      	b.n	8106d68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8106d64:	2300      	movs	r3, #0
 8106d66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8106d68:	68fb      	ldr	r3, [r7, #12]
}
 8106d6a:	4618      	mov	r0, r3
 8106d6c:	3714      	adds	r7, #20
 8106d6e:	46bd      	mov	sp, r7
 8106d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d74:	4770      	bx	lr
 8106d76:	bf00      	nop
 8106d78:	10004830 	.word	0x10004830

08106d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8106d7c:	b580      	push	{r7, lr}
 8106d7e:	b084      	sub	sp, #16
 8106d80:	af00      	add	r7, sp, #0
 8106d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8106d84:	f7ff fa90 	bl	81062a8 <xTaskGetTickCount>
 8106d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8106d8a:	4b0b      	ldr	r3, [pc, #44]	; (8106db8 <prvSampleTimeNow+0x3c>)
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	68fa      	ldr	r2, [r7, #12]
 8106d90:	429a      	cmp	r2, r3
 8106d92:	d205      	bcs.n	8106da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8106d94:	f000 f930 	bl	8106ff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8106d98:	687b      	ldr	r3, [r7, #4]
 8106d9a:	2201      	movs	r2, #1
 8106d9c:	601a      	str	r2, [r3, #0]
 8106d9e:	e002      	b.n	8106da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	2200      	movs	r2, #0
 8106da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8106da6:	4a04      	ldr	r2, [pc, #16]	; (8106db8 <prvSampleTimeNow+0x3c>)
 8106da8:	68fb      	ldr	r3, [r7, #12]
 8106daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8106dac:	68fb      	ldr	r3, [r7, #12]
}
 8106dae:	4618      	mov	r0, r3
 8106db0:	3710      	adds	r7, #16
 8106db2:	46bd      	mov	sp, r7
 8106db4:	bd80      	pop	{r7, pc}
 8106db6:	bf00      	nop
 8106db8:	10004840 	.word	0x10004840

08106dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8106dbc:	b580      	push	{r7, lr}
 8106dbe:	b086      	sub	sp, #24
 8106dc0:	af00      	add	r7, sp, #0
 8106dc2:	60f8      	str	r0, [r7, #12]
 8106dc4:	60b9      	str	r1, [r7, #8]
 8106dc6:	607a      	str	r2, [r7, #4]
 8106dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8106dca:	2300      	movs	r3, #0
 8106dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8106dce:	68fb      	ldr	r3, [r7, #12]
 8106dd0:	68ba      	ldr	r2, [r7, #8]
 8106dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8106dd4:	68fb      	ldr	r3, [r7, #12]
 8106dd6:	68fa      	ldr	r2, [r7, #12]
 8106dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8106dda:	68ba      	ldr	r2, [r7, #8]
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	429a      	cmp	r2, r3
 8106de0:	d812      	bhi.n	8106e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8106de2:	687a      	ldr	r2, [r7, #4]
 8106de4:	683b      	ldr	r3, [r7, #0]
 8106de6:	1ad2      	subs	r2, r2, r3
 8106de8:	68fb      	ldr	r3, [r7, #12]
 8106dea:	699b      	ldr	r3, [r3, #24]
 8106dec:	429a      	cmp	r2, r3
 8106dee:	d302      	bcc.n	8106df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8106df0:	2301      	movs	r3, #1
 8106df2:	617b      	str	r3, [r7, #20]
 8106df4:	e01b      	b.n	8106e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8106df6:	4b10      	ldr	r3, [pc, #64]	; (8106e38 <prvInsertTimerInActiveList+0x7c>)
 8106df8:	681a      	ldr	r2, [r3, #0]
 8106dfa:	68fb      	ldr	r3, [r7, #12]
 8106dfc:	3304      	adds	r3, #4
 8106dfe:	4619      	mov	r1, r3
 8106e00:	4610      	mov	r0, r2
 8106e02:	f7fd fffc 	bl	8104dfe <vListInsert>
 8106e06:	e012      	b.n	8106e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8106e08:	687a      	ldr	r2, [r7, #4]
 8106e0a:	683b      	ldr	r3, [r7, #0]
 8106e0c:	429a      	cmp	r2, r3
 8106e0e:	d206      	bcs.n	8106e1e <prvInsertTimerInActiveList+0x62>
 8106e10:	68ba      	ldr	r2, [r7, #8]
 8106e12:	683b      	ldr	r3, [r7, #0]
 8106e14:	429a      	cmp	r2, r3
 8106e16:	d302      	bcc.n	8106e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8106e18:	2301      	movs	r3, #1
 8106e1a:	617b      	str	r3, [r7, #20]
 8106e1c:	e007      	b.n	8106e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8106e1e:	4b07      	ldr	r3, [pc, #28]	; (8106e3c <prvInsertTimerInActiveList+0x80>)
 8106e20:	681a      	ldr	r2, [r3, #0]
 8106e22:	68fb      	ldr	r3, [r7, #12]
 8106e24:	3304      	adds	r3, #4
 8106e26:	4619      	mov	r1, r3
 8106e28:	4610      	mov	r0, r2
 8106e2a:	f7fd ffe8 	bl	8104dfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8106e2e:	697b      	ldr	r3, [r7, #20]
}
 8106e30:	4618      	mov	r0, r3
 8106e32:	3718      	adds	r7, #24
 8106e34:	46bd      	mov	sp, r7
 8106e36:	bd80      	pop	{r7, pc}
 8106e38:	10004834 	.word	0x10004834
 8106e3c:	10004830 	.word	0x10004830

08106e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8106e40:	b580      	push	{r7, lr}
 8106e42:	b08e      	sub	sp, #56	; 0x38
 8106e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8106e46:	e0c6      	b.n	8106fd6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	2b00      	cmp	r3, #0
 8106e4c:	da17      	bge.n	8106e7e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8106e4e:	1d3b      	adds	r3, r7, #4
 8106e50:	3304      	adds	r3, #4
 8106e52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8106e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e56:	2b00      	cmp	r3, #0
 8106e58:	d109      	bne.n	8106e6e <prvProcessReceivedCommands+0x2e>
 8106e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106e5e:	f383 8811 	msr	BASEPRI, r3
 8106e62:	f3bf 8f6f 	isb	sy
 8106e66:	f3bf 8f4f 	dsb	sy
 8106e6a:	61fb      	str	r3, [r7, #28]
 8106e6c:	e7fe      	b.n	8106e6c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8106e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e70:	681b      	ldr	r3, [r3, #0]
 8106e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106e74:	6850      	ldr	r0, [r2, #4]
 8106e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106e78:	6892      	ldr	r2, [r2, #8]
 8106e7a:	4611      	mov	r1, r2
 8106e7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8106e7e:	687b      	ldr	r3, [r7, #4]
 8106e80:	2b00      	cmp	r3, #0
 8106e82:	f2c0 80a7 	blt.w	8106fd4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8106e86:	68fb      	ldr	r3, [r7, #12]
 8106e88:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8106e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e8c:	695b      	ldr	r3, [r3, #20]
 8106e8e:	2b00      	cmp	r3, #0
 8106e90:	d004      	beq.n	8106e9c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8106e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e94:	3304      	adds	r3, #4
 8106e96:	4618      	mov	r0, r3
 8106e98:	f7fd ffea 	bl	8104e70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8106e9c:	463b      	mov	r3, r7
 8106e9e:	4618      	mov	r0, r3
 8106ea0:	f7ff ff6c 	bl	8106d7c <prvSampleTimeNow>
 8106ea4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8106ea6:	687b      	ldr	r3, [r7, #4]
 8106ea8:	2b09      	cmp	r3, #9
 8106eaa:	f200 8094 	bhi.w	8106fd6 <prvProcessReceivedCommands+0x196>
 8106eae:	a201      	add	r2, pc, #4	; (adr r2, 8106eb4 <prvProcessReceivedCommands+0x74>)
 8106eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106eb4:	08106edd 	.word	0x08106edd
 8106eb8:	08106edd 	.word	0x08106edd
 8106ebc:	08106edd 	.word	0x08106edd
 8106ec0:	08106f4f 	.word	0x08106f4f
 8106ec4:	08106f63 	.word	0x08106f63
 8106ec8:	08106fab 	.word	0x08106fab
 8106ecc:	08106edd 	.word	0x08106edd
 8106ed0:	08106edd 	.word	0x08106edd
 8106ed4:	08106f4f 	.word	0x08106f4f
 8106ed8:	08106f63 	.word	0x08106f63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8106edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106ee2:	f043 0301 	orr.w	r3, r3, #1
 8106ee6:	b2da      	uxtb	r2, r3
 8106ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8106eee:	68ba      	ldr	r2, [r7, #8]
 8106ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ef2:	699b      	ldr	r3, [r3, #24]
 8106ef4:	18d1      	adds	r1, r2, r3
 8106ef6:	68bb      	ldr	r3, [r7, #8]
 8106ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106efc:	f7ff ff5e 	bl	8106dbc <prvInsertTimerInActiveList>
 8106f00:	4603      	mov	r3, r0
 8106f02:	2b00      	cmp	r3, #0
 8106f04:	d067      	beq.n	8106fd6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8106f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f08:	6a1b      	ldr	r3, [r3, #32]
 8106f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106f0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8106f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106f14:	f003 0304 	and.w	r3, r3, #4
 8106f18:	2b00      	cmp	r3, #0
 8106f1a:	d05c      	beq.n	8106fd6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8106f1c:	68ba      	ldr	r2, [r7, #8]
 8106f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f20:	699b      	ldr	r3, [r3, #24]
 8106f22:	441a      	add	r2, r3
 8106f24:	2300      	movs	r3, #0
 8106f26:	9300      	str	r3, [sp, #0]
 8106f28:	2300      	movs	r3, #0
 8106f2a:	2100      	movs	r1, #0
 8106f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106f2e:	f7ff fe09 	bl	8106b44 <xTimerGenericCommand>
 8106f32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8106f34:	6a3b      	ldr	r3, [r7, #32]
 8106f36:	2b00      	cmp	r3, #0
 8106f38:	d14d      	bne.n	8106fd6 <prvProcessReceivedCommands+0x196>
 8106f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f3e:	f383 8811 	msr	BASEPRI, r3
 8106f42:	f3bf 8f6f 	isb	sy
 8106f46:	f3bf 8f4f 	dsb	sy
 8106f4a:	61bb      	str	r3, [r7, #24]
 8106f4c:	e7fe      	b.n	8106f4c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8106f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106f54:	f023 0301 	bic.w	r3, r3, #1
 8106f58:	b2da      	uxtb	r2, r3
 8106f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8106f60:	e039      	b.n	8106fd6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8106f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106f68:	f043 0301 	orr.w	r3, r3, #1
 8106f6c:	b2da      	uxtb	r2, r3
 8106f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8106f74:	68ba      	ldr	r2, [r7, #8]
 8106f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8106f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f7c:	699b      	ldr	r3, [r3, #24]
 8106f7e:	2b00      	cmp	r3, #0
 8106f80:	d109      	bne.n	8106f96 <prvProcessReceivedCommands+0x156>
 8106f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8106f86:	f383 8811 	msr	BASEPRI, r3
 8106f8a:	f3bf 8f6f 	isb	sy
 8106f8e:	f3bf 8f4f 	dsb	sy
 8106f92:	617b      	str	r3, [r7, #20]
 8106f94:	e7fe      	b.n	8106f94 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8106f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f98:	699a      	ldr	r2, [r3, #24]
 8106f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106f9c:	18d1      	adds	r1, r2, r3
 8106f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106fa4:	f7ff ff0a 	bl	8106dbc <prvInsertTimerInActiveList>
					break;
 8106fa8:	e015      	b.n	8106fd6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8106faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106fb0:	f003 0302 	and.w	r3, r3, #2
 8106fb4:	2b00      	cmp	r3, #0
 8106fb6:	d103      	bne.n	8106fc0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8106fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8106fba:	f7fd fdbb 	bl	8104b34 <vPortFree>
 8106fbe:	e00a      	b.n	8106fd6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8106fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8106fc6:	f023 0301 	bic.w	r3, r3, #1
 8106fca:	b2da      	uxtb	r2, r3
 8106fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8106fd2:	e000      	b.n	8106fd6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8106fd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8106fd6:	4b07      	ldr	r3, [pc, #28]	; (8106ff4 <prvProcessReceivedCommands+0x1b4>)
 8106fd8:	681b      	ldr	r3, [r3, #0]
 8106fda:	1d39      	adds	r1, r7, #4
 8106fdc:	2200      	movs	r2, #0
 8106fde:	4618      	mov	r0, r3
 8106fe0:	f7fe fc3a 	bl	8105858 <xQueueReceive>
 8106fe4:	4603      	mov	r3, r0
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	f47f af2e 	bne.w	8106e48 <prvProcessReceivedCommands+0x8>
	}
}
 8106fec:	bf00      	nop
 8106fee:	3730      	adds	r7, #48	; 0x30
 8106ff0:	46bd      	mov	sp, r7
 8106ff2:	bd80      	pop	{r7, pc}
 8106ff4:	10004838 	.word	0x10004838

08106ff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8106ff8:	b580      	push	{r7, lr}
 8106ffa:	b088      	sub	sp, #32
 8106ffc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8106ffe:	e047      	b.n	8107090 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8107000:	4b2d      	ldr	r3, [pc, #180]	; (81070b8 <prvSwitchTimerLists+0xc0>)
 8107002:	681b      	ldr	r3, [r3, #0]
 8107004:	68db      	ldr	r3, [r3, #12]
 8107006:	681b      	ldr	r3, [r3, #0]
 8107008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810700a:	4b2b      	ldr	r3, [pc, #172]	; (81070b8 <prvSwitchTimerLists+0xc0>)
 810700c:	681b      	ldr	r3, [r3, #0]
 810700e:	68db      	ldr	r3, [r3, #12]
 8107010:	68db      	ldr	r3, [r3, #12]
 8107012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8107014:	68fb      	ldr	r3, [r7, #12]
 8107016:	3304      	adds	r3, #4
 8107018:	4618      	mov	r0, r3
 810701a:	f7fd ff29 	bl	8104e70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810701e:	68fb      	ldr	r3, [r7, #12]
 8107020:	6a1b      	ldr	r3, [r3, #32]
 8107022:	68f8      	ldr	r0, [r7, #12]
 8107024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8107026:	68fb      	ldr	r3, [r7, #12]
 8107028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810702c:	f003 0304 	and.w	r3, r3, #4
 8107030:	2b00      	cmp	r3, #0
 8107032:	d02d      	beq.n	8107090 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8107034:	68fb      	ldr	r3, [r7, #12]
 8107036:	699b      	ldr	r3, [r3, #24]
 8107038:	693a      	ldr	r2, [r7, #16]
 810703a:	4413      	add	r3, r2
 810703c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810703e:	68ba      	ldr	r2, [r7, #8]
 8107040:	693b      	ldr	r3, [r7, #16]
 8107042:	429a      	cmp	r2, r3
 8107044:	d90e      	bls.n	8107064 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8107046:	68fb      	ldr	r3, [r7, #12]
 8107048:	68ba      	ldr	r2, [r7, #8]
 810704a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810704c:	68fb      	ldr	r3, [r7, #12]
 810704e:	68fa      	ldr	r2, [r7, #12]
 8107050:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8107052:	4b19      	ldr	r3, [pc, #100]	; (81070b8 <prvSwitchTimerLists+0xc0>)
 8107054:	681a      	ldr	r2, [r3, #0]
 8107056:	68fb      	ldr	r3, [r7, #12]
 8107058:	3304      	adds	r3, #4
 810705a:	4619      	mov	r1, r3
 810705c:	4610      	mov	r0, r2
 810705e:	f7fd fece 	bl	8104dfe <vListInsert>
 8107062:	e015      	b.n	8107090 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8107064:	2300      	movs	r3, #0
 8107066:	9300      	str	r3, [sp, #0]
 8107068:	2300      	movs	r3, #0
 810706a:	693a      	ldr	r2, [r7, #16]
 810706c:	2100      	movs	r1, #0
 810706e:	68f8      	ldr	r0, [r7, #12]
 8107070:	f7ff fd68 	bl	8106b44 <xTimerGenericCommand>
 8107074:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	2b00      	cmp	r3, #0
 810707a:	d109      	bne.n	8107090 <prvSwitchTimerLists+0x98>
 810707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8107080:	f383 8811 	msr	BASEPRI, r3
 8107084:	f3bf 8f6f 	isb	sy
 8107088:	f3bf 8f4f 	dsb	sy
 810708c:	603b      	str	r3, [r7, #0]
 810708e:	e7fe      	b.n	810708e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8107090:	4b09      	ldr	r3, [pc, #36]	; (81070b8 <prvSwitchTimerLists+0xc0>)
 8107092:	681b      	ldr	r3, [r3, #0]
 8107094:	681b      	ldr	r3, [r3, #0]
 8107096:	2b00      	cmp	r3, #0
 8107098:	d1b2      	bne.n	8107000 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810709a:	4b07      	ldr	r3, [pc, #28]	; (81070b8 <prvSwitchTimerLists+0xc0>)
 810709c:	681b      	ldr	r3, [r3, #0]
 810709e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 81070a0:	4b06      	ldr	r3, [pc, #24]	; (81070bc <prvSwitchTimerLists+0xc4>)
 81070a2:	681b      	ldr	r3, [r3, #0]
 81070a4:	4a04      	ldr	r2, [pc, #16]	; (81070b8 <prvSwitchTimerLists+0xc0>)
 81070a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 81070a8:	4a04      	ldr	r2, [pc, #16]	; (81070bc <prvSwitchTimerLists+0xc4>)
 81070aa:	697b      	ldr	r3, [r7, #20]
 81070ac:	6013      	str	r3, [r2, #0]
}
 81070ae:	bf00      	nop
 81070b0:	3718      	adds	r7, #24
 81070b2:	46bd      	mov	sp, r7
 81070b4:	bd80      	pop	{r7, pc}
 81070b6:	bf00      	nop
 81070b8:	10004830 	.word	0x10004830
 81070bc:	10004834 	.word	0x10004834

081070c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 81070c0:	b580      	push	{r7, lr}
 81070c2:	b082      	sub	sp, #8
 81070c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 81070c6:	f7fe f821 	bl	810510c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 81070ca:	4b15      	ldr	r3, [pc, #84]	; (8107120 <prvCheckForValidListAndQueue+0x60>)
 81070cc:	681b      	ldr	r3, [r3, #0]
 81070ce:	2b00      	cmp	r3, #0
 81070d0:	d120      	bne.n	8107114 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 81070d2:	4814      	ldr	r0, [pc, #80]	; (8107124 <prvCheckForValidListAndQueue+0x64>)
 81070d4:	f7fd fe42 	bl	8104d5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 81070d8:	4813      	ldr	r0, [pc, #76]	; (8107128 <prvCheckForValidListAndQueue+0x68>)
 81070da:	f7fd fe3f 	bl	8104d5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 81070de:	4b13      	ldr	r3, [pc, #76]	; (810712c <prvCheckForValidListAndQueue+0x6c>)
 81070e0:	4a10      	ldr	r2, [pc, #64]	; (8107124 <prvCheckForValidListAndQueue+0x64>)
 81070e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 81070e4:	4b12      	ldr	r3, [pc, #72]	; (8107130 <prvCheckForValidListAndQueue+0x70>)
 81070e6:	4a10      	ldr	r2, [pc, #64]	; (8107128 <prvCheckForValidListAndQueue+0x68>)
 81070e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 81070ea:	2300      	movs	r3, #0
 81070ec:	9300      	str	r3, [sp, #0]
 81070ee:	4b11      	ldr	r3, [pc, #68]	; (8107134 <prvCheckForValidListAndQueue+0x74>)
 81070f0:	4a11      	ldr	r2, [pc, #68]	; (8107138 <prvCheckForValidListAndQueue+0x78>)
 81070f2:	2110      	movs	r1, #16
 81070f4:	200a      	movs	r0, #10
 81070f6:	f7fe f98b 	bl	8105410 <xQueueGenericCreateStatic>
 81070fa:	4602      	mov	r2, r0
 81070fc:	4b08      	ldr	r3, [pc, #32]	; (8107120 <prvCheckForValidListAndQueue+0x60>)
 81070fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8107100:	4b07      	ldr	r3, [pc, #28]	; (8107120 <prvCheckForValidListAndQueue+0x60>)
 8107102:	681b      	ldr	r3, [r3, #0]
 8107104:	2b00      	cmp	r3, #0
 8107106:	d005      	beq.n	8107114 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8107108:	4b05      	ldr	r3, [pc, #20]	; (8107120 <prvCheckForValidListAndQueue+0x60>)
 810710a:	681b      	ldr	r3, [r3, #0]
 810710c:	490b      	ldr	r1, [pc, #44]	; (810713c <prvCheckForValidListAndQueue+0x7c>)
 810710e:	4618      	mov	r0, r3
 8107110:	f7fe fd8e 	bl	8105c30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8107114:	f7fe f828 	bl	8105168 <vPortExitCritical>
}
 8107118:	bf00      	nop
 810711a:	46bd      	mov	sp, r7
 810711c:	bd80      	pop	{r7, pc}
 810711e:	bf00      	nop
 8107120:	10004838 	.word	0x10004838
 8107124:	10004808 	.word	0x10004808
 8107128:	1000481c 	.word	0x1000481c
 810712c:	10004830 	.word	0x10004830
 8107130:	10004834 	.word	0x10004834
 8107134:	100048e4 	.word	0x100048e4
 8107138:	10004844 	.word	0x10004844
 810713c:	081071f4 	.word	0x081071f4

08107140 <__libc_init_array>:
 8107140:	b570      	push	{r4, r5, r6, lr}
 8107142:	4e0d      	ldr	r6, [pc, #52]	; (8107178 <__libc_init_array+0x38>)
 8107144:	4c0d      	ldr	r4, [pc, #52]	; (810717c <__libc_init_array+0x3c>)
 8107146:	1ba4      	subs	r4, r4, r6
 8107148:	10a4      	asrs	r4, r4, #2
 810714a:	2500      	movs	r5, #0
 810714c:	42a5      	cmp	r5, r4
 810714e:	d109      	bne.n	8107164 <__libc_init_array+0x24>
 8107150:	4e0b      	ldr	r6, [pc, #44]	; (8107180 <__libc_init_array+0x40>)
 8107152:	4c0c      	ldr	r4, [pc, #48]	; (8107184 <__libc_init_array+0x44>)
 8107154:	f000 f82c 	bl	81071b0 <_init>
 8107158:	1ba4      	subs	r4, r4, r6
 810715a:	10a4      	asrs	r4, r4, #2
 810715c:	2500      	movs	r5, #0
 810715e:	42a5      	cmp	r5, r4
 8107160:	d105      	bne.n	810716e <__libc_init_array+0x2e>
 8107162:	bd70      	pop	{r4, r5, r6, pc}
 8107164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8107168:	4798      	blx	r3
 810716a:	3501      	adds	r5, #1
 810716c:	e7ee      	b.n	810714c <__libc_init_array+0xc>
 810716e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8107172:	4798      	blx	r3
 8107174:	3501      	adds	r5, #1
 8107176:	e7f2      	b.n	810715e <__libc_init_array+0x1e>
 8107178:	08107250 	.word	0x08107250
 810717c:	08107250 	.word	0x08107250
 8107180:	08107250 	.word	0x08107250
 8107184:	08107254 	.word	0x08107254

08107188 <memcpy>:
 8107188:	b510      	push	{r4, lr}
 810718a:	1e43      	subs	r3, r0, #1
 810718c:	440a      	add	r2, r1
 810718e:	4291      	cmp	r1, r2
 8107190:	d100      	bne.n	8107194 <memcpy+0xc>
 8107192:	bd10      	pop	{r4, pc}
 8107194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107198:	f803 4f01 	strb.w	r4, [r3, #1]!
 810719c:	e7f7      	b.n	810718e <memcpy+0x6>

0810719e <memset>:
 810719e:	4402      	add	r2, r0
 81071a0:	4603      	mov	r3, r0
 81071a2:	4293      	cmp	r3, r2
 81071a4:	d100      	bne.n	81071a8 <memset+0xa>
 81071a6:	4770      	bx	lr
 81071a8:	f803 1b01 	strb.w	r1, [r3], #1
 81071ac:	e7f9      	b.n	81071a2 <memset+0x4>
	...

081071b0 <_init>:
 81071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81071b2:	bf00      	nop
 81071b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81071b6:	bc08      	pop	{r3}
 81071b8:	469e      	mov	lr, r3
 81071ba:	4770      	bx	lr

081071bc <_fini>:
 81071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81071be:	bf00      	nop
 81071c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81071c2:	bc08      	pop	{r3}
 81071c4:	469e      	mov	lr, r3
 81071c6:	4770      	bx	lr
