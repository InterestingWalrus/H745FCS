
H745ZI-Q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800608c  0800608c  0001608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  08006094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004a38  20000014  080060a8  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20004a4c  080060a8  00024a4c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00023bf1  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003957  00000000  00000000  00043c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001518  00000000  00000000  00047590  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000013c0  00000000  00000000  00048aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a333  00000000  00000000  00049e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000115e8  00000000  00000000  0008419b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00188ddf  00000000  00000000  00095783  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0021e562  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000057f4  00000000  00000000  0021e5e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800601c 	.word	0x0800601c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	0800601c 	.word	0x0800601c

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b2f      	ldr	r3, [pc, #188]	; (80003a4 <SystemInit+0xc4>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a2e      	ldr	r2, [pc, #184]	; (80003a4 <SystemInit+0xc4>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80002f4:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <SystemInit+0xc4>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a2a      	ldr	r2, [pc, #168]	; (80003a4 <SystemInit+0xc4>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <SystemInit+0xc8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <SystemInit+0xc8>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <SystemInit+0xc8>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <SystemInit+0xc8>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4924      	ldr	r1, [pc, #144]	; (80003a8 <SystemInit+0xc8>)
 8000318:	4b24      	ldr	r3, [pc, #144]	; (80003ac <SystemInit+0xcc>)
 800031a:	4013      	ands	r3, r2
 800031c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <SystemInit+0xc8>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <SystemInit+0xc8>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <SystemInit+0xc8>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <SystemInit+0xc8>)
 8000332:	2200      	movs	r2, #0
 8000334:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <SystemInit+0xc8>)
 8000338:	2200      	movs	r2, #0
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <SystemInit+0xc8>)
 800033e:	2200      	movs	r2, #0
 8000340:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <SystemInit+0xc8>)
 8000344:	2200      	movs	r2, #0
 8000346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <SystemInit+0xc8>)
 800034a:	2200      	movs	r2, #0
 800034c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <SystemInit+0xc8>)
 8000350:	2200      	movs	r2, #0
 8000352:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <SystemInit+0xc8>)
 8000356:	2200      	movs	r2, #0
 8000358:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <SystemInit+0xc8>)
 800035c:	2200      	movs	r2, #0
 800035e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <SystemInit+0xc8>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <SystemInit+0xc8>)
 8000366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800036a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <SystemInit+0xc8>)
 800036e:	2200      	movs	r2, #0
 8000370:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <SystemInit+0xd0>)
 8000374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <SystemInit+0xd0>)
 8000378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <SystemInit+0xd4>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <SystemInit+0xd8>)
 8000384:	4013      	ands	r3, r2
 8000386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800038a:	d202      	bcs.n	8000392 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <SystemInit+0xdc>)
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SystemInit+0xc4>)
 8000394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000398:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	e000ed00 	.word	0xe000ed00
 80003a8:	58024400 	.word	0x58024400
 80003ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80003b0:	580000c0 	.word	0x580000c0
 80003b4:	5c001000 	.word	0x5c001000
 80003b8:	ffff0000 	.word	0xffff0000
 80003bc:	51008108 	.word	0x51008108

080003c0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <SCB_EnableICache+0x3c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003d8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <SCB_EnableICache+0x3c>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	4a06      	ldr	r2, [pc, #24]	; (80003fc <SCB_EnableICache+0x3c>)
 80003e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003ec:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	e000ed00 	.word	0xe000ed00

08000400 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <SCB_EnableDCache+0x7c>)
 8000408:	2200      	movs	r2, #0
 800040a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800040e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000412:	4b1a      	ldr	r3, [pc, #104]	; (800047c <SCB_EnableDCache+0x7c>)
 8000414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000418:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	0b5b      	lsrs	r3, r3, #13
 800041e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000422:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	08db      	lsrs	r3, r3, #3
 8000428:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800042c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	015a      	lsls	r2, r3, #5
 8000432:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000436:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800043c:	490f      	ldr	r1, [pc, #60]	; (800047c <SCB_EnableDCache+0x7c>)
 800043e:	4313      	orrs	r3, r2
 8000440:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000444:	68bb      	ldr	r3, [r7, #8]
 8000446:	1e5a      	subs	r2, r3, #1
 8000448:	60ba      	str	r2, [r7, #8]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d1ef      	bne.n	800042e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	1e5a      	subs	r2, r3, #1
 8000452:	60fa      	str	r2, [r7, #12]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d1e5      	bne.n	8000424 <SCB_EnableDCache+0x24>
 8000458:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <SCB_EnableDCache+0x7c>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	4a06      	ldr	r2, [pc, #24]	; (800047c <SCB_EnableDCache+0x7c>)
 8000462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000466:	6153      	str	r3, [r2, #20]
 8000468:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800046c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
  /* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000486:	f7ff ff9b 	bl	80003c0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800048a:	f7ff ffb9 	bl	8000400 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800048e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000492:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000494:	bf00      	nop
 8000496:	4b26      	ldr	r3, [pc, #152]	; (8000530 <main+0xb0>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d004      	beq.n	80004ac <main+0x2c>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	1e5a      	subs	r2, r3, #1
 80004a6:	607a      	str	r2, [r7, #4]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dcf4      	bgt.n	8000496 <main+0x16>
  if ( timeout < 0 )
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	da01      	bge.n	80004b6 <main+0x36>
  {
  Error_Handler();
 80004b2:	f000 f95d 	bl	8000770 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fa4b 	bl	8000950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f841 	bl	8000540 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80004be:	4b1c      	ldr	r3, [pc, #112]	; (8000530 <main+0xb0>)
 80004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c4:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <main+0xb0>)
 80004c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <main+0xb0>)
 80004d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004dc:	2000      	movs	r0, #0
 80004de:	f000 fd49 	bl	8000f74 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fd5f 	bl	8000fa8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ee:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004f0:	bf00      	nop
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <main+0xb0>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d104      	bne.n	8000508 <main+0x88>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	1e5a      	subs	r2, r3, #1
 8000502:	607a      	str	r2, [r7, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	dcf4      	bgt.n	80004f2 <main+0x72>
if ( timeout < 0 )
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2b00      	cmp	r3, #0
 800050c:	da01      	bge.n	8000512 <main+0x92>
{
Error_Handler();
 800050e:	f000 f92f 	bl	8000770 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8c5 	bl	80006a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000516:	f003 f80b 	bl	8003530 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800051a:	4a06      	ldr	r2, [pc, #24]	; (8000534 <main+0xb4>)
 800051c:	2100      	movs	r1, #0
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0xb8>)
 8000520:	f003 f870 	bl	8003604 <osThreadNew>
 8000524:	4602      	mov	r2, r0
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <main+0xbc>)
 8000528:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800052a:	f003 f835 	bl	8003598 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	e7fe      	b.n	800052e <main+0xae>
 8000530:	58024400 	.word	0x58024400
 8000534:	08006068 	.word	0x08006068
 8000538:	0800072d 	.word	0x0800072d
 800053c:	20004938 	.word	0x20004938

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0cc      	sub	sp, #304	; 0x130
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800054a:	224c      	movs	r2, #76	; 0x4c
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f005 fd5b 	bl	800600a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fd54 	bl	800600a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000562:	f107 0308 	add.w	r3, r7, #8
 8000566:	4618      	mov	r0, r3
 8000568:	23bc      	movs	r3, #188	; 0xbc
 800056a:	461a      	mov	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f005 fd4c 	bl	800600a <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000572:	2004      	movs	r0, #4
 8000574:	f000 fd50 	bl	8001018 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	4b46      	ldr	r3, [pc, #280]	; (8000698 <SystemClock_Config+0x158>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	4a45      	ldr	r2, [pc, #276]	; (8000698 <SystemClock_Config+0x158>)
 8000584:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000588:	6193      	str	r3, [r2, #24]
 800058a:	4b43      	ldr	r3, [pc, #268]	; (8000698 <SystemClock_Config+0x158>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	4b41      	ldr	r3, [pc, #260]	; (800069c <SystemClock_Config+0x15c>)
 8000598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800059a:	4a40      	ldr	r2, [pc, #256]	; (800069c <SystemClock_Config+0x15c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005a2:	4b3e      	ldr	r3, [pc, #248]	; (800069c <SystemClock_Config+0x15c>)
 80005a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005a6:	f003 0201 	and.w	r2, r3, #1
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b2:	bf00      	nop
 80005b4:	4b38      	ldr	r3, [pc, #224]	; (8000698 <SystemClock_Config+0x158>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c0:	d1f8      	bne.n	80005b4 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	2302      	movs	r3, #2
 80005d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 80005e2:	2378      	movs	r3, #120	; 0x78
 80005e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005fa:	230c      	movs	r3, #12
 80005fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fd5b 	bl	80010cc <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800061c:	f000 f8a8 	bl	8000770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	233f      	movs	r3, #63	; 0x3f
 8000622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000632:	2308      	movs	r3, #8
 8000634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000638:	2340      	movs	r3, #64	; 0x40
 800063a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800063e:	2340      	movs	r3, #64	; 0x40
 8000640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000648:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800064c:	2340      	movs	r3, #64	; 0x40
 800064e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000652:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000656:	2104      	movs	r1, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f90f 	bl	800187c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000664:	f000 f884 	bl	8000770 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	2202      	movs	r2, #2
 800066e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fcad 	bl	8001fdc <HAL_RCCEx_PeriphCLKConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x14c>
  {
    Error_Handler();
 8000688:	f000 f872 	bl	8000770 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	58024800 	.word	0x58024800
 800069c:	58000400 	.word	0x58000400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_GPIO_Init+0x84>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <MX_GPIO_Init+0x84>)
 80006be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_GPIO_Init+0x84>)
 80006c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_GPIO_Init+0x84>)
 80006d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_GPIO_Init+0x84>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_GPIO_Init+0x84>)
 80006e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <MX_GPIO_Init+0x88>)
 80006fa:	f000 fc21 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2301      	movs	r3, #1
 8000706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	4619      	mov	r1, r3
 8000716:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_GPIO_Init+0x88>)
 8000718:	f000 fa62 	bl	8000be0 <HAL_GPIO_Init>

}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58024400 	.word	0x58024400
 8000728:	58020400 	.word	0x58020400

0800072c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  LED3_ON();
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <StartDefaultTask+0x1c>)
 800073c:	f000 fc00 	bl	8000f40 <HAL_GPIO_WritePin>
    osDelay(1);
 8000740:	2001      	movs	r0, #1
 8000742:	f003 f805 	bl	8003750 <osDelay>
	  LED3_ON();
 8000746:	e7f5      	b.n	8000734 <StartDefaultTask+0x8>
 8000748:	58020400 	.word	0x58020400

0800074c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d101      	bne.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800075e:	f000 f933 	bl	80009c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40001000 	.word	0x40001000

08000770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_MspInit+0x58>)
 8000788:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <HAL_MspInit+0x58>)
 800078e:	f043 0302 	orr.w	r3, r3, #2
 8000792:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_MspInit+0x58>)
 8000798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800079c:	f003 0302 	and.w	r3, r3, #2
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	210f      	movs	r1, #15
 80007a8:	f06f 0001 	mvn.w	r0, #1
 80007ac:	f000 f9f0 	bl	8000b90 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 5, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2105      	movs	r1, #5
 80007b4:	2041      	movs	r0, #65	; 0x41
 80007b6:	f000 f9eb 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80007ba:	2041      	movs	r0, #65	; 0x41
 80007bc:	f000 fa02 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2105      	movs	r1, #5
 80007c4:	207d      	movs	r0, #125	; 0x7d
 80007c6:	f000 f9e3 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80007ca:	207d      	movs	r0, #125	; 0x7d
 80007cc:	f000 f9fa 	bl	8000bc4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58024400 	.word	0x58024400

080007dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	2036      	movs	r0, #54	; 0x36
 80007f2:	f000 f9cd 	bl	8000b90 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80007f6:	2036      	movs	r0, #54	; 0x36
 80007f8:	f000 f9e4 	bl	8000bc4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <HAL_InitTick+0xa8>)
 80007fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000802:	4a20      	ldr	r2, [pc, #128]	; (8000884 <HAL_InitTick+0xa8>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <HAL_InitTick+0xa8>)
 800080e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800081a:	f107 020c 	add.w	r2, r7, #12
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f001 fb97 	bl	8001f58 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800082a:	f001 fb7f 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 800082e:	4603      	mov	r3, r0
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_InitTick+0xac>)
 8000838:	fba2 2303 	umull	r2, r3, r2, r3
 800083c:	0c9b      	lsrs	r3, r3, #18
 800083e:	3b01      	subs	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_InitTick+0xb0>)
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <HAL_InitTick+0xb4>)
 8000846:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <HAL_InitTick+0xb0>)
 800084a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800084e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_InitTick+0xb0>)
 8000852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000854:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_InitTick+0xb0>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b0b      	ldr	r3, [pc, #44]	; (800088c <HAL_InitTick+0xb0>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <HAL_InitTick+0xb0>)
 8000864:	f002 fbfc 	bl	8003060 <HAL_TIM_Base_Init>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d104      	bne.n	8000878 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <HAL_InitTick+0xb0>)
 8000870:	f002 fc2c 	bl	80030cc <HAL_TIM_Base_Start_IT>
 8000874:	4603      	mov	r3, r0
 8000876:	e000      	b.n	800087a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
}
 800087a:	4618      	mov	r0, r3
 800087c:	3738      	adds	r7, #56	; 0x38
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	58024400 	.word	0x58024400
 8000888:	431bde83 	.word	0x431bde83
 800088c:	200049c8 	.word	0x200049c8
 8000890:	40001000 	.word	0x40001000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
     HAL_TIM_IRQHandler(&htim6);
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <TIM6_DAC_IRQHandler+0x14>)
 80008ce:	f002 fc27 	bl	8003120 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008d2:	4802      	ldr	r0, [pc, #8]	; (80008dc <TIM6_DAC_IRQHandler+0x14>)
 80008d4:	f002 fc24 	bl	8003120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	200049c8 	.word	0x200049c8

080008e0 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80008f2:	f000 fb6d 	bl	8000fd0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000934 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000900:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000902:	e003      	b.n	800090c <LoopCopyDataInit>

08000904 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000906:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000908:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800090a:	3104      	adds	r1, #4

0800090c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800090c:	480b      	ldr	r0, [pc, #44]	; (800093c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000910:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000912:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000914:	d3f6      	bcc.n	8000904 <CopyDataInit>
  ldr  r2, =_sbss
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000918:	e002      	b.n	8000920 <LoopFillZerobss>

0800091a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800091a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800091c:	f842 3b04 	str.w	r3, [r2], #4

08000920 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000922:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000924:	d3f9      	bcc.n	800091a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000926:	f7ff fcdb 	bl	80002e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092a:	f005 fb3f 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092e:	f7ff fda7 	bl	8000480 <main>
  bx  lr    
 8000932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000938:	08006094 	.word	0x08006094
  ldr  r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000940:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000944:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000948:	20004a4c 	.word	0x20004a4c

0800094c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC3_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000956:	2003      	movs	r0, #3
 8000958:	f000 f90f 	bl	8000b7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800095c:	f001 f944 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8000960:	4601      	mov	r1, r0
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_Init+0x68>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	0a1b      	lsrs	r3, r3, #8
 8000968:	f003 030f 	and.w	r3, r3, #15
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <HAL_Init+0x6c>)
 800096e:	5cd3      	ldrb	r3, [r2, r3]
 8000970:	f003 031f 	and.w	r3, r3, #31
 8000974:	fa21 f303 	lsr.w	r3, r1, r3
 8000978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_Init+0x68>)
 800097c:	699b      	ldr	r3, [r3, #24]
 800097e:	f003 030f 	and.w	r3, r3, #15
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_Init+0x6c>)
 8000984:	5cd3      	ldrb	r3, [r2, r3]
 8000986:	f003 031f 	and.w	r3, r3, #31
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	fa22 f303 	lsr.w	r3, r2, r3
 8000990:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <HAL_Init+0x70>)
 8000992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000994:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <HAL_Init+0x74>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff ff1e 	bl	80007dc <HAL_InitTick>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e002      	b.n	80009b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009aa:	f7ff fee9 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	58024400 	.word	0x58024400
 80009bc:	08006058 	.word	0x08006058
 80009c0:	20000004 	.word	0x20000004
 80009c4:	20000000 	.word	0x20000000

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	20004a08 	.word	0x20004a08

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20004a08 	.word	0x20004a08

08000a08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <HAL_GetREVID+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	0c1b      	lsrs	r3, r3, #16
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	5c001000 	.word	0x5c001000

08000a20 <__NVIC_SetPriorityGrouping>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <__NVIC_SetPriorityGrouping+0x40>)
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a36:	68ba      	ldr	r2, [r7, #8]
 8000a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x40>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00
 8000a64:	05fa0000 	.word	0x05fa0000

08000a68 <__NVIC_GetPriorityGrouping>:
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <__NVIC_GetPriorityGrouping+0x18>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	f003 0307 	and.w	r3, r3, #7
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <__NVIC_EnableIRQ>:
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	db0b      	blt.n	8000aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	f003 021f 	and.w	r2, r3, #31
 8000a9c:	4907      	ldr	r1, [pc, #28]	; (8000abc <__NVIC_EnableIRQ+0x38>)
 8000a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa2:	095b      	lsrs	r3, r3, #5
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ff4c 	bl	8000a20 <__NVIC_SetPriorityGrouping>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
 8000b9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b9e:	f7ff ff63 	bl	8000a68 <__NVIC_GetPriorityGrouping>
 8000ba2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	68b9      	ldr	r1, [r7, #8]
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f7ff ffb3 	bl	8000b14 <NVIC_EncodePriority>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff82 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff56 	bl	8000a84 <__NVIC_EnableIRQ>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bee:	4b89      	ldr	r3, [pc, #548]	; (8000e14 <HAL_GPIO_Init+0x234>)
 8000bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bf2:	e194      	b.n	8000f1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8186 	beq.w	8000f18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d00b      	beq.n	8000c2c <HAL_GPIO_Init+0x4c>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c20:	2b11      	cmp	r3, #17
 8000c22:	d003      	beq.n	8000c2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b12      	cmp	r3, #18
 8000c2a:	d130      	bne.n	8000c8e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	2203      	movs	r2, #3
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	68da      	ldr	r2, [r3, #12]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c62:	2201      	movs	r2, #1
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	f003 0201 	and.w	r2, r3, #1
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	2203      	movs	r2, #3
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0xee>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b12      	cmp	r3, #18
 8000ccc:	d123      	bne.n	8000d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	69b9      	ldr	r1, [r7, #24]
 8000d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0203 	and.w	r2, r3, #3
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80e0 	beq.w	8000f18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <HAL_GPIO_Init+0x238>)
 8000d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	; (8000e18 <HAL_GPIO_Init+0x238>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <HAL_GPIO_Init+0x238>)
 8000d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <HAL_GPIO_Init+0x23c>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <HAL_GPIO_Init+0x240>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d052      	beq.n	8000e48 <HAL_GPIO_Init+0x268>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_GPIO_Init+0x244>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d031      	beq.n	8000e0e <HAL_GPIO_Init+0x22e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <HAL_GPIO_Init+0x248>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d02b      	beq.n	8000e0a <HAL_GPIO_Init+0x22a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <HAL_GPIO_Init+0x24c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d025      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <HAL_GPIO_Init+0x250>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01f      	beq.n	8000e02 <HAL_GPIO_Init+0x222>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <HAL_GPIO_Init+0x254>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x21e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	; (8000e38 <HAL_GPIO_Init+0x258>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_GPIO_Init+0x25c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x216>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_GPIO_Init+0x260>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x212>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_GPIO_Init+0x264>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x20e>
 8000dea:	2309      	movs	r3, #9
 8000dec:	e02d      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dee:	230a      	movs	r3, #10
 8000df0:	e02b      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000df2:	2308      	movs	r3, #8
 8000df4:	e029      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e027      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e025      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e023      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e021      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e01f      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e01d      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e01b      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e12:	bf00      	nop
 8000e14:	58000080 	.word	0x58000080
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58000400 	.word	0x58000400
 8000e20:	58020000 	.word	0x58020000
 8000e24:	58020400 	.word	0x58020400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020c00 	.word	0x58020c00
 8000e30:	58021000 	.word	0x58021000
 8000e34:	58021400 	.word	0x58021400
 8000e38:	58021800 	.word	0x58021800
 8000e3c:	58021c00 	.word	0x58021c00
 8000e40:	58022000 	.word	0x58022000
 8000e44:	58022400 	.word	0x58022400
 8000e48:	2300      	movs	r3, #0
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5a:	4938      	ldr	r1, [pc, #224]	; (8000f3c <HAL_GPIO_Init+0x35c>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4013      	ands	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ee2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f47f ae63 	bne.w	8000bf4 <HAL_GPIO_Init+0x14>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	58000400 	.word	0x58000400

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	041a      	lsls	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_HSEM_FastTake+0x2c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3320      	adds	r3, #32
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_HSEM_FastTake+0x30>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e000      	b.n	8000f92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	58026400 	.word	0x58026400
 8000fa4:	80000300 	.word	0x80000300

08000fa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000fb2:	4906      	ldr	r1, [pc, #24]	; (8000fcc <HAL_HSEM_Release+0x24>)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	58026400 	.word	0x58026400

08000fd0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_HSEM_IRQHandler+0x30>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <HAL_HSEM_IRQHandler+0x30>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4906      	ldr	r1, [pc, #24]	; (8001000 <HAL_HSEM_IRQHandler+0x30>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <HAL_HSEM_IRQHandler+0x30>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f807 	bl	8001004 <HAL_HSEM_FreeCallback>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	58026500 	.word	0x58026500

08001004 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001020:	4b29      	ldr	r3, [pc, #164]	; (80010c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	2b06      	cmp	r3, #6
 800102a:	d00a      	beq.n	8001042 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800102c:	4b26      	ldr	r3, [pc, #152]	; (80010c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	d001      	beq.n	800103e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e040      	b.n	80010c0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	e03e      	b.n	80010c0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800104a:	491f      	ldr	r1, [pc, #124]	; (80010c8 <HAL_PWREx_ConfigSupply+0xb0>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4313      	orrs	r3, r2
 8001050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001052:	f7ff fccd 	bl	80009f0 <HAL_GetTick>
 8001056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001058:	e009      	b.n	800106e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800105a:	f7ff fcc9 	bl	80009f0 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001068:	d901      	bls.n	800106e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e028      	b.n	80010c0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800107a:	d1ee      	bne.n	800105a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b1e      	cmp	r3, #30
 8001080:	d008      	beq.n	8001094 <HAL_PWREx_ConfigSupply+0x7c>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b2e      	cmp	r3, #46	; 0x2e
 8001086:	d005      	beq.n	8001094 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b1d      	cmp	r3, #29
 800108c:	d002      	beq.n	8001094 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b2d      	cmp	r3, #45	; 0x2d
 8001092:	d114      	bne.n	80010be <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001094:	f7ff fcac 	bl	80009f0 <HAL_GetTick>
 8001098:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800109a:	e009      	b.n	80010b0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800109c:	f7ff fca8 	bl	80009f0 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010aa:	d901      	bls.n	80010b0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e007      	b.n	80010c0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_PWREx_ConfigSupply+0xb0>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010bc:	d1ee      	bne.n	800109c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024800 	.word	0x58024800

080010cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e3c4      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8087 	beq.w	80011fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ec:	4ba2      	ldr	r3, [pc, #648]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80010ee:	691b      	ldr	r3, [r3, #16]
 80010f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010f6:	4ba0      	ldr	r3, [pc, #640]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fe:	2b10      	cmp	r3, #16
 8001100:	d007      	beq.n	8001112 <HAL_RCC_OscConfig+0x46>
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	2b18      	cmp	r3, #24
 8001106:	d110      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
 8001108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10b      	bne.n	800112a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001112:	4b99      	ldr	r3, [pc, #612]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d06c      	beq.n	80011f8 <HAL_RCC_OscConfig+0x12c>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d168      	bne.n	80011f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e39e      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x76>
 8001134:	4b90      	ldr	r3, [pc, #576]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a8f      	ldr	r2, [pc, #572]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e02e      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x98>
 800114a:	4b8b      	ldr	r3, [pc, #556]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a8a      	ldr	r2, [pc, #552]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b88      	ldr	r3, [pc, #544]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a87      	ldr	r2, [pc, #540]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0xbc>
 800116e:	4b82      	ldr	r3, [pc, #520]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a81      	ldr	r2, [pc, #516]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b7f      	ldr	r3, [pc, #508]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a7e      	ldr	r2, [pc, #504]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xd4>
 8001188:	4b7b      	ldr	r3, [pc, #492]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a7a      	ldr	r2, [pc, #488]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b78      	ldr	r3, [pc, #480]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a77      	ldr	r2, [pc, #476]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc22 	bl	80009f0 <HAL_GetTick>
 80011ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc1e 	bl	80009f0 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e352      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011c2:	4b6d      	ldr	r3, [pc, #436]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xe4>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc0e 	bl	80009f0 <HAL_GetTick>
 80011d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc0a 	bl	80009f0 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e33e      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ea:	4b63      	ldr	r3, [pc, #396]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x10c>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8092 	beq.w	800132c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4b5b      	ldr	r3, [pc, #364]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001210:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001212:	4b59      	ldr	r3, [pc, #356]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001216:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_RCC_OscConfig+0x162>
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	2b18      	cmp	r3, #24
 8001222:	d12d      	bne.n	8001280 <HAL_RCC_OscConfig+0x1b4>
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d128      	bne.n	8001280 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800122e:	4b52      	ldr	r3, [pc, #328]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x17a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e310      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	f7ff fbdf 	bl	8000a08 <HAL_GetREVID>
 800124a:	4602      	mov	r2, r0
 800124c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001250:	429a      	cmp	r2, r3
 8001252:	d80a      	bhi.n	800126a <HAL_RCC_OscConfig+0x19e>
 8001254:	4b48      	ldr	r3, [pc, #288]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	031b      	lsls	r3, r3, #12
 8001262:	4945      	ldr	r1, [pc, #276]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001268:	e060      	b.n	800132c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b43      	ldr	r3, [pc, #268]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	061b      	lsls	r3, r3, #24
 8001278:	493f      	ldr	r1, [pc, #252]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800127e:	e055      	b.n	800132c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d038      	beq.n	80012fa <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 0219 	bic.w	r2, r3, #25
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4938      	ldr	r1, [pc, #224]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fba9 	bl	80009f0 <HAL_GetTick>
 800129e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a2:	f7ff fba5 	bl	80009f0 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e2d9      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012b4:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d0f0      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c0:	f7ff fba2 	bl	8000a08 <HAL_GetREVID>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d80a      	bhi.n	80012e4 <HAL_RCC_OscConfig+0x218>
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	031b      	lsls	r3, r3, #12
 80012dc:	4926      	ldr	r1, [pc, #152]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	4313      	orrs	r3, r2
 80012e0:	604b      	str	r3, [r1, #4]
 80012e2:	e023      	b.n	800132c <HAL_RCC_OscConfig+0x260>
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	061b      	lsls	r3, r3, #24
 80012f2:	4921      	ldr	r1, [pc, #132]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e018      	b.n	800132c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fb73 	bl	80009f0 <HAL_GetTick>
 800130a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fb6f 	bl	80009f0 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e2a3      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 8091 	beq.w	800145c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001342:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b08      	cmp	r3, #8
 800134e:	d007      	beq.n	8001360 <HAL_RCC_OscConfig+0x294>
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	2b18      	cmp	r3, #24
 8001354:	d12f      	bne.n	80013b6 <HAL_RCC_OscConfig+0x2ea>
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d12a      	bne.n	80013b6 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d007      	beq.n	800137c <HAL_RCC_OscConfig+0x2b0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	2b80      	cmp	r3, #128	; 0x80
 8001372:	d003      	beq.n	800137c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e277      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
 8001378:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800137c:	f7ff fb44 	bl	8000a08 <HAL_GetREVID>
 8001380:	4602      	mov	r2, r0
 8001382:	f241 0303 	movw	r3, #4099	; 0x1003
 8001386:	429a      	cmp	r2, r3
 8001388:	d80a      	bhi.n	80013a0 <HAL_RCC_OscConfig+0x2d4>
 800138a:	4ba2      	ldr	r3, [pc, #648]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	069b      	lsls	r3, r3, #26
 8001398:	499e      	ldr	r1, [pc, #632]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800139e:	e05d      	b.n	800145c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a0:	4b9c      	ldr	r3, [pc, #624]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	4999      	ldr	r1, [pc, #612]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013b4:	e052      	b.n	800145c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d035      	beq.n	800142a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013be:	4b95      	ldr	r3, [pc, #596]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a94      	ldr	r2, [pc, #592]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fb11 	bl	80009f0 <HAL_GetTick>
 80013ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013d2:	f7ff fb0d 	bl	80009f0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e241      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013e4:	4b8b      	ldr	r3, [pc, #556]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013f0:	f7ff fb0a 	bl	8000a08 <HAL_GetREVID>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d80a      	bhi.n	8001414 <HAL_RCC_OscConfig+0x348>
 80013fe:	4b85      	ldr	r3, [pc, #532]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	069b      	lsls	r3, r3, #26
 800140c:	4981      	ldr	r1, [pc, #516]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
 8001412:	e023      	b.n	800145c <HAL_RCC_OscConfig+0x390>
 8001414:	4b7f      	ldr	r3, [pc, #508]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	061b      	lsls	r3, r3, #24
 8001422:	497c      	ldr	r1, [pc, #496]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001424:	4313      	orrs	r3, r2
 8001426:	60cb      	str	r3, [r1, #12]
 8001428:	e018      	b.n	800145c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800142a:	4b7a      	ldr	r3, [pc, #488]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a79      	ldr	r2, [pc, #484]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fadb 	bl	80009f0 <HAL_GetTick>
 800143a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800143e:	f7ff fad7 	bl	80009f0 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e20b      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001450:	4b70      	ldr	r3, [pc, #448]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1f0      	bne.n	800143e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d036      	beq.n	80014d6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d019      	beq.n	80014a4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001470:	4b68      	ldr	r3, [pc, #416]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001474:	4a67      	ldr	r2, [pc, #412]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fab8 	bl	80009f0 <HAL_GetTick>
 8001480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff fab4 	bl	80009f0 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1e8      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001496:	4b5f      	ldr	r3, [pc, #380]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x3b8>
 80014a2:	e018      	b.n	80014d6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a4:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80014a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a8:	4a5a      	ldr	r2, [pc, #360]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b0:	f7ff fa9e 	bl	80009f0 <HAL_GetTick>
 80014b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff fa9a 	bl	80009f0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1ce      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014ca:	4b52      	ldr	r3, [pc, #328]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0320 	and.w	r3, r3, #32
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d036      	beq.n	8001550 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d019      	beq.n	800151e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80014ea:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80014f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fa7b 	bl	80009f0 <HAL_GetTick>
 80014fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80014fe:	f7ff fa77 	bl	80009f0 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1ab      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x432>
 800151c:	e018      	b.n	8001550 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a3c      	ldr	r2, [pc, #240]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001524:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001528:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800152a:	f7ff fa61 	bl	80009f0 <HAL_GetTick>
 800152e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001532:	f7ff fa5d 	bl	80009f0 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e191      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001544:	4b33      	ldr	r3, [pc, #204]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f0      	bne.n	8001532 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 8086 	beq.w	800166a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <HAL_RCC_OscConfig+0x54c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2d      	ldr	r2, [pc, #180]	; (8001618 <HAL_RCC_OscConfig+0x54c>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800156a:	f7ff fa41 	bl	80009f0 <HAL_GetTick>
 800156e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fa3d 	bl	80009f0 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e171      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <HAL_RCC_OscConfig+0x54c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4da>
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	e02d      	b.n	8001602 <HAL_RCC_OscConfig+0x536>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4fc>
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a18      	ldr	r2, [pc, #96]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015c0:	f023 0304 	bic.w	r3, r3, #4
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	e01c      	b.n	8001602 <HAL_RCC_OscConfig+0x536>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b05      	cmp	r3, #5
 80015ce:	d10c      	bne.n	80015ea <HAL_RCC_OscConfig+0x51e>
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015d6:	f043 0304 	orr.w	r3, r3, #4
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
 80015e8:	e00b      	b.n	8001602 <HAL_RCC_OscConfig+0x536>
 80015ea:	4b0a      	ldr	r3, [pc, #40]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6713      	str	r3, [r2, #112]	; 0x70
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a06      	ldr	r2, [pc, #24]	; (8001614 <HAL_RCC_OscConfig+0x548>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d01a      	beq.n	8001640 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff f9f1 	bl	80009f0 <HAL_GetTick>
 800160e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001610:	e00f      	b.n	8001632 <HAL_RCC_OscConfig+0x566>
 8001612:	bf00      	nop
 8001614:	58024400 	.word	0x58024400
 8001618:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff f9e8 	bl	80009f0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e11a      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001632:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0ee      	beq.n	800161c <HAL_RCC_OscConfig+0x550>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff f9d6 	bl	80009f0 <HAL_GetTick>
 8001644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff f9d2 	bl	80009f0 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e104      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800165e:	4b84      	ldr	r3, [pc, #528]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ee      	bne.n	8001648 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80f9 	beq.w	8001866 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001674:	4b7e      	ldr	r3, [pc, #504]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800167c:	2b18      	cmp	r3, #24
 800167e:	f000 80b4 	beq.w	80017ea <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	2b02      	cmp	r3, #2
 8001688:	f040 8095 	bne.w	80017b6 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168c:	4b78      	ldr	r3, [pc, #480]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a77      	ldr	r2, [pc, #476]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001692:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001698:	f7ff f9aa 	bl	80009f0 <HAL_GetTick>
 800169c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff f9a6 	bl	80009f0 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0da      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016b2:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016be:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80016c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016c2:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <HAL_RCC_OscConfig+0x7a8>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	430a      	orrs	r2, r1
 80016d2:	4967      	ldr	r1, [pc, #412]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	628b      	str	r3, [r1, #40]	; 0x28
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	3b01      	subs	r3, #1
 80016de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e6:	3b01      	subs	r3, #1
 80016e8:	025b      	lsls	r3, r3, #9
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f2:	3b01      	subs	r3, #1
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001700:	3b01      	subs	r3, #1
 8001702:	061b      	lsls	r3, r3, #24
 8001704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001708:	4959      	ldr	r1, [pc, #356]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800170e:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800171a:	4b55      	ldr	r3, [pc, #340]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800171c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800171e:	4b56      	ldr	r3, [pc, #344]	; (8001878 <HAL_RCC_OscConfig+0x7ac>)
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001726:	00d2      	lsls	r2, r2, #3
 8001728:	4951      	ldr	r1, [pc, #324]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800172a:	4313      	orrs	r3, r2
 800172c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800172e:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001732:	f023 020c 	bic.w	r2, r3, #12
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	494d      	ldr	r1, [pc, #308]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800173c:	4313      	orrs	r3, r2
 800173e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001740:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	f023 0202 	bic.w	r2, r3, #2
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	4948      	ldr	r1, [pc, #288]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800174e:	4313      	orrs	r3, r2
 8001750:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	4a46      	ldr	r2, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800175e:	4b44      	ldr	r3, [pc, #272]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	4a43      	ldr	r2, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001768:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800176a:	4b41      	ldr	r3, [pc, #260]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	4a40      	ldr	r2, [pc, #256]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	4a3d      	ldr	r2, [pc, #244]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001782:	4b3b      	ldr	r3, [pc, #236]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a3a      	ldr	r2, [pc, #232]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 8001788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff f92f 	bl	80009f0 <HAL_GetTick>
 8001792:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff f92b 	bl	80009f0 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e05f      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017a8:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x6ca>
 80017b4:	e057      	b.n	8001866 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a2d      	ldr	r2, [pc, #180]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80017bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c2:	f7ff f915 	bl	80009f0 <HAL_GetTick>
 80017c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff f911 	bl	80009f0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e045      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017dc:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x6fe>
 80017e8:	e03d      	b.n	8001866 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80017ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_RCC_OscConfig+0x7a4>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d031      	beq.n	8001862 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d12a      	bne.n	8001862 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	091b      	lsrs	r3, r3, #4
 8001810:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d122      	bne.n	8001862 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d11a      	bne.n	8001862 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	0a5b      	lsrs	r3, r3, #9
 8001830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001838:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d111      	bne.n	8001862 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	0c1b      	lsrs	r3, r3, #16
 8001842:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d108      	bne.n	8001862 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	0e1b      	lsrs	r3, r3, #24
 8001854:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	58024400 	.word	0x58024400
 8001874:	fffffc0c 	.word	0xfffffc0c
 8001878:	ffff0007 	.word	0xffff0007

0800187c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e19c      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001890:	4b8a      	ldr	r3, [pc, #552]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 030f 	and.w	r3, r3, #15
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	429a      	cmp	r2, r3
 800189c:	d910      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189e:	4b87      	ldr	r3, [pc, #540]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f023 020f 	bic.w	r2, r3, #15
 80018a6:	4985      	ldr	r1, [pc, #532]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b83      	ldr	r3, [pc, #524]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e184      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d010      	beq.n	80018ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018d8:	429a      	cmp	r2, r3
 80018da:	d908      	bls.n	80018ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	4975      	ldr	r1, [pc, #468]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d010      	beq.n	800191c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695a      	ldr	r2, [r3, #20]
 80018fe:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001906:	429a      	cmp	r2, r3
 8001908:	d908      	bls.n	800191c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800190a:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	496a      	ldr	r1, [pc, #424]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001918:	4313      	orrs	r3, r2
 800191a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d010      	beq.n	800194a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699a      	ldr	r2, [r3, #24]
 800192c:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001934:	429a      	cmp	r2, r3
 8001936:	d908      	bls.n	800194a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001938:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	495e      	ldr	r1, [pc, #376]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001946:	4313      	orrs	r3, r2
 8001948:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0320 	and.w	r3, r3, #32
 8001952:	2b00      	cmp	r3, #0
 8001954:	d010      	beq.n	8001978 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001962:	429a      	cmp	r2, r3
 8001964:	d908      	bls.n	8001978 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001966:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4953      	ldr	r1, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001974:	4313      	orrs	r3, r2
 8001976:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d010      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4b4d      	ldr	r3, [pc, #308]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	429a      	cmp	r2, r3
 8001992:	d908      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f023 020f 	bic.w	r2, r3, #15
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4947      	ldr	r1, [pc, #284]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d055      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80019b2:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	4940      	ldr	r1, [pc, #256]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d121      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0f6      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d115      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0ea      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d107      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019fc:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0de      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d6      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a1c:	4b28      	ldr	r3, [pc, #160]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f023 0207 	bic.w	r2, r3, #7
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4925      	ldr	r1, [pc, #148]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	f7fe ffdf 	bl	80009f0 <HAL_GetTick>
 8001a32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a36:	f7fe ffdb 	bl	80009f0 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0be      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d1eb      	bne.n	8001a36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d208      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f023 020f 	bic.w	r2, r3, #15
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <HAL_RCC_ClockConfig+0x244>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d214      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	4906      	ldr	r1, [pc, #24]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b04      	ldr	r3, [pc, #16]	; (8001abc <HAL_RCC_ClockConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e086      	b.n	8001bca <HAL_RCC_ClockConfig+0x34e>
 8001abc:	52002000 	.word	0x52002000
 8001ac0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d208      	bcs.n	8001af2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4939      	ldr	r1, [pc, #228]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0308 	and.w	r3, r3, #8
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d010      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d208      	bcs.n	8001b20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b0e:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	492e      	ldr	r1, [pc, #184]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0310 	and.w	r3, r3, #16
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d010      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d208      	bcs.n	8001b4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b3c:	4b25      	ldr	r3, [pc, #148]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	4922      	ldr	r1, [pc, #136]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d010      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d208      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4917      	ldr	r1, [pc, #92]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b7c:	f000 f834 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001b80:	4601      	mov	r1, r0
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_RCC_ClockConfig+0x35c>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	fa21 f303 	lsr.w	r3, r1, r3
 8001b98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <HAL_RCC_ClockConfig+0x358>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f003 030f 	and.w	r3, r3, #15
 8001ba2:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_RCC_ClockConfig+0x35c>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	f003 031f 	and.w	r3, r3, #31
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	; (8001bdc <HAL_RCC_ClockConfig+0x360>)
 8001bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x364>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_ClockConfig+0x368>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fe0c 	bl	80007dc <HAL_InitTick>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	08006058 	.word	0x08006058
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000008 	.word	0x20000008

08001be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bee:	4baf      	ldr	r3, [pc, #700]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bf6:	2b18      	cmp	r3, #24
 8001bf8:	f200 814e 	bhi.w	8001e98 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001bfc:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c02:	bf00      	nop
 8001c04:	08001c69 	.word	0x08001c69
 8001c08:	08001e99 	.word	0x08001e99
 8001c0c:	08001e99 	.word	0x08001e99
 8001c10:	08001e99 	.word	0x08001e99
 8001c14:	08001e99 	.word	0x08001e99
 8001c18:	08001e99 	.word	0x08001e99
 8001c1c:	08001e99 	.word	0x08001e99
 8001c20:	08001e99 	.word	0x08001e99
 8001c24:	08001c8f 	.word	0x08001c8f
 8001c28:	08001e99 	.word	0x08001e99
 8001c2c:	08001e99 	.word	0x08001e99
 8001c30:	08001e99 	.word	0x08001e99
 8001c34:	08001e99 	.word	0x08001e99
 8001c38:	08001e99 	.word	0x08001e99
 8001c3c:	08001e99 	.word	0x08001e99
 8001c40:	08001e99 	.word	0x08001e99
 8001c44:	08001c95 	.word	0x08001c95
 8001c48:	08001e99 	.word	0x08001e99
 8001c4c:	08001e99 	.word	0x08001e99
 8001c50:	08001e99 	.word	0x08001e99
 8001c54:	08001e99 	.word	0x08001e99
 8001c58:	08001e99 	.word	0x08001e99
 8001c5c:	08001e99 	.word	0x08001e99
 8001c60:	08001e99 	.word	0x08001e99
 8001c64:	08001c9b 	.word	0x08001c9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c68:	4b90      	ldr	r3, [pc, #576]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c74:	4b8d      	ldr	r3, [pc, #564]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	4a8c      	ldr	r2, [pc, #560]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c86:	e10a      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c88:	4b89      	ldr	r3, [pc, #548]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c8a:	61bb      	str	r3, [r7, #24]
    break;
 8001c8c:	e107      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c8e:	4b89      	ldr	r3, [pc, #548]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001c90:	61bb      	str	r3, [r7, #24]
    break;
 8001c92:	e104      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c94:	4b88      	ldr	r3, [pc, #544]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001c96:	61bb      	str	r3, [r7, #24]
    break;
 8001c98:	e101      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c9a:	4b84      	ldr	r3, [pc, #528]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001ca4:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001cb0:	4b7e      	ldr	r3, [pc, #504]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001cba:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	08db      	lsrs	r3, r3, #3
 8001cc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	ee07 3a90 	vmov	s15, r3
 8001cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80da 	beq.w	8001e92 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d05a      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x1b2>
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d302      	bcc.n	8001cee <HAL_RCC_GetSysClockFreq+0x106>
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d078      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x1f6>
 8001cec:	e099      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cee:	4b6f      	ldr	r3, [pc, #444]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d02d      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cfa:	4b6c      	ldr	r3, [pc, #432]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	4a6a      	ldr	r2, [pc, #424]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	ee07 3a90 	vmov	s15, r3
 8001d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d24:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d34:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d38:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001d54:	e087      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d60:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001ec0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d68:	4b50      	ldr	r3, [pc, #320]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d7c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d98:	e065      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001ec4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dc0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ddc:	e043      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001de8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001ec8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001dec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001df0:	4b2e      	ldr	r3, [pc, #184]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e00:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e04:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e20:	e021      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e2c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001ec4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001e30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e44:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e48:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001ebc <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e64:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	0a5b      	lsrs	r3, r3, #9
 8001e6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e70:	3301      	adds	r3, #1
 8001e72:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8a:	ee17 3a90 	vmov	r3, s15
 8001e8e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e90:	e005      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
    break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001e9a:	61bb      	str	r3, [r7, #24]
    break;
 8001e9c:	bf00      	nop
  }

  return sysclockfreq;
 8001e9e:	69bb      	ldr	r3, [r7, #24]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3724      	adds	r7, #36	; 0x24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	58024400 	.word	0x58024400
 8001eb0:	03d09000 	.word	0x03d09000
 8001eb4:	003d0900 	.word	0x003d0900
 8001eb8:	007a1200 	.word	0x007a1200
 8001ebc:	46000000 	.word	0x46000000
 8001ec0:	4c742400 	.word	0x4c742400
 8001ec4:	4a742400 	.word	0x4a742400
 8001ec8:	4af42400 	.word	0x4af42400

08001ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001ed2:	f7ff fe89 	bl	8001be8 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x50>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x54>)
 8001ee4:	5cd3      	ldrb	r3, [r2, r3]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	fa21 f303 	lsr.w	r3, r1, r3
 8001eee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_GetHCLKFreq+0x50>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RCC_GetHCLKFreq+0x54>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	f003 031f 	and.w	r3, r3, #31
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	fa22 f303 	lsr.w	r3, r2, r3
 8001f06:	4a07      	ldr	r2, [pc, #28]	; (8001f24 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f0a:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_GetHCLKFreq+0x58>)
 8001f12:	681b      	ldr	r3, [r3, #0]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	08006058 	.word	0x08006058
 8001f24:	20000004 	.word	0x20000004
 8001f28:	20000000 	.word	0x20000000

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001f30:	f7ff ffcc 	bl	8001ecc <HAL_RCC_GetHCLKFreq>
 8001f34:	4601      	mov	r1, r0
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	58024400 	.word	0x58024400
 8001f54:	08006058 	.word	0x08006058

08001f58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	223f      	movs	r2, #63	; 0x3f
 8001f66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f68:	4b1a      	ldr	r3, [pc, #104]	; (8001fd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	f003 0207 	and.w	r2, r3, #7
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8001f80:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 020f 	and.w	r2, r3, #15
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_RCC_GetClockConfig+0x7c>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_GetClockConfig+0x80>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 020f 	and.w	r2, r3, #15
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	58024400 	.word	0x58024400
 8001fd8:	52002000 	.word	0x52002000

08001fdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d03d      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002000:	d013      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002006:	d802      	bhi.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800200c:	e01f      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800200e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002012:	d013      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002014:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002018:	d01c      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800201a:	e018      	b.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800201c:	4baf      	ldr	r3, [pc, #700]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	4aae      	ldr	r2, [pc, #696]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002028:	e015      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	2102      	movs	r1, #2
 8002030:	4618      	mov	r0, r3
 8002032:	f000 feb1 	bl	8002d98 <RCCEx_PLL2_Config>
 8002036:	4603      	mov	r3, r0
 8002038:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800203a:	e00c      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3324      	adds	r3, #36	; 0x24
 8002040:	2102      	movs	r1, #2
 8002042:	4618      	mov	r0, r3
 8002044:	f000 ff5a 	bl	8002efc <RCCEx_PLL3_Config>
 8002048:	4603      	mov	r3, r0
 800204a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800204c:	e003      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
      break;
 8002052:	e000      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002056:	7dfb      	ldrb	r3, [r7, #23]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800205c:	4b9f      	ldr	r3, [pc, #636]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800205e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002060:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002068:	499c      	ldr	r1, [pc, #624]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800206a:	4313      	orrs	r3, r2
 800206c:	650b      	str	r3, [r1, #80]	; 0x50
 800206e:	e001      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d03d      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	2b04      	cmp	r3, #4
 8002086:	d826      	bhi.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002088:	a201      	add	r2, pc, #4	; (adr r2, 8002090 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020a5 	.word	0x080020a5
 8002094:	080020b3 	.word	0x080020b3
 8002098:	080020c5 	.word	0x080020c5
 800209c:	080020dd 	.word	0x080020dd
 80020a0:	080020dd 	.word	0x080020dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020a4:	4b8d      	ldr	r3, [pc, #564]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4a8c      	ldr	r2, [pc, #560]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020b0:	e015      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 fe6d 	bl	8002d98 <RCCEx_PLL2_Config>
 80020be:	4603      	mov	r3, r0
 80020c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020c2:	e00c      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3324      	adds	r3, #36	; 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 ff16 	bl	8002efc <RCCEx_PLL3_Config>
 80020d0:	4603      	mov	r3, r0
 80020d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020d4:	e003      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
      break;
 80020da:	e000      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80020dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020de:	7dfb      	ldrb	r3, [r7, #23]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d109      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020e4:	4b7d      	ldr	r3, [pc, #500]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020e8:	f023 0207 	bic.w	r2, r3, #7
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	497a      	ldr	r1, [pc, #488]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	650b      	str	r3, [r1, #80]	; 0x50
 80020f6:	e001      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002104:	2b00      	cmp	r3, #0
 8002106:	d03e      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d01c      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d804      	bhi.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d00d      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800211c:	e01e      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800211e:	2bc0      	cmp	r3, #192	; 0xc0
 8002120:	d01f      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002126:	d01e      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002128:	e018      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800212a:	4b6c      	ldr	r3, [pc, #432]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	4a6b      	ldr	r2, [pc, #428]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002136:	e017      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fe2a 	bl	8002d98 <RCCEx_PLL2_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002148:	e00e      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3324      	adds	r3, #36	; 0x24
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f000 fed3 	bl	8002efc <RCCEx_PLL3_Config>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800215a:	e005      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
      break;
 8002160:	e002      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d109      	bne.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800216e:	4b5b      	ldr	r3, [pc, #364]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002172:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	4958      	ldr	r1, [pc, #352]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800217c:	4313      	orrs	r3, r2
 800217e:	650b      	str	r3, [r1, #80]	; 0x50
 8002180:	e001      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218e:	2b00      	cmp	r3, #0
 8002190:	d044      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800219c:	d01f      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x202>
 800219e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a2:	d805      	bhi.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80021a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ac:	d00e      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80021ae:	e01f      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80021b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80021b4:	d01f      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80021b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ba:	d01e      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80021bc:	e018      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	4a46      	ldr	r2, [pc, #280]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021ca:	e017      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fde0 	bl	8002d98 <RCCEx_PLL2_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80021dc:	e00e      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3324      	adds	r3, #36	; 0x24
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fe89 	bl	8002efc <RCCEx_PLL3_Config>
 80021ea:	4603      	mov	r3, r0
 80021ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80021ee:	e005      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	75fb      	strb	r3, [r7, #23]
      break;
 80021f4:	e002      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80021f6:	bf00      	nop
 80021f8:	e000      	b.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80021fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002202:	4b36      	ldr	r3, [pc, #216]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002210:	4932      	ldr	r1, [pc, #200]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002212:	4313      	orrs	r3, r2
 8002214:	658b      	str	r3, [r1, #88]	; 0x58
 8002216:	e001      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002224:	2b00      	cmp	r3, #0
 8002226:	d044      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800222e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002232:	d01f      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002238:	d805      	bhi.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800223e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002242:	d00e      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002244:	e01f      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800224a:	d01f      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800224c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002250:	d01e      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002252:	e018      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800225a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002260:	e017      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fd95 	bl	8002d98 <RCCEx_PLL2_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002272:	e00e      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3324      	adds	r3, #36	; 0x24
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fe3e 	bl	8002efc <RCCEx_PLL3_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002284:	e005      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
      break;
 800228a:	e002      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800228c:	bf00      	nop
 800228e:	e000      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002292:	7dfb      	ldrb	r3, [r7, #23]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022a6:	490d      	ldr	r1, [pc, #52]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	658b      	str	r3, [r1, #88]	; 0x58
 80022ac:	e001      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d035      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d00c      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80022c6:	2b10      	cmp	r3, #16
 80022c8:	d802      	bhi.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01b      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80022ce:	e017      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d00c      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x312>
 80022d4:	2b30      	cmp	r3, #48	; 0x30
 80022d6:	d018      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80022d8:	e012      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80022da:	bf00      	nop
 80022dc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022e0:	4baf      	ldr	r3, [pc, #700]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	4aae      	ldr	r2, [pc, #696]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80022ec:	e00e      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3304      	adds	r3, #4
 80022f2:	2102      	movs	r1, #2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 fd4f 	bl	8002d98 <RCCEx_PLL2_Config>
 80022fa:	4603      	mov	r3, r0
 80022fc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80022fe:	e005      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	75fb      	strb	r3, [r7, #23]
      break;
 8002304:	e002      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002306:	bf00      	nop
 8002308:	e000      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800230a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002312:	4ba3      	ldr	r3, [pc, #652]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	49a0      	ldr	r1, [pc, #640]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002324:	e001      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d042      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800233e:	d01f      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002344:	d805      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	d00e      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002350:	e01f      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002352:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002356:	d01f      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800235c:	d01e      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002360:	4b8f      	ldr	r3, [pc, #572]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	4a8e      	ldr	r2, [pc, #568]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800236c:	e017      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fd0f 	bl	8002d98 <RCCEx_PLL2_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800237e:	e00e      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3324      	adds	r3, #36	; 0x24
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fdb8 	bl	8002efc <RCCEx_PLL3_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002390:	e005      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
      break;
 8002396:	e002      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800239c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239e:	7dfb      	ldrb	r3, [r7, #23]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80023a4:	4b7e      	ldr	r3, [pc, #504]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	497b      	ldr	r1, [pc, #492]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	650b      	str	r3, [r1, #80]	; 0x50
 80023b6:	e001      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7dfb      	ldrb	r3, [r7, #23]
 80023ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d042      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023d0:	d01b      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023d6:	d805      	bhi.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d022      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80023e2:	e01b      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80023e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023e8:	d01d      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80023ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ee:	d01c      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80023f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023f4:	d01b      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x452>
 80023f6:	e011      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	2101      	movs	r1, #1
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fcca 	bl	8002d98 <RCCEx_PLL2_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002408:	e012      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3324      	adds	r3, #36	; 0x24
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fd73 	bl	8002efc <RCCEx_PLL3_Config>
 8002416:	4603      	mov	r3, r0
 8002418:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800241a:	e009      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
      break;
 8002420:	e006      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002422:	bf00      	nop
 8002424:	e004      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800242e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002436:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	4957      	ldr	r1, [pc, #348]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	650b      	str	r3, [r1, #80]	; 0x50
 8002448:	e001      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d044      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002464:	d01b      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800246a:	d805      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800246c:	2b00      	cmp	r3, #0
 800246e:	d022      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002476:	e01b      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d01d      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800247e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002482:	d01c      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002484:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002488:	d01b      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800248a:	e011      	b.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	2101      	movs	r1, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fc80 	bl	8002d98 <RCCEx_PLL2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800249c:	e012      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3324      	adds	r3, #36	; 0x24
 80024a2:	2101      	movs	r1, #1
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fd29 	bl	8002efc <RCCEx_PLL3_Config>
 80024aa:	4603      	mov	r3, r0
 80024ac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80024ae:	e009      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
      break;
 80024b4:	e006      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80024b6:	bf00      	nop
 80024b8:	e004      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80024c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10a      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80024ca:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80024d8:	4931      	ldr	r1, [pc, #196]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	658b      	str	r3, [r1, #88]	; 0x58
 80024de:	e001      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	7dfb      	ldrb	r3, [r7, #23]
 80024e2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d02d      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f8:	d005      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80024fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024fe:	d009      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002500:	2b00      	cmp	r3, #0
 8002502:	d013      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002504:	e00f      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800250c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002510:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002512:	e00c      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fc3c 	bl	8002d98 <RCCEx_PLL2_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002524:	e003      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	75fb      	strb	r3, [r7, #23]
      break;
 800252a:	e000      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800252c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002540:	4917      	ldr	r1, [pc, #92]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	650b      	str	r3, [r1, #80]	; 0x50
 8002546:	e001      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d035      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255c:	2b03      	cmp	r3, #3
 800255e:	d81b      	bhi.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	080025a5 	.word	0x080025a5
 800256c:	08002579 	.word	0x08002579
 8002570:	08002587 	.word	0x08002587
 8002574:	080025a5 	.word	0x080025a5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800257e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002584:	e00f      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3304      	adds	r3, #4
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fc03 	bl	8002d98 <RCCEx_PLL2_Config>
 8002592:	4603      	mov	r3, r0
 8002594:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002596:	e006      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	75fb      	strb	r3, [r7, #23]
      break;
 800259c:	e003      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800259e:	bf00      	nop
 80025a0:	58024400 	.word	0x58024400
      break;
 80025a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80025ac:	4bba      	ldr	r3, [pc, #744]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b0:	f023 0203 	bic.w	r2, r3, #3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	49b7      	ldr	r1, [pc, #732]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80025be:	e001      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8086 	beq.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d2:	4bb2      	ldr	r3, [pc, #712]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4ab1      	ldr	r2, [pc, #708]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025de:	f7fe fa07 	bl	80009f0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e4:	e009      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fa03 	bl	80009f0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d902      	bls.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	75fb      	strb	r3, [r7, #23]
        break;
 80025f8:	e005      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025fa:	4ba8      	ldr	r3, [pc, #672]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ef      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002606:	7dfb      	ldrb	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d166      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800260c:	4ba2      	ldr	r3, [pc, #648]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800260e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002616:	4053      	eors	r3, r2
 8002618:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002620:	4b9d      	ldr	r3, [pc, #628]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002628:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800262a:	4b9b      	ldr	r3, [pc, #620]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	4a9a      	ldr	r2, [pc, #616]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002636:	4b98      	ldr	r3, [pc, #608]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	4a97      	ldr	r2, [pc, #604]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002642:	4a95      	ldr	r2, [pc, #596]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800264e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002652:	d115      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe f9cc 	bl	80009f0 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800265a:	e00b      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe f9c8 	bl	80009f0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d902      	bls.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	75fb      	strb	r3, [r7, #23]
            break;
 8002672:	e005      	b.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ed      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002680:	7dfb      	ldrb	r3, [r7, #23]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d126      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800268c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002694:	d10d      	bne.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002696:	4b80      	ldr	r3, [pc, #512]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026a4:	0919      	lsrs	r1, r3, #4
 80026a6:	4b7e      	ldr	r3, [pc, #504]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80026a8:	400b      	ands	r3, r1
 80026aa:	497b      	ldr	r1, [pc, #492]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	610b      	str	r3, [r1, #16]
 80026b0:	e005      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80026b2:	4b79      	ldr	r3, [pc, #484]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4a78      	ldr	r2, [pc, #480]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026bc:	6113      	str	r3, [r2, #16]
 80026be:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026cc:	4972      	ldr	r1, [pc, #456]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	670b      	str	r3, [r1, #112]	; 0x70
 80026d2:	e004      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	75bb      	strb	r3, [r7, #22]
 80026d8:	e001      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d07d      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ee:	2b28      	cmp	r3, #40	; 0x28
 80026f0:	d866      	bhi.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80026f2:	a201      	add	r2, pc, #4	; (adr r2, 80026f8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80026f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f8:	080027c7 	.word	0x080027c7
 80026fc:	080027c1 	.word	0x080027c1
 8002700:	080027c1 	.word	0x080027c1
 8002704:	080027c1 	.word	0x080027c1
 8002708:	080027c1 	.word	0x080027c1
 800270c:	080027c1 	.word	0x080027c1
 8002710:	080027c1 	.word	0x080027c1
 8002714:	080027c1 	.word	0x080027c1
 8002718:	0800279d 	.word	0x0800279d
 800271c:	080027c1 	.word	0x080027c1
 8002720:	080027c1 	.word	0x080027c1
 8002724:	080027c1 	.word	0x080027c1
 8002728:	080027c1 	.word	0x080027c1
 800272c:	080027c1 	.word	0x080027c1
 8002730:	080027c1 	.word	0x080027c1
 8002734:	080027c1 	.word	0x080027c1
 8002738:	080027af 	.word	0x080027af
 800273c:	080027c1 	.word	0x080027c1
 8002740:	080027c1 	.word	0x080027c1
 8002744:	080027c1 	.word	0x080027c1
 8002748:	080027c1 	.word	0x080027c1
 800274c:	080027c1 	.word	0x080027c1
 8002750:	080027c1 	.word	0x080027c1
 8002754:	080027c1 	.word	0x080027c1
 8002758:	080027c7 	.word	0x080027c7
 800275c:	080027c1 	.word	0x080027c1
 8002760:	080027c1 	.word	0x080027c1
 8002764:	080027c1 	.word	0x080027c1
 8002768:	080027c1 	.word	0x080027c1
 800276c:	080027c1 	.word	0x080027c1
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027c1 	.word	0x080027c1
 8002778:	080027c7 	.word	0x080027c7
 800277c:	080027c1 	.word	0x080027c1
 8002780:	080027c1 	.word	0x080027c1
 8002784:	080027c1 	.word	0x080027c1
 8002788:	080027c1 	.word	0x080027c1
 800278c:	080027c1 	.word	0x080027c1
 8002790:	080027c1 	.word	0x080027c1
 8002794:	080027c1 	.word	0x080027c1
 8002798:	080027c7 	.word	0x080027c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3304      	adds	r3, #4
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 faf8 	bl	8002d98 <RCCEx_PLL2_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80027ac:	e00c      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3324      	adds	r3, #36	; 0x24
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fba1 	bl	8002efc <RCCEx_PLL3_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80027be:	e003      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	75fb      	strb	r3, [r7, #23]
      break;
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80027c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027da:	492f      	ldr	r1, [pc, #188]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	654b      	str	r3, [r1, #84]	; 0x54
 80027e0:	e001      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d037      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d820      	bhi.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x860>
 80027fa:	a201      	add	r2, pc, #4	; (adr r2, 8002800 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80027fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002800:	08002843 	.word	0x08002843
 8002804:	08002819 	.word	0x08002819
 8002808:	0800282b 	.word	0x0800282b
 800280c:	08002843 	.word	0x08002843
 8002810:	08002843 	.word	0x08002843
 8002814:	08002843 	.word	0x08002843
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	2101      	movs	r1, #1
 800281e:	4618      	mov	r0, r3
 8002820:	f000 faba 	bl	8002d98 <RCCEx_PLL2_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002828:	e00c      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3324      	adds	r3, #36	; 0x24
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fb63 	bl	8002efc <RCCEx_PLL3_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800283a:	e003      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	75fb      	strb	r3, [r7, #23]
      break;
 8002840:	e000      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800284a:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f023 0207 	bic.w	r2, r3, #7
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002856:	4910      	ldr	r1, [pc, #64]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	654b      	str	r3, [r1, #84]	; 0x54
 800285c:	e001      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d040      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002874:	2b05      	cmp	r3, #5
 8002876:	d827      	bhi.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002878:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	080028cf 	.word	0x080028cf
 8002884:	080028a5 	.word	0x080028a5
 8002888:	080028b7 	.word	0x080028b7
 800288c:	080028cf 	.word	0x080028cf
 8002890:	080028cf 	.word	0x080028cf
 8002894:	080028cf 	.word	0x080028cf
 8002898:	58024400 	.word	0x58024400
 800289c:	58024800 	.word	0x58024800
 80028a0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fa74 	bl	8002d98 <RCCEx_PLL2_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80028b4:	e00c      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3324      	adds	r3, #36	; 0x24
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fb1d 	bl	8002efc <RCCEx_PLL3_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80028c6:	e003      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	e000      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80028ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d6:	4bb2      	ldr	r3, [pc, #712]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	f023 0207 	bic.w	r2, r3, #7
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	49ae      	ldr	r1, [pc, #696]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	658b      	str	r3, [r1, #88]	; 0x58
 80028ea:	e001      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d044      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002906:	d01b      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800290c:	d805      	bhi.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d022      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002918:	e01b      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d01d      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002924:	d01c      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002926:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800292a:	d01b      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800292c:	e011      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3304      	adds	r3, #4
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f000 fa2f 	bl	8002d98 <RCCEx_PLL2_Config>
 800293a:	4603      	mov	r3, r0
 800293c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800293e:	e012      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3324      	adds	r3, #36	; 0x24
 8002944:	2102      	movs	r1, #2
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fad8 	bl	8002efc <RCCEx_PLL3_Config>
 800294c:	4603      	mov	r3, r0
 800294e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002950:	e009      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	75fb      	strb	r3, [r7, #23]
      break;
 8002956:	e006      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002958:	bf00      	nop
 800295a:	e004      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800295c:	bf00      	nop
 800295e:	e002      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002960:	bf00      	nop
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800296c:	4b8c      	ldr	r3, [pc, #560]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297a:	4989      	ldr	r1, [pc, #548]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	654b      	str	r3, [r1, #84]	; 0x54
 8002980:	e001      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d044      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800299c:	d01b      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800299e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a2:	d805      	bhi.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80029ae:	e01b      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80029b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b4:	d01d      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80029b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80029ba:	d01c      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80029bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029c0:	d01b      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80029c2:	e011      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f9e4 	bl	8002d98 <RCCEx_PLL2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80029d4:	e012      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3324      	adds	r3, #36	; 0x24
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fa8d 	bl	8002efc <RCCEx_PLL3_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80029e6:	e009      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	75fb      	strb	r3, [r7, #23]
      break;
 80029ec:	e006      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80029ee:	bf00      	nop
 80029f0:	e004      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80029fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a02:	4b67      	ldr	r3, [pc, #412]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a10:	4963      	ldr	r1, [pc, #396]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	658b      	str	r3, [r1, #88]	; 0x58
 8002a16:	e001      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a18:	7dfb      	ldrb	r3, [r7, #23]
 8002a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d044      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a32:	d01b      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a38:	d805      	bhi.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d022      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a42:	d00a      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002a44:	e01b      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a4a:	d01d      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002a4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002a50:	d01c      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002a52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002a56:	d01b      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002a58:	e011      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f999 	bl	8002d98 <RCCEx_PLL2_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002a6a:	e012      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3324      	adds	r3, #36	; 0x24
 8002a70:	2102      	movs	r1, #2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fa42 	bl	8002efc <RCCEx_PLL3_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002a7c:	e009      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	75fb      	strb	r3, [r7, #23]
      break;
 8002a82:	e006      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002a84:	bf00      	nop
 8002a86:	e004      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e002      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002a90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002a98:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aa6:	493e      	ldr	r1, [pc, #248]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	658b      	str	r3, [r1, #88]	; 0x58
 8002aac:	e001      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aae:	7dfb      	ldrb	r3, [r7, #23]
 8002ab0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fa13 	bl	8002efc <RCCEx_PLL3_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aee:	492c      	ldr	r1, [pc, #176]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d10a      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3324      	adds	r3, #36	; 0x24
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f9f2 	bl	8002efc <RCCEx_PLL3_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b22:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b30:	491b      	ldr	r1, [pc, #108]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d032      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b4c:	d00d      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8002b4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b52:	d016      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d111      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 f91a 	bl	8002d98 <RCCEx_PLL2_Config>
 8002b64:	4603      	mov	r3, r0
 8002b66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002b68:	e00c      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3324      	adds	r3, #36	; 0x24
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 f9c3 	bl	8002efc <RCCEx_PLL3_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002b7a:	e003      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b80:	e000      	b.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8002b82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002b98:	4901      	ldr	r1, [pc, #4]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	658b      	str	r3, [r1, #88]	; 0x58
 8002b9e:	e003      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8002ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d02f      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bbe:	d00c      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002bc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bc4:	d015      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8002bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bca:	d10f      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bcc:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	4a70      	ldr	r2, [pc, #448]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002bd8:	e00c      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3324      	adds	r3, #36	; 0x24
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 f98b 	bl	8002efc <RCCEx_PLL3_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002bea:	e003      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8002bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c08:	4962      	ldr	r1, [pc, #392]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	654b      	str	r3, [r1, #84]	; 0x54
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d029      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d007      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c30:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	4a57      	ldr	r2, [pc, #348]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002c3c:	e00b      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f8a7 	bl	8002d98 <RCCEx_PLL2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002c4e:	e002      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	75fb      	strb	r3, [r7, #23]
      break;
 8002c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	494a      	ldr	r1, [pc, #296]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c6e:	e001      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3324      	adds	r3, #36	; 0x24
 8002c84:	2102      	movs	r1, #2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 f938 	bl	8002efc <RCCEx_PLL3_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02f      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002caa:	d00c      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cb0:	d802      	bhi.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d011      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8002cb6:	e00d      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d00f      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002cc4:	e006      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc6:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	4a32      	ldr	r2, [pc, #200]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002cd2:	e007      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cd8:	e004      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002cda:	bf00      	nop
 8002cdc:	e002      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf6:	4927      	ldr	r1, [pc, #156]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	654b      	str	r3, [r1, #84]	; 0x54
 8002cfc:	e001      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d0e:	4b21      	ldr	r3, [pc, #132]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	491e      	ldr	r1, [pc, #120]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d38:	4916      	ldr	r1, [pc, #88]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00d      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d4a:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d54:	6113      	str	r3, [r2, #16]
 8002d56:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da08      	bge.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7a:	4906      	ldr	r1, [pc, #24]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002d80:	7dbb      	ldrb	r3, [r7, #22]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	58024400 	.word	0x58024400

08002d98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002da6:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d101      	bne.n	8002db6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e099      	b.n	8002eea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002db6:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002dbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc2:	f7fd fe15 	bl	80009f0 <HAL_GetTick>
 8002dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002dc8:	e008      	b.n	8002ddc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002dca:	f7fd fe11 	bl	80009f0 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e086      	b.n	8002eea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002de8:	4b42      	ldr	r3, [pc, #264]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	493f      	ldr	r1, [pc, #252]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	628b      	str	r3, [r1, #40]	; 0x28
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	025b      	lsls	r3, r3, #9
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	041b      	lsls	r3, r3, #16
 8002e1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	061b      	lsls	r3, r3, #24
 8002e28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002e2c:	4931      	ldr	r1, [pc, #196]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	492d      	ldr	r1, [pc, #180]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002e44:	4b2b      	ldr	r3, [pc, #172]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f023 0220 	bic.w	r2, r3, #32
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	4928      	ldr	r1, [pc, #160]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002e56:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e5c:	f023 0310 	bic.w	r3, r3, #16
 8002e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <RCCEx_PLL2_Config+0x160>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	69d2      	ldr	r2, [r2, #28]
 8002e6e:	00d2      	lsls	r2, r2, #3
 8002e70:	4920      	ldr	r1, [pc, #128]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e7c:	f043 0310 	orr.w	r3, r3, #16
 8002e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002e88:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002e94:	e00f      	b.n	8002eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d106      	bne.n	8002eaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002e9c:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ea8:	e005      	b.n	8002eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002eaa:	4b12      	ldr	r3, [pc, #72]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec2:	f7fd fd95 	bl	80009f0 <HAL_GetTick>
 8002ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002ec8:	e008      	b.n	8002edc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002eca:	f7fd fd91 	bl	80009f0 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e006      	b.n	8002eea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <RCCEx_PLL2_Config+0x15c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	ffff0007 	.word	0xffff0007

08002efc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f0a:	4b53      	ldr	r3, [pc, #332]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d101      	bne.n	8002f1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e099      	b.n	800304e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002f1a:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a4e      	ldr	r2, [pc, #312]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f26:	f7fd fd63 	bl	80009f0 <HAL_GetTick>
 8002f2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f2c:	e008      	b.n	8002f40 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8002f2e:	f7fd fd5f 	bl	80009f0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e086      	b.n	800304e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8002f40:	4b45      	ldr	r3, [pc, #276]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	051b      	lsls	r3, r3, #20
 8002f5a:	493f      	ldr	r1, [pc, #252]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	628b      	str	r3, [r1, #40]	; 0x28
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	025b      	lsls	r3, r3, #9
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f90:	4931      	ldr	r1, [pc, #196]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	492d      	ldr	r1, [pc, #180]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	4928      	ldr	r1, [pc, #160]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8002fba:	4b27      	ldr	r3, [pc, #156]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	4a26      	ldr	r2, [pc, #152]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <RCCEx_PLL3_Config+0x160>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	69d2      	ldr	r2, [r2, #28]
 8002fd2:	00d2      	lsls	r2, r2, #3
 8002fd4:	4920      	ldr	r1, [pc, #128]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d106      	bne.n	8002ffa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8002fec:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	4a19      	ldr	r2, [pc, #100]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8002ff2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002ff8:	e00f      	b.n	800301a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d106      	bne.n	800300e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4a14      	ldr	r2, [pc, #80]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8003006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800300c:	e005      	b.n	800301a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	4a11      	ldr	r2, [pc, #68]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8003014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003018:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003026:	f7fd fce3 	bl	80009f0 <HAL_GetTick>
 800302a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800302c:	e008      	b.n	8003040 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800302e:	f7fd fcdf 	bl	80009f0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e006      	b.n	800304e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <RCCEx_PLL3_Config+0x15c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	58024400 	.word	0x58024400
 800305c:	ffff0007 	.word	0xffff0007

08003060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e01d      	b.n	80030ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f815 	bl	80030b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3304      	adds	r3, #4
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f000 f986 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_TIM_Base_Start_IT+0x50>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d00b      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x42>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fc:	d007      	beq.n	800310e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f042 0201 	orr.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	00010007 	.word	0x00010007

08003120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	d122      	bne.n	800317c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11b      	bne.n	800317c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0202 	mvn.w	r2, #2
 800314c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f905 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8f7 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f908 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d122      	bne.n	80031d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b04      	cmp	r3, #4
 8003196:	d11b      	bne.n	80031d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0204 	mvn.w	r2, #4
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f8db 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8cd 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f8de 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d122      	bne.n	8003224 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d11b      	bne.n	8003224 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0208 	mvn.w	r2, #8
 80031f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2204      	movs	r2, #4
 80031fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f8b1 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 8003210:	e005      	b.n	800321e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f8a3 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f000 f8b4 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b10      	cmp	r3, #16
 8003230:	d122      	bne.n	8003278 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d11b      	bne.n	8003278 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0210 	mvn.w	r2, #16
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2208      	movs	r2, #8
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f887 	bl	8003372 <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f879 	bl	800335e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f88a 	bl	8003386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0201 	mvn.w	r2, #1
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fa54 	bl	800074c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ae:	2b80      	cmp	r3, #128	; 0x80
 80032b0:	d10e      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d107      	bne.n	80032d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f914 	bl	80034f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032de:	d10e      	bne.n	80032fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ea:	2b80      	cmp	r3, #128	; 0x80
 80032ec:	d107      	bne.n	80032fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f907 	bl	800350c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d10e      	bne.n	800332a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d107      	bne.n	800332a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f838 	bl	800339a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f003 0320 	and.w	r3, r3, #32
 8003334:	2b20      	cmp	r3, #32
 8003336:	d10e      	bne.n	8003356 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b20      	cmp	r3, #32
 8003344:	d107      	bne.n	8003356 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f06f 0220 	mvn.w	r2, #32
 800334e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f8c7 	bl	80034e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a40      	ldr	r2, [pc, #256]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d00f      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3a      	ldr	r2, [pc, #232]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d01f      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d01b      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d017      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00f      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00b      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <TIM_Base_SetConfig+0x128>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <TIM_Base_SetConfig+0x12c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d003      	beq.n	800344a <TIM_Base_SetConfig+0x9a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <TIM_Base_SetConfig+0x130>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d108      	bne.n	800345c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00f      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d00b      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <TIM_Base_SetConfig+0x128>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d007      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <TIM_Base_SetConfig+0x12c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <TIM_Base_SetConfig+0x130>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800

080034e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003536:	f3ef 8305 	mrs	r3, IPSR
 800353a:	60bb      	str	r3, [r7, #8]
  return(result);
 800353c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10f      	bne.n	8003562 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003542:	f3ef 8310 	mrs	r3, PRIMASK
 8003546:	607b      	str	r3, [r7, #4]
  return(result);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d105      	bne.n	800355a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800354e:	f3ef 8311 	mrs	r3, BASEPRI
 8003552:	603b      	str	r3, [r7, #0]
  return(result);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <osKernelInitialize+0x3a>
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <osKernelInitialize+0x64>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d103      	bne.n	800356a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003562:	f06f 0305 	mvn.w	r3, #5
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e00c      	b.n	8003584 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <osKernelInitialize+0x64>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d105      	bne.n	800357e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <osKernelInitialize+0x64>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e002      	b.n	8003584 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800357e:	f04f 33ff 	mov.w	r3, #4294967295
 8003582:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003584:	68fb      	ldr	r3, [r7, #12]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000030 	.word	0x20000030

08003598 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800359e:	f3ef 8305 	mrs	r3, IPSR
 80035a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80035a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10f      	bne.n	80035ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035aa:	f3ef 8310 	mrs	r3, PRIMASK
 80035ae:	607b      	str	r3, [r7, #4]
  return(result);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035b6:	f3ef 8311 	mrs	r3, BASEPRI
 80035ba:	603b      	str	r3, [r7, #0]
  return(result);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d007      	beq.n	80035d2 <osKernelStart+0x3a>
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <osKernelStart+0x68>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d103      	bne.n	80035d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80035ca:	f06f 0305 	mvn.w	r3, #5
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e010      	b.n	80035f4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035d2:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <osKernelStart+0x68>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d109      	bne.n	80035ee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035da:	f7ff ffa1 	bl	8003520 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <osKernelStart+0x68>)
 80035e0:	2202      	movs	r2, #2
 80035e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035e4:	f001 f870 	bl	80046c8 <vTaskStartScheduler>
      stat = osOK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	e002      	b.n	80035f4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80035f4:	68fb      	ldr	r3, [r7, #12]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	20000030 	.word	0x20000030

08003604 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003604:	b580      	push	{r7, lr}
 8003606:	b090      	sub	sp, #64	; 0x40
 8003608:	af04      	add	r7, sp, #16
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003614:	f3ef 8305 	mrs	r3, IPSR
 8003618:	61fb      	str	r3, [r7, #28]
  return(result);
 800361a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800361c:	2b00      	cmp	r3, #0
 800361e:	f040 808f 	bne.w	8003740 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003622:	f3ef 8310 	mrs	r3, PRIMASK
 8003626:	61bb      	str	r3, [r7, #24]
  return(result);
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d105      	bne.n	800363a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800362e:	f3ef 8311 	mrs	r3, BASEPRI
 8003632:	617b      	str	r3, [r7, #20]
  return(result);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <osThreadNew+0x3e>
 800363a:	4b44      	ldr	r3, [pc, #272]	; (800374c <osThreadNew+0x148>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d07e      	beq.n	8003740 <osThreadNew+0x13c>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d07b      	beq.n	8003740 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800364c:	2318      	movs	r3, #24
 800364e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003650:	2300      	movs	r3, #0
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d045      	beq.n	80036ec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d002      	beq.n	800366e <osThreadNew+0x6a>
        name = attr->name;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d008      	beq.n	8003694 <osThreadNew+0x90>
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	2b38      	cmp	r3, #56	; 0x38
 8003686:	d805      	bhi.n	8003694 <osThreadNew+0x90>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <osThreadNew+0x94>
        return (NULL);
 8003694:	2300      	movs	r3, #0
 8003696:	e054      	b.n	8003742 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	089b      	lsrs	r3, r3, #2
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <osThreadNew+0xca>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b5b      	cmp	r3, #91	; 0x5b
 80036b6:	d90a      	bls.n	80036ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d006      	beq.n	80036ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <osThreadNew+0xca>
        mem = 1;
 80036c8:	2301      	movs	r3, #1
 80036ca:	623b      	str	r3, [r7, #32]
 80036cc:	e010      	b.n	80036f0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10c      	bne.n	80036f0 <osThreadNew+0xec>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <osThreadNew+0xec>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <osThreadNew+0xec>
          mem = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
 80036ea:	e001      	b.n	80036f0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d110      	bne.n	8003718 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036fe:	9202      	str	r2, [sp, #8]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800370a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f000 fe09 	bl	8004324 <xTaskCreateStatic>
 8003712:	4603      	mov	r3, r0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	e013      	b.n	8003740 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d110      	bne.n	8003740 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	b29a      	uxth	r2, r3
 8003722:	f107 0310 	add.w	r3, r7, #16
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fe51 	bl	80043d8 <xTaskCreate>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d001      	beq.n	8003740 <osThreadNew+0x13c>
          hTask = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003740:	693b      	ldr	r3, [r7, #16]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3730      	adds	r7, #48	; 0x30
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000030 	.word	0x20000030

08003750 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	613b      	str	r3, [r7, #16]
  return(result);
 800375e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10f      	bne.n	8003784 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003764:	f3ef 8310 	mrs	r3, PRIMASK
 8003768:	60fb      	str	r3, [r7, #12]
  return(result);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003770:	f3ef 8311 	mrs	r3, BASEPRI
 8003774:	60bb      	str	r3, [r7, #8]
  return(result);
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <osDelay+0x3c>
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <osDelay+0x58>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b02      	cmp	r3, #2
 8003782:	d103      	bne.n	800378c <osDelay+0x3c>
    stat = osErrorISR;
 8003784:	f06f 0305 	mvn.w	r3, #5
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e007      	b.n	800379c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 ff62 	bl	8004660 <vTaskDelay>
    }
  }

  return (stat);
 800379c:	697b      	ldr	r3, [r7, #20]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000030 	.word	0x20000030

080037ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80037bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	4a06      	ldr	r2, [pc, #24]	; (80037dc <vApplicationGetIdleTaskMemory+0x30>)
 80037c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	bf00      	nop
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000034 	.word	0x20000034
 80037dc:	20000090 	.word	0x20000090

080037e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4a07      	ldr	r2, [pc, #28]	; (800380c <vApplicationGetTimerTaskMemory+0x2c>)
 80037f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4a06      	ldr	r2, [pc, #24]	; (8003810 <vApplicationGetTimerTaskMemory+0x30>)
 80037f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fe:	601a      	str	r2, [r3, #0]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	20000290 	.word	0x20000290
 8003810:	200002ec 	.word	0x200002ec

08003814 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f103 0208 	add.w	r2, r3, #8
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f04f 32ff 	mov.w	r2, #4294967295
 800382c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f103 0208 	add.w	r2, r3, #8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f103 0208 	add.w	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	601a      	str	r2, [r3, #0]
}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038cc:	d103      	bne.n	80038d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e00c      	b.n	80038f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3308      	adds	r3, #8
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e002      	b.n	80038e4 <vListInsert+0x2e>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d2f6      	bcs.n	80038de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6892      	ldr	r2, [r2, #8]
 800393e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6852      	ldr	r2, [r2, #4]
 8003948:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d103      	bne.n	800395c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d109      	bne.n	80039a4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	e7fe      	b.n	80039a2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80039a4:	f002 f812 	bl	80059cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	68f9      	ldr	r1, [r7, #12]
 80039b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	441a      	add	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	3b01      	subs	r3, #1
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	441a      	add	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	22ff      	movs	r2, #255	; 0xff
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	22ff      	movs	r2, #255	; 0xff
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d114      	bne.n	8003a24 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01a      	beq.n	8003a38 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3310      	adds	r3, #16
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 f8de 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d012      	beq.n	8003a38 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <xQueueGenericReset+0xcc>)
 8003a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	e009      	b.n	8003a38 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3310      	adds	r3, #16
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fef3 	bl	8003814 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3324      	adds	r3, #36	; 0x24
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff feee 	bl	8003814 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a38:	f001 fff6 	bl	8005a28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a3c:	2301      	movs	r3, #1
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08e      	sub	sp, #56	; 0x38
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <xQueueGenericCreateStatic+0x28>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a72:	e7fe      	b.n	8003a72 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <xQueueGenericCreateStatic+0x42>
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	e7fe      	b.n	8003a8c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <xQueueGenericCreateStatic+0x4e>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <xQueueGenericCreateStatic+0x52>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <xQueueGenericCreateStatic+0x54>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <xQueueGenericCreateStatic+0x6c>
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	623b      	str	r3, [r7, #32]
 8003ab6:	e7fe      	b.n	8003ab6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <xQueueGenericCreateStatic+0x78>
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <xQueueGenericCreateStatic+0x7c>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <xQueueGenericCreateStatic+0x7e>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <xQueueGenericCreateStatic+0x96>
 8003ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	61fb      	str	r3, [r7, #28]
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ae2:	2350      	movs	r3, #80	; 0x50
 8003ae4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b50      	cmp	r3, #80	; 0x50
 8003aea:	d009      	beq.n	8003b00 <xQueueGenericCreateStatic+0xb4>
 8003aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	e7fe      	b.n	8003afe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003b00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00d      	beq.n	8003b28 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b14:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f805 	bl	8003b32 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3730      	adds	r7, #48	; 0x30
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	e002      	b.n	8003b54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b60:	2101      	movs	r1, #1
 8003b62:	69b8      	ldr	r0, [r7, #24]
 8003b64:	f7ff ff0a 	bl	800397c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	; 0x38
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b86:	2300      	movs	r3, #0
 8003b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <xQueueGenericSend+0x30>
 8003b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba6:	e7fe      	b.n	8003ba6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSend+0x3e>
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <xQueueGenericSend+0x42>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericSend+0x44>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d109      	bne.n	8003bd4 <xQueueGenericSend+0x5c>
 8003bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	e7fe      	b.n	8003bd2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d103      	bne.n	8003be2 <xQueueGenericSend+0x6a>
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <xQueueGenericSend+0x6e>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <xQueueGenericSend+0x70>
 8003be6:	2300      	movs	r3, #0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <xQueueGenericSend+0x88>
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	623b      	str	r3, [r7, #32]
 8003bfe:	e7fe      	b.n	8003bfe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c00:	f001 f998 	bl	8004f34 <xTaskGetSchedulerState>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <xQueueGenericSend+0x98>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <xQueueGenericSend+0x9c>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <xQueueGenericSend+0x9e>
 8003c14:	2300      	movs	r3, #0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <xQueueGenericSend+0xb6>
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e7fe      	b.n	8003c2c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c2e:	f001 fecd 	bl	80059cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <xQueueGenericSend+0xcc>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d129      	bne.n	8003c98 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4a:	f000 f9ff 	bl	800404c <prvCopyDataToQueue>
 8003c4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d010      	beq.n	8003c7a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	3324      	adds	r3, #36	; 0x24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ffb3 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d013      	beq.n	8003c90 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c68:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <xQueueGenericSend+0x1f0>)
 8003c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	e00a      	b.n	8003c90 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c80:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <xQueueGenericSend+0x1f0>)
 8003c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c90:	f001 feca 	bl	8005a28 <vPortExitCritical>
				return pdPASS;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e063      	b.n	8003d60 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c9e:	f001 fec3 	bl	8005a28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	e05c      	b.n	8003d60 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 ffeb 	bl	8004c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cba:	f001 feb5 	bl	8005a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cbe:	f000 fd67 	bl	8004790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cc2:	f001 fe83 	bl	80059cc <vPortEnterCritical>
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ccc:	b25b      	sxtb	r3, r3
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d103      	bne.n	8003cdc <xQueueGenericSend+0x164>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ce2:	b25b      	sxtb	r3, r3
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d103      	bne.n	8003cf2 <xQueueGenericSend+0x17a>
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cf2:	f001 fe99 	bl	8005a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cf6:	1d3a      	adds	r2, r7, #4
 8003cf8:	f107 0314 	add.w	r3, r7, #20
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 ffda 	bl	8004cb8 <xTaskCheckForTimeOut>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d124      	bne.n	8003d54 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d0c:	f000 fa96 	bl	800423c <prvIsQueueFull>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d018      	beq.n	8003d48 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	3310      	adds	r3, #16
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 ff04 	bl	8004b2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d26:	f000 fa21 	bl	800416c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d2a:	f000 fd3f 	bl	80047ac <xTaskResumeAll>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f47f af7c 	bne.w	8003c2e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003d36:	4b0c      	ldr	r3, [pc, #48]	; (8003d68 <xQueueGenericSend+0x1f0>)
 8003d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	e772      	b.n	8003c2e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d4a:	f000 fa0f 	bl	800416c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d4e:	f000 fd2d 	bl	80047ac <xTaskResumeAll>
 8003d52:	e76c      	b.n	8003c2e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d56:	f000 fa09 	bl	800416c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d5a:	f000 fd27 	bl	80047ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3738      	adds	r7, #56	; 0x38
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	e000ed04 	.word	0xe000ed04

08003d6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08e      	sub	sp, #56	; 0x38
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d109      	bne.n	8003d98 <xQueueGenericSendFromISR+0x2c>
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	e7fe      	b.n	8003d96 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSendFromISR+0x3a>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <xQueueGenericSendFromISR+0x3e>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueGenericSendFromISR+0x40>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <xQueueGenericSendFromISR+0x58>
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	e7fe      	b.n	8003dc2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d103      	bne.n	8003dd2 <xQueueGenericSendFromISR+0x66>
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <xQueueGenericSendFromISR+0x6a>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <xQueueGenericSendFromISR+0x6c>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d109      	bne.n	8003df0 <xQueueGenericSendFromISR+0x84>
 8003ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de0:	f383 8811 	msr	BASEPRI, r3
 8003de4:	f3bf 8f6f 	isb	sy
 8003de8:	f3bf 8f4f 	dsb	sy
 8003dec:	61fb      	str	r3, [r7, #28]
 8003dee:	e7fe      	b.n	8003dee <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003df0:	f001 fec8 	bl	8005b84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003df4:	f3ef 8211 	mrs	r2, BASEPRI
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	61ba      	str	r2, [r7, #24]
 8003e0a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d302      	bcc.n	8003e22 <xQueueGenericSendFromISR+0xb6>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d12c      	bne.n	8003e7c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e32:	f000 f90b 	bl	800404c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e36:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d112      	bne.n	8003e66 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d016      	beq.n	8003e76 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	3324      	adds	r3, #36	; 0x24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 febb 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00e      	beq.n	8003e76 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	e007      	b.n	8003e76 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	b25a      	sxtb	r2, r3
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e76:	2301      	movs	r3, #1
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003e7a:	e001      	b.n	8003e80 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3738      	adds	r7, #56	; 0x38
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <xQueueReceive+0x2e>
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <xQueueReceive+0x3c>
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <xQueueReceive+0x40>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <xQueueReceive+0x42>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <xQueueReceive+0x5a>
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	61fb      	str	r3, [r7, #28]
 8003eec:	e7fe      	b.n	8003eec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eee:	f001 f821 	bl	8004f34 <xTaskGetSchedulerState>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <xQueueReceive+0x6a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <xQueueReceive+0x6e>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <xQueueReceive+0x70>
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <xQueueReceive+0x88>
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e7fe      	b.n	8003f1a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f1c:	f001 fd56 	bl	80059cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01f      	beq.n	8003f6c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f30:	f000 f8f6 	bl	8004120 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	1e5a      	subs	r2, r3, #1
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00f      	beq.n	8003f64 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	3310      	adds	r3, #16
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fe3d 	bl	8004bc8 <xTaskRemoveFromEventList>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f54:	4b3c      	ldr	r3, [pc, #240]	; (8004048 <xQueueReceive+0x1b4>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f64:	f001 fd60 	bl	8005a28 <vPortExitCritical>
				return pdPASS;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e069      	b.n	8004040 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f72:	f001 fd59 	bl	8005a28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f76:	2300      	movs	r3, #0
 8003f78:	e062      	b.n	8004040 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f80:	f107 0310 	add.w	r3, r7, #16
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fe81 	bl	8004c8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f8e:	f001 fd4b 	bl	8005a28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f92:	f000 fbfd 	bl	8004790 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f96:	f001 fd19 	bl	80059cc <vPortEnterCritical>
 8003f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fa0:	b25b      	sxtb	r3, r3
 8003fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa6:	d103      	bne.n	8003fb0 <xQueueReceive+0x11c>
 8003fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fb6:	b25b      	sxtb	r3, r3
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d103      	bne.n	8003fc6 <xQueueReceive+0x132>
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc6:	f001 fd2f 	bl	8005a28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fca:	1d3a      	adds	r2, r7, #4
 8003fcc:	f107 0310 	add.w	r3, r7, #16
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fe70 	bl	8004cb8 <xTaskCheckForTimeOut>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d123      	bne.n	8004026 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe0:	f000 f916 	bl	8004210 <prvIsQueueEmpty>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d017      	beq.n	800401a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fec:	3324      	adds	r3, #36	; 0x24
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fd9a 	bl	8004b2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ffa:	f000 f8b7 	bl	800416c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ffe:	f000 fbd5 	bl	80047ac <xTaskResumeAll>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d189      	bne.n	8003f1c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004008:	4b0f      	ldr	r3, [pc, #60]	; (8004048 <xQueueReceive+0x1b4>)
 800400a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	e780      	b.n	8003f1c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800401a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800401c:	f000 f8a6 	bl	800416c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004020:	f000 fbc4 	bl	80047ac <xTaskResumeAll>
 8004024:	e77a      	b.n	8003f1c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004028:	f000 f8a0 	bl	800416c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800402c:	f000 fbbe 	bl	80047ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004032:	f000 f8ed 	bl	8004210 <prvIsQueueEmpty>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	f43f af6f 	beq.w	8003f1c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800403e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004040:	4618      	mov	r0, r3
 8004042:	3730      	adds	r7, #48	; 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d14d      	bne.n	800410e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f000 ff7a 	bl	8004f70 <xTaskPriorityDisinherit>
 800407c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	e043      	b.n	800410e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d119      	bne.n	80040c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6858      	ldr	r0, [r3, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	461a      	mov	r2, r3
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	f001 ffac 	bl	8005ff4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	441a      	add	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d32b      	bcc.n	800410e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e026      	b.n	800410e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68d8      	ldr	r0, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	461a      	mov	r2, r3
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	f001 ff92 	bl	8005ff4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	425b      	negs	r3, r3
 80040da:	441a      	add	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d207      	bcs.n	80040fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	425b      	negs	r3, r3
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d105      	bne.n	800410e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3b01      	subs	r3, #1
 800410c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004116:	697b      	ldr	r3, [r7, #20]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d303      	bcc.n	8004154 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68d9      	ldr	r1, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	461a      	mov	r2, r3
 800415e:	6838      	ldr	r0, [r7, #0]
 8004160:	f001 ff48 	bl	8005ff4 <memcpy>
	}
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004174:	f001 fc2a 	bl	80059cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800417e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004180:	e011      	b.n	80041a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d012      	beq.n	80041b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3324      	adds	r3, #36	; 0x24
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fd1a 	bl	8004bc8 <xTaskRemoveFromEventList>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800419a:	f000 fded 	bl	8004d78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	dce9      	bgt.n	8004182 <prvUnlockQueue+0x16>
 80041ae:	e000      	b.n	80041b2 <prvUnlockQueue+0x46>
					break;
 80041b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041ba:	f001 fc35 	bl	8005a28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041be:	f001 fc05 	bl	80059cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ca:	e011      	b.n	80041f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3310      	adds	r3, #16
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fcf5 	bl	8004bc8 <xTaskRemoveFromEventList>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041e4:	f000 fdc8 	bl	8004d78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dce9      	bgt.n	80041cc <prvUnlockQueue+0x60>
 80041f8:	e000      	b.n	80041fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	22ff      	movs	r2, #255	; 0xff
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004204:	f001 fc10 	bl	8005a28 <vPortExitCritical>
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004218:	f001 fbd8 	bl	80059cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e001      	b.n	800422e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800422e:	f001 fbfb 	bl	8005a28 <vPortExitCritical>

	return xReturn;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004244:	f001 fbc2 	bl	80059cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	429a      	cmp	r2, r3
 8004252:	d102      	bne.n	800425a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e001      	b.n	800425e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800425e:	f001 fbe3 	bl	8005a28 <vPortExitCritical>

	return xReturn;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e014      	b.n	80042a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800427c:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <vQueueAddToRegistry+0x4c>)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004288:	490b      	ldr	r1, [pc, #44]	; (80042b8 <vQueueAddToRegistry+0x4c>)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <vQueueAddToRegistry+0x4c>)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800429e:	e005      	b.n	80042ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b07      	cmp	r3, #7
 80042aa:	d9e7      	bls.n	800427c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20004a0c 	.word	0x20004a0c

080042bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042cc:	f001 fb7e 	bl	80059cc <vPortEnterCritical>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d6:	b25b      	sxtb	r3, r3
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d103      	bne.n	80042e6 <vQueueWaitForMessageRestricted+0x2a>
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d103      	bne.n	80042fc <vQueueWaitForMessageRestricted+0x40>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fc:	f001 fb94 	bl	8005a28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	3324      	adds	r3, #36	; 0x24
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fc2f 	bl	8004b74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004316:	6978      	ldr	r0, [r7, #20]
 8004318:	f7ff ff28 	bl	800416c <prvUnlockQueue>
	}
 800431c:	bf00      	nop
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	; 0x38
 8004328:	af04      	add	r7, sp, #16
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <xTaskCreateStatic+0x28>
 8004338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	e7fe      	b.n	800434a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <xTaskCreateStatic+0x42>
 8004352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e7fe      	b.n	8004364 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004366:	235c      	movs	r3, #92	; 0x5c
 8004368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b5c      	cmp	r3, #92	; 0x5c
 800436e:	d009      	beq.n	8004384 <xTaskCreateStatic+0x60>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e7fe      	b.n	8004382 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004384:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d01e      	beq.n	80043ca <xTaskCreateStatic+0xa6>
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	2b00      	cmp	r3, #0
 8004390:	d01b      	beq.n	80043ca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800439a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043a4:	2300      	movs	r3, #0
 80043a6:	9303      	str	r3, [sp, #12]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	9302      	str	r3, [sp, #8]
 80043ac:	f107 0314 	add.w	r3, r7, #20
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	68b9      	ldr	r1, [r7, #8]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f850 	bl	8004462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043c4:	f000 f8dc 	bl	8004580 <prvAddNewTaskToReadyList>
 80043c8:	e001      	b.n	80043ce <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043ce:	697b      	ldr	r3, [r7, #20]
	}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3728      	adds	r7, #40	; 0x28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08c      	sub	sp, #48	; 0x30
 80043dc:	af04      	add	r7, sp, #16
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	4613      	mov	r3, r2
 80043e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043e8:	88fb      	ldrh	r3, [r7, #6]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f001 fc07 	bl	8005c00 <pvPortMalloc>
 80043f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00e      	beq.n	8004418 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043fa:	205c      	movs	r0, #92	; 0x5c
 80043fc:	f001 fc00 	bl	8005c00 <pvPortMalloc>
 8004400:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	631a      	str	r2, [r3, #48]	; 0x30
 800440e:	e005      	b.n	800441c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004410:	6978      	ldr	r0, [r7, #20]
 8004412:	f001 fcb7 	bl	8005d84 <vPortFree>
 8004416:	e001      	b.n	800441c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d017      	beq.n	8004452 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	2300      	movs	r3, #0
 800442e:	9303      	str	r3, [sp, #12]
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f80e 	bl	8004462 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004446:	69f8      	ldr	r0, [r7, #28]
 8004448:	f000 f89a 	bl	8004580 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800444c:	2301      	movs	r3, #1
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e002      	b.n	8004458 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004458:	69bb      	ldr	r3, [r7, #24]
	}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b088      	sub	sp, #32
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	461a      	mov	r2, r3
 800447a:	21a5      	movs	r1, #165	; 0xa5
 800447c:	f001 fdc5 	bl	800600a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800448a:	440b      	add	r3, r1
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	f023 0307 	bic.w	r3, r3, #7
 8004498:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d009      	beq.n	80044b8 <prvInitialiseNewTask+0x56>
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e7fe      	b.n	80044b6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01f      	beq.n	80044fe <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	e012      	b.n	80044ea <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	7819      	ldrb	r1, [r3, #0]
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	3334      	adds	r3, #52	; 0x34
 80044d4:	460a      	mov	r2, r1
 80044d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2b0f      	cmp	r3, #15
 80044ee:	d9e9      	bls.n	80044c4 <prvInitialiseNewTask+0x62>
 80044f0:	e000      	b.n	80044f4 <prvInitialiseNewTask+0x92>
			{
				break;
 80044f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044fc:	e003      	b.n	8004506 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	2b37      	cmp	r3, #55	; 0x37
 800450a:	d901      	bls.n	8004510 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800450c:	2337      	movs	r3, #55	; 0x37
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004514:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	2200      	movs	r2, #0
 8004520:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	3304      	adds	r3, #4
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff f994 	bl	8003854 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	3318      	adds	r3, #24
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff f98f 	bl	8003854 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800453a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	2200      	movs	r2, #0
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	68f9      	ldr	r1, [r7, #12]
 800455e:	69b8      	ldr	r0, [r7, #24]
 8004560:	f001 f90c 	bl	800577c <pxPortInitialiseStack>
 8004564:	4602      	mov	r2, r0
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004576:	bf00      	nop
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004588:	f001 fa20 	bl	80059cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800458c:	4b2d      	ldr	r3, [pc, #180]	; (8004644 <prvAddNewTaskToReadyList+0xc4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <prvAddNewTaskToReadyList+0xc4>)
 8004594:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004596:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <prvAddNewTaskToReadyList+0xc8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800459e:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <prvAddNewTaskToReadyList+0xc8>)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <prvAddNewTaskToReadyList+0xc4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d110      	bne.n	80045ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045ac:	f000 fc08 	bl	8004dc0 <prvInitialiseTaskLists>
 80045b0:	e00d      	b.n	80045ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045b2:	4b26      	ldr	r3, [pc, #152]	; (800464c <prvAddNewTaskToReadyList+0xcc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ba:	4b23      	ldr	r3, [pc, #140]	; (8004648 <prvAddNewTaskToReadyList+0xc8>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d802      	bhi.n	80045ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <prvAddNewTaskToReadyList+0xc8>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <prvAddNewTaskToReadyList+0xd0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <prvAddNewTaskToReadyList+0xd0>)
 80045d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045d8:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <prvAddNewTaskToReadyList+0xd0>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <prvAddNewTaskToReadyList+0xd4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d903      	bls.n	80045f4 <prvAddNewTaskToReadyList+0x74>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	4a18      	ldr	r2, [pc, #96]	; (8004654 <prvAddNewTaskToReadyList+0xd4>)
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4a15      	ldr	r2, [pc, #84]	; (8004658 <prvAddNewTaskToReadyList+0xd8>)
 8004602:	441a      	add	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f7ff f92f 	bl	800386e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004610:	f001 fa0a 	bl	8005a28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <prvAddNewTaskToReadyList+0xcc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00e      	beq.n	800463a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <prvAddNewTaskToReadyList+0xc8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	429a      	cmp	r2, r3
 8004628:	d207      	bcs.n	800463a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <prvAddNewTaskToReadyList+0xdc>)
 800462c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000bc0 	.word	0x20000bc0
 8004648:	200006ec 	.word	0x200006ec
 800464c:	20000bcc 	.word	0x20000bcc
 8004650:	20000bdc 	.word	0x20000bdc
 8004654:	20000bc8 	.word	0x20000bc8
 8004658:	200006f0 	.word	0x200006f0
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <vTaskDelay+0x60>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <vTaskDelay+0x2e>
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	60bb      	str	r3, [r7, #8]
 800468c:	e7fe      	b.n	800468c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800468e:	f000 f87f 	bl	8004790 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004692:	2100      	movs	r1, #0
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fcd7 	bl	8005048 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800469a:	f000 f887 	bl	80047ac <xTaskResumeAll>
 800469e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d107      	bne.n	80046b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <vTaskDelay+0x64>)
 80046a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ac:	601a      	str	r2, [r3, #0]
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000be8 	.word	0x20000be8
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046d6:	463a      	mov	r2, r7
 80046d8:	1d39      	adds	r1, r7, #4
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff f864 	bl	80037ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	9202      	str	r2, [sp, #8]
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	460a      	mov	r2, r1
 80046f6:	4920      	ldr	r1, [pc, #128]	; (8004778 <vTaskStartScheduler+0xb0>)
 80046f8:	4820      	ldr	r0, [pc, #128]	; (800477c <vTaskStartScheduler+0xb4>)
 80046fa:	f7ff fe13 	bl	8004324 <xTaskCreateStatic>
 80046fe:	4602      	mov	r2, r0
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <vTaskStartScheduler+0xb8>)
 8004702:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004704:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <vTaskStartScheduler+0xb8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e001      	b.n	8004716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d102      	bne.n	8004722 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800471c:	f000 fce8 	bl	80050f0 <xTimerCreateTimerTask>
 8004720:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d115      	bne.n	8004754 <vTaskStartScheduler+0x8c>
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <vTaskStartScheduler+0xbc>)
 800473c:	f04f 32ff 	mov.w	r2, #4294967295
 8004740:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004742:	4b11      	ldr	r3, [pc, #68]	; (8004788 <vTaskStartScheduler+0xc0>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004748:	4b10      	ldr	r3, [pc, #64]	; (800478c <vTaskStartScheduler+0xc4>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800474e:	f001 f89f 	bl	8005890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004752:	e00d      	b.n	8004770 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d109      	bne.n	8004770 <vTaskStartScheduler+0xa8>
 800475c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004760:	f383 8811 	msr	BASEPRI, r3
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	e7fe      	b.n	800476e <vTaskStartScheduler+0xa6>
}
 8004770:	bf00      	nop
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	08006040 	.word	0x08006040
 800477c:	08004d91 	.word	0x08004d91
 8004780:	20000be4 	.word	0x20000be4
 8004784:	20000be0 	.word	0x20000be0
 8004788:	20000bcc 	.word	0x20000bcc
 800478c:	20000bc4 	.word	0x20000bc4

08004790 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <vTaskSuspendAll+0x18>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3301      	adds	r3, #1
 800479a:	4a03      	ldr	r2, [pc, #12]	; (80047a8 <vTaskSuspendAll+0x18>)
 800479c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800479e:	bf00      	nop
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	20000be8 	.word	0x20000be8

080047ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <xTaskResumeAll+0x114>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d109      	bne.n	80047d6 <xTaskResumeAll+0x2a>
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	603b      	str	r3, [r7, #0]
 80047d4:	e7fe      	b.n	80047d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047d6:	f001 f8f9 	bl	80059cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <xTaskResumeAll+0x114>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3b01      	subs	r3, #1
 80047e0:	4a37      	ldr	r2, [pc, #220]	; (80048c0 <xTaskResumeAll+0x114>)
 80047e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047e4:	4b36      	ldr	r3, [pc, #216]	; (80048c0 <xTaskResumeAll+0x114>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d162      	bne.n	80048b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047ec:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <xTaskResumeAll+0x118>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d05e      	beq.n	80048b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047f4:	e02f      	b.n	8004856 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f6:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <xTaskResumeAll+0x11c>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	3318      	adds	r3, #24
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f890 	bl	8003928 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3304      	adds	r3, #4
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f88b 	bl	8003928 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004816:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <xTaskResumeAll+0x120>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d903      	bls.n	8004826 <xTaskResumeAll+0x7a>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <xTaskResumeAll+0x120>)
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4a27      	ldr	r2, [pc, #156]	; (80048d0 <xTaskResumeAll+0x124>)
 8004834:	441a      	add	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f7ff f816 	bl	800386e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004846:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <xTaskResumeAll+0x128>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	429a      	cmp	r2, r3
 800484e:	d302      	bcc.n	8004856 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <xTaskResumeAll+0x12c>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004856:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <xTaskResumeAll+0x11c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1cb      	bne.n	80047f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004864:	f000 fb46 	bl	8004ef4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004868:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <xTaskResumeAll+0x130>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004874:	f000 f846 	bl	8004904 <xTaskIncrementTick>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <xTaskResumeAll+0x12c>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3b01      	subs	r3, #1
 8004888:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1f1      	bne.n	8004874 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004890:	4b12      	ldr	r3, [pc, #72]	; (80048dc <xTaskResumeAll+0x130>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <xTaskResumeAll+0x12c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d009      	beq.n	80048b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800489e:	2301      	movs	r3, #1
 80048a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <xTaskResumeAll+0x134>)
 80048a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048b2:	f001 f8b9 	bl	8005a28 <vPortExitCritical>

	return xAlreadyYielded;
 80048b6:	68bb      	ldr	r3, [r7, #8]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000be8 	.word	0x20000be8
 80048c4:	20000bc0 	.word	0x20000bc0
 80048c8:	20000b80 	.word	0x20000b80
 80048cc:	20000bc8 	.word	0x20000bc8
 80048d0:	200006f0 	.word	0x200006f0
 80048d4:	200006ec 	.word	0x200006ec
 80048d8:	20000bd4 	.word	0x20000bd4
 80048dc:	20000bd0 	.word	0x20000bd0
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <xTaskGetTickCount+0x1c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048f0:	687b      	ldr	r3, [r7, #4]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000bc4 	.word	0x20000bc4

08004904 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490e:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <xTaskIncrementTick+0x144>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f040 8088 	bne.w	8004a28 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004918:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <xTaskIncrementTick+0x148>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004920:	4a4a      	ldr	r2, [pc, #296]	; (8004a4c <xTaskIncrementTick+0x148>)
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d11f      	bne.n	800496c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800492c:	4b48      	ldr	r3, [pc, #288]	; (8004a50 <xTaskIncrementTick+0x14c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <xTaskIncrementTick+0x46>
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	e7fe      	b.n	8004948 <xTaskIncrementTick+0x44>
 800494a:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <xTaskIncrementTick+0x14c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	4b40      	ldr	r3, [pc, #256]	; (8004a54 <xTaskIncrementTick+0x150>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3e      	ldr	r2, [pc, #248]	; (8004a50 <xTaskIncrementTick+0x14c>)
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4a3e      	ldr	r2, [pc, #248]	; (8004a54 <xTaskIncrementTick+0x150>)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b3e      	ldr	r3, [pc, #248]	; (8004a58 <xTaskIncrementTick+0x154>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	4a3c      	ldr	r2, [pc, #240]	; (8004a58 <xTaskIncrementTick+0x154>)
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	f000 fac4 	bl	8004ef4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800496c:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <xTaskIncrementTick+0x158>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d349      	bcc.n	8004a0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004976:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <xTaskIncrementTick+0x14c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d104      	bne.n	800498a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <xTaskIncrementTick+0x158>)
 8004982:	f04f 32ff 	mov.w	r2, #4294967295
 8004986:	601a      	str	r2, [r3, #0]
					break;
 8004988:	e03f      	b.n	8004a0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800498a:	4b31      	ldr	r3, [pc, #196]	; (8004a50 <xTaskIncrementTick+0x14c>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d203      	bcs.n	80049aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049a2:	4a2e      	ldr	r2, [pc, #184]	; (8004a5c <xTaskIncrementTick+0x158>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049a8:	e02f      	b.n	8004a0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe ffba 	bl	8003928 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3318      	adds	r3, #24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe ffb1 	bl	8003928 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ca:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <xTaskIncrementTick+0x15c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d903      	bls.n	80049da <xTaskIncrementTick+0xd6>
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	4a22      	ldr	r2, [pc, #136]	; (8004a60 <xTaskIncrementTick+0x15c>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049de:	4613      	mov	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4a1f      	ldr	r2, [pc, #124]	; (8004a64 <xTaskIncrementTick+0x160>)
 80049e8:	441a      	add	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f7fe ff3c 	bl	800386e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <xTaskIncrementTick+0x164>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3b8      	bcc.n	8004976 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a08:	e7b5      	b.n	8004976 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a0a:	4b17      	ldr	r3, [pc, #92]	; (8004a68 <xTaskIncrementTick+0x164>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a10:	4914      	ldr	r1, [pc, #80]	; (8004a64 <xTaskIncrementTick+0x160>)
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d907      	bls.n	8004a32 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8004a22:	2301      	movs	r3, #1
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e004      	b.n	8004a32 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a28:	4b10      	ldr	r3, [pc, #64]	; (8004a6c <xTaskIncrementTick+0x168>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <xTaskIncrementTick+0x168>)
 8004a30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a32:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <xTaskIncrementTick+0x16c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000be8 	.word	0x20000be8
 8004a4c:	20000bc4 	.word	0x20000bc4
 8004a50:	20000b78 	.word	0x20000b78
 8004a54:	20000b7c 	.word	0x20000b7c
 8004a58:	20000bd8 	.word	0x20000bd8
 8004a5c:	20000be0 	.word	0x20000be0
 8004a60:	20000bc8 	.word	0x20000bc8
 8004a64:	200006f0 	.word	0x200006f0
 8004a68:	200006ec 	.word	0x200006ec
 8004a6c:	20000bd0 	.word	0x20000bd0
 8004a70:	20000bd4 	.word	0x20000bd4

08004a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a7a:	4b27      	ldr	r3, [pc, #156]	; (8004b18 <vTaskSwitchContext+0xa4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a82:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <vTaskSwitchContext+0xa8>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a88:	e040      	b.n	8004b0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <vTaskSwitchContext+0xa8>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a90:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <vTaskSwitchContext+0xac>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e00f      	b.n	8004ab8 <vTaskSwitchContext+0x44>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <vTaskSwitchContext+0x3e>
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	e7fe      	b.n	8004ab0 <vTaskSwitchContext+0x3c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	491a      	ldr	r1, [pc, #104]	; (8004b24 <vTaskSwitchContext+0xb0>)
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0e5      	beq.n	8004a98 <vTaskSwitchContext+0x24>
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4a13      	ldr	r2, [pc, #76]	; (8004b24 <vTaskSwitchContext+0xb0>)
 8004ad8:	4413      	add	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3308      	adds	r3, #8
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d104      	bne.n	8004afc <vTaskSwitchContext+0x88>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	605a      	str	r2, [r3, #4]
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <vTaskSwitchContext+0xb4>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <vTaskSwitchContext+0xac>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6013      	str	r3, [r2, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	20000be8 	.word	0x20000be8
 8004b1c:	20000bd4 	.word	0x20000bd4
 8004b20:	20000bc8 	.word	0x20000bc8
 8004b24:	200006f0 	.word	0x200006f0
 8004b28:	200006ec 	.word	0x200006ec

08004b2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d109      	bne.n	8004b50 <vTaskPlaceOnEventList+0x24>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	60fb      	str	r3, [r7, #12]
 8004b4e:	e7fe      	b.n	8004b4e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b50:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <vTaskPlaceOnEventList+0x44>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3318      	adds	r3, #24
 8004b56:	4619      	mov	r1, r3
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fe feac 	bl	80038b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b5e:	2101      	movs	r1, #1
 8004b60:	6838      	ldr	r0, [r7, #0]
 8004b62:	f000 fa71 	bl	8005048 <prvAddCurrentTaskToDelayedList>
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200006ec 	.word	0x200006ec

08004b74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d109      	bne.n	8004b9a <vTaskPlaceOnEventListRestricted+0x26>
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e7fe      	b.n	8004b98 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <vTaskPlaceOnEventListRestricted+0x50>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f7fe fe63 	bl	800386e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004bae:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	68b8      	ldr	r0, [r7, #8]
 8004bb8:	f000 fa46 	bl	8005048 <prvAddCurrentTaskToDelayedList>
	}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	200006ec 	.word	0x200006ec

08004bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d109      	bne.n	8004bf2 <xTaskRemoveFromEventList+0x2a>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e7fe      	b.n	8004bf0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe fe96 	bl	8003928 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <xTaskRemoveFromEventList+0xac>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d11d      	bne.n	8004c40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fe8d 	bl	8003928 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c12:	4b19      	ldr	r3, [pc, #100]	; (8004c78 <xTaskRemoveFromEventList+0xb0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d903      	bls.n	8004c22 <xTaskRemoveFromEventList+0x5a>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <xTaskRemoveFromEventList+0xb0>)
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <xTaskRemoveFromEventList+0xb4>)
 8004c30:	441a      	add	r2, r3
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f7fe fe18 	bl	800386e <vListInsertEnd>
 8004c3e:	e005      	b.n	8004c4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3318      	adds	r3, #24
 8004c44:	4619      	mov	r1, r3
 8004c46:	480e      	ldr	r0, [pc, #56]	; (8004c80 <xTaskRemoveFromEventList+0xb8>)
 8004c48:	f7fe fe11 	bl	800386e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <xTaskRemoveFromEventList+0xbc>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d905      	bls.n	8004c66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <xTaskRemoveFromEventList+0xc0>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	e001      	b.n	8004c6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c6a:	697b      	ldr	r3, [r7, #20]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000be8 	.word	0x20000be8
 8004c78:	20000bc8 	.word	0x20000bc8
 8004c7c:	200006f0 	.word	0x200006f0
 8004c80:	20000b80 	.word	0x20000b80
 8004c84:	200006ec 	.word	0x200006ec
 8004c88:	20000bd4 	.word	0x20000bd4

08004c8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <vTaskInternalSetTimeOutState+0x24>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c9c:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <vTaskInternalSetTimeOutState+0x28>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	605a      	str	r2, [r3, #4]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	20000bd8 	.word	0x20000bd8
 8004cb4:	20000bc4 	.word	0x20000bc4

08004cb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <xTaskCheckForTimeOut+0x24>
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	e7fe      	b.n	8004cda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d109      	bne.n	8004cf6 <xTaskCheckForTimeOut+0x3e>
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e7fe      	b.n	8004cf4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004cf6:	f000 fe69 	bl	80059cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <xTaskCheckForTimeOut+0xb8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d12:	d102      	bne.n	8004d1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	e023      	b.n	8004d62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b15      	ldr	r3, [pc, #84]	; (8004d74 <xTaskCheckForTimeOut+0xbc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d007      	beq.n	8004d36 <xTaskCheckForTimeOut+0x7e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e015      	b.n	8004d62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d20b      	bcs.n	8004d58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad2      	subs	r2, r2, r3
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff9d 	bl	8004c8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e004      	b.n	8004d62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d62:	f000 fe61 	bl	8005a28 <vPortExitCritical>

	return xReturn;
 8004d66:	69fb      	ldr	r3, [r7, #28]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000bc4 	.word	0x20000bc4
 8004d74:	20000bd8 	.word	0x20000bd8

08004d78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <vTaskMissedYield+0x14>)
 8004d7e:	2201      	movs	r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20000bd4 	.word	0x20000bd4

08004d90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d98:	f000 f852 	bl	8004e40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <prvIdleTask+0x28>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d9f9      	bls.n	8004d98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004da4:	4b05      	ldr	r3, [pc, #20]	; (8004dbc <prvIdleTask+0x2c>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004db4:	e7f0      	b.n	8004d98 <prvIdleTask+0x8>
 8004db6:	bf00      	nop
 8004db8:	200006f0 	.word	0x200006f0
 8004dbc:	e000ed04 	.word	0xe000ed04

08004dc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	607b      	str	r3, [r7, #4]
 8004dca:	e00c      	b.n	8004de6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a12      	ldr	r2, [pc, #72]	; (8004e20 <prvInitialiseTaskLists+0x60>)
 8004dd8:	4413      	add	r3, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fd1a 	bl	8003814 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3301      	adds	r3, #1
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b37      	cmp	r3, #55	; 0x37
 8004dea:	d9ef      	bls.n	8004dcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004dec:	480d      	ldr	r0, [pc, #52]	; (8004e24 <prvInitialiseTaskLists+0x64>)
 8004dee:	f7fe fd11 	bl	8003814 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004df2:	480d      	ldr	r0, [pc, #52]	; (8004e28 <prvInitialiseTaskLists+0x68>)
 8004df4:	f7fe fd0e 	bl	8003814 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004df8:	480c      	ldr	r0, [pc, #48]	; (8004e2c <prvInitialiseTaskLists+0x6c>)
 8004dfa:	f7fe fd0b 	bl	8003814 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dfe:	480c      	ldr	r0, [pc, #48]	; (8004e30 <prvInitialiseTaskLists+0x70>)
 8004e00:	f7fe fd08 	bl	8003814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e04:	480b      	ldr	r0, [pc, #44]	; (8004e34 <prvInitialiseTaskLists+0x74>)
 8004e06:	f7fe fd05 	bl	8003814 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e0a:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <prvInitialiseTaskLists+0x78>)
 8004e0c:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <prvInitialiseTaskLists+0x64>)
 8004e0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <prvInitialiseTaskLists+0x7c>)
 8004e12:	4a05      	ldr	r2, [pc, #20]	; (8004e28 <prvInitialiseTaskLists+0x68>)
 8004e14:	601a      	str	r2, [r3, #0]
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	200006f0 	.word	0x200006f0
 8004e24:	20000b50 	.word	0x20000b50
 8004e28:	20000b64 	.word	0x20000b64
 8004e2c:	20000b80 	.word	0x20000b80
 8004e30:	20000b94 	.word	0x20000b94
 8004e34:	20000bac 	.word	0x20000bac
 8004e38:	20000b78 	.word	0x20000b78
 8004e3c:	20000b7c 	.word	0x20000b7c

08004e40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e46:	e019      	b.n	8004e7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e48:	f000 fdc0 	bl	80059cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4c:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <prvCheckTasksWaitingTermination+0x4c>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fd65 	bl	8003928 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	; (8004e90 <prvCheckTasksWaitingTermination+0x50>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <prvCheckTasksWaitingTermination+0x50>)
 8004e66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <prvCheckTasksWaitingTermination+0x54>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <prvCheckTasksWaitingTermination+0x54>)
 8004e70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e72:	f000 fdd9 	bl	8005a28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f80e 	bl	8004e98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <prvCheckTasksWaitingTermination+0x54>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e1      	bne.n	8004e48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000b94 	.word	0x20000b94
 8004e90:	20000bc0 	.word	0x20000bc0
 8004e94:	20000ba8 	.word	0x20000ba8

08004e98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d108      	bne.n	8004ebc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 ff68 	bl	8005d84 <vPortFree>
				vPortFree( pxTCB );
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 ff65 	bl	8005d84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eba:	e017      	b.n	8004eec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d103      	bne.n	8004ece <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 ff5c 	bl	8005d84 <vPortFree>
	}
 8004ecc:	e00e      	b.n	8004eec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d009      	beq.n	8004eec <prvDeleteTCB+0x54>
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	f383 8811 	msr	BASEPRI, r3
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e7fe      	b.n	8004eea <prvDeleteTCB+0x52>
	}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <prvResetNextTaskUnblockTime+0x38>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f04:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <prvResetNextTaskUnblockTime+0x3c>)
 8004f06:	f04f 32ff 	mov.w	r2, #4294967295
 8004f0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f0c:	e008      	b.n	8004f20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0e:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <prvResetNextTaskUnblockTime+0x38>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <prvResetNextTaskUnblockTime+0x3c>)
 8004f1e:	6013      	str	r3, [r2, #0]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000b78 	.word	0x20000b78
 8004f30:	20000be0 	.word	0x20000be0

08004f34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <xTaskGetSchedulerState+0x34>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d102      	bne.n	8004f48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f42:	2301      	movs	r3, #1
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	e008      	b.n	8004f5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f48:	4b08      	ldr	r3, [pc, #32]	; (8004f6c <xTaskGetSchedulerState+0x38>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f50:	2302      	movs	r3, #2
 8004f52:	607b      	str	r3, [r7, #4]
 8004f54:	e001      	b.n	8004f5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f5a:	687b      	ldr	r3, [r7, #4]
	}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000bcc 	.word	0x20000bcc
 8004f6c:	20000be8 	.word	0x20000be8

08004f70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d054      	beq.n	8005030 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f86:	4b2d      	ldr	r3, [pc, #180]	; (800503c <xTaskPriorityDisinherit+0xcc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d009      	beq.n	8004fa4 <xTaskPriorityDisinherit+0x34>
 8004f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f94:	f383 8811 	msr	BASEPRI, r3
 8004f98:	f3bf 8f6f 	isb	sy
 8004f9c:	f3bf 8f4f 	dsb	sy
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e7fe      	b.n	8004fa2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <xTaskPriorityDisinherit+0x50>
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
 8004fbe:	e7fe      	b.n	8004fbe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	1e5a      	subs	r2, r3, #1
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d02c      	beq.n	8005030 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d128      	bne.n	8005030 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fca0 	bl	8003928 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <xTaskPriorityDisinherit+0xd0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d903      	bls.n	8005010 <xTaskPriorityDisinherit+0xa0>
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4a0c      	ldr	r2, [pc, #48]	; (8005040 <xTaskPriorityDisinherit+0xd0>)
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4a09      	ldr	r2, [pc, #36]	; (8005044 <xTaskPriorityDisinherit+0xd4>)
 800501e:	441a      	add	r2, r3
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7fe fc21 	bl	800386e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800502c:	2301      	movs	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005030:	697b      	ldr	r3, [r7, #20]
	}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200006ec 	.word	0x200006ec
 8005040:	20000bc8 	.word	0x20000bc8
 8005044:	200006f0 	.word	0x200006f0

08005048 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005052:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <prvAddCurrentTaskToDelayedList+0x94>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3304      	adds	r3, #4
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fc62 	bl	8003928 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506a:	d10a      	bne.n	8005082 <prvAddCurrentTaskToDelayedList+0x3a>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005072:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <prvAddCurrentTaskToDelayedList+0x94>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4819      	ldr	r0, [pc, #100]	; (80050e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800507c:	f7fe fbf7 	bl	800386e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005080:	e026      	b.n	80050d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4413      	add	r3, r2
 8005088:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800508a:	4b14      	ldr	r3, [pc, #80]	; (80050dc <prvAddCurrentTaskToDelayedList+0x94>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	429a      	cmp	r2, r3
 8005098:	d209      	bcs.n	80050ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509a:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <prvAddCurrentTaskToDelayedList+0x94>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f7fe fc05 	bl	80038b6 <vListInsert>
}
 80050ac:	e010      	b.n	80050d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ae:	4b0e      	ldr	r3, [pc, #56]	; (80050e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <prvAddCurrentTaskToDelayedList+0x94>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fe fbfb 	bl	80038b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050c0:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d202      	bcs.n	80050d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ca:	4a08      	ldr	r2, [pc, #32]	; (80050ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	6013      	str	r3, [r2, #0]
}
 80050d0:	bf00      	nop
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000bc4 	.word	0x20000bc4
 80050dc:	200006ec 	.word	0x200006ec
 80050e0:	20000bac 	.word	0x20000bac
 80050e4:	20000b7c 	.word	0x20000b7c
 80050e8:	20000b78 	.word	0x20000b78
 80050ec:	20000be0 	.word	0x20000be0

080050f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050fa:	f000 faff 	bl	80056fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050fe:	4b1c      	ldr	r3, [pc, #112]	; (8005170 <xTimerCreateTimerTask+0x80>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d021      	beq.n	800514a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800510e:	1d3a      	adds	r2, r7, #4
 8005110:	f107 0108 	add.w	r1, r7, #8
 8005114:	f107 030c 	add.w	r3, r7, #12
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fb61 	bl	80037e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	9202      	str	r2, [sp, #8]
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	2302      	movs	r3, #2
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2300      	movs	r3, #0
 800512e:	460a      	mov	r2, r1
 8005130:	4910      	ldr	r1, [pc, #64]	; (8005174 <xTimerCreateTimerTask+0x84>)
 8005132:	4811      	ldr	r0, [pc, #68]	; (8005178 <xTimerCreateTimerTask+0x88>)
 8005134:	f7ff f8f6 	bl	8004324 <xTaskCreateStatic>
 8005138:	4602      	mov	r2, r0
 800513a:	4b10      	ldr	r3, [pc, #64]	; (800517c <xTimerCreateTimerTask+0x8c>)
 800513c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800513e:	4b0f      	ldr	r3, [pc, #60]	; (800517c <xTimerCreateTimerTask+0x8c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005146:	2301      	movs	r3, #1
 8005148:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <xTimerCreateTimerTask+0x74>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e7fe      	b.n	8005162 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005164:	697b      	ldr	r3, [r7, #20]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3718      	adds	r7, #24
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000c1c 	.word	0x20000c1c
 8005174:	08006048 	.word	0x08006048
 8005178:	080052b1 	.word	0x080052b1
 800517c:	20000c20 	.word	0x20000c20

08005180 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08a      	sub	sp, #40	; 0x28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	607a      	str	r2, [r7, #4]
 800518c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800518e:	2300      	movs	r3, #0
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <xTimerGenericCommand+0x2c>
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	e7fe      	b.n	80051aa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051ac:	4b19      	ldr	r3, [pc, #100]	; (8005214 <xTimerGenericCommand+0x94>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02a      	beq.n	800520a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	dc18      	bgt.n	80051f8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051c6:	f7ff feb5 	bl	8004f34 <xTaskGetSchedulerState>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d109      	bne.n	80051e4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051d0:	4b10      	ldr	r3, [pc, #64]	; (8005214 <xTimerGenericCommand+0x94>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	f107 0110 	add.w	r1, r7, #16
 80051d8:	2300      	movs	r3, #0
 80051da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051dc:	f7fe fccc 	bl	8003b78 <xQueueGenericSend>
 80051e0:	6278      	str	r0, [r7, #36]	; 0x24
 80051e2:	e012      	b.n	800520a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051e4:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <xTimerGenericCommand+0x94>)
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	f107 0110 	add.w	r1, r7, #16
 80051ec:	2300      	movs	r3, #0
 80051ee:	2200      	movs	r2, #0
 80051f0:	f7fe fcc2 	bl	8003b78 <xQueueGenericSend>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24
 80051f6:	e008      	b.n	800520a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <xTimerGenericCommand+0x94>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	f107 0110 	add.w	r1, r7, #16
 8005200:	2300      	movs	r3, #0
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	f7fe fdb2 	bl	8003d6c <xQueueGenericSendFromISR>
 8005208:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800520c:	4618      	mov	r0, r3
 800520e:	3728      	adds	r7, #40	; 0x28
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000c1c 	.word	0x20000c1c

08005218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005222:	4b22      	ldr	r3, [pc, #136]	; (80052ac <prvProcessExpiredTimer+0x94>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3304      	adds	r3, #4
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fb79 	bl	8003928 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d021      	beq.n	8005288 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	18d1      	adds	r1, r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f000 f8d1 	bl	80053f8 <prvInsertTimerInActiveList>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01e      	beq.n	800529a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800525c:	2300      	movs	r3, #0
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	2100      	movs	r1, #0
 8005266:	6978      	ldr	r0, [r7, #20]
 8005268:	f7ff ff8a 	bl	8005180 <xTimerGenericCommand>
 800526c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d112      	bne.n	800529a <prvProcessExpiredTimer+0x82>
 8005274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e7fe      	b.n	8005286 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	b2da      	uxtb	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	4798      	blx	r3
}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	20000c14 	.word	0x20000c14

080052b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052b8:	f107 0308 	add.w	r3, r7, #8
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 f857 	bl	8005370 <prvGetNextExpireTime>
 80052c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4619      	mov	r1, r3
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f803 	bl	80052d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052ce:	f000 f8d5 	bl	800547c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052d2:	e7f1      	b.n	80052b8 <prvTimerTask+0x8>

080052d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052de:	f7ff fa57 	bl	8004790 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f866 	bl	80053b8 <prvSampleTimeNow>
 80052ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d130      	bne.n	8005356 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <prvProcessTimerOrBlockTask+0x3c>
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d806      	bhi.n	8005310 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005302:	f7ff fa53 	bl	80047ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff85 	bl	8005218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800530e:	e024      	b.n	800535a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005316:	4b13      	ldr	r3, [pc, #76]	; (8005364 <prvProcessTimerOrBlockTask+0x90>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <prvProcessTimerOrBlockTask+0x50>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <prvProcessTimerOrBlockTask+0x52>
 8005324:	2300      	movs	r3, #0
 8005326:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <prvProcessTimerOrBlockTask+0x94>)
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	4619      	mov	r1, r3
 8005336:	f7fe ffc1 	bl	80042bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800533a:	f7ff fa37 	bl	80047ac <xTaskResumeAll>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <prvProcessTimerOrBlockTask+0x98>)
 8005346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	f3bf 8f6f 	isb	sy
}
 8005354:	e001      	b.n	800535a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005356:	f7ff fa29 	bl	80047ac <xTaskResumeAll>
}
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20000c18 	.word	0x20000c18
 8005368:	20000c1c 	.word	0x20000c1c
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <prvGetNextExpireTime+0x44>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <prvGetNextExpireTime+0x16>
 8005382:	2201      	movs	r2, #1
 8005384:	e000      	b.n	8005388 <prvGetNextExpireTime+0x18>
 8005386:	2200      	movs	r2, #0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005394:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <prvGetNextExpireTime+0x44>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e001      	b.n	80053a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053a4:	68fb      	ldr	r3, [r7, #12]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20000c14 	.word	0x20000c14

080053b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053c0:	f7ff fa90 	bl	80048e4 <xTaskGetTickCount>
 80053c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <prvSampleTimeNow+0x3c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d205      	bcs.n	80053dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053d0:	f000 f930 	bl	8005634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e002      	b.n	80053e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053e2:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <prvSampleTimeNow+0x3c>)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053e8:	68fb      	ldr	r3, [r7, #12]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	20000c24 	.word	0x20000c24

080053f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d812      	bhi.n	8005444 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800542c:	2301      	movs	r3, #1
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	e01b      	b.n	800546a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <prvInsertTimerInActiveList+0x7c>)
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	3304      	adds	r3, #4
 800543a:	4619      	mov	r1, r3
 800543c:	4610      	mov	r0, r2
 800543e:	f7fe fa3a 	bl	80038b6 <vListInsert>
 8005442:	e012      	b.n	800546a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d206      	bcs.n	800545a <prvInsertTimerInActiveList+0x62>
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d302      	bcc.n	800545a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005454:	2301      	movs	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e007      	b.n	800546a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <prvInsertTimerInActiveList+0x80>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f7fe fa26 	bl	80038b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800546a:	697b      	ldr	r3, [r7, #20]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000c18 	.word	0x20000c18
 8005478:	20000c14 	.word	0x20000c14

0800547c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08e      	sub	sp, #56	; 0x38
 8005480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005482:	e0c6      	b.n	8005612 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	da17      	bge.n	80054ba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800548a:	1d3b      	adds	r3, r7, #4
 800548c:	3304      	adds	r3, #4
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d109      	bne.n	80054aa <prvProcessReceivedCommands+0x2e>
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	e7fe      	b.n	80054a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b0:	6850      	ldr	r0, [r2, #4]
 80054b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b4:	6892      	ldr	r2, [r2, #8]
 80054b6:	4611      	mov	r1, r2
 80054b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f2c0 80a7 	blt.w	8005610 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d0:	3304      	adds	r3, #4
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe fa28 	bl	8003928 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054d8:	463b      	mov	r3, r7
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff ff6c 	bl	80053b8 <prvSampleTimeNow>
 80054e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b09      	cmp	r3, #9
 80054e6:	f200 8094 	bhi.w	8005612 <prvProcessReceivedCommands+0x196>
 80054ea:	a201      	add	r2, pc, #4	; (adr r2, 80054f0 <prvProcessReceivedCommands+0x74>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005519 	.word	0x08005519
 80054f4:	08005519 	.word	0x08005519
 80054f8:	08005519 	.word	0x08005519
 80054fc:	0800558b 	.word	0x0800558b
 8005500:	0800559f 	.word	0x0800559f
 8005504:	080055e7 	.word	0x080055e7
 8005508:	08005519 	.word	0x08005519
 800550c:	08005519 	.word	0x08005519
 8005510:	0800558b 	.word	0x0800558b
 8005514:	0800559f 	.word	0x0800559f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800551e:	f043 0301 	orr.w	r3, r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	18d1      	adds	r1, r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005538:	f7ff ff5e 	bl	80053f8 <prvInsertTimerInActiveList>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d067      	beq.n	8005612 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005548:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05c      	beq.n	8005612 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	441a      	add	r2, r3
 8005560:	2300      	movs	r3, #0
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	2300      	movs	r3, #0
 8005566:	2100      	movs	r1, #0
 8005568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556a:	f7ff fe09 	bl	8005180 <xTimerGenericCommand>
 800556e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d14d      	bne.n	8005612 <prvProcessReceivedCommands+0x196>
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	e7fe      	b.n	8005588 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800559c:	e039      	b.n	8005612 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055a4:	f043 0301 	orr.w	r3, r3, #1
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <prvProcessReceivedCommands+0x156>
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	e7fe      	b.n	80055d0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	18d1      	adds	r1, r2, r3
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e0:	f7ff ff0a 	bl	80053f8 <prvInsertTimerInActiveList>
					break;
 80055e4:	e015      	b.n	8005612 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d103      	bne.n	80055fc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80055f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f6:	f000 fbc5 	bl	8005d84 <vPortFree>
 80055fa:	e00a      	b.n	8005612 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	b2da      	uxtb	r2, r3
 8005608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800560e:	e000      	b.n	8005612 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005610:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <prvProcessReceivedCommands+0x1b4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	1d39      	adds	r1, r7, #4
 8005618:	2200      	movs	r2, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fc3a 	bl	8003e94 <xQueueReceive>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	f47f af2e 	bne.w	8005484 <prvProcessReceivedCommands+0x8>
	}
}
 8005628:	bf00      	nop
 800562a:	3730      	adds	r7, #48	; 0x30
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20000c1c 	.word	0x20000c1c

08005634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800563a:	e047      	b.n	80056cc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800563c:	4b2d      	ldr	r3, [pc, #180]	; (80056f4 <prvSwitchTimerLists+0xc0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005646:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <prvSwitchTimerLists+0xc0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3304      	adds	r3, #4
 8005654:	4618      	mov	r0, r3
 8005656:	f7fe f967 	bl	8003928 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02d      	beq.n	80056cc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d90e      	bls.n	80056a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800568e:	4b19      	ldr	r3, [pc, #100]	; (80056f4 <prvSwitchTimerLists+0xc0>)
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3304      	adds	r3, #4
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f7fe f90c 	bl	80038b6 <vListInsert>
 800569e:	e015      	b.n	80056cc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a0:	2300      	movs	r3, #0
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	2100      	movs	r1, #0
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f7ff fd68 	bl	8005180 <xTimerGenericCommand>
 80056b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d109      	bne.n	80056cc <prvSwitchTimerLists+0x98>
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	f383 8811 	msr	BASEPRI, r3
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	e7fe      	b.n	80056ca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <prvSwitchTimerLists+0xc0>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1b2      	bne.n	800563c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056d6:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <prvSwitchTimerLists+0xc0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <prvSwitchTimerLists+0xc4>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a04      	ldr	r2, [pc, #16]	; (80056f4 <prvSwitchTimerLists+0xc0>)
 80056e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056e4:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <prvSwitchTimerLists+0xc4>)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6013      	str	r3, [r2, #0]
}
 80056ea:	bf00      	nop
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000c14 	.word	0x20000c14
 80056f8:	20000c18 	.word	0x20000c18

080056fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005702:	f000 f963 	bl	80059cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005706:	4b15      	ldr	r3, [pc, #84]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d120      	bne.n	8005750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800570e:	4814      	ldr	r0, [pc, #80]	; (8005760 <prvCheckForValidListAndQueue+0x64>)
 8005710:	f7fe f880 	bl	8003814 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005714:	4813      	ldr	r0, [pc, #76]	; (8005764 <prvCheckForValidListAndQueue+0x68>)
 8005716:	f7fe f87d 	bl	8003814 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800571a:	4b13      	ldr	r3, [pc, #76]	; (8005768 <prvCheckForValidListAndQueue+0x6c>)
 800571c:	4a10      	ldr	r2, [pc, #64]	; (8005760 <prvCheckForValidListAndQueue+0x64>)
 800571e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005720:	4b12      	ldr	r3, [pc, #72]	; (800576c <prvCheckForValidListAndQueue+0x70>)
 8005722:	4a10      	ldr	r2, [pc, #64]	; (8005764 <prvCheckForValidListAndQueue+0x68>)
 8005724:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005726:	2300      	movs	r3, #0
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <prvCheckForValidListAndQueue+0x74>)
 800572c:	4a11      	ldr	r2, [pc, #68]	; (8005774 <prvCheckForValidListAndQueue+0x78>)
 800572e:	2110      	movs	r1, #16
 8005730:	200a      	movs	r0, #10
 8005732:	f7fe f98b 	bl	8003a4c <xQueueGenericCreateStatic>
 8005736:	4602      	mov	r2, r0
 8005738:	4b08      	ldr	r3, [pc, #32]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 800573a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800573c:	4b07      	ldr	r3, [pc, #28]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005744:	4b05      	ldr	r3, [pc, #20]	; (800575c <prvCheckForValidListAndQueue+0x60>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	490b      	ldr	r1, [pc, #44]	; (8005778 <prvCheckForValidListAndQueue+0x7c>)
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fd8e 	bl	800426c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005750:	f000 f96a 	bl	8005a28 <vPortExitCritical>
}
 8005754:	bf00      	nop
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000c1c 	.word	0x20000c1c
 8005760:	20000bec 	.word	0x20000bec
 8005764:	20000c00 	.word	0x20000c00
 8005768:	20000c14 	.word	0x20000c14
 800576c:	20000c18 	.word	0x20000c18
 8005770:	20000cc8 	.word	0x20000cc8
 8005774:	20000c28 	.word	0x20000c28
 8005778:	08006050 	.word	0x08006050

0800577c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3b04      	subs	r3, #4
 800578c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b04      	subs	r3, #4
 800579a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f023 0201 	bic.w	r2, r3, #1
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3b04      	subs	r3, #4
 80057aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057ac:	4a0c      	ldr	r2, [pc, #48]	; (80057e0 <pxPortInitialiseStack+0x64>)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b14      	subs	r3, #20
 80057b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b04      	subs	r3, #4
 80057c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f06f 0202 	mvn.w	r2, #2
 80057ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3b20      	subs	r3, #32
 80057d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	080057e5 	.word	0x080057e5

080057e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <prvTaskExitError+0x50>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d009      	beq.n	800580c <prvTaskExitError+0x28>
 80057f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e7fe      	b.n	800580a <prvTaskExitError+0x26>
 800580c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800581e:	bf00      	nop
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0fc      	beq.n	8005820 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005826:	bf00      	nop
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000010 	.word	0x20000010
	...

08005840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005840:	4b07      	ldr	r3, [pc, #28]	; (8005860 <pxCurrentTCBConst2>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f380 8809 	msr	PSP, r0
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	4770      	bx	lr
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst2>:
 8005860:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005868:	4808      	ldr	r0, [pc, #32]	; (800588c <prvPortStartFirstTask+0x24>)
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f380 8808 	msr	MSP, r0
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8814 	msr	CONTROL, r0
 800587a:	b662      	cpsie	i
 800587c:	b661      	cpsie	f
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	df00      	svc	0
 8005888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800588a:	bf00      	nop
 800588c:	e000ed08 	.word	0xe000ed08

08005890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005896:	4b44      	ldr	r3, [pc, #272]	; (80059a8 <xPortStartScheduler+0x118>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a44      	ldr	r2, [pc, #272]	; (80059ac <xPortStartScheduler+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d109      	bne.n	80058b4 <xPortStartScheduler+0x24>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e7fe      	b.n	80058b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058b4:	4b3c      	ldr	r3, [pc, #240]	; (80059a8 <xPortStartScheduler+0x118>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a3d      	ldr	r2, [pc, #244]	; (80059b0 <xPortStartScheduler+0x120>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d109      	bne.n	80058d2 <xPortStartScheduler+0x42>
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e7fe      	b.n	80058d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058d2:	4b38      	ldr	r3, [pc, #224]	; (80059b4 <xPortStartScheduler+0x124>)
 80058d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	22ff      	movs	r2, #255	; 0xff
 80058e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b30      	ldr	r3, [pc, #192]	; (80059b8 <xPortStartScheduler+0x128>)
 80058f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <xPortStartScheduler+0x12c>)
 80058fc:	2207      	movs	r2, #7
 80058fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005900:	e009      	b.n	8005916 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005902:	4b2e      	ldr	r3, [pc, #184]	; (80059bc <xPortStartScheduler+0x12c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3b01      	subs	r3, #1
 8005908:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <xPortStartScheduler+0x12c>)
 800590a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	b2db      	uxtb	r3, r3
 8005914:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d0ef      	beq.n	8005902 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005922:	4b26      	ldr	r3, [pc, #152]	; (80059bc <xPortStartScheduler+0x12c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1c3 0307 	rsb	r3, r3, #7
 800592a:	2b04      	cmp	r3, #4
 800592c:	d009      	beq.n	8005942 <xPortStartScheduler+0xb2>
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	e7fe      	b.n	8005940 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <xPortStartScheduler+0x12c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <xPortStartScheduler+0x12c>)
 800594a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800594c:	4b1b      	ldr	r3, [pc, #108]	; (80059bc <xPortStartScheduler+0x12c>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <xPortStartScheduler+0x12c>)
 8005956:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005960:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <xPortStartScheduler+0x130>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <xPortStartScheduler+0x130>)
 8005966:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800596a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800596c:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <xPortStartScheduler+0x130>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a13      	ldr	r2, [pc, #76]	; (80059c0 <xPortStartScheduler+0x130>)
 8005972:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005976:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005978:	f000 f8d6 	bl	8005b28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800597c:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <xPortStartScheduler+0x134>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005982:	f000 f8f5 	bl	8005b70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <xPortStartScheduler+0x138>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a0f      	ldr	r2, [pc, #60]	; (80059c8 <xPortStartScheduler+0x138>)
 800598c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005990:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005992:	f7ff ff69 	bl	8005868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005996:	f7ff f86d 	bl	8004a74 <vTaskSwitchContext>
	prvTaskExitError();
 800599a:	f7ff ff23 	bl	80057e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	e000ed00 	.word	0xe000ed00
 80059ac:	410fc271 	.word	0x410fc271
 80059b0:	410fc270 	.word	0x410fc270
 80059b4:	e000e400 	.word	0xe000e400
 80059b8:	20000d18 	.word	0x20000d18
 80059bc:	20000d1c 	.word	0x20000d1c
 80059c0:	e000ed20 	.word	0xe000ed20
 80059c4:	20000010 	.word	0x20000010
 80059c8:	e000ef34 	.word	0xe000ef34

080059cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059e4:	4b0e      	ldr	r3, [pc, #56]	; (8005a20 <vPortEnterCritical+0x54>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3301      	adds	r3, #1
 80059ea:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <vPortEnterCritical+0x54>)
 80059ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059ee:	4b0c      	ldr	r3, [pc, #48]	; (8005a20 <vPortEnterCritical+0x54>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10e      	bne.n	8005a14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <vPortEnterCritical+0x58>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d009      	beq.n	8005a14 <vPortEnterCritical+0x48>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	e7fe      	b.n	8005a12 <vPortEnterCritical+0x46>
	}
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	20000010 	.word	0x20000010
 8005a24:	e000ed04 	.word	0xe000ed04

08005a28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d109      	bne.n	8005a4a <vPortExitCritical+0x22>
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
 8005a46:	607b      	str	r3, [r7, #4]
 8005a48:	e7fe      	b.n	8005a48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a54:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <vPortExitCritical+0x4c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <vPortExitCritical+0x3e>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000010 	.word	0x20000010
	...

08005a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a80:	f3ef 8009 	mrs	r0, PSP
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	4b15      	ldr	r3, [pc, #84]	; (8005ae0 <pxCurrentTCBConst>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f01e 0f10 	tst.w	lr, #16
 8005a90:	bf08      	it	eq
 8005a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9a:	6010      	str	r0, [r2, #0]
 8005a9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005aa4:	f380 8811 	msr	BASEPRI, r0
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f7fe ffe0 	bl	8004a74 <vTaskSwitchContext>
 8005ab4:	f04f 0000 	mov.w	r0, #0
 8005ab8:	f380 8811 	msr	BASEPRI, r0
 8005abc:	bc09      	pop	{r0, r3}
 8005abe:	6819      	ldr	r1, [r3, #0]
 8005ac0:	6808      	ldr	r0, [r1, #0]
 8005ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac6:	f01e 0f10 	tst.w	lr, #16
 8005aca:	bf08      	it	eq
 8005acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ad0:	f380 8809 	msr	PSP, r0
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	f3af 8000 	nop.w

08005ae0 <pxCurrentTCBConst>:
 8005ae0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop

08005ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b00:	f7fe ff00 	bl	8004904 <xTaskIncrementTick>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <SysTick_Handler+0x3c>)
 8005b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	2300      	movs	r3, #0
 8005b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <vPortSetupTimerInterrupt+0x34>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b32:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <vPortSetupTimerInterrupt+0x38>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <vPortSetupTimerInterrupt+0x3c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a0a      	ldr	r2, [pc, #40]	; (8005b68 <vPortSetupTimerInterrupt+0x40>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	099b      	lsrs	r3, r3, #6
 8005b44:	4a09      	ldr	r2, [pc, #36]	; (8005b6c <vPortSetupTimerInterrupt+0x44>)
 8005b46:	3b01      	subs	r3, #1
 8005b48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b4a:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <vPortSetupTimerInterrupt+0x34>)
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	601a      	str	r2, [r3, #0]
}
 8005b50:	bf00      	nop
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	e000e010 	.word	0xe000e010
 8005b60:	e000e018 	.word	0xe000e018
 8005b64:	20000000 	.word	0x20000000
 8005b68:	10624dd3 	.word	0x10624dd3
 8005b6c:	e000e014 	.word	0xe000e014

08005b70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005b80 <vPortEnableVFP+0x10>
 8005b74:	6801      	ldr	r1, [r0, #0]
 8005b76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005b7a:	6001      	str	r1, [r0, #0]
 8005b7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b7e:	bf00      	nop
 8005b80:	e000ed88 	.word	0xe000ed88

08005b84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b8a:	f3ef 8305 	mrs	r3, IPSR
 8005b8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d913      	bls.n	8005bbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <vPortValidateInterruptPriority+0x6c>)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <vPortValidateInterruptPriority+0x70>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	7afa      	ldrb	r2, [r7, #11]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d209      	bcs.n	8005bbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	e7fe      	b.n	8005bbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bbe:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <vPortValidateInterruptPriority+0x74>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bc6:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <vPortValidateInterruptPriority+0x78>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d909      	bls.n	8005be2 <vPortValidateInterruptPriority+0x5e>
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	e7fe      	b.n	8005be0 <vPortValidateInterruptPriority+0x5c>
	}
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	e000e3f0 	.word	0xe000e3f0
 8005bf4:	20000d18 	.word	0x20000d18
 8005bf8:	e000ed0c 	.word	0xe000ed0c
 8005bfc:	20000d1c 	.word	0x20000d1c

08005c00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b08a      	sub	sp, #40	; 0x28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c0c:	f7fe fdc0 	bl	8004790 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c10:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <pvPortMalloc+0x170>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c18:	f000 f90c 	bl	8005e34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c1c:	4b55      	ldr	r3, [pc, #340]	; (8005d74 <pvPortMalloc+0x174>)
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f040 808c 	bne.w	8005d42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01c      	beq.n	8005c6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c30:	2208      	movs	r2, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d013      	beq.n	8005c6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f023 0307 	bic.w	r3, r3, #7
 8005c48:	3308      	adds	r3, #8
 8005c4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <pvPortMalloc+0x6a>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e7fe      	b.n	8005c68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d068      	beq.n	8005d42 <pvPortMalloc+0x142>
 8005c70:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <pvPortMalloc+0x178>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d863      	bhi.n	8005d42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c7a:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <pvPortMalloc+0x17c>)
 8005c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c7e:	4b3f      	ldr	r3, [pc, #252]	; (8005d7c <pvPortMalloc+0x17c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c84:	e004      	b.n	8005c90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d903      	bls.n	8005ca2 <pvPortMalloc+0xa2>
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f1      	bne.n	8005c86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ca2:	4b33      	ldr	r3, [pc, #204]	; (8005d70 <pvPortMalloc+0x170>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d04a      	beq.n	8005d42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	4413      	add	r3, r2
 8005cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	1ad2      	subs	r2, r2, r3
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d91e      	bls.n	8005d0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <pvPortMalloc+0xf4>
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e7fe      	b.n	8005cf2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	685a      	ldr	r2, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	1ad2      	subs	r2, r2, r3
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d06:	69b8      	ldr	r0, [r7, #24]
 8005d08:	f000 f8f6 	bl	8005ef8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <pvPortMalloc+0x178>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <pvPortMalloc+0x178>)
 8005d18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <pvPortMalloc+0x178>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <pvPortMalloc+0x180>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d203      	bcs.n	8005d2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d26:	4b14      	ldr	r3, [pc, #80]	; (8005d78 <pvPortMalloc+0x178>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <pvPortMalloc+0x180>)
 8005d2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	4b10      	ldr	r3, [pc, #64]	; (8005d74 <pvPortMalloc+0x174>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d42:	f7fe fd33 	bl	80047ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d009      	beq.n	8005d64 <pvPortMalloc+0x164>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e7fe      	b.n	8005d62 <pvPortMalloc+0x162>
	return pvReturn;
 8005d64:	69fb      	ldr	r3, [r7, #28]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3728      	adds	r7, #40	; 0x28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20004928 	.word	0x20004928
 8005d74:	20004934 	.word	0x20004934
 8005d78:	2000492c 	.word	0x2000492c
 8005d7c:	20004920 	.word	0x20004920
 8005d80:	20004930 	.word	0x20004930

08005d84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d046      	beq.n	8005e24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d96:	2308      	movs	r3, #8
 8005d98:	425b      	negs	r3, r3
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	4b20      	ldr	r3, [pc, #128]	; (8005e2c <vPortFree+0xa8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <vPortFree+0x42>
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e7fe      	b.n	8005dc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <vPortFree+0x5e>
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	e7fe      	b.n	8005de0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	4b11      	ldr	r3, [pc, #68]	; (8005e2c <vPortFree+0xa8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d019      	beq.n	8005e24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d115      	bne.n	8005e24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <vPortFree+0xa8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	43db      	mvns	r3, r3
 8005e02:	401a      	ands	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e08:	f7fe fcc2 	bl	8004790 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <vPortFree+0xac>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4413      	add	r3, r2
 8005e16:	4a06      	ldr	r2, [pc, #24]	; (8005e30 <vPortFree+0xac>)
 8005e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e1a:	6938      	ldr	r0, [r7, #16]
 8005e1c:	f000 f86c 	bl	8005ef8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e20:	f7fe fcc4 	bl	80047ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e24:	bf00      	nop
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	20004934 	.word	0x20004934
 8005e30:	2000492c 	.word	0x2000492c

08005e34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <prvHeapInit+0xac>)
 8005e42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3307      	adds	r3, #7
 8005e52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <prvHeapInit+0xac>)
 8005e64:	4413      	add	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e6c:	4a1d      	ldr	r2, [pc, #116]	; (8005ee4 <prvHeapInit+0xb0>)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e72:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <prvHeapInit+0xb0>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e80:	2208      	movs	r2, #8
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	1a9b      	subs	r3, r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <prvHeapInit+0xb4>)
 8005e94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <prvHeapInit+0xb4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e9e:	4b12      	ldr	r3, [pc, #72]	; (8005ee8 <prvHeapInit+0xb4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	1ad2      	subs	r2, r2, r3
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <prvHeapInit+0xb4>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <prvHeapInit+0xb8>)
 8005ec2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	4a09      	ldr	r2, [pc, #36]	; (8005ef0 <prvHeapInit+0xbc>)
 8005eca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ecc:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <prvHeapInit+0xc0>)
 8005ece:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ed2:	601a      	str	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000d20 	.word	0x20000d20
 8005ee4:	20004920 	.word	0x20004920
 8005ee8:	20004928 	.word	0x20004928
 8005eec:	20004930 	.word	0x20004930
 8005ef0:	2000492c 	.word	0x2000492c
 8005ef4:	20004934 	.word	0x20004934

08005ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f00:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <prvInsertBlockIntoFreeList+0xac>)
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	e002      	b.n	8005f0c <prvInsertBlockIntoFreeList+0x14>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d8f7      	bhi.n	8005f06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	4413      	add	r3, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d108      	bne.n	8005f3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685a      	ldr	r2, [r3, #4]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	441a      	add	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	441a      	add	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d118      	bne.n	8005f80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d00d      	beq.n	8005f76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e008      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f76:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	e003      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d002      	beq.n	8005f96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	20004920 	.word	0x20004920
 8005fa8:	20004928 	.word	0x20004928

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4e0d      	ldr	r6, [pc, #52]	; (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	; (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1ba4      	subs	r4, r4, r6
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2500      	movs	r5, #0
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4e0b      	ldr	r6, [pc, #44]	; (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	; (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f000 f82c 	bl	800601c <_init>
 8005fc4:	1ba4      	subs	r4, r4, r6
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2500      	movs	r5, #0
 8005fca:	42a5      	cmp	r5, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fd4:	4798      	blx	r3
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fde:	4798      	blx	r3
 8005fe0:	3501      	adds	r5, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	0800608c 	.word	0x0800608c
 8005fe8:	0800608c 	.word	0x0800608c
 8005fec:	0800608c 	.word	0x0800608c
 8005ff0:	08006090 	.word	0x08006090

08005ff4 <memcpy>:
 8005ff4:	b510      	push	{r4, lr}
 8005ff6:	1e43      	subs	r3, r0, #1
 8005ff8:	440a      	add	r2, r1
 8005ffa:	4291      	cmp	r1, r2
 8005ffc:	d100      	bne.n	8006000 <memcpy+0xc>
 8005ffe:	bd10      	pop	{r4, pc}
 8006000:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006004:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006008:	e7f7      	b.n	8005ffa <memcpy+0x6>

0800600a <memset>:
 800600a:	4402      	add	r2, r0
 800600c:	4603      	mov	r3, r0
 800600e:	4293      	cmp	r3, r2
 8006010:	d100      	bne.n	8006014 <memset+0xa>
 8006012:	4770      	bx	lr
 8006014:	f803 1b01 	strb.w	r1, [r3], #1
 8006018:	e7f9      	b.n	800600e <memset+0x4>
	...

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
