
H745ZI-Q_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006178  08006178  00016178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  20000000  080061d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000049b8  20000014  080061ec  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200049cc  080061ec  000249cc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   000267ad  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003e91  00000000  00000000  000467ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001588  00000000  00000000  0004a680  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001400  00000000  00000000  0004bc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003b68d  00000000  00000000  0004d008  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00013f64  00000000  00000000  00088695  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0018a2ee  00000000  00000000  0009c5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  002268e7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005900  00000000  00000000  00226964  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000014 	.word	0x20000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006160 	.word	0x08006160

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000018 	.word	0x20000018
 80002dc:	08006160 	.word	0x08006160

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b2f      	ldr	r3, [pc, #188]	; (80003a4 <SystemInit+0xc4>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002ea:	4a2e      	ldr	r2, [pc, #184]	; (80003a4 <SystemInit+0xc4>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 80002f4:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <SystemInit+0xc4>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a2a      	ldr	r2, [pc, #168]	; (80003a4 <SystemInit+0xc4>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000300:	4b29      	ldr	r3, [pc, #164]	; (80003a8 <SystemInit+0xc8>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a28      	ldr	r2, [pc, #160]	; (80003a8 <SystemInit+0xc8>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800030c:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <SystemInit+0xc8>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000312:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <SystemInit+0xc8>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4924      	ldr	r1, [pc, #144]	; (80003a8 <SystemInit+0xc8>)
 8000318:	4b24      	ldr	r3, [pc, #144]	; (80003ac <SystemInit+0xcc>)
 800031a:	4013      	ands	r3, r2
 800031c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800031e:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <SystemInit+0xc8>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <SystemInit+0xc8>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <SystemInit+0xc8>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <SystemInit+0xc8>)
 8000332:	2200      	movs	r2, #0
 8000334:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000336:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <SystemInit+0xc8>)
 8000338:	2200      	movs	r2, #0
 800033a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800033c:	4b1a      	ldr	r3, [pc, #104]	; (80003a8 <SystemInit+0xc8>)
 800033e:	2200      	movs	r2, #0
 8000340:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000342:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <SystemInit+0xc8>)
 8000344:	2200      	movs	r2, #0
 8000346:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000348:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <SystemInit+0xc8>)
 800034a:	2200      	movs	r2, #0
 800034c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <SystemInit+0xc8>)
 8000350:	2200      	movs	r2, #0
 8000352:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000354:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <SystemInit+0xc8>)
 8000356:	2200      	movs	r2, #0
 8000358:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800035a:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <SystemInit+0xc8>)
 800035c:	2200      	movs	r2, #0
 800035e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000360:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <SystemInit+0xc8>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a10      	ldr	r2, [pc, #64]	; (80003a8 <SystemInit+0xc8>)
 8000366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800036a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800036c:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <SystemInit+0xc8>)
 800036e:	2200      	movs	r2, #0
 8000370:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <SystemInit+0xd0>)
 8000374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000376:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <SystemInit+0xd0>)
 8000378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800037c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800037e:	4b0d      	ldr	r3, [pc, #52]	; (80003b4 <SystemInit+0xd4>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4b0d      	ldr	r3, [pc, #52]	; (80003b8 <SystemInit+0xd8>)
 8000384:	4013      	ands	r3, r2
 8000386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800038a:	d202      	bcs.n	8000392 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800038c:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <SystemInit+0xdc>)
 800038e:	2201      	movs	r2, #1
 8000390:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SystemInit+0xc4>)
 8000394:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000398:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	e000ed00 	.word	0xe000ed00
 80003a8:	58024400 	.word	0x58024400
 80003ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80003b0:	580000c0 	.word	0x580000c0
 80003b4:	5c001000 	.word	0x5c001000
 80003b8:	ffff0000 	.word	0xffff0000
 80003bc:	51008108 	.word	0x51008108

080003c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003c6:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <MX_DMA_Init+0x30>)
 80003c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80003cc:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <MX_DMA_Init+0x30>)
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <MX_DMA_Init+0x30>)
 80003d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	687b      	ldr	r3, [r7, #4]

}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	58024400 	.word	0x58024400

080003f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <MX_FREERTOS_Init+0x18>)
 80003fa:	2100      	movs	r1, #0
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_FREERTOS_Init+0x1c>)
 80003fe:	f003 f9a3 	bl	8003748 <osThreadNew>
 8000402:	4602      	mov	r2, r0
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <MX_FREERTOS_Init+0x20>)
 8000406:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	080061ac 	.word	0x080061ac
 8000410:	08000419 	.word	0x08000419
 8000414:	20004938 	.word	0x20004938

08000418 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000420:	2001      	movs	r0, #1
 8000422:	f003 fa37 	bl	8003894 <osDelay>
 8000426:	e7fb      	b.n	8000420 <StartDefaultTask+0x8>

08000428 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 030c 	add.w	r3, r7, #12
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
 800043c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800043e:	4b1b      	ldr	r3, [pc, #108]	; (80004ac <MX_GPIO_Init+0x84>)
 8000440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000444:	4a19      	ldr	r2, [pc, #100]	; (80004ac <MX_GPIO_Init+0x84>)
 8000446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800044a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800044e:	4b17      	ldr	r3, [pc, #92]	; (80004ac <MX_GPIO_Init+0x84>)
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_GPIO_Init+0x84>)
 800045e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <MX_GPIO_Init+0x84>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800046c:	4b0f      	ldr	r3, [pc, #60]	; (80004ac <MX_GPIO_Init+0x84>)
 800046e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000472:	f003 0302 	and.w	r3, r3, #2
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <MX_GPIO_Init+0x88>)
 8000482:	f000 fd7f 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000494:	2300      	movs	r3, #0
 8000496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000498:	f107 030c 	add.w	r3, r7, #12
 800049c:	4619      	mov	r1, r3
 800049e:	4804      	ldr	r0, [pc, #16]	; (80004b0 <MX_GPIO_Init+0x88>)
 80004a0:	f000 fbc0 	bl	8000c24 <HAL_GPIO_Init>

}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	58024400 	.word	0x58024400
 80004b0:	58020400 	.word	0x58020400

080004b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004bc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004c0:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <SCB_EnableICache+0x3c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004d0:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <SCB_EnableICache+0x3c>)
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <SCB_EnableICache+0x3c>)
 80004d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80004e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <SCB_EnableDCache+0x7c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000502:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <SCB_EnableDCache+0x7c>)
 8000508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800050c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	0b5b      	lsrs	r3, r3, #13
 8000512:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000516:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000520:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	015a      	lsls	r2, r3, #5
 8000526:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800052a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000530:	490f      	ldr	r1, [pc, #60]	; (8000570 <SCB_EnableDCache+0x7c>)
 8000532:	4313      	orrs	r3, r2
 8000534:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1e5a      	subs	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1ef      	bne.n	8000522 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	1e5a      	subs	r2, r3, #1
 8000546:	60fa      	str	r2, [r7, #12]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1e5      	bne.n	8000518 <SCB_EnableDCache+0x24>
 800054c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <SCB_EnableDCache+0x7c>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	4a06      	ldr	r2, [pc, #24]	; (8000570 <SCB_EnableDCache+0x7c>)
 8000556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800055a:	6153      	str	r3, [r2, #20]
 800055c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000560:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000564:	bf00      	nop
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
    int32_t timeout; 
/* USER CODE END Boot_Mode_Sequence_0 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800057a:	f7ff ff9b 	bl	80004b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800057e:	f7ff ffb9 	bl	80004f4 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000586:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000588:	bf00      	nop
 800058a:	4b24      	ldr	r3, [pc, #144]	; (800061c <main+0xa8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000592:	2b00      	cmp	r3, #0
 8000594:	d004      	beq.n	80005a0 <main+0x2c>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	607a      	str	r2, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	dcf4      	bgt.n	800058a <main+0x16>
  if ( timeout < 0 )
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	da01      	bge.n	80005aa <main+0x36>
  {
  Error_Handler();
 80005a6:	f000 f905 	bl	80007b4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 f9f3 	bl	8000994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f837 	bl	8000620 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <main+0xa8>)
 80005b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005b8:	4a18      	ldr	r2, [pc, #96]	; (800061c <main+0xa8>)
 80005ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <main+0xa8>)
 80005c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005cc:	603b      	str	r3, [r7, #0]
 80005ce:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fcf1 	bl	8000fb8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80005d6:	2100      	movs	r1, #0
 80005d8:	2000      	movs	r0, #0
 80005da:	f000 fd07 	bl	8000fec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80005de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e2:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80005e4:	bf00      	nop
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <main+0xa8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d104      	bne.n	80005fc <main+0x88>
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	1e5a      	subs	r2, r3, #1
 80005f6:	607a      	str	r2, [r7, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	dcf4      	bgt.n	80005e6 <main+0x72>
if ( timeout < 0 )
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	da01      	bge.n	8000606 <main+0x92>
{
Error_Handler();
 8000602:	f000 f8d7 	bl	80007b4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f7ff ff0f 	bl	8000428 <MX_GPIO_Init>
  MX_DMA_Init();
 800060a:	f7ff fed9 	bl	80003c0 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800060e:	f003 f831 	bl	8003674 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000612:	f7ff feef 	bl	80003f4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000616:	f003 f861 	bl	80036dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0xa6>
 800061c:	58024400 	.word	0x58024400

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0cc      	sub	sp, #304	; 0x130
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800062a:	224c      	movs	r2, #76	; 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fd8d 	bl	800614e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000638:	2220      	movs	r2, #32
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f005 fd86 	bl	800614e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4618      	mov	r0, r3
 8000648:	23bc      	movs	r3, #188	; 0xbc
 800064a:	461a      	mov	r2, r3
 800064c:	2100      	movs	r1, #0
 800064e:	f005 fd7e 	bl	800614e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000652:	2004      	movs	r0, #4
 8000654:	f000 fd02 	bl	800105c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	4b4a      	ldr	r3, [pc, #296]	; (8000788 <SystemClock_Config+0x168>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a49      	ldr	r2, [pc, #292]	; (8000788 <SystemClock_Config+0x168>)
 8000664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b47      	ldr	r3, [pc, #284]	; (8000788 <SystemClock_Config+0x168>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	4b45      	ldr	r3, [pc, #276]	; (800078c <SystemClock_Config+0x16c>)
 8000678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067a:	4a44      	ldr	r2, [pc, #272]	; (800078c <SystemClock_Config+0x16c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <SystemClock_Config+0x16c>)
 8000684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000686:	f003 0201 	and.w	r2, r3, #1
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000692:	bf00      	nop
 8000694:	4b3c      	ldr	r3, [pc, #240]	; (8000788 <SystemClock_Config+0x168>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a0:	d1f8      	bne.n	8000694 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	2301      	movs	r3, #1
 80006a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	2302      	movs	r3, #2
 80006b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 80006c2:	2378      	movs	r3, #120	; 0x78
 80006c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006da:	230c      	movs	r3, #12
 80006dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fd0d 	bl	8001110 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006fc:	f000 f85a 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	233f      	movs	r3, #63	; 0x3f
 8000702:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000712:	2308      	movs	r3, #8
 8000714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000718:	2340      	movs	r3, #64	; 0x40
 800071a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071e:	2340      	movs	r3, #64	; 0x40
 8000720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000732:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000736:	2104      	movs	r1, #4
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f8f9 	bl	8001930 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000744:	f000 f836 	bl	80007b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	220b      	movs	r2, #11
 800074e:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2200      	movs	r2, #0
 8000756:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000758:	f107 0308 	add.w	r3, r7, #8
 800075c:	2200      	movs	r2, #0
 800075e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fc8e 	bl	8002090 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x15e>
  {
    Error_Handler();
 800077a:	f000 f81b 	bl	80007b4 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	58024800 	.word	0x58024800
 800078c:	58000400 	.word	0x58000400

08000790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d101      	bne.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a2:	f000 f933 	bl	8000a0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40001000 	.word	0x40001000

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_MspInit+0x58>)
 80007cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <HAL_MspInit+0x58>)
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007da:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_MspInit+0x58>)
 80007dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	210f      	movs	r1, #15
 80007ec:	f06f 0001 	mvn.w	r0, #1
 80007f0:	f000 f9f0 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2041      	movs	r0, #65	; 0x41
 80007fa:	f000 f9eb 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 80007fe:	2041      	movs	r0, #65	; 0x41
 8000800:	f000 fa02 	bl	8000c08 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	207d      	movs	r0, #125	; 0x7d
 800080a:	f000 f9e3 	bl	8000bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 800080e:	207d      	movs	r0, #125	; 0x7d
 8000810:	f000 f9fa 	bl	8000c08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	58024400 	.word	0x58024400

08000820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08e      	sub	sp, #56	; 0x38
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000830:	2200      	movs	r2, #0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	2036      	movs	r0, #54	; 0x36
 8000836:	f000 f9cd 	bl	8000bd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800083a:	2036      	movs	r0, #54	; 0x36
 800083c:	f000 f9e4 	bl	8000c08 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000840:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <HAL_InitTick+0xa8>)
 8000842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000846:	4a20      	ldr	r2, [pc, #128]	; (80008c8 <HAL_InitTick+0xa8>)
 8000848:	f043 0310 	orr.w	r3, r3, #16
 800084c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <HAL_InitTick+0xa8>)
 8000852:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800085e:	f107 020c 	add.w	r2, r7, #12
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fbcf 	bl	800200c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800086e:	f001 fbb7 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8000872:	4603      	mov	r3, r0
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <HAL_InitTick+0xac>)
 800087c:	fba2 2303 	umull	r2, r3, r2, r3
 8000880:	0c9b      	lsrs	r3, r3, #18
 8000882:	3b01      	subs	r3, #1
 8000884:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0xb0>)
 8000888:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <HAL_InitTick+0xb4>)
 800088a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_InitTick+0xb0>)
 800088e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000892:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_InitTick+0xb0>)
 8000896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000898:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_InitTick+0xb0>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_InitTick+0xb0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <HAL_InitTick+0xb0>)
 80008a8:	f002 fc44 	bl	8003134 <HAL_TIM_Base_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d104      	bne.n	80008bc <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <HAL_InitTick+0xb0>)
 80008b4:	f002 fca0 	bl	80031f8 <HAL_TIM_Base_Start_IT>
 80008b8:	4603      	mov	r3, r0
 80008ba:	e000      	b.n	80008be <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80008bc:	2301      	movs	r3, #1
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3738      	adds	r7, #56	; 0x38
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	58024400 	.word	0x58024400
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	2000493c 	.word	0x2000493c
 80008d4:	40001000 	.word	0x40001000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
     HAL_TIM_IRQHandler(&htim6);
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <TIM6_DAC_IRQHandler+0x14>)
 8000912:	f002 fca7 	bl	8003264 <HAL_TIM_IRQHandler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000916:	4802      	ldr	r0, [pc, #8]	; (8000920 <TIM6_DAC_IRQHandler+0x14>)
 8000918:	f002 fca4 	bl	8003264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000493c 	.word	0x2000493c

08000924 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000936:	f000 fb6d 	bl	8001014 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000946:	e003      	b.n	8000950 <LoopCopyDataInit>

08000948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800094a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800094c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800094e:	3104      	adds	r1, #4

08000950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000958:	d3f6      	bcc.n	8000948 <CopyDataInit>
  ldr  r2, =_sbss
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800095c:	e002      	b.n	8000964 <LoopFillZerobss>

0800095e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800095e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000960:	f842 3b04 	str.w	r3, [r2], #4

08000964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000968:	d3f9      	bcc.n	800095e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800096a:	f7ff fcb9 	bl	80002e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096e:	f005 fbbf 	bl	80060f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000972:	f7ff fdff 	bl	8000574 <main>
  bx  lr    
 8000976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000978:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800097c:	080061d8 	.word	0x080061d8
  ldr  r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000984:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000988:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800098c:	200049cc 	.word	0x200049cc

08000990 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC3_IRQHandler>
	...

08000994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f90f 	bl	8000bbe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009a0:	f001 f97c 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 80009a4:	4601      	mov	r1, r0
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_Init+0x68>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	f003 030f 	and.w	r3, r3, #15
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <HAL_Init+0x6c>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	f003 031f 	and.w	r3, r3, #31
 80009b8:	fa21 f303 	lsr.w	r3, r1, r3
 80009bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_Init+0x68>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 030f 	and.w	r3, r3, #15
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_Init+0x6c>)
 80009c8:	5cd3      	ldrb	r3, [r2, r3]
 80009ca:	f003 031f 	and.w	r3, r3, #31
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	fa22 f303 	lsr.w	r3, r2, r3
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <HAL_Init+0x70>)
 80009d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <HAL_Init+0x74>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff1e 	bl	8000820 <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e002      	b.n	80009f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009ee:	f7ff fee9 	bl	80007c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	58024400 	.word	0x58024400
 8000a00:	0800619c 	.word	0x0800619c
 8000a04:	20000004 	.word	0x20000004
 8000a08:	20000000 	.word	0x20000000

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2000000c 	.word	0x2000000c
 8000a30:	20004988 	.word	0x20004988

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20004988 	.word	0x20004988

08000a4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <HAL_GetREVID+0x14>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	0c1b      	lsrs	r3, r3, #16
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	5c001000 	.word	0x5c001000

08000a64 <__NVIC_SetPriorityGrouping>:
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a92:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	60d3      	str	r3, [r2, #12]
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00
 8000aa8:	05fa0000 	.word	0x05fa0000

08000aac <__NVIC_GetPriorityGrouping>:
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4907      	ldr	r1, [pc, #28]	; (8000b00 <__NVIC_EnableIRQ+0x38>)
 8000ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <__NVIC_SetPriority>:
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db0a      	blt.n	8000b2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	490c      	ldr	r1, [pc, #48]	; (8000b50 <__NVIC_SetPriority+0x4c>)
 8000b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b22:	0112      	lsls	r2, r2, #4
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	440b      	add	r3, r1
 8000b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b2c:	e00a      	b.n	8000b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	b2da      	uxtb	r2, r3
 8000b32:	4908      	ldr	r1, [pc, #32]	; (8000b54 <__NVIC_SetPriority+0x50>)
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	f003 030f 	and.w	r3, r3, #15
 8000b3a:	3b04      	subs	r3, #4
 8000b3c:	0112      	lsls	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	440b      	add	r3, r1
 8000b42:	761a      	strb	r2, [r3, #24]
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <NVIC_EncodePriority>:
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f1c3 0307 	rsb	r3, r3, #7
 8000b72:	2b04      	cmp	r3, #4
 8000b74:	bf28      	it	cs
 8000b76:	2304      	movcs	r3, #4
 8000b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	2b06      	cmp	r3, #6
 8000b80:	d902      	bls.n	8000b88 <NVIC_EncodePriority+0x30>
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3b03      	subs	r3, #3
 8000b86:	e000      	b.n	8000b8a <NVIC_EncodePriority+0x32>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43da      	mvns	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8000baa:	43d9      	mvns	r1, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	4313      	orrs	r3, r2
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3724      	adds	r7, #36	; 0x24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ff4c 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be2:	f7ff ff63 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000be6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	6978      	ldr	r0, [r7, #20]
 8000bee:	f7ff ffb3 	bl	8000b58 <NVIC_EncodePriority>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff82 	bl	8000b04 <__NVIC_SetPriority>
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff56 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c32:	4b89      	ldr	r3, [pc, #548]	; (8000e58 <HAL_GPIO_Init+0x234>)
 8000c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c36:	e194      	b.n	8000f62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8186 	beq.w	8000f5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d00b      	beq.n	8000c70 <HAL_GPIO_Init+0x4c>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c64:	2b11      	cmp	r3, #17
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b12      	cmp	r3, #18
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	2203      	movs	r2, #3
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0xee>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d123      	bne.n	8000d5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	220f      	movs	r2, #15
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691a      	ldr	r2, [r3, #16]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	08da      	lsrs	r2, r3, #3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3208      	adds	r2, #8
 8000d54:	69b9      	ldr	r1, [r7, #24]
 8000d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	2203      	movs	r2, #3
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 0203 	and.w	r2, r3, #3
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80e0 	beq.w	8000f5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <HAL_GPIO_Init+0x238>)
 8000dae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dba:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <HAL_GPIO_Init+0x23c>)
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	220f      	movs	r2, #15
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a20      	ldr	r2, [pc, #128]	; (8000e64 <HAL_GPIO_Init+0x240>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d052      	beq.n	8000e8c <HAL_GPIO_Init+0x268>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a1f      	ldr	r2, [pc, #124]	; (8000e68 <HAL_GPIO_Init+0x244>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d031      	beq.n	8000e52 <HAL_GPIO_Init+0x22e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <HAL_GPIO_Init+0x248>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x22a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <HAL_GPIO_Init+0x24c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x226>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_GPIO_Init+0x250>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x222>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1b      	ldr	r2, [pc, #108]	; (8000e78 <HAL_GPIO_Init+0x254>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <HAL_GPIO_Init+0x258>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x21a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_GPIO_Init+0x25c>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x216>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_GPIO_Init+0x260>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x212>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_GPIO_Init+0x264>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20e>
 8000e2e:	2309      	movs	r3, #9
 8000e30:	e02d      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e32:	230a      	movs	r3, #10
 8000e34:	e02b      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e36:	2308      	movs	r3, #8
 8000e38:	e029      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	e027      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e3e:	2306      	movs	r3, #6
 8000e40:	e025      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e42:	2305      	movs	r3, #5
 8000e44:	e023      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e46:	2304      	movs	r3, #4
 8000e48:	e021      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e01f      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e4e:	2302      	movs	r3, #2
 8000e50:	e01d      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e52:	2301      	movs	r3, #1
 8000e54:	e01b      	b.n	8000e8e <HAL_GPIO_Init+0x26a>
 8000e56:	bf00      	nop
 8000e58:	58000080 	.word	0x58000080
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	58000400 	.word	0x58000400
 8000e64:	58020000 	.word	0x58020000
 8000e68:	58020400 	.word	0x58020400
 8000e6c:	58020800 	.word	0x58020800
 8000e70:	58020c00 	.word	0x58020c00
 8000e74:	58021000 	.word	0x58021000
 8000e78:	58021400 	.word	0x58021400
 8000e7c:	58021800 	.word	0x58021800
 8000e80:	58021c00 	.word	0x58021c00
 8000e84:	58022000 	.word	0x58022000
 8000e88:	58022400 	.word	0x58022400
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	f002 0203 	and.w	r2, r2, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	4093      	lsls	r3, r2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e9e:	4938      	ldr	r1, [pc, #224]	; (8000f80 <HAL_GPIO_Init+0x35c>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d003      	beq.n	8000ed0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa22 f303 	lsr.w	r3, r2, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f47f ae63 	bne.w	8000c38 <HAL_GPIO_Init+0x14>
  }
}
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	58000400 	.word	0x58000400

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_HSEM_FastTake+0x2c>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3320      	adds	r3, #32
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_HSEM_FastTake+0x30>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e000      	b.n	8000fd6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	58026400 	.word	0x58026400
 8000fe8:	80000300 	.word	0x80000300

08000fec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000ff6:	4906      	ldr	r1, [pc, #24]	; (8001010 <HAL_HSEM_Release+0x24>)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	58026400 	.word	0x58026400

08001014 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_HSEM_IRQHandler+0x30>)
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_HSEM_IRQHandler+0x30>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	43db      	mvns	r3, r3
 8001028:	4906      	ldr	r1, [pc, #24]	; (8001044 <HAL_HSEM_IRQHandler+0x30>)
 800102a:	4013      	ands	r3, r2
 800102c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <HAL_HSEM_IRQHandler+0x30>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 f807 	bl	8001048 <HAL_HSEM_FreeCallback>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	58026500 	.word	0x58026500

08001048 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <HAL_PWREx_ConfigSupply+0xb0>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f003 0307 	and.w	r3, r3, #7
 800106c:	2b06      	cmp	r3, #6
 800106e:	d00a      	beq.n	8001086 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <HAL_PWREx_ConfigSupply+0xb0>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d001      	beq.n	8001082 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e040      	b.n	8001104 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e03e      	b.n	8001104 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <HAL_PWREx_ConfigSupply+0xb0>)
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800108e:	491f      	ldr	r1, [pc, #124]	; (800110c <HAL_PWREx_ConfigSupply+0xb0>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4313      	orrs	r3, r2
 8001094:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001096:	f7ff fccd 	bl	8000a34 <HAL_GetTick>
 800109a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800109c:	e009      	b.n	80010b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800109e:	f7ff fcc9 	bl	8000a34 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ac:	d901      	bls.n	80010b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e028      	b.n	8001104 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_PWREx_ConfigSupply+0xb0>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010be:	d1ee      	bne.n	800109e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b1e      	cmp	r3, #30
 80010c4:	d008      	beq.n	80010d8 <HAL_PWREx_ConfigSupply+0x7c>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b2e      	cmp	r3, #46	; 0x2e
 80010ca:	d005      	beq.n	80010d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b1d      	cmp	r3, #29
 80010d0:	d002      	beq.n	80010d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b2d      	cmp	r3, #45	; 0x2d
 80010d6:	d114      	bne.n	8001102 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010d8:	f7ff fcac 	bl	8000a34 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010de:	e009      	b.n	80010f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010e0:	f7ff fca8 	bl	8000a34 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010ee:	d901      	bls.n	80010f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e007      	b.n	8001104 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_PWREx_ConfigSupply+0xb0>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d1ee      	bne.n	80010e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58024800 	.word	0x58024800

08001110 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e3ff      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8087 	beq.w	800123e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001130:	4b99      	ldr	r3, [pc, #612]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800113a:	4b97      	ldr	r3, [pc, #604]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	2b10      	cmp	r3, #16
 8001144:	d007      	beq.n	8001156 <HAL_RCC_OscConfig+0x46>
 8001146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001148:	2b18      	cmp	r3, #24
 800114a:	d110      	bne.n	800116e <HAL_RCC_OscConfig+0x5e>
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d10b      	bne.n	800116e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001156:	4b90      	ldr	r3, [pc, #576]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d06c      	beq.n	800123c <HAL_RCC_OscConfig+0x12c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d168      	bne.n	800123c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e3d9      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x76>
 8001178:	4b87      	ldr	r3, [pc, #540]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a86      	ldr	r2, [pc, #536]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800117e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	e02e      	b.n	80011e4 <HAL_RCC_OscConfig+0xd4>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x98>
 800118e:	4b82      	ldr	r3, [pc, #520]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a81      	ldr	r2, [pc, #516]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b7f      	ldr	r3, [pc, #508]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7e      	ldr	r2, [pc, #504]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e01d      	b.n	80011e4 <HAL_RCC_OscConfig+0xd4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0xbc>
 80011b2:	4b79      	ldr	r3, [pc, #484]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a78      	ldr	r2, [pc, #480]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b76      	ldr	r3, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a75      	ldr	r2, [pc, #468]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0xd4>
 80011cc:	4b72      	ldr	r3, [pc, #456]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a71      	ldr	r2, [pc, #452]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b6f      	ldr	r3, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a6e      	ldr	r2, [pc, #440]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc22 	bl	8000a34 <HAL_GetTick>
 80011f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fc1e 	bl	8000a34 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e38d      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001206:	4b64      	ldr	r3, [pc, #400]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0xe4>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fc0e 	bl	8000a34 <HAL_GetTick>
 8001218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fc0a 	bl	8000a34 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e379      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800122e:	4b5a      	ldr	r3, [pc, #360]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x10c>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80ae 	beq.w	80013a8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124c:	4b52      	ldr	r3, [pc, #328]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001254:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001256:	4b50      	ldr	r3, [pc, #320]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800125a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <HAL_RCC_OscConfig+0x162>
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	2b18      	cmp	r3, #24
 8001266:	d13a      	bne.n	80012de <HAL_RCC_OscConfig+0x1ce>
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d135      	bne.n	80012de <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001272:	4b49      	ldr	r3, [pc, #292]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <HAL_RCC_OscConfig+0x17a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e34b      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128a:	f7ff fbdf 	bl	8000a4c <HAL_GetREVID>
 800128e:	4602      	mov	r2, r0
 8001290:	f241 0303 	movw	r3, #4099	; 0x1003
 8001294:	429a      	cmp	r2, r3
 8001296:	d817      	bhi.n	80012c8 <HAL_RCC_OscConfig+0x1b8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	2b40      	cmp	r3, #64	; 0x40
 800129e:	d108      	bne.n	80012b2 <HAL_RCC_OscConfig+0x1a2>
 80012a0:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012a8:	4a3b      	ldr	r2, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ae:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b0:	e07a      	b.n	80013a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b2:	4b39      	ldr	r3, [pc, #228]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	031b      	lsls	r3, r3, #12
 80012c0:	4935      	ldr	r1, [pc, #212]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c6:	e06f      	b.n	80013a8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c8:	4b33      	ldr	r3, [pc, #204]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	061b      	lsls	r3, r3, #24
 80012d6:	4930      	ldr	r1, [pc, #192]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012dc:	e064      	b.n	80013a8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d045      	beq.n	8001372 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012e6:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 0219 	bic.w	r2, r3, #25
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	4929      	ldr	r1, [pc, #164]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb9c 	bl	8000a34 <HAL_GetTick>
 80012fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001300:	f7ff fb98 	bl	8000a34 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e307      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131e:	f7ff fb95 	bl	8000a4c <HAL_GetREVID>
 8001322:	4602      	mov	r2, r0
 8001324:	f241 0303 	movw	r3, #4099	; 0x1003
 8001328:	429a      	cmp	r2, r3
 800132a:	d817      	bhi.n	800135c <HAL_RCC_OscConfig+0x24c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	2b40      	cmp	r3, #64	; 0x40
 8001332:	d108      	bne.n	8001346 <HAL_RCC_OscConfig+0x236>
 8001334:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800133e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001342:	6053      	str	r3, [r2, #4]
 8001344:	e030      	b.n	80013a8 <HAL_RCC_OscConfig+0x298>
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	031b      	lsls	r3, r3, #12
 8001354:	4910      	ldr	r1, [pc, #64]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
 800135a:	e025      	b.n	80013a8 <HAL_RCC_OscConfig+0x298>
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	490b      	ldr	r1, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e01a      	b.n	80013a8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_RCC_OscConfig+0x288>)
 8001378:	f023 0301 	bic.w	r3, r3, #1
 800137c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137e:	f7ff fb59 	bl	8000a34 <HAL_GetTick>
 8001382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001384:	e00a      	b.n	800139c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001386:	f7ff fb55 	bl	8000a34 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d903      	bls.n	800139c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e2c4      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
 8001398:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800139c:	4ba4      	ldr	r3, [pc, #656]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ee      	bne.n	8001386 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80a9 	beq.w	8001508 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013b6:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013c0:	4b9b      	ldr	r3, [pc, #620]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d007      	beq.n	80013dc <HAL_RCC_OscConfig+0x2cc>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b18      	cmp	r3, #24
 80013d0:	d13a      	bne.n	8001448 <HAL_RCC_OscConfig+0x338>
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d135      	bne.n	8001448 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013dc:	4b94      	ldr	r3, [pc, #592]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_OscConfig+0x2e4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b80      	cmp	r3, #128	; 0x80
 80013ee:	d001      	beq.n	80013f4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e296      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013f4:	f7ff fb2a 	bl	8000a4c <HAL_GetREVID>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80013fe:	429a      	cmp	r2, r3
 8001400:	d817      	bhi.n	8001432 <HAL_RCC_OscConfig+0x322>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	2b20      	cmp	r3, #32
 8001408:	d108      	bne.n	800141c <HAL_RCC_OscConfig+0x30c>
 800140a:	4b89      	ldr	r3, [pc, #548]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001412:	4a87      	ldr	r2, [pc, #540]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001414:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001418:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800141a:	e075      	b.n	8001508 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800141c:	4b84      	ldr	r3, [pc, #528]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	069b      	lsls	r3, r3, #26
 800142a:	4981      	ldr	r1, [pc, #516]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001430:	e06a      	b.n	8001508 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001432:	4b7f      	ldr	r3, [pc, #508]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	061b      	lsls	r3, r3, #24
 8001440:	497b      	ldr	r1, [pc, #492]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001446:	e05f      	b.n	8001508 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d042      	beq.n	80014d6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001450:	4b77      	ldr	r3, [pc, #476]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a76      	ldr	r2, [pc, #472]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff faea 	bl	8000a34 <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001464:	f7ff fae6 	bl	8000a34 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e255      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001476:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001482:	f7ff fae3 	bl	8000a4c <HAL_GetREVID>
 8001486:	4602      	mov	r2, r0
 8001488:	f241 0303 	movw	r3, #4099	; 0x1003
 800148c:	429a      	cmp	r2, r3
 800148e:	d817      	bhi.n	80014c0 <HAL_RCC_OscConfig+0x3b0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	2b20      	cmp	r3, #32
 8001496:	d108      	bne.n	80014aa <HAL_RCC_OscConfig+0x39a>
 8001498:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80014a0:	4a63      	ldr	r2, [pc, #396]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80014a6:	6053      	str	r3, [r2, #4]
 80014a8:	e02e      	b.n	8001508 <HAL_RCC_OscConfig+0x3f8>
 80014aa:	4b61      	ldr	r3, [pc, #388]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a1b      	ldr	r3, [r3, #32]
 80014b6:	069b      	lsls	r3, r3, #26
 80014b8:	495d      	ldr	r1, [pc, #372]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	e023      	b.n	8001508 <HAL_RCC_OscConfig+0x3f8>
 80014c0:	4b5b      	ldr	r3, [pc, #364]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	061b      	lsls	r3, r3, #24
 80014ce:	4958      	ldr	r1, [pc, #352]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
 80014d4:	e018      	b.n	8001508 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014d6:	4b56      	ldr	r3, [pc, #344]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a55      	ldr	r2, [pc, #340]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e2:	f7ff faa7 	bl	8000a34 <HAL_GetTick>
 80014e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014ea:	f7ff faa3 	bl	8000a34 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e212      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014fc:	4b4c      	ldr	r3, [pc, #304]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f0      	bne.n	80014ea <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b00      	cmp	r3, #0
 8001512:	d036      	beq.n	8001582 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d019      	beq.n	8001550 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001528:	f7ff fa84 	bl	8000a34 <HAL_GetTick>
 800152c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fa80 	bl	8000a34 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1ef      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x420>
 800154e:	e018      	b.n	8001582 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001550:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001554:	4a36      	ldr	r2, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155c:	f7ff fa6a 	bl	8000a34 <HAL_GetTick>
 8001560:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001564:	f7ff fa66 	bl	8000a34 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e1d5      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	2b00      	cmp	r3, #0
 800158c:	d036      	beq.n	80015fc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d019      	beq.n	80015ca <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 800159c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa47 	bl	8000a34 <HAL_GetTick>
 80015a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015aa:	f7ff fa43 	bl	8000a34 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1b2      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x49a>
 80015c8:	e018      	b.n	80015fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a18      	ldr	r2, [pc, #96]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80015d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015d4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fa2d 	bl	8000a34 <HAL_GetTick>
 80015da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80015de:	f7ff fa29 	bl	8000a34 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e198      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_RCC_OscConfig+0x520>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8085 	beq.w	8001714 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_RCC_OscConfig+0x524>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_RCC_OscConfig+0x524>)
 8001610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001616:	f7ff fa0d 	bl	8000a34 <HAL_GetTick>
 800161a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800161c:	e00c      	b.n	8001638 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800161e:	f7ff fa09 	bl	8000a34 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b64      	cmp	r3, #100	; 0x64
 800162a:	d905      	bls.n	8001638 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e178      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
 8001630:	58024400 	.word	0x58024400
 8001634:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001638:	4b96      	ldr	r3, [pc, #600]	; (8001894 <HAL_RCC_OscConfig+0x784>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ec      	beq.n	800161e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d106      	bne.n	800165a <HAL_RCC_OscConfig+0x54a>
 800164c:	4b92      	ldr	r3, [pc, #584]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	4a91      	ldr	r2, [pc, #580]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	; 0x70
 8001658:	e02d      	b.n	80016b6 <HAL_RCC_OscConfig+0x5a6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x56c>
 8001662:	4b8d      	ldr	r3, [pc, #564]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001666:	4a8c      	ldr	r2, [pc, #560]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6713      	str	r3, [r2, #112]	; 0x70
 800166e:	4b8a      	ldr	r3, [pc, #552]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a89      	ldr	r2, [pc, #548]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	e01c      	b.n	80016b6 <HAL_RCC_OscConfig+0x5a6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b05      	cmp	r3, #5
 8001682:	d10c      	bne.n	800169e <HAL_RCC_OscConfig+0x58e>
 8001684:	4b84      	ldr	r3, [pc, #528]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a83      	ldr	r2, [pc, #524]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	4b81      	ldr	r3, [pc, #516]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001694:	4a80      	ldr	r2, [pc, #512]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	; 0x70
 800169c:	e00b      	b.n	80016b6 <HAL_RCC_OscConfig+0x5a6>
 800169e:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a7d      	ldr	r2, [pc, #500]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
 80016aa:	4b7b      	ldr	r3, [pc, #492]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a7a      	ldr	r2, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80016b0:	f023 0304 	bic.w	r3, r3, #4
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d015      	beq.n	80016ea <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff f9b9 	bl	8000a34 <HAL_GetTick>
 80016c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff f9b5 	bl	8000a34 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e122      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016dc:	4b6e      	ldr	r3, [pc, #440]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0ee      	beq.n	80016c6 <HAL_RCC_OscConfig+0x5b6>
 80016e8:	e014      	b.n	8001714 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ea:	f7ff f9a3 	bl	8000a34 <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7ff f99f 	bl	8000a34 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e10c      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001708:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1ee      	bne.n	80016f2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8101 	beq.w	8001920 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800171e:	4b5e      	ldr	r3, [pc, #376]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001726:	2b18      	cmp	r3, #24
 8001728:	f000 80bc 	beq.w	80018a4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	2b02      	cmp	r3, #2
 8001732:	f040 8095 	bne.w	8001860 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b58      	ldr	r3, [pc, #352]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a57      	ldr	r2, [pc, #348]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800173c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7ff f977 	bl	8000a34 <HAL_GetTick>
 8001746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7ff f973 	bl	8000a34 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0e2      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800175c:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800176a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_OscConfig+0x78c>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	430a      	orrs	r2, r1
 800177c:	4946      	ldr	r1, [pc, #280]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800177e:	4313      	orrs	r3, r2
 8001780:	628b      	str	r3, [r1, #40]	; 0x28
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	3b01      	subs	r3, #1
 8001788:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001790:	3b01      	subs	r3, #1
 8001792:	025b      	lsls	r3, r3, #9
 8001794:	b29b      	uxth	r3, r3
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	3b01      	subs	r3, #1
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017aa:	3b01      	subs	r3, #1
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017b2:	4939      	ldr	r1, [pc, #228]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80017b8:	4b37      	ldr	r3, [pc, #220]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	4a36      	ldr	r2, [pc, #216]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017be:	f023 0301 	bic.w	r3, r3, #1
 80017c2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017c4:	4b34      	ldr	r3, [pc, #208]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_RCC_OscConfig+0x790>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017d0:	00d2      	lsls	r2, r2, #3
 80017d2:	4931      	ldr	r1, [pc, #196]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	f023 020c 	bic.w	r2, r3, #12
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	492c      	ldr	r1, [pc, #176]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017ea:	4b2b      	ldr	r3, [pc, #172]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	f023 0202 	bic.w	r2, r3, #2
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4928      	ldr	r1, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017fc:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	4a25      	ldr	r2, [pc, #148]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001806:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001808:	4b23      	ldr	r3, [pc, #140]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800180e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	4a1f      	ldr	r2, [pc, #124]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800181a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	4a1c      	ldr	r2, [pc, #112]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f8fc 	bl	8000a34 <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f8f8 	bl	8000a34 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e067      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x730>
 800185e:	e05f      	b.n	8001920 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0c      	ldr	r2, [pc, #48]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800186a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff f8e2 	bl	8000a34 <HAL_GetTick>
 8001870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f8de 	bl	8000a34 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04d      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <HAL_RCC_OscConfig+0x788>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x764>
 8001892:	e045      	b.n	8001920 <HAL_RCC_OscConfig+0x810>
 8001894:	58024800 	.word	0x58024800
 8001898:	58024400 	.word	0x58024400
 800189c:	fffffc0c 	.word	0xfffffc0c
 80018a0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80018a4:	4b21      	ldr	r3, [pc, #132]	; (800192c <HAL_RCC_OscConfig+0x81c>)
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_OscConfig+0x81c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d031      	beq.n	800191c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f003 0203 	and.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d12a      	bne.n	800191c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d122      	bne.n	800191c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d11a      	bne.n	800191c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	0a5b      	lsrs	r3, r3, #9
 80018ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d111      	bne.n	800191c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	0c1b      	lsrs	r3, r3, #16
 80018fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001904:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d108      	bne.n	800191c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	0e1b      	lsrs	r3, r3, #24
 800190e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001916:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3730      	adds	r7, #48	; 0x30
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	58024400 	.word	0x58024400

08001930 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e19c      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b8a      	ldr	r3, [pc, #552]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 030f 	and.w	r3, r3, #15
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d910      	bls.n	8001974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b87      	ldr	r3, [pc, #540]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 020f 	bic.w	r2, r3, #15
 800195a:	4985      	ldr	r1, [pc, #532]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b83      	ldr	r3, [pc, #524]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e184      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d010      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	4b7b      	ldr	r3, [pc, #492]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800198c:	429a      	cmp	r2, r3
 800198e:	d908      	bls.n	80019a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001990:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	4975      	ldr	r1, [pc, #468]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d010      	beq.n	80019d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695a      	ldr	r2, [r3, #20]
 80019b2:	4b70      	ldr	r3, [pc, #448]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d908      	bls.n	80019d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019be:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	496a      	ldr	r1, [pc, #424]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d010      	beq.n	80019fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	4b64      	ldr	r3, [pc, #400]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d908      	bls.n	80019fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019ec:	4b61      	ldr	r3, [pc, #388]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	495e      	ldr	r1, [pc, #376]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d010      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d908      	bls.n	8001a2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a1a:	4b56      	ldr	r3, [pc, #344]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4953      	ldr	r1, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d908      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f023 020f 	bic.w	r2, r3, #15
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4947      	ldr	r1, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d055      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a66:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4940      	ldr	r1, [pc, #256]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d107      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d121      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0f6      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a98:	4b36      	ldr	r3, [pc, #216]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d115      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e0ea      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ab0:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0de      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac0:	4b2c      	ldr	r3, [pc, #176]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0d6      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	f023 0207 	bic.w	r2, r3, #7
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4925      	ldr	r1, [pc, #148]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7fe ffa7 	bl	8000a34 <HAL_GetTick>
 8001ae6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aea:	f7fe ffa3 	bl	8000a34 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0be      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d1eb      	bne.n	8001aea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68da      	ldr	r2, [r3, #12]
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d208      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d214      	bcs.n	8001b78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 020f 	bic.w	r2, r3, #15
 8001b56:	4906      	ldr	r1, [pc, #24]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_RCC_ClockConfig+0x240>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d005      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e086      	b.n	8001c7e <HAL_RCC_ClockConfig+0x34e>
 8001b70:	52002000 	.word	0x52002000
 8001b74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d010      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691a      	ldr	r2, [r3, #16]
 8001b88:	4b3f      	ldr	r3, [pc, #252]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d208      	bcs.n	8001ba6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b94:	4b3c      	ldr	r3, [pc, #240]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	4939      	ldr	r1, [pc, #228]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695a      	ldr	r2, [r3, #20]
 8001bb6:	4b34      	ldr	r3, [pc, #208]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d208      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	492e      	ldr	r1, [pc, #184]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d208      	bcs.n	8001c02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4922      	ldr	r1, [pc, #136]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d208      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4917      	ldr	r1, [pc, #92]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c30:	f000 f834 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c34:	4601      	mov	r1, r0
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	0a1b      	lsrs	r3, r3, #8
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <HAL_RCC_ClockConfig+0x35c>)
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	fa21 f303 	lsr.w	r3, r1, r3
 8001c4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_RCC_ClockConfig+0x358>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_RCC_ClockConfig+0x35c>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x360>)
 8001c66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x364>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x368>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fdd4 	bl	8000820 <HAL_InitTick>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	58024400 	.word	0x58024400
 8001c8c:	0800619c 	.word	0x0800619c
 8001c90:	20000004 	.word	0x20000004
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000008 	.word	0x20000008

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ca2:	4baf      	ldr	r3, [pc, #700]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001caa:	2b18      	cmp	r3, #24
 8001cac:	f200 814e 	bhi.w	8001f4c <HAL_RCC_GetSysClockFreq+0x2b0>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001d1d 	.word	0x08001d1d
 8001cbc:	08001f4d 	.word	0x08001f4d
 8001cc0:	08001f4d 	.word	0x08001f4d
 8001cc4:	08001f4d 	.word	0x08001f4d
 8001cc8:	08001f4d 	.word	0x08001f4d
 8001ccc:	08001f4d 	.word	0x08001f4d
 8001cd0:	08001f4d 	.word	0x08001f4d
 8001cd4:	08001f4d 	.word	0x08001f4d
 8001cd8:	08001d43 	.word	0x08001d43
 8001cdc:	08001f4d 	.word	0x08001f4d
 8001ce0:	08001f4d 	.word	0x08001f4d
 8001ce4:	08001f4d 	.word	0x08001f4d
 8001ce8:	08001f4d 	.word	0x08001f4d
 8001cec:	08001f4d 	.word	0x08001f4d
 8001cf0:	08001f4d 	.word	0x08001f4d
 8001cf4:	08001f4d 	.word	0x08001f4d
 8001cf8:	08001d49 	.word	0x08001d49
 8001cfc:	08001f4d 	.word	0x08001f4d
 8001d00:	08001f4d 	.word	0x08001f4d
 8001d04:	08001f4d 	.word	0x08001f4d
 8001d08:	08001f4d 	.word	0x08001f4d
 8001d0c:	08001f4d 	.word	0x08001f4d
 8001d10:	08001f4d 	.word	0x08001f4d
 8001d14:	08001f4d 	.word	0x08001f4d
 8001d18:	08001d4f 	.word	0x08001d4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d1c:	4b90      	ldr	r3, [pc, #576]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d009      	beq.n	8001d3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d28:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	4a8c      	ldr	r2, [pc, #560]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001d3a:	e10a      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d3c:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001d3e:	61bb      	str	r3, [r7, #24]
    break;
 8001d40:	e107      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d42:	4b89      	ldr	r3, [pc, #548]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001d44:	61bb      	str	r3, [r7, #24]
    break;
 8001d46:	e104      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001d48:	4b88      	ldr	r3, [pc, #544]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001d4a:	61bb      	str	r3, [r7, #24]
    break;
 8001d4c:	e101      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d4e:	4b84      	ldr	r3, [pc, #528]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001d64:	4b7e      	ldr	r3, [pc, #504]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	ee07 3a90 	vmov	s15, r3
 8001d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80da 	beq.w	8001f46 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d05a      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x1b2>
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d302      	bcc.n	8001da2 <HAL_RCC_GetSysClockFreq+0x106>
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d078      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x1f6>
 8001da0:	e099      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001da2:	4b6f      	ldr	r3, [pc, #444]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d02d      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001dae:	4b6c      	ldr	r3, [pc, #432]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	08db      	lsrs	r3, r3, #3
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	4a6a      	ldr	r2, [pc, #424]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dd8:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001de0:	ee07 3a90 	vmov	s15, r3
 8001de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001de8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dec:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e08:	e087      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e14:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001f74 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001e18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e30:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e4c:	e065      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e58:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001f78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e70:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e74:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001e90:	e043      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	ee07 3a90 	vmov	s15, r3
 8001e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e9c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001f7c <HAL_RCC_GetSysClockFreq+0x2e0>
 8001ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eb8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ed4:	e021      	b.n	8001f1a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	ee07 3a90 	vmov	s15, r3
 8001edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001f78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001efc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001f70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f18:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	0a5b      	lsrs	r3, r3, #9
 8001f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f24:	3301      	adds	r3, #1
 8001f26:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f32:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3e:	ee17 3a90 	vmov	r3, s15
 8001f42:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001f44:	e005      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
    break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001f4e:	61bb      	str	r3, [r7, #24]
    break;
 8001f50:	bf00      	nop
  }

  return sysclockfreq;
 8001f52:	69bb      	ldr	r3, [r7, #24]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58024400 	.word	0x58024400
 8001f64:	03d09000 	.word	0x03d09000
 8001f68:	003d0900 	.word	0x003d0900
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	46000000 	.word	0x46000000
 8001f74:	4c742400 	.word	0x4c742400
 8001f78:	4a742400 	.word	0x4a742400
 8001f7c:	4af42400 	.word	0x4af42400

08001f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001f86:	f7ff fe89 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	4a0f      	ldr	r2, [pc, #60]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	f003 031f 	and.w	r3, r3, #31
 8001f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8001fa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8001fbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fbe:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	0800619c 	.word	0x0800619c
 8001fd8:	20000004 	.word	0x20000004
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001fe4:	f7ff ffcc 	bl	8001f80 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4601      	mov	r1, r0
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff6:	5cd3      	ldrb	r3, [r2, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	58024400 	.word	0x58024400
 8002008:	0800619c 	.word	0x0800619c

0800200c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	223f      	movs	r2, #63	; 0x3f
 800201a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_RCC_GetClockConfig+0x7c>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f003 0207 	and.w	r2, r3, #7
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_RCC_GetClockConfig+0x7c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_RCC_GetClockConfig+0x7c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 020f 	and.w	r2, r3, #15
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_RCC_GetClockConfig+0x7c>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800204c:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <HAL_RCC_GetClockConfig+0x7c>)
 800204e:	69db      	ldr	r3, [r3, #28]
 8002050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_GetClockConfig+0x7c>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <HAL_RCC_GetClockConfig+0x7c>)
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCC_GetClockConfig+0x80>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	601a      	str	r2, [r3, #0]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	58024400 	.word	0x58024400
 800208c:	52002000 	.word	0x52002000

08002090 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800209c:	2300      	movs	r3, #0
 800209e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d03d      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020b4:	d013      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80020b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020ba:	d802      	bhi.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d007      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80020c0:	e01f      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80020c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020c6:	d013      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80020c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020cc:	d01c      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80020ce:	e018      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020d0:	4baf      	ldr	r3, [pc, #700]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	4aae      	ldr	r2, [pc, #696]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020dc:	e015      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2102      	movs	r1, #2
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 fec1 	bl	8002e6c <RCCEx_PLL2_Config>
 80020ea:	4603      	mov	r3, r0
 80020ec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80020ee:	e00c      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3324      	adds	r3, #36	; 0x24
 80020f4:	2102      	movs	r1, #2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 ff6a 	bl	8002fd0 <RCCEx_PLL3_Config>
 80020fc:	4603      	mov	r3, r0
 80020fe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002100:	e003      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
      break;
 8002106:	e000      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002110:	4b9f      	ldr	r3, [pc, #636]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800211c:	499c      	ldr	r1, [pc, #624]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800211e:	4313      	orrs	r3, r2
 8002120:	650b      	str	r3, [r1, #80]	; 0x50
 8002122:	e001      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d03d      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002138:	2b04      	cmp	r3, #4
 800213a:	d826      	bhi.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800213c:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	08002159 	.word	0x08002159
 8002148:	08002167 	.word	0x08002167
 800214c:	08002179 	.word	0x08002179
 8002150:	08002191 	.word	0x08002191
 8002154:	08002191 	.word	0x08002191
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002158:	4b8d      	ldr	r3, [pc, #564]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	4a8c      	ldr	r2, [pc, #560]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800215e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002164:	e015      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3304      	adds	r3, #4
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fe7d 	bl	8002e6c <RCCEx_PLL2_Config>
 8002172:	4603      	mov	r3, r0
 8002174:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002176:	e00c      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3324      	adds	r3, #36	; 0x24
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f000 ff26 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002188:	e003      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	75fb      	strb	r3, [r7, #23]
      break;
 800218e:	e000      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002190:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002192:	7dfb      	ldrb	r3, [r7, #23]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002198:	4b7d      	ldr	r3, [pc, #500]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800219a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219c:	f023 0207 	bic.w	r2, r3, #7
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	497a      	ldr	r1, [pc, #488]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	650b      	str	r3, [r1, #80]	; 0x50
 80021aa:	e001      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03e      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	2b80      	cmp	r3, #128	; 0x80
 80021c2:	d01c      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d804      	bhi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d00d      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80021d0:	e01e      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80021d2:	2bc0      	cmp	r3, #192	; 0xc0
 80021d4:	d01f      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80021d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021da:	d01e      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80021dc:	e018      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021de:	4b6c      	ldr	r3, [pc, #432]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	4a6b      	ldr	r2, [pc, #428]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021ea:	e017      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fe3a 	bl	8002e6c <RCCEx_PLL2_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80021fc:	e00e      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3324      	adds	r3, #36	; 0x24
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fee3 	bl	8002fd0 <RCCEx_PLL3_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800220e:	e005      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
      break;
 8002214:	e002      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002216:	bf00      	nop
 8002218:	e000      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800221a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002222:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002226:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4958      	ldr	r1, [pc, #352]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002230:	4313      	orrs	r3, r2
 8002232:	650b      	str	r3, [r1, #80]	; 0x50
 8002234:	e001      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	2b00      	cmp	r3, #0
 8002244:	d044      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800224c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002250:	d01f      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002256:	d805      	bhi.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800225c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002260:	d00e      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002262:	e01f      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002264:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002268:	d01f      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800226a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800226e:	d01e      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002270:	e018      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002272:	4b47      	ldr	r3, [pc, #284]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002276:	4a46      	ldr	r2, [pc, #280]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800227e:	e017      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fdf0 	bl	8002e6c <RCCEx_PLL2_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002290:	e00e      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3324      	adds	r3, #36	; 0x24
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fe99 	bl	8002fd0 <RCCEx_PLL3_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80022a2:	e005      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	75fb      	strb	r3, [r7, #23]
      break;
 80022a8:	e002      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80022aa:	bf00      	nop
 80022ac:	e000      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80022ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80022c4:	4932      	ldr	r1, [pc, #200]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	658b      	str	r3, [r1, #88]	; 0x58
 80022ca:	e001      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d044      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80022e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022e6:	d01f      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80022e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ec:	d805      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80022f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f6:	d00e      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80022f8:	e01f      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80022fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022fe:	d01f      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002304:	d01e      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002306:	e018      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800230e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002312:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002314:	e017      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fda5 	bl	8002e6c <RCCEx_PLL2_Config>
 8002322:	4603      	mov	r3, r0
 8002324:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002326:	e00e      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3324      	adds	r3, #36	; 0x24
 800232c:	2100      	movs	r1, #0
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fe4e 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002338:	e005      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002340:	bf00      	nop
 8002342:	e000      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800234c:	4b10      	ldr	r3, [pc, #64]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800235a:	490d      	ldr	r1, [pc, #52]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800235c:	4313      	orrs	r3, r2
 800235e:	658b      	str	r3, [r1, #88]	; 0x58
 8002360:	e001      	b.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002362:	7dfb      	ldrb	r3, [r7, #23]
 8002364:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d035      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	2b10      	cmp	r3, #16
 8002378:	d00c      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800237a:	2b10      	cmp	r3, #16
 800237c:	d802      	bhi.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01b      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002382:	e017      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d00c      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002388:	2b30      	cmp	r3, #48	; 0x30
 800238a:	d018      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800238c:	e012      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800238e:	bf00      	nop
 8002390:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002394:	4baf      	ldr	r3, [pc, #700]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	4aae      	ldr	r2, [pc, #696]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800239a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80023a0:	e00e      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	2102      	movs	r1, #2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fd5f 	bl	8002e6c <RCCEx_PLL2_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80023b2:	e005      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	75fb      	strb	r3, [r7, #23]
      break;
 80023b8:	e002      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80023ba:	bf00      	nop
 80023bc:	e000      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80023be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80023c6:	4ba3      	ldr	r3, [pc, #652]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d2:	49a0      	ldr	r1, [pc, #640]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80023d8:	e001      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d042      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f2:	d01f      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80023f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023f8:	d805      	bhi.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002402:	d00e      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002404:	e01f      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002406:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800240a:	d01f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800240c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002410:	d01e      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002412:	e018      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002414:	4b8f      	ldr	r3, [pc, #572]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	4a8e      	ldr	r2, [pc, #568]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002420:	e017      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f000 fd1f 	bl	8002e6c <RCCEx_PLL2_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002432:	e00e      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3324      	adds	r3, #36	; 0x24
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fdc8 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002444:	e005      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	75fb      	strb	r3, [r7, #23]
      break;
 800244a:	e002      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800244c:	bf00      	nop
 800244e:	e000      	b.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d109      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002458:	4b7e      	ldr	r3, [pc, #504]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002464:	497b      	ldr	r1, [pc, #492]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	650b      	str	r3, [r1, #80]	; 0x50
 800246a:	e001      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d042      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002484:	d01b      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002486:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800248a:	d805      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800248c:	2b00      	cmp	r3, #0
 800248e:	d022      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002496:	e01b      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800249c:	d01d      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800249e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a2:	d01c      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80024a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024a8:	d01b      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80024aa:	e011      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	2101      	movs	r1, #1
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fcda 	bl	8002e6c <RCCEx_PLL2_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80024bc:	e012      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3324      	adds	r3, #36	; 0x24
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fd83 	bl	8002fd0 <RCCEx_PLL3_Config>
 80024ca:	4603      	mov	r3, r0
 80024cc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80024ce:	e009      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	75fb      	strb	r3, [r7, #23]
      break;
 80024d4:	e006      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024d6:	bf00      	nop
 80024d8:	e004      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024da:	bf00      	nop
 80024dc:	e002      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024de:	bf00      	nop
 80024e0:	e000      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80024e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80024ea:	4b5a      	ldr	r3, [pc, #360]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	4957      	ldr	r1, [pc, #348]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	650b      	str	r3, [r1, #80]	; 0x50
 80024fc:	e001      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fe:	7dfb      	ldrb	r3, [r7, #23]
 8002500:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d044      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d01b      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800251a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800251e:	d805      	bhi.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002520:	2b00      	cmp	r3, #0
 8002522:	d022      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002524:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800252a:	e01b      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d01d      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002536:	d01c      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002538:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800253c:	d01b      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800253e:	e011      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f000 fc90 	bl	8002e6c <RCCEx_PLL2_Config>
 800254c:	4603      	mov	r3, r0
 800254e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002550:	e012      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3324      	adds	r3, #36	; 0x24
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fd39 	bl	8002fd0 <RCCEx_PLL3_Config>
 800255e:	4603      	mov	r3, r0
 8002560:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002562:	e009      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	75fb      	strb	r3, [r7, #23]
      break;
 8002568:	e006      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800256a:	bf00      	nop
 800256c:	e004      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800256e:	bf00      	nop
 8002570:	e002      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002572:	bf00      	nop
 8002574:	e000      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800257e:	4b35      	ldr	r3, [pc, #212]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800258c:	4931      	ldr	r1, [pc, #196]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	658b      	str	r3, [r1, #88]	; 0x58
 8002592:	e001      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02d      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ac:	d005      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80025ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b2:	d009      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80025b8:	e00f      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	4a25      	ldr	r2, [pc, #148]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80025c6:	e00c      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fc4c 	bl	8002e6c <RCCEx_PLL2_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80025d8:	e003      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	75fb      	strb	r3, [r7, #23]
      break;
 80025de:	e000      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80025e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f4:	4917      	ldr	r1, [pc, #92]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	650b      	str	r3, [r1, #80]	; 0x50
 80025fa:	e001      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d035      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	2b03      	cmp	r3, #3
 8002612:	d81b      	bhi.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002614:	a201      	add	r2, pc, #4	; (adr r2, 800261c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800261a:	bf00      	nop
 800261c:	08002659 	.word	0x08002659
 8002620:	0800262d 	.word	0x0800262d
 8002624:	0800263b 	.word	0x0800263b
 8002628:	08002659 	.word	0x08002659
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002638:	e00f      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	2102      	movs	r1, #2
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fc13 	bl	8002e6c <RCCEx_PLL2_Config>
 8002646:	4603      	mov	r3, r0
 8002648:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800264a:	e006      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	75fb      	strb	r3, [r7, #23]
      break;
 8002650:	e003      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002652:	bf00      	nop
 8002654:	58024400 	.word	0x58024400
      break;
 8002658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265a:	7dfb      	ldrb	r3, [r7, #23]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002660:	4bba      	ldr	r3, [pc, #744]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002664:	f023 0203 	bic.w	r2, r3, #3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	49b7      	ldr	r1, [pc, #732]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002672:	e001      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8086 	beq.w	8002792 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002686:	4bb2      	ldr	r3, [pc, #712]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4ab1      	ldr	r2, [pc, #708]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800268c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002692:	f7fe f9cf 	bl	8000a34 <HAL_GetTick>
 8002696:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002698:	e009      	b.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269a:	f7fe f9cb 	bl	8000a34 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b64      	cmp	r3, #100	; 0x64
 80026a6:	d902      	bls.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	75fb      	strb	r3, [r7, #23]
        break;
 80026ac:	e005      	b.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ae:	4ba8      	ldr	r3, [pc, #672]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0ef      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80026ba:	7dfb      	ldrb	r3, [r7, #23]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d166      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80026c0:	4ba2      	ldr	r3, [pc, #648]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026ca:	4053      	eors	r3, r2
 80026cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026d4:	4b9d      	ldr	r3, [pc, #628]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026dc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026de:	4b9b      	ldr	r3, [pc, #620]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e2:	4a9a      	ldr	r2, [pc, #616]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026ea:	4b98      	ldr	r3, [pc, #608]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	4a97      	ldr	r2, [pc, #604]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80026f6:	4a95      	ldr	r2, [pc, #596]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002706:	d115      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe f994 	bl	8000a34 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800270e:	e00b      	b.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002710:	f7fe f990 	bl	8000a34 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d902      	bls.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	75fb      	strb	r3, [r7, #23]
            break;
 8002726:	e005      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002728:	4b88      	ldr	r3, [pc, #544]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ed      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002734:	7dfb      	ldrb	r3, [r7, #23]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d126      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002744:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002748:	d10d      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800274a:	4b80      	ldr	r3, [pc, #512]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002758:	0919      	lsrs	r1, r3, #4
 800275a:	4b7e      	ldr	r3, [pc, #504]	; (8002954 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800275c:	400b      	ands	r3, r1
 800275e:	497b      	ldr	r1, [pc, #492]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	610b      	str	r3, [r1, #16]
 8002764:	e005      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002766:	4b79      	ldr	r3, [pc, #484]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	4a78      	ldr	r2, [pc, #480]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800276c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002770:	6113      	str	r3, [r2, #16]
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002774:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800277c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002780:	4972      	ldr	r1, [pc, #456]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	670b      	str	r3, [r1, #112]	; 0x70
 8002786:	e004      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	75bb      	strb	r3, [r7, #22]
 800278c:	e001      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278e:	7dfb      	ldrb	r3, [r7, #23]
 8002790:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d07d      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a2:	2b28      	cmp	r3, #40	; 0x28
 80027a4:	d866      	bhi.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80027a6:	a201      	add	r2, pc, #4	; (adr r2, 80027ac <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80027a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ac:	0800287b 	.word	0x0800287b
 80027b0:	08002875 	.word	0x08002875
 80027b4:	08002875 	.word	0x08002875
 80027b8:	08002875 	.word	0x08002875
 80027bc:	08002875 	.word	0x08002875
 80027c0:	08002875 	.word	0x08002875
 80027c4:	08002875 	.word	0x08002875
 80027c8:	08002875 	.word	0x08002875
 80027cc:	08002851 	.word	0x08002851
 80027d0:	08002875 	.word	0x08002875
 80027d4:	08002875 	.word	0x08002875
 80027d8:	08002875 	.word	0x08002875
 80027dc:	08002875 	.word	0x08002875
 80027e0:	08002875 	.word	0x08002875
 80027e4:	08002875 	.word	0x08002875
 80027e8:	08002875 	.word	0x08002875
 80027ec:	08002863 	.word	0x08002863
 80027f0:	08002875 	.word	0x08002875
 80027f4:	08002875 	.word	0x08002875
 80027f8:	08002875 	.word	0x08002875
 80027fc:	08002875 	.word	0x08002875
 8002800:	08002875 	.word	0x08002875
 8002804:	08002875 	.word	0x08002875
 8002808:	08002875 	.word	0x08002875
 800280c:	0800287b 	.word	0x0800287b
 8002810:	08002875 	.word	0x08002875
 8002814:	08002875 	.word	0x08002875
 8002818:	08002875 	.word	0x08002875
 800281c:	08002875 	.word	0x08002875
 8002820:	08002875 	.word	0x08002875
 8002824:	08002875 	.word	0x08002875
 8002828:	08002875 	.word	0x08002875
 800282c:	0800287b 	.word	0x0800287b
 8002830:	08002875 	.word	0x08002875
 8002834:	08002875 	.word	0x08002875
 8002838:	08002875 	.word	0x08002875
 800283c:	08002875 	.word	0x08002875
 8002840:	08002875 	.word	0x08002875
 8002844:	08002875 	.word	0x08002875
 8002848:	08002875 	.word	0x08002875
 800284c:	0800287b 	.word	0x0800287b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3304      	adds	r3, #4
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fb08 	bl	8002e6c <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002860:	e00c      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3324      	adds	r3, #36	; 0x24
 8002866:	2101      	movs	r1, #1
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fbb1 	bl	8002fd0 <RCCEx_PLL3_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002872:	e003      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	75fb      	strb	r3, [r7, #23]
      break;
 8002878:	e000      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800287a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002882:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288e:	492f      	ldr	r1, [pc, #188]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002890:	4313      	orrs	r3, r2
 8002892:	654b      	str	r3, [r1, #84]	; 0x54
 8002894:	e001      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d037      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028aa:	2b05      	cmp	r3, #5
 80028ac:	d820      	bhi.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	080028f7 	.word	0x080028f7
 80028b8:	080028cd 	.word	0x080028cd
 80028bc:	080028df 	.word	0x080028df
 80028c0:	080028f7 	.word	0x080028f7
 80028c4:	080028f7 	.word	0x080028f7
 80028c8:	080028f7 	.word	0x080028f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	2101      	movs	r1, #1
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 faca 	bl	8002e6c <RCCEx_PLL2_Config>
 80028d8:	4603      	mov	r3, r0
 80028da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80028dc:	e00c      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3324      	adds	r3, #36	; 0x24
 80028e2:	2101      	movs	r1, #1
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fb73 	bl	8002fd0 <RCCEx_PLL3_Config>
 80028ea:	4603      	mov	r3, r0
 80028ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80028ee:	e003      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	75fb      	strb	r3, [r7, #23]
      break;
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80028f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290a:	4910      	ldr	r1, [pc, #64]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	654b      	str	r3, [r1, #84]	; 0x54
 8002910:	e001      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b00      	cmp	r3, #0
 8002920:	d040      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	2b05      	cmp	r3, #5
 800292a:	d827      	bhi.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002983 	.word	0x08002983
 8002938:	08002959 	.word	0x08002959
 800293c:	0800296b 	.word	0x0800296b
 8002940:	08002983 	.word	0x08002983
 8002944:	08002983 	.word	0x08002983
 8002948:	08002983 	.word	0x08002983
 800294c:	58024400 	.word	0x58024400
 8002950:	58024800 	.word	0x58024800
 8002954:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	2101      	movs	r1, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fa84 	bl	8002e6c <RCCEx_PLL2_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002968:	e00c      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3324      	adds	r3, #36	; 0x24
 800296e:	2101      	movs	r1, #1
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fb2d 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800297a:	e003      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
      break;
 8002980:	e000      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002982:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800298a:	4bb2      	ldr	r3, [pc, #712]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	49ae      	ldr	r1, [pc, #696]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	658b      	str	r3, [r1, #88]	; 0x58
 800299e:	e001      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d044      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ba:	d01b      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80029bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c0:	d805      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d022      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80029c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80029cc:	e01b      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d2:	d01d      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80029d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029d8:	d01c      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80029da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029de:	d01b      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80029e0:	e011      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fa3f 	bl	8002e6c <RCCEx_PLL2_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80029f2:	e012      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3324      	adds	r3, #36	; 0x24
 80029f8:	2102      	movs	r1, #2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fae8 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002a00:	4603      	mov	r3, r0
 8002a02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002a04:	e009      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
      break;
 8002a0a:	e006      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002a0c:	bf00      	nop
 8002a0e:	e004      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002a10:	bf00      	nop
 8002a12:	e002      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002a14:	bf00      	nop
 8002a16:	e000      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002a18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a20:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2e:	4989      	ldr	r1, [pc, #548]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	654b      	str	r3, [r1, #84]	; 0x54
 8002a34:	e001      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d044      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a50:	d01b      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a56:	d805      	bhi.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d022      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002a62:	e01b      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a68:	d01d      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002a6a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a6e:	d01c      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002a70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a74:	d01b      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002a76:	e011      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f9f4 	bl	8002e6c <RCCEx_PLL2_Config>
 8002a84:	4603      	mov	r3, r0
 8002a86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a88:	e012      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3324      	adds	r3, #36	; 0x24
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fa9d 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002a9a:	e009      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8002aa0:	e006      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e004      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ab6:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ac4:	4963      	ldr	r1, [pc, #396]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	658b      	str	r3, [r1, #88]	; 0x58
 8002aca:	e001      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d044      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae6:	d01b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aec:	d805      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d022      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002af8:	e01b      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002afe:	d01d      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002b00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002b04:	d01c      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002b06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002b0a:	d01b      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002b0c:	e011      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f9a9 	bl	8002e6c <RCCEx_PLL2_Config>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002b1e:	e012      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3324      	adds	r3, #36	; 0x24
 8002b24:	2102      	movs	r1, #2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fa52 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002b30:	e009      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
      break;
 8002b36:	e006      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b38:	bf00      	nop
 8002b3a:	e004      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b5a:	493e      	ldr	r1, [pc, #248]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	658b      	str	r3, [r1, #88]	; 0x58
 8002b60:	e001      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01a      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d10a      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3324      	adds	r3, #36	; 0x24
 8002b82:	2102      	movs	r1, #2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 fa23 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002b94:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba2:	492c      	ldr	r1, [pc, #176]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3324      	adds	r3, #36	; 0x24
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fa02 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be4:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d032      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d00d      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8002c02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c06:	d016      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2100      	movs	r1, #0
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f92a 	bl	8002e6c <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002c1c:	e00c      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3324      	adds	r3, #36	; 0x24
 8002c22:	2102      	movs	r1, #2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f9d3 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002c2e:	e003      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	75fb      	strb	r3, [r7, #23]
      break;
 8002c34:	e000      	b.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8002c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c4c:	4901      	ldr	r1, [pc, #4]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	658b      	str	r3, [r1, #88]	; 0x58
 8002c52:	e003      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8002c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02f      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c72:	d00c      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002c74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c78:	d015      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8002c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c80:	4b79      	ldr	r3, [pc, #484]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	4a78      	ldr	r2, [pc, #480]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002c8c:	e00c      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3324      	adds	r3, #36	; 0x24
 8002c92:	2101      	movs	r1, #1
 8002c94:	4618      	mov	r0, r3
 8002c96:	f000 f99b 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002c9e:	e003      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8002ca6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ca8:	7dfb      	ldrb	r3, [r7, #23]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cae:	4b6e      	ldr	r3, [pc, #440]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbc:	496a      	ldr	r1, [pc, #424]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	654b      	str	r3, [r1, #84]	; 0x54
 8002cc2:	e001      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d029      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d007      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8002ce2:	e00f      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce4:	4b60      	ldr	r3, [pc, #384]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce8:	4a5f      	ldr	r2, [pc, #380]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002cf0:	e00b      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 f8b7 	bl	8002e6c <RCCEx_PLL2_Config>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	75fb      	strb	r3, [r7, #23]
      break;
 8002d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002d10:	4b55      	ldr	r3, [pc, #340]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	4952      	ldr	r1, [pc, #328]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d22:	e001      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3324      	adds	r3, #36	; 0x24
 8002d38:	2102      	movs	r1, #2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f948 	bl	8002fd0 <RCCEx_PLL3_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d02f      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d5e:	d00c      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d64:	d802      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d011      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8002d6a:	e00d      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8002d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d70:	d00f      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d76:	d00e      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002d78:	e006      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7a:	4b3b      	ldr	r3, [pc, #236]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	4a3a      	ldr	r2, [pc, #232]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002d86:	e007      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8c:	e004      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e002      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002d92:	bf00      	nop
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8002d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d9e:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002daa:	492f      	ldr	r1, [pc, #188]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	654b      	str	r3, [r1, #84]	; 0x54
 8002db0:	e001      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4926      	ldr	r1, [pc, #152]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dee:	491e      	ldr	r1, [pc, #120]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e00:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e0c:	4916      	ldr	r1, [pc, #88]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00d      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e1e:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e28:	6113      	str	r3, [r2, #16]
 8002e2a:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002e34:	490c      	ldr	r1, [pc, #48]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da08      	bge.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	4906      	ldr	r1, [pc, #24]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002e54:	7dbb      	ldrb	r3, [r7, #22]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	58024400 	.word	0x58024400

08002e6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002e7a:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d101      	bne.n	8002e8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e099      	b.n	8002fbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a4e      	ldr	r2, [pc, #312]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002e90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e96:	f7fd fdcd 	bl	8000a34 <HAL_GetTick>
 8002e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e9c:	e008      	b.n	8002eb0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002e9e:	f7fd fdc9 	bl	8000a34 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d901      	bls.n	8002eb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e086      	b.n	8002fbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1f0      	bne.n	8002e9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002ebc:	4b42      	ldr	r3, [pc, #264]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	031b      	lsls	r3, r3, #12
 8002eca:	493f      	ldr	r1, [pc, #252]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	628b      	str	r3, [r1, #40]	; 0x28
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	025b      	lsls	r3, r3, #9
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	061b      	lsls	r3, r3, #24
 8002efc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f00:	4931      	ldr	r1, [pc, #196]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002f06:	4b30      	ldr	r3, [pc, #192]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	492d      	ldr	r1, [pc, #180]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002f18:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f023 0220 	bic.w	r2, r3, #32
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	4928      	ldr	r1, [pc, #160]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	4a26      	ldr	r2, [pc, #152]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f30:	f023 0310 	bic.w	r3, r3, #16
 8002f34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002f36:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <RCCEx_PLL2_Config+0x160>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	69d2      	ldr	r2, [r2, #28]
 8002f42:	00d2      	lsls	r2, r2, #3
 8002f44:	4920      	ldr	r1, [pc, #128]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	4a1e      	ldr	r2, [pc, #120]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f50:	f043 0310 	orr.w	r3, r3, #16
 8002f54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d106      	bne.n	8002f6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f68:	e00f      	b.n	8002f8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d106      	bne.n	8002f7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f7c:	e005      	b.n	8002f8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002f7e:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a0e      	ldr	r2, [pc, #56]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f96:	f7fd fd4d 	bl	8000a34 <HAL_GetTick>
 8002f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002f9c:	e008      	b.n	8002fb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002f9e:	f7fd fd49 	bl	8000a34 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e006      	b.n	8002fbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <RCCEx_PLL2_Config+0x15c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	58024400 	.word	0x58024400
 8002fcc:	ffff0007 	.word	0xffff0007

08002fd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002fde:	4b53      	ldr	r3, [pc, #332]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d101      	bne.n	8002fee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e099      	b.n	8003122 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8002fee:	4b4f      	ldr	r3, [pc, #316]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a4e      	ldr	r2, [pc, #312]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8002ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffa:	f7fd fd1b 	bl	8000a34 <HAL_GetTick>
 8002ffe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003000:	e008      	b.n	8003014 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003002:	f7fd fd17 	bl	8000a34 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e086      	b.n	8003122 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003014:	4b45      	ldr	r3, [pc, #276]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1f0      	bne.n	8003002 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003020:	4b42      	ldr	r3, [pc, #264]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	051b      	lsls	r3, r3, #20
 800302e:	493f      	ldr	r1, [pc, #252]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	628b      	str	r3, [r1, #40]	; 0x28
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	3b01      	subs	r3, #1
 800303a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	3b01      	subs	r3, #1
 8003044:	025b      	lsls	r3, r3, #9
 8003046:	b29b      	uxth	r3, r3
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	3b01      	subs	r3, #1
 8003050:	041b      	lsls	r3, r3, #16
 8003052:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	3b01      	subs	r3, #1
 800305e:	061b      	lsls	r3, r3, #24
 8003060:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003064:	4931      	ldr	r1, [pc, #196]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003066:	4313      	orrs	r3, r2
 8003068:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800306a:	4b30      	ldr	r3, [pc, #192]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	492d      	ldr	r1, [pc, #180]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003078:	4313      	orrs	r3, r2
 800307a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800307c:	4b2b      	ldr	r3, [pc, #172]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4928      	ldr	r1, [pc, #160]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	4a26      	ldr	r2, [pc, #152]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003098:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 800309c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <RCCEx_PLL3_Config+0x160>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	69d2      	ldr	r2, [r2, #28]
 80030a6:	00d2      	lsls	r2, r2, #3
 80030a8:	4920      	ldr	r1, [pc, #128]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80030ae:	4b1f      	ldr	r3, [pc, #124]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	4a1e      	ldr	r2, [pc, #120]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80030c0:	4b1a      	ldr	r3, [pc, #104]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	4a19      	ldr	r2, [pc, #100]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030cc:	e00f      	b.n	80030ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80030d4:	4b15      	ldr	r3, [pc, #84]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80030e0:	e005      	b.n	80030ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80030e2:	4b12      	ldr	r3, [pc, #72]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	4a11      	ldr	r2, [pc, #68]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80030ee:	4b0f      	ldr	r3, [pc, #60]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a0e      	ldr	r2, [pc, #56]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fa:	f7fd fc9b 	bl	8000a34 <HAL_GetTick>
 80030fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003100:	e008      	b.n	8003114 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003102:	f7fd fc97 	bl	8000a34 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e006      	b.n	8003122 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003114:	4b05      	ldr	r3, [pc, #20]	; (800312c <RCCEx_PLL3_Config+0x15c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	58024400 	.word	0x58024400
 8003130:	ffff0007 	.word	0xffff0007

08003134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e049      	b.n	80031da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f841 	bl	80031e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f000 f9be 	bl	80034f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d001      	beq.n	8003210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e021      	b.n	8003254 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <HAL_TIM_Base_Start_IT+0x68>)
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d00b      	beq.n	8003252 <HAL_TIM_Base_Start_IT+0x5a>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003240:	d007      	beq.n	8003252 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	00010007 	.word	0x00010007

08003264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d122      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d11b      	bne.n	80032c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0202 	mvn.w	r2, #2
 8003290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f905 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 80032ac:	e005      	b.n	80032ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f8f7 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f908 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d122      	bne.n	8003314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0204 	mvn.w	r2, #4
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f8db 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f8cd 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f8de 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b08      	cmp	r3, #8
 8003320:	d122      	bne.n	8003368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b08      	cmp	r3, #8
 800332e:	d11b      	bne.n	8003368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0208 	mvn.w	r2, #8
 8003338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2204      	movs	r2, #4
 800333e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f8b1 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 8003354:	e005      	b.n	8003362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f8a3 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8b4 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b10      	cmp	r3, #16
 8003374:	d122      	bne.n	80033bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b10      	cmp	r3, #16
 8003382:	d11b      	bne.n	80033bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0210 	mvn.w	r2, #16
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2208      	movs	r2, #8
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f887 	bl	80034b6 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f879 	bl	80034a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f88a 	bl	80034ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d10e      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d107      	bne.n	80033e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0201 	mvn.w	r2, #1
 80033e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd f9d4 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	2b80      	cmp	r3, #128	; 0x80
 80033f4:	d10e      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003400:	2b80      	cmp	r3, #128	; 0x80
 8003402:	d107      	bne.n	8003414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800340c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f914 	bl	800363c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d10e      	bne.n	8003442 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b80      	cmp	r3, #128	; 0x80
 8003430:	d107      	bne.n	8003442 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800343a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f907 	bl	8003650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b40      	cmp	r3, #64	; 0x40
 800344e:	d10e      	bne.n	800346e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b40      	cmp	r3, #64	; 0x40
 800345c:	d107      	bne.n	800346e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f838 	bl	80034de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	f003 0320 	and.w	r3, r3, #32
 8003478:	2b20      	cmp	r3, #32
 800347a:	d10e      	bne.n	800349a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	2b20      	cmp	r3, #32
 8003488:	d107      	bne.n	800349a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0220 	mvn.w	r2, #32
 8003492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8c7 	bl	8003628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a40      	ldr	r2, [pc, #256]	; (8003608 <TIM_Base_SetConfig+0x114>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d013      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d00f      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3d      	ldr	r2, [pc, #244]	; (800360c <TIM_Base_SetConfig+0x118>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3c      	ldr	r2, [pc, #240]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <TIM_Base_SetConfig+0x120>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x40>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a3a      	ldr	r2, [pc, #232]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2f      	ldr	r2, [pc, #188]	; (8003608 <TIM_Base_SetConfig+0x114>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d01b      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a2c      	ldr	r2, [pc, #176]	; (800360c <TIM_Base_SetConfig+0x118>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d017      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <TIM_Base_SetConfig+0x11c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a2a      	ldr	r2, [pc, #168]	; (8003614 <TIM_Base_SetConfig+0x120>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a29      	ldr	r2, [pc, #164]	; (8003618 <TIM_Base_SetConfig+0x124>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a28      	ldr	r2, [pc, #160]	; (800361c <TIM_Base_SetConfig+0x128>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a27      	ldr	r2, [pc, #156]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x9a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a26      	ldr	r2, [pc, #152]	; (8003624 <TIM_Base_SetConfig+0x130>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00f      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <TIM_Base_SetConfig+0x124>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a11      	ldr	r2, [pc, #68]	; (800361c <TIM_Base_SetConfig+0x128>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <TIM_Base_SetConfig+0x12c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_Base_SetConfig+0xf8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <TIM_Base_SetConfig+0x130>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d103      	bne.n	80035f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	615a      	str	r2, [r3, #20]
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40010000 	.word	0x40010000
 800360c:	40000400 	.word	0x40000400
 8003610:	40000800 	.word	0x40000800
 8003614:	40000c00 	.word	0x40000c00
 8003618:	40010400 	.word	0x40010400
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
	...

08003674 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800367a:	f3ef 8305 	mrs	r3, IPSR
 800367e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003686:	f3ef 8310 	mrs	r3, PRIMASK
 800368a:	607b      	str	r3, [r7, #4]
  return(result);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d105      	bne.n	800369e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003692:	f3ef 8311 	mrs	r3, BASEPRI
 8003696:	603b      	str	r3, [r7, #0]
  return(result);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <osKernelInitialize+0x3a>
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <osKernelInitialize+0x64>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d103      	bne.n	80036ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80036a6:	f06f 0305 	mvn.w	r3, #5
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e00c      	b.n	80036c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <osKernelInitialize+0x64>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d105      	bne.n	80036c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <osKernelInitialize+0x64>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e002      	b.n	80036c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036c8:	68fb      	ldr	r3, [r7, #12]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000030 	.word	0x20000030

080036dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e2:	f3ef 8305 	mrs	r3, IPSR
 80036e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ee:	f3ef 8310 	mrs	r3, PRIMASK
 80036f2:	607b      	str	r3, [r7, #4]
  return(result);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036fa:	f3ef 8311 	mrs	r3, BASEPRI
 80036fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <osKernelStart+0x3a>
 8003706:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <osKernelStart+0x68>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b02      	cmp	r3, #2
 800370c:	d103      	bne.n	8003716 <osKernelStart+0x3a>
    stat = osErrorISR;
 800370e:	f06f 0305 	mvn.w	r3, #5
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e010      	b.n	8003738 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <osKernelStart+0x68>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d109      	bne.n	8003732 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800371e:	f7ff ffa1 	bl	8003664 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <osKernelStart+0x68>)
 8003724:	2202      	movs	r2, #2
 8003726:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003728:	f001 fc88 	bl	800503c <vTaskStartScheduler>
      stat = osOK;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e002      	b.n	8003738 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003738:	68fb      	ldr	r3, [r7, #12]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000030 	.word	0x20000030

08003748 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b090      	sub	sp, #64	; 0x40
 800374c:	af04      	add	r7, sp, #16
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	61fb      	str	r3, [r7, #28]
  return(result);
 800375e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003760:	2b00      	cmp	r3, #0
 8003762:	f040 808f 	bne.w	8003884 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003766:	f3ef 8310 	mrs	r3, PRIMASK
 800376a:	61bb      	str	r3, [r7, #24]
  return(result);
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003772:	f3ef 8311 	mrs	r3, BASEPRI
 8003776:	617b      	str	r3, [r7, #20]
  return(result);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <osThreadNew+0x3e>
 800377e:	4b44      	ldr	r3, [pc, #272]	; (8003890 <osThreadNew+0x148>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d07e      	beq.n	8003884 <osThreadNew+0x13c>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d07b      	beq.n	8003884 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003790:	2318      	movs	r3, #24
 8003792:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d045      	beq.n	8003830 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <osThreadNew+0x6a>
        name = attr->name;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d008      	beq.n	80037d8 <osThreadNew+0x90>
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	2b38      	cmp	r3, #56	; 0x38
 80037ca:	d805      	bhi.n	80037d8 <osThreadNew+0x90>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <osThreadNew+0x94>
        return (NULL);
 80037d8:	2300      	movs	r3, #0
 80037da:	e054      	b.n	8003886 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	089b      	lsrs	r3, r3, #2
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00e      	beq.n	8003812 <osThreadNew+0xca>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b5b      	cmp	r3, #91	; 0x5b
 80037fa:	d90a      	bls.n	8003812 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003800:	2b00      	cmp	r3, #0
 8003802:	d006      	beq.n	8003812 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <osThreadNew+0xca>
        mem = 1;
 800380c:	2301      	movs	r3, #1
 800380e:	623b      	str	r3, [r7, #32]
 8003810:	e010      	b.n	8003834 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10c      	bne.n	8003834 <osThreadNew+0xec>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <osThreadNew+0xec>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d104      	bne.n	8003834 <osThreadNew+0xec>
          mem = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	e001      	b.n	8003834 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d110      	bne.n	800385c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003842:	9202      	str	r2, [sp, #8]
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f001 fa21 	bl	8004c98 <xTaskCreateStatic>
 8003856:	4603      	mov	r3, r0
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	e013      	b.n	8003884 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d110      	bne.n	8003884 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	b29a      	uxth	r2, r3
 8003866:	f107 0310 	add.w	r3, r7, #16
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f001 fa69 	bl	8004d4c <xTaskCreate>
 800387a:	4603      	mov	r3, r0
 800387c:	2b01      	cmp	r3, #1
 800387e:	d001      	beq.n	8003884 <osThreadNew+0x13c>
          hTask = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003884:	693b      	ldr	r3, [r7, #16]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3730      	adds	r7, #48	; 0x30
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000030 	.word	0x20000030

08003894 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800389c:	f3ef 8305 	mrs	r3, IPSR
 80038a0:	613b      	str	r3, [r7, #16]
  return(result);
 80038a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10f      	bne.n	80038c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038b4:	f3ef 8311 	mrs	r3, BASEPRI
 80038b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d007      	beq.n	80038d0 <osDelay+0x3c>
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <osDelay+0x58>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d103      	bne.n	80038d0 <osDelay+0x3c>
    stat = osErrorISR;
 80038c8:	f06f 0305 	mvn.w	r3, #5
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e007      	b.n	80038e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f001 fb7a 	bl	8004fd4 <vTaskDelay>
    }
  }

  return (stat);
 80038e0:	697b      	ldr	r3, [r7, #20]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000030 	.word	0x20000030

080038f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4a07      	ldr	r2, [pc, #28]	; (800391c <vApplicationGetIdleTaskMemory+0x2c>)
 8003900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4a06      	ldr	r2, [pc, #24]	; (8003920 <vApplicationGetIdleTaskMemory+0x30>)
 8003906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2280      	movs	r2, #128	; 0x80
 800390c:	601a      	str	r2, [r3, #0]
}
 800390e:	bf00      	nop
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	20000034 	.word	0x20000034
 8003920:	20000090 	.word	0x20000090

08003924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4a07      	ldr	r2, [pc, #28]	; (8003950 <vApplicationGetTimerTaskMemory+0x2c>)
 8003934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <vApplicationGetTimerTaskMemory+0x30>)
 800393a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003942:	601a      	str	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	20000290 	.word	0x20000290
 8003954:	200002ec 	.word	0x200002ec

08003958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003964:	f001 fbce 	bl	8005104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003968:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <pvPortMalloc+0x170>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003970:	f000 f90c 	bl	8003b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003974:	4b55      	ldr	r3, [pc, #340]	; (8003acc <pvPortMalloc+0x174>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	f040 808c 	bne.w	8003a9a <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01c      	beq.n	80039c2 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003988:	2208      	movs	r2, #8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4413      	add	r3, r2
 800398e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f023 0307 	bic.w	r3, r3, #7
 80039a0:	3308      	adds	r3, #8
 80039a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <pvPortMalloc+0x6a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e7fe      	b.n	80039c0 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d068      	beq.n	8003a9a <pvPortMalloc+0x142>
 80039c8:	4b41      	ldr	r3, [pc, #260]	; (8003ad0 <pvPortMalloc+0x178>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d863      	bhi.n	8003a9a <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039d2:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <pvPortMalloc+0x17c>)
 80039d4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039d6:	4b3f      	ldr	r3, [pc, #252]	; (8003ad4 <pvPortMalloc+0x17c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039dc:	e004      	b.n	80039e8 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d903      	bls.n	80039fa <pvPortMalloc+0xa2>
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f1      	bne.n	80039de <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039fa:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <pvPortMalloc+0x170>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d04a      	beq.n	8003a9a <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	4413      	add	r3, r2
 8003a0c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad2      	subs	r2, r2, r3
 8003a1e:	2308      	movs	r3, #8
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d91e      	bls.n	8003a64 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d009      	beq.n	8003a4c <pvPortMalloc+0xf4>
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	e7fe      	b.n	8003a4a <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a5e:	69b8      	ldr	r0, [r7, #24]
 8003a60:	f000 f8f6 	bl	8003c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a64:	4b1a      	ldr	r3, [pc, #104]	; (8003ad0 <pvPortMalloc+0x178>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <pvPortMalloc+0x178>)
 8003a70:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a72:	4b17      	ldr	r3, [pc, #92]	; (8003ad0 <pvPortMalloc+0x178>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b18      	ldr	r3, [pc, #96]	; (8003ad8 <pvPortMalloc+0x180>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d203      	bcs.n	8003a86 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a7e:	4b14      	ldr	r3, [pc, #80]	; (8003ad0 <pvPortMalloc+0x178>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <pvPortMalloc+0x180>)
 8003a84:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <pvPortMalloc+0x174>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a9a:	f001 fb41 	bl	8005120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <pvPortMalloc+0x164>
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e7fe      	b.n	8003aba <pvPortMalloc+0x162>
	return pvReturn;
 8003abc:	69fb      	ldr	r3, [r7, #28]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3728      	adds	r7, #40	; 0x28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	200042f4 	.word	0x200042f4
 8003acc:	20004300 	.word	0x20004300
 8003ad0:	200042f8 	.word	0x200042f8
 8003ad4:	200042ec 	.word	0x200042ec
 8003ad8:	200042fc 	.word	0x200042fc

08003adc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d046      	beq.n	8003b7c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003aee:	2308      	movs	r3, #8
 8003af0:	425b      	negs	r3, r3
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4413      	add	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <vPortFree+0xa8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <vPortFree+0x42>
 8003b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	60fb      	str	r3, [r7, #12]
 8003b1c:	e7fe      	b.n	8003b1c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d009      	beq.n	8003b3a <vPortFree+0x5e>
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	e7fe      	b.n	8003b38 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <vPortFree+0xa8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d019      	beq.n	8003b7c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d115      	bne.n	8003b7c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <vPortFree+0xa8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b60:	f001 fad0 	bl	8005104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <vPortFree+0xac>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	4a06      	ldr	r2, [pc, #24]	; (8003b88 <vPortFree+0xac>)
 8003b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b72:	6938      	ldr	r0, [r7, #16]
 8003b74:	f000 f86c 	bl	8003c50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b78:	f001 fad2 	bl	8005120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20004300 	.word	0x20004300
 8003b88:	200042f8 	.word	0x200042f8

08003b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <prvHeapInit+0xac>)
 8003b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00c      	beq.n	8003bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3307      	adds	r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0307 	bic.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	4a1f      	ldr	r2, [pc, #124]	; (8003c38 <prvHeapInit+0xac>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <prvHeapInit+0xb0>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bca:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <prvHeapInit+0xb0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bd8:	2208      	movs	r2, #8
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0307 	bic.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <prvHeapInit+0xb4>)
 8003bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003bee:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <prvHeapInit+0xb4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <prvHeapInit+0xb4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	1ad2      	subs	r2, r2, r3
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <prvHeapInit+0xb4>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a0a      	ldr	r2, [pc, #40]	; (8003c44 <prvHeapInit+0xb8>)
 8003c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <prvHeapInit+0xbc>)
 8003c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c24:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <prvHeapInit+0xc0>)
 8003c26:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c2a:	601a      	str	r2, [r3, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	200006ec 	.word	0x200006ec
 8003c3c:	200042ec 	.word	0x200042ec
 8003c40:	200042f4 	.word	0x200042f4
 8003c44:	200042fc 	.word	0x200042fc
 8003c48:	200042f8 	.word	0x200042f8
 8003c4c:	20004300 	.word	0x20004300

08003c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <prvInsertBlockIntoFreeList+0xac>)
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	e002      	b.n	8003c64 <prvInsertBlockIntoFreeList+0x14>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d8f7      	bhi.n	8003c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	4413      	add	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d108      	bne.n	8003c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	441a      	add	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d118      	bne.n	8003cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <prvInsertBlockIntoFreeList+0xb0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d00d      	beq.n	8003cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e008      	b.n	8003ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cce:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <prvInsertBlockIntoFreeList+0xb0>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e003      	b.n	8003ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d002      	beq.n	8003cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	200042ec 	.word	0x200042ec
 8003d00:	200042f4 	.word	0x200042f4

08003d04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f103 0208 	add.w	r2, r3, #8
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f103 0208 	add.w	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	601a      	str	r2, [r3, #0]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d103      	bne.n	8003dc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e00c      	b.n	8003de0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e002      	b.n	8003dd4 <vListInsert+0x2e>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d2f6      	bcs.n	8003dce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	601a      	str	r2, [r3, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6892      	ldr	r2, [r2, #8]
 8003e2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6852      	ldr	r2, [r2, #4]
 8003e38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d103      	bne.n	8003e4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1e5a      	subs	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3b04      	subs	r3, #4
 8003e7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	3b04      	subs	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0201 	bic.w	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <pxPortInitialiseStack+0x64>)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3b14      	subs	r3, #20
 8003ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	3b04      	subs	r3, #4
 8003eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f06f 0202 	mvn.w	r2, #2
 8003eba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3b20      	subs	r3, #32
 8003ec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	08003ed5 	.word	0x08003ed5

08003ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ede:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <prvTaskExitError+0x50>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d009      	beq.n	8003efc <prvTaskExitError+0x28>
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e7fe      	b.n	8003efa <prvTaskExitError+0x26>
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f0e:	bf00      	nop
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0fc      	beq.n	8003f10 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	20000010 	.word	0x20000010
	...

08003f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <pxCurrentTCBConst2>)
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	6808      	ldr	r0, [r1, #0]
 8003f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3a:	f380 8809 	msr	PSP, r0
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f380 8811 	msr	BASEPRI, r0
 8003f4a:	4770      	bx	lr
 8003f4c:	f3af 8000 	nop.w

08003f50 <pxCurrentTCBConst2>:
 8003f50:	2000430c 	.word	0x2000430c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop

08003f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003f58:	4808      	ldr	r0, [pc, #32]	; (8003f7c <prvPortStartFirstTask+0x24>)
 8003f5a:	6800      	ldr	r0, [r0, #0]
 8003f5c:	6800      	ldr	r0, [r0, #0]
 8003f5e:	f380 8808 	msr	MSP, r0
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8814 	msr	CONTROL, r0
 8003f6a:	b662      	cpsie	i
 8003f6c:	b661      	cpsie	f
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	df00      	svc	0
 8003f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f7a:	bf00      	nop
 8003f7c:	e000ed08 	.word	0xe000ed08

08003f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f86:	4b44      	ldr	r3, [pc, #272]	; (8004098 <xPortStartScheduler+0x118>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a44      	ldr	r2, [pc, #272]	; (800409c <xPortStartScheduler+0x11c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d109      	bne.n	8003fa4 <xPortStartScheduler+0x24>
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	e7fe      	b.n	8003fa2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fa4:	4b3c      	ldr	r3, [pc, #240]	; (8004098 <xPortStartScheduler+0x118>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <xPortStartScheduler+0x120>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d109      	bne.n	8003fc2 <xPortStartScheduler+0x42>
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	e7fe      	b.n	8003fc0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fc2:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <xPortStartScheduler+0x124>)
 8003fc4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	22ff      	movs	r2, #255	; 0xff
 8003fd2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <xPortStartScheduler+0x128>)
 8003fe8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <xPortStartScheduler+0x12c>)
 8003fec:	2207      	movs	r2, #7
 8003fee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ff0:	e009      	b.n	8004006 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003ff2:	4b2e      	ldr	r3, [pc, #184]	; (80040ac <xPortStartScheduler+0x12c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <xPortStartScheduler+0x12c>)
 8003ffa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800400e:	2b80      	cmp	r3, #128	; 0x80
 8004010:	d0ef      	beq.n	8003ff2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004012:	4b26      	ldr	r3, [pc, #152]	; (80040ac <xPortStartScheduler+0x12c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f1c3 0307 	rsb	r3, r3, #7
 800401a:	2b04      	cmp	r3, #4
 800401c:	d009      	beq.n	8004032 <xPortStartScheduler+0xb2>
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	e7fe      	b.n	8004030 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <xPortStartScheduler+0x12c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <xPortStartScheduler+0x12c>)
 800403a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800403c:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <xPortStartScheduler+0x12c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004044:	4a19      	ldr	r2, [pc, #100]	; (80040ac <xPortStartScheduler+0x12c>)
 8004046:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	b2da      	uxtb	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004050:	4b17      	ldr	r3, [pc, #92]	; (80040b0 <xPortStartScheduler+0x130>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a16      	ldr	r2, [pc, #88]	; (80040b0 <xPortStartScheduler+0x130>)
 8004056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800405a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <xPortStartScheduler+0x130>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a13      	ldr	r2, [pc, #76]	; (80040b0 <xPortStartScheduler+0x130>)
 8004062:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004066:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004068:	f000 f8d6 	bl	8004218 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800406c:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <xPortStartScheduler+0x134>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004072:	f000 f8f5 	bl	8004260 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <xPortStartScheduler+0x138>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <xPortStartScheduler+0x138>)
 800407c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004080:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004082:	f7ff ff69 	bl	8003f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004086:	f001 f9af 	bl	80053e8 <vTaskSwitchContext>
	prvTaskExitError();
 800408a:	f7ff ff23 	bl	8003ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	e000ed00 	.word	0xe000ed00
 800409c:	410fc271 	.word	0x410fc271
 80040a0:	410fc270 	.word	0x410fc270
 80040a4:	e000e400 	.word	0xe000e400
 80040a8:	20004304 	.word	0x20004304
 80040ac:	20004308 	.word	0x20004308
 80040b0:	e000ed20 	.word	0xe000ed20
 80040b4:	20000010 	.word	0x20000010
 80040b8:	e000ef34 	.word	0xe000ef34

080040bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <vPortEnterCritical+0x54>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	3301      	adds	r3, #1
 80040da:	4a0d      	ldr	r2, [pc, #52]	; (8004110 <vPortEnterCritical+0x54>)
 80040dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <vPortEnterCritical+0x54>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d10e      	bne.n	8004104 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <vPortEnterCritical+0x58>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d009      	beq.n	8004104 <vPortEnterCritical+0x48>
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	e7fe      	b.n	8004102 <vPortEnterCritical+0x46>
	}
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20000010 	.word	0x20000010
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800411e:	4b11      	ldr	r3, [pc, #68]	; (8004164 <vPortExitCritical+0x4c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <vPortExitCritical+0x22>
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	e7fe      	b.n	8004138 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <vPortExitCritical+0x4c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3b01      	subs	r3, #1
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <vPortExitCritical+0x4c>)
 8004142:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <vPortExitCritical+0x4c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <vPortExitCritical+0x3e>
 800414c:	2300      	movs	r3, #0
 800414e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000010 	.word	0x20000010
	...

08004170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004170:	f3ef 8009 	mrs	r0, PSP
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <pxCurrentTCBConst>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	f01e 0f10 	tst.w	lr, #16
 8004180:	bf08      	it	eq
 8004182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	6010      	str	r0, [r2, #0]
 800418c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004194:	f380 8811 	msr	BASEPRI, r0
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f001 f922 	bl	80053e8 <vTaskSwitchContext>
 80041a4:	f04f 0000 	mov.w	r0, #0
 80041a8:	f380 8811 	msr	BASEPRI, r0
 80041ac:	bc09      	pop	{r0, r3}
 80041ae:	6819      	ldr	r1, [r3, #0]
 80041b0:	6808      	ldr	r0, [r1, #0]
 80041b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b6:	f01e 0f10 	tst.w	lr, #16
 80041ba:	bf08      	it	eq
 80041bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041c0:	f380 8809 	msr	PSP, r0
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	f3af 8000 	nop.w

080041d0 <pxCurrentTCBConst>:
 80041d0:	2000430c 	.word	0x2000430c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop

080041d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80041f0:	f001 f842 	bl	8005278 <xTaskIncrementTick>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <SysTick_Handler+0x3c>)
 80041fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	2300      	movs	r3, #0
 8004204:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <vPortSetupTimerInterrupt+0x34>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <vPortSetupTimerInterrupt+0x38>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <vPortSetupTimerInterrupt+0x3c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <vPortSetupTimerInterrupt+0x40>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	4a09      	ldr	r2, [pc, #36]	; (800425c <vPortSetupTimerInterrupt+0x44>)
 8004236:	3b01      	subs	r3, #1
 8004238:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800423a:	4b04      	ldr	r3, [pc, #16]	; (800424c <vPortSetupTimerInterrupt+0x34>)
 800423c:	2207      	movs	r2, #7
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e010 	.word	0xe000e010
 8004250:	e000e018 	.word	0xe000e018
 8004254:	20000000 	.word	0x20000000
 8004258:	10624dd3 	.word	0x10624dd3
 800425c:	e000e014 	.word	0xe000e014

08004260 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004260:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004270 <vPortEnableVFP+0x10>
 8004264:	6801      	ldr	r1, [r0, #0]
 8004266:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800426a:	6001      	str	r1, [r0, #0]
 800426c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800426e:	bf00      	nop
 8004270:	e000ed88 	.word	0xe000ed88

08004274 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800427a:	f3ef 8305 	mrs	r3, IPSR
 800427e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	d913      	bls.n	80042ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004286:	4a16      	ldr	r2, [pc, #88]	; (80042e0 <vPortValidateInterruptPriority+0x6c>)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <vPortValidateInterruptPriority+0x70>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	7afa      	ldrb	r2, [r7, #11]
 8004296:	429a      	cmp	r2, r3
 8004298:	d209      	bcs.n	80042ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	607b      	str	r3, [r7, #4]
 80042ac:	e7fe      	b.n	80042ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042ae:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <vPortValidateInterruptPriority+0x74>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042b6:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <vPortValidateInterruptPriority+0x78>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d909      	bls.n	80042d2 <vPortValidateInterruptPriority+0x5e>
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	e7fe      	b.n	80042d0 <vPortValidateInterruptPriority+0x5c>
	}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000e3f0 	.word	0xe000e3f0
 80042e4:	20004304 	.word	0x20004304
 80042e8:	e000ed0c 	.word	0xe000ed0c
 80042ec:	20004308 	.word	0x20004308

080042f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d109      	bne.n	8004318 <xQueueGenericReset+0x28>
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	e7fe      	b.n	8004316 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004318:	f7ff fed0 	bl	80040bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004324:	68f9      	ldr	r1, [r7, #12]
 8004326:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	441a      	add	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	3b01      	subs	r3, #1
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800434e:	fb01 f303 	mul.w	r3, r1, r3
 8004352:	441a      	add	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	22ff      	movs	r2, #255	; 0xff
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	22ff      	movs	r2, #255	; 0xff
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d114      	bne.n	8004398 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01a      	beq.n	80043ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3310      	adds	r3, #16
 800437a:	4618      	mov	r0, r3
 800437c:	f001 f8de 	bl	800553c <xTaskRemoveFromEventList>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d012      	beq.n	80043ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <xQueueGenericReset+0xcc>)
 8004388:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	e009      	b.n	80043ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3310      	adds	r3, #16
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fcb1 	bl	8003d04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3324      	adds	r3, #36	; 0x24
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fcac 	bl	8003d04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80043ac:	f7ff feb4 	bl	8004118 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80043b0:	2301      	movs	r3, #1
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	e000ed04 	.word	0xe000ed04

080043c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08e      	sub	sp, #56	; 0x38
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <xQueueGenericCreateStatic+0x28>
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e6:	e7fe      	b.n	80043e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <xQueueGenericCreateStatic+0x42>
 80043ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004400:	e7fe      	b.n	8004400 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <xQueueGenericCreateStatic+0x4e>
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <xQueueGenericCreateStatic+0x52>
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <xQueueGenericCreateStatic+0x54>
 8004412:	2300      	movs	r3, #0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <xQueueGenericCreateStatic+0x6c>
 8004418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	e7fe      	b.n	800442a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d102      	bne.n	8004438 <xQueueGenericCreateStatic+0x78>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <xQueueGenericCreateStatic+0x7c>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <xQueueGenericCreateStatic+0x7e>
 800443c:	2300      	movs	r3, #0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <xQueueGenericCreateStatic+0x96>
 8004442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	e7fe      	b.n	8004454 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004456:	2350      	movs	r3, #80	; 0x50
 8004458:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b50      	cmp	r3, #80	; 0x50
 800445e:	d009      	beq.n	8004474 <xQueueGenericCreateStatic+0xb4>
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	e7fe      	b.n	8004472 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004474:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00d      	beq.n	800449c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004488:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68b9      	ldr	r1, [r7, #8]
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f000 f805 	bl	80044a6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800449e:	4618      	mov	r0, r3
 80044a0:	3730      	adds	r7, #48	; 0x30
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	607a      	str	r2, [r7, #4]
 80044b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e002      	b.n	80044c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044d4:	2101      	movs	r1, #1
 80044d6:	69b8      	ldr	r0, [r7, #24]
 80044d8:	f7ff ff0a 	bl	80042f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	78fa      	ldrb	r2, [r7, #3]
 80044e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08e      	sub	sp, #56	; 0x38
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044fa:	2300      	movs	r3, #0
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <xQueueGenericSend+0x30>
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
 800451a:	e7fe      	b.n	800451a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <xQueueGenericSend+0x3e>
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <xQueueGenericSend+0x42>
 800452a:	2301      	movs	r3, #1
 800452c:	e000      	b.n	8004530 <xQueueGenericSend+0x44>
 800452e:	2300      	movs	r3, #0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <xQueueGenericSend+0x5c>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
 8004546:	e7fe      	b.n	8004546 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d103      	bne.n	8004556 <xQueueGenericSend+0x6a>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <xQueueGenericSend+0x6e>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xQueueGenericSend+0x70>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <xQueueGenericSend+0x88>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	e7fe      	b.n	8004572 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004574:	f001 f998 	bl	80058a8 <xTaskGetSchedulerState>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <xQueueGenericSend+0x98>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <xQueueGenericSend+0x9c>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <xQueueGenericSend+0x9e>
 8004588:	2300      	movs	r3, #0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <xQueueGenericSend+0xb6>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	e7fe      	b.n	80045a0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045a2:	f7ff fd8b 	bl	80040bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <xQueueGenericSend+0xcc>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d129      	bne.n	800460c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045be:	f000 f9ff 	bl	80049c0 <prvCopyDataToQueue>
 80045c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	3324      	adds	r3, #36	; 0x24
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 ffb3 	bl	800553c <xTaskRemoveFromEventList>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <xQueueGenericSend+0x1f0>)
 80045de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	e00a      	b.n	8004604 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045f4:	4b39      	ldr	r3, [pc, #228]	; (80046dc <xQueueGenericSend+0x1f0>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004604:	f7ff fd88 	bl	8004118 <vPortExitCritical>
				return pdPASS;
 8004608:	2301      	movs	r3, #1
 800460a:	e063      	b.n	80046d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004612:	f7ff fd81 	bl	8004118 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004616:	2300      	movs	r3, #0
 8004618:	e05c      	b.n	80046d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004620:	f107 0314 	add.w	r3, r7, #20
 8004624:	4618      	mov	r0, r3
 8004626:	f000 ffeb 	bl	8005600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800462a:	2301      	movs	r3, #1
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800462e:	f7ff fd73 	bl	8004118 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004632:	f000 fd67 	bl	8005104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004636:	f7ff fd41 	bl	80040bc <vPortEnterCritical>
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d103      	bne.n	8004650 <xQueueGenericSend+0x164>
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004656:	b25b      	sxtb	r3, r3
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d103      	bne.n	8004666 <xQueueGenericSend+0x17a>
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004666:	f7ff fd57 	bl	8004118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800466a:	1d3a      	adds	r2, r7, #4
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f000 ffda 	bl	800562c <xTaskCheckForTimeOut>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d124      	bne.n	80046c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800467e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004680:	f000 fa96 	bl	8004bb0 <prvIsQueueFull>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d018      	beq.n	80046bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	3310      	adds	r3, #16
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff04 	bl	80054a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004698:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800469a:	f000 fa21 	bl	8004ae0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800469e:	f000 fd3f 	bl	8005120 <xTaskResumeAll>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f47f af7c 	bne.w	80045a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80046aa:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <xQueueGenericSend+0x1f0>)
 80046ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	e772      	b.n	80045a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80046bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046be:	f000 fa0f 	bl	8004ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046c2:	f000 fd2d 	bl	8005120 <xTaskResumeAll>
 80046c6:	e76c      	b.n	80045a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80046c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046ca:	f000 fa09 	bl	8004ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046ce:	f000 fd27 	bl	8005120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80046d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3738      	adds	r7, #56	; 0x38
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <xQueueGenericSendFromISR+0x2c>
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
 800470a:	e7fe      	b.n	800470a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <xQueueGenericSendFromISR+0x3a>
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <xQueueGenericSendFromISR+0x3e>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <xQueueGenericSendFromISR+0x40>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <xQueueGenericSendFromISR+0x58>
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	623b      	str	r3, [r7, #32]
 8004736:	e7fe      	b.n	8004736 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d103      	bne.n	8004746 <xQueueGenericSendFromISR+0x66>
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b01      	cmp	r3, #1
 8004744:	d101      	bne.n	800474a <xQueueGenericSendFromISR+0x6a>
 8004746:	2301      	movs	r3, #1
 8004748:	e000      	b.n	800474c <xQueueGenericSendFromISR+0x6c>
 800474a:	2300      	movs	r3, #0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <xQueueGenericSendFromISR+0x84>
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e7fe      	b.n	8004762 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004764:	f7ff fd86 	bl	8004274 <vPortValidateInterruptPriority>
	__asm volatile
 8004768:	f3ef 8211 	mrs	r2, BASEPRI
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61ba      	str	r2, [r7, #24]
 800477e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004780:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478c:	429a      	cmp	r2, r3
 800478e:	d302      	bcc.n	8004796 <xQueueGenericSendFromISR+0xb6>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d12c      	bne.n	80047f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800479c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047a6:	f000 f90b 	bl	80049c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b2:	d112      	bne.n	80047da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d016      	beq.n	80047ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	3324      	adds	r3, #36	; 0x24
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 febb 	bl	800553c <xTaskRemoveFromEventList>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00e      	beq.n	80047ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	e007      	b.n	80047ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80047da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047de:	3301      	adds	r3, #1
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	b25a      	sxtb	r2, r3
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80047ea:	2301      	movs	r3, #1
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80047ee:	e001      	b.n	80047f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80047f0:	2300      	movs	r3, #0
 80047f2:	637b      	str	r3, [r7, #52]	; 0x34
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004800:	4618      	mov	r0, r3
 8004802:	3738      	adds	r7, #56	; 0x38
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08c      	sub	sp, #48	; 0x30
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004814:	2300      	movs	r3, #0
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <xQueueReceive+0x2e>
	__asm volatile
 8004822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004826:	f383 8811 	msr	BASEPRI, r3
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	f3bf 8f4f 	dsb	sy
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	e7fe      	b.n	8004834 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <xQueueReceive+0x3c>
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <xQueueReceive+0x40>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <xQueueReceive+0x42>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <xQueueReceive+0x5a>
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e7fe      	b.n	8004860 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004862:	f001 f821 	bl	80058a8 <xTaskGetSchedulerState>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d102      	bne.n	8004872 <xQueueReceive+0x6a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <xQueueReceive+0x6e>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <xQueueReceive+0x70>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d109      	bne.n	8004890 <xQueueReceive+0x88>
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e7fe      	b.n	800488e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004890:	f7ff fc14 	bl	80040bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01f      	beq.n	80048e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048a0:	68b9      	ldr	r1, [r7, #8]
 80048a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048a4:	f000 f8f6 	bl	8004a94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	1e5a      	subs	r2, r3, #1
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00f      	beq.n	80048d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	3310      	adds	r3, #16
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fe3d 	bl	800553c <xTaskRemoveFromEventList>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d007      	beq.n	80048d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048c8:	4b3c      	ldr	r3, [pc, #240]	; (80049bc <xQueueReceive+0x1b4>)
 80048ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048d8:	f7ff fc1e 	bl	8004118 <vPortExitCritical>
				return pdPASS;
 80048dc:	2301      	movs	r3, #1
 80048de:	e069      	b.n	80049b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d103      	bne.n	80048ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048e6:	f7ff fc17 	bl	8004118 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048ea:	2300      	movs	r3, #0
 80048ec:	e062      	b.n	80049b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048f4:	f107 0310 	add.w	r3, r7, #16
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fe81 	bl	8005600 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048fe:	2301      	movs	r3, #1
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004902:	f7ff fc09 	bl	8004118 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004906:	f000 fbfd 	bl	8005104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800490a:	f7ff fbd7 	bl	80040bc <vPortEnterCritical>
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004914:	b25b      	sxtb	r3, r3
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d103      	bne.n	8004924 <xQueueReceive+0x11c>
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800492a:	b25b      	sxtb	r3, r3
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d103      	bne.n	800493a <xQueueReceive+0x132>
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	2200      	movs	r2, #0
 8004936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800493a:	f7ff fbed 	bl	8004118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800493e:	1d3a      	adds	r2, r7, #4
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fe70 	bl	800562c <xTaskCheckForTimeOut>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d123      	bne.n	800499a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004954:	f000 f916 	bl	8004b84 <prvIsQueueEmpty>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d017      	beq.n	800498e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	3324      	adds	r3, #36	; 0x24
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	4611      	mov	r1, r2
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fd9a 	bl	80054a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800496c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800496e:	f000 f8b7 	bl	8004ae0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004972:	f000 fbd5 	bl	8005120 <xTaskResumeAll>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d189      	bne.n	8004890 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <xQueueReceive+0x1b4>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	e780      	b.n	8004890 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800498e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004990:	f000 f8a6 	bl	8004ae0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004994:	f000 fbc4 	bl	8005120 <xTaskResumeAll>
 8004998:	e77a      	b.n	8004890 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800499a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800499c:	f000 f8a0 	bl	8004ae0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049a0:	f000 fbbe 	bl	8005120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a6:	f000 f8ed 	bl	8004b84 <prvIsQueueEmpty>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f43f af6f 	beq.w	8004890 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3730      	adds	r7, #48	; 0x30
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10d      	bne.n	80049fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d14d      	bne.n	8004a82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 ff7a 	bl	80058e4 <xTaskPriorityDisinherit>
 80049f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	e043      	b.n	8004a82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d119      	bne.n	8004a34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6858      	ldr	r0, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	461a      	mov	r2, r3
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	f001 fb94 	bl	8006138 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	441a      	add	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d32b      	bcc.n	8004a82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	e026      	b.n	8004a82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68d8      	ldr	r0, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	f001 fb7a 	bl	8006138 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	425b      	negs	r3, r3
 8004a4e:	441a      	add	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d207      	bcs.n	8004a70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	425b      	negs	r3, r3
 8004a6a:	441a      	add	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d105      	bne.n	8004a82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a8a:	697b      	ldr	r3, [r7, #20]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d018      	beq.n	8004ad8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	441a      	add	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68da      	ldr	r2, [r3, #12]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d303      	bcc.n	8004ac8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68d9      	ldr	r1, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	6838      	ldr	r0, [r7, #0]
 8004ad4:	f001 fb30 	bl	8006138 <memcpy>
	}
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ae8:	f7ff fae8 	bl	80040bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004af4:	e011      	b.n	8004b1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d012      	beq.n	8004b24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3324      	adds	r3, #36	; 0x24
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fd1a 	bl	800553c <xTaskRemoveFromEventList>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b0e:	f000 fded 	bl	80056ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	dce9      	bgt.n	8004af6 <prvUnlockQueue+0x16>
 8004b22:	e000      	b.n	8004b26 <prvUnlockQueue+0x46>
					break;
 8004b24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	22ff      	movs	r2, #255	; 0xff
 8004b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b2e:	f7ff faf3 	bl	8004118 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b32:	f7ff fac3 	bl	80040bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b3e:	e011      	b.n	8004b64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3310      	adds	r3, #16
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fcf5 	bl	800553c <xTaskRemoveFromEventList>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b58:	f000 fdc8 	bl	80056ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b5c:	7bbb      	ldrb	r3, [r7, #14]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dce9      	bgt.n	8004b40 <prvUnlockQueue+0x60>
 8004b6c:	e000      	b.n	8004b70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	22ff      	movs	r2, #255	; 0xff
 8004b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b78:	f7ff face 	bl	8004118 <vPortExitCritical>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b8c:	f7ff fa96 	bl	80040bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d102      	bne.n	8004b9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e001      	b.n	8004ba2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ba2:	f7ff fab9 	bl	8004118 <vPortExitCritical>

	return xReturn;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bb8:	f7ff fa80 	bl	80040bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d102      	bne.n	8004bce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e001      	b.n	8004bd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bd2:	f7ff faa1 	bl	8004118 <vPortExitCritical>

	return xReturn;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e014      	b.n	8004c1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bf0:	4a0e      	ldr	r2, [pc, #56]	; (8004c2c <vQueueAddToRegistry+0x4c>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004bfc:	490b      	ldr	r1, [pc, #44]	; (8004c2c <vQueueAddToRegistry+0x4c>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <vQueueAddToRegistry+0x4c>)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c12:	e005      	b.n	8004c20 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	3301      	adds	r3, #1
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b07      	cmp	r3, #7
 8004c1e:	d9e7      	bls.n	8004bf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	2000498c 	.word	0x2000498c

08004c30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c40:	f7ff fa3c 	bl	80040bc <vPortEnterCritical>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4a:	b25b      	sxtb	r3, r3
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d103      	bne.n	8004c5a <vQueueWaitForMessageRestricted+0x2a>
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d103      	bne.n	8004c70 <vQueueWaitForMessageRestricted+0x40>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c70:	f7ff fa52 	bl	8004118 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	3324      	adds	r3, #36	; 0x24
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fc2f 	bl	80054e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c8a:	6978      	ldr	r0, [r7, #20]
 8004c8c:	f7ff ff28 	bl	8004ae0 <prvUnlockQueue>
	}
 8004c90:	bf00      	nop
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08e      	sub	sp, #56	; 0x38
 8004c9c:	af04      	add	r7, sp, #16
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d109      	bne.n	8004cc0 <xTaskCreateStatic+0x28>
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	623b      	str	r3, [r7, #32]
 8004cbe:	e7fe      	b.n	8004cbe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <xTaskCreateStatic+0x42>
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e7fe      	b.n	8004cd8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004cda:	235c      	movs	r3, #92	; 0x5c
 8004cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ce2:	d009      	beq.n	8004cf8 <xTaskCreateStatic+0x60>
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	61bb      	str	r3, [r7, #24]
 8004cf6:	e7fe      	b.n	8004cf6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004cf8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01e      	beq.n	8004d3e <xTaskCreateStatic+0xa6>
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01b      	beq.n	8004d3e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9303      	str	r3, [sp, #12]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	9302      	str	r3, [sp, #8]
 8004d20:	f107 0314 	add.w	r3, r7, #20
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f850 	bl	8004dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d38:	f000 f8dc 	bl	8004ef4 <prvAddNewTaskToReadyList>
 8004d3c:	e001      	b.n	8004d42 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d42:	697b      	ldr	r3, [r7, #20]
	}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3728      	adds	r7, #40	; 0x28
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	; 0x30
 8004d50:	af04      	add	r7, sp, #16
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe fdf9 	bl	8003958 <pvPortMalloc>
 8004d66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00e      	beq.n	8004d8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d6e:	205c      	movs	r0, #92	; 0x5c
 8004d70:	f7fe fdf2 	bl	8003958 <pvPortMalloc>
 8004d74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d003      	beq.n	8004d84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	631a      	str	r2, [r3, #48]	; 0x30
 8004d82:	e005      	b.n	8004d90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d84:	6978      	ldr	r0, [r7, #20]
 8004d86:	f7fe fea9 	bl	8003adc <vPortFree>
 8004d8a:	e001      	b.n	8004d90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d017      	beq.n	8004dc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	2300      	movs	r3, #0
 8004da2:	9303      	str	r3, [sp, #12]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	9302      	str	r3, [sp, #8]
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	9301      	str	r3, [sp, #4]
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f80e 	bl	8004dd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dba:	69f8      	ldr	r0, [r7, #28]
 8004dbc:	f000 f89a 	bl	8004ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	e002      	b.n	8004dcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
	}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3720      	adds	r7, #32
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b088      	sub	sp, #32
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	461a      	mov	r2, r3
 8004dee:	21a5      	movs	r1, #165	; 0xa5
 8004df0:	f001 f9ad 	bl	800614e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004dfe:	440b      	add	r3, r1
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	f023 0307 	bic.w	r3, r3, #7
 8004e0c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d009      	beq.n	8004e2c <prvInitialiseNewTask+0x56>
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	617b      	str	r3, [r7, #20]
 8004e2a:	e7fe      	b.n	8004e2a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01f      	beq.n	8004e72 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	e012      	b.n	8004e5e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	7819      	ldrb	r1, [r3, #0]
 8004e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	3334      	adds	r3, #52	; 0x34
 8004e48:	460a      	mov	r2, r1
 8004e4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d006      	beq.n	8004e66 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b0f      	cmp	r3, #15
 8004e62:	d9e9      	bls.n	8004e38 <prvInitialiseNewTask+0x62>
 8004e64:	e000      	b.n	8004e68 <prvInitialiseNewTask+0x92>
			{
				break;
 8004e66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e70:	e003      	b.n	8004e7a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2b37      	cmp	r3, #55	; 0x37
 8004e7e:	d901      	bls.n	8004e84 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e80:	2337      	movs	r3, #55	; 0x37
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	2200      	movs	r2, #0
 8004e94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe ff52 	bl	8003d44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7fe ff4d 	bl	8003d44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	68f9      	ldr	r1, [r7, #12]
 8004ed2:	69b8      	ldr	r0, [r7, #24]
 8004ed4:	f7fe ffca 	bl	8003e6c <pxPortInitialiseStack>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eea:	bf00      	nop
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004efc:	f7ff f8de 	bl	80040bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f00:	4b2d      	ldr	r3, [pc, #180]	; (8004fb8 <prvAddNewTaskToReadyList+0xc4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	4a2c      	ldr	r2, [pc, #176]	; (8004fb8 <prvAddNewTaskToReadyList+0xc4>)
 8004f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <prvAddNewTaskToReadyList+0xc8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f12:	4a2a      	ldr	r2, [pc, #168]	; (8004fbc <prvAddNewTaskToReadyList+0xc8>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f18:	4b27      	ldr	r3, [pc, #156]	; (8004fb8 <prvAddNewTaskToReadyList+0xc4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d110      	bne.n	8004f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f20:	f000 fc08 	bl	8005734 <prvInitialiseTaskLists>
 8004f24:	e00d      	b.n	8004f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f26:	4b26      	ldr	r3, [pc, #152]	; (8004fc0 <prvAddNewTaskToReadyList+0xcc>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f2e:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <prvAddNewTaskToReadyList+0xc8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d802      	bhi.n	8004f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f3c:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <prvAddNewTaskToReadyList+0xc8>)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f42:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <prvAddNewTaskToReadyList+0xd0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3301      	adds	r3, #1
 8004f48:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <prvAddNewTaskToReadyList+0xd0>)
 8004f4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <prvAddNewTaskToReadyList+0xd0>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <prvAddNewTaskToReadyList+0xd4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d903      	bls.n	8004f68 <prvAddNewTaskToReadyList+0x74>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <prvAddNewTaskToReadyList+0xd4>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <prvAddNewTaskToReadyList+0xd8>)
 8004f76:	441a      	add	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7fe feed 	bl	8003d5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f84:	f7ff f8c8 	bl	8004118 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <prvAddNewTaskToReadyList+0xcc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00e      	beq.n	8004fae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <prvAddNewTaskToReadyList+0xc8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d207      	bcs.n	8004fae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <prvAddNewTaskToReadyList+0xdc>)
 8004fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200047e0 	.word	0x200047e0
 8004fbc:	2000430c 	.word	0x2000430c
 8004fc0:	200047ec 	.word	0x200047ec
 8004fc4:	200047fc 	.word	0x200047fc
 8004fc8:	200047e8 	.word	0x200047e8
 8004fcc:	20004310 	.word	0x20004310
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <vTaskDelay+0x60>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <vTaskDelay+0x2e>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	e7fe      	b.n	8005000 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005002:	f000 f87f 	bl	8005104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005006:	2100      	movs	r1, #0
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fcd7 	bl	80059bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800500e:	f000 f887 	bl	8005120 <xTaskResumeAll>
 8005012:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d107      	bne.n	800502a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <vTaskDelay+0x64>)
 800501c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800502a:	bf00      	nop
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20004808 	.word	0x20004808
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005042:	2300      	movs	r3, #0
 8005044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800504a:	463a      	mov	r2, r7
 800504c:	1d39      	adds	r1, r7, #4
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe fc4c 	bl	80038f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	9202      	str	r2, [sp, #8]
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	2300      	movs	r3, #0
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	460a      	mov	r2, r1
 800506a:	4920      	ldr	r1, [pc, #128]	; (80050ec <vTaskStartScheduler+0xb0>)
 800506c:	4820      	ldr	r0, [pc, #128]	; (80050f0 <vTaskStartScheduler+0xb4>)
 800506e:	f7ff fe13 	bl	8004c98 <xTaskCreateStatic>
 8005072:	4602      	mov	r2, r0
 8005074:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <vTaskStartScheduler+0xb8>)
 8005076:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005078:	4b1e      	ldr	r3, [pc, #120]	; (80050f4 <vTaskStartScheduler+0xb8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e001      	b.n	800508a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d102      	bne.n	8005096 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005090:	f000 fce8 	bl	8005a64 <xTimerCreateTimerTask>
 8005094:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d115      	bne.n	80050c8 <vTaskStartScheduler+0x8c>
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <vTaskStartScheduler+0xbc>)
 80050b0:	f04f 32ff 	mov.w	r2, #4294967295
 80050b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <vTaskStartScheduler+0xc0>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050bc:	4b10      	ldr	r3, [pc, #64]	; (8005100 <vTaskStartScheduler+0xc4>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050c2:	f7fe ff5d 	bl	8003f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050c6:	e00d      	b.n	80050e4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ce:	d109      	bne.n	80050e4 <vTaskStartScheduler+0xa8>
 80050d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e7fe      	b.n	80050e2 <vTaskStartScheduler+0xa6>
}
 80050e4:	bf00      	nop
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	08006184 	.word	0x08006184
 80050f0:	08005705 	.word	0x08005705
 80050f4:	20004804 	.word	0x20004804
 80050f8:	20004800 	.word	0x20004800
 80050fc:	200047ec 	.word	0x200047ec
 8005100:	200047e4 	.word	0x200047e4

08005104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005108:	4b04      	ldr	r3, [pc, #16]	; (800511c <vTaskSuspendAll+0x18>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	4a03      	ldr	r2, [pc, #12]	; (800511c <vTaskSuspendAll+0x18>)
 8005110:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	20004808 	.word	0x20004808

08005120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800512e:	4b41      	ldr	r3, [pc, #260]	; (8005234 <xTaskResumeAll+0x114>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <xTaskResumeAll+0x2a>
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	e7fe      	b.n	8005148 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800514a:	f7fe ffb7 	bl	80040bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800514e:	4b39      	ldr	r3, [pc, #228]	; (8005234 <xTaskResumeAll+0x114>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4a37      	ldr	r2, [pc, #220]	; (8005234 <xTaskResumeAll+0x114>)
 8005156:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005158:	4b36      	ldr	r3, [pc, #216]	; (8005234 <xTaskResumeAll+0x114>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d162      	bne.n	8005226 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005160:	4b35      	ldr	r3, [pc, #212]	; (8005238 <xTaskResumeAll+0x118>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d05e      	beq.n	8005226 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005168:	e02f      	b.n	80051ca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516a:	4b34      	ldr	r3, [pc, #208]	; (800523c <xTaskResumeAll+0x11c>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3318      	adds	r3, #24
 8005176:	4618      	mov	r0, r3
 8005178:	f7fe fe4e 	bl	8003e18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3304      	adds	r3, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fe49 	bl	8003e18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518a:	4b2d      	ldr	r3, [pc, #180]	; (8005240 <xTaskResumeAll+0x120>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d903      	bls.n	800519a <xTaskResumeAll+0x7a>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005196:	4a2a      	ldr	r2, [pc, #168]	; (8005240 <xTaskResumeAll+0x120>)
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4a27      	ldr	r2, [pc, #156]	; (8005244 <xTaskResumeAll+0x124>)
 80051a8:	441a      	add	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7fe fdd4 	bl	8003d5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ba:	4b23      	ldr	r3, [pc, #140]	; (8005248 <xTaskResumeAll+0x128>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051c4:	4b21      	ldr	r3, [pc, #132]	; (800524c <xTaskResumeAll+0x12c>)
 80051c6:	2201      	movs	r2, #1
 80051c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ca:	4b1c      	ldr	r3, [pc, #112]	; (800523c <xTaskResumeAll+0x11c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1cb      	bne.n	800516a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051d8:	f000 fb46 	bl	8005868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051dc:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <xTaskResumeAll+0x130>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d010      	beq.n	800520a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051e8:	f000 f846 	bl	8005278 <xTaskIncrementTick>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80051f2:	4b16      	ldr	r3, [pc, #88]	; (800524c <xTaskResumeAll+0x12c>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f1      	bne.n	80051e8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005204:	4b12      	ldr	r3, [pc, #72]	; (8005250 <xTaskResumeAll+0x130>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <xTaskResumeAll+0x12c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d009      	beq.n	8005226 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005212:	2301      	movs	r3, #1
 8005214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <xTaskResumeAll+0x134>)
 8005218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005226:	f7fe ff77 	bl	8004118 <vPortExitCritical>

	return xAlreadyYielded;
 800522a:	68bb      	ldr	r3, [r7, #8]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20004808 	.word	0x20004808
 8005238:	200047e0 	.word	0x200047e0
 800523c:	200047a0 	.word	0x200047a0
 8005240:	200047e8 	.word	0x200047e8
 8005244:	20004310 	.word	0x20004310
 8005248:	2000430c 	.word	0x2000430c
 800524c:	200047f4 	.word	0x200047f4
 8005250:	200047f0 	.word	0x200047f0
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <xTaskGetTickCount+0x1c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005264:	687b      	ldr	r3, [r7, #4]
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	200047e4 	.word	0x200047e4

08005278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005282:	4b4e      	ldr	r3, [pc, #312]	; (80053bc <xTaskIncrementTick+0x144>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 8088 	bne.w	800539c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800528c:	4b4c      	ldr	r3, [pc, #304]	; (80053c0 <xTaskIncrementTick+0x148>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005294:	4a4a      	ldr	r2, [pc, #296]	; (80053c0 <xTaskIncrementTick+0x148>)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d11f      	bne.n	80052e0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80052a0:	4b48      	ldr	r3, [pc, #288]	; (80053c4 <xTaskIncrementTick+0x14c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <xTaskIncrementTick+0x46>
 80052aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	e7fe      	b.n	80052bc <xTaskIncrementTick+0x44>
 80052be:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <xTaskIncrementTick+0x14c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	4b40      	ldr	r3, [pc, #256]	; (80053c8 <xTaskIncrementTick+0x150>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a3e      	ldr	r2, [pc, #248]	; (80053c4 <xTaskIncrementTick+0x14c>)
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4a3e      	ldr	r2, [pc, #248]	; (80053c8 <xTaskIncrementTick+0x150>)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b3e      	ldr	r3, [pc, #248]	; (80053cc <xTaskIncrementTick+0x154>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	4a3c      	ldr	r2, [pc, #240]	; (80053cc <xTaskIncrementTick+0x154>)
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	f000 fac4 	bl	8005868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052e0:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <xTaskIncrementTick+0x158>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d349      	bcc.n	800537e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ea:	4b36      	ldr	r3, [pc, #216]	; (80053c4 <xTaskIncrementTick+0x14c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052f4:	4b36      	ldr	r3, [pc, #216]	; (80053d0 <xTaskIncrementTick+0x158>)
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	601a      	str	r2, [r3, #0]
					break;
 80052fc:	e03f      	b.n	800537e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052fe:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <xTaskIncrementTick+0x14c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	429a      	cmp	r2, r3
 8005314:	d203      	bcs.n	800531e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005316:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <xTaskIncrementTick+0x158>)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800531c:	e02f      	b.n	800537e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	3304      	adds	r3, #4
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe fd78 	bl	8003e18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d004      	beq.n	800533a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	3318      	adds	r3, #24
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fd6f 	bl	8003e18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533e:	4b25      	ldr	r3, [pc, #148]	; (80053d4 <xTaskIncrementTick+0x15c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d903      	bls.n	800534e <xTaskIncrementTick+0xd6>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	4a22      	ldr	r2, [pc, #136]	; (80053d4 <xTaskIncrementTick+0x15c>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <xTaskIncrementTick+0x160>)
 800535c:	441a      	add	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe fcfa 	bl	8003d5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <xTaskIncrementTick+0x164>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	429a      	cmp	r2, r3
 8005376:	d3b8      	bcc.n	80052ea <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005378:	2301      	movs	r3, #1
 800537a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800537c:	e7b5      	b.n	80052ea <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800537e:	4b17      	ldr	r3, [pc, #92]	; (80053dc <xTaskIncrementTick+0x164>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	4914      	ldr	r1, [pc, #80]	; (80053d8 <xTaskIncrementTick+0x160>)
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d907      	bls.n	80053a6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005396:	2301      	movs	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e004      	b.n	80053a6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <xTaskIncrementTick+0x168>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3301      	adds	r3, #1
 80053a2:	4a0f      	ldr	r2, [pc, #60]	; (80053e0 <xTaskIncrementTick+0x168>)
 80053a4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <xTaskIncrementTick+0x16c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80053ae:	2301      	movs	r3, #1
 80053b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053b2:	697b      	ldr	r3, [r7, #20]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	20004808 	.word	0x20004808
 80053c0:	200047e4 	.word	0x200047e4
 80053c4:	20004798 	.word	0x20004798
 80053c8:	2000479c 	.word	0x2000479c
 80053cc:	200047f8 	.word	0x200047f8
 80053d0:	20004800 	.word	0x20004800
 80053d4:	200047e8 	.word	0x200047e8
 80053d8:	20004310 	.word	0x20004310
 80053dc:	2000430c 	.word	0x2000430c
 80053e0:	200047f0 	.word	0x200047f0
 80053e4:	200047f4 	.word	0x200047f4

080053e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053ee:	4b27      	ldr	r3, [pc, #156]	; (800548c <vTaskSwitchContext+0xa4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053f6:	4b26      	ldr	r3, [pc, #152]	; (8005490 <vTaskSwitchContext+0xa8>)
 80053f8:	2201      	movs	r2, #1
 80053fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053fc:	e040      	b.n	8005480 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80053fe:	4b24      	ldr	r3, [pc, #144]	; (8005490 <vTaskSwitchContext+0xa8>)
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005404:	4b23      	ldr	r3, [pc, #140]	; (8005494 <vTaskSwitchContext+0xac>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e00f      	b.n	800542c <vTaskSwitchContext+0x44>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d109      	bne.n	8005426 <vTaskSwitchContext+0x3e>
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	e7fe      	b.n	8005424 <vTaskSwitchContext+0x3c>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3b01      	subs	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	491a      	ldr	r1, [pc, #104]	; (8005498 <vTaskSwitchContext+0xb0>)
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0e5      	beq.n	800540c <vTaskSwitchContext+0x24>
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <vTaskSwitchContext+0xb0>)
 800544c:	4413      	add	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	3308      	adds	r3, #8
 8005462:	429a      	cmp	r2, r3
 8005464:	d104      	bne.n	8005470 <vTaskSwitchContext+0x88>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <vTaskSwitchContext+0xb4>)
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4a06      	ldr	r2, [pc, #24]	; (8005494 <vTaskSwitchContext+0xac>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6013      	str	r3, [r2, #0]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20004808 	.word	0x20004808
 8005490:	200047f4 	.word	0x200047f4
 8005494:	200047e8 	.word	0x200047e8
 8005498:	20004310 	.word	0x20004310
 800549c:	2000430c 	.word	0x2000430c

080054a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <vTaskPlaceOnEventList+0x24>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e7fe      	b.n	80054c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054c4:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <vTaskPlaceOnEventList+0x44>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3318      	adds	r3, #24
 80054ca:	4619      	mov	r1, r3
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fe fc6a 	bl	8003da6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054d2:	2101      	movs	r1, #1
 80054d4:	6838      	ldr	r0, [r7, #0]
 80054d6:	f000 fa71 	bl	80059bc <prvAddCurrentTaskToDelayedList>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	2000430c 	.word	0x2000430c

080054e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <vTaskPlaceOnEventListRestricted+0x26>
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e7fe      	b.n	800550c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800550e:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <vTaskPlaceOnEventListRestricted+0x50>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3318      	adds	r3, #24
 8005514:	4619      	mov	r1, r3
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7fe fc21 	bl	8003d5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295
 8005526:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	68b8      	ldr	r0, [r7, #8]
 800552c:	f000 fa46 	bl	80059bc <prvAddCurrentTaskToDelayedList>
	}
 8005530:	bf00      	nop
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	2000430c 	.word	0x2000430c

0800553c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d109      	bne.n	8005566 <xTaskRemoveFromEventList+0x2a>
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e7fe      	b.n	8005564 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	3318      	adds	r3, #24
 800556a:	4618      	mov	r0, r3
 800556c:	f7fe fc54 	bl	8003e18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005570:	4b1d      	ldr	r3, [pc, #116]	; (80055e8 <xTaskRemoveFromEventList+0xac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d11d      	bne.n	80055b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	3304      	adds	r3, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe fc4b 	bl	8003e18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	4b19      	ldr	r3, [pc, #100]	; (80055ec <xTaskRemoveFromEventList+0xb0>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d903      	bls.n	8005596 <xTaskRemoveFromEventList+0x5a>
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4a16      	ldr	r2, [pc, #88]	; (80055ec <xTaskRemoveFromEventList+0xb0>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <xTaskRemoveFromEventList+0xb4>)
 80055a4:	441a      	add	r2, r3
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	4610      	mov	r0, r2
 80055ae:	f7fe fbd6 	bl	8003d5e <vListInsertEnd>
 80055b2:	e005      	b.n	80055c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	3318      	adds	r3, #24
 80055b8:	4619      	mov	r1, r3
 80055ba:	480e      	ldr	r0, [pc, #56]	; (80055f4 <xTaskRemoveFromEventList+0xb8>)
 80055bc:	f7fe fbcf 	bl	8003d5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4b0c      	ldr	r3, [pc, #48]	; (80055f8 <xTaskRemoveFromEventList+0xbc>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d905      	bls.n	80055da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055d2:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <xTaskRemoveFromEventList+0xc0>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e001      	b.n	80055de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055de:	697b      	ldr	r3, [r7, #20]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20004808 	.word	0x20004808
 80055ec:	200047e8 	.word	0x200047e8
 80055f0:	20004310 	.word	0x20004310
 80055f4:	200047a0 	.word	0x200047a0
 80055f8:	2000430c 	.word	0x2000430c
 80055fc:	200047f4 	.word	0x200047f4

08005600 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <vTaskInternalSetTimeOutState+0x24>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <vTaskInternalSetTimeOutState+0x28>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	200047f8 	.word	0x200047f8
 8005628:	200047e4 	.word	0x200047e4

0800562c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d109      	bne.n	8005650 <xTaskCheckForTimeOut+0x24>
 800563c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e7fe      	b.n	800564e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <xTaskCheckForTimeOut+0x3e>
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	e7fe      	b.n	8005668 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800566a:	f7fe fd27 	bl	80040bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800566e:	4b1d      	ldr	r3, [pc, #116]	; (80056e4 <xTaskCheckForTimeOut+0xb8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d102      	bne.n	800568e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	e023      	b.n	80056d6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4b15      	ldr	r3, [pc, #84]	; (80056e8 <xTaskCheckForTimeOut+0xbc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d007      	beq.n	80056aa <xTaskCheckForTimeOut+0x7e>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d302      	bcc.n	80056aa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	61fb      	str	r3, [r7, #28]
 80056a8:	e015      	b.n	80056d6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d20b      	bcs.n	80056cc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ff9d 	bl	8005600 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61fb      	str	r3, [r7, #28]
 80056ca:	e004      	b.n	80056d6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056d2:	2301      	movs	r3, #1
 80056d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056d6:	f7fe fd1f 	bl	8004118 <vPortExitCritical>

	return xReturn;
 80056da:	69fb      	ldr	r3, [r7, #28]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3720      	adds	r7, #32
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	200047e4 	.word	0x200047e4
 80056e8:	200047f8 	.word	0x200047f8

080056ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <vTaskMissedYield+0x14>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	200047f4 	.word	0x200047f4

08005704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800570c:	f000 f852 	bl	80057b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005710:	4b06      	ldr	r3, [pc, #24]	; (800572c <prvIdleTask+0x28>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d9f9      	bls.n	800570c <prvIdleTask+0x8>
			{
				taskYIELD();
 8005718:	4b05      	ldr	r3, [pc, #20]	; (8005730 <prvIdleTask+0x2c>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005728:	e7f0      	b.n	800570c <prvIdleTask+0x8>
 800572a:	bf00      	nop
 800572c:	20004310 	.word	0x20004310
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800573a:	2300      	movs	r3, #0
 800573c:	607b      	str	r3, [r7, #4]
 800573e:	e00c      	b.n	800575a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <prvInitialiseTaskLists+0x60>)
 800574c:	4413      	add	r3, r2
 800574e:	4618      	mov	r0, r3
 8005750:	f7fe fad8 	bl	8003d04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3301      	adds	r3, #1
 8005758:	607b      	str	r3, [r7, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b37      	cmp	r3, #55	; 0x37
 800575e:	d9ef      	bls.n	8005740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005760:	480d      	ldr	r0, [pc, #52]	; (8005798 <prvInitialiseTaskLists+0x64>)
 8005762:	f7fe facf 	bl	8003d04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005766:	480d      	ldr	r0, [pc, #52]	; (800579c <prvInitialiseTaskLists+0x68>)
 8005768:	f7fe facc 	bl	8003d04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800576c:	480c      	ldr	r0, [pc, #48]	; (80057a0 <prvInitialiseTaskLists+0x6c>)
 800576e:	f7fe fac9 	bl	8003d04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005772:	480c      	ldr	r0, [pc, #48]	; (80057a4 <prvInitialiseTaskLists+0x70>)
 8005774:	f7fe fac6 	bl	8003d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005778:	480b      	ldr	r0, [pc, #44]	; (80057a8 <prvInitialiseTaskLists+0x74>)
 800577a:	f7fe fac3 	bl	8003d04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800577e:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <prvInitialiseTaskLists+0x78>)
 8005780:	4a05      	ldr	r2, [pc, #20]	; (8005798 <prvInitialiseTaskLists+0x64>)
 8005782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <prvInitialiseTaskLists+0x7c>)
 8005786:	4a05      	ldr	r2, [pc, #20]	; (800579c <prvInitialiseTaskLists+0x68>)
 8005788:	601a      	str	r2, [r3, #0]
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20004310 	.word	0x20004310
 8005798:	20004770 	.word	0x20004770
 800579c:	20004784 	.word	0x20004784
 80057a0:	200047a0 	.word	0x200047a0
 80057a4:	200047b4 	.word	0x200047b4
 80057a8:	200047cc 	.word	0x200047cc
 80057ac:	20004798 	.word	0x20004798
 80057b0:	2000479c 	.word	0x2000479c

080057b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ba:	e019      	b.n	80057f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057bc:	f7fe fc7e 	bl	80040bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <prvCheckTasksWaitingTermination+0x4c>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7fe fb23 	bl	8003e18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <prvCheckTasksWaitingTermination+0x50>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	4a0a      	ldr	r2, [pc, #40]	; (8005804 <prvCheckTasksWaitingTermination+0x50>)
 80057da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <prvCheckTasksWaitingTermination+0x54>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	4a09      	ldr	r2, [pc, #36]	; (8005808 <prvCheckTasksWaitingTermination+0x54>)
 80057e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057e6:	f7fe fc97 	bl	8004118 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f80e 	bl	800580c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <prvCheckTasksWaitingTermination+0x54>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e1      	bne.n	80057bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200047b4 	.word	0x200047b4
 8005804:	200047e0 	.word	0x200047e0
 8005808:	200047c8 	.word	0x200047c8

0800580c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800581a:	2b00      	cmp	r3, #0
 800581c:	d108      	bne.n	8005830 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005822:	4618      	mov	r0, r3
 8005824:	f7fe f95a 	bl	8003adc <vPortFree>
				vPortFree( pxTCB );
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fe f957 	bl	8003adc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800582e:	e017      	b.n	8005860 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005836:	2b01      	cmp	r3, #1
 8005838:	d103      	bne.n	8005842 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7fe f94e 	bl	8003adc <vPortFree>
	}
 8005840:	e00e      	b.n	8005860 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005848:	2b02      	cmp	r3, #2
 800584a:	d009      	beq.n	8005860 <prvDeleteTCB+0x54>
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e7fe      	b.n	800585e <prvDeleteTCB+0x52>
	}
 8005860:	bf00      	nop
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800586e:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <prvResetNextTaskUnblockTime+0x38>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005878:	4b0a      	ldr	r3, [pc, #40]	; (80058a4 <prvResetNextTaskUnblockTime+0x3c>)
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005880:	e008      	b.n	8005894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005882:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <prvResetNextTaskUnblockTime+0x38>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <prvResetNextTaskUnblockTime+0x3c>)
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	20004798 	.word	0x20004798
 80058a4:	20004800 	.word	0x20004800

080058a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058ae:	4b0b      	ldr	r3, [pc, #44]	; (80058dc <xTaskGetSchedulerState+0x34>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d102      	bne.n	80058bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058b6:	2301      	movs	r3, #1
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	e008      	b.n	80058ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058bc:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <xTaskGetSchedulerState+0x38>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058c4:	2302      	movs	r3, #2
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e001      	b.n	80058ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058ca:	2300      	movs	r3, #0
 80058cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058ce:	687b      	ldr	r3, [r7, #4]
	}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	200047ec 	.word	0x200047ec
 80058e0:	20004808 	.word	0x20004808

080058e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d054      	beq.n	80059a4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058fa:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <xTaskPriorityDisinherit+0xcc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	429a      	cmp	r2, r3
 8005902:	d009      	beq.n	8005918 <xTaskPriorityDisinherit+0x34>
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	e7fe      	b.n	8005916 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591c:	2b00      	cmp	r3, #0
 800591e:	d109      	bne.n	8005934 <xTaskPriorityDisinherit+0x50>
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	e7fe      	b.n	8005932 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	429a      	cmp	r2, r3
 8005948:	d02c      	beq.n	80059a4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594e:	2b00      	cmp	r3, #0
 8005950:	d128      	bne.n	80059a4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fa5e 	bl	8003e18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <xTaskPriorityDisinherit+0xd0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d903      	bls.n	8005984 <xTaskPriorityDisinherit+0xa0>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <xTaskPriorityDisinherit+0xd0>)
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <xTaskPriorityDisinherit+0xd4>)
 8005992:	441a      	add	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f7fe f9df 	bl	8003d5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059a4:	697b      	ldr	r3, [r7, #20]
	}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2000430c 	.word	0x2000430c
 80059b4:	200047e8 	.word	0x200047e8
 80059b8:	20004310 	.word	0x20004310

080059bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059c6:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <prvAddCurrentTaskToDelayedList+0x90>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059cc:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe fa20 	bl	8003e18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059de:	d10a      	bne.n	80059f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4619      	mov	r1, r3
 80059ee:	4819      	ldr	r0, [pc, #100]	; (8005a54 <prvAddCurrentTaskToDelayedList+0x98>)
 80059f0:	f7fe f9b5 	bl	8003d5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80059f4:	e026      	b.n	8005a44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4413      	add	r3, r2
 80059fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80059fe:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d209      	bcs.n	8005a22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f7fe f9c3 	bl	8003da6 <vListInsert>
}
 8005a20:	e010      	b.n	8005a44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4610      	mov	r0, r2
 8005a30:	f7fe f9b9 	bl	8003da6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a34:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d202      	bcs.n	8005a44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a3e:	4a08      	ldr	r2, [pc, #32]	; (8005a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6013      	str	r3, [r2, #0]
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200047e4 	.word	0x200047e4
 8005a50:	2000430c 	.word	0x2000430c
 8005a54:	200047cc 	.word	0x200047cc
 8005a58:	2000479c 	.word	0x2000479c
 8005a5c:	20004798 	.word	0x20004798
 8005a60:	20004800 	.word	0x20004800

08005a64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08a      	sub	sp, #40	; 0x28
 8005a68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a6e:	f000 faff 	bl	8006070 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a72:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <xTimerCreateTimerTask+0x80>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d021      	beq.n	8005abe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a82:	1d3a      	adds	r2, r7, #4
 8005a84:	f107 0108 	add.w	r1, r7, #8
 8005a88:	f107 030c 	add.w	r3, r7, #12
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fd ff49 	bl	8003924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	9202      	str	r2, [sp, #8]
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	460a      	mov	r2, r1
 8005aa4:	4910      	ldr	r1, [pc, #64]	; (8005ae8 <xTimerCreateTimerTask+0x84>)
 8005aa6:	4811      	ldr	r0, [pc, #68]	; (8005aec <xTimerCreateTimerTask+0x88>)
 8005aa8:	f7ff f8f6 	bl	8004c98 <xTaskCreateStatic>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <xTimerCreateTimerTask+0x8c>)
 8005ab0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <xTimerCreateTimerTask+0x8c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005aba:	2301      	movs	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <xTimerCreateTimerTask+0x74>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	613b      	str	r3, [r7, #16]
 8005ad6:	e7fe      	b.n	8005ad6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005ad8:	697b      	ldr	r3, [r7, #20]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2000483c 	.word	0x2000483c
 8005ae8:	0800618c 	.word	0x0800618c
 8005aec:	08005c25 	.word	0x08005c25
 8005af0:	20004840 	.word	0x20004840

08005af4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08a      	sub	sp, #40	; 0x28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <xTimerGenericCommand+0x2c>
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
 8005b1e:	e7fe      	b.n	8005b1e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b20:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <xTimerGenericCommand+0x94>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d02a      	beq.n	8005b7e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b05      	cmp	r3, #5
 8005b38:	dc18      	bgt.n	8005b6c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b3a:	f7ff feb5 	bl	80058a8 <xTaskGetSchedulerState>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d109      	bne.n	8005b58 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b44:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <xTimerGenericCommand+0x94>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	f107 0110 	add.w	r1, r7, #16
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b50:	f7fe fccc 	bl	80044ec <xQueueGenericSend>
 8005b54:	6278      	str	r0, [r7, #36]	; 0x24
 8005b56:	e012      	b.n	8005b7e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <xTimerGenericCommand+0x94>)
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	f107 0110 	add.w	r1, r7, #16
 8005b60:	2300      	movs	r3, #0
 8005b62:	2200      	movs	r2, #0
 8005b64:	f7fe fcc2 	bl	80044ec <xQueueGenericSend>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24
 8005b6a:	e008      	b.n	8005b7e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <xTimerGenericCommand+0x94>)
 8005b6e:	6818      	ldr	r0, [r3, #0]
 8005b70:	f107 0110 	add.w	r1, r7, #16
 8005b74:	2300      	movs	r3, #0
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	f7fe fdb2 	bl	80046e0 <xQueueGenericSendFromISR>
 8005b7c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3728      	adds	r7, #40	; 0x28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	2000483c 	.word	0x2000483c

08005b8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af02      	add	r7, sp, #8
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <prvProcessExpiredTimer+0x94>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe f937 	bl	8003e18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d021      	beq.n	8005bfc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	18d1      	adds	r1, r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	6978      	ldr	r0, [r7, #20]
 8005bc6:	f000 f8d1 	bl	8005d6c <prvInsertTimerInActiveList>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01e      	beq.n	8005c0e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff ff8a 	bl	8005af4 <xTimerGenericCommand>
 8005be0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d112      	bne.n	8005c0e <prvProcessExpiredTimer+0x82>
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e7fe      	b.n	8005bfa <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	6978      	ldr	r0, [r7, #20]
 8005c14:	4798      	blx	r3
}
 8005c16:	bf00      	nop
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20004834 	.word	0x20004834

08005c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c2c:	f107 0308 	add.w	r3, r7, #8
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f857 	bl	8005ce4 <prvGetNextExpireTime>
 8005c36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f803 	bl	8005c48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c42:	f000 f8d5 	bl	8005df0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c46:	e7f1      	b.n	8005c2c <prvTimerTask+0x8>

08005c48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c52:	f7ff fa57 	bl	8005104 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f866 	bl	8005d2c <prvSampleTimeNow>
 8005c60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d130      	bne.n	8005cca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <prvProcessTimerOrBlockTask+0x3c>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d806      	bhi.n	8005c84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c76:	f7ff fa53 	bl	8005120 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ff85 	bl	8005b8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005c82:	e024      	b.n	8005cce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <prvProcessTimerOrBlockTask+0x90>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <prvProcessTimerOrBlockTask+0x50>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <prvProcessTimerOrBlockTask+0x52>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <prvProcessTimerOrBlockTask+0x94>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f7fe ffc1 	bl	8004c30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cae:	f7ff fa37 	bl	8005120 <xTaskResumeAll>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <prvProcessTimerOrBlockTask+0x98>)
 8005cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	f3bf 8f6f 	isb	sy
}
 8005cc8:	e001      	b.n	8005cce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cca:	f7ff fa29 	bl	8005120 <xTaskResumeAll>
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20004838 	.word	0x20004838
 8005cdc:	2000483c 	.word	0x2000483c
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <prvGetNextExpireTime+0x44>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <prvGetNextExpireTime+0x16>
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	e000      	b.n	8005cfc <prvGetNextExpireTime+0x18>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <prvGetNextExpireTime+0x44>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e001      	b.n	8005d18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d18:	68fb      	ldr	r3, [r7, #12]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20004834 	.word	0x20004834

08005d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d34:	f7ff fa90 	bl	8005258 <xTaskGetTickCount>
 8005d38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <prvSampleTimeNow+0x3c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d205      	bcs.n	8005d50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d44:	f000 f930 	bl	8005fa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d56:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <prvSampleTimeNow+0x3c>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20004844 	.word	0x20004844

08005d6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d812      	bhi.n	8005db8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	1ad2      	subs	r2, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e01b      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <prvInsertTimerInActiveList+0x7c>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7fd fff8 	bl	8003da6 <vListInsert>
 8005db6:	e012      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d206      	bcs.n	8005dce <prvInsertTimerInActiveList+0x62>
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e007      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <prvInsertTimerInActiveList+0x80>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7fd ffe4 	bl	8003da6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dde:	697b      	ldr	r3, [r7, #20]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20004838 	.word	0x20004838
 8005dec:	20004834 	.word	0x20004834

08005df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b08e      	sub	sp, #56	; 0x38
 8005df4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005df6:	e0c6      	b.n	8005f86 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	da17      	bge.n	8005e2e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005dfe:	1d3b      	adds	r3, r7, #4
 8005e00:	3304      	adds	r3, #4
 8005e02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d109      	bne.n	8005e1e <prvProcessReceivedCommands+0x2e>
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	e7fe      	b.n	8005e1c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e24:	6850      	ldr	r0, [r2, #4]
 8005e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e28:	6892      	ldr	r2, [r2, #8]
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f2c0 80a7 	blt.w	8005f84 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e44:	3304      	adds	r3, #4
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd ffe6 	bl	8003e18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff ff6c 	bl	8005d2c <prvSampleTimeNow>
 8005e54:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b09      	cmp	r3, #9
 8005e5a:	f200 8094 	bhi.w	8005f86 <prvProcessReceivedCommands+0x196>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <prvProcessReceivedCommands+0x74>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e8d 	.word	0x08005e8d
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005e8d 	.word	0x08005e8d
 8005e70:	08005eff 	.word	0x08005eff
 8005e74:	08005f13 	.word	0x08005f13
 8005e78:	08005f5b 	.word	0x08005f5b
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005e8d 	.word	0x08005e8d
 8005e84:	08005eff 	.word	0x08005eff
 8005e88:	08005f13 	.word	0x08005f13
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	18d1      	adds	r1, r2, r3
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eac:	f7ff ff5e 	bl	8005d6c <prvInsertTimerInActiveList>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d067      	beq.n	8005f86 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ebc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d05c      	beq.n	8005f86 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	441a      	add	r2, r3
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ede:	f7ff fe09 	bl	8005af4 <xTimerGenericCommand>
 8005ee2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d14d      	bne.n	8005f86 <prvProcessReceivedCommands+0x196>
 8005eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e7fe      	b.n	8005efc <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005f10:	e039      	b.n	8005f86 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <prvProcessReceivedCommands+0x156>
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	e7fe      	b.n	8005f44 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	699a      	ldr	r2, [r3, #24]
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	18d1      	adds	r1, r2, r3
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f54:	f7ff ff0a 	bl	8005d6c <prvInsertTimerInActiveList>
					break;
 8005f58:	e015      	b.n	8005f86 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d103      	bne.n	8005f70 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f6a:	f7fd fdb7 	bl	8003adc <vPortFree>
 8005f6e:	e00a      	b.n	8005f86 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f76:	f023 0301 	bic.w	r3, r3, #1
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f82:	e000      	b.n	8005f86 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005f84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f86:	4b07      	ldr	r3, [pc, #28]	; (8005fa4 <prvProcessReceivedCommands+0x1b4>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	1d39      	adds	r1, r7, #4
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fc3a 	bl	8004808 <xQueueReceive>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f47f af2e 	bne.w	8005df8 <prvProcessReceivedCommands+0x8>
	}
}
 8005f9c:	bf00      	nop
 8005f9e:	3730      	adds	r7, #48	; 0x30
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	2000483c 	.word	0x2000483c

08005fa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b088      	sub	sp, #32
 8005fac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fae:	e047      	b.n	8006040 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fb0:	4b2d      	ldr	r3, [pc, #180]	; (8006068 <prvSwitchTimerLists+0xc0>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fba:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <prvSwitchTimerLists+0xc0>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fd ff25 	bl	8003e18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d02d      	beq.n	8006040 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4413      	add	r3, r2
 8005fec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d90e      	bls.n	8006014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006002:	4b19      	ldr	r3, [pc, #100]	; (8006068 <prvSwitchTimerLists+0xc0>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fd feca 	bl	8003da6 <vListInsert>
 8006012:	e015      	b.n	8006040 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006014:	2300      	movs	r3, #0
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	2300      	movs	r3, #0
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	2100      	movs	r1, #0
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff fd68 	bl	8005af4 <xTimerGenericCommand>
 8006024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <prvSwitchTimerLists+0x98>
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	603b      	str	r3, [r7, #0]
 800603e:	e7fe      	b.n	800603e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006040:	4b09      	ldr	r3, [pc, #36]	; (8006068 <prvSwitchTimerLists+0xc0>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1b2      	bne.n	8005fb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800604a:	4b07      	ldr	r3, [pc, #28]	; (8006068 <prvSwitchTimerLists+0xc0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006050:	4b06      	ldr	r3, [pc, #24]	; (800606c <prvSwitchTimerLists+0xc4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <prvSwitchTimerLists+0xc0>)
 8006056:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006058:	4a04      	ldr	r2, [pc, #16]	; (800606c <prvSwitchTimerLists+0xc4>)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6013      	str	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20004834 	.word	0x20004834
 800606c:	20004838 	.word	0x20004838

08006070 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006076:	f7fe f821 	bl	80040bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800607a:	4b15      	ldr	r3, [pc, #84]	; (80060d0 <prvCheckForValidListAndQueue+0x60>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d120      	bne.n	80060c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006082:	4814      	ldr	r0, [pc, #80]	; (80060d4 <prvCheckForValidListAndQueue+0x64>)
 8006084:	f7fd fe3e 	bl	8003d04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006088:	4813      	ldr	r0, [pc, #76]	; (80060d8 <prvCheckForValidListAndQueue+0x68>)
 800608a:	f7fd fe3b 	bl	8003d04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <prvCheckForValidListAndQueue+0x6c>)
 8006090:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <prvCheckForValidListAndQueue+0x64>)
 8006092:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <prvCheckForValidListAndQueue+0x70>)
 8006096:	4a10      	ldr	r2, [pc, #64]	; (80060d8 <prvCheckForValidListAndQueue+0x68>)
 8006098:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800609a:	2300      	movs	r3, #0
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <prvCheckForValidListAndQueue+0x74>)
 80060a0:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <prvCheckForValidListAndQueue+0x78>)
 80060a2:	2110      	movs	r1, #16
 80060a4:	200a      	movs	r0, #10
 80060a6:	f7fe f98b 	bl	80043c0 <xQueueGenericCreateStatic>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b08      	ldr	r3, [pc, #32]	; (80060d0 <prvCheckForValidListAndQueue+0x60>)
 80060ae:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060b0:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <prvCheckForValidListAndQueue+0x60>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060b8:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <prvCheckForValidListAndQueue+0x60>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	490b      	ldr	r1, [pc, #44]	; (80060ec <prvCheckForValidListAndQueue+0x7c>)
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe fd8e 	bl	8004be0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060c4:	f7fe f828 	bl	8004118 <vPortExitCritical>
}
 80060c8:	bf00      	nop
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	2000483c 	.word	0x2000483c
 80060d4:	2000480c 	.word	0x2000480c
 80060d8:	20004820 	.word	0x20004820
 80060dc:	20004834 	.word	0x20004834
 80060e0:	20004838 	.word	0x20004838
 80060e4:	200048e8 	.word	0x200048e8
 80060e8:	20004848 	.word	0x20004848
 80060ec:	08006194 	.word	0x08006194

080060f0 <__libc_init_array>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4e0d      	ldr	r6, [pc, #52]	; (8006128 <__libc_init_array+0x38>)
 80060f4:	4c0d      	ldr	r4, [pc, #52]	; (800612c <__libc_init_array+0x3c>)
 80060f6:	1ba4      	subs	r4, r4, r6
 80060f8:	10a4      	asrs	r4, r4, #2
 80060fa:	2500      	movs	r5, #0
 80060fc:	42a5      	cmp	r5, r4
 80060fe:	d109      	bne.n	8006114 <__libc_init_array+0x24>
 8006100:	4e0b      	ldr	r6, [pc, #44]	; (8006130 <__libc_init_array+0x40>)
 8006102:	4c0c      	ldr	r4, [pc, #48]	; (8006134 <__libc_init_array+0x44>)
 8006104:	f000 f82c 	bl	8006160 <_init>
 8006108:	1ba4      	subs	r4, r4, r6
 800610a:	10a4      	asrs	r4, r4, #2
 800610c:	2500      	movs	r5, #0
 800610e:	42a5      	cmp	r5, r4
 8006110:	d105      	bne.n	800611e <__libc_init_array+0x2e>
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006118:	4798      	blx	r3
 800611a:	3501      	adds	r5, #1
 800611c:	e7ee      	b.n	80060fc <__libc_init_array+0xc>
 800611e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006122:	4798      	blx	r3
 8006124:	3501      	adds	r5, #1
 8006126:	e7f2      	b.n	800610e <__libc_init_array+0x1e>
 8006128:	080061d0 	.word	0x080061d0
 800612c:	080061d0 	.word	0x080061d0
 8006130:	080061d0 	.word	0x080061d0
 8006134:	080061d4 	.word	0x080061d4

08006138 <memcpy>:
 8006138:	b510      	push	{r4, lr}
 800613a:	1e43      	subs	r3, r0, #1
 800613c:	440a      	add	r2, r1
 800613e:	4291      	cmp	r1, r2
 8006140:	d100      	bne.n	8006144 <memcpy+0xc>
 8006142:	bd10      	pop	{r4, pc}
 8006144:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800614c:	e7f7      	b.n	800613e <memcpy+0x6>

0800614e <memset>:
 800614e:	4402      	add	r2, r0
 8006150:	4603      	mov	r3, r0
 8006152:	4293      	cmp	r3, r2
 8006154:	d100      	bne.n	8006158 <memset+0xa>
 8006156:	4770      	bx	lr
 8006158:	f803 1b01 	strb.w	r1, [r3], #1
 800615c:	e7f9      	b.n	8006152 <memset+0x4>
	...

08006160 <_init>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	bf00      	nop
 8006164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006166:	bc08      	pop	{r3}
 8006168:	469e      	mov	lr, r3
 800616a:	4770      	bx	lr

0800616c <_fini>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr
